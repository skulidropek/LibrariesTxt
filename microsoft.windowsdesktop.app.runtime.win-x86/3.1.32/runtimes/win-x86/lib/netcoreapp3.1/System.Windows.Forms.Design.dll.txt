internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.ComponentModel.CompModSwitches : object {
    private static TraceSwitch activeX;
    private static TraceSwitch flowLayout;
    private static TraceSwitch dataCursor;
    private static TraceSwitch dataGridCursor;
    private static TraceSwitch dataGridEditing;
    private static TraceSwitch dataGridKeys;
    private static TraceSwitch dataGridLayout;
    private static TraceSwitch dataGridPainting;
    private static TraceSwitch dataGridParents;
    private static TraceSwitch dataGridScrolling;
    private static TraceSwitch dataGridSelection;
    private static TraceSwitch dataObject;
    private static TraceSwitch dataView;
    private static TraceSwitch debugGridView;
    private static TraceSwitch dgCaptionPaint;
    private static TraceSwitch dgEditColumnEditing;
    private static TraceSwitch dgRelationShpRowLayout;
    private static TraceSwitch dgRelationShpRowPaint;
    private static TraceSwitch dgRowPaint;
    private static TraceSwitch dragDrop;
    private static TraceSwitch imeMode;
    private static TraceSwitch msaa;
    private static TraceSwitch msoComponentManager;
    private static TraceSwitch layoutPerformance;
    private static TraceSwitch layoutSuspendResume;
    private static TraceSwitch richLayout;
    private static TraceSwitch setBounds;
    private static BooleanSwitch lifetimeTracing;
    private static TraceSwitch s_handleLeak;
    private static BooleanSwitch s_traceCollect;
    private static BooleanSwitch s_commonDesignerServices;
    public static TraceSwitch ActiveX { get; }
    public static TraceSwitch DataCursor { get; }
    public static TraceSwitch DataGridCursor { get; }
    public static TraceSwitch DataGridEditing { get; }
    public static TraceSwitch DataGridKeys { get; }
    public static TraceSwitch DataGridLayout { get; }
    public static TraceSwitch DataGridPainting { get; }
    public static TraceSwitch DataGridParents { get; }
    public static TraceSwitch DataGridScrolling { get; }
    public static TraceSwitch DataGridSelection { get; }
    public static TraceSwitch DataObject { get; }
    public static TraceSwitch DataView { get; }
    public static TraceSwitch DebugGridView { get; }
    public static TraceSwitch DGCaptionPaint { get; }
    public static TraceSwitch DGEditColumnEditing { get; }
    public static TraceSwitch DGRelationShpRowLayout { get; }
    public static TraceSwitch DGRelationShpRowPaint { get; }
    public static TraceSwitch DGRowPaint { get; }
    public static TraceSwitch DragDrop { get; }
    public static TraceSwitch FlowLayout { get; }
    public static TraceSwitch ImeMode { get; }
    public static TraceSwitch LayoutPerformance { get; }
    public static TraceSwitch LayoutSuspendResume { get; }
    public static BooleanSwitch LifetimeTracing { get; }
    public static TraceSwitch MSAA { get; }
    public static TraceSwitch MSOComponentManager { get; }
    public static TraceSwitch RichLayout { get; }
    public static TraceSwitch SetBounds { get; }
    public static TraceSwitch HandleLeak { get; }
    public static BooleanSwitch TraceCollect { get; }
    public static BooleanSwitch CommonDesignerServices { get; }
    public static TraceSwitch get_ActiveX();
    public static TraceSwitch get_DataCursor();
    public static TraceSwitch get_DataGridCursor();
    public static TraceSwitch get_DataGridEditing();
    public static TraceSwitch get_DataGridKeys();
    public static TraceSwitch get_DataGridLayout();
    public static TraceSwitch get_DataGridPainting();
    public static TraceSwitch get_DataGridParents();
    public static TraceSwitch get_DataGridScrolling();
    public static TraceSwitch get_DataGridSelection();
    public static TraceSwitch get_DataObject();
    public static TraceSwitch get_DataView();
    public static TraceSwitch get_DebugGridView();
    public static TraceSwitch get_DGCaptionPaint();
    public static TraceSwitch get_DGEditColumnEditing();
    public static TraceSwitch get_DGRelationShpRowLayout();
    public static TraceSwitch get_DGRelationShpRowPaint();
    public static TraceSwitch get_DGRowPaint();
    public static TraceSwitch get_DragDrop();
    public static TraceSwitch get_FlowLayout();
    public static TraceSwitch get_ImeMode();
    public static TraceSwitch get_LayoutPerformance();
    public static TraceSwitch get_LayoutSuspendResume();
    public static BooleanSwitch get_LifetimeTracing();
    public static TraceSwitch get_MSAA();
    public static TraceSwitch get_MSOComponentManager();
    public static TraceSwitch get_RichLayout();
    public static TraceSwitch get_SetBounds();
    public static TraceSwitch get_HandleLeak();
    public static BooleanSwitch get_TraceCollect();
    public static BooleanSwitch get_CommonDesignerServices();
}
public class System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DesignSurface <OldSurface>k__BackingField;
    [CompilerGeneratedAttribute]
private DesignSurface <NewSurface>k__BackingField;
    public DesignSurface OldSurface { get; }
    public DesignSurface NewSurface { get; }
    public ActiveDesignSurfaceChangedEventArgs(DesignSurface oldSurface, DesignSurface newSurface);
    [CompilerGeneratedAttribute]
public DesignSurface get_OldSurface();
    [CompilerGeneratedAttribute]
public DesignSurface get_NewSurface();
}
public class System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler : MulticastDelegate {
    public ActiveDesignSurfaceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ActiveDesignSurfaceChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActiveDesignSurfaceChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.BinaryEditor : UITypeEditor {
    private static string HELP_KEYWORD;
    private ITypeDescriptorContext _context;
    private BinaryUI _binaryUI;
    internal object GetService(Type serviceType);
    internal Byte[] ConvertToBytes(object value);
    internal void ConvertToValue(Byte[] bytes, Object& value);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    internal void ShowHelp();
    [CompilerGeneratedAttribute]
private BinaryUI <EditValue>b__6_0();
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class System.ComponentModel.Design.ByteViewer : TableLayoutPanel {
    private static int DEFAULT_COLUMN_COUNT;
    private static int DEFAULT_ROW_COUNT;
    private static int COLUMN_COUNT;
    private static int BORDER_GAP;
    private static int INSET_GAP;
    private static int CELL_HEIGHT;
    private static int CELL_WIDTH;
    private static int CHAR_WIDTH;
    private static int ADDRESS_WIDTH;
    private static int HEX_WIDTH;
    private static int DUMP_WIDTH;
    private static int HEX_DUMP_GAP;
    private static int ADDRESS_START_X;
    private static int CLIENT_START_Y;
    private static int LINE_START_Y;
    private static int HEX_START_X;
    private static int DUMP_START_X;
    private static int SCROLLBAR_START_X;
    private static Font ADDRESS_FONT;
    private static Font HEXDUMP_FONT;
    private int SCROLLBAR_HEIGHT;
    private int SCROLLBAR_WIDTH;
    private VScrollBar _scrollBar;
    private TextBox _edit;
    private int _columnCount;
    private int _rowCount;
    private Byte[] _dataBuf;
    private int _startLine;
    private int _displayLinesCount;
    private int _linesCount;
    private DisplayMode _displayMode;
    private DisplayMode _realDisplayMode;
    private static ByteViewer();
    private static int AnalizeByteOrderMark(Byte[] buffer, int index);
    private int CellToIndex(int column, int row);
    private Byte[] ComposeLineBuffer(int startLine, int line);
    private void DrawAddress(Graphics g, int startLine, int line);
    private void DrawClient(Graphics g);
    private static bool CharIsPrintable(char c);
    private void DrawDump(Graphics g, Byte[] lineBuffer, int line);
    private void DrawHex(Graphics g, Byte[] lineBuffer, int line);
    private void DrawLines(Graphics g, int startLine, int linesCount);
    private DisplayMode GetAutoDisplayMode();
    public virtual Byte[] GetBytes();
    public virtual DisplayMode GetDisplayMode();
    private static int GetEncodingIndex(int c1);
    private void InitAnsi();
    private void InitUnicode();
    private void InitUI();
    private void InitState();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    public virtual void SaveToFile(string path);
    protected virtual void ScrollChanged(object source, EventArgs e);
    public virtual void SetBytes(Byte[] bytes);
    public virtual void SetDisplayMode(DisplayMode mode);
    public virtual void SetFile(string path);
    public virtual void SetStartLine(int line);
}
internal enum System.ComponentModel.Design.CodeMarkerEvent : Enum {
    public int value__;
    public static CodeMarkerEvent perfFXDesignCreateComponentEnd;
    public static CodeMarkerEvent perfFXDesignPropertyBrowserPopulationStart;
    public static CodeMarkerEvent perfFXDesignPropertyBrowserPopulationEnd;
    public static CodeMarkerEvent perfFXDesignShowCode;
    public static CodeMarkerEvent perfFXDesignFromCodeToDesignStart;
    public static CodeMarkerEvent perfFXDesignFromCodeToDesign;
    public static CodeMarkerEvent perfFXDesignFlushStart;
    public static CodeMarkerEvent perfFXDesignFlushEnd;
    public static CodeMarkerEvent perfFXBindEventDesignToCode;
    public static CodeMarkerEvent perfFXGenerateCodeTreeEnd;
    public static CodeMarkerEvent perfFXIntegrateSerializedTreeEnd;
    public static CodeMarkerEvent perfFXOnLoadedStart;
    public static CodeMarkerEvent perfFXOnLoadedEnd;
    public static CodeMarkerEvent perfFXCreateEditorStart;
    public static CodeMarkerEvent perfFXCreateEditorEnd;
    public static CodeMarkerEvent perfFXParseEnd;
    public static CodeMarkerEvent perfFXPerformLoadStart;
    public static CodeMarkerEvent perfFXPerformLoadEnd;
    public static CodeMarkerEvent perfFXEmitMethodEnd;
    public static CodeMarkerEvent perfFXFormatMethodEnd;
    public static CodeMarkerEvent perfFXCodeGenerationEnd;
    public static CodeMarkerEvent perfFXGetDocumentType;
    public static CodeMarkerEvent perfFXDeserializeStart;
    public static CodeMarkerEvent perfFXDeserializeEnd;
    public static CodeMarkerEvent perfFXGetFileDocDataStart;
    public static CodeMarkerEvent perfFXGetFileDocDataEnd;
    public static CodeMarkerEvent perfFXCreateDesignerStart;
    public static CodeMarkerEvent perfFXCreateDesignerEnd;
    public static CodeMarkerEvent perfFXCreateDesignSurface;
    public static CodeMarkerEvent perfFXCreateDesignSurfaceEnd;
    public static CodeMarkerEvent perfFXNotifyStartupServices;
    public static CodeMarkerEvent perfFXNotifyStartupServicesEnd;
    public static CodeMarkerEvent perfFXGetGlobalObjects;
    public static CodeMarkerEvent perfFXGetGlobalObjectsEnd;
    public static CodeMarkerEvent perfFXDesignPropertyBrowserCreate;
    public static CodeMarkerEvent perfFXDesignPropertyBrowserCreateEnd;
    public static CodeMarkerEvent perfFXDesignPropertyBrowserLoadState;
    public static CodeMarkerEvent perfFXDesignPBOnSelectionChanged;
    public static CodeMarkerEvent perfFXDesignPBOnSelectionChangedEnd;
    public static CodeMarkerEvent perfFXDesignElementHostDesignerSetChildEnd;
}
internal class System.ComponentModel.Design.CodeMarkerExStartEnd : ValueType {
    private int _end;
    private Byte[] _aBuff;
    internal CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, Guid guidData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, string stringData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, UInt32 uintData, bool correlated);
    internal CodeMarkerExStartEnd(int begin, int end, ulong ulongData, bool correlated);
    public sealed virtual void Dispose();
}
internal class System.ComponentModel.Design.CodeMarkers : object {
    public static CodeMarkers Instance;
    private static string AtomName;
    private static string TestDllName;
    private static string ProductDllName;
    private State _state;
    private RegistryView _registryView;
    private string _regroot;
    private Nullable`1<bool> _shouldUseTestDll;
    private static Byte[] s_correlationMarkBytes;
    public bool IsEnabled { get; }
    public bool ShouldUseTestDll { get; }
    private static CodeMarkers();
    public bool get_IsEnabled();
    public bool get_ShouldUseTestDll();
    public bool CodeMarker(int nTimerID);
    public bool CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public void SetStateDLLException();
    public bool CodeMarkerEx(int nTimerID, Guid guidData);
    public bool CodeMarkerEx(int nTimerID, string stringData);
    internal static Byte[] StringToBytesZeroTerminated(string stringData);
    public static Byte[] AttachCorrelationId(Byte[] buffer, Guid correlationId);
    public bool CodeMarkerEx(int nTimerID, UInt32 uintData);
    public bool CodeMarkerEx(int nTimerID, ulong ulongData);
    private static bool UsePrivateCodeMarkers(string regRoot, RegistryView registryView);
}
internal class System.ComponentModel.Design.CodeMarkerStartEnd : ValueType {
    private int _end;
    private Byte[] _buffer;
    internal CodeMarkerStartEnd(int begin, int end, bool correlated);
    public sealed virtual void Dispose();
    private void CodeMarker(int id);
}
public class System.ComponentModel.Design.ComponentDesigner : object {
    private IComponent _component;
    private InheritanceAttribute _inheritanceAttribute;
    private Hashtable _inheritedProps;
    private DesignerVerbCollection _verbs;
    private DesignerActionListCollection _actionLists;
    private ShadowPropertyCollection _shadowProperties;
    private bool _settingsKeyExplicitlySet;
    private static CodeMarkers s_codemarkers;
    private protected static string SettingsKeyName;
    public DesignerActionListCollection ActionLists { get; }
    public ICollection AssociatedComponents { get; }
    protected bool Inherited { get; }
    protected IComponent ParentComponent { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    protected ShadowPropertyCollection ShadowProperties { get; }
    public IComponent Component { get; }
    public DesignerVerbCollection Verbs { get; }
    private ICollection System.ComponentModel.Design.ITreeDesigner.Children { get; }
    private IDesigner System.ComponentModel.Design.ITreeDesigner.Parent { get; }
    internal bool IsRootDesigner { get; }
    private string SettingsKey { get; private set; }
    private static ComponentDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual ICollection get_AssociatedComponents();
    internal virtual bool CanBeAssociatedWith(IDesigner parentDesigner);
    protected bool get_Inherited();
    protected virtual IComponent get_ParentComponent();
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    protected ShadowPropertyCollection get_ShadowProperties();
    public virtual void InitializeExistingComponent(IDictionary defaultValues);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(IDictionary properties);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(IDictionary attributes);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(IDictionary events);
    private sealed virtual override void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(IDictionary properties);
    public sealed virtual IComponent get_Component();
    public virtual DesignerVerbCollection get_Verbs();
    private sealed virtual override ICollection System.ComponentModel.Design.ITreeDesigner.get_Children();
    private sealed virtual override IDesigner System.ComponentModel.Design.ITreeDesigner.get_Parent();
    public sealed virtual void Dispose();
    public virtual void DoDefaultAction();
    internal bool get_IsRootDesigner();
    public virtual void Initialize(IComponent component);
    private void InitializeInheritedProperties();
    protected InheritanceAttribute InvokeGetInheritanceAttribute(ComponentDesigner toInvoke);
    protected virtual void Dispose(bool disposing);
    private void OnComponentRename(object sender, ComponentRenameEventArgs e);
    private string get_SettingsKey();
    private void set_SettingsKey(string value);
    private void ResetSettingsKey();
    [ObsoleteAttribute("This method has been deprecated. Use InitializeExistingComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void InitializeNonDefault();
    protected virtual object GetService(Type serviceType);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
    internal virtual void ShowContextMenu(int x, int y);
    protected virtual void PostFilterAttributes(IDictionary attributes);
    protected virtual void PostFilterEvents(IDictionary events);
    protected virtual void PostFilterProperties(IDictionary properties);
    protected virtual void PreFilterAttributes(IDictionary attributes);
    protected virtual void PreFilterEvents(IDictionary events);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected void RaiseComponentChanged(MemberDescriptor member, object oldValue, object newValue);
    protected void RaiseComponentChanging(MemberDescriptor member);
}
public class System.ComponentModel.Design.DesignerActionHeaderItem : DesignerActionTextItem {
    public DesignerActionHeaderItem(string displayName);
    public DesignerActionHeaderItem(string displayName, string category);
}
public abstract class System.ComponentModel.Design.DesignerActionItem : object {
    private IDictionary _properties;
    [CompilerGeneratedAttribute]
private bool <AllowAssociate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInSourceView>k__BackingField;
    public bool AllowAssociate { get; public set; }
    public string Category { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public IDictionary Properties { get; }
    public bool ShowInSourceView { get; public set; }
    public DesignerActionItem(string displayName, string category, string description);
    [CompilerGeneratedAttribute]
public bool get_AllowAssociate();
    [CompilerGeneratedAttribute]
public void set_AllowAssociate(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Category();
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    public IDictionary get_Properties();
    [CompilerGeneratedAttribute]
public bool get_ShowInSourceView();
    [CompilerGeneratedAttribute]
public void set_ShowInSourceView(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignerActionItemCollection : CollectionBase {
    public DesignerActionItem Item { get; public set; }
    public DesignerActionItem get_Item(int index);
    public void set_Item(int index, DesignerActionItem value);
    public int Add(DesignerActionItem value);
    public bool Contains(DesignerActionItem value);
    public void CopyTo(DesignerActionItem[] array, int index);
    public int IndexOf(DesignerActionItem value);
    public void Insert(int index, DesignerActionItem value);
    public void Remove(DesignerActionItem value);
}
public class System.ComponentModel.Design.DesignerActionList : object {
    [CompilerGeneratedAttribute]
private bool <AutoShow>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponent <Component>k__BackingField;
    public bool AutoShow { get; public set; }
    public IComponent Component { get; }
    public DesignerActionList(IComponent component);
    [CompilerGeneratedAttribute]
public virtual bool get_AutoShow();
    [CompilerGeneratedAttribute]
public virtual void set_AutoShow(bool value);
    [CompilerGeneratedAttribute]
public IComponent get_Component();
    public object GetService(Type serviceType);
    public virtual DesignerActionItemCollection GetSortedActionItems();
    private object GetCustomAttribute(MemberInfo info, Type attributeType);
    private void GetMemberDisplayProperties(MemberInfo info, String& displayName, String& description, String& category);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.DesignerActionListCollection : CollectionBase {
    public DesignerActionList Item { get; public set; }
    public DesignerActionListCollection(DesignerActionList[] value);
    public DesignerActionList get_Item(int index);
    public void set_Item(int index, DesignerActionList value);
    public int Add(DesignerActionList value);
    public void AddRange(DesignerActionList[] value);
    public void AddRange(DesignerActionListCollection value);
    public void Insert(int index, DesignerActionList value);
    public int IndexOf(DesignerActionList value);
    public bool Contains(DesignerActionList value);
    public void Remove(DesignerActionList value);
    public void CopyTo(DesignerActionList[] array, int index);
    protected virtual void OnValidate(object value);
}
public class System.ComponentModel.Design.DesignerActionListsChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <RelatedObject>k__BackingField;
    [CompilerGeneratedAttribute]
private DesignerActionListsChangedType <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private DesignerActionListCollection <ActionLists>k__BackingField;
    public object RelatedObject { get; }
    public DesignerActionListsChangedType ChangeType { get; }
    public DesignerActionListCollection ActionLists { get; }
    public DesignerActionListsChangedEventArgs(object relatedObject, DesignerActionListsChangedType changeType, DesignerActionListCollection actionLists);
    [CompilerGeneratedAttribute]
public object get_RelatedObject();
    [CompilerGeneratedAttribute]
public DesignerActionListsChangedType get_ChangeType();
    [CompilerGeneratedAttribute]
public DesignerActionListCollection get_ActionLists();
}
[ComVisibleAttribute("True")]
public class System.ComponentModel.Design.DesignerActionListsChangedEventHandler : MulticastDelegate {
    public DesignerActionListsChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerActionListsChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerActionListsChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.ComponentModel.Design.DesignerActionListsChangedType : Enum {
    public int value__;
    public static DesignerActionListsChangedType ActionListsAdded;
    public static DesignerActionListsChangedType ActionListsRemoved;
}
public class System.ComponentModel.Design.DesignerActionMethodItem : DesignerActionItem {
    private DesignerActionList _actionList;
    private MethodInfo _methodInfo;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponent <RelatedComponent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeAsDesignerVerb>k__BackingField;
    public string MemberName { get; }
    public IComponent RelatedComponent { get; public set; }
    public bool IncludeAsDesignerVerb { get; }
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, string description, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, bool includeAsDesignerVerb);
    public DesignerActionMethodItem(DesignerActionList actionList, string memberName, string displayName, string category, string description);
    [CompilerGeneratedAttribute]
public virtual string get_MemberName();
    [CompilerGeneratedAttribute]
public IComponent get_RelatedComponent();
    [CompilerGeneratedAttribute]
public void set_RelatedComponent(IComponent value);
    [CompilerGeneratedAttribute]
public virtual bool get_IncludeAsDesignerVerb();
    public virtual void Invoke();
}
internal class System.ComponentModel.Design.DesignerActionPanel : ContainerControl {
    private static object s_eventFormActivated;
    private static object s_eventFormDeactivate;
    private static int EditInputWidth;
    private static int ListBoxMaximumHeight;
    private static int MinimumWidth;
    private static int BottomPadding;
    private static int TopPadding;
    private static int LineLeftMargin;
    private static int LineRightMargin;
    private static int LineVerticalPadding;
    private static int TextBoxTopPadding;
    private static int SeparatorHorizontalPadding;
    private static int TextBoxLineCenterMargin;
    private static int TextBoxLineInnerPadding;
    private static int EditorLineSwatchPadding;
    private static int EditorLineButtonPadding;
    private static int PanelHeaderVerticalPadding;
    private static int PanelHeaderHorizontalPadding;
    private static int TextBoxHeightFixup;
    private CommandID[] _filteredCommandIDs;
    private ToolTip _toolTip;
    private List`1<Line> _lines;
    private List`1<int> _lineYPositions;
    private List`1<int> _lineHeights;
    private Color _gradientLightColor;
    private Color _gradientDarkColor;
    private Color _titleBarColor;
    private Color _titleBarUnselectedColor;
    private Color _titleBarTextColor;
    private Color _separatorColor;
    private Color _borderColor;
    private Color _linkColor;
    private Color _activeLinkColor;
    private Color _labelForeColor;
    private IServiceProvider _serviceProvider;
    private bool _inMethodInvoke;
    private bool _updatingTasks;
    private bool _dropDownActive;
    public Color ActiveLinkColor { get; }
    public Color BorderColor { get; }
    private bool DropDownActive { get; }
    public CommandID[] FilteredCommandIDs { get; }
    private Line FocusedLine { get; }
    public Color GradientDarkColor { get; }
    public Color GradientLightColor { get; }
    public bool InMethodInvoke { get; internal set; }
    public Color LinkColor { get; }
    public Color SeparatorColor { get; }
    private IServiceProvider ServiceProvider { get; }
    public Color TitleBarColor { get; }
    public Color TitleBarTextColor { get; }
    public Color TitleBarUnselectedColor { get; }
    public Color LabelForeColor { get; }
    public DesignerActionPanel(IServiceProvider serviceProvider);
    private static DesignerActionPanel();
    public Color get_ActiveLinkColor();
    public Color get_BorderColor();
    private bool get_DropDownActive();
    public CommandID[] get_FilteredCommandIDs();
    private Line get_FocusedLine();
    public Color get_GradientDarkColor();
    public Color get_GradientLightColor();
    public bool get_InMethodInvoke();
    internal void set_InMethodInvoke(bool value);
    public Color get_LinkColor();
    public Color get_SeparatorColor();
    private IServiceProvider get_ServiceProvider();
    public Color get_TitleBarColor();
    public Color get_TitleBarTextColor();
    public Color get_TitleBarUnselectedColor();
    public Color get_LabelForeColor();
    private void add_FormActivated(EventHandler value);
    private void remove_FormActivated(EventHandler value);
    private void add_FormDeactivate(EventHandler value);
    private void remove_FormDeactivate(EventHandler value);
    private void AddToCategories(LineInfo lineInfo, ListDictionary categories);
    public static Point ComputePreferredDesktopLocation(Rectangle rectangleAnchor, Size sizePanel, DockStyle& edgeToDock);
    protected virtual void Dispose(bool disposing);
    private Size DoLayout(Size proposedSize, bool measureOnly);
    public virtual Size GetPreferredSize(Size proposedSize);
    private static bool IsReadOnlyProperty(PropertyDescriptor pd);
    protected virtual void OnFontChanged(EventArgs e);
    private void OnFormActivated(object sender, EventArgs e);
    private void OnFormClosing(object sender, CancelEventArgs e);
    private void OnFormDeactivate(object sender, EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessTabKey(bool forward);
    private void ProcessLists(DesignerActionListCollection lists, ListDictionary categories);
    private IEnumerable`1<LineInfo> ProcessRelatedTaskItems(IComponent relatedComponent);
    private LineInfo ProcessTaskItem(DesignerActionList list, DesignerActionItem item);
    private void SetDropDownActive(bool active);
    private void ShowError(string errorMessage);
    private static string StripAmpersands(string s);
    private void UpdateEditXPos();
    public void UpdateTasks(DesignerActionListCollection actionLists, DesignerActionListCollection serviceActionLists, string title, string subtitle);
}
public class System.ComponentModel.Design.DesignerActionPropertyItem : DesignerActionItem {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private IComponent <RelatedComponent>k__BackingField;
    public string MemberName { get; }
    public IComponent RelatedComponent { get; public set; }
    public DesignerActionPropertyItem(string memberName, string displayName, string category, string description);
    public DesignerActionPropertyItem(string memberName, string displayName);
    public DesignerActionPropertyItem(string memberName, string displayName, string category);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public IComponent get_RelatedComponent();
    [CompilerGeneratedAttribute]
public void set_RelatedComponent(IComponent value);
}
public class System.ComponentModel.Design.DesignerActionService : object {
    private Hashtable _designerActionLists;
    private DesignerActionListsChangedEventHandler _designerActionListsChanged;
    private IServiceProvider _serviceProvider;
    private ISelectionService _selSvc;
    private Hashtable _componentToVerbsEventHookedUp;
    private bool _reEntrantCode;
    public DesignerActionService(IServiceProvider serviceProvider);
    public void add_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value);
    public void remove_DesignerActionListsChanged(DesignerActionListsChangedEventHandler value);
    public void Add(IComponent comp, DesignerActionListCollection designerActionListCollection);
    public void Add(IComponent comp, DesignerActionList actionList);
    public void Clear();
    public bool Contains(IComponent comp);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public DesignerActionListCollection GetComponentActions(IComponent component);
    public virtual DesignerActionListCollection GetComponentActions(IComponent component, ComponentActionsType type);
    protected virtual void GetComponentDesignerActions(IComponent component, DesignerActionListCollection actionLists);
    private void OnVerbStatusChanged(object sender, EventArgs args);
    protected virtual void GetComponentServiceActions(IComponent component, DesignerActionListCollection actionLists);
    private void OnComponentRemoved(object source, ComponentEventArgs ce);
    private void OnDesignerActionListsChanged(DesignerActionListsChangedEventArgs e);
    public void Remove(IComponent comp);
    public void Remove(DesignerActionList actionList);
    public void Remove(IComponent comp, DesignerActionList actionList);
    internal void add_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    internal void remove_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
}
public class System.ComponentModel.Design.DesignerActionTextItem : DesignerActionItem {
    public DesignerActionTextItem(string displayName, string category);
}
internal class System.ComponentModel.Design.DesignerActionToolStripDropDown : ToolStripDropDown {
    private IWin32Window _mainParentWindow;
    private ToolStripControlHost _panel;
    private DesignerActionUI _designerActionUI;
    private bool _cancelClose;
    private Glyph _relatedGlyph;
    public DesignerActionPanel CurrentPanel { get; }
    protected bool TopMost { get; }
    public DesignerActionToolStripDropDown(DesignerActionUI designerActionUI, IWin32Window mainParentWindow);
    public DesignerActionPanel get_CurrentPanel();
    protected virtual bool get_TopMost();
    public void UpdateContainerSize();
    public void CheckFocusIsRight();
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e);
    public void SetDesignerActionPanel(DesignerActionPanel panel, Glyph relatedGlyph);
    private void PanelResized(object sender, EventArgs e);
    protected virtual void SetVisibleCore(bool visible);
    private static bool WindowOwnsWindow(IntPtr hWndOwner, IntPtr hWndDescendant);
    internal static string GetControlInformation(IntPtr hwnd);
    private bool IsWindowEnabled(IntPtr handle);
    private void WmActivate(Message& m);
    protected virtual void WndProc(Message& m);
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.ComponentModel.Design.DesignerActionUI : object {
    private static TraceSwitch s_designeActionPanelTraceSwitch;
    private Adorner _designerActionAdorner;
    private IServiceProvider _serviceProvider;
    private ISelectionService _selSvc;
    private DesignerActionService _designerActionService;
    private DesignerActionUIService _designerActionUIService;
    private BehaviorService _behaviorService;
    private IMenuCommandService _menuCommandService;
    private DesignerActionKeyboardBehavior _dapkb;
    private Hashtable _componentToGlyph;
    private Control _marshalingControl;
    private IComponent _lastPanelComponent;
    private IUIService _uiService;
    private IWin32Window _mainParentWindow;
    internal DesignerActionToolStripDropDown designerActionHost;
    private MenuCommand _cmdShowDesignerActions;
    private bool _inTransaction;
    private IComponent _relatedComponentTransaction;
    private DesignerActionGlyph _relatedGlyphTransaction;
    private bool _disposeActionService;
    private bool _disposeActionUIService;
    internal static TraceSwitch DropDownVisibilityDebug;
    private bool _cancelClose;
    internal bool IsDesignerActionPanelVisible { get; }
    internal IComponent LastPanelComponent { get; }
    public DesignerActionUI(IServiceProvider serviceProvider, Adorner containerAdorner);
    private static DesignerActionUI();
    public sealed virtual void Dispose();
    public DesignerActionGlyph GetDesignerActionGlyph(IComponent comp);
    internal DesignerActionGlyph GetDesignerActionGlyph(IComponent comp, DesignerActionListCollection dalColl);
    private void OnComponentChanged(object source, ComponentChangedEventArgs ce);
    private void RecreatePanel(IComponent comp);
    private void DesignerTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
    private void RecreateInternal(IComponent comp);
    private void RecreatePanel(Glyph glyphWithPanelToRegen);
    private void VerifyGlyphIsInAdorner(DesignerActionGlyph glyph);
    private void OnDesignerActionsChanged(object sender, DesignerActionListsChangedEventArgs e);
    private void OnDesignerActionUIStateChange(object sender, DesignerActionUIStateChangeEventArgs e);
    private void OnInvokedDesignerActionChanged(object sender, DesignerActionListsChangedEventArgs e);
    private void OnKeyShowDesignerActions(object sender, EventArgs e);
    internal bool ShowDesignerActionPanelForPrimarySelection();
    internal void RemoveActionGlyph(object relatedObject);
    private void InvalidateGlyphOnLastTransaction(object sender, DesignerTransactionCloseEventArgs e);
    internal void HideDesignerActionPanel();
    internal bool get_IsDesignerActionPanelVisible();
    internal IComponent get_LastPanelComponent();
    private void ToolStripDropDown_Closing(object sender, ToolStripDropDownClosingEventArgs e);
    internal Point UpdateDAPLocation(IComponent component, DesignerActionGlyph glyph);
    private Point GetGlyphLocationScreenCoord(IComponent relatedComponent, Glyph glyph);
    internal void ShowDesignerActionPanel(IComponent relatedComponent, DesignerActionPanel panel, DesignerActionGlyph glyph);
    private void OnShowComplete(object sender, EventArgs e);
}
public class System.ComponentModel.Design.DesignerActionUIService : object {
    private DesignerActionUIStateChangeEventHandler _designerActionUIStateChangedEventHandler;
    private IServiceProvider _serviceProvider;
    private DesignerActionService _designerActionService;
    internal DesignerActionUIService(IServiceProvider serviceProvider);
    public sealed virtual void Dispose();
    public void add_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    public void remove_DesignerActionUIStateChange(DesignerActionUIStateChangeEventHandler value);
    public void HideUI(IComponent component);
    public void ShowUI(IComponent component);
    public void Refresh(IComponent component);
    private void OnDesignerActionUIStateChange(DesignerActionUIStateChangeEventArgs e);
    public bool ShouldAutoShow(IComponent component);
}
public class System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <RelatedObject>k__BackingField;
    [CompilerGeneratedAttribute]
private DesignerActionUIStateChangeType <ChangeType>k__BackingField;
    public object RelatedObject { get; }
    public DesignerActionUIStateChangeType ChangeType { get; }
    public DesignerActionUIStateChangeEventArgs(object relatedObject, DesignerActionUIStateChangeType changeType);
    [CompilerGeneratedAttribute]
public object get_RelatedObject();
    [CompilerGeneratedAttribute]
public DesignerActionUIStateChangeType get_ChangeType();
}
public class System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler : MulticastDelegate {
    public DesignerActionUIStateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerActionUIStateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerActionUIStateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.ComponentModel.Design.DesignerActionUIStateChangeType : Enum {
    public int value__;
    public static DesignerActionUIStateChangeType Show;
    public static DesignerActionUIStateChangeType Hide;
    public static DesignerActionUIStateChangeType Refresh;
}
internal class System.ComponentModel.Design.DesignerActionVerbItem : DesignerActionMethodItem {
    private DesignerVerb _targetVerb;
    public string Category { get; }
    public string DisplayName { get; }
    public DesignerActionVerbItem(DesignerVerb verb);
    public virtual string get_Category();
    public virtual string get_DisplayName();
    public virtual void Invoke();
}
internal class System.ComponentModel.Design.DesignerActionVerbList : DesignerActionList {
    private DesignerVerb[] _verbs;
    public bool AutoShow { get; }
    public DesignerActionVerbList(DesignerVerb[] verbs);
    public virtual bool get_AutoShow();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
public class System.ComponentModel.Design.DesignerCommandSet : object {
    private protected static string VerbsCommand;
    private protected static string ActionListsCommand;
    public DesignerVerbCollection Verbs { get; }
    public DesignerActionListCollection ActionLists { get; }
    public virtual ICollection GetCommands(string name);
    public DesignerVerbCollection get_Verbs();
    public DesignerActionListCollection get_ActionLists();
}
internal class System.ComponentModel.Design.DesignerEventService : object {
    private static object s_eventActiveDesignerChanged;
    private static object s_eventDesignerCreated;
    private static object s_eventDesignerDisposed;
    private static object s_eventSelectionChanged;
    private ArrayList _designerList;
    private DesignerCollection _designerCollection;
    private IDesignerHost _activeDesigner;
    private EventHandlerList _events;
    private bool _inTransaction;
    private bool _deferredSelChange;
    private IDesignerHost System.ComponentModel.Design.IDesignerEventService.ActiveDesigner { get; }
    private DesignerCollection System.ComponentModel.Design.IDesignerEventService.Designers { get; }
    private static DesignerEventService();
    internal void OnActivateDesigner(DesignSurface surface);
    private void OnComponentAddedRemoved(object sender, ComponentEventArgs ce);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs ce);
    internal void OnCreateDesigner(DesignSurface surface);
    private void OnDesignerDisposed(object sender, EventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    private void OnLoadComplete(object sender, EventArgs e);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
    private void OnTransactionOpened(object sender, EventArgs e);
    private void SinkChangeEvents(IServiceProvider provider, bool sink);
    private sealed virtual override IDesignerHost System.ComponentModel.Design.IDesignerEventService.get_ActiveDesigner();
    private sealed virtual override DesignerCollection System.ComponentModel.Design.IDesignerEventService.get_Designers();
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_DesignerCreated(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_DesignerCreated(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_DesignerDisposed(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_DesignerDisposed(DesignerEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.add_SelectionChanged(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerEventService.remove_SelectionChanged(EventHandler value);
}
internal class System.ComponentModel.Design.DesignerHost : Container {
    private static int s_stateLoading;
    private static int s_stateUnloading;
    private static int s_stateIsClosingTransaction;
    private static Type[] s_defaultServices;
    private static object s_eventActivated;
    private static object s_eventDeactivated;
    private static object s_eventLoadComplete;
    private static object s_eventTransactionClosed;
    private static object s_eventTransactionClosing;
    private static object s_eventTransactionOpened;
    private static object s_eventTransactionOpening;
    private static object s_eventComponentAdding;
    private static object s_eventComponentAdded;
    private static object s_eventComponentChanging;
    private static object s_eventComponentChanged;
    private static object s_eventComponentRemoving;
    private static object s_eventComponentRemoved;
    private static object s_eventComponentRename;
    private BitVector32 _state;
    private DesignSurface _surface;
    private string _newComponentName;
    private Stack _transactions;
    private IComponent _rootComponent;
    private string _rootComponentClassName;
    private Hashtable _designers;
    private EventHandlerList _events;
    private DesignerLoader _loader;
    private ICollection _savedSelection;
    private HostDesigntimeLicenseContext _licenseCtx;
    private IDesignerEventService _designerEventService;
    private static object s_selfLock;
    private bool _ignoreErrorsDuringReload;
    private bool _canReloadWithErrors;
    private TypeDescriptionProviderService _typeService;
    private bool _typeServiceChecked;
    internal HostDesigntimeLicenseContext LicenseContext { get; }
    internal bool IsClosingTransaction { get; internal set; }
    private bool System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction { get; }
    private bool System.ComponentModel.Design.IDesignerHost.Loading { get; }
    private bool System.ComponentModel.Design.IDesignerHost.InTransaction { get; }
    private IContainer System.ComponentModel.Design.IDesignerHost.Container { get; }
    private IComponent System.ComponentModel.Design.IDesignerHost.RootComponent { get; }
    private string System.ComponentModel.Design.IDesignerHost.RootComponentClassName { get; }
    private string System.ComponentModel.Design.IDesignerHost.TransactionDescription { get; }
    private bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload { get; private set; }
    private bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors { get; private set; }
    private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    public DesignerHost(DesignSurface surface);
    private static DesignerHost();
    internal HostDesigntimeLicenseContext get_LicenseContext();
    internal bool get_IsClosingTransaction();
    internal void set_IsClosingTransaction(bool value);
    private sealed virtual override bool System.ComponentModel.Design.IDesignerHostTransactionState.get_IsClosingTransaction();
    public virtual void Add(IComponent component, string name);
    private void PerformAdd(IComponent component, string name);
    internal bool AddToContainerPreProcess(IComponent component, string name, IContainer containerToAddTo);
    internal void AddToContainerPostProcess(IComponent component, string name, IContainer containerToAddTo);
    internal void BeginLoad(DesignerLoader loader);
    protected virtual ISite CreateSite(IComponent component, string name);
    protected virtual void Dispose(bool disposing);
    internal void DisposeHost();
    internal void Flush();
    protected virtual object GetService(Type service);
    private void OnActiveDesignerChanged(object sender, ActiveDesignerEventArgs e);
    private void OnComponentRename(IComponent component, string oldName, string newName);
    private void OnLoadComplete(EventArgs e);
    private void OnTransactionClosed(DesignerTransactionCloseEventArgs e);
    private void OnTransactionClosing(DesignerTransactionCloseEventArgs e);
    private void OnTransactionOpened(EventArgs e);
    private void OnTransactionOpening(EventArgs e);
    public virtual void Remove(IComponent component);
    internal bool RemoveFromContainerPreProcess(IComponent component, IContainer container);
    internal void RemoveFromContainerPostProcess(IComponent component, IContainer container);
    private void Unload();
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentAdded(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdded(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentAdding(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdding(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentChanged(ComponentChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanged(ComponentChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentChanging(ComponentChangingEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanging(ComponentChangingEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoved(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoved(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoving(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoving(ComponentEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.add_ComponentRename(ComponentRenameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.remove_ComponentRename(ComponentRenameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(object component, MemberDescriptor member, object oldValue, object newValue);
    private sealed virtual override void System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(object component, MemberDescriptor member);
    private sealed virtual override bool System.ComponentModel.Design.IDesignerHost.get_Loading();
    private sealed virtual override bool System.ComponentModel.Design.IDesignerHost.get_InTransaction();
    private sealed virtual override IContainer System.ComponentModel.Design.IDesignerHost.get_Container();
    private sealed virtual override IComponent System.ComponentModel.Design.IDesignerHost.get_RootComponent();
    private sealed virtual override string System.ComponentModel.Design.IDesignerHost.get_RootComponentClassName();
    private sealed virtual override string System.ComponentModel.Design.IDesignerHost.get_TransactionDescription();
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_Activated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_Activated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_Deactivated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_Deactivated(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_LoadComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_LoadComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionClosed(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionClosed(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionClosing(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionClosing(DesignerTransactionCloseEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionOpened(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionOpened(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.add_TransactionOpening(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.remove_TransactionOpening(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.Activate();
    private sealed virtual override IComponent System.ComponentModel.Design.IDesignerHost.CreateComponent(Type componentType);
    private sealed virtual override IComponent System.ComponentModel.Design.IDesignerHost.CreateComponent(Type componentType, string name);
    private sealed virtual override DesignerTransaction System.ComponentModel.Design.IDesignerHost.CreateTransaction();
    private sealed virtual override DesignerTransaction System.ComponentModel.Design.IDesignerHost.CreateTransaction(string description);
    private sealed virtual override void System.ComponentModel.Design.IDesignerHost.DestroyComponent(IComponent component);
    private sealed virtual override IDesigner System.ComponentModel.Design.IDesignerHost.GetDesigner(IComponent component);
    private sealed virtual override Type System.ComponentModel.Design.IDesignerHost.GetType(string typeName);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(string rootClassName, bool successful, ICollection errorCollection);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload();
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.get_IgnoreErrorsDuringReload();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.set_IgnoreErrorsDuringReload(bool value);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.get_CanReloadWithErrors();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.set_CanReloadWithErrors(bool value);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, object serviceInstance, bool promote);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType);
    private sealed virtual override void System.ComponentModel.Design.IServiceContainer.RemoveService(Type serviceType, bool promote);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class System.ComponentModel.Design.DesignSurface : object {
    private IServiceProvider _parentProvider;
    private ServiceContainer _serviceContainer;
    private DesignerHost _host;
    private ICollection _loadErrors;
    private bool _loaded;
    [CompilerGeneratedAttribute]
private bool <DtelLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    [CompilerGeneratedAttribute]
private EventHandler Flushed;
    [CompilerGeneratedAttribute]
private LoadedEventHandler Loaded;
    [CompilerGeneratedAttribute]
private EventHandler Loading;
    [CompilerGeneratedAttribute]
private EventHandler Unloaded;
    [CompilerGeneratedAttribute]
private EventHandler Unloading;
    [CompilerGeneratedAttribute]
private EventHandler ViewActivated;
    public IContainer ComponentContainer { get; }
    public bool IsLoaded { get; }
    public ICollection LoadErrors { get; }
    public bool DtelLoading { get; public set; }
    protected ServiceContainer ServiceContainer { get; }
    public object View { get; }
    public DesignSurface(IServiceProvider parentProvider);
    public DesignSurface(Type rootComponentType);
    public DesignSurface(IServiceProvider parentProvider, Type rootComponentType);
    public IContainer get_ComponentContainer();
    public bool get_IsLoaded();
    public ICollection get_LoadErrors();
    [CompilerGeneratedAttribute]
public bool get_DtelLoading();
    [CompilerGeneratedAttribute]
public void set_DtelLoading(bool value);
    protected ServiceContainer get_ServiceContainer();
    public object get_View();
    [CompilerGeneratedAttribute]
public void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Flushed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Flushed(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Loaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Loaded(LoadedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Loading(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Loading(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Unloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Unloaded(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Unloading(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Unloading(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ViewActivated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ViewActivated(EventHandler value);
    public void BeginLoad(DesignerLoader loader);
    public void BeginLoad(Type rootComponentType);
    [ObsoleteAttribute("CreateComponent has been replaced by CreateInstance and will be removed after Beta2")]
protected internal virtual IComponent CreateComponent(Type componentType);
    protected internal virtual IDesigner CreateDesigner(IComponent component, bool rootDesigner);
    protected internal virtual object CreateInstance(Type type);
    public INestedContainer CreateNestedContainer(IComponent owningComponent);
    public INestedContainer CreateNestedContainer(IComponent owningComponent, string containerName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Flush();
    public sealed virtual object GetService(Type serviceType);
    internal void OnViewActivate();
    private object OnCreateService(IServiceContainer container, Type serviceType);
    internal void OnLoaded(bool successful, ICollection errors);
    protected virtual void OnLoaded(LoadedEventArgs e);
    internal void OnLoading();
    protected virtual void OnLoading(EventArgs e);
    internal void OnUnloaded();
    protected virtual void OnUnloaded(EventArgs e);
    internal void OnUnloading();
    protected virtual void OnUnloading(EventArgs e);
    protected virtual void OnViewActivate(EventArgs e);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignSurfaceCollection : object {
    private DesignerCollection _designers;
    public int Count { get; }
    public DesignSurface Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal DesignSurfaceCollection(DesignerCollection designers);
    public int get_Count();
    public DesignSurface get_Item(int index);
    public IEnumerator GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(DesignSurface[] array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.ComponentModel.Design.DesignSurfaceEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DesignSurface <Surface>k__BackingField;
    public DesignSurface Surface { get; }
    public DesignSurfaceEventArgs(DesignSurface surface);
    [CompilerGeneratedAttribute]
public DesignSurface get_Surface();
}
public class System.ComponentModel.Design.DesignSurfaceEventHandler : MulticastDelegate {
    public DesignSurfaceEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignSurfaceEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignSurfaceEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.DesignSurfaceManager : object {
    private IServiceProvider _parentProvider;
    private ServiceContainer _serviceContainer;
    private ActiveDesignSurfaceChangedEventHandler _activeDesignSurfaceChanged;
    private DesignSurfaceEventHandler _designSurfaceCreated;
    private DesignSurfaceEventHandler _designSurfaceDisposed;
    private EventHandler _selectionChanged;
    public DesignSurface ActiveDesignSurface { get; public set; }
    public DesignSurfaceCollection DesignSurfaces { get; }
    private IDesignerEventService EventService { get; }
    protected ServiceContainer ServiceContainer { get; }
    public DesignSurfaceManager(IServiceProvider parentProvider);
    public virtual DesignSurface get_ActiveDesignSurface();
    public virtual void set_ActiveDesignSurface(DesignSurface value);
    public DesignSurfaceCollection get_DesignSurfaces();
    private IDesignerEventService get_EventService();
    protected ServiceContainer get_ServiceContainer();
    public void add_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value);
    public void remove_ActiveDesignSurfaceChanged(ActiveDesignSurfaceChangedEventHandler value);
    public void add_DesignSurfaceCreated(DesignSurfaceEventHandler value);
    public void remove_DesignSurfaceCreated(DesignSurfaceEventHandler value);
    public void add_DesignSurfaceDisposed(DesignSurfaceEventHandler value);
    public void remove_DesignSurfaceDisposed(DesignSurfaceEventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public DesignSurface CreateDesignSurface();
    public DesignSurface CreateDesignSurface(IServiceProvider parentProvider);
    protected virtual DesignSurface CreateDesignSurfaceCore(IServiceProvider parentProvider);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual object GetService(Type serviceType);
    private object OnCreateService(IServiceContainer container, Type serviceType);
    private void OnActiveDesignerChanged(object sender, ActiveDesignerEventArgs e);
    private void OnDesignerCreated(object sender, DesignerEventArgs e);
    private void OnDesignerDisposed(object sender, DesignerEventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
}
internal class System.ComponentModel.Design.DesignSurfaceServiceContainer : ServiceContainer {
    private Hashtable _fixedServices;
    internal DesignSurfaceServiceContainer(IServiceProvider parentProvider);
    internal void AddFixedService(Type serviceType, object serviceInstance);
    internal void RemoveFixedService(Type serviceType);
    public virtual void RemoveService(Type serviceType, bool promote);
}
public enum System.ComponentModel.Design.DisplayMode : Enum {
    public int value__;
    public static DisplayMode Hexdump;
    public static DisplayMode Ansi;
    public static DisplayMode Unicode;
    public static DisplayMode Auto;
}
public abstract class System.ComponentModel.Design.EventBindingService : object {
    private IServiceProvider _provider;
    private IComponent _showCodeComponent;
    private EventDescriptor _showCodeEventDescriptor;
    private string _showCodeMethodName;
    private static CodeMarkers s_codemarker;
    protected EventBindingService(IServiceProvider provider);
    private static EventBindingService();
    protected abstract virtual string CreateUniqueMethodName(IComponent component, EventDescriptor e);
    protected virtual void FreeMethod(IComponent component, EventDescriptor e, string methodName);
    protected abstract virtual ICollection GetCompatibleMethods(EventDescriptor e);
    protected object GetService(Type serviceType);
    protected abstract virtual bool ShowCode();
    protected abstract virtual bool ShowCode(int lineNumber);
    protected abstract virtual bool ShowCode(IComponent component, EventDescriptor e, string methodName);
    protected virtual void UseMethod(IComponent component, EventDescriptor e, string methodName);
    protected virtual void ValidateMethodName(string methodName);
    private sealed virtual override string System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(IComponent component, EventDescriptor e);
    private sealed virtual override ICollection System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(EventDescriptor e);
    private sealed virtual override EventDescriptor System.ComponentModel.Design.IEventBindingService.GetEvent(PropertyDescriptor property);
    private bool HasGenericArgument(EventDescriptor ed);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.IEventBindingService.GetEventProperties(EventDescriptorCollection events);
    private sealed virtual override PropertyDescriptor System.ComponentModel.Design.IEventBindingService.GetEventProperty(EventDescriptor e);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode();
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode(int lineNumber);
    private sealed virtual override bool System.ComponentModel.Design.IEventBindingService.ShowCode(IComponent component, EventDescriptor e);
    private void ShowCodeIdle(object sender, EventArgs e);
}
public class System.ComponentModel.Design.ExceptionCollection : Exception {
    private ArrayList _exceptions;
    public ArrayList Exceptions { get; }
    public ExceptionCollection(ArrayList exceptions);
    public ArrayList get_Exceptions();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.ComponentModel.Design.ExtenderProviderService : object {
    private ArrayList _providers;
    private sealed virtual override IExtenderProvider[] System.ComponentModel.Design.IExtenderListService.GetExtenderProviders();
    private sealed virtual override void System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(IExtenderProvider provider);
    private sealed virtual override void System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(IExtenderProvider provider);
}
internal class System.ComponentModel.Design.HostDesigntimeLicenseContext : DesigntimeLicenseContext {
    private IServiceProvider _provider;
    public HostDesigntimeLicenseContext(IServiceProvider provider);
    public virtual object GetService(Type serviceClass);
}
public interface System.ComponentModel.Design.IMultitargetHelperService {
    public abstract virtual string GetAssemblyQualifiedName(Type type);
}
public class System.ComponentModel.Design.InheritanceService : object {
    private static TraceSwitch s_inheritanceServiceSwitch;
    private Hashtable _inheritedComponents;
    private IComponent _addingComponent;
    private InheritanceAttribute _addingAttribute;
    private static InheritanceService();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void AddInheritedComponents(IComponent component, IContainer container);
    protected virtual void AddInheritedComponents(Type type, IComponent component, IContainer container);
    protected virtual bool IgnoreInheritedMember(MemberInfo member, IComponent component);
    public sealed virtual InheritanceAttribute GetInheritanceAttribute(IComponent component);
    private void OnComponentAdding(object sender, ComponentEventArgs ce);
    private static Type GetReflectionTypeFromTypeHelper(Type type);
    private static TypeDescriptionProvider GetTargetFrameworkProviderForType(Type type);
}
internal class System.ComponentModel.Design.InheritedPropertyDescriptor : PropertyDescriptor {
    private PropertyDescriptor propertyDescriptor;
    private object _defaultValue;
    private static object s_noDefault;
    private bool _initShouldSerialize;
    private object _originalValue;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    internal object OriginalValue { get; }
    internal PropertyDescriptor PropertyDescriptor { get; internal set; }
    public Type PropertyType { get; }
    public InheritedPropertyDescriptor(PropertyDescriptor propertyDescriptor, object component);
    private static InheritedPropertyDescriptor();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    internal object get_OriginalValue();
    internal PropertyDescriptor get_PropertyDescriptor();
    internal void set_PropertyDescriptor(PropertyDescriptor value);
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    private object ClonedDefaultValue(object value);
    protected virtual void FillAttributes(IList attributeList);
    public virtual object GetValue(object component);
    private void InitInheritedDefaultValue(object component);
    public virtual void ResetValue(object component);
    private void SaveOriginalValue(object value);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public class System.ComponentModel.Design.LoadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <HasSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection <Errors>k__BackingField;
    public bool HasSucceeded { get; }
    public ICollection Errors { get; }
    public LoadedEventArgs(bool succeeded, ICollection errors);
    [CompilerGeneratedAttribute]
public bool get_HasSucceeded();
    [CompilerGeneratedAttribute]
public ICollection get_Errors();
}
public class System.ComponentModel.Design.LoadedEventHandler : MulticastDelegate {
    public LoadedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LoadedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LoadedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1036")]
public class System.ComponentModel.Design.ProjectTargetFrameworkAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TargetFrameworkMoniker>k__BackingField;
    public string TargetFrameworkMoniker { get; }
    public ProjectTargetFrameworkAttribute(string targetFrameworkMoniker);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkMoniker();
}
internal class System.ComponentModel.Design.ReferenceService : object {
    private static Attribute[] _attributes;
    private IServiceProvider _provider;
    private ArrayList _addedComponents;
    private ArrayList _removedComponents;
    private ArrayList _references;
    private bool _populating;
    internal ReferenceService(IServiceProvider provider);
    private static ReferenceService();
    private void CreateReferences(IComponent component);
    private void CreateReferences(string trailingName, object reference, IComponent sitedComponent);
    private void EnsureReferences();
    private void OnComponentAdded(object sender, ComponentEventArgs cevent);
    private void OnComponentRemoved(object sender, ComponentEventArgs cevent);
    private void OnComponentRename(object sender, ComponentRenameEventArgs cevent);
    private void RemoveReferences(IComponent component);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override IComponent System.ComponentModel.Design.IReferenceService.GetComponent(object reference);
    private sealed virtual override string System.ComponentModel.Design.IReferenceService.GetName(object reference);
    private sealed virtual override object System.ComponentModel.Design.IReferenceService.GetReference(string name);
    private sealed virtual override Object[] System.ComponentModel.Design.IReferenceService.GetReferences();
    private sealed virtual override Object[] System.ComponentModel.Design.IReferenceService.GetReferences(Type baseType);
}
internal class System.ComponentModel.Design.SelectionService : object {
    private static String[] s_selectionKeywords;
    private static int s_stateTransaction;
    private static int s_stateTransactionChange;
    private static object s_eventSelectionChanging;
    private static object s_eventSelectionChanged;
    private IServiceProvider _provider;
    private BitVector32 _state;
    private EventHandlerList _events;
    private ArrayList _selection;
    private String[] _contextAttributes;
    private short _contextKeyword;
    private StatusCommandUI _statusCommandUI;
    internal object PrimarySelection { get; }
    private object System.ComponentModel.Design.ISelectionService.PrimarySelection { get; }
    private int System.ComponentModel.Design.ISelectionService.SelectionCount { get; }
    internal SelectionService(IServiceProvider provider);
    private static SelectionService();
    internal void AddSelection(object sel);
    private void FlushSelectionChanges();
    private object GetService(Type serviceType);
    private void OnComponentRemove(object sender, ComponentEventArgs ce);
    private void OnSelectionChanged();
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
    private void OnTransactionOpened(object sender, EventArgs e);
    internal object get_PrimarySelection();
    internal void RemoveSelection(object sel);
    private void ApplicationIdle(object source, EventArgs args);
    private void UpdateHelpKeyword(bool tryLater);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override object System.ComponentModel.Design.ISelectionService.get_PrimarySelection();
    private sealed virtual override int System.ComponentModel.Design.ISelectionService.get_SelectionCount();
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.add_SelectionChanged(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.remove_SelectionChanged(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.add_SelectionChanging(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.remove_SelectionChanging(EventHandler value);
    private sealed virtual override bool System.ComponentModel.Design.ISelectionService.GetComponentSelected(object component);
    private sealed virtual override ICollection System.ComponentModel.Design.ISelectionService.GetSelectedComponents();
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.SetSelectedComponents(ICollection components);
    private sealed virtual override void System.ComponentModel.Design.ISelectionService.SetSelectedComponents(ICollection components, SelectionTypes selectionType);
}
public abstract class System.ComponentModel.Design.Serialization.BasicDesignerLoader : DesignerLoader {
    private static int s_stateLoaded;
    private static int s_stateLoadFailed;
    private static int s_stateFlushInProgress;
    private static int s_stateModified;
    private static int s_stateReloadSupported;
    private static int s_stateActiveDocument;
    private static int s_stateDeferredReload;
    private static int s_stateReloadAtIdle;
    private static int s_stateForceReload;
    private static int s_stateFlushReload;
    private static int s_stateModifyIfErrors;
    private static int s_stateEnableComponentEvents;
    private BitVector32 _state;
    private IDesignerLoaderHost _host;
    private int _loadDependencyCount;
    private string _baseComponentClassName;
    private bool _hostInitialized;
    private bool _loading;
    private DesignerSerializationManager _serializationManager;
    private IDisposable _serializationSession;
    protected bool Modified { get; protected set; }
    protected IDesignerLoaderHost LoaderHost { get; }
    public bool Loading { get; }
    protected object PropertyProvider { get; protected set; }
    protected bool ReloadPending { get; }
    private static BasicDesignerLoader();
    protected virtual bool get_Modified();
    protected virtual void set_Modified(bool value);
    protected IDesignerLoaderHost get_LoaderHost();
    public virtual bool get_Loading();
    protected object get_PropertyProvider();
    protected void set_PropertyProvider(object value);
    protected bool get_ReloadPending();
    public virtual void BeginLoad(IDesignerLoaderHost host);
    public virtual void Dispose();
    public virtual void Flush();
    protected object GetService(Type serviceType);
    protected virtual void Initialize();
    protected virtual bool IsReloadNeeded();
    protected virtual void OnBeginLoad();
    protected virtual bool EnableComponentNotification(bool enable);
    protected virtual void OnBeginUnload();
    private void OnComponentAdded(object sender, ComponentEventArgs e);
    private void OnComponentAdding(object sender, ComponentEventArgs e);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    private void OnComponentChanging(object sender, ComponentChangingEventArgs e);
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
    private void OnComponentRemoving(object sender, ComponentEventArgs e);
    private void OnComponentRename(object sender, ComponentRenameEventArgs e);
    private void OnDesignerActivate(object sender, EventArgs e);
    private void OnDesignerDeactivate(object sender, EventArgs e);
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    protected virtual void OnModifying();
    private void OnIdle(object sender, EventArgs e);
    protected abstract virtual void PerformFlush(IDesignerSerializationManager serializationManager);
    protected abstract virtual void PerformLoad(IDesignerSerializationManager serializationManager);
    protected void Reload(ReloadOptions flags);
    protected virtual void ReportFlushErrors(ICollection errors);
    protected void SetBaseComponentClassName(string name);
    private void ThrowMissingService(Type serviceType);
    private void UnloadDocument();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(bool successful, ICollection errorCollection);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload();
}
public class System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService : ComponentSerializationService {
    private IServiceProvider _provider;
    public CodeDomComponentSerializationService(IServiceProvider provider);
    public virtual SerializationStore CreateStore();
    public virtual SerializationStore LoadStore(Stream stream);
    public virtual void Serialize(SerializationStore store, object value);
    public virtual void SerializeAbsolute(SerializationStore store, object value);
    public virtual void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member);
    public virtual ICollection Deserialize(SerializationStore store);
    public virtual ICollection Deserialize(SerializationStore store, IContainer container);
    public virtual void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults);
}
public abstract class System.ComponentModel.Design.Serialization.CodeDomDesignerLoader : BasicDesignerLoader {
    private static TraceSwitch s_traceCDLoader;
    private static CodeMarkers s_codemarkers;
    private static int s_stateCodeDomDirty;
    private static int s_stateCodeParserChecked;
    private static int s_stateOwnTypeResolution;
    private BitVector32 _state;
    private IExtenderProvider[] _extenderProviders;
    private IExtenderProviderService _extenderProviderService;
    private ICodeGenerator _codeGenerator;
    private CodeDomSerializer _rootSerializer;
    private TypeCodeDomSerializer _typeSerializer;
    private CodeCompileUnit _documentCompileUnit;
    private CodeNamespace _documentNamespace;
    private CodeTypeDeclaration _documentType;
    protected CodeDomProvider CodeDomProvider { get; }
    protected ITypeResolutionService TypeResolutionService { get; }
    private static CodeDomDesignerLoader();
    protected abstract virtual CodeDomProvider get_CodeDomProvider();
    protected abstract virtual ITypeResolutionService get_TypeResolutionService();
    private void ClearDocument();
    public virtual void Dispose();
    private bool HasRootDesignerAttribute(Type t);
    private void EnsureDocument(IDesignerSerializationManager manager);
    private bool IntegrateSerializedTree(IDesignerSerializationManager manager, CodeTypeDeclaration newDecl);
    protected virtual void Initialize();
    protected virtual bool IsReloadNeeded();
    protected virtual void OnBeginLoad();
    protected virtual void OnBeginUnload();
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
    private void OnComponentRename(object sender, ComponentRenameEventArgs e);
    private object OnCreateService(IServiceContainer container, Type serviceType);
    protected virtual void OnEndLoad(bool successful, ICollection errors);
    protected abstract virtual CodeCompileUnit Parse();
    protected virtual void PerformFlush(IDesignerSerializationManager manager);
    protected virtual void PerformLoad(IDesignerSerializationManager manager);
    protected virtual void OnComponentRename(object component, string oldName, string newName);
    private void RemoveDeclaration(string name);
    private void ThrowMissingService(Type serviceType);
    private static bool TypesEqual(CodeTypeReference typeLeft, CodeTypeReference typeRight);
    protected abstract virtual void Write(CodeCompileUnit unit);
    private sealed virtual override ICollection System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(object serializationData);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(ICollection objects);
    private sealed virtual override string System.ComponentModel.Design.Serialization.INameCreationService.CreateName(IContainer container, Type dataType);
    private sealed virtual override bool System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(string name);
    private sealed virtual override void System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(string name);
}
public enum System.ComponentModel.Design.Serialization.CodeDomLocalizationModel : Enum {
    public int value__;
    public static CodeDomLocalizationModel None;
    public static CodeDomLocalizationModel PropertyAssignment;
    public static CodeDomLocalizationModel PropertyReflection;
}
public class System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider : object {
    private IExtenderProviderService _providerService;
    private CodeDomLocalizationModel _model;
    private CultureInfo[] _supportedCultures;
    private LanguageExtenders _extender;
    private Hashtable _memberSerializers;
    private Hashtable _nopMemberSerializers;
    public CodeDomLocalizationProvider(IServiceProvider provider, CodeDomLocalizationModel model);
    public CodeDomLocalizationProvider(IServiceProvider provider, CodeDomLocalizationModel model, CultureInfo[] supportedCultures);
    public sealed virtual void Dispose();
    private void Initialize(IServiceProvider provider);
    private object GetCodeDomSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
    private object GetMemberCodeDomSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
internal class System.ComponentModel.Design.Serialization.CodeDomSerializationProvider : object {
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
    private object GetCodeDomSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
    private object GetMemberCodeDomSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
    private object GetTypeCodeDomSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
[DefaultSerializationProviderAttribute("System.ComponentModel.Design.Serialization.CodeDomSerializationProvider")]
public class System.ComponentModel.Design.Serialization.CodeDomSerializer : CodeDomSerializerBase {
    private static CodeDomSerializer s_default;
    private static Attribute[] _runTimeFilter;
    private static Attribute[] _designTimeFilter;
    private static CodeThisReferenceExpression _thisRef;
    internal static CodeDomSerializer Default { get; }
    private static CodeDomSerializer();
    internal static CodeDomSerializer get_Default();
    public virtual string GetTargetComponentName(CodeStatement statement, CodeExpression expression, Type targetType);
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    protected object DeserializeStatementToInstance(IDesignerSerializationManager manager, CodeStatement statement);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    public virtual object SerializeAbsolute(IDesignerSerializationManager manager, object value);
    public virtual CodeStatementCollection SerializeMember(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member);
    public virtual CodeStatementCollection SerializeMemberAbsolute(IDesignerSerializationManager manager, object owningObject, MemberDescriptor member);
    [ObsoleteAttribute("This method has been deprecated. Use SerializeToExpression or GetExpression instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected CodeExpression SerializeToReferenceExpression(IDesignerSerializationManager manager, object value);
    private void ResetBrowsableProperties(object instance);
}
[EditorBrowsableAttribute("1")]
public abstract class System.ComponentModel.Design.Serialization.CodeDomSerializerBase : object {
    private static Attribute[] runTimeProperties;
    private static CodeThisReferenceExpression thisRef;
    private static TraceSwitch traceSerialization;
    private static Stack traceScope;
    private static CodeDomSerializerBase();
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    internal static string GetTypeNameFromCodeTypeReference(IDesignerSerializationManager manager, CodeTypeReference typeref);
    private static string GetTypeNameFromCodeTypeReferenceHelper(IDesignerSerializationManager manager, CodeTypeReference typeref);
    protected static TypeDescriptionProvider GetTargetFrameworkProvider(IServiceProvider provider, object instance);
    protected static Type GetReflectionTypeFromTypeHelper(IDesignerSerializationManager manager, Type type);
    internal static void Error(IDesignerSerializationManager manager, string exceptionText, string helpLink);
    private static TypeDescriptionProvider GetTargetFrameworkProviderForType(IServiceProvider provider, Type type);
    protected static Type GetReflectionTypeHelper(IDesignerSerializationManager manager, object instance);
    protected static PropertyDescriptorCollection GetPropertiesHelper(IDesignerSerializationManager manager, object instance, Attribute[] attributes);
    protected static EventDescriptorCollection GetEventsHelper(IDesignerSerializationManager manager, object instance, Attribute[] attributes);
    protected static AttributeCollection GetAttributesHelper(IDesignerSerializationManager manager, object instance);
    protected static AttributeCollection GetAttributesFromTypeHelper(IDesignerSerializationManager manager, Type type);
    protected void DeserializePropertiesFromResources(IDesignerSerializationManager manager, object value, Attribute[] filter);
    internal static IDisposable TraceScope(string name);
    [ConditionalAttribute("DEBUG")]
internal static void TraceIf(bool condition, string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void Trace(string message, Object[] values);
    protected void DeserializeStatement(IDesignerSerializationManager manager, CodeStatement statement);
    private void DeserializeVariableDeclarationStatement(IDesignerSerializationManager manager, CodeVariableDeclarationStatement statement);
    private void DeserializeDetachEventStatement(IDesignerSerializationManager manager, CodeRemoveEventStatement statement);
    private void DeserializeAssignStatement(IDesignerSerializationManager manager, CodeAssignStatement statement);
    [ConditionalAttribute("DEBUG")]
internal static void TraceError(string message, Object[] values);
    protected object DeserializeExpression(IDesignerSerializationManager manager, string name, CodeExpression expression);
    private void DeserializeAttachEventStatement(IDesignerSerializationManager manager, CodeAttachEventStatement statement);
    private object ExecuteBinaryExpression(IConvertible left, IConvertible right, CodeBinaryOperatorType op);
    private object ExecuteBinaryOperator(IConvertible left, IConvertible right, CodeBinaryOperatorType op);
    private object ExecuteBooleanOperator(IConvertible left, IConvertible right, CodeBinaryOperatorType op);
    private object ExecuteMathOperator(IConvertible left, IConvertible right, CodeBinaryOperatorType op);
    private object DeserializePropertyReferenceExpression(IDesignerSerializationManager manager, CodePropertyReferenceExpression propertyReferenceEx, bool reportError);
    [ConditionalAttribute("DEBUG")]
internal static void TraceErrorIf(bool condition, string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void TraceWarningIf(bool condition, string message, Object[] values);
    [ConditionalAttribute("DEBUG")]
internal static void TraceWarning(string message, Object[] values);
    private bool DeserializePropertyAssignStatement(IDesignerSerializationManager manager, CodeAssignStatement statement, CodePropertyReferenceExpression propertyReferenceEx, bool reportError);
    protected CodeExpression GetExpression(IDesignerSerializationManager manager, object value);
    protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, object value);
    protected CodeDomSerializer GetSerializer(IDesignerSerializationManager manager, Type valueType);
    protected bool IsSerialized(IDesignerSerializationManager manager, object value);
    protected bool IsSerialized(IDesignerSerializationManager manager, object value, bool honorPreset);
    protected CodeExpression SerializeCreationExpression(IDesignerSerializationManager manager, object value, Boolean& isComplete);
    private CodeExpression SerializeInstanceDescriptor(IDesignerSerializationManager manager, object value, InstanceDescriptor descriptor);
    protected string GetUniqueName(IDesignerSerializationManager manager, object value);
    protected void SerializeEvent(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, EventDescriptor descriptor);
    protected void SerializeEvents(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializeProperties(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    private PropertyDescriptorCollection GetFilteredProperties(IDesignerSerializationManager manager, object value, Attribute[] filter);
    protected void SerializePropertiesToResources(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, Attribute[] filter);
    protected void SerializeProperty(IDesignerSerializationManager manager, CodeStatementCollection statements, object value, PropertyDescriptor propertyToSerialize);
    protected void SerializeResource(IDesignerSerializationManager manager, string resourceName, object value);
    protected void SerializeResourceInvariant(IDesignerSerializationManager manager, string resourceName, object value);
    protected CodeExpression SerializeToExpression(IDesignerSerializationManager manager, object value);
    private CodeExpression GetLegacyExpression(IDesignerSerializationManager manager, object value);
    private void SetLegacyExpression(IDesignerSerializationManager manager, object value);
    protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value);
    protected CodeExpression SerializeToResourceExpression(IDesignerSerializationManager manager, object value, bool ensureInvariant);
    protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression);
    protected void SetExpression(IDesignerSerializationManager manager, object value, CodeExpression expression, bool isPreset);
    internal static void FillStatementTable(IDesignerSerializationManager manager, IDictionary table, CodeStatementCollection statements);
    internal static void FillStatementTable(IDesignerSerializationManager manager, IDictionary table, Dictionary`2<string, string> names, CodeStatementCollection statements, string className);
    internal static Type GetType(IDesignerSerializationManager manager, string name, Dictionary`2<string, string> names);
    private static void AddStatement(IDictionary table, string name, CodeStatement statement);
}
public class System.ComponentModel.Design.Serialization.CodeDomSerializerException : SystemException {
    [CompilerGeneratedAttribute]
private CodeLinePragma <LinePragma>k__BackingField;
    public CodeLinePragma LinePragma { get; }
    public CodeDomSerializerException(string message, CodeLinePragma linePragma);
    public CodeDomSerializerException(Exception ex, CodeLinePragma linePragma);
    public CodeDomSerializerException(string message, IDesignerSerializationManager manager);
    public CodeDomSerializerException(Exception ex, IDesignerSerializationManager manager);
    [CompilerGeneratedAttribute]
public CodeLinePragma get_LinePragma();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.ComponentModel.Design.Serialization.CodeMethodMap : object {
    private CodeStatementCollection _container;
    private CodeStatementCollection _begin;
    private CodeStatementCollection _end;
    private CodeStatementCollection _statements;
    private CodeStatementCollection _locals;
    private CodeStatementCollection _fields;
    private CodeStatementCollection _variables;
    private CodeStatementCollection _targetStatements;
    private CodeMemberMethod _method;
    internal CodeStatementCollection BeginStatements { get; }
    internal CodeStatementCollection EndStatements { get; }
    internal CodeStatementCollection ContainerStatements { get; }
    internal CodeMemberMethod Method { get; }
    internal CodeStatementCollection Statements { get; }
    internal CodeStatementCollection LocalVariables { get; }
    internal CodeStatementCollection FieldAssignments { get; }
    internal CodeStatementCollection VariableAssignments { get; }
    internal CodeMethodMap(CodeMemberMethod method);
    internal CodeMethodMap(CodeStatementCollection targetStatements, CodeMemberMethod method);
    internal CodeStatementCollection get_BeginStatements();
    internal CodeStatementCollection get_EndStatements();
    internal CodeStatementCollection get_ContainerStatements();
    internal CodeMemberMethod get_Method();
    internal CodeStatementCollection get_Statements();
    internal CodeStatementCollection get_LocalVariables();
    internal CodeStatementCollection get_FieldAssignments();
    internal CodeStatementCollection get_VariableAssignments();
    internal void Add(CodeStatementCollection statements);
    internal void Combine();
}
public class System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer : CodeDomSerializer {
    private static CollectionCodeDomSerializer s_defaultSerializer;
    internal static CollectionCodeDomSerializer Default { get; }
    internal static CollectionCodeDomSerializer get_Default();
    private ICollection GetCollectionDelta(ICollection original, ICollection modified);
    protected bool MethodSupportsSerialization(MethodInfo method);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    private static MethodInfo ChooseMethodByType(TypeDescriptionProvider provider, List`1<MethodInfo> methods, ICollection values);
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
    private CodeArrayCreateExpression SerializeArray(IDesignerSerializationManager manager, Type targetType, ICollection array, ICollection valuesToSerialize);
    private object SerializeViaAdd(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, Type elementType, ICollection valuesToSerialize);
    private object SerializeViaAddRange(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, Type elementType, ICollection valuesToSerialize);
    private bool ShouldClearCollection(IDesignerSerializationManager manager, ICollection collection);
}
[DefaultMemberAttribute("Item")]
internal class System.ComponentModel.Design.Serialization.ComponentCache : object {
    private Dictionary`2<object, Entry> _cache;
    private IDesignerSerializationManager _serManager;
    private bool _enabled;
    internal bool Enabled { get; }
    internal Entry Item { get; internal set; }
    internal ComponentCache(IDesignerSerializationManager manager);
    internal bool get_Enabled();
    internal Entry get_Item(object component);
    internal void set_Item(object component, Entry value);
    internal Entry GetEntryAll(object component);
    internal bool ContainsLocalName(string name);
    public sealed virtual void Dispose();
    private void OnComponentRename(object source, ComponentRenameEventArgs args);
    private void OnComponentChanging(object source, ComponentChangingEventArgs ce);
    private void OnComponentChanged(object source, ComponentChangedEventArgs ce);
    private void OnComponentRemove(object source, ComponentEventArgs ce);
    internal void RemoveEntry(object component);
}
internal class System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer : CodeDomSerializer {
    private Type[] _containerConstructor;
    private static Attribute[] _runTimeFilter;
    private static Attribute[] _designTimeFilter;
    private static WeakReference s_defaultSerializerRef;
    internal static ComponentCodeDomSerializer Default { get; }
    private static ComponentCodeDomSerializer();
    private Type[] GetContainerConstructor(IDesignerSerializationManager manager);
    internal static ComponentCodeDomSerializer get_Default();
    private bool CanCacheComponent(IDesignerSerializationManager manager, object value, PropertyDescriptorCollection props);
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    private void SerializeLoadComponentSettings(IDesignerSerializationManager manager, CodeStatementCollection statements, CodeExpression valueExpression, object value);
    private void SerializeSupportInitialize(IDesignerSerializationManager manager, CodeStatementCollection statements, CodeExpression valueExpression, object value, string methodName);
}
internal class System.ComponentModel.Design.Serialization.ComponentTypeCodeDomSerializer : TypeCodeDomSerializer {
    private static object _initMethodKey;
    private static string _initMethodName;
    private static ComponentTypeCodeDomSerializer s_default;
    internal static ComponentTypeCodeDomSerializer Default { get; }
    private static ComponentTypeCodeDomSerializer();
    internal static ComponentTypeCodeDomSerializer get_Default();
    protected virtual CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl, object value);
    protected virtual CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration typeDecl);
}
internal class System.ComponentModel.Design.Serialization.ContainerCodeDomSerializer : CodeDomSerializer {
    private static string _containerName;
    private static ContainerCodeDomSerializer s_defaultSerializer;
    internal static ContainerCodeDomSerializer Default { get; }
    internal static ContainerCodeDomSerializer get_Default();
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public class System.ComponentModel.Design.Serialization.DesignerSerializationManager : object {
    private IServiceProvider provider;
    private ITypeResolutionService typeResolver;
    private bool searchedTypeResolver;
    private bool recycleInstances;
    private bool validateRecycledTypes;
    private bool preserveNames;
    private IContainer container;
    private IDisposable session;
    private ResolveNameEventHandler resolveNameEventHandler;
    private EventHandler serializationCompleteEventHandler;
    private EventHandler sessionCreatedEventHandler;
    private EventHandler sessionDisposedEventHandler;
    private ArrayList designerSerializationProviders;
    private Hashtable defaultProviderTable;
    private Hashtable instancesByName;
    private Hashtable namesByInstance;
    private Hashtable serializers;
    private ArrayList errorList;
    private ContextStack contextStack;
    private PropertyDescriptorCollection properties;
    private object propertyProvider;
    public IContainer Container { get; public set; }
    public IList Errors { get; }
    public bool PreserveNames { get; public set; }
    public object PropertyProvider { get; public set; }
    public bool RecycleInstances { get; public set; }
    public bool ValidateRecycledTypes { get; public set; }
    private ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }
    private PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }
    internal ArrayList SerializationProviders { get; }
    public DesignerSerializationManager(IServiceProvider provider);
    public IContainer get_Container();
    public void set_Container(IContainer value);
    public IList get_Errors();
    public bool get_PreserveNames();
    public void set_PreserveNames(bool value);
    public object get_PropertyProvider();
    public void set_PropertyProvider(object value);
    public bool get_RecycleInstances();
    public void set_RecycleInstances(bool value);
    public bool get_ValidateRecycledTypes();
    public void set_ValidateRecycledTypes(bool value);
    public void add_SessionCreated(EventHandler value);
    public void remove_SessionCreated(EventHandler value);
    public void add_SessionDisposed(EventHandler value);
    public void remove_SessionDisposed(EventHandler value);
    private void CheckNoSession();
    private void CheckSession();
    protected virtual object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    public IDisposable CreateSession();
    public object GetSerializer(Type objectType, Type serializerType);
    protected virtual object GetService(Type serviceType);
    protected virtual Type GetType(string typeName);
    public Type GetRuntimeType(string typeName);
    protected virtual void OnResolveName(ResolveNameEventArgs e);
    protected virtual void OnSessionCreated(EventArgs e);
    protected virtual void OnSessionDisposed(EventArgs e);
    private PropertyDescriptor WrapProperty(PropertyDescriptor property, object owner);
    private sealed virtual override ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Context();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.get_Properties();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_ResolveName(ResolveNameEventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.add_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.remove_SerializationComplete(EventHandler value);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider provider);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(string name);
    private sealed virtual override string System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(object value);
    private sealed virtual override object System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type objectType, Type serializerType);
    private sealed virtual override Type System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(string typeName);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider provider);
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(object errorInformation);
    internal ArrayList get_SerializationProviders();
    private sealed virtual override void System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(object instance, string name);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal class System.ComponentModel.Design.Serialization.EnumCodeDomSerializer : CodeDomSerializer {
    private static EnumCodeDomSerializer s_defaultSerializer;
    internal static EnumCodeDomSerializer Default { get; }
    internal static EnumCodeDomSerializer get_Default();
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.ComponentModel.Design.Serialization.EventMemberCodeDomSerializer : MemberCodeDomSerializer {
    private static CodeThisReferenceExpression _thisRef;
    private static EventMemberCodeDomSerializer s_default;
    internal static EventMemberCodeDomSerializer Default { get; }
    private static EventMemberCodeDomSerializer();
    internal static EventMemberCodeDomSerializer get_Default();
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
public class System.ComponentModel.Design.Serialization.ExpressionContext : object {
    [CompilerGeneratedAttribute]
private CodeExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExpressionType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private object <PresetValue>k__BackingField;
    public CodeExpression Expression { get; }
    public Type ExpressionType { get; }
    public object Owner { get; }
    public object PresetValue { get; }
    public ExpressionContext(CodeExpression expression, Type expressionType, object owner, object presetValue);
    public ExpressionContext(CodeExpression expression, Type expressionType, object owner);
    [CompilerGeneratedAttribute]
public CodeExpression get_Expression();
    [CompilerGeneratedAttribute]
public Type get_ExpressionType();
    [CompilerGeneratedAttribute]
public object get_Owner();
    [CompilerGeneratedAttribute]
public object get_PresetValue();
}
internal class System.ComponentModel.Design.Serialization.ExpressionTable : object {
    private Hashtable _expressions;
    private Hashtable Expressions { get; }
    private Hashtable get_Expressions();
    internal void SetExpression(object value, CodeExpression expression, bool isPreset);
    internal CodeExpression GetExpression(object value);
    internal bool ContainsPresetExpression(object value);
}
public interface System.ComponentModel.Design.Serialization.ICodeDomDesignerReload {
    public abstract virtual bool ShouldReloadDesigner(CodeCompileUnit newTree);
}
internal class System.ComponentModel.Design.Serialization.LocalizationCodeDomSerializer : CodeDomSerializer {
    private CodeDomLocalizationModel _model;
    private CodeDomSerializer _currentSerializer;
    internal LocalizationCodeDomSerializer(CodeDomLocalizationModel model, object currentSerializer);
    private bool EmitApplyMethod(IDesignerSerializationManager manager, object owner);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
public abstract class System.ComponentModel.Design.Serialization.MemberCodeDomSerializer : CodeDomSerializerBase {
    public abstract virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    public abstract virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Serialization.ObjectStatementCollection : object {
    private List`1<TableEntry> _table;
    private int _version;
    public CodeStatementCollection Item { get; }
    private void AddOwner(object statementOwner, CodeStatementCollection statements);
    public CodeStatementCollection get_Item(object statementOwner);
    public bool ContainsKey(object statementOwner);
    public IDictionaryEnumerator GetEnumerator();
    public void Populate(ICollection statementOwners);
    public void Populate(object owner);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer : CodeDomSerializer {
    private static PrimitiveCodeDomSerializer s_defaultSerializer;
    internal static PrimitiveCodeDomSerializer Default { get; }
    internal static PrimitiveCodeDomSerializer get_Default();
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.ComponentModel.Design.Serialization.PropertyMemberCodeDomSerializer : MemberCodeDomSerializer {
    private static PropertyMemberCodeDomSerializer s_default;
    internal static PropertyMemberCodeDomSerializer Default { get; }
    internal static PropertyMemberCodeDomSerializer get_Default();
    private object GetPropertyValue(IDesignerSerializationManager manager, PropertyDescriptor property, object value, Boolean& validValue);
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    private void SerializeContentProperty(IDesignerSerializationManager manager, object value, PropertyDescriptor property, bool isExtender, CodeStatementCollection statements);
    private void SerializeExtenderProperty(IDesignerSerializationManager manager, object value, PropertyDescriptor property, CodeStatementCollection statements);
    private void SerializeNormalProperty(IDesignerSerializationManager manager, object value, PropertyDescriptor property, CodeStatementCollection statements);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
internal class System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer : CodeDomSerializer {
    private static ResourceCodeDomSerializer s_defaultSerializer;
    internal static ResourceCodeDomSerializer Default { get; }
    private string ResourceManagerName { get; }
    internal static ResourceCodeDomSerializer get_Default();
    public virtual string GetTargetComponentName(CodeStatement statement, CodeExpression expression, Type type);
    private string get_ResourceManagerName();
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    private SerializationResourceManager CreateResourceManager(IDesignerSerializationManager manager);
    protected virtual object DeserializeInstance(IDesignerSerializationManager manager, Type type, Object[] parameters, string name, bool addToContainer);
    public object DeserializeInvariant(IDesignerSerializationManager manager, string resourceName);
    private Type GetCastType(IDesignerSerializationManager manager, object value);
    public IDictionaryEnumerator GetEnumerator(IDesignerSerializationManager manager, CultureInfo culture);
    public IDictionaryEnumerator GetMetadataEnumerator(IDesignerSerializationManager manager);
    private SerializationResourceManager GetResourceManager(IDesignerSerializationManager manager);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    public object Serialize(IDesignerSerializationManager manager, object value, bool shouldSerializeInvariant);
    public object Serialize(IDesignerSerializationManager manager, object value, bool shouldSerializeInvariant, bool ensureInvariant);
    private object Serialize(IDesignerSerializationManager manager, object value, bool forceInvariant, bool shouldSerializeInvariant, bool ensureInvariant);
    public object SerializeInvariant(IDesignerSerializationManager manager, object value, bool shouldSerializeValue);
    public void SerializeMetadata(IDesignerSerializationManager manager, string name, object value, bool shouldSerializeValue);
    public void WriteResource(IDesignerSerializationManager manager, string name, object value);
    public void WriteResourceInvariant(IDesignerSerializationManager manager, string name, object value);
    private void SetValueUsingCommonTraceScope(IDesignerSerializationManager manager, string name, object value, string calleeName, bool forceInvariant, bool shouldSerializeInvariant, bool ensureInvariant, bool applyingCachedResources);
    internal void ApplyCacheEntry(IDesignerSerializationManager manager, Entry entry);
}
internal class System.ComponentModel.Design.Serialization.ResourcePropertyMemberCodeDomSerializer : MemberCodeDomSerializer {
    private CodeDomLocalizationModel _model;
    private MemberCodeDomSerializer _serializer;
    private LanguageExtenders _extender;
    private CultureInfo localizationLanguage;
    internal ResourcePropertyMemberCodeDomSerializer(MemberCodeDomSerializer serializer, LanguageExtenders extender, CodeDomLocalizationModel model);
    public virtual void Serialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor, CodeStatementCollection statements);
    private CultureInfo GetLocalizationLanguage(IDesignerSerializationManager manager);
    private void OnSerializationComplete(object sender, EventArgs e);
    public virtual bool ShouldSerialize(IDesignerSerializationManager manager, object value, MemberDescriptor descriptor);
}
public class System.ComponentModel.Design.Serialization.RootContext : object {
    [CompilerGeneratedAttribute]
private CodeExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public CodeExpression Expression { get; }
    public object Value { get; }
    public RootContext(CodeExpression expression, object value);
    [CompilerGeneratedAttribute]
public CodeExpression get_Expression();
    [CompilerGeneratedAttribute]
public object get_Value();
}
public class System.ComponentModel.Design.Serialization.SerializeAbsoluteContext : object {
    [CompilerGeneratedAttribute]
private MemberDescriptor <Member>k__BackingField;
    public MemberDescriptor Member { get; }
    public SerializeAbsoluteContext(MemberDescriptor member);
    [CompilerGeneratedAttribute]
public MemberDescriptor get_Member();
    public bool ShouldSerialize(MemberDescriptor member);
}
public class System.ComponentModel.Design.Serialization.StatementContext : object {
    private ObjectStatementCollection _statements;
    public ObjectStatementCollection StatementCollection { get; }
    public ObjectStatementCollection get_StatementCollection();
}
[DefaultSerializationProviderAttribute("System.ComponentModel.Design.Serialization.CodeDomSerializationProvider")]
public class System.ComponentModel.Design.Serialization.TypeCodeDomSerializer : CodeDomSerializerBase {
    private IDictionary _nameTable;
    private Dictionary`2<string, OrderedCodeStatementCollection> _statementTable;
    private static Attribute[] s_designTimeFilter;
    private static Attribute[] s_runTimeFilter;
    private static object s_initMethodKey;
    private static TypeCodeDomSerializer s_default;
    internal static TypeCodeDomSerializer Default { get; }
    private static TypeCodeDomSerializer();
    internal static TypeCodeDomSerializer get_Default();
    public virtual object Deserialize(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
    private object DeserializeName(IDesignerSerializationManager manager, string name, CodeStatementCollection statements);
    protected virtual CodeMemberMethod GetInitializeMethod(IDesignerSerializationManager manager, CodeTypeDeclaration declaration, object value);
    protected virtual CodeMemberMethod[] GetInitializeMethods(IDesignerSerializationManager manager, CodeTypeDeclaration declaration);
    private void OnResolveName(object sender, ResolveNameEventArgs e);
    public virtual CodeTypeDeclaration Serialize(IDesignerSerializationManager manager, object root, ICollection members);
    private void IntegrateStatements(IDesignerSerializationManager manager, object root, ICollection members, StatementContext statementCxt, CodeTypeDeclaration typeDecl);
}
internal class System.ComponentModel.Design.SiteNestedContainer : NestedContainer {
    private DesignerHost _host;
    private IServiceContainer _services;
    private string _containerName;
    private bool _safeToCallOwner;
    protected string OwnerName { get; }
    internal SiteNestedContainer(IComponent owner, string containerName, DesignerHost host);
    protected virtual string get_OwnerName();
    public virtual void Add(IComponent component, string name);
    protected virtual ISite CreateSite(IComponent component, string name);
    public virtual void Remove(IComponent component);
    protected virtual object GetService(Type serviceType);
    internal object GetServiceInternal(Type serviceType);
}
internal class System.ComponentModel.Design.StatusCommandUI : object {
    private MenuCommand _statusRectCommand;
    private IMenuCommandService _menuService;
    private IServiceProvider _serviceProvider;
    private IMenuCommandService MenuService { get; }
    private MenuCommand StatusRectCommand { get; }
    public StatusCommandUI(IServiceProvider provider);
    private IMenuCommandService get_MenuService();
    private MenuCommand get_StatusRectCommand();
    public void SetStatusInformation(Component selectedComponent, Point location);
    public void SetStatusInformation(Component selectedComponent);
    public void SetStatusInformation(Rectangle bounds);
}
internal class System.ComponentModel.Design.TypeDescriptorFilterService : object {
    private IDesigner GetDesigner(IComponent component);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(IComponent component, IDictionary attributes);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(IComponent component, IDictionary events);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(IComponent component, IDictionary properties);
}
public abstract class System.ComponentModel.Design.UndoEngine : object {
    private static TraceSwitch s_traceUndo;
    private IServiceProvider _provider;
    private Stack _unitStack;
    private UndoUnit _executingUnit;
    private IDesignerHost _host;
    private ComponentSerializationService _serializationService;
    private EventHandler _undoingEvent;
    private EventHandler _undoneEvent;
    private IComponentChangeService _componentChangeService;
    private Dictionary`2<IComponent, List`1<ReferencingComponent>> _refToRemovedComponent;
    private bool _enabled;
    private UndoUnit CurrentUnit { get; }
    public bool UndoInProgress { get; }
    public bool Enabled { get; public set; }
    internal IComponentChangeService ComponentChangeService { get; }
    protected UndoEngine(IServiceProvider provider);
    private static UndoEngine();
    private UndoUnit get_CurrentUnit();
    public bool get_UndoInProgress();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_Undoing(EventHandler value);
    public void remove_Undoing(EventHandler value);
    public void add_Undone(EventHandler value);
    public void remove_Undone(EventHandler value);
    protected abstract virtual void AddUndoUnit(UndoUnit unit);
    private void CheckPopUnit(PopUnitReason reason);
    protected virtual UndoUnit CreateUndoUnit(string name, bool primary);
    internal IComponentChangeService get_ComponentChangeService();
    protected virtual void DiscardUndoUnit(UndoUnit unit);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal string GetName(object obj, bool generateNew);
    protected object GetRequiredService(Type serviceType);
    protected object GetService(Type serviceType);
    private void OnComponentAdded(object sender, ComponentEventArgs e);
    private void OnComponentAdding(object sender, ComponentEventArgs e);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs e);
    private void OnComponentChanging(object sender, ComponentChangingEventArgs e);
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
    private void OnComponentRemoving(object sender, ComponentEventArgs e);
    private void OnComponentRename(object sender, ComponentRenameEventArgs e);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
    private void OnTransactionOpening(object sender, EventArgs e);
    protected virtual void OnUndoing(EventArgs e);
    protected virtual void OnUndone(EventArgs e);
    [ConditionalAttribute("DEBUG")]
private static void Trace(string text, Object[] values);
}
public interface System.Drawing.Design.IToolboxItemProvider {
    public ToolboxItemCollection Items { get; }
    public abstract virtual ToolboxItemCollection get_Items();
}
[GuidAttribute("4BACD258-DE64-4048-BC4E-FEDBEF9ACB76")]
[InterfaceTypeAttribute("1")]
public interface System.Drawing.Design.IToolboxService {
    public CategoryNameCollection CategoryNames { get; }
    public string SelectedCategory { get; public set; }
    public abstract virtual CategoryNameCollection get_CategoryNames();
    public abstract virtual string get_SelectedCategory();
    public abstract virtual void set_SelectedCategory(string value);
    public abstract virtual void AddCreator(ToolboxItemCreatorCallback creator, string format);
    public abstract virtual void AddCreator(ToolboxItemCreatorCallback creator, string format, IDesignerHost host);
    public abstract virtual void AddLinkedToolboxItem(ToolboxItem toolboxItem, IDesignerHost host);
    public abstract virtual void AddLinkedToolboxItem(ToolboxItem toolboxItem, string category, IDesignerHost host);
    public abstract virtual void AddToolboxItem(ToolboxItem toolboxItem);
    public abstract virtual void AddToolboxItem(ToolboxItem toolboxItem, string category);
    public abstract virtual ToolboxItem DeserializeToolboxItem(object serializedObject);
    public abstract virtual ToolboxItem DeserializeToolboxItem(object serializedObject, IDesignerHost host);
    public abstract virtual ToolboxItem GetSelectedToolboxItem();
    public abstract virtual ToolboxItem GetSelectedToolboxItem(IDesignerHost host);
    public abstract virtual ToolboxItemCollection GetToolboxItems();
    public abstract virtual ToolboxItemCollection GetToolboxItems(IDesignerHost host);
    public abstract virtual ToolboxItemCollection GetToolboxItems(string category);
    public abstract virtual ToolboxItemCollection GetToolboxItems(string category, IDesignerHost host);
    public abstract virtual bool IsSupported(object serializedObject, IDesignerHost host);
    public abstract virtual bool IsSupported(object serializedObject, ICollection filterAttributes);
    public abstract virtual bool IsToolboxItem(object serializedObject);
    public abstract virtual bool IsToolboxItem(object serializedObject, IDesignerHost host);
    public abstract virtual void Refresh();
    public abstract virtual void RemoveCreator(string format);
    public abstract virtual void RemoveCreator(string format, IDesignerHost host);
    public abstract virtual void RemoveToolboxItem(ToolboxItem toolboxItem);
    public abstract virtual void RemoveToolboxItem(ToolboxItem toolboxItem, string category);
    public abstract virtual void SelectedToolboxItemUsed();
    public abstract virtual object SerializeToolboxItem(ToolboxItem toolboxItem);
    public abstract virtual bool SetCursor();
    public abstract virtual void SetSelectedToolboxItem(ToolboxItem toolboxItem);
}
public interface System.Drawing.Design.IToolboxUser {
    public abstract virtual bool GetToolSupported(ToolboxItem tool);
    public abstract virtual void ToolPicked(ToolboxItem tool);
}
public class System.Drawing.Design.ToolboxComponentsCreatedEventArgs : EventArgs {
    private IComponent[] _components;
    public IComponent[] Components { get; }
    public ToolboxComponentsCreatedEventArgs(IComponent[] components);
    public IComponent[] get_Components();
}
public class System.Drawing.Design.ToolboxComponentsCreatedEventHandler : MulticastDelegate {
    public ToolboxComponentsCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolboxComponentsCreatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolboxComponentsCreatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Drawing.Design.ToolboxComponentsCreatingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDesignerHost <DesignerHost>k__BackingField;
    public IDesignerHost DesignerHost { get; }
    public ToolboxComponentsCreatingEventArgs(IDesignerHost host);
    [CompilerGeneratedAttribute]
public IDesignerHost get_DesignerHost();
}
public class System.Drawing.Design.ToolboxComponentsCreatingEventHandler : MulticastDelegate {
    public ToolboxComponentsCreatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolboxComponentsCreatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolboxComponentsCreatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Drawing.Design.ToolboxItem : object {
    private static TraceSwitch s_toolboxItemPersist;
    private static object s_eventComponentsCreated;
    private static object s_eventComponentsCreating;
    private static bool s_isScalingInitialized;
    private static int ICON_DIMENSION;
    private static int s_iconWidth;
    private static int s_iconHeight;
    private bool _locked;
    private LockableDictionary _properties;
    private ToolboxComponentsCreatedEventHandler _componentsCreatedEvent;
    private ToolboxComponentsCreatingEventHandler _componentsCreatingEvent;
    public AssemblyName AssemblyName { get; public set; }
    public AssemblyName[] DependentAssemblies { get; public set; }
    public Bitmap Bitmap { get; public set; }
    public Bitmap OriginalBitmap { get; public set; }
    public string Company { get; public set; }
    public string ComponentType { get; }
    public string Description { get; public set; }
    public string DisplayName { get; public set; }
    public ICollection Filter { get; public set; }
    public bool IsTransient { get; public set; }
    public bool Locked { get; }
    public IDictionary Properties { get; }
    public string TypeName { get; public set; }
    public string Version { get; }
    public ToolboxItem(Type toolType);
    private static ToolboxItem();
    public AssemblyName get_AssemblyName();
    public void set_AssemblyName(AssemblyName value);
    public AssemblyName[] get_DependentAssemblies();
    public void set_DependentAssemblies(AssemblyName[] value);
    public Bitmap get_Bitmap();
    public void set_Bitmap(Bitmap value);
    public Bitmap get_OriginalBitmap();
    public void set_OriginalBitmap(Bitmap value);
    public string get_Company();
    public void set_Company(string value);
    public virtual string get_ComponentType();
    public string get_Description();
    public void set_Description(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public ICollection get_Filter();
    public void set_Filter(ICollection value);
    public bool get_IsTransient();
    public void set_IsTransient(bool value);
    public virtual bool get_Locked();
    public IDictionary get_Properties();
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual string get_Version();
    public void add_ComponentsCreated(ToolboxComponentsCreatedEventHandler value);
    public void remove_ComponentsCreated(ToolboxComponentsCreatedEventHandler value);
    public void add_ComponentsCreating(ToolboxComponentsCreatingEventHandler value);
    public void remove_ComponentsCreating(ToolboxComponentsCreatingEventHandler value);
    protected void CheckUnlocked();
    public IComponent[] CreateComponents();
    public IComponent[] CreateComponents(IDesignerHost host);
    public IComponent[] CreateComponents(IDesignerHost host, IDictionary defaultValues);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost host);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost host, IDictionary defaultValues);
    protected virtual void Deserialize(SerializationInfo info, StreamingContext context);
    public virtual bool Equals(object obj);
    private static bool AreAssemblyNamesEqual(AssemblyName name1, AssemblyName name2);
    public virtual int GetHashCode();
    protected virtual object FilterPropertyValue(string propertyName, object value);
    public Type GetType(IDesignerHost host);
    protected virtual Type GetType(IDesignerHost host, AssemblyName assemblyName, string typeName, bool reference);
    public virtual void Initialize(Type type);
    private AssemblyName GetNonRetargetedAssemblyName(Type type, AssemblyName policiedAssemblyName);
    public virtual void Lock();
    protected virtual void Serialize(SerializationInfo info, StreamingContext context);
    protected virtual void OnComponentsCreated(ToolboxComponentsCreatedEventArgs args);
    protected virtual void OnComponentsCreating(ToolboxComponentsCreatingEventArgs args);
    public virtual string ToString();
    protected void ValidatePropertyType(string propertyName, object value, Type expectedType, bool allowNull);
    protected virtual object ValidatePropertyValue(string propertyName, object value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class System.Drawing.Design.ToolboxItemCollection : ReadOnlyCollectionBase {
    public ToolboxItem Item { get; }
    public ToolboxItemCollection(ToolboxItemCollection value);
    public ToolboxItemCollection(ToolboxItem[] value);
    public ToolboxItem get_Item(int index);
    public bool Contains(ToolboxItem value);
    public void CopyTo(ToolboxItem[] array, int index);
    public int IndexOf(ToolboxItem value);
}
public class System.Drawing.Design.ToolboxItemCreatorCallback : MulticastDelegate {
    public ToolboxItemCreatorCallback(object object, IntPtr method);
    public virtual ToolboxItem Invoke(object serializedObject, string format);
    public virtual IAsyncResult BeginInvoke(object serializedObject, string format, AsyncCallback callback, object object);
    public virtual ToolboxItem EndInvoke(IAsyncResult result);
}
internal static class System.ExternDll : object {
    public static string Activeds;
    public static string Advapi32;
    public static string Comctl32;
    public static string Comdlg32;
    public static string Gdi32;
    public static string Gdiplus;
    public static string Hhctrl;
    public static string Imm32;
    public static string Kernel32;
    public static string Loadperf;
    public static string Mscoree;
    public static string Clr;
    public static string Msi;
    public static string Mqrt;
    public static string Ntdll;
    public static string Ole32;
    public static string Oleacc;
    public static string Oleaut32;
    public static string Olepro32;
    public static string PerfCounter;
    public static string Powrprof;
    public static string Psapi;
    public static string Shell32;
    public static string User32;
    public static string Uxtheme;
    public static string WinMM;
    public static string Winspool;
    public static string Wtsapi32;
    public static string Version;
    public static string Vsassert;
    public static string Fxassert;
    public static string Shlwapi;
    public static string Crypt32;
    public static string ShCore;
    public static string Wldp;
    internal static string Odbc32;
    internal static string SNI;
    internal static string OciDll;
    internal static string OraMtsDll;
    internal static string UiaCore;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[GuidAttribute("00020402-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface System.Runtime.InteropServices.UCOMITypeLib {
    public abstract virtual int GetTypeInfoCount();
    public abstract virtual void GetTypeInfoType(int index, TYPEKIND& pTKind);
    public abstract virtual void GetLibAttr(IntPtr& ppTLibAttr);
    public abstract virtual void GetDocumentation(int index, String& strName, String& strDocString, Int32& dwHelpContext, String& strHelpFile);
    public abstract virtual bool IsName(string szNameBuf, int lHashVal);
    public abstract virtual void ReleaseTLibAttr(IntPtr pTLibAttr);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string PlatformNotSupported_WinformsDesigner { get; }
    internal static string DesignerOptions_LayoutSettings { get; }
    internal static string DesignerOptions_ObjectBoundSmartTagSettings { get; }
    internal static string DesignerOptions_GridSizeDisplayName { get; }
    internal static string DesignerOptions_ShowGridDisplayName { get; }
    internal static string DesignerOptions_SnapToGridDisplayName { get; }
    internal static string DesignerOptions_UseSnapLines { get; }
    internal static string DesignerOptions_UseSmartTags { get; }
    internal static string DesignerOptions_ObjectBoundSmartTagAutoShow { get; }
    internal static string DesignerOptions_ObjectBoundSmartTagAutoShowDisplayName { get; }
    internal static string DesignerOptions_CodeGenSettings { get; }
    internal static string DesignerOptions_OptimizedCodeGen { get; }
    internal static string DesignerOptions_CodeGenDisplay { get; }
    internal static string DesignerOptions_EnableInSituEditingDisplay { get; }
    internal static string DesignerOptions_EnableInSituEditingCat { get; }
    internal static string DesignerOptions_ShowGridDesc { get; }
    internal static string DesignerOptions_GridSizeDesc { get; }
    internal static string DesignerOptions_SnapToGridDesc { get; }
    internal static string None { get; }
    internal static string None_lc { get; }
    internal static string NotImplementedByDesign { get; }
    internal static string DesignerOptions_EnableInSituEditingDesc { get; }
    internal static string DragDropSetDataError { get; }
    internal static string ComponentDesignerAddEvent { get; }
    internal static string InheritanceServiceReadOnlyCollection { get; }
    internal static string CannotConvertDoubleToDate { get; }
    internal static string CannotConvertIntToFloat { get; }
    internal static string COM2UnhandledVT { get; }
    internal static string DotNET_ComponentType { get; }
    internal static string ToolboxItemInvalidKey { get; }
    internal static string ToolboxItemInvalidPropertyType { get; }
    internal static string ToolboxItemLocked { get; }
    internal static string ToolboxItemValueNotSerializable { get; }
    internal static string UnsafeNativeMethodsNotImplemented { get; }
    internal static string DesignerActionPanel_CouldNotFindMethod { get; }
    internal static string CommandSetAlignByPrimary { get; }
    internal static string CommandSetAlignToGrid { get; }
    internal static string CommandSetCutMultiple { get; }
    internal static string CommandSetDelete { get; }
    internal static string CommandSetError { get; }
    internal static string CommandSetFormatSpacing { get; }
    internal static string CommandSetPaste { get; }
    internal static string CommandSetSize { get; }
    internal static string CommandSetSizeToGrid { get; }
    internal static string CommandSetUnknownSpacingCommand { get; }
    internal static string DragDropMoveComponent { get; }
    internal static string DragDropMoveComponents { get; }
    internal static string WindowsFormsCommandCenterX { get; }
    internal static string WindowsFormsCommandCenterY { get; }
    internal static string DesignerActionPanel_CouldNotConvertValue { get; }
    internal static string DesignerActionPanel_CouldNotFindProperty { get; }
    internal static string DesignerActionPanel_DefaultPanelTitle { get; }
    internal static string DesignerActionPanel_ErrorActivatingDropDown { get; }
    internal static string DesignerActionPanel_ErrorInvokingAction { get; }
    internal static string DesignerActionPanel_ErrorSettingValue { get; }
    internal static string DesignerInherited { get; }
    internal static string DesignerInheritedReadOnly { get; }
    internal static string RTL { get; }
    internal static string TrayAutoArrange { get; }
    internal static string TrayLineUpIcons { get; }
    internal static string TrayShowLargeIcons { get; }
    internal static string UIServiceHelper_ErrorCaption { get; }
    internal static string WindowsFormsAddEvent { get; }
    internal static string BehaviorServiceCopyControl { get; }
    internal static string BehaviorServiceCopyControls { get; }
    internal static string BehaviorServiceMoveControl { get; }
    internal static string BehaviorServiceMoveControls { get; }
    internal static string DesignerBeginDragNotCalled { get; }
    internal static string DragDropDragComponents { get; }
    internal static string DragDropSizeComponent { get; }
    internal static string DragDropSizeComponents { get; }
    internal static string UndoEngineComponentAdd0 { get; }
    internal static string UndoEngineComponentAdd1 { get; }
    internal static string UndoEngineComponentChange0 { get; }
    internal static string UndoEngineComponentChange1 { get; }
    internal static string UndoEngineComponentChange2 { get; }
    internal static string UndoEngineComponentRemove0 { get; }
    internal static string UndoEngineComponentRemove1 { get; }
    internal static string UndoEngineComponentRename { get; }
    internal static string UndoEngineMissingService { get; }
    internal static string DesignerHostCantDestroyInheritedComponent { get; }
    internal static string DesignerHostCyclicAdd { get; }
    internal static string DesignerHostDesignerNeedsComponent { get; }
    internal static string DesignerHostDestroyComponentTransaction { get; }
    internal static string DesignerHostDuplicateName { get; }
    internal static string DesignerHostFailedComponentCreate { get; }
    internal static string DesignerHostGenericTransactionName { get; }
    internal static string DesignerHostLoaderSpecified { get; }
    internal static string DesignerHostNestedTransaction { get; }
    internal static string DesignerHostNoBaseClass { get; }
    internal static string DesignerHostNoTopLevelDesigner { get; }
    internal static string DesignerHostUnloading { get; }
    internal static string DesignSurfaceContainerDispose { get; }
    internal static string DesignSurfaceDesignerNotLoaded { get; }
    internal static string DesignSurfaceFatalError { get; }
    internal static string DesignSurfaceNoRootComponent { get; }
    internal static string DesignSurfaceNoSupportedTechnology { get; }
    internal static string DesignSurfaceServiceIsFixed { get; }
    internal static string ExtenderProviderServiceDuplicateProvider { get; }
    internal static string BehaviorServiceResizeControl { get; }
    internal static string BehaviorServiceResizeControls { get; }
    internal static string DesignerShortcutDockInParent { get; }
    internal static string DesignerShortcutUndockInParent { get; }
    internal static string ControlDesigner_WndProcException { get; }
    internal static string lockedDescr { get; }
    internal static string InvalidArgument { get; }
    internal static string InvalidBoundArgument { get; }
    internal static string SerializerFieldTargetEvalFailed { get; }
    internal static string SerializerInvalidArrayRank { get; }
    internal static string SerializerLostStatements { get; }
    internal static string SerializerNoRootExpression { get; }
    internal static string SerializerNoSerializerForComponent { get; }
    internal static string SerializerNoSuchEvent { get; }
    internal static string SerializerNoSuchField { get; }
    internal static string SerializerNoSuchProperty { get; }
    internal static string SerializerNullNestedProperty { get; }
    internal static string SerializerPropertyGenFailed { get; }
    internal static string SerializerTypeNotFound { get; }
    internal static string SerializerUndeclaredName { get; }
    internal static string StandardMenuAbout { get; }
    internal static string StandardMenuContents { get; }
    internal static string StandardMenuCopy { get; }
    internal static string StandardMenuCreateDesc { get; }
    internal static string StandardMenuCustomize { get; }
    internal static string StandardMenuCut { get; }
    internal static string StandardMenuEdit { get; }
    internal static string StandardMenuExit { get; }
    internal static string StandardMenuFile { get; }
    internal static string StandardMenuHelp { get; }
    internal static string StandardMenuIndex { get; }
    internal static string StandardMenuNew { get; }
    internal static string StandardMenuOpen { get; }
    internal static string StandardMenuOptions { get; }
    internal static string StandardMenuPaste { get; }
    internal static string StandardMenuPrint { get; }
    internal static string StandardMenuPrintPreview { get; }
    internal static string StandardMenuRedo { get; }
    internal static string StandardMenuSave { get; }
    internal static string StandardMenuSaveAs { get; }
    internal static string StandardMenuSearch { get; }
    internal static string StandardMenuSelectAll { get; }
    internal static string StandardMenuTools { get; }
    internal static string StandardMenuUndo { get; }
    internal static string StandardToolCut { get; }
    internal static string ToolStripActionList_Dock { get; }
    internal static string ToolStripActionList_DockDesc { get; }
    internal static string ToolStripActionList_GripStyle { get; }
    internal static string ToolStripActionList_GripStyleDesc { get; }
    internal static string ToolStripActionList_Layout { get; }
    internal static string ToolStripActionList_RenderMode { get; }
    internal static string ToolStripActionList_RenderModeDesc { get; }
    internal static string ToolStripAddingItem { get; }
    internal static string ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue { get; }
    internal static string ToolStripCreatingNewItemTransaction { get; }
    internal static string ToolStripDesignerEmbedVerb { get; }
    internal static string ToolStripDesignerEmbedVerbDesc { get; }
    internal static string ToolStripDesignerStandardItemsVerb { get; }
    internal static string ToolStripDesignerStandardItemsVerbDesc { get; }
    internal static string ToolStripDesignerTemplateNodeEnterText { get; }
    internal static string ToolStripDesignerTemplateNodeLabelToolTip { get; }
    internal static string ToolStripDesignerTemplateNodeSplitButtonStatusStripAccessibleName { get; }
    internal static string ToolStripDesignerTemplateNodeSplitButtonStatusStripToolTip { get; }
    internal static string ToolStripDesignerTemplateNodeSplitButtonToolTip { get; }
    internal static string ToolStripDesignerToolStripAccessibleName { get; }
    internal static string ToolStripDesignerTransactionRemovingItem { get; }
    internal static string ToolStripInsertingIntoDropDownTransaction { get; }
    internal static string ToolStripItemCollectionEditorVerb { get; }
    internal static string ToolStripItemContextMenuInsert { get; }
    internal static string ToolStripItemPropertyChangeTransaction { get; }
    internal static string ToolStripMorphingItemTransaction { get; }
    internal static string ToolStripSeparatorError { get; }
    internal static string TypeNotFoundInTargetFramework { get; }
    internal static string ContextMenuStripActionList_ShowCheckMargin { get; }
    internal static string ContextMenuStripActionList_ShowCheckMarginDesc { get; }
    internal static string ContextMenuStripActionList_ShowImageMargin { get; }
    internal static string ContextMenuStripActionList_ShowImageMarginDesc { get; }
    internal static string SerializationManagerDuplicateComponentDecl { get; }
    internal static string SerializationManagerNameInUse { get; }
    internal static string SerializationManagerObjectHasName { get; }
    internal static string SerializerBadElementTypes { get; }
    internal static string SerializerResourceException { get; }
    internal static string SerializerResourceExceptionInvariant { get; }
    internal static string ToolStripDesignerTransactionAddingItem { get; }
    internal static string ToolStripDropDownItemCollectionEditorVerb { get; }
    internal static string ToolStripItemContextMenuConvertTo { get; }
    internal static string CodeDomComponentSerializationServiceClosedStore { get; }
    internal static string CodeDomComponentSerializationServiceDeserializationError { get; }
    internal static string CodeDomComponentSerializationServiceUnknownStore { get; }
    internal static string ContextMenuAlignToGrid { get; }
    internal static string ContextMenuBringToFront { get; }
    internal static string ContextMenuCopy { get; }
    internal static string ContextMenuCut { get; }
    internal static string ContextMenuDelete { get; }
    internal static string ContextMenuDocumentOutline { get; }
    internal static string ContextMenuLockControls { get; }
    internal static string ContextMenuPaste { get; }
    internal static string ContextMenuProperties { get; }
    internal static string ContextMenuSelect { get; }
    internal static string ContextMenuSendToBack { get; }
    internal static string ContextMenuViewCode { get; }
    internal static string SerializationManagerAreadyInSession { get; }
    internal static string SerializationManagerNoMatchingCtor { get; }
    internal static string SerializationManagerNoSession { get; }
    internal static string SerializationManagerWithinSession { get; }
    internal static string SerializerMemberTypeNotSerializable { get; }
    internal static string SerializerTypeAbstract { get; }
    internal static string StandardToolHelp { get; }
    internal static string ToolStripItemContextMenuSetImage { get; }
    internal static string ToolStripSelectMenuItem { get; }
    internal static string CodeDomDesignerLoaderPropGenerateMember { get; }
    internal static string CodeDomDesignerLoaderPropModifiers { get; }
    internal static string LocalizationProviderManualReload { get; }
    internal static string LocalizationProviderMissingService { get; }
    internal static string BasicDesignerLoaderDifferentHost { get; }
    internal static string BasicDesignerLoaderMissingService { get; }
    internal static string BasicDesignerLoaderNotInitialized { get; }
    internal static string BasicDesignerLoaderAlreadyLoaded { get; }
    internal static string CodeDomDesignerLoaderBadSerializationObject { get; }
    internal static string CodeDomDesignerLoaderDocumentFailureTypeDesignerNotInstalled { get; }
    internal static string CodeDomDesignerLoaderDocumentFailureTypeNotDesignable { get; }
    internal static string CodeDomDesignerLoaderDocumentFailureTypeNotFound { get; }
    internal static string CodeDomDesignerLoaderDupComponentName { get; }
    internal static string CodeDomDesignerLoaderInvalidBlankIdentifier { get; }
    internal static string CodeDomDesignerLoaderInvalidIdentifier { get; }
    internal static string CodeDomDesignerLoaderNoLanguageSupport { get; }
    internal static string CodeDomDesignerLoaderNoRootSerializer { get; }
    internal static string CodeDomDesignerLoaderNoRootSerializerWithFailures { get; }
    internal static string CodeDomDesignerLoaderNoTypeResolution { get; }
    internal static string CodeDomDesignerLoaderSerializerTypeNotFirstType { get; }
    internal static string EventBindingServiceBadArgType { get; }
    internal static string EventBindingServiceEventReadOnly { get; }
    internal static string EventBindingServiceMissingService { get; }
    internal static string EventBindingServiceNoSite { get; }
    internal static string EventBindingServiceSetValue { get; }
    internal static string BinaryEditorAllFiles { get; }
    internal static string BinaryEditorFileError { get; }
    internal static string BinaryEditorFileName { get; }
    internal static string BinaryEditorSaveFile { get; }
    internal static string BinaryEditorTitle { get; }
    internal static string MaskDescriptorNullOrEmptyRequiredProperty { get; }
    internal static string MaskDescriptorNull { get; }
    internal static string MaskDescriptorNotMaskFullErrorMsg { get; }
    internal static string MaskDescriptorValidatingTypeNone { get; }
    internal static string MaskDesignerDialogCustomEntry { get; }
    internal static string MaskDesignerDialogDataFormat { get; }
    internal static string MaskDesignerDialogDlgCaption { get; }
    internal static string MaskDesignerDialogMaskDescription { get; }
    internal static string MaskDesignerDialogValidatingType { get; }
    internal static string MaskedTextBoxDesignerVerbsSetMaskDesc { get; }
    internal static string MaskedTextBoxTextEditorErrorFormatString { get; }
    internal static string MaskedTextBoxHintAsciiCharacterExpected { get; }
    internal static string MaskedTextBoxHintAlphanumericCharacterExpected { get; }
    internal static string MaskedTextBoxHintDigitExpected { get; }
    internal static string MaskedTextBoxHintSignedDigitExpected { get; }
    internal static string MaskedTextBoxHintLetterExpected { get; }
    internal static string MaskedTextBoxHintPromptCharNotAllowed { get; }
    internal static string MaskedTextBoxHintUnavailableEditPosition { get; }
    internal static string MaskedTextBoxHintNonEditPosition { get; }
    internal static string MaskedTextBoxHintPositionOutOfRange { get; }
    internal static string MaskedTextBoxHintInvalidInput { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_PlatformNotSupported_WinformsDesigner();
    internal static string get_DesignerOptions_LayoutSettings();
    internal static string get_DesignerOptions_ObjectBoundSmartTagSettings();
    internal static string get_DesignerOptions_GridSizeDisplayName();
    internal static string get_DesignerOptions_ShowGridDisplayName();
    internal static string get_DesignerOptions_SnapToGridDisplayName();
    internal static string get_DesignerOptions_UseSnapLines();
    internal static string get_DesignerOptions_UseSmartTags();
    internal static string get_DesignerOptions_ObjectBoundSmartTagAutoShow();
    internal static string get_DesignerOptions_ObjectBoundSmartTagAutoShowDisplayName();
    internal static string get_DesignerOptions_CodeGenSettings();
    internal static string get_DesignerOptions_OptimizedCodeGen();
    internal static string get_DesignerOptions_CodeGenDisplay();
    internal static string get_DesignerOptions_EnableInSituEditingDisplay();
    internal static string get_DesignerOptions_EnableInSituEditingCat();
    internal static string get_DesignerOptions_ShowGridDesc();
    internal static string get_DesignerOptions_GridSizeDesc();
    internal static string get_DesignerOptions_SnapToGridDesc();
    internal static string get_None();
    internal static string get_None_lc();
    internal static string get_NotImplementedByDesign();
    internal static string get_DesignerOptions_EnableInSituEditingDesc();
    internal static string get_DragDropSetDataError();
    internal static string get_ComponentDesignerAddEvent();
    internal static string get_InheritanceServiceReadOnlyCollection();
    internal static string get_CannotConvertDoubleToDate();
    internal static string get_CannotConvertIntToFloat();
    internal static string get_COM2UnhandledVT();
    internal static string get_DotNET_ComponentType();
    internal static string get_ToolboxItemInvalidKey();
    internal static string get_ToolboxItemInvalidPropertyType();
    internal static string get_ToolboxItemLocked();
    internal static string get_ToolboxItemValueNotSerializable();
    internal static string get_UnsafeNativeMethodsNotImplemented();
    internal static string get_DesignerActionPanel_CouldNotFindMethod();
    internal static string get_CommandSetAlignByPrimary();
    internal static string get_CommandSetAlignToGrid();
    internal static string get_CommandSetCutMultiple();
    internal static string get_CommandSetDelete();
    internal static string get_CommandSetError();
    internal static string get_CommandSetFormatSpacing();
    internal static string get_CommandSetPaste();
    internal static string get_CommandSetSize();
    internal static string get_CommandSetSizeToGrid();
    internal static string get_CommandSetUnknownSpacingCommand();
    internal static string get_DragDropMoveComponent();
    internal static string get_DragDropMoveComponents();
    internal static string get_WindowsFormsCommandCenterX();
    internal static string get_WindowsFormsCommandCenterY();
    internal static string get_DesignerActionPanel_CouldNotConvertValue();
    internal static string get_DesignerActionPanel_CouldNotFindProperty();
    internal static string get_DesignerActionPanel_DefaultPanelTitle();
    internal static string get_DesignerActionPanel_ErrorActivatingDropDown();
    internal static string get_DesignerActionPanel_ErrorInvokingAction();
    internal static string get_DesignerActionPanel_ErrorSettingValue();
    internal static string get_DesignerInherited();
    internal static string get_DesignerInheritedReadOnly();
    internal static string get_RTL();
    internal static string get_TrayAutoArrange();
    internal static string get_TrayLineUpIcons();
    internal static string get_TrayShowLargeIcons();
    internal static string get_UIServiceHelper_ErrorCaption();
    internal static string get_WindowsFormsAddEvent();
    internal static string get_BehaviorServiceCopyControl();
    internal static string get_BehaviorServiceCopyControls();
    internal static string get_BehaviorServiceMoveControl();
    internal static string get_BehaviorServiceMoveControls();
    internal static string get_DesignerBeginDragNotCalled();
    internal static string get_DragDropDragComponents();
    internal static string get_DragDropSizeComponent();
    internal static string get_DragDropSizeComponents();
    internal static string get_UndoEngineComponentAdd0();
    internal static string get_UndoEngineComponentAdd1();
    internal static string get_UndoEngineComponentChange0();
    internal static string get_UndoEngineComponentChange1();
    internal static string get_UndoEngineComponentChange2();
    internal static string get_UndoEngineComponentRemove0();
    internal static string get_UndoEngineComponentRemove1();
    internal static string get_UndoEngineComponentRename();
    internal static string get_UndoEngineMissingService();
    internal static string get_DesignerHostCantDestroyInheritedComponent();
    internal static string get_DesignerHostCyclicAdd();
    internal static string get_DesignerHostDesignerNeedsComponent();
    internal static string get_DesignerHostDestroyComponentTransaction();
    internal static string get_DesignerHostDuplicateName();
    internal static string get_DesignerHostFailedComponentCreate();
    internal static string get_DesignerHostGenericTransactionName();
    internal static string get_DesignerHostLoaderSpecified();
    internal static string get_DesignerHostNestedTransaction();
    internal static string get_DesignerHostNoBaseClass();
    internal static string get_DesignerHostNoTopLevelDesigner();
    internal static string get_DesignerHostUnloading();
    internal static string get_DesignSurfaceContainerDispose();
    internal static string get_DesignSurfaceDesignerNotLoaded();
    internal static string get_DesignSurfaceFatalError();
    internal static string get_DesignSurfaceNoRootComponent();
    internal static string get_DesignSurfaceNoSupportedTechnology();
    internal static string get_DesignSurfaceServiceIsFixed();
    internal static string get_ExtenderProviderServiceDuplicateProvider();
    internal static string get_BehaviorServiceResizeControl();
    internal static string get_BehaviorServiceResizeControls();
    internal static string get_DesignerShortcutDockInParent();
    internal static string get_DesignerShortcutUndockInParent();
    internal static string get_ControlDesigner_WndProcException();
    internal static string get_lockedDescr();
    internal static string get_InvalidArgument();
    internal static string get_InvalidBoundArgument();
    internal static string get_SerializerFieldTargetEvalFailed();
    internal static string get_SerializerInvalidArrayRank();
    internal static string get_SerializerLostStatements();
    internal static string get_SerializerNoRootExpression();
    internal static string get_SerializerNoSerializerForComponent();
    internal static string get_SerializerNoSuchEvent();
    internal static string get_SerializerNoSuchField();
    internal static string get_SerializerNoSuchProperty();
    internal static string get_SerializerNullNestedProperty();
    internal static string get_SerializerPropertyGenFailed();
    internal static string get_SerializerTypeNotFound();
    internal static string get_SerializerUndeclaredName();
    internal static string get_StandardMenuAbout();
    internal static string get_StandardMenuContents();
    internal static string get_StandardMenuCopy();
    internal static string get_StandardMenuCreateDesc();
    internal static string get_StandardMenuCustomize();
    internal static string get_StandardMenuCut();
    internal static string get_StandardMenuEdit();
    internal static string get_StandardMenuExit();
    internal static string get_StandardMenuFile();
    internal static string get_StandardMenuHelp();
    internal static string get_StandardMenuIndex();
    internal static string get_StandardMenuNew();
    internal static string get_StandardMenuOpen();
    internal static string get_StandardMenuOptions();
    internal static string get_StandardMenuPaste();
    internal static string get_StandardMenuPrint();
    internal static string get_StandardMenuPrintPreview();
    internal static string get_StandardMenuRedo();
    internal static string get_StandardMenuSave();
    internal static string get_StandardMenuSaveAs();
    internal static string get_StandardMenuSearch();
    internal static string get_StandardMenuSelectAll();
    internal static string get_StandardMenuTools();
    internal static string get_StandardMenuUndo();
    internal static string get_StandardToolCut();
    internal static string get_ToolStripActionList_Dock();
    internal static string get_ToolStripActionList_DockDesc();
    internal static string get_ToolStripActionList_GripStyle();
    internal static string get_ToolStripActionList_GripStyleDesc();
    internal static string get_ToolStripActionList_Layout();
    internal static string get_ToolStripActionList_RenderMode();
    internal static string get_ToolStripActionList_RenderModeDesc();
    internal static string get_ToolStripAddingItem();
    internal static string get_ToolStripAllowItemReorderAndAllowDropCannotBeSetToTrue();
    internal static string get_ToolStripCreatingNewItemTransaction();
    internal static string get_ToolStripDesignerEmbedVerb();
    internal static string get_ToolStripDesignerEmbedVerbDesc();
    internal static string get_ToolStripDesignerStandardItemsVerb();
    internal static string get_ToolStripDesignerStandardItemsVerbDesc();
    internal static string get_ToolStripDesignerTemplateNodeEnterText();
    internal static string get_ToolStripDesignerTemplateNodeLabelToolTip();
    internal static string get_ToolStripDesignerTemplateNodeSplitButtonStatusStripAccessibleName();
    internal static string get_ToolStripDesignerTemplateNodeSplitButtonStatusStripToolTip();
    internal static string get_ToolStripDesignerTemplateNodeSplitButtonToolTip();
    internal static string get_ToolStripDesignerToolStripAccessibleName();
    internal static string get_ToolStripDesignerTransactionRemovingItem();
    internal static string get_ToolStripInsertingIntoDropDownTransaction();
    internal static string get_ToolStripItemCollectionEditorVerb();
    internal static string get_ToolStripItemContextMenuInsert();
    internal static string get_ToolStripItemPropertyChangeTransaction();
    internal static string get_ToolStripMorphingItemTransaction();
    internal static string get_ToolStripSeparatorError();
    internal static string get_TypeNotFoundInTargetFramework();
    internal static string get_ContextMenuStripActionList_ShowCheckMargin();
    internal static string get_ContextMenuStripActionList_ShowCheckMarginDesc();
    internal static string get_ContextMenuStripActionList_ShowImageMargin();
    internal static string get_ContextMenuStripActionList_ShowImageMarginDesc();
    internal static string get_SerializationManagerDuplicateComponentDecl();
    internal static string get_SerializationManagerNameInUse();
    internal static string get_SerializationManagerObjectHasName();
    internal static string get_SerializerBadElementTypes();
    internal static string get_SerializerResourceException();
    internal static string get_SerializerResourceExceptionInvariant();
    internal static string get_ToolStripDesignerTransactionAddingItem();
    internal static string get_ToolStripDropDownItemCollectionEditorVerb();
    internal static string get_ToolStripItemContextMenuConvertTo();
    internal static string get_CodeDomComponentSerializationServiceClosedStore();
    internal static string get_CodeDomComponentSerializationServiceDeserializationError();
    internal static string get_CodeDomComponentSerializationServiceUnknownStore();
    internal static string get_ContextMenuAlignToGrid();
    internal static string get_ContextMenuBringToFront();
    internal static string get_ContextMenuCopy();
    internal static string get_ContextMenuCut();
    internal static string get_ContextMenuDelete();
    internal static string get_ContextMenuDocumentOutline();
    internal static string get_ContextMenuLockControls();
    internal static string get_ContextMenuPaste();
    internal static string get_ContextMenuProperties();
    internal static string get_ContextMenuSelect();
    internal static string get_ContextMenuSendToBack();
    internal static string get_ContextMenuViewCode();
    internal static string get_SerializationManagerAreadyInSession();
    internal static string get_SerializationManagerNoMatchingCtor();
    internal static string get_SerializationManagerNoSession();
    internal static string get_SerializationManagerWithinSession();
    internal static string get_SerializerMemberTypeNotSerializable();
    internal static string get_SerializerTypeAbstract();
    internal static string get_StandardToolHelp();
    internal static string get_ToolStripItemContextMenuSetImage();
    internal static string get_ToolStripSelectMenuItem();
    internal static string get_CodeDomDesignerLoaderPropGenerateMember();
    internal static string get_CodeDomDesignerLoaderPropModifiers();
    internal static string get_LocalizationProviderManualReload();
    internal static string get_LocalizationProviderMissingService();
    internal static string get_BasicDesignerLoaderDifferentHost();
    internal static string get_BasicDesignerLoaderMissingService();
    internal static string get_BasicDesignerLoaderNotInitialized();
    internal static string get_BasicDesignerLoaderAlreadyLoaded();
    internal static string get_CodeDomDesignerLoaderBadSerializationObject();
    internal static string get_CodeDomDesignerLoaderDocumentFailureTypeDesignerNotInstalled();
    internal static string get_CodeDomDesignerLoaderDocumentFailureTypeNotDesignable();
    internal static string get_CodeDomDesignerLoaderDocumentFailureTypeNotFound();
    internal static string get_CodeDomDesignerLoaderDupComponentName();
    internal static string get_CodeDomDesignerLoaderInvalidBlankIdentifier();
    internal static string get_CodeDomDesignerLoaderInvalidIdentifier();
    internal static string get_CodeDomDesignerLoaderNoLanguageSupport();
    internal static string get_CodeDomDesignerLoaderNoRootSerializer();
    internal static string get_CodeDomDesignerLoaderNoRootSerializerWithFailures();
    internal static string get_CodeDomDesignerLoaderNoTypeResolution();
    internal static string get_CodeDomDesignerLoaderSerializerTypeNotFirstType();
    internal static string get_EventBindingServiceBadArgType();
    internal static string get_EventBindingServiceEventReadOnly();
    internal static string get_EventBindingServiceMissingService();
    internal static string get_EventBindingServiceNoSite();
    internal static string get_EventBindingServiceSetValue();
    internal static string get_BinaryEditorAllFiles();
    internal static string get_BinaryEditorFileError();
    internal static string get_BinaryEditorFileName();
    internal static string get_BinaryEditorSaveFile();
    internal static string get_BinaryEditorTitle();
    internal static string get_MaskDescriptorNullOrEmptyRequiredProperty();
    internal static string get_MaskDescriptorNull();
    internal static string get_MaskDescriptorNotMaskFullErrorMsg();
    internal static string get_MaskDescriptorValidatingTypeNone();
    internal static string get_MaskDesignerDialogCustomEntry();
    internal static string get_MaskDesignerDialogDataFormat();
    internal static string get_MaskDesignerDialogDlgCaption();
    internal static string get_MaskDesignerDialogMaskDescription();
    internal static string get_MaskDesignerDialogValidatingType();
    internal static string get_MaskedTextBoxDesignerVerbsSetMaskDesc();
    internal static string get_MaskedTextBoxTextEditorErrorFormatString();
    internal static string get_MaskedTextBoxHintAsciiCharacterExpected();
    internal static string get_MaskedTextBoxHintAlphanumericCharacterExpected();
    internal static string get_MaskedTextBoxHintDigitExpected();
    internal static string get_MaskedTextBoxHintSignedDigitExpected();
    internal static string get_MaskedTextBoxHintLetterExpected();
    internal static string get_MaskedTextBoxHintPromptCharNotAllowed();
    internal static string get_MaskedTextBoxHintUnavailableEditPosition();
    internal static string get_MaskedTextBoxHintNonEditPosition();
    internal static string get_MaskedTextBoxHintPositionOutOfRange();
    internal static string get_MaskedTextBoxHintInvalidInput();
}
internal static class System.Windows.Forms.ClientUtils : object {
    private static int SurrogateRangeStart;
    private static int SurrogateRangeEnd;
    public static bool IsCriticalException(Exception ex);
    public static bool IsSecurityOrCriticalException(Exception ex);
    public static int GetBitCount(UInt32 x);
    public static bool IsEnumValid(Enum enumValue, int value, int minValue, int maxValue);
    public static bool IsEnumValid(Enum enumValue, int value, int minValue, int maxValue, int maxNumberOfBitsOn);
    public static bool IsEnumValid_Masked(Enum enumValue, int value, UInt32 mask);
    public static bool IsEnumValid_NotSequential(Enum enumValue, int value, Int32[] enumValues);
    public static int GetWordBoundaryStart(Char[] text, int endIndex);
}
internal class System.Windows.Forms.CommonUnsafeNativeMethods : object {
    internal static DpiAwarenessContext GetThreadDpiAwarenessContext();
    internal static DpiAwarenessContext SetThreadDpiAwarenessContext(DpiAwarenessContext dpiContext);
    internal static IntPtr GetWindowDpiAwarenessContext(IntPtr hWnd);
    internal static DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(IntPtr dpiAwarenessContext);
    internal static bool AreDpiAwarenessContextsEqual(DpiAwarenessContext dpiContextA, DpiAwarenessContext dpiContextB);
    public static bool TryFindDpiAwarenessContextsEqual(DpiAwarenessContext dpiContextA, DpiAwarenessContext dpiContextB);
    public static DpiAwarenessContext TryGetThreadDpiAwarenessContext();
    public static DpiAwarenessContext TrySetThreadDpiAwarenessContext(DpiAwarenessContext dpiContext);
    internal static DpiAwarenessContext GetDpiAwarenessContextForWindow(IntPtr hWnd);
    private static DpiAwarenessContext ConvertToDpiAwarenessContext(DPI_AWARENESS dpiAwareness);
}
internal enum System.Windows.Forms.Design.AdornmentType : Enum {
    public int value__;
    public static AdornmentType GrabHandle;
    public static AdornmentType ContainerSelector;
    public static AdornmentType Maximum;
}
public class System.Windows.Forms.Design.AxImporter : object {
    public AxImporter(Options options);
}
internal class System.Windows.Forms.Design.BaseContextMenuStrip : GroupedContextMenuStrip {
    private IServiceProvider serviceProvider;
    private Component component;
    private ToolStripMenuItem selectionMenuItem;
    public BaseContextMenuStrip(IServiceProvider provider, Component component);
    private void AddCodeMenuItem();
    private void AddZorderMenuItem();
    private void AddGridMenuItem();
    private void AddLockMenuItem();
    private void RefreshSelectionMenuItem();
    private void AddVerbMenuItem();
    private void AddEditMenuItem();
    private void AddPropertiesMenuItem();
    private void InitializeContextMenu();
    public virtual void RefreshItems();
}
public class System.Windows.Forms.Design.Behavior.Adorner : object {
    private BehaviorService _behaviorService;
    private GlyphCollection _glyphs;
    [CompilerGeneratedAttribute]
private bool <EnabledInternal>k__BackingField;
    public BehaviorService BehaviorService { get; public set; }
    public bool Enabled { get; public set; }
    internal bool EnabledInternal { get; internal set; }
    public GlyphCollection Glyphs { get; }
    public BehaviorService get_BehaviorService();
    public void set_BehaviorService(BehaviorService value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnabledInternal();
    [CompilerGeneratedAttribute]
internal void set_EnabledInternal(bool value);
    public GlyphCollection get_Glyphs();
    public void Invalidate();
    public void Invalidate(Rectangle rectangle);
    public void Invalidate(Region region);
}
public abstract class System.Windows.Forms.Design.Behavior.Behavior : object {
    private Behavior GetNextBehavior { get; }
    public Cursor Cursor { get; }
    public bool DisableAllCommands { get; }
    protected Behavior(bool callParentBehavior, BehaviorService behaviorService);
    private Behavior get_GetNextBehavior();
    public virtual Cursor get_Cursor();
    public virtual bool get_DisableAllCommands();
    public virtual MenuCommand FindCommand(CommandID commandId);
    public virtual void OnLoseCapture(Glyph g, EventArgs e);
    public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseEnter(Glyph g);
    public virtual bool OnMouseHover(Glyph g, Point mouseLoc);
    public virtual bool OnMouseLeave(Glyph g);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
    public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    public virtual void OnDragEnter(Glyph g, DragEventArgs e);
    public virtual void OnDragLeave(Glyph g, EventArgs e);
    public virtual void OnDragOver(Glyph g, DragEventArgs e);
    public virtual void OnGiveFeedback(Glyph g, GiveFeedbackEventArgs e);
    public virtual void OnQueryContinueDrag(Glyph g, QueryContinueDragEventArgs e);
}
public class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ICollection <DragComponents>k__BackingField;
    public ICollection DragComponents { get; }
    public BehaviorDragDropEventArgs(ICollection dragComponents);
    [CompilerGeneratedAttribute]
public ICollection get_DragComponents();
}
public class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler : MulticastDelegate {
    public BehaviorDragDropEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BehaviorDragDropEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BehaviorDragDropEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.Design.Behavior.BehaviorService : object {
    private IServiceProvider _serviceProvider;
    private AdornerWindow _adornerWindow;
    private BehaviorServiceAdornerCollection _adorners;
    private ArrayList _behaviorStack;
    private Behavior _captureBehavior;
    private Glyph _hitTestedGlyph;
    private IToolboxService _toolboxSvc;
    private Control _dropSource;
    private DragEventArgs _validDragArgs;
    private BehaviorDragDropEventHandler _beginDragHandler;
    private BehaviorDragDropEventHandler _endDragHandler;
    private EventHandler _synchronizeEventHandler;
    private TRACKMOUSEEVENT _trackMouseEvent;
    private bool _trackingMouseEvent;
    private String[] _testHook_RecentSnapLines;
    private MenuCommandHandler _menuCommandHandler;
    private bool _useSnapLines;
    private bool _queriedSnapLines;
    private Hashtable _dragEnterReplies;
    private static TraceSwitch s_dragDropSwitch;
    private bool _dragging;
    private bool _cancelDrag;
    private int _adornerWindowIndex;
    private static int WM_GETALLSNAPLINES;
    private static int WM_GETRECENTSNAPLINES;
    private DesignerActionUI _actionPointer;
    private static string ToolboxFormat;
    public BehaviorServiceAdornerCollection Adorners { get; }
    internal Control AdornerWindowControl { get; }
    internal int AdornerWindowIndex { get; }
    internal bool HasCapture { get; }
    internal bool UseSnapLines { get; }
    public Graphics AdornerWindowGraphics { get; }
    public Behavior CurrentBehavior { get; }
    internal bool Dragging { get; }
    internal bool CancelDrag { get; internal set; }
    internal DesignerActionUI DesignerActionUI { get; internal set; }
    unknown String[] RecentSnapLines {internal set; }
    private Control DropSource { get; }
    internal BehaviorService(IServiceProvider serviceProvider, Control windowFrame);
    private static BehaviorService();
    public BehaviorServiceAdornerCollection get_Adorners();
    internal Control get_AdornerWindowControl();
    internal int get_AdornerWindowIndex();
    internal bool get_HasCapture();
    internal bool get_UseSnapLines();
    public Graphics get_AdornerWindowGraphics();
    public Behavior get_CurrentBehavior();
    internal bool get_Dragging();
    internal bool get_CancelDrag();
    internal void set_CancelDrag(bool value);
    internal DesignerActionUI get_DesignerActionUI();
    internal void set_DesignerActionUI(DesignerActionUI value);
    internal void set_RecentSnapLines(String[] value);
    public sealed virtual void Dispose();
    private Control get_DropSource();
    internal DragDropEffects DoDragDrop(DropSourceBehavior dropSourceBehavior);
    internal void EndDragNotification();
    private void OnEndDrag(BehaviorDragDropEventArgs e);
    private void OnBeginDrag(BehaviorDragDropEventArgs e);
    public Point AdornerWindowPointToScreen(Point p);
    public Point AdornerWindowToScreen();
    public Point ControlToAdornerWindow(Control c);
    public Point MapAdornerWindowPoint(IntPtr handle, Point pt);
    public Rectangle ControlRectInAdornerWindow(Control c);
    public void add_BeginDrag(BehaviorDragDropEventHandler value);
    public void remove_BeginDrag(BehaviorDragDropEventHandler value);
    public void add_EndDrag(BehaviorDragDropEventHandler value);
    public void remove_EndDrag(BehaviorDragDropEventHandler value);
    public void add_Synchronize(EventHandler value);
    public void remove_Synchronize(EventHandler value);
    public Behavior GetNextBehavior(Behavior behavior);
    internal void EnableAllAdorners(bool enabled);
    public void Invalidate();
    public void Invalidate(Rectangle rect);
    public void Invalidate(Region r);
    public void SyncSelection();
    public Behavior PopBehavior(Behavior behavior);
    internal void ProcessPaintMessage(Rectangle paintRect);
    public void PushBehavior(Behavior behavior);
    public void PushCaptureBehavior(Behavior behavior);
    public Point ScreenToAdornerWindow(Point p);
    internal void OnLoseCapture();
    private bool PropagateHitTest(Point pt);
    internal void StartDragNotification();
    private MenuCommand FindCommand(CommandID commandID, IMenuCommandService menuService);
    private Behavior GetAppropriateBehavior(Glyph g);
    private void ShowError(Exception ex);
    private void SetAppropriateCursor(Cursor cursor);
    private void InvokeMouseEnterLeave(Glyph leaveGlyph, Glyph enterGlyph);
    private void OnDragEnter(Glyph g, DragEventArgs e);
    private void OnDragLeave(Glyph g, EventArgs e);
    private bool OnMouseDoubleClick(MouseButtons button, Point mouseLoc);
    private bool OnMouseDown(MouseButtons button, Point mouseLoc);
    private bool OnMouseEnter(Glyph g);
    private bool OnMouseHover(Point mouseLoc);
    private bool OnMouseLeave(Glyph g);
    private bool OnMouseMove(MouseButtons button, Point mouseLoc);
    private bool OnMouseUp(MouseButtons button);
    private void HookMouseEvent();
    private void UnHookMouseEvent();
    private void OnDragDrop(DragEventArgs e);
    private void PropagatePaint(PaintEventArgs pe);
    private void TestHook_GetRecentSnapLines(Message& m);
    private void TestHook_SetText(Message& m, string text);
    private void TestHook_GetAllSnapLines(Message& m);
    private void OnDragOver(DragEventArgs e);
    private void OnGiveFeedback(GiveFeedbackEventArgs e);
    private void OnQueryContinueDrag(QueryContinueDragEventArgs e);
    private void OnSystemSettingChanged(object sender, EventArgs e);
    private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection : CollectionBase {
    public Adorner Item { get; public set; }
    public BehaviorServiceAdornerCollection(BehaviorService behaviorService);
    public BehaviorServiceAdornerCollection(BehaviorServiceAdornerCollection value);
    public BehaviorServiceAdornerCollection(Adorner[] value);
    public Adorner get_Item(int index);
    public void set_Item(int index, Adorner value);
    public int Add(Adorner value);
    public void AddRange(Adorner[] value);
    public void AddRange(BehaviorServiceAdornerCollection value);
    public bool Contains(Adorner value);
    public void CopyTo(Adorner[] array, int index);
    public int IndexOf(Adorner value);
    public void Insert(int index, Adorner value);
    public BehaviorServiceAdornerCollectionEnumerator GetEnumerator();
    public void Remove(Adorner value);
}
public class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator : object {
    public Adorner Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public BehaviorServiceAdornerCollectionEnumerator(BehaviorServiceAdornerCollection mappings);
    public Adorner get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Windows.Forms.Design.Behavior.ComponentGlyph : Glyph {
    public IComponent RelatedComponent { get; }
    public ComponentGlyph(IComponent relatedComponent, Behavior behavior);
    public ComponentGlyph(IComponent relatedComponent);
    public IComponent get_RelatedComponent();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.ContainerSelectorBehavior : Behavior {
    private Control _containerControl;
    private IServiceProvider _serviceProvider;
    private BehaviorService _behaviorService;
    private bool _okToMove;
    private Point _initialDragPoint;
    private bool _setInitialDragPoint;
    public Control ContainerControl { get; }
    public bool OkToMove { get; public set; }
    public Point InitialDragPoint { get; public set; }
    internal ContainerSelectorBehavior(Control containerControl, IServiceProvider serviceProvider);
    internal ContainerSelectorBehavior(Control containerControl, IServiceProvider serviceProvider, bool setInitialDragPoint);
    private void Init(Control containerControl, IServiceProvider serviceProvider);
    public Control get_ContainerControl();
    public bool get_OkToMove();
    public void set_OkToMove(bool value);
    public Point get_InitialDragPoint();
    public void set_InitialDragPoint(Point value);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    private Point DetermineInitialDragPoint(Point mouseLoc);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
    private void StartDragOperation(Point initialMouseLocation);
}
internal class System.Windows.Forms.Design.Behavior.ContainerSelectorGlyph : Glyph {
    private Rectangle _glyphBounds;
    private ContainerSelectorBehavior _relatedBehavior;
    private Bitmap _glyph;
    public Rectangle Bounds { get; }
    public Behavior RelatedBehavior { get; }
    private Bitmap MoveGlyph { get; }
    internal ContainerSelectorGlyph(Rectangle containerBounds, int glyphSize, int glyphOffset, ContainerSelectorBehavior behavior);
    public virtual Rectangle get_Bounds();
    public Behavior get_RelatedBehavior();
    public virtual Cursor GetHitTest(Point p);
    private Bitmap get_MoveGlyph();
    public virtual void Paint(PaintEventArgs pe);
}
public class System.Windows.Forms.Design.Behavior.ControlBodyGlyph : ComponentGlyph {
    public Rectangle Bounds { get; }
    public ControlBodyGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, ControlDesigner designer);
    public ControlBodyGlyph(Rectangle bounds, Cursor cursor, IComponent relatedComponent, Behavior behavior);
    public virtual Rectangle get_Bounds();
    public virtual Cursor GetHitTest(Point p);
}
internal class System.Windows.Forms.Design.Behavior.DesignerActionBehavior : Behavior {
    private IComponent _relatedComponent;
    private DesignerActionUI _parentUI;
    private DesignerActionListCollection _actionLists;
    private IServiceProvider _serviceProvider;
    private bool _ignoreNextMouseUp;
    internal DesignerActionListCollection ActionLists { get; internal set; }
    internal DesignerActionUI ParentUI { get; }
    internal IComponent RelatedComponent { get; }
    unknown bool IgnoreNextMouseUp {internal set; }
    internal DesignerActionBehavior(IServiceProvider serviceProvider, IComponent relatedComponent, DesignerActionListCollection actionLists, DesignerActionUI parentUI);
    internal DesignerActionListCollection get_ActionLists();
    internal void set_ActionLists(DesignerActionListCollection value);
    internal DesignerActionUI get_ParentUI();
    internal IComponent get_RelatedComponent();
    internal void HideUI();
    internal DesignerActionPanel CreateDesignerActionPanel(IComponent relatedComponent);
    internal void ShowUI(Glyph g);
    internal void set_IgnoreNextMouseUp(bool value);
    public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
}
internal class System.Windows.Forms.Design.Behavior.DesignerActionGlyph : Glyph {
    internal static int CONTROLOVERLAP_X;
    internal static int CONTROLOVERLAP_Y;
    private Rectangle _bounds;
    private Adorner _adorner;
    private bool _mouseOver;
    private Rectangle _alternativeBounds;
    private Control _alternativeParent;
    private bool _insidePaint;
    private DockStyle _dockStyle;
    private Bitmap _glyphImageClosed;
    private Bitmap _glyphImageOpened;
    public Rectangle Bounds { get; }
    public DockStyle DockEdge { get; public set; }
    public bool IsInComponentTray { get; }
    private Image GlyphImageClosed { get; }
    private Image GlyphImageOpened { get; }
    private bool MouseOver { get; private set; }
    public DesignerActionGlyph(DesignerActionBehavior behavior, Adorner adorner);
    public DesignerActionGlyph(DesignerActionBehavior behavior, Rectangle alternativeBounds, Control alternativeParent);
    private DesignerActionGlyph(DesignerActionBehavior behavior, Adorner adorner, Rectangle alternativeBounds, Control alternativeParent);
    public virtual Rectangle get_Bounds();
    public DockStyle get_DockEdge();
    public void set_DockEdge(DockStyle value);
    public bool get_IsInComponentTray();
    public virtual Cursor GetHitTest(Point p);
    private Image get_GlyphImageClosed();
    private Image get_GlyphImageOpened();
    internal void InvalidateOwnerLocation();
    internal void Invalidate();
    private bool get_MouseOver();
    private void set_MouseOver(bool value);
    public virtual void Paint(PaintEventArgs pe);
    internal void UpdateAlternativeBounds(Rectangle newBounds);
}
internal class System.Windows.Forms.Design.Behavior.DesignerActionKeyboardBehavior : Behavior {
    private DesignerActionPanel _panel;
    private IMenuCommandService _menuService;
    private DesignerActionUIService _daUISvc;
    private static Guid s_vSStandardCommandSet97;
    public DesignerActionKeyboardBehavior(DesignerActionPanel panel, IServiceProvider serviceProvider, BehaviorService behaviorService);
    private static DesignerActionKeyboardBehavior();
    public virtual MenuCommand FindCommand(CommandID commandId);
}
internal class System.Windows.Forms.Design.Behavior.DragAssistanceManager : object {
    private BehaviorService _behaviorService;
    private IServiceProvider _serviceProvider;
    private Graphics _graphics;
    private IntPtr _rootComponentHandle;
    private Point _dragOffset;
    private Rectangle _cachedDragRect;
    private Pen _edgePen;
    private bool _disposeEdgePen;
    private Pen _baselinePen;
    private ArrayList _verticalSnapLines;
    private ArrayList _horizontalSnapLines;
    private ArrayList _targetVerticalSnapLines;
    private ArrayList _targetHorizontalSnapLines;
    private ArrayList _targetSnapLineTypes;
    private Int32[] _verticalDistances;
    private Int32[] _horizontalDistances;
    private ArrayList _tempVertLines;
    private ArrayList _tempHorzLines;
    private Line[] _vertLines;
    private Line[] _horzLines;
    private Hashtable _snapLineToBounds;
    private Line[] _recentLines;
    private Image _backgroundImage;
    private static int SnapDistance;
    private int _snapPointX;
    private int _snapPointY;
    private static int INVALID_VALUE;
    private bool _resizing;
    private bool _ctrlDrag;
    internal DragAssistanceManager(IServiceProvider serviceProvider);
    internal DragAssistanceManager(IServiceProvider serviceProvider, ArrayList dragComponents);
    internal DragAssistanceManager(IServiceProvider serviceProvider, ArrayList dragComponents, bool resizing);
    internal DragAssistanceManager(IServiceProvider serviceProvider, Graphics graphics, ArrayList dragComponents, Image backgroundImage, bool ctrlDrag);
    internal DragAssistanceManager(IServiceProvider serviceProvider, Graphics graphics, ArrayList dragComponents, Image backgroundImage, bool resizing, bool ctrlDrag);
    private void AddSnapLines(ControlDesigner controlDesigner, ArrayList horizontalList, ArrayList verticalList, bool isTarget, bool validTarget);
    private int BuildDistanceArray(ArrayList snapLines, ArrayList targetSnapLines, Int32[] distances, Rectangle dragBounds);
    private Line[] EraseOldSnapLines(Line[] lines, ArrayList tempLines);
    internal void EraseSnapLines();
    internal Line[] GetRecentLines();
    private void IdentifyAndStoreValidLines(ArrayList snapLines, Int32[] distances, Rectangle dragBounds, int smallestDistance);
    private bool AddChildCompSnaplines(IComponent comp, ArrayList dragComponents, Rectangle clipBounds, Control targetControl);
    private bool AddControlSnaplinesWhenResizing(ControlDesigner designer, Control control, Control targetControl);
    private void Initialize(ArrayList dragComponents, IDesignerHost host);
    private static bool IsChildOfParent(Control child, Control parent);
    private static bool IsMarginOrPaddingSnapLine(SnapLine snapLine);
    internal Point OffsetToNearestSnapLocation(Control targetControl, IList targetSnaplines, Point directionOffset);
    internal Point OffsetToNearestSnapLocation(Control targetControl, Point directionOffset);
    private static int FindSmallestValidDistance(ArrayList snapLines, Int32[] distances, int min, int max, int direction);
    private static bool IsWithinValidRange(int offset, int min, int max);
    private static int SmallestDistanceIndex(Int32[] distances, int direction, Int32& distanceValue);
    private void RenderSnapLines(Line[] lines, Rectangle dragRect);
    private static void CombineSnaplines(Line snapLine, ArrayList currentLines);
    private void StoreSnapLine(SnapLine snapLine, Rectangle dragBounds);
    private bool ValidateMarginOrPaddingLine(SnapLine snapLine, Rectangle dragBounds);
    internal Point OnMouseMove(Rectangle dragBounds, SnapLine[] snapLines);
    internal Point OnMouseMove(Rectangle dragBounds, SnapLine[] snapLines, Boolean& didSnap, bool shouldSnapHorizontally);
    internal Point OnMouseMove(Rectangle dragBounds);
    internal Point OnMouseMove(Control targetControl, SnapLine[] snapLines, Boolean& didSnap, bool shouldSnapHorizontally);
    private Point OnMouseMove(Rectangle dragBounds, bool offsetSnapLines, Boolean& didSnap, bool shouldSnapHorizontally);
    internal void RenderSnapLinesInternal(Rectangle dragRect);
    internal void RenderSnapLinesInternal();
    internal void OnMouseUp();
}
internal class System.Windows.Forms.Design.Behavior.DropSourceBehavior : Behavior {
    private DragComponent[] dragComponents;
    private ArrayList dragObjects;
    private BehaviorDataObject data;
    private DragDropEffects allowedEffects;
    private DragDropEffects lastEffect;
    private bool targetAllowsSnapLines;
    private IComponent lastDropTarget;
    private Point lastSnapOffset;
    private BehaviorService behaviorServiceSource;
    private BehaviorService behaviorServiceTarget;
    private DragAssistanceManager dragAssistanceManager;
    private Graphics graphicsTarget;
    private IServiceProvider serviceProviderSource;
    private IServiceProvider serviceProviderTarget;
    private Point initialMouseLoc;
    private Image dragImage;
    private Rectangle dragImageRect;
    private Rectangle clearDragImageRect;
    private Point originalDragImageLocation;
    private Region dragImageRegion;
    private Point lastFeedbackLocation;
    private Control suspendedParent;
    private Size parentGridSize;
    private Point parentLocation;
    private bool shareParent;
    private bool cleanedUpDrag;
    private StatusCommandUI statusCommandUITarget;
    private IDesignerHost srcHost;
    private IDesignerHost destHost;
    private bool currentShowState;
    private int primaryComponentIndex;
    internal DragDropEffects AllowedEffects { get; }
    internal DataObject DataObject { get; }
    internal DropSourceBehavior(ICollection dragComponents, Control source, Point initialMouseLocation);
    internal DragDropEffects get_AllowedEffects();
    internal DataObject get_DataObject();
    private Point AdjustToGrid(Point dragLoc);
    private Point MapPointFromSourceToTarget(Point pt);
    private Point MapPointFromTargetToSource(Point pt);
    private void ClearAllDragImages();
    private void SetDesignerHost(Control c);
    private void DropControl(int dragComponentIndex, Control dragTarget, Control dragSource, bool localDrag);
    private void SetLocationPropertyAndChildIndex(int dragComponentIndex, Control dragTarget, Point dropPoint, int newIndex, bool allowSetChildIndexOnDrop);
    private void EndDragDrop(bool allowSetChildIndexOnDrop);
    internal void GiveFeedback(object sender, GiveFeedbackEventArgs e);
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
    private void GetParentSnapInfo(Control parentControl, BehaviorService bhvSvc);
    private void DisableAdorners(IServiceProvider serviceProvider, BehaviorService behaviorService, bool hostChange);
    private void InitiateDrag(Point initialMouseLocation, ICollection dragComps);
    internal ArrayList GetSortedDragControls(Int32& primaryControlIndex);
    internal void QueryContinueDrag(object sender, QueryContinueDragEventArgs e);
    internal bool ShowHideDragControls(bool show);
    internal void CleanupDrag();
    internal void CleanupDrag(bool clearImages);
}
public abstract class System.Windows.Forms.Design.Behavior.Glyph : object {
    public Behavior Behavior { get; }
    public Rectangle Bounds { get; }
    protected Glyph(Behavior behavior);
    public virtual Behavior get_Behavior();
    public virtual Rectangle get_Bounds();
    public abstract virtual Cursor GetHitTest(Point p);
    public abstract virtual void Paint(PaintEventArgs pe);
    protected void SetBehavior(Behavior behavior);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Design.Behavior.GlyphCollection : CollectionBase {
    public Glyph Item { get; public set; }
    public GlyphCollection(GlyphCollection value);
    public GlyphCollection(Glyph[] value);
    public Glyph get_Item(int index);
    public void set_Item(int index, Glyph value);
    public int Add(Glyph value);
    public void AddRange(Glyph[] value);
    public void AddRange(GlyphCollection value);
    public bool Contains(Glyph value);
    public void CopyTo(Glyph[] array, int index);
    public int IndexOf(Glyph value);
    public void Insert(int index, Glyph value);
    public void Remove(Glyph value);
}
public enum System.Windows.Forms.Design.Behavior.GlyphSelectionType : Enum {
    public int value__;
    public static GlyphSelectionType NotSelected;
    public static GlyphSelectionType Selected;
    public static GlyphSelectionType SelectedPrimary;
}
internal class System.Windows.Forms.Design.Behavior.GrabHandleGlyph : SelectionGlyphBase {
    private bool _isPrimary;
    internal GrabHandleGlyph(Rectangle controlBounds, GrabHandleGlyphType type, Behavior behavior, bool primarySelection);
    public virtual void Paint(PaintEventArgs pe);
}
internal enum System.Windows.Forms.Design.Behavior.GrabHandleGlyphType : Enum {
    public int value__;
    public static GrabHandleGlyphType UpperLeft;
    public static GrabHandleGlyphType UpperRight;
    public static GrabHandleGlyphType LowerLeft;
    public static GrabHandleGlyphType LowerRight;
    public static GrabHandleGlyphType MiddleTop;
    public static GrabHandleGlyphType MiddleBottom;
    public static GrabHandleGlyphType MiddleLeft;
    public static GrabHandleGlyphType MiddleRight;
}
internal class System.Windows.Forms.Design.Behavior.LockedBorderGlyph : SelectionGlyphBase {
    internal LockedBorderGlyph(Rectangle controlBounds, SelectionBorderGlyphType type);
    private void InitializeGlyph(Rectangle controlBounds, SelectionBorderGlyphType type);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.LockedHandleGlyph : SelectionGlyphBase {
    private bool _isPrimary;
    internal LockedHandleGlyph(Rectangle controlBounds, bool primarySelection);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.MiniLockedBorderGlyph : SelectionGlyphBase {
    private SelectionBorderGlyphType _type;
    internal SelectionBorderGlyphType Type { get; internal set; }
    internal MiniLockedBorderGlyph(Rectangle controlBounds, SelectionBorderGlyphType type, Behavior behavior, bool primarySelection);
    internal SelectionBorderGlyphType get_Type();
    internal void set_Type(SelectionBorderGlyphType value);
    private void InitializeGlyph(Rectangle controlBounds, SelectionBorderGlyphType type);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.NoResizeHandleGlyph : SelectionGlyphBase {
    private bool _isPrimary;
    internal NoResizeHandleGlyph(Rectangle controlBounds, SelectionRules selRules, bool primarySelection, Behavior behavior);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.NoResizeSelectionBorderGlyph : SelectionGlyphBase {
    internal NoResizeSelectionBorderGlyph(Rectangle controlBounds, SelectionRules rules, SelectionBorderGlyphType type, Behavior behavior);
    private void InitializeGlyph(Rectangle controlBounds, SelectionRules selRules, SelectionBorderGlyphType type);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.ResizeBehavior : Behavior {
    private ResizeComponent[] _resizeComponents;
    private IServiceProvider _serviceProvider;
    private BehaviorService _behaviorService;
    private SelectionRules _targetResizeRules;
    private Point _initialPoint;
    private bool _dragging;
    private bool _pushedBehavior;
    private bool _initialResize;
    private DesignerTransaction _resizeTransaction;
    private static int MINSIZE;
    private static int BorderSize;
    private DragAssistanceManager _dragManager;
    private Point _lastMouseLoc;
    private Point _parentLocation;
    private Size _parentGridSize;
    private Point _lastMouseAbs;
    private Point _lastSnapOffset;
    private bool _didSnap;
    private Control _primaryControl;
    private Cursor _cursor;
    private StatusCommandUI _statusCommandUI;
    private Region _lastResizeRegion;
    private bool _captureLost;
    private BehaviorService BehaviorService { get; }
    public Cursor Cursor { get; }
    internal ResizeBehavior(IServiceProvider serviceProvider);
    private BehaviorService get_BehaviorService();
    public virtual Cursor get_Cursor();
    private Rectangle AdjustToGrid(Rectangle controlBounds, SelectionRules rules);
    private SnapLine[] GenerateSnapLines(SelectionRules rules, Point loc);
    private void InitiateResize();
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual void OnLoseCapture(Glyph g, EventArgs e);
    internal static int AdjustPixelsForIntegralHeight(Control control, int pixelsMoved);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
}
internal class System.Windows.Forms.Design.Behavior.SelectionBorderGlyph : SelectionGlyphBase {
    internal SelectionBorderGlyph(Rectangle controlBounds, SelectionRules rules, SelectionBorderGlyphType type, Behavior behavior);
    private void InitializeGlyph(Rectangle controlBounds, SelectionRules selRules, SelectionBorderGlyphType type);
    public virtual void Paint(PaintEventArgs pe);
}
internal enum System.Windows.Forms.Design.Behavior.SelectionBorderGlyphType : Enum {
    public int value__;
    public static SelectionBorderGlyphType Top;
    public static SelectionBorderGlyphType Bottom;
    public static SelectionBorderGlyphType Left;
    public static SelectionBorderGlyphType Right;
    public static SelectionBorderGlyphType Body;
}
internal abstract class System.Windows.Forms.Design.Behavior.SelectionGlyphBase : Glyph {
    protected Rectangle bounds;
    protected Rectangle hitBounds;
    protected Cursor hitTestCursor;
    protected SelectionRules rules;
    public SelectionRules SelectionRules { get; }
    public Cursor HitTestCursor { get; }
    public Rectangle Bounds { get; }
    internal SelectionGlyphBase(Behavior behavior);
    public SelectionRules get_SelectionRules();
    public virtual Cursor GetHitTest(Point p);
    public Cursor get_HitTestCursor();
    public virtual Rectangle get_Bounds();
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.Behavior.SelectionManager : object {
    private Adorner selectionAdorner;
    private Adorner bodyAdorner;
    private BehaviorService behaviorService;
    private IServiceProvider serviceProvider;
    private Hashtable componentToDesigner;
    private Control rootComponent;
    private ISelectionService selSvc;
    private IDesignerHost designerHost;
    private bool needRefresh;
    private Rectangle[] prevSelectionBounds;
    private object prevPrimarySelection;
    private Rectangle[] curSelectionBounds;
    private int curCompIndex;
    private DesignerActionUI designerActionUI;
    private bool selectionChanging;
    internal Adorner BodyGlyphAdorner { get; }
    internal bool NeedRefresh { get; internal set; }
    internal Adorner SelectionGlyphAdorner { get; }
    public SelectionManager(IServiceProvider serviceProvider, BehaviorService behaviorService);
    internal Adorner get_BodyGlyphAdorner();
    internal bool get_NeedRefresh();
    internal void set_NeedRefresh(bool value);
    internal Adorner get_SelectionGlyphAdorner();
    private void AddAllControlGlyphs(Control parent, ArrayList selComps, object primarySelection);
    private void AddControlGlyphs(Control c, GlyphSelectionType selType);
    public sealed virtual void Dispose();
    public void Refresh();
    private void OnComponentAdded(object source, ComponentEventArgs ce);
    private void OnBeginDrag(object source, BehaviorDragDropEventArgs e);
    internal void OnBeginDrag(BehaviorDragDropEventArgs e);
    private void OnComponentChanged(object source, ComponentChangedEventArgs ce);
    private void OnComponentRemoved(object source, ComponentEventArgs ce);
    private Region DetermineRegionToRefresh(object primarySelection);
    private void OnSynchronize(object sender, EventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
}
public class System.Windows.Forms.Design.Behavior.SnapLine : object {
    internal static string Margin;
    internal static string MarginRight;
    internal static string MarginLeft;
    internal static string MarginBottom;
    internal static string MarginTop;
    internal static string Padding;
    internal static string PaddingRight;
    internal static string PaddingLeft;
    internal static string PaddingBottom;
    internal static string PaddingTop;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapLinePriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapLineType <SnapLineType>k__BackingField;
    public string Filter { get; }
    public bool IsHorizontal { get; }
    public bool IsVertical { get; }
    public int Offset { get; private set; }
    public SnapLinePriority Priority { get; }
    public SnapLineType SnapLineType { get; }
    public SnapLine(SnapLineType type, int offset);
    public SnapLine(SnapLineType type, int offset, string filter);
    public SnapLine(SnapLineType type, int offset, SnapLinePriority priority);
    public SnapLine(SnapLineType type, int offset, string filter, SnapLinePriority priority);
    [CompilerGeneratedAttribute]
public string get_Filter();
    public bool get_IsHorizontal();
    public bool get_IsVertical();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(int value);
    [CompilerGeneratedAttribute]
public SnapLinePriority get_Priority();
    [CompilerGeneratedAttribute]
public SnapLineType get_SnapLineType();
    public void AdjustOffset(int adjustment);
    public static bool ShouldSnap(SnapLine line1, SnapLine line2);
    public virtual string ToString();
}
public enum System.Windows.Forms.Design.Behavior.SnapLinePriority : Enum {
    public int value__;
    public static SnapLinePriority Low;
    public static SnapLinePriority Medium;
    public static SnapLinePriority High;
    public static SnapLinePriority Always;
}
public enum System.Windows.Forms.Design.Behavior.SnapLineType : Enum {
    public int value__;
    public static SnapLineType Top;
    public static SnapLineType Bottom;
    public static SnapLineType Left;
    public static SnapLineType Right;
    public static SnapLineType Horizontal;
    public static SnapLineType Vertical;
    public static SnapLineType Baseline;
}
internal class System.Windows.Forms.Design.Behavior.ToolboxSnapDragDropEventArgs : DragEventArgs {
    public SnapDirection SnapDirections { get; }
    public Point Offset { get; }
    public ToolboxSnapDragDropEventArgs(SnapDirection snapDirections, Point offset, DragEventArgs origArgs);
    public SnapDirection get_SnapDirections();
    public Point get_Offset();
}
internal class System.Windows.Forms.Design.ChangeToolStripParentVerb : object {
    private ToolStripDesigner _designer;
    private IDesignerHost _host;
    private IComponentChangeService _componentChangeSvc;
    private IServiceProvider _provider;
    internal ChangeToolStripParentVerb(string text, ToolStripDesigner designer);
    public void ChangeParent();
    private Control GetParent(ToolStripContainer container, Control c);
}
internal class System.Windows.Forms.Design.CollectionEditVerbManager : object {
    private ComponentDesigner _designer;
    private IComponentChangeService _componentChangeSvc;
    private PropertyDescriptor _targetProperty;
    private DesignerVerb _editItemsVerb;
    private IComponentChangeService ChangeService { get; }
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    public DesignerVerb EditItemsVerb { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    internal CollectionEditVerbManager(string text, ComponentDesigner designer, PropertyDescriptor prop, bool addToDesignerVerbs);
    private IComponentChangeService get_ChangeService();
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    public DesignerVerb get_EditItemsVerb();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
    private void OnEditItems(object sender, EventArgs e);
}
internal class System.Windows.Forms.Design.CommandSet : object {
    protected ISite site;
    private CommandSetItem[] _commandSet;
    private IMenuCommandService _menuService;
    private IEventHandlerService _eventService;
    private ISelectionService _selectionService;
    protected int selCount;
    protected IComponent primarySelection;
    private bool _selectionInherited;
    protected bool controlsOnlySelection;
    private int _selectionVersion;
    private static int SORT_HORIZONTAL;
    private static int SORT_VERTICAL;
    private static int SORT_ZORDER;
    private static string CF_DESIGNER;
    protected DragAssistanceManager dragManager;
    private Timer _snapLineTimer;
    private BehaviorService _behaviorService;
    private StatusCommandUI _statusCommandUI;
    protected BehaviorService BehaviorService { get; }
    protected IMenuCommandService MenuService { get; }
    protected ISelectionService SelectionService { get; }
    protected int SelectionVersion { get; }
    protected Timer SnapLineTimer { get; }
    public CommandSet(ISite site);
    protected BehaviorService get_BehaviorService();
    protected IMenuCommandService get_MenuService();
    protected ISelectionService get_SelectionService();
    protected int get_SelectionVersion();
    protected Timer get_SnapLineTimer();
    private bool CheckComponentEditor(object obj, bool launchEditor);
    public virtual void Dispose();
    protected void EndDragManager();
    private Object[] FilterSelection(Object[] components, SelectionRules selectionRules);
    protected virtual ICollection GetCopySelection();
    private void GetAssociatedComponents(IComponent component, IDesignerHost host, ArrayList list);
    private Point GetLocation(IComponent comp);
    protected PropertyDescriptor GetProperty(object comp, string propName);
    protected virtual object GetService(Type serviceType);
    private Size GetSize(IComponent comp);
    protected virtual void GetSnapInformation(IDesignerHost host, IComponent component, Size& snapSize, IComponent& snapComponent, PropertyDescriptor& snapProperty);
    protected bool CanCheckout(IComponent comp);
    private void OnEventHandlerChanged(object sender, EventArgs e);
    private void OnKeyCancel(object sender, EventArgs e);
    protected virtual bool OnKeyCancel(object sender);
    protected void OnKeyDefault(object sender, EventArgs e);
    protected virtual void OnKeyMove(object sender, EventArgs e);
    protected void OnMenuAlignByPrimary(object sender, EventArgs e);
    protected void OnMenuAlignToGrid(object sender, EventArgs e);
    protected void OnMenuCenterSelection(object sender, EventArgs e);
    protected void OnMenuCopy(object sender, EventArgs e);
    protected void OnMenuCut(object sender, EventArgs e);
    protected void OnMenuDelete(object sender, EventArgs e);
    protected void OnMenuPaste(object sender, EventArgs e);
    protected void OnMenuSelectAll(object sender, EventArgs e);
    protected void OnMenuShowGrid(object sender, EventArgs e);
    protected void OnMenuSizingCommand(object sender, EventArgs e);
    protected void OnMenuSizeToGrid(object sender, EventArgs e);
    protected void OnMenuDesignerProperties(object sender, EventArgs e);
    protected void OnMenuSnapToGrid(object sender, EventArgs e);
    protected void OnMenuSpacingCommand(object sender, EventArgs e);
    protected void OnSelectionChanged(object sender, EventArgs e);
    private void OnSnapLineTimerExpire(object sender, EventArgs e);
    private void OnSnapLineTimerExpireMarshalled(object sender, EventArgs e);
    protected void OnStatusAlways(object sender, EventArgs e);
    protected void OnStatusAnySelection(object sender, EventArgs e);
    protected void OnStatusCopy(object sender, EventArgs e);
    protected void OnStatusCut(object sender, EventArgs e);
    protected void OnStatusDelete(object sender, EventArgs e);
    protected void OnStatusPaste(object sender, EventArgs e);
    private void OnStatusPrimarySelection(object sender, EventArgs e);
    protected virtual void OnStatusSelectAll(object sender, EventArgs e);
    protected virtual void OnUpdateCommandStatus();
    private ICollection PrependComponentNames(ICollection objects);
    private void SortSelection(Object[] selectedObjects, int nSortBy);
    private void UpdateClipboardItems(object s, EventArgs e);
    private void UpdatePastePositions(ArrayList controls);
    private void UpdatePasteTabIndex(Control componentControl, object parentComponent);
}
public enum System.Windows.Forms.Design.ComponentActionsType : Enum {
    public int value__;
    public static ComponentActionsType All;
    public static ComponentActionsType Component;
    public static ComponentActionsType Service;
}
public class System.Windows.Forms.Design.ComponentDocumentDesigner : ComponentDesigner {
    public Control Control { get; }
    public bool TrayAutoArrange { get; public set; }
    public bool TrayLargeIcon { get; public set; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    public Control get_Control();
    public bool get_TrayAutoArrange();
    public void set_TrayAutoArrange(bool value);
    public bool get_TrayLargeIcon();
    public void set_TrayLargeIcon(bool value);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    public virtual void Initialize(IComponent component);
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool);
    private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(IComponent component, IDictionary attributes);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(IComponent component, IDictionary events);
    private sealed virtual override bool System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(IComponent component, IDictionary properties);
    protected virtual void Dispose(bool disposing);
    [CLSCompliantAttribute("False")]
protected virtual bool GetToolSupported(ToolboxItem tool);
    protected virtual void PreFilterProperties(IDictionary properties);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[ProvidePropertyAttribute("Location", "System.ComponentModel.IComponent")]
[ProvidePropertyAttribute("TrayLocation", "System.ComponentModel.IComponent")]
public class System.Windows.Forms.Design.ComponentTray : ScrollableControl {
    private static Point InvalidPoint;
    private IServiceProvider serviceProvider;
    private Point whiteSpace;
    private Size grabHandle;
    private ArrayList controls;
    private SelectionUIHandler dragHandler;
    private ISelectionUIService selectionUISvc;
    private IToolboxService toolboxService;
    internal OleDragDropHandler oleDragDropHandler;
    private IDesigner mainDesigner;
    private IEventHandlerService eventHandlerService;
    private bool queriedTabOrder;
    private MenuCommand tabOrderCommand;
    private ICollection selectedObjects;
    private IMenuCommandService menuCommandService;
    private CommandSet privateCommandSet;
    private InheritanceUI inheritanceUI;
    private Point mouseDragStart;
    private Point mouseDragEnd;
    private Rectangle mouseDragWorkspace;
    private ToolboxItem mouseDragTool;
    private Point mouseDropLocation;
    private bool showLargeIcons;
    private bool autoArrange;
    private Point autoScrollPosBeforeDragging;
    private MenuCommand menucmdArrangeIcons;
    private MenuCommand menucmdLineupIcons;
    private MenuCommand menucmdLargeIcons;
    private bool fResetAmbient;
    private bool fSelectionChanged;
    private ComponentTrayGlyphManager glyphManager;
    public bool AutoArrange { get; public set; }
    public int ComponentCount { get; }
    internal GlyphCollection SelectionGlyphs { get; }
    public bool ShowLargeIcons { get; public set; }
    private IComponent System.Windows.Forms.Design.IOleDragClient.Component { get; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    internal SelectionUIHandler DragHandler { get; }
    private bool TabOrderActive { get; }
    private InheritanceUI InheritanceUI { get; }
    private IMenuCommandService MenuService { get; }
    internal Size ParentGridSize { get; }
    public ComponentTray(IDesigner mainDesigner, IServiceProvider serviceProvider);
    private static ComponentTray();
    private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    private void OnComponentRefresh(RefreshEventArgs e);
    private void OnSystemSettingChanged(object sender, EventArgs e);
    private void ResetTrayControls();
    private void OnSelectionChanged(object sender, EventArgs e);
    private void OnComponentRemoved(object sender, ComponentEventArgs cevent);
    private void OnMenuShowLargeIcons(object sender, EventArgs e);
    private void OnMenuLineupIcons(object sender, EventArgs e);
    private void DoLineupIcons();
    private void DoAutoArrange(bool dirtyDesigner);
    private void OnMenuArrangeIcons(object sender, EventArgs e);
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    public int get_ComponentCount();
    internal GlyphCollection get_SelectionGlyphs();
    public bool get_ShowLargeIcons();
    public void set_ShowLargeIcons(bool value);
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object extendee);
    private sealed virtual override IComponent System.Windows.Forms.Design.IOleDragClient.get_Component();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIHandler.BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    internal virtual OleDragDropHandler GetOleDragHandler();
    internal virtual SelectionUIHandler get_DragHandler();
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.DragMoved(Object[] components, Rectangle offset);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.EndDrag(Object[] components, bool cancel);
    private sealed virtual override Rectangle System.Windows.Forms.Design.ISelectionUIHandler.GetComponentBounds(object component);
    private sealed virtual override SelectionRules System.Windows.Forms.Design.ISelectionUIHandler.GetComponentRules(object component);
    private sealed virtual override Rectangle System.Windows.Forms.Design.ISelectionUIHandler.GetSelectionClipRect(object component);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OnSelectionDoubleClick(IComponent component);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIHandler.QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.ShowContextMenu(IComponent component);
    private void OnContextMenu(int x, int y, bool useSelection);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragEnter(DragEventArgs de);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragDrop(DragEventArgs de);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragOver(DragEventArgs de);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIHandler.OleDragLeave();
    public virtual void AddComponent(IComponent component);
    [CLSCompliantAttribute("False")]
protected virtual bool CanCreateComponentFromTool(ToolboxItem tool);
    private Type GetDesignerType(Type t, Type designerBaseType);
    protected virtual bool CanDisplayComponent(IComponent component);
    [CLSCompliantAttribute("False")]
public void CreateComponentFromTool(ToolboxItem tool);
    protected void DisplayError(Exception e);
    protected virtual void Dispose(bool disposing);
    public IComponent GetNextComponent(IComponent component, bool forward);
    [LocalizableAttribute("False")]
[CategoryAttribute("Layout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlLocationDescr")]
[DesignOnlyAttribute("True")]
public Point GetLocation(IComponent receiver);
    [CategoryAttribute("Layout")]
[LocalizableAttribute("False")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("ControlLocationDescr")]
[DesignOnlyAttribute("True")]
public Point GetTrayLocation(IComponent receiver);
    protected virtual object GetService(Type serviceType);
    public bool IsTrayComponent(IComponent comp);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs gfevent);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnLostCapture();
    private void DrawRubber(Point start, Point end);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    private Object[] GetComponentsInRect(Rectangle rect);
    protected virtual void OnPaint(PaintEventArgs pe);
    protected virtual void OnSetCursor();
    public virtual void RemoveComponent(IComponent component);
    public void SetLocation(IComponent receiver, Point location);
    public void SetTrayLocation(IComponent receiver, Point location);
    protected virtual void WndProc(Message& m);
    internal TrayControl GetTrayControlFromComponent(IComponent comp);
    private bool get_TabOrderActive();
    private InheritanceUI get_InheritanceUI();
    private IMenuCommandService get_MenuService();
    internal void FocusDesigner();
    internal Size get_ParentGridSize();
    internal void UpdatePastePositions(ArrayList components);
    private void PositionControl(TrayControl c);
    internal void RearrangeInAutoSlots(Control c, Point pos);
    private bool PositionInNextAutoSlot(TrayControl c, Control prevCtl, bool dirtyDesigner);
}
internal class System.Windows.Forms.Design.ContainerSelectorActiveEventArgs : EventArgs {
    private object _component;
    private ContainerSelectorActiveEventArgsType _eventType;
    public ContainerSelectorActiveEventArgs(object component);
    public ContainerSelectorActiveEventArgs(object component, ContainerSelectorActiveEventArgsType eventType);
}
internal enum System.Windows.Forms.Design.ContainerSelectorActiveEventArgsType : Enum {
    public int value__;
    public static ContainerSelectorActiveEventArgsType Contextmenu;
    public static ContainerSelectorActiveEventArgsType Mouse;
}
internal class System.Windows.Forms.Design.ContainerSelectorActiveEventHandler : MulticastDelegate {
    public ContainerSelectorActiveEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ContainerSelectorActiveEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ContainerSelectorActiveEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.Design.ContextMenuStripActionList : DesignerActionList {
    private ToolStripDropDown _toolStripDropDown;
    private bool _autoShow;
    public bool AutoShow { get; public set; }
    public bool ShowImageMargin { get; public set; }
    public bool ShowCheckMargin { get; public set; }
    public ToolStripRenderMode RenderMode { get; public set; }
    public ContextMenuStripActionList(ToolStripDropDownDesigner designer);
    private object GetProperty(string propertyName);
    private void ChangeProperty(string propertyName, object value);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public bool get_ShowImageMargin();
    public void set_ShowImageMargin(bool value);
    public bool get_ShowCheckMargin();
    public void set_ShowCheckMargin(bool value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ContextMenuStripGroup : object {
    private List`1<ToolStripItem> _items;
    private string _name;
    public List`1<ToolStripItem> Items { get; }
    public ContextMenuStripGroup(string name);
    public List`1<ToolStripItem> get_Items();
}
[DefaultMemberAttribute("Item")]
internal class System.Windows.Forms.Design.ContextMenuStripGroupCollection : DictionaryBase {
    public ContextMenuStripGroup Item { get; }
    public ContextMenuStripGroup get_Item(string key);
    public bool ContainsKey(string key);
    protected virtual void OnInsert(object key, object value);
    protected virtual void OnSet(object key, object oldValue, object newValue);
}
internal class System.Windows.Forms.Design.ControlCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    private bool HasAutoSizedChildren(Control parent);
    private bool HasMixedInheritedChildren(Control parent);
    protected virtual bool HasSitedNonReadonlyChildren(Control parent);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    private void SerializeControlHierarchy(IDesignerSerializationManager manager, IDesignerHost host, object value);
    private static Type ToTargetType(object context, Type runtimeType);
    private static Type[] ToTargetTypes(object context, Type[] runtimeTypes);
    private void SerializeMethodInvocation(IDesignerSerializationManager manager, CodeStatementCollection statements, object control, string methodName, CodeExpressionCollection parameters, Type[] paramTypes, StatementOrdering ordering);
    private void SerializePerformLayout(IDesignerSerializationManager manager, CodeStatementCollection statements, object control);
    private void SerializeResumeLayout(IDesignerSerializationManager manager, CodeStatementCollection statements, object control);
    private void SerializeSuspendLayout(IDesignerSerializationManager manager, CodeStatementCollection statements, object control);
    private void SerializeZOrder(IDesignerSerializationManager manager, CodeStatementCollection statements, Control control);
}
public class System.Windows.Forms.Design.ControlDesigner : ComponentDesigner {
    protected static Point InvalidPoint;
    private static int s_currentProcessId;
    private IDesignerHost _host;
    private IDesignerTarget _designerTarget;
    private bool _liveRegion;
    private bool _inHitTest;
    private bool _hasLocation;
    private bool _locationChecked;
    private bool _locked;
    private bool _enabledchangerecursionguard;
    private BehaviorService _behaviorService;
    private ResizeBehavior _resizeBehavior;
    private ContainerSelectorBehavior _moveBehavior;
    private ISelectionUIService _selectionUISvc;
    private IEventHandlerService _eventSvc;
    private IToolboxService _toolboxSvc;
    private InheritanceUI _inheritanceUI;
    private IOverlayService _overlayService;
    private Point _mouseDragLast;
    private bool _mouseDragMoved;
    private int _lastMoveScreenX;
    private int _lastMoveScreenY;
    private int _lastClickMessageTime;
    private int _lastClickMessagePositionX;
    private int _lastClickMessagePositionY;
    private Point _downPos;
    [CompilerGeneratedAttribute]
private EventHandler DisposingHandler;
    private CollectionChangeEventHandler _dataBindingsCollectionChanged;
    private Exception _thrownException;
    private bool _ctrlSelect;
    private bool _toolPassThrough;
    private bool _removalNotificationHooked;
    private bool _revokeDragDrop;
    private bool _hadDragDrop;
    private static bool s_inContextMenu;
    private DockingActionList _dockingAction;
    private StatusCommandUI _statusCommandUI;
    private bool _forceVisible;
    private bool _autoResizeHandles;
    private Dictionary`2<IntPtr, bool> _subclassedChildren;
    protected AccessibleObject accessibilityObj;
    protected BehaviorService BehaviorService { get; }
    internal bool ForceVisible { get; internal set; }
    public ICollection AssociatedComponents { get; }
    public AccessibleObject AccessibilityObject { get; }
    public Control Control { get; }
    protected bool EnableDragRect { get; }
    protected IComponent ParentComponent { get; }
    public bool ParticipatesWithSnapLines { get; }
    public bool AutoResizeHandles { get; public set; }
    private IDesignerTarget DesignerTarget { get; private set; }
    private Dictionary`2<IntPtr, bool> SubclassedChildWindows { get; }
    public SelectionRules SelectionRules { get; }
    internal bool ControlSupportsSnaplines { get; }
    public IList SnapLines { get; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    internal bool IsRootDesigner { get; }
    internal Behavior MoveBehavior { get; }
    internal Behavior StandardBehavior { get; }
    internal bool SerializePerformLayout { get; }
    private bool AllowDrop { get; private set; }
    private bool Enabled { get; private set; }
    private bool Visible { get; private set; }
    private bool Locked { get; private set; }
    private IOverlayService OverlayService { get; }
    private int CurrentProcessId { get; }
    private static ControlDesigner();
    [CompilerGeneratedAttribute]
private void add_DisposingHandler(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove_DisposingHandler(EventHandler value);
    protected BehaviorService get_BehaviorService();
    internal bool get_ForceVisible();
    internal void set_ForceVisible(bool value);
    public virtual ICollection get_AssociatedComponents();
    public virtual AccessibleObject get_AccessibilityObject();
    public virtual Control get_Control();
    protected virtual bool get_EnableDragRect();
    protected virtual IComponent get_ParentComponent();
    public virtual bool get_ParticipatesWithSnapLines();
    public bool get_AutoResizeHandles();
    public void set_AutoResizeHandles(bool value);
    private IDesignerTarget get_DesignerTarget();
    private void set_DesignerTarget(IDesignerTarget value);
    private Dictionary`2<IntPtr, bool> get_SubclassedChildWindows();
    public virtual SelectionRules get_SelectionRules();
    internal virtual bool get_ControlSupportsSnaplines();
    internal Point GetOffsetToClientArea();
    private bool IsResizableConsiderAutoSize(PropertyDescriptor autoSizeProp, PropertyDescriptor autoSizeModeProp);
    public virtual IList get_SnapLines();
    internal IList SnapLinesInternal();
    internal IList SnapLinesInternal(Padding margin);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    internal bool get_IsRootDesigner();
    public virtual int NumberOfInternalControlDesigners();
    public virtual ControlDesigner InternalControlDesigner(int internalControlIndex);
    protected void BaseWndProc(Message& m);
    public virtual bool CanBeParentedTo(IDesigner parentDesigner);
    protected void DefWndProc(Message& m);
    protected void DisplayError(Exception e);
    protected virtual void Dispose(bool disposing);
    private void OnControlAdded(object sender, ControlEventArgs e);
    private void DataSource_ComponentRemoved(object sender, ComponentEventArgs e);
    protected bool EnableDesignMode(Control child, string name);
    protected void EnableDragDrop(bool value);
    private void OnGiveFeedback(object s, GiveFeedbackEventArgs e);
    private void OnDragLeave(object s, EventArgs e);
    private void OnDragEnter(object s, DragEventArgs e);
    private void OnDragOver(object s, DragEventArgs e);
    private void OnDragDrop(object s, DragEventArgs e);
    internal Behavior get_MoveBehavior();
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    internal ControlBodyGlyph GetControlGlyphInternal(GlyphSelectionType selectionType);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    internal virtual Behavior get_StandardBehavior();
    internal virtual bool get_SerializePerformLayout();
    protected virtual bool GetHitTest(Point point);
    protected void HookChildControls(Control firstChild);
    private void OnChildHandleCreated(object sender, EventArgs e);
    public virtual void Initialize(IComponent component);
    private void OnSizeChanged(object sender, EventArgs e);
    private void OnLocationChanged(object sender, EventArgs e);
    private void OnParentChanged(object sender, EventArgs e);
    private void OnControlRemoved(object sender, ControlEventArgs e);
    private void DataBindingsCollectionChanged(object sender, CollectionChangeEventArgs e);
    private void OnEnabledChanged(object sender, EventArgs e);
    private bool get_AllowDrop();
    private void set_AllowDrop(bool value);
    private bool get_Enabled();
    private void set_Enabled(bool value);
    private bool get_Visible();
    private void set_Visible(bool value);
    public virtual void InitializeExistingComponent(IDictionary defaultValues);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnCreateHandle();
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragComplete(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnGiveFeedback(GiveFeedbackEventArgs e);
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnMouseEnter();
    protected virtual void OnMouseHover();
    protected virtual void OnMouseLeave();
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    protected virtual void OnSetCursor();
    private bool get_Locked();
    private void set_Locked(bool value);
    protected virtual void PreFilterProperties(IDictionary properties);
    protected void UnhookChildControls(Control firstChild);
    protected virtual void WndProc(Message& m);
    private void PaintException(PaintEventArgs e, Exception ex);
    private IOverlayService get_OverlayService();
    private bool IsMouseMessage(int msg);
    private bool IsDoubleClick(int x, int y);
    private void OnMouseDoubleClick();
    private int GetParentPointFromLparam(IntPtr lParam);
    internal void HookChildHandles(IntPtr firstChild);
    private bool IsWindowInCurrentProcess(IntPtr hwnd);
    private int get_CurrentProcessId();
    private void OnHandleChange();
    internal void RemoveSubclassedWindow(IntPtr hwnd);
    internal void SetUnhandledException(Control owner, Exception exception);
}
internal class System.Windows.Forms.Design.CustomMenuItemCollection : CollectionBase {
    public int Add(ToolStripItem value);
    public void AddRange(ToolStripItem[] value);
    public virtual void RefreshItems();
}
internal class System.Windows.Forms.Design.DataGridViewRowCollectionCodeDomSerializer : CollectionCodeDomSerializer {
    private static DataGridViewRowCollectionCodeDomSerializer s_defaultSerializer;
    internal static DataGridViewRowCollectionCodeDomSerializer DefaultSerializer { get; }
    internal static DataGridViewRowCollectionCodeDomSerializer get_DefaultSerializer();
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
}
internal class System.Windows.Forms.Design.DataMemberFieldConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Forms.Design.DesignerFrame : Control {
    private ISite _designerSite;
    private OverlayControl _designerRegion;
    private Splitter _splitter;
    private Control _designer;
    private BehaviorService _behaviorService;
    private IUIService _uiService;
    internal Point AutoScrollPosition { get; }
    private BehaviorService BehaviorService { get; }
    public DesignerFrame(ISite site);
    internal Point get_AutoScrollPosition();
    private BehaviorService get_BehaviorService();
    protected virtual void Dispose(bool disposing);
    private void ForceDesignerRedraw(bool focus);
    public void Initialize(Control view);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    private void OnSplitterMoved(object sender, SplitterEventArgs e);
    private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    private void SyncDesignerUI();
    protected virtual void WndProc(Message& m);
    private sealed virtual override int System.Windows.Forms.Design.IOverlayService.PushOverlay(Control control);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.RemoveOverlay(Control control);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.InsertOverlay(Control control, int index);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.InvalidateOverlays(Rectangle screenRectangle);
    private sealed virtual override void System.Windows.Forms.Design.IOverlayService.InvalidateOverlays(Region screenRegion);
    private sealed virtual override void System.Windows.Forms.Design.ISplitWindowService.AddSplitWindow(Control window);
    private sealed virtual override void System.Windows.Forms.Design.ISplitWindowService.RemoveSplitWindow(Control window);
    private sealed virtual override IEnumerable System.Windows.Forms.Design.IContainsThemedScrollbarWindows.ThemedScrollbarWindows();
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.Design.DesignerOptions : object {
    private static int MinGridSize;
    private static int MaxGridSize;
    private Size _gridSize;
    [CompilerGeneratedAttribute]
private bool <ShowGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SnapToGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSnapLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSmartTags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ObjectBoundSmartTagAutoShow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseOptimizedCodeGeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableInSituEditing>k__BackingField;
    [SRDisplayNameAttribute("DesignerOptions_GridSizeDisplayName")]
[SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDescriptionAttribute("DesignerOptions_GridSizeDesc")]
public Size GridSize { get; public set; }
    [SRDescriptionAttribute("DesignerOptions_ShowGridDesc")]
[SRDisplayNameAttribute("DesignerOptions_ShowGridDisplayName")]
[SRCategoryAttribute("DesignerOptions_LayoutSettings")]
public bool ShowGrid { get; public set; }
    [SRDisplayNameAttribute("DesignerOptions_SnapToGridDisplayName")]
[SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDescriptionAttribute("DesignerOptions_SnapToGridDesc")]
public bool SnapToGrid { get; public set; }
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDescriptionAttribute("DesignerOptions_UseSnapLines")]
public bool UseSnapLines { get; public set; }
    [SRCategoryAttribute("DesignerOptions_LayoutSettings")]
[SRDescriptionAttribute("DesignerOptions_UseSmartTags")]
public bool UseSmartTags { get; public set; }
    [SRCategoryAttribute("DesignerOptions_ObjectBoundSmartTagSettings")]
[SRDisplayNameAttribute("DesignerOptions_ObjectBoundSmartTagAutoShowDisplayName")]
[SRDescriptionAttribute("DesignerOptions_ObjectBoundSmartTagAutoShow")]
public bool ObjectBoundSmartTagAutoShow { get; public set; }
    [SRDisplayNameAttribute("DesignerOptions_CodeGenDisplay")]
[SRCategoryAttribute("DesignerOptions_CodeGenSettings")]
[SRDescriptionAttribute("DesignerOptions_OptimizedCodeGen")]
public bool UseOptimizedCodeGeneration { get; public set; }
    [SRCategoryAttribute("DesignerOptions_EnableInSituEditingCat")]
[SRDisplayNameAttribute("DesignerOptions_EnableInSituEditingDisplay")]
[SRDescriptionAttribute("DesignerOptions_EnableInSituEditingDesc")]
[BrowsableAttribute("False")]
public bool EnableInSituEditing { get; public set; }
    public virtual Size get_GridSize();
    public virtual void set_GridSize(Size value);
    [CompilerGeneratedAttribute]
public virtual bool get_ShowGrid();
    [CompilerGeneratedAttribute]
public virtual void set_ShowGrid(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_SnapToGrid();
    [CompilerGeneratedAttribute]
public virtual void set_SnapToGrid(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseSnapLines();
    [CompilerGeneratedAttribute]
public virtual void set_UseSnapLines(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseSmartTags();
    [CompilerGeneratedAttribute]
public virtual void set_UseSmartTags(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ObjectBoundSmartTagAutoShow();
    [CompilerGeneratedAttribute]
public virtual void set_ObjectBoundSmartTagAutoShow(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UseOptimizedCodeGeneration();
    [CompilerGeneratedAttribute]
public virtual void set_UseOptimizedCodeGeneration(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_EnableInSituEditing();
    [CompilerGeneratedAttribute]
public virtual void set_EnableInSituEditing(bool value);
}
internal class System.Windows.Forms.Design.DesignerToolStripControlHost : ToolStripControlHost {
    private BehaviorService _behaviorService;
    internal ToolStrip _parent;
    protected Size DefaultSize { get; }
    public DesignerToolStripControlHost(Control c);
    protected virtual Size get_DefaultSize();
    internal GlyphCollection GetGlyphs(ToolStrip parent, GlyphCollection glyphs, Behavior standardBehavior);
    internal void RefreshSelectionGlyph();
    internal void SelectControl();
}
internal static class System.Windows.Forms.Design.DesignerUtils : object {
    private static Size s_minDragSize;
    private static SolidBrush s_hoverBrush;
    private static HatchBrush s_selectionBorderBrush;
    private static IntPtr s_grabHandleFillBrushPrimary;
    private static IntPtr s_grabHandleFillBrush;
    private static IntPtr s_grabHandlePenPrimary;
    private static IntPtr s_grabHandlePen;
    private static Bitmap s_boxImage;
    public static int BOXIMAGESIZE;
    public static int SELECTIONBORDERSIZE;
    public static int SELECTIONBORDERHITAREA;
    public static int HANDLESIZE;
    public static int HANDLEOVERLAP;
    public static int SELECTIONBORDEROFFSET;
    public static int NORESIZEHANDLESIZE;
    public static int NORESIZEBORDEROFFSET;
    public static int LOCKHANDLEHEIGHT;
    public static int LOCKHANDLEWIDTH;
    public static int LOCKHANDLEOVERLAP;
    public static int LOCKEDSELECTIONBORDEROFFSET_Y;
    public static int LOCKEDSELECTIONBORDEROFFSET_X;
    public static int LOCKHANDLESIZE_UPPER;
    public static int LOCKHANDLEHEIGHT_LOWER;
    public static int LOCKHANDLEWIDTH_LOWER;
    public static int LOCKHANDLEUPPER_OFFSET;
    public static int LOCKHANDLELOWER_OFFSET;
    public static int CONTAINERGRABHANDLESIZE;
    public static int SNAPELINEDELAY;
    public static int MINIMUMSTYLESIZE;
    public static int MINIMUMSTYLEPERCENT;
    public static int MINCONTROLBITMAPSIZE;
    public static int MINUMUMSTYLESIZEDRAG;
    public static int DEFAULTROWCOUNT;
    public static int DEFAULTCOLUMNCOUNT;
    public static int RESIZEGLYPHSIZE;
    public static int DEFAULTFORMPADDING;
    public static ContentAlignment anyTopAlignment;
    public static ContentAlignment anyMiddleAlignment;
    public static Image BoxImage { get; }
    public static Brush HoverBrush { get; }
    public static Size MinDragSize { get; }
    public static Point LastCursorPoint { get; }
    private static DesignerUtils();
    public static Image get_BoxImage();
    public static Brush get_HoverBrush();
    public static Size get_MinDragSize();
    public static Point get_LastCursorPoint();
    public static void SyncBrushes();
    private static void DrawDragBorder(Graphics g, Size imageSize, int borderSize, Color backColor);
    public static void DrawResizeBorder(Graphics g, Region resizeBorder, Color backColor);
    public static void DrawFrame(Graphics g, Region resizeBorder, FrameStyle style, Color backColor);
    public static void DrawGrabHandle(Graphics graphics, Rectangle bounds, bool isPrimary, Glyph glyph);
    public static void DrawNoResizeHandle(Graphics graphics, Rectangle bounds, bool isPrimary, Glyph glyph);
    public static void DrawLockedHandle(Graphics graphics, Rectangle bounds, bool isPrimary, Glyph glyph);
    public static void DrawSelectionBorder(Graphics graphics, Rectangle bounds);
    public static void GenerateSnapShot(Control control, Image& image, int borderSize, double opacity, Color backColor);
    public static Size GetAdornmentDimensions(AdornmentType adornmentType);
    public static bool UseSnapLines(IServiceProvider provider);
    public static object GetOptionValue(IServiceProvider provider, string name);
    public static void GenerateSnapShotWithBitBlt(Control control, Image& image);
    public static bool GenerateSnapShotWithWM_PRINT(Control control, Image& image);
    public static Rectangle GetBoundsForSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type, int borderSize);
    private static Rectangle GetBoundsForSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type, int bordersize, int offset);
    public static Rectangle GetBoundsForSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type);
    public static Rectangle GetBoundsForNoResizeSelectionType(Rectangle originalBounds, SelectionBorderGlyphType type);
    public static int GetTextBaseline(Control ctrl, ContentAlignment alignment);
    public static Rectangle GetBoundsFromToolboxSnapDragDropInfo(ToolboxSnapDragDropEventArgs e, Rectangle originalBounds, bool isMirrored);
    public static string GetUniqueSiteName(IDesignerHost host, string name);
    private static void SetImageAlpha(Bitmap b, double opacity);
    public static ICollection FilterGenericTypes(ICollection types);
    public static IContainer CheckForNestedContainer(IContainer container);
    public static ICollection CopyDragObjects(ICollection objects, IServiceProvider svcProvider);
    private static ICollection GetCopySelection(ICollection objects, IDesignerHost host);
    internal static void GetAssociatedComponents(IComponent component, IDesignerHost host, ArrayList list);
    private static int TreeView_GetExtendedStyle(IntPtr handle);
    private static void TreeView_SetExtendedStyle(IntPtr handle, int extendedStyle, int mask);
    public static void ApplyTreeViewThemeStyles(TreeView treeView);
    private static void ListView_SetExtendedListViewStyleEx(IntPtr handle, int mask, int extendedStyle);
    public static void ApplyListViewThemeStyles(ListView listView);
}
internal class System.Windows.Forms.Design.DesignerVerbToolStripMenuItem : ToolStripMenuItem {
    private DesignerVerb _verb;
    public DesignerVerbToolStripMenuItem(DesignerVerb verb);
    public void RefreshItem();
    protected virtual void OnClick(EventArgs e);
}
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public class System.Windows.Forms.Design.DocumentDesigner : ScrollableControlDesigner {
    internal static IDesignerSerializationManager manager;
    public SelectionRules SelectionRules { get; }
    private ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }
    public virtual SelectionRules get_SelectionRules();
    private sealed virtual override ViewTechnology[] System.ComponentModel.Design.IRootDesigner.get_SupportedTechnologies();
    public virtual void Initialize(IComponent component);
    private sealed virtual override object System.ComponentModel.Design.IRootDesigner.GetView(ViewTechnology technology);
    private sealed virtual override bool System.Drawing.Design.IToolboxUser.GetToolSupported(ToolboxItem tool);
    private sealed virtual override void System.Drawing.Design.IToolboxUser.ToolPicked(ToolboxItem tool);
    protected virtual void Dispose(bool disposing);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    [CLSCompliantAttribute("False")]
protected virtual bool GetToolSupported(ToolboxItem tool);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnCreateHandle();
    protected virtual void EnsureMenuEditorService(IComponent c);
    protected virtual void PreFilterProperties(IDictionary properties);
    [CLSCompliantAttribute("False")]
protected virtual void ToolPicked(ToolboxItem tool);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.EditorServiceContext : object {
    private ComponentDesigner _designer;
    private IComponentChangeService _componentChangeSvc;
    private PropertyDescriptor _targetProperty;
    private IComponentChangeService ChangeService { get; }
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    internal EditorServiceContext(ComponentDesigner designer);
    internal EditorServiceContext(ComponentDesigner designer, PropertyDescriptor prop);
    internal EditorServiceContext(ComponentDesigner designer, PropertyDescriptor prop, string newVerbText);
    public static object EditValue(ComponentDesigner designer, object objectToChange, string propName);
    private IComponentChangeService get_ChangeService();
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
    private void OnEditItems(object sender, EventArgs e);
}
public class System.Windows.Forms.Design.EventHandlerService : object {
    private object _lastHandler;
    private Type _lastHandlerType;
    private EventHandler _changedEvent;
    private HandlerEntry _handlerHead;
    [CompilerGeneratedAttribute]
private Control <FocusWindow>k__BackingField;
    public Control FocusWindow { get; }
    public EventHandlerService(Control focusWnd);
    public sealed virtual void add_EventHandlerChanged(EventHandler value);
    public sealed virtual void remove_EventHandlerChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual Control get_FocusWindow();
    public sealed virtual object GetHandler(Type handlerType);
    public sealed virtual void PopHandler(object handler);
    public sealed virtual void PushHandler(object handler);
    private void OnEventHandlerChanged(EventArgs e);
    internal TestAccessor GetTestAccessor();
}
internal class System.Windows.Forms.Design.FormDocumentDesigner : DocumentDesigner {
    private Size _autoScaleBaseSize;
    private bool _inAutoscale;
    private bool _initializing;
    private bool _autoSize;
    private ToolStripAdornerWindowService _toolStripAdornerWindowService;
    private IButtonControl AcceptButton { get; private set; }
    private IButtonControl CancelButton { get; private set; }
    private Size AutoScaleBaseSize { get; private set; }
    private bool AutoSize { get; private set; }
    private Size ClientSize { get; private set; }
    private bool IsMdiContainer { get; private set; }
    private double Opacity { get; private set; }
    public IList SnapLines { get; }
    private Size Size { get; private set; }
    private bool ShowInTaskbar { get; private set; }
    private FormWindowState WindowState { get; private set; }
    private IButtonControl get_AcceptButton();
    private void set_AcceptButton(IButtonControl value);
    private IButtonControl get_CancelButton();
    private void set_CancelButton(IButtonControl value);
    private Size get_AutoScaleBaseSize();
    private void set_AutoScaleBaseSize(Size value);
    private bool get_AutoSize();
    private void set_AutoSize(bool value);
    private bool ShouldSerializeAutoScaleBaseSize();
    private Size get_ClientSize();
    private void set_ClientSize(Size value);
    private bool get_IsMdiContainer();
    private void set_IsMdiContainer(bool value);
    private double get_Opacity();
    private void set_Opacity(double value);
    public virtual IList get_SnapLines();
    private Size get_Size();
    private void set_Size(Size value);
    private bool get_ShowInTaskbar();
    private void set_ShowInTaskbar(bool value);
    private FormWindowState get_WindowState();
    private void set_WindowState(FormWindowState value);
    private void ApplyAutoScaling(SizeF baseVar, Form form);
    protected virtual void Dispose(bool disposing);
    private void EnsureToolStripWindowAdornerService();
    public virtual void Initialize(IComponent component);
    private void OnComponentAdded(object source, ComponentEventArgs ce);
    private void OnComponentRemoved(object source, ComponentEventArgs ce);
    private void OnDesignerActivate(object source, EventArgs evevent);
    private void OnDesignerDeactivate(object sender, EventArgs e);
    private void OnLoadComplete(object source, EventArgs evevent);
    protected virtual void PreFilterProperties(IDictionary properties);
    private void WmWindowPosChanging(Message& m);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.GroupedContextMenuStrip : ContextMenuStrip {
    private StringCollection _groupOrdering;
    private ContextMenuStripGroupCollection _groups;
    private bool _populated;
    unknown bool Populated {public set; }
    public ContextMenuStripGroupCollection Groups { get; }
    public StringCollection GroupOrdering { get; }
    public void set_Populated(bool value);
    public ContextMenuStripGroupCollection get_Groups();
    public StringCollection get_GroupOrdering();
    public void Populate();
    protected virtual void OnOpening(CancelEventArgs e);
    public virtual void RefreshItems();
}
public interface System.Windows.Forms.Design.IContainsThemedScrollbarWindows {
    public abstract virtual IEnumerable ThemedScrollbarWindows();
}
internal interface System.Windows.Forms.Design.IEventHandlerService {
    public Control FocusWindow { get; }
    public abstract virtual Control get_FocusWindow();
    [CompilerGeneratedAttribute]
public abstract virtual void add_EventHandlerChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EventHandlerChanged(EventHandler value);
    public abstract virtual object GetHandler(Type handlerType);
    public abstract virtual void PopHandler(object handler);
    public abstract virtual void PushHandler(object handler);
}
public class System.Windows.Forms.Design.ImageListCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal interface System.Windows.Forms.Design.IMenuStatusHandler {
    public abstract virtual bool OverrideInvoke(MenuCommand cmd);
    public abstract virtual bool OverrideStatus(MenuCommand cmd);
}
internal interface System.Windows.Forms.Design.IMouseHandler {
    public abstract virtual void OnMouseDoubleClick(IComponent component);
    public abstract virtual void OnMouseDown(IComponent component, MouseButtons button, int x, int y);
    public abstract virtual void OnMouseHover(IComponent component);
    public abstract virtual void OnMouseMove(IComponent component, int x, int y);
    public abstract virtual void OnMouseUp(IComponent component, MouseButtons button);
    public abstract virtual void OnSetCursor(IComponent component);
}
internal class System.Windows.Forms.Design.InheritanceUI : object {
    private static Bitmap s_inheritanceGlyph;
    private static Rectangle s_inheritanceGlyphRect;
    private ToolTip _tooltip;
    public Bitmap InheritanceGlyph { get; }
    public Rectangle InheritanceGlyphRectangle { get; }
    public Bitmap get_InheritanceGlyph();
    public Rectangle get_InheritanceGlyphRectangle();
    public void AddInheritedControl(Control c, InheritanceLevel level);
    public void Dispose();
    public void RemoveInheritedControl(Control c);
}
internal interface System.Windows.Forms.Design.IOleDragClient {
    public IComponent Component { get; }
    public bool CanModifyComponents { get; }
    public abstract virtual IComponent get_Component();
    public abstract virtual bool get_CanModifyComponents();
    public abstract virtual bool AddComponent(IComponent component, string name, bool firstAdd);
    public abstract virtual bool IsDropOk(IComponent component);
    public abstract virtual Control GetDesignerControl();
    public abstract virtual Control GetControlForComponent(object component);
}
internal interface System.Windows.Forms.Design.IOverlayService {
    public abstract virtual int PushOverlay(Control control);
    public abstract virtual void RemoveOverlay(Control control);
    public abstract virtual void InsertOverlay(Control control, int index);
    public abstract virtual void InvalidateOverlays(Rectangle screenRectangle);
    public abstract virtual void InvalidateOverlays(Region screenRegion);
}
internal interface System.Windows.Forms.Design.ISelectionUIHandler {
    public abstract virtual bool BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void DragMoved(Object[] components, Rectangle offset);
    public abstract virtual void EndDrag(Object[] components, bool cancel);
    public abstract virtual Rectangle GetComponentBounds(object component);
    public abstract virtual SelectionRules GetComponentRules(object component);
    public abstract virtual Rectangle GetSelectionClipRect(object component);
    public abstract virtual void OnSelectionDoubleClick(IComponent component);
    public abstract virtual bool QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void ShowContextMenu(IComponent component);
    public abstract virtual void OleDragEnter(DragEventArgs de);
    public abstract virtual void OleDragDrop(DragEventArgs de);
    public abstract virtual void OleDragOver(DragEventArgs de);
    public abstract virtual void OleDragLeave();
}
internal interface System.Windows.Forms.Design.ISelectionUIService {
    public bool Visible { get; public set; }
    public bool Dragging { get; }
    public abstract virtual bool get_Visible();
    public abstract virtual void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    public abstract virtual void AssignSelectionUIHandler(object component, ISelectionUIHandler handler);
    public abstract virtual void ClearSelectionUIHandler(object component, ISelectionUIHandler handler);
    public abstract virtual bool BeginDrag(SelectionRules rules, int initialX, int initialY);
    public abstract virtual bool get_Dragging();
    public abstract virtual void DragMoved(Rectangle offset);
    public abstract virtual void EndDrag(bool cancel);
    public abstract virtual Object[] FilterSelection(Object[] components, SelectionRules selectionRules);
    public abstract virtual Size GetAdornmentDimensions(AdornmentType adornmentType);
    public abstract virtual bool GetAdornmentHitTest(object component, Point pt);
    public abstract virtual bool GetContainerSelected(object component);
    public abstract virtual SelectionRules GetSelectionRules(object component);
    public abstract virtual SelectionStyles GetSelectionStyle(object component);
    public abstract virtual void SetContainerSelected(object component, bool selected);
    public abstract virtual void SetSelectionStyle(object component, SelectionStyles style);
    public abstract virtual void SyncSelection();
    public abstract virtual void SyncComponent(object component);
}
internal interface System.Windows.Forms.Design.ISplitWindowService {
    public abstract virtual void AddSplitWindow(Control window);
    public abstract virtual void RemoveSplitWindow(Control window);
}
[ComVisibleAttribute("True")]
internal interface System.Windows.Forms.Design.ISupportInSituService {
    public bool IgnoreMessages { get; }
    public abstract virtual bool get_IgnoreMessages();
    public abstract virtual void HandleKeyChar();
    public abstract virtual IntPtr GetEditWindow();
}
internal class System.Windows.Forms.Design.ItemTypeToolStripMenuItem : ToolStripMenuItem {
    private static string s_systemWindowsFormsNamespace;
    private static ToolboxItem s_invalidToolboxItem;
    private Type _itemType;
    private bool _convertTo;
    private ToolboxItem _tbxItem;
    private Image _image;
    public static string SystemWindowsFormsNamespace { get; }
    public Type ItemType { get; }
    public bool ConvertTo { get; public set; }
    public Image Image { get; public set; }
    public string Text { get; public set; }
    public ToolboxItem TbxItem { get; public set; }
    public ItemTypeToolStripMenuItem(Type t);
    private static ItemTypeToolStripMenuItem();
    public static string get_SystemWindowsFormsNamespace();
    public Type get_ItemType();
    public bool get_ConvertTo();
    public void set_ConvertTo(bool value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public ToolboxItem get_TbxItem();
    public void set_TbxItem(ToolboxItem value);
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Windows.Forms.Design.MaskDescriptor : object {
    public string Mask { get; }
    public string Name { get; }
    public string Sample { get; }
    public Type ValidatingType { get; }
    public CultureInfo Culture { get; }
    public abstract virtual string get_Mask();
    public abstract virtual string get_Name();
    public abstract virtual string get_Sample();
    public abstract virtual Type get_ValidatingType();
    public virtual CultureInfo get_Culture();
    public static bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor);
    public static bool IsValidMaskDescriptor(MaskDescriptor maskDescriptor, String& validationErrorDescription);
    private static void maskedTextBox1_MaskInputRejected(object sender, MaskInputRejectedEventArgs e);
    private static void maskedTextBox1_TypeValidationCompleted(object sender, TypeValidationEventArgs e);
    public virtual bool Equals(object maskDescriptor);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Windows.Forms.Design.MaskDescriptorComparer : object {
    private SortOrder _sortOrder;
    private SortType _sortType;
    public MaskDescriptorComparer(SortType sortType, SortOrder sortOrder);
    public sealed virtual int Compare(MaskDescriptor maskDescriptorA, MaskDescriptor maskDescriptorB);
    public int GetHashCode(MaskDescriptor maskDescriptor);
    public bool Equals(MaskDescriptor maskDescriptorA, MaskDescriptor maskDescriptorB);
}
internal class System.Windows.Forms.Design.MaskDescriptorTemplate : MaskDescriptor {
    private string _mask;
    private string _name;
    private string _sample;
    private Type _type;
    private CultureInfo _culture;
    public string Mask { get; }
    public string Name { get; }
    public string Sample { get; }
    public Type ValidatingType { get; }
    public CultureInfo Culture { get; }
    public MaskDescriptorTemplate(string mask, string name, string sample, Type validatingType, CultureInfo culture);
    public MaskDescriptorTemplate(string mask, string name, string sample, Type validatingType, CultureInfo culture, bool skipValidation);
    public virtual string get_Mask();
    public virtual string get_Name();
    public virtual string get_Sample();
    public virtual Type get_ValidatingType();
    public virtual CultureInfo get_Culture();
    public static List`1<MaskDescriptor> GetLocalizedMaskDescriptors(CultureInfo culture);
}
internal class System.Windows.Forms.Design.MaskDesignerDialog : Form {
    private Label _lblHeader;
    private ListView _listViewCannedMasks;
    private CheckBox _checkBoxUseValidatingType;
    private ColumnHeader _maskDescriptionHeader;
    private ColumnHeader _dataFormatHeader;
    private ColumnHeader _validatingTypeHeader;
    private TableLayoutPanel _maskTryItTable;
    private Label _lblMask;
    private TextBox _txtBoxMask;
    private Label _lblTryIt;
    private MaskedTextBox _maskedTextBox;
    private TableLayoutPanel _okCancelTableLayoutPanel;
    private TableLayoutPanel _overarchingTableLayoutPanel;
    private Button _btnOK;
    private Button _btnCancel;
    private ErrorProvider _errorProvider;
    private List`1<MaskDescriptor> _maskDescriptors;
    private MaskDescriptor _customMaskDescriptor;
    private SortOrder _listViewSortOrder;
    private IContainer _components;
    private IHelpService _helpService;
    [CompilerGeneratedAttribute]
private Type <ValidatingType>k__BackingField;
    public string Mask { get; }
    public Type ValidatingType { get; private set; }
    public IEnumerator MaskDescriptors { get; }
    private string HelpTopic { get; }
    public MaskDesignerDialog(MaskedTextBox instance, IHelpService helpService);
    private void HookEvents();
    private void InitializeComponent();
    public string get_Mask();
    [CompilerGeneratedAttribute]
public Type get_ValidatingType();
    [CompilerGeneratedAttribute]
private void set_ValidatingType(Type value);
    public IEnumerator get_MaskDescriptors();
    private void AddDefaultMaskDescriptors(CultureInfo culture);
    private bool ContainsMaskDescriptor(MaskDescriptor maskDescriptor);
    public void DiscoverMaskDescriptors(ITypeDiscoveryService discoveryService);
    private int GetMaskDescriptorIndex(MaskDescriptor maskDescriptor);
    private void SelectMtbMaskDescriptor();
    private void SetSelectedMaskDescriptor(MaskDescriptor maskDex);
    private void SetSelectedMaskDescriptor(int maskDexIndex);
    private void UpdateSortedListView(SortType sortType);
    private void InsertMaskDescriptor(int index, MaskDescriptor maskDescriptor);
    private void InsertMaskDescriptor(int index, MaskDescriptor maskDescriptor, bool validateDescriptor);
    private void listViewCannedMasks_ColumnClick(object sender, ColumnClickEventArgs e);
    private void btnOK_Click(object sender, EventArgs e);
    private void listViewCannedMasks_Enter(object sender, EventArgs e);
    private void listViewCannedMasks_SelectedIndexChanged(object sender, EventArgs e);
    private void MaskDesignerDialog_Load(object sender, EventArgs e);
    private void maskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e);
    private string get_HelpTopic();
    private void ShowHelp();
    private void MaskDesignerDialog_HelpButtonClicked(object sender, CancelEventArgs e);
    private void maskedTextBox_KeyDown(object sender, KeyEventArgs e);
    private void txtBoxMask_Validating(object sender, CancelEventArgs e);
    private void txtBoxMask_TextChanged(object sender, EventArgs e);
}
internal class System.Windows.Forms.Design.MaskedTextBoxDesigner : TextBoxBaseDesigner {
    private DesignerVerbCollection _verbs;
    private DesignerActionListCollection _actions;
    public DesignerActionListCollection ActionLists { get; }
    public SelectionRules SelectionRules { get; }
    private char PasswordChar { get; private set; }
    private string Text { get; private set; }
    public DesignerVerbCollection Verbs { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    internal static MaskedTextBox GetDesignMaskedTextBox(MaskedTextBox maskedTextBox);
    internal static string GetMaskInputRejectedErrorMessage(MaskInputRejectedEventArgs e);
    [ObsoleteAttribute("This method has been deprecated. Use InitializeNewComponent instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual void OnSetComponentDefaults();
    private void OnVerbSetMask(object sender, EventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual SelectionRules get_SelectionRules();
    private char get_PasswordChar();
    private void set_PasswordChar(char value);
    private string get_Text();
    private void set_Text(string value);
    public virtual DesignerVerbCollection get_Verbs();
}
internal class System.Windows.Forms.Design.MaskedTextBoxDesignerActionList : DesignerActionList {
    private MaskedTextBox _maskedTextBox;
    private ITypeDiscoveryService _discoverySvc;
    private IUIService _uiSvc;
    private IHelpService _helpService;
    public MaskedTextBoxDesignerActionList(MaskedTextBoxDesigner designer);
    public void SetMask();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.MaskedTextBoxTextEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual bool get_IsDropDownResizable();
}
internal class System.Windows.Forms.Design.MaskedTextBoxTextEditorDropDown : UserControl {
    private bool _cancel;
    private MaskedTextBox _cloneMtb;
    private ErrorProvider _errorProvider;
    public string Value { get; }
    public MaskedTextBoxTextEditorDropDown(MaskedTextBox maskedTextBox);
    public string get_Value();
    protected virtual bool ProcessDialogKey(Keys keyData);
    private void maskedTextBox_MaskInputRejected(object sender, MaskInputRejectedEventArgs e);
    private void maskedTextBox_KeyDown(object sender, KeyEventArgs e);
}
internal class System.Windows.Forms.Design.MaskPropertyEditor : UITypeEditor {
    internal static string EditMask(ITypeDiscoveryService discoverySvc, IUIService uiSvc, MaskedTextBox instance, IHelpService helpService);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
public class System.Windows.Forms.Design.MenuCommands : StandardCommands {
    private static int mnuidSelection;
    private static int mnuidContainer;
    private static int mnuidTraySelection;
    private static int mnuidComponentTray;
    private static int cmdidDesignerProperties;
    private static int cmdidReverseCancel;
    private static int cmdidSetStatusText;
    private static int cmdidSetStatusRectangle;
    private static int cmdidSpace;
    private static int ECMD_CANCEL;
    private static int ECMD_RETURN;
    private static int ECMD_UP;
    private static int ECMD_DOWN;
    private static int ECMD_LEFT;
    private static int ECMD_RIGHT;
    private static int ECMD_RIGHT_EXT;
    private static int ECMD_UP_EXT;
    private static int ECMD_LEFT_EXT;
    private static int ECMD_DOWN_EXT;
    private static int ECMD_TAB;
    private static int ECMD_BACKTAB;
    private static int ECMD_INVOKESMARTTAG;
    private static int ECMD_CTLMOVELEFT;
    private static int ECMD_CTLMOVEDOWN;
    private static int ECMD_CTLMOVERIGHT;
    private static int ECMD_CTLMOVEUP;
    private static int ECMD_CTLSIZEDOWN;
    private static int ECMD_CTLSIZEUP;
    private static int ECMD_CTLSIZELEFT;
    private static int ECMD_CTLSIZERIGHT;
    private static int cmdidEditLabel;
    private static int ECMD_HOME;
    private static int ECMD_HOME_EXT;
    private static int ECMD_END;
    private static int ECMD_END_EXT;
    private static Guid VSStandardCommandSet97;
    private static Guid wfMenuGroup;
    private static Guid wfCommandSet;
    private static Guid guidVSStd2K;
    public static CommandID SelectionMenu;
    public static CommandID ContainerMenu;
    public static CommandID TraySelectionMenu;
    public static CommandID ComponentTrayMenu;
    public static CommandID DesignerProperties;
    public static CommandID KeyCancel;
    public static CommandID KeyReverseCancel;
    public static CommandID KeyInvokeSmartTag;
    public static CommandID KeyDefaultAction;
    public static CommandID KeyMoveUp;
    public static CommandID KeyMoveDown;
    public static CommandID KeyMoveLeft;
    public static CommandID KeyMoveRight;
    public static CommandID KeyNudgeUp;
    public static CommandID KeyNudgeDown;
    public static CommandID KeyNudgeLeft;
    public static CommandID KeyNudgeRight;
    public static CommandID KeySizeWidthIncrease;
    public static CommandID KeySizeHeightIncrease;
    public static CommandID KeySizeWidthDecrease;
    public static CommandID KeySizeHeightDecrease;
    public static CommandID KeyNudgeWidthIncrease;
    public static CommandID KeyNudgeHeightIncrease;
    public static CommandID KeyNudgeWidthDecrease;
    public static CommandID KeyNudgeHeightDecrease;
    public static CommandID KeySelectNext;
    public static CommandID KeySelectPrevious;
    public static CommandID KeyTabOrderSelect;
    public static CommandID EditLabel;
    public static CommandID KeyHome;
    public static CommandID KeyEnd;
    public static CommandID KeyShiftHome;
    public static CommandID KeyShiftEnd;
    public static CommandID SetStatusText;
    public static CommandID SetStatusRectangle;
    private static MenuCommands();
}
internal class System.Windows.Forms.Design.NewItemsContextMenuStrip : GroupedContextMenuStrip {
    private IComponent _component;
    private EventHandler _onClick;
    private bool _convertTo;
    private IServiceProvider _serviceProvider;
    private ToolStripItem _currentItem;
    public NewItemsContextMenuStrip(IComponent component, ToolStripItem currentItem, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider);
    protected virtual void OnOpening(CancelEventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
}
internal class System.Windows.Forms.Design.NoBorderRenderer : ToolStripProfessionalRenderer {
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
}
internal class System.Windows.Forms.Design.OleDragDropHandler : object {
    protected static int AllowLocalMoveOnly;
    public static string CF_CODE;
    public static string CF_COMPONENTTYPES;
    public static string CF_TOOLBOXITEM;
    public static string DataFormat { get; }
    public static string ExtraInfoFormat { get; }
    public static string NestedToolboxItemFormat { get; }
    public bool Dragging { get; }
    public static bool FreezePainting { get; }
    public OleDragDropHandler(SelectionUIHandler selectionHandler, IServiceProvider serviceProvider, IOleDragClient client);
    public static string get_DataFormat();
    public static string get_ExtraInfoFormat();
    public static string get_NestedToolboxItemFormat();
    public bool get_Dragging();
    public static bool get_FreezePainting();
    protected virtual bool CanDropDataObject(IDataObject dataObj);
    public IComponent[] CreateTool(ToolboxItem tool, Control parent, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    public IComponent[] CreateTool(ToolboxItem tool, Control parent, int x, int y, int width, int height, bool hasLocation, bool hasSize, ToolboxSnapDragDropEventArgs e);
    public bool DoBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public void DoEndDrag(Object[] components, bool cancel);
    public void DoOleDragDrop(DragEventArgs de);
    public void DoOleDragEnter(DragEventArgs de);
    public void DoOleDragLeave();
    public void DoOleDragOver(DragEventArgs de);
    public void DoOleGiveFeedback(GiveFeedbackEventArgs e);
    public Object[] GetDraggingObjects(IDataObject dataObj);
    public Object[] GetDraggingObjects(DragEventArgs de);
    protected object GetService(Type t);
    protected virtual void OnInitializeComponent(IComponent comp, int x, int y, int width, int height, bool hasLocation, bool hasSize);
}
public class System.Windows.Forms.Design.ParentControlDesigner : ControlDesigner {
    private Control pendingRemoveControl;
    private OleDragDropHandler oleDragDropHandler;
    private IComponentChangeService componentChangeSvc;
    private StatusCommandUI statusCommandUI;
    private int suspendChanging;
    protected bool AllowControlLasso { get; }
    protected bool AllowGenericDragBox { get; }
    protected internal bool AllowSetChildIndexOnDrop { get; }
    protected Point DefaultControlLocation { get; }
    protected bool DrawGrid { get; protected set; }
    protected bool EnableDragRect { get; }
    protected Size GridSize { get; protected set; }
    [CLSCompliantAttribute("False")]
protected ToolboxItem MouseDragTool { get; }
    public IList SnapLines { get; }
    internal Size ParentGridSize { get; }
    private bool System.Windows.Forms.Design.IOleDragClient.CanModifyComponents { get; }
    protected virtual bool get_AllowControlLasso();
    protected virtual bool get_AllowGenericDragBox();
    protected internal virtual bool get_AllowSetChildIndexOnDrop();
    protected virtual Point get_DefaultControlLocation();
    protected virtual bool get_DrawGrid();
    protected virtual void set_DrawGrid(bool value);
    protected virtual bool get_EnableDragRect();
    protected Size get_GridSize();
    protected void set_GridSize(Size value);
    protected ToolboxItem get_MouseDragTool();
    public virtual IList get_SnapLines();
    internal Size get_ParentGridSize();
    internal OleDragDropHandler GetOleDragHandler();
    internal void AddControl(Control newChild, IDictionary defaultValues);
    internal virtual void AddChildControl(Control newChild);
    private Rectangle GetControlStackLocation(Rectangle centeredLocation);
    private Size GetDefaultSize(IComponent component);
    private Rectangle GetAdjustedSnapLocation(Rectangle originalRect, Rectangle dragRect);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.get_CanModifyComponents();
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.AddComponent(IComponent component, string name, bool firstAdd);
    private sealed virtual override bool System.Windows.Forms.Design.IOleDragClient.IsDropOk(IComponent component);
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetDesignerControl();
    private sealed virtual override Control System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(object component);
    protected internal virtual bool CanAddComponent(IComponent component);
    protected virtual Control GetParentForComponent(IComponent component);
    protected void AddPaddingSnapLines(ArrayList& snapLines);
    protected virtual void Dispose(bool disposing);
    [CLSCompliantAttribute("False")]
protected static void InvokeCreateTool(ParentControlDesigner toInvoke, ToolboxItem tool);
    public virtual bool CanParent(ControlDesigner controlDesigner);
    public virtual bool CanParent(Control control);
    [CLSCompliantAttribute("False")]
protected void CreateTool(ToolboxItem tool);
    [CLSCompliantAttribute("False")]
protected void CreateTool(ToolboxItem tool, Point location);
    [CLSCompliantAttribute("False")]
protected void CreateTool(ToolboxItem tool, Rectangle bounds);
    [CLSCompliantAttribute("False")]
protected virtual IComponent[] CreateToolCore(ToolboxItem tool, int x, int y, int width, int height, bool hasLocation, bool hasSize);
    protected Control GetControl(object component);
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selectionType);
    internal Point GetSnappedPoint(Point pt);
    protected Rectangle GetUpdatedRect(Rectangle originalRect, Rectangle dragRect, bool updateSize);
    public virtual void Initialize(IComponent component);
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
    private void OnComponentRemoving(object sender, ComponentEventArgs e);
    internal void SuspendChangingEvents();
    internal void ForceComponentChanging();
    internal void ResumeChangingEvents();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual void OnDragComplete(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnMouseDragBegin(int x, int y);
    protected virtual void OnMouseDragEnd(bool cancel);
    protected virtual void OnMouseDragMove(int x, int y);
    protected virtual void OnPaintAdornments(PaintEventArgs pe);
    private void OnScroll(object sender, ScrollEventArgs se);
    protected virtual void OnSetCursor();
    protected virtual void PreFilterProperties(IDictionary properties);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
internal class System.Windows.Forms.Design.Resources.MaskDesignerDialog : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static AnchorStyles btnCancel_Anchor { get; }
    internal static bool btnCancel_AutoSize { get; }
    internal static Point btnCancel_Location { get; }
    internal static Size btnCancel_Size { get; }
    internal static int btnCancel_TabIndex { get; }
    internal static string btnCancel_Text { get; }
    internal static AnchorStyles btnOK_Anchor { get; }
    internal static bool btnOK_AutoSize { get; }
    internal static Point btnOK_Location { get; }
    internal static Size btnOK_Size { get; }
    internal static int btnOK_TabIndex { get; }
    internal static string btnOK_Text { get; }
    internal static AnchorStyles checkBoxUseValidatingType_Anchor { get; }
    internal static bool checkBoxUseValidatingType_AutoSize { get; }
    internal static Point checkBoxUseValidatingType_Location { get; }
    internal static Size checkBoxUseValidatingType_Size { get; }
    internal static int checkBoxUseValidatingType_TabIndex { get; }
    internal static string checkBoxUseValidatingType_Text { get; }
    internal static int dataFormatHeader_Width { get; }
    internal static AnchorStyles lblHeader_Anchor { get; }
    internal static bool lblHeader_AutoSize { get; }
    internal static Point lblHeader_Location { get; }
    internal static Size lblHeader_Size { get; }
    internal static int lblHeader_TabIndex { get; }
    internal static string lblHeader_Text { get; }
    internal static AnchorStyles lblMask_Anchor { get; }
    internal static bool lblMask_AutoSize { get; }
    internal static Point lblMask_Location { get; }
    internal static Size lblMask_Size { get; }
    internal static int lblMask_TabIndex { get; }
    internal static string lblMask_Text { get; }
    internal static AnchorStyles lblTryIt_Anchor { get; }
    internal static bool lblTryIt_AutoSize { get; }
    internal static Point lblTryIt_Location { get; }
    internal static Size lblTryIt_Size { get; }
    internal static int lblTryIt_TabIndex { get; }
    internal static string lblTryIt_Text { get; }
    internal static AnchorStyles listViewCannedMasks_Anchor { get; }
    internal static string listViewCannedMasks_Columns { get; }
    internal static string listViewCannedMasks_Columns1 { get; }
    internal static string listViewCannedMasks_Columns2 { get; }
    internal static bool listViewCannedMasks_LabelWrap { get; }
    internal static Point listViewCannedMasks_Location { get; }
    internal static Size listViewCannedMasks_Size { get; }
    internal static int listViewCannedMasks_TabIndex { get; }
    internal static int maskDescriptionHeader_Width { get; }
    internal static AnchorStyles maskedTextBox_Anchor { get; }
    internal static Point maskedTextBox_Location { get; }
    internal static Size maskedTextBox_Size { get; }
    internal static int maskedTextBox_TabIndex { get; }
    internal static AnchorStyles maskTryItTable_Anchor { get; }
    internal static bool maskTryItTable_AutoSize { get; }
    internal static int maskTryItTable_ColumnCount { get; }
    internal static string maskTryItTable_LayoutSettings { get; }
    internal static Point maskTryItTable_Location { get; }
    internal static int maskTryItTable_RowCount { get; }
    internal static Size maskTryItTable_Size { get; }
    internal static int maskTryItTable_TabIndex { get; }
    internal static AnchorStyles okCancelTableLayoutPanel_Anchor { get; }
    internal static bool okCancelTableLayoutPanel_AutoSize { get; }
    internal static int okCancelTableLayoutPanel_ColumnCount { get; }
    internal static string okCancelTableLayoutPanel_LayoutSettings { get; }
    internal static Point okCancelTableLayoutPanel_Location { get; }
    internal static int okCancelTableLayoutPanel_RowCount { get; }
    internal static Size okCancelTableLayoutPanel_Size { get; }
    internal static int okCancelTableLayoutPanel_TabIndex { get; }
    internal static AnchorStyles overarchingTableLayoutPanel_Anchor { get; }
    internal static int overarchingTableLayoutPanel_ColumnCount { get; }
    internal static string overarchingTableLayoutPanel_LayoutSettings { get; }
    internal static Point overarchingTableLayoutPanel_Location { get; }
    internal static int overarchingTableLayoutPanel_RowCount { get; }
    internal static Size overarchingTableLayoutPanel_Size { get; }
    internal static int overarchingTableLayoutPanel_TabIndex { get; }
    internal static AnchorStyles txtBoxMask_Anchor { get; }
    internal static Point txtBoxMask_Location { get; }
    internal static Size txtBoxMask_Size { get; }
    internal static int txtBoxMask_TabIndex { get; }
    internal static int validatingTypeHeader_Width { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static AnchorStyles get_btnCancel_Anchor();
    internal static bool get_btnCancel_AutoSize();
    internal static Point get_btnCancel_Location();
    internal static Size get_btnCancel_Size();
    internal static int get_btnCancel_TabIndex();
    internal static string get_btnCancel_Text();
    internal static AnchorStyles get_btnOK_Anchor();
    internal static bool get_btnOK_AutoSize();
    internal static Point get_btnOK_Location();
    internal static Size get_btnOK_Size();
    internal static int get_btnOK_TabIndex();
    internal static string get_btnOK_Text();
    internal static AnchorStyles get_checkBoxUseValidatingType_Anchor();
    internal static bool get_checkBoxUseValidatingType_AutoSize();
    internal static Point get_checkBoxUseValidatingType_Location();
    internal static Size get_checkBoxUseValidatingType_Size();
    internal static int get_checkBoxUseValidatingType_TabIndex();
    internal static string get_checkBoxUseValidatingType_Text();
    internal static int get_dataFormatHeader_Width();
    internal static AnchorStyles get_lblHeader_Anchor();
    internal static bool get_lblHeader_AutoSize();
    internal static Point get_lblHeader_Location();
    internal static Size get_lblHeader_Size();
    internal static int get_lblHeader_TabIndex();
    internal static string get_lblHeader_Text();
    internal static AnchorStyles get_lblMask_Anchor();
    internal static bool get_lblMask_AutoSize();
    internal static Point get_lblMask_Location();
    internal static Size get_lblMask_Size();
    internal static int get_lblMask_TabIndex();
    internal static string get_lblMask_Text();
    internal static AnchorStyles get_lblTryIt_Anchor();
    internal static bool get_lblTryIt_AutoSize();
    internal static Point get_lblTryIt_Location();
    internal static Size get_lblTryIt_Size();
    internal static int get_lblTryIt_TabIndex();
    internal static string get_lblTryIt_Text();
    internal static AnchorStyles get_listViewCannedMasks_Anchor();
    internal static string get_listViewCannedMasks_Columns();
    internal static string get_listViewCannedMasks_Columns1();
    internal static string get_listViewCannedMasks_Columns2();
    internal static bool get_listViewCannedMasks_LabelWrap();
    internal static Point get_listViewCannedMasks_Location();
    internal static Size get_listViewCannedMasks_Size();
    internal static int get_listViewCannedMasks_TabIndex();
    internal static int get_maskDescriptionHeader_Width();
    internal static AnchorStyles get_maskedTextBox_Anchor();
    internal static Point get_maskedTextBox_Location();
    internal static Size get_maskedTextBox_Size();
    internal static int get_maskedTextBox_TabIndex();
    internal static AnchorStyles get_maskTryItTable_Anchor();
    internal static bool get_maskTryItTable_AutoSize();
    internal static int get_maskTryItTable_ColumnCount();
    internal static string get_maskTryItTable_LayoutSettings();
    internal static Point get_maskTryItTable_Location();
    internal static int get_maskTryItTable_RowCount();
    internal static Size get_maskTryItTable_Size();
    internal static int get_maskTryItTable_TabIndex();
    internal static AnchorStyles get_okCancelTableLayoutPanel_Anchor();
    internal static bool get_okCancelTableLayoutPanel_AutoSize();
    internal static int get_okCancelTableLayoutPanel_ColumnCount();
    internal static string get_okCancelTableLayoutPanel_LayoutSettings();
    internal static Point get_okCancelTableLayoutPanel_Location();
    internal static int get_okCancelTableLayoutPanel_RowCount();
    internal static Size get_okCancelTableLayoutPanel_Size();
    internal static int get_okCancelTableLayoutPanel_TabIndex();
    internal static AnchorStyles get_overarchingTableLayoutPanel_Anchor();
    internal static int get_overarchingTableLayoutPanel_ColumnCount();
    internal static string get_overarchingTableLayoutPanel_LayoutSettings();
    internal static Point get_overarchingTableLayoutPanel_Location();
    internal static int get_overarchingTableLayoutPanel_RowCount();
    internal static Size get_overarchingTableLayoutPanel_Size();
    internal static int get_overarchingTableLayoutPanel_TabIndex();
    internal static AnchorStyles get_txtBoxMask_Anchor();
    internal static Point get_txtBoxMask_Location();
    internal static Size get_txtBoxMask_Size();
    internal static int get_txtBoxMask_TabIndex();
    internal static int get_validatingTypeHeader_Width();
}
public class System.Windows.Forms.Design.ScrollableControlDesigner : ParentControlDesigner {
    protected virtual bool GetHitTest(Point pt);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.SelectionManager : object {
    private Adorner _selectionAdorner;
    private Adorner _bodyAdorner;
    private BehaviorService _behaviorService;
    private IServiceProvider _serviceProvider;
    private Hashtable _componentToDesigner;
    private Control _rootComponent;
    private ISelectionService _selSvc;
    private IDesignerHost _designerHost;
    private bool _needRefresh;
    private Rectangle[] _prevSelectionBounds;
    private object _prevPrimarySelection;
    private Rectangle[] _curSelectionBounds;
    private int _curCompIndex;
    private DesignerActionUI _designerActionUI;
    private bool _selectionChanging;
    internal Adorner BodyGlyphAdorner { get; }
    internal bool NeedRefresh { get; internal set; }
    internal Adorner SelectionGlyphAdorner { get; }
    public SelectionManager(IServiceProvider serviceProvider, BehaviorService behaviorService);
    internal Adorner get_BodyGlyphAdorner();
    internal bool get_NeedRefresh();
    internal void set_NeedRefresh(bool value);
    internal Adorner get_SelectionGlyphAdorner();
    private void AddAllControlGlyphs(Control parent, ArrayList selComps, object primarySelection);
    private void AddControlGlyphs(Control c, GlyphSelectionType selType);
    public sealed virtual void Dispose();
    public void Refresh();
    private void OnComponentAdded(object source, ComponentEventArgs ce);
    private void OnBeginDrag(object source, BehaviorDragDropEventArgs e);
    internal void OnBeginDrag(BehaviorDragDropEventArgs e);
    private void OnComponentChanged(object source, ComponentChangedEventArgs ce);
    private void OnComponentRemoved(object source, ComponentEventArgs ce);
    private Region DetermineRegionToRefresh(object primarySelection);
    private void OnSynchronize(object sender, EventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
}
[FlagsAttribute]
public enum System.Windows.Forms.Design.SelectionRules : Enum {
    public int value__;
    public static SelectionRules None;
    public static SelectionRules Moveable;
    public static SelectionRules Visible;
    public static SelectionRules Locked;
    public static SelectionRules TopSizeable;
    public static SelectionRules BottomSizeable;
    public static SelectionRules LeftSizeable;
    public static SelectionRules RightSizeable;
    public static SelectionRules AllSizeable;
}
[FlagsAttribute]
internal enum System.Windows.Forms.Design.SelectionStyles : Enum {
    public int value__;
    public static SelectionStyles None;
    public static SelectionStyles Selected;
    public static SelectionStyles Active;
}
internal abstract class System.Windows.Forms.Design.SelectionUIHandler : object {
    public virtual bool BeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public virtual void DragMoved(Object[] components, Rectangle offset);
    public virtual void EndDrag(Object[] components, bool cancel);
    protected abstract virtual IComponent GetComponent();
    protected abstract virtual Control GetControl();
    protected abstract virtual Control GetControl(IComponent component);
    protected abstract virtual Size GetCurrentSnapSize();
    protected abstract virtual object GetService(Type serviceType);
    protected abstract virtual bool GetShouldSnapToGrid();
    public abstract virtual Rectangle GetUpdatedRect(Rectangle orignalRect, Rectangle dragRect, bool updateSize);
    public bool QueryBeginDrag(Object[] components, SelectionRules rules, int initialX, int initialY);
    public abstract virtual void SetCursor();
    public virtual void OleDragEnter(DragEventArgs de);
    public virtual void OleDragDrop(DragEventArgs de);
    public virtual void OleDragOver(DragEventArgs de);
    public virtual void OleDragLeave();
}
internal class System.Windows.Forms.Design.SelectionUIService : Control {
    private static Point s_invalidPoint;
    private static int HITTEST_CONTAINER_SELECTOR;
    private static int HITTEST_NORMAL_SELECTION;
    private static int HITTEST_DEFAULT;
    private ISelectionUIHandler _dragHandler;
    private Object[] _dragComponents;
    private SelectionRules _dragRules;
    private bool _dragMoved;
    private object _containerDrag;
    private bool _ignoreCaptureChanged;
    private int _mouseDragHitTest;
    private Point _mouseDragAnchor;
    private Rectangle _mouseDragOffset;
    private Point _lastMoveScreenCoord;
    private bool _ctrlSelect;
    private bool _mouseDragging;
    private ContainerSelectorActiveEventHandler _containerSelectorActive;
    private Hashtable _selectionItems;
    private Hashtable _selectionHandlers;
    private bool _savedVisible;
    private bool _batchMode;
    private bool _batchChanged;
    private bool _batchSync;
    private ISelectionService _selSvc;
    private IDesignerHost _host;
    private DesignerTransaction _dragTransaction;
    protected CreateParams CreateParams { get; }
    private bool System.Windows.Forms.Design.ISelectionUIService.Dragging { get; }
    private bool System.Windows.Forms.Design.ISelectionUIService.Visible { get; private set; }
    public SelectionUIService(IDesignerHost host);
    private static SelectionUIService();
    protected virtual CreateParams get_CreateParams();
    private void BeginMouseDrag(Point anchor, int hitTest);
    private void DisplayError(Exception e);
    protected virtual void Dispose(bool disposing);
    private void EndMouseDrag(Point position);
    private HitTestInfo GetHitTest(Point value, int flags);
    private ISelectionUIHandler GetHandler(object component);
    public static string GetTransactionName(SelectionRules rules, Object[] objects);
    private void OnTransactionClosed(object sender, DesignerTransactionCloseEventArgs e);
    private void OnTransactionOpened(object sender, EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    private void OnComponentChanged(object sender, ComponentChangedEventArgs ccevent);
    private void OnComponentRemove(object sender, ComponentEventArgs ce);
    private void OnContainerSelectorActive(ContainerSelectorActiveEventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    private void OnSystemSettingChanged(object sender, EventArgs e);
    private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e);
    protected virtual void OnDragEnter(DragEventArgs devent);
    protected virtual void OnDragOver(DragEventArgs devent);
    protected virtual void OnDragLeave(EventArgs e);
    protected virtual void OnDragDrop(DragEventArgs devent);
    protected virtual void OnDoubleClick(EventArgs devent);
    protected virtual void OnMouseDown(MouseEventArgs me);
    protected virtual void OnMouseMove(MouseEventArgs me);
    protected virtual void OnMouseUp(MouseEventArgs me);
    protected virtual void OnMove(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    private void SetSelectionCursor(Point pt);
    private void UpdateWindowRegion();
    protected virtual void WndProc(Message& m);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.get_Dragging();
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.get_Visible();
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.set_Visible(bool value);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.add_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.remove_ContainerSelectorActive(ContainerSelectorActiveEventHandler value);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.AssignSelectionUIHandler(object component, ISelectionUIHandler handler);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.ClearSelectionUIHandler(object component, ISelectionUIHandler handler);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.BeginDrag(SelectionRules rules, int initialX, int initialY);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.DragMoved(Rectangle offset);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.EndDrag(bool cancel);
    private sealed virtual override Object[] System.Windows.Forms.Design.ISelectionUIService.FilterSelection(Object[] components, SelectionRules selectionRules);
    private sealed virtual override Size System.Windows.Forms.Design.ISelectionUIService.GetAdornmentDimensions(AdornmentType adornmentType);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.GetAdornmentHitTest(object component, Point value);
    private sealed virtual override bool System.Windows.Forms.Design.ISelectionUIService.GetContainerSelected(object component);
    private sealed virtual override SelectionRules System.Windows.Forms.Design.ISelectionUIService.GetSelectionRules(object component);
    private sealed virtual override SelectionStyles System.Windows.Forms.Design.ISelectionUIService.GetSelectionStyle(object component);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SetContainerSelected(object component, bool selected);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SetSelectionStyle(object component, SelectionStyles style);
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SyncSelection();
    private sealed virtual override void System.Windows.Forms.Design.ISelectionUIService.SyncComponent(object component);
}
[AttributeUsageAttribute("708")]
internal class System.Windows.Forms.Design.SRDisplayNameAttribute : DisplayNameAttribute {
    private bool replaced;
    public string DisplayName { get; }
    public SRDisplayNameAttribute(string displayName);
    public virtual string get_DisplayName();
}
internal class System.Windows.Forms.Design.StandardCommandToolStripMenuItem : ToolStripMenuItem {
    private bool _cachedImage;
    private Image _image;
    private CommandID _menuID;
    private IMenuCommandService _menuCommandService;
    private IServiceProvider _serviceProvider;
    private string _name;
    private MenuCommand _menuCommand;
    public IMenuCommandService MenuService { get; }
    public Image Image { get; public set; }
    public StandardCommandToolStripMenuItem(CommandID menuID, string text, string imageName, IServiceProvider serviceProvider);
    public void RefreshItem();
    public IMenuCommandService get_MenuService();
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    protected virtual void OnClick(EventArgs e);
}
internal static class System.Windows.Forms.Design.StandardGroups : object {
    public static string Code;
    public static string ZORder;
    public static string Grid;
    public static string Lock;
    public static string Verbs;
    public static string Custom;
    public static string Selection;
    public static string Edit;
    public static string Properties;
}
internal class System.Windows.Forms.Design.StandardMenuStripVerb : object {
    private ToolStripDesigner _designer;
    private IDesignerHost _host;
    private IComponentChangeService _componentChangeSvc;
    private IServiceProvider _provider;
    internal StandardMenuStripVerb(ToolStripDesigner designer);
    public void InsertItems();
    private void CreateStandardMenuStrip(IDesignerHost host, MenuStrip tool);
    private void CreateStandardToolStrip(IDesignerHost host, ToolStrip tool);
    private Bitmap GetImage(string name);
    private string NameFromText(string text, Type itemType, INameCreationService nameCreationService, bool adjustCapitalization);
}
internal class System.Windows.Forms.Design.StatusCommandUI : object {
    private MenuCommand _statusRectCommand;
    private IMenuCommandService _menuService;
    private IServiceProvider _serviceProvider;
    private IMenuCommandService MenuService { get; }
    private MenuCommand StatusRectCommand { get; }
    public StatusCommandUI(IServiceProvider provider);
    private IMenuCommandService get_MenuService();
    private MenuCommand get_StatusRectCommand();
    public void SetStatusInformation(Component selectedComponent, Point location);
    public void SetStatusInformation(Component selectedComponent);
    public void SetStatusInformation(Rectangle bounds);
}
internal class System.Windows.Forms.Design.TableLayoutControlCollectionCodeDomSerializer : CollectionCodeDomSerializer {
    protected virtual object SerializeCollection(IDesignerSerializationManager manager, CodeExpression targetExpression, Type targetType, ICollection originalCollection, ICollection valuesToSerialize);
}
internal class System.Windows.Forms.Design.TableLayoutPanelCodeDomSerializer : CodeDomSerializer {
    private static string s_layoutSettingsPropName;
    private static TableLayoutPanelCodeDomSerializer();
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    private CodeDomSerializer GetBaseSerializer(IDesignerSerializationManager manager);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
    private bool IsLocalizable(IDesignerHost host);
}
internal class System.Windows.Forms.Design.TemplateNodeCustomMenuItemCollection : CustomMenuItemCollection {
    private ToolStripItem _currentItem;
    private IServiceProvider _serviceProvider;
    private ToolStripMenuItem _insertToolStripMenuItem;
    private ToolStrip ParentTool { get; }
    public TemplateNodeCustomMenuItemCollection(IServiceProvider provider, Component currentItem);
    private ToolStrip get_ParentTool();
    private void PopulateList();
    private void AddNewItemClick(object sender, EventArgs e);
    private void InsertItem(Type t);
    private void InsertToolStripItem(Type t);
}
internal enum System.Windows.Forms.Design.TemplateNodeSelectionState : Enum {
    public int value__;
    public static TemplateNodeSelectionState None;
    public static TemplateNodeSelectionState TemplateNodeSelected;
    public static TemplateNodeSelectionState SplitButtonSelected;
    public static TemplateNodeSelectionState DropDownSelected;
    public static TemplateNodeSelectionState MouseOverLabel;
    public static TemplateNodeSelectionState MouseOverHotRegion;
    public static TemplateNodeSelectionState HotRegionSelected;
}
internal class System.Windows.Forms.Design.TextBoxBaseDesigner : ControlDesigner {
    public IList SnapLines { get; }
    private string Text { get; private set; }
    public SelectionRules SelectionRules { get; }
    public virtual IList get_SnapLines();
    private string get_Text();
    private void set_Text(string value);
    private bool ShouldSerializeText();
    private void ResetText();
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    protected virtual void PreFilterProperties(IDictionary properties);
    public virtual SelectionRules get_SelectionRules();
}
public enum System.Windows.Forms.Design.ThemedScrollbarMode : Enum {
    public int value__;
    public static ThemedScrollbarMode All;
    public static ThemedScrollbarMode None;
    public static ThemedScrollbarMode OnlyTopLevel;
}
public class System.Windows.Forms.Design.ThemedScrollbarWindow : ValueType {
    public IntPtr Handle;
    public ThemedScrollbarMode Mode;
}
internal class System.Windows.Forms.Design.ToolStripActionList : DesignerActionList {
    private ToolStrip _toolStrip;
    private bool _autoShow;
    private ToolStripDesigner _designer;
    private ChangeToolStripParentVerb _changeParentVerb;
    private StandardMenuStripVerb _standardItemsVerb;
    private bool CanAddItems { get; }
    private bool IsReadOnly { get; }
    public bool AutoShow { get; public set; }
    public DockStyle Dock { get; public set; }
    public ToolStripRenderMode RenderMode { get; public set; }
    public ToolStripGripStyle GripStyle { get; public set; }
    public ToolStripActionList(ToolStripDesigner designer);
    private bool get_CanAddItems();
    private bool get_IsReadOnly();
    private object GetProperty(string propertyName);
    private void ChangeProperty(string propertyName, object value);
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    private void InvokeEmbedVerb();
    private void InvokeInsertStandardItemsVerb();
    public virtual DesignerActionItemCollection GetSortedActionItems();
}
internal class System.Windows.Forms.Design.ToolStripAdornerWindowService : object {
    private IServiceProvider _serviceProvider;
    private ToolStripAdornerWindow _toolStripAdornerWindow;
    private BehaviorService _behaviorService;
    private Adorner _dropDownAdorner;
    private ArrayList _dropDownCollection;
    private IOverlayService _overlayService;
    internal Control ToolStripAdornerWindowControl { get; }
    public Graphics ToolStripAdornerWindowGraphics { get; }
    internal Adorner DropDownAdorner { get; }
    internal ArrayList DropDowns { get; internal set; }
    internal ToolStripAdornerWindowService(IServiceProvider serviceProvider, Control windowFrame);
    internal Control get_ToolStripAdornerWindowControl();
    public Graphics get_ToolStripAdornerWindowGraphics();
    internal Adorner get_DropDownAdorner();
    public sealed virtual void Dispose();
    public Point AdornerWindowPointToScreen(Point p);
    public Point AdornerWindowToScreen();
    public Point ControlToAdornerWindow(Control c);
    public void Invalidate();
    public void Invalidate(Rectangle rect);
    public void Invalidate(Region r);
    internal ArrayList get_DropDowns();
    internal void set_DropDowns(ArrayList value);
    internal void ProcessPaintMessage(Rectangle paintRect);
}
internal class System.Windows.Forms.Design.ToolStripCodeDomSerializer : ControlCodeDomSerializer {
    protected virtual bool HasSitedNonReadonlyChildren(Control parent);
}
internal class System.Windows.Forms.Design.ToolStripDesigner : ControlDesigner {
    private static int GLYPHBORDER;
    internal static Point s_lastCursorPosition;
    internal static bool s_autoAddNewItems;
    internal static ToolStripItem s_dragItem;
    internal static bool s_shiftState;
    internal static bool s_editTemplateNode;
    private DesignerToolStripControlHost _editorNode;
    private ToolStripEditorManager _editManager;
    private ToolStrip _miniToolStrip;
    private DesignerTransaction _insertMenuItemTransaction;
    private Rectangle _dragBoxFromMouseDown;
    private int _indexOfItemUnderMouseToDrag;
    private ToolStripTemplateNode _tn;
    private ISelectionService _selectionSvc;
    private UInt32 _editingCollection;
    private DesignerTransaction _pendingTransaction;
    private bool _addingItem;
    private Rectangle _boundsToInvalidate;
    private bool _currentVisible;
    private ToolStripActionList _actionLists;
    private ToolStripAdornerWindowService _toolStripAdornerWindowService;
    private IDesignerHost _host;
    private IComponentChangeService _componentChangeSvc;
    private bool _undoingCalled;
    private IToolboxService _toolboxService;
    private ContextMenuStrip _toolStripContextMenu;
    private bool _toolStripSelected;
    private bool _cacheItems;
    private ArrayList _items;
    private bool _disposed;
    private DesignerTransaction _newItemTransaction;
    private bool _fireSyncSelection;
    private ToolStripKeyboardHandlingService _keyboardHandlingService;
    private bool _parentNotVisible;
    private bool _dontCloseOverflow;
    private bool _addingDummyItem;
    public DesignerActionListCollection ActionLists { get; }
    private Rectangle AddItemRect { get; }
    private bool AllowDrop { get; private set; }
    private bool AllowItemReorder { get; private set; }
    public ICollection AssociatedComponents { get; }
    public bool CacheItems { get; public set; }
    private bool CanAddItems { get; }
    internal bool ControlSupportsSnaplines { get; }
    private ContextMenuStrip DesignerContextMenu { get; }
    public bool DontCloseOverflow { get; public set; }
    public Rectangle DragBoxFromMouseDown { get; public set; }
    internal bool EditingCollection { get; internal set; }
    public ToolStripEditorManager EditManager { get; }
    internal ToolStripTemplateNode Editor { get; }
    public DesignerToolStripControlHost EditorNode { get; }
    internal ToolStrip EditorToolStrip { get; internal set; }
    public bool FireSyncSelection { get; public set; }
    public int IndexOfItemUnderMouseToDrag { get; public set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    public DesignerTransaction InsertTansaction { get; public set; }
    private bool IsToolStripOrItemSelected { get; }
    public ArrayList Items { get; }
    public DesignerTransaction NewItemTransaction { get; public set; }
    private Rectangle OverFlowButtonRect { get; }
    internal ISelectionService SelectionService { get; }
    public bool SupportEditing { get; }
    protected ToolStrip ToolStrip { get; }
    private ToolStripKeyboardHandlingService KeyboardHandlingService { get; }
    internal bool SerializePerformLayout { get; }
    internal bool Visible { get; internal set; }
    private static ToolStripDesigner();
    public virtual DesignerActionListCollection get_ActionLists();
    private Rectangle get_AddItemRect();
    private bool get_AllowDrop();
    private void set_AllowDrop(bool value);
    private bool get_AllowItemReorder();
    private void set_AllowItemReorder(bool value);
    public virtual ICollection get_AssociatedComponents();
    public bool get_CacheItems();
    public void set_CacheItems(bool value);
    private bool get_CanAddItems();
    internal virtual bool get_ControlSupportsSnaplines();
    private ContextMenuStrip get_DesignerContextMenu();
    public bool get_DontCloseOverflow();
    public void set_DontCloseOverflow(bool value);
    public Rectangle get_DragBoxFromMouseDown();
    public void set_DragBoxFromMouseDown(Rectangle value);
    internal bool get_EditingCollection();
    internal void set_EditingCollection(bool value);
    public ToolStripEditorManager get_EditManager();
    internal ToolStripTemplateNode get_Editor();
    public DesignerToolStripControlHost get_EditorNode();
    internal ToolStrip get_EditorToolStrip();
    internal void set_EditorToolStrip(ToolStrip value);
    public bool get_FireSyncSelection();
    public void set_FireSyncSelection(bool value);
    public int get_IndexOfItemUnderMouseToDrag();
    public void set_IndexOfItemUnderMouseToDrag(int value);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    public DesignerTransaction get_InsertTansaction();
    public void set_InsertTansaction(DesignerTransaction value);
    private bool get_IsToolStripOrItemSelected();
    public ArrayList get_Items();
    public DesignerTransaction get_NewItemTransaction();
    public void set_NewItemTransaction(DesignerTransaction value);
    private Rectangle get_OverFlowButtonRect();
    internal ISelectionService get_SelectionService();
    public bool get_SupportEditing();
    protected ToolStrip get_ToolStrip();
    private ToolStripKeyboardHandlingService get_KeyboardHandlingService();
    internal virtual bool get_SerializePerformLayout();
    internal bool get_Visible();
    internal void set_Visible(bool value);
    private void AddBodyGlyphsForOverflow();
    private void AddItemBodyGlyph(ToolStripItem item);
    private ToolStripItem AddNewItem(Type t);
    internal ToolStripItem AddNewItem(Type t, string text, bool enterKeyPressed, bool tabKeyPressed);
    internal void AddNewTemplateNode(ToolStrip wb);
    internal void CancelPendingMenuItemTransaction();
    private bool CheckIfItemSelected();
    internal bool Commit();
    private void Control_HandleCreated(object sender, EventArgs e);
    private void ComponentChangeSvc_ComponentAdded(object sender, ComponentEventArgs e);
    private void ComponentChangeSvc_ComponentAdding(object sender, ComponentEventArgs e);
    private void ComponentChangeSvc_ComponentChanged(object sender, ComponentChangedEventArgs e);
    private void ComponentChangeSvc_ComponentRemoved(object sender, ComponentEventArgs e);
    private void ComponentChangeSvc_ComponentRemoving(object sender, ComponentEventArgs e);
    protected virtual void Dispose(bool disposing);
    public virtual void DoDefaultAction();
    protected virtual ControlBodyGlyph GetControlGlyph(GlyphSelectionType selectionType);
    public virtual GlyphCollection GetGlyphs(GlyphSelectionType selType);
    protected virtual bool GetHitTest(Point point);
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    private void InitializeNewItemDropDown();
    internal static bool IsGlyphTotallyVisible(Rectangle itemBounds, Rectangle parentBounds);
    private bool ItemParentIsOverflow(ToolStripItem item);
    private void LayoutToolStrip();
    internal static string NameFromText(string text, Type componentType, IServiceProvider serviceProvider, bool adjustCapitalization);
    internal static string NameFromText(string text, Type componentType, IServiceProvider serviceProvider);
    protected virtual void OnContextMenu(int x, int y);
    protected virtual void OnDragEnter(DragEventArgs de);
    protected virtual void OnDragOver(DragEventArgs de);
    protected virtual void OnDragDrop(DragEventArgs de);
    private void OnItemAdded(object sender, ToolStripItemEventArgs e);
    protected virtual void OnMouseDragMove(int x, int y);
    private void OnOverflowDropDownClosing(object sender, ToolStripDropDownClosingEventArgs e);
    private void OnOverFlowDropDownClosed(object sender, EventArgs e);
    private void OnOverFlowDropDownOpened(object sender, EventArgs e);
    private void OnOverFlowDropDownPaint(object sender, PaintEventArgs e);
    private void OnOverFlowDropDownOpening(object sender, EventArgs e);
    private void OnOverflowDropDownResize(object sender, EventArgs e);
    protected virtual void OnSetCursor();
    private void OnUndone(object source, EventArgs e);
    private void OnUndoing(object source, EventArgs e);
    private void OnToolStripMove(object sender, EventArgs e);
    private void OnToolStripVisibleChanged(object sender, EventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
    private void RemoveBodyGlyphsForOverflow();
    internal void RollBack();
    private void ResetVisible();
    private void SetDragDropEffects(DragEventArgs de);
    private void SelSvc_SelectionChanging(object sender, EventArgs e);
    private void SelSvc_SelectionChanged(object sender, EventArgs e);
    private bool ShouldSerializeVisible();
    private bool ShouldSerializeAllowDrop();
    private bool ShouldSerializeAllowItemReorder();
    internal void ShowEditNode(bool clicked);
    private void ShowHideToolStripItems(bool toolStripSelected);
    private void ToolStrip_LayoutCompleted(object sender, EventArgs e);
    private void ToolStrip_Resize(object sender, EventArgs e);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.Design.ToolStripDesignerUtils : object {
    private static Type s_toolStripItemType;
    [ThreadStaticAttribute]
private static Dictionary`2<Type, ToolboxItem> s_cachedToolboxItems;
    [ThreadStaticAttribute]
private static int s_customToolStripItemCount;
    private static int TOOLSTRIPCHARCOUNT;
    public static ArrayList originalSelComps;
    [ThreadStaticAttribute]
private static Dictionary`2<Type, Bitmap> s_cachedWinformsImages;
    private static string s_systemWindowsFormsNamespace;
    private static Type[] s_newItemTypesForToolStrip;
    private static Type[] s_newItemTypesForStatusStrip;
    private static Type[] s_newItemTypesForMenuStrip;
    private static Type[] s_newItemTypesForToolStripDropDownMenu;
    private static ToolStripDesignerUtils();
    public static void GetAdjustedBounds(ToolStripItem item, Rectangle& r);
    private static ToolStrip GetToolStripFromComponent(IComponent component);
    private static ToolboxItem GetCachedToolboxItem(Type itemType);
    private static Bitmap GetKnownToolboxBitmap(Type itemType);
    public static Bitmap GetToolboxBitmap(Type itemType);
    public static string GetToolboxDescription(Type itemType);
    public static Type[] GetStandardItemTypes(IComponent component);
    private static ToolStripItemDesignerAvailability GetDesignerVisibility(ToolStrip toolStrip);
    public static Type[] GetCustomItemTypes(IComponent component, IServiceProvider serviceProvider);
    public static Type[] GetCustomItemTypes(IComponent component, ITypeDiscoveryService discoveryService);
    public static ToolStripItem[] GetStandardItemMenuItems(IComponent component, EventHandler onClick, bool convertTo);
    public static ToolStripItem[] GetCustomItemMenuItems(IComponent component, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider);
    public static NewItemsContextMenuStrip GetNewItemDropDown(IComponent component, ToolStripItem currentItem, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider, bool populateCustom);
    public static void GetCustomNewItemDropDown(NewItemsContextMenuStrip contextMenu, IComponent component, ToolStripItem currentItem, EventHandler onClick, bool convertTo, IServiceProvider serviceProvider);
    public static void InvalidateSelection(ArrayList originalSelComps, ToolStripItem nextSelection, IServiceProvider provider, bool shiftPressed);
}
internal class System.Windows.Forms.Design.ToolStripDropDownDesigner : ComponentDesigner {
    private ISelectionService selSvc;
    private MenuStrip designMenu;
    private ToolStripMenuItem menuItem;
    private IDesignerHost host;
    private ToolStripDropDown dropDown;
    private bool selected;
    private ControlBodyGlyph dummyToolStripGlyph;
    private UInt32 _editingCollection;
    private FormDocumentDesigner parentFormDesigner;
    internal ToolStripMenuItem currentParent;
    private INestedContainer nestedContainer;
    private UndoEngine undoEngine;
    private bool AutoClose { get; private set; }
    private bool AllowDrop { get; private set; }
    public DesignerActionListCollection ActionLists { get; }
    public ICollection AssociatedComponents { get; }
    public ToolStripMenuItem DesignerMenuItem { get; }
    internal bool EditingCollection { get; internal set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    private RightToLeft RightToLeft { get; private set; }
    private string SettingsKey { get; private set; }
    private bool get_AutoClose();
    private void set_AutoClose(bool value);
    private bool get_AllowDrop();
    private void set_AllowDrop(bool value);
    public virtual DesignerActionListCollection get_ActionLists();
    public virtual ICollection get_AssociatedComponents();
    public ToolStripMenuItem get_DesignerMenuItem();
    internal bool get_EditingCollection();
    internal void set_EditingCollection(bool value);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    private RightToLeft get_RightToLeft();
    private void set_RightToLeft(RightToLeft value);
    private string get_SettingsKey();
    private void set_SettingsKey(string value);
    private void AddSelectionGlyphs(SelectionManager selMgr, ISelectionService selectionService);
    internal void AddSelectionGlyphs();
    protected virtual void Dispose(bool disposing);
    private void DisposeMenu();
    private void HideMenu();
    public virtual void Initialize(IComponent component);
    private bool IsContextMenuStripItemSelected(ISelectionService selectionService);
    private void OnSelectionChanging(object sender, EventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
    public void ResetSettingsKey();
    private void ResetAutoClose();
    private void RestoreAutoClose();
    private void ResetAllowDrop();
    private void RestoreAllowDrop();
    private void ResetRightToLeft();
    public void ShowMenu();
    public void ShowMenu(ToolStripItem selectedItem);
    private bool ShouldSerializeSettingsKey();
    private bool ShouldSerializeAutoClose();
    private bool ShouldSerializeAllowDrop();
    private bool ShouldSerializeRightToLeft();
    private void OnUndone(object source, EventArgs e);
}
internal class System.Windows.Forms.Design.ToolStripDropDownItemDesigner : ToolStripItemDesigner {
    public ICollection AssociatedComponents { get; }
    public virtual void Initialize(IComponent component);
    public virtual ICollection get_AssociatedComponents();
}
internal class System.Windows.Forms.Design.ToolStripEditorManager : object {
    private BehaviorService _behaviorService;
    private IDesignerHost _designerHost;
    private IComponent _comp;
    private Rectangle _lastKnownEditorBounds;
    private ToolStripEditorControl _editor;
    private ToolStripTemplateNode _editorUI;
    private ToolStripItem _currentItem;
    private ToolStripItemDesigner _itemDesigner;
    public ToolStripEditorManager(IComponent comp);
    internal void ActivateEditor(ToolStripItem item, bool clicked);
    internal void CloseManager();
    private void OnEditorResize(object sender, EventArgs e);
}
internal class System.Windows.Forms.Design.ToolStripInSituService : object {
    private IServiceProvider _sp;
    private IDesignerHost _designerHost;
    private IComponentChangeService _componentChangeSvc;
    private ToolStripDesigner _toolDesigner;
    private ToolStripItemDesigner _toolItemDesigner;
    private ToolStripKeyboardHandlingService _toolStripKeyBoardService;
    private ToolStripKeyboardHandlingService ToolStripKeyBoardService { get; }
    public bool IgnoreMessages { get; }
    public ToolStripInSituService(IServiceProvider provider);
    public sealed virtual void Dispose();
    private ToolStripKeyboardHandlingService get_ToolStripKeyBoardService();
    public sealed virtual bool get_IgnoreMessages();
    public sealed virtual void HandleKeyChar();
    public sealed virtual IntPtr GetEditWindow();
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
}
internal class System.Windows.Forms.Design.ToolStripItemBehavior : Behavior {
    private static int GLYPHBORDER;
    private static int GLYPHINSET;
    internal Rectangle _dragBoxFromMouseDown;
    private Timer _timer;
    private ToolStripItemGlyph _selectedGlyph;
    private bool _doubleClickFired;
    private bool _mouseUpFired;
    private Control _dropSource;
    private IEventHandlerService _eventSvc;
    private Control DropSource { get; }
    private Control get_DropSource();
    private bool CommonParent(ToolStripItem oldSelection, ToolStripItem newSelection);
    private void ClearInsertionMark(ToolStripItem item);
    private void EnterInSituMode(ToolStripItemGlyph glyph);
    private ISelectionService GetSelectionService(ToolStripItem item);
    private BehaviorService GetBehaviorService(ToolStripItem item);
    private ToolStripKeyboardHandlingService GetKeyBoardHandlingService(ToolStripItem item);
    private static Rectangle GetPaintingBounds(IDesignerHost designerHost, ToolStripItem item);
    private bool MouseHandlerPresent(ToolStripItem item);
    private void OnDoubleClickTimerTick(object sender, EventArgs e);
    public virtual bool OnMouseDoubleClick(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseUp(Glyph g, MouseButtons button);
    public virtual bool OnMouseDown(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual bool OnMouseEnter(Glyph g);
    public virtual bool OnMouseLeave(Glyph g);
    public virtual bool OnMouseMove(Glyph g, MouseButtons button, Point mouseLoc);
    public virtual void OnDragDrop(Glyph g, DragEventArgs e);
    public virtual void OnDragEnter(Glyph g, DragEventArgs e);
    public virtual void OnDragLeave(Glyph g, EventArgs e);
    public virtual void OnDragOver(Glyph g, DragEventArgs e);
    private void PaintInsertionMark(ToolStripItem item);
    private void QueryContinueDrag(object sender, QueryContinueDragEventArgs e);
    private void SetParentDesignerValuesForDragDrop(ToolStripItem glyphItem, bool setValues, Point mouseLoc);
}
internal class System.Windows.Forms.Design.ToolStripItemCustomMenuItemCollection : CustomMenuItemCollection {
    private ToolStripItem currentItem;
    private IServiceProvider serviceProvider;
    private ToolStripMenuItem imageToolStripMenuItem;
    private ToolStripMenuItem enabledToolStripMenuItem;
    private ToolStripMenuItem isLinkToolStripMenuItem;
    private ToolStripMenuItem springToolStripMenuItem;
    private ToolStripMenuItem checkedToolStripMenuItem;
    private ToolStripMenuItem showShortcutKeysToolStripMenuItem;
    private ToolStripMenuItem alignmentToolStripMenuItem;
    private ToolStripMenuItem displayStyleToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripMenuItem convertToolStripMenuItem;
    private ToolStripMenuItem insertToolStripMenuItem;
    private ToolStripMenuItem leftToolStripMenuItem;
    private ToolStripMenuItem rightToolStripMenuItem;
    private ToolStripMenuItem noneStyleToolStripMenuItem;
    private ToolStripMenuItem textStyleToolStripMenuItem;
    private ToolStripMenuItem imageStyleToolStripMenuItem;
    private ToolStripMenuItem imageTextStyleToolStripMenuItem;
    private ToolStripMenuItem editItemsToolStripMenuItem;
    private CollectionEditVerbManager verbManager;
    private ToolStrip ParentTool { get; }
    public ToolStripItemCustomMenuItemCollection(IServiceProvider provider, Component currentItem);
    private ToolStrip get_ParentTool();
    private ToolStripMenuItem CreatePropertyBasedItem(string text, string propertyName, string imageName);
    private ToolStripMenuItem CreateEnumValueItem(string propertyName, string name, object value);
    private ToolStripMenuItem CreateBooleanItem(string text, string propertyName);
    private void PopulateList();
    private void OnEditItemsMenuItemClick(object sender, EventArgs e);
    private void OnImageToolStripMenuItemClick(object sender, EventArgs e);
    private void OnBooleanValueChanged(object sender, EventArgs e);
    private void OnEnumValueChanged(object sender, EventArgs e);
    private void AddNewItemClick(object sender, EventArgs e);
    private void MorphToolStripItem(Type t);
    private void InsertItem(Type t);
    private void InsertStripItem(Type t);
    private void InsertMenuItem(Type t);
    private void TryCancelTransaction(DesignerTransaction& transaction);
    private void InsertIntoDropDown(ToolStripDropDown parent, Type t);
    private void InsertIntoMainMenu(MenuStrip parent, Type t);
    private void InsertIntoStatusStrip(StatusStrip parent, Type t);
    private void InsertToolStripItem(Type t);
    private bool IsPropertyBrowsable(string propertyName);
    private object GetProperty(string propertyName);
    protected void ChangeProperty(string propertyName, object value);
    protected void ChangeProperty(IComponent target, string propertyName, object value);
    private void RefreshAlignment();
    private void RefreshDisplayStyle();
    public virtual void RefreshItems();
}
internal class System.Windows.Forms.Design.ToolStripItemDataObject : DataObject {
    private ArrayList _dragComponents;
    private ToolStrip _owner;
    private ToolStripItem _primarySelection;
    internal ArrayList DragComponents { get; }
    internal ToolStrip Owner { get; }
    internal ToolStripItem PrimarySelection { get; }
    internal ToolStripItemDataObject(ArrayList dragComponents, ToolStripItem primarySelection, ToolStrip owner);
    internal ArrayList get_DragComponents();
    internal ToolStrip get_Owner();
    internal ToolStripItem get_PrimarySelection();
}
internal class System.Windows.Forms.Design.ToolStripItemDesigner : ComponentDesigner {
    private static int GLYPHBORDER;
    private static int GLYPHINSET;
    private ToolStripTemplateNode _editorNode;
    private bool isEditorActive;
    private bool internalCreate;
    private ISelectionService selSvc;
    private bool currentVisible;
    private Rectangle lastInsertionMarkRect;
    internal ControlBodyGlyph bodyGlyph;
    internal bool dummyItemAdded;
    internal Rectangle dragBoxFromMouseDown;
    internal int indexOfItemUnderMouseToDrag;
    private ToolStripItemCustomMenuItemCollection toolStripItemCustomMenuItemCollection;
    internal bool AutoSize { get; internal set; }
    private string AccessibleName { get; private set; }
    private ContextMenuStrip DesignerContextMenu { get; }
    internal ToolStripTemplateNode Editor { get; internal set; }
    protected InheritanceAttribute InheritanceAttribute { get; }
    internal bool IsEditorActive { get; internal set; }
    internal bool InternalCreate { get; internal set; }
    protected IComponent ImmediateParent { get; }
    private ToolStripItemOverflow Overflow { get; private set; }
    protected IComponent ParentComponent { get; }
    public ToolStripItem ToolStripItem { get; }
    protected bool Visible { get; protected set; }
    internal bool get_AutoSize();
    internal void set_AutoSize(bool value);
    private string get_AccessibleName();
    private void set_AccessibleName(string value);
    internal virtual bool CanBeAssociatedWith(IDesigner parentDesigner);
    private ContextMenuStrip get_DesignerContextMenu();
    internal virtual ToolStripTemplateNode get_Editor();
    internal virtual void set_Editor(ToolStripTemplateNode value);
    protected virtual InheritanceAttribute get_InheritanceAttribute();
    internal bool get_IsEditorActive();
    internal void set_IsEditorActive(bool value);
    internal bool get_InternalCreate();
    internal void set_InternalCreate(bool value);
    protected IComponent get_ImmediateParent();
    private ToolStripItemOverflow get_Overflow();
    private void set_Overflow(ToolStripItemOverflow value);
    protected virtual IComponent get_ParentComponent();
    public ToolStripItem get_ToolStripItem();
    protected bool get_Visible();
    protected void set_Visible(bool value);
    internal ArrayList AddParentTree();
    private void CreateDummyNode();
    internal virtual void CommitEdit(Type type, string text, bool commit, bool enterKeyPressed, bool tabKeyPressed);
    protected virtual void Dispose(bool disposing);
    protected virtual Component GetOwnerForActionList();
    internal virtual ToolStrip GetMainToolStrip();
    public Rectangle GetGlyphBounds();
    private void FireComponentChanging(ToolStripDropDownItem parent);
    private void FireComponentChanged(ToolStripDropDownItem parent);
    public void GetGlyphs(GlyphCollection& glyphs, Behavior standardBehavior);
    internal ToolStripDropDown GetFirstDropDown(ToolStripItem currentItem);
    private void HideDummyNode();
    public virtual void Initialize(IComponent component);
    public virtual void InitializeNewComponent(IDictionary defaultValues);
    internal virtual ToolStripItem MorphCurrentItem(Type t);
    private void OnComponentRename(object sender, ComponentRenameEventArgs e);
    private void OnItemPaint(object sender, PaintEventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
    public void RemoveItem();
    private void ResetAutoSize();
    private void RestoreAutoSize();
    private void ResetVisible();
    private void RestoreOverflow();
    private void ResetOverflow();
    private void ResetAccessibleName();
    private void RestoreAccessibleName();
    internal void SelectNextItem(ISelectionService service, bool enterKeyPressed, ToolStripDesigner designer);
    private void SerializeDropDownItems(ToolStripDropDownItem parent, SerializationStore& _serializedDataForDropDownItems, ComponentSerializationService _serializationService);
    internal void SetItemVisible(bool toolStripSelected, ToolStripDesigner designer);
    private bool ShouldSerializeVisible();
    private bool ShouldSerializeAutoSize();
    private bool ShouldSerializeAccessibleName();
    private bool ShouldSerializeOverflow();
    internal virtual void ShowEditNode(bool clicked);
    internal virtual bool SetSelection(bool enterKeyPressed);
    internal virtual void ShowContextMenu(int x, int y);
}
internal class System.Windows.Forms.Design.ToolStripItemGlyph : ControlBodyGlyph {
    private ToolStripItem _item;
    private Rectangle _bounds;
    private ToolStripItemDesigner _itemDesigner;
    public ToolStripItem Item { get; }
    public Rectangle Bounds { get; }
    public ToolStripItemDesigner ItemDesigner { get; }
    public ToolStripItemGlyph(ToolStripItem item, ToolStripItemDesigner itemDesigner, Rectangle bounds, Behavior b);
    public ToolStripItem get_Item();
    public virtual Rectangle get_Bounds();
    public ToolStripItemDesigner get_ItemDesigner();
    public virtual Cursor GetHitTest(Point p);
    public virtual void Paint(PaintEventArgs pe);
}
internal class System.Windows.Forms.Design.ToolStripKeyboardHandlingService : object {
    private ISelectionService _selectionService;
    private IComponentChangeService _componentChangeSvc;
    private IServiceProvider _provider;
    private IMenuCommandService _menuCommandService;
    private IDesignerHost _designerHost;
    private object _shiftPrimary;
    private bool _shiftPressed;
    private object _currentSelection;
    private bool _templateNodeActive;
    private ToolStripTemplateNode _activeTemplateNode;
    private bool _templateNodeContextMenuOpen;
    private ArrayList _oldCommands;
    private ArrayList _newCommands;
    private MenuCommand _oldCommandPaste;
    private MenuCommand _newCommandPaste;
    private bool _commandsAdded;
    private bool _copyInProgress;
    private bool _cutOrDeleteInProgress;
    private bool _contextMenuShownByKeyBoard;
    private object _ownerItemAfterCut;
    internal ToolStripTemplateNode ActiveTemplateNode { get; internal set; }
    internal bool ContextMenuShownByKeyBoard { get; internal set; }
    internal bool CopyInProgress { get; internal set; }
    internal bool CutOrDeleteInProgress { get; internal set; }
    private IDesignerHost Host { get; }
    private IMenuCommandService MenuService { get; }
    internal object SelectedDesignerControl { get; internal set; }
    internal object OwnerItemAfterCut { get; internal set; }
    internal object ShiftPrimaryItem { get; internal set; }
    private ISelectionService SelectionService { get; }
    internal bool TemplateNodeActive { get; internal set; }
    internal bool TemplateNodeContextMenuOpen { get; internal set; }
    public ToolStripKeyboardHandlingService(IServiceProvider serviceProvider);
    internal ToolStripTemplateNode get_ActiveTemplateNode();
    internal void set_ActiveTemplateNode(ToolStripTemplateNode value);
    internal bool get_ContextMenuShownByKeyBoard();
    internal void set_ContextMenuShownByKeyBoard(bool value);
    internal bool get_CopyInProgress();
    internal void set_CopyInProgress(bool value);
    internal bool get_CutOrDeleteInProgress();
    internal void set_CutOrDeleteInProgress(bool value);
    private IDesignerHost get_Host();
    private IMenuCommandService get_MenuService();
    internal object get_SelectedDesignerControl();
    internal void set_SelectedDesignerControl(object value);
    internal object get_OwnerItemAfterCut();
    internal void set_OwnerItemAfterCut(object value);
    internal object get_ShiftPrimaryItem();
    internal void set_ShiftPrimaryItem(object value);
    private ISelectionService get_SelectionService();
    internal bool get_TemplateNodeActive();
    internal void set_TemplateNodeActive(bool value);
    internal bool get_TemplateNodeContextMenuOpen();
    internal void set_TemplateNodeContextMenuOpen(bool value);
    public void AddCommands();
    private ToolStripItem GetNextItem(ToolStrip parent, ToolStripItem startItem, ArrowDirection direction);
    private Control GetNextControlInTab(Control basectl, Control ctl, bool forward);
    private void InvokeOldCommand(object sender);
    private void OnComponentRemoved(object sender, ComponentEventArgs e);
    public bool OnContextMenu(int x, int y);
    private void OnCommandCopy(object sender, EventArgs e);
    private void OnCommandDelete(object sender, EventArgs e);
    private void OnCommandPaste(object sender, EventArgs e);
    private void OnCommandHome(object sender, EventArgs e);
    private void OnCommandEnd(object sender, EventArgs e);
    private void OnCommandSelectAll(object sender, EventArgs e);
    private void OnKeyShowDesignerActions(object sender, EventArgs e);
    private void OnKeyDefault(object sender, EventArgs e);
    private void OnKeyEdit(object sender, EventArgs e);
    private void OnKeyMove(object sender, EventArgs e);
    private void OnKeyCancel(object sender, EventArgs e);
    private void OnKeySelect(object sender, EventArgs e);
    private void OnSelectionChanging(object sender, EventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    public void ProcessKeySelect(bool reverse, MenuCommand cmd);
    private bool ProcessRightLeft(bool right);
    public void ProcessUpDown(bool down);
    private void PopulateOldCommands();
    private void PopulateNewCommands();
    public void RestoreCommands();
    internal void ResetActiveTemplateNodeSelectionState();
    public void RemoveCommands();
    private void RotateParent(bool backwards);
    public void RotateTab(bool backwards);
    private void SelectItems(ToolStrip parent);
    private void SetSelection(object targetSelection);
}
internal class System.Windows.Forms.Design.ToolStripMenuItemCodeDomSerializer : CodeDomSerializer {
    public virtual object Deserialize(IDesignerSerializationManager manager, object codeObject);
    private CodeDomSerializer GetBaseSerializer(IDesignerSerializationManager manager);
    public virtual object Serialize(IDesignerSerializationManager manager, object value);
}
internal class System.Windows.Forms.Design.ToolStripMenuItemDesigner : ToolStripDropDownItemDesigner {
    private static int GLYPHINSET;
    private DesignerToolStripControlHost typeHereNode;
    private ToolStripTemplateNode typeHereTemplateNode;
    private DesignerToolStripControlHost commitedEditorNode;
    private ToolStripTemplateNode commitedTemplateNode;
    private IDesignerHost designerHost;
    private ToolStripItem parentItem;
    private ToolStripAdornerWindowService toolStripAdornerWindowService;
    private ToolStripKeyboardHandlingService keyboardHandlingService;
    private ISelectionService selSvc;
    private DesignerTransaction _pendingTransaction;
    private bool fireComponentChanged;
    private bool componentAddingFired;
    private int indexToInsertNewItem;
    private DesignerTransaction insertMenuItemTransaction;
    private DesignerTransaction newMenuItemTransaction;
    private Rectangle dropDownSizeToInvalidate;
    private Rectangle boundsToInvalidateOnRemove;
    private ToolStripDropDownGlyph rootControlGlyph;
    private bool initialized;
    private UndoEngine undoEngine;
    private bool undoingCalled;
    private bool addingDummyItem;
    private ToolStripDropDown customDropDown;
    private bool dropDownSet;
    private SerializationStore serializedDataForDropDownItems;
    private bool dropDownSetFailed;
    public ICollection AssociatedComponents { get; }
    private bool CheckOnClick { get; private set; }
    private bool DoubleClickEnabled { get; private set; }
    private ToolStripDropDown DropDown { get; private set; }
    internal ToolStripTemplateNode Editor { get; internal set; }
    private bool IsOnContextMenu { get; }
    private ToolStripDropDownItem MenuItem { get; }
    private bool MenuItemSelected { get; }
    private ToolStripKeyboardHandlingService KeyboardHandlingService { get; }
    protected IComponent ParentComponent { get; }
    public virtual ICollection get_AssociatedComponents();
    private bool get_CheckOnClick();
    private void set_CheckOnClick(bool value);
    private bool get_DoubleClickEnabled();
    private void set_DoubleClickEnabled(bool value);
    private ToolStripDropDown get_DropDown();
    private void set_DropDown(ToolStripDropDown value);
    internal virtual ToolStripTemplateNode get_Editor();
    internal virtual void set_Editor(ToolStripTemplateNode value);
    private bool get_IsOnContextMenu();
    private ToolStripDropDownItem get_MenuItem();
    private bool get_MenuItemSelected();
    private ToolStripKeyboardHandlingService get_KeyboardHandlingService();
    protected virtual IComponent get_ParentComponent();
    internal void AddNewTemplateNode(ToolStripDropDown dropDown);
    internal void AddItemBodyGlyph(ToolStripItem item);
    private void AddBodyGlyphs(ToolStripDropDownItem item);
    internal virtual void CommitEdit(Type type, string text, bool commit, bool enterKeyPressed, bool tabKeyPressed);
    private void CreatetypeHereNode();
    private void CreateDummyMenuItem(ToolStripItem item, string text, Image image);
    private ToolStripItem CreateDummyItem(Type t, int dummyIndex);
    private ToolStripItem CreateNewItem(Type t, int dummyIndex, string newText);
    private bool CheckSameOwner(ToolStripDropDownItem lastSelected, ToolStripDropDownItem currentSelected);
    internal void Commit();
    protected virtual void Dispose(bool disposing);
    private void DropDownClick(object sender, EventArgs e);
    private void DropDownPaint(object sender, PaintEventArgs e);
    private void DropDownLocationChanged(object sender, EventArgs e);
    private void DropDownItem_DropDownOpening(object sender, EventArgs e);
    private void DropDownItem_DropDownOpened(object sender, EventArgs e);
    private void DropDownItem_DropDownClosed(object sender, EventArgs e);
    private void DropDownResize(object sender, EventArgs e);
    internal void EditTemplateNode(bool clicked);
    private void EnterInSituMode();
    internal void EnterInSituEdit(ToolStripItem toolItem);
    private int GetItemInsertionIndex(ToolStripDropDown wb, Point ownerClientAreaRelativeDropPoint);
    protected virtual Component GetOwnerForActionList();
    internal virtual ToolStrip GetMainToolStrip();
    private void HideAllDropDowns(ToolStripDropDownItem item);
    private void HideSiblingDropDowns(ToolStripDropDownItem item);
    internal void HookEvents();
    public virtual void Initialize(IComponent component);
    internal void InitializeBodyGlyphsForItems(bool addGlyphs, ToolStripDropDownItem item);
    internal void InitializeDropDown();
    private bool IsParentDropDown(ToolStripDropDown currentDropDown);
    internal virtual ToolStripItem MorphCurrentItem(Type t);
    private void ComponentChangeSvc_ComponentAdded(object sender, ComponentEventArgs e);
    private void CommitInsertTransaction(bool commit);
    private void ComponentChangeSvc_ComponentAdding(object sender, ComponentEventArgs e);
    private void ComponentChangeSvc_ComponentRemoved(object sender, ComponentEventArgs e);
    private void ComponentChangeSvc_ComponentRemoving(object sender, ComponentEventArgs e);
    private void OnDropDownClosing(object sender, ToolStripDropDownClosingEventArgs e);
    private void OnDropDownDisposed(object sender, EventArgs e);
    private void OnItemAdded(object sender, ToolStripItemEventArgs e);
    private void OnUndone(object source, EventArgs e);
    private void OnUndoing(object source, EventArgs e);
    private void OnSelectionChanged(object sender, EventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
    private void ResetDoubleClickEnabled();
    private void ResetCheckOnClick();
    private void ResetDropDown();
    private void ResetVisible();
    private void RestoreVisible();
    internal void RemoveTypeHereNode(ToolStripDropDownItem ownerItem);
    private void RollBack();
    private void RemoveBodyGlyphs(ToolStripDropDownItem item);
    internal void RemoveItemBodyGlyph(ToolStripItem item);
    internal void ResetGlyphs(ToolStripDropDownItem item);
    internal virtual bool SetSelection(bool enterKeyPressed);
    private bool ShouldSerializeDoubleClickEnabled();
    private bool ShouldSerializeCheckOnClick();
    private bool ShouldSerializeDropDown();
    private bool ShouldSerializeVisible();
    internal virtual void ShowEditNode(bool clicked);
    private void SelectItems(ToolStripDropDownItem oldSelection, ISelectionService selSvc);
    internal void ShowOwnerDropDown(ToolStripDropDownItem currentSelection);
    internal void UnHookEvents();
}
internal class System.Windows.Forms.Design.ToolStripTemplateNode : object {
    private static int GLYPHBORDER;
    private static int GLYPHINSET;
    private static int TOOLSTRIP_TEMPLATE_HEIGHT_ORIGINAL;
    private static int TEMPLATE_HEIGHT_ORIGINAL;
    private static int TOOLSTRIP_TEMPLATE_WIDTH_ORIGINAL;
    private static int TEMPLATE_WIDTH_ORIGINAL;
    private static int MINITOOLSTRIP_DROPDOWN_BUTTON_WIDTH_ORIGINAL;
    private static int TEMPLATE_HOTREGION_WIDTH_ORIGINAL;
    private static int MINITOOLSTRIP_TEXTBOX_WIDTH_ORIGINAL;
    private static int TOOLSTRIP_TEMPLATE_HEIGHT;
    private static int TEMPLATE_HEIGHT;
    private static int TOOLSTRIP_TEMPLATE_WIDTH;
    private static int TEMPLATE_WIDTH;
    private static int MINITOOLSTRIP_DROPDOWN_BUTTON_WIDTH;
    private static int TEMPLATE_HOTREGION_WIDTH;
    private static int MINITOOLSTRIP_TEXTBOX_WIDTH;
    private static bool s_isScalingInitialized;
    internal static string CenterLabelName;
    private IComponent _component;
    private IDesigner _designer;
    private IDesignerHost _designerHost;
    private MenuCommand[] _commands;
    private MenuCommand[] _addCommands;
    private TransparentToolStrip _miniToolStrip;
    private ToolStripLabel _centerLabel;
    private ToolStripSplitButton _addItemButton;
    private ToolStripControlHost _centerTextBox;
    internal bool ignoreFirstKeyUp;
    private Rectangle _boundingRect;
    private bool _inSituMode;
    private bool _active;
    private ItemTypeToolStripMenuItem _lastSelection;
    private MiniToolStripRenderer _renderer;
    private Type _itemType;
    private ToolStripKeyboardHandlingService _toolStripKeyBoardService;
    private ISelectionService _selectionService;
    private BehaviorService _behaviorService;
    private DesignerToolStripControlHost _controlHost;
    private ToolStripItem _activeItem;
    private EventHandler _onActivated;
    private EventHandler _onClosed;
    private EventHandler _onDeactivated;
    private MenuCommand _oldUndoCommand;
    private MenuCommand _oldRedoCommand;
    private NewItemsContextMenuStrip _contextMenu;
    private Rectangle _hotRegion;
    private bool _imeModeSet;
    private DesignSurface _designSurface;
    private bool _isSystemContextMenuDisplayed;
    private bool _isPopulated;
    public bool Active { get; public set; }
    public ToolStripItem ActiveItem { get; public set; }
    public Rectangle Bounds { get; public set; }
    public DesignerToolStripControlHost ControlHost { get; public set; }
    private ContextMenuStrip DesignerContextMenu { get; }
    public ToolStrip EditorToolStrip { get; }
    internal TextBox EditBox { get; }
    public Rectangle HotRegion { get; public set; }
    public bool IMEModeSet { get; public set; }
    private ToolStripKeyboardHandlingService KeyboardService { get; }
    private ISelectionService SelectionService { get; }
    private BehaviorService BehaviorService { get; }
    public Type ToolStripItemType { get; public set; }
    internal bool IsSystemContextMenuDisplayed { get; internal set; }
    public ToolStripTemplateNode(IComponent component, string text, Image image);
    private static ToolStripTemplateNode();
    public bool get_Active();
    public void set_Active(bool value);
    public ToolStripItem get_ActiveItem();
    public void set_ActiveItem(ToolStripItem value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    public DesignerToolStripControlHost get_ControlHost();
    public void set_ControlHost(DesignerToolStripControlHost value);
    private ContextMenuStrip get_DesignerContextMenu();
    public void add_Deactivated(EventHandler value);
    public void remove_Deactivated(EventHandler value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public ToolStrip get_EditorToolStrip();
    internal TextBox get_EditBox();
    public Rectangle get_HotRegion();
    public void set_HotRegion(Rectangle value);
    public bool get_IMEModeSet();
    public void set_IMEModeSet(bool value);
    private ToolStripKeyboardHandlingService get_KeyboardService();
    private ISelectionService get_SelectionService();
    private BehaviorService get_BehaviorService();
    public Type get_ToolStripItemType();
    public void set_ToolStripItemType(Type value);
    internal bool get_IsSystemContextMenuDisplayed();
    internal void set_IsSystemContextMenuDisplayed(bool value);
    private void AddNewItemClick(object sender, EventArgs e);
    private void CenterLabelClick(object sender, MouseEventArgs e);
    private void CenterLabelMouseEnter(object sender, EventArgs e);
    private void CenterLabelMouseMove(object sender, MouseEventArgs e);
    private void CenterLabelMouseLeave(object sender, EventArgs e);
    private void CenterTextBoxMouseEnter(object sender, EventArgs e);
    private void CenterTextBoxMouseLeave(object sender, EventArgs e);
    internal void CloseEditor();
    internal void Commit(bool enterKeyPressed, bool tabKeyPressed);
    internal void CommitAndSelect();
    private void CommitTextToDesigner(string text, bool commit, bool enterKeyPressed, bool tabKeyPressed);
    private void CommitEditor(bool commit, bool enterKeyPressed, bool tabKeyPressed);
    private void EnterInSituEdit();
    private void ExitInSituEdit();
    internal void FocusEditor(ToolStripItem currentItem);
    private void FocusForm();
    protected void OnActivated(EventArgs e);
    private void OnAddItemButtonDropDownOpened(object sender, EventArgs e);
    protected void OnClosed(EventArgs e);
    private void OnContextMenuClosed(object sender, ToolStripDropDownClosedEventArgs e);
    private void OnContextMenuClosing(object sender, ToolStripDropDownClosingEventArgs e);
    private void OnContextMenuOpened(object sender, EventArgs e);
    protected void OnDeactivated(EventArgs e);
    private void OnLoaderFlushed(object sender, EventArgs e);
    private void OnKeyUp(object sender, KeyEventArgs e);
    private void OnKeyDown(object sender, KeyEventArgs e);
    private void OnKeyDefaultAction(object sender, EventArgs e);
    private void OnMenuCut(object sender, EventArgs e);
    private void OnMouseUp(object sender, MouseEventArgs e);
    private void OnMouseDown(object sender, MouseEventArgs e);
    private void OnMouseMove(object sender, MouseEventArgs e);
    private void OnMouseLeave(object sender, EventArgs e);
    private void OnRightToLeftChanged(object sender, EventArgs e);
    public sealed virtual bool OverrideInvoke(MenuCommand cmd);
    public sealed virtual bool OverrideStatus(MenuCommand cmd);
    internal void RollBack();
    internal void ShowContextMenu(Point pt);
    internal void ShowDropDownMenu();
    private void SetUpMenuTemplateNode(ToolStripTemplateNode owner, string text, Image image, IComponent currentItem);
    private void SetUpToolTemplateNode(ToolStripTemplateNode owner, string text, Image image, IComponent component);
    private void SetupNewEditNode(ToolStripTemplateNode owner, string text, Image image, IComponent currentItem);
    internal void SetWidth(string text);
}
public class System.Windows.Forms.Design.WindowsFormsDesignerOptionService : DesignerOptionService {
    private DesignerOptions _options;
    public DesignerOptions CompatibilityOptions { get; }
    public virtual DesignerOptions get_CompatibilityOptions();
    protected virtual void PopulateOptionCollection(DesignerOptionCollection options);
}
internal enum System.Windows.Forms.DpiAwarenessContext : Enum {
    public int value__;
    public static DpiAwarenessContext DPI_AWARENESS_CONTEXT_UNSPECIFIED;
    public static DpiAwarenessContext DPI_AWARENESS_CONTEXT_UNAWARE;
    public static DpiAwarenessContext DPI_AWARENESS_CONTEXT_SYSTEM_AWARE;
    public static DpiAwarenessContext DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE;
    public static DpiAwarenessContext DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2;
    public static DpiAwarenessContext DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED;
}
internal static class System.Windows.Forms.DpiHelper : object {
    internal static double LogicalDpi;
    private static bool s_isInitialized;
    private static bool s_isInitializeDpiHelperForWinforms;
    private static double s_deviceDpi;
    private static double s_logicalToDeviceUnitsScalingFactor;
    private static InterpolationMode s_interpolationMode;
    private static bool s_doesNeedQueryForPerMonitorV2Awareness;
    private static bool s_isScalingRequirementMet;
    [CompilerGeneratedAttribute]
private static bool <FirstParkingWindowCreated>k__BackingField;
    internal static bool DoesCurrentContextRequireScaling { get; }
    internal static bool IsPerMonitorV2Awareness { get; }
    internal static bool IsScalingRequirementMet { get; }
    internal static int DeviceDpi { get; }
    private static double LogicalToDeviceUnitsScalingFactor { get; }
    private static InterpolationMode InterpolationMode { get; }
    public static bool IsScalingRequired { get; }
    internal static bool FirstParkingWindowCreated { get; internal set; }
    private static DpiHelper();
    private static void Initialize();
    internal static void InitializeDpiHelperForWinforms();
    internal static bool get_DoesCurrentContextRequireScaling();
    internal static bool get_IsPerMonitorV2Awareness();
    internal static bool get_IsScalingRequirementMet();
    internal static int get_DeviceDpi();
    private static double get_LogicalToDeviceUnitsScalingFactor();
    private static InterpolationMode get_InterpolationMode();
    private static Bitmap ScaleBitmapToSize(Bitmap logicalImage, Size deviceImageSize);
    private static Bitmap CreateScaledBitmap(Bitmap logicalImage, int deviceDpi);
    public static bool get_IsScalingRequired();
    public static int LogicalToDeviceUnits(int value, int devicePixels);
    public static int LogicalToDeviceUnitsX(int value);
    public static int LogicalToDeviceUnitsY(int value);
    public static Size LogicalToDeviceUnits(Size logicalSize, int deviceDpi);
    public static Bitmap CreateResizedBitmap(Bitmap logicalImage, Size targetImageSize);
    public static Bitmap GetBitmapFromIcon(Type t, string name);
    public static void ScaleBitmapLogicalToDevice(Bitmap& logicalBitmap, int deviceDpi);
    [CompilerGeneratedAttribute]
internal static bool get_FirstParkingWindowCreated();
    [CompilerGeneratedAttribute]
internal static void set_FirstParkingWindowCreated(bool value);
    internal static HighDpiMode GetWinformsApplicationDpiAwareness();
    internal static bool SetWinformsApplicationDpiAwareness(HighDpiMode highDpiMode);
    public static IDisposable EnterDpiAwarenessScope(DpiAwarenessContext awareness);
    public static T CreateInstanceInSystemAwareContext(Func`1<T> createInstance);
}
internal static class System.Windows.Forms.FileDialogNative : object {
    private static int SHCreateItemFromParsingName(string pszPath, IntPtr pbc, Guid& riid, Object& ppv);
    public static IShellItem CreateItemFromParsingName(string path);
}
internal static class System.Windows.Forms.NativeMethods : object {
    public static IntPtr InvalidIntPtr;
    public static IntPtr LPSTR_TEXTCALLBACK;
    public static HandleRef NullHandleRef;
    public static int BITMAPINFO_MAX_COLORSIZE;
    public static int STATUS_PENDING;
    public static int DESKTOP_SWITCHDESKTOP;
    public static int ERROR_ACCESS_DENIED;
    public static int BS_SOLID;
    public static int SHGFI_ICON;
    public static int SHGFI_DISPLAYNAME;
    public static int SHGFI_TYPENAME;
    public static int SHGFI_ATTRIBUTES;
    public static int SHGFI_ICONLOCATION;
    public static int SHGFI_EXETYPE;
    public static int SHGFI_SYSICONINDEX;
    public static int SHGFI_LINKOVERLAY;
    public static int SHGFI_SELECTED;
    public static int SHGFI_ATTR_SPECIFIED;
    public static int SHGFI_LARGEICON;
    public static int SHGFI_SMALLICON;
    public static int SHGFI_OPENICON;
    public static int SHGFI_SHELLICONSIZE;
    public static int SHGFI_PIDL;
    public static int SHGFI_USEFILEATTRIBUTES;
    public static int SHGFI_ADDOVERLAYS;
    public static int SHGFI_OVERLAYINDEX;
    public static int DM_DISPLAYORIENTATION;
    public static int AUTOSUGGEST;
    public static int AUTOSUGGEST_OFF;
    public static int AUTOAPPEND;
    public static int AUTOAPPEND_OFF;
    public static int ARW_BOTTOMLEFT;
    public static int ARW_BOTTOMRIGHT;
    public static int ARW_TOPLEFT;
    public static int ARW_TOPRIGHT;
    public static int ARW_LEFT;
    public static int ARW_RIGHT;
    public static int ARW_UP;
    public static int ARW_DOWN;
    public static int ARW_HIDE;
    public static int ACM_OPENA;
    public static int ACM_OPENW;
    public static int ADVF_NODATA;
    public static int ADVF_ONLYONCE;
    public static int ADVF_PRIMEFIRST;
    public static int BCM_GETIDEALSIZE;
    public static int BI_RGB;
    public static int BS_PATTERN;
    public static int BDR_RAISEDOUTER;
    public static int BDR_SUNKENOUTER;
    public static int BDR_RAISEDINNER;
    public static int BDR_SUNKENINNER;
    public static int BDR_RAISED;
    public static int BDR_SUNKEN;
    public static int BF_LEFT;
    public static int BF_TOP;
    public static int BF_RIGHT;
    public static int BF_BOTTOM;
    public static int BF_ADJUST;
    public static int BF_FLAT;
    public static int BF_MIDDLE;
    public static int BFFM_INITIALIZED;
    public static int BFFM_SELCHANGED;
    public static int BFFM_SETSELECTION;
    public static int BFFM_ENABLEOK;
    public static int BS_PUSHBUTTON;
    public static int BS_DEFPUSHBUTTON;
    public static int BS_MULTILINE;
    public static int BS_PUSHLIKE;
    public static int BS_OWNERDRAW;
    public static int BS_RADIOBUTTON;
    public static int BS_3STATE;
    public static int BS_GROUPBOX;
    public static int BS_LEFT;
    public static int BS_RIGHT;
    public static int BS_CENTER;
    public static int BS_TOP;
    public static int BS_BOTTOM;
    public static int BS_VCENTER;
    public static int BS_RIGHTBUTTON;
    public static int BN_CLICKED;
    public static int BM_SETCHECK;
    public static int BM_SETSTATE;
    public static int BM_CLICK;
    public static int CDERR_DIALOGFAILURE;
    public static int CDERR_STRUCTSIZE;
    public static int CDERR_INITIALIZATION;
    public static int CDERR_NOTEMPLATE;
    public static int CDERR_NOHINSTANCE;
    public static int CDERR_LOADSTRFAILURE;
    public static int CDERR_FINDRESFAILURE;
    public static int CDERR_LOADRESFAILURE;
    public static int CDERR_LOCKRESFAILURE;
    public static int CDERR_MEMALLOCFAILURE;
    public static int CDERR_MEMLOCKFAILURE;
    public static int CDERR_NOHOOK;
    public static int CDERR_REGISTERMSGFAIL;
    public static int CFERR_NOFONTS;
    public static int CFERR_MAXLESSTHANMIN;
    public static int CC_RGBINIT;
    public static int CC_FULLOPEN;
    public static int CC_PREVENTFULLOPEN;
    public static int CC_SHOWHELP;
    public static int CC_ENABLEHOOK;
    public static int CC_SOLIDCOLOR;
    public static int CC_ANYCOLOR;
    public static int CF_SCREENFONTS;
    public static int CF_SHOWHELP;
    public static int CF_ENABLEHOOK;
    public static int CF_INITTOLOGFONTSTRUCT;
    public static int CF_EFFECTS;
    public static int CF_APPLY;
    public static int CF_SCRIPTSONLY;
    public static int CF_NOVECTORFONTS;
    public static int CF_NOSIMULATIONS;
    public static int CF_LIMITSIZE;
    public static int CF_FIXEDPITCHONLY;
    public static int CF_FORCEFONTEXIST;
    public static int CF_TTONLY;
    public static int CF_SELECTSCRIPT;
    public static int CF_NOVERTFONTS;
    public static int CP_WINANSI;
    public static int cmb4;
    public static int CF_TEXT;
    public static int CF_BITMAP;
    public static int CF_METAFILEPICT;
    public static int CF_SYLK;
    public static int CF_DIF;
    public static int CF_TIFF;
    public static int CF_OEMTEXT;
    public static int CF_DIB;
    public static int CF_PALETTE;
    public static int CF_PENDATA;
    public static int CF_RIFF;
    public static int CF_WAVE;
    public static int CF_UNICODETEXT;
    public static int CF_ENHMETAFILE;
    public static int CF_HDROP;
    public static int CF_LOCALE;
    public static int CLSCTX_INPROC_SERVER;
    public static int CLSCTX_LOCAL_SERVER;
    public static int CW_USEDEFAULT;
    public static int CWP_SKIPINVISIBLE;
    public static int COLOR_WINDOW;
    public static int CB_ERR;
    public static int CBN_SELCHANGE;
    public static int CBN_DBLCLK;
    public static int CBN_EDITCHANGE;
    public static int CBN_EDITUPDATE;
    public static int CBN_DROPDOWN;
    public static int CBN_CLOSEUP;
    public static int CBN_SELENDOK;
    public static int CBS_SIMPLE;
    public static int CBS_DROPDOWN;
    public static int CBS_DROPDOWNLIST;
    public static int CBS_OWNERDRAWFIXED;
    public static int CBS_OWNERDRAWVARIABLE;
    public static int CBS_AUTOHSCROLL;
    public static int CBS_HASSTRINGS;
    public static int CBS_NOINTEGRALHEIGHT;
    public static int CB_GETEDITSEL;
    public static int CB_LIMITTEXT;
    public static int CB_SETEDITSEL;
    public static int CB_ADDSTRING;
    public static int CB_DELETESTRING;
    public static int CB_GETCURSEL;
    public static int CB_GETLBTEXT;
    public static int CB_GETLBTEXTLEN;
    public static int CB_INSERTSTRING;
    public static int CB_RESETCONTENT;
    public static int CB_FINDSTRING;
    public static int CB_SETCURSEL;
    public static int CB_SHOWDROPDOWN;
    public static int CB_GETITEMDATA;
    public static int CB_SETITEMHEIGHT;
    public static int CB_GETITEMHEIGHT;
    public static int CB_GETDROPPEDSTATE;
    public static int CB_GETTOPINDEX;
    public static int CB_SETTOPINDEX;
    public static int CB_FINDSTRINGEXACT;
    public static int CB_GETDROPPEDWIDTH;
    public static int CB_SETDROPPEDWIDTH;
    public static int CDRF_DODEFAULT;
    public static int CDRF_NEWFONT;
    public static int CDRF_SKIPDEFAULT;
    public static int CDRF_NOTIFYPOSTPAINT;
    public static int CDRF_NOTIFYITEMDRAW;
    public static int CDRF_NOTIFYSUBITEMDRAW;
    public static int CDDS_PREPAINT;
    public static int CDDS_POSTPAINT;
    public static int CDDS_ITEM;
    public static int CDDS_SUBITEM;
    public static int CDDS_ITEMPREPAINT;
    public static int CDDS_ITEMPOSTPAINT;
    public static int CDIS_SELECTED;
    public static int CDIS_GRAYED;
    public static int CDIS_DISABLED;
    public static int CDIS_CHECKED;
    public static int CDIS_FOCUS;
    public static int CDIS_DEFAULT;
    public static int CDIS_HOT;
    public static int CDIS_MARKED;
    public static int CDIS_INDETERMINATE;
    public static int CDIS_SHOWKEYBOARDCUES;
    public static int CLR_NONE;
    public static int CLR_DEFAULT;
    public static int CCM_SETVERSION;
    public static int CCM_GETVERSION;
    public static int CCS_NORESIZE;
    public static int CCS_NOPARENTALIGN;
    public static int CCS_NODIVIDER;
    public static int CBEM_INSERTITEM;
    public static int CBEM_SETITEM;
    public static int CBEM_GETITEM;
    public static int CBEN_ENDEDIT;
    public static int CONNECT_E_NOCONNECTION;
    public static int CONNECT_E_CANNOTCONNECT;
    public static int CTRLINFO_EATS_RETURN;
    public static int CTRLINFO_EATS_ESCAPE;
    public static int DUPLICATE;
    public static int DISPID_UNKNOWN;
    public static int DISPID_PROPERTYPUT;
    public static int DISPATCH_METHOD;
    public static int DISPATCH_PROPERTYGET;
    public static int DISPATCH_PROPERTYPUT;
    public static int DV_E_DVASPECT;
    public static int DISP_E_MEMBERNOTFOUND;
    public static int DISP_E_PARAMNOTFOUND;
    public static int DISP_E_EXCEPTION;
    public static int DIB_RGB_COLORS;
    public static int DUPLICATE_SAME_ACCESS;
    public static int DFC_CAPTION;
    public static int DFC_MENU;
    public static int DFC_SCROLL;
    public static int DFC_BUTTON;
    public static int DFCS_CAPTIONCLOSE;
    public static int DFCS_CAPTIONMIN;
    public static int DFCS_CAPTIONMAX;
    public static int DFCS_CAPTIONRESTORE;
    public static int DFCS_CAPTIONHELP;
    public static int DFCS_MENUARROW;
    public static int DFCS_MENUCHECK;
    public static int DFCS_MENUBULLET;
    public static int DFCS_SCROLLUP;
    public static int DFCS_SCROLLDOWN;
    public static int DFCS_SCROLLLEFT;
    public static int DFCS_SCROLLRIGHT;
    public static int DFCS_SCROLLCOMBOBOX;
    public static int DFCS_BUTTONCHECK;
    public static int DFCS_BUTTONRADIO;
    public static int DFCS_BUTTON3STATE;
    public static int DFCS_BUTTONPUSH;
    public static int DFCS_INACTIVE;
    public static int DFCS_PUSHED;
    public static int DFCS_CHECKED;
    public static int DFCS_FLAT;
    public static int DCX_WINDOW;
    public static int DCX_CACHE;
    public static int DCX_LOCKWINDOWUPDATE;
    public static int DCX_INTERSECTRGN;
    public static int DI_NORMAL;
    public static int DLGC_WANTARROWS;
    public static int DLGC_WANTTAB;
    public static int DLGC_WANTALLKEYS;
    public static int DLGC_WANTCHARS;
    public static int DLGC_WANTMESSAGE;
    public static int DLGC_HASSETSEL;
    public static int DTM_GETSYSTEMTIME;
    public static int DTM_SETSYSTEMTIME;
    public static int DTM_SETRANGE;
    public static int DTM_SETFORMAT;
    public static int DTM_SETMCCOLOR;
    public static int DTM_GETMONTHCAL;
    public static int DTM_SETMCFONT;
    public static int DTS_UPDOWN;
    public static int DTS_SHOWNONE;
    public static int DTS_LONGDATEFORMAT;
    public static int DTS_TIMEFORMAT;
    public static int DTS_RIGHTALIGN;
    public static int DTN_DATETIMECHANGE;
    public static int DTN_USERSTRING;
    public static int DTN_WMKEYDOWN;
    public static int DTN_FORMAT;
    public static int DTN_FORMATQUERY;
    public static int DTN_DROPDOWN;
    public static int DTN_CLOSEUP;
    public static int DVASPECT_CONTENT;
    public static int DVASPECT_TRANSPARENT;
    public static int DVASPECT_OPAQUE;
    public static int E_NOTIMPL;
    public static int E_OUTOFMEMORY;
    public static int E_INVALIDARG;
    public static int E_NOINTERFACE;
    public static int E_POINTER;
    public static int E_FAIL;
    public static int E_ABORT;
    public static int E_UNEXPECTED;
    public static int INET_E_DEFAULT_ACTION;
    public static int ETO_OPAQUE;
    public static int ETO_CLIPPED;
    public static int EMR_POLYTEXTOUT;
    public static int EDGE_RAISED;
    public static int EDGE_SUNKEN;
    public static int EDGE_ETCHED;
    public static int EDGE_BUMP;
    public static int ES_LEFT;
    public static int ES_CENTER;
    public static int ES_RIGHT;
    public static int ES_MULTILINE;
    public static int ES_UPPERCASE;
    public static int ES_LOWERCASE;
    public static int ES_AUTOVSCROLL;
    public static int ES_AUTOHSCROLL;
    public static int ES_NOHIDESEL;
    public static int ES_READONLY;
    public static int ES_PASSWORD;
    public static int EN_CHANGE;
    public static int EN_UPDATE;
    public static int EN_HSCROLL;
    public static int EN_VSCROLL;
    public static int EN_ALIGN_LTR_EC;
    public static int EN_ALIGN_RTL_EC;
    public static int EC_LEFTMARGIN;
    public static int EC_RIGHTMARGIN;
    public static int ERROR_INVALID_HANDLE;
    public static int ERROR_CLASS_ALREADY_EXISTS;
    public static int FNERR_SUBCLASSFAILURE;
    public static int FNERR_INVALIDFILENAME;
    public static int FNERR_BUFFERTOOSMALL;
    public static int FRERR_BUFFERLENGTHZERO;
    public static int FADF_BSTR;
    public static int FADF_UNKNOWN;
    public static int FADF_DISPATCH;
    public static int FADF_VARIANT;
    public static int FORMAT_MESSAGE_FROM_SYSTEM;
    public static int FORMAT_MESSAGE_IGNORE_INSERTS;
    public static int FVIRTKEY;
    public static int FSHIFT;
    public static int FALT;
    public static int GMEM_FIXED;
    public static int GMEM_MOVEABLE;
    public static int GMEM_NOCOMPACT;
    public static int GMEM_NODISCARD;
    public static int GMEM_ZEROINIT;
    public static int GMEM_MODIFY;
    public static int GMEM_DISCARDABLE;
    public static int GMEM_NOT_BANKED;
    public static int GMEM_SHARE;
    public static int GMEM_DDESHARE;
    public static int GMEM_NOTIFY;
    public static int GMEM_LOWER;
    public static int GMEM_VALID_FLAGS;
    public static int GMEM_INVALID_HANDLE;
    public static int GHND;
    public static int GPTR;
    public static int GCL_WNDPROC;
    public static int GWL_WNDPROC;
    public static int GWL_HWNDPARENT;
    public static int GWL_STYLE;
    public static int GWL_EXSTYLE;
    public static int GWL_ID;
    public static int GW_HWNDFIRST;
    public static int GW_HWNDLAST;
    public static int GW_HWNDNEXT;
    public static int GW_HWNDPREV;
    public static int GW_CHILD;
    public static int GMR_VISIBLE;
    public static int GMR_DAYSTATE;
    public static int GDI_ERROR;
    public static int GDTR_MIN;
    public static int GDTR_MAX;
    public static int GDT_VALID;
    public static int GDT_NONE;
    public static int GA_PARENT;
    public static int GA_ROOT;
    public static int GCS_COMPSTR;
    public static int GCS_COMPATTR;
    public static int GCS_RESULTSTR;
    public static int ATTR_INPUT;
    public static int ATTR_TARGET_CONVERTED;
    public static int ATTR_CONVERTED;
    public static int ATTR_TARGET_NOTCONVERTED;
    public static int ATTR_INPUT_ERROR;
    public static int ATTR_FIXEDCONVERTED;
    public static int NI_COMPOSITIONSTR;
    public static int CPS_COMPLETE;
    public static int CPS_CANCEL;
    public static int HC_ACTION;
    public static int HC_GETNEXT;
    public static int HC_SKIP;
    public static int HTTRANSPARENT;
    public static int HTNOWHERE;
    public static int HTCLIENT;
    public static int HTLEFT;
    public static int HTBOTTOM;
    public static int HTBOTTOMLEFT;
    public static int HTBOTTOMRIGHT;
    public static int HTBORDER;
    public static int HELPINFO_WINDOW;
    public static int HCF_HIGHCONTRASTON;
    public static int HDI_ORDER;
    public static int HDI_WIDTH;
    public static int HDM_GETITEMCOUNT;
    public static int HDM_INSERTITEMW;
    public static int HDM_GETITEMW;
    public static int HDM_LAYOUT;
    public static int HDM_SETITEMW;
    public static int HDN_ITEMCHANGING;
    public static int HDN_ITEMCHANGED;
    public static int HDN_ITEMCLICK;
    public static int HDN_ITEMDBLCLICK;
    public static int HDN_DIVIDERDBLCLICK;
    public static int HDN_BEGINTDRAG;
    public static int HDN_BEGINTRACK;
    public static int HDN_ENDDRAG;
    public static int HDN_ENDTRACK;
    public static int HDN_TRACK;
    public static int HDN_GETDISPINFO;
    public static int HDS_FULLDRAG;
    public static int HBMMENU_CALLBACK;
    public static int HBMMENU_SYSTEM;
    public static int HBMMENU_MBAR_RESTORE;
    public static int HBMMENU_MBAR_MINIMIZE;
    public static int HBMMENU_MBAR_CLOSE;
    public static int HBMMENU_MBAR_CLOSE_D;
    public static int HBMMENU_MBAR_MINIMIZE_D;
    public static int HBMMENU_POPUP_CLOSE;
    public static int HBMMENU_POPUP_RESTORE;
    public static int HBMMENU_POPUP_MAXIMIZE;
    public static int HBMMENU_POPUP_MINIMIZE;
    public static HandleRef HWND_TOP;
    public static HandleRef HWND_BOTTOM;
    public static HandleRef HWND_TOPMOST;
    public static HandleRef HWND_NOTOPMOST;
    public static HandleRef HWND_MESSAGE;
    public static int IME_CMODE_NATIVE;
    public static int IME_CMODE_KATAKANA;
    public static int IME_CMODE_FULLSHAPE;
    public static int INPLACE_E_NOTOOLSPACE;
    public static int ICON_SMALL;
    public static int ICON_BIG;
    public static int IMAGE_ICON;
    public static int IMAGE_CURSOR;
    public static int ICC_LISTVIEW_CLASSES;
    public static int ICC_TREEVIEW_CLASSES;
    public static int ICC_BAR_CLASSES;
    public static int ICC_TAB_CLASSES;
    public static int ICC_PROGRESS_CLASS;
    public static int ICC_DATE_CLASSES;
    public static int ILC_MASK;
    public static int ILC_COLOR;
    public static int ILC_COLOR4;
    public static int ILC_COLOR8;
    public static int ILC_COLOR16;
    public static int ILC_COLOR24;
    public static int ILC_COLOR32;
    public static int ILC_MIRROR;
    public static int ILD_NORMAL;
    public static int ILD_TRANSPARENT;
    public static int ILD_MASK;
    public static int ILD_ROP;
    public static int ILP_NORMAL;
    public static int ILP_DOWNLEVEL;
    public static int ILS_NORMAL;
    public static int ILS_GLOW;
    public static int ILS_SHADOW;
    public static int ILS_SATURATE;
    public static int ILS_ALPHA;
    public static int IDM_PRINT;
    public static int IDM_PAGESETUP;
    public static int IDM_PRINTPREVIEW;
    public static int IDM_PROPERTIES;
    public static int IDM_SAVEAS;
    public static int CSC_NAVIGATEFORWARD;
    public static int CSC_NAVIGATEBACK;
    public static int INPUT_KEYBOARD;
    public static int KEYEVENTF_EXTENDEDKEY;
    public static int KEYEVENTF_KEYUP;
    public static int KEYEVENTF_UNICODE;
    public static int LB_ERR;
    public static int LB_ERRSPACE;
    public static int LBN_SELCHANGE;
    public static int LBN_DBLCLK;
    public static int LB_ADDSTRING;
    public static int LB_INSERTSTRING;
    public static int LB_DELETESTRING;
    public static int LB_RESETCONTENT;
    public static int LB_SETSEL;
    public static int LB_SETCURSEL;
    public static int LB_GETSEL;
    public static int LB_SETCARETINDEX;
    public static int LB_GETCARETINDEX;
    public static int LB_GETCURSEL;
    public static int LB_GETTEXT;
    public static int LB_GETTEXTLEN;
    public static int LB_GETCOUNT;
    public static int LB_GETTOPINDEX;
    public static int LB_FINDSTRING;
    public static int LB_GETSELCOUNT;
    public static int LB_GETSELITEMS;
    public static int LB_SETTABSTOPS;
    public static int LB_SETHORIZONTALEXTENT;
    public static int LB_SETCOLUMNWIDTH;
    public static int LB_SETTOPINDEX;
    public static int LB_GETITEMRECT;
    public static int LB_SETITEMHEIGHT;
    public static int LB_GETITEMHEIGHT;
    public static int LB_FINDSTRINGEXACT;
    public static int LB_ITEMFROMPOINT;
    public static int LB_SETLOCALE;
    public static int LBS_NOTIFY;
    public static int LBS_MULTIPLESEL;
    public static int LBS_OWNERDRAWFIXED;
    public static int LBS_OWNERDRAWVARIABLE;
    public static int LBS_HASSTRINGS;
    public static int LBS_USETABSTOPS;
    public static int LBS_NOINTEGRALHEIGHT;
    public static int LBS_MULTICOLUMN;
    public static int LBS_WANTKEYBOARDINPUT;
    public static int LBS_EXTENDEDSEL;
    public static int LBS_DISABLENOSCROLL;
    public static int LBS_NOSEL;
    public static int LOCK_WRITE;
    public static int LOCK_EXCLUSIVE;
    public static int LOCK_ONLYONCE;
    public static int LV_VIEW_TILE;
    public static int LVBKIF_SOURCE_NONE;
    public static int LVBKIF_SOURCE_URL;
    public static int LVBKIF_STYLE_NORMAL;
    public static int LVBKIF_STYLE_TILE;
    public static int LVS_ICON;
    public static int LVS_REPORT;
    public static int LVS_SMALLICON;
    public static int LVS_LIST;
    public static int LVS_SINGLESEL;
    public static int LVS_SHOWSELALWAYS;
    public static int LVS_SORTASCENDING;
    public static int LVS_SORTDESCENDING;
    public static int LVS_SHAREIMAGELISTS;
    public static int LVS_NOLABELWRAP;
    public static int LVS_AUTOARRANGE;
    public static int LVS_EDITLABELS;
    public static int LVS_NOSCROLL;
    public static int LVS_ALIGNTOP;
    public static int LVS_ALIGNLEFT;
    public static int LVS_NOCOLUMNHEADER;
    public static int LVS_NOSORTHEADER;
    public static int LVS_OWNERDATA;
    public static int LVSCW_AUTOSIZE;
    public static int LVSCW_AUTOSIZE_USEHEADER;
    public static int LVM_REDRAWITEMS;
    public static int LVM_SCROLL;
    public static int LVM_SETBKCOLOR;
    public static int LVM_SETBKIMAGE;
    public static int LVM_SETCALLBACKMASK;
    public static int LVM_GETCALLBACKMASK;
    public static int LVM_GETCOLUMNORDERARRAY;
    public static int LVM_GETITEMCOUNT;
    public static int LVM_SETCOLUMNORDERARRAY;
    public static int LVM_SETINFOTIP;
    public static int LVSIL_NORMAL;
    public static int LVSIL_SMALL;
    public static int LVSIL_STATE;
    public static int LVM_SETIMAGELIST;
    public static int LVM_SETSELECTIONMARK;
    public static int LVM_SETTOOLTIPS;
    public static int LVIF_TEXT;
    public static int LVIF_IMAGE;
    public static int LVIF_INDENT;
    public static int LVIF_PARAM;
    public static int LVIF_STATE;
    public static int LVIF_GROUPID;
    public static int LVIF_COLUMNS;
    public static int LVIS_FOCUSED;
    public static int LVIS_SELECTED;
    public static int LVIS_CUT;
    public static int LVIS_DROPHILITED;
    public static int LVIS_OVERLAYMASK;
    public static int LVIS_STATEIMAGEMASK;
    public static int LVM_GETITEM;
    public static int LVM_SETITEM;
    public static int LVM_SETITEMPOSITION32;
    public static int LVM_INSERTITEM;
    public static int LVM_DELETEITEM;
    public static int LVM_DELETECOLUMN;
    public static int LVM_DELETEALLITEMS;
    public static int LVM_UPDATE;
    public static int LVNI_FOCUSED;
    public static int LVNI_SELECTED;
    public static int LVM_GETNEXTITEM;
    public static int LVFI_PARAM;
    public static int LVFI_NEARESTXY;
    public static int LVFI_PARTIAL;
    public static int LVFI_STRING;
    public static int LVM_FINDITEM;
    public static int LVIR_BOUNDS;
    public static int LVIR_ICON;
    public static int LVIR_LABEL;
    public static int LVIR_SELECTBOUNDS;
    public static int LVM_GETITEMPOSITION;
    public static int LVM_GETITEMRECT;
    public static int LVM_GETSUBITEMRECT;
    public static int LVM_GETSTRINGWIDTH;
    public static int LVHT_NOWHERE;
    public static int LVHT_ONITEMICON;
    public static int LVHT_ONITEMLABEL;
    public static int LVHT_ABOVE;
    public static int LVHT_BELOW;
    public static int LVHT_RIGHT;
    public static int LVHT_LEFT;
    public static int LVHT_ONITEM;
    public static int LVHT_ONITEMSTATEICON;
    public static int LVM_SUBITEMHITTEST;
    public static int LVM_HITTEST;
    public static int LVM_ENSUREVISIBLE;
    public static int LVA_DEFAULT;
    public static int LVA_ALIGNLEFT;
    public static int LVA_ALIGNTOP;
    public static int LVA_SNAPTOGRID;
    public static int LVM_ARRANGE;
    public static int LVM_EDITLABEL;
    public static int LVCDI_ITEM;
    public static int LVCDI_GROUP;
    public static int LVCF_FMT;
    public static int LVCF_WIDTH;
    public static int LVCF_TEXT;
    public static int LVCF_SUBITEM;
    public static int LVCF_IMAGE;
    public static int LVCF_ORDER;
    public static int LVCFMT_IMAGE;
    public static int LVGA_HEADER_LEFT;
    public static int LVGA_HEADER_CENTER;
    public static int LVGA_HEADER_RIGHT;
    public static int LVGA_FOOTER_LEFT;
    public static int LVGA_FOOTER_CENTER;
    public static int LVGA_FOOTER_RIGHT;
    public static int LVGF_NONE;
    public static int LVGF_HEADER;
    public static int LVGF_FOOTER;
    public static int LVGF_STATE;
    public static int LVGF_ALIGN;
    public static int LVGF_GROUPID;
    public static int LVGS_NORMAL;
    public static int LVGS_COLLAPSED;
    public static int LVGS_HIDDEN;
    public static int LVIM_AFTER;
    public static int LVTVIF_FIXEDSIZE;
    public static int LVTVIM_TILESIZE;
    public static int LVTVIM_COLUMNS;
    public static int LVM_ENABLEGROUPVIEW;
    public static int LVM_MOVEITEMTOGROUP;
    public static int LVM_GETCOLUMN;
    public static int LVM_SETCOLUMN;
    public static int LVM_INSERTCOLUMN;
    public static int LVM_INSERTGROUP;
    public static int LVM_REMOVEGROUP;
    public static int LVM_INSERTMARKHITTEST;
    public static int LVM_REMOVEALLGROUPS;
    public static int LVM_GETCOLUMNWIDTH;
    public static int LVM_SETCOLUMNWIDTH;
    public static int LVM_SETINSERTMARK;
    public static int LVM_GETHEADER;
    public static int LVM_SETTEXTCOLOR;
    public static int LVM_SETTEXTBKCOLOR;
    public static int LVM_GETTOPINDEX;
    public static int LVM_SETITEMPOSITION;
    public static int LVM_SETITEMSTATE;
    public static int LVM_GETITEMSTATE;
    public static int LVM_GETITEMTEXT;
    public static int LVM_GETHOTITEM;
    public static int LVM_SETITEMTEXT;
    public static int LVM_SETITEMCOUNT;
    public static int LVM_SORTITEMS;
    public static int LVM_GETSELECTEDCOUNT;
    public static int LVM_GETISEARCHSTRING;
    public static int LVM_SETEXTENDEDLISTVIEWSTYLE;
    public static int LVM_SETVIEW;
    public static int LVM_GETGROUPINFO;
    public static int LVM_SETGROUPINFO;
    public static int LVM_HASGROUP;
    public static int LVM_SETTILEVIEWINFO;
    public static int LVM_GETTILEVIEWINFO;
    public static int LVM_GETINSERTMARK;
    public static int LVM_GETINSERTMARKRECT;
    public static int LVM_SETINSERTMARKCOLOR;
    public static int LVM_GETINSERTMARKCOLOR;
    public static int LVM_ISGROUPVIEWENABLED;
    public static int LVS_EX_GRIDLINES;
    public static int LVS_EX_CHECKBOXES;
    public static int LVS_EX_TRACKSELECT;
    public static int LVS_EX_HEADERDRAGDROP;
    public static int LVS_EX_FULLROWSELECT;
    public static int LVS_EX_ONECLICKACTIVATE;
    public static int LVS_EX_TWOCLICKACTIVATE;
    public static int LVS_EX_INFOTIP;
    public static int LVS_EX_UNDERLINEHOT;
    public static int LVS_EX_DOUBLEBUFFER;
    public static int LVN_ITEMCHANGING;
    public static int LVN_ITEMCHANGED;
    public static int LVN_BEGINLABELEDIT;
    public static int LVN_ENDLABELEDIT;
    public static int LVN_COLUMNCLICK;
    public static int LVN_BEGINDRAG;
    public static int LVN_BEGINRDRAG;
    public static int LVN_ODFINDITEM;
    public static int LVN_ITEMACTIVATE;
    public static int LVN_GETDISPINFO;
    public static int LVN_ODCACHEHINT;
    public static int LVN_ODSTATECHANGED;
    public static int LVN_SETDISPINFO;
    public static int LVN_GETINFOTIP;
    public static int LVN_KEYDOWN;
    public static int LWA_COLORKEY;
    public static int LWA_ALPHA;
    public static int LANG_NEUTRAL;
    public static int LOCALE_IFIRSTDAYOFWEEK;
    public static int LOCALE_IMEASURE;
    public static int TVM_SETEXTENDEDSTYLE;
    public static int TVM_GETEXTENDEDSTYLE;
    public static int TVS_EX_FADEINOUTEXPANDOS;
    public static int TVS_EX_DOUBLEBUFFER;
    public static int LOCALE_USER_DEFAULT;
    public static int LANG_USER_DEFAULT;
    public static int MEMBERID_NIL;
    public static int ERROR_INSUFFICIENT_BUFFER;
    public static int MA_ACTIVATE;
    public static int MA_ACTIVATEANDEAT;
    public static int MA_NOACTIVATE;
    public static int MA_NOACTIVATEANDEAT;
    public static int MM_TEXT;
    public static int MM_ANISOTROPIC;
    public static int MK_LBUTTON;
    public static int MK_RBUTTON;
    public static int MK_SHIFT;
    public static int MK_CONTROL;
    public static int MK_MBUTTON;
    public static int MNC_EXECUTE;
    public static int MNC_SELECT;
    public static int MIIM_STATE;
    public static int MIIM_ID;
    public static int MIIM_SUBMENU;
    public static int MIIM_TYPE;
    public static int MIIM_DATA;
    public static int MIIM_STRING;
    public static int MIIM_BITMAP;
    public static int MIIM_FTYPE;
    public static int MB_OK;
    public static int MF_BYCOMMAND;
    public static int MF_BYPOSITION;
    public static int MF_ENABLED;
    public static int MF_GRAYED;
    public static int MF_POPUP;
    public static int MF_SYSMENU;
    public static int MFS_DISABLED;
    public static int MFT_MENUBREAK;
    public static int MFT_SEPARATOR;
    public static int MFT_RIGHTORDER;
    public static int MFT_RIGHTJUSTIFY;
    public static int MDIS_ALLCHILDSTYLES;
    public static int MDITILE_VERTICAL;
    public static int MDITILE_HORIZONTAL;
    public static int MDITILE_SKIPDISABLED;
    public static int MCN_VIEWCHANGE;
    public static int MCN_SELCHANGE;
    public static int MCN_GETDAYSTATE;
    public static int MCN_SELECT;
    public static int MSAA_MENU_SIG;
    public static int NIM_ADD;
    public static int NIM_MODIFY;
    public static int NIM_DELETE;
    public static int NIF_MESSAGE;
    public static int NIM_SETVERSION;
    public static int NIF_ICON;
    public static int NIF_INFO;
    public static int NIF_TIP;
    public static int NIIF_NONE;
    public static int NIIF_INFO;
    public static int NIIF_WARNING;
    public static int NIIF_ERROR;
    public static int NIN_BALLOONSHOW;
    public static int NIN_BALLOONHIDE;
    public static int NIN_BALLOONTIMEOUT;
    public static int NIN_BALLOONUSERCLICK;
    public static int NFR_ANSI;
    public static int NFR_UNICODE;
    public static int NM_CLICK;
    public static int NM_DBLCLK;
    public static int NM_RCLICK;
    public static int NM_RDBLCLK;
    public static int NM_CUSTOMDRAW;
    public static int NM_RELEASEDCAPTURE;
    public static int OFN_READONLY;
    public static int OFN_OVERWRITEPROMPT;
    public static int OFN_HIDEREADONLY;
    public static int OFN_NOCHANGEDIR;
    public static int OFN_SHOWHELP;
    public static int OFN_ENABLEHOOK;
    public static int OFN_NOVALIDATE;
    public static int OFN_ALLOWMULTISELECT;
    public static int OFN_PATHMUSTEXIST;
    public static int OFN_FILEMUSTEXIST;
    public static int OFN_CREATEPROMPT;
    public static int OFN_EXPLORER;
    public static int OFN_NODEREFERENCELINKS;
    public static int OFN_ENABLESIZING;
    public static int OFN_USESHELLITEM;
    public static int OLEIVERB_PRIMARY;
    public static int OLEIVERB_SHOW;
    public static int OLEIVERB_HIDE;
    public static int OLEIVERB_UIACTIVATE;
    public static int OLEIVERB_INPLACEACTIVATE;
    public static int OLEIVERB_DISCARDUNDOSTATE;
    public static int OLEIVERB_PROPERTIES;
    public static int OLE_E_INVALIDRECT;
    public static int OLE_E_NOCONNECTION;
    public static int OLE_E_PROMPTSAVECANCELLED;
    public static int OLEMISC_RECOMPOSEONRESIZE;
    public static int OLEMISC_INSIDEOUT;
    public static int OLEMISC_ACTIVATEWHENVISIBLE;
    public static int OLEMISC_ACTSLIKEBUTTON;
    public static int OLEMISC_SETCLIENTSITEFIRST;
    public static int ODS_CHECKED;
    public static int ODS_COMBOBOXEDIT;
    public static int ODS_DEFAULT;
    public static int ODS_DISABLED;
    public static int ODS_FOCUS;
    public static int ODS_GRAYED;
    public static int ODS_HOTLIGHT;
    public static int ODS_INACTIVE;
    public static int ODS_NOACCEL;
    public static int ODS_NOFOCUSRECT;
    public static int ODS_SELECTED;
    public static int OLECLOSE_SAVEIFDIRTY;
    public static int OLECLOSE_PROMPTSAVE;
    public static int PDERR_SETUPFAILURE;
    public static int PDERR_PARSEFAILURE;
    public static int PDERR_RETDEFFAILURE;
    public static int PDERR_LOADDRVFAILURE;
    public static int PDERR_GETDEVMODEFAIL;
    public static int PDERR_INITFAILURE;
    public static int PDERR_NODEVICES;
    public static int PDERR_NODEFAULTPRN;
    public static int PDERR_DNDMMISMATCH;
    public static int PDERR_CREATEICFAILURE;
    public static int PDERR_PRINTERNOTFOUND;
    public static int PDERR_DEFAULTDIFFERENT;
    public static int PD_ALLPAGES;
    public static int PD_SELECTION;
    public static int PD_PAGENUMS;
    public static int PD_NOSELECTION;
    public static int PD_NOPAGENUMS;
    public static int PD_COLLATE;
    public static int PD_PRINTTOFILE;
    public static int PD_PRINTSETUP;
    public static int PD_NOWARNING;
    public static int PD_RETURNDC;
    public static int PD_RETURNIC;
    public static int PD_RETURNDEFAULT;
    public static int PD_SHOWHELP;
    public static int PD_ENABLEPRINTHOOK;
    public static int PD_ENABLESETUPHOOK;
    public static int PD_ENABLEPRINTTEMPLATE;
    public static int PD_ENABLESETUPTEMPLATE;
    public static int PD_ENABLEPRINTTEMPLATEHANDLE;
    public static int PD_ENABLESETUPTEMPLATEHANDLE;
    public static int PD_USEDEVMODECOPIES;
    public static int PD_USEDEVMODECOPIESANDCOLLATE;
    public static int PD_DISABLEPRINTTOFILE;
    public static int PD_HIDEPRINTTOFILE;
    public static int PD_NONETWORKBUTTON;
    public static int PD_CURRENTPAGE;
    public static int PD_NOCURRENTPAGE;
    public static int PD_EXCLUSIONFLAGS;
    public static int PD_USELARGETEMPLATE;
    public static int PSD_MINMARGINS;
    public static int PSD_MARGINS;
    public static int PSD_INHUNDREDTHSOFMILLIMETERS;
    public static int PSD_DISABLEMARGINS;
    public static int PSD_DISABLEPRINTER;
    public static int PSD_DISABLEORIENTATION;
    public static int PSD_DISABLEPAPER;
    public static int PSD_SHOWHELP;
    public static int PSD_ENABLEPAGESETUPHOOK;
    public static int PSD_NONETWORKBUTTON;
    public static int PS_SOLID;
    public static int PS_DOT;
    public static int PRF_CHECKVISIBLE;
    public static int PRF_NONCLIENT;
    public static int PRF_CLIENT;
    public static int PRF_ERASEBKGND;
    public static int PRF_CHILDREN;
    public static int PM_NOREMOVE;
    public static int PM_REMOVE;
    public static int PM_NOYIELD;
    public static int PBM_SETRANGE;
    public static int PBM_SETPOS;
    public static int PBM_SETSTEP;
    public static int PBM_SETRANGE32;
    public static int PBM_SETBARCOLOR;
    public static int PBM_SETMARQUEE;
    public static int PBM_SETBKCOLOR;
    public static int PSM_SETTITLEA;
    public static int PSM_SETTITLEW;
    public static int PSM_SETFINISHTEXTA;
    public static int PSM_SETFINISHTEXTW;
    public static int PATCOPY;
    public static int PATINVERT;
    public static int PBS_SMOOTH;
    public static int PBS_MARQUEE;
    public static int QS_KEY;
    public static int QS_MOUSEMOVE;
    public static int QS_MOUSEBUTTON;
    public static int QS_POSTMESSAGE;
    public static int QS_TIMER;
    public static int QS_PAINT;
    public static int QS_SENDMESSAGE;
    public static int QS_HOTKEY;
    public static int QS_ALLPOSTMESSAGE;
    public static int QS_MOUSE;
    public static int QS_INPUT;
    public static int QS_ALLEVENTS;
    public static int QS_ALLINPUT;
    public static int MWMO_INPUTAVAILABLE;
    public static int RECO_DROP;
    public static int RPC_E_CHANGED_MODE;
    public static int RPC_E_CANTCALLOUT_ININPUTSYNCCALL;
    public static int RDW_INVALIDATE;
    public static int RDW_ERASE;
    public static int RDW_ALLCHILDREN;
    public static int RDW_ERASENOW;
    public static int RDW_UPDATENOW;
    public static int RDW_FRAME;
    public static int RB_INSERTBANDA;
    public static int RB_INSERTBANDW;
    public static int stc4;
    public static int STARTF_USESHOWWINDOW;
    public static int SB_HORZ;
    public static int SB_VERT;
    public static int SB_CTL;
    public static int SB_LINEUP;
    public static int SB_LINELEFT;
    public static int SB_LINEDOWN;
    public static int SB_LINERIGHT;
    public static int SB_PAGEUP;
    public static int SB_PAGELEFT;
    public static int SB_PAGEDOWN;
    public static int SB_PAGERIGHT;
    public static int SB_THUMBPOSITION;
    public static int SB_THUMBTRACK;
    public static int SB_LEFT;
    public static int SB_RIGHT;
    public static int SB_ENDSCROLL;
    public static int SB_TOP;
    public static int SB_BOTTOM;
    public static int SIZE_RESTORED;
    public static int SIZE_MAXIMIZED;
    public static int ESB_ENABLE_BOTH;
    public static int ESB_DISABLE_BOTH;
    public static int SORT_DEFAULT;
    public static int SUBLANG_DEFAULT;
    public static int SW_HIDE;
    public static int SW_NORMAL;
    public static int SW_SHOWMINIMIZED;
    public static int SW_SHOWMAXIMIZED;
    public static int SW_MAXIMIZE;
    public static int SW_SHOWNOACTIVATE;
    public static int SW_SHOW;
    public static int SW_MINIMIZE;
    public static int SW_SHOWMINNOACTIVE;
    public static int SW_SHOWNA;
    public static int SW_RESTORE;
    public static int SW_MAX;
    public static int SWP_NOSIZE;
    public static int SWP_NOMOVE;
    public static int SWP_NOZORDER;
    public static int SWP_NOACTIVATE;
    public static int SWP_SHOWWINDOW;
    public static int SWP_HIDEWINDOW;
    public static int SWP_DRAWFRAME;
    public static int SWP_NOOWNERZORDER;
    public static int HLP_FILE;
    public static int HLP_KEYWORD;
    public static int HLP_NAVIGATOR;
    public static int HLP_OBJECT;
    public static int SW_SCROLLCHILDREN;
    public static int SW_INVALIDATE;
    public static int SW_ERASE;
    public static int SW_SMOOTHSCROLL;
    public static int SC_SIZE;
    public static int SC_MINIMIZE;
    public static int SC_MAXIMIZE;
    public static int SC_CLOSE;
    public static int SC_KEYMENU;
    public static int SC_RESTORE;
    public static int SC_MOVE;
    public static int SC_CONTEXTHELP;
    public static int SS_LEFT;
    public static int SS_CENTER;
    public static int SS_RIGHT;
    public static int SS_OWNERDRAW;
    public static int SS_NOPREFIX;
    public static int SS_SUNKEN;
    public static int SBS_HORZ;
    public static int SBS_VERT;
    public static int SIF_RANGE;
    public static int SIF_PAGE;
    public static int SIF_POS;
    public static int SIF_TRACKPOS;
    public static int SIF_ALL;
    public static int SPI_GETFONTSMOOTHING;
    public static int SPI_GETDROPSHADOW;
    public static int SPI_GETFLATMENU;
    public static int SPI_GETFONTSMOOTHINGTYPE;
    public static int SPI_GETFONTSMOOTHINGCONTRAST;
    public static int SPI_ICONHORIZONTALSPACING;
    public static int SPI_ICONVERTICALSPACING;
    public static int SPI_GETICONTITLEWRAP;
    public static int SPI_GETKEYBOARDCUES;
    public static int SPI_GETKEYBOARDDELAY;
    public static int SPI_GETKEYBOARDPREF;
    public static int SPI_GETKEYBOARDSPEED;
    public static int SPI_GETMOUSEHOVERWIDTH;
    public static int SPI_GETMOUSEHOVERHEIGHT;
    public static int SPI_GETMOUSEHOVERTIME;
    public static int SPI_GETMOUSESPEED;
    public static int SPI_GETMENUDROPALIGNMENT;
    public static int SPI_GETMENUFADE;
    public static int SPI_GETMENUSHOWDELAY;
    public static int SPI_GETCOMBOBOXANIMATION;
    public static int SPI_GETGRADIENTCAPTIONS;
    public static int SPI_GETHOTTRACKING;
    public static int SPI_GETLISTBOXSMOOTHSCROLLING;
    public static int SPI_GETMENUANIMATION;
    public static int SPI_GETSELECTIONFADE;
    public static int SPI_GETTOOLTIPANIMATION;
    public static int SPI_GETUIEFFECTS;
    public static int SPI_GETACTIVEWINDOWTRACKING;
    public static int SPI_GETACTIVEWNDTRKTIMEOUT;
    public static int SPI_GETANIMATION;
    public static int SPI_GETBORDER;
    public static int SPI_GETCARETWIDTH;
    public static int SPI_GETDRAGFULLWINDOWS;
    public static int SPI_GETNONCLIENTMETRICS;
    public static int SPI_GETWORKAREA;
    public static int SPI_GETHIGHCONTRAST;
    public static int SPI_GETDEFAULTINPUTLANG;
    public static int SPI_GETSNAPTODEFBUTTON;
    public static int SPI_GETWHEELSCROLLLINES;
    public static int SBARS_SIZEGRIP;
    public static int SB_SETTEXT;
    public static int SB_GETTEXT;
    public static int SB_GETTEXTLENGTH;
    public static int SB_SETPARTS;
    public static int SB_SIMPLE;
    public static int SB_GETRECT;
    public static int SB_SETICON;
    public static int SB_SETTIPTEXT;
    public static int SB_GETTIPTEXT;
    public static int SBT_OWNERDRAW;
    public static int SBT_NOBORDERS;
    public static int SBT_POPOUT;
    public static int SBT_RTLREADING;
    public static int SRCCOPY;
    public static int S_OK;
    public static int S_FALSE;
    public static int TRANSPARENT;
    public static int OPAQUE;
    public static int TME_HOVER;
    public static int TME_LEAVE;
    public static int TPM_LEFTBUTTON;
    public static int TPM_RIGHTBUTTON;
    public static int TPM_LEFTALIGN;
    public static int TPM_RIGHTALIGN;
    public static int TPM_VERTICAL;
    public static int TV_FIRST;
    public static int TBSTATE_CHECKED;
    public static int TBSTATE_ENABLED;
    public static int TBSTATE_HIDDEN;
    public static int TBSTATE_INDETERMINATE;
    public static int TBSTYLE_BUTTON;
    public static int TBSTYLE_SEP;
    public static int TBSTYLE_CHECK;
    public static int TBSTYLE_DROPDOWN;
    public static int TBSTYLE_TOOLTIPS;
    public static int TBSTYLE_FLAT;
    public static int TBSTYLE_LIST;
    public static int TBSTYLE_EX_DRAWDDARROWS;
    public static int TB_ENABLEBUTTON;
    public static int TB_ISBUTTONCHECKED;
    public static int TB_ISBUTTONINDETERMINATE;
    public static int TB_ADDBUTTONS;
    public static int TB_INSERTBUTTON;
    public static int TB_DELETEBUTTON;
    public static int TB_GETBUTTON;
    public static int TB_SAVERESTORE;
    public static int TB_ADDSTRING;
    public static int TB_BUTTONSTRUCTSIZE;
    public static int TB_SETBUTTONSIZE;
    public static int TB_AUTOSIZE;
    public static int TB_GETROWS;
    public static int TB_GETBUTTONTEXT;
    public static int TB_SETIMAGELIST;
    public static int TB_GETRECT;
    public static int TB_GETBUTTONSIZE;
    public static int TB_GETBUTTONINFO;
    public static int TB_SETBUTTONINFO;
    public static int TB_SETEXTENDEDSTYLE;
    public static int TB_MAPACCELERATOR;
    public static int TB_GETTOOLTIPS;
    public static int TB_SETTOOLTIPS;
    public static int TBIF_IMAGE;
    public static int TBIF_TEXT;
    public static int TBIF_STATE;
    public static int TBIF_STYLE;
    public static int TBIF_COMMAND;
    public static int TBIF_SIZE;
    public static int TBN_GETBUTTONINFO;
    public static int TBN_QUERYINSERT;
    public static int TBN_DROPDOWN;
    public static int TBN_HOTITEMCHANGE;
    public static int TBN_GETDISPINFO;
    public static int TBN_GETINFOTIP;
    public static int TTS_ALWAYSTIP;
    public static int TTS_NOPREFIX;
    public static int TTS_NOANIMATE;
    public static int TTS_NOFADE;
    public static int TTS_BALLOON;
    public static int TTI_WARNING;
    public static int TTN_GETDISPINFO;
    public static int TTN_SHOW;
    public static int TTN_POP;
    public static int TTN_NEEDTEXT;
    public static int TBS_AUTOTICKS;
    public static int TBS_VERT;
    public static int TBS_TOP;
    public static int TBS_BOTTOM;
    public static int TBS_BOTH;
    public static int TBS_NOTICKS;
    public static int TBM_GETPOS;
    public static int TBM_SETTIC;
    public static int TBM_SETPOS;
    public static int TBM_SETRANGE;
    public static int TBM_SETRANGEMIN;
    public static int TBM_SETRANGEMAX;
    public static int TBM_SETTICFREQ;
    public static int TBM_SETPAGESIZE;
    public static int TBM_SETLINESIZE;
    public static int TB_LINEUP;
    public static int TB_LINEDOWN;
    public static int TB_PAGEUP;
    public static int TB_PAGEDOWN;
    public static int TB_THUMBPOSITION;
    public static int TB_THUMBTRACK;
    public static int TB_TOP;
    public static int TB_BOTTOM;
    public static int TB_ENDTRACK;
    public static int TVS_HASBUTTONS;
    public static int TVS_HASLINES;
    public static int TVS_LINESATROOT;
    public static int TVS_EDITLABELS;
    public static int TVS_SHOWSELALWAYS;
    public static int TVS_RTLREADING;
    public static int TVS_CHECKBOXES;
    public static int TVS_TRACKSELECT;
    public static int TVS_FULLROWSELECT;
    public static int TVS_NONEVENHEIGHT;
    public static int TVS_INFOTIP;
    public static int TVS_NOTOOLTIPS;
    public static int TVIF_TEXT;
    public static int TVIF_IMAGE;
    public static int TVIF_PARAM;
    public static int TVIF_STATE;
    public static int TVIF_HANDLE;
    public static int TVIF_SELECTEDIMAGE;
    public static int TVIS_SELECTED;
    public static int TVIS_EXPANDED;
    public static int TVIS_EXPANDEDONCE;
    public static int TVIS_STATEIMAGEMASK;
    public static int TVI_ROOT;
    public static int TVI_FIRST;
    public static int TVM_INSERTITEM;
    public static int TVM_DELETEITEM;
    public static int TVM_EXPAND;
    public static int TVE_COLLAPSE;
    public static int TVE_EXPAND;
    public static int TVM_GETITEMRECT;
    public static int TVM_GETINDENT;
    public static int TVM_SETINDENT;
    public static int TVM_GETIMAGELIST;
    public static int TVM_SETIMAGELIST;
    public static int TVM_GETNEXTITEM;
    public static int TVGN_NEXT;
    public static int TVGN_PREVIOUS;
    public static int TVGN_FIRSTVISIBLE;
    public static int TVGN_NEXTVISIBLE;
    public static int TVGN_PREVIOUSVISIBLE;
    public static int TVGN_DROPHILITE;
    public static int TVGN_CARET;
    public static int TVM_SELECTITEM;
    public static int TVM_GETITEM;
    public static int TVM_SETITEM;
    public static int TVM_EDITLABEL;
    public static int TVM_GETEDITCONTROL;
    public static int TVM_GETVISIBLECOUNT;
    public static int TVM_HITTEST;
    public static int TVM_ENSUREVISIBLE;
    public static int TVM_ENDEDITLABELNOW;
    public static int TVM_GETISEARCHSTRING;
    public static int TVM_SETITEMHEIGHT;
    public static int TVM_GETITEMHEIGHT;
    public static int TVN_SELCHANGING;
    public static int TVN_GETINFOTIP;
    public static int TVN_SELCHANGED;
    public static int TVC_UNKNOWN;
    public static int TVC_BYMOUSE;
    public static int TVC_BYKEYBOARD;
    public static int TVN_GETDISPINFO;
    public static int TVN_SETDISPINFO;
    public static int TVN_ITEMEXPANDING;
    public static int TVN_ITEMEXPANDED;
    public static int TVN_BEGINDRAG;
    public static int TVN_BEGINRDRAG;
    public static int TVN_BEGINLABELEDIT;
    public static int TVN_ENDLABELEDIT;
    public static int TCS_BOTTOM;
    public static int TCS_RIGHT;
    public static int TCS_FLATBUTTONS;
    public static int TCS_HOTTRACK;
    public static int TCS_VERTICAL;
    public static int TCS_TABS;
    public static int TCS_BUTTONS;
    public static int TCS_MULTILINE;
    public static int TCS_RIGHTJUSTIFY;
    public static int TCS_FIXEDWIDTH;
    public static int TCS_RAGGEDRIGHT;
    public static int TCS_OWNERDRAWFIXED;
    public static int TCS_TOOLTIPS;
    public static int TCM_SETIMAGELIST;
    public static int TCIF_TEXT;
    public static int TCIF_IMAGE;
    public static int TCM_GETITEM;
    public static int TCM_SETITEM;
    public static int TCM_INSERTITEM;
    public static int TCM_DELETEITEM;
    public static int TCM_DELETEALLITEMS;
    public static int TCM_GETITEMRECT;
    public static int TCM_GETCURSEL;
    public static int TCM_SETCURSEL;
    public static int TCM_ADJUSTRECT;
    public static int TCM_SETITEMSIZE;
    public static int TCM_SETPADDING;
    public static int TCM_GETROWCOUNT;
    public static int TCM_GETTOOLTIPS;
    public static int TCM_SETTOOLTIPS;
    public static int TCN_SELCHANGE;
    public static int TCN_SELCHANGING;
    public static int TBSTYLE_WRAPPABLE;
    public static int TVM_SETBKCOLOR;
    public static int TVM_SETTEXTCOLOR;
    public static int TYMED_NULL;
    public static int TVM_GETLINECOLOR;
    public static int TVM_SETLINECOLOR;
    public static int TVM_SETTOOLTIPS;
    public static int TVSIL_STATE;
    public static int TVM_SORTCHILDRENCB;
    public static int TMPF_FIXED_PITCH;
    public static int TVHT_NOWHERE;
    public static int TVHT_ONITEMICON;
    public static int TVHT_ONITEMLABEL;
    public static int TVHT_ONITEM;
    public static int TVHT_ONITEMINDENT;
    public static int TVHT_ONITEMBUTTON;
    public static int TVHT_ONITEMRIGHT;
    public static int TVHT_ONITEMSTATEICON;
    public static int TVHT_ABOVE;
    public static int TVHT_BELOW;
    public static int TVHT_TORIGHT;
    public static int TVHT_TOLEFT;
    public static int UIS_SET;
    public static int UIS_CLEAR;
    public static int UIS_INITIALIZE;
    public static int UISF_HIDEFOCUS;
    public static int UISF_HIDEACCEL;
    public static int USERCLASSTYPE_FULL;
    public static int USERCLASSTYPE_SHORT;
    public static int USERCLASSTYPE_APPNAME;
    public static int UOI_FLAGS;
    public static int VIEW_E_DRAW;
    public static int VK_PRIOR;
    public static int VK_NEXT;
    public static int VK_LEFT;
    public static int VK_UP;
    public static int VK_RIGHT;
    public static int VK_DOWN;
    public static int VK_TAB;
    public static int VK_SHIFT;
    public static int VK_CONTROL;
    public static int VK_MENU;
    public static int VK_CAPITAL;
    public static int VK_KANA;
    public static int VK_ESCAPE;
    public static int VK_END;
    public static int VK_HOME;
    public static int VK_NUMLOCK;
    public static int VK_SCROLL;
    public static int VK_INSERT;
    public static int VK_DELETE;
    public static int WH_JOURNALPLAYBACK;
    public static int WH_GETMESSAGE;
    public static int WH_MOUSE;
    public static int WSF_VISIBLE;
    public static int WA_INACTIVE;
    public static int WA_ACTIVE;
    public static int WA_CLICKACTIVE;
    public static int WS_OVERLAPPED;
    public static int WS_POPUP;
    public static int WS_CHILD;
    public static int WS_MINIMIZE;
    public static int WS_VISIBLE;
    public static int WS_DISABLED;
    public static int WS_CLIPSIBLINGS;
    public static int WS_CLIPCHILDREN;
    public static int WS_MAXIMIZE;
    public static int WS_CAPTION;
    public static int WS_BORDER;
    public static int WS_DLGFRAME;
    public static int WS_VSCROLL;
    public static int WS_HSCROLL;
    public static int WS_SYSMENU;
    public static int WS_THICKFRAME;
    public static int WS_TABSTOP;
    public static int WS_MINIMIZEBOX;
    public static int WS_MAXIMIZEBOX;
    public static int WS_EX_DLGMODALFRAME;
    public static int WS_EX_MDICHILD;
    public static int WS_EX_TOOLWINDOW;
    public static int WS_EX_CLIENTEDGE;
    public static int WS_EX_CONTEXTHELP;
    public static int WS_EX_RIGHT;
    public static int WS_EX_LEFT;
    public static int WS_EX_RTLREADING;
    public static int WS_EX_LEFTSCROLLBAR;
    public static int WS_EX_CONTROLPARENT;
    public static int WS_EX_STATICEDGE;
    public static int WS_EX_APPWINDOW;
    public static int WS_EX_LAYERED;
    public static int WS_EX_TOPMOST;
    public static int WS_EX_LAYOUTRTL;
    public static int WS_EX_NOINHERITLAYOUT;
    public static int WPF_SETMINPOSITION;
    public static int WHEEL_DELTA;
    public static int IMN_OPENSTATUSWINDOW;
    public static int IMN_SETCONVERSIONMODE;
    public static int IMN_SETOPENSTATUS;
    public static int START_PAGE_GENERAL;
    public static int PD_RESULT_CANCEL;
    public static int PD_RESULT_PRINT;
    public static int PD_RESULT_APPLY;
    private static int wmMouseEnterMessage;
    private static int wmUnSubclass;
    public static int XBUTTON1;
    public static int XBUTTON2;
    public static string TOOLTIPS_CLASS;
    public static string WC_DATETIMEPICK;
    public static string WC_LISTVIEW;
    public static string WC_MONTHCAL;
    public static string WC_PROGRESS;
    public static string WC_STATUSBAR;
    public static string WC_TOOLBAR;
    public static string WC_TRACKBAR;
    public static string WC_TREEVIEW;
    public static string WC_TABCONTROL;
    public static string MSH_MOUSEWHEEL;
    public static string MSH_SCROLL_LINES;
    public static int CHILDID_SELF;
    public static int OBJID_QUERYCLASSNAMEIDX;
    public static int OBJID_CLIENT;
    public static int OBJID_WINDOW;
    public static int UiaRootObjectId;
    public static int UiaAppendRuntimeId;
    public static string uuid_IAccessible;
    public static string uuid_IEnumVariant;
    public static string WinFormFrameworkId;
    public static int HH_FTS_DEFAULT_PROXIMITY;
    public static int HICF_OTHER;
    public static int HICF_MOUSE;
    public static int HICF_ARROWKEYS;
    public static int HICF_ACCELERATOR;
    public static int HICF_DUPACCEL;
    public static int HICF_ENTERING;
    public static int HICF_LEAVING;
    public static int HICF_RESELECT;
    public static int HICF_LMOUSE;
    public static int HICF_TOGGLEDROPDOWN;
    public static int INPUT_MOUSE;
    public static int DPI_AWARENESS_CONTEXT_UNAWARE;
    public static int DPI_AWARENESS_CONTEXT_SYSTEM_AWARE;
    public static int DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE;
    public static int DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2;
    public static int DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED;
    public static int STAP_ALLOW_NONCLIENT;
    public static int STAP_ALLOW_CONTROLS;
    public static int STAP_ALLOW_WEBCONTENT;
    public static int PS_NULL;
    public static int PS_INSIDEFRAME;
    public static int PS_GEOMETRIC;
    public static int PS_ENDCAP_SQUARE;
    public static int WS_EX_TRANSPARENT;
    public static int NULL_BRUSH;
    public static int MM_HIMETRIC;
    public static UInt32 STILL_ACTIVE;
    internal static int UIA_InvokePatternId;
    internal static int UIA_SelectionPatternId;
    internal static int UIA_ValuePatternId;
    internal static int UIA_RangeValuePatternId;
    internal static int UIA_ScrollPatternId;
    internal static int UIA_ExpandCollapsePatternId;
    internal static int UIA_GridPatternId;
    internal static int UIA_GridItemPatternId;
    internal static int UIA_MultipleViewPatternId;
    internal static int UIA_WindowPatternId;
    internal static int UIA_SelectionItemPatternId;
    internal static int UIA_DockPatternId;
    internal static int UIA_TablePatternId;
    internal static int UIA_TableItemPatternId;
    internal static int UIA_TextPatternId;
    internal static int UIA_TogglePatternId;
    internal static int UIA_TransformPatternId;
    internal static int UIA_ScrollItemPatternId;
    internal static int UIA_LegacyIAccessiblePatternId;
    internal static int UIA_ItemContainerPatternId;
    internal static int UIA_VirtualizedItemPatternId;
    internal static int UIA_SynchronizedInputPatternId;
    internal static int UIA_ObjectModelPatternId;
    internal static int UIA_AnnotationPatternId;
    internal static int UIA_TextPattern2Id;
    internal static int UIA_StylesPatternId;
    internal static int UIA_SpreadsheetPatternId;
    internal static int UIA_SpreadsheetItemPatternId;
    internal static int UIA_TransformPattern2Id;
    internal static int UIA_TextChildPatternId;
    internal static int UIA_DragPatternId;
    internal static int UIA_DropTargetPatternId;
    internal static int UIA_TextEditPatternId;
    internal static int UIA_CustomNavigationPatternId;
    internal static int UIA_ToolTipOpenedEventId;
    internal static int UIA_ToolTipClosedEventId;
    internal static int UIA_StructureChangedEventId;
    internal static int UIA_MenuOpenedEventId;
    internal static int UIA_AutomationPropertyChangedEventId;
    internal static int UIA_AutomationFocusChangedEventId;
    internal static int UIA_AsyncContentLoadedEventId;
    internal static int UIA_MenuClosedEventId;
    internal static int UIA_LayoutInvalidatedEventId;
    internal static int UIA_Invoke_InvokedEventId;
    internal static int UIA_SelectionItem_ElementAddedToSelectionEventId;
    internal static int UIA_SelectionItem_ElementRemovedFromSelectionEventId;
    internal static int UIA_SelectionItem_ElementSelectedEventId;
    internal static int UIA_Selection_InvalidatedEventId;
    internal static int UIA_Text_TextSelectionChangedEventId;
    internal static int UIA_Text_TextChangedEventId;
    internal static int UIA_Window_WindowOpenedEventId;
    internal static int UIA_Window_WindowClosedEventId;
    internal static int UIA_MenuModeStartEventId;
    internal static int UIA_MenuModeEndEventId;
    internal static int UIA_InputReachedTargetEventId;
    internal static int UIA_InputReachedOtherElementEventId;
    internal static int UIA_InputDiscardedEventId;
    internal static int UIA_SystemAlertEventId;
    internal static int UIA_LiveRegionChangedEventId;
    internal static int UIA_HostedFragmentRootsInvalidatedEventId;
    internal static int UIA_Drag_DragStartEventId;
    internal static int UIA_Drag_DragCancelEventId;
    internal static int UIA_Drag_DragCompleteEventId;
    internal static int UIA_DropTarget_DragEnterEventId;
    internal static int UIA_DropTarget_DragLeaveEventId;
    internal static int UIA_DropTarget_DroppedEventId;
    internal static int UIA_TextEdit_TextChangedEventId;
    internal static int UIA_TextEdit_ConversionTargetChangedEventId;
    internal static int UIA_ChangesEventId;
    internal static int UIA_RuntimeIdPropertyId;
    internal static int UIA_BoundingRectanglePropertyId;
    internal static int UIA_ProcessIdPropertyId;
    internal static int UIA_ControlTypePropertyId;
    internal static int UIA_LocalizedControlTypePropertyId;
    internal static int UIA_NamePropertyId;
    internal static int UIA_AcceleratorKeyPropertyId;
    internal static int UIA_AccessKeyPropertyId;
    internal static int UIA_HasKeyboardFocusPropertyId;
    internal static int UIA_IsKeyboardFocusablePropertyId;
    internal static int UIA_IsEnabledPropertyId;
    internal static int UIA_AutomationIdPropertyId;
    internal static int UIA_ClassNamePropertyId;
    internal static int UIA_HelpTextPropertyId;
    internal static int UIA_ClickablePointPropertyId;
    internal static int UIA_CulturePropertyId;
    internal static int UIA_IsControlElementPropertyId;
    internal static int UIA_IsContentElementPropertyId;
    internal static int UIA_LabeledByPropertyId;
    internal static int UIA_IsPasswordPropertyId;
    internal static int UIA_NativeWindowHandlePropertyId;
    internal static int UIA_ItemTypePropertyId;
    internal static int UIA_IsOffscreenPropertyId;
    internal static int UIA_OrientationPropertyId;
    internal static int UIA_FrameworkIdPropertyId;
    internal static int UIA_IsRequiredForFormPropertyId;
    internal static int UIA_ItemStatusPropertyId;
    internal static int UIA_IsDockPatternAvailablePropertyId;
    internal static int UIA_IsExpandCollapsePatternAvailablePropertyId;
    internal static int UIA_IsGridItemPatternAvailablePropertyId;
    internal static int UIA_IsGridPatternAvailablePropertyId;
    internal static int UIA_IsInvokePatternAvailablePropertyId;
    internal static int UIA_IsMultipleViewPatternAvailablePropertyId;
    internal static int UIA_IsRangeValuePatternAvailablePropertyId;
    internal static int UIA_IsScrollPatternAvailablePropertyId;
    internal static int UIA_IsScrollItemPatternAvailablePropertyId;
    internal static int UIA_IsSelectionItemPatternAvailablePropertyId;
    internal static int UIA_IsSelectionPatternAvailablePropertyId;
    internal static int UIA_IsTablePatternAvailablePropertyId;
    internal static int UIA_IsTableItemPatternAvailablePropertyId;
    internal static int UIA_IsTextPatternAvailablePropertyId;
    internal static int UIA_IsTogglePatternAvailablePropertyId;
    internal static int UIA_IsTransformPatternAvailablePropertyId;
    internal static int UIA_IsValuePatternAvailablePropertyId;
    internal static int UIA_IsWindowPatternAvailablePropertyId;
    internal static int UIA_ValueValuePropertyId;
    internal static int UIA_ValueIsReadOnlyPropertyId;
    internal static int UIA_RangeValueValuePropertyId;
    internal static int UIA_RangeValueIsReadOnlyPropertyId;
    internal static int UIA_RangeValueMinimumPropertyId;
    internal static int UIA_RangeValueMaximumPropertyId;
    internal static int UIA_RangeValueLargeChangePropertyId;
    internal static int UIA_RangeValueSmallChangePropertyId;
    internal static int UIA_ScrollHorizontalScrollPercentPropertyId;
    internal static int UIA_ScrollHorizontalViewSizePropertyId;
    internal static int UIA_ScrollVerticalScrollPercentPropertyId;
    internal static int UIA_ScrollVerticalViewSizePropertyId;
    internal static int UIA_ScrollHorizontallyScrollablePropertyId;
    internal static int UIA_ScrollVerticallyScrollablePropertyId;
    internal static int UIA_SelectionSelectionPropertyId;
    internal static int UIA_SelectionCanSelectMultiplePropertyId;
    internal static int UIA_SelectionIsSelectionRequiredPropertyId;
    internal static int UIA_GridRowCountPropertyId;
    internal static int UIA_GridColumnCountPropertyId;
    internal static int UIA_GridItemRowPropertyId;
    internal static int UIA_GridItemColumnPropertyId;
    internal static int UIA_GridItemRowSpanPropertyId;
    internal static int UIA_GridItemColumnSpanPropertyId;
    internal static int UIA_GridItemContainingGridPropertyId;
    internal static int UIA_DockDockPositionPropertyId;
    internal static int UIA_ExpandCollapseExpandCollapseStatePropertyId;
    internal static int UIA_MultipleViewCurrentViewPropertyId;
    internal static int UIA_MultipleViewSupportedViewsPropertyId;
    internal static int UIA_WindowCanMaximizePropertyId;
    internal static int UIA_WindowCanMinimizePropertyId;
    internal static int UIA_WindowWindowVisualStatePropertyId;
    internal static int UIA_WindowWindowInteractionStatePropertyId;
    internal static int UIA_WindowIsModalPropertyId;
    internal static int UIA_WindowIsTopmostPropertyId;
    internal static int UIA_SelectionItemIsSelectedPropertyId;
    internal static int UIA_SelectionItemSelectionContainerPropertyId;
    internal static int UIA_TableRowHeadersPropertyId;
    internal static int UIA_TableColumnHeadersPropertyId;
    internal static int UIA_TableRowOrColumnMajorPropertyId;
    internal static int UIA_TableItemRowHeaderItemsPropertyId;
    internal static int UIA_TableItemColumnHeaderItemsPropertyId;
    internal static int UIA_ToggleToggleStatePropertyId;
    internal static int UIA_TransformCanMovePropertyId;
    internal static int UIA_TransformCanResizePropertyId;
    internal static int UIA_TransformCanRotatePropertyId;
    internal static int UIA_IsLegacyIAccessiblePatternAvailablePropertyId;
    internal static int UIA_LegacyIAccessibleChildIdPropertyId;
    internal static int UIA_LegacyIAccessibleNamePropertyId;
    internal static int UIA_LegacyIAccessibleValuePropertyId;
    internal static int UIA_LegacyIAccessibleDescriptionPropertyId;
    internal static int UIA_LegacyIAccessibleRolePropertyId;
    internal static int UIA_LegacyIAccessibleStatePropertyId;
    internal static int UIA_LegacyIAccessibleHelpPropertyId;
    internal static int UIA_LegacyIAccessibleKeyboardShortcutPropertyId;
    internal static int UIA_LegacyIAccessibleSelectionPropertyId;
    internal static int UIA_LegacyIAccessibleDefaultActionPropertyId;
    internal static int UIA_AriaRolePropertyId;
    internal static int UIA_AriaPropertiesPropertyId;
    internal static int UIA_IsDataValidForFormPropertyId;
    internal static int UIA_ControllerForPropertyId;
    internal static int UIA_DescribedByPropertyId;
    internal static int UIA_FlowsToPropertyId;
    internal static int UIA_ProviderDescriptionPropertyId;
    internal static int UIA_IsItemContainerPatternAvailablePropertyId;
    internal static int UIA_IsVirtualizedItemPatternAvailablePropertyId;
    internal static int UIA_IsSynchronizedInputPatternAvailablePropertyId;
    internal static int UIA_OptimizeForVisualContentPropertyId;
    internal static int UIA_IsObjectModelPatternAvailablePropertyId;
    internal static int UIA_AnnotationAnnotationTypeIdPropertyId;
    internal static int UIA_AnnotationAnnotationTypeNamePropertyId;
    internal static int UIA_AnnotationAuthorPropertyId;
    internal static int UIA_AnnotationDateTimePropertyId;
    internal static int UIA_AnnotationTargetPropertyId;
    internal static int UIA_IsAnnotationPatternAvailablePropertyId;
    internal static int UIA_IsTextPattern2AvailablePropertyId;
    internal static int UIA_StylesStyleIdPropertyId;
    internal static int UIA_StylesStyleNamePropertyId;
    internal static int UIA_StylesFillColorPropertyId;
    internal static int UIA_StylesFillPatternStylePropertyId;
    internal static int UIA_StylesShapePropertyId;
    internal static int UIA_StylesFillPatternColorPropertyId;
    internal static int UIA_StylesExtendedPropertiesPropertyId;
    internal static int UIA_IsStylesPatternAvailablePropertyId;
    internal static int UIA_IsSpreadsheetPatternAvailablePropertyId;
    internal static int UIA_SpreadsheetItemFormulaPropertyId;
    internal static int UIA_SpreadsheetItemAnnotationObjectsPropertyId;
    internal static int UIA_SpreadsheetItemAnnotationTypesPropertyId;
    internal static int UIA_IsSpreadsheetItemPatternAvailablePropertyId;
    internal static int UIA_Transform2CanZoomPropertyId;
    internal static int UIA_IsTransformPattern2AvailablePropertyId;
    internal static int UIA_LiveSettingPropertyId;
    internal static int UIA_IsTextChildPatternAvailablePropertyId;
    internal static int UIA_IsDragPatternAvailablePropertyId;
    internal static int UIA_DragIsGrabbedPropertyId;
    internal static int UIA_DragDropEffectPropertyId;
    internal static int UIA_DragDropEffectsPropertyId;
    internal static int UIA_IsDropTargetPatternAvailablePropertyId;
    internal static int UIA_DropTargetDropTargetEffectPropertyId;
    internal static int UIA_DropTargetDropTargetEffectsPropertyId;
    internal static int UIA_DragGrabbedItemsPropertyId;
    internal static int UIA_Transform2ZoomLevelPropertyId;
    internal static int UIA_Transform2ZoomMinimumPropertyId;
    internal static int UIA_Transform2ZoomMaximumPropertyId;
    internal static int UIA_FlowsFromPropertyId;
    internal static int UIA_IsTextEditPatternAvailablePropertyId;
    internal static int UIA_IsPeripheralPropertyId;
    internal static int UIA_IsCustomNavigationPatternAvailablePropertyId;
    internal static int UIA_PositionInSetPropertyId;
    internal static int UIA_SizeOfSetPropertyId;
    internal static int UIA_LevelPropertyId;
    internal static int UIA_AnnotationTypesPropertyId;
    internal static int UIA_AnnotationObjectsPropertyId;
    internal static int UIA_LandmarkTypePropertyId;
    internal static int UIA_LocalizedLandmarkTypePropertyId;
    internal static int UIA_FullDescriptionPropertyId;
    internal static int UIA_FillColorPropertyId;
    internal static int UIA_OutlineColorPropertyId;
    internal static int UIA_FillTypePropertyId;
    internal static int UIA_VisualEffectsPropertyId;
    internal static int UIA_OutlineThicknessPropertyId;
    internal static int UIA_CenterPointPropertyId;
    internal static int UIA_RotationPropertyId;
    internal static int UIA_SizePropertyId;
    internal static int UIA_ButtonControlTypeId;
    internal static int UIA_CalendarControlTypeId;
    internal static int UIA_CheckBoxControlTypeId;
    internal static int UIA_ComboBoxControlTypeId;
    internal static int UIA_EditControlTypeId;
    internal static int UIA_HyperlinkControlTypeId;
    internal static int UIA_ImageControlTypeId;
    internal static int UIA_ListItemControlTypeId;
    internal static int UIA_ListControlTypeId;
    internal static int UIA_MenuControlTypeId;
    internal static int UIA_MenuBarControlTypeId;
    internal static int UIA_MenuItemControlTypeId;
    internal static int UIA_ProgressBarControlTypeId;
    internal static int UIA_RadioButtonControlTypeId;
    internal static int UIA_ScrollBarControlTypeId;
    internal static int UIA_SliderControlTypeId;
    internal static int UIA_SpinnerControlTypeId;
    internal static int UIA_StatusBarControlTypeId;
    internal static int UIA_TabControlTypeId;
    internal static int UIA_TabItemControlTypeId;
    internal static int UIA_TextControlTypeId;
    internal static int UIA_ToolBarControlTypeId;
    internal static int UIA_ToolTipControlTypeId;
    internal static int UIA_TreeControlTypeId;
    internal static int UIA_TreeItemControlTypeId;
    internal static int UIA_CustomControlTypeId;
    internal static int UIA_GroupControlTypeId;
    internal static int UIA_ThumbControlTypeId;
    internal static int UIA_DataGridControlTypeId;
    internal static int UIA_DataItemControlTypeId;
    internal static int UIA_DocumentControlTypeId;
    internal static int UIA_SplitButtonControlTypeId;
    internal static int UIA_WindowControlTypeId;
    internal static int UIA_PaneControlTypeId;
    internal static int UIA_HeaderControlTypeId;
    internal static int UIA_HeaderItemControlTypeId;
    internal static int UIA_TableControlTypeId;
    internal static int UIA_TitleBarControlTypeId;
    internal static int UIA_SeparatorControlTypeId;
    internal static int UIA_SemanticZoomControlTypeId;
    internal static int UIA_AppBarControlTypeId;
    public static int WM_MOUSEENTER { get; }
    public static int WM_UIUNSUBCLASS { get; }
    private static NativeMethods();
    public static int MAKELANGID(int primary, int sub);
    public static int MAKELCID(int lgid);
    public static int MAKELCID(int lgid, int sort);
    public static bool Succeeded(int hr);
    public static bool Failed(int hr);
    public static int get_WM_MOUSEENTER();
    public static int get_WM_UIUNSUBCLASS();
    internal static string GetLocalPath(string fileName);
    public static int MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, RECT& rect, int cPoints);
    public static int MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, Point& pt, UInt32 cPoints);
    public static IntPtr WindowFromPoint(int x, int y);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, int wParam, string lParam);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, int wParam, TV_HITTESTINFO lParam);
    public static short GetKeyState(int keyCode);
    public static bool GetUpdateRect(IntPtr hwnd, RECT& rc, bool fErase);
    public static IntPtr GetCursor();
    public static bool GetCursorPos(Point& pt);
    public static IntPtr SetParent(IntPtr hWnd, IntPtr hWndParent);
}
internal static class System.Windows.Forms.OsVersion : object {
    private static RTL_OSVERSIONINFOEX s_versionInfo;
    public static bool IsWindows10_1607OrGreater { get; }
    public static bool IsWindows10_1703OrGreater { get; }
    public static bool IsWindows8_1OrGreater { get; }
    public static bool IsWindows8OrGreater { get; }
    private static OsVersion();
    private static RTL_OSVERSIONINFOEX InitVersion();
    public static bool get_IsWindows10_1607OrGreater();
    public static bool get_IsWindows10_1703OrGreater();
    public static bool get_IsWindows8_1OrGreater();
    public static bool get_IsWindows8OrGreater();
}
internal class System.Windows.Forms.RTLAwareMessageBox : object {
    public static bool IsRTLResources { get; }
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static bool get_IsRTLResources();
}
internal static class System.Windows.Forms.SafeNativeMethods : object {
    internal static int PROCESS_QUERY_INFORMATION;
    public static int SHAutoComplete(HandleRef hwndEdit, int flags);
    public static int OemKeyScan(short wAsciiVal);
    public static int GetSystemPaletteEntries(IntPtr hdc, int iStartIndex, int nEntries, Byte[] lppe);
    public static int GetDIBits(IntPtr hdc, IntPtr hbm, int uStartScan, int cScanLines, Byte[] lpvBits, BITMAPINFO_FLAT& bmi, int uUsage);
    public static int StretchDIBits(HandleRef hdc, int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, Byte[] lpBits, BITMAPINFO_FLAT& lpBitsInfo, int iUsage, int dwRop);
    public static IntPtr CreateCompatibleBitmap(HandleRef hDC, int width, int height);
    public static bool GetScrollInfo(HandleRef hWnd, int fnBar, SCROLLINFO si);
    public static bool IsAccelerator(HandleRef hAccel, int cAccelEntries, MSG& lpMsg, Int16[] lpwCmd);
    public static bool ChooseFont(CHOOSEFONT cf);
    public static int GetBitmapBits(HandleRef hbmp, int cbBuffer, Byte[] lpvBits);
    public static int CommDlgExtendedError();
    public static void SysFreeString(HandleRef bstr);
    public static void OleCreatePropertyFrame(HandleRef hwndOwner, int x, int y, string caption, int objects, Object& pobjs, int pages, HandleRef pClsid, int locale, int reserved1, IntPtr reserved2);
    public static void OleCreatePropertyFrame(HandleRef hwndOwner, int x, int y, string caption, int objects, Object& pobjs, int pages, Guid[] pClsid, int locale, int reserved1, IntPtr reserved2);
    public static void OleCreatePropertyFrame(HandleRef hwndOwner, int x, int y, string caption, int objects, HandleRef lplpobjs, int pages, HandleRef pClsid, int locale, int reserved1, IntPtr reserved2);
    public static int HtmlHelp(HandleRef hwndCaller, string pszFile, int uCommand, int dwData);
    public static int HtmlHelp(HandleRef hwndCaller, string pszFile, int uCommand, string dwData);
    public static int HtmlHelp(HandleRef hwndCaller, string pszFile, int uCommand, HH_POPUP dwData);
    public static int HtmlHelp(HandleRef hwndCaller, string pszFile, int uCommand, HH_FTS_QUERY dwData);
    public static int HtmlHelp(HandleRef hwndCaller, string pszFile, int uCommand, HH_AKLINK dwData);
    public static void VariantInit(HandleRef pObject);
    public static void VariantClear(HandleRef pObject);
    public static bool LineTo(HandleRef hdc, int x, int y);
    public static bool MoveToEx(HandleRef hdc, int x, int y, Point* lppt);
    public static bool Rectangle(HandleRef hdc, int left, int top, int right, int bottom);
    public static bool PatBlt(HandleRef hdc, int left, int top, int width, int height, int rop);
    public static int GetThreadLCID();
    public static int GetMessagePos();
    public static int RegisterClipboardFormat(string format);
    public static int GetClipboardFormatName(int format, StringBuilder lpString, int cchMax);
    public static bool ChooseColor(CHOOSECOLOR cc);
    public static int RegisterWindowMessage(string msg);
    public static IFontDisp OleCreateIFontDispIndirect(FONTDESC fd, Guid& iid);
    public static IntPtr CreateSolidBrush(int crColor);
    public static bool SetWindowExtEx(IntPtr hDC, int x, int y, Size* size);
    public static int FormatMessage(int dwFlags, HandleRef lpSource, int dwMessageId, int dwLanguageId, StringBuilder lpBuffer, int nSize, HandleRef arguments);
    public static void InitCommonControls();
    public static bool InitCommonControlsEx(INITCOMMONCONTROLSEX icc);
    public static IntPtr ImageList_Create(int cx, int cy, int flags, int cInitial, int cGrow);
    public static bool ImageList_Destroy(HandleRef himl);
    public static bool ImageList_Destroy_Native(HandleRef himl);
    public static int ImageList_GetImageCount(HandleRef himl);
    public static int ImageList_Add(HandleRef himl, IntPtr hbmImage, IntPtr hbmMask);
    public static int ImageList_ReplaceIcon(HandleRef himl, int index, HandleRef hicon);
    public static int ImageList_SetBkColor(HandleRef himl, int clrBk);
    public static bool ImageList_Draw(HandleRef himl, int i, HandleRef hdcDst, int x, int y, int fStyle);
    public static bool ImageList_Replace(HandleRef himl, int i, IntPtr hbmImage, IntPtr hbmMask);
    public static bool ImageList_DrawEx(HandleRef himl, int i, HandleRef hdcDst, int x, int y, int dx, int dy, int rgbBk, int rgbFg, int fStyle);
    public static bool ImageList_GetIconSize(HandleRef himl, Int32& x, Int32& y);
    public static IntPtr ImageList_Duplicate(HandleRef himl);
    public static bool ImageList_Remove(HandleRef himl, int i);
    public static bool ImageList_GetImageInfo(HandleRef himl, int i, IMAGEINFO pImageInfo);
    public static IntPtr ImageList_Read(IStream pstm);
    public static bool ImageList_Write(HandleRef himl, IStream pstm);
    public static int ImageList_WriteEx(HandleRef himl, int dwFlags, IStream pstm);
    public static bool TrackPopupMenuEx(HandleRef hmenu, int fuFlags, int x, int y, HandleRef hwnd, TPMPARAMS tpm);
    public static IntPtr GetKeyboardLayout(int dwLayout);
    public static IntPtr ActivateKeyboardLayout(HandleRef hkl, int uFlags);
    public static int GetKeyboardLayoutList(int size, IntPtr[] hkls);
    public static bool EnumDisplaySettings(string lpszDeviceName, int iModeNum, DEVMODE& lpDevMode);
    public static bool GetMonitorInfo(HandleRef hmonitor, MONITORINFOEX info);
    public static IntPtr MonitorFromPoint(Point pt, int flags);
    public static IntPtr MonitorFromRect(RECT& rect, int flags);
    public static IntPtr MonitorFromWindow(HandleRef handle, int flags);
    public static bool EnumDisplayMonitors(HandleRef hdc, COMRECT rcClip, MonitorEnumProc lpfnEnum, IntPtr dwData);
    public static IntPtr CreateHalftonePalette(HandleRef hdc);
    public static int GetPaletteEntries(HandleRef hpal, int iStartIndex, int nEntries, Int32[] lppe);
    public static int GetTextMetricsW(HandleRef hDC, TEXTMETRIC& lptm);
    public static IntPtr CreateDIBSection(HandleRef hdc, HandleRef pbmi, int iUsage, Byte[] ppvBits, IntPtr hSection, int dwOffset);
    public static IntPtr CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, IntPtr lpvBits);
    public static IntPtr CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, Int16[] lpvBits);
    public static IntPtr CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, Byte[] lpvBits);
    public static IntPtr CreatePatternBrush(HandleRef hbmp);
    public static IntPtr CreateBrushIndirect(LOGBRUSH& lb);
    public static IntPtr CreatePen(int nStyle, int nWidth, int crColor);
    public static IntPtr ExtCreatePen(int fnStyle, int dwWidth, LOGBRUSH& lplb, int dwStyleCount, Int32[] lpStyle);
    public static bool SetViewportExtEx(IntPtr hDC, int x, int y, Size* size);
    public static bool GetClipCursor(RECT& lpRect);
    public static IntPtr GetCursor();
    public static bool GetIconInfo(HandleRef hIcon, ICONINFO& info);
    public static int IntersectClipRect(HandleRef hDC, int x1, int y1, int x2, int y2);
    public static IntPtr CopyImage(HandleRef hImage, int uType, int cxDesired, int cyDesired, int fuFlags);
    public static bool AdjustWindowRectEx(RECT& lpRect, int dwStyle, bool bMenu, int dwExStyle);
    public static bool AdjustWindowRectExForDpi(RECT& lpRect, int dwStyle, bool bMenu, int dwExStyle, UInt32 dpi);
    public static int DoDragDrop(IDataObject dataObject, IOleDropSource dropSource, int allowedEffects, Int32[] finalEffect);
    public static IntPtr GetSysColorBrush(int nIndex);
    public static bool EnableWindow(HandleRef hWnd, bool enable);
    public static bool GetClientRect(HandleRef hWnd, RECT& rect);
    public static int GetDoubleClickTime();
    public static bool ValidateRect(HandleRef hWnd, RECT& rect);
    public static bool ValidateRect(IntPtr hwnd, IntPtr prect);
    public static int FillRect(HandleRef hdc, RECT& rect, HandleRef hbrush);
    public static int GetTextColor(HandleRef hDC);
    public static int GetBkColor(HandleRef hDC);
    public static int SetTextColor(HandleRef hDC, int crColor);
    public static int SetBkColor(HandleRef hDC, int clr);
    public static IntPtr SelectPalette(HandleRef hdc, HandleRef hpal, int bForceBackground);
    public static bool SetViewportOrgEx(IntPtr hdc, int x, int y, Point* lppt);
    public static bool SetViewportOrgEx(HandleRef hdc, int x, int y, Point* lppt);
    public static int RealizePalette(HandleRef hDC);
    public static bool LPtoDP(HandleRef hDC, RECT& lpRect, int nCount);
    public static bool SetWindowOrgEx(IntPtr hdc, int x, int y, Point* lppt);
    public static bool GetViewportOrgEx(HandleRef hdc, Point& lppoint);
    public static int SetMapMode(HandleRef hDC, int nMapMode);
    public static bool IsWindowEnabled(HandleRef hWnd);
    public static bool IsWindowVisible(HandleRef hWnd);
    public static bool ReleaseCapture();
    public static int GetCurrentThreadId();
    public static bool EnumWindows(EnumThreadWindowsCallback callback, IntPtr extraData);
    public static int GetWindowThreadProcessId(HandleRef hWnd, Int32& lpdwProcessId);
    public static bool GetExitCodeThread(HandleRef hWnd, Int32& lpdwExitCode);
    public static bool ShowWindow(HandleRef hWnd, int nCmdShow);
    public static bool SetWindowPos(HandleRef hWnd, HandleRef hWndInsertAfter, int x, int y, int cx, int cy, int flags);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int flags);
    private static bool _TrackMouseEvent(TRACKMOUSEEVENT tme);
    public static bool TrackMouseEvent(TRACKMOUSEEVENT tme);
    public static bool RedrawWindow(HandleRef hwnd, RECT& rcUpdate, IntPtr hrgnUpdate, int flags);
    public static bool RedrawWindow(HandleRef hwnd, COMRECT rcUpdate, HandleRef hrgnUpdate, int flags);
    public static bool RedrawWindow(IntPtr hwnd, COMRECT rcUpdate, IntPtr hrgnUpdate, int flags);
    public static bool InvalidateRect(HandleRef hWnd, RECT& rect, bool erase);
    public static bool InvalidateRect(HandleRef hWnd, COMRECT rect, bool erase);
    public static bool InvalidateRgn(HandleRef hWnd, HandleRef hrgn, bool erase);
    public static bool UpdateWindow(HandleRef hWnd);
    public static int GetCurrentProcessId();
    public static int ScrollWindowEx(HandleRef hWnd, int nXAmount, int nYAmount, COMRECT rectScrollRegion, RECT& rectClip, HandleRef hrgnUpdate, RECT& prcUpdate, int flags);
    public static int GetThreadLocale();
    public static bool MessageBeep(int type);
    public static bool DrawMenuBar(HandleRef hWnd);
    public static bool IsChild(HandleRef parent, HandleRef child);
    public static IntPtr SetTimer(HandleRef hWnd, int nIDEvent, int uElapse, IntPtr lpTimerFunc);
    public static bool KillTimer(HandleRef hwnd, int idEvent);
    public static int MessageBox(HandleRef hWnd, string text, string caption, int type);
    public static int GetTickCount();
    public static bool ScrollWindow(HandleRef hWnd, int nXAmount, int nYAmount, RECT& rectScrollRegion, RECT& rectClip);
    public static IntPtr GetCurrentProcess();
    public static IntPtr GetCurrentThread();
    public static bool SetThreadLocale(int Locale);
    public static bool IsWindowUnicode(HandleRef hWnd);
    public static bool DrawEdge(HandleRef hDC, RECT& rect, int edge, int flags);
    public static bool DrawFrameControl(HandleRef hDC, RECT& rect, int type, int state);
    public static int SetROP2(IntPtr hDC, int nDrawMode);
    public static bool DrawIcon(HandleRef hDC, int x, int y, HandleRef hIcon);
    public static bool DrawIconEx(HandleRef hDC, int x, int y, HandleRef hIcon, int width, int height, int iStepIfAniCursor, HandleRef hBrushFlickerFree, int diFlags);
    public static int SetBkMode(HandleRef hDC, int nBkMode);
    public static bool BitBlt(HandleRef hDC, int x, int y, int nWidth, int nHeight, HandleRef hSrcDC, int xSrc, int ySrc, int dwRop);
    public static bool BitBlt(IntPtr hDC, int x, int y, int nWidth, int nHeight, IntPtr hSrcDC, int xSrc, int ySrc, int dwRop);
    public static bool ShowCaret(HandleRef hWnd);
    public static bool HideCaret(HandleRef hWnd);
    public static UInt32 GetCaretBlinkTime();
    public static bool IsAppThemed();
    public static int GetThemeAppProperties();
    public static void SetThemeAppProperties(int Flags);
    public static IntPtr OpenThemeData(HandleRef hwnd, string pszClassList);
    public static int CloseThemeData(HandleRef hTheme);
    public static bool IsThemePartDefined(HandleRef hTheme, int iPartId, int iStateId);
    public static int DrawThemeBackground(HandleRef hTheme, HandleRef hdc, int partId, int stateId, COMRECT pRect, COMRECT pClipRect);
    public static int DrawThemeEdge(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, COMRECT pDestRect, int uEdge, int uFlags, COMRECT pContentRect);
    public static int DrawThemeParentBackground(HandleRef hwnd, HandleRef hdc, COMRECT prc);
    public static int DrawThemeText(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, string pszText, int iCharCount, int dwTextFlags, int dwTextFlags2, COMRECT pRect);
    public static int GetThemeBackgroundContentRect(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, COMRECT pBoundingRect, COMRECT pContentRect);
    public static int GetThemeBackgroundExtent(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, COMRECT pContentRect, COMRECT pExtentRect);
    public static int GetThemeBackgroundRegion(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, COMRECT pRect, IntPtr& pRegion);
    public static int GetThemeBool(HandleRef hTheme, int iPartId, int iStateId, int iPropId, Boolean& pfVal);
    public static int GetThemeColor(HandleRef hTheme, int iPartId, int iStateId, int iPropId, Int32& pColor);
    public static int GetThemeEnumValue(HandleRef hTheme, int iPartId, int iStateId, int iPropId, Int32& piVal);
    public static int GetThemeFilename(HandleRef hTheme, int iPartId, int iStateId, int iPropId, StringBuilder pszThemeFilename, int cchMaxBuffChars);
    public static int GetThemeFont(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, int iPropId, LOGFONTW& pFont);
    public static int GetThemeInt(HandleRef hTheme, int iPartId, int iStateId, int iPropId, Int32& piVal);
    public static int GetThemePartSize(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, COMRECT prc, ThemeSizeType eSize, Size& psz);
    public static int GetThemePosition(HandleRef hTheme, int iPartId, int iStateId, int iPropId, Point& pPoint);
    public static int GetThemeMargins(HandleRef hTheme, HandleRef hDC, int iPartId, int iStateId, int iPropId, COMRECT prc, MARGINS& margins);
    public static int GetThemeString(HandleRef hTheme, int iPartId, int iStateId, int iPropId, StringBuilder pszBuff, int cchMaxBuffChars);
    public static int GetThemeTextExtent(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, string pszText, int iCharCount, int dwTextFlags, COMRECT pBoundingRect, COMRECT pExtentRect);
    public static int GetThemeTextMetrics(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, TextMetrics& ptm);
    public static int HitTestThemeBackground(HandleRef hTheme, HandleRef hdc, int iPartId, int iStateId, int dwOptions, COMRECT pRect, HandleRef hrgn, Point ptTest, UInt16& pwHitTestCode);
    public static bool IsThemeBackgroundPartiallyTransparent(HandleRef hTheme, int iPartId, int iStateId);
    public static bool GetThemeSysBool(HandleRef hTheme, int iBoolId);
    public static int GetThemeSysInt(HandleRef hTheme, int iIntId, Int32& piValue);
    public static IntPtr OpenInputDesktop(int dwFlags, bool fInherit, int dwDesiredAccess);
    public static bool CloseDesktop(IntPtr hDesktop);
    public static bool IsProcessDPIAware();
    public static bool SetProcessDPIAware();
    public static int SetProcessDpiAwareness(PROCESS_DPI_AWARENESS awareness);
    public static int GetProcessDpiAwareness(IntPtr processHandle, PROCESS_DPI_AWARENESS& awareness);
    public static bool IsValidDpiAwarenessContext(int dpiFlag);
    public static bool SetProcessDpiAwarenessContext(int dpiFlag);
    public static IntPtr OpenProcess(UInt32 dwDesiredAccess, bool bInheritHandle, int dwProcessId);
    public static bool RoundRect(HandleRef hDC, int left, int top, int right, int bottom, int width, int height);
    public static int SetWindowTheme(IntPtr hWnd, string subAppName, string subIdList);
    public static int RGBToCOLORREF(int rgbValue);
    public static Color ColorFromCOLORREF(int colorref);
    public static int ColorToCOLORREF(Color color);
}
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsByRefLikeAttribute]
internal class System.Windows.Forms.ScreenDC : ValueType {
    private IntPtr _handle;
    public static ScreenDC Create();
    public static IntPtr op_Implicit(ScreenDC screenDC);
    public void Dispose();
}
[ExtensionAttribute]
internal static class System.Windows.Forms.SpanHelpers : object {
    public static void CopyAndTerminate(ReadOnlySpan`1<char> source, Span`1<char> destination);
    [ExtensionAttribute]
public static ReadOnlySpan`1<char> SliceAtFirstNull(ReadOnlySpan`1<char> span);
    [ExtensionAttribute]
public static Span`1<char> SliceAtFirstNull(Span`1<char> span);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.SRDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal static class System.Windows.Forms.UnsafeNativeMethods : object {
    public static int SMTO_ABORTIFHUNG;
    public static int LAYOUT_RTL;
    public static int LAYOUT_BITMAPORIENTATIONPRESERVED;
    public static Guid guid_IAccessibleEx;
    private static UnsafeNativeMethods();
    internal static UInt32 SHLoadIndirectString(string pszSource, StringBuilder pszOutBuf, UInt32 cchOutBuf, IntPtr ppvReserved);
    public static int GetMessageTime();
    public static int GetClassName(HandleRef hwnd, StringBuilder lpClassName, int nMaxCount);
    public static IntPtr SetClassLong(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    public static IntPtr SetClassLongPtr32(HandleRef hwnd, int nIndex, IntPtr dwNewLong);
    public static IntPtr SetClassLongPtr64(HandleRef hwnd, int nIndex, IntPtr dwNewLong);
    public static IClassFactory2 CoGetClassObject(Guid& clsid, int dwContext, int serverInfo, Guid& refiid);
    public static object CoCreateInstance(Guid& clsid, object punkOuter, int context, Guid& iid);
    public static int GetLocaleInfo(int Locale, int LCType, StringBuilder lpLCData, int cchData);
    public static bool PageSetupDlg(PAGESETUPDLG lppsd);
    public static bool PrintDlg_32(PRINTDLG_32 lppd);
    public static bool PrintDlg_64(PRINTDLG_64 lppd);
    public static bool PrintDlg(PRINTDLG lppd);
    public static int PrintDlgEx(PRINTDLGEX lppdex);
    public static int OleGetClipboard(IDataObject& data);
    public static int OleSetClipboard(IDataObject pDataObj);
    public static int OleFlushClipboard();
    public static void OleCreatePropertyFrameIndirect(OCPFIPARAMS p);
    public static IFont OleCreateIFontIndirect(FONTDESC fd, Guid& iid);
    public static IPicture OleCreateIPictureIndirect(object pictdesc, Guid& iid, bool fOwn);
    public static IPictureDisp OleCreateIPictureDispIndirect(object pictdesc, Guid& iid, bool fOwn);
    public static IPicture OleCreatePictureIndirect(PICTDESC pictdesc, Guid& refiid, bool fOwn);
    public static IFont OleCreateFontIndirect(tagFONTDESC fontdesc, Guid& refiid);
    public static int VarFormat(Object& pvarIn, HandleRef pstrFormat, int iFirstDay, int iFirstWeek, UInt32 dwFlags, IntPtr& pbstr);
    public static int DragQueryFile(HandleRef hDrop, int iFile, StringBuilder lpszFile, int cch);
    public static int DragQueryFileLongPath(HandleRef hDrop, int iFile, StringBuilder lpszFile);
    public static bool EnumChildWindows(HandleRef hwndParent, EnumChildrenCallback lpEnumFunc, HandleRef lParam);
    public static IntPtr ShellExecute_NoBFM(HandleRef hwnd, string lpOperation, string lpFile, string lpParameters, string lpDirectory, int nShowCmd);
    public static int SetScrollPos(HandleRef hWnd, int nBar, int nPos, bool bRedraw);
    public static bool EnableScrollBar(HandleRef hWnd, int nBar, int value);
    public static int Shell_NotifyIcon(int message, NOTIFYICONDATA pnid);
    public static bool InsertMenuItem(HandleRef hMenu, int uItem, bool fByPosition, MENUITEMINFO_T lpmii);
    public static IntPtr GetMenu(HandleRef hWnd);
    public static bool GetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, MENUITEMINFO_T lpmii);
    public static bool GetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, MENUITEMINFO_T_RW lpmii);
    public static bool SetMenuItemInfo(HandleRef hMenu, int uItem, bool fByPosition, MENUITEMINFO_T lpmii);
    public static IntPtr CreateMenu();
    public static bool GetOpenFileName(OPENFILENAME_I ofn);
    public static bool EndDialog(HandleRef hWnd, IntPtr result);
    public static int WideCharToMultiByte(int codePage, int flags, string wideStr, int chars, Byte[] pOutBytes, int bufferBytes, IntPtr defaultChar, IntPtr pDefaultUsed);
    public static void CopyMemory(HandleRef destData, HandleRef srcData, int size);
    public static void CopyMemory(IntPtr pdst, Byte[] psrc, int cb);
    public static void CopyMemoryW(IntPtr pdst, string psrc, int cb);
    public static void CopyMemoryW(IntPtr pdst, Char[] psrc, int cb);
    public static IntPtr DuplicateHandle(HandleRef processSource, HandleRef handleSource, HandleRef processTarget, IntPtr& handleTarget, int desiredAccess, bool inheritHandle, int options);
    public static IntPtr SetWindowsHookEx(int hookid, HookProc pfnhook, HandleRef hinst, int threadid);
    public static int GetKeyboardState(Byte[] keystate);
    public static int SetKeyboardState(Byte[] keystate);
    public static bool UnhookWindowsHookEx(HandleRef hhook);
    public static short GetAsyncKeyState(int vkey);
    public static IntPtr CallNextHookEx(HandleRef hhook, int code, IntPtr wparam, IntPtr lparam);
    public static int ScreenToClient(HandleRef hWnd, Point& pt);
    public static int GetModuleFileName(HandleRef hModule, StringBuilder buffer, int length);
    public static StringBuilder GetModuleFileNameLongPath(HandleRef hModule);
    public static bool IsDialogMessage(HandleRef hWndDlg, MSG& msg);
    public static bool TranslateMessage(MSG& msg);
    public static IntPtr DispatchMessageA(MSG& msg);
    public static IntPtr DispatchMessageW(MSG& msg);
    public static int PostThreadMessage(int id, int msg, IntPtr wparam, IntPtr lparam);
    public static int CoRegisterMessageFilter(HandleRef newFilter, IntPtr& oldMsgFilter);
    public static int OleInitialize(int val);
    public static bool EnumThreadWindows(int dwThreadId, EnumThreadWindowsCallback lpfn, HandleRef lParam);
    public static bool GetExitCodeThread(IntPtr hThread, UInt32& lpExitCode);
    public static IntPtr SendDlgItemMessage(HandleRef hDlg, int nIDDlgItem, int Msg, IntPtr wParam, IntPtr lParam);
    public static int OleUninitialize();
    public static bool GetSaveFileName(OPENFILENAME_I ofn);
    public static IntPtr ChildWindowFromPointEx(IntPtr hwndParent, Point pt, int uFlags);
    public static bool CloseHandle(HandleRef handle);
    public static bool BlockInput(bool fBlockIt);
    public static UInt32 SendInput(UInt32 nInputs, INPUT[] pInputs, int cbSize);
    internal static int SendInput(int nInputs, INPUT& input, int cbSize);
    public static IntPtr GetDCEx(HandleRef hWnd, HandleRef hrgnClip, int flags);
    public static int GetObject(HandleRef hObject, int nSize, BITMAP bm);
    public static int GetObject(HandleRef hObject, int nSize, Int32& nEntries);
    public static IntPtr CreateAcceleratorTable(HandleRef pentries, int cCount);
    public static bool DestroyAcceleratorTable(HandleRef hAccel);
    public static short VkKeyScan(char key);
    public static IntPtr GetCapture();
    public static IntPtr SetCapture(HandleRef hwnd);
    public static IntPtr GetFocus();
    public static bool GetCursorPos(Point& pt);
    public static short GetKeyState(int keyCode);
    public static UInt32 GetShortPathName(string lpszLongPath, StringBuilder lpszShortPath, UInt32 cchBuffer);
    public static int SetWindowRgn(HandleRef hwnd, HandleRef hrgn, bool fRedraw);
    public static void GetTempFileName(string tempDirName, string prefixName, int unique, StringBuilder sb);
    public static IntPtr GlobalAlloc(int uFlags, int dwBytes);
    public static IntPtr GlobalReAlloc(HandleRef handle, int bytes, int flags);
    public static IntPtr GlobalLock(HandleRef handle);
    public static bool GlobalUnlock(HandleRef handle);
    public static IntPtr GlobalFree(HandleRef handle);
    public static int GlobalSize(HandleRef handle);
    public static bool ImmSetConversionStatus(HandleRef hIMC, int conversion, int sentence);
    public static bool ImmGetConversionStatus(HandleRef hIMC, Int32& conversion, Int32& sentence);
    public static IntPtr ImmGetContext(HandleRef hWnd);
    public static bool ImmReleaseContext(HandleRef hWnd, HandleRef hIMC);
    public static IntPtr ImmAssociateContext(HandleRef hWnd, HandleRef hIMC);
    public static IntPtr ImmCreateContext();
    public static bool ImmSetOpenStatus(HandleRef hIMC, bool open);
    public static bool ImmGetOpenStatus(HandleRef hIMC);
    public static bool ImmNotifyIME(HandleRef hIMC, int dwAction, int dwIndex, int dwValue);
    public static IntPtr SetFocus(HandleRef hWnd);
    public static IntPtr GetParent(HandleRef hWnd);
    public static IntPtr GetAncestor(HandleRef hWnd, int flags);
    public static bool IsChild(HandleRef hWndParent, HandleRef hwnd);
    public static bool IsZoomed(HandleRef hWnd);
    public static IntPtr FindWindow(string className, string windowName);
    public static int MapWindowPoints(HandleRef hWndFrom, HandleRef hWndTo, RECT& rect, int cPoints);
    public static int MapWindowPoints(HandleRef hWndFrom, HandleRef hWndTo, Point& pt, UInt32 cPoints);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, bool wParam, int lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, Int32[] lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, Int32[] wParam, Int32[] lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, Int32& wParam, Int32& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, string lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, string lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, StringBuilder lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TBBUTTON& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TBBUTTONINFO& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TV_ITEM& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TV_INSERTSTRUCT& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TV_HITTESTINFO lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVBKIMAGE lParam);
    public static IntPtr SendMessage(IntPtr hwnd, int msg, bool wparam, int lparam);
    public static int SendMessage(HandleRef hWnd, int msg, int wParam, LVHITTESTINFO& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TCITEM_T lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, HDLAYOUT& hdlayout);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, HandleRef wParam, int lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, HandleRef lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, PARAFORMAT lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, CHARFORMATA lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, CHARFORMAT2A lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, CHARFORMATW& lParam);
    public static int SendMessage(HandleRef hWnd, int msg, int wParam, Object& editOle);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, CHARRANGE& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, FINDTEXT lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, TEXTRANGE lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, Point& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, Point& wParam, int lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, EDITSTREAM lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, EDITSTREAM64 lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, GETTEXTLENGTHEX wParam, int lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, Size& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVFINDINFO& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVHITTESTINFO lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVCOLUMN_T lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVITEM& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVCOLUMN lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LVGROUP lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, Point& wParam, LVINSERTMARK lParam);
    public static bool SendMessage(HandleRef hWnd, int msg, int wParam, LVINSERTMARK lParam);
    public static bool SendMessage(HandleRef hWnd, int msg, int wParam, LVTILEVIEWINFO lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, MCHITTESTINFO& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, SYSTEMTIME& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, SYSTEMTIMEARRAY lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, NMSELCHANGE lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, LOGFONTW& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, MSG lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, int wParam, int lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, IntPtr wParam, RECT& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, Int16& wParam, Int16& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, Boolean& wParam, IntPtr lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, int wParam, IntPtr lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, int wParam, RECT& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, int wParam, Rectangle& lParam);
    public static IntPtr SendMessage(HandleRef hWnd, int Msg, IntPtr wParam, ListViewCompareCallback pfnCompare);
    public static IntPtr SendMessageTimeout(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam, int flags, int timeout, IntPtr& pdwResult);
    public static IntPtr SetParent(HandleRef hWnd, HandleRef hWndParent);
    public static bool GetWindowRect(HandleRef hWnd, RECT& rect);
    public static IntPtr GetWindow(HandleRef hWnd, int uCmd);
    public static IntPtr GetWindow(IntPtr hWnd, int uCmd);
    public static IntPtr GetDlgItem(HandleRef hWnd, int nIDDlgItem);
    public static IntPtr DefWindowProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr DefMDIChildProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr CallWindowProc(IntPtr wndProc, IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static bool GetClassInfoW(HandleRef hInstance, string lpClassName, WNDCLASS& lpWndClass);
    public static bool GetTextMetrics(HandleRef hdc, TEXTMETRIC tm);
    private static bool SystemParametersInfoW(UInt32 uiAction, UInt32 uiParam, Void* pvParam, UInt32 fWinIni);
    public static bool SystemParametersInfoW(UInt32 uiAction, RECT& rect);
    public static bool SystemParametersInfoW(UInt32 uiAction, Int32& value);
    public static int SystemParametersInfoInt(UInt32 uiAction);
    public static bool SystemParametersInfoW(UInt32 uiAction, Boolean& value);
    public static bool SystemParametersInfoBool(UInt32 uiAction);
    public static bool SystemParametersInfoW(HIGHCONTRASTW& highContrast);
    public static bool SystemParametersInfoW(NONCLIENTMETRICSW& metrics);
    public static bool SystemParametersInfoForDpi(UInt32 uiAction, UInt32 uiParam, NONCLIENTMETRICSW& pvParam, UInt32 fWinIni, UInt32 dpi);
    public static bool TrySystemParametersInfoForDpi(NONCLIENTMETRICSW& metrics, UInt32 dpi);
    public static bool GetComputerName(StringBuilder lpBuffer, Int32[] nSize);
    public static bool GetUserName(StringBuilder lpBuffer, Int32[] nSize);
    public static IntPtr GetProcessWindowStation();
    public static bool GetUserObjectInformation(HandleRef hObj, int nIndex, USEROBJECTFLAGS& pvBuffer, int nLength, Int32& lpnLengthNeeded);
    public static int ClientToScreen(HandleRef hWnd, Point& lpPoint);
    public static IntPtr GetForegroundWindow();
    public static int MsgWaitForMultipleObjectsEx(int nCount, IntPtr pHandles, int dwMilliseconds, int dwWakeMask, int dwFlags);
    public static IntPtr GetDesktopWindow();
    public static bool PeekMessage(MSG& msg, HandleRef hwnd, int msgMin, int msgMax, int remove);
    public static bool PostMessage(HandleRef hwnd, int msg, IntPtr wparam, IntPtr lparam);
    public static IntPtr LresultFromObject(Guid& refiid, IntPtr wParam, HandleRef pAcc);
    public static IntPtr LresultFromObject(Guid& refiid, IntPtr wParam, IntPtr pAcc);
    public static int CreateStdAccessibleObject(HandleRef hWnd, int objID, Guid& refiid, Object& pAcc);
    public static void NotifyWinEvent(int winEvent, HandleRef hwnd, int objType, int objID);
    public static int GetMenuItemID(HandleRef hMenu, int nPos);
    public static IntPtr GetSubMenu(HandleRef hwnd, int index);
    public static int GetMenuItemCount(HandleRef hMenu);
    public static void GetErrorInfo(int reserved, IErrorInfo& errorInfo);
    private static IntPtr IntBeginPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    public static IntPtr BeginPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    public static IntPtr BeginPaint(IntPtr hWnd, PAINTSTRUCT& lpPaint);
    public static bool EndPaint(HandleRef hWnd, PAINTSTRUCT& lpPaint);
    public static bool EndPaint(IntPtr hWnd, PAINTSTRUCT& lpPaint);
    public static IntPtr GetWindowDC(HandleRef hWnd);
    public static bool SystemParametersInfo(int nAction, int nParam, IntPtr[] rc, int nUpdate);
    public static IntPtr SendCallbackMessage(HandleRef hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    public static void DragAcceptFiles(HandleRef hWnd, bool fAccept);
    public static bool GetScrollInfo(HandleRef hWnd, int fnBar, SCROLLINFO si);
    public static int SetScrollInfo(HandleRef hWnd, int fnBar, SCROLLINFO si, bool redraw);
    public static IntPtr GetActiveWindow();
    public static IntPtr GetWindowLong(HandleRef hWnd, int nIndex);
    public static IntPtr GetWindowLong32(HandleRef hWnd, int nIndex);
    public static IntPtr GetWindowLongPtr64(HandleRef hWnd, int nIndex);
    public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr SetWindowLongPtr32(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, HandleRef dwNewLong);
    public static IntPtr SetWindowLong(HandleRef hWnd, int nIndex, WndProc wndproc);
    public static IntPtr SetWindowLongPtr32(HandleRef hWnd, int nIndex, WndProc wndproc);
    public static IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, WndProc wndproc);
    public static IntPtr CreatePopupMenu();
    public static bool RemoveMenu(HandleRef hMenu, int uPosition, int uFlags);
    public static bool DestroyMenu(HandleRef hMenu);
    public static bool SetForegroundWindow(HandleRef hWnd);
    public static IntPtr GetSystemMenu(HandleRef hWnd, bool bRevert);
    public static IntPtr DefFrameProc(IntPtr hWnd, IntPtr hWndClient, int msg, IntPtr wParam, IntPtr lParam);
    public static bool TranslateMDISysAccel(IntPtr hWndClient, MSG& msg);
    public static bool SetLayeredWindowAttributes(HandleRef hwnd, int crKey, byte bAlpha, int dwFlags);
    public static bool SetMenu(HandleRef hWnd, HandleRef hMenu);
    public static int GetWindowPlacement(HandleRef hWnd, WINDOWPLACEMENT& placement);
    public static void GetStartupInfo(STARTUPINFO_I startupinfo_i);
    public static bool SetMenuDefaultItem(HandleRef hwnd, int nIndex, bool pos);
    public static bool EnableMenuItem(HandleRef hMenu, int UIDEnabledItem, int uEnable);
    public static IntPtr SetActiveWindow(HandleRef hWnd);
    public static IntPtr CreateIC(string lpszDriverName, string lpszDeviceName, string lpszOutput, HandleRef lpInitData);
    public static bool ClipCursor(RECT& rcClip);
    public static bool ClipCursor(COMRECT rcClip);
    public static IntPtr SetCursor(HandleRef hcursor);
    public static bool SetCursorPos(int x, int y);
    public static int ShowCursor(bool bShow);
    public static bool DestroyCursor(HandleRef hCurs);
    public static bool IsWindow(HandleRef hWnd);
    public static bool GetMessageA(MSG& msg, HandleRef hWnd, int uMsgFilterMin, int uMsgFilterMax);
    public static bool GetMessageW(MSG& msg, HandleRef hWnd, int uMsgFilterMin, int uMsgFilterMax);
    public static IntPtr PostMessage(HandleRef hwnd, int msg, int wparam, int lparam);
    public static IntPtr PostMessage(HandleRef hwnd, int msg, int wparam, IntPtr lparam);
    public static bool GetClientRect(HandleRef hWnd, RECT& rect);
    public static bool GetClientRect(HandleRef hWnd, IntPtr rect);
    public static IntPtr WindowFromPoint(Point pt);
    public static IntPtr CreateWindowEx(int dwExStyle, string lpClassName, string lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, HandleRef hWndParent, HandleRef hMenu, HandleRef hInst, object lpParam);
    public static bool DestroyWindow(HandleRef hWnd);
    public static ushort RegisterClassW(WNDCLASS& lpWndClass);
    public static void PostQuitMessage(int nExitCode);
    public static void WaitMessage();
    public static bool SetWindowPlacement(HandleRef hWnd, WINDOWPLACEMENT& placement);
    public static UInt32 GetDpiForWindow(HandleRef hWnd);
    public static bool GetSystemPowerStatus(SYSTEM_POWER_STATUS& systemPowerStatus);
    public static bool SetSuspendState(bool hiberate, bool forceCritical, bool disableWakeEvent);
    public static int GetRegionData(HandleRef hRgn, int size, IntPtr lpRgnData);
    public static RECT[] GetRectsFromRegion(IntPtr hRgn);
    public static T& PtrToRef(IntPtr ptr);
    internal static int UiaDisconnectProvider(IRawElementProviderSimple provider);
    internal static int UiaHostProviderFromHwnd(HandleRef hwnd, IRawElementProviderSimple& provider);
    internal static IntPtr UiaReturnRawElementProvider(HandleRef hwnd, IntPtr wParam, IntPtr lParam, IRawElementProviderSimple el);
    internal static bool UiaClientsAreListening();
    internal static int UiaRaiseAutomationEvent(IRawElementProviderSimple provider, int id);
    internal static int UiaRaiseAutomationPropertyChangedEvent(IRawElementProviderSimple provider, int id, object oldValue, object newValue);
    internal static int UiaRaiseNotificationEvent(IRawElementProviderSimple provider, AutomationNotificationKind notificationKind, AutomationNotificationProcessing notificationProcessing, string notificationText, string activityId);
    internal static int UiaRaiseStructureChangedEvent(IRawElementProviderSimple provider, StructureChangeType structureChangeType, Int32[] runtimeId, int runtimeIdLen);
    internal static bool GetPhysicalCursorPos(POINT& pt);
}
