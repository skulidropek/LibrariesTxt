internal static class FxResources.UIAutomationClientSideProviders.SR : object {
}
internal static class Microsoft.Internal.BuildInfo : object {
    internal static string WCP_VERSION;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string DirectWriteForwarder;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
}
internal static class Microsoft.Internal.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
    internal static string User32;
    internal static string NInput;
}
internal class MS.Internal.AutomationProxies.Accessible : object {
    private IAccessible _acc;
    private int _idChild;
    private int _accessibleChildrenIndex;
    private IntPtr _hwnd;
    internal IAccessible IAccessible { get; }
    internal int ChildCount { get; }
    internal int ChildId { get; }
    internal string Description { get; }
    internal string KeyboardShortcut { get; }
    internal string Name { get; }
    internal string DefaultAction { get; }
    internal AccessibleRole Role { get; }
    internal bool IsPassword { get; }
    internal bool IsSelected { get; }
    internal bool IsMultiSelectable { get; }
    internal bool IsIndeterminate { get; }
    internal bool IsChecked { get; }
    internal bool IsReadOnly { get; }
    internal bool IsEnabled { get; }
    internal bool IsFocused { get; }
    internal bool IsOffScreen { get; }
    internal Accessible FirstChild { get; }
    internal Accessible LastChild { get; }
    internal Accessible Parent { get; }
    internal bool IsAvailableToUser { get; }
    internal bool IsExposedToUIA { get; }
    internal AccessibleState State { get; }
    internal string Value { get; internal set; }
    internal Rect Location { get; }
    internal string HelpText { get; }
    internal IntPtr Window { get; }
    private Accessible(IAccessible acc, int idChild);
    internal static Accessible CreateNativeFromEvent(IntPtr hwnd, int idObject, int idChild);
    internal static Accessible Wrap(IAccessible acc);
    internal static Accessible Wrap(IAccessible acc, int idChild);
    internal IAccessible get_IAccessible();
    internal int get_ChildCount();
    internal int get_ChildId();
    internal string get_Description();
    internal string get_KeyboardShortcut();
    internal string get_Name();
    internal string get_DefaultAction();
    internal AccessibleRole get_Role();
    internal bool get_IsPassword();
    internal bool get_IsSelected();
    internal bool get_IsMultiSelectable();
    internal bool get_IsIndeterminate();
    internal bool get_IsChecked();
    internal bool get_IsReadOnly();
    internal bool get_IsEnabled();
    internal bool get_IsFocused();
    internal bool get_IsOffScreen();
    internal Accessible get_FirstChild();
    internal Accessible get_LastChild();
    internal Accessible NextSibling(Accessible parent);
    internal Accessible PreviousSibling(Accessible parent);
    internal Accessible get_Parent();
    internal int AccessibleChildrenIndex(Accessible parent);
    internal bool get_IsAvailableToUser();
    internal bool InSameHwnd(IntPtr hwnd);
    internal bool get_IsExposedToUIA();
    internal AccessibleState get_State();
    internal string get_Value();
    internal void set_Value(string value);
    internal Rect get_Location();
    internal static Accessible GetFullAccessibleChildByIndex(Accessible accParent, int index);
    internal static AccessibleRole GetRole(IAccessible acc, int idChild);
    internal Accessible[] GetSelection();
    internal Accessible GetFocus();
    internal bool HasState(AccessibleState testState);
    internal static bool HasState(AccessibleState state, AccessibleState testState);
    internal string get_HelpText();
    internal Accessible HitTest(int x, int y);
    internal void DoDefaultAction();
    internal void SetFocus();
    internal void SelectTakeFocusTakeSelection();
    internal void SelectTakeFocusAddToSelection();
    internal void SelectTakeFocusRemoveFromSelection();
    internal static bool Compare(Accessible acc1, Accessible acc2);
    internal IntPtr get_Window();
    internal static int AccessibleObjectFromWindow(IntPtr hwnd, int idObject, Accessible& acc);
    internal static Object[] GetAccessibleChildren(IAccessible accessibleObject, Int32& childrenReturned);
    private static Accessible GetChildAt(IAccessible parent, Object[] children, int index);
    private Object[] SetAccessibleChildrenIndexAndGetChildren(IAccessible parent);
    private bool Compare(IAccessible acc, int idChild);
    private static Accessible AccessibleFromObject(object o, IAccessible parent);
    private static void IAccessibleFromObject(object obj, IAccessible parent, IAccessible& acc, Int32& idChild);
    private void Select(int selFlags);
    private static Object[] GetChildren(IAccessible parent);
    private static int GetChildCount(IAccessible acc);
    private static string GetDescription(IAccessible acc, int idChild);
    private static string GetDefaultAction(IAccessible acc, int idChild);
    private static string GetKeyboardShortcut(IAccessible acc, int idChild);
    private static string GetName(IAccessible acc, int idChild);
    internal static Win32Rect GetLocation(IAccessible acc, int idChild);
    private static bool HandleIAccessibleException(Exception e);
    private static IAccessible WashPartialTrustWinformsAccessible(IAccessible old);
    private static string FixBstr(string bstr);
}
internal enum MS.Internal.AutomationProxies.AccessibleRole : Enum {
    public int value__;
    public static AccessibleRole TitleBar;
    public static AccessibleRole MenuBar;
    public static AccessibleRole ScrollBar;
    public static AccessibleRole Grip;
    public static AccessibleRole Sound;
    public static AccessibleRole Cursor;
    public static AccessibleRole Caret;
    public static AccessibleRole Alert;
    public static AccessibleRole Window;
    public static AccessibleRole Client;
    public static AccessibleRole MenuPopup;
    public static AccessibleRole MenuItem;
    public static AccessibleRole Tooltip;
    public static AccessibleRole Application;
    public static AccessibleRole Document;
    public static AccessibleRole Pane;
    public static AccessibleRole Chart;
    public static AccessibleRole Dialog;
    public static AccessibleRole Border;
    public static AccessibleRole Grouping;
    public static AccessibleRole Separator;
    public static AccessibleRole ToolBar;
    public static AccessibleRole StatusBar;
    public static AccessibleRole Table;
    public static AccessibleRole ColumnHeader;
    public static AccessibleRole RowHeader;
    public static AccessibleRole Column;
    public static AccessibleRole Row;
    public static AccessibleRole Cell;
    public static AccessibleRole Link;
    public static AccessibleRole HelpBalloon;
    public static AccessibleRole Character;
    public static AccessibleRole List;
    public static AccessibleRole ListItem;
    public static AccessibleRole Outline;
    public static AccessibleRole OutlineItem;
    public static AccessibleRole PageTab;
    public static AccessibleRole PropertyPage;
    public static AccessibleRole Indicator;
    public static AccessibleRole Graphic;
    public static AccessibleRole StaticText;
    public static AccessibleRole Text;
    public static AccessibleRole PushButton;
    public static AccessibleRole CheckButton;
    public static AccessibleRole RadioButton;
    public static AccessibleRole Combobox;
    public static AccessibleRole DropList;
    public static AccessibleRole ProgressBar;
    public static AccessibleRole Dial;
    public static AccessibleRole HotKeyField;
    public static AccessibleRole Slider;
    public static AccessibleRole SpinButton;
    public static AccessibleRole Diagram;
    public static AccessibleRole Animation;
    public static AccessibleRole Equation;
    public static AccessibleRole ButtonDropDown;
    public static AccessibleRole ButtonMenu;
    public static AccessibleRole ButtonDropDownGrid;
    public static AccessibleRole Whitespace;
    public static AccessibleRole PageTabList;
    public static AccessibleRole Clock;
    public static AccessibleRole SplitButton;
    public static AccessibleRole IpAddress;
    public static AccessibleRole OutlineButton;
}
[FlagsAttribute]
internal enum MS.Internal.AutomationProxies.AccessibleState : Enum {
    public int value__;
    public static AccessibleState Normal;
    public static AccessibleState Unavailable;
    public static AccessibleState Selected;
    public static AccessibleState Focused;
    public static AccessibleState Pressed;
    public static AccessibleState Checked;
    public static AccessibleState Mixed;
    public static AccessibleState ReadOnly;
    public static AccessibleState HotTracked;
    public static AccessibleState Default;
    public static AccessibleState Expanded;
    public static AccessibleState Collapsed;
    public static AccessibleState Busy;
    public static AccessibleState Floating;
    public static AccessibleState Marqueed;
    public static AccessibleState Animated;
    public static AccessibleState Invisible;
    public static AccessibleState Offscreen;
    public static AccessibleState Sizeable;
    public static AccessibleState Moveable;
    public static AccessibleState SelfVoicing;
    public static AccessibleState Focusable;
    public static AccessibleState Selectable;
    public static AccessibleState Linked;
    public static AccessibleState Traversed;
    public static AccessibleState Multiselectable;
    public static AccessibleState ExtSelectable;
    public static AccessibleState AlertLow;
    public static AccessibleState AlertMedium;
    public static AccessibleState AlertHigh;
    public static AccessibleState Protected;
}
internal class MS.Internal.AutomationProxies.ByteEditBoxOverride : ProxyHwnd {
    private int _position;
    internal ProviderOptions ProviderOptions { get; }
    internal string LocalizedName { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    internal ByteEditBoxOverride(IntPtr hwnd, int position);
    internal virtual ProviderOptions get_ProviderOptions();
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual string get_LocalizedName();
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
}
internal static class MS.Internal.AutomationProxies.ClickablePoint : object {
    private static IntPtr _hwndDesktop;
    private static IntPtr _hwndProgman;
    private static ClickablePoint();
    internal static bool GetPoint(IntPtr hwnd, ArrayList alIn, ArrayList alOut, Win32Point& pt);
    internal static void ExcludeChildren(ProxyFragment fragment, ArrayList alIn, ArrayList alOut);
    private static bool ClickableInRect(IntPtr hwnd, Win32Point& pt, bool fRiAsInsideRect, ArrayList alIn, ArrayList alOut);
    private static void SplitVertical(CPRect& ro, CPRect& ri, int left, int right, ArrayList alRect, bool fRiAsInsideRect);
    private static void SplitRect(CPRect& ro, CPRect ri, ArrayList alRect, bool fRiAsInsideRect);
    private static void SplitRect(ArrayList alIn, CPRect& ri, ArrayList alOut, bool fRiAsInsideRect);
    private static bool GetClickablePoint(ArrayList al, Int32& x, Int32& y);
}
internal static class MS.Internal.AutomationProxies.DataObjectConstants : object {
    internal static int CF_TEXT;
    internal static int CF_UNICODETEXT;
    internal static int DVASPECT_CONTENT;
    internal static int TYMED_HGLOBAL;
}
internal class MS.Internal.AutomationProxies.EmptyElement : object {
    private ProviderOptions System.Windows.Automation.Provider.IRawElementProviderSimple.ProviderOptions { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderSimple.HostRawElementProvider { get; }
    private sealed virtual override ProviderOptions System.Windows.Automation.Provider.IRawElementProviderSimple.get_ProviderOptions();
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPatternProvider(int patternId);
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPropertyValue(int propertyId);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderSimple.get_HostRawElementProvider();
}
internal class MS.Internal.AutomationProxies.EmptyGridItem : EmptyElement {
    private int _row;
    private int _column;
    private int _rowSpan;
    private int _columnSpan;
    private IRawElementProviderSimple _containingGrid;
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    internal EmptyGridItem(int row, int column, IRawElementProviderSimple containingGrid);
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPatternProvider(int patternId);
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
}
internal static class MS.Internal.AutomationProxies.EventManager : object {
    private static Hashtable _objectIdWindow;
    private static Hashtable _objectIdClient;
    private static Hashtable _objectIdScroll;
    private static Hashtable _objectIdCaret;
    private static Hashtable _objectIdMenu;
    private static object _classLock;
    private static IntPtr _hwndLast;
    private static ITextRangeProvider _lastSelection;
    private static EventManager();
    internal static void DispatchEvent(ProxySimple el, IntPtr hwnd, int eventId, object idProp, int idObject);
    private static void HandleIsReadOnlyProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleStructureChangedEventWindow(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleCanMinimizeProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleCanMaximizeProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleValueProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleRangeValueProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleIsSelectedProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleExpandCollapseStateProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleColumnCountProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleRowCountProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleColumnProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleRowProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleColumnHeadersProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleRowHeadersProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleIsSelectionRequiredProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleVerticalViewSizeProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleHorizontalViewSizeProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleToggleStateProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleInvokedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleScrollInvokedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleWindowInvokedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleMenuItemInvokedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleElementSelectedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleElementAddedToSelectionEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleElementRemovedFromSelectionEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleStructureChangedEventClient(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleVerticalScrollPercentProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleHorizontalScrollPercentProperty(ProxySimple el, IntPtr hwnd, int eventId);
    private static void HandleInvalidatedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void RaisePropertyChangedEvent(ProxySimple el, AutomationProperty property, object propertyValue);
    private static WindowVisualState GetWindowVisualState(IntPtr hwnd);
    private static void HandleTextSelectionChangedEvent(ProxySimple el, IntPtr hwnd, int eventId);
    private static void InitObjectIdWindow();
    private static void InitObjectIdClient();
    private static void InitObjectIdScroll();
    private static void InitObjectIdCaret();
    private static void InitObjectIdMenu();
}
internal class MS.Internal.AutomationProxies.FormsLink : ProxyHwnd {
    internal FormsLink(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    protected virtual EvtIdProperty[] EventToWinEvent(AutomationEvent idEvent, Int32& cEvent);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual bool SetFocus();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
internal class MS.Internal.AutomationProxies.GroupManager : object {
    internal ArrayList _groups;
    internal IntPtr _hwnd;
    private static int padding;
    private bool _isComctrlV6OnOsVerV6orHigher;
    private GroupManager(int groups, IntPtr hwnd, bool isComctrlV6OnOsVerV6orHigher);
    internal Win32Rect GetGroupRc(int id);
    internal Win32Rect GetGroupRcByIndex(int index);
    internal Int32[] GetGroupIds();
    internal bool IsGroupIdValid(int groupID);
    internal int GetGroupIdByIndex(int index);
    internal int GroupCount();
    internal bool AreGroupsValid();
    internal GroupInfo GetGroupInfo(int groupID);
    internal static GroupManager CreateGroupManager(IntPtr hwnd);
    internal static bool ListViewHasGroup(IntPtr hwnd, int groupID);
    private Group GetGroup(int id);
    private static GroupManager InitializeManager(IntPtr hwnd);
    private int GetGroupHeaderHeight();
    private bool Add(int id, int item);
    private Win32Rect GetGroupRcInternal(Group group);
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.AutomationProxies.GroupManagerCollection : object {
    private static Hashtable _groupManagers;
    internal GroupManager Item { get; }
    private static GroupManagerCollection();
    internal void EnsureCreation(IntPtr hwnd);
    internal void Remove(IntPtr hwnd);
    internal bool Contains(IntPtr hwnd);
    internal GroupManager get_Item(IntPtr hwnd);
}
[GuidAttribute("0000010E-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface MS.Internal.AutomationProxies.IDataObject {
    public abstract virtual int GetData(FORMATETC& pFormatetc, STGMEDIUM& pMedium);
    public abstract virtual void Placeholder_GetDataHere();
    public abstract virtual void Placeholder_QueryGetData();
    public abstract virtual void Placeholder_GetCanonicalFormatEtc();
    public abstract virtual void Placeholder_SetData();
    public abstract virtual void Placeholder_OleEnumFormatEtc();
    public abstract virtual void Placeholder_DAdvise();
    public abstract virtual void Placeholder_DUnadvise();
    public abstract virtual void Placeholder_EnumDAdvise();
}
internal class MS.Internal.AutomationProxies.Input : object {
    internal static void SendMouseInput(double x, double y, int data, SendMouseInputFlags flags);
    internal static void SendKeyboardInput(Key key, bool press);
    internal static void SendKeyboardInputVK(short vk, bool press);
    private static bool IsExtendedKey(short vk);
}
[GuidAttribute("00000112-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface MS.Internal.AutomationProxies.IOleObject {
    public abstract virtual void Placeholder_SetClientSite();
    public abstract virtual void Placeholder_GetClientSite();
    public abstract virtual void Placeholder_SetHostNames();
    public abstract virtual void Placeholder_Close();
    public abstract virtual void Placeholder_SetMoniker();
    public abstract virtual void Placeholder_GetMoniker();
    public abstract virtual void Placeholder_InitFromData();
    public abstract virtual int GetClipboardData(int dwReserved, IDataObject& data);
    public abstract virtual void Placeholder_DoVerb();
    public abstract virtual void Placeholder_EnumVerbs();
    public abstract virtual void Placeholder_OleUpdate();
    public abstract virtual void Placeholder_IsUpToDate();
    public abstract virtual void Placeholder_GetUserClassID();
    public abstract virtual void Placeholder_GetUserType();
    public abstract virtual void Placeholder_SetExtent();
    public abstract virtual void Placeholder_GetExtent();
    public abstract virtual void Placeholder_Advise();
    public abstract virtual void Placeholder_Unadvise();
    public abstract virtual void Placeholder_EnumAdvise();
    public abstract virtual void Placeholder_GetMiscStatus();
    public abstract virtual void Placeholder_SetColorScheme();
}
[InterfaceTypeAttribute("0")]
[GuidAttribute("8CC497C0-A1DF-11ce-8098-00AA0047BE5D")]
internal interface MS.Internal.AutomationProxies.ITextDocument {
    public ITextSelection Selection { get; }
    public abstract virtual void Placeholder_Name();
    public abstract virtual ITextSelection get_Selection();
    public abstract virtual void Placeholder_StoryCount();
    public abstract virtual void Placeholder_StoryRanges();
    public abstract virtual void Placeholder_get_Saved();
    public abstract virtual void Placeholder_set_Saved();
    public abstract virtual void Placeholder_get_DefaultTabStop();
    public abstract virtual void Placeholder_set_DefaultTabStop();
    public abstract virtual void Placeholder_New();
    public abstract virtual void Placeholder_Open();
    public abstract virtual void Placeholder_Save();
    public abstract virtual void Placeholder_Freeze();
    public abstract virtual void Placeholder_Unfreeze();
    public abstract virtual void Placeholder_BeginEditCollection();
    public abstract virtual void Placeholder_EndEditCollection();
    public abstract virtual void Placeholder_Undo();
    public abstract virtual void Placeholder_Redo();
    public abstract virtual ITextRange Range(int cp1, int cp2);
    public abstract virtual ITextRange RangeFromPoint(int x, int y);
}
[InterfaceTypeAttribute("0")]
[GuidAttribute("8CC497C3-A1DF-11ce-8098-00AA0047BE5D")]
internal interface MS.Internal.AutomationProxies.ITextFont {
    public TomBool AllCaps { get; public set; }
    public TomAnimation Animation { get; public set; }
    public int BackColor { get; public set; }
    public TomBool Emboss { get; public set; }
    public int ForeColor { get; public set; }
    public TomBool Hidden { get; public set; }
    public TomBool Engrave { get; public set; }
    public TomBool Italic { get; public set; }
    public string Name { get; public set; }
    public TomBool Outline { get; public set; }
    public TomBool Protected { get; public set; }
    public TomBool Shadow { get; public set; }
    public float Size { get; public set; }
    public TomBool SmallCaps { get; public set; }
    public TomBool StrikeThrough { get; public set; }
    public TomBool Subscript { get; public set; }
    public TomBool Superscript { get; public set; }
    public TomUnderline Underline { get; public set; }
    public int Weight { get; public set; }
    public abstract virtual void Placeholder_GetDuplicate();
    public abstract virtual void Placeholder_SetDuplicate();
    public abstract virtual void Placeholder_CanChange();
    public abstract virtual void Placeholder_IsEqual();
    public abstract virtual void Placeholder_Reset();
    public abstract virtual void Placeholder_GetStyle();
    public abstract virtual void Placeholder_SetStyle();
    public abstract virtual TomBool get_AllCaps();
    public abstract virtual void set_AllCaps(TomBool value);
    public abstract virtual TomAnimation get_Animation();
    public abstract virtual void set_Animation(TomAnimation value);
    public abstract virtual int get_BackColor();
    public abstract virtual void set_BackColor(int value);
    public abstract virtual void Placeholder_GetBold();
    public abstract virtual void Placeholder_SetBold();
    public abstract virtual TomBool get_Emboss();
    public abstract virtual void set_Emboss(TomBool value);
    public abstract virtual int get_ForeColor();
    public abstract virtual void set_ForeColor(int value);
    public abstract virtual TomBool get_Hidden();
    public abstract virtual void set_Hidden(TomBool value);
    public abstract virtual TomBool get_Engrave();
    public abstract virtual void set_Engrave(TomBool value);
    public abstract virtual TomBool get_Italic();
    public abstract virtual void set_Italic(TomBool value);
    public abstract virtual void Placeholder_GetKerning();
    public abstract virtual void Placeholder_SetKerning();
    public abstract virtual void Placeholder_GetLanguageID();
    public abstract virtual void Placeholder_SetLanguageID();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual TomBool get_Outline();
    public abstract virtual void set_Outline(TomBool value);
    public abstract virtual void Placeholder_GetPosition();
    public abstract virtual void Placeholder_SetPosition();
    public abstract virtual TomBool get_Protected();
    public abstract virtual void set_Protected(TomBool value);
    public abstract virtual TomBool get_Shadow();
    public abstract virtual void set_Shadow(TomBool value);
    public abstract virtual float get_Size();
    public abstract virtual void set_Size(float value);
    public abstract virtual TomBool get_SmallCaps();
    public abstract virtual void set_SmallCaps(TomBool value);
    public abstract virtual void Placeholder_GetSpacing();
    public abstract virtual void Placeholder_SetSpacing();
    public abstract virtual TomBool get_StrikeThrough();
    public abstract virtual void set_StrikeThrough(TomBool value);
    public abstract virtual TomBool get_Subscript();
    public abstract virtual void set_Subscript(TomBool value);
    public abstract virtual TomBool get_Superscript();
    public abstract virtual void set_Superscript(TomBool value);
    public abstract virtual TomUnderline get_Underline();
    public abstract virtual void set_Underline(TomUnderline value);
    public abstract virtual int get_Weight();
    public abstract virtual void set_Weight(int value);
}
[GuidAttribute("8CC497C4-A1DF-11CE-8098-00AA0047BE5D")]
[InterfaceTypeAttribute("0")]
internal interface MS.Internal.AutomationProxies.ITextPara {
    public TomAlignment Alignment { get; public set; }
    public float FirstLineIndent { get; }
    public float LeftIndent { get; }
    public TomListType ListType { get; public set; }
    public float RightIndent { get; public set; }
    public int TabCount { get; }
    public abstract virtual void Placeholder_GetDuplicate();
    public abstract virtual void Placeholder_SetDuplicate();
    public abstract virtual void Placeholder_CanChange();
    public abstract virtual void Placeholder_IsEqual();
    public abstract virtual void Placeholder_Reset();
    public abstract virtual void Placeholder_GetStyle();
    public abstract virtual void Placeholder_SetStyle();
    public abstract virtual TomAlignment get_Alignment();
    public abstract virtual void set_Alignment(TomAlignment value);
    public abstract virtual void Placeholder_GetHyphenation();
    public abstract virtual void Placeholder_SetHyphenation();
    public abstract virtual float get_FirstLineIndent();
    public abstract virtual void Placeholder_GetKeepTogether();
    public abstract virtual void Placeholder_SetKeepTogether();
    public abstract virtual void Placeholder_GetKeepWithNext();
    public abstract virtual void Placeholder_SetKeepWithNext();
    public abstract virtual float get_LeftIndent();
    public abstract virtual void Placeholder_GetLineSpacing();
    public abstract virtual void Placeholder_GetLineSpacingRule();
    public abstract virtual void Placeholder_GetListAlignment();
    public abstract virtual void Placeholder_SetListAlignment();
    public abstract virtual void Placeholder_GetListLevelIndex();
    public abstract virtual void Placeholder_SetListLevelIndex();
    public abstract virtual void Placeholder_GetListStart();
    public abstract virtual void Placeholder_SetListStart();
    public abstract virtual void Placeholder_GetListTab();
    public abstract virtual void Placeholder_SetListTab();
    public abstract virtual TomListType get_ListType();
    public abstract virtual void set_ListType(TomListType value);
    public abstract virtual void Placeholder_GetNoLineNumber();
    public abstract virtual void Placeholder_SetNoLineNumber();
    public abstract virtual void Placeholder_GetPageBreakBefore();
    public abstract virtual void Placeholder_SetPageBreakBefore();
    public abstract virtual float get_RightIndent();
    public abstract virtual void set_RightIndent(float value);
    public abstract virtual void Placeholder_SetIndents();
    public abstract virtual void Placeholder_SetLineSpacing();
    public abstract virtual void Placeholder_GetSpaceAfter();
    public abstract virtual void Placeholder_SetSpaceAfter();
    public abstract virtual void Placeholder_GetSpaceBefore();
    public abstract virtual void Placeholder_SetSpaceBefore();
    public abstract virtual void Placeholder_GetWidowControl();
    public abstract virtual void Placeholder_SetWidowControl();
    public abstract virtual int get_TabCount();
    public abstract virtual void Placeholder_AddTab();
    public abstract virtual void Placeholder_ClearAllTabs();
    public abstract virtual void Placeholder_DeleteTab();
    public abstract virtual void GetTab(int iTab, Single& tbPos, TomAlignment& tbAlign, TomLeader& tbLeader);
}
[GuidAttribute("8CC497C2-A1DF-11ce-8098-00AA0047BE5D")]
[InterfaceTypeAttribute("0")]
internal interface MS.Internal.AutomationProxies.ITextRange {
    public string Text { get; }
    public int Start { get; public set; }
    public int End { get; public set; }
    public ITextFont Font { get; public set; }
    public ITextPara Para { get; public set; }
    public int StoryLength { get; }
    public TomStory StoryType { get; }
    public abstract virtual string get_Text();
    public abstract virtual void Placeholder_set_Text();
    public abstract virtual void Placeholder_get_Char();
    public abstract virtual void Placeholder_set_Char();
    public abstract virtual ITextRange GetDuplicate();
    public abstract virtual void Placeholder_get_FormattedText();
    public abstract virtual void Placeholder_set_FormattedText();
    public abstract virtual int get_Start();
    public abstract virtual void set_Start(int value);
    public abstract virtual int get_End();
    public abstract virtual void set_End(int value);
    public abstract virtual ITextFont get_Font();
    public abstract virtual void set_Font(ITextFont value);
    public abstract virtual ITextPara get_Para();
    public abstract virtual void set_Para(ITextPara value);
    public abstract virtual int get_StoryLength();
    public abstract virtual TomStory get_StoryType();
    public abstract virtual void Collapse(TomStartEnd bStart);
    public abstract virtual int Expand(TomUnit unit);
    public abstract virtual void Placeholder_GetIndex();
    public abstract virtual void Placeholder_SetIndex();
    public abstract virtual void SetRange(int cp1, int cp2);
    public abstract virtual TomBool InRange(ITextRange range);
    public abstract virtual void Placeholder_InStory();
    public abstract virtual TomBool IsEqual(ITextRange range);
    public abstract virtual void Select();
    public abstract virtual int StartOf(int type, int extend);
    public abstract virtual int EndOf(TomUnit unit, TomExtend extend);
    public abstract virtual int Move(TomUnit unit, int count);
    public abstract virtual int MoveStart(TomUnit unit, int count);
    public abstract virtual int MoveEnd(TomUnit unit, int count);
    public abstract virtual void Placeholder_MoveWhile();
    public abstract virtual void Placeholder_MoveStartWhile();
    public abstract virtual void Placeholder_MoveEndWhile();
    public abstract virtual void Placeholder_MoveUntil();
    public abstract virtual void Placeholder_MoveStartUntil();
    public abstract virtual void Placeholder_MoveEndUntil();
    public abstract virtual int FindText(string bstr, int count, TomMatch flags);
    public abstract virtual int FindTextStart(string bstr, int count, TomMatch flags);
    public abstract virtual int FindTextEnd(string bstr, int count, TomMatch flags);
    public abstract virtual void Placeholder_Delete();
    public abstract virtual void Placeholder_Cut();
    public abstract virtual void Placeholder_Copy();
    public abstract virtual void Placeholder_Paste();
    public abstract virtual void Placeholder_CanPaste();
    public abstract virtual void Placeholder_CanEdit();
    public abstract virtual void Placeholder_ChangeCase();
    public abstract virtual int GetPoint(TomGetPoint type, Int32& px, Int32& py);
    public abstract virtual void Placeholder_SetPoint();
    public abstract virtual void ScrollIntoView(TomStartEnd scrollvalue);
    public abstract virtual int GetEmbeddedObject(Object& ppObj);
}
[GuidAttribute("8CC497C1-A1DF-11ce-8098-00AA0047BE5D")]
[InterfaceTypeAttribute("0")]
internal interface MS.Internal.AutomationProxies.ITextSelection {
    public string Text { get; }
    public int Start { get; public set; }
    public int End { get; public set; }
    public ITextFont Font { get; public set; }
    public ITextPara Para { get; public set; }
    public int StoryLength { get; }
    public TomStory StoryType { get; }
    public TomSelectionFlags Flags { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void Placeholder_set_Text();
    public abstract virtual void Placeholder_get_Char();
    public abstract virtual void Placeholder_set_Char();
    public abstract virtual ITextRange GetDuplicate();
    public abstract virtual void Placeholder_get_FormattedText();
    public abstract virtual void Placeholder_set_FormattedText();
    public abstract virtual int get_Start();
    public abstract virtual void set_Start(int value);
    public abstract virtual int get_End();
    public abstract virtual void set_End(int value);
    public abstract virtual ITextFont get_Font();
    public abstract virtual void set_Font(ITextFont value);
    public abstract virtual ITextPara get_Para();
    public abstract virtual void set_Para(ITextPara value);
    public abstract virtual int get_StoryLength();
    public abstract virtual TomStory get_StoryType();
    public abstract virtual void Collapse(TomStartEnd bStart);
    public abstract virtual int Expand(TomUnit unit);
    public abstract virtual void Placeholder_GetIndex();
    public abstract virtual void Placeholder_SetIndex();
    public abstract virtual void SetRange(int cp1, int cp2);
    public abstract virtual TomBool InRange(ITextRange range);
    public abstract virtual void Placeholder_InStory();
    public abstract virtual TomBool IsEqual(ITextRange range);
    public abstract virtual void Select();
    public abstract virtual int StartOf(int type, int extend);
    public abstract virtual int EndOf(TomUnit unit, TomExtend extend);
    public abstract virtual int Move(TomUnit unit, int count);
    public abstract virtual int MoveStart(TomUnit unit, int count);
    public abstract virtual int MoveEnd(TomUnit unit, int count);
    public abstract virtual void Placeholder_MoveWhile();
    public abstract virtual void Placeholder_MoveStartWhile();
    public abstract virtual void Placeholder_MoveEndWhile();
    public abstract virtual void Placeholder_MoveUntil();
    public abstract virtual void Placeholder_MoveStartUntil();
    public abstract virtual void Placeholder_MoveEndUntil();
    public abstract virtual int FindText(string bstr, int count, TomMatch flags);
    public abstract virtual int FindTextStart(string bstr, int count, TomMatch flags);
    public abstract virtual int FindTextEnd(string bstr, int count, TomMatch flags);
    public abstract virtual void Placeholder_Delete();
    public abstract virtual void Placeholder_Cut();
    public abstract virtual void Placeholder_Copy();
    public abstract virtual void Placeholder_Paste();
    public abstract virtual void Placeholder_CanPaste();
    public abstract virtual void Placeholder_CanEdit();
    public abstract virtual void Placeholder_ChangeCase();
    public abstract virtual int GetPoint(TomGetPoint type, Int32& px, Int32& py);
    public abstract virtual void Placeholder_SetPoint();
    public abstract virtual void ScrollIntoView(TomStartEnd scrollvalue);
    public abstract virtual int GetEmbeddedObject(Object& ppObj);
    public abstract virtual TomSelectionFlags get_Flags();
    public abstract virtual void set_Flags(TomSelectionFlags value);
    public abstract virtual void Placeholder_Type();
    public abstract virtual void Placeholder_MoveLeft();
    public abstract virtual void Placeholder_MoveRight();
    public abstract virtual void Placeholder_MoveUp();
    public abstract virtual void Placeholder_MoveDown();
    public abstract virtual void Placeholder_HomeKey();
    public abstract virtual void Placeholder_EndKey();
    public abstract virtual void Placeholder_TypeText();
}
internal class MS.Internal.AutomationProxies.ListViewGroupSubsetLink : ProxySimple {
    private int _groupId;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    internal ListViewGroupSubsetLink(IntPtr hwnd, ProxyFragment parent, int item, int groupId);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    protected virtual bool IsFocused();
    internal virtual string get_LocalizedName();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
internal class MS.Internal.AutomationProxies.ListViewItem : ProxyFragment {
    private static int _checkbox;
    private bool _isComctrlV6OnOsVerV6orHigher;
    internal Rect BoundingRectangle { get; }
    internal string HelpText { get; }
    internal string LocalizedName { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    internal ListViewItem(IntPtr hwnd, ProxyFragment parent, int item);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual string get_HelpText();
    internal virtual string get_LocalizedName();
    internal virtual bool SetFocus();
    internal virtual object GetElementProperty(AutomationProperty propertyId);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string val);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    internal static int GetSubItemCount(IntPtr hwnd);
    internal static string GetText(IntPtr hwnd, int item, int subitem);
    internal static bool IsItemWithCheckbox(IntPtr hwnd, int item);
    internal static int GetGroupID(IntPtr hwnd, int lvItem);
    internal static void SetValue(string val, IntPtr hwnd, int item);
    protected virtual bool IsFocused();
    internal virtual bool IsOffscreen();
    private ProxySimple CreateListViewSubItem(int index);
    private ProxySimple CreateListViewItemCheckbox();
    private static bool IsImplementingGrid(IntPtr hwnd);
    private bool GetListviewitemClickablePoint(Win32Point& clickPoint);
    private void Click(Win32Point clickPoint);
    private static void FinishEditing(bool setValueSucceeded, IntPtr hwnd, IntPtr hwndEdit);
    private int GetItemColumnPositionInGroup();
    private int GetItemRowPositionInGroup();
}
internal class MS.Internal.AutomationProxies.ListViewItemCheckbox : ProxySimple {
    private int _listviewItem;
    internal Rect BoundingRectangle { get; }
    internal string HelpText { get; }
    internal string LocalizedName { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    internal ListViewItemCheckbox(IntPtr hwnd, ProxyFragment parent, int item, int checkbox);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_HelpText();
    internal virtual string get_LocalizedName();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    internal static Win32Rect ListViewCheckBoxRect(IntPtr hwnd, int item);
    private ToggleState GetToggleState();
    private void Toggle();
}
internal class MS.Internal.AutomationProxies.ListViewItemStartMenu : ListViewItem {
    internal ListViewItemStartMenu(IntPtr hwnd, ProxyFragment parent, int item, IAccessible acc);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
}
internal class MS.Internal.AutomationProxies.ListViewSubItem : ProxySimple {
    private int _itemParent;
    internal Rect BoundingRectangle { get; }
    internal string HelpText { get; }
    internal string LocalizedName { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Row { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.Column { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.RowSpan { get; }
    private int System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid { get; }
    internal ListViewSubItem(IntPtr hwnd, ProxyFragment parent, int item, int itemParent);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_HelpText();
    internal virtual string get_LocalizedName();
    internal virtual bool SetFocus();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string val);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Row();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_Column();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_RowSpan();
    private sealed virtual override int System.Windows.Automation.Provider.IGridItemProvider.get_ColumnSpan();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridItemProvider.get_ContainingGrid();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems();
    internal static ProxySimple ElementProviderFromPoint(IntPtr hwnd, ProxyFragment parent, int item, int x, int y);
    protected virtual bool IsFocused();
}
internal static class MS.Internal.AutomationProxies.Misc : object {
    internal static int MaxLengthNameProperty;
    internal static long MenuTimeOut;
    private static int _sendMessageFlags;
    private static int _sendMessageTimeoutValue;
    private static String[] _asClassNames;
    private static Misc();
    internal static string AccessKey(string s);
    internal static Int32[] AppendToRuntimeId(Int32[] baseID, int id);
    internal static Double[] RectArrayToDoubleArray(Rect[] rectArray);
    internal static void CheckEnabled(IntPtr hwnd);
    internal static void ClearMenuMode();
    internal static bool CloseHandle(IntPtr processHandle);
    internal static bool Compare(ProxySimple el1, ProxySimple el2);
    internal static IntPtr DispatchMessage(MSG& msg);
    internal static bool EnumChildWindows(IntPtr hwnd, EnumChildrenCallbackVoid lpEnumFunc, Void* lParam);
    internal static IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string className, string wndName);
    internal static string GetClassName(IntPtr hwnd);
    internal static string GetControlName(IntPtr label, bool stripMnemonic);
    internal static bool GetClientRectInScreenCoordinates(IntPtr hwnd, Win32Rect& rc);
    internal static bool GetClientRect(IntPtr hwnd, Win32Rect& rc);
    internal static bool GetComboBoxInfo(IntPtr hwnd, COMBOBOXINFO& cbi);
    internal static bool GetCursorPos(Win32Point& pt);
    internal static IntPtr GetDC(IntPtr hwnd);
    internal static IntPtr GetFocusedWindow();
    internal static string GetItemToolTipText(IntPtr hwnd, IntPtr hwndToolTip, int item);
    internal static IntPtr GetLabelhwnd(IntPtr hwnd);
    internal static bool GetMenuBarInfo(IntPtr hwnd, int idObject, UInt32 item, MENUBARINFO& mbi);
    internal static int GetMenuItemCount(IntPtr hmenu);
    internal static bool GetMenuItemInfo(IntPtr hmenu, int item, bool byPosition, MENUITEMINFO& menuItemInfo);
    internal static bool GetMenuItemRect(IntPtr hwnd, IntPtr hmenu, int item, Win32Rect& rc);
    internal static bool GetMessage(MSG& msg, IntPtr hwnd, int msgFilterMin, int msgFilterMax);
    internal static int GetObjectW(IntPtr hObject, int size, LOGFONT& lf);
    internal static IntPtr GetParent(IntPtr hwnd);
    internal static bool GetScrollBarInfo(IntPtr hwnd, int fnBar, ScrollBarInfo& sbi);
    internal static bool GetScrollInfo(IntPtr hwnd, int fnBar, ScrollInfo& si);
    internal static int GetTextExtentPoint32(IntPtr hdc, string text, int length, SIZE& size);
    internal static string GetUnsafeText(IntPtr hwnd, int uMsg, IntPtr wParam, int maxLength);
    internal static IntPtr GetWindow(IntPtr hwnd, int cmd);
    internal static int GetWindowExStyle(IntPtr hwnd);
    internal static int GetWindowId(IntPtr hwnd);
    internal static IntPtr GetWindowParent(IntPtr hwnd);
    internal static bool GetWindowRect(IntPtr hwnd, Win32Rect& rc);
    internal static int GetWindowStyle(IntPtr hwnd);
    internal static UInt32 GetWindowThreadProcessId(IntPtr hwnd, UInt32& processId);
    internal static short GlobalAddAtom(string atomName);
    internal static short GlobalDeleteAtom(short atom);
    internal static bool InMenuMode();
    internal static bool IsBitSet(int flags, int bit);
    internal static bool IsEnabled(IntPtr hwnd);
    internal static bool IsControlRTL(IntPtr hwnd);
    internal static bool IsLayoutRTL(IntPtr hwnd);
    internal static bool IsReadingRTL(IntPtr hwnd);
    internal static bool IntersectRect(Win32Rect& rcDest, Win32Rect& rc1, Win32Rect& rc2);
    internal static bool IsCriticalException(Exception e);
    internal static bool IsItemVisible(IntPtr hwnd, Win32Rect& itemRect);
    internal static bool IsItemVisible(Win32Rect& parentRect, Win32Rect& itemRect);
    internal static bool IsItemVisible(Win32Rect& parentRect, Rect& itemRect);
    internal static bool IsItemVisible(Rect& parentRect, Win32Rect& itemRect);
    internal static bool IsItemVisible(Rect& parentRect, Rect& itemRect);
    internal static bool IsProgmanWindow(IntPtr hwnd);
    internal static bool IsWow64Process(SafeProcessHandle hProcess, Boolean& Wow64Process);
    internal static bool MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, Win32Rect& rect, int cPoints);
    internal static bool MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, Win32Point& pt, int cPoints);
    internal static void MouseClick(int x, int y);
    internal static void MouseClick(int x, int y, bool fDoubleClick);
    internal static int MsgWaitForMultipleObjects(SafeWaitHandle handle, bool waitAll, int milliseconds, int wakeMask);
    internal static IntPtr OpenProcess(int flags, bool inherit, UInt32 processId, IntPtr hwnd);
    internal static void PostMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);
    internal static string ProxyGetClassName(IntPtr hwnd);
    internal static bool ProxyGetGUIThreadInfo(UInt32 idThread, GUITHREADINFO& gui);
    internal static string ProxyGetText(IntPtr hwnd);
    internal static string ProxyGetText(IntPtr hwnd, int length);
    internal static bool ProxyGetTitleBarInfo(IntPtr hwnd, TITLEBARINFO& ti);
    internal static bool ProxyGetTitleBarInfoEx(IntPtr hwnd, TITLEBARINFOEX& ti);
    internal static Rect[] GetTitlebarRects(IntPtr hwnd);
    internal static Rect GetTitleBarRect(IntPtr hwnd);
    internal static IntPtr ProxySendMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);
    internal static int ProxySendMessageInt(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam);
    internal static IntPtr ProxySendMessage(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, bool ignoreTimeout);
    internal static int ProxySendMessageInt(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, bool ignoreTimeout);
    internal static IntPtr ProxySendMessage(IntPtr hwnd, int msg, IntPtr wParam, StringBuilder sb);
    internal static int ProxySendMessageInt(IntPtr hwnd, int msg, IntPtr wParam, StringBuilder sb);
    internal static IntPtr ProxySendMessage(IntPtr hwnd, int msg, IntPtr wParam, Win32Rect& lParam);
    internal static IntPtr ProxySendMessage(IntPtr hwnd, int msg, Int32& wParam, Int32& lParam);
    internal static bool PtInRect(Win32Rect& rc, int x, int y);
    internal static bool PtInRect(Rect& rc, int x, int y);
    internal static bool PtInWindowRect(IntPtr hwnd, int x, int y);
    internal static bool ReadProcessMemory(SafeProcessHandle hProcess, IntPtr source, IntPtr dest, IntPtr size, IntPtr& bytesRead);
    internal static bool ReadProcessMemory(SafeProcessHandle hProcess, IntPtr source, SafeCoTaskMem destAddress, IntPtr size, IntPtr& bytesRead);
    internal static string RealGetWindowClass(IntPtr hwnd);
    internal static bool RegisterHotKey(IntPtr hwnd, short atom, int modifiers, int vk);
    internal static int ReleaseDC(IntPtr hwnd, IntPtr hdc);
    internal static int RegisterWindowMessage(string msg);
    internal static IntPtr SelectObject(IntPtr hdc, IntPtr hObject);
    internal static int SendInput(int inputs, INPUT& ki, int size);
    internal static bool SetFocus(IntPtr hwnd);
    internal static int SetScrollPos(IntPtr hwnd, int bar, int pos, bool redraw);
    internal static IntPtr SetWinEventHook(int eventMin, int eventMax, IntPtr hmodWinEventProc, WinEventProcDef WinEventReentrancyFilter, UInt32 idProcess, UInt32 idThread, int dwFlags);
    internal static string StripMnemonic(string s);
    internal static void ThrowWin32ExceptionsIfError(int errorCode);
    internal static bool UnhookWinEvent(IntPtr winEventHook);
    internal static bool UnionRect(Win32Rect& rcDst, Win32Rect& rc1, Win32Rect& rc2);
    internal static bool UnregisterHotKey(IntPtr hwnd, short atom);
    internal static IntPtr VirtualAlloc(IntPtr address, UIntPtr size, int allocationType, int protect);
    internal static IntPtr VirtualAllocEx(SafeProcessHandle hProcess, IntPtr address, UIntPtr size, int allocationType, int protect);
    internal static bool VirtualFree(IntPtr address, UIntPtr size, int freeType);
    internal static bool VirtualFreeEx(SafeProcessHandle hProcess, IntPtr address, UIntPtr size, int freeType);
    internal static bool WriteProcessMemory(SafeProcessHandle hProcess, IntPtr dest, IntPtr sourceAddress, IntPtr size, IntPtr& bytesWritten);
    internal static bool IsWindowInGivenProcess(IntPtr hwnd, string targetprocess);
    internal static bool InTheShellProcess(IntPtr hwnd);
    internal static bool IsComctrlV6OnOsVerV6orHigher(IntPtr hwnd);
    private static bool EnumToolTipWindows(IntPtr hwnd, ENUMTOOLTIPWINDOWINFO& lParam);
    private static UInt32 GetPageSize();
    private static void EvaluateSendMessageTimeoutError(int error);
    private static void EvaluateSendMessageTimeoutError(int error, bool ignoreTimeout);
    private static Rect[] GetTitlebarRectsXP(IntPtr hwnd);
    private static Rect[] GetTitlebarRectsEx(IntPtr hwnd);
}
internal class MS.Internal.AutomationProxies.MSAAEventDispatcher : MSAAWinEventWrap {
    private Hashtable _hwndTable;
    private Hashtable _browserTable;
    private static MSAAEventDispatcher _dispatcher;
    internal static MSAAEventDispatcher Dispatcher { get; }
    internal static MSAAEventDispatcher get_Dispatcher();
    internal void AdviseEventAdded(IntPtr hwnd, AutomationEvent eventId, AutomationProperty[] properties);
    internal void AdviseEventRemoved(IntPtr hwnd, AutomationEvent eventId, AutomationProperty[] properties);
    internal virtual void WinEventProc(int eventId, IntPtr hwnd, int idObject, int idChild);
    private AutomationIdentifier[] EventKeys(AutomationEvent eventId, AutomationProperty[] properties);
    private static bool IsClientObject(int idObject, int idChild);
    private void MaybeFireSelectionItemEvent(AutomationEvent eventId, Hashtable eventTable, IntPtr hwnd, int idObject, int idChild);
    private void MaybeFirePropertyChangeEvent(AutomationPattern pattern, AutomationProperty property, Hashtable eventTable, IntPtr hwnd, int idObject, int idChild, bool clientToo);
    private void MaybeFireStructureChangeEvent(int eventId, Hashtable eventTable, IntPtr hwnd, int idObject, int idChild);
}
internal class MS.Internal.AutomationProxies.MsaaNativeProvider : MarshalByRefObject {
    private static String[] BadImplClassnames;
    private static RoleCtrlType[] _roleCtrlTypeMap;
    private static CtrlTypePatterns[] _patternsMap;
    private Accessible _acc;
    protected IntPtr _hwnd;
    protected MsaaNativeProvider _parent;
    private MsaaNativeProvider _knownRoot;
    private RootStatus _isRoot;
    private ControlType _controlType;
    private TristateBool _isMCE;
    private Rect System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle { get; }
    private IRawElementProviderFragmentRoot System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot { get; }
    private ProviderOptions System.Windows.Automation.Provider.IRawElementProviderSimple.ProviderOptions { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderSimple.HostRawElementProvider { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private ControlType ControlType { get; }
    private MsaaNativeProvider KnownRoot { get; }
    private bool IsRoot { get; }
    private MsaaNativeProvider Parent { get; }
    protected MsaaNativeProvider(Accessible acc, IntPtr hwnd, MsaaNativeProvider parent, MsaaNativeProvider knownRoot, RootStatus isRoot);
    private static MsaaNativeProvider();
    private static MsaaNativeProvider Wrap(Accessible acc, IntPtr hwnd, MsaaNativeProvider parent, MsaaNativeProvider knownRoot, RootStatus isRoot);
    internal MsaaNativeProvider Wrap(Accessible acc);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.ElementProviderFromPoint(double x, double y);
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.GetFocus();
    private sealed virtual override void System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventAdded(int eventIdAsInt, Int32[] propertiesAsInts);
    private sealed virtual override void System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventRemoved(int eventIdAsInt, Int32[] propertiesAsInts);
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(NavigateDirection direction);
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId();
    private sealed virtual override Rect System.Windows.Automation.Provider.IRawElementProviderFragment.get_BoundingRectangle();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots();
    private sealed virtual override void System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus();
    private sealed virtual override IRawElementProviderFragmentRoot System.Windows.Automation.Provider.IRawElementProviderFragment.get_FragmentRoot();
    private sealed virtual override ProviderOptions System.Windows.Automation.Provider.IRawElementProviderSimple.get_ProviderOptions();
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPatternProvider(int patternId);
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPropertyValue(int propertyId);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderSimple.get_HostRawElementProvider();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string val);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    internal MsaaNativeProvider GetNextSibling();
    internal MsaaNativeProvider GetPreviousSibling();
    internal MsaaNativeProvider GetFirstChild();
    internal MsaaNativeProvider GetLastChild();
    internal bool IsPatternSupported(AutomationPattern pattern);
    protected virtual object GetPatternProvider(AutomationPattern pattern);
    protected virtual object GetPropertyValue(AutomationProperty idProp);
    protected virtual string GetValue();
    protected virtual void SetValue(string val);
    private ControlType get_ControlType();
    private Accessible GetParent();
    private static bool IsKnownBadWindow(IntPtr hwnd);
    private MsaaNativeProvider get_KnownRoot();
    private bool get_IsRoot();
    private MsaaNativeProvider get_Parent();
    private MsaaNativeProvider DescendantFromPoint(int x, int y, bool nullMeansThis);
    private void CallDoDefaultAction();
}
internal class MS.Internal.AutomationProxies.MSAAWinEventWrap : object {
    private Queue _qEvents;
    private int _eventMin;
    private int _eventMax;
    private IntPtr[] _hHooks;
    private bool _fBusy;
    private int _fFlags;
    private GCHandle _gchThis;
    private WinEventProcDef _winEventProc;
    protected ArrayList _clientCallbacks;
    internal MSAAWinEventWrap(int eventMin, int eventMax);
    protected virtual override void Finalize();
    internal virtual void WinEventProc(int eventId, IntPtr hwnd, int idObject, int idChild);
    internal void Clear();
    internal void StartListening();
    internal void StopListening();
    private void WinEventReentrancyFilter(int winEventHook, int eventId, IntPtr hwnd, int idObject, int idChild, int eventThread, UInt32 eventTime);
    private void Init();
}
internal class MS.Internal.AutomationProxies.NonClientArea : ProxyHwnd {
    internal ProviderOptions ProviderOptions { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable { get; }
    internal NonClientArea(IntPtr hwnd);
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    protected virtual Int32[] PropertyToWinEvent(AutomationProperty idProp);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static IRawElementProviderSimple CreateMenuBarItem(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple CreateMenuBarItem(IntPtr hwnd, int idChild);
    internal static IRawElementProviderSimple CreateSystemMenu(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple CreateSystemMenu(IntPtr hwnd);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual ProviderOptions get_ProviderOptions();
    internal virtual Int32[] GetRuntimeId();
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(double horizontalPercent, double verticalPercent);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalViewSize();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalViewSize();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_HorizontallyScrollable();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_VerticallyScrollable();
    private ProxyFragment ReturnNextNonClientChild(bool next, NonClientItem start);
    internal ProxyFragment CreateNonClientChild(NonClientItem item);
    internal ProxyHwnd CreateNonClientMenu();
    private ProxyFragment FindGrip(int x, int y);
    private ProxyFragment FindGripMirrored(int x, int y);
    private ProxySimple FindMenus(int x, int y);
    private static void RaiseMenuEventsOnClient(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void RaiseEventsOnClient(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void RaiseEventsOnScroll(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void RaiseEventsOnWindow(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
}
internal class MS.Internal.AutomationProxies.ProxyFragment : ProxySimple {
    internal ProxyFragment(IntPtr hwnd, ProxyFragment parent, int item);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.ElementProviderFromPoint(double x, double y);
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.GetFocus();
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(NavigateDirection direction);
    internal virtual void RecursiveRaiseEvents(object idProp, AutomationPropertyChangedEventArgs e);
    internal static ProxySimple DrillDownFragment(ProxyFragment fragment, int x, int y);
}
internal class MS.Internal.AutomationProxies.ProxyHwnd : ProxyFragment {
    internal ProxyRaiseEvents _createOnEvent;
    protected bool _fControlHasLabel;
    private IntPtr _controlLabel;
    internal string HelpText { get; }
    internal ProxyHwnd(IntPtr hwnd, ProxyFragment parent, int item);
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual string GetAccessKey();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_HelpText();
    private sealed virtual override void System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventAdded(int eventIdAsInt, Int32[] propertiesAsInts);
    private sealed virtual override void System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventRemoved(int eventIdAsInt, Int32[] propertiesAsInts);
    protected virtual Int32[] PropertyToWinEvent(AutomationProperty idProp);
    protected virtual EvtIdProperty[] EventToWinEvent(AutomationEvent idEvent, Int32& cEvent);
    protected static bool PtInClientRect(IntPtr hwnd, int x, int y);
    protected static string GetLabelAccessKey(IntPtr hwnd);
    private EvtIdProperty[] PropertyToWinEvent(AutomationProperty[] aProps, Int32& cEvent);
}
internal class MS.Internal.AutomationProxies.ProxySimple : object {
    internal IntPtr _hwnd;
    internal int _item;
    internal ProxyFragment _parent;
    internal string _sType;
    internal string _sAutomationId;
    internal bool _fIsKeyboardFocusable;
    internal static IntPtr _hwndDesktop;
    internal static int Win32ProviderRuntimeIdBase;
    protected FormControlState _windowsForms;
    protected ControlType _cControlType;
    protected bool _fHasPersistentID;
    protected bool _fNonClientAreaElement;
    protected bool _fSubTree;
    protected bool _fIsContent;
    protected IAccessible _IAccessible;
    internal ProviderOptions ProviderOptions { get; }
    internal Rect BoundingRectangle { get; }
    internal IRawElementProviderSimple HostRawElementProvider { get; }
    internal string HelpText { get; }
    internal string LocalizedName { get; }
    private ProviderOptions System.Windows.Automation.Provider.IRawElementProviderSimple.ProviderOptions { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderSimple.HostRawElementProvider { get; }
    private Rect System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle { get; }
    private IRawElementProviderFragmentRoot System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot { get; }
    internal IAccessible AccessibleObject { get; internal set; }
    internal IntPtr WindowHandle { get; }
    internal int WindowStyle { get; }
    internal int WindowExStyle { get; }
    internal ProxySimple(IntPtr hwnd, ProxyFragment parent, int item);
    private static ProxySimple();
    internal virtual ProviderOptions get_ProviderOptions();
    internal virtual Rect get_BoundingRectangle();
    internal virtual bool SetFocus();
    internal virtual Int32[] GetRuntimeId();
    internal Int32[] MakeRuntimeId();
    internal virtual IRawElementProviderSimple get_HostRawElementProvider();
    internal virtual ProxySimple GetParent();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual bool IsKeyboardFocusable();
    internal virtual bool IsOffscreen();
    internal virtual string GetAccessKey();
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual ProxySimple[] GetEmbeddedFragmentRoots();
    internal virtual string get_HelpText();
    internal virtual string get_LocalizedName();
    internal virtual void DispatchEvents(int eventId, object idProp, int idObject, int idChild);
    internal virtual void RecursiveRaiseEvents(object idProp, AutomationPropertyChangedEventArgs e);
    private sealed virtual override ProviderOptions System.Windows.Automation.Provider.IRawElementProviderSimple.get_ProviderOptions();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderSimple.get_HostRawElementProvider();
    private sealed virtual override Rect System.Windows.Automation.Provider.IRawElementProviderFragment.get_BoundingRectangle();
    private sealed virtual override IRawElementProviderFragment System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(NavigateDirection direction);
    private sealed virtual override IRawElementProviderFragmentRoot System.Windows.Automation.Provider.IRawElementProviderFragment.get_FragmentRoot();
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId();
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPatternProvider(int patternId);
    private sealed virtual override object System.Windows.Automation.Provider.IRawElementProviderSimple.GetPropertyValue(int propertyId);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots();
    private sealed virtual override void System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus();
    internal bool GetClickablePoint(Win32Point& pt, bool fClipClientRect);
    internal string GetAccessibleName(int item);
    internal virtual IAccessible get_AccessibleObject();
    internal virtual void set_AccessibleObject(IAccessible value);
    internal IntPtr get_WindowHandle();
    internal int get_WindowStyle();
    internal int get_WindowExStyle();
    protected virtual bool IsFocused();
    protected bool IsHwndElement();
}
internal abstract class MS.Internal.AutomationProxies.QueueItem : object {
    internal abstract virtual void Process();
}
internal class MS.Internal.AutomationProxies.QueueProcessor : object {
    private Queue _q;
    private AutoResetEvent _ev;
    internal QueueProcessor(int initCapacity);
    internal void StartOnThread();
    internal bool PostSyncWorkItem(QueueItem workItem);
    private void WaitForWork();
}
internal class MS.Internal.AutomationProxies.RemoteMemoryBlock : SafeHandleZeroOrMinusOneIsInvalid {
    private SafeProcessHandle _processHandle;
    internal IntPtr Address { get; }
    internal RemoteMemoryBlock(int cbSize, SafeProcessHandle processHandle);
    protected virtual bool ReleaseHandle();
    internal IntPtr get_Address();
    internal void WriteTo(IntPtr sourceAddress, IntPtr cbSize);
    internal void ReadFrom(IntPtr remoteAddress, IntPtr destAddress, IntPtr cbSize);
    internal void ReadFrom(SafeCoTaskMem destAddress, IntPtr cbSize);
    internal void ReadFrom(IntPtr destAddress, IntPtr cbSize);
    internal bool ReadString(String& str, int maxLength);
}
internal class MS.Internal.AutomationProxies.SafeCoTaskMem : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeCoTaskMem(int length);
    internal string GetStringAuto();
    internal string GetStringUni(int length);
    protected virtual bool ReleaseHandle();
}
internal class MS.Internal.AutomationProxies.SafeProcessHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeProcessHandle(IntPtr hwnd);
    protected virtual bool ReleaseHandle();
}
internal class MS.Internal.AutomationProxies.SafeThemeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal SafeThemeHandle(IntPtr preexistingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    private static IntPtr CloseThemeData(IntPtr handle);
}
[FlagsAttribute]
internal enum MS.Internal.AutomationProxies.SendMouseInputFlags : Enum {
    public int value__;
    public static SendMouseInputFlags Move;
    public static SendMouseInputFlags LeftDown;
    public static SendMouseInputFlags LeftUp;
    public static SendMouseInputFlags RightDown;
    public static SendMouseInputFlags RightUp;
    public static SendMouseInputFlags MiddleDown;
    public static SendMouseInputFlags MiddleUp;
    public static SendMouseInputFlags XDown;
    public static SendMouseInputFlags XUp;
    public static SendMouseInputFlags Wheel;
    public static SendMouseInputFlags Absolute;
}
internal class MS.Internal.AutomationProxies.ThemePart : object {
    private SafeThemeHandle _hTheme;
    internal ThemePart(IntPtr hwnd, string sClass);
    public sealed virtual void Dispose();
    internal SIZE Size(int iPartId, int iStateId);
    private static IntPtr GetThemePartSize(SafeThemeHandle hTheme, IntPtr hdc, int iPartId, int iStateId, IntPtr prc, int eSize, SIZE* psz);
    private static IntPtr OpenThemeData(IntPtr hwnd, string s);
}
internal enum MS.Internal.AutomationProxies.TomAlignment : Enum {
    public int value__;
    public static TomAlignment tomUndefined;
    public static TomAlignment tomAlignLeft;
    public static TomAlignment tomAlignCenter;
    public static TomAlignment tomAlignRight;
    public static TomAlignment tomAlignJustify;
    public static TomAlignment tomAlignDecimal;
    public static TomAlignment tomAlignBar;
}
internal enum MS.Internal.AutomationProxies.TomAnimation : Enum {
    public int value__;
    public static TomAnimation tomUndefined;
    public static TomAnimation tomNoAnimation;
    public static TomAnimation tomLasVegasLights;
    public static TomAnimation tomBlinkingBackground;
    public static TomAnimation tomSparkleText;
    public static TomAnimation tomMarchingBlackAnts;
    public static TomAnimation tomMarchingRedAnts;
    public static TomAnimation tomShimmer;
}
internal enum MS.Internal.AutomationProxies.TomBool : Enum {
    public int value__;
    public static TomBool tomUndefined;
    public static TomBool tomTrue;
    public static TomBool tomFalse;
}
internal enum MS.Internal.AutomationProxies.TomConst : Enum {
    public int value__;
    public static TomConst tomUndefined;
    public static TomConst tomAutocolor;
}
internal enum MS.Internal.AutomationProxies.TomExtend : Enum {
    public int value__;
    public static TomExtend tomMove;
    public static TomExtend tomExtend;
}
[FlagsAttribute]
internal enum MS.Internal.AutomationProxies.TomGetPoint : Enum {
    public int value__;
    public static TomGetPoint TA_RIGHT;
    public static TomGetPoint TA_CENTER;
    public static TomGetPoint TA_BOTTOM;
    public static TomGetPoint TA_BASELINE;
    public static TomGetPoint tomStart;
}
internal enum MS.Internal.AutomationProxies.TomLeader : Enum {
    public int value__;
    public static TomLeader tomDots;
    public static TomLeader tomDashes;
    public static TomLeader tomLines;
}
[FlagsAttribute]
internal enum MS.Internal.AutomationProxies.TomListType : Enum {
    public int value__;
    public static TomListType tomUndefined;
    public static TomListType tomListNone;
    public static TomListType tomListBullet;
    public static TomListType tomListNumberAsArabic;
    public static TomListType tomListNumberAsLCLetter;
    public static TomListType tomListNumberAsUCLetter;
    public static TomListType tomListNumberAsLCRoman;
    public static TomListType tomListNumberAsUCRoman;
    public static TomListType tomListNumberAsSequence;
    public static TomListType tomListTypeMask;
    public static TomListType tomListParentheses;
    public static TomListType tomListPeriod;
    public static TomListType tomListPlain;
    public static TomListType tomListFormatMask;
}
[FlagsAttribute]
internal enum MS.Internal.AutomationProxies.TomMatch : Enum {
    public int value__;
    public static TomMatch tomMatchWord;
    public static TomMatch tomMatchCase;
    public static TomMatch tomMatchPattern;
}
[FlagsAttribute]
internal enum MS.Internal.AutomationProxies.TomSelectionFlags : Enum {
    public int value__;
    public static TomSelectionFlags tomSelStartActive;
    public static TomSelectionFlags tomSelAtEOL;
    public static TomSelectionFlags tomSelOvertype;
    public static TomSelectionFlags tomSelActive;
    public static TomSelectionFlags tomSelReplace;
}
internal enum MS.Internal.AutomationProxies.TomStartEnd : Enum {
    public int value__;
    public static TomStartEnd tomStart;
    public static TomStartEnd tomEnd;
}
internal enum MS.Internal.AutomationProxies.TomStory : Enum {
    public int value__;
    public static TomStory tomUnknownStory;
    public static TomStory tomMainTextStory;
    public static TomStory tomFootnotesStory;
    public static TomStory tomEndnotesStory;
    public static TomStory tomCommentsStory;
    public static TomStory tomTextFrameStory;
    public static TomStory tomEvenPagesHeaderStory;
    public static TomStory tomPrimaryHeaderStory;
    public static TomStory tomEvenPagesFooterStory;
    public static TomStory tomPrimaryFooterStory;
    public static TomStory tomFirstPageHeaderStory;
    public static TomStory tomFirstPageFooterStory;
}
internal enum MS.Internal.AutomationProxies.TomUnderline : Enum {
    public int value__;
    public static TomUnderline tomUndefined;
    public static TomUnderline tomTrue;
    public static TomUnderline tomNone;
    public static TomUnderline tomSingle;
    public static TomUnderline tomWords;
    public static TomUnderline tomDouble;
    public static TomUnderline tomDotted;
    public static TomUnderline tomDash;
    public static TomUnderline tomDashDot;
    public static TomUnderline tomDashDotDot;
    public static TomUnderline tomWave;
    public static TomUnderline tomThick;
    public static TomUnderline tomHair;
}
internal enum MS.Internal.AutomationProxies.TomUnit : Enum {
    public int value__;
    public static TomUnit tomCharacter;
    public static TomUnit tomWord;
    public static TomUnit tomSentence;
    public static TomUnit tomParagraph;
    public static TomUnit tomLine;
    public static TomUnit tomStory;
    public static TomUnit tomScreen;
    public static TomUnit tomSection;
    public static TomUnit tomColumn;
    public static TomUnit tomRow;
    public static TomUnit tomWindow;
    public static TomUnit tomCell;
    public static TomUnit tomCharFormat;
    public static TomUnit tomParaFormat;
    public static TomUnit tomTable;
    public static TomUnit tomObject;
}
internal class MS.Internal.AutomationProxies.ToolbarItem : ProxySimple {
    protected int _idCommand;
    private bool _isToggleButton;
    internal Rect BoundingRectangle { get; }
    internal string HelpText { get; }
    internal string LocalizedName { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    private string Text { get; }
    private ToggleState ToggleState { get; }
    internal ToolbarItem(IntPtr hwnd, ProxyFragment parent, int item, int idCommand);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_HelpText();
    internal virtual string get_LocalizedName();
    internal virtual bool SetFocus();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    internal static Rect GetBoundingRectangle(IntPtr hwnd, int item);
    protected virtual bool IsFocused();
    protected bool IsSeparator();
    private string get_Text();
    private void GetItemId(String& itemId);
    private string GetItemToolTipText();
    private void Invoke();
    private ToggleState get_ToggleState();
}
internal class MS.Internal.AutomationProxies.ToolbarItemAsMenuItem : ToolbarItem {
    private Accessible _acc;
    internal ToolbarItemAsMenuItem(IntPtr hwnd, ProxyFragment parent, int item, int idCommand, Accessible acc);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
}
internal class MS.Internal.AutomationProxies.WindowsAltTab : ProxyHwnd {
    private static int MaxItemNameLength;
    private ALTTABINFO _altTabInfo;
    private int FocusIndex { get; }
    private int Rows { get; }
    private int Columns { get; }
    private int Count { get; }
    internal WindowsAltTab(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    private ProxySimple CreateAltTabItem(int item);
    private int ItemIndex(int row, int column);
    private int get_FocusIndex();
    internal static bool GetAltTabInfo(IntPtr hwnd, int item, ALTTABINFO& altTabInfo, StringBuilder itemText);
    private int get_Rows();
    private int get_Columns();
    private int get_Count();
}
internal class MS.Internal.AutomationProxies.WindowsButton : ProxyHwnd {
    private ButtonType _type;
    private int _style;
    private Accessible _acc;
    internal string LocalizedName { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    private ToggleState System.Windows.Automation.Provider.IToggleProvider.ToggleState { get; }
    private ToggleState ToggleState { get; }
    internal WindowsButton(IntPtr hwnd, ProxyFragment parent, ButtonType type, int style, Accessible acc);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_LocalizedName();
    protected virtual EvtIdProperty[] EventToWinEvent(AutomationEvent idEvent, Int32& cEvent);
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.IToggleProvider.Toggle();
    private sealed virtual override ToggleState System.Windows.Automation.Provider.IToggleProvider.get_ToggleState();
    private void Invoke();
    private bool InShellTray();
    private bool IsStartButton();
    private bool IsShowAllProgramsButton();
    private IntPtr GetRootAncestor();
    private ToggleState get_ToggleState();
    private bool ContainsRadioButtons();
    private bool FindRadioButtonChild(IntPtr hwnd, Void* lParam);
    private string GetLocalizedName();
    private IntPtr GetSelection();
    private bool FindSelectedRadioButtonChild(IntPtr hwnd, Void* lParam);
}
internal class MS.Internal.AutomationProxies.WindowsComboBox : ProxyHwnd {
    internal static string Combobox;
    private IntPtr _hwndEx;
    private int _comboType;
    private static string ComboboxEx32;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    private string Text { get; }
    private WindowsComboBox(IntPtr hwnd, ProxyFragment parent, IntPtr hwndEx, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual ProxySimple[] GetEmbeddedFragmentRoots();
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string str);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    internal bool IsSimpleCombo();
    internal bool IsDropDownListCombo();
    internal string GetListItemText(int index);
    internal static IntPtr HostedByComboEx(IntPtr hwnd);
    internal static bool GetComboInfo(IntPtr hwnd, COMBOBOXINFO& cbInfo);
    internal static bool GetDroppedState(IntPtr hwnd);
    internal static void Expand(IntPtr hwnd);
    internal static void Collapse(IntPtr hwnd);
    private string get_Text();
    private int GetComboType();
    private ProxySimple CreateComboButton();
    private ProxySimple CreateListBox();
    private ProxySimple CreateListBox(IntPtr hwndList);
    private static bool IsComboEx(IntPtr hwndEx);
    private bool IsEditableCombo();
    private static string SpecialText(IntPtr hwnd, int index);
    private static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void EditPortionEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void CreateEditPortionEvents(EvtIdProperty[]& editPortionEvents, Int32& counter, AutomationProperty[] aidProps);
    private bool IsComboBoxEx32();
}
internal class MS.Internal.AutomationProxies.WindowsContainer : ProxyHwnd {
    public WindowsContainer(IntPtr hwnd, ProxyHwnd parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private bool IsTopLevelWindow();
    private bool HasTabPageStyle(IntPtr hwnd);
    private bool IsTabPage(IntPtr hwnd, IntPtr& hwndTab, Int32& item);
}
internal static class MS.Internal.AutomationProxies.WindowScroll : object {
    internal static void SetScrollPercent(IntPtr hwnd, double horizontalPercent, double verticalPercent, bool forceResults);
    internal static void Scroll(IntPtr hwnd, ScrollAmount HorizontalAmount, ScrollAmount VerticalAmount, bool fForceResults);
    internal static object GetPropertyScroll(AutomationProperty idProp, IntPtr hwnd);
    internal static bool Scrollable(IntPtr hwnd, int sbFlag);
    internal static bool HasScrollableStyle(IntPtr hwnd);
    internal static bool IsScrollable(IntPtr hwnd);
    private static double GetScrollInfo(IntPtr hwnd, int sbFlag);
    private static double ScrollViewSize(IntPtr hwnd, int sbFlag);
    private static bool SetScrollPercent(IntPtr hwnd, double fScrollPos, int sbFlag, Boolean& forceResults);
    private static bool ScrollCursor(IntPtr hwnd, ScrollAmount amount, int sbFlag, bool fForceResults);
}
internal class MS.Internal.AutomationProxies.WindowsEditBox : ProxyHwnd {
    private EditboxType _type;
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.DocumentRange { get; }
    private SupportedTextSelection System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection { get; }
    internal bool IsMultiline { get; }
    internal bool IsScrollable { get; }
    internal WindowsEditBox(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual string GetAccessKey();
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual ProxySimple GetParent();
    protected virtual EvtIdProperty[] EventToWinEvent(AutomationEvent idEvent, Int32& cEvent);
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string str);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override ITextRangeProvider[] System.Windows.Automation.Provider.ITextProvider.GetSelection();
    private sealed virtual override ITextRangeProvider[] System.Windows.Automation.Provider.ITextProvider.GetVisibleRanges();
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.RangeFromChild(IRawElementProviderSimple childElement);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.RangeFromPoint(Point screenLocation);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.get_DocumentRange();
    private sealed virtual override SupportedTextSelection System.Windows.Automation.Provider.ITextProvider.get_SupportedTextSelection();
    internal bool get_IsMultiline();
    internal bool get_IsScrollable();
    internal void CharFromPos(Win32Point point, UInt16& indexLowWord, UInt16& lineLowWord);
    internal int CharFromPosEx(Win32Point point);
    internal static EditboxType GetEditboxtype(IntPtr hwnd);
    internal int GetFirstVisibleChar();
    internal int GetFirstVisibleLine();
    internal IntPtr GetFont();
    internal int GetLineCount();
    internal LOGFONT GetLogfont();
    internal Rect GetRect();
    internal void GetSel(Int32& start, Int32& end);
    internal string GetText();
    internal int GetTextLength();
    internal void GetVisibleRangePoints(Int32& start, Int32& end);
    internal bool IsReadOnly();
    internal int LineFromChar(int index);
    internal int LineIndex(int line);
    internal bool LineScroll(int charactersHorizontal, int linesVertical);
    internal int LinesPerPage();
    internal Point PosFromChar(int index);
    internal Point PosFromCharUR(int index, string text);
    internal void SetSel(int start, int end);
    internal static string Text(IntPtr hwnd);
    private int GetTextExtentPoint32(string text, SIZE& size);
    private string GetValue();
    private bool IsInsideOfCombo();
    private bool IsInsideOfSpinner();
    private static bool IsInsideOfIPAddress(IntPtr hwnd);
    private static bool IsInsideOfListView(IntPtr hwnd);
    private static int IntFromLowWord(ushort lowWord, int floor);
}
internal class MS.Internal.AutomationProxies.WindowsEditBoxRange : object {
    private WindowsEditBox _provider;
    private int _start;
    private int _end;
    private static string _lineSeparator;
    private bool IsDegenerate { get; }
    private int End { get; private set; }
    private int Length { get; }
    private int Start { get; private set; }
    internal WindowsEditBoxRange(WindowsEditBox provider, int start, int end);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextRangeProvider.Clone();
    private sealed virtual override bool System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider range);
    private sealed virtual override int System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit unit);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(int attributeId, object val, bool backwards);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextRangeProvider.FindText(string text, bool backwards, bool ignoreCase);
    private sealed virtual override object System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(int attributeId);
    private sealed virtual override Double[] System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement();
    private sealed virtual override string System.Windows.Automation.Provider.ITextRangeProvider.GetText(int maxLength);
    private sealed virtual override int System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit unit, int count);
    private sealed virtual override int System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(bool alignToTop);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITextRangeProvider.GetChildren();
    private static bool AtParagraphBoundary(string text, int index);
    private static bool AtWordBoundary(string text, int index);
    private static bool IsApostrophe(char ch);
    private object GetAttributeValue(AutomationTextAttribute attribute);
    private ArrayList GetMultilineBoundingRectangles(string text, Point mapClientToScreen, Rect clippingRectangle);
    private static object GetHorizontalTextAlignment(int style);
    private static object GetCapStyle(int style);
    private object GetReadOnly();
    private static object GetBackgroundColor();
    private static object GetFontName(LOGFONT logfont);
    private static object GetFontSize(LOGFONT logfont);
    private static object GetFontWeight(LOGFONT logfont);
    private static object GetForegroundColor();
    private static object GetItalic(LOGFONT logfont);
    private static object GetStrikethroughStyle(LOGFONT logfont);
    private static object GetUnderlineStyle(LOGFONT logfont);
    private int MoveEndpointForward(int index, TextUnit unit, int count, Int32& moved);
    private int MoveEndpointBackward(int index, TextUnit unit, int count, Int32& moved);
    private void MoveTo(int start, int end);
    private void ValidateEndpoints();
    private bool get_IsDegenerate();
    private int get_End();
    private void set_End(int value);
    private int get_Length();
    private int get_Start();
    private void set_Start(int value);
}
internal static class MS.Internal.AutomationProxies.WindowsFormsHelper : object {
    private static string _WindowsFormsClassName;
    private static int WM_GETCONTROLNAME;
    private static WindowsFormsHelper();
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple CreateButton(IntPtr hwnd);
    internal static FormControlState GetControlState(IntPtr hwnd);
    internal static bool IsWindowsFormsControl(string className);
    internal static bool IsWindowsFormsControl(IntPtr hwnd);
    internal static bool IsWindowsFormsControl(IntPtr hwnd, FormControlState& state);
    internal static string WindowsFormsID(IntPtr hwnd);
    internal static string GetControlName(IntPtr hwnd);
}
internal class MS.Internal.AutomationProxies.WindowsGrip : ProxyFragment {
    internal Rect BoundingRectangle { get; }
    public WindowsGrip(IntPtr hwnd, ProxyHwnd parent, int item);
    internal virtual Rect get_BoundingRectangle();
    internal static bool IsGripPresent(IntPtr hwnd, bool onStatusBar);
    internal static SIZE GetGripSize(IntPtr hwnd, bool onStatusBar);
}
internal class MS.Internal.AutomationProxies.WindowsHyperlink : ProxyHwnd {
    private LITEM _linkItem;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    private WindowsHyperlink(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual Rect get_BoundingRectangle();
    internal virtual string get_LocalizedName();
    protected virtual EvtIdProperty[] EventToWinEvent(AutomationEvent idEvent, Int32& cEvent);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    private ProxySimple CreateHyperlinkItem(LITEM linkItem, int index);
    private bool GetLinkItem(int item);
    private string RemoveHTMLAnchorTag(string text);
}
internal class MS.Internal.AutomationProxies.WindowsHyperlinkItem : ProxySimple {
    internal string LocalizedName { get; }
    internal WindowsHyperlinkItem(IntPtr hwnd, ProxyFragment parent, int item);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual bool SetFocus();
    internal virtual string get_LocalizedName();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
}
internal class MS.Internal.AutomationProxies.WindowsIPAddress : ProxyHwnd {
    private static int IP_ADDRESS_STRING_LENGTH;
    private static char IP_ADDRESS_SEPERATOR;
    internal static int OCTETCOUNT;
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private WindowsIPAddress(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string val);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private IPAddress GetIPAddressFromString(string strIPAddress);
    private int GetIndexOfChildWindow(IntPtr target);
    private IntPtr GetChildWindowFromIndex(int index);
}
internal class MS.Internal.AutomationProxies.WindowsListBox : ProxyHwnd {
    private bool _parentedByCombo;
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private int Length { get; }
    internal WindowsListBox(IntPtr hwnd, ProxyFragment parent, int item, bool parentedByCombo);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    protected virtual Int32[] PropertyToWinEvent(AutomationProperty idProp);
    private ProxySimple CreateListboxItem(int index);
    private int get_Length();
    private bool IsParentedByCombo();
    private static void RaiseEventsOnClient(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void RaiseEventsOnWindow(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private int GetOtherSelection(int skipItem);
    private int GetSelectionCount();
    private bool HasSelection();
    private bool HasOtherSelections(int skipItem);
    private bool ClearAll();
    private bool IsMultipleSelection();
    private bool IsWinFormCheckedListBox();
}
internal class MS.Internal.AutomationProxies.WindowsListView : ProxyHwnd {
    internal static GroupManagerCollection _groupsCollection;
    internal static String[] ListViewViews;
    private static EvtIdProperty[] _groupEvents;
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor { get; }
    private int System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView { get; }
    private static WindowsListView();
    internal WindowsListView(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(double horizontalPercent, double verticalPercent);
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalViewSize();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalViewSize();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_HorizontallyScrollable();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_VerticallyScrollable();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetRowHeaders();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders();
    private sealed virtual override RowOrColumnMajor System.Windows.Automation.Provider.ITableProvider.get_RowOrColumnMajor();
    private sealed virtual override string System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(int viewID);
    private sealed virtual override void System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(int viewID);
    private sealed virtual override Int32[] System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews();
    private sealed virtual override int System.Windows.Automation.Provider.IMultipleViewProvider.get_CurrentView();
    internal static bool SetItemFocused(IntPtr hwnd, int item);
    internal static bool IsItemFocused(IntPtr hwnd, int item);
    internal static bool IsDetailMode(IntPtr hwnd);
    internal static bool IsListMode(IntPtr hwnd);
    internal static bool IsImplementingGrid(IntPtr hwnd);
    internal static int GetColumnCount(IntPtr hwnd);
    internal static int GetRowCount(IntPtr hwnd);
    internal static int GetColumnCountOtherModes(IntPtr hwnd);
    internal static int GetRowCountListMode(IntPtr hwnd, int itemCount);
    internal static bool IsGroupViewEnabled(IntPtr hwnd);
    internal static void GroupSpecificEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal static bool InReportView(IntPtr hwnd);
    internal static void RemoveGroupAndRaiseLogicalChangedEvent(IntPtr hwnd);
    internal static void RaiseLogicalChangedEvent(IntPtr hwnd);
    internal static int GetItemCount(IntPtr hwnd);
    internal static int GetSelectedItemCount(IntPtr hwnd);
    internal static int GetStartOfSelectedItems(IntPtr hwnd);
    internal static int GetItemNext(IntPtr hwnd, int item, int flags);
    internal static bool IsIconView(IntPtr hwnd);
    internal static int ListViewGetView(IntPtr hwnd);
    internal static int ApproximateViewRect(IntPtr hwnd);
    internal static bool Scroll(IntPtr hwnd, IntPtr dx, IntPtr dy);
    internal static bool GetItemRect(IntPtr hwnd, int item, int lvir, Win32Rect& itemRectangle);
    internal static bool ListViewIsGroupViewEnabled(IntPtr hwnd);
    internal static bool UnselectAll(IntPtr hwnd);
    internal static bool SelectItem(IntPtr hwnd, int item);
    internal static bool UnSelectItem(IntPtr hwnd, int item);
    internal static bool IsItemSelected(IntPtr hwnd, int listItem);
    internal static bool ListViewEditable(IntPtr hwnd);
    internal static bool ListViewInvokable(IntPtr hwnd);
    internal static IntPtr ListViewEditLabel(IntPtr hwnd, int item);
    internal static bool ListViewSingleClickActivate(IntPtr hwnd);
    internal static bool MultiSelected(IntPtr hwnd);
    internal static bool Scrollable(IntPtr hwnd);
    internal static bool EnsureVisible(IntPtr hwnd, int item, bool partialOK);
    internal static IntPtr ListViewGetHeader(IntPtr hwnd);
    internal static string GetItemText(IntPtr hwnd, LVITEM item);
    internal static LVHITTESTINFO_INTERNAL SubitemHitTest(IntPtr hwnd, Win32Point pt);
    internal static LVHITTESTINFO_INTERNAL SubitemHitTest(IntPtr hwnd, int item, Win32Point pt);
    internal static int HeaderItemCount(IntPtr hwnd);
    internal static bool CheckBoxes(IntPtr hwnd);
    internal static int GetCheckedState(IntPtr hwnd, int item);
    internal static bool ListViewAutoArrange(IntPtr hwnd);
    public static bool FullRowSelect(IntPtr hwnd);
    public static bool HasJustifyColumnsExStyle(IntPtr hwnd);
    public static bool GetSubItemRect(IntPtr hwnd, int item, int subItem, int lvir, Win32Rect& itemRectangle);
    internal static string GetItemToolTipText(IntPtr hwnd);
    protected virtual Int32[] PropertyToWinEvent(AutomationProperty idProp);
    private ProxyFragment CreateListViewItem(int index);
    private ProxyFragment CreateListViewGroup(int groupID);
    private ProxySimple CreateListViewItemCheckIfInGroup(int item);
    private ProxyFragment CreateListViewItemOrStartMenuItem(ProxyFragment parent, int item);
    private bool InStartMenu();
    private bool SetScrollPercent(double fScrollPos, int sbFlag, int cPelsAll, Int32& delta);
    private IRawElementProviderSimple GetCellInDetailMode(int row, int column);
    private IRawElementProviderSimple GetCellInOtherModes(int row, int column, int maxColumn, int maxRow);
    private static int GetRowCountOtherModes(IntPtr hwnd);
    private static bool ListViewList(IntPtr hwnd);
    private static bool GetItemPosition(IntPtr hwnd, int item, Win32Point& pt);
    private static int GetExtendedListViewStyle(IntPtr hwnd);
    private static int GetItemState(IntPtr hwnd, int item, int stateMask);
    private static bool SetItemState(IntPtr hwnd, int item, int stateMask, int state);
    private bool PtInListViewHeader(int x, int y);
    private static void RaiseEventsOnClient(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
}
internal class MS.Internal.AutomationProxies.WindowsListViewGroup : ProxyFragment {
    private int _groupID;
    private bool _isComctrlV6OnOsVerV6orHigher;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState { get; }
    internal int ID { get; }
    internal WindowsListViewGroup(IntPtr hwnd, ProxyFragment parent, int groupID);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    protected virtual bool IsFocused();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private void CheckControlEnabled();
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Expand();
    private bool IsCollapsed();
    internal static bool IsCollapsed(IntPtr hwnd, int groupID);
    private sealed virtual override void System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse();
    private sealed virtual override ExpandCollapseState System.Windows.Automation.Provider.IExpandCollapseProvider.get_ExpandCollapseState();
    internal static ProxySimple GetFocusInGroup(IntPtr hwnd, ProxyFragment parent);
    internal int get_ID();
    internal static int GetColumnCountExternal(IntPtr hwnd, int groupID);
    internal static GroupInfo GetGroupInfo(IntPtr hwnd, int groupID);
    private ProxyFragment CreateListViewItem(int index);
    private void ExpandOrCollapse(bool collapse);
    private IRawElementProviderSimple GetCellInDetailMode(int row, int column);
    private IRawElementProviderSimple GetCellInOtherModes(int row, int column, int maxColumn);
    private static bool IsGroupValid(IntPtr hwnd, int groupID);
    private static NewItemInDimension IsNewColumn(Win32Rect rc1, Win32Rect rc2);
    private static NewItemInDimension IsNewRow(Win32Rect rc1, Win32Rect rc2);
    private static int GetColumnCount(IntPtr hwnd, int groupID);
    private static int GetRowCount(IntPtr hwnd, int groupID);
    private static int GetCountOfItemsInDimension(IntPtr hwnd, int groupID, IsNewItemInDimension comparer);
    private ProxySimple CreateGroupSubsetLink(int item);
}
internal class MS.Internal.AutomationProxies.WindowsListViewScrollBar : WindowsScrollBar {
    internal WindowsListViewScrollBar(IntPtr hwnd, ProxyFragment parent, int item, int sbFlag);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
}
internal class MS.Internal.AutomationProxies.WindowsMenu : ProxyHwnd {
    internal static string MenuClassName;
    internal static int TimeOut;
    private IntPtr _hmenu;
    private MenuType _type;
    private static EvtIdProperty[] _menuEvents;
    private static Hashtable _expandedMenus;
    private static int _eventListeners;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    internal int Count { get; }
    internal WindowsMenu(IntPtr hwnd, ProxyFragment parent, IntPtr hmenu, MenuType type, int item);
    private static WindowsMenu();
    internal static ProxySimple CreateMenuItemFromEvent(IntPtr hwndMenu, int eventId, int idChild, int idObject);
    private void FixMDIMenuType();
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static WindowsMenu CreateSystemMenu(IntPtr hwnd, ProxyFragment parent);
    internal static IRawElementProviderSimple CreateFocusedMenuItem(IntPtr hwnd, int idChild, int idObject);
    internal virtual Int32[] GetRuntimeId();
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual Rect get_BoundingRectangle();
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal MenuItem CreateMenuItem(int index);
    internal static bool GetMenuBarInfo(IntPtr hwnd, int idObject, UInt32 idItem, MENUBARINFO& mbi);
    internal static MenuItem GetHierarchyParent(IntPtr hwnd);
    private static bool GetSubMenuParent(IntPtr hwndMenu, IntPtr& menuParent, IntPtr& hwndParent, Int32& ownerMenuItemPos, MenuType& parentType);
    internal static IntPtr WindowFromSubmenu(IntPtr submenu);
    internal static MenuType GetSubMenuType(IntPtr hwnd, IntPtr hMenu);
    private static int GetMenuItemParent(IntPtr hmenuPossibleParent, IntPtr hmenuChild);
    internal int get_Count();
    internal static IntPtr HmenuFromHwnd(IntPtr hwnd);
    internal static bool IsInSystemMenuMode();
    internal static IntPtr GetSystemMenuHandle(IntPtr hwnd);
    private Rect GetBoundingRectangle();
    private string GetLocalizedNameFromType();
    private static IntPtr GetSystemPopupMenu(IntPtr hwnd);
    private static bool IsSystemPopupMenu(IntPtr hmenu);
    private static bool IsWindowSubMenu(IntPtr hwnd);
    private static int GetHighlightedMenuItem(IntPtr hmenu);
    private static IntPtr GetPopupHwndForHMenu(IntPtr hmenu);
    private static void MenuEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static bool MenuRelatedEvent(AutomationEvent eventId, AutomationProperty[] aidProps);
    private static ProxyFragment GetSystemPopupParent();
}
internal class MS.Internal.AutomationProxies.WindowsNonControl : ProxyHwnd {
    private WindowsNonControl(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal virtual object GetElementProperty(AutomationProperty idProp);
}
internal class MS.Internal.AutomationProxies.WindowsProgressBar : ProxyHwnd {
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private int ValuePercent { get; }
    private WindowsProgressBar(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private int get_ValuePercent();
}
internal class MS.Internal.AutomationProxies.WindowsRebar : ProxyHwnd {
    private static int RBBIM_CHILD;
    private int Count { get; }
    private WindowsRebar(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private RebarBandItem CreateRebarItem(int index);
    private int get_Count();
    private int getRebarBandIDFromPoint(Win32Point pt);
}
internal class MS.Internal.AutomationProxies.WindowsRichEdit : ProxyHwnd {
    private ITextDocument _document;
    private EditboxType _type;
    private static int _raiseEventsOldSelectionStart;
    private static int _raiseEventsOldSelectionEnd;
    private static int _NO_ENDPOINT;
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    private ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.DocumentRange { get; }
    private SupportedTextSelection System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection { get; }
    internal ITextDocument Document { get; }
    internal bool IsMultiline { get; }
    internal bool ReadOnly { get; }
    private WindowsRichEdit(IntPtr hwnd, ProxyFragment parent, int style);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string str);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private sealed virtual override ITextRangeProvider[] System.Windows.Automation.Provider.ITextProvider.GetSelection();
    private sealed virtual override ITextRangeProvider[] System.Windows.Automation.Provider.ITextProvider.GetVisibleRanges();
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.RangeFromChild(IRawElementProviderSimple childElement);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.RangeFromPoint(Point screenLocation);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextProvider.get_DocumentRange();
    private sealed virtual override SupportedTextSelection System.Windows.Automation.Provider.ITextProvider.get_SupportedTextSelection();
    internal ITextRange GetVisibleRange();
    internal ITextDocument get_Document();
    internal bool get_IsMultiline();
    internal bool get_ReadOnly();
    internal bool IsReadOnly();
    private void EnsureTextDocument();
    private string GetValue();
    private void GetEmbeddedObjectText(object embeddedObject, StringBuilder sbText);
    private bool IsDocument();
    private bool OnCommandBar();
    private void RaiseTextSelectionEvent(int eventId, object idProp, int idObject, int idChild);
}
internal class MS.Internal.AutomationProxies.WindowsRichEditRange : object {
    private ITextRange _range;
    private WindowsRichEdit _pattern;
    internal WindowsRichEditRange(ITextRange range, WindowsRichEdit pattern);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextRangeProvider.Clone();
    private sealed virtual override bool System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider range);
    private sealed virtual override int System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit unit);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(int attributeId, object val, bool backwards);
    private sealed virtual override ITextRangeProvider System.Windows.Automation.Provider.ITextRangeProvider.FindText(string text, bool backwards, bool ignoreCase);
    private sealed virtual override object System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(int attributeId);
    private sealed virtual override Double[] System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement();
    private sealed virtual override string System.Windows.Automation.Provider.ITextRangeProvider.GetText(int maxLength);
    private sealed virtual override int System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit unit, int count);
    private sealed virtual override int System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(bool alignToTop);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ITextRangeProvider.GetChildren();
    private static bool AttributeValuesAreEqual(object v1, object v2);
    private ITextRangeProvider FindAttributeForwards(AutomationTextAttribute attribute, object val, TomUnit unit);
    private ITextRangeProvider FindAttributeBackwards(AutomationTextAttribute attribute, object val, TomUnit unit);
    private object GetAttributeValueForRange(ITextRange range, AutomationTextAttribute attribute);
    private static object GetAnimationStyle(ITextFont font);
    private static object GetBackgroundColor(ITextFont font);
    private static object GetBulletStyle(ITextPara para);
    private static object GetCapStyle(ITextFont font);
    private static object GetFontName(ITextRange range);
    private static object GetFontSize(ITextFont font);
    private static object GetFontWeight(ITextFont font);
    private static object GetForegroundColor(ITextFont font);
    private static object GetHorizontalTextAlignment(ITextPara para);
    private static object GetIndentationFirstLine(ITextPara para);
    private static object GetIndentationLeading(ITextPara para);
    private static object GetIndentationTrailing(ITextPara para);
    private static object GetHidden(ITextFont font);
    private static object GetItalic(ITextFont font);
    private static object GetOutlineStyles(ITextFont font);
    private object GetReadOnly(ITextFont font);
    private static object GetStrikethroughStyle(ITextFont font);
    private static object GetSubscript(ITextFont font);
    private static object GetSuperscript(ITextFont font);
    private static object GetTabs(ITextPara para);
    private static object GetUnderlineStyle(ITextFont font);
    private int MoveFormatUnit(int count);
    private int MoveStartFormatUnit(int count);
    private int MoveEndFormatUnit(int count);
    private bool MoveStartOneFormatUnitForward();
    private bool MoveStartOneFormatUnitBackward();
    private bool MoveEndOneFormatUnitForward();
    private bool MoveEndOneFormatUnitBackward();
    internal static bool RangeGetPoint(ITextRange range, TomGetPoint type, Int32& x, Int32& y);
    private static TomUnit TomUnitFromTextUnit(TextUnit unit, string name);
    private static ITextRange FirstUnit(ITextRange range);
    private static ITextRange LastUnit(ITextRange range);
    private static bool NextUnit(int end, ITextRange subrange, TomUnit unit);
    private static bool PreviousUnit(int start, ITextRange subrange, TomUnit unit);
    private static Rect CalculateOneLineRangeRectangle(ITextRange lineRange, Rect clientRect);
    private static bool TrimRectangleByRangeCorners(ITextRange range, Rect& rect);
}
internal class MS.Internal.AutomationProxies.WindowsScrollBar : ProxyHwnd {
    protected int _sbFlag;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    internal WindowsScrollBar(IntPtr hwnd, ProxyFragment parent, int item, int sbFlag);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual Int32[] GetRuntimeId();
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    internal static bool HasVerticalScrollBar(IntPtr hwnd);
    internal static bool HasHorizontalScrollBar(IntPtr hwnd);
    internal static bool IsScrollBarVertical(IntPtr hwnd, int sbFlag);
    internal static bool IsScrollBarWithThumb(IntPtr hwnd, int sbFlag);
    private ProxySimple CreateScrollBitsItem(ScrollBarItem index);
    private int GetScrollMaxValue(ScrollInfo si);
    private int GetScrollValue(ScrollBarInfo info);
    private void SetScrollValue(int val);
    private static bool HasValuePattern(IntPtr hwnd, int sbFlag);
    private bool IsEnabled();
    private bool IsStandAlone();
}
internal class MS.Internal.AutomationProxies.WindowsScrollBarBits : ProxySimple {
    private int _sbFlag;
    private static String[] _asNames;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    internal WindowsScrollBarBits(IntPtr hwnd, ProxyFragment parent, int item, int sbFlag);
    private static WindowsScrollBarBits();
    internal static ProxySimple CreateFromChildId(IntPtr hwnd, ProxyFragment parent, int idChild, int sbFlag);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual Rect get_BoundingRectangle();
    internal virtual string get_LocalizedName();
    private sealed virtual override void System.Windows.Automation.Provider.IInvokeProvider.Invoke();
    internal static Rect GetBoundingRectangle(IntPtr hwnd, ProxyFragment parent, ScrollBarItem item, int sbFlag);
    internal static Rect GetVerticalScrollbarBitBoundingRectangle(IntPtr hwnd, ScrollBarItem item, ScrollBarInfo sbi);
    internal static Rect GetHorizontalScrollbarBitBoundingRectangle(IntPtr hwnd, ScrollBarItem item, ScrollBarInfo sbi);
    private void Scroll(ScrollAmount amount, int style);
}
internal class MS.Internal.AutomationProxies.WindowsSlider : ProxyHwnd {
    private bool _fHorizontal;
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private int LineSize { get; }
    private int Min { get; }
    private int Max { get; }
    private int PageSize { get; }
    private WindowsSlider(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private ProxySimple CreateSliderItem(SItem item);
    private bool IsHorizontalSlider();
    private bool IsVerticalSlider();
    private int GetSliderValue();
    private void SetSliderValue(int val);
    private int get_LineSize();
    private int get_Min();
    private int get_Max();
    private int get_PageSize();
}
internal class MS.Internal.AutomationProxies.WindowsSpinner : ProxyHwnd {
    private WindowsEditBox _elEdit;
    private WindowsUpDown _elUpDown;
    internal Rect BoundingRectangle { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    internal WindowsSpinner(IntPtr hwndUpDown, IntPtr hwndEdit, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double obj);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    internal static bool IsSpinnerEdit(IntPtr hwnd);
    internal static IntPtr GetUpDownFromEdit(IntPtr hwnd);
}
internal class MS.Internal.AutomationProxies.WindowsStartMenu : ProxyHwnd {
    public WindowsStartMenu(IntPtr hwnd, ProxyHwnd parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
}
internal class MS.Internal.AutomationProxies.WindowsStatic : ProxyHwnd {
    private StaticType _type;
    private int _style;
    internal string LocalizedName { get; }
    private WindowsStatic(IntPtr hwnd, ProxyFragment parent, StaticType type, int style);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual bool IsKeyboardFocusable();
    internal virtual string get_LocalizedName();
    private static bool IsLinkLabel(IntPtr hwnd);
    private static StaticType GetStaticTypeFromStyle(int style);
}
internal class MS.Internal.AutomationProxies.WindowsStatusBar : ProxyHwnd {
    private bool _fHasGrip;
    private Accessible _acc;
    private static int GripItemID;
    private static int SBARS_SIZEGRIP;
    internal string LocalizedName { get; }
    private int System.Windows.Automation.Provider.IGridProvider.RowCount { get; }
    private int System.Windows.Automation.Provider.IGridProvider.ColumnCount { get; }
    private int Count { get; }
    internal WindowsStatusBar(IntPtr hwnd, ProxyFragment parent, int item, Accessible acc);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal ProxySimple CreateStatusBarPane(int index);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IGridProvider.GetItem(int row, int column);
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_RowCount();
    private sealed virtual override int System.Windows.Automation.Provider.IGridProvider.get_ColumnCount();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private int get_Count();
    private static IntPtr GetChildHwnd(IntPtr hwnd, Rect rc);
    private static bool FindChildFromRect(IntPtr hwnd, Void* lParam);
}
internal class MS.Internal.AutomationProxies.WindowsSysHeader : ProxyHwnd {
    internal string LocalizedName { get; }
    private int Length { get; }
    internal WindowsSysHeader(IntPtr hwnd);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_LocalizedName();
    private void GetVisibleHeaderItemRange(HeaderItem& firstVisibleHeaderItem, HeaderItem& lastVisibleHeaderItem);
    internal void ScrollIntoView(HeaderItem headerItem);
    private static bool HeaderIsHidden(IntPtr hwnd);
    private static int OrderToIndex(IntPtr hwnd, int order);
    private static int HeaderItemCount(IntPtr hwnd);
    private int GetItemFromIndex(int index);
    private ProxySimple CreateHeaderItem(int index);
    private int get_Length();
}
internal class MS.Internal.AutomationProxies.WindowsTab : ProxyHwnd {
    private static int SpinControl;
    private static EvtIdProperty[] _upDownEvents;
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize { get; }
    private double System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable { get; }
    private bool System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable { get; }
    public WindowsTab(IntPtr hwnd, ProxyFragment parent, int item);
    private static WindowsTab();
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    private sealed virtual override void System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(double horizontalPercent, double verticalPercent);
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalScrollPercent();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_HorizontalViewSize();
    private sealed virtual override double System.Windows.Automation.Provider.IScrollProvider.get_VerticalViewSize();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_HorizontallyScrollable();
    private sealed virtual override bool System.Windows.Automation.Provider.IScrollProvider.get_VerticallyScrollable();
    internal static int GetItemCount(IntPtr hwnd);
    internal ProxyFragment CreateTabItem(int index);
    internal void ScrollToItem(int index);
    internal bool IsScrollable();
    internal static bool IsValidControl(IntPtr hwnd);
    internal static void UpDownControlRaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private IntPtr GetUpDownHwnd();
    private static IntPtr GetUpDownHwnd(IntPtr hwnd);
    private bool IsVerticalTab();
    private bool Scroll(ScrollAmount amount);
    internal static bool SupportMultipleSelection(IntPtr hwnd);
}
internal class MS.Internal.AutomationProxies.WindowsTabChildOverrideProxy : ProxyHwnd {
    internal ProviderOptions ProviderOptions { get; }
    internal WindowsTabChildOverrideProxy(IntPtr hwnd, ProxyFragment parent, int item);
    internal virtual ProviderOptions get_ProviderOptions();
    internal virtual object GetElementProperty(AutomationProperty idProp);
}
internal class MS.Internal.AutomationProxies.WindowsTabItem : ProxyFragment {
    private bool _fIsWinform;
    internal Rect BoundingRectangle { get; }
    internal string HelpText { get; }
    internal string LocalizedName { get; }
    private bool System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected { get; }
    private IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer { get; }
    internal WindowsTabItem(IntPtr hwnd, ProxyFragment parent, int item, bool fIsWinform);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual Rect get_BoundingRectangle();
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_HelpText();
    internal virtual string get_LocalizedName();
    internal virtual bool SetFocus();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.Select();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection();
    private sealed virtual override void System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionItemProvider.get_IsSelected();
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.ISelectionItemProvider.get_SelectionContainer();
    private sealed virtual override void System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView();
    internal static string GetName(IntPtr hwnd, int item, bool fIsWinform);
    internal static int GetCurrentSelectedItem(IntPtr hwnd);
    protected virtual bool IsFocused();
    private Win32Rect BoundingRect();
    private bool IsSelectable();
    private void Select();
    private IntPtr GetItemHwndByIndex();
    private static string GetItemText(IntPtr hwnd, int itemIndex);
}
internal class MS.Internal.AutomationProxies.WindowsTitleBar : ProxyFragment {
    internal static int _systemMenu;
    internal Rect BoundingRectangle { get; }
    internal string LocalizedName { get; }
    public WindowsTitleBar(IntPtr hwnd, ProxyFragment parent, int item);
    internal virtual Rect get_BoundingRectangle();
    internal virtual Int32[] GetRuntimeId();
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal static bool HasTitleBar(IntPtr hwnd);
    internal ProxySimple CreateTitleBarChild(int item);
    private ProxySimple ReturnNextTitleBarChild(bool next, int start);
    private static bool IsTitleBarVisible(IntPtr hwnd);
}
internal class MS.Internal.AutomationProxies.WindowsToolbar : ProxyHwnd {
    internal string LocalizedName { get; }
    private int Count { get; }
    protected WindowsToolbar(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    internal virtual string get_LocalizedName();
    internal ProxySimple CreateToolbarItem(int item);
    private int get_Count();
}
internal class MS.Internal.AutomationProxies.WindowsToolbarAsMenu : WindowsToolbar {
    private Accessible _acc;
    internal WindowsToolbarAsMenu(IntPtr hwnd, ProxyFragment parent, int item, Accessible acc);
}
internal class MS.Internal.AutomationProxies.WindowsTooltip : ProxyHwnd {
    private static EvtIdProperty[] _toolTipEventIds;
    private static int _listenerCount;
    private static string CLASS_TITLEBAR_TOOLTIP;
    internal string LocalizedName { get; }
    private WindowsTooltip(IntPtr hwnd, ProxyFragment parent, int item);
    private static WindowsTooltip();
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual string get_LocalizedName();
    private static void OnToolTipEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static bool IsToolTip(IntPtr hwnd);
    private string GetText();
    private string GetTitleBarToolTipText();
    private string GetTitleBarToolTipTextForDWMEnabled();
    private string GetTitleBarToolTipTextHitTest();
}
internal class MS.Internal.AutomationProxies.WindowsTreeView : ProxyHwnd {
    private bool System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired { get; }
    private bool System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple { get; }
    internal WindowsTreeView(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    private static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual ProxySimple GetFocus();
    private sealed virtual override IRawElementProviderSimple[] System.Windows.Automation.Provider.ISelectionProvider.GetSelection();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_IsSelectionRequired();
    private sealed virtual override bool System.Windows.Automation.Provider.ISelectionProvider.get_CanSelectMultiple();
    protected virtual Int32[] PropertyToWinEvent(AutomationProperty idProp);
    protected virtual EvtIdProperty[] EventToWinEvent(AutomationEvent idEvent, Int32& cEvent);
    private ProxyFragment CreateTreeViewItem(IntPtr hItem, int depth);
    private ProxyFragment CreateTreeViewItemAndParents(IntPtr hItem);
    private ProxyFragment CreateParents(IntPtr hwnd, IntPtr hItem);
    private static bool Expand(IntPtr hwnd, IntPtr treeItem);
    private static bool Collapse(IntPtr hwnd, IntPtr treeItem);
    private static bool IsItemExpanded(IntPtr hwnd, IntPtr treeItem);
    private static bool SelectItem(IntPtr hwnd, IntPtr treeItem);
    private static IntPtr GetSelection(IntPtr hwnd);
    private static IntPtr Parent(IntPtr hwnd, IntPtr treeItem);
    private static IntPtr GetNextItem(IntPtr hwnd, IntPtr treeItem);
    private static IntPtr GetPreviousItem(IntPtr hwnd, IntPtr treeItem);
    private static IntPtr GetRoot(IntPtr hwnd);
    private static IntPtr GetFirstChild(IntPtr hwnd, IntPtr treeItem);
    private static int GetCheckState(IntPtr hwnd, IntPtr treeItem);
    private static bool SetCheckState(IntPtr hwnd, IntPtr item, bool check);
    private static IntPtr GetNext(IntPtr hwnd, IntPtr treeItem, int flag);
    private static int GetItemState(IntPtr hwnd, IntPtr treeItem, int stateMask);
    private static bool TreeViewItem_HasChildren(IntPtr hwnd, IntPtr item);
    private static Win32Rect GetItemRect(IntPtr hwnd, IntPtr treeItem, bool labelOnly);
    private static bool GetItem(IntPtr hwnd, IntPtr item, int mask, TVITEM& treeItem);
    private static string GetItemText(IntPtr hwnd, IntPtr item);
    private static bool SetItemText(IntPtr hwnd, IntPtr item, string text);
    private static IntPtr TreeItemFromChildID(IntPtr hwnd, int idChild);
}
internal class MS.Internal.AutomationProxies.WindowsUpDown : ProxyHwnd {
    internal string LocalizedName { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private double Pos { get; }
    private double Max { get; }
    private double Min { get; }
    internal WindowsUpDown(IntPtr hwnd, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal static void RaiseEvents(IntPtr hwnd, int eventId, object idProp, int idObject, int idChild);
    private static void RaiseInvokedEvent(IntPtr hwnd, int idObject, int idChild);
    private ProxySimple CreateSpinButtonItem(SpinItem item);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual object GetElementProperty(AutomationProperty idProp);
    internal virtual string get_LocalizedName();
    internal virtual ProxySimple GetNextSibling(ProxySimple child);
    internal virtual ProxySimple GetPreviousSibling(ProxySimple child);
    internal virtual ProxySimple GetFirstChild();
    internal virtual ProxySimple GetLastChild();
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double val);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    internal bool IsInsideOfTab();
    internal static bool IsWinformUpdown(IntPtr hwnd);
    private double get_Pos();
    private static IntPtr HwndBuddy(IntPtr hwnd);
    private bool IsSpinnerElement();
    private double get_Max();
    private double get_Min();
}
internal static class MS.Internal.AutomationProxies.WinEventTracker : object {
    private static Int32[] _eventIdToIndex;
    private static QueueProcessor _callbackQueue;
    private static object _queueLock;
    private static Hashtable[] _ahp;
    private static UInt32 _globalEventKey;
    private static StartStopDelegate _startDelegate;
    private static StartStopDelegate _stopDelegate;
    private static UInt32 _CSRSSProcessId;
    private static UInt32 CSRSSProcessId { get; }
    private static WinEventTracker();
    internal static void AddToNotificationList(IntPtr hwnd, ProxyRaiseEvents raiseEvents, EvtIdProperty[] aEvtIdProp, int cProps);
    internal static QueueProcessor GetCallbackQueue();
    internal static void RemoveToNotificationList(IntPtr hwnd, EvtIdProperty[] aEvtIdProp, ProxyRaiseEvents raiseEvents, int cProps);
    private static void StartListening(EventHookParams& hp);
    private static void StopListening(EventHookParams& hp);
    private static void WinEventProc(int winEventHook, int eventId, IntPtr hwnd, int idObject, int idChild, int eventThread, UInt32 eventTime);
    private static void BuildEventsList(EventFlag eFlag, IntPtr hwnd, ProxyRaiseEvents raiseEvents, EvtIdProperty[] aEvtIdProp, int cProps);
    private static bool IsConsoleProcess(int processId);
    private static UInt32 get_CSRSSProcessId();
}
internal class MS.Internal.AutomationProxies.WinformsSpinner : ProxyHwnd {
    private WindowsEditBox _elEdit;
    private WindowsUpDown _elUpDown;
    private SpinnerType _type;
    private double System.Windows.Automation.Provider.IRangeValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Maximum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.Minimum { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.SmallChange { get; }
    private double System.Windows.Automation.Provider.IRangeValueProvider.LargeChange { get; }
    private string System.Windows.Automation.Provider.IValueProvider.Value { get; }
    private bool System.Windows.Automation.Provider.IValueProvider.IsReadOnly { get; }
    internal WinformsSpinner(IntPtr hwnd, IntPtr hwndEdit, IntPtr hwndUpDown, ProxyFragment parent, int item);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild, int idObject);
    internal static IRawElementProviderSimple Create(IntPtr hwnd, int idChild);
    internal virtual object GetPatternProvider(AutomationPattern iid);
    internal virtual ProxySimple ElementProviderFromPoint(int x, int y);
    internal virtual void AdviseEventAdded(AutomationEvent eventId, AutomationProperty[] aidProps);
    internal virtual void AdviseEventRemoved(AutomationEvent eventId, AutomationProperty[] aidProps);
    private sealed virtual override IRawElementProviderSimple System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(IntPtr hwnd);
    private sealed virtual override void System.Windows.Automation.Provider.IRangeValueProvider.SetValue(double obj);
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IRangeValueProvider.get_IsReadOnly();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Maximum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_Minimum();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_SmallChange();
    private sealed virtual override double System.Windows.Automation.Provider.IRangeValueProvider.get_LargeChange();
    private sealed virtual override void System.Windows.Automation.Provider.IValueProvider.SetValue(string val);
    private sealed virtual override string System.Windows.Automation.Provider.IValueProvider.get_Value();
    private sealed virtual override bool System.Windows.Automation.Provider.IValueProvider.get_IsReadOnly();
    private bool IsEdit(IntPtr hwnd);
}
internal static class MS.Internal.AutomationProxies.XSendMessage : object {
    internal static string GetTextWithinStructure(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr lParam, int cbSize, IntPtr pszText, int maxLength);
    internal static string GetTextWithinStructure(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr lParam, int cbSize, IntPtr pszText, int maxLength, bool ignoreSendResult);
    internal static string GetTextWithinStructureRemoteBitness(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr lParam, int cbSize, IntPtr pszText, int maxLength, ProcessorTypes remoteBitness, bool ignoreSendResult);
    internal static void GetProcessTypes(IntPtr hwnd, ProcessorTypes& localBitness, ProcessorTypes& remoteBitness);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr wParam, String& str, int maxLength);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr ptrStructure, int cbSize);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr ptrStructure, int cbSize, ErrorValue errorCode);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr ptrStructure, int lParam, int cbSize);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr ptrStructure, int lParam, int cbSize, ErrorValue errorCode);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr ptrStructure1, IntPtr ptrStructure2, int cbSize1, int cbSize2);
    internal static bool XSend(IntPtr hwnd, int uMsg, IntPtr ptrStructure1, IntPtr ptrStructure2, int cbSize1, int cbSize2, ErrorValue errorCode);
    internal static int XSendGetIndex(IntPtr hwnd, int uMsg, IntPtr wParam, IntPtr ptrStructure, int cbSize);
    internal static string GetItemText(IntPtr hwnd, LVITEM item);
    internal static bool SetItem(IntPtr hwnd, int index, LVITEM item);
    internal static bool GetItem(IntPtr hwnd, LVITEM_V6& item);
    internal static bool SetGroupInfo(IntPtr hwnd, LVGROUP group);
    internal static bool GetGroupInfo(IntPtr hwnd, LVGROUP& group);
    internal static bool GetGroupInfo(IntPtr hwnd, LVGROUP_V6& group);
    internal static string GetItemText(IntPtr hwnd, LVGROUP item);
    internal static string GetItemText(IntPtr hwnd, LVGROUP_V6 item, int mask);
    internal static bool GetItem(IntPtr hwnd, int index, TCITEM& item);
    internal static string GetItemText(IntPtr hwnd, int index, TCITEM item);
    internal static bool GetItem(IntPtr hwnd, int index, HDITEM& item);
    internal static string GetItemText(IntPtr hwnd, int index, HDITEM item);
    internal static bool GetItem(IntPtr hwnd, TVITEM& item);
    internal static bool SetItem(IntPtr hwnd, TVITEM item);
    internal static IntPtr HitTestTreeView(IntPtr hwnd, int x, int y);
    internal static string GetItemText(IntPtr hwnd, TVITEM item);
    internal static bool GetItem(IntPtr hwnd, int index, TBBUTTON& item);
    internal static string GetItemText(IntPtr hwnd, TOOLINFO item);
    internal static Rect GetItemRect(IntPtr hwnd, int msg, int index);
    internal static string GetItemText(IntPtr hwnd, int msg, int index, int textLen);
    private static string ListView_V6_GetGroupTextOnWinXp(IntPtr hwnd, LVGROUP group);
    private static string ListView_V6_GetGroupTextOnWinXp(IntPtr hwnd, LVGROUP_32 group);
    private static string ListView_V6_GetGroupTextOnWinXp(IntPtr hwnd, LVGROUP_64 group);
    private static bool IsWOW64Process(IntPtr hwnd);
    private static bool NT_ERROR(int status);
}
internal static class MS.Internal.UIAutomationClientSideProviders.NativeMethodsSetLastError : object {
    private static string PresentationNativeDll;
    public static int GetWindowLong(IntPtr hWnd, int nIndex);
    public static IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);
    public static short GlobalDeleteAtom(short atom);
    public static IntPtr GetAncestor(IntPtr hwnd, int gaFlags);
    public static IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string className, string wndName);
    public static bool GetMenuBarInfo(IntPtr hwnd, int idObject, UInt32 idItem, MENUBARINFO& mbi);
    public static int GetTextExtentPoint32(IntPtr hdc, string lpString, int cbString, SIZE& lpSize);
    public static IntPtr GetWindow(IntPtr hWnd, int uCmd);
    public static int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);
    public static int MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, Win32Rect& rect, int cPoints);
    public static int MapWindowPoints(IntPtr hWndFrom, IntPtr hWndTo, Win32Point& pt, int cPoints);
    public static int SetScrollPos(IntPtr hWnd, int nBar, int nPos, bool bRedraw);
}
internal class MS.Win32.ExternDll : object {
    internal static string Gdiplus;
    internal static string User32;
    internal static string Shfolder;
    internal static string Imm32;
    internal static string Advapi32;
    internal static string Shell32;
    internal static string Kernel32;
    internal static string Comctl32;
    internal static string Oleaut32;
    internal static string Olepro32;
    internal static string Ole32;
    internal static string Gdi32;
    internal static string Comdlg32;
    internal static string Uxtheme;
    internal static string Oleacc;
    internal static string Hhctrl;
    internal static string Winspool;
    internal static string Psapi;
    internal static string Ntdll;
    internal static string Version;
    internal static string Vsassert;
    internal static string Mscoree;
    internal static string Msi;
    internal static string Mqrt;
    internal static string Activeds;
    internal static string Loadperf;
    internal static string DwmAPI;
}
internal static class MS.Win32.NativeMethods : object {
    internal static int BM_GETCHECK;
    internal static int BM_GETSTATE;
    internal static int BM_SETSTATE;
    internal static int BM_CLICK;
    internal static int CB_GETCURSEL;
    internal static int CB_GETLBTEXT;
    internal static int CB_GETLBTEXTLEN;
    internal static int CB_SHOWDROPDOWN;
    internal static int CB_GETDROPPEDSTATE;
    internal static int DTM_GETSYSTEMTIME;
    internal static int DTM_SETSYSTEMTIME;
    internal static int DTM_GETMONTHCAL;
    internal static int EM_GETSEL;
    internal static int EM_SETSEL;
    internal static int EM_GETRECT;
    internal static int EM_LINESCROLL;
    internal static int EM_GETLINECOUNT;
    internal static int EM_LINEINDEX;
    internal static int EM_LINEFROMCHAR;
    internal static int EM_GETFIRSTVISIBLELINE;
    internal static int EM_GETLIMITTEXT;
    internal static int EM_POSFROMCHAR;
    internal static int EM_CHARFROMPOS;
    internal static int HDM_FIRST;
    internal static int HDM_GETITEMCOUNT;
    internal static int HDM_HITTEST;
    internal static int HDM_GETITEMRECT;
    internal static int HDM_GETITEMW;
    internal static int HDM_ORDERTOINDEX;
    internal static int HDM_GETITEMDROPDOWNRECT;
    internal static int HDM_GETFOCUSEDITEM;
    internal static int LB_ERR;
    internal static int LB_SETSEL;
    internal static int LB_SETCURSEL;
    internal static int LB_GETSEL;
    internal static int LB_GETCURSEL;
    internal static int LB_GETTEXT;
    internal static int LB_GETTEXTLEN;
    internal static int LB_GETCOUNT;
    internal static int LB_GETSELCOUNT;
    internal static int LB_SETTOPINDEX;
    internal static int LB_GETITEMRECT;
    internal static int LB_GETITEMDATA;
    internal static int LB_SETCARETINDEX;
    internal static int LB_GETCARETINDEX;
    internal static int LB_ITEMFROMPOINT;
    internal static int LBN_SELCHANGE;
    internal static int LVM_FIRST;
    internal static int LVM_GETITEMCOUNT;
    internal static int LVM_GETNEXTITEM;
    internal static int LVM_GETITEMRECT;
    internal static int LVM_GETITEMPOSITION;
    internal static int LVM_HITTEST;
    internal static int LVM_ENSUREVISIBLE;
    internal static int LVM_SCROLL;
    internal static int LVM_GETHEADER;
    internal static int LVM_GETITEMSTATE;
    internal static int LVM_SETITEMSTATE;
    internal static int LVM_GETEXTENDEDLISTVIEWSTYLE;
    internal static int LVM_GETSUBITEMRECT;
    internal static int LVM_SUBITEMHITTEST;
    internal static int LVM_APPROXIMATEVIEWRECT;
    internal static int LVM_GETITEMW;
    internal static int LVM_GETTOOLTIPS;
    internal static int LVM_GETFOCUSEDGROUP;
    internal static int LVM_GETGROUPRECT;
    internal static int LVM_EDITLABEL;
    internal static int LVM_GETVIEW;
    internal static int LVM_SETVIEW;
    internal static int LVM_SETGROUPINFO;
    internal static int LVM_GETGROUPINFO;
    internal static int LVM_GETGROUPINFOBYINDEX;
    internal static int LVM_GETGROUPMETRICS;
    internal static int LVM_HASGROUP;
    internal static int LVM_ISGROUPVIEWENABLED;
    internal static int LVM_GETFOCUSEDCOLUMN;
    internal static int LVM_GETEMPTYTEXT;
    internal static int LVM_GETFOOTERRECT;
    internal static int LVM_GETFOOTERINFO;
    internal static int LVM_GETFOOTERITEMRECT;
    internal static int LVM_GETFOOTERITEM;
    internal static int LVM_GETITEMINDEXRECT;
    internal static int LVM_SETITEMINDEXSTATE;
    internal static int LVM_GETNEXTITEMINDEX;
    internal static int MCM_FIRST;
    internal static int MCM_GETCURSEL;
    internal static int MCM_SETCURSEL;
    internal static int MCM_GETMAXSELCOUNT;
    internal static int MCM_GETSELRANGE;
    internal static int MCM_SETSELRANGE;
    internal static int MCM_GETMONTHRANGE;
    internal static int MCM_GETMINREQRECT;
    internal static int MCM_GETTODAY;
    internal static int MCM_HITTEST;
    internal static int MCM_GETFIRSTDAYOFWEEK;
    internal static int MCM_GETRANGE;
    internal static int MCM_SETMONTHDELTA;
    internal static int MCM_GETMAXTODAYWIDTH;
    internal static int MCM_GETCURRENTVIEW;
    internal static int MCM_GETCALENDARCOUNT;
    internal static int MCM_GETCALENDARGRIDINFO;
    internal static int PGM_FIRST;
    internal static int PGM_SETCHILD;
    internal static int PGM_RECALCSIZE;
    internal static int PGM_FORWARDMOUSE;
    internal static int PGM_SETBKCOLOR;
    internal static int PGM_GETBKCOLOR;
    internal static int PGM_SETBORDER;
    internal static int PGM_GETBORDER;
    internal static int PGM_SETPOS;
    internal static int PGM_GETPOS;
    internal static int PGM_SETBUTTONSIZE;
    internal static int PGM_GETBUTTONSIZE;
    internal static int PGM_GETBUTTONSTATE;
    internal static int TCM_FIRST;
    internal static int TCM_GETITEMCOUNT;
    internal static int TCM_GETITEMRECT;
    internal static int TCM_GETCURSEL;
    internal static int TCM_SETCURSEL;
    internal static int TCM_HITTEST;
    internal static int TCM_GETTOOLTIPS;
    internal static int TCM_GETCURFOCUS;
    internal static int TCM_SETCURFOCUS;
    internal static int TCM_DESELECTALL;
    internal static int TCM_GETITEMW;
    internal static int TV_FIRST;
    internal static int TVM_EXPAND;
    internal static int TVM_GETITEMRECT;
    internal static int TVM_GETCOUNT;
    internal static int TVM_GETNEXTITEM;
    internal static int TVM_SELECTITEM;
    internal static int TVM_HITTEST;
    internal static int TVM_ENSUREVISIBLE;
    internal static int TVM_ENDEDITLABELNOW;
    internal static int TVM_GETTOOLTIPS;
    internal static int TVM_GETITEMSTATE;
    internal static int TVM_MAPACCIDTOHTREEITEM;
    internal static int TVM_MAPHTREEITEMTOACCID;
    internal static int TVM_GETITEMW;
    internal static int TVM_SETITEMW;
    internal static int TVM_EDITLABELW;
    internal static int WM_SETTEXT;
    internal static int WM_GETTEXT;
    internal static int WM_GETTEXTLENGTH;
    internal static int WM_QUIT;
    internal static int WM_GETFONT;
    internal static int WM_GETOBJECT;
    internal static int WM_NCHITTEST;
    internal static int WM_KEYDOWN;
    internal static int WM_KEYUP;
    internal static int WM_COMMAND;
    internal static int WM_SYSCOMMAND;
    internal static int WM_HSCROLL;
    internal static int WM_VSCROLL;
    internal static int WM_LBUTTONDOWN;
    internal static int WM_LBUTTONUP;
    internal static int WM_RBUTTONDOWN;
    internal static int WM_RBUTTONUP;
    internal static int WM_MDITILE;
    internal static int WM_MDICASCADE;
    internal static int WM_HOTKEY;
    internal static int WM_GETTITLEBARINFOEX;
    internal static int WM_USER;
    internal static int WM_GETDLGCODE;
    internal static int DLGC_STATIC;
    internal static int TBM_GETPOS;
    internal static int TBM_GETRANGEMIN;
    internal static int TBM_GETRANGEMAX;
    internal static int TBM_SETPOS;
    internal static int TBM_GETPAGESIZE;
    internal static int TBM_GETLINESIZE;
    internal static int TBM_GETTHUMBRECT;
    internal static int TBM_GETCHANNELRECT;
    internal static int TBM_GETTOOLTIPS;
    internal static int PBM_GETRANGE;
    internal static int PBM_GETPOS;
    internal static int SB_GETPARTS;
    internal static int SB_GETRECT;
    internal static int SB_GETTEXTLENGTHW;
    internal static int SB_GETTEXTW;
    internal static int RB_HITTEST;
    internal static int RB_GETRECT;
    internal static int RB_GETBANDCOUNT;
    internal static int RB_GETTOOLTIPS;
    internal static int RB_GETBANDINFOA;
    internal static int RB_PUSHCHEVRON;
    internal static int TB_PRESSBUTTON;
    internal static int TB_ISBUTTONENABLED;
    internal static int TB_ISBUTTONCHECKED;
    internal static int TB_ISBUTTONHIDDEN;
    internal static int TB_GETBUTTON;
    internal static int TB_BUTTONCOUNT;
    internal static int TB_GETITEMRECT;
    internal static int TB_GETTOOLTIPS;
    internal static int TB_GETIMAGELIST;
    internal static int TB_GETHOTITEM;
    internal static int TB_SETHOTITEM;
    internal static int TB_GETBUTTONTEXT;
    internal static int TB_GETEXTENDEDSTYLE;
    internal static int TTM_GETTOOLINFO;
    internal static int TTM_HITTEST;
    internal static int TTM_GETTEXT;
    internal static int TTM_GETCURRENTTOOL;
    internal static int IPM_SETADDRESS;
    internal static int UDM_GETRANGE;
    internal static int UDM_SETPOS;
    internal static int UDM_GETPOS;
    internal static int UDM_GETBUDDY;
    internal static int LM_FIRST;
    internal static int LM_HITTEST;
    internal static int LM_GETIDEALHEIGHT;
    internal static int LM_SETITEM;
    internal static int LM_GETITEM;
    internal static int BS_PUSHBUTTON;
    internal static int BS_DEFPUSHBUTTON;
    internal static int BS_CHECKBOX;
    internal static int BS_AUTOCHECKBOX;
    internal static int BS_RADIOBUTTON;
    internal static int BS_3STATE;
    internal static int BS_AUTO3STATE;
    internal static int BS_GROUPBOX;
    internal static int BS_USERBUTTON;
    internal static int BS_AUTORADIOBUTTON;
    internal static int BS_PUSHBOX;
    internal static int BS_OWNERDRAW;
    internal static int BS_SPLITBUTTON;
    internal static int BS_TYPEMASK;
    internal static int DTS_UPDOWN;
    internal static int DTS_SHOWNONE;
    internal static int DTS_TIMEFORMAT;
    internal static int DTS_TIMEFORMATONLY;
    internal static int DS_CONTROL;
    internal static int ES_LEFT;
    internal static int ES_CENTER;
    internal static int ES_RIGHT;
    internal static int ES_MULTILINE;
    internal static int ES_UPPERCASE;
    internal static int ES_LOWERCASE;
    internal static int ES_PASSWORD;
    internal static int ES_AUTOHSCROLL;
    internal static int ES_READONLY;
    internal static int ES_NUMBER;
    internal static int LBS_NOTIFY;
    internal static int LBS_SORT;
    internal static int LBS_MULTIPLESEL;
    internal static int LBS_OWNERDRAWFIXED;
    internal static int LBS_WANTKEYBOARDINPUT;
    internal static int LBS_EXTENDEDSEL;
    internal static int LBS_COMBOBOX;
    internal static int LVS_REPORT;
    internal static int LVS_LIST;
    internal static int LVS_TYPEMASK;
    internal static int LVS_SINGLESEL;
    internal static int LVS_AUTOARRANGE;
    internal static int LVS_EDITLABELS;
    internal static int LVS_NOSCROLL;
    internal static int LVS_NOCOLUMNHEADER;
    internal static int LVS_EX_CHECKBOXES;
    internal static int LVS_EX_FULLROWSELECT;
    internal static int LVS_EX_ONECLICKACTIVATE;
    internal static int LVS_EX_TWOCLICKACTIVATE;
    internal static int LVS_EX_UNDERLINEHOT;
    internal static int LVS_EX_UNDERLINECOLD;
    internal static int LVS_EX_JUSTIFYCOLUMNS;
    internal static int LVIS_FOCUSED;
    internal static int LVIS_SELECTED;
    internal static int LVIS_STATEIMAGEMASK;
    internal static int MCS_DAYSTATE;
    internal static int MCS_MULTISELECT;
    internal static int MCS_WEEKNUMBERS;
    internal static int MCS_NOTODAYCIRCLE;
    internal static int MCS_NOTODAY;
    internal static int PGS_VERT;
    internal static int PGS_HORZ;
    internal static int SBS_HORZ;
    internal static int SBS_VERT;
    internal static int TBS_VERT;
    internal static int TBS_REVERSED;
    internal static int SS_LEFT;
    internal static int SS_CENTER;
    internal static int SS_RIGHT;
    internal static int SS_ICON;
    internal static int SS_BLACKRECT;
    internal static int SS_GRAYRECT;
    internal static int SS_WHITERECT;
    internal static int SS_BLACKFRAME;
    internal static int SS_GRAYFRAME;
    internal static int SS_WHITEFRAME;
    internal static int SS_USERITEM;
    internal static int SS_SIMPLE;
    internal static int SS_LEFTNOWORDWRAP;
    internal static int SS_OWNERDRAW;
    internal static int SS_BITMAP;
    internal static int SS_ENHMETAFILE;
    internal static int SS_ETCHEDHORZ;
    internal static int SS_ETCHEDVERT;
    internal static int SS_ETCHEDFRAME;
    internal static int SS_TYPEMASK;
    internal static int HDS_VERT;
    internal static int TBSTYLE_EX_DRAWDDARROWS;
    internal static byte BTNS_SEP;
    internal static byte BTNS_CHECK;
    internal static byte BTNS_GROUP;
    internal static byte BTNS_DROPDOWN;
    internal static int I_IMAGENONE;
    internal static int WS_OVERLAPPED;
    internal static int WS_TABSTOP;
    internal static int WS_MAXIMIZEBOX;
    internal static int WS_GROUP;
    internal static int WS_MINIMIZEBOX;
    internal static int WS_SYSMENU;
    internal static int WS_HSCROLL;
    internal static int WS_VSCROLL;
    internal static int WS_BORDER;
    internal static int WS_CAPTION;
    internal static int WS_MAXIMIZE;
    internal static int WS_DISABLED;
    internal static int WS_VISIBLE;
    internal static int WS_MINIMIZE;
    internal static int WS_CHILD;
    internal static int WS_POPUP;
    internal static int WS_EX_DLGMODALFRAME;
    internal static int WS_EX_MDICHILD;
    internal static int WS_EX_TOOLWINDOW;
    internal static int WS_EX_CONTEXTHELP;
    internal static int WS_EX_RTLREADING;
    internal static int WS_EX_CONTROLPARENT;
    internal static int WS_EX_LAYOUTRTL;
    internal static int BST_UNCHECKED;
    internal static int BST_CHECKED;
    internal static int BST_INDETERMINATE;
    internal static int BST_PUSHED;
    internal static int BST_FOCUS;
    internal static int LOGPIXELSX;
    internal static int LOGPIXELSY;
    internal static int GW_HWNDFIRST;
    internal static int GW_HWNDLAST;
    internal static int GW_HWNDNEXT;
    internal static int GW_HWNDPREV;
    internal static int GW_OWNER;
    internal static int GW_CHILD;
    internal static int GWL_EXSTYLE;
    internal static int GWL_STYLE;
    internal static int GWL_ID;
    internal static int GWL_HWNDPARENT;
    internal static int GWL_WNDPROC;
    internal static int COLOR_WINDOW;
    internal static int COLOR_WINDOWTEXT;
    internal static int MK_LBUTTON;
    internal static int MK_RBUTTON;
    internal static int SB_HORZ;
    internal static int SB_VERT;
    internal static int SB_CTL;
    internal static int SB_LINEUP;
    internal static int SB_LINELEFT;
    internal static int SB_LINEDOWN;
    internal static int SB_LINERIGHT;
    internal static int SB_PAGEUP;
    internal static int SB_PAGELEFT;
    internal static int SB_PAGEDOWN;
    internal static int SB_PAGERIGHT;
    internal static int SB_THUMBPOSITION;
    internal static int SB_THUMBTRACK;
    internal static int SB_LEFT;
    internal static int SB_RIGHT;
    internal static int SB_ENDSCROLL;
    internal static int SB_TOP;
    internal static int SB_BOTTOM;
    internal static int SORT_DEFAULT;
    internal static int SUBLANG_DEFAULT;
    internal static int SC_TASKLIST;
    internal static int SW_HIDE;
    internal static int SW_NORMAL;
    internal static int SW_SHOWMINIMIZED;
    internal static int SW_SHOWMAXIMIZED;
    internal static int SW_MAXIMIZE;
    internal static int SW_SHOWNOACTIVATE;
    internal static int SW_SHOW;
    internal static int SW_MINIMIZE;
    internal static int SW_SHOWMINNOACTIVE;
    internal static int SW_SHOWNA;
    internal static int SW_RESTORE;
    internal static int SW_MAX;
    internal static int SWP_NOSIZE;
    internal static int SWP_NOMOVE;
    internal static int SWP_NOZORDER;
    internal static int SWP_NOACTIVATE;
    internal static int SWP_SHOWWINDOW;
    internal static int SWP_HIDEWINDOW;
    internal static int SWP_DRAWFRAME;
    internal static int SM_CXSCREEN;
    internal static int SM_CYSCREEN;
    internal static int SM_CXVSCROLL;
    internal static int SM_CYHSCROLL;
    internal static int SM_CYCAPTION;
    internal static int SM_CXBORDER;
    internal static int SM_CYBORDER;
    internal static int SM_CYVTHUMB;
    internal static int SM_CXHTHUMB;
    internal static int SM_CXICON;
    internal static int SM_CYICON;
    internal static int SM_CXCURSOR;
    internal static int SM_CYCURSOR;
    internal static int SM_CYMENU;
    internal static int SM_CYKANJIWINDOW;
    internal static int SM_MOUSEPRESENT;
    internal static int SM_CYVSCROLL;
    internal static int SM_CXHSCROLL;
    internal static int SM_DEBUG;
    internal static int SM_SWAPBUTTON;
    internal static int SM_CXMIN;
    internal static int SM_CYMIN;
    internal static int SM_CXSIZE;
    internal static int SM_CYSIZE;
    internal static int SM_CXFRAME;
    internal static int SM_CYFRAME;
    internal static int SM_CXMINTRACK;
    internal static int SM_CYMINTRACK;
    internal static int SM_CXDOUBLECLK;
    internal static int SM_CYDOUBLECLK;
    internal static int SM_CXICONSPACING;
    internal static int SM_CYICONSPACING;
    internal static int SM_MENUDROPALIGNMENT;
    internal static int SM_PENWINDOWS;
    internal static int SM_DBCSENABLED;
    internal static int SM_CMOUSEBUTTONS;
    internal static int SM_CXFIXEDFRAME;
    internal static int SM_CYFIXEDFRAME;
    internal static int SM_SECURE;
    internal static int SM_CXEDGE;
    internal static int SM_CYEDGE;
    internal static int SM_CXMINSPACING;
    internal static int SM_CYMINSPACING;
    internal static int SM_CXSMICON;
    internal static int SM_CYSMICON;
    internal static int SM_CYSMCAPTION;
    internal static int SM_CXSMSIZE;
    internal static int SM_CYSMSIZE;
    internal static int SM_CXMENUSIZE;
    internal static int SM_CYMENUSIZE;
    internal static int SM_ARRANGE;
    internal static int SM_CXMINIMIZED;
    internal static int SM_CYMINIMIZED;
    internal static int SM_CXMAXTRACK;
    internal static int SM_CYMAXTRACK;
    internal static int SM_CXMAXIMIZED;
    internal static int SM_CYMAXIMIZED;
    internal static int SM_NETWORK;
    internal static int SM_CLEANBOOT;
    internal static int SM_CXDRAG;
    internal static int SM_CYDRAG;
    internal static int SM_SHOWSOUNDS;
    internal static int SM_CXMENUCHECK;
    internal static int SM_CYMENUCHECK;
    internal static int SM_MIDEASTENABLED;
    internal static int SM_MOUSEWHEELPRESENT;
    internal static int SM_XVIRTUALSCREEN;
    internal static int SYSTEM_FONT;
    internal static int SM_YVIRTUALSCREEN;
    internal static int SM_CXVIRTUALSCREEN;
    internal static int SM_CYVIRTUALSCREEN;
    internal static int VK_TAB;
    internal static int VK_RETURN;
    internal static int VK_ESCAPE;
    internal static int VK_PRIOR;
    internal static int VK_NEXT;
    internal static int VK_F4;
    internal static int MAX_PATH;
    internal static int MDITILE_VERTICAL;
    internal static int MDITILE_HORIZONTAL;
    internal static int MDITILE_SKIPDISABLED;
    internal static int S_OK;
    internal static int S_FALSE;
    internal static int LVNI_FOCUSED;
    internal static int LVNI_SELECTED;
    internal static int LVNI_BELOW;
    internal static int LVNI_TORIGHT;
    internal static int LVNI_VISIBLEORDER;
    internal static int LVNI_PREVIOUS;
    internal static int LVNI_VISIBLEONLY;
    internal static int LVNI_SAMEGROUPONLY;
    internal static int LV_VIEW_ICON;
    internal static int LV_VIEW_DETAILS;
    internal static int LV_VIEW_SMALLICON;
    internal static int LV_VIEW_LIST;
    internal static int LV_VIEW_TILE;
    internal static int LVIR_BOUNDS;
    internal static int LVIR_ICON;
    internal static int LVIR_LABEL;
    internal static int LVIR_SELECTBOUNDS;
    internal static int LVHT_NOWHERE;
    internal static int LVHT_ONITEMICON;
    internal static int LVHT_ONITEMLABEL;
    internal static int LVHT_ONITEMSTATEICON;
    internal static int LVHT_ONITEM;
    internal static int LVHT_EX_GROUP_HEADER;
    internal static int LVHT_EX_GROUP_FOOTER;
    internal static int LVHT_EX_GROUP_COLLAPSE;
    internal static int LVHT_EX_GROUP_BACKGROUND;
    internal static int LVHT_EX_GROUP_STATEICON;
    internal static int LVHT_EX_GROUP_SUBSETLINK;
    internal static int LVHT_EX_GROUP;
    internal static int LVHT_EX_ONCONTENTS;
    internal static int LVHT_EX_FOOTER;
    internal static int LVIF_TEXT;
    internal static int LVIF_STATE;
    internal static int LVIF_GROUPID;
    internal static int LVGF_HEADER;
    internal static int LVGF_FOOTER;
    internal static int LVGF_STATE;
    internal static int LVGF_ALIGN;
    internal static int LVGF_GROUPID;
    internal static int LVGF_SUBTITLE;
    internal static int LVGF_TASK;
    internal static int LVGF_DESCRIPTIONTOP;
    internal static int LVGF_DESCRIPTIONBOTTOM;
    internal static int LVGF_TITLEIMAGE;
    internal static int LVGF_EXTENDEDIMAGE;
    internal static int LVGF_ITEMS;
    internal static int LVGF_SUBSET;
    internal static int LVGF_SUBSETITEMS;
    internal static int LVGS_NORMAL;
    internal static int LVGS_COLLAPSED;
    internal static int LVGS_HIDDEN;
    internal static int LVGS_NOHEADER;
    internal static int LVGS_COLLAPSIBLE;
    internal static int LVGS_FOCUSED;
    internal static int LVGS_SELECTED;
    internal static int LVGS_SUBSETED;
    internal static int LVGS_SUBSETLINKFOCUSED;
    internal static int LVGGR_GROUP;
    internal static int LVGGR_HEADER;
    internal static int LVGGR_LABEL;
    internal static int LVGGR_SUBSETLINK;
    internal static int LVGMF_BORDERSIZE;
    internal static int CCM_FIRST;
    internal static int CCM_GETVERSION;
    internal static int PGB_TOPORLEFT;
    internal static int PGB_BOTTOMORRIGHT;
    internal static int PGF_CALCWIDTH;
    internal static int PGF_CALCHEIGHT;
    internal static int PGF_INVISIBLE;
    internal static int PGF_NORMAL;
    internal static int PGF_GRAYED;
    internal static int PGF_DEPRESSED;
    internal static int PGF_HOT;
    internal static int EventSystemSound;
    internal static int EventSystemAlert;
    internal static int EventSystemForeground;
    internal static int EventSystemMenuStart;
    internal static int EventSystemMenuEnd;
    internal static int EventSystemMenuPopupStart;
    internal static int EventSystemMenuPopupEnd;
    internal static int EventSystemCaptureStart;
    internal static int EventSystemCaptureEnd;
    internal static int EventSystemMoveSizeStart;
    internal static int EventSystemMoveSizeEnd;
    internal static int EventSystemContextHelpStart;
    internal static int EventSystemContextHelpEnd;
    internal static int EventSystemDragDropStart;
    internal static int EventSystemDragDropEnd;
    internal static int EventSystemDialogStart;
    internal static int EventSystemDialogEnd;
    internal static int EventSystemScrollingStart;
    internal static int EventSystemScrollingEnd;
    internal static int EventSystemSwitchEnd;
    internal static int EventSystemMinimizeStart;
    internal static int EventSystemMinimizeEnd;
    internal static int EventSystemPaint;
    internal static int EventConsoleCaret;
    internal static int EventConsoleUpdateRegion;
    internal static int EventConsoleUpdateSimple;
    internal static int EventConsoleUpdateScroll;
    internal static int EventConsoleLayout;
    internal static int EventConsoleStartApplication;
    internal static int EventConsoleEndApplication;
    internal static int EventObjectCreate;
    internal static int EventObjectDestroy;
    internal static int EventObjectShow;
    internal static int EventObjectHide;
    internal static int EventObjectReorder;
    internal static int EventObjectFocus;
    internal static int EventObjectSelection;
    internal static int EventObjectSelectionAdd;
    internal static int EventObjectSelectionRemove;
    internal static int EventObjectSelectionWithin;
    internal static int EventObjectStateChange;
    internal static int EventObjectLocationChange;
    internal static int EventObjectNameChange;
    internal static int EventObjectDescriptionChange;
    internal static int EventObjectValueChange;
    internal static int EventObjectParentChange;
    internal static int EventObjectHelpChange;
    internal static int EventObjectDefactionChange;
    internal static int EventObjectAcceleratorChange;
    internal static int EventObjectInvoke;
    internal static int EventObjectTextSelectionChanged;
    internal static int OBJID_CLIENT;
    internal static int OBJID_WINDOW;
    internal static int OBJID_VSCROLL;
    internal static int OBJID_HSCROLL;
    internal static int OBJID_MENU;
    internal static int OBJID_SYSMENU;
    internal static int OBJID_NATIVEOM;
    internal static int OBJID_CARET;
    internal static int SELFLAG_TAKEFOCUS;
    internal static int SELFLAG_TAKESELECTION;
    internal static int SELFLAG_ADDSELECTION;
    internal static int SELFLAG_REMOVESELECTION;
    internal static int E_ACCESSDENIED;
    internal static int E_FAIL;
    internal static int E_UNEXPECTED;
    internal static int E_INVALIDARG;
    internal static int E_MEMBERNOTFOUND;
    internal static int E_NOTIMPL;
    internal static int E_OUTOFMEMORY;
    internal static int RPC_E_SYS_CALL_FAILED;
    internal static int RPC_E_SERVERFAULT;
    internal static int RPC_E_DISCONNECTED;
    internal static int DISP_E_BADINDEX;
    internal static int RPC_E_UNAVAILABLE;
    internal static int E_INTERFACEUNKNOWN;
    internal static int E_UNKNOWNWORDERROR;
    internal static int PROCESSOR_ARCHITECTURE_INTEL;
    internal static int PROCESSOR_ARCHITECTURE_MIPS;
    internal static int PROCESSOR_ARCHITECTURE_ALPHA;
    internal static int PROCESSOR_ARCHITECTURE_PPC;
    internal static int PROCESSOR_ARCHITECTURE_SHX;
    internal static int PROCESSOR_ARCHITECTURE_ARM;
    internal static int PROCESSOR_ARCHITECTURE_IA64;
    internal static int PROCESSOR_ARCHITECTURE_ALPHA64;
    internal static int PROCESSOR_ARCHITECTURE_MSIL;
    internal static int PROCESSOR_ARCHITECTURE_AMD64;
    internal static int PROCESSOR_ARCHITECTURE_UNKNOWN;
    internal static int SIF_RANGE;
    internal static int SIF_PAGE;
    internal static int SIF_POS;
    internal static int SIF_TRACKPOS;
    internal static int SIF_ALL;
    internal static int QS_KEY;
    internal static int QS_MOUSEMOVE;
    internal static int QS_MOUSEBUTTON;
    internal static int QS_POSTMESSAGE;
    internal static int QS_TIMER;
    internal static int QS_PAINT;
    internal static int QS_SENDMESSAGE;
    internal static int QS_HOTKEY;
    internal static int QS_ALLPOSTMESSAGE;
    internal static int QS_MOUSE;
    internal static int QS_INPUT;
    internal static int QS_ALLEVENTS;
    internal static int QS_ALLINPUT;
    internal static int INFINITE;
    internal static int WAIT_FAILED;
    internal static int WAIT_TIMEOUT;
    internal static int SMTO_BLOCK;
    internal static int KEYEVENTF_EXTENDEDKEY;
    internal static int KEYEVENTF_KEYUP;
    internal static int KEYEVENTF_SCANCODE;
    internal static int MOUSEEVENTF_VIRTUALDESK;
    internal static int INPUT_MOUSE;
    internal static int INPUT_KEYBOARD;
    internal static int GA_PARENT;
    internal static int PM_REMOVE;
    internal static int HEAP_SHARED;
    internal static int PROCESS_VM_OPERATION;
    internal static int PROCESS_VM_READ;
    internal static int PROCESS_VM_WRITE;
    internal static int PROCESS_QUERY_INFORMATION;
    internal static int STANDARD_RIGHTS_REQUIRED;
    internal static int SYNCHRONIZE;
    internal static int PROCESS_ALL_ACCESS;
    internal static int CHILD_SELF;
    internal static int ROLE_SYSTEM_MENUBAR;
    internal static int ROLE_SYSTEM_TOOLBAR;
    internal static int ROLE_SYSTEM_CLIENT;
    internal static int ROLE_SYSTEM_MENUPOPUP;
    internal static int ROLE_SYSTEM_LINK;
    internal static int ROLE_SYSTEM_TEXT;
    internal static int ROLE_SYSTEM_BUTTONDROPDOWN;
    internal static int ROLE_SYSTEM_BUTTONMENU;
    internal static int ROLE_SYSTEM_MENUITEM;
    internal static int ROLE_SYSTEM_GROUPING;
    internal static int ROLE_SYSTEM_BUTTONDROPDOWNGRID;
    internal static int ROLE_SYSTEM_DROPLIST;
    internal static int ROLE_SYSTEM_LISTITEM;
    internal static int ROLE_SYSTEM_PUSHBUTTON;
    internal static int ROLE_SYSTEM_CHECKBUTTON;
    internal static int ROLE_SYSTEM_RADIOBUTTON;
    internal static int ROLE_SYSTEM_COMBOBOX;
    internal static int ROLE_SYSTEM_SPINBUTTON;
    internal static int STATE_SYSTEM_FLOATING;
    internal static int STATE_SYSTEM_FOCUSED;
    internal static int STATE_SYSTEM_MOVEABLE;
    internal static int STATE_SYSTEM_CHECKED;
    internal static int STATE_SYSTEM_MIXED;
    internal static int STATE_SYSTEM_UNAVAILABLE;
    internal static int STATE_SYSTEM_INVISIBLE;
    internal static int STATE_SYSTEM_OFFSCREEN;
    internal static int STATE_SYSTEM_PRESSED;
    internal static int STATE_SYSTEM_SIZEABLE;
    internal static int STATE_SYSTEM_HOTTRACKED;
    internal static int CBS_SIMPLE;
    internal static int CBS_DROPDOWN;
    internal static int CBS_DROPDOWNLIST;
    internal static int CBS_COMBOTYPEMASK;
    internal static int CBN_EDITUPDATE;
    internal static int CBN_DROPDOWN;
    internal static int comboboxInfoSize;
    internal static int GUI_CARETBLINKING;
    internal static int GUI_INMOVESIZE;
    internal static int GUI_INMENUMODE;
    internal static int GUI_SYSTEMMENUMODE;
    internal static int GUI_POPUPMENUMODE;
    internal static int MF_BYCOMMAND;
    internal static int MF_GRAYED;
    internal static int MF_DISABLED;
    internal static int MF_BITMAP;
    internal static int MF_CHECKED;
    internal static int MF_MENUBARBREAK;
    internal static int MF_MENUBREAK;
    internal static int MF_HILITE;
    internal static int MF_OWNERDRAW;
    internal static int MF_BYPOSITION;
    internal static int MF_SEPARATOR;
    internal static int MFT_RADIOCHECK;
    internal static int MIIM_STATE;
    internal static int MIIM_ID;
    internal static int MIIM_SUBMENU;
    internal static int MIIM_CHECKMARKS;
    internal static int MIIM_TYPE;
    internal static int MIIM_DATA;
    internal static int MIIM_FTYPE;
    internal static int MN_GETHMENU;
    internal static int TVIF_TEXT;
    internal static int TVIF_IMAGE;
    internal static int TVIF_STATE;
    internal static int TVIF_CHILDREN;
    internal static int TVIS_SELECTED;
    internal static int TVIS_EXPANDED;
    internal static int TVIS_STATEIMAGEMASK;
    internal static int TVGN_ROOT;
    internal static int TVGN_NEXT;
    internal static int TVGN_PREVIOUS;
    internal static int TVGN_PARENT;
    internal static int TVGN_CHILD;
    internal static int TVGN_CARET;
    internal static int TVSI_NOSINGLEEXPAND;
    internal static int TVE_COLLAPSE;
    internal static int TVE_EXPAND;
    internal static int TVS_EDITLABELS;
    internal static int TVS_CHECKBOXES;
    internal static int INDEX_TITLEBAR_SELF;
    internal static int INDEX_TITLEBAR_IMEBUTTON;
    internal static int INDEX_TITLEBAR_MINBUTTON;
    internal static int INDEX_TITLEBAR_MAXBUTTON;
    internal static int INDEX_TITLEBAR_HELPBUTTON;
    internal static int INDEX_TITLEBAR_CLOSEBUTTON;
    internal static int INDEX_TITLEBAR_MIC;
    internal static int INDEX_TITLEBAR_MAC;
    internal static int CCHILDREN_TITLEBAR;
    internal static int HTTRANSPARENT;
    internal static int HTCAPTION;
    internal static int HTSYSMENU;
    internal static int HTGROWBOX;
    internal static int HTMENU;
    internal static int HTHSCROLL;
    internal static int HTVSCROLL;
    internal static int HTMINBUTTON;
    internal static int HTMAXBUTTON;
    internal static int HTLEFT;
    internal static int HTRIGHT;
    internal static int HTTOP;
    internal static int HTTOPLEFT;
    internal static int HTTOPRIGHT;
    internal static int HTBOTTOM;
    internal static int HTBOTTOMLEFT;
    internal static int HTBOTTOMRIGHT;
    internal static int HTBORDER;
    internal static int HTCLOSE;
    internal static int HTHELP;
    internal static int HTMDIMAXBUTTON;
    internal static int HTMDIMINBUTTON;
    internal static int HTMDICLOSE;
    internal static int SC_MINIMIZE;
    internal static int SC_MAXIMIZE;
    internal static int SC_CLOSE;
    internal static int SC_KEYMENU;
    internal static int SC_RESTORE;
    internal static int SC_CONTEXTHELP;
    internal static int WINEVENT_OUTOFCONTEXT;
    internal static int EVENT_MIN;
    internal static int EVENT_MAX;
    internal static int EVENT_SYSTEM_SOUND;
    internal static int EVENT_SYSTEM_ALERT;
    internal static int EVENT_SYSTEM_FOREGROUND;
    internal static int EVENT_SYSTEM_MENUSTART;
    internal static int EVENT_SYSTEM_MENUEND;
    internal static int EVENT_SYSTEM_MENUPOPUPSTART;
    internal static int EVENT_SYSTEM_MENUPOPUPEND;
    internal static int EVENT_SYSTEM_CAPTURESTART;
    internal static int EVENT_SYSTEM_CAPTUREEND;
    internal static int EVENT_SYSTEM_MOVESIZESTART;
    internal static int EVENT_SYSTEM_MOVESIZEEND;
    internal static int EVENT_SYSTEM_CONTEXTHELPSTART;
    internal static int EVENT_SYSTEM_CONTEXTHELPEND;
    internal static int EVENT_SYSTEM_DRAGDROPSTART;
    internal static int EVENT_SYSTEM_DRAGDROPEND;
    internal static int EVENT_SYSTEM_DIALOGSTART;
    internal static int EVENT_SYSTEM_DIALOGEND;
    internal static int EVENT_SYSTEM_SCROLLINGSTART;
    internal static int EVENT_SYSTEM_SCROLLINGEND;
    internal static int EVENT_SYSTEM_SWITCHEND;
    internal static int EVENT_SYSTEM_MINIMIZESTART;
    internal static int EVENT_SYSTEM_MINIMIZEEND;
    internal static int EVENT_SYSTEM_PAINT;
    internal static int EVENT_CONSOLE_CARET;
    internal static int EVENT_CONSOLE_UPDATE_REGION;
    internal static int EVENT_CONSOLE_UPDATE_SIMPLE;
    internal static int EVENT_CONSOLE_UPDATE_SCROLL;
    internal static int EVENT_CONSOLE_LAYOUT;
    internal static int EVENT_CONSOLE_START_APPLICATION;
    internal static int EVENT_CONSOLE_END_APPLICATION;
    internal static int EVENT_OBJECT_CREATE;
    internal static int EVENT_OBJECT_DESTROY;
    internal static int EVENT_OBJECT_SHOW;
    internal static int EVENT_OBJECT_HIDE;
    internal static int EVENT_OBJECT_REORDER;
    internal static int EVENT_OBJECT_FOCUS;
    internal static int EVENT_OBJECT_SELECTION;
    internal static int EVENT_OBJECT_SELECTIONADD;
    internal static int EVENT_OBJECT_SELECTIONREMOVE;
    internal static int EVENT_OBJECT_SELECTIONWITHIN;
    internal static int EVENT_OBJECT_STATECHANGE;
    internal static int EVENT_OBJECT_LOCATIONCHANGE;
    internal static int EVENT_OBJECT_NAMECHANGE;
    internal static int EVENT_OBJECT_DESCRIPTIONCHANGE;
    internal static int EVENT_OBJECT_VALUECHANGE;
    internal static int EVENT_OBJECT_PARENTCHANGE;
    internal static int EVENT_OBJECT_HELPCHANGE;
    internal static int EVENT_OBJECT_DEFACTIONCHANGE;
    internal static int EVENT_OBJECT_ACCELERATORCHANGE;
    public static int EventObjectUIFragmentCreate;
    internal static int TCIF_TEXT;
    internal static int TCIF_STATE;
    internal static int TCIS_BUTTONPRESSED;
    internal static int TCS_RIGHT;
    internal static int TCS_MULTISELECT;
    internal static int TCS_VERTICAL;
    internal static int TCS_BUTTONS;
    internal static int TCS_MULTILINE;
    internal static int TCS_FOCUSNEVER;
    internal static UInt32 HDI_TEXT;
    internal static UInt32 HDI_FORMAT;
    internal static UInt32 HDI_ORDER;
    internal static int HDS_BUTTONS;
    internal static int HDS_HIDDEN;
    internal static int HDS_FILTERBAR;
    internal static int HDF_SORTUP;
    internal static int HDF_SORTDOWN;
    internal static int HDF_SPLITBUTTON;
    internal static int HHT_ONHEADER;
    internal static int LIF_ITEMINDEX;
    internal static int LIF_STATE;
    internal static int LIF_ITEMID;
    internal static int LIF_URL;
    internal static int LIS_FOCUSED;
    internal static int LIS_ENABLED;
    internal static int LIS_VISITED;
    internal static int L_MAX_URL_LENGTH;
    internal static int UDS_HORZ;
    internal static int TTF_IDISHWND;
    private static NativeMethods();
    public static int IntPtrToInt32(IntPtr intPtr);
}
internal static class MS.Win32.SafeNativeMethods : object {
    public static UInt32 GetTickCount();
    internal static int GetSysColor(int nIndex);
    public static bool IntersectRect(Win32Rect& rcDest, Win32Rect& rc1, Win32Rect& rc2);
    internal static bool IsWindowEnabled(IntPtr hWnd);
    internal static bool IsWindowVisible(IntPtr hWnd);
    public static int MapVirtualKey(int nVirtKey, int nMapType);
    internal static int RegisterWindowMessage(string msg);
    internal static bool UnionRect(Win32Rect& rcDst, Win32Rect& rc1, Win32Rect& rc2);
    internal static IntPtr GetShellWindow();
}
internal static class MS.Win32.UnsafeNativeMethods : object {
    internal static int ProcessWow64Information;
    internal static int PAGE_NOACCESS;
    internal static int PAGE_READWRITE;
    internal static int MEM_COMMIT;
    internal static int MEM_RELEASE;
    internal static int MEM_FREE;
    internal static Guid IID_IUnknown;
    internal static Guid IID_IDispatch;
    internal static Guid IID_IAccessible;
    internal static int MONITOR_DEFAULTTONULL;
    public static int VK_SHIFT;
    public static int VK_CONTROL;
    public static int VK_MENU;
    public static int VK_RMENU;
    public static int VK_RCONTROL;
    public static int VK_NUMLOCK;
    public static int VK_INSERT;
    public static int VK_DELETE;
    public static int VK_HOME;
    public static int VK_END;
    public static int VK_PRIOR;
    public static int VK_NEXT;
    public static int VK_UP;
    public static int VK_DOWN;
    public static int VK_LEFT;
    public static int VK_RIGHT;
    public static int VK_APPS;
    public static int VK_RWIN;
    public static int VK_LWIN;
    private static UnsafeNativeMethods();
    internal static int GetDeviceCaps(IntPtr hdc, int nIndex);
    internal static int GetObjectW(IntPtr hObject, int size, LOGFONT& lf);
    internal static IntPtr SelectObject(IntPtr hdc, IntPtr hObject);
    internal static IntPtr GetStockObject(int nIndex);
    internal static bool CloseHandle(IntPtr h);
    internal static IntPtr OpenProcess(int flags, bool inherit, UInt32 dwProcessId);
    public static UInt32 GetCurrentProcessId();
    internal static void GetSystemInfo(SYSTEM_INFO& SystemInfo);
    internal static bool IsWow64Process(SafeProcessHandle hProcess, Boolean& Wow64Process);
    public static int NtQueryInformationProcess(SafeProcessHandle hProcess, int query, UInt64& info, int size, Int32[] returnedSize);
    internal static IntPtr GlobalLock(IntPtr handle);
    internal static bool GlobalUnlock(IntPtr handle);
    internal static IntPtr VirtualAlloc(IntPtr address, UIntPtr size, int allocationType, int protect);
    internal static IntPtr VirtualAllocEx(SafeProcessHandle hProcess, IntPtr address, UIntPtr size, int allocationType, int protect);
    internal static bool VirtualFree(IntPtr address, UIntPtr size, int freeType);
    internal static bool VirtualFreeEx(SafeProcessHandle hProcess, IntPtr address, UIntPtr size, int freeType);
    internal static bool ReadProcessMemory(SafeProcessHandle hProcess, IntPtr Source, IntPtr Dest, IntPtr size, IntPtr& bytesRead);
    internal static bool ReadProcessMemory(SafeProcessHandle hProcess, IntPtr Source, SafeCoTaskMem destAddress, IntPtr size, IntPtr& bytesRead);
    internal static bool WriteProcessMemory(SafeProcessHandle hProcess, IntPtr Dest, IntPtr sourceAddress, IntPtr size, IntPtr& bytesWritten);
    internal static int AccessibleChildren(IAccessible paccContainer, int iChildStart, int cChildren, Object[] rgvarChildren, Int32& pcObtained);
    internal static int AccessibleObjectFromWindow(IntPtr hwnd, int idObject, Guid& iid, Object& ppvObject);
    internal static int ObjectFromLresult(IntPtr lResult, Guid& iid, IntPtr wParam, IAccessible& ppvObject);
    public static int WindowFromAccessibleObject(IAccessible acc, IntPtr& hwnd);
    internal static IntPtr GetProcessHandleFromHwnd(IntPtr hwnd);
    internal static void ReleaseStgMedium(STGMEDIUM& medium);
    internal static IntPtr SetWinEventHook(int eventMin, int eventMax, IntPtr hmodWinEventProc, WinEventProcDef WinEventReentrancyFilter, UInt32 idProcess, UInt32 idThread, int dwFlags);
    internal static bool UnhookWinEvent(IntPtr winEventHook);
    internal static short GlobalAddAtom(string atomName);
    internal static int MsgWaitForMultipleObjects(int nCount, IntPtr[] handles, bool fWaitAll, int dwMilliseconds, int dwWakeMask);
    public static IntPtr GetMenu(IntPtr hwnd);
    public static IntPtr GetSubMenu(IntPtr hmenu, int nPos);
    public static int GetMenuState(IntPtr hmenu, int uIDCheckItem, int uCheck);
    public static int GetMenuString(IntPtr hMenu, int uIDItem, StringBuilder lpString, int nMaxCount, UInt32 uFlag);
    public static int GetMenuString(IntPtr hMenu, int uIDItem, IntPtr lpString, int nMaxCount, UInt32 uFlag);
    public static int GetMenuItemCount(IntPtr hmenu);
    public static int GetMenuItemID(IntPtr hmenu, int uCheck);
    public static bool GetMenuItemInfo(IntPtr hMenu, int uItem, bool fByPosition, MENUITEMINFO& menuItemInfo);
    public static bool GetMenuItemRect(IntPtr hWnd, IntPtr hMenu, int uItem, Win32Rect& lprcItem);
    internal static IntPtr DispatchMessage(MSG& msg);
    internal static int GetMessage(MSG& msg, IntPtr hWnd, int uMsgFilterMin, int uMsgFilterMax);
    internal static bool PeekMessage(MSG& msg, IntPtr hwnd, int uMsgFilterMin, int uMsgFilterMax, int wRemoveMsg);
    internal static bool PostMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);
    internal static IntPtr SendMessageTimeout(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, int flags, int uTimeout, IntPtr& pResult);
    internal static IntPtr SendMessageTimeout(IntPtr hwnd, int uMsg, IntPtr wParam, StringBuilder lParam, int flags, int uTimeout, IntPtr& result);
    internal static IntPtr SendMessageTimeout(IntPtr hwnd, int uMsg, IntPtr wParam, Win32Rect& lParam, int flags, int uTimeout, IntPtr& result);
    internal static IntPtr SendMessageTimeout(IntPtr hwnd, int uMsg, IntPtr wParam, TITLEBARINFOEX& lParam, int flags, int uTimeout, IntPtr& result);
    internal static IntPtr SendMessageTimeout(IntPtr hwnd, int uMsg, Int32& wParam, Int32& lParam, int flags, int uTimeout, IntPtr& result);
    internal static bool TranslateMessage(MSG& msg);
    internal static IntPtr MonitorFromRect(Win32Rect& rect, int dwFlags);
    internal static short GetAsyncKeyState(int vkey);
    internal static bool RegisterHotKey(IntPtr hwnd, int atom, int fsModifiers, int vk);
    internal static int SendInput(int nInputs, INPUT& ki, int cbSize);
    internal static short VkKeyScan(char key);
    internal static bool UnregisterHotKey(IntPtr hwnd, int atom);
    internal static bool GetComboBoxInfo(IntPtr hwnd, COMBOBOXINFO& cbInfo);
    internal static bool GetCursorPos(Win32Point& pt);
    internal static bool GetPhysicalCursorPos(Win32Point& pt);
    public static int DwmIsCompositionEnabled(Int32& enabled);
    internal static bool GetScrollBarInfo(IntPtr hwnd, int fnBar, ScrollBarInfo& lpsi);
    internal static bool GetScrollInfo(IntPtr hwnd, int fnBar, ScrollInfo& lpsi);
    internal static bool EnumChildWindows(IntPtr hwndParent, EnumChildrenCallbackVoid lpEnumFunc, Void* lParam);
    internal static bool EnumThreadWindows(UInt32 threadId, EnumThreadWndProc lpEnumFunc, ENUMTOOLTIPWINDOWINFO& lParam);
    internal static IntPtr GetDesktopWindow();
    internal static bool GetClientRect(IntPtr hWnd, Win32Rect& rect);
    internal static bool GetGUIThreadInfo(UInt32 idThread, GUITHREADINFO& guiThreadInfo);
    public static bool GetTitleBarInfo(IntPtr hwnd, TITLEBARINFO& pti);
    internal static bool GetWindowRect(IntPtr hWnd, Win32Rect& rect);
    internal static UInt32 GetWindowThreadProcessId(IntPtr hwnd, UInt32& dwProcessId);
    internal static bool IsWindow(IntPtr hWnd);
    internal static UInt32 RealGetWindowClass(IntPtr hwnd, StringBuilder className, UInt32 maxCount);
    internal static bool SetForegroundWindow(IntPtr hWnd);
    internal static bool GetAltTabInfo(IntPtr hwnd, int iItem, ALTTABINFO& pati, StringBuilder pszItemText, UInt32 cchItemText);
    private static IntPtr IntWindowFromPoint(POINTSTRUCT pt);
    private static IntPtr IntWindowFromPhysicalPoint(POINTSTRUCT pt);
    public static IntPtr WindowFromPhysicalPoint(int x, int y);
    internal static int GetClassName(IntPtr hwnd, StringBuilder className, int maxCount);
    internal static int GetWindowLong(IntPtr hWnd, int nIndex, Int32& error);
    internal static IntPtr GetProp(IntPtr hwnd, string name);
    internal static IntPtr GetDC(IntPtr hWnd);
    internal static int ReleaseDC(IntPtr hWnd, IntPtr hDC);
    internal static int GetSystemMetrics(int nIndex);
}
internal static class System.SR : object {
    private static ResourceManager ResourceManager { get; }
    public static string Get(string name);
    public static string Get(string name, Object[] args);
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
}
internal static class System.SRID : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static string DoesNotSupportMultipleSelection;
    internal static string EditControlsHaveNoChildren;
    internal static string GridColumnOutOfRange;
    internal static string GridRowOutOfRange;
    internal static string InvalidParameter;
    internal static string InvalidRangeEndpoint;
    internal static string InvalidTextRangeOffset;
    internal static string KeyAlt;
    internal static string KeyControl;
    internal static string KeyCtrl;
    internal static string KeyDel;
    internal static string KeyDelete;
    internal static string KeyEnd;
    internal static string KeyEsc;
    internal static string KeyHelp;
    internal static string KeyHome;
    internal static string KeyIns;
    internal static string KeyInsert;
    internal static string KeyPageDown;
    internal static string KeyPageUp;
    internal static string KeyPause;
    internal static string KeyPrtScn;
    internal static string KeyScrLk;
    internal static string KeyShift;
    internal static string KeySpace;
    internal static string KeySysRq;
    internal static string KeyTab;
    internal static string KeyWinKey;
    internal static string LocalizedControlTypeContainer;
    internal static string LocalizedControlTypeDialog;
    internal static string LocalizedControlTypeGrip;
    internal static string LocalizedControlTypeIPAddress;
    internal static string LocalizedControlTypeOctet;
    internal static string LocalizedControlTypeRebar;
    internal static string LocalizedControlTypeRebarBand;
    internal static string LocalizedNameWindowsComboButton;
    internal static string LocalizedNameWindowsHorizontalScrollBar;
    internal static string LocalizedNameWindowsMenu;
    internal static string LocalizedNameWindowsMenuBar;
    internal static string LocalizedNameWindowsMenuSeparator;
    internal static string LocalizedNameWindowsReBarBandItem;
    internal static string LocalizedNameWindowsScrollBarBitsBackByLargeAmount;
    internal static string LocalizedNameWindowsScrollBarBitsBackBySmallAmount;
    internal static string LocalizedNameWindowsScrollBarBitsForwardByLargeAmount;
    internal static string LocalizedNameWindowsScrollBarBitsForwardBySmallAmount;
    internal static string LocalizedNameWindowsScrollBarBitsThumb;
    internal static string LocalizedNameWindowsSliderItemBackByLargeAmount;
    internal static string LocalizedNameWindowsSliderItemForwardByLargeAmount;
    internal static string LocalizedNameWindowsSliderItemThumb;
    internal static string LocalizedNameWindowsSpinButtonItemBackward;
    internal static string LocalizedNameWindowsSpinButtonItemForward;
    internal static string LocalizedNameWindowsSysHeader;
    internal static string LocalizedNameWindowsSystemMenuBar;
    internal static string LocalizedNameWindowsSystemMenuItem;
    internal static string LocalizedNameWindowsTitleBarButtonClose;
    internal static string LocalizedNameWindowsTitleBarButtonContextHelp;
    internal static string LocalizedNameWindowsTitleBarButtonMaximize;
    internal static string LocalizedNameWindowsTitleBarButtonMinimize;
    internal static string LocalizedNameWindowsTitleBarButtonRestore;
    internal static string LocalizedNameWindowsTitleBarButtonUnknown;
    internal static string LocalizedNameWindowsUpDown;
    internal static string LocalizedNameWindowsVerticalScrollBar;
    internal static string NoITextDocumentFromRichEdit;
    internal static string NotAValidValue;
    internal static string OperationCannotBePerformed;
    internal static string RangeValueMax;
    internal static string RangeValueMin;
    internal static string RichEditTextPatternHasNoChildren;
    internal static string ScrollBarOutOfRange;
    internal static string SelectionRequired;
    internal static string SetFocusFailed;
    internal static string ShouldBeZero;
    internal static string ValueReadonly;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
}
public static class UIAutomationClientsideProviders.UIAutomationClientSideProviders : object {
    public static ClientSideProviderDescription[] ClientSideProviderDescriptionTable;
    private static UIAutomationClientSideProviders();
}
