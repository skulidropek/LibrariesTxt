public class Microsoft.Xaml.Interactions.Core.CallMethodAction : DependencyObject {
    public static DependencyProperty MethodNameProperty;
    public static DependencyProperty TargetObjectProperty;
    private Type _targetObjectType;
    private List`1<MethodDescriptor> _methodDescriptors;
    private MethodDescriptor _cachedMethodDescriptor;
    public string MethodName { get; public set; }
    public object TargetObject { get; public set; }
    private static CallMethodAction();
    public string get_MethodName();
    public void set_MethodName(string value);
    public object get_TargetObject();
    public void set_TargetObject(object value);
    public sealed virtual object Execute(object sender, object parameter);
    private MethodDescriptor FindBestMethod(object parameter);
    private void UpdateTargetType(Type newTargetType);
    private void UpdateMethodDescriptors();
    private static void OnMethodNameChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void OnTargetObjectChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
}
public class Microsoft.Xaml.Interactions.Core.ChangePropertyAction : DependencyObject {
    public static DependencyProperty PropertyNameProperty;
    public static DependencyProperty TargetObjectProperty;
    public static DependencyProperty ValueProperty;
    public PropertyPath PropertyName { get; public set; }
    public object Value { get; public set; }
    public object TargetObject { get; public set; }
    private static ChangePropertyAction();
    public PropertyPath get_PropertyName();
    public void set_PropertyName(PropertyPath value);
    public object get_Value();
    public void set_Value(object value);
    public object get_TargetObject();
    public void set_TargetObject(object value);
    public sealed virtual object Execute(object sender, object parameter);
    private void UpdatePropertyValue(object targetObject);
    private void ValidateProperty(string targetTypeName, PropertyInfo propertyInfo);
}
public enum Microsoft.Xaml.Interactions.Core.ComparisonConditionType : Enum {
    public int value__;
    public static ComparisonConditionType Equal;
    public static ComparisonConditionType NotEqual;
    public static ComparisonConditionType LessThan;
    public static ComparisonConditionType LessThanOrEqual;
    public static ComparisonConditionType GreaterThan;
    public static ComparisonConditionType GreaterThanOrEqual;
}
internal static class Microsoft.Xaml.Interactions.Core.DataBindingHelper : object {
    private static Dictionary`2<Type, List`1<DependencyProperty>> DependenciesPropertyCache;
    private static DataBindingHelper();
    public static void RefreshDataBindingsOnActions(ActionCollection actions);
    private static IEnumerable`1<DependencyProperty> GetDependencyProperties(Type type);
    private static void RefreshBinding(DependencyObject target, DependencyProperty property);
}
public class Microsoft.Xaml.Interactions.Core.DataTriggerBehavior : Trigger {
    public static DependencyProperty BindingProperty;
    public static DependencyProperty ComparisonConditionProperty;
    public static DependencyProperty ValueProperty;
    public object Binding { get; public set; }
    public ComparisonConditionType ComparisonCondition { get; public set; }
    public object Value { get; public set; }
    private static DataTriggerBehavior();
    public object get_Binding();
    public void set_Binding(object value);
    public ComparisonConditionType get_ComparisonCondition();
    public void set_ComparisonCondition(ComparisonConditionType value);
    public object get_Value();
    public void set_Value(object value);
    private static bool Compare(object leftOperand, ComparisonConditionType operatorType, object rightOperand);
    private static bool EvaluateComparable(IComparable leftOperand, ComparisonConditionType operatorType, IComparable rightOperand);
    private static void OnValueChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
}
public class Microsoft.Xaml.Interactions.Core.EventTriggerBehavior : Trigger {
    public static DependencyProperty EventNameProperty;
    public static DependencyProperty SourceObjectProperty;
    private object _resolvedSource;
    private Delegate _eventHandler;
    private bool _isLoadedEventRegistered;
    private bool _isWindowsRuntimeEvent;
    private Func`2<Delegate, EventRegistrationToken> _addEventHandlerMethod;
    private Action`1<EventRegistrationToken> _removeEventHandlerMethod;
    public string EventName { get; public set; }
    public object SourceObject { get; public set; }
    private static EventTriggerBehavior();
    public string get_EventName();
    public void set_EventName(string value);
    public object get_SourceObject();
    public void set_SourceObject(object value);
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
    private void SetResolvedSource(object newSource);
    private object ComputeResolvedSource();
    private void RegisterEvent(string eventName);
    private void UnregisterEvent(string eventName);
    private void OnEvent(object sender, object eventArgs);
    private static void OnSourceObjectChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    private static void OnEventNameChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    internal static bool IsElementLoaded(FrameworkElement element);
    private static bool IsWindowsRuntimeEvent(EventInfo eventInfo);
    private static bool IsWindowsRuntimeType(Type type);
}
public class Microsoft.Xaml.Interactions.Core.GoToStateAction : DependencyObject {
    public static DependencyProperty UseTransitionsProperty;
    public static DependencyProperty StateNameProperty;
    public static DependencyProperty TargetObjectProperty;
    public bool UseTransitions { get; public set; }
    public string StateName { get; public set; }
    public FrameworkElement TargetObject { get; public set; }
    private static GoToStateAction();
    public bool get_UseTransitions();
    public void set_UseTransitions(bool value);
    public string get_StateName();
    public void set_StateName(string value);
    public FrameworkElement get_TargetObject();
    public void set_TargetObject(FrameworkElement value);
    public sealed virtual object Execute(object sender, object parameter);
}
public class Microsoft.Xaml.Interactions.Core.IncrementalUpdateBehavior : Behavior`1<FrameworkElement> {
    public static DependencyProperty PhaseProperty;
    private static DependencyProperty IncrementalUpdaterProperty;
    private IncrementalUpdater _updater;
    public int Phase { get; public set; }
    private static IncrementalUpdateBehavior();
    public int get_Phase();
    public void set_Phase(int value);
    private static void OnPhaseChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static IncrementalUpdater GetIncrementalUpdater(DependencyObject dependencyObject);
    private static void SetIncrementalUpdater(DependencyObject dependencyObject, IncrementalUpdater value);
    private static void OnIncrementalUpdaterChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private void OnAssociatedObjectLoaded(object sender, RoutedEventArgs e);
    private void OnAssociatedObjectUnloaded(object sender, RoutedEventArgs e);
    private IncrementalUpdater FindUpdater();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
}
public class Microsoft.Xaml.Interactions.Core.InvokeCommandAction : DependencyObject {
    public static DependencyProperty CommandProperty;
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty InputConverterProperty;
    public static DependencyProperty InputConverterParameterProperty;
    public static DependencyProperty InputConverterLanguageProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public IValueConverter InputConverter { get; public set; }
    public object InputConverterParameter { get; public set; }
    public string InputConverterLanguage { get; public set; }
    private static InvokeCommandAction();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public IValueConverter get_InputConverter();
    public void set_InputConverter(IValueConverter value);
    public object get_InputConverterParameter();
    public void set_InputConverterParameter(object value);
    public string get_InputConverterLanguage();
    public void set_InputConverterLanguage(string value);
    public sealed virtual object Execute(object sender, object parameter);
}
public class Microsoft.Xaml.Interactions.Core.NavigateToPageAction : DependencyObject {
    private IVisualTreeHelper _visualTreeHelper;
    public static DependencyProperty TargetPageProperty;
    public static DependencyProperty ParameterProperty;
    public string TargetPage { get; public set; }
    public object Parameter { get; public set; }
    internal NavigateToPageAction(IVisualTreeHelper visualTreeHelper);
    private static NavigateToPageAction();
    public string get_TargetPage();
    public void set_TargetPage(string value);
    public object get_Parameter();
    public void set_Parameter(object value);
    public sealed virtual object Execute(object sender, object parameter);
}
internal static class Microsoft.Xaml.Interactions.Core.ResourceHelper : object {
    public static string CallMethodActionValidMethodNotFoundExceptionMessage { get; }
    public static string ChangePropertyActionCannotFindPropertyNameExceptionMessage { get; }
    public static string ChangePropertyActionCannotSetValueExceptionMessage { get; }
    public static string ChangePropertyActionPropertyIsReadOnlyExceptionMessage { get; }
    public static string GoToStateActionTargetHasNoStateGroups { get; }
    public static string CannotAttachBehaviorMultipleTimesExceptionMessage { get; }
    public static string CannotFindEventNameExceptionMessage { get; }
    public static string InvalidLeftOperand { get; }
    public static string InvalidRightOperand { get; }
    public static string InvalidOperands { get; }
    public static string GetString(string resourceName);
    public static string get_CallMethodActionValidMethodNotFoundExceptionMessage();
    public static string get_ChangePropertyActionCannotFindPropertyNameExceptionMessage();
    public static string get_ChangePropertyActionCannotSetValueExceptionMessage();
    public static string get_ChangePropertyActionPropertyIsReadOnlyExceptionMessage();
    public static string get_GoToStateActionTargetHasNoStateGroups();
    public static string get_CannotAttachBehaviorMultipleTimesExceptionMessage();
    public static string get_CannotFindEventNameExceptionMessage();
    public static string get_InvalidLeftOperand();
    public static string get_InvalidRightOperand();
    public static string get_InvalidOperands();
}
internal static class Microsoft.Xaml.Interactions.Core.TypeConverterHelper : object {
    private static string ContentControlFormatString;
    public static object Convert(string value, string destinationTypeFullName);
    private static string GetScope(string name);
    private static string GetType(string name);
}
public class Microsoft.Xaml.Interactions.Media.ControlStoryboardAction : DependencyObject {
    public static DependencyProperty ControlStoryboardOptionProperty;
    public static DependencyProperty StoryboardProperty;
    private bool _isPaused;
    public ControlStoryboardOption ControlStoryboardOption { get; public set; }
    public Storyboard Storyboard { get; public set; }
    private static ControlStoryboardAction();
    public ControlStoryboardOption get_ControlStoryboardOption();
    public void set_ControlStoryboardOption(ControlStoryboardOption value);
    public Storyboard get_Storyboard();
    public void set_Storyboard(Storyboard value);
    public sealed virtual object Execute(object sender, object parameter);
    private static void OnStoryboardChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
}
public enum Microsoft.Xaml.Interactions.Media.ControlStoryboardOption : Enum {
    public int value__;
    public static ControlStoryboardOption Play;
    public static ControlStoryboardOption Stop;
    public static ControlStoryboardOption TogglePlayPause;
    public static ControlStoryboardOption Pause;
    public static ControlStoryboardOption Resume;
    public static ControlStoryboardOption SkipToFill;
}
public class Microsoft.Xaml.Interactions.Media.PlaySoundAction : DependencyObject {
    private static string MsAppXSchemeFormatString;
    public static DependencyProperty SourceProperty;
    public static DependencyProperty VolumeProperty;
    private Popup _popup;
    public string Source { get; public set; }
    public double Volume { get; public set; }
    private static PlaySoundAction();
    public string get_Source();
    public void set_Source(string value);
    public double get_Volume();
    public void set_Volume(double value);
    public sealed virtual object Execute(object sender, object parameter);
    private void MediaElement_MediaFailed(object sender, ExceptionRoutedEventArgs e);
    private void MediaElement_MediaEnded(object sender, RoutedEventArgs e);
}
internal interface Microsoft.Xaml.Interactions.Utility.IVisualTreeHelper {
    public abstract virtual DependencyObject GetParent(DependencyObject reference);
}
internal class Microsoft.Xaml.Interactions.Utility.UwpVisualTreeHelper : object {
    public sealed virtual DependencyObject GetParent(DependencyObject reference);
}
