public class Microsoft.Xaml.Interactivity.ActionCollection : DependencyObjectCollection {
    private void ActionCollection_VectorChanged(IObservableVector`1<DependencyObject> sender, IVectorChangedEventArgs eventArgs);
    private static void VerifyType(DependencyObject item);
}
public abstract class Microsoft.Xaml.Interactivity.Behavior : DependencyObject {
    [CompilerGeneratedAttribute]
private DependencyObject <AssociatedObject>k__BackingField;
    public DependencyObject AssociatedObject { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual DependencyObject get_AssociatedObject();
    [CompilerGeneratedAttribute]
private void set_AssociatedObject(DependencyObject value);
    public sealed virtual void Attach(DependencyObject associatedObject);
    public sealed virtual void Detach();
    protected virtual void OnAttached();
    protected virtual void OnDetaching();
}
public abstract class Microsoft.Xaml.Interactivity.Behavior`1 : Behavior {
    public T AssociatedObject { get; }
    public T get_AssociatedObject();
    protected virtual void OnAttached();
}
public class Microsoft.Xaml.Interactivity.BehaviorCollection : DependencyObjectCollection {
    private List`1<IBehavior> _oldCollection;
    [CompilerGeneratedAttribute]
private DependencyObject <AssociatedObject>k__BackingField;
    public DependencyObject AssociatedObject { get; private set; }
    [CompilerGeneratedAttribute]
public DependencyObject get_AssociatedObject();
    [CompilerGeneratedAttribute]
private void set_AssociatedObject(DependencyObject value);
    public void Attach(DependencyObject associatedObject);
    public void Detach();
    private void BehaviorCollection_VectorChanged(IObservableVector`1<DependencyObject> sender, IVectorChangedEventArgs eventArgs);
    private IBehavior VerifiedAttach(DependencyObject item);
    [ConditionalAttribute("DEBUG")]
private void VerifyOldCollectionIntegrity();
}
public enum Microsoft.Xaml.Interactivity.CustomPropertyValueEditor : Enum {
    public int value__;
    public static CustomPropertyValueEditor Storyboard;
    public static CustomPropertyValueEditor StateName;
    public static CustomPropertyValueEditor ElementBinding;
    public static CustomPropertyValueEditor PropertyBinding;
}
[AttributeUsageAttribute("128")]
public class Microsoft.Xaml.Interactivity.CustomPropertyValueEditorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CustomPropertyValueEditor <CustomPropertyValueEditor>k__BackingField;
    public CustomPropertyValueEditor CustomPropertyValueEditor { get; private set; }
    public CustomPropertyValueEditorAttribute(CustomPropertyValueEditor customPropertyValueEditor);
    [CompilerGeneratedAttribute]
public CustomPropertyValueEditor get_CustomPropertyValueEditor();
    [CompilerGeneratedAttribute]
private void set_CustomPropertyValueEditor(CustomPropertyValueEditor value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Xaml.Interactivity.DefaultEventAttribute : Attribute {
    private Type _targetType;
    private string _eventName;
    public Type TargetType { get; }
    public string EventName { get; }
    public DefaultEventAttribute(Type targetType, string eventName);
    public Type get_TargetType();
    public string get_EventName();
}
public interface Microsoft.Xaml.Interactivity.IAction {
    public abstract virtual object Execute(object sender, object parameter);
}
public interface Microsoft.Xaml.Interactivity.IBehavior {
    public DependencyObject AssociatedObject { get; }
    public abstract virtual DependencyObject get_AssociatedObject();
    public abstract virtual void Attach(DependencyObject associatedObject);
    public abstract virtual void Detach();
}
public class Microsoft.Xaml.Interactivity.Interaction : object {
    public static DependencyProperty BehaviorsProperty;
    private static Interaction();
    public static BehaviorCollection GetBehaviors(DependencyObject obj);
    public static void SetBehaviors(DependencyObject obj, BehaviorCollection value);
    public static IEnumerable`1<object> ExecuteActions(object sender, ActionCollection actions, object parameter);
    private static void OnBehaviorsChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args);
    private static void FrameworkElement_Loaded(object sender, RoutedEventArgs e);
    private static void FrameworkElement_Unloaded(object sender, RoutedEventArgs e);
}
public interface Microsoft.Xaml.Interactivity.ITrigger {
    public ActionCollection Actions { get; }
    public abstract virtual ActionCollection get_Actions();
}
internal static class Microsoft.Xaml.Interactivity.ResourceHelper : object {
    public static string CallMethodActionValidMethodNotFoundExceptionMessage { get; }
    public static string ChangePropertyActionCannotFindPropertyNameExceptionMessage { get; }
    public static string ChangePropertyActionCannotSetValueExceptionMessage { get; }
    public static string ChangePropertyActionPropertyIsReadOnlyExceptionMessage { get; }
    public static string GoToStateActionTargetHasNoStateGroups { get; }
    public static string CannotAttachBehaviorMultipleTimesExceptionMessage { get; }
    public static string CannotFindEventNameExceptionMessage { get; }
    public static string InvalidLeftOperand { get; }
    public static string InvalidRightOperand { get; }
    public static string InvalidOperands { get; }
    public static string GetString(string resourceName);
    public static string get_CallMethodActionValidMethodNotFoundExceptionMessage();
    public static string get_ChangePropertyActionCannotFindPropertyNameExceptionMessage();
    public static string get_ChangePropertyActionCannotSetValueExceptionMessage();
    public static string get_ChangePropertyActionPropertyIsReadOnlyExceptionMessage();
    public static string get_GoToStateActionTargetHasNoStateGroups();
    public static string get_CannotAttachBehaviorMultipleTimesExceptionMessage();
    public static string get_CannotFindEventNameExceptionMessage();
    public static string get_InvalidLeftOperand();
    public static string get_InvalidRightOperand();
    public static string get_InvalidOperands();
}
[ContentPropertyAttribute]
public abstract class Microsoft.Xaml.Interactivity.Trigger : Behavior {
    public static DependencyProperty ActionsProperty;
    public ActionCollection Actions { get; }
    private static Trigger();
    public sealed virtual ActionCollection get_Actions();
}
public abstract class Microsoft.Xaml.Interactivity.Trigger`1 : Trigger {
    [EditorBrowsableAttribute("1")]
public T AssociatedObject { get; }
    public T get_AssociatedObject();
    protected virtual void OnAttached();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Xaml.Interactivity.TypeConstraintAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Constraint>k__BackingField;
    public Type Constraint { get; private set; }
    public TypeConstraintAttribute(Type constraint);
    [CompilerGeneratedAttribute]
public Type get_Constraint();
    [CompilerGeneratedAttribute]
private void set_Constraint(Type value);
}
public static class Microsoft.Xaml.Interactivity.VisualStateUtilities : object {
    public static bool GoToState(Control control, string stateName, bool useTransitions);
    public static IList`1<VisualStateGroup> GetVisualStateGroups(FrameworkElement element);
    public static Control FindNearestStatefulControl(FrameworkElement element);
    private static bool HasVisualStateGroupsDefined(FrameworkElement element);
    private static bool ShouldContinueTreeWalk(FrameworkElement element);
}
