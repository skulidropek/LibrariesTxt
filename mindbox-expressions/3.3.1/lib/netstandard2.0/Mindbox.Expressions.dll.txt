public static class Mindbox.Expressions.BooleanExpressions : object {
    public static Expression`1<Func`1<bool>> CombineViaAndAlso(IEnumerable`1<Expression`1<Func`1<bool>>> expressions);
    public static Expression`1<Func`2<T1, bool>> CombineViaAndAlso(IEnumerable`1<Expression`1<Func`2<T1, bool>>> expressions);
    public static Expression`1<Func`3<T1, T2, bool>> CombineViaAndAlso(IEnumerable`1<Expression`1<Func`3<T1, T2, bool>>> expressions);
    public static Expression`1<Func`4<T1, T2, T3, bool>> CombineViaAndAlso(IEnumerable`1<Expression`1<Func`4<T1, T2, T3, bool>>> expressions);
    public static Expression`1<Func`5<T1, T2, T3, T4, bool>> CombineViaAndAlso(IEnumerable`1<Expression`1<Func`5<T1, T2, T3, T4, bool>>> expressions);
    public static Expression`1<Func`1<bool>> CombineViaOrElse(IEnumerable`1<Expression`1<Func`1<bool>>> expressions);
    public static Expression`1<Func`2<T1, bool>> CombineViaOrElse(IEnumerable`1<Expression`1<Func`2<T1, bool>>> expressions);
    public static Expression`1<Func`3<T1, T2, bool>> CombineViaOrElse(IEnumerable`1<Expression`1<Func`3<T1, T2, bool>>> expressions);
    public static Expression`1<Func`4<T1, T2, T3, bool>> CombineViaOrElse(IEnumerable`1<Expression`1<Func`4<T1, T2, T3, bool>>> expressions);
    public static Expression`1<Func`5<T1, T2, T3, T4, bool>> CombineViaOrElse(IEnumerable`1<Expression`1<Func`5<T1, T2, T3, T4, bool>>> expressions);
    private static LambdaExpression Combine(IEnumerable`1<LambdaExpression> expressions, Func`3<Expression, Expression, Expression> operation);
}
public class Mindbox.Expressions.CachingCompilingExpressionEvaluator : object {
    private ConcurrentDictionary`2<string, Func`2<Object[], object>> compiledExpressionsCache;
    [CompilerGeneratedAttribute]
private static CachingCompilingExpressionEvaluator <Instance>k__BackingField;
    public static CachingCompilingExpressionEvaluator Instance { get; }
    private static CachingCompilingExpressionEvaluator();
    public sealed virtual object Evaluate(Expression expression);
    private static Expression Parametrize(Expression expression, ParameterExpression arrayOfValuesParameter);
    private static Object[] GetCapturedValues(Expression expression);
    [CompilerGeneratedAttribute]
public static CachingCompilingExpressionEvaluator get_Instance();
}
internal class Mindbox.Expressions.ClosureCapturedValuesParametrizer : ClosureCapturedValuesVisitor {
    private ParameterExpression arrayOfValues;
    private int visitedIndex;
    private ClosureCapturedValuesParametrizer(ParameterExpression arrayOfValues);
    public static Expression GetParametrizedExpression(Expression expression, ParameterExpression arrayOfValues);
    protected virtual Expression TryProcessClosure(ConstantExpression node);
    private UnaryExpression CreateIndexExpression(ConstantExpression node);
}
internal class Mindbox.Expressions.ClosureCapturedValuesProvider : ClosureCapturedValuesVisitor {
    private List`1<object> capturedValues;
    public static Object[] GetCapturedValues(Expression expression);
    protected virtual Expression TryProcessClosure(ConstantExpression node);
}
internal abstract class Mindbox.Expressions.ClosureCapturedValuesVisitor : ExpressionVisitor {
    protected sealed virtual Expression VisitConstant(ConstantExpression node);
    protected abstract virtual Expression TryProcessClosure(ConstantExpression node);
}
public class Mindbox.Expressions.CompilingExpressionEvaluator : object {
    [CompilerGeneratedAttribute]
private static CompilingExpressionEvaluator <Instance>k__BackingField;
    public static CompilingExpressionEvaluator Instance { get; }
    private static CompilingExpressionEvaluator();
    public sealed virtual object Evaluate(Expression expression);
    [CompilerGeneratedAttribute]
public static CompilingExpressionEvaluator get_Instance();
}
public class Mindbox.Expressions.EvaluationScope : object {
    [CompilerGeneratedAttribute]
private static EvaluationScope <Empty>k__BackingField;
    public static EvaluationScope Empty { get; }
    private static EvaluationScope();
    [CompilerGeneratedAttribute]
public static EvaluationScope get_Empty();
    public object TryEvaluate(Expression expression);
    private object EvaluateMethod(MethodCallExpression methodCallExpression);
}
internal class Mindbox.Expressions.ExpressionExpander : ExpressionVisitor {
    private static MethodInfo MethodInfoCreateDelegateMethod;
    private static MethodInfo DelegateCreateDelegateMethod;
    private static string EvaluateMethodName;
    private static string InvokeMethodName;
    private static string CompileMethodName;
    private static ExpressionExpander();
    public static Expression ExpandExpression(Expression expression);
    private static LambdaExpression GetLambdaExpressionFromExpression(Expression expression);
    private static bool IsEvaluateMethod(MethodInfo method);
    private static bool IsCompileMethod(MethodInfo method);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private Expression SubstituteExpression(Expression expressionExpression, IList`1<Expression> arguments);
}
internal class Mindbox.Expressions.ExpressionFunction`1 : object {
    private Expression expression;
    internal Delegate EvaluationFunction { get; }
    public ExpressionFunction`1(Expression expression);
    internal Delegate get_EvaluationFunction();
    private TResult Evaluate();
}
public static class Mindbox.Expressions.ExpressionFunctionFactory : object {
    private static ConcurrentDictionary`2<Type, Func`2<Expression, Delegate>> FunctionFactories;
    private static ExpressionFunctionFactory();
    public static Delegate Create(Expression expression);
    private static Func`2<Expression, Delegate> CreateExpressionFunctionFactory(Type expressionType);
}
public class Mindbox.Expressions.ExpressionParameterPresenceDetector : ExpressionVisitor {
    private bool doesExpressionHaveParameters;
    private List`1<ParameterExpression> allowedParameters;
    public static bool DoesExpressionHaveParameters(Expression expression);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitLambda(LambdaExpression node);
}
internal class Mindbox.Expressions.ExpressionParameterSubstitutor : ExpressionVisitor {
    private Dictionary`2<ParameterExpression, Expression> parameterSubstitutions;
    private ExpressionParameterSubstitutor(IDictionary`2<ParameterExpression, Expression> parameterSubstitutions);
    public static Expression SubstituteParameters(Expression expression, IDictionary`2<ParameterExpression, Expression> parameterSubstitutions);
    public static Expression SubstituteParameter(Expression expression, ParameterExpression oldParameter, Expression newParameter);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitLambda(LambdaExpression node);
}
public static class Mindbox.Expressions.ExpressionsConfiguration : object {
    [CompilerGeneratedAttribute]
private static Func`1<IExpressionEvaluator> <ExpressionEvaluatorFactory>k__BackingField;
    public static Func`1<IExpressionEvaluator> ExpressionEvaluatorFactory { get; public set; }
    private static ExpressionsConfiguration();
    [CompilerGeneratedAttribute]
public static Func`1<IExpressionEvaluator> get_ExpressionEvaluatorFactory();
    [CompilerGeneratedAttribute]
public static void set_ExpressionEvaluatorFactory(Func`1<IExpressionEvaluator> value);
}
public abstract class Mindbox.Expressions.ExpressionVisitor : object {
    protected virtual Expression Visit(Expression exp);
    protected virtual MemberBinding VisitBinding(MemberBinding binding);
    protected virtual ElementInit VisitElementInitializer(ElementInit initializer);
    protected virtual Expression VisitUnary(UnaryExpression u);
    protected virtual Expression VisitBinary(BinaryExpression b);
    protected virtual Expression VisitTypeIs(TypeBinaryExpression b);
    protected virtual Expression VisitConstant(ConstantExpression c);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitParameter(ParameterExpression p);
    protected virtual Expression VisitMemberAccess(MemberExpression m);
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    protected virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    protected virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    protected virtual Expression VisitLambda(LambdaExpression lambda);
    protected virtual NewExpression VisitNew(NewExpression nex);
    protected virtual Expression VisitMemberInit(MemberInitExpression init);
    protected virtual Expression VisitListInit(ListInitExpression init);
    protected virtual Expression VisitNewArray(NewArrayExpression na);
    protected virtual Expression VisitInvocation(InvocationExpression iv);
}
[ExtensionAttribute]
public static class Mindbox.Expressions.Extensions : object {
    [ExtensionAttribute]
public static Expression ExpandExpressions(Expression expression);
    [ExtensionAttribute]
public static Expression`1<TDelegate> ExpandExpressions(Expression`1<TDelegate> expression);
    [ExtensionAttribute]
public static IQueryable`1<T> ExpandExpressions(IQueryable`1<T> query);
    [ExtensionAttribute]
public static TResult Evaluate(Expression`1<Func`1<TResult>> expression);
    [ExtensionAttribute]
public static TResult Evaluate(Expression`1<Func`2<T1, TResult>> expression, T1 argument1);
    [ExtensionAttribute]
public static TResult Evaluate(Expression`1<Func`3<T1, T2, TResult>> expression, T1 argument1, T2 argument2);
    [ExtensionAttribute]
public static TResult Evaluate(Expression`1<Func`4<T1, T2, T3, TResult>> expression, T1 argument1, T2 argument2, T3 argument3);
    [ExtensionAttribute]
public static TResult Evaluate(Expression`1<Func`5<T1, T2, T3, T4, TResult>> expression, T1 argument1, T2 argument2, T3 argument3, T4 argument4);
    [ExtensionAttribute]
public static Expression`1<Func`1<bool>> AndAlso(Expression`1<Func`1<bool>> expression1, Expression`1<Func`1<bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> AndAlso(Expression`1<Func`2<T1, bool>> expression1, Expression`1<Func`2<T1, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> AndAlso(Expression`1<Func`3<T1, T2, bool>> expression1, Expression`1<Func`3<T1, T2, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> AndAlso(Expression`1<Func`4<T1, T2, T3, bool>> expression1, Expression`1<Func`4<T1, T2, T3, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> AndAlso(Expression`1<Func`5<T1, T2, T3, T4, bool>> expression1, Expression`1<Func`5<T1, T2, T3, T4, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`1<bool>> OrElse(Expression`1<Func`1<bool>> expression1, Expression`1<Func`1<bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T1, bool>> OrElse(Expression`1<Func`2<T1, bool>> expression1, Expression`1<Func`2<T1, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`3<T1, T2, bool>> OrElse(Expression`1<Func`3<T1, T2, bool>> expression1, Expression`1<Func`3<T1, T2, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`4<T1, T2, T3, bool>> OrElse(Expression`1<Func`4<T1, T2, T3, bool>> expression1, Expression`1<Func`4<T1, T2, T3, bool>> expression2);
    [ExtensionAttribute]
public static Expression`1<Func`5<T1, T2, T3, T4, bool>> OrElse(Expression`1<Func`5<T1, T2, T3, T4, bool>> expression1, Expression`1<Func`5<T1, T2, T3, T4, bool>> expression2);
}
public interface Mindbox.Expressions.IExpressionEvaluator {
    public abstract virtual object Evaluate(Expression expression);
}
public class Mindbox.Expressions.InterpretingExpressionEvaluator : object {
    [CompilerGeneratedAttribute]
private static InterpretingExpressionEvaluator <Instance>k__BackingField;
    public static InterpretingExpressionEvaluator Instance { get; }
    private static InterpretingExpressionEvaluator();
    public sealed virtual object Evaluate(Expression expression);
    [CompilerGeneratedAttribute]
public static InterpretingExpressionEvaluator get_Instance();
}
public class Mindbox.Expressions.MindboxExpressionStringBuilder : ExpressionVisitor {
    private StringBuilder result;
    private Dictionary`2<object, int> ids;
    public virtual string ToString();
    private void AddLabel(LabelTarget label);
    private int GetLabelId(LabelTarget label);
    private void AddParam(ParameterExpression p);
    private int GetParamId(ParameterExpression p);
    private void Out(string s);
    private void Out(char c);
    internal static string ExpressionToString(Expression node);
    private static string FormatBinder(CallSiteBinder binder);
    private void VisitExpressions(char open, IList`1<T> expressions, char close);
    private void VisitExpressions(char open, IList`1<T> expressions, char close, string seperator);
    protected virtual Expression VisitDynamic(DynamicExpression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitDebugInfo(DebugInfoExpression node);
    protected virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node);
    private void OutMember(Expression instance, MemberInfo member);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    protected virtual ElementInit VisitElementInit(ElementInit initializer);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    protected virtual Expression VisitBlock(BlockExpression node);
    protected virtual Expression VisitDefault(DefaultExpression node);
    protected virtual Expression VisitLabel(LabelExpression node);
    protected virtual Expression VisitGoto(GotoExpression node);
    protected virtual Expression VisitLoop(LoopExpression node);
    protected virtual SwitchCase VisitSwitchCase(SwitchCase node);
    protected virtual Expression VisitSwitch(SwitchExpression node);
    protected virtual CatchBlock VisitCatchBlock(CatchBlock node);
    protected virtual Expression VisitTry(TryExpression node);
    protected virtual Expression VisitIndex(IndexExpression node);
    protected virtual Expression VisitExtension(Expression node);
    private void DumpLabel(LabelTarget target);
}
public static class Mindbox.Expressions.ReflectionExpressions : object {
    private static string GetterSpecialNamePrefix;
    public static MethodInfo TryGetMethodInfo(Expression`1<Func`2<TObject, object>> callExpression);
    public static MethodInfo TryGetMethodInfo(Expression`1<Action`1<TObject>> callExpression);
    public static MethodInfo TryGetMethodInfo(Expression`1<Func`1<object>> callExpression);
    public static MethodInfo TryGetMethodInfo(Expression`1<Action> callExpression);
    public static MethodInfo TryGetMethodInfo(LambdaExpression callExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`2<TObject, object>> callExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Action`1<TObject>> callExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`1<object>> callExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Action> callExpression);
    public static MethodInfo GetMethodInfo(LambdaExpression callExpression);
    public static string TryGetMethodName(Expression`1<Func`2<TObject, object>> callExpression);
    public static string TryGetMethodName(Expression`1<Action`1<TObject>> callExpression);
    public static string TryGetMethodName(Expression`1<Func`1<object>> callExpression);
    public static string TryGetMethodName(Expression`1<Action> callExpression);
    public static string TryGetMethodName(LambdaExpression callExpression);
    public static string GetMethodName(Expression`1<Func`2<TObject, object>> callExpression);
    public static string GetMethodName(Expression`1<Action`1<TObject>> callExpression);
    public static string GetMethodName(Expression`1<Func`1<object>> callExpression);
    public static string GetMethodName(Expression`1<Action> callExpression);
    public static string GetMethodName(LambdaExpression callExpression);
    public static PropertyInfo TryGetPropertyInfo(Expression`1<Func`2<TObject, object>> propertyExpression);
    public static PropertyInfo TryGetPropertyInfo(Expression`1<Func`1<object>> propertyExpression);
    public static PropertyInfo TryGetPropertyInfo(LambdaExpression propertyExpression);
    public static PropertyInfo GetPropertyInfo(Expression`1<Func`2<TObject, object>> propertyExpression);
    public static PropertyInfo GetPropertyInfo(Expression`1<Func`1<object>> propertyExpression);
    public static PropertyInfo GetPropertyInfo(LambdaExpression propertyExpression);
    public static string TryGetPropertyName(Expression`1<Func`2<TObject, object>> propertyExpression);
    public static string TryGetPropertyName(Expression`1<Func`1<object>> propertyExpression);
    public static string TryGetPropertyName(LambdaExpression propertyExpression);
    public static string GetPropertyName(Expression`1<Func`2<TObject, object>> propertyExpression);
    public static string GetPropertyName(Expression`1<Func`1<object>> propertyExpression);
    public static string GetPropertyName(LambdaExpression propertyExpression);
    public static FieldInfo TryGetFieldInfo(Expression`1<Func`2<TObject, object>> fieldExpression);
    public static FieldInfo TryGetFieldInfo(Expression`1<Func`1<object>> fieldExpression);
    public static FieldInfo TryGetFieldInfo(LambdaExpression fieldExpression);
    public static FieldInfo GetFieldInfo(Expression`1<Func`2<TObject, object>> fieldExpression);
    public static FieldInfo GetFieldInfo(Expression`1<Func`1<object>> fieldExpression);
    public static FieldInfo GetFieldInfo(LambdaExpression fieldExpression);
    public static string TryGetFieldName(Expression`1<Func`2<TObject, object>> fieldExpression);
    public static string TryGetFieldName(Expression`1<Func`1<object>> fieldExpression);
    public static string TryGetFieldName(LambdaExpression fieldExpression);
    public static string GetFieldName(Expression`1<Func`2<TObject, object>> fieldExpression);
    public static string GetFieldName(Expression`1<Func`1<object>> fieldExpression);
    public static string GetFieldName(LambdaExpression fieldExpression);
    private static Expression RemoveConverts(Expression expression);
}
