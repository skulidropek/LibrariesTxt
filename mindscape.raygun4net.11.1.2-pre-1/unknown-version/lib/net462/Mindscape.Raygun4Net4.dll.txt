[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Mindscape.Raygun4Net.Breadcrumbs.DefaultBreadcrumbStorage : object {
    private IRaygunBreadcrumbStorage _internalStorage;
    public sealed virtual IEnumerator`1<RaygunBreadcrumb> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Store(RaygunBreadcrumb breadcrumb);
    public sealed virtual void Clear();
}
internal class Mindscape.Raygun4Net.Breadcrumbs.HttpBreadcrumbStorage : object {
    private static string ItemsKey;
    public sealed virtual IEnumerator`1<RaygunBreadcrumb> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Store(RaygunBreadcrumb breadcrumb);
    public sealed virtual void Clear();
    private List`1<RaygunBreadcrumb> GetList();
}
public class Mindscape.Raygun4Net.Breadcrumbs.InMemoryBreadcrumbStorage : object {
    private List`1<RaygunBreadcrumb> _breadcrumbs;
    public InMemoryBreadcrumbStorage(List`1<RaygunBreadcrumb> breadcrumbs);
    public sealed virtual void Store(RaygunBreadcrumb breadcrumb);
    public sealed virtual void Clear();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<RaygunBreadcrumb> GetEnumerator();
}
public interface Mindscape.Raygun4Net.Breadcrumbs.IRaygunBreadcrumbStorage {
    public abstract virtual void Store(RaygunBreadcrumb breadcrumb);
    public abstract virtual void Clear();
}
public class Mindscape.Raygun4Net.Breadcrumbs.RaygunBreadcrumbs : object {
    private IRaygunBreadcrumbStorage _storage;
    public RaygunBreadcrumbs(IRaygunBreadcrumbStorage storage);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<RaygunBreadcrumb> GetEnumerator();
    public void Record(RaygunBreadcrumb crumb);
    private void PopulateLocation(RaygunBreadcrumb crumb, int stackTraceFrame);
    public void Clear();
    private bool ShouldRecord(RaygunBreadcrumb crumb);
}
public class Mindscape.Raygun4Net.Builders.RaygunRequestMessageBuilder : object {
    private static Regex IpAddressRegex;
    private static int MAX_RAW_DATA_LENGTH;
    private static int MAX_KEY_LENGTH;
    private static int MAX_VALUE_LENGTH;
    private static RaygunRequestMessageBuilder();
    public static RaygunRequestMessage Build(HttpRequest request, RaygunRequestMessageOptions options);
    private static string GetIpAddress(HttpRequest request);
    private static bool IsValidIpAddress(string strIp);
    private static IDictionary GetQueryString(HttpRequest request, RaygunRequestMessageOptions options);
    private static IList GetCookies(HttpRequest request, RaygunRequestMessageOptions options);
    private static IDictionary GetServerVariables(HttpRequest request, RaygunRequestMessageOptions options);
    private static IDictionary GetForm(HttpRequest request, RaygunRequestMessageOptions options);
    private static IDictionary GetHeaders(HttpRequest request, RaygunRequestMessageOptions options);
    public static string GetRawData(HttpRequest request, RaygunRequestMessageOptions options);
    protected static Dictionary`2<string, string> GetIgnoredFormValues(NameValueCollection form, Func`2<string, bool> ignore);
    protected static string StripIgnoredFormData(string rawData, Dictionary`2<string, string> ignored);
    public static string StripSensitiveValues(string rawData, RaygunRequestMessageOptions options);
    private static IList`1<IRaygunDataFilter> GetRawDataFilters(RaygunRequestMessageOptions options);
    public static bool DataContains(string data, List`1<string> values);
    private static IDictionary ToDictionary(NameValueCollection nameValueCollection, Func`2<string, bool> ignore, Func`2<string, bool> isSensitive, bool truncateValues);
}
public interface Mindscape.Raygun4Net.IRaygunApplication {
    public abstract virtual RaygunClient GenerateRaygunClient();
}
public class Mindscape.Raygun4Net.RaygunClient : RaygunClientBase {
    internal static string UnhandledExceptionTag;
    private static RaygunBreadcrumbs _breadcrumbs;
    private static object _sendLock;
    private string _apiKey;
    private RaygunRequestMessageOptions _requestMessageOptions;
    private List`1<Type> _wrapperExceptions;
    private IRaygunOfflineStorage _offlineStorage;
    private ThrottledBackgroundMessageProcessor _backgroundMessageProcessor;
    private IWebProxy _webProxy;
    [CompilerGeneratedAttribute]
private ICredentials <ProxyCredentials>k__BackingField;
    public ICredentials ProxyCredentials { get; public set; }
    public IWebProxy WebProxy { get; public set; }
    public bool IsRawDataIgnored { get; public set; }
    public bool IsRawDataIgnoredWhenFilteringFailed { get; public set; }
    public bool UseXmlRawDataFilter { get; public set; }
    public bool UseKeyValuePairRawDataFilter { get; public set; }
    public RaygunClient(string apiKey);
    private static RaygunClient();
    [CompilerGeneratedAttribute]
public ICredentials get_ProxyCredentials();
    [CompilerGeneratedAttribute]
public void set_ProxyCredentials(ICredentials value);
    public IWebProxy get_WebProxy();
    public void set_WebProxy(IWebProxy value);
    public void AddWrapperExceptions(Type[] wrapperExceptions);
    public void RemoveWrapperExceptions(Type[] wrapperExceptions);
    public void IgnoreSensitiveFieldNames(String[] names);
    public void IgnoreQueryParameterNames(String[] names);
    public void IgnoreFormFieldNames(String[] names);
    public void IgnoreHeaderNames(String[] names);
    public void IgnoreCookieNames(String[] names);
    public void IgnoreServerVariableNames(String[] names);
    public bool get_IsRawDataIgnored();
    public void set_IsRawDataIgnored(bool value);
    public bool get_IsRawDataIgnoredWhenFilteringFailed();
    public void set_IsRawDataIgnoredWhenFilteringFailed(bool value);
    public bool get_UseXmlRawDataFilter();
    public void set_UseXmlRawDataFilter(bool value);
    public bool get_UseKeyValuePairRawDataFilter();
    public void set_UseKeyValuePairRawDataFilter(bool value);
    public void AddRawDataFilter(IRaygunDataFilter filter);
    public static void RecordBreadcrumb(string message);
    public static void RecordBreadcrumb(RaygunBreadcrumb crumb);
    public static void ClearBreadcrumbs();
    public virtual void Send(Exception exception);
    public void Send(Exception exception, IList`1<string> tags);
    public void Send(Exception exception, IList`1<string> tags, IDictionary userCustomData);
    public void Send(Exception exception, IList`1<string> tags, IDictionary userCustomData, RaygunIdentifierMessage userInfo);
    public void SendInBackground(Exception exception);
    public void SendInBackground(Exception exception, IList`1<string> tags);
    public void SendInBackground(Exception exception, IList`1<string> tags, IDictionary userCustomData);
    public void SendInBackground(Exception exception, IList`1<string> tags, IDictionary userCustomData, RaygunIdentifierMessage userInfo);
    public void SendInBackground(RaygunMessage raygunMessage);
    public void SendInBackground(Func`1<RaygunMessage> raygunMessage);
    private void StripAndSend(Exception exception, IList`1<string> tags, IDictionary userCustomData, RaygunIdentifierMessage userInfo, Nullable`1<DateTime> currentTime);
    private void StripAndSendInBackground(Exception exception, IList`1<string> tags, IDictionary userCustomData, RaygunIdentifierMessage userInfo, Nullable`1<DateTime> currentTime);
    private static IList`1<RaygunBreadcrumb> BuildBreadCrumbList();
    public virtual void Send(RaygunMessage raygunMessage);
    private void Send(string message);
    private RaygunRequestMessage BuildRequestMessage();
    protected RaygunMessage BuildMessage(Exception exception, IList`1<string> tags, IDictionary userCustomData, RaygunIdentifierMessage userInfoMessage, Nullable`1<DateTime> currentTime, Action`1<RaygunMessage> customise);
    [IteratorStateMachineAttribute("Mindscape.Raygun4Net.RaygunClient/<StripWrapperExceptions>d__59")]
protected IEnumerable`1<Exception> StripWrapperExceptions(Exception exception);
    private string GetContextId();
    private void SaveMessage(string message);
    private void SendStoredMessages();
    protected bool ValidateApiKey();
    protected virtual bool CanSend(Exception exception);
    [CompilerGeneratedAttribute]
private void <.ctor>b__17_0(object state);
}
public class Mindscape.Raygun4Net.RaygunHttpModule : object {
    private RaygunClient _raygunClient;
    [CompilerGeneratedAttribute]
private bool <ExcludeErrorsBasedOnHttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeErrorsFromLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <HttpStatusCodesToExclude>k__BackingField;
    private bool ExcludeErrorsBasedOnHttpStatusCode { get; private set; }
    private bool ExcludeErrorsFromLocal { get; private set; }
    private Int32[] HttpStatusCodesToExclude { get; private set; }
    [CompilerGeneratedAttribute]
private bool get_ExcludeErrorsBasedOnHttpStatusCode();
    [CompilerGeneratedAttribute]
private void set_ExcludeErrorsBasedOnHttpStatusCode(bool value);
    [CompilerGeneratedAttribute]
private bool get_ExcludeErrorsFromLocal();
    [CompilerGeneratedAttribute]
private void set_ExcludeErrorsFromLocal(bool value);
    [CompilerGeneratedAttribute]
private Int32[] get_HttpStatusCodesToExclude();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCodesToExclude(Int32[] value);
    public sealed virtual void Init(HttpApplication context);
    public sealed virtual void Dispose();
    private void SendError(object sender, EventArgs e);
    public void SendError(HttpApplication application, Exception exception);
    protected RaygunClient GetRaygunClient(HttpApplication application);
    protected bool CanSend(Exception exception);
    private Assembly GetWebEntryAssembly(HttpApplication application);
}
public class Mindscape.Raygun4Net.RaygunMessageBuilder : object {
    private RaygunMessage _raygunMessage;
    public static RaygunMessageBuilder New { get; }
    public static RaygunMessageBuilder get_New();
    public sealed virtual RaygunMessage Build();
    public sealed virtual IRaygunMessageBuilder SetMachineName(string machineName);
    public sealed virtual IRaygunMessageBuilder SetEnvironmentDetails();
    public sealed virtual IRaygunMessageBuilder SetExceptionDetails(Exception exception);
    private void AssignCorrelationId(RaygunMessageDetails details);
    private string GenerateCorrelationId(string className);
    public sealed virtual IRaygunMessageBuilder SetClientDetails();
    public sealed virtual IRaygunMessageBuilder SetUserCustomData(IDictionary userCustomData);
    public sealed virtual IRaygunMessageBuilder SetTags(IList`1<string> tags);
    public sealed virtual IRaygunMessageBuilder SetUser(RaygunIdentifierMessage user);
    public IRaygunMessageBuilder SetHttpDetails(HttpContext context, RaygunRequestMessageOptions options);
    public IRaygunMessageBuilder SetHttpDetails(RaygunRequestMessage message);
    public sealed virtual IRaygunMessageBuilder SetVersion(string version);
    private static Assembly GetWebEntryAssembly();
    public sealed virtual IRaygunMessageBuilder SetTimeStamp(Nullable`1<DateTime> currentTime);
    public IRaygunMessageBuilder SetBreadcrumbs(List`1<RaygunBreadcrumb> breadcrumbs);
    public sealed virtual IRaygunMessageBuilder SetContextId(string contextId);
    public sealed virtual IRaygunMessageBuilder Customise(Action`1<RaygunMessage> customiseAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mindscape.Raygun4Net.ThrottledBackgroundMessageProcessor : object {
    private BlockingCollection`1<Func`1<RaygunMessage>> _messageQueue;
    private List`1<Task> _workerTasks;
    private CancellationTokenSource _cancelProcessingSource;
    private Action`1<RaygunMessage> _processCallback;
    private int _maxWorkerTasks;
    private object _workerTaskMutex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposing;
    public ThrottledBackgroundMessageProcessor(int maxQueueSize, int maxWorkerTasks, Action`1<RaygunMessage> onProcessMessageFunc);
    public bool Enqueue(RaygunMessage message);
    public bool Enqueue(Func`1<RaygunMessage> messageFunc);
    private void EnsureWorkers();
    public sealed virtual void Dispose();
    private Task CreateWorkerTask();
    private static void RaygunMessageWorker(BlockingCollection`1<Func`1<RaygunMessage>> messageQueue, Action`1<RaygunMessage> callback, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <CreateWorkerTask>b__12_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateWorkerTask>b__12_1(Task x);
}
public static class Mindscape.Raygun4Net.WebClientHelper : object {
    [ThreadStaticAttribute]
private static WebClient _client;
    private static Uri ProxyUri;
    [CompilerGeneratedAttribute]
private static IWebProxy <WebProxy>k__BackingField;
    private static WebClient Client { get; }
    internal static IWebProxy WebProxy { get; internal set; }
    private static WebClientHelper();
    private static WebClient get_Client();
    private static WebClient FreshClient();
    [CompilerGeneratedAttribute]
internal static IWebProxy get_WebProxy();
    [CompilerGeneratedAttribute]
internal static void set_WebProxy(IWebProxy value);
    internal static IHttpClient GetClient(string apiKey, ICredentials proxyCredentials);
    public static void Send(string message, string apiKey, ICredentials proxyCredentials);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
