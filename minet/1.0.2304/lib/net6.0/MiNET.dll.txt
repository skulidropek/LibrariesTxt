[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class MiNET.AlwaysFullHungerManager : HungerManager {
    public AlwaysFullHungerManager(Player player);
    public virtual void IncreaseExhaustion(float amount);
    public virtual void IncreaseFoodAndSaturation(Item item, int foodPoints, double saturationRestore);
    public virtual void Move(double distance);
}
public enum MiNET.BlockAxis : Enum {
    public int value__;
    public static BlockAxis X;
    public static BlockAxis Y;
    public static BlockAxis Z;
}
public class MiNET.BlockEntities.BannerBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private int <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BannerPattern> <Patterns>k__BackingField;
    public int Base { get; public set; }
    public List`1<BannerPattern> Patterns { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(int value);
    [CompilerGeneratedAttribute]
public List`1<BannerPattern> get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(List`1<BannerPattern> value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
}
public class MiNET.BlockEntities.BannerPattern : object {
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Color>k__BackingField;
    public string Pattern { get; public set; }
    public int Color { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public int get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(int value);
}
public class MiNET.BlockEntities.BeaconBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Secondary>k__BackingField;
    private long _nextUpdate;
    private static ILog Log;
    private NbtCompound Compound { get; private set; }
    public int Primary { get; public set; }
    public int Secondary { get; public set; }
    private static BeaconBlockEntity();
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    [CompilerGeneratedAttribute]
public int get_Primary();
    [CompilerGeneratedAttribute]
public void set_Primary(int value);
    [CompilerGeneratedAttribute]
public int get_Secondary();
    [CompilerGeneratedAttribute]
public void set_Secondary(int value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual void OnTick(Level level);
    private bool HaveSkyLight(Level level);
    private static Effect GetEffect(EffectType prim);
    private int GetPyramidLevels(Level level);
}
public class MiNET.BlockEntities.BedBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private byte <Color>k__BackingField;
    public byte Color { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(byte value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
}
public class MiNET.BlockEntities.BlastFurnaceBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    [CompilerGeneratedAttribute]
private Inventory <Inventory>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CookTime>k__BackingField;
    [CompilerGeneratedAttribute]
private short <BurnTime>k__BackingField;
    [CompilerGeneratedAttribute]
private short <BurnTick>k__BackingField;
    [CompilerGeneratedAttribute]
private short <FuelEfficiency>k__BackingField;
    private NbtCompound Compound { get; private set; }
    public Inventory Inventory { get; public set; }
    public short CookTime { get; public set; }
    public short BurnTime { get; public set; }
    public short BurnTick { get; public set; }
    public short FuelEfficiency { get; public set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    [CompilerGeneratedAttribute]
public Inventory get_Inventory();
    [CompilerGeneratedAttribute]
public void set_Inventory(Inventory value);
    [CompilerGeneratedAttribute]
public short get_CookTime();
    [CompilerGeneratedAttribute]
public void set_CookTime(short value);
    [CompilerGeneratedAttribute]
public short get_BurnTime();
    [CompilerGeneratedAttribute]
public void set_BurnTime(short value);
    [CompilerGeneratedAttribute]
public short get_BurnTick();
    [CompilerGeneratedAttribute]
public void set_BurnTick(short value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual void OnTick(Level level);
    private Item GetResult(Item ingredient);
    [CompilerGeneratedAttribute]
public short get_FuelEfficiency();
    [CompilerGeneratedAttribute]
public void set_FuelEfficiency(short value);
    private Item GetFuel();
    private Item GetIngredient();
    private short GetFuelEfficiency(Item item);
    public virtual List`1<Item> GetDrops();
}
public class MiNET.BlockEntities.BlockEntity : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdatesOnTick>k__BackingField;
    public string Id { get; private set; }
    public BlockCoordinates Coordinates { get; public set; }
    public bool UpdatesOnTick { get; public set; }
    public BlockEntity(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public bool get_UpdatesOnTick();
    [CompilerGeneratedAttribute]
public void set_UpdatesOnTick(bool value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual void OnTick(Level level);
    public virtual List`1<Item> GetDrops();
}
public static class MiNET.BlockEntities.BlockEntityFactory : object {
    [CompilerGeneratedAttribute]
private static ICustomBlockEntityFactory <CustomBlockEntityFactory>k__BackingField;
    public static ICustomBlockEntityFactory CustomBlockEntityFactory { get; public set; }
    [CompilerGeneratedAttribute]
public static ICustomBlockEntityFactory get_CustomBlockEntityFactory();
    [CompilerGeneratedAttribute]
public static void set_CustomBlockEntityFactory(ICustomBlockEntityFactory value);
    public static BlockEntity GetBlockEntityById(string blockEntityId);
}
public class MiNET.BlockEntities.ChalkboardBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnGround>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <BaseCoordinates>k__BackingField;
    public string Text { get; public set; }
    public bool Locked { get; public set; }
    public bool OnGround { get; public set; }
    public long Owner { get; public set; }
    public int Size { get; public set; }
    public BlockCoordinates BaseCoordinates { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnGround();
    [CompilerGeneratedAttribute]
public void set_OnGround(bool value);
    [CompilerGeneratedAttribute]
public long get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(long value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_BaseCoordinates();
    [CompilerGeneratedAttribute]
public void set_BaseCoordinates(BlockCoordinates value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    private string GetTextValue(NbtCompound compound, string key);
}
public class MiNET.BlockEntities.ChestBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    private NbtCompound Compound { get; private set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual List`1<Item> GetDrops();
}
public class MiNET.BlockEntities.EnchantingTableBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    private NbtCompound Compound { get; private set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
}
public class MiNET.BlockEntities.FlowerPotBlockEntity : BlockEntity {
    private static ILog Log;
    private NbtCompound _compound;
    private static FlowerPotBlockEntity();
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
}
public class MiNET.BlockEntities.FurnaceBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    [CompilerGeneratedAttribute]
private Inventory <Inventory>k__BackingField;
    [CompilerGeneratedAttribute]
private short <CookTime>k__BackingField;
    [CompilerGeneratedAttribute]
private short <BurnTime>k__BackingField;
    [CompilerGeneratedAttribute]
private short <BurnTick>k__BackingField;
    [CompilerGeneratedAttribute]
private short <FuelEfficiency>k__BackingField;
    private NbtCompound Compound { get; private set; }
    public Inventory Inventory { get; public set; }
    public short CookTime { get; public set; }
    public short BurnTime { get; public set; }
    public short BurnTick { get; public set; }
    public short FuelEfficiency { get; public set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    [CompilerGeneratedAttribute]
public Inventory get_Inventory();
    [CompilerGeneratedAttribute]
public void set_Inventory(Inventory value);
    [CompilerGeneratedAttribute]
public short get_CookTime();
    [CompilerGeneratedAttribute]
public void set_CookTime(short value);
    [CompilerGeneratedAttribute]
public short get_BurnTime();
    [CompilerGeneratedAttribute]
public void set_BurnTime(short value);
    [CompilerGeneratedAttribute]
public short get_BurnTick();
    [CompilerGeneratedAttribute]
public void set_BurnTick(short value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual void OnTick(Level level);
    private Item GetResult(Item ingredient);
    [CompilerGeneratedAttribute]
public short get_FuelEfficiency();
    [CompilerGeneratedAttribute]
public void set_FuelEfficiency(short value);
    private Item GetFuel();
    private Item GetIngredient();
    private short GetFuelEfficiency(Item item);
    public virtual List`1<Item> GetDrops();
}
public interface MiNET.BlockEntities.ICustomBlockEntityFactory {
    public abstract virtual BlockEntity GetBlockEntityById(string blockEntityId);
}
public class MiNET.BlockEntities.ItemFrameBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <ItemInFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DropChance>k__BackingField;
    private NbtCompound Compound { get; private set; }
    public Item ItemInFrame { get; private set; }
    public int Rotation { get; private set; }
    public float DropChance { get; private set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    [CompilerGeneratedAttribute]
public Item get_ItemInFrame();
    [CompilerGeneratedAttribute]
private void set_ItemInFrame(Item value);
    [CompilerGeneratedAttribute]
public int get_Rotation();
    [CompilerGeneratedAttribute]
private void set_Rotation(int value);
    [CompilerGeneratedAttribute]
public float get_DropChance();
    [CompilerGeneratedAttribute]
private void set_DropChance(float value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public void SetItem(Item item, int rotation);
    public virtual List`1<Item> GetDrops();
}
public class MiNET.BlockEntities.MobSpawnerBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private short <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DisplayEntityHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DisplayEntityScale>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DisplayEntityWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EntityTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MaxNearbyEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MinSpawnDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MaxSpawnDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private short <RequiredPlayerRange>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SpawnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SpawnRange>k__BackingField;
    public short Delay { get; public set; }
    public float DisplayEntityHeight { get; public set; }
    public float DisplayEntityScale { get; public set; }
    public float DisplayEntityWidth { get; public set; }
    public int EntityTypeId { get; public set; }
    public short MaxNearbyEntities { get; public set; }
    public short MinSpawnDelay { get; public set; }
    public short MaxSpawnDelay { get; public set; }
    public short RequiredPlayerRange { get; public set; }
    public short SpawnCount { get; public set; }
    public short SpawnRange { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(short value);
    [CompilerGeneratedAttribute]
public float get_DisplayEntityHeight();
    [CompilerGeneratedAttribute]
public void set_DisplayEntityHeight(float value);
    [CompilerGeneratedAttribute]
public float get_DisplayEntityScale();
    [CompilerGeneratedAttribute]
public void set_DisplayEntityScale(float value);
    [CompilerGeneratedAttribute]
public float get_DisplayEntityWidth();
    [CompilerGeneratedAttribute]
public void set_DisplayEntityWidth(float value);
    [CompilerGeneratedAttribute]
public int get_EntityTypeId();
    [CompilerGeneratedAttribute]
public void set_EntityTypeId(int value);
    [CompilerGeneratedAttribute]
public short get_MaxNearbyEntities();
    [CompilerGeneratedAttribute]
public void set_MaxNearbyEntities(short value);
    [CompilerGeneratedAttribute]
public short get_MinSpawnDelay();
    [CompilerGeneratedAttribute]
public void set_MinSpawnDelay(short value);
    [CompilerGeneratedAttribute]
public short get_MaxSpawnDelay();
    [CompilerGeneratedAttribute]
public void set_MaxSpawnDelay(short value);
    [CompilerGeneratedAttribute]
public short get_RequiredPlayerRange();
    [CompilerGeneratedAttribute]
public void set_RequiredPlayerRange(short value);
    [CompilerGeneratedAttribute]
public short get_SpawnCount();
    [CompilerGeneratedAttribute]
public void set_SpawnCount(short value);
    [CompilerGeneratedAttribute]
public short get_SpawnRange();
    [CompilerGeneratedAttribute]
public void set_SpawnRange(short value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
}
public class MiNET.BlockEntities.ShulkerBoxBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Facing>k__BackingField;
    private NbtCompound Compound { get; private set; }
    public byte Facing { get; public set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    [CompilerGeneratedAttribute]
public byte get_Facing();
    [CompilerGeneratedAttribute]
public void set_Facing(byte value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual List`1<Item> GetDrops();
}
public class MiNET.BlockEntities.SignBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text3>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text4>k__BackingField;
    public string Text { get; public set; }
    public string Text1 { get; public set; }
    public string Text2 { get; public set; }
    public string Text3 { get; public set; }
    public string Text4 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Text1();
    [CompilerGeneratedAttribute]
public void set_Text1(string value);
    [CompilerGeneratedAttribute]
public string get_Text2();
    [CompilerGeneratedAttribute]
public void set_Text2(string value);
    [CompilerGeneratedAttribute]
public string get_Text3();
    [CompilerGeneratedAttribute]
public void set_Text3(string value);
    [CompilerGeneratedAttribute]
public string get_Text4();
    [CompilerGeneratedAttribute]
public void set_Text4(string value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    private string GetTextValue(NbtCompound compound, string key);
}
public class MiNET.BlockEntities.SkullBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private byte <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SkullType>k__BackingField;
    public byte Rotation { get; public set; }
    public byte SkullType { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Rotation();
    [CompilerGeneratedAttribute]
public void set_Rotation(byte value);
    [CompilerGeneratedAttribute]
public byte get_SkullType();
    [CompilerGeneratedAttribute]
public void set_SkullType(byte value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
    public virtual List`1<Item> GetDrops();
}
public class MiNET.BlockEntities.StructureBlockBlockEntity : BlockEntity {
    [CompilerGeneratedAttribute]
private NbtCompound <Compound>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowBoundingBox>k__BackingField;
    private NbtCompound Compound { get; private set; }
    public BlockCoordinates Offset { get; public set; }
    public BlockCoordinates Size { get; public set; }
    public bool ShowBoundingBox { get; public set; }
    [CompilerGeneratedAttribute]
private NbtCompound get_Compound();
    [CompilerGeneratedAttribute]
private void set_Compound(NbtCompound value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public bool get_ShowBoundingBox();
    [CompilerGeneratedAttribute]
public void set_ShowBoundingBox(bool value);
    public virtual NbtCompound GetCompound();
    public virtual void SetCompound(NbtCompound compound);
}
public enum MiNET.BlockFace : Enum {
    public int value__;
    public static BlockFace Down;
    public static BlockFace Up;
    public static BlockFace North;
    public static BlockFace South;
    public static BlockFace West;
    public static BlockFace East;
    public static BlockFace None;
}
public class MiNET.Blocks.AcaciaButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaDoor : DoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaFenceGate : FenceGateBlocks {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AcaciaWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ActivatorRail : Block {
    [CompilerGeneratedAttribute]
private bool <RailDataBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RailDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool RailDataBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int RailDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_RailDataBit();
    [CompilerGeneratedAttribute]
public void set_RailDataBit(bool value);
    [CompilerGeneratedAttribute]
public int get_RailDirection();
    [CompilerGeneratedAttribute]
public void set_RailDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Air : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Allow : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AncientDebris : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.AndesiteStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Anvil : Block {
    [CompilerGeneratedAttribute]
private string <Damage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Damage { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Damage();
    [CompilerGeneratedAttribute]
public void set_Damage(string value);
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Bamboo : Block {
    [CompilerGeneratedAttribute]
private bool <AgeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BambooLeafSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BambooStalkThickness>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool AgeBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string BambooLeafSize { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string BambooStalkThickness { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AgeBit();
    [CompilerGeneratedAttribute]
public void set_AgeBit(bool value);
    [CompilerGeneratedAttribute]
public string get_BambooLeafSize();
    [CompilerGeneratedAttribute]
public void set_BambooLeafSize(string value);
    [CompilerGeneratedAttribute]
public string get_BambooStalkThickness();
    [CompilerGeneratedAttribute]
public void set_BambooStalkThickness(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BambooSapling : Block {
    [CompilerGeneratedAttribute]
private bool <AgeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SaplingType>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool AgeBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SaplingType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AgeBit();
    [CompilerGeneratedAttribute]
public void set_AgeBit(bool value);
    [CompilerGeneratedAttribute]
public string get_SaplingType();
    [CompilerGeneratedAttribute]
public void set_SaplingType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Barrel : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Barrier : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Basalt : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Beacon : Block {
    public string Name { get; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    private void BuildPyramidLevels(Level level, int levels);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Bed : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private byte <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HeadPieceBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OccupiedBit>k__BackingField;
    public byte Color { get; public set; }
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool HeadPieceBit { get; public set; }
    [StateBitAttribute]
public bool OccupiedBit { get; public set; }
    private static Bed();
    [CompilerGeneratedAttribute]
public byte get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(byte value);
    public virtual Item[] GetDrops(Item tool);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void BreakBlock(Level level, BlockFace face, bool silent);
    private BlockCoordinates GetOtherPart();
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public void SetOccupied(Level world, bool isOccupied);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_HeadPieceBit();
    [CompilerGeneratedAttribute]
public void set_HeadPieceBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OccupiedBit();
    [CompilerGeneratedAttribute]
public void set_OccupiedBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Bedrock : Block {
    [CompilerGeneratedAttribute]
private bool <InfiniburnBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool InfiniburnBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_InfiniburnBit();
    [CompilerGeneratedAttribute]
public void set_InfiniburnBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Beehive : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HoneyLevel>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateRangeAttribute("0", "5")]
public int HoneyLevel { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public int get_HoneyLevel();
    [CompilerGeneratedAttribute]
public void set_HoneyLevel(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BeeNest : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HoneyLevel>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateRangeAttribute("0", "5")]
public int HoneyLevel { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public int get_HoneyLevel();
    [CompilerGeneratedAttribute]
public void set_HoneyLevel(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Beetroot : Crops {
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual bool Interact(Level level, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Growth();
    [CompilerGeneratedAttribute]
public virtual void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Bell : Block {
    [CompilerGeneratedAttribute]
private string <Attachment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ToggleBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Attachment { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool ToggleBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Attachment();
    [CompilerGeneratedAttribute]
public void set_Attachment(string value);
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_ToggleBit();
    [CompilerGeneratedAttribute]
public void set_ToggleBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchDoor : DoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchFenceGate : FenceGateBlocks {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BirchWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlackGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Blackstone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlackstoneDoubleSlab : Block {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlackstoneSlab : SlabBase {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlackstoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlackstoneWall : Block {
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeEast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeNorth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeSouth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeWest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WallPostBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeEast { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeNorth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeSouth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeWest { get; public set; }
    [StateBitAttribute]
public bool WallPostBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeEast();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeEast(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeNorth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeNorth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeSouth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeSouth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeWest();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeWest(string value);
    [CompilerGeneratedAttribute]
public bool get_WallPostBit();
    [CompilerGeneratedAttribute]
public void set_WallPostBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlastFurnace : BlastFurnaceBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.BlastFurnaceBase : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    protected BlastFurnaceBase(int id);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
}
public class MiNET.Blocks.Block : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Hardness>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlastResistance>k__BackingField;
    [CompilerGeneratedAttribute]
private short <FuelEfficiency>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FrictionFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LightLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReplaceable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSolid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuildable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTransparent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFlammable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlockingSkylight>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BlockLight>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SkyLight>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BiomeId>k__BackingField;
    public bool IsGenerated { get; protected set; }
    public BlockCoordinates Coordinates { get; public set; }
    public string Name { get; protected set; }
    public int Id { get; }
    [ObsoleteAttribute("Use block states instead.")]
public byte Metadata { get; public set; }
    public float Hardness { get; protected set; }
    public float BlastResistance { get; protected set; }
    public short FuelEfficiency { get; protected set; }
    public float FrictionFactor { get; protected set; }
    public int LightLevel { get; public set; }
    public bool IsReplaceable { get; protected set; }
    public bool IsSolid { get; protected set; }
    public bool IsBuildable { get; protected set; }
    public bool IsTransparent { get; protected set; }
    public bool IsFlammable { get; protected set; }
    public bool IsBlockingSkylight { get; protected set; }
    public byte BlockLight { get; public set; }
    public byte SkyLight { get; public set; }
    public byte BiomeId { get; public set; }
    public Block(string name, int id);
    public Block(int id);
    private static Block();
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
protected void set_IsGenerated(bool value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public byte get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(byte value);
    [CompilerGeneratedAttribute]
public float get_Hardness();
    [CompilerGeneratedAttribute]
protected void set_Hardness(float value);
    [CompilerGeneratedAttribute]
public float get_BlastResistance();
    [CompilerGeneratedAttribute]
protected void set_BlastResistance(float value);
    [CompilerGeneratedAttribute]
public short get_FuelEfficiency();
    [CompilerGeneratedAttribute]
protected void set_FuelEfficiency(short value);
    [CompilerGeneratedAttribute]
public float get_FrictionFactor();
    [CompilerGeneratedAttribute]
protected void set_FrictionFactor(float value);
    [CompilerGeneratedAttribute]
public int get_LightLevel();
    [CompilerGeneratedAttribute]
public void set_LightLevel(int value);
    [CompilerGeneratedAttribute]
public bool get_IsReplaceable();
    [CompilerGeneratedAttribute]
protected void set_IsReplaceable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSolid();
    [CompilerGeneratedAttribute]
protected void set_IsSolid(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBuildable();
    [CompilerGeneratedAttribute]
protected void set_IsBuildable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTransparent();
    [CompilerGeneratedAttribute]
protected void set_IsTransparent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFlammable();
    [CompilerGeneratedAttribute]
protected void set_IsFlammable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBlockingSkylight();
    [CompilerGeneratedAttribute]
protected void set_IsBlockingSkylight(bool value);
    [CompilerGeneratedAttribute]
public byte get_BlockLight();
    [CompilerGeneratedAttribute]
public void set_BlockLight(byte value);
    [CompilerGeneratedAttribute]
public byte get_SkyLight();
    [CompilerGeneratedAttribute]
public void set_SkyLight(byte value);
    [CompilerGeneratedAttribute]
public byte get_BiomeId();
    [CompilerGeneratedAttribute]
public void set_BiomeId(byte value);
    public virtual void SetState(BlockStateContainer blockstate);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual BlockStateContainer GetGlobalState();
    public int GetRuntimeId();
    public virtual Item GetItem();
    public bool CanPlace(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BreakBlock(Level world, BlockFace face, bool silent);
    protected void UpdateBlocks(Level world);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void BlockAdded(Level level);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual void OnTick(Level level, bool isRandom);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    public float GetHardness();
    protected BlockCoordinates GetNewCoordinatesFromFace(BlockCoordinates target, BlockFace face);
    public virtual Item[] GetDrops(Item tool);
    public virtual Item GetSmelt();
    public virtual float GetExperiencePoints();
    public virtual void DoPhysics(Level level);
    public virtual BoundingBox GetBoundingBox();
    public sealed virtual object Clone();
    public virtual string ToString();
}
public static class MiNET.Blocks.BlockFactory : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private static ICustomBlockFactory <CustomBlockFactory>k__BackingField;
    public static Byte[] TransparentBlocks;
    public static Byte[] LuminousBlocks;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, int> <NameToId>k__BackingField;
    [CompilerGeneratedAttribute]
private static BlockPalette <BlockPalette>k__BackingField;
    [CompilerGeneratedAttribute]
private static HashSet`1<BlockStateContainer> <BlockStates>k__BackingField;
    public static Int32[] LegacyToRuntimeId;
    private static object lockObj;
    public static ICustomBlockFactory CustomBlockFactory { get; public set; }
    public static Dictionary`2<string, int> NameToId { get; private set; }
    public static BlockPalette BlockPalette { get; public set; }
    public static HashSet`1<BlockStateContainer> BlockStates { get; public set; }
    private static BlockFactory();
    [CompilerGeneratedAttribute]
public static ICustomBlockFactory get_CustomBlockFactory();
    [CompilerGeneratedAttribute]
public static void set_CustomBlockFactory(ICustomBlockFactory value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, int> get_NameToId();
    [CompilerGeneratedAttribute]
private static void set_NameToId(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public static BlockPalette get_BlockPalette();
    [CompilerGeneratedAttribute]
public static void set_BlockPalette(BlockPalette value);
    [CompilerGeneratedAttribute]
public static HashSet`1<BlockStateContainer> get_BlockStates();
    [CompilerGeneratedAttribute]
public static void set_BlockStates(HashSet`1<BlockStateContainer> value);
    private static BlockStateContainer GetBlockStateContainer(NbtTag tag);
    private static List`1<IBlockState> GetBlockStates(NbtTag tag);
    private static Dictionary`2<string, int> BuildNameToId();
    public static int GetBlockIdByName(string blockName);
    public static Block GetBlockByName(string blockName);
    public static Block GetBlockById(int blockId, byte metadata);
    public static Block GetBlockById(int blockId);
    public static UInt32 GetRuntimeId(int blockId, byte metadata);
    private static int TryGetRuntimeId(int blockId, byte metadata);
}
public abstract class MiNET.Blocks.BlockStairs : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    protected BlockStairs(int id);
    private static BlockStairs();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.BlueGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BlueIce : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BoneBlock : Block {
    [CompilerGeneratedAttribute]
private int <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Deprecated { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(int value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Bookshelf : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Border : Block {
}
public class MiNET.Blocks.BorderBlock : Block {
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeEast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeNorth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeSouth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeWest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WallPostBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeEast { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeNorth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeSouth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeWest { get; public set; }
    [StateBitAttribute]
public bool WallPostBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeEast();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeEast(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeNorth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeNorth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeSouth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeSouth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeWest();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeWest(string value);
    [CompilerGeneratedAttribute]
public bool get_WallPostBit();
    [CompilerGeneratedAttribute]
public void set_WallPostBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BrewingStand : Block {
    [CompilerGeneratedAttribute]
private bool <BrewingStandSlotABit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BrewingStandSlotBBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BrewingStandSlotCBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool BrewingStandSlotABit { get; public set; }
    [StateBitAttribute]
public bool BrewingStandSlotBBit { get; public set; }
    [StateBitAttribute]
public bool BrewingStandSlotCBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_BrewingStandSlotABit();
    [CompilerGeneratedAttribute]
public void set_BrewingStandSlotABit(bool value);
    [CompilerGeneratedAttribute]
public bool get_BrewingStandSlotBBit();
    [CompilerGeneratedAttribute]
public void set_BrewingStandSlotBBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_BrewingStandSlotCBit();
    [CompilerGeneratedAttribute]
public void set_BrewingStandSlotCBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BrickBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BrownGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BrownMushroom : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BrownMushroomBlock : Block {
    [CompilerGeneratedAttribute]
private int <HugeMushroomBits>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int HugeMushroomBits { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_HugeMushroomBits();
    [CompilerGeneratedAttribute]
public void set_HugeMushroomBits(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.BubbleColumn : Block {
    [CompilerGeneratedAttribute]
private bool <DragDown>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool DragDown { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_DragDown();
    [CompilerGeneratedAttribute]
public void set_DragDown(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.Button : Block {
    [CompilerGeneratedAttribute]
private int <TickRate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public int TickRate { get; public set; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    protected Button(int id);
    [CompilerGeneratedAttribute]
public int get_TickRate();
    [CompilerGeneratedAttribute]
public void set_TickRate(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual void OnTick(Level level, bool isRandom);
}
public class MiNET.Blocks.Cactus : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int Age { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Cake : Block {
    [CompilerGeneratedAttribute]
private int <BiteCounter>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "6")]
public int BiteCounter { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_BiteCounter();
    [CompilerGeneratedAttribute]
public void set_BiteCounter(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Camera : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Campfire : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Extinguished>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool Extinguished { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_Extinguished();
    [CompilerGeneratedAttribute]
public void set_Extinguished(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Carpet : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Carrots : Crops {
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Growth();
    [CompilerGeneratedAttribute]
public virtual void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CartographyTable : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CarvedPumpkin : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Cauldron : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <CauldronLiquid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FillLevel>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CauldronLiquid { get; public set; }
    [StateRangeAttribute("0", "6")]
public int FillLevel { get; public set; }
    private static Cauldron();
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CauldronLiquid();
    [CompilerGeneratedAttribute]
public void set_CauldronLiquid(string value);
    [CompilerGeneratedAttribute]
public int get_FillLevel();
    [CompilerGeneratedAttribute]
public void set_FillLevel(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Chain : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ChainCommandBlock : Block {
    [CompilerGeneratedAttribute]
private bool <ConditionalBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ConditionalBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ConditionalBit();
    [CompilerGeneratedAttribute]
public void set_ConditionalBit(bool value);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Chalkboard : Block {
    private static ILog Log;
    public string Name { get; }
    private static Chalkboard();
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void BreakBlock(Level world, BlockFace face, bool silent);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual Item[] GetDrops(Item tool);
    private BlockCoordinates GetDirCoord();
}
public class MiNET.Blocks.ChemicalHeat : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ChemistryTable : Block {
    [CompilerGeneratedAttribute]
private string <ChemistryTableType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ChemistryTableType { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_ChemistryTableType();
    [CompilerGeneratedAttribute]
public void set_ChemistryTableType(string value);
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Chest : ChestBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.ChestBase : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public ChestBase(byte id);
    private static ChestBase();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
}
public class MiNET.Blocks.ChiseledNetherBricks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ChiseledPolishedBlackstone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ChorusFlower : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int Age { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ChorusPlant : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Clay : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoalBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoalOre : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual float GetExperiencePoints();
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Cobblestone : Block {
    public string Name { get; }
    public virtual Item GetSmelt();
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CobblestoneWall : Block {
    [CompilerGeneratedAttribute]
private string <WallBlockType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeEast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeNorth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeSouth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeWest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WallPostBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallBlockType { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeEast { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeNorth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeSouth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeWest { get; public set; }
    [StateBitAttribute]
public bool WallPostBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WallBlockType();
    [CompilerGeneratedAttribute]
public void set_WallBlockType(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeEast();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeEast(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeNorth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeNorth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeSouth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeSouth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeWest();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeWest(string value);
    [CompilerGeneratedAttribute]
public bool get_WallPostBit();
    [CompilerGeneratedAttribute]
public void set_WallPostBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Cocoa : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "2")]
public int Age { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ColoredTorchBp : Block {
    [CompilerGeneratedAttribute]
private bool <ColorBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ColorBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ColorBit();
    [CompilerGeneratedAttribute]
public void set_ColorBit(bool value);
    [CompilerGeneratedAttribute]
public string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ColoredTorchRg : Block {
    [CompilerGeneratedAttribute]
private bool <ColorBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ColorBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ColorBit();
    [CompilerGeneratedAttribute]
public void set_ColorBit(bool value);
    [CompilerGeneratedAttribute]
public string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CommandBlock : Block {
    [CompilerGeneratedAttribute]
private bool <ConditionalBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ConditionalBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ConditionalBit();
    [CompilerGeneratedAttribute]
public void set_ConditionalBit(bool value);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ComparatorBase : Block {
    public ComparatorBase(byte id);
}
public class MiNET.Blocks.Composter : Block {
    [CompilerGeneratedAttribute]
private int <ComposterFillLevel>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "8")]
public int ComposterFillLevel { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_ComposterFillLevel();
    [CompilerGeneratedAttribute]
public void set_ComposterFillLevel(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Concrete : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ConcretePowder : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Conduit : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Coral : Block {
    [CompilerGeneratedAttribute]
private string <CoralColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CoralColor { get; public set; }
    [StateBitAttribute]
public bool DeadBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CoralColor();
    [CompilerGeneratedAttribute]
public void set_CoralColor(string value);
    [CompilerGeneratedAttribute]
public bool get_DeadBit();
    [CompilerGeneratedAttribute]
public void set_DeadBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoralBlock : Block {
    [CompilerGeneratedAttribute]
private string <CoralColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CoralColor { get; public set; }
    [StateBitAttribute]
public bool DeadBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CoralColor();
    [CompilerGeneratedAttribute]
public void set_CoralColor(string value);
    [CompilerGeneratedAttribute]
public bool get_DeadBit();
    [CompilerGeneratedAttribute]
public void set_DeadBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoralFan : Block {
    [CompilerGeneratedAttribute]
private string <CoralColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CoralFanDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CoralColor { get; public set; }
    [StateRangeAttribute("0", "1")]
public int CoralFanDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CoralColor();
    [CompilerGeneratedAttribute]
public void set_CoralColor(string value);
    [CompilerGeneratedAttribute]
public int get_CoralFanDirection();
    [CompilerGeneratedAttribute]
public void set_CoralFanDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoralFanDead : Block {
    [CompilerGeneratedAttribute]
private string <CoralColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CoralFanDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CoralColor { get; public set; }
    [StateRangeAttribute("0", "1")]
public int CoralFanDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CoralColor();
    [CompilerGeneratedAttribute]
public void set_CoralColor(string value);
    [CompilerGeneratedAttribute]
public int get_CoralFanDirection();
    [CompilerGeneratedAttribute]
public void set_CoralFanDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoralFanHang : Block {
    [CompilerGeneratedAttribute]
private int <CoralDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoralHangTypeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int CoralDirection { get; public set; }
    [StateBitAttribute]
public bool CoralHangTypeBit { get; public set; }
    [StateBitAttribute]
public bool DeadBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_CoralDirection();
    [CompilerGeneratedAttribute]
public void set_CoralDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_CoralHangTypeBit();
    [CompilerGeneratedAttribute]
public void set_CoralHangTypeBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeadBit();
    [CompilerGeneratedAttribute]
public void set_DeadBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoralFanHang2 : Block {
    [CompilerGeneratedAttribute]
private int <CoralDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoralHangTypeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int CoralDirection { get; public set; }
    [StateBitAttribute]
public bool CoralHangTypeBit { get; public set; }
    [StateBitAttribute]
public bool DeadBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_CoralDirection();
    [CompilerGeneratedAttribute]
public void set_CoralDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_CoralHangTypeBit();
    [CompilerGeneratedAttribute]
public void set_CoralHangTypeBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeadBit();
    [CompilerGeneratedAttribute]
public void set_DeadBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CoralFanHang3 : Block {
    [CompilerGeneratedAttribute]
private int <CoralDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoralHangTypeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int CoralDirection { get; public set; }
    [StateBitAttribute]
public bool CoralHangTypeBit { get; public set; }
    [StateBitAttribute]
public bool DeadBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_CoralDirection();
    [CompilerGeneratedAttribute]
public void set_CoralDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_CoralHangTypeBit();
    [CompilerGeneratedAttribute]
public void set_CoralHangTypeBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeadBit();
    [CompilerGeneratedAttribute]
public void set_DeadBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrackedNetherBricks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrackedPolishedBlackstoneBricks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CraftingTable : Block {
    public string Name { get; }
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonButton : Block {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonDoor : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonDoubleSlab : Block {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonFence : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonFenceGate : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonFungus : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonHyphae : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonNylium : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonPlanks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonRoots : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonSlab : SlabBase {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonStem : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CrimsonWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.Crops : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MaxGrowth>k__BackingField;
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    protected byte MaxGrowth { get; protected set; }
    protected Crops(byte id);
    private static Crops();
    [CompilerGeneratedAttribute]
public virtual int get_Growth();
    [CompilerGeneratedAttribute]
public virtual void set_Growth(int value);
    [CompilerGeneratedAttribute]
protected byte get_MaxGrowth();
    [CompilerGeneratedAttribute]
protected void set_MaxGrowth(byte value);
    public virtual bool Interact(Level level, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual void OnTick(Level level, bool isRandom);
    private static bool CalculateGrowthChance(Level level, Block target);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
}
public class MiNET.Blocks.CryingObsidian : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.CyanGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkOakButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkOakDoor : DoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkOakFenceGate : FenceGateBlocks {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkOakPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkOakStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkoakStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkOakTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkoakWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DarkPrismarineStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DaylightDetector : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DaylightDetectorInverted : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Deadbush : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Deny : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DetectorRail : Block {
    [CompilerGeneratedAttribute]
private bool <RailDataBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RailDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool RailDataBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int RailDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_RailDataBit();
    [CompilerGeneratedAttribute]
public void set_RailDataBit(bool value);
    [CompilerGeneratedAttribute]
public int get_RailDirection();
    [CompilerGeneratedAttribute]
public void set_RailDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DiamondBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DiamondOre : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual Item GetSmelt();
    public virtual float GetExperiencePoints();
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DioriteStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Dirt : Block {
    [CompilerGeneratedAttribute]
private string <DirtType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string DirtType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_DirtType();
    [CompilerGeneratedAttribute]
public void set_DirtType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Dispenser : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriggeredBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool TriggeredBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_TriggeredBit();
    [CompilerGeneratedAttribute]
public void set_TriggeredBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.DoorBase : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    protected DoorBase(byte id);
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BreakBlock(Level level, BlockFace face, bool silent);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
}
public class MiNET.Blocks.DoublePlant : Block {
    [CompilerGeneratedAttribute]
private string <DoublePlantType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string DoublePlantType { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_DoublePlantType();
    [CompilerGeneratedAttribute]
public void set_DoublePlantType(string value);
    [CompilerGeneratedAttribute]
public bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DoubleStoneSlab : Block {
    [CompilerGeneratedAttribute]
private string <StoneSlabType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType(string value);
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DoubleStoneSlab2 : Block {
    [CompilerGeneratedAttribute]
private string <StoneSlabType2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType2 { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType2();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType2(string value);
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DoubleStoneSlab3 : Block {
    [CompilerGeneratedAttribute]
private string <StoneSlabType3>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType3 { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType3();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType3(string value);
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DoubleStoneSlab4 : Block {
    [CompilerGeneratedAttribute]
private string <StoneSlabType4>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType4 { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType4();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType4(string value);
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DoubleWoodenSlab : Block {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WoodType>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WoodType { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    [CompilerGeneratedAttribute]
public string get_WoodType();
    [CompilerGeneratedAttribute]
public void set_WoodType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DragonEgg : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.DriedKelpBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Dropper : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriggeredBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool TriggeredBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_TriggeredBit();
    [CompilerGeneratedAttribute]
public void set_TriggeredBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element0 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element1 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element10 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element100 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element101 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element102 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element103 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element104 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element105 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element106 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element107 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element108 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element109 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element11 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element110 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element111 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element112 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element113 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element114 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element115 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element116 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element117 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element118 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element12 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element13 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element14 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element15 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element16 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element17 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element18 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element19 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element2 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element20 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element21 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element22 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element23 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element24 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element25 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element26 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element27 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element28 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element29 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element3 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element30 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element31 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element32 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element33 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element34 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element35 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element36 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element37 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element38 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element39 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element4 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element40 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element41 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element42 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element43 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element44 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element45 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element46 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element47 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element48 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element49 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element5 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element50 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element51 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element52 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element53 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element54 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element55 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element56 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element57 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element58 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element59 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element6 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element60 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element61 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element62 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element63 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element64 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element65 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element66 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element67 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element68 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element69 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element7 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element70 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element71 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element72 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element73 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element74 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element75 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element76 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element77 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element78 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element79 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element8 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element80 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element81 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element82 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element83 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element84 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element85 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element86 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element87 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element88 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element89 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element9 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element90 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element91 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element92 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element93 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element94 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element95 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element96 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element97 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element98 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Element99 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EmeraldBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EmeraldOre : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual float GetExperiencePoints();
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EnchantingTable : Block {
    public string Name { get; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndBricks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndBrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EnderChest : ChestBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndGateway : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndPortal : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndPortalFrame : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndPortalEyeBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool EndPortalEyeBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_EndPortalEyeBit();
    [CompilerGeneratedAttribute]
public void set_EndPortalEyeBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndRod : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.EndStone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Farmland : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <MoisturizedAmount>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int MoisturizedAmount { get; public set; }
    private static Farmland();
    public virtual Item[] GetDrops(Item tool);
    public virtual void OnTick(Level level, bool isRandom);
    public bool FindWater(Level level, BlockCoordinates coord, List`1<BlockCoordinates> visited, int distance);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_MoisturizedAmount();
    [CompilerGeneratedAttribute]
public void set_MoisturizedAmount(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Fence : Block {
    [CompilerGeneratedAttribute]
private string <WoodType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WoodType { get; public set; }
    public Fence(byte id);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WoodType();
    [CompilerGeneratedAttribute]
public void set_WoodType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.FenceGate : FenceGateBlocks {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.FenceGateBlocks : Block {
    public FenceGateBlocks(byte id);
}
public class MiNET.Blocks.Fire : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int Age { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.FletchingTable : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.FlowerPot : Block {
    [CompilerGeneratedAttribute]
private bool <UpdateBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpdateBit { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_UpdateBit();
    [CompilerGeneratedAttribute]
public void set_UpdateBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.Flowing : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <LiquidDepth>k__BackingField;
    private int _adjacentSources;
    private Int32[] _flowCost;
    private Boolean[] _optimalFlowDirections;
    [StateRangeAttribute("0", "15")]
public int LiquidDepth { get; public set; }
    protected Flowing(byte id);
    private static Flowing();
    [CompilerGeneratedAttribute]
public virtual int get_LiquidDepth();
    [CompilerGeneratedAttribute]
public virtual void set_LiquidDepth(int value);
    public virtual void BlockAdded(Level level);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void DoPhysics(Level level);
    public virtual void OnTick(Level world, bool isRandom);
    private Boolean[] GetOptimalFlowDirections(Level world, int x, int y, int z);
    private int GetLiquidDepth(Block block);
    private int CalculateFlowCost(Level world, int x, int y, int z, int accumulatedCost, int prevDirection);
    private void Flow(Level world, BlockCoordinates coord, int decay);
    private bool CanBeFlownInto(Level world, BlockCoordinates coord);
    private bool BlocksFluid(Level world, int x, int y, int z);
    private bool BlocksFluid(Block block);
    private void SetToStill(Level world, BlockCoordinates coord);
    private int GetSmallestFlowDecay(Level world, BlockCoordinates coord, int decay);
    private int GetFlowDecay(Level world, BlockCoordinates coord);
    private bool IsSameMaterial(Block block);
    private int TickRate();
    private bool CheckForHarden(Level world, BlockCoordinates coord);
    private bool IsWater(Level world, BlockCoordinates coord);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.FlowingLava : Flowing {
    [CompilerGeneratedAttribute]
private int <LiquidDepth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int LiquidDepth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_LiquidDepth();
    [CompilerGeneratedAttribute]
public virtual void set_LiquidDepth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.FlowingWater : Flowing {
    [CompilerGeneratedAttribute]
private int <LiquidDepth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int LiquidDepth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_LiquidDepth();
    [CompilerGeneratedAttribute]
public virtual void set_LiquidDepth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Frame : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ItemFrameMapBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool ItemFrameMapBit { get; public set; }
    private static Frame();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public void ClearItem(Level world);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_ItemFrameMapBit();
    [CompilerGeneratedAttribute]
public void set_ItemFrameMapBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.FrostedIce : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Age { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Furnace : FurnaceBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.FurnaceBase : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    protected FurnaceBase(byte id);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
}
public class MiNET.Blocks.GildedBlackstone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Glass : Block {
    public string Name { get; }
    public Glass(byte id);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GlassPane : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.GlazedTerracotta : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public GlazedTerracotta(byte id);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.Glowingobsidian : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Glowstone : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GoldBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GoldenRail : Block {
    [CompilerGeneratedAttribute]
private bool <RailDataBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RailDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool RailDataBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int RailDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_RailDataBit();
    [CompilerGeneratedAttribute]
public void set_RailDataBit(bool value);
    [CompilerGeneratedAttribute]
public int get_RailDirection();
    [CompilerGeneratedAttribute]
public void set_RailDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GoldOre : Block {
    public string Name { get; }
    public virtual Item GetSmelt();
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GraniteStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Grass : Block {
    private static ILog Log;
    public string Name { get; }
    private static Grass();
    public virtual void DoPhysics(Level level);
    public virtual void OnTick(Level level, bool isRandom);
    public virtual bool Interact(Level level, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    private void DoSpawn();
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GrassPath : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Gravel : Block {
    private int _tickRate;
    public string Name { get; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void BlockUpdate(Level world, BlockCoordinates blockCoordinates);
    public virtual void DoPhysics(Level level);
    public virtual void OnTick(Level level, bool isRandom);
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GrayGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.GreenGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Grindstone : Block {
    [CompilerGeneratedAttribute]
private string <Attachment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Attachment { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Attachment();
    [CompilerGeneratedAttribute]
public void set_Attachment(string value);
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HardenedClay : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HardGlass : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HardGlassPane : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HardStainedGlass : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HardStainedGlassPane : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HayBlock : Block {
    [CompilerGeneratedAttribute]
private int <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Deprecated { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(int value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HeavyWeightedPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HoneyBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.HoneycombBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Hopper : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ToggleBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool ToggleBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_ToggleBit();
    [CompilerGeneratedAttribute]
public void set_ToggleBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Ice : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public interface MiNET.Blocks.ICustomBlockFactory {
    public abstract virtual Block GetBlockById(int blockId);
}
public class MiNET.Blocks.InfoUpdate : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.InfoUpdate2 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.InvisibleBedrock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.IronBars : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.IronBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.IronDoor : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BreakBlock(Level level, BlockFace face, bool silent);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.IronOre : Block {
    public string Name { get; }
    public virtual Item GetSmelt();
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.IronTrapdoor : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Jigsaw : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Rotation>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Rotation { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public int get_Rotation();
    [CompilerGeneratedAttribute]
public void set_Rotation(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Jukebox : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleDoor : DoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleFenceGate : FenceGateBlocks {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JunglePressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.JungleWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Kelp : Block {
    [CompilerGeneratedAttribute]
private int <KelpAge>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "25")]
public int KelpAge { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_KelpAge();
    [CompilerGeneratedAttribute]
public void set_KelpAge(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Ladder : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Lantern : Block {
    [CompilerGeneratedAttribute]
private bool <Hanging>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool Hanging { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_Hanging();
    [CompilerGeneratedAttribute]
public void set_Hanging(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LapisBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LapisOre : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual float GetExperiencePoints();
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Lava : Stationary {
    [CompilerGeneratedAttribute]
private int <LiquidDepth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int LiquidDepth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_LiquidDepth();
    [CompilerGeneratedAttribute]
public virtual void set_LiquidDepth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LavaCauldron : Block {
    [CompilerGeneratedAttribute]
private string <CauldronLiquid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FillLevel>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CauldronLiquid { get; public set; }
    [StateRangeAttribute("0", "6")]
public int FillLevel { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CauldronLiquid();
    [CompilerGeneratedAttribute]
public void set_CauldronLiquid(string value);
    [CompilerGeneratedAttribute]
public int get_FillLevel();
    [CompilerGeneratedAttribute]
public void set_FillLevel(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Leaves : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <OldLeafType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistentBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string OldLeafType { get; public set; }
    [StateBitAttribute]
public bool PersistentBit { get; public set; }
    [StateBitAttribute]
public bool UpdateBit { get; public set; }
    private static Leaves();
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    public virtual void OnTick(Level level, bool isRandom);
    public virtual Item[] GetDrops(Item tool);
    private bool FindLog(Level level, BlockCoordinates coord, List`1<BlockCoordinates> visited, int distance);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_OldLeafType();
    [CompilerGeneratedAttribute]
public void set_OldLeafType(string value);
    [CompilerGeneratedAttribute]
public bool get_PersistentBit();
    [CompilerGeneratedAttribute]
public void set_PersistentBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpdateBit();
    [CompilerGeneratedAttribute]
public void set_UpdateBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Leaves2 : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <NewLeafType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistentBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string NewLeafType { get; public set; }
    [StateBitAttribute]
public bool PersistentBit { get; public set; }
    [StateBitAttribute]
public bool UpdateBit { get; public set; }
    private static Leaves2();
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    public virtual void OnTick(Level level, bool isRandom);
    public virtual Item[] GetDrops(Item tool);
    private bool FindLog(Level level, BlockCoordinates coord, List`1<BlockCoordinates> visited, int distance);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_NewLeafType();
    [CompilerGeneratedAttribute]
public void set_NewLeafType(string value);
    [CompilerGeneratedAttribute]
public bool get_PersistentBit();
    [CompilerGeneratedAttribute]
public void set_PersistentBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpdateBit();
    [CompilerGeneratedAttribute]
public void set_UpdateBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Lectern : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PoweredBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool PoweredBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_PoweredBit();
    [CompilerGeneratedAttribute]
public void set_PoweredBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Lever : Block {
    [CompilerGeneratedAttribute]
private string <LeverDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string LeverDirection { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_LeverDirection();
    [CompilerGeneratedAttribute]
public void set_LeverDirection(string value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LightBlock : Block {
    [CompilerGeneratedAttribute]
private int <BlockLightLevel>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int BlockLightLevel { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_BlockLightLevel();
    [CompilerGeneratedAttribute]
public void set_BlockLightLevel(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LightBlueGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LightWeightedPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LimeGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LitBlastFurnace : BlastFurnaceBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LitFurnace : FurnaceBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LitPumpkin : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LitRedstoneLamp : RedstoneLamp {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LitRedstoneOre : RedstoneOre {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.LitSmoker : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Lodestone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Log : Block {
    [CompilerGeneratedAttribute]
private string <OldLogType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string OldLogType { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual Item GetSmelt();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_OldLogType();
    [CompilerGeneratedAttribute]
public void set_OldLogType(string value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Log2 : Block {
    [CompilerGeneratedAttribute]
private string <NewLogType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string NewLogType { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_NewLogType();
    [CompilerGeneratedAttribute]
public void set_NewLogType(string value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Loom : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MagentaGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Magma : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MelonBlock : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MelonStem : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public int get_Growth();
    [CompilerGeneratedAttribute]
public void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MobSpawner : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual float GetExperiencePoints();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MonsterEgg : Block {
    [CompilerGeneratedAttribute]
private string <MonsterEggStoneType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string MonsterEggStoneType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_MonsterEggStoneType();
    [CompilerGeneratedAttribute]
public void set_MonsterEggStoneType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MossyCobblestone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MossyCobblestoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MossyStoneBrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.MovingBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Mycelium : Block {
    public string Name { get; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherBrick : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherBrickFence : Fence {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherBrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherGoldOre : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetheriteBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Netherrack : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Netherreactor : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherSprouts : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherWart : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Age { get; public set; }
    public virtual Item[] GetDrops(Item tool);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NetherWartBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.NormalStoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Noteblock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.OakStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Observer : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PoweredBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool PoweredBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_PoweredBit();
    [CompilerGeneratedAttribute]
public void set_PoweredBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Obsidian : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.OrangeGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PackedIce : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PinkGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Piston : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PistonArmCollision : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.Planks : Block {
    [CompilerGeneratedAttribute]
private string <WoodType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WoodType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WoodType();
    [CompilerGeneratedAttribute]
public void set_WoodType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Podzol : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedAndesiteStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBasalt : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneBrickDoubleSlab : Block {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneBricks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneBrickSlab : SlabBase {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneBrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneBrickWall : Block {
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeEast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeNorth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeSouth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeWest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WallPostBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeEast { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeNorth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeSouth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeWest { get; public set; }
    [StateBitAttribute]
public bool WallPostBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeEast();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeEast(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeNorth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeNorth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeSouth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeSouth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeWest();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeWest(string value);
    [CompilerGeneratedAttribute]
public bool get_WallPostBit();
    [CompilerGeneratedAttribute]
public void set_WallPostBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneButton : Block {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneDoubleSlab : Block {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstonePressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneSlab : SlabBase {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedBlackstoneWall : Block {
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeEast>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeNorth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeSouth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WallConnectionTypeWest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WallPostBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeEast { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeNorth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeSouth { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WallConnectionTypeWest { get; public set; }
    [StateBitAttribute]
public bool WallPostBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeEast();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeEast(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeNorth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeNorth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeSouth();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeSouth(string value);
    [CompilerGeneratedAttribute]
public string get_WallConnectionTypeWest();
    [CompilerGeneratedAttribute]
public void set_WallConnectionTypeWest(string value);
    [CompilerGeneratedAttribute]
public bool get_WallPostBit();
    [CompilerGeneratedAttribute]
public void set_WallPostBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedDioriteStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PolishedGraniteStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Portal : Block {
    [CompilerGeneratedAttribute]
private string <PortalAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PortalAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PortalAxis();
    [CompilerGeneratedAttribute]
public void set_PortalAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    private bool IsValid(Block block);
    public virtual Item[] GetDrops(Item tool);
    public void Fill(Level level, BlockCoordinates origin);
}
public class MiNET.Blocks.PortalInfo : object {
    [CompilerGeneratedAttribute]
private BlockCoordinates <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundingBox <Size>k__BackingField;
    public BlockCoordinates Coordinates { get; public set; }
    public bool HasPlatform { get; public set; }
    public BoundingBox Size { get; public set; }
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public bool get_HasPlatform();
    [CompilerGeneratedAttribute]
public void set_HasPlatform(bool value);
    [CompilerGeneratedAttribute]
public BoundingBox get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(BoundingBox value);
}
public class MiNET.Blocks.Potatoes : Crops {
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Growth();
    [CompilerGeneratedAttribute]
public virtual void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.PoweredComparator : ComparatorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputLitBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputSubtractBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OutputLitBit { get; public set; }
    [StateBitAttribute]
public bool OutputSubtractBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_OutputLitBit();
    [CompilerGeneratedAttribute]
public void set_OutputLitBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputSubtractBit();
    [CompilerGeneratedAttribute]
public void set_OutputSubtractBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PoweredRepeater : RepeaterBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RepeaterDelay>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateRangeAttribute("0", "3")]
public int RepeaterDelay { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public int get_RepeaterDelay();
    [CompilerGeneratedAttribute]
public void set_RepeaterDelay(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Prismarine : Block {
    [CompilerGeneratedAttribute]
private string <PrismarineBlockType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PrismarineBlockType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PrismarineBlockType();
    [CompilerGeneratedAttribute]
public void set_PrismarineBlockType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PrismarineBricksStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PrismarineStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Pumpkin : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PumpkinStem : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public int get_Growth();
    [CompilerGeneratedAttribute]
public void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PurpleGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PurpurBlock : Block {
    [CompilerGeneratedAttribute]
private string <ChiselType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ChiselType { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_ChiselType();
    [CompilerGeneratedAttribute]
public void set_ChiselType(string value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.PurpurStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.QuartzBlock : Block {
    [CompilerGeneratedAttribute]
private string <ChiselType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ChiselType { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_ChiselType();
    [CompilerGeneratedAttribute]
public void set_ChiselType(string value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.QuartzBricks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.QuartzOre : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
    public virtual float GetExperiencePoints();
}
public class MiNET.Blocks.QuartzStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.R12ToCurrentBlockMapEntry : object {
    [CompilerGeneratedAttribute]
private string <StringId>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Meta>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockStateContainer <State>k__BackingField;
    public string StringId { get; public set; }
    public short Meta { get; public set; }
    public BlockStateContainer State { get; public set; }
    public R12ToCurrentBlockMapEntry(string id, short meta, BlockStateContainer state);
    [CompilerGeneratedAttribute]
public string get_StringId();
    [CompilerGeneratedAttribute]
public void set_StringId(string value);
    [CompilerGeneratedAttribute]
public short get_Meta();
    [CompilerGeneratedAttribute]
public void set_Meta(short value);
    [CompilerGeneratedAttribute]
public BlockStateContainer get_State();
    [CompilerGeneratedAttribute]
public void set_State(BlockStateContainer value);
}
public class MiNET.Blocks.Rail : Block {
    [CompilerGeneratedAttribute]
private int <RailDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "9")]
public int RailDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RailDirection();
    [CompilerGeneratedAttribute]
public void set_RailDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.RandomRange`1 : object {
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    public T Item { get; }
    public int Weight { get; }
    public RandomRange`1(T item, int weight);
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public int get_Weight();
}
public class MiNET.Blocks.RandomWeighted`1 : object {
    private List`1<RandomRange`1<T>> _items;
    private Random _random;
    public RandomWeighted`1(List`1<RandomRange`1<T>> items);
    public T Next();
}
public class MiNET.Blocks.RedFlower : Block {
    [CompilerGeneratedAttribute]
private string <FlowerType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string FlowerType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_FlowerType();
    [CompilerGeneratedAttribute]
public void set_FlowerType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
}
public class MiNET.Blocks.RedGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedMushroom : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedMushroomBlock : Block {
    [CompilerGeneratedAttribute]
private int <HugeMushroomBits>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int HugeMushroomBits { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_HugeMushroomBits();
    [CompilerGeneratedAttribute]
public void set_HugeMushroomBits(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.RedNetherBrick : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedNetherBrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedSandstone : Block {
    [CompilerGeneratedAttribute]
private string <SandStoneType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SandStoneType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SandStoneType();
    [CompilerGeneratedAttribute]
public void set_SandStoneType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedSandstoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedstoneBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedstoneLamp : Block {
    public string Name { get; }
    public RedstoneLamp(byte id);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RedstoneOre : Block {
    public string Name { get; }
    public RedstoneOre(byte id);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
    public virtual float GetExperiencePoints();
}
public class MiNET.Blocks.RedstoneTorch : RedstoneTorchBase {
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.RedstoneTorchBase : Block {
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public RedstoneTorchBase(byte id);
    [CompilerGeneratedAttribute]
public virtual string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_TorchFacingDirection(string value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.RedstoneWire : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.Reeds : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int Age { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.RepeaterBase : Block {
    public RepeaterBase(byte id);
}
public class MiNET.Blocks.RepeatingCommandBlock : Block {
    [CompilerGeneratedAttribute]
private bool <ConditionalBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ConditionalBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ConditionalBit();
    [CompilerGeneratedAttribute]
public void set_ConditionalBit(bool value);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Reserved6 : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.RespawnAnchor : Block {
    [CompilerGeneratedAttribute]
private int <RespawnAnchorCharge>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "4")]
public int RespawnAnchorCharge { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RespawnAnchorCharge();
    [CompilerGeneratedAttribute]
public void set_RespawnAnchorCharge(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Sand : Block {
    [CompilerGeneratedAttribute]
private string <SandType>k__BackingField;
    private static ILog Log;
    private int _tickRate;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SandType { get; public set; }
    private static Sand();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SandType();
    [CompilerGeneratedAttribute]
public void set_SandType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void BlockUpdate(Level world, BlockCoordinates blockCoordinates);
    public virtual void DoPhysics(Level level);
    public virtual void OnTick(Level level, bool isRandom);
    public virtual Item GetSmelt();
}
public class MiNET.Blocks.Sandstone : Block {
    [CompilerGeneratedAttribute]
private string <SandStoneType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SandStoneType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SandStoneType();
    [CompilerGeneratedAttribute]
public void set_SandStoneType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SandstoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Sapling : Block {
    [CompilerGeneratedAttribute]
private bool <AgeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SaplingType>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool AgeBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SaplingType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AgeBit();
    [CompilerGeneratedAttribute]
public void set_AgeBit(bool value);
    [CompilerGeneratedAttribute]
public string get_SaplingType();
    [CompilerGeneratedAttribute]
public void set_SaplingType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool Interact(Level level, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual void OnTick(Level level, bool isRandom);
}
public class MiNET.Blocks.Scaffolding : Block {
    [CompilerGeneratedAttribute]
private int <Stability>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StabilityCheck>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int Stability { get; public set; }
    [StateBitAttribute]
public bool StabilityCheck { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Stability();
    [CompilerGeneratedAttribute]
public void set_Stability(int value);
    [CompilerGeneratedAttribute]
public bool get_StabilityCheck();
    [CompilerGeneratedAttribute]
public void set_StabilityCheck(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Seagrass : Block {
    [CompilerGeneratedAttribute]
private string <SeaGrassType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SeaGrassType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SeaGrassType();
    [CompilerGeneratedAttribute]
public void set_SeaGrassType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SeaLantern : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.SeaPickle : Block {
    [CompilerGeneratedAttribute]
private int <ClusterCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeadBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int ClusterCount { get; public set; }
    [StateBitAttribute]
public bool DeadBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_ClusterCount();
    [CompilerGeneratedAttribute]
public void set_ClusterCount(int value);
    [CompilerGeneratedAttribute]
public bool get_DeadBit();
    [CompilerGeneratedAttribute]
public void set_DeadBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Shroomlight : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.ShulkerBox : UndyedShulkerBox {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SilverGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Skull : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDropBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    [StateBitAttribute]
public bool NoDropBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public bool get_NoDropBit();
    [CompilerGeneratedAttribute]
public void set_NoDropBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.SlabBase : Block {
    private int _doubleSlabId;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    protected SlabBase(int id, int doubleSlabId);
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual BoundingBox GetBoundingBox();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    protected virtual bool AreSameType(Block obj);
    protected void SetDoubleSlab(Level world, BlockCoordinates coordinates);
}
public class MiNET.Blocks.Slime : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SmallTreeGenerator : TreeGeneratorBase {
    private Block _log;
    private Block _leave;
    private int _minTreeHeight;
    public SmallTreeGenerator(Block log, Block leave, int minTreeHeight);
    public bool Generate(Level level, BlockCoordinates position);
}
public class MiNET.Blocks.SmithingTable : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Smoker : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SmoothQuartzStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SmoothRedSandstoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SmoothSandstoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SmoothStone : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Snow : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.SnowLayer : Block {
    [CompilerGeneratedAttribute]
private bool <CoveredBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    private static ILog Log;
    public string Name { get; }
    [StateBitAttribute]
public bool CoveredBit { get; public set; }
    [StateRangeAttribute("0", "7")]
public int Height { get; public set; }
    private static SnowLayer();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_CoveredBit();
    [CompilerGeneratedAttribute]
public void set_CoveredBit(bool value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.SoulCampfire : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Extinguished>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool Extinguished { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_Extinguished();
    [CompilerGeneratedAttribute]
public void set_Extinguished(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SoulFire : Block {
    [CompilerGeneratedAttribute]
private int <Age>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int Age { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SoulLantern : Block {
    [CompilerGeneratedAttribute]
private bool <Hanging>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool Hanging { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_Hanging();
    [CompilerGeneratedAttribute]
public void set_Hanging(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SoulSand : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SoulSoil : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SoulTorch : Block {
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Sponge : Block {
    [CompilerGeneratedAttribute]
private string <SpongeType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string SpongeType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_SpongeType();
    [CompilerGeneratedAttribute]
public void set_SpongeType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceDoor : DoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceFenceGate : FenceGateBlocks {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SprucePressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SpruceWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StainedGlass : Glass {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StainedGlassPane : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.StainedHardenedClay : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StandingBanner : Block {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private NbtCompound <ExtraData>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public int Base { get; public set; }
    public NbtCompound ExtraData { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    [CompilerGeneratedAttribute]
public int get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(int value);
    [CompilerGeneratedAttribute]
public NbtCompound get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(NbtCompound value);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual BoundingBox GetBoundingBox();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.StandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StandingSignBase : Block {
    private int _itemDropId;
    public StandingSignBase(int id, int itemDropId);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual Item[] GetDrops(Item tool);
}
[AttributeUsageAttribute("2432")]
public class MiNET.Blocks.StateAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
public class MiNET.Blocks.StateBitAttribute : StateAttribute {
}
[AttributeUsageAttribute("2432")]
public class MiNET.Blocks.StateEnumAttribute : StateAttribute {
    public StateEnumAttribute(String[] validValues);
}
[AttributeUsageAttribute("2432")]
public class MiNET.Blocks.StateRangeAttribute : StateAttribute {
    [CompilerGeneratedAttribute]
private int <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Maximum>k__BackingField;
    public int Minimum { get; }
    public int Maximum { get; }
    public StateRangeAttribute(int minimum, int maximum);
    [CompilerGeneratedAttribute]
public int get_Minimum();
    [CompilerGeneratedAttribute]
public int get_Maximum();
}
public class MiNET.Blocks.Stationary : Block {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <LiquidDepth>k__BackingField;
    [StateRangeAttribute("0", "15")]
public int LiquidDepth { get; public set; }
    internal Stationary(byte id);
    private static Stationary();
    [CompilerGeneratedAttribute]
public virtual int get_LiquidDepth();
    [CompilerGeneratedAttribute]
public virtual void set_LiquidDepth(int value);
    public virtual void DoPhysics(Level level);
    private void SetToFlowing(Level world);
    private void CheckForHarden(Level world, BlockCoordinates coord);
    private bool IsWater(Level world, BlockCoordinates coord);
}
public class MiNET.Blocks.StickyPiston : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StickyPistonArmCollision : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Stone : Block {
    [CompilerGeneratedAttribute]
private string <StoneType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneType();
    [CompilerGeneratedAttribute]
public void set_StoneType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.Stonebrick : Block {
    [CompilerGeneratedAttribute]
private string <StoneBrickType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneBrickType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneBrickType();
    [CompilerGeneratedAttribute]
public void set_StoneBrickType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item GetSmelt();
}
public class MiNET.Blocks.StoneBrickStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StoneButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Stonecutter : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StonecutterBlock : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StonePressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StoneSlab : SlabBase {
    [CompilerGeneratedAttribute]
private string <StoneSlabType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool AreSameType(Block obj);
}
public class MiNET.Blocks.StoneSlab2 : SlabBase {
    [CompilerGeneratedAttribute]
private string <StoneSlabType2>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType2 { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType2();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType2(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool AreSameType(Block obj);
}
public class MiNET.Blocks.StoneSlab3 : SlabBase {
    [CompilerGeneratedAttribute]
private string <StoneSlabType3>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType3 { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType3();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType3(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool AreSameType(Block obj);
}
public class MiNET.Blocks.StoneSlab4 : SlabBase {
    [CompilerGeneratedAttribute]
private string <StoneSlabType4>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StoneSlabType4 { get; public set; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StoneSlabType4();
    [CompilerGeneratedAttribute]
public void set_StoneSlabType4(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool AreSameType(Block obj);
}
public class MiNET.Blocks.StoneStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedAcaciaLog : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedBirchLog : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedCrimsonHyphae : Block {
    [CompilerGeneratedAttribute]
private int <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Deprecated { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(int value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedCrimsonStem : Block {
    [CompilerGeneratedAttribute]
private int <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Deprecated { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(int value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedDarkOakLog : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedJungleLog : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedOakLog : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedSpruceLog : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedWarpedHyphae : Block {
    [CompilerGeneratedAttribute]
private int <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Deprecated { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(int value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StrippedWarpedStem : Block {
    [CompilerGeneratedAttribute]
private int <Deprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Deprecated { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Deprecated();
    [CompilerGeneratedAttribute]
public void set_Deprecated(int value);
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.StructureBlock : Block {
    [CompilerGeneratedAttribute]
private string <StructureBlockType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StructureBlockType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StructureBlockType();
    [CompilerGeneratedAttribute]
public void set_StructureBlockType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.StructureVoid : Block {
    [CompilerGeneratedAttribute]
private string <StructureVoidType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string StructureVoidType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_StructureVoidType();
    [CompilerGeneratedAttribute]
public void set_StructureVoidType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.SweetBerryBush : Block {
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Growth();
    [CompilerGeneratedAttribute]
public void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Tallgrass : Block {
    [CompilerGeneratedAttribute]
private string <TallGrassType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TallGrassType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_TallGrassType();
    [CompilerGeneratedAttribute]
public void set_TallGrassType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual void OnTick(Level level, bool isRandom);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.Target : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Tnt : Block {
    [CompilerGeneratedAttribute]
private bool <AllowUnderwaterBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExplodeBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool AllowUnderwaterBit { get; public set; }
    [StateBitAttribute]
public bool ExplodeBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AllowUnderwaterBit();
    [CompilerGeneratedAttribute]
public void set_AllowUnderwaterBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExplodeBit();
    [CompilerGeneratedAttribute]
public void set_ExplodeBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Torch : Block {
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.Trapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.TrapdoorBase : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    protected TrapdoorBase(int id);
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
}
public class MiNET.Blocks.TrappedChest : ChestBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public abstract class MiNET.Blocks.TreeGeneratorBase : object {
    protected bool CanGrowInto(Block material);
}
public class MiNET.Blocks.TripWire : Block {
    [CompilerGeneratedAttribute]
private bool <AttachedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisarmedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PoweredBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuspendedBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool AttachedBit { get; public set; }
    [StateBitAttribute]
public bool DisarmedBit { get; public set; }
    [StateBitAttribute]
public bool PoweredBit { get; public set; }
    [StateBitAttribute]
public bool SuspendedBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AttachedBit();
    [CompilerGeneratedAttribute]
public void set_AttachedBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisarmedBit();
    [CompilerGeneratedAttribute]
public void set_DisarmedBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_PoweredBit();
    [CompilerGeneratedAttribute]
public void set_PoweredBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuspendedBit();
    [CompilerGeneratedAttribute]
public void set_SuspendedBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.TripwireHook : Block {
    [CompilerGeneratedAttribute]
private bool <AttachedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PoweredBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool AttachedBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool PoweredBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_AttachedBit();
    [CompilerGeneratedAttribute]
public void set_AttachedBit(bool value);
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_PoweredBit();
    [CompilerGeneratedAttribute]
public void set_PoweredBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.TurtleEgg : Block {
    [CompilerGeneratedAttribute]
private string <CrackedState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TurtleEggCount>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string CrackedState { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TurtleEggCount { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_CrackedState();
    [CompilerGeneratedAttribute]
public void set_CrackedState(string value);
    [CompilerGeneratedAttribute]
public string get_TurtleEggCount();
    [CompilerGeneratedAttribute]
public void set_TurtleEggCount(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.TwistingVines : Block {
    [CompilerGeneratedAttribute]
private int <TwistingVinesAge>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "25")]
public int TwistingVinesAge { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_TwistingVinesAge();
    [CompilerGeneratedAttribute]
public void set_TwistingVinesAge(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.UnderwaterTorch : Block {
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.UndyedShulkerBox : Block {
    public string Name { get; }
    public UndyedShulkerBox(byte id);
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
}
public class MiNET.Blocks.UnlitRedstoneTorch : RedstoneTorchBase {
    [CompilerGeneratedAttribute]
private string <TorchFacingDirection>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string TorchFacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual string get_TorchFacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_TorchFacingDirection(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.UnpoweredComparator : ComparatorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputLitBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputSubtractBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OutputLitBit { get; public set; }
    [StateBitAttribute]
public bool OutputSubtractBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_OutputLitBit();
    [CompilerGeneratedAttribute]
public void set_OutputLitBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputSubtractBit();
    [CompilerGeneratedAttribute]
public void set_OutputSubtractBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.UnpoweredRepeater : RepeaterBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RepeaterDelay>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateRangeAttribute("0", "3")]
public int RepeaterDelay { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public int get_RepeaterDelay();
    [CompilerGeneratedAttribute]
public void set_RepeaterDelay(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Vine : Block {
    [CompilerGeneratedAttribute]
private int <VineDirectionBits>k__BackingField;
    private static ILog Log;
    private static byte North;
    private static byte East;
    private static byte South;
    private static byte West;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int VineDirectionBits { get; public set; }
    private static Vine();
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_VineDirectionBits();
    [CompilerGeneratedAttribute]
public void set_VineDirectionBits(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
    private static int GetDirectionBits(Level level, Vine vine);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.WallBanner : Block {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private NbtCompound <ExtraData>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public int Base { get; public set; }
    public NbtCompound ExtraData { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    [CompilerGeneratedAttribute]
public int get_Base();
    [CompilerGeneratedAttribute]
public void set_Base(int value);
    [CompilerGeneratedAttribute]
public NbtCompound get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(NbtCompound value);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual BoundingBox GetBoundingBox();
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.WallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WallSignBase : Block {
    private int _itemDropId;
    public WallSignBase(int id, int itemDropId);
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool Interact(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoord);
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.WarpedButton : Block {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedDoor : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedDoubleSlab : Block {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedFence : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedFenceGate : Block {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InWallBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool InWallBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(int value);
    [CompilerGeneratedAttribute]
public bool get_InWallBit();
    [CompilerGeneratedAttribute]
public void set_InWallBit(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenBit();
    [CompilerGeneratedAttribute]
public void set_OpenBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedFungus : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedHyphae : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedNylium : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedPlanks : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedRoots : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedSlab : SlabBase {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedStairs : BlockStairs {
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WeirdoDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    [StateRangeAttribute("0", "3")]
public int WeirdoDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_WeirdoDirection();
    [CompilerGeneratedAttribute]
public virtual void set_WeirdoDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedStandingSign : StandingSignBase {
    [CompilerGeneratedAttribute]
private int <GroundSignDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int GroundSignDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_GroundSignDirection();
    [CompilerGeneratedAttribute]
public void set_GroundSignDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedStem : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedTrapdoor : TrapdoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpsideDownBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpsideDownBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpsideDownBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpsideDownBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedWallSign : WallSignBase {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WarpedWartBlock : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Water : Stationary {
    [CompilerGeneratedAttribute]
private int <LiquidDepth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int LiquidDepth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_LiquidDepth();
    [CompilerGeneratedAttribute]
public virtual void set_LiquidDepth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Waterlily : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual bool PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Blocks.Web : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.WeepingVines : Block {
    [CompilerGeneratedAttribute]
private int <WeepingVinesAge>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "25")]
public int WeepingVinesAge { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_WeepingVinesAge();
    [CompilerGeneratedAttribute]
public void set_WeepingVinesAge(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Wheat : Crops {
    [CompilerGeneratedAttribute]
private int <Growth>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "7")]
public int Growth { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Growth();
    [CompilerGeneratedAttribute]
public virtual void set_Growth(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    public virtual Item[] GetDrops(Item tool);
}
public class MiNET.Blocks.WhiteGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WitherRose : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.Wood : Block {
    [CompilerGeneratedAttribute]
private string <PillarAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrippedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WoodType>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string PillarAxis { get; public set; }
    [StateBitAttribute]
public bool StrippedBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WoodType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_PillarAxis();
    [CompilerGeneratedAttribute]
public void set_PillarAxis(string value);
    [CompilerGeneratedAttribute]
public bool get_StrippedBit();
    [CompilerGeneratedAttribute]
public void set_StrippedBit(bool value);
    [CompilerGeneratedAttribute]
public string get_WoodType();
    [CompilerGeneratedAttribute]
public void set_WoodType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WoodenButton : Button {
    [CompilerGeneratedAttribute]
private bool <ButtonPressedBit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool ButtonPressedBit { get; public set; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_ButtonPressedBit();
    [CompilerGeneratedAttribute]
public virtual void set_ButtonPressedBit(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WoodenDoor : DoorBase {
    [CompilerGeneratedAttribute]
private int <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoorHingeBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenBit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpperBlockBit>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "3")]
public int Direction { get; public set; }
    [StateBitAttribute]
public bool DoorHingeBit { get; public set; }
    [StateBitAttribute]
public bool OpenBit { get; public set; }
    [StateBitAttribute]
public bool UpperBlockBit { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_DoorHingeBit();
    [CompilerGeneratedAttribute]
public virtual void set_DoorHingeBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_OpenBit();
    [CompilerGeneratedAttribute]
public virtual void set_OpenBit(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_UpperBlockBit();
    [CompilerGeneratedAttribute]
public virtual void set_UpperBlockBit(bool value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WoodenPressurePlate : Block {
    [CompilerGeneratedAttribute]
private int <RedstoneSignal>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "15")]
public int RedstoneSignal { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public int get_RedstoneSignal();
    [CompilerGeneratedAttribute]
public void set_RedstoneSignal(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.WoodenSlab : SlabBase {
    [CompilerGeneratedAttribute]
private bool <TopSlotBit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WoodType>k__BackingField;
    public string Name { get; }
    [StateBitAttribute]
public bool TopSlotBit { get; public set; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string WoodType { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual bool get_TopSlotBit();
    [CompilerGeneratedAttribute]
public virtual void set_TopSlotBit(bool value);
    [CompilerGeneratedAttribute]
public string get_WoodType();
    [CompilerGeneratedAttribute]
public void set_WoodType(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool AreSameType(Block obj);
}
public class MiNET.Blocks.Wool : Block {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    public string Name { get; }
    [StateEnumAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Color { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.Blocks.YellowFlower : Block {
    public string Name { get; }
    public virtual string get_Name();
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
    protected virtual bool CanPlace(Level world, Player player, BlockCoordinates blockCoordinates, BlockCoordinates targetCoordinates, BlockFace face);
    public virtual void BlockUpdate(Level level, BlockCoordinates blockCoordinates);
}
public class MiNET.Blocks.YellowGlazedTerracotta : GlazedTerracotta {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    public string Name { get; }
    [StateRangeAttribute("0", "5")]
public int FacingDirection { get; public set; }
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual int get_FacingDirection();
    [CompilerGeneratedAttribute]
public virtual void set_FacingDirection(int value);
    public virtual void SetState(List`1<IBlockState> states);
    public virtual BlockStateContainer GetState();
}
public class MiNET.CertificateChain : object {
}
public class MiNET.CertificateData : object {
    public static string MojangRootKey;
    [CompilerGeneratedAttribute]
private long <Nbf>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtraData <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RandomNonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Iss>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Exp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Iat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CertificateAuthority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityPublicKey>k__BackingField;
    public long Nbf { get; public set; }
    public ExtraData ExtraData { get; public set; }
    public long RandomNonce { get; public set; }
    public string Iss { get; public set; }
    public long Exp { get; public set; }
    public long Iat { get; public set; }
    public bool CertificateAuthority { get; public set; }
    public string IdentityPublicKey { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Nbf();
    [CompilerGeneratedAttribute]
public void set_Nbf(long value);
    [CompilerGeneratedAttribute]
public ExtraData get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(ExtraData value);
    [CompilerGeneratedAttribute]
public long get_RandomNonce();
    [CompilerGeneratedAttribute]
public void set_RandomNonce(long value);
    [CompilerGeneratedAttribute]
public string get_Iss();
    [CompilerGeneratedAttribute]
public void set_Iss(string value);
    [CompilerGeneratedAttribute]
public long get_Exp();
    [CompilerGeneratedAttribute]
public void set_Exp(long value);
    [CompilerGeneratedAttribute]
public long get_Iat();
    [CompilerGeneratedAttribute]
public void set_Iat(long value);
    [CompilerGeneratedAttribute]
public bool get_CertificateAuthority();
    [CompilerGeneratedAttribute]
public void set_CertificateAuthority(bool value);
    [CompilerGeneratedAttribute]
public string get_IdentityPublicKey();
    [CompilerGeneratedAttribute]
public void set_IdentityPublicKey(string value);
}
public enum MiNET.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Unknown;
    public static ConnectionState Unconnected;
    public static ConnectionState Connecting;
    public static ConnectionState Connected;
}
public class MiNET.Crafting.MaterialReducerRecipe : object {
    [CompilerGeneratedAttribute]
private int <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InputMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private MaterialReducerRecipeOutput[] <Output>k__BackingField;
    public int Input { get; public set; }
    public int InputMeta { get; public set; }
    public MaterialReducerRecipeOutput[] Output { get; public set; }
    public MaterialReducerRecipe(int inputId, int inputMeta, MaterialReducerRecipeOutput[] outputs);
    [CompilerGeneratedAttribute]
public int get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(int value);
    [CompilerGeneratedAttribute]
public int get_InputMeta();
    [CompilerGeneratedAttribute]
public void set_InputMeta(int value);
    [CompilerGeneratedAttribute]
public MaterialReducerRecipeOutput[] get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(MaterialReducerRecipeOutput[] value);
}
public class MiNET.Crafting.MultiRecipe : Recipe {
    [CompilerGeneratedAttribute]
private int <UniqueId>k__BackingField;
    public int UniqueId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(int value);
}
public class MiNET.Crafting.PotionContainerChangeRecipe : object {
    [CompilerGeneratedAttribute]
private int <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ingredient>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Output>k__BackingField;
    public int Input { get; public set; }
    public int Ingredient { get; public set; }
    public int Output { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(int value);
    [CompilerGeneratedAttribute]
public int get_Ingredient();
    [CompilerGeneratedAttribute]
public void set_Ingredient(int value);
    [CompilerGeneratedAttribute]
public int get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(int value);
}
public class MiNET.Crafting.PotionTypeRecipe : object {
    [CompilerGeneratedAttribute]
private int <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InputMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ingredient>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IngredientMeta>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputMeta>k__BackingField;
    public int Input { get; public set; }
    public int InputMeta { get; public set; }
    public int Ingredient { get; public set; }
    public int IngredientMeta { get; public set; }
    public int Output { get; public set; }
    public int OutputMeta { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(int value);
    [CompilerGeneratedAttribute]
public int get_InputMeta();
    [CompilerGeneratedAttribute]
public void set_InputMeta(int value);
    [CompilerGeneratedAttribute]
public int get_Ingredient();
    [CompilerGeneratedAttribute]
public void set_Ingredient(int value);
    [CompilerGeneratedAttribute]
public int get_IngredientMeta();
    [CompilerGeneratedAttribute]
public void set_IngredientMeta(int value);
    [CompilerGeneratedAttribute]
public int get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(int value);
    [CompilerGeneratedAttribute]
public int get_OutputMeta();
    [CompilerGeneratedAttribute]
public void set_OutputMeta(int value);
}
public abstract class MiNET.Crafting.Recipe : object {
    [CompilerGeneratedAttribute]
private UUID <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Block>k__BackingField;
    public UUID Id { get; public set; }
    public string Block { get; public set; }
    [CompilerGeneratedAttribute]
public UUID get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UUID value);
    [CompilerGeneratedAttribute]
public string get_Block();
    [CompilerGeneratedAttribute]
public void set_Block(string value);
}
public class MiNET.Crafting.RecipeManager : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private static Recipes <Recipes>k__BackingField;
    private static McpeWrapper _craftingData;
    public static Recipes Recipes { get; private set; }
    private static RecipeManager();
    [CompilerGeneratedAttribute]
public static Recipes get_Recipes();
    [CompilerGeneratedAttribute]
private static void set_Recipes(Recipes value);
    public static McpeWrapper GetCraftingData();
    public static void Add(Recipe recipe);
}
public class MiNET.Crafting.Recipes : List`1<Recipe> {
}
public class MiNET.Crafting.ShapedRecipe : Recipe {
    [CompilerGeneratedAttribute]
private int <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Item[] <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Result>k__BackingField;
    public int UniqueId { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public Item[] Input { get; public set; }
    public List`1<Item> Result { get; public set; }
    public ShapedRecipe(int width, int height);
    public ShapedRecipe(int width, int height, Item result, Item[] input, string block);
    public ShapedRecipe(int width, int height, List`1<Item> result, Item[] input, string block);
    [CompilerGeneratedAttribute]
public int get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public Item[] get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(Item[] value);
    [CompilerGeneratedAttribute]
public List`1<Item> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(List`1<Item> value);
}
public class MiNET.Crafting.ShapelessRecipe : Recipe {
    [CompilerGeneratedAttribute]
private int <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Result>k__BackingField;
    public int UniqueId { get; public set; }
    public List`1<Item> Input { get; private set; }
    public List`1<Item> Result { get; private set; }
    public ShapelessRecipe(List`1<Item> result, List`1<Item> input, string block);
    public ShapelessRecipe(Item result, List`1<Item> input, string block);
    [CompilerGeneratedAttribute]
public int get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(int value);
    [CompilerGeneratedAttribute]
public List`1<Item> get_Input();
    [CompilerGeneratedAttribute]
private void set_Input(List`1<Item> value);
    [CompilerGeneratedAttribute]
public List`1<Item> get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(List`1<Item> value);
}
public class MiNET.Crafting.SmeltingRecipe : Recipe {
    [CompilerGeneratedAttribute]
private Item <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Result>k__BackingField;
    public Item Input { get; public set; }
    public Item Result { get; public set; }
    public SmeltingRecipe(Item result, Item input, string block);
    [CompilerGeneratedAttribute]
public Item get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(Item value);
    [CompilerGeneratedAttribute]
public Item get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Item value);
}
public class MiNET.CursorInventory : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private List`1<Item> <Slots>k__BackingField;
    public List`1<Item> Slots { get; }
    public Item Cursor { get; public set; }
    private static CursorInventory();
    [CompilerGeneratedAttribute]
public List`1<Item> get_Slots();
    public Item get_Cursor();
    public void set_Cursor(Item value);
    public void Clear();
}
public class MiNET.DamageCalculator : object {
    private static ILog Log;
    private static DamageCalculator();
    public virtual double CalculateItemDamage(Player player, Item item, Player target);
    public virtual double CalculateFallDamage(Player player, double damage, Player target);
    public virtual double CalculateEffectDamage(Player player, double damage, Player target);
    public virtual double CalculateDamageIncreaseFromEnchantments(Player player, Item tool, Player target);
    public virtual double CalculatePlayerDamage(Entity source, Player target, Item tool, double damage, DamageCause cause);
    protected virtual double CalculateDamageReductionFromEnchantments(Entity source, Item armor, Item tool, DamageCause cause);
    public int CalculateFireTickReduction(Player target);
    public int CalculateKnockback(Item tool);
}
public enum MiNET.DamageCause : Enum {
    public int value__;
    [DescriptionAttribute("{0} went MIA")]
public static DamageCause Unknown;
    [DescriptionAttribute("{0} was pricked  to death")]
public static DamageCause Contact;
    [DescriptionAttribute("{0} was slain by {1}")]
public static DamageCause EntityAttack;
    [DescriptionAttribute("{0} was shot by {1}")]
public static DamageCause Projectile;
    [DescriptionAttribute("{0} suffocated in a wall")]
public static DamageCause Suffocation;
    [DescriptionAttribute("{0} hit the ground too hard")]
public static DamageCause Fall;
    [DescriptionAttribute("{0} went up in flames")]
public static DamageCause Fire;
    [DescriptionAttribute("{0} burned to death")]
public static DamageCause FireTick;
    [DescriptionAttribute("{0} tried to swim in lava")]
public static DamageCause Lava;
    [DescriptionAttribute("{0} drowned")]
public static DamageCause Drowning;
    [DescriptionAttribute("{0} blew up")]
public static DamageCause BlockExplosion;
    [DescriptionAttribute("{0} blew up")]
public static DamageCause EntityExplosion;
    [DescriptionAttribute("{0} fell out of the world")]
public static DamageCause Void;
    [DescriptionAttribute("{0} died")]
public static DamageCause Suicide;
    [DescriptionAttribute("{0} was killed by magic")]
public static DamageCause Magic;
    [DescriptionAttribute("{0} starved to death")]
public static DamageCause Starving;
    [DescriptionAttribute("{0} died a customized death")]
public static DamageCause Custom;
}
public class MiNET.DefaultServer : object {
    private MiNetServer _server;
    public DefaultServer(MiNetServer server);
    public virtual IMcpeMessageHandler CreatePlayer(INetworkHandler session, PlayerInfo playerInfo);
}
public class MiNET.DefaultServerManager : object {
    private MiNetServer _miNetServer;
    private IServer _getServer;
    public DefaultServerManager(MiNetServer miNetServer);
    public virtual IServer GetServer();
}
public class MiNET.EduTokenManager : object {
    private static ILog Log;
    private string _username;
    private string _password;
    private Dictionary`2<string, string> _signedTokens;
    private string _resourceUri;
    private string _clientId;
    private static EduTokenManager();
    public string GetSignedToken(string tenantId);
    public string FetchNewSignedToken(string tenantId, string username, string password);
    public ValueTuple`2<string, string> GetTokens(string tenantId, string username, string password);
    public ValueTuple`2<string, string> GetRefreshToken(string tenantId, string username, string password);
    public string GetIdTokenToken(string tenantId, string refreshToken);
}
public class MiNET.Effects.Absorption : Effect {
    public virtual void SendAdd(Player player);
    public virtual void OnTick(Player player);
    public virtual void SendRemove(Player player);
}
public class MiNET.Effects.Blindness : Effect {
}
public class MiNET.Effects.Effect : object {
    public static int MaxDuration;
    [CompilerGeneratedAttribute]
private EffectType <EffectId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Particles>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ParticleColor>k__BackingField;
    public EffectType EffectId { get; public set; }
    public int Duration { get; public set; }
    public int Level { get; public set; }
    public bool Particles { get; public set; }
    public Color ParticleColor { get; public set; }
    protected Effect(EffectType id);
    [CompilerGeneratedAttribute]
public EffectType get_EffectId();
    [CompilerGeneratedAttribute]
public void set_EffectId(EffectType value);
    [CompilerGeneratedAttribute]
public int get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(int value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public bool get_Particles();
    [CompilerGeneratedAttribute]
public void set_Particles(bool value);
    [CompilerGeneratedAttribute]
public Color get_ParticleColor();
    [CompilerGeneratedAttribute]
public void set_ParticleColor(Color value);
    public virtual void SendAdd(Player player);
    public virtual void SendUpdate(Player player);
    public virtual void SendRemove(Player player);
    public virtual void OnTick(Player player);
    public virtual string ToString();
}
public enum MiNET.Effects.EffectType : Enum {
    public byte value__;
    public static EffectType None;
    public static EffectType Speed;
    public static EffectType Slowness;
    public static EffectType Haste;
    public static EffectType MiningFatigue;
    public static EffectType Strength;
    public static EffectType InstantHealth;
    public static EffectType InstantDamage;
    public static EffectType JumpBoost;
    public static EffectType Nausea;
    public static EffectType Regeneration;
    public static EffectType Resistance;
    public static EffectType FireResistance;
    public static EffectType WaterBreathing;
    public static EffectType Invisibility;
    public static EffectType Blindness;
    public static EffectType NightVision;
    public static EffectType Hunger;
    public static EffectType Weakness;
    public static EffectType Poison;
    public static EffectType Wither;
    public static EffectType HealthBoost;
    public static EffectType Absorption;
    public static EffectType Saturation;
}
public class MiNET.Effects.FireResistance : Effect {
}
public class MiNET.Effects.Haste : Effect {
}
public class MiNET.Effects.HealthBoost : Effect {
}
public class MiNET.Effects.Hunger : Effect {
}
public class MiNET.Effects.InstantDamage : Effect {
    public virtual void SendAdd(Player player);
    public virtual void SendUpdate(Player player);
    public virtual void SendRemove(Player player);
}
public class MiNET.Effects.InstantHealth : Effect {
    public virtual void SendAdd(Player player);
    public virtual void SendUpdate(Player player);
    public virtual void SendRemove(Player player);
}
public class MiNET.Effects.Invisibility : Effect {
    public virtual void SendAdd(Player player);
    public virtual void SendUpdate(Player player);
    public virtual void SendRemove(Player player);
}
public class MiNET.Effects.JumpBoost : Effect {
}
public class MiNET.Effects.MiningFatigue : Effect {
}
public class MiNET.Effects.Nausea : Effect {
}
public class MiNET.Effects.NightVision : Effect {
}
public class MiNET.Effects.Poison : Effect {
    public virtual void OnTick(Player player);
}
public class MiNET.Effects.Regeneration : Effect {
    private static ILog Log;
    private static Regeneration();
    public virtual void OnTick(Player player);
}
public class MiNET.Effects.Resistance : Effect {
}
public class MiNET.Effects.Saturation : Effect {
}
public class MiNET.Effects.Slowness : Effect {
    private double _multiplier;
    public virtual void SendAdd(Player player);
    public virtual void SendUpdate(Player player);
    public virtual void SendRemove(Player player);
}
public class MiNET.Effects.Speed : Effect {
    private double _multiplier;
    public virtual void SendAdd(Player player);
    public virtual void SendUpdate(Player player);
    public virtual void SendRemove(Player player);
}
public class MiNET.Effects.Strength : Effect {
}
public class MiNET.Effects.WaterBreathing : Effect {
}
public class MiNET.Effects.Weakness : Effect {
}
public class MiNET.Effects.Wither : Effect {
}
public static class MiNET.Enchantment : object {
    private static ILog Log;
    private static Enchantment();
    public static void SendEmptyEnchantments(Player player);
    public static void SendEnchantments(Player player, Item itemToEnchant);
    private static void AddBonusEnchants(List`1<Enchant> enchants, Random rnd, int inLevel, ItemType itemType);
    private static void PurgeConflictingEnchants(List`1<Enchant> enchants, List`1<Enchant> possibleEnchantsForItem);
    private static Enchant SelectEnchant(List`1<Enchant> enchants, Random rnd);
    public static List`1<Enchant> GetPossibleEnchantsForItem(ItemType itemType, int level);
    private static string GetRandomName(Random rnd);
}
[FlagsAttribute]
public enum MiNET.EnchantmentFlag : Enum {
    public int value__;
    public static EnchantmentFlag None;
    public static EnchantmentFlag All;
    public static EnchantmentFlag Armour;
    public static EnchantmentFlag Helmet;
    public static EnchantmentFlag Chestplate;
    public static EnchantmentFlag Leggings;
    public static EnchantmentFlag Boots;
    public static EnchantmentFlag Sword;
    public static EnchantmentFlag Bow;
    public static EnchantmentFlag ToolOther;
    public static EnchantmentFlag Hoe;
    public static EnchantmentFlag Shears;
    public static EnchantmentFlag FlintAndSteel;
    public static EnchantmentFlag Dig;
    public static EnchantmentFlag Axe;
    public static EnchantmentFlag Pickaxe;
    public static EnchantmentFlag Shovel;
    public static EnchantmentFlag FishingRod;
    public static EnchantmentFlag CarrotOnAStick;
    public static EnchantmentFlag Elytra;
    public static EnchantmentFlag Trident;
}
public class MiNET.Entities.Agent : Mob {
    [CompilerGeneratedAttribute]
private Entity <Owner>k__BackingField;
    public Entity Owner { get; public set; }
    public Agent(Level level);
    [CompilerGeneratedAttribute]
public Entity get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(Entity value);
    public virtual MetadataDictionary GetMetadata();
}
public abstract class MiNET.Entities.Behaviors.BehaviorBase : object {
    public abstract virtual bool ShouldStart();
    public virtual void OnStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.BlockDiagonalNeighborProvider : object {
    private static ILog Log;
    private CachedBlockAccess _level;
    private int _startY;
    private Entity _entity;
    private Dictionary`2<Tile, Block> _blockCache;
    private static Int32[0...,0...] Neighbors;
    public BlockDiagonalNeighborProvider(CachedBlockAccess level, int startY, Dictionary`2<Tile, Block> blockCache, Entity entity);
    private static BlockDiagonalNeighborProvider();
    public sealed virtual IEnumerable`1<Tile> GetNeighbors(Tile start);
    private bool IsObstructed(BlockCoordinates coord);
    private bool IsBlocked(BlockCoordinates coord);
    private bool IsBlocked(Block block);
    private void CheckDiagonals(Block block, HashSet`1<Tile> list);
    private Tile TileFromBlock(BlockCoordinates coord);
}
public class MiNET.Entities.Behaviors.BlockDistanceAlgorithm : object {
    private static ILog Log;
    private Dictionary`2<Tile, Block> _blockCache;
    private bool _canClimb;
    public BlockDistanceAlgorithm(Dictionary`2<Tile, Block> blockCache, bool canClimb);
    private static BlockDistanceAlgorithm();
    public sealed virtual double Calculate(Tile from, Tile to);
    public Block GetBlock(Tile tile);
}
public class MiNET.Entities.Behaviors.CachedBlockAccess : object {
    private Level _level;
    public int NumberOfBlockGet;
    private IDictionary`2<BlockCoordinates, Block> _blockCache;
    public CachedBlockAccess(Level level);
    public sealed virtual ChunkColumn GetChunk(BlockCoordinates coordinates, bool cacheOnly);
    public sealed virtual ChunkColumn GetChunk(ChunkCoordinates coordinates, bool cacheOnly);
    public sealed virtual void SetSkyLight(BlockCoordinates coordinates, byte skyLight);
    public sealed virtual int GetHeight(BlockCoordinates coordinates);
    public sealed virtual Block GetBlock(BlockCoordinates coord, ChunkColumn tryChunk);
    public sealed virtual void SetBlock(Block block, bool broadcast, bool applyPhysics, bool calculateLight, ChunkColumn possibleChunk);
}
public class MiNET.Entities.Behaviors.CreeperSwellBehavior : BehaviorBase {
    private Creeper _entity;
    public CreeperSwellBehavior(Creeper entity);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.EatBlockBehavior : BehaviorBase {
    private Mob _entity;
    private int _duration;
    public EatBlockBehavior(Mob entity);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.FindAttackableEntityTargetBehavior`1 : BehaviorBase {
    private Mob _entity;
    private double _targetDistance;
    private int _attackChance;
    private int _targetUnseenTicks;
    public FindAttackableEntityTargetBehavior`1(Mob entity, double targetDistance, int attackChance);
    public virtual bool ShouldStart();
    public virtual void OnStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    [CompilerGeneratedAttribute]
private float <ShouldStart>b__5_0(KeyValuePair`2<long, Entity> p);
    [CompilerGeneratedAttribute]
private bool <ShouldStart>b__5_1(KeyValuePair`2<long, Entity> p);
}
public class MiNET.Entities.Behaviors.FindAttackableTargetBehavior : BehaviorBase {
    protected Mob _entity;
    private double _targetDistance;
    private int _targetUnseenTicks;
    public FindAttackableTargetBehavior(Mob entity, double targetDistance);
    public virtual bool ShouldStart();
    private double GetTargetDistance(Player player);
    public virtual void OnStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    [CompilerGeneratedAttribute]
private float <ShouldStart>b__4_0(KeyValuePair`2<long, Player> p);
    [CompilerGeneratedAttribute]
private bool <ShouldStart>b__4_1(KeyValuePair`2<long, Player> p);
}
public class MiNET.Entities.Behaviors.FollowOwnerBehavior : BehaviorBase {
    private static ILog Log;
    private Wolf _entity;
    private double _lookDistance;
    private double _speedMultiplier;
    private Path _currentPath;
    public FollowOwnerBehavior(Wolf entity, double lookDistance, double speedMultiplier);
    private static FollowOwnerBehavior();
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    private bool GetNextTile(Tile& next);
    public double Distance(Player player, Tile tile);
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.HorseEatBlockBehavior : BehaviorBase {
    private Mob _entity;
    private int _duration;
    private int _timeLeft;
    public HorseEatBlockBehavior(Mob entity, int duration);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    private void SetEating(Horse horse, bool isEating);
}
public class MiNET.Entities.Behaviors.HurtByTargetBehavior : FindAttackableTargetBehavior {
    public HurtByTargetBehavior(Mob entity);
    public virtual bool ShouldStart();
    public virtual void OnStart();
}
public interface MiNET.Entities.Behaviors.IBehavior {
    public abstract virtual bool ShouldStart();
    public abstract virtual void OnStart();
    public abstract virtual bool CanContinue();
    public abstract virtual void OnTick(Entity[] entities);
    public abstract virtual void OnEnd();
}
public interface MiNET.Entities.Behaviors.ITargetingBehavior {
}
public class MiNET.Entities.Behaviors.JumpAttackBehavior : BehaviorBase {
    private static ILog Log;
    private Wolf _wolf;
    private double _leapHeight;
    public JumpAttackBehavior(Wolf wolf, double leapHeight);
    private static JumpAttackBehavior();
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Behaviors.LevelNavigator : object {
    private static ILog Log;
    private Entity _entity;
    private Vector3 _entityPos;
    private IBlockAccess _level;
    private double _distance;
    private Dictionary`2<Tile, Block> _blockCache;
    private HashSet`1<BlockCoordinates> _entityCoords;
    public LevelNavigator(Entity entity, IBlockAccess level, double distance, Dictionary`2<Tile, Block> blockCache, HashSet`1<BlockCoordinates> entityCoords);
    private static LevelNavigator();
    public sealed virtual bool IsBlocked(Tile coord);
    private bool IsObstructed(BlockCoordinates coord);
    private bool IsBlocked(BlockCoordinates coord);
}
public class MiNET.Entities.Behaviors.LookAtPlayerBehavior : BehaviorBase {
    private Mob _entity;
    private double _lookDistance;
    private int _duration;
    private Player _player;
    public LookAtPlayerBehavior(Mob entity, double lookDistance);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    private double RadianToDegree(double angle);
    [CompilerGeneratedAttribute]
private float <ShouldStart>b__5_0(Player p);
    [CompilerGeneratedAttribute]
private bool <ShouldStart>b__5_1(Player p);
}
public class MiNET.Entities.Behaviors.MeleeAttackBehavior : BehaviorBase {
    private static ILog Log;
    protected Mob _entity;
    private double _speedMultiplier;
    private double _followRange;
    private int _attackCooldown;
    private int _delay;
    private Path _currentPath;
    private Vector3 _lastPlayerPos;
    public MeleeAttackBehavior(Mob entity, double speedMultiplier, double followRange);
    private static MeleeAttackBehavior();
    public virtual bool ShouldStart();
    public virtual void OnStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    private double GetAttackReach();
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.MobController : object {
    private static ILog Log;
    private Mob _entity;
    private int _jumpCooldown;
    public MobController(Mob entity);
    private static MobController();
    public void LookAt(Entity target);
    public void RotateTowards(Vector3 targetPosition);
    private double ClampDegrees(double degrees);
    public void MoveForward(double speedMultiplier, Entity[] entities);
    private static bool IsCollidingWithBlock(Vector3 pos, Block block);
    private static bool BlockIsSolid(Block block);
    public void Jump();
    private double RadianToDegree(double angle);
}
public class MiNET.Entities.Behaviors.OwnerHurtByTargetBehavior : BehaviorBase {
    private Wolf _wolf;
    public OwnerHurtByTargetBehavior(Wolf wolf);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
}
public class MiNET.Entities.Behaviors.OwnerHurtTargetBehavior : BehaviorBase {
    private Wolf _wolf;
    public OwnerHurtTargetBehavior(Wolf wolf);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
}
public class MiNET.Entities.Behaviors.PanicBehavior : StrollBehavior {
    private Mob _entity;
    private static ILog Log;
    public PanicBehavior(Mob entity, int duration, double speed, double speedMultiplier);
    private static PanicBehavior();
    public virtual bool ShouldStart();
}
public class MiNET.Entities.Behaviors.PanicBehaviorNew : WanderBehavior {
    private static ILog Log;
    private Mob _entity;
    private int _duration;
    private int _timeLeft;
    private double _distanceToSource;
    private Entity _source;
    public PanicBehaviorNew(Mob entity, int duration, double speedMultiplier);
    private static PanicBehaviorNew();
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnEnd();
    public static PlayerLocation LookAt(Vector3 sourceLocation, Vector3 targetLocation);
    [CompilerGeneratedAttribute]
private bool <ShouldStart>b__7_0(KeyValuePair`2<long, Entity> entity);
    [CompilerGeneratedAttribute]
private bool <CanContinue>b__8_0(KeyValuePair`2<long, Entity> entity);
}
public class MiNET.Entities.Behaviors.Path : object {
    [CompilerGeneratedAttribute]
private List`1<Tile> <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Tile> <History>k__BackingField;
    private Dictionary`2<Tile, Block> _blockCache;
    public List`1<Tile> Current { get; public set; }
    public List`1<Tile> History { get; public set; }
    public Path(Dictionary`2<Tile, Block> blockCache);
    [CompilerGeneratedAttribute]
public List`1<Tile> get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(List`1<Tile> value);
    [CompilerGeneratedAttribute]
public List`1<Tile> get_History();
    [CompilerGeneratedAttribute]
public void set_History(List`1<Tile> value);
    public bool HavePath();
    public bool NoPath();
    public void Reset();
    public void PrintPath(Level level);
    public void PrintTile(Level level, Tile tile);
    public Block GetBlock(Tile tile);
    public Tile First();
    public void Remove(Tile tile);
    public bool GetNextTile(Entity entity, Tile& next, bool compressPath);
    private bool IsClearBetweenPoints(Level level, Vector3 from, Vector3 to);
}
public class MiNET.Entities.Behaviors.Pathfinder : object {
    private static ILog Log;
    private Dictionary`2<Tile, Block> _blockCache;
    private static Pathfinder();
    public Path FindPath(Entity source, Entity target, double distance);
    public Path FindPath(Entity source, BlockCoordinates target, double distance);
}
public class MiNET.Entities.Behaviors.RandomLookaroundBehavior : BehaviorBase {
    private Mob _entity;
    private double _rotation;
    private int _duration;
    public RandomLookaroundBehavior(Mob entity);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.SittingBehavior : BehaviorBase {
    private Mob _entity;
    public SittingBehavior(Mob entity);
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
}
public class MiNET.Entities.Behaviors.StrollBehavior : BehaviorBase {
    private static ILog Log;
    private Mob _entity;
    private int _duration;
    private double _speed;
    private double _speedMultiplier;
    private int _timeLeft;
    public StrollBehavior(Mob entity, int duration, double speed, double speedMultiplier);
    private static StrollBehavior();
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    private bool AreaIsClear(Level level, BoundingBox bbox);
}
public class MiNET.Entities.Behaviors.TemptedBehavior : BehaviorBase {
    private static ILog Log;
    private Mob _entity;
    private Type _temptingItem;
    private double _lookDistance;
    private double _speedMultiplier;
    private Player _temptingPlayer;
    private int _cooldown;
    private Vector3 _lastPlayerPos;
    private Vector3 _originalPos;
    private Path _currentPath;
    private Pathfinder _pathfinder;
    public TemptedBehavior(Mob entity, Type temptingItem, double lookDistance, double speedMultiplier);
    private static TemptedBehavior();
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    [CompilerGeneratedAttribute]
private float <ShouldStart>b__12_0(Player p);
    [CompilerGeneratedAttribute]
private bool <ShouldStart>b__12_1(Player p);
}
public class MiNET.Entities.Behaviors.Tile3d : Tile {
    public int RealY;
    public Tile3d(int x, int y, int realY);
}
public class MiNET.Entities.Behaviors.WanderBehavior : BehaviorBase {
    private static ILog Log;
    private Mob _entity;
    private double _speedMultiplier;
    private int _chance;
    private Path _currentPath;
    protected Nullable`1<Vector3> _direction;
    private BlockCoordinates _lastPosition;
    private int _stallTime;
    public WanderBehavior(Mob entity, double speedMultiplier, int chance);
    private static WanderBehavior();
    public virtual bool ShouldStart();
    public virtual bool CanContinue();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
    protected static Nullable`1<BlockCoordinates> FindRandomTargetBlock(Entity entity, int dxz, int dy, Nullable`1<Vector3> targetDirection);
    private static double CalculateBlockWeight(Entity entity, Block block, Block blockDown);
}
public class MiNET.Entities.BossBar : Entity {
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Animate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxProgress>k__BackingField;
    public bool IsVisible { get; public set; }
    public bool Animate { get; public set; }
    public int Progress { get; public set; }
    public int MaxProgress { get; public set; }
    public BossBar(Level level);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_Animate();
    [CompilerGeneratedAttribute]
public void set_Animate(bool value);
    [CompilerGeneratedAttribute]
public int get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(int value);
    [CompilerGeneratedAttribute]
public int get_MaxProgress();
    [CompilerGeneratedAttribute]
public void set_MaxProgress(int value);
    [WiredAttribute]
public virtual void SetNameTag(string nameTag);
    [WiredAttribute]
public virtual void SetProgress(int progress, int maxProgress);
    public virtual void SpawnToPlayers(Player[] players);
    public virtual void DespawnFromPlayers(Player[] players);
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Camera : Entity {
    private long _countdown;
    [CompilerGeneratedAttribute]
private string <InteractionLabel>k__BackingField;
    public string InteractionLabel { get; public set; }
    public Camera(Level level);
    [CompilerGeneratedAttribute]
public string get_InteractionLabel();
    [CompilerGeneratedAttribute]
public void set_InteractionLabel(string value);
    public virtual MetadataDictionary GetMetadata();
    public virtual void DoInteraction(int actionId, Player player);
    public virtual void OnTick(Entity[] entities);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Entity : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSpawned>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanDespawn>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private PlayerLocation <KnownPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <Velocity>k__BackingField;
    [CompilerGeneratedAttribute]
private float <PositionOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnGround>k__BackingField;
    [CompilerGeneratedAttribute]
private PlayerLocation <LastSentPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthManager <HealthManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPanicking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoAi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideNameTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInWater>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PotionColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EatingHaystack>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Drag>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Gravity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttackDamage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PortalDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <RiderSeatPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RiderRotationLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RiderMaxRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RiderMinRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, object> <PluginStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSneaking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRiding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSprinting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsingItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInvisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTempted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInLove>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSaddled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPowered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIgnited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBaby>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConverting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCritical>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAlwaysShowName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSilent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWallClimbing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanClimb>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWalker>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSitting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAngry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInterested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCharged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTamed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLeashed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSheared>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGliding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsElder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdling>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRearing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVibrating>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMoving>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChested>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStackable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCollision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAffectedByGravity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWasdControlled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanPowerJump>k__BackingField;
    private Tuple`2<Vector3, BoundingBox> _bboxCache;
    [CompilerGeneratedAttribute]
private HashSet`1<Entity> <SeenEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Entity> <UnseenEntities>k__BackingField;
    public Level Level { get; public set; }
    public string EntityTypeId { get; protected set; }
    public long EntityId { get; public set; }
    public bool IsSpawned { get; public set; }
    public bool CanDespawn { get; public set; }
    public DateTime LastUpdatedTime { get; public set; }
    public PlayerLocation KnownPosition { get; public set; }
    public Vector3 Velocity { get; public set; }
    public float PositionOffset { get; public set; }
    public bool IsOnGround { get; public set; }
    public PlayerLocation LastSentPosition { get; public set; }
    public HealthManager HealthManager { get; public set; }
    public string NameTag { get; public set; }
    public bool IsPanicking { get; public set; }
    public bool NoAi { get; public set; }
    public bool HideNameTag { get; public set; }
    public bool Silent { get; public set; }
    public bool IsInWater { get; public set; }
    public bool IsOutOfWater { get; }
    public int PotionColor { get; public set; }
    public int Variant { get; public set; }
    public int EatingHaystack { get; public set; }
    public long Age { get; public set; }
    public double Scale { get; public set; }
    public double Height { get; public set; }
    public double Width { get; public set; }
    public double Length { get; public set; }
    public double Drag { get; public set; }
    public double Gravity { get; public set; }
    public int AttackDamage { get; public set; }
    public int Data { get; public set; }
    public long PortalDetected { get; public set; }
    public Vector3 RiderSeatPosition { get; public set; }
    public bool RiderRotationLocked { get; public set; }
    public double RiderMaxRotation { get; public set; }
    public double RiderMinRotation { get; public set; }
    public ConcurrentDictionary`2<Type, object> PluginStore { get; public set; }
    public bool IsSneaking { get; public set; }
    public bool IsRiding { get; public set; }
    public bool IsSprinting { get; public set; }
    public bool IsUsingItem { get; public set; }
    public bool IsInvisible { get; public set; }
    public bool IsTempted { get; public set; }
    public bool IsInLove { get; public set; }
    public bool IsSaddled { get; public set; }
    public bool IsPowered { get; public set; }
    public bool IsIgnited { get; public set; }
    public bool IsBaby { get; public set; }
    public bool IsConverting { get; public set; }
    public bool IsCritical { get; public set; }
    public bool IsShowName { get; }
    public bool IsAlwaysShowName { get; public set; }
    public bool IsNoAi { get; }
    public bool HaveAi { get; }
    public bool IsSilent { get; public set; }
    public bool IsWallClimbing { get; public set; }
    public bool CanClimb { get; public set; }
    public bool IsWalker { get; public set; }
    public bool IsResting { get; public set; }
    public bool IsSitting { get; public set; }
    public bool IsAngry { get; public set; }
    public bool IsInterested { get; public set; }
    public bool IsCharged { get; public set; }
    public bool IsTamed { get; public set; }
    public bool IsLeashed { get; public set; }
    public bool IsSheared { get; public set; }
    public bool IsGliding { get; public set; }
    public bool IsElder { get; public set; }
    public bool IsIdling { get; public set; }
    public bool IsRearing { get; public set; }
    public bool IsVibrating { get; public set; }
    public bool IsMoving { get; public set; }
    public bool IsBreathing { get; }
    public bool IsChested { get; public set; }
    public bool IsStackable { get; public set; }
    public bool HasCollision { get; public set; }
    public bool IsAffectedByGravity { get; public set; }
    public bool IsWasdControlled { get; public set; }
    public bool CanPowerJump { get; public set; }
    public HashSet`1<Entity> SeenEntities { get; public set; }
    public HashSet`1<Entity> UnseenEntities { get; public set; }
    public Entity(string entityTypeId, Level level);
    public Entity(EntityType entityTypeId, Level level);
    public Entity(int entityTypeId, Level level);
    private static Entity();
    [CompilerGeneratedAttribute]
public Level get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Level value);
    [CompilerGeneratedAttribute]
public string get_EntityTypeId();
    [CompilerGeneratedAttribute]
protected void set_EntityTypeId(string value);
    [CompilerGeneratedAttribute]
public long get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(long value);
    [CompilerGeneratedAttribute]
public bool get_IsSpawned();
    [CompilerGeneratedAttribute]
public void set_IsSpawned(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanDespawn();
    [CompilerGeneratedAttribute]
public void set_CanDespawn(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdatedTime();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedTime(DateTime value);
    [CompilerGeneratedAttribute]
public PlayerLocation get_KnownPosition();
    [CompilerGeneratedAttribute]
public void set_KnownPosition(PlayerLocation value);
    [CompilerGeneratedAttribute]
public Vector3 get_Velocity();
    [CompilerGeneratedAttribute]
public void set_Velocity(Vector3 value);
    [CompilerGeneratedAttribute]
public float get_PositionOffset();
    [CompilerGeneratedAttribute]
public void set_PositionOffset(float value);
    [CompilerGeneratedAttribute]
public bool get_IsOnGround();
    [CompilerGeneratedAttribute]
public void set_IsOnGround(bool value);
    [CompilerGeneratedAttribute]
public PlayerLocation get_LastSentPosition();
    [CompilerGeneratedAttribute]
public void set_LastSentPosition(PlayerLocation value);
    [CompilerGeneratedAttribute]
public HealthManager get_HealthManager();
    [CompilerGeneratedAttribute]
public void set_HealthManager(HealthManager value);
    [CompilerGeneratedAttribute]
public string get_NameTag();
    [CompilerGeneratedAttribute]
public void set_NameTag(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPanicking();
    [CompilerGeneratedAttribute]
public void set_IsPanicking(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoAi();
    [CompilerGeneratedAttribute]
public void set_NoAi(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideNameTag();
    [CompilerGeneratedAttribute]
public void set_HideNameTag(bool value);
    [CompilerGeneratedAttribute]
public bool get_Silent();
    [CompilerGeneratedAttribute]
public void set_Silent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInWater();
    [CompilerGeneratedAttribute]
public void set_IsInWater(bool value);
    public bool get_IsOutOfWater();
    [CompilerGeneratedAttribute]
public int get_PotionColor();
    [CompilerGeneratedAttribute]
public void set_PotionColor(int value);
    [CompilerGeneratedAttribute]
public int get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(int value);
    [CompilerGeneratedAttribute]
public int get_EatingHaystack();
    [CompilerGeneratedAttribute]
public void set_EatingHaystack(int value);
    [CompilerGeneratedAttribute]
public long get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(long value);
    [CompilerGeneratedAttribute]
public double get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Height();
    [CompilerGeneratedAttribute]
public virtual void set_Height(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Width();
    [CompilerGeneratedAttribute]
public virtual void set_Width(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Length();
    [CompilerGeneratedAttribute]
public virtual void set_Length(double value);
    [CompilerGeneratedAttribute]
public double get_Drag();
    [CompilerGeneratedAttribute]
public void set_Drag(double value);
    [CompilerGeneratedAttribute]
public double get_Gravity();
    [CompilerGeneratedAttribute]
public void set_Gravity(double value);
    [CompilerGeneratedAttribute]
public int get_AttackDamage();
    [CompilerGeneratedAttribute]
public void set_AttackDamage(int value);
    [CompilerGeneratedAttribute]
public int get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(int value);
    [CompilerGeneratedAttribute]
public long get_PortalDetected();
    [CompilerGeneratedAttribute]
public void set_PortalDetected(long value);
    [CompilerGeneratedAttribute]
public Vector3 get_RiderSeatPosition();
    [CompilerGeneratedAttribute]
public void set_RiderSeatPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public bool get_RiderRotationLocked();
    [CompilerGeneratedAttribute]
public void set_RiderRotationLocked(bool value);
    [CompilerGeneratedAttribute]
public double get_RiderMaxRotation();
    [CompilerGeneratedAttribute]
public void set_RiderMaxRotation(double value);
    [CompilerGeneratedAttribute]
public double get_RiderMinRotation();
    [CompilerGeneratedAttribute]
public void set_RiderMinRotation(double value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<Type, object> get_PluginStore();
    [CompilerGeneratedAttribute]
public void set_PluginStore(ConcurrentDictionary`2<Type, object> value);
    public virtual MetadataDictionary GetMetadata();
    public virtual long GetDataValue();
    public static string MetadataToCode(MetadataDictionary metadata);
    private static string FlagsToString(long input);
    [CompilerGeneratedAttribute]
public bool get_IsSneaking();
    [CompilerGeneratedAttribute]
public void set_IsSneaking(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRiding();
    [CompilerGeneratedAttribute]
public void set_IsRiding(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSprinting();
    [CompilerGeneratedAttribute]
public void set_IsSprinting(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsUsingItem();
    [CompilerGeneratedAttribute]
public void set_IsUsingItem(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInvisible();
    [CompilerGeneratedAttribute]
public void set_IsInvisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTempted();
    [CompilerGeneratedAttribute]
public void set_IsTempted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInLove();
    [CompilerGeneratedAttribute]
public void set_IsInLove(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSaddled();
    [CompilerGeneratedAttribute]
public void set_IsSaddled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPowered();
    [CompilerGeneratedAttribute]
public void set_IsPowered(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIgnited();
    [CompilerGeneratedAttribute]
public void set_IsIgnited(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBaby();
    [CompilerGeneratedAttribute]
public void set_IsBaby(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsConverting();
    [CompilerGeneratedAttribute]
public void set_IsConverting(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCritical();
    [CompilerGeneratedAttribute]
public void set_IsCritical(bool value);
    public bool get_IsShowName();
    [CompilerGeneratedAttribute]
public bool get_IsAlwaysShowName();
    [CompilerGeneratedAttribute]
public void set_IsAlwaysShowName(bool value);
    public bool get_IsNoAi();
    public bool get_HaveAi();
    [CompilerGeneratedAttribute]
public bool get_IsSilent();
    [CompilerGeneratedAttribute]
public void set_IsSilent(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWallClimbing();
    [CompilerGeneratedAttribute]
public void set_IsWallClimbing(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanClimb();
    [CompilerGeneratedAttribute]
public void set_CanClimb(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWalker();
    [CompilerGeneratedAttribute]
public void set_IsWalker(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResting();
    [CompilerGeneratedAttribute]
public void set_IsResting(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSitting();
    [CompilerGeneratedAttribute]
public void set_IsSitting(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAngry();
    [CompilerGeneratedAttribute]
public void set_IsAngry(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInterested();
    [CompilerGeneratedAttribute]
public void set_IsInterested(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCharged();
    [CompilerGeneratedAttribute]
public void set_IsCharged(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTamed();
    [CompilerGeneratedAttribute]
public void set_IsTamed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLeashed();
    [CompilerGeneratedAttribute]
public void set_IsLeashed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSheared();
    [CompilerGeneratedAttribute]
public void set_IsSheared(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGliding();
    [CompilerGeneratedAttribute]
public void set_IsGliding(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsElder();
    [CompilerGeneratedAttribute]
public void set_IsElder(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsIdling();
    [CompilerGeneratedAttribute]
public void set_IsIdling(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRearing();
    [CompilerGeneratedAttribute]
public void set_IsRearing(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVibrating();
    [CompilerGeneratedAttribute]
public void set_IsVibrating(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMoving();
    [CompilerGeneratedAttribute]
public void set_IsMoving(bool value);
    public bool get_IsBreathing();
    [CompilerGeneratedAttribute]
public bool get_IsChested();
    [CompilerGeneratedAttribute]
public void set_IsChested(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStackable();
    [CompilerGeneratedAttribute]
public void set_IsStackable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasCollision();
    [CompilerGeneratedAttribute]
public void set_HasCollision(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAffectedByGravity();
    [CompilerGeneratedAttribute]
public void set_IsAffectedByGravity(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWasdControlled();
    [CompilerGeneratedAttribute]
public void set_IsWasdControlled(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanPowerJump();
    [CompilerGeneratedAttribute]
public void set_CanPowerJump(bool value);
    protected virtual BitArray GetFlags();
    protected virtual bool DetectInPortal();
    public virtual void OnTick(Entity[] entities);
    private void CheckBlockCollisions();
    public virtual void SpawnEntity();
    public virtual void SpawnToPlayers(Player[] players);
    public virtual EntityAttributes GetEntityAttributes();
    public virtual void DespawnEntity();
    public virtual void DespawnFromPlayers(Player[] players);
    public virtual void SetEntityData(MetadataDictionary message);
    public virtual void BroadcastSetEntityData();
    public virtual void BroadcastSetEntityData(MetadataDictionary metadata);
    public virtual void BroadcastEntityEvent();
    public bool IsColliding(Entity other);
    public bool IsColliding(BoundingBox bbox, Entity other);
    private bool Compare(int a, int b, int m);
    public virtual BoundingBox GetBoundingBox();
    public virtual BoundingBox GetBoundingBox(Vector3 pos);
    public double DistanceToHorizontal(Entity entity);
    public double DistanceTo(Entity entity);
    public byte GetOppositeDirection();
    public byte GetDirection();
    public byte GetProperDirection();
    public Direction GetDirectionEmum();
    public static byte DirectionByRotationFlat(float yaw);
    public virtual void Knockback(Vector3 velocity);
    public void BroadcastMotion(bool forceMove);
    public void BroadcastMove(bool forceMove);
    public virtual Item[] GetDrops();
    public virtual void DoInteraction(int actionId, Player player);
    public virtual void DoItemInteraction(Player player, Item itemInHand);
    public virtual void DoMouseOverInteraction(byte actionId, Player player);
    public virtual void Mount(Entity rider);
    public virtual void Unmount(Entity rider);
    [CompilerGeneratedAttribute]
public HashSet`1<Entity> get_SeenEntities();
    [CompilerGeneratedAttribute]
public void set_SeenEntities(HashSet`1<Entity> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Entity> get_UnseenEntities();
    [CompilerGeneratedAttribute]
public void set_UnseenEntities(HashSet`1<Entity> value);
    public virtual bool CanSee(Entity target);
}
[ExtensionAttribute]
public static class MiNET.Entities.EntityHelpers : object {
    public static Dictionary`2<EntityType, string> LegacyEntityTypeIdConverter;
    private static EntityHelpers();
    [ExtensionAttribute]
public static TStore Store(Entity entity);
    [ExtensionAttribute]
public static Entity CreateEntity(short entityTypeId, Level world);
    public static NbtList GenerateEntityIdentifiers();
    [ExtensionAttribute]
public static string ToStringId(EntityType type);
    public static EntityType ToEntityType(string type);
    [ExtensionAttribute]
public static Entity Create(EntityType entityType, Level world);
}
public class MiNET.Entities.EntitySpawnManager : object {
    private static ILog Log;
    public static int CapHostile;
    public static int CapPassive;
    public static int CapAmbient;
    public static int CapWater;
    public static EntityType[] PassiveMobs;
    public static EntityType[] HostileMobs;
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    public Level Level { get; public set; }
    public EntitySpawnManager(Level level);
    private static EntitySpawnManager();
    [CompilerGeneratedAttribute]
public Level get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Level value);
    public virtual void DespawnMobs(long tickTime);
    public virtual void AttemptMobSpawn(BlockCoordinates packCoord, Random random, bool canSpawnPassive, bool canSpawnHostile);
    private EntityType SelectEntityType(Block spawnBlock, Random random, bool canSpawnHostile, bool canSpawnPassive);
    private EntityType GetWeightedRandom(EntityType[] possiblEntityTypes, Random random);
    private bool Spawn(PlayerLocation position, EntityType entityType, Random random);
    private bool SpawnAreaClear(BoundingBox bbox);
}
public enum MiNET.Entities.EntityType : Enum {
    public int value__;
    public static EntityType None;
    public static EntityType DroppedItem;
    public static EntityType ExperienceOrb;
    public static EntityType ArmorStand;
    public static EntityType PrimedTnt;
    public static EntityType FallingBlock;
    public static EntityType ThrownBottleoEnchanting;
    public static EntityType EnderEye;
    public static EntityType EnderCrystal;
    public static EntityType FireworksRocket;
    public static EntityType Trident;
    public static EntityType ShulkerBullet;
    public static EntityType FishingRodHook;
    public static EntityType DragonFireball;
    public static EntityType ShotArrow;
    public static EntityType ThrownSnowball;
    public static EntityType ThrownEgg;
    public static EntityType Painting;
    public static EntityType Minecart;
    public static EntityType GhastFireball;
    public static EntityType ThrownSpashPotion;
    public static EntityType ThrownEnderPerl;
    public static EntityType LeashKnot;
    public static EntityType WitherSkull;
    public static EntityType Boat;
    public static EntityType WitherSkullDangerous;
    public static EntityType LightningBolt;
    public static EntityType BlazeFireball;
    public static EntityType AreaEffectCloud;
    public static EntityType HopperMinecart;
    public static EntityType TntMinecart;
    public static EntityType ChestMinecart;
    public static EntityType CommandBlockMinecart;
    public static EntityType LingeringPotion;
    public static EntityType LlamaSpit;
    public static EntityType EvocationFangs;
    public static EntityType IceBomb;
    public static EntityType Balloon;
    public static EntityType Zombie;
    public static EntityType Creeper;
    public static EntityType Skeleton;
    public static EntityType Spider;
    public static EntityType ZombiePigman;
    public static EntityType Slime;
    public static EntityType Enderman;
    public static EntityType Silverfish;
    public static EntityType CaveSpider;
    public static EntityType Ghast;
    public static EntityType MagmaCube;
    public static EntityType Blaze;
    public static EntityType ZombieVillager;
    public static EntityType Witch;
    public static EntityType Stray;
    public static EntityType Husk;
    public static EntityType WitherSkeleton;
    public static EntityType Guardian;
    public static EntityType ElderGuardian;
    public static EntityType Wither;
    public static EntityType Dragon;
    public static EntityType Shulker;
    public static EntityType Endermite;
    public static EntityType Vindicator;
    public static EntityType Phantom;
    public static EntityType Evoker;
    public static EntityType Vex;
    public static EntityType Drowned;
    public static EntityType Pillager;
    public static EntityType Chicken;
    public static EntityType Cow;
    public static EntityType Pig;
    public static EntityType Sheep;
    public static EntityType Wolf;
    public static EntityType Villager;
    public static EntityType MushroomCow;
    public static EntityType Squid;
    public static EntityType Rabbit;
    public static EntityType Bat;
    public static EntityType IronGolem;
    public static EntityType SnowGolem;
    public static EntityType Ocelot;
    public static EntityType Horse;
    public static EntityType Donkey;
    public static EntityType Mule;
    public static EntityType SkeletonHorse;
    public static EntityType ZombieHorse;
    public static EntityType PolarBear;
    public static EntityType Llama;
    public static EntityType Parrot;
    public static EntityType Dolphin;
    public static EntityType Turtle;
    public static EntityType Cat;
    public static EntityType Pufferfish;
    public static EntityType Salmon;
    public static EntityType TropicalFish;
    public static EntityType Fish;
    public static EntityType Panda;
    public static EntityType Player;
    public static EntityType Npc;
    public static EntityType Agent;
    public static EntityType Camera;
    public static EntityType Chalkboard;
    public static EntityType Herobrine;
}
public class MiNET.Entities.Hologram : PlayerMob {
    public Hologram(string text, Level level);
    [WiredAttribute]
public virtual void SetNameTag(string nameTag);
}
public class MiNET.Entities.Hostile.Blaze : HostileMob {
    public Blaze(Level level);
}
public class MiNET.Entities.Hostile.CaveSpider : HostileMob {
    public CaveSpider(Level level);
}
public class MiNET.Entities.Hostile.Creeper : HostileMob {
    private int _timeSinceIgnition;
    private int _fuseTime;
    private bool _isPrimed;
    public Creeper(Level level);
    public void Prime(bool state);
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Hostile.Dragon : HostileMob {
    private static ILog Log;
    public Dragon(Level level);
    private static Dragon();
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.Hostile.ElderGuardian : HostileMob {
    private static ILog Log;
    public ElderGuardian(Level level);
    private static ElderGuardian();
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.Hostile.Enderman : HostileMob {
    public Enderman(Level level);
}
public class MiNET.Entities.Hostile.Evoker : HostileMob {
    public Evoker(Level level);
}
public class MiNET.Entities.Hostile.Ghast : HostileMob {
    public Ghast(Level level);
}
public class MiNET.Entities.Hostile.Guardian : HostileMob {
    public Guardian(Level level);
}
public class MiNET.Entities.Hostile.Herobrine : HostileMob {
    public int Minions { get; }
    public Herobrine(Level level);
    public virtual Item[] GetDrops();
    public sealed virtual void Praise(Player player);
    public sealed virtual int get_Minions();
}
public abstract class MiNET.Entities.Hostile.HostileMob : Mob {
    protected HostileMob(EntityType entityTypeId, Level level);
}
public class MiNET.Entities.Hostile.Husk : HostileMob {
    public Husk(Level level);
}
public class MiNET.Entities.Hostile.MagmaCube : HostileMob {
    public static byte MetadataSize;
    private byte _size;
    public byte Size { get; public set; }
    public MagmaCube(Level level, byte size);
    public byte get_Size();
    public void set_Size(byte value);
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.Hostile.Shulker : HostileMob {
    public Shulker(Level level);
}
public class MiNET.Entities.Hostile.Silverfish : HostileMob {
    public Silverfish(Level level);
}
public class MiNET.Entities.Hostile.Skeleton : HostileMob {
    [CompilerGeneratedAttribute]
private Item <ItemInHand>k__BackingField;
    public Item ItemInHand { get; public set; }
    public Skeleton(Level level);
    [CompilerGeneratedAttribute]
public Item get_ItemInHand();
    [CompilerGeneratedAttribute]
public void set_ItemInHand(Item value);
    public virtual void SpawnToPlayers(Player[] players);
    protected virtual void SendEquipment();
    protected virtual void SendArmor();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Hostile.SkeletonHorse : HostileMob {
    private static ILog Log;
    public SkeletonHorse(Level level);
    private static SkeletonHorse();
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.Hostile.Slime : HostileMob {
    public static byte MetadataSize;
    private byte _size;
    public byte Size { get; public set; }
    public Slime(Level level, byte size);
    public byte get_Size();
    public void set_Size(byte value);
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.Hostile.Spider : HostileMob {
    public Spider(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Hostile.Stray : HostileMob {
    public Stray(Level level);
}
public class MiNET.Entities.Hostile.Vex : HostileMob {
    public Vex(Level level);
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.Hostile.Vindicator : HostileMob {
    public Vindicator(Level level);
}
public class MiNET.Entities.Hostile.Witch : HostileMob {
    public Witch(Level level);
}
public class MiNET.Entities.Hostile.Wither : HostileMob {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <AnimationStep>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAuora>k__BackingField;
    private long _tick;
    private CooldownTimer _cooldown;
    public int AnimationStep { get; public set; }
    public bool ShowAuora { get; public set; }
    public Wither(Level level);
    private static Wither();
    [CompilerGeneratedAttribute]
public int get_AnimationStep();
    [CompilerGeneratedAttribute]
public void set_AnimationStep(int value);
    [CompilerGeneratedAttribute]
public bool get_ShowAuora();
    [CompilerGeneratedAttribute]
public void set_ShowAuora(bool value);
    public virtual MetadataDictionary GetMetadata();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Hostile.WitherSkeleton : HostileMob {
    public WitherSkeleton(Level level);
}
public class MiNET.Entities.Hostile.Zombie : HostileMob {
    public double Height { get; public set; }
    public double Speed { get; public set; }
    public Zombie(Level level);
    public virtual double get_Height();
    public virtual void set_Height(double value);
    public virtual double get_Speed();
    public virtual void set_Speed(double value);
    public virtual MetadataDictionary GetMetadata();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Hostile.ZombiePigman : HostileMob {
    public ZombiePigman(Level level);
}
public class MiNET.Entities.Hostile.ZombieVillager : HostileMob {
    public ZombieVillager(Level level);
}
public interface MiNET.Entities.IAgeable {
}
internal interface MiNET.Entities.IEternal {
    public int Minions { get; }
    public abstract virtual void Praise(Player player);
    public abstract virtual int get_Minions();
}
public class MiNET.Entities.ImageProviders.FrameTicker : object {
    [CompilerGeneratedAttribute]
private int <NumberOfFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentFrame>k__BackingField;
    private object _frameSync;
    private ConcurrentDictionary`2<object, bool> _providers;
    public int NumberOfFrames { get; public set; }
    private int CurrentFrame { get; public set; }
    public FrameTicker(int numberOfFrames);
    [CompilerGeneratedAttribute]
public int get_NumberOfFrames();
    [CompilerGeneratedAttribute]
public void set_NumberOfFrames(int value);
    [CompilerGeneratedAttribute]
private int get_CurrentFrame();
    [CompilerGeneratedAttribute]
public void set_CurrentFrame(int value);
    public void Register(object provider);
    public int GetCurrentFrame(object caller);
    public bool ShouldTick();
}
public interface MiNET.Entities.ImageProviders.IMapImageProvider {
    public abstract virtual Byte[] GetData(MapInfo mapInfo, bool forced);
    public abstract virtual McpeClientboundMapItemData GetClientboundMapItemData(MapInfo mapInfo);
    public abstract virtual McpeWrapper GetBatch(MapInfo mapInfo, bool forced);
}
public class MiNET.Entities.ImageProviders.MapImageProvider : object {
    private bool _alreadySent;
    [CompilerGeneratedAttribute]
private Byte[] <MapData>k__BackingField;
    [CompilerGeneratedAttribute]
private McpeClientboundMapItemData <ClientboundMapItemData>k__BackingField;
    [CompilerGeneratedAttribute]
private McpeWrapper <Batch>k__BackingField;
    public Byte[] MapData { get; public set; }
    public McpeClientboundMapItemData ClientboundMapItemData { get; public set; }
    public McpeWrapper Batch { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_MapData();
    [CompilerGeneratedAttribute]
public void set_MapData(Byte[] value);
    [CompilerGeneratedAttribute]
public McpeClientboundMapItemData get_ClientboundMapItemData();
    [CompilerGeneratedAttribute]
public void set_ClientboundMapItemData(McpeClientboundMapItemData value);
    [CompilerGeneratedAttribute]
public McpeWrapper get_Batch();
    [CompilerGeneratedAttribute]
public void set_Batch(McpeWrapper value);
    public virtual Byte[] GetData(MapInfo mapInfo, bool forced);
    public virtual McpeClientboundMapItemData GetClientboundMapItemData(MapInfo mapInfo);
    public virtual McpeWrapper GetBatch(MapInfo mapInfo, bool forced);
    private Byte[] GenerateColors(MapInfo map);
}
public class MiNET.Entities.ImageProviders.RandomColorMapImageProvider : object {
    private WannabeRandom _random;
    public virtual Byte[] GetData(MapInfo mapInfo, bool forced);
    public virtual McpeClientboundMapItemData GetClientboundMapItemData(MapInfo mapInfo);
    public virtual McpeWrapper GetBatch(MapInfo mapInfo, bool forced);
    private Byte[] GenerateColors(MapInfo map, byte next);
}
public class MiNET.Entities.ImageProviders.TextMapImageProvider : object {
    private static FontCollection _fontCollection;
    private static Font _font;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    private Byte[] _mapData;
    public string Text { get; public set; }
    private static TextMapImageProvider();
    public TextMapImageProvider(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    public virtual Byte[] GetData(MapInfo mapInfo, bool forced);
    public virtual McpeClientboundMapItemData GetClientboundMapItemData(MapInfo mapInfo);
    public virtual McpeWrapper GetBatch(MapInfo mapInfo, bool forced);
    private static Byte[] DrawText(MapInfo map, string text);
}
public class MiNET.Entities.ImageProviders.VideoImageProvider : object {
    [CompilerGeneratedAttribute]
private List`1<McpeWrapper> <Frames>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameTicker <FrameTicker>k__BackingField;
    public List`1<McpeWrapper> Frames { get; public set; }
    public FrameTicker FrameTicker { get; public set; }
    public VideoImageProvider(FrameTicker frameTicker);
    [CompilerGeneratedAttribute]
public List`1<McpeWrapper> get_Frames();
    [CompilerGeneratedAttribute]
public void set_Frames(List`1<McpeWrapper> value);
    [CompilerGeneratedAttribute]
public FrameTicker get_FrameTicker();
    [CompilerGeneratedAttribute]
public void set_FrameTicker(FrameTicker value);
    public virtual Byte[] GetData(MapInfo mapInfo, bool forced);
    public sealed virtual McpeClientboundMapItemData GetClientboundMapItemData(MapInfo mapInfo);
    public sealed virtual McpeWrapper GetBatch(MapInfo mapInfo, bool forced);
}
public interface MiNET.Entities.IRideable {
    public Entity Rider { get; }
    public bool IsRidden { get; }
    public abstract virtual Entity get_Rider();
    public abstract virtual bool get_IsRidden();
}
public class MiNET.Entities.Mob : Entity {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private bool <DespawnIfNotSeenPlayer>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSeenPlayerTimer>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITargetingBehavior> <TargetBehaviors>k__BackingField;
    private ITargetingBehavior _currentTargetBehavior;
    [CompilerGeneratedAttribute]
private List`1<IBehavior> <Behaviors>k__BackingField;
    private IBehavior _currentBehavior;
    [CompilerGeneratedAttribute]
private MobController <Controller>k__BackingField;
    [CompilerGeneratedAttribute]
private double <EntityDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Speed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Boots>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Leggings>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Chest>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Helmet>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity <Target>k__BackingField;
    public Vector3 _lastSentRotation;
    public Vector3 _lastSentPos;
    private static Int32[] Layers;
    private static Int32[] Arounds;
    private PlayerMob fake;
    public bool DespawnIfNotSeenPlayer { get; public set; }
    public DateTime LastSeenPlayerTimer { get; public set; }
    public List`1<ITargetingBehavior> TargetBehaviors { get; }
    public List`1<IBehavior> Behaviors { get; }
    public MobController Controller { get; private set; }
    public double EntityDirection { get; public set; }
    public double Speed { get; public set; }
    public bool IsRidden { get; public set; }
    public Item Boots { get; public set; }
    public Item Leggings { get; public set; }
    public Item Chest { get; public set; }
    public Item Helmet { get; public set; }
    public Entity Target { get; private set; }
    public Mob(EntityType entityTypeId, Level level);
    private static Mob();
    [CompilerGeneratedAttribute]
public bool get_DespawnIfNotSeenPlayer();
    [CompilerGeneratedAttribute]
public void set_DespawnIfNotSeenPlayer(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastSeenPlayerTimer();
    [CompilerGeneratedAttribute]
public void set_LastSeenPlayerTimer(DateTime value);
    [CompilerGeneratedAttribute]
public List`1<ITargetingBehavior> get_TargetBehaviors();
    [CompilerGeneratedAttribute]
public List`1<IBehavior> get_Behaviors();
    [CompilerGeneratedAttribute]
public MobController get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(MobController value);
    [CompilerGeneratedAttribute]
public double get_EntityDirection();
    [CompilerGeneratedAttribute]
public void set_EntityDirection(double value);
    [CompilerGeneratedAttribute]
public virtual double get_Speed();
    [CompilerGeneratedAttribute]
public virtual void set_Speed(double value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRidden();
    [CompilerGeneratedAttribute]
public void set_IsRidden(bool value);
    [CompilerGeneratedAttribute]
public Item get_Boots();
    [CompilerGeneratedAttribute]
public void set_Boots(Item value);
    [CompilerGeneratedAttribute]
public Item get_Leggings();
    [CompilerGeneratedAttribute]
public void set_Leggings(Item value);
    [CompilerGeneratedAttribute]
public Item get_Chest();
    [CompilerGeneratedAttribute]
public void set_Chest(Item value);
    [CompilerGeneratedAttribute]
public Item get_Helmet();
    [CompilerGeneratedAttribute]
public void set_Helmet(Item value);
    [CompilerGeneratedAttribute]
public Entity get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(Entity value);
    public virtual void BroadcastArmor();
    public virtual void SetTarget(Entity target);
    public static double ClampDegrees(double degrees);
    public Vector3 GetHorizDir();
    public virtual void SpawnEntity();
    public virtual EntityAttributes GetEntityAttributes();
    public virtual void OnTick(Entity[] entities);
    private static T GetBehavior(List`1<T> behaviors, T currentBehavior);
    protected void CheckBlockAhead();
    public static int IntersectSides(BoundingBox box, Ray ray);
    protected Block Intersects(Vector3 position);
    private bool IsMobInFluid(Vector3 position);
    private bool IsMobStandingInFluid(Vector3 position);
    protected bool IsMobOnGround(Vector3 pos);
    protected bool IsMobInGround(Vector3 pos);
    private void RenderBbox(Entity entity);
    public PlayerMob RenderBoundingBox(Mob theMob);
    [CompilerGeneratedAttribute]
private bool <OnTick>b__62_0(KeyValuePair`2<long, Player> player);
    [CompilerGeneratedAttribute]
private bool <OnTick>b__62_1(KeyValuePair`2<long, Player> player);
}
public class MiNET.Entities.Npc : Mob {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private NpcTypes <NpcSkinType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DialogText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdvancedConfig>k__BackingField;
    public NpcTypes NpcSkinType { get; public set; }
    public string DialogText { get; public set; }
    public string AdvancedConfig { get; public set; }
    public Npc(Level level);
    private static Npc();
    [CompilerGeneratedAttribute]
public NpcTypes get_NpcSkinType();
    [CompilerGeneratedAttribute]
public void set_NpcSkinType(NpcTypes value);
    [CompilerGeneratedAttribute]
public string get_DialogText();
    [CompilerGeneratedAttribute]
public void set_DialogText(string value);
    [CompilerGeneratedAttribute]
public string get_AdvancedConfig();
    [CompilerGeneratedAttribute]
public void set_AdvancedConfig(string value);
    public virtual void SetEntityData(MetadataDictionary metadata);
    public virtual MetadataDictionary GetMetadata();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Painting : Entity {
    [CompilerGeneratedAttribute]
private int <FacingDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private PaintingData <PaintingData>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundingBox <Bbox>k__BackingField;
    public int FacingDirection { get; public set; }
    public PaintingData PaintingData { get; public set; }
    public BoundingBox Bbox { get; public set; }
    public Painting(Level level, PaintingData data);
    [CompilerGeneratedAttribute]
public int get_FacingDirection();
    [CompilerGeneratedAttribute]
public void set_FacingDirection(int value);
    [CompilerGeneratedAttribute]
public PaintingData get_PaintingData();
    [CompilerGeneratedAttribute]
public void set_PaintingData(PaintingData value);
    [CompilerGeneratedAttribute]
public BoundingBox get_Bbox();
    [CompilerGeneratedAttribute]
public void set_Bbox(BoundingBox value);
    public virtual BoundingBox GetBoundingBox();
    public virtual void SpawnToPlayers(Player[] players);
    public virtual void DoItemInteraction(Player player, Item itemInHand);
}
public class MiNET.Entities.Passive.Bat : PassiveMob {
    public Bat(Level level);
}
public enum MiNET.Entities.Passive.CatType : Enum {
    public int value__;
    public static CatType WildOcelot;
    public static CatType Tuxedo;
    public static CatType Tabby;
    public static CatType Siamese;
}
public class MiNET.Entities.Passive.Chicken : PassiveMob {
    private int _timeUntilLayEgg;
    public Chicken(Level level, Random rnd);
    public virtual void OnTick(Entity[] entities);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Cow : PassiveMob {
    public Cow(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Horse : PassiveMob {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <Markings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEating>k__BackingField;
    [CompilerGeneratedAttribute]
private double <JumpStrength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Temper>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity <Rider>k__BackingField;
    [CompilerGeneratedAttribute]
private HorseInventory <Inventory>k__BackingField;
    public int Markings { get; public set; }
    public bool IsEating { get; public set; }
    public double JumpStrength { get; public set; }
    public int Temper { get; public set; }
    public Entity Rider { get; public set; }
    public HorseInventory Inventory { get; public set; }
    public Horse(Level level, bool isDonkey, Random rnd);
    private static Horse();
    [CompilerGeneratedAttribute]
public int get_Markings();
    [CompilerGeneratedAttribute]
public void set_Markings(int value);
    [CompilerGeneratedAttribute]
public bool get_IsEating();
    [CompilerGeneratedAttribute]
public void set_IsEating(bool value);
    [CompilerGeneratedAttribute]
public double get_JumpStrength();
    [CompilerGeneratedAttribute]
public void set_JumpStrength(double value);
    [CompilerGeneratedAttribute]
public int get_Temper();
    [CompilerGeneratedAttribute]
public void set_Temper(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Entity get_Rider();
    [CompilerGeneratedAttribute]
public void set_Rider(Entity value);
    [CompilerGeneratedAttribute]
public HorseInventory get_Inventory();
    [CompilerGeneratedAttribute]
public void set_Inventory(HorseInventory value);
    public virtual MetadataDictionary GetMetadata();
    public virtual EntityAttributes GetEntityAttributes();
    public virtual void DoInteraction(int actionId, Player player);
    public void SaddleHorse(bool saddle);
    public virtual void Mount(Entity rider);
    public virtual void Unmount(Entity rider);
    public void SendSetEntityData(Player player);
}
public class MiNET.Entities.Passive.HorseInventory : object {
    private static ILog Log;
    private Horse _horse;
    [CompilerGeneratedAttribute]
private Item <Slot0>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Slot1>k__BackingField;
    public Item Slot0 { get; private set; }
    public Item Slot1 { get; private set; }
    public HorseInventory(Horse horse);
    private static HorseInventory();
    [CompilerGeneratedAttribute]
public Item get_Slot0();
    [CompilerGeneratedAttribute]
private void set_Slot0(Item value);
    [CompilerGeneratedAttribute]
public Item get_Slot1();
    [CompilerGeneratedAttribute]
private void set_Slot1(Item value);
    public void Open(Player player);
    public Item GetSlot(int slot);
    public void SetSlot(int slot, Item item);
    public NbtCompound GetNbt();
}
public class MiNET.Entities.Passive.HorseRiddenBehavior : BehaviorBase {
    private static ILog Log;
    private Horse _horse;
    private long _rideTime;
    public HorseRiddenBehavior(Horse horse);
    private static HorseRiddenBehavior();
    public virtual bool ShouldStart();
    public virtual void OnTick(Entity[] entities);
    public virtual void OnEnd();
}
public class MiNET.Entities.Passive.IronGolem : PassiveMob {
    public IronGolem(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Llama : PassiveMob {
    private int _type;
    public Llama(Level level);
    public virtual MetadataDictionary GetMetadata();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Passive.MushroomCow : PassiveMob {
    public MushroomCow(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Ocelot : PassiveMob {
    [CompilerGeneratedAttribute]
private CatType <CatType>k__BackingField;
    public CatType CatType { get; public set; }
    public Ocelot(Level level);
    [CompilerGeneratedAttribute]
public CatType get_CatType();
    [CompilerGeneratedAttribute]
public void set_CatType(CatType value);
    public virtual MetadataDictionary GetMetadata();
}
public abstract class MiNET.Entities.Passive.PassiveMob : Mob {
    protected PassiveMob(EntityType type, Level level);
}
public class MiNET.Entities.Passive.Pig : PassiveMob {
    public Pig(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.PolarBear : PassiveMob {
    public PolarBear(Level level);
}
public class MiNET.Entities.Passive.Rabbit : PassiveMob {
    public Rabbit(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Sheep : PassiveMob {
    private byte _color;
    public Sheep(Level level, Random rnd);
    public virtual MetadataDictionary GetMetadata();
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.SnowGolem : PassiveMob {
    public SnowGolem(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Squid : PassiveMob {
    public Squid(Level level);
    public virtual Item[] GetDrops();
}
public class MiNET.Entities.Passive.Villager : PassiveMob {
    public Villager(Level level);
}
public class MiNET.Entities.Passive.Wolf : PassiveMob {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private byte <CollarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity <Owner>k__BackingField;
    public byte CollarColor { get; public set; }
    public Entity Owner { get; public set; }
    public Wolf(Level level);
    private static Wolf();
    [CompilerGeneratedAttribute]
public byte get_CollarColor();
    [CompilerGeneratedAttribute]
public void set_CollarColor(byte value);
    [CompilerGeneratedAttribute]
public Entity get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(Entity value);
    public virtual void DoInteraction(int actionId, Player player);
    public virtual MetadataDictionary GetMetadata();
}
public class MiNET.Entities.PlayerMob : Mob {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private UUID <ClientUuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Skin <Skin>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <ItemInHand>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> Ticking;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> Ticked;
    public UUID ClientUuid { get; private set; }
    public Skin Skin { get; public set; }
    public Item ItemInHand { get; public set; }
    public PlayerMob(string name, Level level);
    private static PlayerMob();
    [CompilerGeneratedAttribute]
public UUID get_ClientUuid();
    [CompilerGeneratedAttribute]
private void set_ClientUuid(UUID value);
    [CompilerGeneratedAttribute]
public Skin get_Skin();
    [CompilerGeneratedAttribute]
public void set_Skin(Skin value);
    [CompilerGeneratedAttribute]
public Item get_ItemInHand();
    [CompilerGeneratedAttribute]
public void set_ItemInHand(Item value);
    [WiredAttribute]
public void SetPosition(PlayerLocation position, bool teleport);
    public virtual MetadataDictionary GetMetadata();
    public virtual void SpawnToPlayers(Player[] players);
    public void RemoveFromPlayerList();
    public void AddToPlayerList();
    public virtual void DespawnFromPlayers(Player[] players);
    public virtual void OnTick(Entity[] entities);
    [CompilerGeneratedAttribute]
public void add_Ticking(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Ticking(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnTicking(PlayerEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Ticked(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Ticked(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnTicked(PlayerEventArgs e);
    protected virtual void SendEquipment();
    protected virtual void SendArmor();
}
public class MiNET.Entities.Projectiles.Arrow : Projectile {
    public Arrow(Player shooter, Level level, int damage, bool isCritical);
    protected virtual void OnHitBlock(Block blockCollided);
    protected virtual void OnHitEntity(Entity entityCollided);
}
public class MiNET.Entities.Projectiles.Egg : Projectile {
    public Egg(Player shooter, Level level);
    public virtual void DespawnEntity();
}
public class MiNET.Entities.Projectiles.FireworksRocket : Projectile {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Item <Fireworks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lifetime>k__BackingField;
    public Item Fireworks { get; public set; }
    public int Lifetime { get; public set; }
    public FireworksRocket(Player shooter, Level level, Item fireworks, Random random);
    private static FireworksRocket();
    [CompilerGeneratedAttribute]
public Item get_Fireworks();
    [CompilerGeneratedAttribute]
public void set_Fireworks(Item value);
    [CompilerGeneratedAttribute]
public int get_Lifetime();
    [CompilerGeneratedAttribute]
public void set_Lifetime(int value);
    public virtual MetadataDictionary GetMetadata();
    public virtual void SpawnEntity();
    public virtual void DespawnEntity();
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.Projectiles.Projectile : Entity {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Player <Shooter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DespawnOnImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Damage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PowerLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private float <HitBoxPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <Force>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BroadcastMovement>k__BackingField;
    private object _spawnSync;
    public Player Shooter { get; public set; }
    public int Ttl { get; public set; }
    public bool DespawnOnImpact { get; public set; }
    public int Damage { get; public set; }
    public int PowerLevel { get; public set; }
    public float HitBoxPrecision { get; public set; }
    public Vector3 Force { get; public set; }
    public bool BroadcastMovement { get; public set; }
    protected Projectile(Player shooter, EntityType entityTypeId, Level level, int damage, bool isCritical);
    private static Projectile();
    [CompilerGeneratedAttribute]
public Player get_Shooter();
    [CompilerGeneratedAttribute]
public void set_Shooter(Player value);
    [CompilerGeneratedAttribute]
public int get_Ttl();
    [CompilerGeneratedAttribute]
public void set_Ttl(int value);
    [CompilerGeneratedAttribute]
public bool get_DespawnOnImpact();
    [CompilerGeneratedAttribute]
public void set_DespawnOnImpact(bool value);
    [CompilerGeneratedAttribute]
public int get_Damage();
    [CompilerGeneratedAttribute]
public void set_Damage(int value);
    [CompilerGeneratedAttribute]
public int get_PowerLevel();
    [CompilerGeneratedAttribute]
public void set_PowerLevel(int value);
    [CompilerGeneratedAttribute]
public float get_HitBoxPrecision();
    [CompilerGeneratedAttribute]
public void set_HitBoxPrecision(float value);
    [CompilerGeneratedAttribute]
public Vector3 get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(Vector3 value);
    [CompilerGeneratedAttribute]
public bool get_BroadcastMovement();
    [CompilerGeneratedAttribute]
public void set_BroadcastMovement(bool value);
    public virtual void SpawnEntity();
    public virtual MetadataDictionary GetMetadata();
    public virtual void OnTick(Entity[] entities);
    protected virtual void OnHitBlock(Block blockCollided);
    protected virtual void OnHitEntity(Entity entityCollided);
    private Entity CheckEntityCollide(Vector3 position, Vector3 direction);
    private bool SetIntersectLocation(BoundingBox bbox, Vector3 location);
    private void BroadcastMoveAndMotion();
    public static bool Intersect(BoundingBox aabb, Ray2 ray);
}
public class MiNET.Entities.Projectiles.Snowball : Projectile {
    public Snowball(Player shooter, Level level);
    public virtual void DespawnEntity();
}
public class MiNET.Entities.Vehicles.Boat : Vehicle {
    public Boat(Level level);
    public virtual Item[] GetDrops();
    public virtual void DoInteraction(int actionId, Player player);
    public void SendSetEntityData(Player player);
}
public class MiNET.Entities.Vehicles.Minecart : Vehicle {
    public Minecart(Level level, PlayerLocation position);
    public virtual Item[] GetDrops();
}
public abstract class MiNET.Entities.Vehicles.Vehicle : Entity {
    protected Vehicle(EntityType type, Level level);
}
public class MiNET.Entities.World.FallingBlock : Entity {
    private static ILog Log;
    private int _original;
    private bool _checkPosition;
    public FallingBlock(Level level, int original);
    private static FallingBlock();
    public virtual MetadataDictionary GetMetadata();
    public virtual void SpawnToPlayers(Player[] players);
    public virtual void OnTick(Entity[] entities);
    private void PositionCheck();
}
public class MiNET.Entities.World.ItemEntity : Mob {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Item <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PickupDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    public Item Item { get; public set; }
    public int PickupDelay { get; public set; }
    public int TimeToLive { get; public set; }
    public ItemEntity(Level level, Item item);
    private static ItemEntity();
    [CompilerGeneratedAttribute]
public Item get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(Item value);
    [CompilerGeneratedAttribute]
public int get_PickupDelay();
    [CompilerGeneratedAttribute]
public void set_PickupDelay(int value);
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
    public Item GetItemStack();
    public virtual void SpawnToPlayers(Player[] players);
    public virtual void OnTick(Entity[] entities);
    private Vector3 GetAdjustedLengthFromCollision(Vector3 velocity);
    private void AdjustForCollision();
}
public class MiNET.Entities.World.Lightning : Entity {
    public Lightning(Level level);
    public virtual void OnTick(Entity[] entities);
}
public class MiNET.Entities.World.MapEntity : Entity {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private MapInfo <MapInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IMapImageProvider <ImageProvider>k__BackingField;
    public MapInfo MapInfo { get; public set; }
    public IMapImageProvider ImageProvider { get; public set; }
    public MapEntity(Level level, long mapId);
    private static MapEntity();
    [CompilerGeneratedAttribute]
public MapInfo get_MapInfo();
    [CompilerGeneratedAttribute]
public void set_MapInfo(MapInfo value);
    [CompilerGeneratedAttribute]
public IMapImageProvider get_ImageProvider();
    [CompilerGeneratedAttribute]
public void set_ImageProvider(IMapImageProvider value);
    public virtual void SpawnToPlayers(Player[] players);
    public virtual void DespawnFromPlayers(Player[] players);
    public virtual void OnTick(Entity[] entities);
    public virtual void AddToMapListeners(Player player, long mapId);
}
public class MiNET.Entities.World.PrimedTnt : Entity {
    [CompilerGeneratedAttribute]
private byte <Fuse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fire>k__BackingField;
    private bool _checkPosition;
    public byte Fuse { get; public set; }
    public bool Fire { get; public set; }
    public PrimedTnt(Level level);
    [CompilerGeneratedAttribute]
public byte get_Fuse();
    [CompilerGeneratedAttribute]
public void set_Fuse(byte value);
    [CompilerGeneratedAttribute]
public bool get_Fire();
    [CompilerGeneratedAttribute]
public void set_Fire(bool value);
    public virtual MetadataDictionary GetMetadata();
    public virtual void SpawnEntity();
    public virtual void OnTick(Entity[] entities);
    private void PositionCheck();
    private void Explode();
}
public class MiNET.EntityAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public string Name { get; public set; }
    public float MinValue { get; public set; }
    public float MaxValue { get; public set; }
    public float Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public float get_MinValue();
    [CompilerGeneratedAttribute]
public void set_MinValue(float value);
    [CompilerGeneratedAttribute]
public float get_MaxValue();
    [CompilerGeneratedAttribute]
public void set_MaxValue(float value);
    [CompilerGeneratedAttribute]
public float get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(float value);
    public virtual string ToString();
}
public class MiNET.EntityAttributes : Dictionary`2<string, EntityAttribute> {
}
public class MiNET.EntityLink : object {
    [CompilerGeneratedAttribute]
private long <FromEntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ToEntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityLinkType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Immediate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CausedByRider>k__BackingField;
    public long FromEntityId { get; public set; }
    public long ToEntityId { get; public set; }
    public EntityLinkType Type { get; public set; }
    public bool Immediate { get; public set; }
    public bool CausedByRider { get; public set; }
    public EntityLink(long fromEntityId, long toEntityId, EntityLinkType type, bool immediate, bool causedByRider);
    [CompilerGeneratedAttribute]
public long get_FromEntityId();
    [CompilerGeneratedAttribute]
public void set_FromEntityId(long value);
    [CompilerGeneratedAttribute]
public long get_ToEntityId();
    [CompilerGeneratedAttribute]
public void set_ToEntityId(long value);
    [CompilerGeneratedAttribute]
public EntityLinkType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(EntityLinkType value);
    [CompilerGeneratedAttribute]
public bool get_Immediate();
    [CompilerGeneratedAttribute]
public void set_Immediate(bool value);
    [CompilerGeneratedAttribute]
public bool get_CausedByRider();
    [CompilerGeneratedAttribute]
public void set_CausedByRider(bool value);
}
public class MiNET.EntityLinks : List`1<EntityLink> {
}
public class MiNET.ExperienceManager : object {
    [CompilerGeneratedAttribute]
private Player <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ExperienceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Experience>k__BackingField;
    public Player Player { get; public set; }
    public float ExperienceLevel { get; public set; }
    public float Experience { get; public set; }
    public ExperienceManager(Player player);
    [CompilerGeneratedAttribute]
public Player get_Player();
    [CompilerGeneratedAttribute]
public void set_Player(Player value);
    [CompilerGeneratedAttribute]
public float get_ExperienceLevel();
    [CompilerGeneratedAttribute]
public void set_ExperienceLevel(float value);
    [CompilerGeneratedAttribute]
public float get_Experience();
    [CompilerGeneratedAttribute]
public void set_Experience(float value);
    public void AddExperience(float xp, bool send);
    public void RemoveExperienceLevels(float levels);
    protected virtual float GetXpToNextLevel();
    protected virtual float CalculateXp();
    public virtual PlayerAttributes AddExperienceAttributes(PlayerAttributes attributes);
    public virtual void SendAttributes();
}
public class MiNET.Explosion : object {
    private static int Ray;
    private IDictionary`2<BlockCoordinates, Block> _afectedBlocks;
    private float _size;
    private Level _world;
    private BlockCoordinates _centerCoordinates;
    private bool CoordsSet;
    private bool Fire;
    public Explosion(Level world, BlockCoordinates centerCoordinates, float size, bool fire);
    public bool Explode();
    private bool PrimaryExplosion();
    private bool SecondaryExplosion();
    private void SpawnTNT(BlockCoordinates blockCoordinates, Level world);
}
public class MiNET.ExtraData : object {
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Xuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleId>k__BackingField;
    public string Identity { get; public set; }
    public string DisplayName { get; public set; }
    public string Xuid { get; public set; }
    public string TitleId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Xuid();
    [CompilerGeneratedAttribute]
public void set_Xuid(string value);
    [CompilerGeneratedAttribute]
public string get_TitleId();
    [CompilerGeneratedAttribute]
public void set_TitleId(string value);
}
public abstract class MiNET.GameRule : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPlayerModifiable>k__BackingField;
    public string Name { get; }
    public bool IsPlayerModifiable { get; public set; }
    protected GameRule(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsPlayerModifiable();
    [CompilerGeneratedAttribute]
public void set_IsPlayerModifiable(bool value);
    protected bool Equals(GameRule other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class MiNET.GameRule`1 : GameRule {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    public GameRule`1(GameRulesEnum rule, T value);
    public GameRule`1(string name, T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
public class MiNET.GameRules : HashSet`1<GameRule> {
}
public enum MiNET.GameRulesEnum : Enum {
    public int value__;
    public static GameRulesEnum CommandblockOutput;
    public static GameRulesEnum DoDaylightcycle;
    public static GameRulesEnum DoEntitydrops;
    public static GameRulesEnum DoFiretick;
    public static GameRulesEnum DoMobloot;
    public static GameRulesEnum DoMobspawning;
    public static GameRulesEnum DoTiledrops;
    public static GameRulesEnum DoWeathercycle;
    public static GameRulesEnum DrowningDamage;
    public static GameRulesEnum Falldamage;
    public static GameRulesEnum Firedamage;
    public static GameRulesEnum KeepInventory;
    public static GameRulesEnum Mobgriefing;
    public static GameRulesEnum Pvp;
    public static GameRulesEnum ShowCoordinates;
    public static GameRulesEnum NaturalRegeneration;
    public static GameRulesEnum TntExplodes;
    public static GameRulesEnum SendCommandfeedback;
    public static GameRulesEnum ExperimentalGameplay;
    public static GameRulesEnum DoInsomnia;
    public static GameRulesEnum CommandblocksEnabled;
    public static GameRulesEnum DoImmediateRespawn;
    public static GameRulesEnum ShowDeathmessages;
}
public class MiNET.GreyListManager : object {
    private static ILog Log;
    private HashSet`1<IPAddress> _blacklist;
    private ConcurrentDictionary`2<IPAddress, DateTime> _greylist;
    [CompilerGeneratedAttribute]
private ConnectionInfo <ConnectionInfo>k__BackingField;
    public ConnectionInfo ConnectionInfo { get; public set; }
    public GreyListManager(ConnectionInfo connectionInfo);
    private static GreyListManager();
    [CompilerGeneratedAttribute]
public ConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
public void set_ConnectionInfo(ConnectionInfo value);
    public virtual bool IsWhitelisted(IPAddress senderAddress);
    public virtual bool IsBlacklisted(IPAddress senderAddress);
    public virtual void Blacklist(IPAddress senderAddress);
    public virtual bool AcceptConnection(IPAddress senderAddress);
    public virtual bool IsGreylisted(IPAddress address);
    public virtual void Greylist(IPAddress address, int time);
}
public class MiNET.HandshakeData : object {
    [CompilerGeneratedAttribute]
private string <salt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <signedToken>k__BackingField;
    public string salt { get; public set; }
    public string signedToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_salt();
    [CompilerGeneratedAttribute]
public void set_salt(string value);
    [CompilerGeneratedAttribute]
public string get_signedToken();
    [CompilerGeneratedAttribute]
public void set_signedToken(string value);
}
public class MiNET.HealthEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Entity <SourceEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity <TargetEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthManager <HealthManager>k__BackingField;
    public Entity SourceEntity { get; public set; }
    public Entity TargetEntity { get; public set; }
    public HealthManager HealthManager { get; public set; }
    public HealthEventArgs(HealthManager healthManager, Entity sourceEntity, Entity targetEntity);
    [CompilerGeneratedAttribute]
public Entity get_SourceEntity();
    [CompilerGeneratedAttribute]
public void set_SourceEntity(Entity value);
    [CompilerGeneratedAttribute]
public Entity get_TargetEntity();
    [CompilerGeneratedAttribute]
public void set_TargetEntity(Entity value);
    [CompilerGeneratedAttribute]
public HealthManager get_HealthManager();
    [CompilerGeneratedAttribute]
public void set_HealthManager(HealthManager value);
}
public class MiNET.HealthManager : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Entity <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHealth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Health>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Absorption>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MaxAir>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Air>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDead>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FireTick>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SuffocationTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LavaTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CooldownTick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnFire>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInvulnerable>k__BackingField;
    [CompilerGeneratedAttribute]
private DamageCause <LastDamageCause>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity <LastDamageSource>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<HealthEventArgs> PlayerTakeHit;
    private object _killSync;
    public Entity Entity { get; public set; }
    public int MaxHealth { get; public set; }
    public int Health { get; public set; }
    public float Absorption { get; public set; }
    public short MaxAir { get; public set; }
    public short Air { get; public set; }
    public bool IsDead { get; public set; }
    public int FireTick { get; public set; }
    public int SuffocationTicks { get; public set; }
    public int LavaTicks { get; public set; }
    public int CooldownTick { get; public set; }
    public bool IsOnFire { get; public set; }
    public bool IsInvulnerable { get; public set; }
    public DamageCause LastDamageCause { get; public set; }
    public Entity LastDamageSource { get; public set; }
    public int Hearts { get; }
    public int MaxHearts { get; }
    public HealthManager(Entity entity);
    private static HealthManager();
    [CompilerGeneratedAttribute]
public Entity get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(Entity value);
    [CompilerGeneratedAttribute]
public int get_MaxHealth();
    [CompilerGeneratedAttribute]
public void set_MaxHealth(int value);
    [CompilerGeneratedAttribute]
public int get_Health();
    [CompilerGeneratedAttribute]
public void set_Health(int value);
    [CompilerGeneratedAttribute]
public float get_Absorption();
    [CompilerGeneratedAttribute]
public void set_Absorption(float value);
    [CompilerGeneratedAttribute]
public short get_MaxAir();
    [CompilerGeneratedAttribute]
public void set_MaxAir(short value);
    [CompilerGeneratedAttribute]
public short get_Air();
    [CompilerGeneratedAttribute]
public void set_Air(short value);
    [CompilerGeneratedAttribute]
public bool get_IsDead();
    [CompilerGeneratedAttribute]
public void set_IsDead(bool value);
    [CompilerGeneratedAttribute]
public int get_FireTick();
    [CompilerGeneratedAttribute]
public void set_FireTick(int value);
    [CompilerGeneratedAttribute]
public int get_SuffocationTicks();
    [CompilerGeneratedAttribute]
public void set_SuffocationTicks(int value);
    [CompilerGeneratedAttribute]
public int get_LavaTicks();
    [CompilerGeneratedAttribute]
public void set_LavaTicks(int value);
    [CompilerGeneratedAttribute]
public int get_CooldownTick();
    [CompilerGeneratedAttribute]
public void set_CooldownTick(int value);
    [CompilerGeneratedAttribute]
public bool get_IsOnFire();
    [CompilerGeneratedAttribute]
public void set_IsOnFire(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInvulnerable();
    [CompilerGeneratedAttribute]
public void set_IsInvulnerable(bool value);
    [CompilerGeneratedAttribute]
public DamageCause get_LastDamageCause();
    [CompilerGeneratedAttribute]
public void set_LastDamageCause(DamageCause value);
    [CompilerGeneratedAttribute]
public Entity get_LastDamageSource();
    [CompilerGeneratedAttribute]
public void set_LastDamageSource(Entity value);
    public int get_Hearts();
    public int get_MaxHearts();
    public virtual void Regen(int amount);
    public virtual void TakeHit(Entity source, int damage, DamageCause cause);
    public virtual void TakeHit(Entity source, Item tool, int damage, DamageCause cause);
    protected virtual void DoKnockback(Entity source, Item tool);
    [CompilerGeneratedAttribute]
public void add_PlayerTakeHit(EventHandler`1<HealthEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerTakeHit(EventHandler`1<HealthEventArgs> value);
    protected virtual void OnPlayerTakeHit(HealthEventArgs e);
    public virtual void Ignite(int ticks);
    public virtual void Kill();
    [AsyncStateMachineAttribute("MiNET.HealthManager/<SendWithDelay>d__77")]
private Task SendWithDelay(int delay, Action action);
    public virtual void ResetHealth();
    public virtual void OnTick();
    public bool IsInWater(PlayerLocation playerPosition);
    public bool IsStandingInWater(PlayerLocation playerPosition);
    private bool IsInLava(PlayerLocation playerPosition);
    private bool IsInOpaque(PlayerLocation playerPosition);
    public static string GetDescription(Enum value);
    [CompilerGeneratedAttribute]
private void <Kill>b__76_0();
}
public class MiNET.HungerManager : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Player <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hunger>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinHunger>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHunger>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Saturation>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Exhaustion>k__BackingField;
    private long _ticker;
    public Player Player { get; public set; }
    public int Hunger { get; public set; }
    public int MinHunger { get; public set; }
    public int MaxHunger { get; public set; }
    public double Saturation { get; public set; }
    public double Exhaustion { get; public set; }
    public HungerManager(Player player);
    private static HungerManager();
    [CompilerGeneratedAttribute]
public Player get_Player();
    [CompilerGeneratedAttribute]
public void set_Player(Player value);
    [CompilerGeneratedAttribute]
public int get_Hunger();
    [CompilerGeneratedAttribute]
public void set_Hunger(int value);
    [CompilerGeneratedAttribute]
public int get_MinHunger();
    [CompilerGeneratedAttribute]
public void set_MinHunger(int value);
    [CompilerGeneratedAttribute]
public int get_MaxHunger();
    [CompilerGeneratedAttribute]
public void set_MaxHunger(int value);
    [CompilerGeneratedAttribute]
public double get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(double value);
    [CompilerGeneratedAttribute]
public double get_Exhaustion();
    [CompilerGeneratedAttribute]
public void set_Exhaustion(double value);
    public virtual bool CanEat();
    public virtual void IncreaseFoodAndSaturation(Item item, int foodPoints, double saturationRestore);
    public virtual void IncreaseExhaustion(float amount);
    public virtual void Move(double distance);
    public virtual void ProcessHunger(bool forceSend);
    public virtual void OnTick();
    public void DisplayDebugPopup();
    public virtual PlayerAttributes AddHungerAttributes(PlayerAttributes attributes);
    public virtual void SendHungerAttributes();
    public virtual void ResetHunger();
}
public interface MiNET.IInventory {
}
public interface MiNET.INetworkHandler {
    public abstract virtual void Close();
    public abstract virtual void SendPacket(Packet packet);
    public abstract virtual void SendDirectPacket(Packet packet);
    public abstract virtual IPEndPoint GetClientEndPoint();
    public abstract virtual long GetNetworkNetworkIdentifier();
}
public class MiNET.Inventory : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Action`4<Player, Inventory, byte, Item> InventoryChange;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemStacks <Slots>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockEntity <BlockEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <WindowsId>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentBag`1<Player> <Observers>k__BackingField;
    public int Id { get; public set; }
    public byte Type { get; public set; }
    public ItemStacks Slots { get; public set; }
    public short Size { get; public set; }
    public BlockCoordinates Coordinates { get; public set; }
    public BlockEntity BlockEntity { get; public set; }
    public byte WindowsId { get; public set; }
    public ConcurrentBag`1<Player> Observers { get; }
    public Inventory(int id, BlockEntity blockEntity, short inventorySize, NbtList slots);
    private static Inventory();
    [CompilerGeneratedAttribute]
public void add_InventoryChange(Action`4<Player, Inventory, byte, Item> value);
    [CompilerGeneratedAttribute]
public void remove_InventoryChange(Action`4<Player, Inventory, byte, Item> value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public byte get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(byte value);
    [CompilerGeneratedAttribute]
public ItemStacks get_Slots();
    [CompilerGeneratedAttribute]
public void set_Slots(ItemStacks value);
    [CompilerGeneratedAttribute]
public short get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(short value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public BlockEntity get_BlockEntity();
    [CompilerGeneratedAttribute]
public void set_BlockEntity(BlockEntity value);
    [CompilerGeneratedAttribute]
public byte get_WindowsId();
    [CompilerGeneratedAttribute]
public void set_WindowsId(byte value);
    public void SetSlot(Player player, byte slot, Item itemStack);
    public Item GetSlot(byte slot);
    public void DecreaseSlot(byte slot);
    public void IncreaseSlot(byte slot, short itemId, short metadata);
    public bool IsOpen();
    private NbtList GetSlots();
    protected virtual void OnInventoryChange(Player player, byte slot, Item itemStack);
    [CompilerGeneratedAttribute]
public ConcurrentBag`1<Player> get_Observers();
    public void AddObserver(Player player);
    public void RemoveObserver(Player player);
}
public class MiNET.InventoryManager : object {
    private static ILog Log;
    private static byte _inventoryId;
    private Level _level;
    private Dictionary`2<BlockCoordinates, Inventory> _cache;
    public InventoryManager(Level level);
    private static InventoryManager();
    public virtual Inventory GetInventory(int inventoryId);
    public virtual Inventory GetInventory(BlockCoordinates inventoryCoord);
    private byte GetInventoryId();
}
public static class MiNET.InventoryUtils : object {
    public static List`1<Item> CreativeInventoryItems;
    private static InventoryUtils();
    public static CreativeItemStacks GetCreativeMetadataSlots();
}
public interface MiNET.IServer {
    public abstract virtual IMcpeMessageHandler CreatePlayer(INetworkHandler session, PlayerInfo playerInfo);
}
public interface MiNET.IServerManager {
    public abstract virtual IServer GetServer();
}
public abstract class MiNET.Items.ArmorBootsBase : Item {
    protected ArmorBootsBase(string name, short id, short metadata, int count);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public abstract class MiNET.Items.ArmorChestplateBase : Item {
    protected ArmorChestplateBase(string name, short id, short metadata, int count);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public abstract class MiNET.Items.ArmorHelmetBase : Item {
    protected ArmorHelmetBase(string name, short id, short metadata, int count);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public abstract class MiNET.Items.ArmorLeggingsBase : Item {
    protected ArmorLeggingsBase(string name, short id, short metadata, int count);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public abstract class MiNET.Items.FoodItem : Item {
    [CompilerGeneratedAttribute]
private int <FoodPoints>k__BackingField;
    [CompilerGeneratedAttribute]
private double <SaturationRestore>k__BackingField;
    private bool _isUsing;
    public int FoodPoints { get; public set; }
    public double SaturationRestore { get; public set; }
    public FoodItem(string name, short id, short metadata, int foodPoints, double saturationRestore);
    [CompilerGeneratedAttribute]
public int get_FoodPoints();
    [CompilerGeneratedAttribute]
public void set_FoodPoints(int value);
    [CompilerGeneratedAttribute]
public double get_SaturationRestore();
    [CompilerGeneratedAttribute]
public void set_SaturationRestore(double value);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
    public virtual void Release(Level world, Player player, BlockCoordinates blockCoordinates);
    public virtual void Consume(Player player);
}
public interface MiNET.Items.ICustomBlockItemFactory {
    public abstract virtual ItemBlock GetBlockItem(Block block, short metadata, int count);
}
public interface MiNET.Items.ICustomItemFactory {
    public abstract virtual Item GetItem(short id, short metadata, int count);
}
public class MiNET.Items.Item : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NetworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RuntimeId>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private NbtCompound <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemMaterial <ItemMaterial>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemType <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxStackSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Durability>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FuelEfficiency>k__BackingField;
    public int UniqueId { get; public set; }
    public string Name { get; protected set; }
    public short Id { get; protected set; }
    public int NetworkId { get; public set; }
    public int RuntimeId { get; public set; }
    public short Metadata { get; public set; }
    public byte Count { get; public set; }
    public NbtCompound ExtraData { get; public set; }
    [JsonIgnoreAttribute]
public ItemMaterial ItemMaterial { get; public set; }
    [JsonIgnoreAttribute]
public ItemType ItemType { get; public set; }
    [JsonIgnoreAttribute]
public int MaxStackSize { get; public set; }
    [JsonIgnoreAttribute]
public bool IsStackable { get; }
    [JsonIgnoreAttribute]
public int Durability { get; public set; }
    [JsonIgnoreAttribute]
public int FuelEfficiency { get; public set; }
    protected internal Item(string name, short id, short metadata, int count);
    protected internal Item(short id, short metadata, int count);
    private static Item();
    [CompilerGeneratedAttribute]
public int get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
protected void set_Id(short value);
    [CompilerGeneratedAttribute]
public int get_NetworkId();
    [CompilerGeneratedAttribute]
public void set_NetworkId(int value);
    [CompilerGeneratedAttribute]
public int get_RuntimeId();
    [CompilerGeneratedAttribute]
public void set_RuntimeId(int value);
    [CompilerGeneratedAttribute]
public short get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(short value);
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public virtual NbtCompound get_ExtraData();
    [CompilerGeneratedAttribute]
public virtual void set_ExtraData(NbtCompound value);
    [CompilerGeneratedAttribute]
public ItemMaterial get_ItemMaterial();
    [CompilerGeneratedAttribute]
public void set_ItemMaterial(ItemMaterial value);
    [CompilerGeneratedAttribute]
public ItemType get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(ItemType value);
    [CompilerGeneratedAttribute]
public int get_MaxStackSize();
    [CompilerGeneratedAttribute]
public void set_MaxStackSize(int value);
    public bool get_IsStackable();
    [CompilerGeneratedAttribute]
public int get_Durability();
    [CompilerGeneratedAttribute]
public void set_Durability(int value);
    [CompilerGeneratedAttribute]
public int get_FuelEfficiency();
    [CompilerGeneratedAttribute]
public void set_FuelEfficiency(int value);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool BreakBlock(Level world, Player player, Block block, BlockEntity blockEntity);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
    protected virtual int GetMaxUses();
    public virtual bool Animate(Level world, Player player);
    public BlockCoordinates GetNewCoordinatesFromFace(BlockCoordinates target, BlockFace face);
    public int GetDamage();
    protected int GetSwordDamage(ItemMaterial itemMaterial);
    private int GetAxeDamage(ItemMaterial itemMaterial);
    private int GetPickAxeDamage(ItemMaterial itemMaterial);
    private int GetShovelDamage(ItemMaterial itemMaterial);
    public virtual Item GetSmelt();
    public virtual void Release(Level world, Player player, BlockCoordinates blockCoordinates);
    protected bool Equals(Item other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    public virtual string ToString();
    public bool Interact(Level level, Player player, Entity target);
}
public class MiNET.Items.ItemAcaciaDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemAcaciaSign : ItemSignBase {
}
public class MiNET.Items.ItemAir : Item {
}
public class MiNET.Items.ItemApple : FoodItem {
}
public class MiNET.Items.ItemArmorStand : Item {
}
public class MiNET.Items.ItemArrow : Item {
}
public abstract class MiNET.Items.ItemAxe : Item {
    protected ItemAxe(string name, short id);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
}
public class MiNET.Items.ItemBakedPotato : FoodItem {
}
public class MiNET.Items.ItemBalloon : Item {
}
public class MiNET.Items.ItemBanner : ItemBlock {
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemBannerPattern : Item {
}
public class MiNET.Items.ItemBed : ItemBlock {
}
public class MiNET.Items.ItemBeef : FoodItem {
    public virtual Item GetSmelt();
}
public class MiNET.Items.ItemBeetroot : FoodItem {
}
public class MiNET.Items.ItemBeetrootSeeds : ItemBlock {
}
public class MiNET.Items.ItemBeetrootSoup : Item {
}
public class MiNET.Items.ItemBirchDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemBirchSign : ItemSignBase {
}
public class MiNET.Items.ItemBlazePowder : Item {
}
public class MiNET.Items.ItemBlazeRod : Item {
}
public class MiNET.Items.ItemBleach : Item {
}
public class MiNET.Items.ItemBlock : Item {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Block <Block>k__BackingField;
    [JsonIgnoreAttribute]
public Block Block { get; protected set; }
    protected ItemBlock(string name, short id, short metadata);
    public ItemBlock(Block block, short metadata);
    private static ItemBlock();
    [CompilerGeneratedAttribute]
public Block get_Block();
    [CompilerGeneratedAttribute]
protected void set_Block(Block value);
    public virtual Item GetSmelt();
    public static int GetFacingDirectionFromEntity(Entity entity);
    public static BlockAxis GetPillarAxisFromFace(BlockFace face);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual string ToString();
}
public class MiNET.Items.ItemBoard : ItemSlate {
}
public class MiNET.Items.ItemBoat : Item {
    private static ILog Log;
    public ItemBoat(short metadata);
    private static ItemBoat();
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public class MiNET.Items.ItemBone : Item {
    public virtual Item GetSmelt();
}
public class MiNET.Items.ItemBook : Item {
}
public class MiNET.Items.ItemBow : Item {
    private static ILog Log;
    private long _useTime;
    private static ItemBow();
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
    protected virtual int GetMaxUses();
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
    public virtual void Release(Level world, Player player, BlockCoordinates blockCoordinates);
    private float CalculateForce(long timeUsed);
    public Vector3 GetShootVector(double motX, double motY, double motZ, double f, double f1);
}
public class MiNET.Items.ItemBowl : Item {
}
public class MiNET.Items.ItemBread : FoodItem {
}
public class MiNET.Items.ItemBrewingStand : Item {
}
public class MiNET.Items.ItemBrick : Item {
}
public class MiNET.Items.ItemBucket : Item {
    private static ILog Log;
    public ItemBucket(short metadata);
    private static ItemBucket();
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemCake : Item {
}
public class MiNET.Items.ItemCamera : Item {
    public ItemCamera(short metadata);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemCampfire : Item {
}
public class MiNET.Items.ItemCarrot : FoodItem {
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemCarrotonastick : Item {
}
public class MiNET.Items.ItemCauldron : ItemBlock {
}
public class MiNET.Items.ItemChain : Item {
}
public class MiNET.Items.ItemChainmailBoots : ArmorBootsBase {
}
public class MiNET.Items.ItemChainmailChestplate : ArmorChestplateBase {
}
public class MiNET.Items.ItemChainmailHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemChainmailLeggings : ArmorLeggingsBase {
}
public class MiNET.Items.ItemChestMinecart : Item {
}
public class MiNET.Items.ItemChicken : FoodItem {
    public virtual Item GetSmelt();
}
public class MiNET.Items.ItemChorusFruit : Item {
}
public class MiNET.Items.ItemClayBall : Item {
}
public class MiNET.Items.ItemClock : Item {
}
public class MiNET.Items.ItemCoal : Item {
}
public class MiNET.Items.ItemCod : Item {
}
public class MiNET.Items.ItemCommand : Item {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Action`4<ItemCommand, Level, Player, BlockCoordinates> <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedBlockRevert>k__BackingField;
    public Action`4<ItemCommand, Level, Player, BlockCoordinates> Action { get; public set; }
    public bool NeedBlockRevert { get; public set; }
    public ItemCommand(short id, short metadata, Action`4<ItemCommand, Level, Player, BlockCoordinates> action);
    private static ItemCommand();
    [CompilerGeneratedAttribute]
public Action`4<ItemCommand, Level, Player, BlockCoordinates> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Action`4<ItemCommand, Level, Player, BlockCoordinates> value);
    [CompilerGeneratedAttribute]
public bool get_NeedBlockRevert();
    [CompilerGeneratedAttribute]
public void set_NeedBlockRevert(bool value);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemCommandBlockMinecart : Item {
}
public class MiNET.Items.ItemComparator : Item {
}
public class MiNET.Items.ItemCompass : Item {
}
public class MiNET.Items.ItemCompound : Item {
}
public class MiNET.Items.ItemCookedBeef : FoodItem {
}
public class MiNET.Items.ItemCookedChicken : FoodItem {
}
public class MiNET.Items.ItemCookedCod : Item {
}
public class MiNET.Items.ItemCookedPorkchop : FoodItem {
}
public class MiNET.Items.ItemCookedRabbit : Item {
}
public class MiNET.Items.ItemCookedSalmon : Item {
}
public class MiNET.Items.ItemCookie : FoodItem {
}
public class MiNET.Items.ItemCrimsonDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemCrimsonSign : ItemSignBase {
}
public class MiNET.Items.ItemCrossbow : Item {
}
public enum MiNET.Items.ItemDamageReason : Enum {
    public int value__;
    public static ItemDamageReason BlockBreak;
    public static ItemDamageReason BlockInteract;
    public static ItemDamageReason EntityAttack;
    public static ItemDamageReason EntityInteract;
    public static ItemDamageReason ItemUse;
}
public class MiNET.Items.ItemDarkOakDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemDarkoakSign : ItemSignBase {
}
public class MiNET.Items.ItemDiamond : Item {
}
public class MiNET.Items.ItemDiamondAxe : ItemAxe {
}
public class MiNET.Items.ItemDiamondBoots : ArmorBootsBase {
}
public class MiNET.Items.ItemDiamondChestplate : ArmorChestplateBase {
}
public class MiNET.Items.ItemDiamondHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemDiamondHoe : ItemHoe {
}
public class MiNET.Items.ItemDiamondHorseArmor : Item {
}
public class MiNET.Items.ItemDiamondLeggings : ArmorLeggingsBase {
}
public class MiNET.Items.ItemDiamondPickaxe : ItemPickaxe {
}
public class MiNET.Items.ItemDiamondShovel : ItemShovel {
}
public class MiNET.Items.ItemDiamondSword : ItemSword {
}
public class MiNET.Items.ItemDragonBreath : Item {
}
public class MiNET.Items.ItemDriedKelp : Item {
}
public class MiNET.Items.ItemDye : Item {
}
public class MiNET.Items.ItemEgg : Item {
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public class MiNET.Items.ItemElytra : Item {
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public class MiNET.Items.ItemEmerald : Item {
}
public class MiNET.Items.ItemEmptyMap : Item {
    private static ILog Log;
    public ItemEmptyMap(short metadata, byte count);
    private static ItemEmptyMap();
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public class MiNET.Items.ItemEnchantedApple : Item {
}
public class MiNET.Items.ItemEnchantedBook : Item {
}
public class MiNET.Items.ItemEndCrystal : Item {
}
public class MiNET.Items.ItemEnderEye : Item {
}
public class MiNET.Items.ItemEnderPearl : Item {
}
public class MiNET.Items.ItemExperienceBottle : Item {
}
public class MiNET.Items.ItemFactory : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private static ICustomItemFactory <CustomItemFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static ICustomBlockItemFactory <CustomBlockItemFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, short> <NameToId>k__BackingField;
    [CompilerGeneratedAttribute]
private static Itemstates <Itemstates>k__BackingField;
    [CompilerGeneratedAttribute]
private static ItemTranslator <Translator>k__BackingField;
    public static ICustomItemFactory CustomItemFactory { get; public set; }
    public static ICustomBlockItemFactory CustomBlockItemFactory { get; public set; }
    public static Dictionary`2<string, short> NameToId { get; private set; }
    public static Itemstates Itemstates { get; internal set; }
    public static ItemTranslator Translator { get; }
    private static ItemFactory();
    [CompilerGeneratedAttribute]
public static ICustomItemFactory get_CustomItemFactory();
    [CompilerGeneratedAttribute]
public static void set_CustomItemFactory(ICustomItemFactory value);
    [CompilerGeneratedAttribute]
public static ICustomBlockItemFactory get_CustomBlockItemFactory();
    [CompilerGeneratedAttribute]
public static void set_CustomBlockItemFactory(ICustomBlockItemFactory value);
    [CompilerGeneratedAttribute]
public static Dictionary`2<string, short> get_NameToId();
    [CompilerGeneratedAttribute]
private static void set_NameToId(Dictionary`2<string, short> value);
    [CompilerGeneratedAttribute]
public static Itemstates get_Itemstates();
    [CompilerGeneratedAttribute]
internal static void set_Itemstates(Itemstates value);
    [CompilerGeneratedAttribute]
public static ItemTranslator get_Translator();
    private static Dictionary`2<string, short> BuildNameToId();
    public static short GetItemIdByName(string itemName);
    public static Item GetItem(string name, short metadata, int count);
    public static Item GetItem(short id, short metadata, int count);
}
public class MiNET.Items.ItemFeather : Item {
}
public class MiNET.Items.ItemFermentedSpiderEye : Item {
}
public class MiNET.Items.ItemFireCharge : Item {
}
public class MiNET.Items.ItemFireworkRocket : Item {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private float <Spread>k__BackingField;
    public float Spread { get; public set; }
    private static ItemFireworkRocket();
    [CompilerGeneratedAttribute]
public float get_Spread();
    [CompilerGeneratedAttribute]
public void set_Spread(float value);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public static NbtCompound ToNbt(FireworksData data);
}
public class MiNET.Items.ItemFireworkStar : Item {
}
public class MiNET.Items.ItemFishingRod : Item {
}
public class MiNET.Items.ItemFlint : Item {
}
public class MiNET.Items.ItemFlintAndSteel : Item {
    public static int MaxPortalHeight;
    public static int MaxPortalWidth;
    private static ILog Log;
    private static ItemFlintAndSteel();
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public List`1<Block> Fill(Level level, BlockCoordinates origin, int radius, BlockFace direction);
    private void Visit(BlockCoordinates coordinates, List`1<Block> blocks, BlockFace direction);
    private bool IsValid(Block block, List`1<Block> portals);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
    protected virtual int GetMaxUses();
}
public class MiNET.Items.ItemFlowerPot : Item {
}
public class MiNET.Items.ItemFrame : ItemBlock {
}
public class MiNET.Items.ItemGhastTear : Item {
}
public class MiNET.Items.ItemGlassBottle : Item {
}
public class MiNET.Items.ItemGlisteningMelonSlice : Item {
}
public class MiNET.Items.ItemGlowstoneDust : Item {
}
public class MiNET.Items.ItemGoldenApple : FoodItem {
    public virtual void Consume(Player player);
}
public class MiNET.Items.ItemGoldenAxe : ItemAxe {
}
public class MiNET.Items.ItemGoldenBoots : ArmorBootsBase {
}
public class MiNET.Items.ItemGoldenCarrot : FoodItem {
}
public class MiNET.Items.ItemGoldenChestplate : ArmorChestplateBase {
}
public class MiNET.Items.ItemGoldenHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemGoldenHoe : ItemHoe {
}
public class MiNET.Items.ItemGoldenHorseArmor : Item {
}
public class MiNET.Items.ItemGoldenLeggings : ArmorLeggingsBase {
}
public class MiNET.Items.ItemGoldenPickaxe : ItemPickaxe {
}
public class MiNET.Items.ItemGoldenShovel : ItemShovel {
}
public class MiNET.Items.ItemGoldenSword : ItemSword {
}
public class MiNET.Items.ItemGoldIngot : Item {
}
public class MiNET.Items.ItemGoldNugget : Item {
}
public class MiNET.Items.ItemGunpowder : Item {
}
public class MiNET.Items.ItemHeartOfTheSea : Item {
}
public class MiNET.Items.ItemHoe : Item {
    private static ILog Log;
    internal ItemHoe(string name, short id);
    private static ItemHoe();
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
}
public class MiNET.Items.ItemHoneyBottle : Item {
}
public class MiNET.Items.ItemHoneycomb : Item {
}
public class MiNET.Items.ItemHopper : Item {
}
public class MiNET.Items.ItemHopperMinecart : Item {
}
public class MiNET.Items.ItemIceBomb : Item {
}
public class MiNET.Items.ItemIronAxe : ItemAxe {
}
public class MiNET.Items.ItemIronBoots : ArmorBootsBase {
}
public class MiNET.Items.ItemIronChestplate : ArmorChestplateBase {
}
public class MiNET.Items.ItemIronDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemIronHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemIronHoe : ItemHoe {
}
public class MiNET.Items.ItemIronHorseArmor : Item {
}
public class MiNET.Items.ItemIronIngot : Item {
}
public class MiNET.Items.ItemIronLeggings : ArmorLeggingsBase {
}
public class MiNET.Items.ItemIronNugget : Item {
}
public class MiNET.Items.ItemIronPickaxe : ItemPickaxe {
}
public class MiNET.Items.ItemIronShovel : ItemShovel {
}
public class MiNET.Items.ItemIronSword : ItemSword {
}
public class MiNET.Items.ItemJungleDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemJungleSign : ItemSignBase {
}
public class MiNET.Items.ItemKelp : Item {
}
public class MiNET.Items.ItemLead : Item {
}
public class MiNET.Items.ItemLeather : Item {
}
public class MiNET.Items.ItemLeatherBoots : ArmorBootsBase {
}
public class MiNET.Items.ItemLeatherChestplate : ArmorChestplateBase {
}
public class MiNET.Items.ItemLeatherHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemLeatherHorseArmor : Item {
}
public class MiNET.Items.ItemLeatherLeggings : ArmorLeggingsBase {
}
public class MiNET.Items.ItemLingeringPotion : Item {
}
public class MiNET.Items.ItemLodestoneCompass : Item {
}
public class MiNET.Items.ItemMagmaCream : Item {
}
public class MiNET.Items.ItemMap : Item {
    public long MapId { get; public set; }
    public ItemMap(long mapId, byte count);
    public long get_MapId();
    public void set_MapId(long value);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public enum MiNET.Items.ItemMaterial : Enum {
    public int value__;
    public static ItemMaterial Leather;
    public static ItemMaterial Chain;
    public static ItemMaterial None;
    public static ItemMaterial Wood;
    public static ItemMaterial Stone;
    public static ItemMaterial Gold;
    public static ItemMaterial Iron;
    public static ItemMaterial Diamond;
    public static ItemMaterial Netherite;
}
public class MiNET.Items.ItemMedicine : Item {
}
public class MiNET.Items.ItemMelon : FoodItem {
}
public class MiNET.Items.ItemMelonSeeds : Item {
}
public class MiNET.Items.ItemMinecart : Item {
}
public class MiNET.Items.ItemMushroomStew : Item {
}
public class MiNET.Items.ItemMusicDisc11 : Item {
}
public class MiNET.Items.ItemMusicDisc13 : Item {
}
public class MiNET.Items.ItemMusicDiscBlocks : Item {
}
public class MiNET.Items.ItemMusicDiscCat : Item {
}
public class MiNET.Items.ItemMusicDiscChirp : Item {
}
public class MiNET.Items.ItemMusicDiscFar : Item {
}
public class MiNET.Items.ItemMusicDiscMall : Item {
}
public class MiNET.Items.ItemMusicDiscMellohi : Item {
}
public class MiNET.Items.ItemMusicDiscPigstep : Item {
}
public class MiNET.Items.ItemMusicDiscStal : Item {
}
public class MiNET.Items.ItemMusicDiscStrad : Item {
}
public class MiNET.Items.ItemMusicDiscWait : Item {
}
public class MiNET.Items.ItemMusicDiscWard : Item {
}
public class MiNET.Items.ItemMuttonCooked : FoodItem {
}
public class MiNET.Items.ItemMuttonRaw : FoodItem {
    public virtual Item GetSmelt();
}
public class MiNET.Items.ItemNameTag : Item {
}
public class MiNET.Items.ItemNautilusShell : Item {
}
public class MiNET.Items.ItemNetherbrick : Item {
}
public class MiNET.Items.ItemNetheriteAxe : ItemAxe {
}
public class MiNET.Items.ItemNetheriteBoots : ArmorBootsBase {
}
public class MiNET.Items.ItemNetheriteChestplate : ArmorChestplateBase {
}
public class MiNET.Items.ItemNetheriteHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemNetheriteHoe : ItemHoe {
}
public class MiNET.Items.ItemNetheriteIngot : Item {
}
public class MiNET.Items.ItemNetheriteLeggings : ArmorLeggingsBase {
}
public class MiNET.Items.ItemNetheritePickaxe : ItemPickaxe {
}
public class MiNET.Items.ItemNetheriteScrap : Item {
}
public class MiNET.Items.ItemNetheriteShovel : ItemShovel {
}
public class MiNET.Items.ItemNetheriteSword : ItemSword {
}
public class MiNET.Items.ItemNetherSprouts : Item {
}
public class MiNET.Items.ItemNetherstar : Item {
}
public class MiNET.Items.ItemNetherWart : Item {
}
public class MiNET.Items.ItemPainting : Item {
    private static List`1<PaintingData> _paintings;
    private static ILog Log;
    private static ItemPainting();
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    private List`1<ValueTuple`2<PaintingData, BoundingBox>> FindPaintings(Level world, BlockCoordinates emptyCoordinates, BlockFace face);
    private bool CollidesWithPainting(Level world, BoundingBox bbox);
    private void PaintBbox(Level level, BoundingBox bbox);
    private bool IsSpawnAreaSolid(Level level, BoundingBox bbox);
    private bool IsSpawnAreaClear(Level level, BoundingBox bbox);
    private bool CheckSpawnArea(Level level, BoundingBox bbox, bool checkForAir);
}
public class MiNET.Items.ItemPaper : Item {
}
public class MiNET.Items.ItemPhantomMembrane : Item {
}
public class MiNET.Items.ItemPickaxe : Item {
    internal ItemPickaxe(string name, short id);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
}
public class MiNET.Items.ItemPoisonousPotato : Item {
}
public class MiNET.Items.ItemPoppedChorusFruit : Item {
}
public class MiNET.Items.ItemPorkchop : Item {
    public virtual Item GetSmelt();
}
public class MiNET.Items.ItemPoster : ItemSlate {
}
public class MiNET.Items.ItemPotato : FoodItem {
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates targetCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual Item GetSmelt();
}
public class MiNET.Items.ItemPotion : Item {
    private static ILog Log;
    private bool _isUsing;
    public ItemPotion(short metadata);
    private static ItemPotion();
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
    public virtual void Release(Level world, Player player, BlockCoordinates blockCoordinates);
    public virtual void Consume(Player player);
}
public class MiNET.Items.ItemPrismarineCrystals : Item {
}
public class MiNET.Items.ItemPrismarineShard : Item {
}
public class MiNET.Items.ItemPufferfish : Item {
}
public class MiNET.Items.ItemPumpkinPie : FoodItem {
}
public class MiNET.Items.ItemPumpkinSeeds : Item {
}
public class MiNET.Items.ItemQuartz : Item {
}
public class MiNET.Items.ItemRabbit : Item {
}
public class MiNET.Items.ItemRabbitFoot : Item {
}
public class MiNET.Items.ItemRabbitHide : Item {
}
public class MiNET.Items.ItemRabbitStew : Item {
}
public class MiNET.Items.ItemRapidFertilizer : Item {
}
public class MiNET.Items.ItemRedstone : Item {
}
public class MiNET.Items.ItemReeds : Item {
}
public class MiNET.Items.ItemRepeater : Item {
}
public class MiNET.Items.ItemRottenFlesh : Item {
}
public class MiNET.Items.ItemSaddle : Item {
}
public class MiNET.Items.ItemSalmon : Item {
}
public class MiNET.Items.ItemShears : Item {
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
    protected virtual int GetMaxUses();
}
public class MiNET.Items.ItemShield : Item {
}
public class MiNET.Items.ItemShovel : Item {
    internal ItemShovel(string name, short id);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
}
public class MiNET.Items.ItemShulkerShell : Item {
}
public class MiNET.Items.ItemSign : ItemSignBase {
}
public class MiNET.Items.ItemSignBase : ItemBlock {
    private int _standingId;
    private int _wallId;
    public ItemSignBase(string name, short id, int standingId, int wallId);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemSkull : Item {
    public ItemSkull(short metadata);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemSlate : ItemBlock {
    public ItemSlate(short size);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemSlimeBall : Item {
}
public class MiNET.Items.ItemSnowball : Item {
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
}
public class MiNET.Items.ItemSoulCampfire : Item {
}
public class MiNET.Items.ItemSparkler : Item {
}
public class MiNET.Items.ItemSpawnEgg : Item {
    private static ILog Log;
    public ItemSpawnEgg(EntityType type);
    public ItemSpawnEgg(short metadata);
    private static ItemSpawnEgg();
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemSpiderEye : Item {
}
public class MiNET.Items.ItemSplashPotion : Item {
}
public class MiNET.Items.ItemSpruceDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemSpruceSign : ItemSignBase {
}
public class MiNET.Items.ItemStick : Item {
    private static ILog Log;
    private static ItemStick();
    public virtual void UseItem(Level world, Player player, BlockCoordinates blockCoordinates);
    [AsyncStateMachineAttribute("MiNET.Items.ItemStick/<SendWithDelay>d__3")]
private Task SendWithDelay(int delay, Action action);
}
public class MiNET.Items.ItemStoneAxe : ItemAxe {
}
public class MiNET.Items.ItemStoneHoe : ItemHoe {
}
public class MiNET.Items.ItemStonePickaxe : ItemPickaxe {
}
public class MiNET.Items.ItemStoneShovel : ItemShovel {
}
public class MiNET.Items.ItemStoneSword : ItemSword {
}
public class MiNET.Items.ItemString : Item {
}
public class MiNET.Items.ItemSugar : Item {
}
public class MiNET.Items.ItemSuspiciousStew : Item {
}
public class MiNET.Items.ItemSweetBerries : Item {
}
public class MiNET.Items.ItemSword : Item {
    internal ItemSword(string name, short id);
    public virtual bool DamageItem(Player player, ItemDamageReason reason, Entity target, Block block);
}
public class MiNET.Items.ItemTntMinecart : Item {
}
public class MiNET.Items.ItemTotemOfUndying : Item {
}
public class MiNET.Items.ItemTrident : Item {
}
public class MiNET.Items.ItemTropicalFish : Item {
}
public class MiNET.Items.ItemTurtleHelmet : ArmorHelmetBase {
}
public class MiNET.Items.ItemTurtleShellPiece : Item {
}
public enum MiNET.Items.ItemType : Enum {
    public int value__;
    public static ItemType Sword;
    public static ItemType Bow;
    public static ItemType Shovel;
    public static ItemType PickAxe;
    public static ItemType Axe;
    public static ItemType Item;
    public static ItemType Hoe;
    public static ItemType Sheers;
    public static ItemType FlintAndSteel;
    public static ItemType Elytra;
    public static ItemType Trident;
    public static ItemType CarrotOnAStick;
    public static ItemType FishingRod;
    public static ItemType Book;
    public static ItemType Helmet;
    public static ItemType Chestplate;
    public static ItemType Leggings;
    public static ItemType Boots;
}
public class MiNET.Items.ItemWarpedDoor : ItemWoodenDoor {
}
public class MiNET.Items.ItemWarpedFungusOnAStick : Item {
}
public class MiNET.Items.ItemWarpedSign : ItemSignBase {
}
public class MiNET.Items.ItemWheat : Item {
}
public class MiNET.Items.ItemWheatSeeds : ItemBlock {
}
public class MiNET.Items.ItemWoodenAxe : ItemAxe {
}
public class MiNET.Items.ItemWoodenDoor : ItemBlock {
    private byte _blockId;
    public ItemWoodenDoor(string name, short itemId, byte blockId);
    public virtual void PlaceBlock(Level world, Player player, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
}
public class MiNET.Items.ItemWoodenHoe : ItemHoe {
}
public class MiNET.Items.ItemWoodenPickaxe : ItemPickaxe {
}
public class MiNET.Items.ItemWoodenShovel : ItemShovel {
}
public class MiNET.Items.ItemWoodenSword : ItemSword {
}
public class MiNET.Items.ItemWritableBook : Item {
}
public class MiNET.Items.ItemWrittenBook : Item {
}
public class MiNET.ItemStackInventoryManager : object {
    private static ILog Log;
    private Player _player;
    public ItemStackInventoryManager(Player player);
    private static ItemStackInventoryManager();
    public virtual List`1<StackResponseContainerInfo> HandleItemStackActions(int requestId, ItemStackActionList actions);
    protected virtual void ProcessConsumeAction(ConsumeAction action, List`1<StackResponseContainerInfo> stackResponses);
    protected virtual void ProcessDropAction(DropAction action, List`1<StackResponseContainerInfo> stackResponses);
    protected virtual void ProcessDestroyAction(DestroyAction action, List`1<StackResponseContainerInfo> stackResponses);
    protected virtual void ProcessSwapAction(SwapAction action, List`1<StackResponseContainerInfo> stackResponses);
    protected virtual void ProcessPlaceAction(PlaceAction action, List`1<StackResponseContainerInfo> stackResponses);
    protected virtual void ProcessTakeAction(TakeAction action, List`1<StackResponseContainerInfo> stackResponses);
    protected virtual void ProcessCraftResultDeprecatedAction(CraftResultDeprecatedAction action);
    protected virtual void ProcessCraftNotImplementedDeprecatedAction(CraftNotImplementedDeprecatedAction action);
    protected virtual UInt32 ProcessCraftAction(CraftAction action);
    protected virtual void ProcessCraftCreativeAction(CraftCreativeAction action);
    protected virtual void ProcessCraftRecipeOptionalAction(CraftRecipeOptionalAction action);
    private Item GetContainerItem(int containerId, int slot);
    private void SetContainerItem(int containerId, int slot, Item item);
}
public class MiNET.Itemstate : object {
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ComponentBased>k__BackingField;
    [JsonPropertyAttribute("runtime_id")]
public short Id { get; public set; }
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("component_based")]
public bool ComponentBased { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(short value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ComponentBased();
    [CompilerGeneratedAttribute]
public void set_ComponentBased(bool value);
}
public class MiNET.Itemstates : List`1<Itemstate> {
    public static Itemstates FromJson(string json);
}
public enum MiNET.LevelEventType : Enum {
    public short value__;
    public static LevelEventType SoundClick;
    public static LevelEventType SoundClickFail;
    public static LevelEventType SoundShoot;
    public static LevelEventType SoundDoorClose;
    public static LevelEventType SoundFizz;
    public static LevelEventType SoundTNTFuse;
    public static LevelEventType SoundGhast;
    public static LevelEventType SoundBlazeFireball;
    public static LevelEventType SoundGhastFireball;
    public static LevelEventType SoundZombieDoorHit;
    public static LevelEventType SoundZombieBreakDoor;
    public static LevelEventType SoundBatFly;
    public static LevelEventType SoundZombieInfect;
    public static LevelEventType SoundZombieHeal;
    public static LevelEventType SoundEndermanTeleport;
    public static LevelEventType SoundAnvilBreak;
    public static LevelEventType SoundAnvilUse;
    public static LevelEventType SoundAnvilFall;
    public static LevelEventType SoundItemDrop;
    public static LevelEventType SoundItemThrown;
    public static LevelEventType SoundItemFrameItemAdded;
    public static LevelEventType SoundItemFramePlaced;
    public static LevelEventType SoundItemFrameRemoved;
    public static LevelEventType SoundItemFrameItemRemoved;
    public static LevelEventType SoundItemFrameItemRotated;
    public static LevelEventType SoundCameraTakePicture;
    public static LevelEventType SoundExpOrb;
    public static LevelEventType SoundButtonClick;
    public static LevelEventType ParticleShoot;
    public static LevelEventType ParticleDestroy;
    public static LevelEventType ParticleSplash;
    public static LevelEventType ParticleEyeDespawn;
    public static LevelEventType ParticleSpawn;
    public static LevelEventType ParticleGreenThingy;
    public static LevelEventType GuardianCurse;
    public static LevelEventType ParticleBlockForceField;
    public static LevelEventType ParticleProjectileHit;
    public static LevelEventType ParticleEndermanTeleport;
    public static LevelEventType ParticlePunchBlock;
    public static LevelEventType StartRain;
    public static LevelEventType StartThunder;
    public static LevelEventType StopRain;
    public static LevelEventType StopThunder;
    public static LevelEventType DankMemes;
    public static LevelEventType CauldronExplode;
    public static LevelEventType CauldronDyeArmor;
    public static LevelEventType CauldronFillPotion;
    public static LevelEventType CauldronFillWater;
    public static LevelEventType SetData;
    public static LevelEventType PlayersSleeping;
}
public class MiNET.LevelManager : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private List`1<Level> <Levels>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityManager <EntityManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IWorldGenerator <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<LevelEventArgs> LevelCreated;
    public List`1<Level> Levels { get; public set; }
    public EntityManager EntityManager { get; public set; }
    public IWorldGenerator Generator { get; public set; }
    private static LevelManager();
    [CompilerGeneratedAttribute]
public List`1<Level> get_Levels();
    [CompilerGeneratedAttribute]
public void set_Levels(List`1<Level> value);
    [CompilerGeneratedAttribute]
public EntityManager get_EntityManager();
    [CompilerGeneratedAttribute]
public void set_EntityManager(EntityManager value);
    [CompilerGeneratedAttribute]
public IWorldGenerator get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(IWorldGenerator value);
    public virtual Level GetLevel(Player player, string name);
    public static void RecalculateBlockLight(Level level, AnvilWorldProvider wp);
    public void RemoveLevel(Level level);
    [CompilerGeneratedAttribute]
public void add_LevelCreated(EventHandler`1<LevelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LevelCreated(EventHandler`1<LevelEventArgs> value);
    protected virtual void OnLevelCreated(LevelEventArgs e);
    public virtual Level GetDimension(Level level, Dimension dimension);
    private Level GetDimensionForLevelDbProvider(Level level, Dimension dimension, LevelDbProvider overworld);
    private Level GetDimensionForAnvilProvider(Level level, Dimension dimension, AnvilWorldProvider overworld);
    public void Close();
}
public enum MiNET.LevelSoundEventType : Enum {
    public int value__;
    public static LevelSoundEventType ItemUseOn;
    public static LevelSoundEventType Hit;
    public static LevelSoundEventType Step;
    public static LevelSoundEventType Fly;
    public static LevelSoundEventType Jump;
    public static LevelSoundEventType Break;
    public static LevelSoundEventType Place;
    public static LevelSoundEventType HeavyStep;
    public static LevelSoundEventType Gallop;
    public static LevelSoundEventType Fall;
    public static LevelSoundEventType Ambient;
    public static LevelSoundEventType AmbientBaby;
    public static LevelSoundEventType AmbientInWater;
    public static LevelSoundEventType Breathe;
    public static LevelSoundEventType Death;
    public static LevelSoundEventType DeathInWater;
    public static LevelSoundEventType DeathToZombie;
    public static LevelSoundEventType Hurt;
    public static LevelSoundEventType HurtInWater;
    public static LevelSoundEventType Mad;
    public static LevelSoundEventType Boost;
    public static LevelSoundEventType Bow;
    public static LevelSoundEventType SquishBig;
    public static LevelSoundEventType SquishSmall;
    public static LevelSoundEventType FallBig;
    public static LevelSoundEventType FallSmall;
    public static LevelSoundEventType Splash;
    public static LevelSoundEventType Fizz;
    public static LevelSoundEventType Flap;
    public static LevelSoundEventType Swim;
    public static LevelSoundEventType Drink;
    public static LevelSoundEventType Eat;
    public static LevelSoundEventType Takeoff;
    public static LevelSoundEventType Shake;
    public static LevelSoundEventType Plop;
    public static LevelSoundEventType Land;
    public static LevelSoundEventType Saddle;
    public static LevelSoundEventType Armor;
    public static LevelSoundEventType MobArmorStandPlace;
    public static LevelSoundEventType AddChest;
    public static LevelSoundEventType Throw;
    public static LevelSoundEventType Attack;
    public static LevelSoundEventType AttackNodamage;
    public static LevelSoundEventType AttackStrong;
    public static LevelSoundEventType Warn;
    public static LevelSoundEventType Shear;
    public static LevelSoundEventType Milk;
    public static LevelSoundEventType Thunder;
    public static LevelSoundEventType Explode;
    public static LevelSoundEventType Fire;
    public static LevelSoundEventType Ignite;
    public static LevelSoundEventType Fuse;
    public static LevelSoundEventType Stare;
    public static LevelSoundEventType Spawn;
    public static LevelSoundEventType Shoot;
    public static LevelSoundEventType BreakBlock;
    public static LevelSoundEventType Launch;
    public static LevelSoundEventType Blast;
    public static LevelSoundEventType LargeBlast;
    public static LevelSoundEventType Twinkle;
    public static LevelSoundEventType Remedy;
    public static LevelSoundEventType Unfect;
    public static LevelSoundEventType Levelup;
    public static LevelSoundEventType BowHit;
    public static LevelSoundEventType BulletHit;
    public static LevelSoundEventType ExtinguishFire;
    public static LevelSoundEventType ItemFizz;
    public static LevelSoundEventType ChestOpen;
    public static LevelSoundEventType ChestClosed;
    public static LevelSoundEventType ShulkerboxOpen;
    public static LevelSoundEventType ShulkerboxClosed;
    public static LevelSoundEventType EnderchestOpen;
    public static LevelSoundEventType EnderchestClosed;
    public static LevelSoundEventType PowerOn;
    public static LevelSoundEventType PowerOff;
    public static LevelSoundEventType Attach;
    public static LevelSoundEventType Detach;
    public static LevelSoundEventType Deny;
    public static LevelSoundEventType Tripod;
    public static LevelSoundEventType Pop;
    public static LevelSoundEventType DropSlot;
    public static LevelSoundEventType Note;
    public static LevelSoundEventType Thorns;
    public static LevelSoundEventType PistonIn;
    public static LevelSoundEventType PistonOut;
    public static LevelSoundEventType Portal;
    public static LevelSoundEventType Water;
    public static LevelSoundEventType LavaPop;
    public static LevelSoundEventType Lava;
    public static LevelSoundEventType Burp;
    public static LevelSoundEventType BucketFillWater;
    public static LevelSoundEventType BucketFillLava;
    public static LevelSoundEventType BucketEmptyWater;
    public static LevelSoundEventType BucketEmptyLava;
    public static LevelSoundEventType ArmorEquipChain;
    public static LevelSoundEventType ArmorEquipDiamond;
    public static LevelSoundEventType ArmorEquipGeneric;
    public static LevelSoundEventType ArmorEquipGold;
    public static LevelSoundEventType ArmorEquipIron;
    public static LevelSoundEventType ArmorEquipLeather;
    public static LevelSoundEventType ArmorEquipElytra;
    public static LevelSoundEventType Record13;
    public static LevelSoundEventType RecordCat;
    public static LevelSoundEventType RecordBlocks;
    public static LevelSoundEventType RecordChirp;
    public static LevelSoundEventType RecordFar;
    public static LevelSoundEventType RecordMall;
    public static LevelSoundEventType RecordMellohi;
    public static LevelSoundEventType RecordStal;
    public static LevelSoundEventType RecordStrad;
    public static LevelSoundEventType RecordWard;
    public static LevelSoundEventType Record11;
    public static LevelSoundEventType RecordWait;
    public static LevelSoundEventType Flop;
    public static LevelSoundEventType ElderguardianCurse;
    public static LevelSoundEventType MobWarning;
    public static LevelSoundEventType MobWarningBaby;
    public static LevelSoundEventType Teleport;
    public static LevelSoundEventType ShulkerOpen;
    public static LevelSoundEventType ShulkerClose;
    public static LevelSoundEventType Haggle;
    public static LevelSoundEventType HaggleYes;
    public static LevelSoundEventType HaggleNo;
    public static LevelSoundEventType HaggleIdle;
    public static LevelSoundEventType Chorusgrow;
    public static LevelSoundEventType Chorusdeath;
    public static LevelSoundEventType Glass;
    public static LevelSoundEventType PotionBrewed;
    public static LevelSoundEventType CastSpell;
    public static LevelSoundEventType PrepareAttack;
    public static LevelSoundEventType PrepareSummon;
    public static LevelSoundEventType PrepareWololo;
    public static LevelSoundEventType Fang;
    public static LevelSoundEventType Charge;
    public static LevelSoundEventType CameraTakePicture;
    public static LevelSoundEventType LeashknotPlace;
    public static LevelSoundEventType LeashknotBreak;
    public static LevelSoundEventType Growl;
    public static LevelSoundEventType Whine;
    public static LevelSoundEventType Pant;
    public static LevelSoundEventType Purr;
    public static LevelSoundEventType Purreow;
    public static LevelSoundEventType DeathMinVolume;
    public static LevelSoundEventType DeathMidVolume;
    public static LevelSoundEventType ImitateCaveSpider;
    public static LevelSoundEventType ImitateCreeper;
    public static LevelSoundEventType ImitateElderGuardian;
    public static LevelSoundEventType ImitateEnderDragon;
    public static LevelSoundEventType ImitateEnderman;
    public static LevelSoundEventType ImitateEvocationIllager;
    public static LevelSoundEventType ImitateGhast;
    public static LevelSoundEventType ImitateHusk;
    public static LevelSoundEventType ImitateIllusionIllager;
    public static LevelSoundEventType ImitateMagmaCube;
    public static LevelSoundEventType ImitatePolarBear;
    public static LevelSoundEventType ImitateShulker;
    public static LevelSoundEventType ImitateSilverfish;
    public static LevelSoundEventType ImitateSkeleton;
    public static LevelSoundEventType ImitateSlime;
    public static LevelSoundEventType ImitateSpider;
    public static LevelSoundEventType ImitateStray;
    public static LevelSoundEventType ImitateVex;
    public static LevelSoundEventType ImitateVindicationIllager;
    public static LevelSoundEventType ImitateWitch;
    public static LevelSoundEventType ImitateWither;
    public static LevelSoundEventType ImitateWitherSkeleton;
    public static LevelSoundEventType ImitateWolf;
    public static LevelSoundEventType ImitateZombie;
    public static LevelSoundEventType ImitateZombiePigman;
    public static LevelSoundEventType ImitateZombieVillager;
    public static LevelSoundEventType BlockEndPortalFrameFill;
    public static LevelSoundEventType BlockEndPortalSpawn;
    public static LevelSoundEventType RandomAnvilUse;
    public static LevelSoundEventType BottleDragonbreath;
    public static LevelSoundEventType PortalTravel;
    public static LevelSoundEventType ItemTridentHit;
    public static LevelSoundEventType ItemTridentReturn;
    public static LevelSoundEventType ItemTridentRiptide1;
    public static LevelSoundEventType ItemTridentRiptide2;
    public static LevelSoundEventType ItemTridentRiptide3;
    public static LevelSoundEventType ItemTridentThrow;
    public static LevelSoundEventType ItemTridentThunder;
    public static LevelSoundEventType ItemTridentHitGround;
    public static LevelSoundEventType Default;
    public static LevelSoundEventType BlockFletchingTableUse;
    public static LevelSoundEventType ElemconstructOpen;
    public static LevelSoundEventType IcebombHit;
    public static LevelSoundEventType Balloonpop;
    public static LevelSoundEventType LtReactionIcebomb;
    public static LevelSoundEventType LtReactionBleach;
    public static LevelSoundEventType LtReactionEpaste;
    public static LevelSoundEventType LtReactionEpaste2;
    public static LevelSoundEventType LtReactionFertilizer;
    public static LevelSoundEventType LtReactionFireball;
    public static LevelSoundEventType LtReactionMgsalt;
    public static LevelSoundEventType LtReactionMiscfire;
    public static LevelSoundEventType LtReactionFire;
    public static LevelSoundEventType LtReactionMiscexplosion;
    public static LevelSoundEventType LtReactionMiscmystical;
    public static LevelSoundEventType LtReactionMiscmystical2;
    public static LevelSoundEventType LtReactionProduct;
    public static LevelSoundEventType SparklerUse;
    public static LevelSoundEventType GlowstickUse;
    public static LevelSoundEventType SparklerActive;
    public static LevelSoundEventType ConvertToDrowned;
    public static LevelSoundEventType BucketFillFish;
    public static LevelSoundEventType BucketEmptyFish;
    public static LevelSoundEventType BubbleUp;
    public static LevelSoundEventType BubbleDown;
    public static LevelSoundEventType BubblePop;
    public static LevelSoundEventType BubbleUpinside;
    public static LevelSoundEventType BubbleDowninside;
    public static LevelSoundEventType HurtBaby;
    public static LevelSoundEventType DeathBaby;
    public static LevelSoundEventType StepBaby;
    public static LevelSoundEventType Born;
    public static LevelSoundEventType BlockTurtleEggBreak;
    public static LevelSoundEventType BlockTurtleEggCrack;
    public static LevelSoundEventType BlockTurtleEggHatch;
    public static LevelSoundEventType BlockTurtleEggAttack;
    public static LevelSoundEventType BeaconActivate;
    public static LevelSoundEventType BeaconAmbient;
    public static LevelSoundEventType BeaconDeactivate;
    public static LevelSoundEventType BeaconPower;
    public static LevelSoundEventType ConduitActivate;
    public static LevelSoundEventType ConduitAmbient;
    public static LevelSoundEventType ConduitAttack;
    public static LevelSoundEventType ConduitDeactivate;
    public static LevelSoundEventType ConduitShort;
    public static LevelSoundEventType Swoop;
    public static LevelSoundEventType BlockBambooSaplingPlace;
    public static LevelSoundEventType Presneeze;
    public static LevelSoundEventType Sneeze;
    public static LevelSoundEventType AmbientTame;
    public static LevelSoundEventType Scared;
    public static LevelSoundEventType BlockScaffoldingClimb;
    public static LevelSoundEventType CrossbowLoadingStart;
    public static LevelSoundEventType CrossbowLoadingMiddle;
    public static LevelSoundEventType CrossbowLoadingEnd;
    public static LevelSoundEventType CrossbowShoot;
    public static LevelSoundEventType CrossbowQuickChargeStart;
    public static LevelSoundEventType CrossbowQuickChargeMiddle;
    public static LevelSoundEventType CrossbowQuickChargeEnd;
    public static LevelSoundEventType AmbientAggressive;
    public static LevelSoundEventType AmbientWorried;
    public static LevelSoundEventType CantBreed;
    public static LevelSoundEventType ItemShieldBlock;
    public static LevelSoundEventType ItemBookPut;
    public static LevelSoundEventType BlockGrindstoneUse;
    public static LevelSoundEventType BlockBellHit;
    public static LevelSoundEventType BlockCampfireCrackle;
    public static LevelSoundEventType Roar;
    public static LevelSoundEventType Stun;
    public static LevelSoundEventType BlockSweetBerryBushHurt;
    public static LevelSoundEventType BlockSweetBerryBushPick;
    public static LevelSoundEventType UiCartographyTableTakeResult;
    public static LevelSoundEventType UiStonecutterTakeResult;
    public static LevelSoundEventType BlockComposterEmpty;
    public static LevelSoundEventType BlockComposterFill;
    public static LevelSoundEventType BlockComposterFillSuccess;
    public static LevelSoundEventType BlockComposterReady;
    public static LevelSoundEventType BlockBarrelOpen;
    public static LevelSoundEventType BlockBarrelClose;
    public static LevelSoundEventType RaidHorn;
    public static LevelSoundEventType BlockLoomUse;
    public static LevelSoundEventType Undefined;
}
public class MiNET.LoginMessageHandler : object {
    private static ILog Log;
    private BedrockMessageHandler _bedrockHandler;
    private RakSession _session;
    private IServerManager _serverManager;
    private object _loginSyncLock;
    private PlayerInfo _playerInfo;
    public LoginMessageHandler(BedrockMessageHandler bedrockHandler, RakSession session, IServerManager serverManager);
    private static LoginMessageHandler();
    public sealed virtual void Disconnect(string reason, bool sendDisconnect);
    public virtual void HandleMcpeLogin(McpeLogin message);
    public void DecodeCert(McpeLogin message);
    public sealed virtual void HandleMcpeClientToServerHandshake(McpeClientToServerHandshake message);
    public sealed virtual void HandleMcpeResourcePackClientResponse(McpeResourcePackClientResponse message);
    public sealed virtual void HandleMcpeText(McpeText message);
    public sealed virtual void HandleMcpeMoveEntity(McpeMoveEntity message);
    public sealed virtual void HandleMcpeMovePlayer(McpeMovePlayer message);
    public sealed virtual void HandleMcpeRiderJump(McpeRiderJump message);
    public sealed virtual void HandleMcpeTickSync(McpeTickSync message);
    public sealed virtual void HandleMcpeLevelSoundEvent(McpeLevelSoundEvent message);
    public sealed virtual void HandleMcpeClientCacheStatus(McpeClientCacheStatus message);
    public sealed virtual void HandleMcpeNetworkSettings(McpeNetworkSettings message);
    public sealed virtual void HandleMcpePlayerAuthInput(McpePlayerAuthInput message);
    public sealed virtual void HandleMcpeItemStackRequest(McpeItemStackRequest message);
    public sealed virtual void HandleMcpeUpdatePlayerGameType(McpeUpdatePlayerGameType message);
    public sealed virtual void HandleMcpePacketViolationWarning(McpePacketViolationWarning message);
    public sealed virtual void HandleMcpeFilterTextPacket(McpeFilterTextPacket message);
    public sealed virtual void HandleMcpeUpdateSubChunkBlocksPacket(McpeUpdateSubChunkBlocksPacket message);
    public sealed virtual void HandleMcpeSubChunkRequestPacket(McpeSubChunkRequestPacket message);
    public sealed virtual void HandleMcpeEntityEvent(McpeEntityEvent message);
    public sealed virtual void HandleMcpeInventoryTransaction(McpeInventoryTransaction message);
    public sealed virtual void HandleMcpeMobEquipment(McpeMobEquipment message);
    public sealed virtual void HandleMcpeMobArmorEquipment(McpeMobArmorEquipment message);
    public sealed virtual void HandleMcpeInteract(McpeInteract message);
    public sealed virtual void HandleMcpeBlockPickRequest(McpeBlockPickRequest message);
    public sealed virtual void HandleMcpeEntityPickRequest(McpeEntityPickRequest message);
    public sealed virtual void HandleMcpePlayerAction(McpePlayerAction message);
    public sealed virtual void HandleMcpeSetEntityData(McpeSetEntityData message);
    public sealed virtual void HandleMcpeSetEntityMotion(McpeSetEntityMotion message);
    public sealed virtual void HandleMcpeAnimate(McpeAnimate message);
    public sealed virtual void HandleMcpeRespawn(McpeRespawn message);
    public sealed virtual void HandleMcpeContainerClose(McpeContainerClose message);
    public sealed virtual void HandleMcpePlayerHotbar(McpePlayerHotbar message);
    public sealed virtual void HandleMcpeInventoryContent(McpeInventoryContent message);
    public sealed virtual void HandleMcpeInventorySlot(McpeInventorySlot message);
    public sealed virtual void HandleMcpeCraftingEvent(McpeCraftingEvent message);
    public sealed virtual void HandleMcpeAdventureSettings(McpeAdventureSettings message);
    public sealed virtual void HandleMcpeBlockEntityData(McpeBlockEntityData message);
    public sealed virtual void HandleMcpePlayerInput(McpePlayerInput message);
    public sealed virtual void HandleMcpeSetPlayerGameType(McpeSetPlayerGameType message);
    public sealed virtual void HandleMcpeMapInfoRequest(McpeMapInfoRequest message);
    public sealed virtual void HandleMcpeRequestChunkRadius(McpeRequestChunkRadius message);
    public sealed virtual void HandleMcpeItemFrameDropItem(McpeItemFrameDropItem message);
    public sealed virtual void HandleMcpeCommandRequest(McpeCommandRequest message);
    public sealed virtual void HandleMcpeCommandBlockUpdate(McpeCommandBlockUpdate message);
    public sealed virtual void HandleMcpeResourcePackChunkRequest(McpeResourcePackChunkRequest message);
    public sealed virtual void HandleMcpePurchaseReceipt(McpePurchaseReceipt message);
    public sealed virtual void HandleMcpePlayerSkin(McpePlayerSkin message);
    public sealed virtual void HandleMcpeNpcRequest(McpeNpcRequest message);
    public sealed virtual void HandleMcpePhotoTransfer(McpePhotoTransfer message);
    public sealed virtual void HandleMcpeModalFormResponse(McpeModalFormResponse message);
    public sealed virtual void HandleMcpeServerSettingsRequest(McpeServerSettingsRequest message);
    public sealed virtual void HandleMcpeLabTable(McpeLabTable messae);
    public sealed virtual void HandleMcpeSetLocalPlayerAsInitialized(McpeSetLocalPlayerAsInitialized message);
    public sealed virtual void HandleMcpeLevelSoundEventOld(McpeLevelSoundEventOld message);
    public sealed virtual void HandleMcpeNetworkStackLatency(McpeNetworkStackLatency message);
    public sealed virtual void HandleMcpeLevelSoundEventV2(McpeLevelSoundEventV2 message);
    public sealed virtual void HandleMcpeScriptCustomEvent(McpeScriptCustomEvent message);
}
public enum MiNET.MessageType : Enum {
    public byte value__;
    public static MessageType Raw;
    public static MessageType Chat;
    public static MessageType Translation;
    public static MessageType Popup;
    public static MessageType JukeboxPopup;
    public static MessageType Tip;
    public static MessageType System;
    public static MessageType Whisper;
    public static MessageType Announcement;
}
public class MiNET.MiNetServer : object {
    private static ILog Log;
    public static string MiNET;
    private static int DefaultPort;
    [CompilerGeneratedAttribute]
private IPEndPoint <Endpoint>k__BackingField;
    private RakConnection _listener;
    [CompilerGeneratedAttribute]
private MotdProvider <MotdProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static RecyclableMemoryStreamManager <MemoryStreamManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IServerManager <ServerManager>k__BackingField;
    [CompilerGeneratedAttribute]
private LevelManager <LevelManager>k__BackingField;
    [CompilerGeneratedAttribute]
private PlayerFactory <PlayerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private GreyListManager <GreyListManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEdu>k__BackingField;
    [CompilerGeneratedAttribute]
private EduTokenManager <EduTokenManager>k__BackingField;
    [CompilerGeneratedAttribute]
private PluginManager <PluginManager>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionManager <SessionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionInfo <ConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerRole <ServerRole>k__BackingField;
    [CompilerGeneratedAttribute]
private static DedicatedThreadPool <FastThreadPool>k__BackingField;
    public IPEndPoint Endpoint { get; private set; }
    public MotdProvider MotdProvider { get; public set; }
    public static RecyclableMemoryStreamManager MemoryStreamManager { get; public set; }
    public IServerManager ServerManager { get; public set; }
    public LevelManager LevelManager { get; public set; }
    public PlayerFactory PlayerFactory { get; public set; }
    public GreyListManager GreyListManager { get; public set; }
    public bool IsEdu { get; public set; }
    public EduTokenManager EduTokenManager { get; public set; }
    public PluginManager PluginManager { get; public set; }
    public SessionManager SessionManager { get; public set; }
    public ConnectionInfo ConnectionInfo { get; public set; }
    public ServerRole ServerRole { get; public set; }
    internal static DedicatedThreadPool FastThreadPool { get; internal set; }
    private static MiNetServer();
    public MiNetServer(IPEndPoint endpoint);
    [CompilerGeneratedAttribute]
public IPEndPoint get_Endpoint();
    [CompilerGeneratedAttribute]
private void set_Endpoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public MotdProvider get_MotdProvider();
    [CompilerGeneratedAttribute]
public void set_MotdProvider(MotdProvider value);
    [CompilerGeneratedAttribute]
public static RecyclableMemoryStreamManager get_MemoryStreamManager();
    [CompilerGeneratedAttribute]
public static void set_MemoryStreamManager(RecyclableMemoryStreamManager value);
    [CompilerGeneratedAttribute]
public IServerManager get_ServerManager();
    [CompilerGeneratedAttribute]
public void set_ServerManager(IServerManager value);
    [CompilerGeneratedAttribute]
public LevelManager get_LevelManager();
    [CompilerGeneratedAttribute]
public void set_LevelManager(LevelManager value);
    [CompilerGeneratedAttribute]
public PlayerFactory get_PlayerFactory();
    [CompilerGeneratedAttribute]
public void set_PlayerFactory(PlayerFactory value);
    [CompilerGeneratedAttribute]
public GreyListManager get_GreyListManager();
    [CompilerGeneratedAttribute]
public void set_GreyListManager(GreyListManager value);
    [CompilerGeneratedAttribute]
public bool get_IsEdu();
    [CompilerGeneratedAttribute]
public void set_IsEdu(bool value);
    [CompilerGeneratedAttribute]
public EduTokenManager get_EduTokenManager();
    [CompilerGeneratedAttribute]
public void set_EduTokenManager(EduTokenManager value);
    [CompilerGeneratedAttribute]
public PluginManager get_PluginManager();
    [CompilerGeneratedAttribute]
public void set_PluginManager(PluginManager value);
    [CompilerGeneratedAttribute]
public SessionManager get_SessionManager();
    [CompilerGeneratedAttribute]
public void set_SessionManager(SessionManager value);
    [CompilerGeneratedAttribute]
public ConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
public void set_ConnectionInfo(ConnectionInfo value);
    [CompilerGeneratedAttribute]
public ServerRole get_ServerRole();
    [CompilerGeneratedAttribute]
public void set_ServerRole(ServerRole value);
    [CompilerGeneratedAttribute]
internal static DedicatedThreadPool get_FastThreadPool();
    [CompilerGeneratedAttribute]
internal static void set_FastThreadPool(DedicatedThreadPool value);
    public static void DisplayTimerProperties();
    public bool StartServer();
    public void StopServer();
    [CompilerGeneratedAttribute]
private ICustomMessageHandler <StartServer>b__64_0(RakSession session);
}
public class MiNET.MotdProvider : object {
    [CompilerGeneratedAttribute]
private string <Motd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxNumberOfPlayers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfPlayers>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ServerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GameMode>k__BackingField;
    public string Motd { get; public set; }
    public string SecondLine { get; public set; }
    public int MaxNumberOfPlayers { get; public set; }
    public int NumberOfPlayers { get; public set; }
    public long ServerId { get; public set; }
    public string GameMode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Motd();
    [CompilerGeneratedAttribute]
public void set_Motd(string value);
    [CompilerGeneratedAttribute]
public string get_SecondLine();
    [CompilerGeneratedAttribute]
public void set_SecondLine(string value);
    [CompilerGeneratedAttribute]
public int get_MaxNumberOfPlayers();
    [CompilerGeneratedAttribute]
public void set_MaxNumberOfPlayers(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfPlayers();
    [CompilerGeneratedAttribute]
public void set_NumberOfPlayers(int value);
    [CompilerGeneratedAttribute]
public long get_ServerId();
    [CompilerGeneratedAttribute]
public void set_ServerId(long value);
    [CompilerGeneratedAttribute]
public string get_GameMode();
    [CompilerGeneratedAttribute]
public void set_GameMode(string value);
    public virtual string GetMotd(ConnectionInfo connectionInfo, IPEndPoint caller, bool eduMotd);
}
public enum MiNET.Net.ActionPermissions : Enum {
    public int value__;
    public static ActionPermissions BuildAndMine;
    public static ActionPermissions DoorsAndSwitches;
    public static ActionPermissions OpenContainers;
    public static ActionPermissions AttackPlayers;
    public static ActionPermissions AttackMobs;
    public static ActionPermissions Operator;
    public static ActionPermissions Teleport;
    public static ActionPermissions Default;
    public static ActionPermissions All;
}
public enum MiNET.Net.AdventureFlags : Enum {
    public int value__;
    public static AdventureFlags Mayfly;
    public static AdventureFlags Noclip;
    public static AdventureFlags Worldbuilder;
    public static AdventureFlags Flying;
    public static AdventureFlags Muted;
}
[FlagsAttribute]
public enum MiNET.Net.AuthInputFlags : Enum {
    public long value__;
    public static AuthInputFlags Ascend;
    public static AuthInputFlags Descend;
    public static AuthInputFlags NorthJump;
    public static AuthInputFlags JumpDown;
    public static AuthInputFlags SprintDown;
    public static AuthInputFlags ChangeHeight;
    public static AuthInputFlags Jumping;
    public static AuthInputFlags AutoJumpingInWater;
    public static AuthInputFlags Sneaking;
    public static AuthInputFlags SneakDown;
    public static AuthInputFlags WalkForwards;
    public static AuthInputFlags WalkBackwards;
    public static AuthInputFlags StrafeLeft;
    public static AuthInputFlags StrafeRight;
    public static AuthInputFlags UpLeft;
    public static AuthInputFlags UpRight;
    public static AuthInputFlags WantUp;
    public static AuthInputFlags WantDown;
    public static AuthInputFlags WantDownSlow;
    public static AuthInputFlags WantUpSlow;
    public static AuthInputFlags Sprinting;
    public static AuthInputFlags AscendBlock;
    public static AuthInputFlags DescendBlock;
    public static AuthInputFlags SneakToggleDown;
    public static AuthInputFlags PersistSneak;
    public static AuthInputFlags StartSprinting;
    public static AuthInputFlags StopSprinting;
    public static AuthInputFlags StartSneaking;
    public static AuthInputFlags StopSneaking;
    public static AuthInputFlags StartSwimming;
    public static AuthInputFlags StopSwimming;
    public static AuthInputFlags StartJumping;
    public static AuthInputFlags StartGliding;
    public static AuthInputFlags StopGliding;
    public static AuthInputFlags PerformItemInteraction;
    public static AuthInputFlags PerformBlockActions;
    public static AuthInputFlags PerformItemStackRequest;
}
public class MiNET.Net.BedrockClientMessageHandler : BedrockMessageHandlerBase {
    private McpeClientMessageDispatcher _messageDispatcher;
    [CompilerGeneratedAttribute]
private Action <ConnectionAction>k__BackingField;
    public Action ConnectionAction { get; public set; }
    public BedrockClientMessageHandler(RakSession session, IMcpeClientMessageHandler handler);
    [CompilerGeneratedAttribute]
public Action get_ConnectionAction();
    [CompilerGeneratedAttribute]
public void set_ConnectionAction(Action value);
    public virtual void Connected();
    public virtual void Disconnect(string reason, bool sendDisconnect);
    public virtual Packet OnSendCustomPacket(Packet message);
    public virtual void HandleCustomPacket(Packet message);
}
public class MiNET.Net.BedrockMessageHandler : BedrockMessageHandlerBase {
    private static ILog Log;
    private PluginManager _pluginManager;
    [CompilerGeneratedAttribute]
private IMcpeMessageHandler <Handler>k__BackingField;
    public IMcpeMessageHandler Handler { get; public set; }
    public BedrockMessageHandler(RakSession session, IServerManager serverManager, PluginManager pluginManager);
    private static BedrockMessageHandler();
    [CompilerGeneratedAttribute]
public IMcpeMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(IMcpeMessageHandler value);
    public virtual void Connected();
    public virtual void Disconnect(string reason, bool sendDisconnect);
    public virtual Packet OnSendCustomPacket(Packet packet);
    public virtual void HandleCustomPacket(Packet message);
    private void HandleBedrockMessage(IMcpeMessageHandler handler, Packet message);
}
public abstract class MiNET.Net.BedrockMessageHandlerBase : object {
    private static ILog Log;
    private protected RakSession _session;
    [CompilerGeneratedAttribute]
private CryptoContext <CryptoContext>k__BackingField;
    public CryptoContext CryptoContext { get; public set; }
    protected BedrockMessageHandlerBase(RakSession session);
    private static BedrockMessageHandlerBase();
    [CompilerGeneratedAttribute]
public CryptoContext get_CryptoContext();
    [CompilerGeneratedAttribute]
public void set_CryptoContext(CryptoContext value);
    public abstract virtual void Connected();
    public abstract virtual void Disconnect(string reason, bool sendDisconnect);
    public sealed virtual List`1<Packet> PrepareSend(List`1<Packet> packetsToSend);
    public sealed virtual Packet HandleOrderedSend(Packet packet);
    public sealed virtual void HandlePacket(Packet message);
    public abstract virtual Packet OnSendCustomPacket(Packet message);
    public abstract virtual void HandleCustomPacket(Packet message);
}
public class MiNET.Net.CommandOriginData : object {
    [CompilerGeneratedAttribute]
private CommandOriginType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private UUID <UUID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EntityUniqueId>k__BackingField;
    public CommandOriginType Type { get; public set; }
    public UUID UUID { get; public set; }
    public string RequestId { get; public set; }
    public long EntityUniqueId { get; public set; }
    public CommandOriginData(CommandOriginType type, UUID uuid, string requestId, long entityUniqueId);
    [CompilerGeneratedAttribute]
public CommandOriginType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(CommandOriginType value);
    [CompilerGeneratedAttribute]
public UUID get_UUID();
    [CompilerGeneratedAttribute]
public void set_UUID(UUID value);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public long get_EntityUniqueId();
    [CompilerGeneratedAttribute]
public void set_EntityUniqueId(long value);
}
public enum MiNET.Net.CommandOriginType : Enum {
    public int value__;
    public static CommandOriginType Player;
    public static CommandOriginType Block;
    public static CommandOriginType MinecartBlock;
    public static CommandOriginType DevConsole;
    public static CommandOriginType Test;
    public static CommandOriginType AutomationPlayer;
    public static CommandOriginType ClientAutomation;
    public static CommandOriginType DedicatedServer;
    public static CommandOriginType Entity;
    public static CommandOriginType Virtual;
    public static CommandOriginType GameArgument;
    public static CommandOriginType EntityServer;
}
public class MiNET.Net.CommandOutputMessage : object {
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Parameters>k__BackingField;
    public bool IsInternal { get; public set; }
    public string MessageId { get; public set; }
    public String[] Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsInternal();
    [CompilerGeneratedAttribute]
public void set_IsInternal(bool value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public String[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(String[] value);
    public virtual string ToString();
}
public enum MiNET.Net.CommandOutputType : Enum {
    public int value__;
    public static CommandOutputType Last;
    public static CommandOutputType Silent;
    public static CommandOutputType All;
    public static CommandOutputType DataSet;
}
public enum MiNET.Net.CommandPermission : Enum {
    public int value__;
    public static CommandPermission Normal;
    public static CommandPermission Operator;
    public static CommandPermission Host;
    public static CommandPermission Automation;
    public static CommandPermission Admin;
}
public class MiNET.Net.ConnectedPing : Packet`1<ConnectedPing> {
    public long sendpingtime;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.ConnectedPong : Packet`1<ConnectedPong> {
    public long sendpingtime;
    public long sendpongtime;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.ConnectionBanned : Packet`1<ConnectionBanned> {
    public Byte[] offlineMessageDataId;
    public long serverGuid;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.ConnectionRequest : Packet`1<ConnectionRequest> {
    public long clientGuid;
    public long timestamp;
    public byte doSecurity;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.ConnectionRequestAccepted : Packet`1<ConnectionRequestAccepted> {
    public IPEndPoint systemAddress;
    public short systemIndex;
    public IPEndPoint[] systemAddresses;
    public long incomingTimestamp;
    public long serverTimestamp;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.DetectLostConnections : Packet`1<DetectLostConnections> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.DimensionData : object {
    [CompilerGeneratedAttribute]
private int <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generator>k__BackingField;
    public int MaxHeight { get; public set; }
    public int MinHeight { get; public set; }
    public int Generator { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(int value);
    [CompilerGeneratedAttribute]
public int get_MinHeight();
    [CompilerGeneratedAttribute]
public void set_MinHeight(int value);
    [CompilerGeneratedAttribute]
public int get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(int value);
}
public class MiNET.Net.DimensionDefinitions : Dictionary`2<string, DimensionData> {
}
public class MiNET.Net.DisconnectionNotification : Packet`1<DisconnectionNotification> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.EducationUriResource : object {
    [CompilerGeneratedAttribute]
private string <ButtonName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkUri>k__BackingField;
    public string ButtonName { get; public set; }
    public string LinkUri { get; public set; }
    public EducationUriResource(string buttonName, string linkUri);
    [CompilerGeneratedAttribute]
public string get_ButtonName();
    [CompilerGeneratedAttribute]
public void set_ButtonName(string value);
    [CompilerGeneratedAttribute]
public string get_LinkUri();
    [CompilerGeneratedAttribute]
public void set_LinkUri(string value);
}
public class MiNET.Net.EnumData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    public string Name { get; public set; }
    public String[] Values { get; public set; }
    public EnumData(string name, String[] values);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(String[] value);
}
public class MiNET.Net.Experiments : List`1<Experiment> {
}
public class MiNET.Net.FtlCreatePlayer : Packet`1<FtlCreatePlayer> {
    public string username;
    public UUID clientuuid;
    public string serverAddress;
    public long clientId;
    public Skin skin;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.HeightMapData : object {
    [CompilerGeneratedAttribute]
private Int16[] <Heights>k__BackingField;
    public Int16[] Heights { get; }
    public bool IsAllTooLow { get; }
    public bool IsAllTooHigh { get; }
    public HeightMapData(Int16[] heights);
    [CompilerGeneratedAttribute]
public Int16[] get_Heights();
    public int GetHeight(int x, int z);
    public bool get_IsAllTooLow();
    public bool get_IsAllTooHigh();
}
public interface MiNET.Net.IMcpeClientMessageHandler {
    public abstract virtual void HandleMcpePlayStatus(McpePlayStatus message);
    public abstract virtual void HandleMcpeServerToClientHandshake(McpeServerToClientHandshake message);
    public abstract virtual void HandleMcpeDisconnect(McpeDisconnect message);
    public abstract virtual void HandleMcpeResourcePacksInfo(McpeResourcePacksInfo message);
    public abstract virtual void HandleMcpeResourcePackStack(McpeResourcePackStack message);
    public abstract virtual void HandleMcpeText(McpeText message);
    public abstract virtual void HandleMcpeSetTime(McpeSetTime message);
    public abstract virtual void HandleMcpeStartGame(McpeStartGame message);
    public abstract virtual void HandleMcpeAddPlayer(McpeAddPlayer message);
    public abstract virtual void HandleMcpeAddEntity(McpeAddEntity message);
    public abstract virtual void HandleMcpeRemoveEntity(McpeRemoveEntity message);
    public abstract virtual void HandleMcpeAddItemEntity(McpeAddItemEntity message);
    public abstract virtual void HandleMcpeTakeItemEntity(McpeTakeItemEntity message);
    public abstract virtual void HandleMcpeMoveEntity(McpeMoveEntity message);
    public abstract virtual void HandleMcpeMovePlayer(McpeMovePlayer message);
    public abstract virtual void HandleMcpeRiderJump(McpeRiderJump message);
    public abstract virtual void HandleMcpeUpdateBlock(McpeUpdateBlock message);
    public abstract virtual void HandleMcpeAddPainting(McpeAddPainting message);
    public abstract virtual void HandleMcpeTickSync(McpeTickSync message);
    public abstract virtual void HandleMcpeLevelSoundEventOld(McpeLevelSoundEventOld message);
    public abstract virtual void HandleMcpeLevelEvent(McpeLevelEvent message);
    public abstract virtual void HandleMcpeBlockEvent(McpeBlockEvent message);
    public abstract virtual void HandleMcpeEntityEvent(McpeEntityEvent message);
    public abstract virtual void HandleMcpeMobEffect(McpeMobEffect message);
    public abstract virtual void HandleMcpeUpdateAttributes(McpeUpdateAttributes message);
    public abstract virtual void HandleMcpeInventoryTransaction(McpeInventoryTransaction message);
    public abstract virtual void HandleMcpeMobEquipment(McpeMobEquipment message);
    public abstract virtual void HandleMcpeMobArmorEquipment(McpeMobArmorEquipment message);
    public abstract virtual void HandleMcpeInteract(McpeInteract message);
    public abstract virtual void HandleMcpeHurtArmor(McpeHurtArmor message);
    public abstract virtual void HandleMcpeSetEntityData(McpeSetEntityData message);
    public abstract virtual void HandleMcpeSetEntityMotion(McpeSetEntityMotion message);
    public abstract virtual void HandleMcpeSetEntityLink(McpeSetEntityLink message);
    public abstract virtual void HandleMcpeSetHealth(McpeSetHealth message);
    public abstract virtual void HandleMcpeSetSpawnPosition(McpeSetSpawnPosition message);
    public abstract virtual void HandleMcpeAnimate(McpeAnimate message);
    public abstract virtual void HandleMcpeRespawn(McpeRespawn message);
    public abstract virtual void HandleMcpeContainerOpen(McpeContainerOpen message);
    public abstract virtual void HandleMcpeContainerClose(McpeContainerClose message);
    public abstract virtual void HandleMcpePlayerHotbar(McpePlayerHotbar message);
    public abstract virtual void HandleMcpeInventoryContent(McpeInventoryContent message);
    public abstract virtual void HandleMcpeInventorySlot(McpeInventorySlot message);
    public abstract virtual void HandleMcpeContainerSetData(McpeContainerSetData message);
    public abstract virtual void HandleMcpeCraftingData(McpeCraftingData message);
    public abstract virtual void HandleMcpeCraftingEvent(McpeCraftingEvent message);
    public abstract virtual void HandleMcpeGuiDataPickItem(McpeGuiDataPickItem message);
    public abstract virtual void HandleMcpeAdventureSettings(McpeAdventureSettings message);
    public abstract virtual void HandleMcpeBlockEntityData(McpeBlockEntityData message);
    public abstract virtual void HandleMcpeLevelChunk(McpeLevelChunk message);
    public abstract virtual void HandleMcpeSetCommandsEnabled(McpeSetCommandsEnabled message);
    public abstract virtual void HandleMcpeSetDifficulty(McpeSetDifficulty message);
    public abstract virtual void HandleMcpeChangeDimension(McpeChangeDimension message);
    public abstract virtual void HandleMcpeSetPlayerGameType(McpeSetPlayerGameType message);
    public abstract virtual void HandleMcpePlayerList(McpePlayerList message);
    public abstract virtual void HandleMcpeSimpleEvent(McpeSimpleEvent message);
    public abstract virtual void HandleMcpeTelemetryEvent(McpeTelemetryEvent message);
    public abstract virtual void HandleMcpeSpawnExperienceOrb(McpeSpawnExperienceOrb message);
    public abstract virtual void HandleMcpeClientboundMapItemData(McpeClientboundMapItemData message);
    public abstract virtual void HandleMcpeMapInfoRequest(McpeMapInfoRequest message);
    public abstract virtual void HandleMcpeRequestChunkRadius(McpeRequestChunkRadius message);
    public abstract virtual void HandleMcpeChunkRadiusUpdate(McpeChunkRadiusUpdate message);
    public abstract virtual void HandleMcpeItemFrameDropItem(McpeItemFrameDropItem message);
    public abstract virtual void HandleMcpeGameRulesChanged(McpeGameRulesChanged message);
    public abstract virtual void HandleMcpeCamera(McpeCamera message);
    public abstract virtual void HandleMcpeBossEvent(McpeBossEvent message);
    public abstract virtual void HandleMcpeShowCredits(McpeShowCredits message);
    public abstract virtual void HandleMcpeAvailableCommands(McpeAvailableCommands message);
    public abstract virtual void HandleMcpeCommandOutput(McpeCommandOutput message);
    public abstract virtual void HandleMcpeUpdateTrade(McpeUpdateTrade message);
    public abstract virtual void HandleMcpeUpdateEquipment(McpeUpdateEquipment message);
    public abstract virtual void HandleMcpeResourcePackDataInfo(McpeResourcePackDataInfo message);
    public abstract virtual void HandleMcpeResourcePackChunkData(McpeResourcePackChunkData message);
    public abstract virtual void HandleMcpeTransfer(McpeTransfer message);
    public abstract virtual void HandleMcpePlaySound(McpePlaySound message);
    public abstract virtual void HandleMcpeStopSound(McpeStopSound message);
    public abstract virtual void HandleMcpeSetTitle(McpeSetTitle message);
    public abstract virtual void HandleMcpeAddBehaviorTree(McpeAddBehaviorTree message);
    public abstract virtual void HandleMcpeStructureBlockUpdate(McpeStructureBlockUpdate message);
    public abstract virtual void HandleMcpeShowStoreOffer(McpeShowStoreOffer message);
    public abstract virtual void HandleMcpePlayerSkin(McpePlayerSkin message);
    public abstract virtual void HandleMcpeSubClientLogin(McpeSubClientLogin message);
    public abstract virtual void HandleMcpeInitiateWebSocketConnection(McpeInitiateWebSocketConnection message);
    public abstract virtual void HandleMcpeSetLastHurtBy(McpeSetLastHurtBy message);
    public abstract virtual void HandleMcpeBookEdit(McpeBookEdit message);
    public abstract virtual void HandleMcpeNpcRequest(McpeNpcRequest message);
    public abstract virtual void HandleMcpeModalFormRequest(McpeModalFormRequest message);
    public abstract virtual void HandleMcpeServerSettingsResponse(McpeServerSettingsResponse message);
    public abstract virtual void HandleMcpeShowProfile(McpeShowProfile message);
    public abstract virtual void HandleMcpeSetDefaultGameType(McpeSetDefaultGameType message);
    public abstract virtual void HandleMcpeRemoveObjective(McpeRemoveObjective message);
    public abstract virtual void HandleMcpeSetDisplayObjective(McpeSetDisplayObjective message);
    public abstract virtual void HandleMcpeSetScore(McpeSetScore message);
    public abstract virtual void HandleMcpeLabTable(McpeLabTable message);
    public abstract virtual void HandleMcpeUpdateBlockSynced(McpeUpdateBlockSynced message);
    public abstract virtual void HandleMcpeMoveEntityDelta(McpeMoveEntityDelta message);
    public abstract virtual void HandleMcpeSetScoreboardIdentity(McpeSetScoreboardIdentity message);
    public abstract virtual void HandleMcpeUpdateSoftEnum(McpeUpdateSoftEnum message);
    public abstract virtual void HandleMcpeNetworkStackLatency(McpeNetworkStackLatency message);
    public abstract virtual void HandleMcpeScriptCustomEvent(McpeScriptCustomEvent message);
    public abstract virtual void HandleMcpeSpawnParticleEffect(McpeSpawnParticleEffect message);
    public abstract virtual void HandleMcpeAvailableEntityIdentifiers(McpeAvailableEntityIdentifiers message);
    public abstract virtual void HandleMcpeLevelSoundEventV2(McpeLevelSoundEventV2 message);
    public abstract virtual void HandleMcpeNetworkChunkPublisherUpdate(McpeNetworkChunkPublisherUpdate message);
    public abstract virtual void HandleMcpeBiomeDefinitionList(McpeBiomeDefinitionList message);
    public abstract virtual void HandleMcpeLevelSoundEvent(McpeLevelSoundEvent message);
    public abstract virtual void HandleMcpeLevelEventGeneric(McpeLevelEventGeneric message);
    public abstract virtual void HandleMcpeLecternUpdate(McpeLecternUpdate message);
    public abstract virtual void HandleMcpeVideoStreamConnect(McpeVideoStreamConnect message);
    public abstract virtual void HandleMcpeClientCacheStatus(McpeClientCacheStatus message);
    public abstract virtual void HandleMcpeOnScreenTextureAnimation(McpeOnScreenTextureAnimation message);
    public abstract virtual void HandleMcpeMapCreateLockedCopy(McpeMapCreateLockedCopy message);
    public abstract virtual void HandleMcpeStructureTemplateDataExportRequest(McpeStructureTemplateDataExportRequest message);
    public abstract virtual void HandleMcpeStructureTemplateDataExportResponse(McpeStructureTemplateDataExportResponse message);
    public abstract virtual void HandleMcpeUpdateBlockProperties(McpeUpdateBlockProperties message);
    public abstract virtual void HandleMcpeClientCacheBlobStatus(McpeClientCacheBlobStatus message);
    public abstract virtual void HandleMcpeClientCacheMissResponse(McpeClientCacheMissResponse message);
    public abstract virtual void HandleMcpeNetworkSettings(McpeNetworkSettings message);
    public abstract virtual void HandleMcpeCreativeContent(McpeCreativeContent message);
    public abstract virtual void HandleMcpePlayerEnchantOptions(McpePlayerEnchantOptions message);
    public abstract virtual void HandleMcpeItemStackResponse(McpeItemStackResponse message);
    public abstract virtual void HandleMcpeItemComponent(McpeItemComponent message);
    public abstract virtual void HandleMcpeFilterTextPacket(McpeFilterTextPacket message);
    public abstract virtual void HandleMcpeUpdateSubChunkBlocksPacket(McpeUpdateSubChunkBlocksPacket message);
    public abstract virtual void HandleMcpeSubChunkPacket(McpeSubChunkPacket message);
    public abstract virtual void HandleMcpeDimensionData(McpeDimensionData message);
    public abstract virtual void HandleMcpeAlexEntityAnimation(McpeAlexEntityAnimation message);
    public abstract virtual void HandleFtlCreatePlayer(FtlCreatePlayer message);
}
public interface MiNET.Net.IMcpeMessageHandler {
    public abstract virtual void Disconnect(string reason, bool sendDisconnect);
    public abstract virtual void HandleMcpeLogin(McpeLogin message);
    public abstract virtual void HandleMcpeClientToServerHandshake(McpeClientToServerHandshake message);
    public abstract virtual void HandleMcpeResourcePackClientResponse(McpeResourcePackClientResponse message);
    public abstract virtual void HandleMcpeText(McpeText message);
    public abstract virtual void HandleMcpeMoveEntity(McpeMoveEntity message);
    public abstract virtual void HandleMcpeMovePlayer(McpeMovePlayer message);
    public abstract virtual void HandleMcpeRiderJump(McpeRiderJump message);
    public abstract virtual void HandleMcpeTickSync(McpeTickSync message);
    public abstract virtual void HandleMcpeLevelSoundEventOld(McpeLevelSoundEventOld message);
    public abstract virtual void HandleMcpeEntityEvent(McpeEntityEvent message);
    public abstract virtual void HandleMcpeInventoryTransaction(McpeInventoryTransaction message);
    public abstract virtual void HandleMcpeMobEquipment(McpeMobEquipment message);
    public abstract virtual void HandleMcpeMobArmorEquipment(McpeMobArmorEquipment message);
    public abstract virtual void HandleMcpeInteract(McpeInteract message);
    public abstract virtual void HandleMcpeBlockPickRequest(McpeBlockPickRequest message);
    public abstract virtual void HandleMcpeEntityPickRequest(McpeEntityPickRequest message);
    public abstract virtual void HandleMcpePlayerAction(McpePlayerAction message);
    public abstract virtual void HandleMcpeSetEntityData(McpeSetEntityData message);
    public abstract virtual void HandleMcpeSetEntityMotion(McpeSetEntityMotion message);
    public abstract virtual void HandleMcpeAnimate(McpeAnimate message);
    public abstract virtual void HandleMcpeRespawn(McpeRespawn message);
    public abstract virtual void HandleMcpeContainerClose(McpeContainerClose message);
    public abstract virtual void HandleMcpePlayerHotbar(McpePlayerHotbar message);
    public abstract virtual void HandleMcpeInventoryContent(McpeInventoryContent message);
    public abstract virtual void HandleMcpeInventorySlot(McpeInventorySlot message);
    public abstract virtual void HandleMcpeCraftingEvent(McpeCraftingEvent message);
    public abstract virtual void HandleMcpeAdventureSettings(McpeAdventureSettings message);
    public abstract virtual void HandleMcpeBlockEntityData(McpeBlockEntityData message);
    public abstract virtual void HandleMcpePlayerInput(McpePlayerInput message);
    public abstract virtual void HandleMcpeSetPlayerGameType(McpeSetPlayerGameType message);
    public abstract virtual void HandleMcpeMapInfoRequest(McpeMapInfoRequest message);
    public abstract virtual void HandleMcpeRequestChunkRadius(McpeRequestChunkRadius message);
    public abstract virtual void HandleMcpeItemFrameDropItem(McpeItemFrameDropItem message);
    public abstract virtual void HandleMcpeCommandRequest(McpeCommandRequest message);
    public abstract virtual void HandleMcpeCommandBlockUpdate(McpeCommandBlockUpdate message);
    public abstract virtual void HandleMcpeResourcePackChunkRequest(McpeResourcePackChunkRequest message);
    public abstract virtual void HandleMcpePurchaseReceipt(McpePurchaseReceipt message);
    public abstract virtual void HandleMcpePlayerSkin(McpePlayerSkin message);
    public abstract virtual void HandleMcpeNpcRequest(McpeNpcRequest message);
    public abstract virtual void HandleMcpePhotoTransfer(McpePhotoTransfer message);
    public abstract virtual void HandleMcpeModalFormResponse(McpeModalFormResponse message);
    public abstract virtual void HandleMcpeServerSettingsRequest(McpeServerSettingsRequest message);
    public abstract virtual void HandleMcpeLabTable(McpeLabTable message);
    public abstract virtual void HandleMcpeSetLocalPlayerAsInitialized(McpeSetLocalPlayerAsInitialized message);
    public abstract virtual void HandleMcpeNetworkStackLatency(McpeNetworkStackLatency message);
    public abstract virtual void HandleMcpeScriptCustomEvent(McpeScriptCustomEvent message);
    public abstract virtual void HandleMcpeLevelSoundEventV2(McpeLevelSoundEventV2 message);
    public abstract virtual void HandleMcpeLevelSoundEvent(McpeLevelSoundEvent message);
    public abstract virtual void HandleMcpeClientCacheStatus(McpeClientCacheStatus message);
    public abstract virtual void HandleMcpeNetworkSettings(McpeNetworkSettings message);
    public abstract virtual void HandleMcpePlayerAuthInput(McpePlayerAuthInput message);
    public abstract virtual void HandleMcpeItemStackRequest(McpeItemStackRequest message);
    public abstract virtual void HandleMcpeUpdatePlayerGameType(McpeUpdatePlayerGameType message);
    public abstract virtual void HandleMcpePacketViolationWarning(McpePacketViolationWarning message);
    public abstract virtual void HandleMcpeFilterTextPacket(McpeFilterTextPacket message);
    public abstract virtual void HandleMcpeUpdateSubChunkBlocksPacket(McpeUpdateSubChunkBlocksPacket message);
    public abstract virtual void HandleMcpeSubChunkRequestPacket(McpeSubChunkRequestPacket message);
}
public class MiNET.Net.IpRecentlyConnected : Packet`1<IpRecentlyConnected> {
    public Byte[] offlineMessageDataId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
internal class MiNET.Net.Items.ComplexMappingEntry : object {
    private Dictionary`2<short, int> _mapping;
    public void Add(short meta, short translatedItem);
    public bool TryGet(short meta, Int32& result);
}
public class MiNET.Net.Items.ItemTranslator : object {
    private static ILog Log;
    private IDictionary`2<int, TranslatedItem> _networkIdToInternal;
    private IDictionary`2<int, int> _simpleNetworkIdToInternal;
    private Dictionary`2<int, ComplexMappingEntry> _internalIdToNetwork;
    private Dictionary`2<int, int> _simpleInternalIdToNetwork;
    private Dictionary`2<string, string> _internalNameToNetworkName;
    public ItemTranslator(Itemstates itemstates);
    private static ItemTranslator();
    internal bool TryGetNetworkId(int id, short meta, TranslatedItem& item);
    internal TranslatedItem ToNetworkId(int id, short meta);
    internal TranslatedItem FromNetworkId(int id, short meta);
    public bool TryGetName(string input, String& output);
}
internal class MiNET.Net.Items.R16ToCurrentMap : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <Complex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Simple>k__BackingField;
    [JsonPropertyAttribute("complex")]
public Dictionary`2<string, Dictionary`2<string, string>> Complex { get; public set; }
    [JsonPropertyAttribute("simple")]
public Dictionary`2<string, string> Simple { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> get_Complex();
    [CompilerGeneratedAttribute]
public void set_Complex(Dictionary`2<string, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Simple();
    [CompilerGeneratedAttribute]
public void set_Simple(Dictionary`2<string, string> value);
}
internal class MiNET.Net.Items.TranslatedItem : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Meta>k__BackingField;
    public int Id { get; }
    public short Meta { get; }
    public TranslatedItem(int id, short meta);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public short get_Meta();
    public sealed virtual bool Equals(TranslatedItem other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class MiNET.Net.LevelSettings : object {
    public long seed;
    public SpawnSettings spawnSettings;
    public int generator;
    public int gamemode;
    public int difficulty;
    public int x;
    public int y;
    public int z;
    public bool hasAchievementsDisabled;
    public int time;
    public int eduOffer;
    public bool hasEduFeaturesEnabled;
    public string eduProductUuid;
    public float rainLevel;
    public float lightningLevel;
    public bool hasConfirmedPlatformLockedContent;
    public bool isMultiplayer;
    public bool broadcastToLan;
    public int xboxLiveBroadcastMode;
    public int platformBroadcastMode;
    public bool enableCommands;
    public bool isTexturepacksRequired;
    public GameRules gamerules;
    public Experiments experiments;
    public bool bonusChest;
    public bool mapEnabled;
    public int permissionLevel;
    public int serverChunkTickRange;
    public bool hasLockedBehaviorPack;
    public bool hasLockedResourcePack;
    public bool isFromLockedWorldTemplate;
    public bool useMsaGamertagsOnly;
    public bool isFromWorldTemplate;
    public bool isWorldTemplateOptionLocked;
    public bool onlySpawnV1Villagers;
    public string gameVersion;
    public int limitedWorldWidth;
    public int limitedWorldLength;
    public bool isNewNether;
    public EducationUriResource eduSharedUriResource;
    public bool experimentalGameplayOverride;
    public void Write(Packet packet);
    public void Read(Packet packet);
}
public class MiNET.Net.McpeAddBehaviorTree : Packet`1<McpeAddBehaviorTree> {
    public string behaviortree;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAddEntity : Packet`1<McpeAddEntity> {
    public long entityIdSelf;
    public long runtimeEntityId;
    public string entityType;
    public float x;
    public float y;
    public float z;
    public float speedX;
    public float speedY;
    public float speedZ;
    public float pitch;
    public float yaw;
    public float headYaw;
    public EntityAttributes attributes;
    public MetadataDictionary metadata;
    public EntityLinks links;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAddItemEntity : Packet`1<McpeAddItemEntity> {
    public long entityIdSelf;
    public long runtimeEntityId;
    public Item item;
    public float x;
    public float y;
    public float z;
    public float speedX;
    public float speedY;
    public float speedZ;
    public MetadataDictionary metadata;
    public bool isFromFishing;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAddPainting : Packet`1<McpeAddPainting> {
    public long entityIdSelf;
    public long runtimeEntityId;
    public BlockCoordinates coordinates;
    public int direction;
    public string title;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAddPlayer : Packet`1<McpeAddPlayer> {
    public UUID uuid;
    public string username;
    public long entityIdSelf;
    public long runtimeEntityId;
    public string platformChatId;
    public float x;
    public float y;
    public float z;
    public float speedX;
    public float speedY;
    public float speedZ;
    public float pitch;
    public float yaw;
    public float headYaw;
    public Item item;
    public UInt32 gameType;
    public MetadataDictionary metadata;
    public UInt32 flags;
    public UInt32 commandPermission;
    public UInt32 actionPermissions;
    public UInt32 permissionLevel;
    public UInt32 customStoredPermissions;
    public long userId;
    public EntityLinks links;
    public string deviceId;
    public int deviceOs;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAdventureSettings : Packet`1<McpeAdventureSettings> {
    public UInt32 flags;
    public UInt32 commandPermission;
    public UInt32 actionPermissions;
    public UInt32 permissionLevel;
    public UInt32 customStoredPermissions;
    public long entityUniqueId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAlexEntityAnimation : Packet`1<McpeAlexEntityAnimation> {
    public long runtimeEntityId;
    public string boneId;
    public AnimationKey[] keys;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAnimate : Packet`1<McpeAnimate> {
    public int actionId;
    public long runtimeEntityId;
    public float unknownFloat;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeAvailableCommands : Packet`1<McpeAvailableCommands> {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private CommandSet <CommandSet>k__BackingField;
    public CommandSet CommandSet { get; public set; }
    private static McpeAvailableCommands();
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    [CompilerGeneratedAttribute]
public CommandSet get_CommandSet();
    [CompilerGeneratedAttribute]
public void set_CommandSet(CommandSet value);
    private int GetParameterTypeId(string type);
    private string GetParameterTypeName(int type);
}
public class MiNET.Net.McpeAvailableEntityIdentifiers : Packet`1<McpeAvailableEntityIdentifiers> {
    public Nbt namedtag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeBiomeDefinitionList : Packet`1<McpeBiomeDefinitionList> {
    public Nbt namedtag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeBlockEntityData : Packet`1<McpeBlockEntityData> {
    public BlockCoordinates coordinates;
    public Nbt namedtag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeBlockEvent : Packet`1<McpeBlockEvent> {
    public BlockCoordinates coordinates;
    public int case1;
    public int case2;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeBlockPickRequest : Packet`1<McpeBlockPickRequest> {
    public int x;
    public int y;
    public int z;
    public bool addUserData;
    public byte selectedSlot;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeBookEdit : Packet`1<McpeBookEdit> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeBossEvent : Packet`1<McpeBossEvent> {
    public long bossEntityId;
    public UInt32 eventType;
    public ushort unknown6;
    public string title;
    public float healthPercent;
    public long playerId;
    public UInt32 color;
    public UInt32 overlay;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public virtual void Reset();
}
public class MiNET.Net.McpeCamera : Packet`1<McpeCamera> {
    public long unknown1;
    public long unknown2;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeChangeDimension : Packet`1<McpeChangeDimension> {
    public int dimension;
    public Vector3 position;
    public bool respawn;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeChunkRadiusUpdate : Packet`1<McpeChunkRadiusUpdate> {
    public int chunkRadius;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeClientboundMapItemData : Packet`1<McpeClientboundMapItemData> {
    public MapInfo mapinfo;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeClientCacheBlobStatus : Packet`1<McpeClientCacheBlobStatus> {
    public UInt64[] hashMisses;
    public UInt64[] hashHits;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public void WriteSpecial(UInt64[] values);
    public UInt64[] ReadUlongsSpecial(UInt32 len);
}
public class MiNET.Net.McpeClientCacheMissResponse : Packet`1<McpeClientCacheMissResponse> {
    private static ILog Log;
    public Dictionary`2<ulong, Byte[]> blobs;
    private static McpeClientCacheMissResponse();
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeClientCacheStatus : Packet`1<McpeClientCacheStatus> {
    public bool enabled;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeClientMessageDispatcher : object {
    private IMcpeClientMessageHandler _messageHandler;
    public McpeClientMessageDispatcher(IMcpeClientMessageHandler messageHandler);
    public bool HandlePacket(Packet message);
}
public class MiNET.Net.McpeClientToServerHandshake : Packet`1<McpeClientToServerHandshake> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeCommandBlockUpdate : Packet`1<McpeCommandBlockUpdate> {
    public bool isBlock;
    public BlockCoordinates coordinates;
    public UInt32 commandBlockMode;
    public bool isRedstoneMode;
    public bool isConditional;
    public long minecartEntityId;
    public string command;
    public string lastOutput;
    public string name;
    public bool shouldTrackOutput;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public virtual void Reset();
}
public class MiNET.Net.McpeCommandOutput : Packet`1<McpeCommandOutput> {
    [CompilerGeneratedAttribute]
private CommandOriginData <OriginData>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOutputType <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SuccessCount>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOutputMessage[] <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnknownString>k__BackingField;
    public CommandOriginData OriginData { get; public set; }
    public CommandOutputType OutputType { get; public set; }
    public UInt32 SuccessCount { get; public set; }
    public CommandOutputMessage[] Messages { get; public set; }
    public string UnknownString { get; public set; }
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    [CompilerGeneratedAttribute]
public CommandOriginData get_OriginData();
    [CompilerGeneratedAttribute]
public void set_OriginData(CommandOriginData value);
    [CompilerGeneratedAttribute]
public CommandOutputType get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(CommandOutputType value);
    [CompilerGeneratedAttribute]
public UInt32 get_SuccessCount();
    [CompilerGeneratedAttribute]
public void set_SuccessCount(UInt32 value);
    [CompilerGeneratedAttribute]
public CommandOutputMessage[] get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(CommandOutputMessage[] value);
    [CompilerGeneratedAttribute]
public string get_UnknownString();
    [CompilerGeneratedAttribute]
public void set_UnknownString(string value);
    private CommandOriginData ReadOriginData();
    private CommandOutputMessage ReadCommandOutputMessage();
}
public class MiNET.Net.McpeCommandRequest : Packet`1<McpeCommandRequest> {
    public string command;
    public UInt32 commandType;
    public UUID unknownUuid;
    public string requestId;
    public bool unknown;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeContainerClose : Packet`1<McpeContainerClose> {
    public byte windowId;
    public bool server;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeContainerOpen : Packet`1<McpeContainerOpen> {
    public byte windowId;
    public byte type;
    public BlockCoordinates coordinates;
    public long runtimeEntityId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeContainerSetData : Packet`1<McpeContainerSetData> {
    public byte windowId;
    public int property;
    public int value;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeCraftingData : Packet`1<McpeCraftingData> {
    public Recipes recipes;
    public PotionTypeRecipe[] potionTypeRecipes;
    public PotionContainerChangeRecipe[] potionContainerRecipes;
    public MaterialReducerRecipe[] materialReducerRecipes;
    public bool isClean;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeCraftingEvent : Packet`1<McpeCraftingEvent> {
    public byte windowId;
    public int recipeType;
    public UUID recipeId;
    public ItemStacks input;
    public ItemStacks result;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeCreativeContent : Packet`1<McpeCreativeContent> {
    public CreativeItemStacks input;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeDimensionData : Packet`1<McpeDimensionData> {
    public DimensionDefinitions definitions;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeDisconnect : Packet`1<McpeDisconnect> {
    public bool hideDisconnectReason;
    public string message;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeEntityEvent : Packet`1<McpeEntityEvent> {
    public long runtimeEntityId;
    public byte eventId;
    public int data;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeEntityPickRequest : Packet`1<McpeEntityPickRequest> {
    public ulong runtimeEntityId;
    public byte selectedSlot;
    public bool addUserData;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeFilterTextPacket : Packet`1<McpeFilterTextPacket> {
    public string text;
    public bool fromServer;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeGameRulesChanged : Packet`1<McpeGameRulesChanged> {
    public GameRules rules;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeGuiDataPickItem : Packet`1<McpeGuiDataPickItem> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeHurtArmor : Packet`1<McpeHurtArmor> {
    public int cause;
    public int health;
    public long armorSlotFlags;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeInitiateWebSocketConnection : Packet`1<McpeInitiateWebSocketConnection> {
    public string server;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeInteract : Packet`1<McpeInteract> {
    public byte actionId;
    public long targetRuntimeEntityId;
    public Vector3 Position;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public virtual void Reset();
}
public class MiNET.Net.McpeInventoryContent : Packet`1<McpeInventoryContent> {
    public UInt32 inventoryId;
    public ItemStacks input;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeInventorySlot : Packet`1<McpeInventorySlot> {
    public UInt32 inventoryId;
    public UInt32 slot;
    public Item item;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeInventoryTransaction : Packet`1<McpeInventoryTransaction> {
    public Transaction transaction;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeItemComponent : Packet`1<McpeItemComponent> {
    public ItemComponentList entries;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeItemFrameDropItem : Packet`1<McpeItemFrameDropItem> {
    public BlockCoordinates coordinates;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeItemStackRequest : Packet`1<McpeItemStackRequest> {
    public ItemStackRequests requests;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeItemStackResponse : Packet`1<McpeItemStackResponse> {
    public ItemStackResponses responses;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLabTable : Packet`1<McpeLabTable> {
    public byte uselessByte;
    public int labTableX;
    public int labTableY;
    public int labTableZ;
    public byte reactionType;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLecternUpdate : Packet`1<McpeLecternUpdate> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLevelChunk : Packet`1<McpeLevelChunk> {
    public int chunkX;
    public int chunkZ;
    public UInt64[] blobHashes;
    public Byte[] chunkData;
    public bool cacheEnabled;
    public UInt32 subChunkCount;
    public SubChunkRequestMode subChunkRequestMode;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLevelEvent : Packet`1<McpeLevelEvent> {
    public int eventId;
    public Vector3 position;
    public int data;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLevelEventGeneric : Packet`1<McpeLevelEventGeneric> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLevelSoundEvent : Packet`1<McpeLevelSoundEvent> {
    public UInt32 soundId;
    public Vector3 position;
    public int blockId;
    public string entityType;
    public bool isBabyMob;
    public bool isGlobal;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLevelSoundEventOld : Packet`1<McpeLevelSoundEventOld> {
    public byte soundId;
    public Vector3 position;
    public int blockId;
    public int entityType;
    public bool isBabyMob;
    public bool isGlobal;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLevelSoundEventV2 : Packet`1<McpeLevelSoundEventV2> {
    public byte soundId;
    public Vector3 position;
    public int blockId;
    public string entityType;
    public bool isBabyMob;
    public bool isGlobal;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeLogin : Packet`1<McpeLogin> {
    public int protocolVersion;
    public Byte[] payload;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMapCreateLockedCopy : Packet`1<McpeMapCreateLockedCopy> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMapInfoRequest : Packet`1<McpeMapInfoRequest> {
    public long mapId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMobArmorEquipment : Packet`1<McpeMobArmorEquipment> {
    public long runtimeEntityId;
    public Item helmet;
    public Item chestplate;
    public Item leggings;
    public Item boots;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMobEffect : Packet`1<McpeMobEffect> {
    public long runtimeEntityId;
    public byte eventId;
    public int effectId;
    public int amplifier;
    public bool particles;
    public int duration;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMobEquipment : Packet`1<McpeMobEquipment> {
    public long runtimeEntityId;
    public Item item;
    public byte slot;
    public byte selectedSlot;
    public byte windowsId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeModalFormRequest : Packet`1<McpeModalFormRequest> {
    public UInt32 formId;
    public string data;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeModalFormResponse : Packet`1<McpeModalFormResponse> {
    public UInt32 formId;
    public string data;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMoveEntity : Packet`1<McpeMoveEntity> {
    public long runtimeEntityId;
    public byte flags;
    public PlayerLocation position;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeMoveEntityDelta : Packet`1<McpeMoveEntityDelta> {
    public long runtimeEntityId;
    public ushort flags;
    private static ILog Log;
    public static int HasX;
    public static int HasY;
    public static int HasZ;
    public static int HasRotX;
    public static int HasRotY;
    public static int HasRotZ;
    public static int OnGround;
    public PlayerLocation currentPosition;
    public PlayerLocation prevSentPosition;
    public bool isOnGround;
    private float _dX;
    private float _dY;
    private float _dZ;
    private static McpeMoveEntityDelta();
    protected virtual void EncodePacket();
    private void BeforeEncode();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public bool SetFlags();
    public PlayerLocation GetCurrentPosition(PlayerLocation previousPosition);
}
public class MiNET.Net.McpeMovePlayer : Packet`1<McpeMovePlayer> {
    public long runtimeEntityId;
    public float x;
    public float y;
    public float z;
    public float pitch;
    public float yaw;
    public float headYaw;
    public byte mode;
    public bool onGround;
    public long otherRuntimeEntityId;
    public long tick;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeNetworkChunkPublisherUpdate : Packet`1<McpeNetworkChunkPublisherUpdate> {
    public BlockCoordinates coordinates;
    public UInt32 radius;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeNetworkSettings : Packet`1<McpeNetworkSettings> {
    public byte unknown;
    public byte compressionThreshold;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeNetworkStackLatency : Packet`1<McpeNetworkStackLatency> {
    public ulong timestamp;
    public byte unknownFlag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeNpcRequest : Packet`1<McpeNpcRequest> {
    public long runtimeEntityId;
    public byte unknown0;
    public string unknown1;
    public byte unknown2;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeOnScreenTextureAnimation : Packet`1<McpeOnScreenTextureAnimation> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePacketViolationWarning : Packet`1<McpePacketViolationWarning> {
    public int violationType;
    public int severity;
    public int packetId;
    public string reason;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePhotoTransfer : Packet`1<McpePhotoTransfer> {
    public string fileName;
    public string imageData;
    public string unknown2;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayerAction : Packet`1<McpePlayerAction> {
    public long runtimeEntityId;
    public int actionId;
    public BlockCoordinates coordinates;
    public int face;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayerAuthInput : Packet`1<McpePlayerAuthInput> {
    public float Pitch;
    public float Yaw;
    public float HeadYaw;
    public Vector3 Position;
    public Vector2 MoveVector;
    public AuthInputFlags InputFlags;
    public PlayerInputMode InputMode;
    public PlayerPlayMode PlayMode;
    public Vector3 GazeDirection;
    public long Tick;
    public Vector3 Delta;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public virtual void Reset();
}
public class MiNET.Net.McpePlayerEnchantOptions : Packet`1<McpePlayerEnchantOptions> {
    public EnchantOptions enchantOptions;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayerHotbar : Packet`1<McpePlayerHotbar> {
    public UInt32 selectedSlot;
    public byte windowId;
    public bool selectSlot;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayerInput : Packet`1<McpePlayerInput> {
    public float motionX;
    public float motionZ;
    public bool jumping;
    public bool sneaking;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayerList : Packet`1<McpePlayerList> {
    public PlayerRecords records;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayerSkin : Packet`1<McpePlayerSkin> {
    public UUID uuid;
    public Skin skin;
    public string skinName;
    public string oldSkinName;
    public bool isVerified;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlaySound : Packet`1<McpePlaySound> {
    public string name;
    public BlockCoordinates coordinates;
    public float volume;
    public float pitch;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpePlayStatus : Packet`1<McpePlayStatus> {
    public int status;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeProtocolInfo : object {
    public static int ProtocolVersion;
    public static string GameVersion;
}
public class MiNET.Net.McpePurchaseReceipt : Packet`1<McpePurchaseReceipt> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeRemoveEntity : Packet`1<McpeRemoveEntity> {
    public long entityIdSelf;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeRemoveObjective : Packet`1<McpeRemoveObjective> {
    public string objectiveName;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeRequestChunkRadius : Packet`1<McpeRequestChunkRadius> {
    public int chunkRadius;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeResourcePackChunkData : Packet`1<McpeResourcePackChunkData> {
    public string packageId;
    public UInt32 chunkIndex;
    public ulong progress;
    public Byte[] payload;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeResourcePackChunkRequest : Packet`1<McpeResourcePackChunkRequest> {
    public string packageId;
    public UInt32 chunkIndex;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeResourcePackClientResponse : Packet`1<McpeResourcePackClientResponse> {
    public byte responseStatus;
    public ResourcePackIds resourcepackids;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeResourcePackDataInfo : Packet`1<McpeResourcePackDataInfo> {
    public string packageId;
    public UInt32 maxChunkSize;
    public UInt32 chunkCount;
    public ulong compressedPackageSize;
    public Byte[] hash;
    public bool isPremium;
    public byte packType;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeResourcePacksInfo : Packet`1<McpeResourcePacksInfo> {
    public bool mustAccept;
    public bool hasScripts;
    public bool forceServerPacks;
    public ResourcePackInfos behahaviorpackinfos;
    public TexturePackInfos texturepacks;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeResourcePackStack : Packet`1<McpeResourcePackStack> {
    public bool mustAccept;
    public ResourcePackIdVersions behaviorpackidversions;
    public ResourcePackIdVersions resourcepackidversions;
    public string gameVersion;
    public Experiments experiments;
    public bool experimentsPreviouslyToggled;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeRespawn : Packet`1<McpeRespawn> {
    public float x;
    public float y;
    public float z;
    public byte state;
    public long runtimeEntityId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeRiderJump : Packet`1<McpeRiderJump> {
    public int unknown;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeScriptCustomEvent : Packet`1<McpeScriptCustomEvent> {
    public string eventName;
    public string eventData;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeServerSettingsRequest : Packet`1<McpeServerSettingsRequest> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeServerSettingsResponse : Packet`1<McpeServerSettingsResponse> {
    public long formId;
    public string data;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeServerToClientHandshake : Packet`1<McpeServerToClientHandshake> {
    public string token;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetCommandsEnabled : Packet`1<McpeSetCommandsEnabled> {
    public bool enabled;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetDefaultGameType : Packet`1<McpeSetDefaultGameType> {
    public int gamemode;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetDifficulty : Packet`1<McpeSetDifficulty> {
    public UInt32 difficulty;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetDisplayObjective : Packet`1<McpeSetDisplayObjective> {
    public string displaySlot;
    public string objectiveName;
    public string displayName;
    public string criteriaName;
    public int sortOrder;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetEntityData : Packet`1<McpeSetEntityData> {
    public long runtimeEntityId;
    public MetadataDictionary metadata;
    public long tick;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetEntityLink : Packet`1<McpeSetEntityLink> {
    public long riddenId;
    public long riderId;
    public byte linkType;
    public byte unknown;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetEntityMotion : Packet`1<McpeSetEntityMotion> {
    public long runtimeEntityId;
    public Vector3 velocity;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetHealth : Packet`1<McpeSetHealth> {
    public int health;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetLastHurtBy : Packet`1<McpeSetLastHurtBy> {
    public int unknown;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetLocalPlayerAsInitialized : Packet`1<McpeSetLocalPlayerAsInitialized> {
    public long runtimeEntityId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetPlayerGameType : Packet`1<McpeSetPlayerGameType> {
    public int gamemode;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetScore : Packet`1<McpeSetScore> {
    public ScoreEntries entries;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetScoreboardIdentity : Packet`1<McpeSetScoreboardIdentity> {
    public ScoreboardIdentityEntries entries;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetSpawnPosition : Packet`1<McpeSetSpawnPosition> {
    public int spawnType;
    public BlockCoordinates coordinates;
    public int dimension;
    public BlockCoordinates unknownCoordinates;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetTime : Packet`1<McpeSetTime> {
    public int time;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSetTitle : Packet`1<McpeSetTitle> {
    public int type;
    public string text;
    public int fadeInTime;
    public int stayTime;
    public int fadeOutTime;
    public string xuid;
    public string platformOnlineId;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeShowCredits : Packet`1<McpeShowCredits> {
    public long runtimeEntityId;
    public int status;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeShowProfile : Packet`1<McpeShowProfile> {
    public string xuid;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeShowStoreOffer : Packet`1<McpeShowStoreOffer> {
    public string unknown0;
    public bool unknown1;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSimpleEvent : Packet`1<McpeSimpleEvent> {
    public ushort eventType;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSpawnExperienceOrb : Packet`1<McpeSpawnExperienceOrb> {
    public Vector3 position;
    public int count;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSpawnParticleEffect : Packet`1<McpeSpawnParticleEffect> {
    public byte dimensionId;
    public long entityId;
    public Vector3 position;
    public string particleName;
    public string molangVariablesJson;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeStartGame : Packet`1<McpeStartGame> {
    private static ILog Log;
    public long entityIdSelf;
    public long runtimeEntityId;
    public int playerGamemode;
    public Vector3 spawn;
    public Vector2 rotation;
    public string levelId;
    public string worldName;
    public string premiumWorldTemplateId;
    public bool isTrial;
    public int movementType;
    public int movementRewindHistorySize;
    public bool enableNewBlockBreakSystem;
    public long currentTick;
    public int enchantmentSeed;
    public BlockPalette blockPalette;
    public ulong blockPaletteChecksum;
    public Itemstates itemstates;
    public string multiplayerCorrelationId;
    public bool enableNewInventorySystem;
    public string serverVersion;
    public LevelSettings levelSettings;
    private static McpeStartGame();
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public virtual void Reset();
}
public class MiNET.Net.McpeStopSound : Packet`1<McpeStopSound> {
    public string name;
    public bool stopAll;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeStructureBlockUpdate : Packet`1<McpeStructureBlockUpdate> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeStructureTemplateDataExportRequest : Packet`1<McpeStructureTemplateDataExportRequest> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeStructureTemplateDataExportResponse : Packet`1<McpeStructureTemplateDataExportResponse> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSubChunkPacket : Packet`1<McpeSubChunkPacket> {
    public bool cacheEnabled;
    public int dimension;
    public BlockCoordinates subchunkCoordinates;
    public SubChunkEntryCommon[] entries;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSubChunkRequestPacket : Packet`1<McpeSubChunkRequestPacket> {
    public int dimension;
    public BlockCoordinates basePosition;
    public SubChunkPositionOffset[] offsets;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeSubClientLogin : Packet`1<McpeSubClientLogin> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeTakeItemEntity : Packet`1<McpeTakeItemEntity> {
    public long runtimeEntityId;
    public long target;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeTelemetryEvent : Packet`1<McpeTelemetryEvent> {
    public long runtimeEntityId;
    public int eventData;
    public byte eventType;
    public Byte[] auxData;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeText : Packet`1<McpeText> {
    public byte type;
    public bool needsTranslation;
    public string source;
    public string message;
    public string xuid;
    public string platformChatId;
    public String[] parameters;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
    public virtual void Reset();
}
public class MiNET.Net.McpeTickSync : Packet`1<McpeTickSync> {
    public long requestTime;
    public long responseTime;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeTransfer : Packet`1<McpeTransfer> {
    public string serverAddress;
    public ushort port;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateAttributes : Packet`1<McpeUpdateAttributes> {
    public long runtimeEntityId;
    public PlayerAttributes attributes;
    public long tick;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateBlock : Packet`1<McpeUpdateBlock> {
    public BlockCoordinates coordinates;
    public UInt32 blockRuntimeId;
    public UInt32 blockPriority;
    public UInt32 storage;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateBlockProperties : Packet`1<McpeUpdateBlockProperties> {
    public Nbt namedtag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateBlockSynced : Packet`1<McpeUpdateBlockSynced> {
    public BlockCoordinates coordinates;
    public UInt32 blockRuntimeId;
    public UInt32 blockPriority;
    public UInt32 dataLayerId;
    public long unknown0;
    public long unknown1;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateEquipment : Packet`1<McpeUpdateEquipment> {
    public byte windowId;
    public byte windowType;
    public byte unknown;
    public long entityId;
    public Nbt namedtag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdatePlayerGameType : Packet`1<McpeUpdatePlayerGameType> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateSoftEnum : Packet`1<McpeUpdateSoftEnum> {
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateSubChunkBlocksPacket : Packet`1<McpeUpdateSubChunkBlocksPacket> {
    public BlockCoordinates subchunkCoordinates;
    public UpdateSubChunkBlocksPacketEntry[] layerZeroUpdates;
    public UpdateSubChunkBlocksPacketEntry[] layerOneUpdates;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeUpdateTrade : Packet`1<McpeUpdateTrade> {
    public byte windowId;
    public byte windowType;
    public int unknown0;
    public int unknown1;
    public int unknown2;
    public bool isWilling;
    public long traderEntityId;
    public long playerEntityId;
    public string displayName;
    public Nbt namedtag;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeVideoStreamConnect : Packet`1<McpeVideoStreamConnect> {
    public string serverUri;
    public float frameSendFrequency;
    public byte action;
    public int resolutionX;
    public int resolutionY;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.McpeWrapper : Packet`1<McpeWrapper> {
    public ReadOnlyMemory`1<byte> payload;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.NewIncomingConnection : Packet`1<NewIncomingConnection> {
    public IPEndPoint clientendpoint;
    public IPEndPoint[] systemAddresses;
    public long incomingTimestamp;
    public long serverTimestamp;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.NoFreeIncomingConnections : Packet`1<NoFreeIncomingConnections> {
    public Byte[] offlineMessageDataId;
    public long serverGuid;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.ObjectPool`1 : object {
    private static ILog Log;
    private ConcurrentQueue`1<T> _objects;
    private Func`1<T> _objectGenerator;
    private static long MaxPoolSize;
    public int Size { get; }
    public ObjectPool`1(Func`1<T> objectGenerator);
    private static ObjectPool`1();
    public int get_Size();
    public void FillPool(int count);
    public T GetObject();
    public void PutObject(T item);
}
public class MiNET.Net.OpenConnectionReply1 : Packet`1<OpenConnectionReply1> {
    public Byte[] offlineMessageDataId;
    public long serverGuid;
    public byte serverHasSecurity;
    public short mtuSize;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.OpenConnectionReply2 : Packet`1<OpenConnectionReply2> {
    public Byte[] offlineMessageDataId;
    public long serverGuid;
    public IPEndPoint clientEndpoint;
    public short mtuSize;
    public Byte[] doSecurityAndHandshake;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.OpenConnectionRequest1 : Packet`1<OpenConnectionRequest1> {
    public Byte[] offlineMessageDataId;
    public byte raknetProtocolVersion;
    public short mtuSize;
    protected virtual void EncodePacket();
    private void AfterEncode();
    protected virtual void DecodePacket();
    private void AfterDecode();
    protected virtual void ResetPacket();
}
public class MiNET.Net.OpenConnectionRequest2 : Packet`1<OpenConnectionRequest2> {
    public Byte[] offlineMessageDataId;
    public IPEndPoint remoteBindingAddress;
    public short mtuSize;
    public long clientGuid;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public abstract class MiNET.Net.Packet : object {
    private static ILog Log;
    private Byte[] _encodedMessage;
    [JsonIgnoreAttribute]
public ReliabilityHeader ReliabilityHeader;
    [JsonIgnoreAttribute]
public bool ForceClear;
    [CompilerGeneratedAttribute]
private bool <NoBatch>k__BackingField;
    [JsonIgnoreAttribute]
public byte Id;
    [JsonIgnoreAttribute]
public bool IsMcpe;
    protected MemoryStreamReader _reader;
    private protected Stream _buffer;
    private BinaryWriter _writer;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <Timer>k__BackingField;
    private static int ShieldId;
    private static byte Shapeless;
    private static byte Shaped;
    private static byte Furnace;
    private static byte FurnaceData;
    private static byte Multi;
    private static byte ShulkerBox;
    private static byte ShapelessChemistry;
    private static byte ShapedChemistry;
    private static int MapUpdateFlagTexture;
    private static int MapUpdateFlagDecoration;
    private static int MapUpdateFlagInitialisation;
    private object _encodeSync;
    private static RecyclableMemoryStreamManager _streamManager;
    private static ConcurrentDictionary`2<int, bool> _isLob;
    [JsonIgnoreAttribute]
public bool NoBatch { get; public set; }
    [JsonIgnoreAttribute]
public ReadOnlyMemory`1<byte> Bytes { get; private set; }
    [JsonIgnoreAttribute]
public Stopwatch Timer { get; }
    private static Packet();
    [CompilerGeneratedAttribute]
public bool get_NoBatch();
    [CompilerGeneratedAttribute]
public void set_NoBatch(bool value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Bytes();
    [CompilerGeneratedAttribute]
private void set_Bytes(ReadOnlyMemory`1<byte> value);
    [CompilerGeneratedAttribute]
public Stopwatch get_Timer();
    public void Write(byte value);
    public byte ReadByte();
    public void Write(bool value);
    public bool ReadBool();
    public void Write(Memory`1<byte> value);
    public void Write(ReadOnlyMemory`1<byte> value);
    public void Write(Byte[] value);
    public ReadOnlyMemory`1<byte> Slice(int count);
    public ReadOnlyMemory`1<byte> ReadReadOnlyMemory(int count, bool slurp);
    public Byte[] ReadBytes(int count, bool slurp);
    public void WriteByteArray(Byte[] value);
    public Byte[] ReadByteArray(bool slurp);
    public void Write(UInt64[] value);
    public UInt64[] ReadUlongs(bool slurp);
    public void Write(short value, bool bigEndian);
    public short ReadShort(bool bigEndian);
    public void Write(ushort value, bool bigEndian);
    public ushort ReadUshort(bool bigEndian);
    public void WriteBe(short value);
    public short ReadShortBe();
    public void Write(Int24 value);
    public Int24 ReadLittle();
    public void Write(int value, bool bigEndian);
    public int ReadInt(bool bigEndian);
    public void WriteBe(int value);
    public int ReadIntBe();
    public void Write(UInt32 value);
    public UInt32 ReadUint();
    public void WriteVarInt(int value);
    public int ReadVarInt();
    public void WriteSignedVarInt(int value);
    public int ReadSignedVarInt();
    public void WriteUnsignedVarInt(UInt32 value);
    public UInt32 ReadUnsignedVarInt();
    public int ReadLength();
    public void WriteLength(int value);
    public void WriteVarLong(long value);
    public long ReadVarLong();
    public void WriteEntityId(long value);
    public void WriteSignedVarLong(long value);
    public long ReadSignedVarLong();
    public void WriteRuntimeEntityId(long value);
    public void WriteUnsignedVarLong(long value);
    public long ReadUnsignedVarLong();
    public void Write(long value);
    public long ReadLong();
    public void Write(ulong value);
    public ulong ReadUlong();
    public void Write(float value);
    public float ReadFloat();
    public void Write(string value);
    public string ReadString();
    public void WriteFixedString(string value);
    public string ReadFixedString();
    public void Write(Vector2 vec);
    public Vector2 ReadVector2();
    public void Write(Vector3 vec);
    public Vector3 ReadVector3();
    public void Write(BlockCoordinates coord);
    public BlockCoordinates ReadBlockCoordinates();
    public void Write(PlayerRecords records);
    public PlayerRecords ReadPlayerRecords();
    public void Write(Records records);
    public Records ReadRecords();
    public void Write(PlayerLocation location);
    public PlayerLocation ReadPlayerLocation();
    public void Write(IPEndPoint endpoint);
    public IPEndPoint ReadIPEndPoint();
    public void Write(IPEndPoint[] endpoints);
    public IPEndPoint[] ReadIPEndPoints(int count);
    public void Write(UUID uuid);
    public UUID ReadUUID();
    public void Write(Nbt nbt);
    public static void Write(Nbt nbt, Stream stream, bool useVarInt);
    public Nbt ReadNbt();
    public static Nbt ReadNbt(Stream stream, bool allowAlternativeRootTag, bool useVarInt);
    public static NbtCompound ReadNbtCompound(Stream stream, bool useVarInt);
    public void Write(MetadataInts metadata);
    public MetadataInts ReadMetadataInts();
    public void Write(CreativeItemStacks itemStacks);
    public CreativeItemStacks ReadCreativeItemStacks();
    public void Write(ItemStacks itemStacks);
    public ItemStacks ReadItemStacks();
    public void Write(Transaction transaction);
    public Transaction ReadTransaction();
    public StackRequestSlotInfo ReadStackRequestSlotInfo();
    public void Write(StackRequestSlotInfo slotInfo);
    public void Write(ItemStackRequests requests);
    public ItemStackRequests ReadItemStackRequests();
    public void Write(ItemStackResponses responses);
    public ItemStackResponses ReadItemStackResponses();
    public void Write(ItemComponentList list);
    public ItemComponentList ReadItemComponentList();
    public void Write(EnchantOptions options);
    private void WriteEnchants(List`1<Enchant> enchants);
    private List`1<Enchant> ReadEnchants();
    public EnchantOptions ReadEnchantOptions();
    public void Write(AnimationKey[] keys);
    public AnimationKey[] ReadAnimationKeys();
    private ItemStacks ReadItems();
    public void Write(Item stack, bool writeUniqueId);
    public Item ReadItem(bool readUniqueId);
    public static Byte[] GetNbtData(NbtCompound nbtCompound, bool useVarInt);
    public void Write(MetadataDictionary metadata);
    public MetadataDictionary ReadMetadataDictionary();
    public PlayerAttributes ReadPlayerAttributes();
    public void Write(PlayerAttributes attributes);
    public GameRules ReadGameRules();
    public void Write(GameRules gameRules);
    public void Write(EntityAttributes attributes);
    public EntityAttributes ReadEntityAttributes();
    public Itemstates ReadItemstates();
    public void Write(Itemstates itemstates);
    public BlockPalette ReadBlockPalette();
    [IteratorStateMachineAttribute("MiNET.Net.Packet/<GetBlockStates>d__136")]
private IEnumerable`1<IBlockState> GetBlockStates(NbtTag tag);
    [IteratorStateMachineAttribute("MiNET.Net.Packet/<GetBlockStatesFromCompound>d__137")]
private IEnumerable`1<IBlockState> GetBlockStatesFromCompound(NbtCompound list);
    [IteratorStateMachineAttribute("MiNET.Net.Packet/<GetBlockStatesFromList>d__138")]
private IEnumerable`1<IBlockState> GetBlockStatesFromList(NbtList list);
    private bool TryGetStateFromTag(NbtTag tag, IBlockState& state);
    public void Write(BlockPalette palette);
    public void Write(EntityLink link);
    public EntityLink ReadEntityLink();
    public void Write(EntityLinks links);
    public EntityLinks ReadEntityLinks();
    public void Write(Rules rules);
    public Rules ReadRules();
    public void Write(TexturePackInfos packInfos);
    public TexturePackInfos ReadTexturePackInfos();
    public void Write(ResourcePackInfos packInfos);
    public ResourcePackInfos ReadResourcePackInfos();
    public void Write(ResourcePackIdVersions packInfos);
    public ResourcePackIdVersions ReadResourcePackIdVersions();
    public void Write(ResourcePackIds ids);
    public ResourcePackIds ReadResourcePackIds();
    public void Write(Skin skin);
    public Skin ReadSkin();
    public void Write(Recipes recipes);
    public Recipes ReadRecipes();
    public void WriteRecipeIngredient(Item stack);
    public Item ReadRecipeIngredient();
    public void Write(PotionContainerChangeRecipe[] recipes);
    public PotionContainerChangeRecipe[] ReadPotionContainerChangeRecipes();
    public void Write(MaterialReducerRecipe[] reducerRecipes);
    public MaterialReducerRecipe[] ReadMaterialReducerRecipes();
    public void Write(PotionTypeRecipe[] recipes);
    public PotionTypeRecipe[] ReadPotionTypeRecipes();
    public void Write(MapInfo map);
    public MapInfo ReadMapInfo();
    public void Write(ScoreEntries list);
    public ScoreEntries ReadScoreEntries();
    public void Write(ScoreboardIdentityEntries list);
    public ScoreboardIdentityEntries ReadScoreboardIdentityEntries();
    public Experiments ReadExperiments();
    public void Write(Experiments experiments);
    public void Write(EducationUriResource resource);
    public EducationUriResource ReadEducationUriResource();
    public void Write(UpdateSubChunkBlocksPacketEntry entry);
    public UpdateSubChunkBlocksPacketEntry ReadUpdateSubChunkBlocksPacketEntry();
    public void Write(UpdateSubChunkBlocksPacketEntry[] entries);
    public UpdateSubChunkBlocksPacketEntry[] ReadUpdateSubChunkBlocksPacketEntrys();
    public void Write(HeightMapData data);
    public HeightMapData ReadHeightMapData();
    public void Write(SubChunkPositionOffset offset);
    public SubChunkPositionOffset ReadSubChunkPositionOffset();
    public void Write(SubChunkPositionOffset[] offsets);
    public SubChunkPositionOffset[] ReadSubChunkPositionOffsets();
    public DimensionData ReadDimensionData();
    public void Write(DimensionData data);
    public void Write(DimensionDefinitions definitions);
    public DimensionDefinitions ReadDimensionDefinitions();
    public bool CanRead();
    public void SetEncodedMessage(Byte[] encodedMessage);
    public virtual void Reset();
    protected virtual void ResetPacket();
    public virtual Byte[] Encode();
    protected virtual void EncodePacket();
    [ObsoleteAttribute("Use decode with ReadOnlyMemory<byte> instead.")]
public virtual Packet Decode(Byte[] buffer);
    public virtual Packet Decode(ReadOnlyMemory`1<byte> buffer);
    protected virtual void DecodePacket();
    public abstract virtual void PutPool();
    public static string HexDump(ReadOnlyMemory`1<byte> bytes, int bytesPerLine, bool printLineCount);
    private static string HexDump(ReadOnlySpan`1<byte> bytes, Int32& bytesPerLine, Boolean& printLineCount);
    public static string ToJson(Packet message);
}
public abstract class MiNET.Net.Packet`1 : Packet {
    private static ILog Log;
    private static ObjectPool`1<T> Pool;
    private bool _isPermanent;
    private bool _isPooled;
    private long _referenceCounter;
    [JsonIgnoreAttribute]
public bool IsPooled { get; }
    [JsonIgnoreAttribute]
public long ReferenceCounter { get; public set; }
    private static Packet`1();
    public bool get_IsPooled();
    public long get_ReferenceCounter();
    public void set_ReferenceCounter(long value);
    public T MarkPermanent(bool permanent);
    public T AddReferences(long numberOfReferences);
    public T AddReference(Packet`1<T> item);
    public T MakePoolable(long numberOfReferences);
    public static T CreateObject(long numberOfReferences);
    public virtual void PutPool();
    public sealed virtual void Dispose();
}
public class MiNET.Net.PacketFactory : object {
    [CompilerGeneratedAttribute]
private static ICustomPacketFactory <CustomPacketFactory>k__BackingField;
    public static ICustomPacketFactory CustomPacketFactory { get; public set; }
    [CompilerGeneratedAttribute]
public static ICustomPacketFactory get_CustomPacketFactory();
    [CompilerGeneratedAttribute]
public static void set_CustomPacketFactory(ICustomPacketFactory value);
    public static Packet Create(byte messageId, ReadOnlyMemory`1<byte> buffer, string ns);
}
public enum MiNET.Net.PermissionLevel : Enum {
    public int value__;
    public static PermissionLevel Visitor;
    public static PermissionLevel Member;
    public static PermissionLevel Operator;
    public static PermissionLevel Custom;
}
public enum MiNET.Net.PlayerAction : Enum {
    public int value__;
    public static PlayerAction StartBreak;
    public static PlayerAction AbortBreak;
    public static PlayerAction StopBreak;
    public static PlayerAction GetUpdatedBlock;
    public static PlayerAction DropItem;
    public static PlayerAction StartSleeping;
    public static PlayerAction StopSleeping;
    public static PlayerAction Respawn;
    public static PlayerAction Jump;
    public static PlayerAction StartSprint;
    public static PlayerAction StopSprint;
    public static PlayerAction StartSneak;
    public static PlayerAction StopSneak;
    public static PlayerAction CreativeDestroy;
    public static PlayerAction DimensionChangeAck;
    public static PlayerAction StartGlide;
    public static PlayerAction StopGlide;
    public static PlayerAction WorldImmutable;
    public static PlayerAction Breaking;
    public static PlayerAction ChangeSkin;
    public static PlayerAction SetEnchantmentSeed;
    public static PlayerAction StartSwimming;
    public static PlayerAction StopSwimming;
    public static PlayerAction StartSpinAttack;
    public static PlayerAction StopSpinAttack;
    public static PlayerAction InteractBlock;
    public static PlayerAction PredictDestroyBlock;
    public static PlayerAction ContinueDestroyBlock;
}
public class MiNET.Net.RakNet.Ack : Packet`1<Ack> {
    public List`1<ValueTuple`2<int, int>> ranges;
    protected virtual void DecodePacket();
}
public class MiNET.Net.RakNet.Acks : Packet`1<Acks> {
    public List`1<int> acks;
    public virtual void Reset();
    protected virtual void EncodePacket();
    public static List`1<Tuple`2<int, int>> Slize(List`1<int> acks);
}
public class MiNET.Net.RakNet.ConnectionInfo : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<IPEndPoint, RakSession> <RakSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEmulator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAck>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfPlayers>k__BackingField;
    public long NumberOfAckReceive;
    public long NumberOfNakReceive;
    public int NumberOfDeniedConnectionRequestsPerSecond;
    public long NumberOfAckSent;
    public long NumberOfFails;
    public long NumberOfResends;
    public long NumberOfPacketsOutPerSecond;
    public long NumberOfPacketsInPerSecond;
    public long TotalPacketSizeOutPerSecond;
    public long TotalPacketSizeInPerSecond;
    [CompilerGeneratedAttribute]
private Timer <ThroughPut>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Latency>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxNumberOfPlayers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxNumberOfConcurrentConnects>k__BackingField;
    public int ConnectionsInConnectPhase;
    private long _avgSizePerPacketIn;
    private long _avgSizePerPacketOut;
    public ConcurrentDictionary`2<IPEndPoint, RakSession> RakSessions { get; public set; }
    public bool IsEmulator { get; public set; }
    public bool DisableAck { get; public set; }
    public int NumberOfPlayers { get; public set; }
    public Timer ThroughPut { get; public set; }
    public long Latency { get; public set; }
    public int MaxNumberOfPlayers { get; public set; }
    public int MaxNumberOfConcurrentConnects { get; public set; }
    public ConnectionInfo(ConcurrentDictionary`2<IPEndPoint, RakSession> rakSessions);
    private static ConnectionInfo();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<IPEndPoint, RakSession> get_RakSessions();
    [CompilerGeneratedAttribute]
public void set_RakSessions(ConcurrentDictionary`2<IPEndPoint, RakSession> value);
    [CompilerGeneratedAttribute]
public bool get_IsEmulator();
    [CompilerGeneratedAttribute]
public void set_IsEmulator(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAck();
    [CompilerGeneratedAttribute]
public void set_DisableAck(bool value);
    [CompilerGeneratedAttribute]
public int get_NumberOfPlayers();
    [CompilerGeneratedAttribute]
public void set_NumberOfPlayers(int value);
    [CompilerGeneratedAttribute]
public Timer get_ThroughPut();
    [CompilerGeneratedAttribute]
public void set_ThroughPut(Timer value);
    [CompilerGeneratedAttribute]
public long get_Latency();
    [CompilerGeneratedAttribute]
public void set_Latency(long value);
    [CompilerGeneratedAttribute]
public int get_MaxNumberOfPlayers();
    [CompilerGeneratedAttribute]
public void set_MaxNumberOfPlayers(int value);
    [CompilerGeneratedAttribute]
public int get_MaxNumberOfConcurrentConnects();
    [CompilerGeneratedAttribute]
public void set_MaxNumberOfConcurrentConnects(int value);
    internal void Stop();
    protected virtual void CreateCounters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__46_0(object state);
}
public class MiNET.Net.RakNet.Datagram : Packet`1<Datagram> {
    private static ILog Log;
    private int _currentSize;
    [CompilerGeneratedAttribute]
private long <RetransmissionTimeOut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetransmitImmediate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransmissionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DatagramHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MessagePart> <MessageParts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Packet> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirstMessageId>k__BackingField;
    public long RetransmissionTimeOut { get; public set; }
    public bool RetransmitImmediate { get; public set; }
    public int TransmissionCount { get; public set; }
    public DatagramHeader Header { get; private set; }
    public List`1<MessagePart> MessageParts { get; public set; }
    public List`1<Packet> Messages { get; public set; }
    public int FirstMessageId { get; public set; }
    private static Datagram();
    [CompilerGeneratedAttribute]
public long get_RetransmissionTimeOut();
    [CompilerGeneratedAttribute]
public void set_RetransmissionTimeOut(long value);
    [CompilerGeneratedAttribute]
public bool get_RetransmitImmediate();
    [CompilerGeneratedAttribute]
public void set_RetransmitImmediate(bool value);
    [CompilerGeneratedAttribute]
public int get_TransmissionCount();
    [CompilerGeneratedAttribute]
public void set_TransmissionCount(int value);
    [CompilerGeneratedAttribute]
public DatagramHeader get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(DatagramHeader value);
    [CompilerGeneratedAttribute]
public List`1<MessagePart> get_MessageParts();
    [CompilerGeneratedAttribute]
public void set_MessageParts(List`1<MessagePart> value);
    [CompilerGeneratedAttribute]
public List`1<Packet> get_Messages();
    [CompilerGeneratedAttribute]
public void set_Messages(List`1<Packet> value);
    protected virtual void DecodePacket();
    public virtual Byte[] Encode();
    public long GetEncoded(Byte[]& buffer);
    public virtual void Reset();
    public bool TryAddMessagePart(MessagePart messagePart, int mtuSize);
    [CompilerGeneratedAttribute]
public int get_FirstMessageId();
    [CompilerGeneratedAttribute]
public void set_FirstMessageId(int value);
    [IteratorStateMachineAttribute("MiNET.Net.RakNet.Datagram/<CreateDatagrams>d__36")]
public static IEnumerable`1<Datagram> CreateDatagrams(List`1<Packet> messages, int mtuSize, RakSession session);
    [IteratorStateMachineAttribute("MiNET.Net.RakNet.Datagram/<CreateDatagrams>d__37")]
public static IEnumerable`1<Datagram> CreateDatagrams(Packet message, int mtuSize, RakSession session);
    private static List`1<MessagePart> CreateMessageParts(Packet message, int mtuSize, RakSession session);
    private static int GetHeaderSize(ReliabilityHeader reliabilityHeader, bool split);
    private static List`1<ValueTuple`2<int, int>> ArraySplit(int length, int intBufferLength);
}
public class MiNET.Net.RakNet.DatagramHeader : object {
    [CompilerGeneratedAttribute]
private bool <IsAck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNak>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPacketPair>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBAndAs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContinuousSend>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsBAndAs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    public Int24 DatagramSequenceNumber;
    public bool IsAck { get; public set; }
    public bool IsNak { get; public set; }
    public bool IsPacketPair { get; public set; }
    public bool HasBAndAs { get; public set; }
    public bool IsContinuousSend { get; public set; }
    public bool NeedsBAndAs { get; public set; }
    public bool IsValid { get; public set; }
    public DatagramHeader(byte header);
    [CompilerGeneratedAttribute]
public bool get_IsAck();
    [CompilerGeneratedAttribute]
public void set_IsAck(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNak();
    [CompilerGeneratedAttribute]
public void set_IsNak(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPacketPair();
    [CompilerGeneratedAttribute]
public void set_IsPacketPair(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasBAndAs();
    [CompilerGeneratedAttribute]
public void set_HasBAndAs(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsContinuousSend();
    [CompilerGeneratedAttribute]
public void set_IsContinuousSend(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsBAndAs();
    [CompilerGeneratedAttribute]
public void set_NeedsBAndAs(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    public void Reset();
    public static byte op_Implicit(DatagramHeader h);
}
public class MiNET.Net.RakNet.DefaultMessageHandler : object {
    private static ILog Log;
    private static DefaultMessageHandler();
    public sealed virtual void Connected();
    public sealed virtual void Disconnect(string reason, bool sendDisconnect);
    public sealed virtual void HandlePacket(Packet message);
    public sealed virtual Packet HandleOrderedSend(Packet packet);
    public sealed virtual List`1<Packet> PrepareSend(List`1<Packet> packetsToSend);
}
public enum MiNET.Net.RakNet.DefaultMessageIdTypes : Enum {
    public byte value__;
    public static DefaultMessageIdTypes ID_CONNECTED_PING;
    public static DefaultMessageIdTypes ID_UNCONNECTED_PING;
    public static DefaultMessageIdTypes ID_UNCONNECTED_PING_OPEN_CONNECTIONS;
    public static DefaultMessageIdTypes ID_CONNECTED_PONG;
    public static DefaultMessageIdTypes ID_DETECT_LOST_CONNECTIONS;
    public static DefaultMessageIdTypes ID_OPEN_CONNECTION_REQUEST_1;
    public static DefaultMessageIdTypes ID_OPEN_CONNECTION_REPLY_1;
    public static DefaultMessageIdTypes ID_OPEN_CONNECTION_REQUEST_2;
    public static DefaultMessageIdTypes ID_OPEN_CONNECTION_REPLY_2;
    public static DefaultMessageIdTypes ID_CONNECTION_REQUEST;
    public static DefaultMessageIdTypes ID_REMOTE_SYSTEM_REQUIRES_PUBLIC_KEY;
    public static DefaultMessageIdTypes ID_OUR_SYSTEM_REQUIRES_SECURITY;
    public static DefaultMessageIdTypes ID_PUBLIC_KEY_MISMATCH;
    public static DefaultMessageIdTypes ID_OUT_OF_BAND_INTERNAL;
    public static DefaultMessageIdTypes ID_SND_RECEIPT_ACKED;
    public static DefaultMessageIdTypes ID_SND_RECEIPT_LOSS;
    public static DefaultMessageIdTypes ID_CONNECTION_REQUEST_ACCEPTED;
    public static DefaultMessageIdTypes ID_CONNECTION_ATTEMPT_FAILED;
    public static DefaultMessageIdTypes ID_ALREADY_CONNECTED;
    public static DefaultMessageIdTypes ID_NEW_INCOMING_CONNECTION;
    public static DefaultMessageIdTypes ID_NO_FREE_INCOMING_CONNECTIONS;
    public static DefaultMessageIdTypes ID_DISCONNECTION_NOTIFICATION;
    public static DefaultMessageIdTypes ID_CONNECTION_LOST;
    public static DefaultMessageIdTypes ID_CONNECTION_BANNED;
    public static DefaultMessageIdTypes ID_INVALID_PASSWORD;
    public static DefaultMessageIdTypes ID_INCOMPATIBLE_PROTOCOL_VERSION;
    public static DefaultMessageIdTypes ID_IP_RECENTLY_CONNECTED;
    public static DefaultMessageIdTypes ID_TIMESTAMP;
    public static DefaultMessageIdTypes ID_UNCONNECTED_PONG;
    public static DefaultMessageIdTypes ID_ADVERTISE_SYSTEM;
    public static DefaultMessageIdTypes ID_DOWNLOAD_PROGRESS;
    public static DefaultMessageIdTypes ID_REMOTE_DISCONNECTION_NOTIFICATION;
    public static DefaultMessageIdTypes ID_REMOTE_CONNECTION_LOST;
    public static DefaultMessageIdTypes ID_REMOTE_NEW_INCOMING_CONNECTION;
    public static DefaultMessageIdTypes ID_FILE_LIST_TRANSFER_HEADER;
    public static DefaultMessageIdTypes ID_FILE_LIST_TRANSFER_FILE;
    public static DefaultMessageIdTypes ID_FILE_LIST_REFERENCE_PUSH_ACK;
    public static DefaultMessageIdTypes ID_DDT_DOWNLOAD_REQUEST;
    public static DefaultMessageIdTypes ID_TRANSPORT_STRING;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_CONSTRUCTION;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_SCOPE_CHANGE;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_SERIALIZE;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_DOWNLOAD_STARTED;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_DOWNLOAD_COMPLETE;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_3_SERIALIZE_CONSTRUCTION_EXISTING;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_3_LOCAL_CONSTRUCTION_REJECTED;
    public static DefaultMessageIdTypes ID_REPLICA_MANAGER_3_LOCAL_CONSTRUCTION_ACCEPTED;
    public static DefaultMessageIdTypes ID_RAKVOICE_OPEN_CHANNEL_REQUEST;
    public static DefaultMessageIdTypes ID_RAKVOICE_OPEN_CHANNEL_REPLY;
    public static DefaultMessageIdTypes ID_RAKVOICE_CLOSE_CHANNEL;
    public static DefaultMessageIdTypes ID_RAKVOICE_DATA;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_GET_CHANGELIST_SINCE_DATE;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_CREATION_LIST;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_DELETION_LIST;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_GET_PATCH;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_PATCH_LIST;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_REPOSITORY_FATAL_ERROR;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_FINISHED_INTERNAL;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_FINISHED;
    public static DefaultMessageIdTypes ID_AUTOPATCHER_RESTART_APPLICATION;
    public static DefaultMessageIdTypes ID_NAT_PUNCHTHROUGH_REQUEST;
    public static DefaultMessageIdTypes ID_NAT_CONNECT_AT_TIME;
    public static DefaultMessageIdTypes ID_NAT_GET_MOST_RECENT_PORT;
    public static DefaultMessageIdTypes ID_NAT_CLIENT_READY;
    public static DefaultMessageIdTypes ID_NAT_TARGET_NOT_CONNECTED;
    public static DefaultMessageIdTypes ID_NAT_TARGET_UNRESPONSIVE;
    public static DefaultMessageIdTypes ID_NAT_CONNECTION_TO_TARGET_LOST;
    public static DefaultMessageIdTypes ID_NAT_ALREADY_IN_PROGRESS;
    public static DefaultMessageIdTypes ID_NAT_PUNCHTHROUGH_FAILED;
    public static DefaultMessageIdTypes ID_NAT_PUNCHTHROUGH_SUCCEEDED;
    public static DefaultMessageIdTypes ID_READY_EVENT_SET;
    public static DefaultMessageIdTypes ID_READY_EVENT_UNSET;
    public static DefaultMessageIdTypes ID_READY_EVENT_ALL_SET;
    public static DefaultMessageIdTypes ID_READY_EVENT_QUERY;
    public static DefaultMessageIdTypes ID_LOBBY_GENERAL;
    public static DefaultMessageIdTypes ID_RPC_REMOTE_ERROR;
    public static DefaultMessageIdTypes ID_RPC_PLUGIN;
    public static DefaultMessageIdTypes ID_FILE_LIST_REFERENCE_PUSH;
    public static DefaultMessageIdTypes ID_READY_EVENT_FORCE_ALL_SET;
    public static DefaultMessageIdTypes ID_ROOMS_EXECUTE_FUNC;
    public static DefaultMessageIdTypes ID_ROOMS_LOGON_STATUS;
    public static DefaultMessageIdTypes ID_ROOMS_HANDLE_CHANGE;
    public static DefaultMessageIdTypes ID_LOBBY2_SEND_MESSAGE;
    public static DefaultMessageIdTypes ID_LOBBY2_SERVER_ERROR;
    public static DefaultMessageIdTypes ID_FCM2_NEW_HOST;
    public static DefaultMessageIdTypes ID_FCM2_REQUEST_FCMGUID;
    public static DefaultMessageIdTypes ID_FCM2_RESPOND_CONNECTION_COUNT;
    public static DefaultMessageIdTypes ID_FCM2_INFORM_FCMGUID;
    public static DefaultMessageIdTypes ID_UDP_PROXY_GENERAL;
    public static DefaultMessageIdTypes ID_SQLite3_EXEC;
    public static DefaultMessageIdTypes ID_SQLite3_UNKNOWN_DB;
    public static DefaultMessageIdTypes ID_SQLLITE_LOGGER;
    public static DefaultMessageIdTypes ID_NAT_TYPE_DETECTION_REQUEST;
    public static DefaultMessageIdTypes ID_NAT_TYPE_DETECTION_RESULT;
    public static DefaultMessageIdTypes ID_ROUTER_2_INTERNAL;
    public static DefaultMessageIdTypes ID_ROUTER_2_FORWARDING_NO_PATH;
    public static DefaultMessageIdTypes ID_ROUTER_2_FORWARDING_ESTABLISHED;
    public static DefaultMessageIdTypes ID_ROUTER_2_REROUTED;
    public static DefaultMessageIdTypes ID_TEAM_BALANCER_INTERNAL;
    public static DefaultMessageIdTypes ID_TEAM_BALANCER_REQUESTED_TEAM_CHANGE_PENDING;
    public static DefaultMessageIdTypes ID_TEAM_BALANCER_TEAMS_LOCKED;
    public static DefaultMessageIdTypes ID_TEAM_BALANCER_TEAM_ASSIGNED;
    public static DefaultMessageIdTypes ID_LIGHTSPEED_INTEGRATION;
    public static DefaultMessageIdTypes ID_XBOX_LOBBY;
    public static DefaultMessageIdTypes ID_TWO_WAY_AUTHENTICATION_INCOMING_CHALLENGE_SUCCESS;
    public static DefaultMessageIdTypes ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_SUCCESS;
    public static DefaultMessageIdTypes ID_TWO_WAY_AUTHENTICATION_INCOMING_CHALLENGE_FAILURE;
    public static DefaultMessageIdTypes ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_FAILURE;
    public static DefaultMessageIdTypes ID_TWO_WAY_AUTHENTICATION_OUTGOING_CHALLENGE_TIMEOUT;
    public static DefaultMessageIdTypes ID_TWO_WAY_AUTHENTICATION_NEGOTIATION;
    public static DefaultMessageIdTypes ID_CLOUD_POST_REQUEST;
    public static DefaultMessageIdTypes ID_CLOUD_RELEASE_REQUEST;
    public static DefaultMessageIdTypes ID_CLOUD_GET_REQUEST;
    public static DefaultMessageIdTypes ID_CLOUD_GET_RESPONSE;
    public static DefaultMessageIdTypes ID_CLOUD_UNSUBSCRIBE_REQUEST;
    public static DefaultMessageIdTypes ID_CLOUD_SERVER_TO_SERVER_COMMAND;
    public static DefaultMessageIdTypes ID_CLOUD_SUBSCRIPTION_NOTIFICATION;
    public static DefaultMessageIdTypes ID_RESERVED_1;
    public static DefaultMessageIdTypes ID_RESERVED_2;
    public static DefaultMessageIdTypes ID_RESERVED_3;
    public static DefaultMessageIdTypes ID_RESERVED_4;
    public static DefaultMessageIdTypes ID_RESERVED_5;
    public static DefaultMessageIdTypes ID_RESERVED_6;
    public static DefaultMessageIdTypes ID_RESERVED_7;
    public static DefaultMessageIdTypes ID_RESERVED_8;
    public static DefaultMessageIdTypes ID_RESERVED_9;
    public static DefaultMessageIdTypes ID_USER_PACKET_ENUM;
}
public interface MiNET.Net.RakNet.ICustomMessageHandler {
    public abstract virtual void Connected();
    public abstract virtual void Disconnect(string reason, bool sendDisconnect);
    public abstract virtual void HandlePacket(Packet message);
    public abstract virtual Packet HandleOrderedSend(Packet packet);
    public abstract virtual List`1<Packet> PrepareSend(List`1<Packet> packetsToSend);
}
public interface MiNET.Net.RakNet.ICustomPacketFactory {
    public abstract virtual Packet Create(byte messageId, ReadOnlyMemory`1<byte> buffer, string ns);
}
public interface MiNET.Net.RakNet.IPacketSender {
    public abstract virtual void SendData(Byte[] data, IPEndPoint targetEndPoint);
    public abstract virtual Task SendDataAsync(Byte[] data, IPEndPoint targetEndPoint);
    public abstract virtual Task SendDataAsync(Byte[] data, int length, IPEndPoint targetEndPoint);
    public abstract virtual Task SendPacketAsync(RakSession session, Packet message);
    public abstract virtual Task SendPacketAsync(RakSession session, List`1<Packet> message);
    public abstract virtual void Close(RakSession session);
}
public class MiNET.Net.RakNet.MessagePart : Packet`1<MessagePart> {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private Memory`1<byte> <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ContainedMessageId>k__BackingField;
    public Memory`1<byte> Buffer { get; public set; }
    public byte ContainedMessageId { get; public set; }
    private static MessagePart();
    [CompilerGeneratedAttribute]
public Memory`1<byte> get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(Memory`1<byte> value);
    [CompilerGeneratedAttribute]
public byte get_ContainedMessageId();
    [CompilerGeneratedAttribute]
public void set_ContainedMessageId(byte value);
    public virtual void Reset();
    protected virtual void EncodePacket();
}
public class MiNET.Net.RakNet.Nak : Packet`1<Nak> {
    public List`1<Tuple`2<int, int>> ranges;
    protected virtual void DecodePacket();
    protected virtual void EncodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.RakNet.RakConnection : object {
    private static ILog Log;
    private UdpClient _listener;
    private IPEndPoint _endpoint;
    private DedicatedThreadPool _receiveThreadPool;
    private Thread _receiveThread;
    private HighPrecisionTimer _tickerHighPrecisionTimer;
    private ConcurrentDictionary`2<IPEndPoint, RakSession> _rakSessions;
    private GreyListManager _greyListManager;
    public RakOfflineHandler _rakOfflineHandler;
    [CompilerGeneratedAttribute]
private ConnectionInfo <ConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <RemoteEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<RakSession, ICustomMessageHandler> <CustomMessageHandlerFactory>k__BackingField;
    public ConnectionInfo ConnectionInfo { get; }
    public bool FoundServer { get; }
    public bool AutoConnect { get; public set; }
    public IPEndPoint RemoteEndpoint { get; public set; }
    public string RemoteServerName { get; public set; }
    public Func`2<RakSession, ICustomMessageHandler> CustomMessageHandlerFactory { get; public set; }
    public RakConnection(GreyListManager greyListManager, MotdProvider motdProvider, DedicatedThreadPool threadPool);
    public RakConnection(IPEndPoint endpoint, GreyListManager greyListManager, MotdProvider motdProvider, DedicatedThreadPool threadPool);
    private static RakConnection();
    [CompilerGeneratedAttribute]
public ConnectionInfo get_ConnectionInfo();
    public bool get_FoundServer();
    public bool get_AutoConnect();
    public void set_AutoConnect(bool value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_RemoteEndpoint();
    [CompilerGeneratedAttribute]
public void set_RemoteEndpoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public string get_RemoteServerName();
    [CompilerGeneratedAttribute]
public void set_RemoteServerName(string value);
    [CompilerGeneratedAttribute]
public Func`2<RakSession, ICustomMessageHandler> get_CustomMessageHandlerFactory();
    [CompilerGeneratedAttribute]
public void set_CustomMessageHandlerFactory(Func`2<RakSession, ICustomMessageHandler> value);
    public void Start();
    public bool TryLocate(ValueTuple`2& serverInfo, int numberOfAttempts);
    public bool TryLocate(IPEndPoint targetEndPoint, ValueTuple`2& serverInfo, int numberOfAttempts);
    public bool TryConnect(IPEndPoint targetEndPoint, int numberOfAttempts, short mtuSize);
    private void SendUnconnectedPingInternal(IPEndPoint targetEndPoint);
    public void Stop();
    private static UdpClient CreateListener(IPEndPoint endpoint);
    public sealed virtual void Close(RakSession session);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<ReceiveDatagram>d__39")]
private void ReceiveDatagram(object state);
    private void ReceiveDatagram(ReadOnlyMemory`1<byte> receivedBytes, IPEndPoint clientEndpoint);
    private void HandleDatagram(RakSession session, Datagram datagram);
    private Packet HandleSplitMessage(RakSession session, SplitPartPacket splitPart);
    private void EnqueueAck(RakSession session, Int24 datagramSequenceNumber);
    private void HandleAck(RakSession session, Ack ack, ConnectionInfo connectionInfo);
    internal void HandleNak(RakSession session, Nak nak, ConnectionInfo connectionInfo);
    private void CalculateRto(RakSession session, Datagram datagram);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<SendTick>d__47")]
private void SendTick(object obj);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<UpdateAsync>d__48")]
internal Task UpdateAsync(RakSession session);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<SendPacketAsync>d__49")]
public sealed virtual Task SendPacketAsync(RakSession session, Packet message);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<SendPacketAsync>d__50")]
public sealed virtual Task SendPacketAsync(RakSession session, List`1<Packet> messages);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<SendDatagramAsync>d__51")]
public Task SendDatagramAsync(RakSession session, Datagram datagram);
    public sealed virtual void SendData(Byte[] data, IPEndPoint targetEndPoint);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<SendDataAsync>d__53")]
public sealed virtual Task SendDataAsync(Byte[] data, IPEndPoint targetEndPoint);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakConnection/<SendDataAsync>d__54")]
public sealed virtual Task SendDataAsync(Byte[] data, int length, IPEndPoint targetEndPoint);
}
public class MiNET.Net.RakNet.RakOfflineHandler : object {
    private static ILog Log;
    public static int UdpHeaderSize;
    [CompilerGeneratedAttribute]
private static short <MtuSize>k__BackingField;
    [CompilerGeneratedAttribute]
private static short <MaxMtuSize>k__BackingField;
    private IPacketSender _sender;
    private RakConnection _connection;
    private MotdProvider _motdProvider;
    private ConnectionInfo _connectionInfo;
    private GreyListManager _greyListManager;
    private ConcurrentDictionary`2<IPEndPoint, DateTime> _connectionAttempts;
    [CompilerGeneratedAttribute]
private long <ClientGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveServer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoConnect>k__BackingField;
    public static short MtuSize { get; public set; }
    public static short MaxMtuSize { get; }
    public long ClientGuid { get; }
    public bool HaveServer { get; public set; }
    public bool AutoConnect { get; public set; }
    internal RakOfflineHandler(RakConnection connection, IPacketSender sender, GreyListManager greyListManager, MotdProvider motdProvider, ConnectionInfo connectionInfo);
    private static RakOfflineHandler();
    [CompilerGeneratedAttribute]
public static short get_MtuSize();
    [CompilerGeneratedAttribute]
public static void set_MtuSize(short value);
    [CompilerGeneratedAttribute]
public static short get_MaxMtuSize();
    [CompilerGeneratedAttribute]
public long get_ClientGuid();
    [CompilerGeneratedAttribute]
public bool get_HaveServer();
    [CompilerGeneratedAttribute]
public void set_HaveServer(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoConnect();
    [CompilerGeneratedAttribute]
public void set_AutoConnect(bool value);
    internal void HandleOfflineRakMessage(ReadOnlyMemory`1<byte> receiveBytes, IPEndPoint senderEndpoint);
    private void HandleRakNetMessage(IPEndPoint senderEndpoint, UnconnectedPing message);
    public void HandleRakNetMessage(IPEndPoint senderEndpoint, UnconnectedPong message);
    public void SendOpenConnectionRequest1(IPEndPoint targetEndPoint, short mtuSize);
    private void HandleRakNetMessage(IPEndPoint senderEndpoint, OpenConnectionRequest1 message);
    private void HandleRakNetMessage(IPEndPoint senderEndpoint, OpenConnectionReply1 message);
    private void SendOpenConnectionRequest2(IPEndPoint targetEndPoint, short mtuSize);
    private void HandleRakNetMessage(IPEndPoint senderEndpoint, OpenConnectionRequest2 incoming);
    private void HandleRakNetMessage(IPEndPoint senderEndpoint, OpenConnectionReply2 message);
    private void SendConnectionRequest(IPEndPoint targetEndPoint, short mtuSize);
    internal static void TraceReceive(ILog log, Packet message);
    internal static void TraceSend(Packet message);
}
public class MiNET.Net.RakNet.RakSession : object {
    private static ILog Log;
    private IPacketSender _packetSender;
    private long _lastOrderingIndex;
    private AutoResetEvent _packetQueuedWaitEvent;
    private AutoResetEvent _packetHandledWaitEvent;
    private object _eventSync;
    private ConcurrentPriorityQueue`2<int, Packet> _orderingBufferQueue;
    private CancellationTokenSource _cancellationToken;
    private Thread _orderedQueueProcessingThread;
    [CompilerGeneratedAttribute]
private object <EncryptionSyncRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionInfo <ConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ICustomMessageHandler <CustomMessageHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <EndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private short <MtuSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NetworkIdentifier>k__BackingField;
    public int DatagramSequenceNumber;
    public int ReliableMessageNumber;
    public int SplitPartId;
    public int OrderingIndex;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Evicted>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WaitForAck>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResendCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Syn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Rtt>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RttVar>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Rto>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InactivityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResendThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<int, SplitPartPacket[]> <Splits>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentQueue`1<int> <OutgoingAckQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<int, Datagram> <WaitingForAckQueue>k__BackingField;
    private Queue`1<Packet> _sendQueueNotConcurrent;
    private object _queueSync;
    private int _tickCounter;
    private SemaphoreSlim _updateSync;
    private SemaphoreSlim _syncHack;
    public object EncryptionSyncRoot { get; }
    public ConnectionInfo ConnectionInfo { get; }
    public ICustomMessageHandler CustomMessageHandler { get; public set; }
    public string Username { get; public set; }
    public IPEndPoint EndPoint { get; private set; }
    public short MtuSize { get; public set; }
    public long NetworkIdentifier { get; public set; }
    public int ErrorCount { get; public set; }
    public bool Evicted { get; public set; }
    public ConnectionState State { get; public set; }
    public DateTime LastUpdatedTime { get; public set; }
    public bool WaitForAck { get; public set; }
    public int ResendCount { get; public set; }
    public long Syn { get; public set; }
    public long Rtt { get; public set; }
    public long RttVar { get; public set; }
    public long Rto { get; public set; }
    public long InactivityTimeout { get; }
    public int ResendThreshold { get; }
    public ConcurrentDictionary`2<int, SplitPartPacket[]> Splits { get; }
    public ConcurrentQueue`1<int> OutgoingAckQueue { get; }
    public ConcurrentDictionary`2<int, Datagram> WaitingForAckQueue { get; }
    public RakSession(ConnectionInfo connectionInfo, IPacketSender packetSender, IPEndPoint endPoint, short mtuSize, ICustomMessageHandler messageHandler);
    private static RakSession();
    [CompilerGeneratedAttribute]
public object get_EncryptionSyncRoot();
    [CompilerGeneratedAttribute]
public ConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
public ICustomMessageHandler get_CustomMessageHandler();
    [CompilerGeneratedAttribute]
public void set_CustomMessageHandler(ICustomMessageHandler value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_EndPoint();
    [CompilerGeneratedAttribute]
private void set_EndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public short get_MtuSize();
    [CompilerGeneratedAttribute]
public void set_MtuSize(short value);
    [CompilerGeneratedAttribute]
public long get_NetworkIdentifier();
    [CompilerGeneratedAttribute]
public void set_NetworkIdentifier(long value);
    [CompilerGeneratedAttribute]
public int get_ErrorCount();
    [CompilerGeneratedAttribute]
public void set_ErrorCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Evicted();
    [CompilerGeneratedAttribute]
public void set_Evicted(bool value);
    [CompilerGeneratedAttribute]
public ConnectionState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ConnectionState value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdatedTime();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_WaitForAck();
    [CompilerGeneratedAttribute]
public void set_WaitForAck(bool value);
    [CompilerGeneratedAttribute]
public int get_ResendCount();
    [CompilerGeneratedAttribute]
public void set_ResendCount(int value);
    [CompilerGeneratedAttribute]
public long get_Syn();
    [CompilerGeneratedAttribute]
public void set_Syn(long value);
    [CompilerGeneratedAttribute]
public long get_Rtt();
    [CompilerGeneratedAttribute]
public void set_Rtt(long value);
    [CompilerGeneratedAttribute]
public long get_RttVar();
    [CompilerGeneratedAttribute]
public void set_RttVar(long value);
    [CompilerGeneratedAttribute]
public long get_Rto();
    [CompilerGeneratedAttribute]
public void set_Rto(long value);
    [CompilerGeneratedAttribute]
public long get_InactivityTimeout();
    [CompilerGeneratedAttribute]
public int get_ResendThreshold();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<int, SplitPartPacket[]> get_Splits();
    [CompilerGeneratedAttribute]
public ConcurrentQueue`1<int> get_OutgoingAckQueue();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<int, Datagram> get_WaitingForAckQueue();
    internal void HandleRakMessage(Packet message);
    public void AddToSequencedChannel(Packet message);
    public void AddToOrderedChannel(Packet message);
    private void ProcessOrderedQueue();
    private void HandlePacket(Packet message);
    private void HandleConnectedPong(ConnectedPong connectedPong);
    protected virtual void HandleConnectedPing(ConnectedPing message);
    protected virtual void HandleConnectionRequest(ConnectionRequest message);
    protected virtual void HandleNewIncomingConnection(NewIncomingConnection message);
    private void HandleConnectionRequestAccepted(ConnectionRequestAccepted message);
    public void SendNewIncomingConnection();
    protected virtual void HandleDisconnectionNotification();
    public virtual void Disconnect(string reason, bool sendDisconnect);
    public void DetectLostConnection();
    public sealed virtual void SendPacket(Packet packet);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakSession/<SendTickAsync>d__113")]
public Task SendTickAsync(RakConnection connection);
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakSession/<UpdateAsync>d__115")]
private Task UpdateAsync();
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakSession/<SendAckQueueAsync>d__116")]
private Task SendAckQueueAsync();
    [AsyncStateMachineAttribute("MiNET.Net.RakNet.RakSession/<SendQueueAsync>d__118")]
public Task SendQueueAsync(int millisecondsWait);
    public sealed virtual void SendDirectPacket(Packet packet);
    public sealed virtual IPEndPoint GetClientEndPoint();
    public sealed virtual long GetNetworkNetworkIdentifier();
    public sealed virtual void Close();
    [CompilerGeneratedAttribute]
private void <UpdateAsync>b__115_0();
    [CompilerGeneratedAttribute]
private void <UpdateAsync>b__115_1();
}
public enum MiNET.Net.RakNet.Reliability : Enum {
    public int value__;
    public static Reliability Undefined;
    public static Reliability Unreliable;
    public static Reliability UnreliableSequenced;
    public static Reliability Reliable;
    public static Reliability ReliableOrdered;
    public static Reliability ReliableSequenced;
    public static Reliability UnreliableWithAckReceipt;
    public static Reliability ReliableWithAckReceipt;
    public static Reliability ReliableOrderedWithAckReceipt;
}
public class MiNET.Net.RakNet.ReliabilityHeader : object {
    [CompilerGeneratedAttribute]
private Reliability <Reliability>k__BackingField;
    [CompilerGeneratedAttribute]
private Int24 <ReliableMessageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Int24 <SequencingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Int24 <OrderingIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <OrderingChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSplit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartCount>k__BackingField;
    [CompilerGeneratedAttribute]
private short <PartId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartIndex>k__BackingField;
    public Reliability Reliability { get; public set; }
    public Int24 ReliableMessageNumber { get; public set; }
    public Int24 SequencingIndex { get; public set; }
    public Int24 OrderingIndex { get; public set; }
    public byte OrderingChannel { get; public set; }
    public bool HasSplit { get; public set; }
    public int PartCount { get; public set; }
    public short PartId { get; public set; }
    public int PartIndex { get; public set; }
    [CompilerGeneratedAttribute]
public Reliability get_Reliability();
    [CompilerGeneratedAttribute]
public void set_Reliability(Reliability value);
    [CompilerGeneratedAttribute]
public Int24 get_ReliableMessageNumber();
    [CompilerGeneratedAttribute]
public void set_ReliableMessageNumber(Int24 value);
    [CompilerGeneratedAttribute]
public Int24 get_SequencingIndex();
    [CompilerGeneratedAttribute]
public void set_SequencingIndex(Int24 value);
    [CompilerGeneratedAttribute]
public Int24 get_OrderingIndex();
    [CompilerGeneratedAttribute]
public void set_OrderingIndex(Int24 value);
    [CompilerGeneratedAttribute]
public byte get_OrderingChannel();
    [CompilerGeneratedAttribute]
public void set_OrderingChannel(byte value);
    [CompilerGeneratedAttribute]
public bool get_HasSplit();
    [CompilerGeneratedAttribute]
public void set_HasSplit(bool value);
    [CompilerGeneratedAttribute]
public int get_PartCount();
    [CompilerGeneratedAttribute]
public void set_PartCount(int value);
    [CompilerGeneratedAttribute]
public short get_PartId();
    [CompilerGeneratedAttribute]
public void set_PartId(short value);
    [CompilerGeneratedAttribute]
public int get_PartIndex();
    [CompilerGeneratedAttribute]
public void set_PartIndex(int value);
    public void Reset();
}
public class MiNET.Net.RakNet.SplitPartPacket : Packet`1<SplitPartPacket> {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Message>k__BackingField;
    public ReadOnlyMemory`1<byte> Message { get; public set; }
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(ReadOnlyMemory`1<byte> value);
    public virtual void Reset();
}
public class MiNET.Net.SpawnSettings : object {
    [CompilerGeneratedAttribute]
private short <BiomeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiomeName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dimension>k__BackingField;
    public short BiomeType { get; public set; }
    public string BiomeName { get; public set; }
    public int Dimension { get; public set; }
    [CompilerGeneratedAttribute]
public short get_BiomeType();
    [CompilerGeneratedAttribute]
public void set_BiomeType(short value);
    [CompilerGeneratedAttribute]
public string get_BiomeName();
    [CompilerGeneratedAttribute]
public void set_BiomeName(string value);
    [CompilerGeneratedAttribute]
public int get_Dimension();
    [CompilerGeneratedAttribute]
public void set_Dimension(int value);
    public void Read(Packet packet);
    public void Write(Packet packet);
}
public abstract class MiNET.Net.SubChunkEntryCommon : object {
    [CompilerGeneratedAttribute]
private SubChunkPositionOffset <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private SubChunkRequestResult <RequestResult>k__BackingField;
    [CompilerGeneratedAttribute]
private HeightMapData <HeightMapData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public SubChunkPositionOffset Offset { get; public set; }
    public SubChunkRequestResult RequestResult { get; public set; }
    public HeightMapData HeightMapData { get; public set; }
    public Byte[] Data { get; public set; }
    [CompilerGeneratedAttribute]
public SubChunkPositionOffset get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(SubChunkPositionOffset value);
    [CompilerGeneratedAttribute]
public SubChunkRequestResult get_RequestResult();
    [CompilerGeneratedAttribute]
public void set_RequestResult(SubChunkRequestResult value);
    [CompilerGeneratedAttribute]
public HeightMapData get_HeightMapData();
    [CompilerGeneratedAttribute]
public void set_HeightMapData(HeightMapData value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    public void Read(Packet packet, bool cacheEnabled);
    public void Write(Packet packet, bool cacheEnabled);
    protected abstract virtual void OnRead(Packet packet);
    protected abstract virtual void OnWrite(Packet packet);
}
public class MiNET.Net.SubChunkEntryWithCache : SubChunkEntryCommon {
    public long usedBlobHash;
    protected virtual void OnRead(Packet packet);
    protected virtual void OnWrite(Packet packet);
}
public class MiNET.Net.SubChunkEntryWithoutCache : SubChunkEntryCommon {
    protected virtual void OnRead(Packet packet);
    protected virtual void OnWrite(Packet packet);
}
public enum MiNET.Net.SubChunkPacketHeightMapType : Enum {
    public byte value__;
    public static SubChunkPacketHeightMapType NoData;
    public static SubChunkPacketHeightMapType Data;
    public static SubChunkPacketHeightMapType AllTooHigh;
    public static SubChunkPacketHeightMapType AllTooLow;
}
public class MiNET.Net.SubChunkPositionOffset : object {
    [CompilerGeneratedAttribute]
private sbyte <XOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private sbyte <YOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private sbyte <ZOffset>k__BackingField;
    public sbyte XOffset { get; public set; }
    public sbyte YOffset { get; public set; }
    public sbyte ZOffset { get; public set; }
    [CompilerGeneratedAttribute]
public sbyte get_XOffset();
    [CompilerGeneratedAttribute]
public void set_XOffset(sbyte value);
    [CompilerGeneratedAttribute]
public sbyte get_YOffset();
    [CompilerGeneratedAttribute]
public void set_YOffset(sbyte value);
    [CompilerGeneratedAttribute]
public sbyte get_ZOffset();
    [CompilerGeneratedAttribute]
public void set_ZOffset(sbyte value);
}
public enum MiNET.Net.SubChunkRequestMode : Enum {
    public int value__;
    public static SubChunkRequestMode SubChunkRequestModeLegacy;
    public static SubChunkRequestMode SubChunkRequestModeLimitless;
    public static SubChunkRequestMode SubChunkRequestModeLimited;
}
public enum MiNET.Net.SubChunkRequestResult : Enum {
    public byte value__;
    public static SubChunkRequestResult Success;
    public static SubChunkRequestResult NoSuchChunk;
    public static SubChunkRequestResult WrongDimension;
    public static SubChunkRequestResult NullPlayer;
    public static SubChunkRequestResult YIndexOutOfBounds;
    public static SubChunkRequestResult SuccessAllAir;
}
public class MiNET.Net.UnconnectedPing : Packet`1<UnconnectedPing> {
    public long pingId;
    public Byte[] offlineMessageDataId;
    public long guid;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.UnconnectedPong : Packet`1<UnconnectedPong> {
    public long pingId;
    public long serverId;
    public Byte[] offlineMessageDataId;
    public string serverName;
    protected virtual void EncodePacket();
    protected virtual void DecodePacket();
    protected virtual void ResetPacket();
}
public class MiNET.Net.UnknownPacket : Packet`1<UnknownPacket> {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Message>k__BackingField;
    public ReadOnlyMemory`1<byte> Message { get; private set; }
    public UnknownPacket(byte id, ReadOnlyMemory`1<byte> message);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(ReadOnlyMemory`1<byte> value);
}
public class MiNET.Net.UpdateSubChunkBlocksPacketEntry : object {
    [CompilerGeneratedAttribute]
private BlockCoordinates <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockRuntimeId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SyncedUpdatedEntityUniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SyncedUpdateType>k__BackingField;
    public BlockCoordinates Coordinates { get; public set; }
    public UInt32 BlockRuntimeId { get; public set; }
    public UInt32 Flags { get; public set; }
    public long SyncedUpdatedEntityUniqueId { get; public set; }
    public UInt32 SyncedUpdateType { get; public set; }
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockRuntimeId();
    [CompilerGeneratedAttribute]
public void set_BlockRuntimeId(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(UInt32 value);
    [CompilerGeneratedAttribute]
public long get_SyncedUpdatedEntityUniqueId();
    [CompilerGeneratedAttribute]
public void set_SyncedUpdatedEntityUniqueId(long value);
    [CompilerGeneratedAttribute]
public UInt32 get_SyncedUpdateType();
    [CompilerGeneratedAttribute]
public void set_SyncedUpdateType(UInt32 value);
}
public class MiNET.Net.WiredAttribute : Attribute {
}
public class MiNET.NewtonsoftMapper : object {
    private static NewtonsoftMapper();
    public sealed virtual string Serialize(object obj);
    public sealed virtual T Parse(string json);
}
public class MiNET.Particles.BubbleParticle : LegacyParticle {
    public BubbleParticle(Level level);
}
public class MiNET.Particles.CriticalParticle : LegacyParticle {
    public CriticalParticle(Level level, int scale);
}
public class MiNET.Particles.DestroyBlockParticle : LegacyParticle {
    public DestroyBlockParticle(Level level, Block block);
    public virtual void Spawn();
}
public class MiNET.Particles.DustParticle : LegacyParticle {
    public DustParticle(Level level, Color color);
}
public class MiNET.Particles.EnchantParticle : Particle {
    public EnchantParticle(Level level);
}
public class MiNET.Particles.EntityFlameParticle : LegacyParticle {
    public EntityFlameParticle(Level level);
}
public class MiNET.Particles.ExplosionParticle : LegacyParticle {
    public ExplosionParticle(Level level);
}
public class MiNET.Particles.FlameParticle : LegacyParticle {
    public FlameParticle(Level level);
}
public class MiNET.Particles.HeartParticle : LegacyParticle {
    public HeartParticle(Level level, int scale);
}
public class MiNET.Particles.InkParticle : LegacyParticle {
    public InkParticle(Level level);
}
public class MiNET.Particles.ItemBreakParticle : LegacyParticle {
    public ItemBreakParticle(Level level, Item item);
}
public class MiNET.Particles.LavaDripParticle : LegacyParticle {
    public LavaDripParticle(Level level);
}
public class MiNET.Particles.LavaParticle : LegacyParticle {
    public LavaParticle(Level level);
}
public class MiNET.Particles.LegacyParticle : Particle {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Data>k__BackingField;
    public int Id { get; private set; }
    protected int Data { get; protected set; }
    public LegacyParticle(ParticleType particle, Level level);
    public LegacyParticle(int id, Level level);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
protected int get_Data();
    [CompilerGeneratedAttribute]
protected void set_Data(int value);
    public virtual void Spawn(Player[] players);
}
public class MiNET.Particles.Particle : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <Position>k__BackingField;
    protected string Name { get; protected set; }
    protected Level Level { get; protected set; }
    public Vector3 Position { get; public set; }
    public Particle(string name, Level level);
    public Particle(Level level);
    [CompilerGeneratedAttribute]
protected string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
protected Level get_Level();
    [CompilerGeneratedAttribute]
protected void set_Level(Level value);
    [CompilerGeneratedAttribute]
public Vector3 get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Vector3 value);
    public virtual void Spawn(Player[] players);
    public virtual void Spawn();
}
public enum MiNET.Particles.ParticleType : Enum {
    public int value__;
    public static ParticleType Bubble;
    public static ParticleType Critical;
    public static ParticleType BlockForceField;
    public static ParticleType Smoke;
    public static ParticleType Explode;
    public static ParticleType WhiteSmoke;
    public static ParticleType Flame;
    public static ParticleType Lava;
    public static ParticleType LargeSmoke;
    public static ParticleType Redstone;
    public static ParticleType RisingRedDust;
    public static ParticleType ItemBreak;
    public static ParticleType SnowballPoof;
    public static ParticleType LargeExplode;
    public static ParticleType HugeExplode;
    public static ParticleType MobFlame;
    public static ParticleType Heart;
    public static ParticleType Terrain;
    public static ParticleType TownAura;
    public static ParticleType Portal;
    public static ParticleType WaterSplash;
    public static ParticleType WaterWake;
    public static ParticleType DripWater;
    public static ParticleType DripLava;
    public static ParticleType DripHoney;
    public static ParticleType Dust;
    public static ParticleType MobSpell;
    public static ParticleType MobSpellAmbient;
    public static ParticleType MobSpellInstantaneous;
    public static ParticleType Ink;
    public static ParticleType Slime;
    public static ParticleType RainSplash;
    public static ParticleType VillagerAngry;
    public static ParticleType VillagerHappy;
    public static ParticleType EnchantmentTable;
    public static ParticleType TrackingEmitter;
    public static ParticleType Note;
    public static ParticleType WitchSpell;
    public static ParticleType Carrot;
    public static ParticleType Unknown39;
    public static ParticleType EndRod;
    public static ParticleType DragonsBreath;
    public static ParticleType Spit;
    public static ParticleType Totem;
    public static ParticleType Food;
    public static ParticleType FireworksStarter;
    public static ParticleType FireworksSpark;
    public static ParticleType FireworksOverlay;
    public static ParticleType BalloonGas;
    public static ParticleType ColoredFlame;
    public static ParticleType Sparkler;
    public static ParticleType Conduit;
    public static ParticleType BubbleColumnUp;
    public static ParticleType BubbleColumnDown;
    public static ParticleType Sneeze;
}
public class MiNET.Particles.PortalParticle : LegacyParticle {
    public PortalParticle(Level level);
}
public class MiNET.Particles.RedstoneParticle : Particle {
    public RedstoneParticle(Level level, int lifetime);
}
public class MiNET.Particles.SmokeParticle : LegacyParticle {
    public SmokeParticle(Level level);
}
public class MiNET.Particles.SpawnParticle : LegacyParticle {
    public SpawnParticle(Level level, int height, int width);
    public virtual void Spawn();
}
public class MiNET.Particles.SplashParticle : LegacyParticle {
    public SplashParticle(Level level);
}
public class MiNET.Particles.TerrainParticle : LegacyParticle {
    public TerrainParticle(Level level, Block block);
}
public class MiNET.Particles.TownAuraParticle : LegacyParticle {
    public TownAuraParticle(Level level);
}
public class MiNET.Particles.WaterDripParticle : LegacyParticle {
    public WaterDripParticle(Level level);
}
public class MiNET.Particles.WaterWakeParticle : LegacyParticle {
    public WaterWakeParticle(Level level);
}
public class MiNET.Particles.WhiteSmokeParticle : LegacyParticle {
    public WhiteSmokeParticle(Level level);
}
public class MiNET.Player : Entity {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private MiNetServer <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <EndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private INetworkHandler <NetworkHandler>k__BackingField;
    private Dictionary`2<ChunkCoordinates, McpeWrapper> _chunksUsed;
    private ChunkCoordinates _currentChunkPosition;
    internal IInventory _openInventory;
    [CompilerGeneratedAttribute]
private PlayerInventory <Inventory>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemStackInventoryManager <ItemStackInventoryManager>k__BackingField;
    [CompilerGeneratedAttribute]
private PlayerLocation <SpawnPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSleeping>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxViewDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MoveRenderDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private GameMode <GameMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCreativeInventory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateData <CertificateData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private UUID <ClientUuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private PlayerInfo <PlayerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Skin <Skin>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MovementSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<EffectType, Effect> <Effects>k__BackingField;
    [CompilerGeneratedAttribute]
private HungerManager <HungerManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ExperienceManager <ExperienceManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFalling>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFlyingHorizontally>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity <LastAttackTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Popup> <Popups>k__BackingField;
    [CompilerGeneratedAttribute]
private Session <Session>k__BackingField;
    [CompilerGeneratedAttribute]
private DamageCalculator <DamageCalculator>k__BackingField;
    [CompilerGeneratedAttribute]
private Form <CurrentForm>k__BackingField;
    private bool _serverHaveResources;
    private object _mapInfoSync;
    [CompilerGeneratedAttribute]
private int <ChunkRadius>k__BackingField;
    private Action _dimensionFunc;
    private float _baseSpeed;
    private object _sprintLock;
    [CompilerGeneratedAttribute]
private bool <IsWorldImmutable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWorldBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMuted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNoPvp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNoPvm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNoMvp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNoClip>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFlying>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionLevel <PermissionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandPermission>k__BackingField;
    [CompilerGeneratedAttribute]
private ActionPermissions <ActionPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSpectator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAutoJump>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowFly>k__BackingField;
    private object _loginSyncLock;
    [CompilerGeneratedAttribute]
private bool <EnableCommands>k__BackingField;
    private object _teleportSync;
    private object _disconnectSync;
    private bool _haveJoined;
    private int _lastOrderingIndex;
    private object _moveSyncLock;
    [CompilerGeneratedAttribute]
private double <CurrentSpeed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StartFallY>k__BackingField;
    private static Int32[] Layers;
    private static Int32[] Arounds;
    [CompilerGeneratedAttribute]
private bool <UsingAnvil>k__BackingField;
    private object _inventorySync;
    [CompilerGeneratedAttribute]
private long <Vehicle>k__BackingField;
    private object _sendChunkSync;
    [CompilerGeneratedAttribute]
private string <ButtonText>k__BackingField;
    private object _sendMoveListSync;
    private DateTime _lastMoveListSendTime;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> PlayerJoining;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> PlayerJoin;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> LocalPlayerIsInitialized;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> PlayerLeave;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> Ticking;
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> Ticked;
    private MiNetServer Server { get; private set; }
    public IPEndPoint EndPoint { get; private set; }
    public INetworkHandler NetworkHandler { get; public set; }
    public PlayerInventory Inventory { get; public set; }
    public ItemStackInventoryManager ItemStackInventoryManager { get; public set; }
    public PlayerLocation SpawnPosition { get; public set; }
    public bool IsSleeping { get; public set; }
    public int MaxViewDistance { get; public set; }
    public int MoveRenderDistance { get; public set; }
    public GameMode GameMode { get; public set; }
    public bool UseCreativeInventory { get; public set; }
    public bool IsConnected { get; public set; }
    public CertificateData CertificateData { get; public set; }
    public string Username { get; public set; }
    public string DisplayName { get; public set; }
    public long ClientId { get; public set; }
    public UUID ClientUuid { get; public set; }
    public string ServerAddress { get; public set; }
    public PlayerInfo PlayerInfo { get; public set; }
    public Skin Skin { get; public set; }
    public float MovementSpeed { get; public set; }
    public ConcurrentDictionary`2<EffectType, Effect> Effects { get; public set; }
    public HungerManager HungerManager { get; public set; }
    public ExperienceManager ExperienceManager { get; public set; }
    public bool IsFalling { get; public set; }
    public bool IsFlyingHorizontally { get; public set; }
    public Entity LastAttackTarget { get; public set; }
    public List`1<Popup> Popups { get; public set; }
    public Session Session { get; public set; }
    public DamageCalculator DamageCalculator { get; public set; }
    protected Form CurrentForm { get; protected set; }
    public int ChunkRadius { get; private set; }
    public bool IsWorldImmutable { get; public set; }
    public bool IsWorldBuilder { get; public set; }
    public bool IsMuted { get; public set; }
    public bool IsNoPvp { get; public set; }
    public bool IsNoPvm { get; public set; }
    public bool IsNoMvp { get; public set; }
    public bool IsNoClip { get; public set; }
    public bool IsFlying { get; public set; }
    public PermissionLevel PermissionLevel { get; public set; }
    public int CommandPermission { get; public set; }
    public ActionPermissions ActionPermissions { get; public set; }
    public bool IsSpectator { get; public set; }
    public bool IsAutoJump { get; public set; }
    public bool AllowFly { get; public set; }
    public bool EnableCommands { get; public set; }
    public double CurrentSpeed { get; private set; }
    public double StartFallY { get; private set; }
    public bool UsingAnvil { get; public set; }
    public long Vehicle { get; public set; }
    public string ButtonText { get; public set; }
    public Player(MiNetServer server, IPEndPoint endPoint);
    private static Player();
    [CompilerGeneratedAttribute]
private MiNetServer get_Server();
    [CompilerGeneratedAttribute]
private void set_Server(MiNetServer value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_EndPoint();
    [CompilerGeneratedAttribute]
private void set_EndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public INetworkHandler get_NetworkHandler();
    [CompilerGeneratedAttribute]
public void set_NetworkHandler(INetworkHandler value);
    [CompilerGeneratedAttribute]
public PlayerInventory get_Inventory();
    [CompilerGeneratedAttribute]
public void set_Inventory(PlayerInventory value);
    [CompilerGeneratedAttribute]
public ItemStackInventoryManager get_ItemStackInventoryManager();
    [CompilerGeneratedAttribute]
public void set_ItemStackInventoryManager(ItemStackInventoryManager value);
    [CompilerGeneratedAttribute]
public PlayerLocation get_SpawnPosition();
    [CompilerGeneratedAttribute]
public void set_SpawnPosition(PlayerLocation value);
    [CompilerGeneratedAttribute]
public bool get_IsSleeping();
    [CompilerGeneratedAttribute]
public void set_IsSleeping(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxViewDistance();
    [CompilerGeneratedAttribute]
public void set_MaxViewDistance(int value);
    [CompilerGeneratedAttribute]
public int get_MoveRenderDistance();
    [CompilerGeneratedAttribute]
public void set_MoveRenderDistance(int value);
    [CompilerGeneratedAttribute]
public GameMode get_GameMode();
    [CompilerGeneratedAttribute]
public void set_GameMode(GameMode value);
    [CompilerGeneratedAttribute]
public bool get_UseCreativeInventory();
    [CompilerGeneratedAttribute]
public void set_UseCreativeInventory(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsConnected();
    [CompilerGeneratedAttribute]
public void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
public CertificateData get_CertificateData();
    [CompilerGeneratedAttribute]
public void set_CertificateData(CertificateData value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public long get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(long value);
    [CompilerGeneratedAttribute]
public UUID get_ClientUuid();
    [CompilerGeneratedAttribute]
public void set_ClientUuid(UUID value);
    [CompilerGeneratedAttribute]
public string get_ServerAddress();
    [CompilerGeneratedAttribute]
public void set_ServerAddress(string value);
    [CompilerGeneratedAttribute]
public PlayerInfo get_PlayerInfo();
    [CompilerGeneratedAttribute]
public void set_PlayerInfo(PlayerInfo value);
    [CompilerGeneratedAttribute]
public Skin get_Skin();
    [CompilerGeneratedAttribute]
public void set_Skin(Skin value);
    [CompilerGeneratedAttribute]
public float get_MovementSpeed();
    [CompilerGeneratedAttribute]
public void set_MovementSpeed(float value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<EffectType, Effect> get_Effects();
    [CompilerGeneratedAttribute]
public void set_Effects(ConcurrentDictionary`2<EffectType, Effect> value);
    [CompilerGeneratedAttribute]
public HungerManager get_HungerManager();
    [CompilerGeneratedAttribute]
public void set_HungerManager(HungerManager value);
    [CompilerGeneratedAttribute]
public ExperienceManager get_ExperienceManager();
    [CompilerGeneratedAttribute]
public void set_ExperienceManager(ExperienceManager value);
    [CompilerGeneratedAttribute]
public bool get_IsFalling();
    [CompilerGeneratedAttribute]
public void set_IsFalling(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFlyingHorizontally();
    [CompilerGeneratedAttribute]
public void set_IsFlyingHorizontally(bool value);
    [CompilerGeneratedAttribute]
public Entity get_LastAttackTarget();
    [CompilerGeneratedAttribute]
public void set_LastAttackTarget(Entity value);
    [CompilerGeneratedAttribute]
public List`1<Popup> get_Popups();
    [CompilerGeneratedAttribute]
public void set_Popups(List`1<Popup> value);
    [CompilerGeneratedAttribute]
public Session get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(Session value);
    [CompilerGeneratedAttribute]
public DamageCalculator get_DamageCalculator();
    [CompilerGeneratedAttribute]
public void set_DamageCalculator(DamageCalculator value);
    public sealed virtual void HandleMcpeClientToServerHandshake(McpeClientToServerHandshake message);
    public virtual void HandleMcpeScriptCustomEvent(McpeScriptCustomEvent message);
    public virtual void HandleMcpeCommandBlockUpdate(McpeCommandBlockUpdate message);
    public virtual void HandleMcpeResourcePackChunkRequest(McpeResourcePackChunkRequest message);
    public virtual void HandleMcpePurchaseReceipt(McpePurchaseReceipt message);
    public virtual void HandleMcpePlayerSkin(McpePlayerSkin message);
    public virtual void HandleMcpePhotoTransfer(McpePhotoTransfer message);
    [CompilerGeneratedAttribute]
protected Form get_CurrentForm();
    [CompilerGeneratedAttribute]
protected void set_CurrentForm(Form value);
    public sealed virtual void HandleMcpeModalFormResponse(McpeModalFormResponse message);
    public virtual Form GetServerSettingsForm();
    public sealed virtual void HandleMcpeServerSettingsRequest(McpeServerSettingsRequest message);
    public virtual void HandleMcpeSetPlayerGameType(McpeSetPlayerGameType message);
    public virtual void HandleMcpeLabTable(McpeLabTable message);
    public virtual void HandleMcpeSetLocalPlayerAsInitialized(McpeSetLocalPlayerAsInitialized message);
    public virtual void HandleMcpeResourcePackClientResponse(McpeResourcePackClientResponse message);
    public virtual void SendResourcePacksInfo();
    public virtual void SendResourcePackStack();
    public virtual void HandleMcpePlayerInput(McpePlayerInput message);
    public virtual void HandleMcpeRiderJump(McpeRiderJump message);
    public sealed virtual void HandleMcpeTickSync(McpeTickSync message);
    public virtual void HandleMcpeSetEntityData(McpeSetEntityData message);
    public sealed virtual void HandleMcpeNpcRequest(McpeNpcRequest message);
    public virtual void HandleMcpeMapInfoRequest(McpeMapInfoRequest message);
    public virtual void SendMapInfo(MapInfo mapInfo);
    [CompilerGeneratedAttribute]
public int get_ChunkRadius();
    [CompilerGeneratedAttribute]
private void set_ChunkRadius(int value);
    public void SetChunkRadius(int radius);
    public virtual void HandleMcpeRequestChunkRadius(McpeRequestChunkRadius message);
    public virtual void HandleMcpeSetEntityMotion(McpeSetEntityMotion message);
    public sealed virtual void HandleMcpeMoveEntity(McpeMoveEntity message);
    public virtual void HandleMcpeAnimate(McpeAnimate message);
    public virtual void HandleMcpePlayerAction(McpePlayerAction message);
    public void SetSprinting(bool isSprinting);
    public virtual void HandleMcpeBlockEntityData(McpeBlockEntityData message);
    [CompilerGeneratedAttribute]
public bool get_IsWorldImmutable();
    [CompilerGeneratedAttribute]
public void set_IsWorldImmutable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWorldBuilder();
    [CompilerGeneratedAttribute]
public void set_IsWorldBuilder(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMuted();
    [CompilerGeneratedAttribute]
public void set_IsMuted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNoPvp();
    [CompilerGeneratedAttribute]
public void set_IsNoPvp(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNoPvm();
    [CompilerGeneratedAttribute]
public void set_IsNoPvm(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNoMvp();
    [CompilerGeneratedAttribute]
public void set_IsNoMvp(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNoClip();
    [CompilerGeneratedAttribute]
public void set_IsNoClip(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFlying();
    [CompilerGeneratedAttribute]
public void set_IsFlying(bool value);
    public virtual void HandleMcpeAdventureSettings(McpeAdventureSettings message);
    public virtual void SendGameRules();
    public virtual void SendAdventureSettings();
    private UInt32 GetAdventureFlags();
    [CompilerGeneratedAttribute]
public PermissionLevel get_PermissionLevel();
    [CompilerGeneratedAttribute]
public void set_PermissionLevel(PermissionLevel value);
    [CompilerGeneratedAttribute]
public int get_CommandPermission();
    [CompilerGeneratedAttribute]
public void set_CommandPermission(int value);
    [CompilerGeneratedAttribute]
public ActionPermissions get_ActionPermissions();
    [CompilerGeneratedAttribute]
public void set_ActionPermissions(ActionPermissions value);
    [CompilerGeneratedAttribute]
public bool get_IsSpectator();
    [CompilerGeneratedAttribute]
public void set_IsSpectator(bool value);
    [WiredAttribute]
public void SetSpectator(bool isSpectator);
    [CompilerGeneratedAttribute]
public bool get_IsAutoJump();
    [CompilerGeneratedAttribute]
public void set_IsAutoJump(bool value);
    [WiredAttribute]
public void SetAutoJump(bool isAutoJump);
    [CompilerGeneratedAttribute]
public bool get_AllowFly();
    [CompilerGeneratedAttribute]
public void set_AllowFly(bool value);
    [WiredAttribute]
public void SetAllowFly(bool allowFly);
    public virtual void HandleMcpeLogin(McpeLogin message);
    public void Start(object o);
    public virtual void SendAvailableEntityIdentifiers();
    public virtual void SendBiomeDefinitionList();
    [CompilerGeneratedAttribute]
public bool get_EnableCommands();
    [CompilerGeneratedAttribute]
public void set_EnableCommands(bool value);
    protected virtual void SendSetCommandsEnabled();
    protected virtual void SendAvailableCommands();
    public virtual void HandleMcpeCommandRequest(McpeCommandRequest message);
    public virtual void InitializePlayer();
    public virtual void HandleMcpeRespawn(McpeRespawn message);
    [WiredAttribute]
public void SetPosition(PlayerLocation position, bool teleport);
    public virtual void Teleport(PlayerLocation newPosition);
    private bool IsChunkInCache(PlayerLocation position);
    public virtual void ChangeDimension(Level toLevel, PlayerLocation spawnPoint, Dimension dimension, Func`1<Level> levelFunc);
    private PlayerLocation FindNetherSpawn(Level level, BlockCoordinates start);
    private PlayerLocation CreateNetherPortal(Level level);
    public static void BuildPortal(Level level, PortalInfo portalInfo);
    private bool SpawnAreaClear(BoundingBox bbox);
    public virtual void SpawnLevel(Level toLevel, PlayerLocation spawnPoint, bool useLoadingScreen, Func`1<Level> levelFunc, Action postSpawnAction);
    protected virtual void SendChangeDimension(Dimension dimension, bool respawn, Vector3 position);
    public virtual void BroadcastSetEntityData(MetadataDictionary metadata);
    public void SendSetEntityData();
    public void SendSetDificulty();
    public virtual void SendPlayerInventory();
    public virtual void SendCraftingRecipes();
    public virtual void SendCreativeInventory();
    private void SendChunkRadiusUpdate();
    public void SendPlayerStatus(int status);
    [WiredAttribute]
public void SetGameMode(GameMode gameMode);
    public void SendSetPlayerGameType();
    [WiredAttribute]
public void StrikeLightning();
    public virtual void Disconnect(string reason, bool sendDisconnect);
    public virtual void HandleMcpeText(McpeText message);
    public virtual void HandleMcpeMovePlayer(McpeMovePlayer message);
    [CompilerGeneratedAttribute]
public double get_CurrentSpeed();
    [CompilerGeneratedAttribute]
private void set_CurrentSpeed(double value);
    [CompilerGeneratedAttribute]
public double get_StartFallY();
    [CompilerGeneratedAttribute]
private void set_StartFallY(double value);
    protected virtual bool AcceptPlayerMove(McpeMovePlayer message, bool isOnGround, bool isFlyingHorizontally);
    protected virtual bool DetectSimpleFly(McpeMovePlayer message, bool isOnGround);
    public bool CheckOnGround(McpeMovePlayer message);
    public virtual void HandleMcpeLevelSoundEventOld(McpeLevelSoundEventOld message);
    public virtual void HandleMcpeLevelSoundEvent(McpeLevelSoundEvent message);
    public sealed virtual void HandleMcpeClientCacheStatus(McpeClientCacheStatus message);
    public sealed virtual void HandleMcpeNetworkSettings(McpeNetworkSettings message);
    public sealed virtual void HandleMcpePlayerAuthInput(McpePlayerAuthInput message);
    [CompilerGeneratedAttribute]
public bool get_UsingAnvil();
    [CompilerGeneratedAttribute]
public void set_UsingAnvil(bool value);
    public sealed virtual void HandleMcpeItemStackRequest(McpeItemStackRequest message);
    protected Item GetContainerItem(int containerId, int slot);
    protected void SetContainerItem(int containerId, int slot, Item item);
    public sealed virtual void HandleMcpeUpdatePlayerGameType(McpeUpdatePlayerGameType message);
    public sealed virtual void HandleMcpePacketViolationWarning(McpePacketViolationWarning message);
    public sealed virtual void HandleMcpeFilterTextPacket(McpeFilterTextPacket message);
    public sealed virtual void HandleMcpeUpdateSubChunkBlocksPacket(McpeUpdateSubChunkBlocksPacket message);
    public sealed virtual void HandleMcpeSubChunkRequestPacket(McpeSubChunkRequestPacket message);
    public virtual void HandleMcpeMobArmorEquipment(McpeMobArmorEquipment message);
    public virtual void HandleMcpeItemFrameDropItem(McpeItemFrameDropItem message);
    public virtual void HandleMcpeMobEquipment(McpeMobEquipment message);
    public virtual void SetOpenInventory(IInventory inventory);
    public void OpenInventory(BlockCoordinates inventoryCoord);
    private void OnInventoryChange(Player player, Inventory inventory, byte slot, Item itemStack);
    public sealed virtual void HandleMcpeInventorySlot(McpeInventorySlot message);
    public virtual void HandleMcpeCraftingEvent(McpeCraftingEvent message);
    public virtual void HandleMcpeInventoryTransaction(McpeInventoryTransaction message);
    protected virtual void HandleItemUseOnEntityTransaction(ItemUseOnEntityTransaction transaction);
    private void EntityItemInteract(ItemUseOnEntityTransaction transaction);
    protected virtual void EntityInteract(ItemUseOnEntityTransaction transaction);
    protected virtual void EntityAttack(ItemUseOnEntityTransaction transaction);
    protected virtual void HandleInventoryMismatchTransaction(InventoryMismatchTransaction transaction);
    protected virtual void HandleItemReleaseTransaction(ItemReleaseTransaction transaction);
    protected virtual void HandleItemUseTransaction(ItemUseTransaction transaction);
    protected virtual void HandleNormalTransaction(NormalTransaction transaction);
    protected virtual void HandleTransactionRecords(List`1<TransactionRecord> records);
    public virtual ItemEntity DropItem(Item item);
    public virtual bool PickUpItem(ItemEntity item);
    private bool VerifyRecipe(List`1<Item> craftingInput, Item result);
    private string ToJson(object obj);
    public virtual void HandleMcpeContainerClose(McpeContainerClose message);
    public sealed virtual void HandleMcpePlayerHotbar(McpePlayerHotbar message);
    public sealed virtual void HandleMcpeInventoryContent(McpeInventoryContent message);
    public virtual void HandleMcpeInteract(McpeInteract message);
    [CompilerGeneratedAttribute]
public long get_Vehicle();
    [CompilerGeneratedAttribute]
public void set_Vehicle(long value);
    public virtual void HandleMcpeBlockPickRequest(McpeBlockPickRequest message);
    public virtual void HandleMcpeEntityPickRequest(McpeEntityPickRequest message);
    protected virtual int CalculateDamage(Entity target);
    public virtual void HandleMcpeEntityEvent(McpeEntityEvent message);
    public void SendRespawn();
    public void SendStartGame();
    public void SendSetSpawnPosition();
    private void ForcedSendChunk(PlayerLocation position);
    private void ForcedSendEmptyChunks();
    public void SendNetworkChunkPublisherUpdate();
    public void ForcedSendChunks(Action postAction);
    private void SendChunksForKnownPosition();
    public virtual void SendUpdateAttributes();
    public virtual void SendForm(Form form);
    public virtual void SendSetTime();
    public virtual void SendSetTime(int time);
    public void SendSound(BlockCoordinates position, LevelSoundEventType sound, int blockId);
    public virtual void SendSetDownfall(int downfall);
    public virtual void SendMovePlayer(bool teleport);
    public virtual void OnTick(Entity[] entities);
    public void AddPopup(Popup popup);
    public void ClearPopups();
    public virtual void Knockback(Vector3 velocity);
    [CompilerGeneratedAttribute]
public string get_ButtonText();
    [CompilerGeneratedAttribute]
public void set_ButtonText(string value);
    public virtual MetadataDictionary GetMetadata();
    [WiredAttribute]
public void SetNoAi(bool noAi);
    [WiredAttribute]
public void SetHideNameTag(bool hideNameTag);
    [WiredAttribute]
public void SetNameTag(string nameTag);
    [WiredAttribute]
public void SetDisplayName(string displayName);
    [WiredAttribute]
public void SetEffect(Effect effect, bool ignoreIfLowerLevel);
    [WiredAttribute]
public void RemoveEffect(Effect effect, bool recalcColor);
    [WiredAttribute]
public void RemoveAllEffects();
    public virtual void UpdatePotionColor();
    public virtual void DespawnEntity();
    public virtual void SendTitle(string text, TitleType type, int fadeIn, int fadeOut, int stayTime, Player sender);
    public virtual void SendMessage(string text, MessageType type, Player sender, bool needsTranslation, String[] parameters);
    public virtual void BroadcastEntityEvent();
    public void BroadcastEntityEvent(int eventId, int data);
    public virtual void BroadcastDeathMessage(Player player, DamageCause lastDamageCause);
    public void SendPacket(Packet packet);
    public void SendMoveList(McpeWrapper batch, DateTime sendTime);
    public void CleanCache();
    public void CleanCache(ChunkColumn chunk);
    public virtual void DropInventory();
    public virtual void SpawnToPlayers(Player[] players);
    public virtual void SendEquipmentForPlayer(Player[] receivers);
    public virtual void SendArmorForPlayer(Player[] receivers);
    public virtual void DespawnFromPlayers(Player[] players);
    [CompilerGeneratedAttribute]
public void add_PlayerJoining(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerJoining(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnPlayerJoining(PlayerEventArgs e);
    [CompilerGeneratedAttribute]
public void add_PlayerJoin(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerJoin(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnPlayerJoin(PlayerEventArgs e);
    [CompilerGeneratedAttribute]
public void add_LocalPlayerIsInitialized(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LocalPlayerIsInitialized(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnLocalPlayerIsInitialized(PlayerEventArgs e);
    [CompilerGeneratedAttribute]
public void add_PlayerLeave(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerLeave(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnPlayerLeave(PlayerEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Ticking(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Ticking(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnTicking(PlayerEventArgs e);
    [CompilerGeneratedAttribute]
public void add_Ticked(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Ticked(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnTicked(PlayerEventArgs e);
    public virtual void HandleMcpeNetworkStackLatency(McpeNetworkStackLatency message);
    public virtual void HandleMcpeLevelSoundEventV2(McpeLevelSoundEventV2 message);
    [CompilerGeneratedAttribute]
private void <HandleMcpeResourcePackClientResponse>b__143_0();
    [CompilerGeneratedAttribute]
private void <HandleMcpeRespawn>b__245_0();
    [CompilerGeneratedAttribute]
private void <ChangeDimension>b__250_0();
    [CompilerGeneratedAttribute]
private void <ChangeDimension>b__250_1();
    [CompilerGeneratedAttribute]
private Vector3 <SendChunksForKnownPosition>b__349_0();
}
public class MiNET.PlayerAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Default>k__BackingField;
    public string Name { get; public set; }
    public float MinValue { get; public set; }
    public float MaxValue { get; public set; }
    public float Value { get; public set; }
    public float Default { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public float get_MinValue();
    [CompilerGeneratedAttribute]
public void set_MinValue(float value);
    [CompilerGeneratedAttribute]
public float get_MaxValue();
    [CompilerGeneratedAttribute]
public void set_MaxValue(float value);
    [CompilerGeneratedAttribute]
public float get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(float value);
    [CompilerGeneratedAttribute]
public float get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(float value);
    public virtual string ToString();
}
public class MiNET.PlayerAttributes : Dictionary`2<string, PlayerAttribute> {
}
public class MiNET.PlayerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Player <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    public Player Player { get; }
    public Level Level { get; }
    public PlayerEventArgs(Player player);
    [CompilerGeneratedAttribute]
public Player get_Player();
    [CompilerGeneratedAttribute]
public Level get_Level();
}
public class MiNET.PlayerFactory : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<PlayerEventArgs> PlayerCreated;
    public virtual Player CreatePlayer(MiNetServer server, IPEndPoint endPoint, PlayerInfo playerInfo);
    [CompilerGeneratedAttribute]
public void add_PlayerCreated(EventHandler`1<PlayerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerCreated(EventHandler`1<PlayerEventArgs> value);
    protected virtual void OnPlayerCreated(PlayerEventArgs e);
}
public class MiNET.PlayerInfo : object {
    [CompilerGeneratedAttribute]
private int <ADRole>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateData <CertificateData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private UUID <ClientUuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Skin <Skin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentInputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultInputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GameVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeviceOS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GuiScale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UIProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Edition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LanguageCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlatformChatId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThirdPartyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    public int ADRole { get; public set; }
    public CertificateData CertificateData { get; public set; }
    public string Username { get; public set; }
    public UUID ClientUuid { get; public set; }
    public string ServerAddress { get; public set; }
    public long ClientId { get; public set; }
    public Skin Skin { get; public set; }
    public int CurrentInputMode { get; public set; }
    public int DefaultInputMode { get; public set; }
    public string DeviceModel { get; public set; }
    public string GameVersion { get; public set; }
    public int DeviceOS { get; public set; }
    public string DeviceId { get; public set; }
    public int GuiScale { get; public set; }
    public int UIProfile { get; public set; }
    public int Edition { get; public set; }
    public int ProtocolVersion { get; public set; }
    public string LanguageCode { get; public set; }
    public string PlatformChatId { get; public set; }
    public string ThirdPartyName { get; public set; }
    public string TenantId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ADRole();
    [CompilerGeneratedAttribute]
public void set_ADRole(int value);
    [CompilerGeneratedAttribute]
public CertificateData get_CertificateData();
    [CompilerGeneratedAttribute]
public void set_CertificateData(CertificateData value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public UUID get_ClientUuid();
    [CompilerGeneratedAttribute]
public void set_ClientUuid(UUID value);
    [CompilerGeneratedAttribute]
public string get_ServerAddress();
    [CompilerGeneratedAttribute]
public void set_ServerAddress(string value);
    [CompilerGeneratedAttribute]
public long get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(long value);
    [CompilerGeneratedAttribute]
public Skin get_Skin();
    [CompilerGeneratedAttribute]
public void set_Skin(Skin value);
    [CompilerGeneratedAttribute]
public int get_CurrentInputMode();
    [CompilerGeneratedAttribute]
public void set_CurrentInputMode(int value);
    [CompilerGeneratedAttribute]
public int get_DefaultInputMode();
    [CompilerGeneratedAttribute]
public void set_DefaultInputMode(int value);
    [CompilerGeneratedAttribute]
public string get_DeviceModel();
    [CompilerGeneratedAttribute]
public void set_DeviceModel(string value);
    [CompilerGeneratedAttribute]
public string get_GameVersion();
    [CompilerGeneratedAttribute]
public void set_GameVersion(string value);
    [CompilerGeneratedAttribute]
public int get_DeviceOS();
    [CompilerGeneratedAttribute]
public void set_DeviceOS(int value);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
public void set_DeviceId(string value);
    [CompilerGeneratedAttribute]
public int get_GuiScale();
    [CompilerGeneratedAttribute]
public void set_GuiScale(int value);
    [CompilerGeneratedAttribute]
public int get_UIProfile();
    [CompilerGeneratedAttribute]
public void set_UIProfile(int value);
    [CompilerGeneratedAttribute]
public int get_Edition();
    [CompilerGeneratedAttribute]
public void set_Edition(int value);
    [CompilerGeneratedAttribute]
public int get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public void set_ProtocolVersion(int value);
    [CompilerGeneratedAttribute]
public string get_LanguageCode();
    [CompilerGeneratedAttribute]
public void set_LanguageCode(string value);
    [CompilerGeneratedAttribute]
public string get_PlatformChatId();
    [CompilerGeneratedAttribute]
public void set_PlatformChatId(string value);
    [CompilerGeneratedAttribute]
public string get_ThirdPartyName();
    [CompilerGeneratedAttribute]
public void set_ThirdPartyName(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
}
public class MiNET.PlayerInventory : object {
    private static ILog Log;
    public static int HotbarSize;
    public static int InventorySize;
    [CompilerGeneratedAttribute]
private Player <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Slots>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InHandSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <OffHand>k__BackingField;
    [CompilerGeneratedAttribute]
private CursorInventory <UiInventory>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Boots>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Leggings>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Chest>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Helmet>k__BackingField;
    public Player Player { get; }
    public List`1<Item> Slots { get; }
    public int InHandSlot { get; public set; }
    public Item OffHand { get; public set; }
    public CursorInventory UiInventory { get; public set; }
    public Item Boots { get; public set; }
    public Item Leggings { get; public set; }
    public Item Chest { get; public set; }
    public Item Helmet { get; public set; }
    public PlayerInventory(Player player);
    private static PlayerInventory();
    [CompilerGeneratedAttribute]
public Player get_Player();
    [CompilerGeneratedAttribute]
public List`1<Item> get_Slots();
    [CompilerGeneratedAttribute]
public int get_InHandSlot();
    [CompilerGeneratedAttribute]
public void set_InHandSlot(int value);
    [CompilerGeneratedAttribute]
public Item get_OffHand();
    [CompilerGeneratedAttribute]
public void set_OffHand(Item value);
    [CompilerGeneratedAttribute]
public CursorInventory get_UiInventory();
    [CompilerGeneratedAttribute]
public void set_UiInventory(CursorInventory value);
    [CompilerGeneratedAttribute]
public Item get_Boots();
    [CompilerGeneratedAttribute]
public void set_Boots(Item value);
    [CompilerGeneratedAttribute]
public Item get_Leggings();
    [CompilerGeneratedAttribute]
public void set_Leggings(Item value);
    [CompilerGeneratedAttribute]
public Item get_Chest();
    [CompilerGeneratedAttribute]
public void set_Chest(Item value);
    [CompilerGeneratedAttribute]
public Item get_Helmet();
    [CompilerGeneratedAttribute]
public void set_Helmet(Item value);
    public virtual Item GetItemInHand();
    public virtual void DamageItemInHand(ItemDamageReason reason, Entity target, Block block);
    public virtual void DamageArmor();
    public virtual Item DamageArmorItem(Item item);
    [WiredAttribute]
public virtual void SetInventorySlot(int slot, Item item, bool forceReplace);
    public virtual void UpdateInventorySlot(int slot, Item item, bool forceReplace);
    public ItemStacks GetSlots();
    public ItemStacks GetUiSlots();
    public ItemStacks GetOffHand();
    public ItemStacks GetArmor();
    public virtual bool SetFirstEmptySlot(Item item, bool update);
    private bool FirstEmptySlot(Item item, bool update, int si);
    public bool AddItem(Item item, bool update);
    public virtual void SetHeldItemSlot(int selectedHotbarSlot, bool sendToPlayer);
    public void ClearInventorySlot(byte slot);
    public bool HasItem(Item item);
    public void RemoveItems(short id, byte count);
    public virtual void SendSetSlot(int slot);
    public void Clear();
}
[AttributeUsageAttribute("68")]
public class MiNET.Plugins.Attributes.AuthorizeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public int Permission { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[AttributeUsageAttribute("64")]
public class MiNET.Plugins.Attributes.CommandAttribute : Attribute {
    public string Name;
    public string Overload;
    public String[] Aliases;
    public string Permission;
    public string Description;
    public String[] OutputFormatStrings;
}
[AttributeUsageAttribute("64")]
public class MiNET.Plugins.Attributes.PacketHandlerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <PacketType>k__BackingField;
    public Type PacketType { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_PacketType();
    [CompilerGeneratedAttribute]
public void set_PacketType(Type value);
}
[AttributeUsageAttribute("4")]
public class MiNET.Plugins.Attributes.PluginAttribute : Attribute {
    public string PluginName;
    public string Description;
    public string PluginVersion;
    public string Author;
}
[AttributeUsageAttribute("64")]
public class MiNET.Plugins.Attributes.ReceiveAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class MiNET.Plugins.Attributes.SendAttribute : Attribute {
}
public class MiNET.Plugins.BlockPos : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <YRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Z>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ZRelative>k__BackingField;
    public int X { get; public set; }
    public bool XRelative { get; public set; }
    public int Y { get; public set; }
    public bool YRelative { get; public set; }
    public int Z { get; public set; }
    public bool ZRelative { get; public set; }
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public bool get_XRelative();
    [CompilerGeneratedAttribute]
public void set_XRelative(bool value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public bool get_YRelative();
    [CompilerGeneratedAttribute]
public void set_YRelative(bool value);
    [CompilerGeneratedAttribute]
public int get_Z();
    [CompilerGeneratedAttribute]
public void set_Z(int value);
    [CompilerGeneratedAttribute]
public bool get_ZRelative();
    [CompilerGeneratedAttribute]
public void set_ZRelative(bool value);
    public virtual string ToString();
}
public class MiNET.Plugins.BlockTypeEnum : EnumBase {
}
public class MiNET.Plugins.Command : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Version[] <Versions>k__BackingField;
    [JsonIgnoreAttribute]
public string Name { get; public set; }
    public Version[] Versions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Version[] get_Versions();
    [CompilerGeneratedAttribute]
public void set_Versions(Version[] value);
}
public class MiNET.Plugins.CommandNameEnum : EnumBase {
}
public class MiNET.Plugins.Commands.HelpCommand : object {
    private PluginManager _pluginManager;
    public HelpCommand(PluginManager pluginManager);
    [CommandAttribute]
public HelpResponseByName Help(Player player, CommandNameEnum command);
    [CommandAttribute]
public HelpResponseByPage Help(Player player, int page);
}
public class MiNET.Plugins.Commands.VanillaCommands : object {
    private static ILog Log;
    private static VanillaCommands();
    [CommandAttribute]
[AuthorizeAttribute]
public string MakeOperator(Player commander, Target target);
    [CommandAttribute]
public void Worldbuilder(Player commander);
    [CommandAttribute]
public string SetBlock(Player commander, BlockPos position, BlockTypeEnum tileName, int tileData);
    [CommandAttribute]
public string Give(Player commander, Target player, ItemTypeEnum itemName, int amount, int data);
    [CommandAttribute]
public void Summon(Player player, EntityTypeEnum entityType, bool noAi, BlockPos spawnPos);
    [CommandAttribute]
public string Xp(Player commander, int experience, Target player);
    [CommandAttribute]
public string Difficulty(Player commander, Difficulty difficulty);
    [CommandAttribute]
public string TimeSet(Player commander, int time);
    [CommandAttribute]
public string TimeSet(Player commander, DayNight time);
    [CommandAttribute]
public string Teleport(Player commander, BlockPos destination, int yrot, int xrot);
    [CommandAttribute]
public string Teleport(Player commander, Target victim, BlockPos destination, int yrot, int xrot);
    [CommandAttribute]
public string Teleport(Player commander, Target victim, Target target);
    [CommandAttribute]
public string Teleport(Player commander, Target target);
    [CommandAttribute]
public void Enchant(Player commander, Target target, EnchantmentTypeEnum enchantmentTypeName, int level);
    [CommandAttribute]
public string GameMode(Player commander, GameMode gameMode, Target target);
    [CommandAttribute]
public string GameRule(Player player, GameRulesEnum rule);
    [CommandAttribute]
public string GameRule(Player player, GameRulesEnum rule, bool value);
    [CommandAttribute]
public string Daylock(Player player, bool value);
    [CommandAttribute]
public void Fill(Player commander, BlockPos from, BlockPos to, BlockTypeEnum tileName, int tileData);
}
public class MiNET.Plugins.CommandSet : Dictionary`2<string, Command> {
}
public class MiNET.Plugins.DimensionEnum : EnumBase {
}
public class MiNET.Plugins.EffectEnum : EnumBase {
}
public class MiNET.Plugins.EnchantEnum : EnumBase {
}
public class MiNET.Plugins.EnchantmentTypeEnum : EnumBase {
}
public class MiNET.Plugins.EntityPos : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <YRelative>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Z>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ZRelative>k__BackingField;
    public double X { get; public set; }
    public bool XRelative { get; public set; }
    public double Y { get; public set; }
    public bool YRelative { get; public set; }
    public double Z { get; public set; }
    public bool ZRelative { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public bool get_XRelative();
    [CompilerGeneratedAttribute]
public void set_XRelative(bool value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public bool get_YRelative();
    [CompilerGeneratedAttribute]
public void set_YRelative(bool value);
    [CompilerGeneratedAttribute]
public double get_Z();
    [CompilerGeneratedAttribute]
public void set_Z(double value);
    [CompilerGeneratedAttribute]
public bool get_ZRelative();
    [CompilerGeneratedAttribute]
public void set_ZRelative(bool value);
    public virtual string ToString();
}
public class MiNET.Plugins.EntityTypeEnum : EnumBase {
}
public abstract class MiNET.Plugins.EnumBase : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class MiNET.Plugins.FeatureEnum : EnumBase {
}
public class MiNET.Plugins.FormatRule : object {
    [CompilerGeneratedAttribute]
private String[] <NotEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IsTrue>k__BackingField;
    [JsonPropertyAttribute("not_empty")]
public String[] NotEmpty { get; public set; }
    [JsonPropertyAttribute("is_true")]
public String[] IsTrue { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_NotEmpty();
    [CompilerGeneratedAttribute]
public void set_NotEmpty(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_IsTrue();
    [CompilerGeneratedAttribute]
public void set_IsTrue(String[] value);
}
public class MiNET.Plugins.FormatString : object {
    [CompilerGeneratedAttribute]
private string <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ParamsToUse>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatRule <ShouldShow>k__BackingField;
    public string Color { get; public set; }
    public string Format { get; public set; }
    [JsonPropertyAttribute("params_to_use")]
public String[] ParamsToUse { get; public set; }
    [JsonPropertyAttribute("should_show")]
public FormatRule ShouldShow { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public String[] get_ParamsToUse();
    [CompilerGeneratedAttribute]
public void set_ParamsToUse(String[] value);
    [CompilerGeneratedAttribute]
public FormatRule get_ShouldShow();
    [CompilerGeneratedAttribute]
public void set_ShouldShow(FormatRule value);
}
public interface MiNET.Plugins.ICommandFilter {
    public abstract virtual void OnCommandExecuting(Player player);
    public abstract virtual void OnCommandExecuted();
}
public class MiNET.Plugins.Input : object {
    [CompilerGeneratedAttribute]
private Parameter[] <Parameters>k__BackingField;
    public Parameter[] Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public Parameter[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Parameter[] value);
}
public interface MiNET.Plugins.IParameterSerializer {
    public abstract virtual void Deserialize(Player player, string input);
}
public interface MiNET.Plugins.IPlugin {
    public abstract virtual void OnEnable(PluginContext context);
    public abstract virtual void OnDisable();
}
public interface MiNET.Plugins.IStartup {
    public abstract virtual void Configure(MiNetServer server);
}
public class MiNET.Plugins.ItemTypeEnum : EnumBase {
}
public class MiNET.Plugins.Output : object {
    [CompilerGeneratedAttribute]
private FormatString[] <FormatStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private Parameter[] <Parameters>k__BackingField;
    [JsonPropertyAttribute("format_strings")]
public FormatString[] FormatStrings { get; public set; }
    public Parameter[] Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public FormatString[] get_FormatStrings();
    [CompilerGeneratedAttribute]
public void set_FormatStrings(FormatString[] value);
    [CompilerGeneratedAttribute]
public Parameter[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Parameter[] value);
}
public class MiNET.Plugins.Overload : object {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Input <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser <Parser>k__BackingField;
    [JsonIgnoreAttribute]
public MethodInfo Method { get; public set; }
    [JsonIgnoreAttribute]
public string Description { get; public set; }
    public Input Input { get; public set; }
    public Parser Parser { get; public set; }
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(MethodInfo value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Input get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(Input value);
    [CompilerGeneratedAttribute]
public Parser get_Parser();
    [CompilerGeneratedAttribute]
public void set_Parser(Parser value);
}
public class MiNET.Plugins.Parameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnumType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EnumValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetData <TargetData>k__BackingField;
    public string Name { get; public set; }
    public string Type { get; public set; }
    [JsonPropertyAttribute("enum_type")]
public string EnumType { get; public set; }
    [JsonPropertyAttribute("enum_values")]
public String[] EnumValues { get; public set; }
    public bool Optional { get; public set; }
    [JsonPropertyAttribute("target_data")]
public TargetData TargetData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_EnumType();
    [CompilerGeneratedAttribute]
public void set_EnumType(string value);
    [CompilerGeneratedAttribute]
public String[] get_EnumValues();
    [CompilerGeneratedAttribute]
public void set_EnumValues(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Optional();
    [CompilerGeneratedAttribute]
public void set_Optional(bool value);
    [CompilerGeneratedAttribute]
public TargetData get_TargetData();
    [CompilerGeneratedAttribute]
public void set_TargetData(TargetData value);
}
public class MiNET.Plugins.Parser : object {
    [CompilerGeneratedAttribute]
private string <Tokens>k__BackingField;
    public string Tokens { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(string value);
}
public abstract class MiNET.Plugins.Plugin : object {
    [CompilerGeneratedAttribute]
private PluginContext <Context>k__BackingField;
    [ThreadStaticAttribute]
public static Player CurrentPlayer;
    protected PluginContext Context { get; protected set; }
    [CompilerGeneratedAttribute]
protected PluginContext get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(PluginContext value);
    public sealed virtual void OnEnable(PluginContext context);
    protected virtual void OnEnable();
    public virtual void OnDisable();
}
public class MiNET.Plugins.PluginContext : object {
    [CompilerGeneratedAttribute]
private MiNetServer <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private PluginManager <PluginManager>k__BackingField;
    [CompilerGeneratedAttribute]
private LevelManager <LevelManager>k__BackingField;
    public MiNetServer Server { get; private set; }
    public PluginManager PluginManager { get; private set; }
    public LevelManager LevelManager { get; private set; }
    public PluginContext(MiNetServer server, PluginManager pluginManager, LevelManager levelManager);
    [CompilerGeneratedAttribute]
public MiNetServer get_Server();
    [CompilerGeneratedAttribute]
private void set_Server(MiNetServer value);
    [CompilerGeneratedAttribute]
public PluginManager get_PluginManager();
    [CompilerGeneratedAttribute]
private void set_PluginManager(PluginManager value);
    [CompilerGeneratedAttribute]
public LevelManager get_LevelManager();
    [CompilerGeneratedAttribute]
private void set_LevelManager(LevelManager value);
}
public class MiNET.Plugins.PluginManager : object {
    private static ILog Log;
    private List`1<object> _plugins;
    private Dictionary`2<MethodInfo, PacketHandlerAttribute> _packetHandlerDictionary;
    private Dictionary`2<MethodInfo, PacketHandlerAttribute> _packetSendHandlerDictionary;
    private Dictionary`2<MethodInfo, CommandAttribute> _pluginCommands;
    [CompilerGeneratedAttribute]
private CommandSet <Commands>k__BackingField;
    private string _currentPath;
    [CompilerGeneratedAttribute]
private ResolveEventHandler AssemblyResolve;
    public List`1<object> Plugins { get; }
    public CommandSet Commands { get; public set; }
    private static PluginManager();
    public List`1<object> get_Plugins();
    [CompilerGeneratedAttribute]
public CommandSet get_Commands();
    [CompilerGeneratedAttribute]
public void set_Commands(CommandSet value);
    internal void LoadPlugins();
    public void LoadPlugin(object plugin);
    private void LoadPlugin(object plugin, Type type);
    [CompilerGeneratedAttribute]
public void add_AssemblyResolve(ResolveEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AssemblyResolve(ResolveEventHandler value);
    private Assembly MyResolveEventHandler(object sender, ResolveEventArgs args);
    private bool TryLoadAssembly(string path, string input, Assembly& assembly);
    public void LoadCommands(object instance);
    private void DebugPrintCommands();
    public void LoadCommands(Type type);
    public static CommandSet GenerateCommandSet(MethodInfo[] methods);
    public static string ToCamelCase(string s);
    private static string GetPropertyType(PropertyInfo parameter);
    private static string GetParameterType(ParameterInfo parameter);
    public void UnloadCommands(object instance);
    public void LoadPacketHandlers(object instance);
    private void LoadPacketHandlers(Type type);
    public void UnloadPacketHandlers(object instance);
    internal void ExecuteStartup(MiNetServer server);
    internal void EnablePlugins(MiNetServer server, LevelManager levelManager);
    internal void DisablePlugins();
    public object HandleCommand(Player player, string cmdline);
    private Command GetCommand(string commandName);
    public object HandleCommand(Player player, string commandName, string commandOverload, object commandInputJson);
    public static bool HasProperty(object obj, string name);
    private static bool IsParams(ParameterInfo param);
    internal bool ExecuteCommand(MethodInfo method, Player player, String[] args, Object& result);
    public Target FillTargets(Player commander, Level level, string source);
    public static Target ParseTarget(string source);
    internal Packet PluginPacketHandler(Packet message, bool isReceiveHandler, Player player);
    public static string GetUsage(Command command, bool includeDescription, string prepend, string postpend);
}
public class MiNET.Plugins.RelValue : object {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Relative>k__BackingField;
    public double Value { get; public set; }
    public bool Relative { get; public set; }
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public bool get_Relative();
    [CompilerGeneratedAttribute]
public void set_Relative(bool value);
    public virtual string ToString();
}
public abstract class MiNET.Plugins.SoftEnumBase : object {
}
public class MiNET.Plugins.Target : object {
    [CompilerGeneratedAttribute]
private Rule[] <Rules>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private Player[] <Players>k__BackingField;
    [CompilerGeneratedAttribute]
private Entity[] <Entities>k__BackingField;
    public Rule[] Rules { get; public set; }
    public string Selector { get; public set; }
    public Player[] Players { get; public set; }
    public Entity[] Entities { get; public set; }
    [CompilerGeneratedAttribute]
public Rule[] get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(Rule[] value);
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public Player[] get_Players();
    [CompilerGeneratedAttribute]
public void set_Players(Player[] value);
    [CompilerGeneratedAttribute]
public Entity[] get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(Entity[] value);
    public virtual string ToString();
}
public class MiNET.Plugins.TargetData : object {
    [CompilerGeneratedAttribute]
private bool <PlayersOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MainTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDeadPlayers>k__BackingField;
    [JsonPropertyAttribute("players_only")]
public bool PlayersOnly { get; public set; }
    [JsonPropertyAttribute("main_target")]
public bool MainTarget { get; public set; }
    [JsonPropertyAttribute("allow_dead_players")]
public bool AllowDeadPlayers { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PlayersOnly();
    [CompilerGeneratedAttribute]
public void set_PlayersOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_MainTarget();
    [CompilerGeneratedAttribute]
public void set_MainTarget(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowDeadPlayers();
    [CompilerGeneratedAttribute]
public void set_AllowDeadPlayers(bool value);
}
public class MiNET.Plugins.TestSoftEnum : SoftEnumBase {
}
public class MiNET.Plugins.Version : object {
    [CompilerGeneratedAttribute]
private int <CommandVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommandPermission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresTellPerms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresChatPerms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputToSpeech>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresEdu>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowsIndirectExec>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Overload> <Overloads>k__BackingField;
    [JsonPropertyAttribute("version")]
public int CommandVersion { get; public set; }
    public String[] Aliases { get; public set; }
    public string Description { get; public set; }
    public string Permission { get; public set; }
    public int CommandPermission { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool RequiresTellPerms { get; public set; }
    public bool RequiresChatPerms { get; public set; }
    public bool OutputToSpeech { get; public set; }
    [JsonPropertyAttribute("requires_edu")]
public bool RequiresEdu { get; public set; }
    [JsonPropertyAttribute("allows_indirect_exec")]
public bool AllowsIndirectExec { get; public set; }
    [JsonPropertyAttribute("is_hidden")]
public bool IsHidden { get; public set; }
    public Dictionary`2<string, Overload> Overloads { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CommandVersion();
    [CompilerGeneratedAttribute]
public void set_CommandVersion(int value);
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
    [CompilerGeneratedAttribute]
public int get_CommandPermission();
    [CompilerGeneratedAttribute]
public void set_CommandPermission(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_RequiresTellPerms();
    [CompilerGeneratedAttribute]
public void set_RequiresTellPerms(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresChatPerms();
    [CompilerGeneratedAttribute]
public void set_RequiresChatPerms(bool value);
    [CompilerGeneratedAttribute]
public bool get_OutputToSpeech();
    [CompilerGeneratedAttribute]
public void set_OutputToSpeech(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresEdu();
    [CompilerGeneratedAttribute]
public void set_RequiresEdu(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowsIndirectExec();
    [CompilerGeneratedAttribute]
public void set_AllowsIndirectExec(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Overload> get_Overloads();
    [CompilerGeneratedAttribute]
public void set_Overloads(Dictionary`2<string, Overload> value);
}
public class MiNET.Popup : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentTick>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageType <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DisplayDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TransitionDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public long Id { get; public set; }
    internal long CurrentTick { get; internal set; }
    public MessageType MessageType { get; public set; }
    public string Message { get; public set; }
    public long Duration { get; public set; }
    public long DisplayDelay { get; public set; }
    public long TransitionDelay { get; public set; }
    public int Priority { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
internal long get_CurrentTick();
    [CompilerGeneratedAttribute]
internal void set_CurrentTick(long value);
    [CompilerGeneratedAttribute]
public MessageType get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(MessageType value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public long get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(long value);
    [CompilerGeneratedAttribute]
public long get_DisplayDelay();
    [CompilerGeneratedAttribute]
public void set_DisplayDelay(long value);
    [CompilerGeneratedAttribute]
public long get_TransitionDelay();
    [CompilerGeneratedAttribute]
public void set_TransitionDelay(long value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
}
public enum MiNET.ServerRole : Enum {
    public int value__;
    public static ServerRole Node;
    public static ServerRole Proxy;
    public static ServerRole Full;
}
public class MiNET.Session : Dictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private Player <Player>k__BackingField;
    public Player Player { get; public set; }
    public Session(Player player);
    [CompilerGeneratedAttribute]
public Player get_Player();
    [CompilerGeneratedAttribute]
public void set_Player(Player value);
}
public class MiNET.SessionManager : object {
    private ConcurrentDictionary`2<UUID, Session> _sessions;
    public virtual Session FindSession(Player player);
    public virtual Session CreateSession(Player player);
    public virtual void SaveSession(Session session);
    public virtual void RemoveSession(Session session);
}
public class MiNET.Sounds.AnvilBreakSound : Sound {
    public AnvilBreakSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.AnvilFallSound : Sound {
    public AnvilFallSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.AnvilUseSound : Sound {
    public AnvilUseSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.BlazeFireballSound : Sound {
    public BlazeFireballSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.CameraTakePictureSound : Sound {
    public CameraTakePictureSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.ClickFailSound : Sound {
    public ClickFailSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.ClickSound : Sound {
    public ClickSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.DoorCloseSound : Sound {
    public DoorCloseSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.ExperienceOrbSound : Sound {
    public ExperienceOrbSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.FizzSound : Sound {
    public FizzSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.GhastSound : Sound {
    public GhastSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.ShootSound : Sound {
    public ShootSound(Vector3 position, int pitch);
}
public class MiNET.Sounds.Sound : object {
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Pitch>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <Position>k__BackingField;
    public short Id { get; private set; }
    public int Pitch { get; public set; }
    public Vector3 Position { get; public set; }
    public Sound(short id, Vector3 position, int pitch);
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(short value);
    [CompilerGeneratedAttribute]
public int get_Pitch();
    [CompilerGeneratedAttribute]
public void set_Pitch(int value);
    [CompilerGeneratedAttribute]
public Vector3 get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Vector3 value);
    public virtual void Spawn(Level level);
    public virtual void SpawnToPlayers(Player[] players);
}
public class MiNET.SpreadLevelManager : LevelManager {
    private static ILog Log;
    private int _numberOfLevels;
    public SpreadLevelManager(int numberOfLevels);
    private static SpreadLevelManager();
    public virtual Level GetLevel(Player player, string name);
    public virtual Level GetDimension(Level level, Dimension dimension);
    public virtual Level CreateLevel(string name, IWorldProvider provider);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(int i);
}
public enum MiNET.TitleType : Enum {
    public int value__;
    public static TitleType Clear;
    public static TitleType Reset;
    public static TitleType Title;
    public static TitleType SubTitle;
    public static TitleType ActionBar;
    public static TitleType AnimationTimes;
}
public class MiNET.UI.Button : Element {
    [CompilerGeneratedAttribute]
private Image <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Player, SimpleForm> <ExecuteAction>k__BackingField;
    public Image Image { get; public set; }
    [JsonIgnoreAttribute]
public Action`2<Player, SimpleForm> ExecuteAction { get; public set; }
    [CompilerGeneratedAttribute]
public Image get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(Image value);
    [CompilerGeneratedAttribute]
public Action`2<Player, SimpleForm> get_ExecuteAction();
    [CompilerGeneratedAttribute]
public void set_ExecuteAction(Action`2<Player, SimpleForm> value);
    public void Execute(Player player, SimpleForm form);
}
public abstract class MiNET.UI.CustomElement : Element {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
}
public class MiNET.UI.CustomForm : Form {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private List`1<CustomElement> <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Player, CustomForm> <ExecuteAction>k__BackingField;
    public List`1<CustomElement> Content { get; public set; }
    [JsonIgnoreAttribute]
public Action`2<Player, CustomForm> ExecuteAction { get; public set; }
    private static CustomForm();
    [CompilerGeneratedAttribute]
public List`1<CustomElement> get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(List`1<CustomElement> value);
    public virtual void FromJson(string json, Player player);
    [CompilerGeneratedAttribute]
public Action`2<Player, CustomForm> get_ExecuteAction();
    [CompilerGeneratedAttribute]
public void set_ExecuteAction(Action`2<Player, CustomForm> value);
    public void Execute(Player player);
}
public class MiNET.UI.Dropdown : CustomElement {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Options>k__BackingField;
    [JsonPropertyAttribute("default")]
public int Value { get; public set; }
    public List`1<string> Options { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(List`1<string> value);
}
public abstract class MiNET.UI.Element : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public abstract class MiNET.UI.Form : object {
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public UInt32 Id { get; public set; }
    public string Type { get; protected set; }
    public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    public string ToJson();
    public abstract virtual void FromJson(string json, Player player);
}
public class MiNET.UI.Image : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Type { get; public set; }
    [JsonPropertyAttribute("data")]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class MiNET.UI.Input : CustomElement {
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Placeholder { get; public set; }
    [JsonPropertyAttribute("default")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class MiNET.UI.Label : CustomElement {
}
public class MiNET.UI.ModalForm : Form {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Button1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Button2>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<Player, ModalForm> <ExecuteAction>k__BackingField;
    public string Content { get; public set; }
    public string Button1 { get; public set; }
    public string Button2 { get; public set; }
    [JsonIgnoreAttribute]
public Action`2<Player, ModalForm> ExecuteAction { get; public set; }
    private static ModalForm();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public string get_Button1();
    [CompilerGeneratedAttribute]
public void set_Button1(string value);
    [CompilerGeneratedAttribute]
public string get_Button2();
    [CompilerGeneratedAttribute]
public void set_Button2(string value);
    public virtual void FromJson(string json, Player player);
    [CompilerGeneratedAttribute]
public Action`2<Player, ModalForm> get_ExecuteAction();
    [CompilerGeneratedAttribute]
public void set_ExecuteAction(Action`2<Player, ModalForm> value);
    public void Execute(Player player);
}
public class MiNET.UI.SimpleForm : Form {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Button> <Buttons>k__BackingField;
    public string Content { get; public set; }
    public List`1<Button> Buttons { get; public set; }
    private static SimpleForm();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public List`1<Button> get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(List`1<Button> value);
    public virtual void FromJson(string json, Player player);
}
public class MiNET.UI.Slider : CustomElement {
    [CompilerGeneratedAttribute]
private float <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public float Min { get; public set; }
    public float Max { get; public set; }
    public float Step { get; public set; }
    [JsonPropertyAttribute("default")]
public float Value { get; public set; }
    [CompilerGeneratedAttribute]
public float get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(float value);
    [CompilerGeneratedAttribute]
public float get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(float value);
    [CompilerGeneratedAttribute]
public float get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(float value);
    [CompilerGeneratedAttribute]
public float get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(float value);
}
public class MiNET.UI.StepSlider : CustomElement {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Steps>k__BackingField;
    [JsonPropertyAttribute("default")]
public int Value { get; public set; }
    public List`1<string> Steps { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(List`1<string> value);
}
public class MiNET.UI.Toggle : CustomElement {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    [JsonPropertyAttribute("default")]
public bool Value { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(bool value);
}
public class MiNET.Utils.AnimationKey : object {
    [CompilerGeneratedAttribute]
private bool <ExecuteImmediate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <StartRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <EndRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Duration>k__BackingField;
    public bool ExecuteImmediate { get; public set; }
    public bool ResetBefore { get; public set; }
    public bool ResetAfter { get; public set; }
    public Vector3 StartRotation { get; public set; }
    public Vector3 EndRotation { get; public set; }
    public UInt32 Duration { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ExecuteImmediate();
    [CompilerGeneratedAttribute]
public void set_ExecuteImmediate(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResetBefore();
    [CompilerGeneratedAttribute]
public void set_ResetBefore(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResetAfter();
    [CompilerGeneratedAttribute]
public void set_ResetAfter(bool value);
    [CompilerGeneratedAttribute]
public Vector3 get_StartRotation();
    [CompilerGeneratedAttribute]
public void set_StartRotation(Vector3 value);
    [CompilerGeneratedAttribute]
public Vector3 get_EndRotation();
    [CompilerGeneratedAttribute]
public void set_EndRotation(Vector3 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(UInt32 value);
}
public class MiNET.Utils.BeaconPaymentAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private int <PrimaryEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecondaryEffect>k__BackingField;
    public int PrimaryEffect { get; public set; }
    public int SecondaryEffect { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryEffect();
    [CompilerGeneratedAttribute]
public void set_PrimaryEffect(int value);
    [CompilerGeneratedAttribute]
public int get_SecondaryEffect();
    [CompilerGeneratedAttribute]
public void set_SecondaryEffect(int value);
}
public class MiNET.Utils.BlockMapDecorator : MapDecorator {
    public BlockCoordinates Coordinates;
}
public class MiNET.Utils.BlockPalette : List`1<BlockStateContainer> {
    public static int Version { get; }
    public static int get_Version();
    public static BlockPalette FromJson(string json);
}
public class MiNET.Utils.BlockStateByte : object {
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Value>k__BackingField;
    public int Type { get; }
    public string Name { get; public set; }
    public byte Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public byte get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(byte value);
    protected bool Equals(BlockStateByte other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MiNET.Utils.BlockStateContainer : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RuntimeId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IBlockState> <States>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <StatesCacheNbt>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemPickInstance <ItemInstance>k__BackingField;
    public int Id { get; public set; }
    public short Data { get; public set; }
    public string Name { get; public set; }
    public int RuntimeId { get; public set; }
    public List`1<IBlockState> States { get; public set; }
    [JsonIgnoreAttribute]
public Byte[] StatesCacheNbt { get; public set; }
    public ItemPickInstance ItemInstance { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public short get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(short value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_RuntimeId();
    [CompilerGeneratedAttribute]
public void set_RuntimeId(int value);
    [CompilerGeneratedAttribute]
public List`1<IBlockState> get_States();
    [CompilerGeneratedAttribute]
public void set_States(List`1<IBlockState> value);
    [CompilerGeneratedAttribute]
public Byte[] get_StatesCacheNbt();
    [CompilerGeneratedAttribute]
public void set_StatesCacheNbt(Byte[] value);
    [CompilerGeneratedAttribute]
public ItemPickInstance get_ItemInstance();
    [CompilerGeneratedAttribute]
public void set_ItemInstance(ItemPickInstance value);
    protected bool Equals(BlockStateContainer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MiNET.Utils.BlockStateInt : object {
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Type { get; }
    public string Name { get; public set; }
    public int Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    protected bool Equals(BlockStateInt other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MiNET.Utils.BlockStateString : object {
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public int Type { get; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    protected bool Equals(BlockStateString other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class MiNET.Utils.ChatColors : object {
    public static string Black;
    public static string DarkBlue;
    public static string DarkGreen;
    public static string DarkAqua;
    public static string DarkRed;
    public static string DarkPurple;
    public static string Gold;
    public static string Gray;
    public static string DarkGray;
    public static string Blue;
    public static string Green;
    public static string Aqua;
    public static string Red;
    public static string LightPurple;
    public static string Yellow;
    public static string White;
}
public static class MiNET.Utils.ChatFormatting : object {
    public static string Obfuscated;
    public static string Bold;
    public static string Strikethrough;
    public static string Underline;
    public static string Italic;
    public static string Reset;
}
[DebuggerDisplayAttribute("Count={Count}")]
public class MiNET.Utils.Collections.ConcurrentPriorityQueue`2 : object {
    private object _syncLock;
    private MinBinaryHeap<TKey, TValue> _minHeap;
    public bool IsEmpty { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConcurrentPriorityQueue`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public void Enqueue(TKey priority, TValue value);
    public void Enqueue(KeyValuePair`2<TKey, TValue> item);
    public bool TryDequeue(KeyValuePair`2& result);
    public bool TryPeek(KeyValuePair`2& result);
    public void Clear();
    public bool get_IsEmpty();
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int index);
    public sealed virtual KeyValuePair`2[] ToArray();
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.TryAdd(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.TryTake(KeyValuePair`2& item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class MiNET.Utils.Config : object {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private static ConfigProvider <Provider>k__BackingField;
    public static ConfigProvider Provider { get; public set; }
    private static Config();
    [CompilerGeneratedAttribute]
public static ConfigProvider get_Provider();
    [CompilerGeneratedAttribute]
public static void set_Provider(ConfigProvider value);
    public static ServerRole GetProperty(string property, ServerRole defaultValue);
    public static GameMode GetProperty(string property, GameMode defaultValue);
    public static bool GetProperty(string property, bool defaultValue);
    public static int GetProperty(string property, int defaultValue);
    public static long GetProperty(string property, long defaultValue);
    public static ulong GetProperty(string property, ulong defaultValue);
    public static Difficulty GetProperty(string property, Difficulty defaultValue);
    public static string GetProperty(string property, string defaultValue);
    private static string ReadString(string property);
}
public abstract class MiNET.Utils.ConfigProvider : object {
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    public bool Initialized { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
private void set_Initialized(bool value);
    public void Initialize();
    protected abstract virtual void OnInitialize();
    public abstract virtual string ReadString(string property);
}
public class MiNET.Utils.ConsumeAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Source>k__BackingField;
    public byte Count { get; public set; }
    public StackRequestSlotInfo Source { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(StackRequestSlotInfo value);
}
public class MiNET.Utils.ContainerTransactionRecord : TransactionRecord {
    [CompilerGeneratedAttribute]
private int <InventoryId>k__BackingField;
    public int InventoryId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_InventoryId();
    [CompilerGeneratedAttribute]
public void set_InventoryId(int value);
}
public class MiNET.Utils.CraftAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private UInt32 <RecipeNetworkId>k__BackingField;
    public UInt32 RecipeNetworkId { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_RecipeNetworkId();
    [CompilerGeneratedAttribute]
public void set_RecipeNetworkId(UInt32 value);
}
public class MiNET.Utils.CraftAutoAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private UInt32 <RecipeNetworkId>k__BackingField;
    public UInt32 RecipeNetworkId { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_RecipeNetworkId();
    [CompilerGeneratedAttribute]
public void set_RecipeNetworkId(UInt32 value);
}
public class MiNET.Utils.CraftCreativeAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private UInt32 <CreativeItemNetworkId>k__BackingField;
    public UInt32 CreativeItemNetworkId { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_CreativeItemNetworkId();
    [CompilerGeneratedAttribute]
public void set_CreativeItemNetworkId(UInt32 value);
}
public class MiNET.Utils.CraftNotImplementedDeprecatedAction : ItemStackAction {
}
public class MiNET.Utils.CraftRecipeOptionalAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private UInt32 <RecipeNetworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FilteredStringIndex>k__BackingField;
    public UInt32 RecipeNetworkId { get; public set; }
    public int FilteredStringIndex { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_RecipeNetworkId();
    [CompilerGeneratedAttribute]
public void set_RecipeNetworkId(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_FilteredStringIndex();
    [CompilerGeneratedAttribute]
public void set_FilteredStringIndex(int value);
}
public class MiNET.Utils.CraftResultDeprecatedAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private ItemStacks <ResultItems>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <TimesCrafted>k__BackingField;
    public ItemStacks ResultItems { get; public set; }
    public byte TimesCrafted { get; public set; }
    [CompilerGeneratedAttribute]
public ItemStacks get_ResultItems();
    [CompilerGeneratedAttribute]
public void set_ResultItems(ItemStacks value);
    [CompilerGeneratedAttribute]
public byte get_TimesCrafted();
    [CompilerGeneratedAttribute]
public void set_TimesCrafted(byte value);
}
public class MiNET.Utils.CraftTransactionRecord : TransactionRecord {
    [CompilerGeneratedAttribute]
private CraftingAction <Action>k__BackingField;
    public CraftingAction Action { get; public set; }
    [CompilerGeneratedAttribute]
public CraftingAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(CraftingAction value);
}
public class MiNET.Utils.CreateAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private byte <ResultSlot>k__BackingField;
    public byte ResultSlot { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_ResultSlot();
    [CompilerGeneratedAttribute]
public void set_ResultSlot(byte value);
}
public class MiNET.Utils.CreativeItemStacks : ItemStacks {
}
public class MiNET.Utils.CreativeTransactionRecord : TransactionRecord {
    [CompilerGeneratedAttribute]
private int <InventoryId>k__BackingField;
    public int InventoryId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_InventoryId();
    [CompilerGeneratedAttribute]
public void set_InventoryId(int value);
}
public class MiNET.Utils.Cryptography.CryptoContext : object {
    public bool UseEncryption;
    [CompilerGeneratedAttribute]
private IBufferedCipher <Decryptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IBufferedCipher <Encryptor>k__BackingField;
    public long SendCounter;
    [CompilerGeneratedAttribute]
private AsymmetricCipherKeyPair <ClientKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Key>k__BackingField;
    public IBufferedCipher Decryptor { get; public set; }
    public IBufferedCipher Encryptor { get; public set; }
    public AsymmetricCipherKeyPair ClientKey { get; public set; }
    public Byte[] Key { get; public set; }
    [CompilerGeneratedAttribute]
public IBufferedCipher get_Decryptor();
    [CompilerGeneratedAttribute]
public void set_Decryptor(IBufferedCipher value);
    [CompilerGeneratedAttribute]
public IBufferedCipher get_Encryptor();
    [CompilerGeneratedAttribute]
public void set_Encryptor(IBufferedCipher value);
    [CompilerGeneratedAttribute]
public AsymmetricCipherKeyPair get_ClientKey();
    [CompilerGeneratedAttribute]
public void set_ClientKey(AsymmetricCipherKeyPair value);
    [CompilerGeneratedAttribute]
public Byte[] get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Byte[] value);
}
public class MiNET.Utils.Cryptography.CryptoRandom : RandomNumberGenerator {
    private static RandomNumberGenerator r;
    public virtual void GetBytes(Byte[] buffer);
    public double NextDouble();
    public int Next(int minValue, int maxValue);
    public int Next();
    public int Next(int maxValue);
}
[ExtensionAttribute]
public static class MiNET.Utils.Cryptography.CryptoUtils : object {
    private static ILog Log;
    private static CryptoUtils();
    [ExtensionAttribute]
public static Byte[] DecodeBase64Url(string input);
    [ExtensionAttribute]
public static string EncodeBase64Url(Byte[] input);
    [ExtensionAttribute]
public static Byte[] DecodeBase64(string input);
    [ExtensionAttribute]
public static string EncodeBase64(Byte[] input);
    [ExtensionAttribute]
public static Byte[] ToDerEncoded(ECDiffieHellmanPublicKey key);
    private static Byte[] FixPublicKey(Byte[] publicKeyBlob);
    public static Byte[] ImportECDsaCngKeyFromCngKey(Byte[] inKey);
    public static Byte[] Encrypt(ReadOnlyMemory`1<byte> payload, CryptoContext cryptoContext);
    public static ReadOnlyMemory`1<byte> Decrypt(ReadOnlyMemory`1<byte> payload, CryptoContext cryptoContext);
    public static AsymmetricCipherKeyPair GenerateClientKey();
    public static Byte[] EncodeJwt(string username, AsymmetricCipherKeyPair newKey, bool isEmulator);
    public static Byte[] EncodeSkinJwt(AsymmetricCipherKeyPair newKey, string username);
    private static ECDsa ConvertToSingKeyFormat(AsymmetricCipherKeyPair key);
    public static Byte[] FixDSize(Byte[] input, int expectedSize);
    public static Byte[] CompressJwtBytes(Byte[] certChain, Byte[] skinData, CompressionLevel compressionLevel);
}
public class MiNET.Utils.DefaultConfigProvider : ConfigProvider {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <KeyValues>k__BackingField;
    public static string ConfigFileName;
    private IReadOnlyDictionary`2<string, string> KeyValues { get; private set; }
    private static DefaultConfigProvider();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> get_KeyValues();
    [CompilerGeneratedAttribute]
private void set_KeyValues(IReadOnlyDictionary`2<string, string> value);
    private void LoadValues(string data);
    protected virtual void OnInitialize();
    public virtual string ReadString(string property);
}
public class MiNET.Utils.DestroyAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Source>k__BackingField;
    public byte Count { get; public set; }
    public StackRequestSlotInfo Source { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(StackRequestSlotInfo value);
}
public class MiNET.Utils.Diagnostics.Measurement : object {
    private static ILog Log;
    public string Name;
    public Stopwatch Timer;
    private Profiler _profiler;
    private Measurement _parent;
    private ConcurrentBag`1<ProfilerResult> Results;
    public Measurement(string name, Profiler profiler, Measurement parent);
    private static Measurement();
    public Measurement Begin(string name);
    public void End();
    protected virtual override void Finalize();
}
public class MiNET.Utils.Diagnostics.Profiler : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    private ConcurrentBag`1<ProfilerResult> _results;
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public Measurement Begin(string name);
    public void End(Measurement measurement);
    public void Reset();
    public string GetResults(long timespan);
}
public class MiNET.Utils.Diagnostics.ProfilerResult : ValueType {
    public string Name;
    public long Time;
    public long TimeStamp;
    public ProfilerResult(string name, long time, long timeStamp);
}
public class MiNET.Utils.DropAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Randomly>k__BackingField;
    public byte Count { get; public set; }
    public StackRequestSlotInfo Source { get; public set; }
    public bool Randomly { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(StackRequestSlotInfo value);
    [CompilerGeneratedAttribute]
public bool get_Randomly();
    [CompilerGeneratedAttribute]
public void set_Randomly(bool value);
}
public class MiNET.Utils.Enchant : object {
    [CompilerGeneratedAttribute]
private byte <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Cost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EnchantmentLevel> <Levels>k__BackingField;
    public byte Id { get; public set; }
    public byte Level { get; public set; }
    public UInt32 Cost { get; public set; }
    public int Weight { get; public set; }
    public List`1<EnchantmentLevel> Levels { get; public set; }
    public Enchant(byte id, byte level);
    public Enchant(EnchantingType enchanting, byte level);
    [CompilerGeneratedAttribute]
public byte get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(byte value);
    [CompilerGeneratedAttribute]
public byte get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(byte value);
    [CompilerGeneratedAttribute]
public UInt32 get_Cost();
    [CompilerGeneratedAttribute]
public void set_Cost(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    [CompilerGeneratedAttribute]
public List`1<EnchantmentLevel> get_Levels();
    [CompilerGeneratedAttribute]
public void set_Levels(List`1<EnchantmentLevel> value);
    private int GetWeight();
    private List`1<EnchantmentLevel> GetEnchantmentLevels();
}
public class MiNET.Utils.Enchanting : object {
    [CompilerGeneratedAttribute]
private EnchantingType <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Level>k__BackingField;
    public EnchantingType Id { get; public set; }
    public short Level { get; public set; }
    [CompilerGeneratedAttribute]
public EnchantingType get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(EnchantingType value);
    [CompilerGeneratedAttribute]
public short get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(short value);
}
[ExtensionAttribute]
public static class MiNET.Utils.EnchantingExtensions : object {
    [ExtensionAttribute]
public static List`1<Enchanting> GetEnchantings(Item tool);
    [ExtensionAttribute]
public static short GetEnchantingLevel(Item tool, EnchantingType enchantingId);
    [ExtensionAttribute]
public static void SetEnchantings(Item tool, List`1<Enchanting> enchantings);
}
public enum MiNET.Utils.EnchantingType : Enum {
    public int value__;
    public static EnchantingType Protection;
    public static EnchantingType FireProtection;
    public static EnchantingType FeatherFalling;
    public static EnchantingType BlastProtection;
    public static EnchantingType ProjectileProtection;
    public static EnchantingType Thorns;
    public static EnchantingType Respiration;
    public static EnchantingType DepthStrider;
    public static EnchantingType AquaAffinity;
    public static EnchantingType Sharpness;
    public static EnchantingType Smite;
    public static EnchantingType BaneOfArthropods;
    public static EnchantingType Knockback;
    public static EnchantingType FireAspect;
    public static EnchantingType Looting;
    public static EnchantingType Efficiency;
    public static EnchantingType SilkTouch;
    public static EnchantingType Unbreaking;
    public static EnchantingType Fortune;
    public static EnchantingType Power;
    public static EnchantingType Punch;
    public static EnchantingType Flame;
    public static EnchantingType Infinity;
    public static EnchantingType LuckOfTheSea;
    public static EnchantingType Lure;
}
public class MiNET.Utils.EnchantmentLevel : object {
    [CompilerGeneratedAttribute]
private int <MinLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Level>k__BackingField;
    public int MinLevel { get; private set; }
    public int MaxLevel { get; private set; }
    public byte Level { get; private set; }
    public EnchantmentLevel(int minLevel, int maxLevel, byte level);
    [CompilerGeneratedAttribute]
public int get_MinLevel();
    [CompilerGeneratedAttribute]
private void set_MinLevel(int value);
    [CompilerGeneratedAttribute]
public int get_MaxLevel();
    [CompilerGeneratedAttribute]
private void set_MaxLevel(int value);
    [CompilerGeneratedAttribute]
public byte get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(byte value);
}
public class MiNET.Utils.EnchantOption : object {
    [CompilerGeneratedAttribute]
private UInt32 <Cost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Enchant> <EquipActivatedEnchantments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Enchant> <HeldActivatedEnchantments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Enchant> <SelfActivatedEnchantments>k__BackingField;
    public UInt32 Cost { get; public set; }
    public int Flags { get; public set; }
    public string Name { get; public set; }
    public int OptionId { get; public set; }
    public List`1<Enchant> EquipActivatedEnchantments { get; public set; }
    public List`1<Enchant> HeldActivatedEnchantments { get; public set; }
    public List`1<Enchant> SelfActivatedEnchantments { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_Cost();
    [CompilerGeneratedAttribute]
public void set_Cost(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_OptionId();
    [CompilerGeneratedAttribute]
public void set_OptionId(int value);
    [CompilerGeneratedAttribute]
public List`1<Enchant> get_EquipActivatedEnchantments();
    [CompilerGeneratedAttribute]
public void set_EquipActivatedEnchantments(List`1<Enchant> value);
    [CompilerGeneratedAttribute]
public List`1<Enchant> get_HeldActivatedEnchantments();
    [CompilerGeneratedAttribute]
public void set_HeldActivatedEnchantments(List`1<Enchant> value);
    [CompilerGeneratedAttribute]
public List`1<Enchant> get_SelfActivatedEnchantments();
    [CompilerGeneratedAttribute]
public void set_SelfActivatedEnchantments(List`1<Enchant> value);
}
public class MiNET.Utils.EnchantOptions : List`1<EnchantOption> {
}
public class MiNET.Utils.EntityMapDecorator : MapDecorator {
    public long EntityId;
}
public class MiNET.Utils.GlobalItemStacks : List`1<Item> {
}
public class MiNET.Utils.GlobalTransactionRecord : TransactionRecord {
}
public class MiNET.Utils.GrindstoneStackRequestAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private UInt32 <RecipeNetworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RepairCost>k__BackingField;
    public UInt32 RecipeNetworkId { get; public set; }
    public int RepairCost { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_RecipeNetworkId();
    [CompilerGeneratedAttribute]
public void set_RecipeNetworkId(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_RepairCost();
    [CompilerGeneratedAttribute]
public void set_RepairCost(int value);
}
public interface MiNET.Utils.IBlockState {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class MiNET.Utils.Int24 : ValueType {
    private int _value;
    public Int24(ReadOnlySpan`1<byte> value);
    public Int24(int value);
    private static Int24 ToInt24(ReadOnlySpan`1<byte> value);
    public Byte[] GetBytes();
    public int IntValue();
    public static Byte[] FromInt(int value);
    public static Byte[] FromInt24(Int24 value);
    public sealed virtual int CompareTo(object value);
    public static Int24 op_Explicit(Byte[] values);
    public static Int24 op_Implicit(int value);
    public static Byte[] op_Explicit(Int24 d);
    public static int op_Implicit(Int24 d);
    public virtual string ToString();
}
public class MiNET.Utils.InventoryMismatchTransaction : Transaction {
}
public class MiNET.Utils.IO.BatchUtils : object {
    public static McpeWrapper CreateBatchPacket(CompressionLevel compressionLevel, Packet[] packets);
    public static McpeWrapper CreateBatchPacket(Memory`1<byte> input, CompressionLevel compressionLevel, bool writeLen);
    public static void WriteLength(Stream stream, int length);
}
public class MiNET.Utils.IO.Compression : object {
    private static ILog Log;
    private static Compression();
    public static Byte[] Compress(Memory`1<byte> input, bool writeLen, CompressionLevel compressionLevel);
    public static Byte[] CompressPacketsForWrapper(List`1<Packet> packets, CompressionLevel compressionLevel);
    public static void WriteLength(Stream stream, int lenght);
}
public class MiNET.Utils.IO.CooldownTimer : object {
    [CompilerGeneratedAttribute]
private TimeSpan <TimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ClearingTime>k__BackingField;
    public TimeSpan TimeSpan { get; private set; }
    public DateTime ClearingTime { get; private set; }
    public CooldownTimer(long timeSpan);
    public CooldownTimer(TimeSpan timeSpan);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeSpan();
    [CompilerGeneratedAttribute]
private void set_TimeSpan(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTime get_ClearingTime();
    [CompilerGeneratedAttribute]
private void set_ClearingTime(DateTime value);
    public void Reset();
    public bool CanExecute();
    public bool Execute();
}
public class MiNET.Utils.IO.CooldownTimerAction`1 : CooldownTimer {
    [CompilerGeneratedAttribute]
private Action`1<T> <CallBackAction>k__BackingField;
    public Action`1<T> CallBackAction { get; public set; }
    public CooldownTimerAction`1(long timeSpan, Action`1<T> callbackAction);
    public CooldownTimerAction`1(TimeSpan timeSpan, Action`1<T> callbackAction);
    [CompilerGeneratedAttribute]
public Action`1<T> get_CallBackAction();
    [CompilerGeneratedAttribute]
public void set_CallBackAction(Action`1<T> value);
    public bool Execute(T param);
}
public class MiNET.Utils.IO.DedicatedThreadPool : object {
    [CompilerGeneratedAttribute]
private DedicatedThreadPoolSettings <Settings>k__BackingField;
    private ThreadPoolWorkQueue _workQueue;
    private PoolWorker[] _workers;
    public DedicatedThreadPoolSettings Settings { get; private set; }
    public DedicatedThreadPool(DedicatedThreadPoolSettings settings);
    [CompilerGeneratedAttribute]
public DedicatedThreadPoolSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(DedicatedThreadPoolSettings value);
    public bool QueueUserWorkItem(Action work);
    public sealed virtual void Dispose();
    public void WaitForThreadsExit();
    public void WaitForThreadsExit(TimeSpan timeout);
    [CompilerGeneratedAttribute]
private PoolWorker <.ctor>b__0_0(int workerId);
}
public class MiNET.Utils.IO.DedicatedThreadPoolSettings : object {
    public static ThreadType DefaultThreadType;
    [CompilerGeneratedAttribute]
private int <NumThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadType <ThreadType>k__BackingField;
    [CompilerGeneratedAttribute]
private ApartmentState <ApartmentState>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <DeadlockTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <ExceptionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadMaxStackSize>k__BackingField;
    public int NumThreads { get; private set; }
    public ThreadType ThreadType { get; private set; }
    public ApartmentState ApartmentState { get; private set; }
    public Nullable`1<TimeSpan> DeadlockTimeout { get; private set; }
    public string Name { get; private set; }
    public Action`1<Exception> ExceptionHandler { get; private set; }
    public int ThreadMaxStackSize { get; private set; }
    public DedicatedThreadPoolSettings(int numThreads, string name, Nullable`1<TimeSpan> deadlockTimeout, ApartmentState apartmentState, Action`1<Exception> exceptionHandler, int threadMaxStackSize);
    public DedicatedThreadPoolSettings(int numThreads, ThreadType threadType, string name, Nullable`1<TimeSpan> deadlockTimeout, ApartmentState apartmentState, Action`1<Exception> exceptionHandler, int threadMaxStackSize);
    [CompilerGeneratedAttribute]
public int get_NumThreads();
    [CompilerGeneratedAttribute]
private void set_NumThreads(int value);
    [CompilerGeneratedAttribute]
public ThreadType get_ThreadType();
    [CompilerGeneratedAttribute]
private void set_ThreadType(ThreadType value);
    [CompilerGeneratedAttribute]
public ApartmentState get_ApartmentState();
    [CompilerGeneratedAttribute]
private void set_ApartmentState(ApartmentState value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_DeadlockTimeout();
    [CompilerGeneratedAttribute]
private void set_DeadlockTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_ExceptionHandler();
    [CompilerGeneratedAttribute]
private void set_ExceptionHandler(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public int get_ThreadMaxStackSize();
    [CompilerGeneratedAttribute]
private void set_ThreadMaxStackSize(int value);
}
internal class MiNET.Utils.IO.DedicatedThreadPoolTaskScheduler : TaskScheduler {
    [ThreadStaticAttribute]
private static bool _currentThreadIsRunningTasks;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _parallelWorkers;
    private LinkedList`1<Task> _tasks;
    private DedicatedThreadPool _pool;
    public int MaximumConcurrencyLevel { get; }
    public DedicatedThreadPoolTaskScheduler(DedicatedThreadPool pool);
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected virtual bool TryDequeue(Task task);
    public virtual int get_MaximumConcurrencyLevel();
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    private void EnsureWorkerRequested();
    private void ReleaseWorker();
    private void RequestWorker();
    [CompilerGeneratedAttribute]
private void <RequestWorker>b__13_0();
}
public class MiNET.Utils.IO.HighPrecisionTimer : object {
    private static ILog Log;
    private CancellationTokenSource _cancelSource;
    private bool _running;
    private Thread _timerThread;
    private Action`1<object> _action;
    public AutoResetEvent AutoReset;
    [CompilerGeneratedAttribute]
private bool <ContinueOnError>k__BackingField;
    public long Spins;
    public long Sleeps;
    public long Misses;
    public long Yields;
    public long Avarage;
    private bool _disposed;
    public bool ContinueOnError { get; public set; }
    public HighPrecisionTimer(int interval, Action`1<object> action, bool useSignaling, bool skipTicks);
    private static HighPrecisionTimer();
    [CompilerGeneratedAttribute]
public bool get_ContinueOnError();
    [CompilerGeneratedAttribute]
public void set_ContinueOnError(bool value);
    public sealed virtual void Dispose();
}
public class MiNET.Utils.IO.MemoryStreamReader : Stream {
    private ReadOnlyMemory`1<byte> _buffer;
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool Eof { get; }
    public MemoryStreamReader(ReadOnlyMemory`1<byte> buffer);
    [CompilerGeneratedAttribute]
public virtual long get_Position();
    [CompilerGeneratedAttribute]
public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public bool get_Eof();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int ReadByte();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public short ReadInt16();
    public ushort ReadUInt16();
    public int ReadInt32();
    public UInt32 ReadUInt32();
    public long ReadInt64();
    public ulong ReadUInt64();
    public float ReadSingle();
    public float ReadSingleLittleEndian(ReadOnlySpan`1<byte> source);
    public double ReadDoubleLittleEndian(ReadOnlySpan`1<byte> source);
    private static int DecodeZigZag32(UInt32 n);
    public ulong ReadVarLong();
    public string ReadLengthPrefixedString();
    public ReadOnlyMemory`1<byte> ReadLengthPrefixedBytes();
    private ulong ReadVarLongInternal();
    public ReadOnlyMemory`1<byte> Read(ulong length);
    public ReadOnlyMemory`1<byte> Read(long length);
    public ReadOnlyMemory`1<byte> Read(int length, bool boundCheck);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Close();
}
public class MiNET.Utils.IO.MultiMediaTimer : object {
    private static int TIMERR_NOERROR;
    private int _timerId;
    private TimerMode modreq(System.Runtime.CompilerServices.IsVolatile) _mode;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _period;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _resolution;
    private TimeProc _timeProcPeriodic;
    private TimeProc _timeProcOneShot;
    private EventRaiser _tickRaiser;
    private bool _running;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private ISynchronizeInvoke _synchronizingObject;
    private ISite _site;
    private static TimerCaps _caps;
    [CompilerGeneratedAttribute]
private EventHandler Started;
    [CompilerGeneratedAttribute]
private EventHandler Stopped;
    [CompilerGeneratedAttribute]
private EventHandler Tick;
    [CompilerGeneratedAttribute]
private EventHandler Disposed;
    public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public int Period { get; public set; }
    public int Resolution { get; public set; }
    public TimerMode Mode { get; public set; }
    public bool IsRunning { get; }
    public static TimerCaps Capabilities { get; }
    public ISite Site { get; public set; }
    private static MultiMediaTimer();
    private static int timeGetDevCaps(TimerCaps& caps, int sizeOfTimerCaps);
    private static int timeSetEvent(int delay, int resolution, TimeProc proc, int user, int mode);
    private static int timeKillEvent(int id);
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Stopped(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Stopped(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Tick(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Tick(EventHandler value);
    protected virtual override void Finalize();
    private void Initialize();
    public void Start();
    public void Stop();
    private void TimerPeriodicEventCallback(int id, int msg, int user, int param1, int param2);
    private void TimerOneShotEventCallback(int id, int msg, int user, int param1, int param2);
    private void OnDisposed(EventArgs e);
    private void OnStarted(EventArgs e);
    private void OnStopped(EventArgs e);
    private void OnTick(EventArgs e);
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    public int get_Period();
    public void set_Period(int value);
    public int get_Resolution();
    public void set_Resolution(int value);
    public TimerMode get_Mode();
    public void set_Mode(TimerMode value);
    public bool get_IsRunning();
    public static TimerCaps get_Capabilities();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disposed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disposed(EventHandler value);
    public sealed virtual ISite get_Site();
    public sealed virtual void set_Site(ISite value);
    public sealed virtual void Dispose();
}
public enum MiNET.Utils.IO.ThreadType : Enum {
    public int value__;
    public static ThreadType Foreground;
    public static ThreadType Background;
}
public class MiNET.Utils.IO.TimerCaps : ValueType {
    public int periodMin;
    public int periodMax;
}
public enum MiNET.Utils.IO.TimerMode : Enum {
    public int value__;
    public static TimerMode OneShot;
    public static TimerMode Periodic;
}
public class MiNET.Utils.IO.TimerStartException : ApplicationException {
    public TimerStartException(string message);
}
public static class MiNET.Utils.IO.WinApi : object {
    [SuppressUnmanagedCodeSecurityAttribute]
public static UInt32 TimeBeginPeriod(UInt32 uMilliseconds);
    [SuppressUnmanagedCodeSecurityAttribute]
public static UInt32 TimeEndPeriod(UInt32 uMilliseconds);
}
public class MiNET.Utils.IPAddressConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class MiNET.Utils.IPEndPointConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class MiNET.Utils.ItemComponent : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nbt <Nbt>k__BackingField;
    public string Name { get; public set; }
    public Nbt Nbt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nbt get_Nbt();
    [CompilerGeneratedAttribute]
public void set_Nbt(Nbt value);
}
public class MiNET.Utils.ItemComponentList : List`1<ItemComponent> {
}
public class MiNET.Utils.ItemPickInstance : object {
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WantNbt>k__BackingField;
    public short Id { get; public set; }
    public short Metadata { get; public set; }
    public bool WantNbt { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(short value);
    [CompilerGeneratedAttribute]
public short get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(short value);
    [CompilerGeneratedAttribute]
public bool get_WantNbt();
    [CompilerGeneratedAttribute]
public void set_WantNbt(bool value);
}
public class MiNET.Utils.ItemReleaseTransaction : Transaction {
    [CompilerGeneratedAttribute]
private ItemReleaseAction <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <FromPosition>k__BackingField;
    public ItemReleaseAction ActionType { get; public set; }
    public int Slot { get; public set; }
    public Item Item { get; public set; }
    public Vector3 FromPosition { get; public set; }
    [CompilerGeneratedAttribute]
public ItemReleaseAction get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(ItemReleaseAction value);
    [CompilerGeneratedAttribute]
public int get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(int value);
    [CompilerGeneratedAttribute]
public Item get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(Item value);
    [CompilerGeneratedAttribute]
public Vector3 get_FromPosition();
    [CompilerGeneratedAttribute]
public void set_FromPosition(Vector3 value);
}
public abstract class MiNET.Utils.ItemStackAction : object {
}
public class MiNET.Utils.ItemStackActionList : List`1<ItemStackAction> {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    public int RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(int value);
}
public class MiNET.Utils.ItemStackRequests : List`1<ItemStackActionList> {
}
public class MiNET.Utils.ItemStackResponse : object {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private StackResponseStatus <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StackResponseContainerInfo> <ResponseContainerInfos>k__BackingField;
    public int RequestId { get; public set; }
    public StackResponseStatus Result { get; public set; }
    public List`1<StackResponseContainerInfo> ResponseContainerInfos { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(int value);
    [CompilerGeneratedAttribute]
public StackResponseStatus get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(StackResponseStatus value);
    [CompilerGeneratedAttribute]
public List`1<StackResponseContainerInfo> get_ResponseContainerInfos();
    [CompilerGeneratedAttribute]
public void set_ResponseContainerInfos(List`1<StackResponseContainerInfo> value);
}
public class MiNET.Utils.ItemStackResponses : List`1<ItemStackResponse> {
}
public class MiNET.Utils.ItemStacks : List`1<Item> {
}
public class MiNET.Utils.ItemUseOnEntityTransaction : Transaction {
    [CompilerGeneratedAttribute]
private long <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemUseOnEntityAction <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <FromPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <ClickPosition>k__BackingField;
    public long EntityId { get; public set; }
    public ItemUseOnEntityAction ActionType { get; public set; }
    public int Slot { get; public set; }
    public Item Item { get; public set; }
    public Vector3 FromPosition { get; public set; }
    public Vector3 ClickPosition { get; public set; }
    [CompilerGeneratedAttribute]
public long get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(long value);
    [CompilerGeneratedAttribute]
public ItemUseOnEntityAction get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(ItemUseOnEntityAction value);
    [CompilerGeneratedAttribute]
public int get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(int value);
    [CompilerGeneratedAttribute]
public Item get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(Item value);
    [CompilerGeneratedAttribute]
public Vector3 get_FromPosition();
    [CompilerGeneratedAttribute]
public void set_FromPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public Vector3 get_ClickPosition();
    [CompilerGeneratedAttribute]
public void set_ClickPosition(Vector3 value);
}
public class MiNET.Utils.ItemUseTransaction : Transaction {
    [CompilerGeneratedAttribute]
private ItemUseAction <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockCoordinates <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Face>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <FromPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <ClickPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <BlockRuntimeId>k__BackingField;
    public ItemUseAction ActionType { get; public set; }
    public BlockCoordinates Position { get; public set; }
    public int Face { get; public set; }
    public int Slot { get; public set; }
    public Item Item { get; public set; }
    public Vector3 FromPosition { get; public set; }
    public Vector3 ClickPosition { get; public set; }
    public UInt32 BlockRuntimeId { get; public set; }
    [CompilerGeneratedAttribute]
public ItemUseAction get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(ItemUseAction value);
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(BlockCoordinates value);
    [CompilerGeneratedAttribute]
public int get_Face();
    [CompilerGeneratedAttribute]
public void set_Face(int value);
    [CompilerGeneratedAttribute]
public int get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(int value);
    [CompilerGeneratedAttribute]
public Item get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(Item value);
    [CompilerGeneratedAttribute]
public Vector3 get_FromPosition();
    [CompilerGeneratedAttribute]
public void set_FromPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public Vector3 get_ClickPosition();
    [CompilerGeneratedAttribute]
public void set_ClickPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public UInt32 get_BlockRuntimeId();
    [CompilerGeneratedAttribute]
public void set_BlockRuntimeId(UInt32 value);
}
public class MiNET.Utils.LabTableCombineAction : ItemStackAction {
}
[ExtensionAttribute]
public static class MiNET.Utils.LogHelpers : object {
    private static ILog Log;
    private static Type _declaringType;
    private static LogHelpers();
    [ExtensionAttribute]
public static bool IsTraceEnabled(ILog log);
    [ExtensionAttribute]
public static void Trace(ILog log, string message, Exception exception);
    [ExtensionAttribute]
public static void Trace(ILog log, string message);
    [ExtensionAttribute]
public static bool IsVerboseEnabled(ILog log);
    [ExtensionAttribute]
public static void Verbose(ILog log, string message, Exception exception);
    [ExtensionAttribute]
public static void Verbose(ILog log, string message);
}
public class MiNET.Utils.LoomStackRequestAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private string <PatternId>k__BackingField;
    public string PatternId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PatternId();
    [CompilerGeneratedAttribute]
public void set_PatternId(string value);
}
public class MiNET.Utils.MapDecorator : object {
    protected int Type;
    public byte Rotation;
    public byte Icon;
    public byte X;
    public byte Z;
    public string Label;
    public UInt32 Color;
}
public class MiNET.Utils.MapInfo : object {
    public long MapId;
    public byte UpdateType;
    public MapDecorator[] Decorators;
    public byte X;
    public byte Z;
    public int Scale;
    public int Col;
    public int Row;
    public int XOffset;
    public int ZOffset;
    public Byte[] Data;
    public virtual string ToString();
    public sealed virtual object Clone();
}
public class MiNET.Utils.Metadata.MetadataByte : MetadataEntry {
    [CompilerGeneratedAttribute]
private byte <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public byte Value { get; public set; }
    public MetadataByte(bool value);
    public MetadataByte(byte value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public byte get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(byte value);
    public static MetadataByte op_Implicit(byte value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class MiNET.Utils.Metadata.MetadataDictionary : object {
    private static ILog Log;
    public Dictionary`2<int, MetadataEntry> _entries;
    public static CreateEntryInstance[] EntryTypes;
    public int Count { get; }
    public MetadataEntry Item { get; public set; }
    private static MetadataDictionary();
    public int get_Count();
    public MetadataEntry get_Item(int index);
    public void set_Item(int index, MetadataEntry value);
    public MetadataEntry[] GetValues();
    public bool Contains(byte index);
    public static MetadataDictionary FromStream(BinaryReader reader);
    public void WriteTo(BinaryWriter writer);
    public virtual string ToString();
    public Byte[] GetBytes();
    public static string MetadataToCode(MetadataDictionary metadata);
}
public abstract class MiNET.Utils.Metadata.MetadataEntry : object {
    [CompilerGeneratedAttribute]
private byte <Index>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    internal byte Index { get; internal set; }
    public abstract virtual byte get_Identifier();
    public abstract virtual string get_FriendlyName();
    public abstract virtual void FromStream(BinaryReader reader);
    public abstract virtual void WriteTo(BinaryWriter stream);
    [CompilerGeneratedAttribute]
internal byte get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(byte value);
    public static MetadataEntry op_Implicit(byte value);
    public static MetadataEntry op_Implicit(short value);
    public static MetadataEntry op_Implicit(int value);
    public static MetadataEntry op_Implicit(float value);
    public static MetadataEntry op_Implicit(string value);
    public static MetadataEntry op_Implicit(long value);
}
public class MiNET.Utils.Metadata.MetadataFloat : MetadataEntry {
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public float Value { get; public set; }
    public MetadataFloat(float value);
    public MetadataFloat(double value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public float get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(float value);
    public static MetadataFloat op_Implicit(float value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
    public virtual string ToString();
}
public class MiNET.Utils.Metadata.MetadataInt : MetadataEntry {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public int Value { get; public set; }
    public MetadataInt(int value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    public static MetadataInt op_Implicit(int value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
    public virtual string ToString();
}
public class MiNET.Utils.Metadata.MetadataIntCoordinates : MetadataEntry {
    [CompilerGeneratedAttribute]
private BlockCoordinates <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public BlockCoordinates Value { get; public set; }
    public MetadataIntCoordinates(int x, int y, int z);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public BlockCoordinates get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BlockCoordinates value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter reader);
    public virtual string ToString();
}
public class MiNET.Utils.Metadata.MetadataInts : MetadataDictionary {
    public static MetadataInts FromStream(BinaryReader stream);
}
public class MiNET.Utils.Metadata.MetadataLong : MetadataEntry {
    public byte id;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public long Value { get; public set; }
    public MetadataLong(long value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public long get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(long value);
    public static MetadataLong op_Implicit(long value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
    public virtual string ToString();
}
public class MiNET.Utils.Metadata.MetadataNbt : MetadataEntry {
    [CompilerGeneratedAttribute]
private NbtCompound <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public NbtCompound Value { get; public set; }
    public MetadataNbt(NbtCompound value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public NbtCompound get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(NbtCompound value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
}
public class MiNET.Utils.Metadata.MetadataShort : MetadataEntry {
    [CompilerGeneratedAttribute]
private short <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public short Value { get; public set; }
    public MetadataShort(short value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public short get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(short value);
    public static MetadataShort op_Implicit(short value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
    public virtual string ToString();
}
public class MiNET.Utils.Metadata.MetadataString : MetadataEntry {
    private static ILog Log;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public string Value { get; public set; }
    public MetadataString(string value);
    private static MetadataString();
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public static MetadataString op_Implicit(string value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter stream);
    public virtual string ToString();
}
public class MiNET.Utils.Metadata.MetadataVector3 : MetadataEntry {
    [CompilerGeneratedAttribute]
private Vector3 <Value>k__BackingField;
    public byte Identifier { get; }
    public string FriendlyName { get; }
    public Vector3 Value { get; public set; }
    public MetadataVector3(float x, float y, float z);
    public MetadataVector3(Vector3 value);
    public virtual byte get_Identifier();
    public virtual string get_FriendlyName();
    [CompilerGeneratedAttribute]
public Vector3 get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Vector3 value);
    public virtual void FromStream(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter reader);
    public virtual string ToString();
}
public class MiNET.Utils.MT19937 : object {
    private static int N;
    private static int M;
    private static ulong MATRIX_A;
    private static ulong UPPER_MASK;
    private static ulong LOWER_MASK;
    private static ulong TEMPERING_MASK_B;
    private static ulong TEMPERING_MASK_C;
    private UInt64[] mt;
    private UInt32 mti;
    private static UInt64[] mag01;
    private static MT19937();
    private static ulong TEMPERING_SHIFT_U(ulong y);
    private static ulong TEMPERING_SHIFT_S(ulong y);
    private static ulong TEMPERING_SHIFT_T(ulong y);
    private static ulong TEMPERING_SHIFT_L(ulong y);
    public void Seed(ulong seed);
    public void Seed(UInt64[] init_key);
    public ulong UInt64();
    public long Int63();
    public double Real1();
    public double Real2();
    public double Real3();
}
public class MiNET.Utils.Nbt.Nbt : object {
    [CompilerGeneratedAttribute]
private NbtFile <NbtFile>k__BackingField;
    public NbtFile NbtFile { get; public set; }
    [CompilerGeneratedAttribute]
public NbtFile get_NbtFile();
    [CompilerGeneratedAttribute]
public void set_NbtFile(NbtFile value);
}
public class MiNET.Utils.Nbt.NbtFormatException : Exception {
    internal NbtFormatException(string message);
}
public class MiNET.Utils.Nbt.NbtIntConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class MiNET.Utils.Nbt.NbtStringConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[DefaultMemberAttribute("Item")]
public class MiNET.Utils.NibbleArray : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public Byte[] Data { get; public set; }
    public int Length { get; }
    public byte Item { get; public set; }
    public NibbleArray(int length);
    public NibbleArray(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    public int get_Length();
    public byte get_Item(int index);
    public void set_Item(int index, byte value);
    public sealed virtual object Clone();
}
public class MiNET.Utils.NormalTransaction : Transaction {
}
public class MiNET.Utils.OpenSimplexNoise : object {
    private static double STRETCH_2D;
    private static double STRETCH_3D;
    private static double STRETCH_4D;
    private static double SQUISH_2D;
    private static double SQUISH_3D;
    private static double SQUISH_4D;
    private static double NORM_2D;
    private static double NORM_3D;
    private static double NORM_4D;
    private Byte[] perm;
    private Byte[] perm2D;
    private Byte[] perm3D;
    private Byte[] perm4D;
    private static Double[] gradients2D;
    private static Double[] gradients3D;
    private static Double[] gradients4D;
    private static Contribution2[] lookup2D;
    private static Contribution3[] lookup3D;
    private static Contribution4[] lookup4D;
    private static OpenSimplexNoise();
    public OpenSimplexNoise(long seed);
    private static int FastFloor(double x);
    public double Evaluate(double x, double y);
    public double Evaluate(double x, double y, double z);
    public double Evaluate(double x, double y, double z, double w);
}
public class MiNET.Utils.PackIdVersion : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubPackName>k__BackingField;
    public string Id { get; public set; }
    public string Version { get; public set; }
    public string SubPackName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_SubPackName();
    [CompilerGeneratedAttribute]
public void set_SubPackName(string value);
}
public class MiNET.Utils.PlaceAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Destination>k__BackingField;
    public byte Count { get; public set; }
    public StackRequestSlotInfo Source { get; public set; }
    public StackRequestSlotInfo Destination { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(StackRequestSlotInfo value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(StackRequestSlotInfo value);
}
public class MiNET.Utils.PlaceIntoBundleAction : ItemStackAction {
}
public class MiNET.Utils.PlayerAddRecords : PlayerRecords {
    public PlayerAddRecords(IEnumerable`1<Player> players);
}
public abstract class MiNET.Utils.PlayerRecords : List`1<Player> {
    public PlayerRecords(IEnumerable`1<Player> players);
}
public class MiNET.Utils.PlayerRemoveRecords : PlayerRecords {
    public PlayerRemoveRecords(IEnumerable`1<Player> players);
}
public class MiNET.Utils.Records : List`1<BlockCoordinates> {
    public Records(IEnumerable`1<BlockCoordinates> coordinates);
}
public class MiNET.Utils.RequestRecord : object {
    [CompilerGeneratedAttribute]
private byte <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<byte> <Slots>k__BackingField;
    public byte ContainerId { get; public set; }
    public List`1<byte> Slots { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(byte value);
    [CompilerGeneratedAttribute]
public List`1<byte> get_Slots();
    [CompilerGeneratedAttribute]
public void set_Slots(List`1<byte> value);
}
public class MiNET.Utils.ResourcePackIds : List`1<string> {
}
public class MiNET.Utils.ResourcePackIdVersions : List`1<PackIdVersion> {
}
public class MiNET.Utils.ResourcePackInfo : object {
    [CompilerGeneratedAttribute]
private string <UUID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubPackName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasScripts>k__BackingField;
    public string UUID { get; public set; }
    public string Version { get; public set; }
    public ulong Size { get; public set; }
    public string ContentKey { get; public set; }
    public string SubPackName { get; public set; }
    public string ContentIdentity { get; public set; }
    public bool HasScripts { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UUID();
    [CompilerGeneratedAttribute]
public void set_UUID(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ulong value);
    [CompilerGeneratedAttribute]
public string get_ContentKey();
    [CompilerGeneratedAttribute]
public void set_ContentKey(string value);
    [CompilerGeneratedAttribute]
public string get_SubPackName();
    [CompilerGeneratedAttribute]
public void set_SubPackName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentIdentity();
    [CompilerGeneratedAttribute]
public void set_ContentIdentity(string value);
    [CompilerGeneratedAttribute]
public bool get_HasScripts();
    [CompilerGeneratedAttribute]
public void set_HasScripts(bool value);
}
public class MiNET.Utils.ResourcePackInfos : List`1<ResourcePackInfo> {
}
public enum MiNET.Utils.ResourcePackType : Enum {
    public byte value__;
    public static ResourcePackType Addon;
    public static ResourcePackType Cached;
    public static ResourcePackType CopyProtected;
    public static ResourcePackType Behaviour;
    public static ResourcePackType PersonaPiece;
    public static ResourcePackType Resources;
    public static ResourcePackType Skins;
    public static ResourcePackType WorldTemplate;
}
public static class MiNET.Utils.ResourceUtil : object {
    public static T ReadResource(string filename, Type namespaceProvider, string subFolder);
}
public class MiNET.Utils.RuleData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unknown1>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unknown2>k__BackingField;
    public string Name { get; public set; }
    public bool Unknown1 { get; public set; }
    public bool Unknown2 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Unknown1();
    [CompilerGeneratedAttribute]
public void set_Unknown1(bool value);
    [CompilerGeneratedAttribute]
public bool get_Unknown2();
    [CompilerGeneratedAttribute]
public void set_Unknown2(bool value);
    public virtual string ToString();
}
public class MiNET.Utils.Rules : List`1<RuleData> {
}
public class MiNET.Utils.ScoreboardClearIdentityEntry : ScoreboardIdentityEntry {
}
public class MiNET.Utils.ScoreboardIdentityEntries : List`1<ScoreboardIdentityEntry> {
}
public abstract class MiNET.Utils.ScoreboardIdentityEntry : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    public long Id { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
}
public class MiNET.Utils.ScoreboardRegisterIdentityEntry : ScoreboardIdentityEntry {
    [CompilerGeneratedAttribute]
private long <EntityId>k__BackingField;
    public long EntityId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(long value);
}
public class MiNET.Utils.ScoreEntries : List`1<ScoreEntry> {
}
public abstract class MiNET.Utils.ScoreEntry : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectiveName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Score>k__BackingField;
    public long Id { get; public set; }
    public string ObjectiveName { get; public set; }
    public UInt32 Score { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_ObjectiveName();
    [CompilerGeneratedAttribute]
public void set_ObjectiveName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(UInt32 value);
}
public abstract class MiNET.Utils.ScoreEntryChange : ScoreEntry {
}
public class MiNET.Utils.ScoreEntryChangeEntity : ScoreEntryChange {
    [CompilerGeneratedAttribute]
private long <EntityId>k__BackingField;
    public long EntityId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(long value);
}
public class MiNET.Utils.ScoreEntryChangeFakePlayer : ScoreEntryChange {
    [CompilerGeneratedAttribute]
private string <CustomName>k__BackingField;
    public string CustomName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CustomName();
    [CompilerGeneratedAttribute]
public void set_CustomName(string value);
}
public class MiNET.Utils.ScoreEntryChangePlayer : ScoreEntryChange {
    [CompilerGeneratedAttribute]
private long <EntityId>k__BackingField;
    public long EntityId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(long value);
}
public class MiNET.Utils.ScoreEntryRemove : ScoreEntry {
}
public class MiNET.Utils.Skins.Animation : object {
    [CompilerGeneratedAttribute]
private Byte[] <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FrameCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Type>k__BackingField;
    public Byte[] Image { get; public set; }
    public int ImageWidth { get; public set; }
    public int ImageHeight { get; public set; }
    public float FrameCount { get; public set; }
    public int Expression { get; public set; }
    public int Type { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_ImageWidth();
    [CompilerGeneratedAttribute]
public void set_ImageWidth(int value);
    [CompilerGeneratedAttribute]
public int get_ImageHeight();
    [CompilerGeneratedAttribute]
public void set_ImageHeight(int value);
    [CompilerGeneratedAttribute]
public float get_FrameCount();
    [CompilerGeneratedAttribute]
public void set_FrameCount(float value);
    [CompilerGeneratedAttribute]
public int get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(int value);
    [CompilerGeneratedAttribute]
public int get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(int value);
    public sealed virtual object Clone();
}
public class MiNET.Utils.Skins.Bone : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoneType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Material>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Pivot>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Pos>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Cube> <Cubes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeverRender>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mirror>k__BackingField;
    [CompilerGeneratedAttribute]
private Locators <Locators>k__BackingField;
    public string Name { get; public set; }
    [JsonPropertyAttribute]
public string BoneType { get; public set; }
    public string Material { get; public set; }
    public string Parent { get; public set; }
    public Single[] Pivot { get; public set; }
    public Single[] Pos { get; public set; }
    public Single[] Rotation { get; public set; }
    public List`1<Cube> Cubes { get; public set; }
    public bool NeverRender { get; public set; }
    public bool Reset { get; public set; }
    public bool Mirror { get; public set; }
    public Locators Locators { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_BoneType();
    [CompilerGeneratedAttribute]
public void set_BoneType(string value);
    [CompilerGeneratedAttribute]
public string get_Material();
    [CompilerGeneratedAttribute]
public void set_Material(string value);
    [CompilerGeneratedAttribute]
public string get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(string value);
    [CompilerGeneratedAttribute]
public Single[] get_Pivot();
    [CompilerGeneratedAttribute]
public void set_Pivot(Single[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Pos();
    [CompilerGeneratedAttribute]
public void set_Pos(Single[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Rotation();
    [CompilerGeneratedAttribute]
public void set_Rotation(Single[] value);
    [CompilerGeneratedAttribute]
public List`1<Cube> get_Cubes();
    [CompilerGeneratedAttribute]
public void set_Cubes(List`1<Cube> value);
    [CompilerGeneratedAttribute]
public bool get_NeverRender();
    [CompilerGeneratedAttribute]
public void set_NeverRender(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reset();
    [CompilerGeneratedAttribute]
public void set_Reset(bool value);
    [CompilerGeneratedAttribute]
public bool get_Mirror();
    [CompilerGeneratedAttribute]
public void set_Mirror(bool value);
    [CompilerGeneratedAttribute]
public Locators get_Locators();
    [CompilerGeneratedAttribute]
public void set_Locators(Locators value);
    public sealed virtual object Clone();
}
public enum MiNET.Utils.Skins.BoneName : Enum {
    public int value__;
    public static BoneName Unknown;
    public static BoneName Root;
    public static BoneName Body;
    public static BoneName Waist;
    public static BoneName Head;
    public static BoneName Hat;
    public static BoneName LeftArm;
    public static BoneName RightArm;
    public static BoneName LeftLeg;
    public static BoneName RightLeg;
    public static BoneName Cape;
    public static BoneName LeftItem;
    public static BoneName RightItem;
    public static BoneName LeftSleeve;
    public static BoneName RightSleeve;
    public static BoneName LeftPants;
    public static BoneName RightPants;
    public static BoneName Jacket;
}
public class MiNET.Utils.Skins.Cape : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImageWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnClassicSkin>k__BackingField;
    public string Id { get; public set; }
    public int ImageHeight { get; public set; }
    public int ImageWidth { get; public set; }
    public Byte[] Data { get; public set; }
    public bool OnClassicSkin { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public int get_ImageHeight();
    [CompilerGeneratedAttribute]
public void set_ImageHeight(int value);
    [CompilerGeneratedAttribute]
public int get_ImageWidth();
    [CompilerGeneratedAttribute]
public void set_ImageWidth(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_OnClassicSkin();
    [CompilerGeneratedAttribute]
public void set_OnClassicSkin(bool value);
    public sealed virtual object Clone();
}
public class MiNET.Utils.Skins.Cube : object {
    [CompilerGeneratedAttribute]
private Single[] <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Single[] <Uv>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Inflate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mirror>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <Velocity>k__BackingField;
    [CompilerGeneratedAttribute]
private Face <Face>k__BackingField;
    public Single[] Origin { get; public set; }
    public Single[] Size { get; public set; }
    public Single[] Uv { get; public set; }
    public float Inflate { get; public set; }
    public bool Mirror { get; public set; }
    [JsonIgnoreAttribute]
public Vector3 Velocity { get; public set; }
    [JsonIgnoreAttribute]
public Face Face { get; public set; }
    [CompilerGeneratedAttribute]
public Single[] get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(Single[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Single[] value);
    [CompilerGeneratedAttribute]
public Single[] get_Uv();
    [CompilerGeneratedAttribute]
public void set_Uv(Single[] value);
    [CompilerGeneratedAttribute]
public float get_Inflate();
    [CompilerGeneratedAttribute]
public void set_Inflate(float value);
    [CompilerGeneratedAttribute]
public bool get_Mirror();
    [CompilerGeneratedAttribute]
public void set_Mirror(bool value);
    [CompilerGeneratedAttribute]
public Vector3 get_Velocity();
    [CompilerGeneratedAttribute]
public void set_Velocity(Vector3 value);
    [CompilerGeneratedAttribute]
public Face get_Face();
    [CompilerGeneratedAttribute]
public void set_Face(Face value);
    public sealed virtual object Clone();
}
public class MiNET.Utils.Skins.Description : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextureHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextureWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VisibleBoundsHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <VisibleBoundsOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VisibleBoundsWidth>k__BackingField;
    public string Identifier { get; public set; }
    [JsonPropertyAttribute]
public int TextureHeight { get; public set; }
    [JsonPropertyAttribute]
public int TextureWidth { get; public set; }
    [JsonPropertyAttribute]
public int VisibleBoundsHeight { get; public set; }
    [JsonPropertyAttribute]
public Int32[] VisibleBoundsOffset { get; public set; }
    [JsonPropertyAttribute]
public int VisibleBoundsWidth { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public int get_TextureHeight();
    [CompilerGeneratedAttribute]
public void set_TextureHeight(int value);
    [CompilerGeneratedAttribute]
public int get_TextureWidth();
    [CompilerGeneratedAttribute]
public void set_TextureWidth(int value);
    [CompilerGeneratedAttribute]
public int get_VisibleBoundsHeight();
    [CompilerGeneratedAttribute]
public void set_VisibleBoundsHeight(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_VisibleBoundsOffset();
    [CompilerGeneratedAttribute]
public void set_VisibleBoundsOffset(Int32[] value);
    [CompilerGeneratedAttribute]
public int get_VisibleBoundsWidth();
    [CompilerGeneratedAttribute]
public void set_VisibleBoundsWidth(int value);
    public sealed virtual object Clone();
}
public enum MiNET.Utils.Skins.Face : Enum {
    public int value__;
    public static Face None;
    public static Face Inside;
    public static Face Top;
    public static Face Bottom;
    public static Face Right;
    public static Face Front;
    public static Face Left;
    public static Face Back;
}
public class MiNET.Utils.Skins.Geometry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Description <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseGeometry>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Bone> <Bones>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoneType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RigType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextureWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TextureHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationArmsDown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationArmsOutFront>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationStatueOfLibertyArms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationSingleArmAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationStationaryLegs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationSingleLegAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationNoHeadBob>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationDontShowArmor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationUpsideDown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnimationInvertedCrouch>k__BackingField;
    public static float Gravity;
    public static float Drag;
    public static double CubeFilterFactor;
    public static float ZTearFactor;
    [JsonIgnoreAttribute]
public string Name { get; public set; }
    public Description Description { get; public set; }
    [JsonIgnoreAttribute]
public string BaseGeometry { get; public set; }
    public List`1<Bone> Bones { get; public set; }
    [JsonPropertyAttribute]
public string BoneType { get; public set; }
    [JsonPropertyAttribute]
public string ModelVersion { get; public set; }
    [JsonPropertyAttribute]
public string RigType { get; public set; }
    [JsonPropertyAttribute]
public int TextureWidth { get; public set; }
    [JsonPropertyAttribute]
public int TextureHeight { get; public set; }
    public bool AnimationArmsDown { get; public set; }
    public bool AnimationArmsOutFront { get; public set; }
    public bool AnimationStatueOfLibertyArms { get; public set; }
    public bool AnimationSingleArmAnimation { get; public set; }
    public bool AnimationStationaryLegs { get; public set; }
    public bool AnimationSingleLegAnimation { get; public set; }
    public bool AnimationNoHeadBob { get; public set; }
    public bool AnimationDontShowArmor { get; public set; }
    public bool AnimationUpsideDown { get; public set; }
    public bool AnimationInvertedCrouch { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Description get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(Description value);
    [CompilerGeneratedAttribute]
public string get_BaseGeometry();
    [CompilerGeneratedAttribute]
public void set_BaseGeometry(string value);
    [CompilerGeneratedAttribute]
public List`1<Bone> get_Bones();
    [CompilerGeneratedAttribute]
public void set_Bones(List`1<Bone> value);
    [CompilerGeneratedAttribute]
public string get_BoneType();
    [CompilerGeneratedAttribute]
public void set_BoneType(string value);
    [CompilerGeneratedAttribute]
public string get_ModelVersion();
    [CompilerGeneratedAttribute]
public void set_ModelVersion(string value);
    [CompilerGeneratedAttribute]
public string get_RigType();
    [CompilerGeneratedAttribute]
public void set_RigType(string value);
    [CompilerGeneratedAttribute]
public int get_TextureWidth();
    [CompilerGeneratedAttribute]
public void set_TextureWidth(int value);
    [CompilerGeneratedAttribute]
public int get_TextureHeight();
    [CompilerGeneratedAttribute]
public void set_TextureHeight(int value);
    [CompilerGeneratedAttribute]
public bool get_AnimationArmsDown();
    [CompilerGeneratedAttribute]
public void set_AnimationArmsDown(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationArmsOutFront();
    [CompilerGeneratedAttribute]
public void set_AnimationArmsOutFront(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationStatueOfLibertyArms();
    [CompilerGeneratedAttribute]
public void set_AnimationStatueOfLibertyArms(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationSingleArmAnimation();
    [CompilerGeneratedAttribute]
public void set_AnimationSingleArmAnimation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationStationaryLegs();
    [CompilerGeneratedAttribute]
public void set_AnimationStationaryLegs(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationSingleLegAnimation();
    [CompilerGeneratedAttribute]
public void set_AnimationSingleLegAnimation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationNoHeadBob();
    [CompilerGeneratedAttribute]
public void set_AnimationNoHeadBob(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationDontShowArmor();
    [CompilerGeneratedAttribute]
public void set_AnimationDontShowArmor(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationUpsideDown();
    [CompilerGeneratedAttribute]
public void set_AnimationUpsideDown(bool value);
    [CompilerGeneratedAttribute]
public bool get_AnimationInvertedCrouch();
    [CompilerGeneratedAttribute]
public void set_AnimationInvertedCrouch(bool value);
    public sealed virtual object Clone();
    public static Geometry Subdivide(Geometry geometry, bool packInBody, bool keepHead, bool renderSkin, bool renderSkeleton);
    public void Subdivide(bool packInBody, bool keepHead, bool renderSkin, bool renderSkeleton);
}
public class MiNET.Utils.Skins.GeometryIdentifier : object {
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnimatedFace>k__BackingField;
    public string Default { get; public set; }
    [JsonPropertyAttribute]
public string AnimatedFace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    [CompilerGeneratedAttribute]
public string get_AnimatedFace();
    [CompilerGeneratedAttribute]
public void set_AnimatedFace(string value);
    public sealed virtual object Clone();
}
public class MiNET.Utils.Skins.GeometryModel : object {
    [CompilerGeneratedAttribute]
private string <FormatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Geometry> <Geometry>k__BackingField;
    [JsonPropertyAttribute]
public string FormatVersion { get; public set; }
    [JsonPropertyAttribute]
public List`1<Geometry> Geometry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FormatVersion();
    [CompilerGeneratedAttribute]
public void set_FormatVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<Geometry> get_Geometry();
    [CompilerGeneratedAttribute]
public void set_Geometry(List`1<Geometry> value);
    public Geometry FindGeometry(string geometryName, bool matchPartial);
    public Geometry CollapseToDerived(Geometry derived);
    public sealed virtual object Clone();
}
public class MiNET.Utils.Skins.Locators : object {
    [CompilerGeneratedAttribute]
private Single[] <LeadHold>k__BackingField;
    [JsonPropertyAttribute]
public Single[] LeadHold { get; public set; }
    [CompilerGeneratedAttribute]
public Single[] get_LeadHold();
    [CompilerGeneratedAttribute]
public void set_LeadHold(Single[] value);
}
public class MiNET.Utils.Skins.PersonaPiece : object {
    [CompilerGeneratedAttribute]
private string <PieceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PieceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPiece>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductId>k__BackingField;
    public string PieceId { get; public set; }
    public string PieceType { get; public set; }
    public string PackId { get; public set; }
    public bool IsDefaultPiece { get; public set; }
    public string ProductId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PieceId();
    [CompilerGeneratedAttribute]
public void set_PieceId(string value);
    [CompilerGeneratedAttribute]
public string get_PieceType();
    [CompilerGeneratedAttribute]
public void set_PieceType(string value);
    [CompilerGeneratedAttribute]
public string get_PackId();
    [CompilerGeneratedAttribute]
public void set_PackId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPiece();
    [CompilerGeneratedAttribute]
public void set_IsDefaultPiece(bool value);
    [CompilerGeneratedAttribute]
public string get_ProductId();
    [CompilerGeneratedAttribute]
public void set_ProductId(string value);
}
public class MiNET.Utils.Skins.Skin : object {
    [CompilerGeneratedAttribute]
private bool <Slim>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPersonaSkin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPremiumSkin>k__BackingField;
    [CompilerGeneratedAttribute]
private Cape <Cape>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkinId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlayFabId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourcePatch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeometryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeometryData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeometryDataVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArmSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SkinColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnimationData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Animation> <Animations>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PersonaPiece> <PersonaPieces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SkinPiece> <SkinPieces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryUser>k__BackingField;
    public bool Slim { get; public set; }
    public bool IsPersonaSkin { get; public set; }
    public bool IsPremiumSkin { get; public set; }
    public Cape Cape { get; public set; }
    public string SkinId { get; public set; }
    public string PlayFabId { get; public set; }
    public string ResourcePatch { get; public set; }
    public SkinResourcePatch SkinResourcePatch { get; public set; }
    public int Height { get; public set; }
    public int Width { get; public set; }
    public Byte[] Data { get; public set; }
    public string GeometryName { get; public set; }
    public string GeometryData { get; public set; }
    public string GeometryDataVersion { get; public set; }
    public string ArmSize { get; public set; }
    public string SkinColor { get; public set; }
    public string AnimationData { get; public set; }
    public List`1<Animation> Animations { get; public set; }
    public List`1<PersonaPiece> PersonaPieces { get; public set; }
    public List`1<SkinPiece> SkinPieces { get; public set; }
    public bool IsVerified { get; public set; }
    public bool IsPrimaryUser { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Slim();
    [CompilerGeneratedAttribute]
public void set_Slim(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPersonaSkin();
    [CompilerGeneratedAttribute]
public void set_IsPersonaSkin(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPremiumSkin();
    [CompilerGeneratedAttribute]
public void set_IsPremiumSkin(bool value);
    [CompilerGeneratedAttribute]
public Cape get_Cape();
    [CompilerGeneratedAttribute]
public void set_Cape(Cape value);
    [CompilerGeneratedAttribute]
public string get_SkinId();
    [CompilerGeneratedAttribute]
public void set_SkinId(string value);
    [CompilerGeneratedAttribute]
public string get_PlayFabId();
    [CompilerGeneratedAttribute]
public void set_PlayFabId(string value);
    [CompilerGeneratedAttribute]
public string get_ResourcePatch();
    [CompilerGeneratedAttribute]
public void set_ResourcePatch(string value);
    public SkinResourcePatch get_SkinResourcePatch();
    public void set_SkinResourcePatch(SkinResourcePatch value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_GeometryName();
    [CompilerGeneratedAttribute]
public void set_GeometryName(string value);
    [CompilerGeneratedAttribute]
public string get_GeometryData();
    [CompilerGeneratedAttribute]
public void set_GeometryData(string value);
    [CompilerGeneratedAttribute]
public string get_GeometryDataVersion();
    [CompilerGeneratedAttribute]
public void set_GeometryDataVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ArmSize();
    [CompilerGeneratedAttribute]
public void set_ArmSize(string value);
    [CompilerGeneratedAttribute]
public string get_SkinColor();
    [CompilerGeneratedAttribute]
public void set_SkinColor(string value);
    [CompilerGeneratedAttribute]
public string get_AnimationData();
    [CompilerGeneratedAttribute]
public void set_AnimationData(string value);
    [CompilerGeneratedAttribute]
public List`1<Animation> get_Animations();
    [CompilerGeneratedAttribute]
public void set_Animations(List`1<Animation> value);
    [CompilerGeneratedAttribute]
public List`1<PersonaPiece> get_PersonaPieces();
    [CompilerGeneratedAttribute]
public void set_PersonaPieces(List`1<PersonaPiece> value);
    [CompilerGeneratedAttribute]
public List`1<SkinPiece> get_SkinPieces();
    [CompilerGeneratedAttribute]
public void set_SkinPieces(List`1<SkinPiece> value);
    [CompilerGeneratedAttribute]
public bool get_IsVerified();
    [CompilerGeneratedAttribute]
public void set_IsVerified(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryUser();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryUser(bool value);
    public static Byte[] GetTextureFromFile(string filename);
    public static void SaveTextureToFile(string filename, Byte[] bytes);
    public static GeometryModel Parse(string json);
    public static string ToJson(GeometryModel geometryModel);
    public static string ToJson(SkinResourcePatch model);
    public static SkinResourcePatch ToJSkinResourcePatch(string json);
    public sealed virtual object Clone();
}
public class MiNET.Utils.Skins.SkinPiece : object {
    [CompilerGeneratedAttribute]
private string <PieceType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Colors>k__BackingField;
    public string PieceType { get; public set; }
    public List`1<string> Colors { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PieceType();
    [CompilerGeneratedAttribute]
public void set_PieceType(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Colors();
    [CompilerGeneratedAttribute]
public void set_Colors(List`1<string> value);
}
public class MiNET.Utils.Skins.SkinResourcePatch : object {
    [CompilerGeneratedAttribute]
private GeometryIdentifier <Geometry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersonaResetResourceDefinitions>k__BackingField;
    public GeometryIdentifier Geometry { get; public set; }
    [JsonPropertyAttribute]
public bool PersonaResetResourceDefinitions { get; public set; }
    [CompilerGeneratedAttribute]
public GeometryIdentifier get_Geometry();
    [CompilerGeneratedAttribute]
public void set_Geometry(GeometryIdentifier value);
    [CompilerGeneratedAttribute]
public bool get_PersonaResetResourceDefinitions();
    [CompilerGeneratedAttribute]
public void set_PersonaResetResourceDefinitions(bool value);
    public sealed virtual object Clone();
}
public class MiNET.Utils.StackRequestSlotInfo : object {
    [CompilerGeneratedAttribute]
private byte <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StackNetworkId>k__BackingField;
    public byte ContainerId { get; public set; }
    public byte Slot { get; public set; }
    public int StackNetworkId { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(byte value);
    [CompilerGeneratedAttribute]
public byte get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(byte value);
    [CompilerGeneratedAttribute]
public int get_StackNetworkId();
    [CompilerGeneratedAttribute]
public void set_StackNetworkId(int value);
}
public class MiNET.Utils.StackResponseContainerInfo : object {
    [CompilerGeneratedAttribute]
private byte <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StackResponseSlotInfo> <Slots>k__BackingField;
    public byte ContainerId { get; public set; }
    public List`1<StackResponseSlotInfo> Slots { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_ContainerId();
    [CompilerGeneratedAttribute]
public void set_ContainerId(byte value);
    [CompilerGeneratedAttribute]
public List`1<StackResponseSlotInfo> get_Slots();
    [CompilerGeneratedAttribute]
public void set_Slots(List`1<StackResponseSlotInfo> value);
}
public class MiNET.Utils.StackResponseSlotInfo : object {
    [CompilerGeneratedAttribute]
private byte <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <HotbarSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StackNetworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DurabilityCorrection>k__BackingField;
    public byte Slot { get; public set; }
    public byte HotbarSlot { get; public set; }
    public byte Count { get; public set; }
    public int StackNetworkId { get; public set; }
    public string CustomName { get; public set; }
    public int DurabilityCorrection { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(byte value);
    [CompilerGeneratedAttribute]
public byte get_HotbarSlot();
    [CompilerGeneratedAttribute]
public void set_HotbarSlot(byte value);
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public int get_StackNetworkId();
    [CompilerGeneratedAttribute]
public void set_StackNetworkId(int value);
    [CompilerGeneratedAttribute]
public string get_CustomName();
    [CompilerGeneratedAttribute]
public void set_CustomName(string value);
    [CompilerGeneratedAttribute]
public int get_DurabilityCorrection();
    [CompilerGeneratedAttribute]
public void set_DurabilityCorrection(int value);
}
public enum MiNET.Utils.StackResponseStatus : Enum {
    public int value__;
    public static StackResponseStatus Ok;
    public static StackResponseStatus Error;
}
public class MiNET.Utils.SwapAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Destination>k__BackingField;
    public StackRequestSlotInfo Source { get; public set; }
    public StackRequestSlotInfo Destination { get; public set; }
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(StackRequestSlotInfo value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(StackRequestSlotInfo value);
}
public class MiNET.Utils.TakeAction : ItemStackAction {
    [CompilerGeneratedAttribute]
private byte <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private StackRequestSlotInfo <Destination>k__BackingField;
    public byte Count { get; public set; }
    public StackRequestSlotInfo Source { get; public set; }
    public StackRequestSlotInfo Destination { get; public set; }
    [CompilerGeneratedAttribute]
public byte get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(byte value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(StackRequestSlotInfo value);
    [CompilerGeneratedAttribute]
public StackRequestSlotInfo get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(StackRequestSlotInfo value);
}
public class MiNET.Utils.TakeFromBundleAction : ItemStackAction {
}
public class MiNET.Utils.TexturePackInfo : ResourcePackInfo {
    [CompilerGeneratedAttribute]
private bool <RtxEnabled>k__BackingField;
    public bool RtxEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RtxEnabled();
    [CompilerGeneratedAttribute]
public void set_RtxEnabled(bool value);
}
public class MiNET.Utils.TexturePackInfos : List`1<TexturePackInfo> {
}
public class MiNET.Utils.TextUtils : object {
    private static int LineLength;
    private static int CharWidth;
    private static char SpaceChar;
    private static Regex CleanAllFormattingFilter;
    private static Regex CleanColourFilter;
    private static Regex BoldTextRegex;
    private static IDictionary`2<char, int> CharWidths;
    private static TextUtils();
    public static string CenterLine(string input);
    public static string Center(string input);
    public static string Center(string input, int maxLength, bool addRightPadding);
    private static int GetCharWidth(char c);
    public static int GetPixelLength(string line);
    private static string Strip(string input, bool keepBold);
    public static string RemoveFormatting(string input);
}
public abstract class MiNET.Utils.Transaction : object {
    [CompilerGeneratedAttribute]
private bool <HasNetworkIds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RequestRecord> <RequestRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TransactionRecord> <TransactionRecords>k__BackingField;
    public bool HasNetworkIds { get; public set; }
    public int RequestId { get; public set; }
    public List`1<RequestRecord> RequestRecords { get; public set; }
    public List`1<TransactionRecord> TransactionRecords { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HasNetworkIds();
    [CompilerGeneratedAttribute]
public void set_HasNetworkIds(bool value);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(int value);
    [CompilerGeneratedAttribute]
public List`1<RequestRecord> get_RequestRecords();
    [CompilerGeneratedAttribute]
public void set_RequestRecords(List`1<RequestRecord> value);
    [CompilerGeneratedAttribute]
public List`1<TransactionRecord> get_TransactionRecords();
    [CompilerGeneratedAttribute]
public void set_TransactionRecords(List`1<TransactionRecord> value);
}
public abstract class MiNET.Utils.TransactionRecord : object {
    [CompilerGeneratedAttribute]
private int <StackNetworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <OldItem>k__BackingField;
    [CompilerGeneratedAttribute]
private Item <NewItem>k__BackingField;
    public int StackNetworkId { get; public set; }
    public int Slot { get; public set; }
    public Item OldItem { get; public set; }
    public Item NewItem { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StackNetworkId();
    [CompilerGeneratedAttribute]
public void set_StackNetworkId(int value);
    [CompilerGeneratedAttribute]
public int get_Slot();
    [CompilerGeneratedAttribute]
public void set_Slot(int value);
    [CompilerGeneratedAttribute]
public Item get_OldItem();
    [CompilerGeneratedAttribute]
public void set_OldItem(Item value);
    [CompilerGeneratedAttribute]
public Item get_NewItem();
    [CompilerGeneratedAttribute]
public void set_NewItem(Item value);
}
public class MiNET.Utils.UUID : object {
    private static ILog Log;
    private ulong _a;
    private ulong _b;
    private Guid _guid;
    public UUID(Byte[] rfc4122Bytes);
    public UUID(string uuidString);
    private static UUID();
    public static Byte[] StringToByteArray(string hex);
    public Byte[] GetBytes();
    public static Guid op_Implicit(UUID uuid);
    public static UUID op_Explicit(Guid guid);
    protected bool Equals(UUID other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class MiNET.Utils.VarInt : object {
    private static ILog Log;
    private static VarInt();
    private static UInt32 EncodeZigZag32(int n);
    private static int DecodeZigZag32(UInt32 n);
    private static ulong EncodeZigZag64(long n);
    private static long DecodeZigZag64(ulong n);
    private static UInt32 ReadRawVarInt32(Stream buf, int maxSize);
    private static ulong ReadRawVarInt64(Stream buf, int maxSize, bool printBytes);
    private static void WriteRawVarInt32(Stream buf, UInt32 value);
    private static void WriteRawVarInt64(Stream buf, ulong value);
    public static void WriteInt32(Stream stream, int value);
    public static int ReadInt32(Stream stream);
    public static void WriteSInt32(Stream stream, int value);
    public static int ReadSInt32(Stream stream);
    public static void WriteUInt32(Stream stream, UInt32 value);
    public static UInt32 ReadUInt32(Stream stream);
    public static void WriteInt64(Stream stream, long value);
    public static long ReadInt64(Stream stream, bool printBytes);
    public static void WriteSInt64(Stream stream, long value);
    public static long ReadSInt64(Stream stream);
    public static void WriteUInt64(Stream stream, ulong value);
    public static ulong ReadUInt64(Stream stream);
}
public class MiNET.Utils.Vectors.BlockCoordinates : ValueType {
    public int X;
    public int Y;
    public int Z;
    public static BlockCoordinates Zero;
    public static BlockCoordinates One;
    public static BlockCoordinates Up;
    public static BlockCoordinates Down;
    public static BlockCoordinates East;
    public static BlockCoordinates West;
    public static BlockCoordinates North;
    public static BlockCoordinates South;
    public static BlockCoordinates Left;
    public static BlockCoordinates Right;
    public static BlockCoordinates Backwards;
    public static BlockCoordinates Forwards;
    public double Distance { get; }
    public BlockCoordinates(int value);
    public BlockCoordinates(int x, int y, int z);
    public BlockCoordinates(BlockCoordinates v);
    public BlockCoordinates(PlayerLocation location);
    public BlockCoordinates(Vector3 location);
    private static BlockCoordinates();
    public double DistanceTo(BlockCoordinates other);
    private int Square(int num);
    public BlockCoordinates Abs();
    public double get_Distance();
    public static BlockCoordinates Min(BlockCoordinates value1, BlockCoordinates value2);
    public static BlockCoordinates Max(BlockCoordinates value1, BlockCoordinates value2);
    public static bool op_Inequality(BlockCoordinates a, BlockCoordinates b);
    public static bool op_Equality(BlockCoordinates a, BlockCoordinates b);
    public static BlockCoordinates op_Addition(BlockCoordinates a, BlockCoordinates b);
    public static BlockCoordinates op_Subtraction(BlockCoordinates a, BlockCoordinates b);
    public static BlockCoordinates op_UnaryNegation(BlockCoordinates a);
    public static BlockCoordinates op_Multiply(BlockCoordinates a, BlockCoordinates b);
    public static BlockCoordinates op_Division(BlockCoordinates a, BlockCoordinates b);
    public static BlockCoordinates op_Modulus(BlockCoordinates a, BlockCoordinates b);
    public static BlockCoordinates op_Addition(BlockCoordinates a, int b);
    public static BlockCoordinates op_Subtraction(BlockCoordinates a, int b);
    public static BlockCoordinates op_Multiply(BlockCoordinates a, int b);
    public static BlockCoordinates op_Division(BlockCoordinates a, int b);
    public static BlockCoordinates op_Modulus(BlockCoordinates a, int b);
    public static BlockCoordinates op_Addition(int a, BlockCoordinates b);
    public static BlockCoordinates op_Subtraction(int a, BlockCoordinates b);
    public static BlockCoordinates op_Multiply(int a, BlockCoordinates b);
    public static BlockCoordinates op_Division(int a, BlockCoordinates b);
    public static BlockCoordinates op_Modulus(int a, BlockCoordinates b);
    public static BlockCoordinates op_Explicit(ChunkCoordinates a);
    public static BlockCoordinates op_Implicit(Vector3 a);
    public static BlockCoordinates op_Explicit(PlayerLocation a);
    public static Vector3 op_Implicit(BlockCoordinates a);
    public BlockCoordinates BlockUp();
    public BlockCoordinates BlockDown();
    public BlockCoordinates BlockEast();
    public BlockCoordinates BlockWest();
    public BlockCoordinates BlockNorth();
    public BlockCoordinates BlockSouth();
    public BlockCoordinates BlockNorthEast();
    public BlockCoordinates BlockNorthWest();
    public BlockCoordinates BlockSouthEast();
    public BlockCoordinates BlockSouthWest();
    public sealed virtual bool Equals(BlockCoordinates other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MiNET.Utils.Vectors.BoundingBox : ValueType {
    public Vector3 Min;
    public Vector3 Max;
    public static int CornerCount;
    public double Height { get; }
    public double Width { get; }
    public double Depth { get; }
    public BoundingBox(Vector3 min, Vector3 max);
    public BoundingBox(BoundingBox box);
    public BoundingBox GetAdjustedBoundingBox();
    public ContainmentType Contains(BoundingBox box);
    public bool Contains(Vector3 vec);
    public static BoundingBox CreateFromPoints(IEnumerable`1<Vector3> points);
    public BoundingBox OffsetBy(Vector3 offset);
    public Vector3[] GetCorners();
    public sealed virtual bool Equals(BoundingBox other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Intersects(BoundingBox box);
    public void Intersects(BoundingBox& box, Boolean& result);
    public static BoundingBox op_Addition(BoundingBox a, float b);
    public static BoundingBox op_Subtraction(BoundingBox a, float b);
    public static bool op_Equality(BoundingBox a, BoundingBox b);
    public static bool op_Inequality(BoundingBox a, BoundingBox b);
    public virtual string ToString();
    public double get_Height();
    public double get_Width();
    public double get_Depth();
}
public class MiNET.Utils.Vectors.ChunkCoordinates : ValueType {
    public int X;
    public int Z;
    public static ChunkCoordinates None;
    public static ChunkCoordinates Zero;
    public static ChunkCoordinates One;
    public static ChunkCoordinates Forward;
    public static ChunkCoordinates Backward;
    public static ChunkCoordinates Left;
    public static ChunkCoordinates Right;
    public double Distance { get; }
    public ChunkCoordinates(int value);
    public ChunkCoordinates(int x, int z);
    public ChunkCoordinates(ChunkCoordinates v);
    public ChunkCoordinates(BlockCoordinates coordinates);
    public ChunkCoordinates(PlayerLocation location);
    private static ChunkCoordinates();
    public virtual string ToString();
    public double DistanceTo(ChunkCoordinates other);
    private int Square(int num);
    public double get_Distance();
    public static ChunkCoordinates Min(ChunkCoordinates value1, ChunkCoordinates value2);
    public static ChunkCoordinates Max(ChunkCoordinates value1, ChunkCoordinates value2);
    public static bool op_Inequality(ChunkCoordinates a, ChunkCoordinates b);
    public static bool op_Equality(ChunkCoordinates a, ChunkCoordinates b);
    public static ChunkCoordinates op_Addition(ChunkCoordinates a, ChunkCoordinates b);
    public static ChunkCoordinates op_Subtraction(ChunkCoordinates a, ChunkCoordinates b);
    public static ChunkCoordinates op_UnaryNegation(ChunkCoordinates a);
    public static ChunkCoordinates op_Multiply(ChunkCoordinates a, ChunkCoordinates b);
    public static ChunkCoordinates op_Division(ChunkCoordinates a, ChunkCoordinates b);
    public static ChunkCoordinates op_Modulus(ChunkCoordinates a, ChunkCoordinates b);
    public static ChunkCoordinates op_Addition(ChunkCoordinates a, int b);
    public static ChunkCoordinates op_Subtraction(ChunkCoordinates a, int b);
    public static ChunkCoordinates op_Multiply(ChunkCoordinates a, int b);
    public static ChunkCoordinates op_Division(ChunkCoordinates a, int b);
    public static ChunkCoordinates op_Modulus(ChunkCoordinates a, int b);
    public static ChunkCoordinates op_Addition(int a, ChunkCoordinates b);
    public static ChunkCoordinates op_Subtraction(int a, ChunkCoordinates b);
    public static ChunkCoordinates op_Multiply(int a, ChunkCoordinates b);
    public static ChunkCoordinates op_Division(int a, ChunkCoordinates b);
    public static ChunkCoordinates op_Modulus(int a, ChunkCoordinates b);
    public static ChunkCoordinates op_Explicit(BlockCoordinates b);
    public sealed virtual bool Equals(ChunkCoordinates other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum MiNET.Utils.Vectors.ContainmentType : Enum {
    public int value__;
    public static ContainmentType Disjoint;
    public static ContainmentType Contains;
    public static ContainmentType Intersects;
}
public class MiNET.Utils.Vectors.PlayerLocation : object {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Z>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Yaw>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Pitch>k__BackingField;
    [CompilerGeneratedAttribute]
private float <HeadYaw>k__BackingField;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Z { get; public set; }
    public float Yaw { get; public set; }
    public float Pitch { get; public set; }
    public float HeadYaw { get; public set; }
    public PlayerLocation(float x, float y, float z, float headYaw, float yaw, float pitch);
    public PlayerLocation(double x, double y, double z, float headYaw, float yaw, float pitch);
    public PlayerLocation(Vector3 vector, float headYaw, float yaw, float pitch);
    [CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [CompilerGeneratedAttribute]
public float get_Z();
    [CompilerGeneratedAttribute]
public void set_Z(float value);
    [CompilerGeneratedAttribute]
public float get_Yaw();
    [CompilerGeneratedAttribute]
public void set_Yaw(float value);
    [CompilerGeneratedAttribute]
public float get_Pitch();
    [CompilerGeneratedAttribute]
public void set_Pitch(float value);
    [CompilerGeneratedAttribute]
public float get_HeadYaw();
    [CompilerGeneratedAttribute]
public void set_HeadYaw(float value);
    public BlockCoordinates GetCoordinates3D();
    public double DistanceTo(PlayerLocation other);
    private double Square(double num);
    public Vector3 ToVector3();
    public Vector3 GetDirection();
    public Vector3 GetHeadDirection();
    public static PlayerLocation op_Addition(PlayerLocation b, Vector3 a);
    public static Vector2 op_Implicit(PlayerLocation a);
    public static Vector3 op_Implicit(PlayerLocation a);
    public static PlayerLocation op_Implicit(BlockCoordinates v);
    public sealed virtual object Clone();
    public virtual string ToString();
}
public class MiNET.Utils.Vectors.Ray : ValueType {
    public Vector3 Direction;
    public Vector3 Position;
    public Ray(Vector3 position, Vector3 direction);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Ray other);
    public virtual int GetHashCode();
    public Nullable`1<double> Intersects(BoundingBox box);
    public static bool op_Inequality(Ray a, Ray b);
    public static bool op_Equality(Ray a, Ray b);
    public virtual string ToString();
}
public class MiNET.Utils.Vectors.Ray2 : object {
    public static double EPSILON;
    public static double OFFSET;
    public Vector3 x;
    public Vector3 d;
    public Vector3 n;
    public double tNear;
    public double t;
    public double u;
    public double v;
    private static Ray2();
}
[ExtensionAttribute]
public static class MiNET.Utils.Vectors.VectorHelpers : object {
    [ExtensionAttribute]
public static double GetYaw(Vector3 vector);
    [ExtensionAttribute]
public static double GetPitch(Vector3 vector);
    [ExtensionAttribute]
public static double ToRadians(float angle);
    [ExtensionAttribute]
public static double ToRadians(double angle);
    [ExtensionAttribute]
public static double ToDegrees(double angle);
    [ExtensionAttribute]
public static Vector3 Normalize(Vector3 vec);
}
public class MiNET.Utils.WannabeRandom : object {
    private static ILog Log;
    private long _seed;
    public WannabeRandom(long seed);
    private static WannabeRandom();
    protected long NextBits(int nbits);
    public int Next(int bound);
    public int Next(int min, int max);
    public long NextLong();
    public double NextDouble();
}
public class MiNET.Utils.WorldInteractionTransactionRecord : TransactionRecord {
    [CompilerGeneratedAttribute]
private int <Flags>k__BackingField;
    public int Flags { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(int value);
}
public class MiNET.Worlds.AirWorldGenerator : object {
    public sealed virtual void Initialize(IWorldProvider worldProvider);
    public sealed virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates);
}
public class MiNET.Worlds.AnvilWorldProvider : object {
    private static ILog Log;
    public static Dictionary`2<int, Tuple`2<int, Func`3<int, byte, byte>>> Convert;
    [CompilerGeneratedAttribute]
private IWorldGenerator <MissingChunkProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private LevelInfo <LevelInfo>k__BackingField;
    public ConcurrentDictionary`2<ChunkCoordinates, ChunkColumn> _chunkCache;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dimension <Dimension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDimensionWithSkyLight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadSkyLight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadBlockLight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    private bool _isInitialized;
    private object _initializeSync;
    [CompilerGeneratedAttribute]
private Queue`1<Block> <LightSources>k__BackingField;
    private static Regex _regex;
    public IWorldGenerator MissingChunkProvider { get; public set; }
    public LevelInfo LevelInfo { get; private set; }
    public string BasePath { get; private set; }
    public Dimension Dimension { get; public set; }
    public bool IsCaching { get; private set; }
    public bool IsDimensionWithSkyLight { get; public set; }
    public bool ReadSkyLight { get; public set; }
    public bool ReadBlockLight { get; public set; }
    public bool Locked { get; public set; }
    public Queue`1<Block> LightSources { get; public set; }
    private static AnvilWorldProvider();
    public AnvilWorldProvider(string basePath);
    protected AnvilWorldProvider(string basePath, LevelInfo levelInfo, ConcurrentDictionary`2<ChunkCoordinates, ChunkColumn> chunkCache);
    [CompilerGeneratedAttribute]
public IWorldGenerator get_MissingChunkProvider();
    [CompilerGeneratedAttribute]
public void set_MissingChunkProvider(IWorldGenerator value);
    [CompilerGeneratedAttribute]
public LevelInfo get_LevelInfo();
    [CompilerGeneratedAttribute]
private void set_LevelInfo(LevelInfo value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public Dimension get_Dimension();
    [CompilerGeneratedAttribute]
public void set_Dimension(Dimension value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCaching();
    [CompilerGeneratedAttribute]
private void set_IsCaching(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDimensionWithSkyLight();
    [CompilerGeneratedAttribute]
public void set_IsDimensionWithSkyLight(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadSkyLight();
    [CompilerGeneratedAttribute]
public void set_ReadSkyLight(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadBlockLight();
    [CompilerGeneratedAttribute]
public void set_ReadBlockLight(bool value);
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(bool value);
    public sealed virtual void Initialize();
    private int Noop(int blockId, int data);
    public bool CachedChunksContains(ChunkCoordinates chunkCoord);
    public sealed virtual int UnloadChunks(Player[] players, ChunkCoordinates spawn, double maxViewDistance);
    public sealed virtual ChunkColumn[] GetCachedChunks();
    public sealed virtual void ClearCachedChunks();
    public sealed virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates, bool cacheOnly);
    [CompilerGeneratedAttribute]
public Queue`1<Block> get_LightSources();
    [CompilerGeneratedAttribute]
public void set_LightSources(Queue`1<Block> value);
    public ChunkColumn GetChunk(ChunkCoordinates coordinates, string basePath, IWorldGenerator generator);
    private void ReadSection(NbtTag sectionTag, ChunkColumn chunkColumn, bool convertBid);
    private static void CleanSignText(NbtCompound blockEntityTag, string tagName);
    private static byte Nibble4(Byte[] arr, int index);
    private static void SetNibble4(Byte[] arr, int index, byte value);
    public sealed virtual Vector3 GetSpawnPoint();
    public sealed virtual long GetTime();
    public sealed virtual long GetDayTime();
    public sealed virtual string GetName();
    public void SaveLevelInfo(LevelInfo level);
    public sealed virtual int SaveChunks();
    public sealed virtual bool HaveNether();
    public sealed virtual bool HaveTheEnd();
    public static void SaveChunk(ChunkColumn chunk, string basePath);
    public static NbtFile CreateNbtFromChunkColumn(ChunkColumn chunk);
    public int NumberOfCachedChunks();
    public sealed virtual object Clone();
    public int PruneAir();
    public int MakeAirChunksAroundWorldToCompensateForBadRendering();
    [CompilerGeneratedAttribute]
private ChunkColumn <GenerateChunkColumn>b__51_0(ChunkCoordinates coordinates);
}
public static class MiNET.Worlds.ArrayOf`1 : object {
    public static T[] Create(int size, T initialValue);
    public static T[] Create(int size);
}
public class MiNET.Worlds.Biome : object {
    public int Id;
    public string Name;
    public string DefinitionName;
    public float Temperature;
    public float Downfall;
    public int Grass;
    public int Foliage;
}
public class MiNET.Worlds.BiomeUtils : object {
    public static Biome[] Biomes;
    private static BiomeCorner[] grassCorners;
    private static BiomeCorner[] foliageCorners;
    private static int FOREST_BIOME;
    private static int SWAMPLAND_BIOME;
    private static int FOREST_HILLS_BIOME;
    private static int BIRCH_FOREST_BIOME;
    private static int BIRCH_FOREST_HILLS_BIOME;
    private static int ROOFED_FOREST_BIOME;
    private static int MESA_BIOME;
    private static int MESA_PLATEAU_F_BIOME;
    private static int MESA_PLATEAU_BIOME;
    private static BiomeUtils();
    public static float Clamp(float value, float min, float max);
    private int BiomeColor(float temperature, float rainfall, int elevation, BiomeCorner[] corners);
    private int BiomeGrassColor(float temperature, float rainfall, int elevation);
    private int BiomeFoliageColor(float temperature, float rainfall, int elevation);
    public void PrecomputeBiomeColors();
    public int ComputeBiomeColor(int biome, int elevation, bool isGrass);
    public static Biome GetBiome(int biomeId);
    public int BiomeSwampRiverColor(int color);
    public static NbtCompound GenerateDefinitionList();
}
public class MiNET.Worlds.BlockBreakEventArgs : LevelCancelEventArgs {
    [CompilerGeneratedAttribute]
private Block <Block>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Drops>k__BackingField;
    public Block Block { get; private set; }
    public List`1<Item> Drops { get; private set; }
    public BlockBreakEventArgs(Player player, Level level, Block block, List`1<Item> drops);
    [CompilerGeneratedAttribute]
public Block get_Block();
    [CompilerGeneratedAttribute]
private void set_Block(Block value);
    [CompilerGeneratedAttribute]
public List`1<Item> get_Drops();
    [CompilerGeneratedAttribute]
private void set_Drops(List`1<Item> value);
}
public class MiNET.Worlds.BlockLightCalculations : object {
    private static ILog Log;
    public static long touches;
    private static BlockLightCalculations();
    public static void Calculate(Level level, BlockCoordinates blockCoordinates);
    private static void ProcessNode(Level level, BlockCoordinates coord, Queue`1<BlockCoordinates> lightBfsQueue);
    private static ChunkColumn GetChunk(Level level, BlockCoordinates blockCoordinates);
    private static void Test(Level level, BlockCoordinates coord, BlockCoordinates newCoord, Queue`1<BlockCoordinates> lightBfsQueue, ChunkColumn chunk, int lightLevel);
    private static void SetLightLevel(ChunkColumn chunk, Queue`1<BlockCoordinates> lightBfsQueue, Block b1, int lightLevel);
    private static void SetLightLevel(ChunkColumn chunk, Queue`1<BlockCoordinates> lightBfsQueue, BlockCoordinates coord, int lightLevel);
}
public class MiNET.Worlds.BlockPlaceEventArgs : LevelCancelEventArgs {
    [CompilerGeneratedAttribute]
private Block <TargetBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <ExistingBlock>k__BackingField;
    public Block TargetBlock { get; private set; }
    public Block ExistingBlock { get; private set; }
    public BlockPlaceEventArgs(Player player, Level level, Block targetBlock, Block existingBlock);
    [CompilerGeneratedAttribute]
public Block get_TargetBlock();
    [CompilerGeneratedAttribute]
private void set_TargetBlock(Block value);
    [CompilerGeneratedAttribute]
public Block get_ExistingBlock();
    [CompilerGeneratedAttribute]
private void set_ExistingBlock(Block value);
}
[DefaultMemberAttribute("Item")]
public class MiNET.Worlds.ChunkColumn : object {
    public static int WorldHeight;
    public static int WorldMaxY;
    public static int WorldMinY;
    private static ILog Log;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Z>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllAir>k__BackingField;
    public Byte[] biomeId;
    public Int16[] height;
    [CompilerGeneratedAttribute]
private IDictionary`2<BlockCoordinates, NbtCompound> <BlockEntities>k__BackingField;
    private SubChunk[] _subChunks;
    [CompilerGeneratedAttribute]
private bool <IsDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedSave>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCache>k__BackingField;
    private McpeWrapper _cachedBatch;
    private object _cacheSync;
    private Random random;
    public int X { get; public set; }
    public int Z { get; public set; }
    public bool IsAllAir { get; public set; }
    public IDictionary`2<BlockCoordinates, NbtCompound> BlockEntities { get; private set; }
    public bool IsDirty { get; public set; }
    public bool NeedSave { get; public set; }
    public bool DisableCache { get; public set; }
    public SubChunk Item { get; public set; }
    public ChunkColumn(bool clearBuffers);
    private static ChunkColumn();
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Z();
    [CompilerGeneratedAttribute]
public void set_Z(int value);
    [CompilerGeneratedAttribute]
public bool get_IsAllAir();
    [CompilerGeneratedAttribute]
public void set_IsAllAir(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<BlockCoordinates, NbtCompound> get_BlockEntities();
    [CompilerGeneratedAttribute]
private void set_BlockEntities(IDictionary`2<BlockCoordinates, NbtCompound> value);
    [CompilerGeneratedAttribute]
public bool get_IsDirty();
    [CompilerGeneratedAttribute]
public void set_IsDirty(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedSave();
    [CompilerGeneratedAttribute]
public void set_NeedSave(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableCache();
    [CompilerGeneratedAttribute]
public void set_DisableCache(bool value);
    private void ClearBuffers();
    private void SetDirty();
    public SubChunk get_Item(int chunkIndex, bool generateIfMissing);
    public void set_Item(int chunkIndex, bool generateIfMissing, SubChunk value);
    public int Count();
    public SubChunk GetSubChunk(int by);
    public int GetBlockId(int bx, int by, int bz);
    public Block GetBlockObject(int bx, int by, int bz);
    public void SetBlock(int bx, int by, int bz, Block block);
    public void SetBlockByRuntimeId(int bx, int by, int bz, int runtimeId);
    public void SetHeight(int bx, int bz, short h);
    public short GetHeight(int bx, int bz);
    public void SetBiome(int bx, int bz, byte biome);
    public byte GetBiome(int bx, int bz);
    public byte GetBlocklight(int bx, int by, int bz);
    public void SetBlocklight(int bx, int by, int bz, byte data);
    public byte GetSkylight(int bx, int by, int bz);
    public void SetSkyLight(int bx, int by, int bz, byte data);
    public NbtCompound GetBlockEntity(BlockCoordinates coordinates);
    public void SetBlockEntity(BlockCoordinates coordinates, NbtCompound nbt);
    public void RemoveBlockEntity(BlockCoordinates coordinates);
    public static Color Blend(Color color, Color backColor, double amount);
    public Color CombineColors(Color[] aColors);
    private void InterpolateBiomes();
    private Color GetBiomeColor(int bx, int bz);
    public static void FastFill(T[]& data, T value2, ulong value);
    public static void Fill(T[] destinationArray, T[] value);
    public void RecalcHeight();
    public void RecalcHeight(int x, int z, int startY);
    public int GetRecalatedHeight(int x, int z);
    internal void ClearCache();
    public McpeWrapper GetBatch();
    public Byte[] GetBytes(int topEmpty);
    private Byte[] GetBiomePalette(Byte[] biomes);
    internal int GetTopEmpty();
    public sealed virtual object Clone();
    public sealed virtual IEnumerator`1<SubChunk> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class MiNET.Worlds.ChunkPool`1 : object {
    private static ILog Log;
    private ConcurrentQueue`1<T> _objects;
    private Func`1<T> _objectGenerator;
    private static long MaxPoolSize;
    public ChunkPool`1(Func`1<T> objectGenerator);
    private static ChunkPool`1();
    public T GetObject();
    public void PutObject(T item);
}
public class MiNET.Worlds.ColorHeatMap : object {
    private static ILog Log;
    public byte Alpha;
    public List`1<Rgba32> ColorsOfMap;
    public ColorHeatMap(byte alpha);
    private static ColorHeatMap();
    private void InitColorsBlocks();
    public Rgba32 GetColorForValue(double val, double maxVal);
}
public class MiNET.Worlds.CoolWorldProvider : object {
    private string _seed;
    private ConcurrentDictionary`2<ChunkCoordinates, ChunkColumn> _chunkCache;
    [CompilerGeneratedAttribute]
private bool <IsCaching>k__BackingField;
    private static int WaterLevel;
    private static Random Getrandom;
    private static object SyncLock;
    public bool IsCaching { get; private set; }
    private static CoolWorldProvider();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCaching();
    [CompilerGeneratedAttribute]
private void set_IsCaching(bool value);
    public sealed virtual void Initialize();
    public sealed virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates, bool cacheOnly);
    public sealed virtual Vector3 GetSpawnPoint();
    public sealed virtual long GetTime();
    public sealed virtual long GetDayTime();
    public sealed virtual string GetName();
    public sealed virtual int SaveChunks();
    public sealed virtual bool HaveNether();
    public sealed virtual bool HaveTheEnd();
    private void PopulateChunk(ChunkColumn chunk);
    private void GenerateTree(ChunkColumn chunk, int x, int treebase, int z, WoodType woodType);
    private static int GetRandomNumber(int min, int max);
}
public enum MiNET.Worlds.Difficulty : Enum {
    public int value__;
    public static Difficulty Peaceful;
    public static Difficulty Easy;
    public static Difficulty Normal;
    public static Difficulty Hard;
    public static Difficulty Hardcore;
}
public enum MiNET.Worlds.Dimension : Enum {
    public int value__;
    public static Dimension Overworld;
    public static Dimension Nether;
    public static Dimension TheEnd;
}
public class MiNET.Worlds.EntityManager : object {
    public static long EntityIdUndefined;
    public static long EntityIdSelf;
    private long _entityId;
    public long AddEntity(Entity entity);
    public void RemoveEntity(Entity caller, Entity entity);
}
internal class MiNET.Worlds.ExperimentalWorldProvider : object {
    private ConcurrentDictionary`2<ChunkCoordinates, ChunkColumn> _chunkCache;
    [CompilerGeneratedAttribute]
private bool <IsCaching>k__BackingField;
    private float stoneBaseHeight;
    private float stoneBaseNoise;
    private float stoneBaseNoiseHeight;
    private float stoneMountainHeight;
    private float stoneMountainFrequency;
    private float stoneMinHeight;
    private float dirtBaseHeight;
    private float dirtNoise;
    private float dirtNoiseHeight;
    private int waterLevel;
    private static Random getrandom;
    private static object syncLock;
    private static OpenSimplexNoise OpenNoise;
    public bool IsCaching { get; private set; }
    private static ExperimentalWorldProvider();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCaching();
    [CompilerGeneratedAttribute]
private void set_IsCaching(bool value);
    public sealed virtual void Initialize();
    public sealed virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates, bool cacheOnly);
    public sealed virtual Vector3 GetSpawnPoint();
    public sealed virtual long GetTime();
    public sealed virtual long GetDayTime();
    public sealed virtual string GetName();
    public sealed virtual int SaveChunks();
    public sealed virtual bool HaveNether();
    public sealed virtual bool HaveTheEnd();
    private void PopulateChunk(ChunkColumn chunk);
    private void GenerateTree(ChunkColumn chunk, int x, int treebase, int z);
    private static int GetRandomNumber(int min, int max);
    public static int GetNoise(int x, int z, float scale, int max);
}
public enum MiNET.Worlds.GameMode : Enum {
    public int value__;
    public static GameMode Survival;
    public static GameMode S;
    public static GameMode Creative;
    public static GameMode C;
    public static GameMode Adventure;
    public static GameMode Spectator;
}
public interface MiNET.Worlds.IBlockAccess {
    public abstract virtual ChunkColumn GetChunk(BlockCoordinates coordinates, bool cacheOnly);
    public abstract virtual ChunkColumn GetChunk(ChunkCoordinates coordinates, bool cacheOnly);
    public abstract virtual void SetSkyLight(BlockCoordinates coordinates, byte skyLight);
    public abstract virtual int GetHeight(BlockCoordinates coordinates);
    public abstract virtual Block GetBlock(BlockCoordinates coord, ChunkColumn tryChunk);
    public abstract virtual void SetBlock(Block block, bool broadcast, bool applyPhysics, bool calculateLight, ChunkColumn possibleChunk);
}
public interface MiNET.Worlds.ICachingWorldProvider {
    public abstract virtual ChunkColumn[] GetCachedChunks();
    public abstract virtual void ClearCachedChunks();
    public abstract virtual int UnloadChunks(Player[] players, ChunkCoordinates spawn, double maxViewDistance);
}
public interface MiNET.Worlds.IWorldGenerator {
    public abstract virtual void Initialize(IWorldProvider worldProvider);
    public abstract virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates);
}
public interface MiNET.Worlds.IWorldProvider {
    public bool IsCaching { get; }
    public abstract virtual bool get_IsCaching();
    public abstract virtual void Initialize();
    public abstract virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates, bool cacheOnly);
    public abstract virtual Vector3 GetSpawnPoint();
    public abstract virtual string GetName();
    public abstract virtual long GetTime();
    public abstract virtual long GetDayTime();
    public abstract virtual int SaveChunks();
    public abstract virtual bool HaveNether();
    public abstract virtual bool HaveTheEnd();
}
public class MiNET.Worlds.Level : object {
    private static ILog Log;
    public static BlockCoordinates Up;
    public static BlockCoordinates Down;
    public static BlockCoordinates South;
    public static BlockCoordinates North;
    public static BlockCoordinates East;
    public static BlockCoordinates West;
    [CompilerGeneratedAttribute]
private IWorldProvider <WorldProvider>k__BackingField;
    private int _worldDayCycleTime;
    [CompilerGeneratedAttribute]
private PlayerLocation <SpawnPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<long, Player> <Players>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<long, Entity> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockEntity> <BlockEntities>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<BlockCoordinates, long> <BlockWithTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LevelId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LevelName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dimension <Dimension>k__BackingField;
    [CompilerGeneratedAttribute]
private GameMode <GameMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveDownfall>k__BackingField;
    [CompilerGeneratedAttribute]
private Difficulty <Difficulty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSmelt>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorldTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentWorldCycleTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TickTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkylightSubtracted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartTimeInTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBlockTicking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableChunkTicking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBreak>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityManager <EntityManager>k__BackingField;
    [CompilerGeneratedAttribute]
private InventoryManager <InventoryManager>k__BackingField;
    [CompilerGeneratedAttribute]
private EntitySpawnManager <EntitySpawnManager>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ViewDistance>k__BackingField;
    [CompilerGeneratedAttribute]
private Random <Random>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SaveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnloadInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private LevelManager <LevelManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <NetherLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <TheEndLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <OverworldLevel>k__BackingField;
    private HighPrecisionTimer _tickerHighPrecisionTimer;
    private object _playerWriteLock;
    [CompilerGeneratedAttribute]
private EventHandler`1<LevelEventArgs> PlayerAdded;
    [CompilerGeneratedAttribute]
private EventHandler`1<LevelEventArgs> PlayerRemoved;
    private object _tickSync;
    private Stopwatch _tickTimer;
    public long LastTickProcessingTime;
    public long AvarageTickProcessingTime;
    [CompilerGeneratedAttribute]
private int <PlayerCount>k__BackingField;
    public Profiler _profiler;
    private DateTime _lastSendTime;
    private DateTime _lastBroadcast;
    [CompilerGeneratedAttribute]
private EventHandler`1<BlockPlaceEventArgs> BlockPlace;
    [CompilerGeneratedAttribute]
private EventHandler`1<BlockBreakEventArgs> BlockBreak;
    [CompilerGeneratedAttribute]
private bool <DrowningDamage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommandblockOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoTiledrops>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoMobloot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepInventory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoDaylightcycle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoMobspawning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoEntitydrops>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoFiretick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoWeathercycle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pvp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Falldamage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Firedamage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mobgriefing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCoordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NaturalRegeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TntExplodes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendCommandfeedback>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RandomTickSpeed>k__BackingField;
    public IWorldProvider WorldProvider { get; public set; }
    public PlayerLocation SpawnPoint { get; public set; }
    public ConcurrentDictionary`2<long, Player> Players { get; private set; }
    public ConcurrentDictionary`2<long, Entity> Entities { get; private set; }
    public List`1<BlockEntity> BlockEntities { get; private set; }
    public ConcurrentDictionary`2<BlockCoordinates, long> BlockWithTicks { get; private set; }
    public string LevelId { get; private set; }
    public string LevelName { get; private set; }
    public Dimension Dimension { get; public set; }
    public GameMode GameMode { get; private set; }
    public bool IsSurvival { get; }
    public bool HaveDownfall { get; public set; }
    public Difficulty Difficulty { get; public set; }
    public bool AutoSmelt { get; public set; }
    public long WorldTime { get; public set; }
    public long CurrentWorldCycleTime { get; private set; }
    public long TickTime { get; public set; }
    public int SkylightSubtracted { get; public set; }
    public long StartTimeInTicks { get; private set; }
    public bool EnableBlockTicking { get; public set; }
    public bool EnableChunkTicking { get; public set; }
    public bool AllowBuild { get; public set; }
    public bool AllowBreak { get; public set; }
    public EntityManager EntityManager { get; protected set; }
    public InventoryManager InventoryManager { get; protected set; }
    public EntitySpawnManager EntitySpawnManager { get; protected set; }
    public int ViewDistance { get; public set; }
    public Random Random { get; private set; }
    public int SaveInterval { get; public set; }
    public int UnloadInterval { get; public set; }
    public LevelManager LevelManager { get; }
    public Level NetherLevel { get; public set; }
    public Level TheEndLevel { get; public set; }
    public Level OverworldLevel { get; public set; }
    public int PlayerCount { get; private set; }
    public bool DrowningDamage { get; public set; }
    public bool CommandblockOutput { get; public set; }
    public bool DoTiledrops { get; public set; }
    public bool DoMobloot { get; public set; }
    public bool KeepInventory { get; public set; }
    public bool DoDaylightcycle { get; public set; }
    public bool DoMobspawning { get; public set; }
    public bool DoEntitydrops { get; public set; }
    public bool DoFiretick { get; public set; }
    public bool DoWeathercycle { get; public set; }
    public bool Pvp { get; public set; }
    public bool Falldamage { get; public set; }
    public bool Firedamage { get; public set; }
    public bool Mobgriefing { get; public set; }
    public bool ShowCoordinates { get; public set; }
    public bool NaturalRegeneration { get; public set; }
    public bool TntExplodes { get; public set; }
    public bool SendCommandfeedback { get; public set; }
    public int RandomTickSpeed { get; public set; }
    public Level(LevelManager levelManager, string levelId, IWorldProvider worldProvider, EntityManager entityManager, GameMode gameMode, Difficulty difficulty, int viewDistance);
    private static Level();
    [CompilerGeneratedAttribute]
public IWorldProvider get_WorldProvider();
    [CompilerGeneratedAttribute]
public void set_WorldProvider(IWorldProvider value);
    [CompilerGeneratedAttribute]
public PlayerLocation get_SpawnPoint();
    [CompilerGeneratedAttribute]
public void set_SpawnPoint(PlayerLocation value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<long, Player> get_Players();
    [CompilerGeneratedAttribute]
private void set_Players(ConcurrentDictionary`2<long, Player> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<long, Entity> get_Entities();
    [CompilerGeneratedAttribute]
private void set_Entities(ConcurrentDictionary`2<long, Entity> value);
    [CompilerGeneratedAttribute]
public List`1<BlockEntity> get_BlockEntities();
    [CompilerGeneratedAttribute]
private void set_BlockEntities(List`1<BlockEntity> value);
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<BlockCoordinates, long> get_BlockWithTicks();
    [CompilerGeneratedAttribute]
private void set_BlockWithTicks(ConcurrentDictionary`2<BlockCoordinates, long> value);
    [CompilerGeneratedAttribute]
public string get_LevelId();
    [CompilerGeneratedAttribute]
private void set_LevelId(string value);
    [CompilerGeneratedAttribute]
public string get_LevelName();
    [CompilerGeneratedAttribute]
private void set_LevelName(string value);
    [CompilerGeneratedAttribute]
public Dimension get_Dimension();
    [CompilerGeneratedAttribute]
public void set_Dimension(Dimension value);
    [CompilerGeneratedAttribute]
public GameMode get_GameMode();
    [CompilerGeneratedAttribute]
private void set_GameMode(GameMode value);
    public bool get_IsSurvival();
    [CompilerGeneratedAttribute]
public bool get_HaveDownfall();
    [CompilerGeneratedAttribute]
public void set_HaveDownfall(bool value);
    [CompilerGeneratedAttribute]
public Difficulty get_Difficulty();
    [CompilerGeneratedAttribute]
public void set_Difficulty(Difficulty value);
    [CompilerGeneratedAttribute]
public bool get_AutoSmelt();
    [CompilerGeneratedAttribute]
public void set_AutoSmelt(bool value);
    [CompilerGeneratedAttribute]
public long get_WorldTime();
    [CompilerGeneratedAttribute]
public void set_WorldTime(long value);
    [CompilerGeneratedAttribute]
public long get_CurrentWorldCycleTime();
    [CompilerGeneratedAttribute]
private void set_CurrentWorldCycleTime(long value);
    [CompilerGeneratedAttribute]
public long get_TickTime();
    [CompilerGeneratedAttribute]
public void set_TickTime(long value);
    [CompilerGeneratedAttribute]
public int get_SkylightSubtracted();
    [CompilerGeneratedAttribute]
public void set_SkylightSubtracted(int value);
    [CompilerGeneratedAttribute]
public long get_StartTimeInTicks();
    [CompilerGeneratedAttribute]
private void set_StartTimeInTicks(long value);
    [CompilerGeneratedAttribute]
public bool get_EnableBlockTicking();
    [CompilerGeneratedAttribute]
public void set_EnableBlockTicking(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableChunkTicking();
    [CompilerGeneratedAttribute]
public void set_EnableChunkTicking(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowBuild();
    [CompilerGeneratedAttribute]
public void set_AllowBuild(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowBreak();
    [CompilerGeneratedAttribute]
public void set_AllowBreak(bool value);
    [CompilerGeneratedAttribute]
public EntityManager get_EntityManager();
    [CompilerGeneratedAttribute]
protected void set_EntityManager(EntityManager value);
    [CompilerGeneratedAttribute]
public InventoryManager get_InventoryManager();
    [CompilerGeneratedAttribute]
protected void set_InventoryManager(InventoryManager value);
    [CompilerGeneratedAttribute]
public EntitySpawnManager get_EntitySpawnManager();
    [CompilerGeneratedAttribute]
protected void set_EntitySpawnManager(EntitySpawnManager value);
    [CompilerGeneratedAttribute]
public int get_ViewDistance();
    [CompilerGeneratedAttribute]
public void set_ViewDistance(int value);
    [CompilerGeneratedAttribute]
public Random get_Random();
    [CompilerGeneratedAttribute]
private void set_Random(Random value);
    [CompilerGeneratedAttribute]
public int get_SaveInterval();
    [CompilerGeneratedAttribute]
public void set_SaveInterval(int value);
    [CompilerGeneratedAttribute]
public int get_UnloadInterval();
    [CompilerGeneratedAttribute]
public void set_UnloadInterval(int value);
    [CompilerGeneratedAttribute]
public LevelManager get_LevelManager();
    [CompilerGeneratedAttribute]
public Level get_NetherLevel();
    [CompilerGeneratedAttribute]
public void set_NetherLevel(Level value);
    [CompilerGeneratedAttribute]
public Level get_TheEndLevel();
    [CompilerGeneratedAttribute]
public void set_TheEndLevel(Level value);
    [CompilerGeneratedAttribute]
public Level get_OverworldLevel();
    [CompilerGeneratedAttribute]
public void set_OverworldLevel(Level value);
    public void Initialize();
    private void _tickerHighPrecisionTimer_Tick();
    public virtual void Close();
    internal static McpeWrapper CreateMcpeBatch(Byte[] bytes);
    public virtual void AddPlayer(Player newPlayer, bool spawn);
    [CompilerGeneratedAttribute]
public void add_PlayerAdded(EventHandler`1<LevelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerAdded(EventHandler`1<LevelEventArgs> value);
    protected virtual void OnPlayerAdded(LevelEventArgs e);
    [CompilerGeneratedAttribute]
public void add_PlayerRemoved(EventHandler`1<LevelEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PlayerRemoved(EventHandler`1<LevelEventArgs> value);
    protected virtual void OnPlayerRemoved(LevelEventArgs e);
    public void SpawnToAll(Player newPlayer);
    public virtual void RemovePlayer(Player player, bool despawn);
    public void DespawnFromAll(Player player);
    public void AddEntity(Entity entity);
    public void RemoveEntity(Entity entity);
    public void RemoveDuplicatePlayers(string username, long clientId);
    public virtual void BroadcastTitle(string text, TitleType type, int fadeIn, int fadeOut, int stayTime, Player sender, Player[] sendList);
    public virtual void BroadcastMessage(string text, MessageType type, Player sender, Player[] sendList, bool needsTranslation, String[] parameters);
    [CompilerGeneratedAttribute]
public int get_PlayerCount();
    [CompilerGeneratedAttribute]
private void set_PlayerCount(int value);
    private void WorldTick(object sender);
    public int GetSubtractedLight(BlockCoordinates coordinates);
    public int GetSubtractedLight(BlockCoordinates coordinates, int amount);
    public int CalculateSkylightSubtracted(long worldTime);
    public float CalculateCelestialAngle(long worldTime);
    public Player[] GetSpawnedPlayers();
    public Player[] GetAllPlayers();
    public Entity[] GetEntites();
    private IEnumerable`1<Player> GetStaledPlayers(Player[] players);
    protected virtual void BroadCastMovement(Player[] players, Entity[] entities);
    public void RelayBroadcast(T message);
    public void RelayBroadcast(Player source, T message);
    public void RelayBroadcast(Player[] sendList, T message);
    public void RelayBroadcast(Player source, Player[] sendList, T message);
    public List`1<SpawnState> GetChunkCoordinatesForTick(ChunkCoordinates chunkPosition, List`1<SpawnState> chunksUsed, double radius, Random random);
    [IteratorStateMachineAttribute("MiNET.Worlds.Level/<GenerateChunks>d__191")]
public IEnumerable`1<McpeWrapper> GenerateChunks(ChunkCoordinates chunkPosition, Dictionary`2<ChunkCoordinates, McpeWrapper> chunksUsed, double radius, Func`1<Vector3> getCurrentPositionAction);
    public Block GetBlock(PlayerLocation location);
    public Block GetBlock(int x, int y, int z);
    public sealed virtual Block GetBlock(BlockCoordinates blockCoordinates, ChunkColumn tryChunk);
    public bool IsBlock(int x, int y, int z, int blockId);
    public bool IsBlock(BlockCoordinates blockCoordinates, int blockId);
    public bool IsAir(BlockCoordinates blockCoordinates);
    public bool IsNotBlockingSkylight(BlockCoordinates blockCoordinates);
    public bool IsTransparent(BlockCoordinates blockCoordinates);
    public sealed virtual int GetHeight(BlockCoordinates blockCoordinates);
    public byte GetSkyLight(BlockCoordinates blockCoordinates);
    public byte GetBlockLight(BlockCoordinates blockCoordinates);
    public byte GetBiomeId(BlockCoordinates blockCoordinates);
    public sealed virtual ChunkColumn GetChunk(BlockCoordinates blockCoordinates, bool cacheOnly);
    public sealed virtual ChunkColumn GetChunk(ChunkCoordinates chunkCoordinates, bool cacheOnly);
    public sealed virtual void SetBlock(Block block, bool broadcast, bool applyPhysics, bool calculateLight, ChunkColumn possibleChunk);
    private void CalculateSkyLight(int x, int y, int z);
    private void DoLight(int x, int y, int z);
    public void SetBlockLight(Block block);
    public void SetBlockLight(BlockCoordinates coordinates, byte blockLight);
    public void SetBiomeId(BlockCoordinates coordinates, byte biomeId);
    public void SetSkyLight(Block block);
    public sealed virtual void SetSkyLight(BlockCoordinates coordinates, byte skyLight);
    public void SetAir(BlockCoordinates blockCoordinates, bool broadcast);
    public void SetAir(int x, int y, int z, bool broadcast);
    public BlockEntity GetBlockEntity(BlockCoordinates blockCoordinates);
    public void SetBlockEntity(BlockEntity blockEntity, bool broadcast);
    public void RemoveBlockEntity(BlockCoordinates blockCoordinates);
    [CompilerGeneratedAttribute]
public void add_BlockPlace(EventHandler`1<BlockPlaceEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BlockPlace(EventHandler`1<BlockPlaceEventArgs> value);
    public virtual bool OnBlockPlace(BlockPlaceEventArgs e);
    public void Interact(Player player, Item itemInHand, BlockCoordinates blockCoordinates, BlockFace face, Vector3 faceCoords);
    [CompilerGeneratedAttribute]
public void add_BlockBreak(EventHandler`1<BlockBreakEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BlockBreak(EventHandler`1<BlockBreakEventArgs> value);
    protected virtual bool OnBlockBreak(BlockBreakEventArgs e);
    public void BreakBlock(Player player, BlockCoordinates blockCoordinates, BlockFace face);
    private static void RevertBlockAction(Player player, Block block, BlockEntity blockEntity);
    public void BreakBlock(Player player, Block block, BlockEntity blockEntity, Item tool, BlockFace face);
    public virtual void DropItem(Vector3 coordinates, Item drop);
    public void ApplyPhysics(int x, int y, int z);
    private void DoPhysics(int x, int y, int z);
    public void ScheduleBlockTick(Block block, int tickRate);
    public void CancelBlockTick(Block block);
    public bool TryGetEntity(long targetEntityId, T& entity);
    public ChunkColumn[] GetLoadedChunks();
    public void ClearLoadedChunks();
    public void StrikeLightning(Vector3 position);
    public void MakeSound(Sound sound);
    [CompilerGeneratedAttribute]
public bool get_DrowningDamage();
    [CompilerGeneratedAttribute]
public void set_DrowningDamage(bool value);
    [CompilerGeneratedAttribute]
public bool get_CommandblockOutput();
    [CompilerGeneratedAttribute]
public void set_CommandblockOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoTiledrops();
    [CompilerGeneratedAttribute]
public void set_DoTiledrops(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoMobloot();
    [CompilerGeneratedAttribute]
public void set_DoMobloot(bool value);
    [CompilerGeneratedAttribute]
public bool get_KeepInventory();
    [CompilerGeneratedAttribute]
public void set_KeepInventory(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoDaylightcycle();
    [CompilerGeneratedAttribute]
public void set_DoDaylightcycle(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoMobspawning();
    [CompilerGeneratedAttribute]
public void set_DoMobspawning(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoEntitydrops();
    [CompilerGeneratedAttribute]
public void set_DoEntitydrops(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoFiretick();
    [CompilerGeneratedAttribute]
public void set_DoFiretick(bool value);
    [CompilerGeneratedAttribute]
public bool get_DoWeathercycle();
    [CompilerGeneratedAttribute]
public void set_DoWeathercycle(bool value);
    [CompilerGeneratedAttribute]
public bool get_Pvp();
    [CompilerGeneratedAttribute]
public void set_Pvp(bool value);
    [CompilerGeneratedAttribute]
public bool get_Falldamage();
    [CompilerGeneratedAttribute]
public void set_Falldamage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Firedamage();
    [CompilerGeneratedAttribute]
public void set_Firedamage(bool value);
    [CompilerGeneratedAttribute]
public bool get_Mobgriefing();
    [CompilerGeneratedAttribute]
public void set_Mobgriefing(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCoordinates();
    [CompilerGeneratedAttribute]
public void set_ShowCoordinates(bool value);
    [CompilerGeneratedAttribute]
public bool get_NaturalRegeneration();
    [CompilerGeneratedAttribute]
public void set_NaturalRegeneration(bool value);
    [CompilerGeneratedAttribute]
public bool get_TntExplodes();
    [CompilerGeneratedAttribute]
public void set_TntExplodes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SendCommandfeedback();
    [CompilerGeneratedAttribute]
public void set_SendCommandfeedback(bool value);
    [CompilerGeneratedAttribute]
public int get_RandomTickSpeed();
    [CompilerGeneratedAttribute]
public void set_RandomTickSpeed(int value);
    public virtual void BroadcastGameRules();
    public void SetGameRule(GameRulesEnum rule, bool value);
    public void SetGameRule(GameRulesEnum rule, int value);
    public bool GetGameRule(GameRulesEnum rule);
    public virtual GameRules GetGameRules();
    public void BroadcastSound(BlockCoordinates position, LevelSoundEventType sound, int blockId, Player sender);
}
public class MiNET.Worlds.LevelCancelEventArgs : LevelEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    public LevelCancelEventArgs(Player player, Level level);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class MiNET.Worlds.LevelDbProvider : object {
    private static ILog Log;
    private ConcurrentDictionary`2<ChunkCoordinates, ChunkColumn> _chunkCache;
    [CompilerGeneratedAttribute]
private Database <Db>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private LevelInfoBedrock <LevelInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Locked>k__BackingField;
    [CompilerGeneratedAttribute]
private IWorldGenerator <MissingChunkProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Dimension <Dimension>k__BackingField;
    public Database Db { get; private set; }
    public string BasePath { get; private set; }
    public LevelInfoBedrock LevelInfo { get; private set; }
    public bool IsCaching { get; }
    public bool Locked { get; public set; }
    public IWorldGenerator MissingChunkProvider { get; public set; }
    public Dimension Dimension { get; public set; }
    public LevelDbProvider(Database db);
    public LevelDbProvider(string basePath);
    private static LevelDbProvider();
    [CompilerGeneratedAttribute]
public Database get_Db();
    [CompilerGeneratedAttribute]
private void set_Db(Database value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public LevelInfoBedrock get_LevelInfo();
    [CompilerGeneratedAttribute]
private void set_LevelInfo(LevelInfoBedrock value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCaching();
    [CompilerGeneratedAttribute]
public bool get_Locked();
    [CompilerGeneratedAttribute]
public void set_Locked(bool value);
    [CompilerGeneratedAttribute]
public IWorldGenerator get_MissingChunkProvider();
    [CompilerGeneratedAttribute]
public void set_MissingChunkProvider(IWorldGenerator value);
    [CompilerGeneratedAttribute]
public Dimension get_Dimension();
    [CompilerGeneratedAttribute]
public void set_Dimension(Dimension value);
    public sealed virtual void Initialize();
    public sealed virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates, bool cacheOnly);
    public ChunkColumn GetChunk(ChunkCoordinates coordinates, IWorldGenerator generator);
    internal void ParseSection(SubChunk section, ReadOnlyMemory`1<byte> data);
    private static Byte[] Combine(Byte[] first, Byte[] second);
    private static Byte[] Combine(Byte[] first, byte b);
    public sealed virtual Vector3 GetSpawnPoint();
    public sealed virtual string GetName();
    public sealed virtual long GetTime();
    public sealed virtual long GetDayTime();
    public sealed virtual int SaveChunks();
    private void SaveLevelInfo(LevelInfoBedrock levelInfo);
    private void SaveChunk(ChunkColumn chunk);
    private Byte[] GetSectionBytes(SubChunk subChunk);
    public void Write(SubChunk subChunk, MemoryStream stream);
    internal bool WriteStore(MemoryStream stream, Int16[] blocks, Byte[] loggedBlocks, bool forceWrite, List`1<int> palette);
    public sealed virtual bool HaveNether();
    public sealed virtual bool HaveTheEnd();
    public sealed virtual ChunkColumn[] GetCachedChunks();
    public sealed virtual void ClearCachedChunks();
    public sealed virtual int UnloadChunks(Player[] players, ChunkCoordinates spawn, double maxViewDistance);
    public sealed virtual object Clone();
    private static List`1<IBlockState> ReadBlockState(NbtCompound tag);
    private static NbtCompound WriteBlockState(BlockStateContainer container);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <Initialize>b__31_0(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private ChunkColumn <GenerateChunkColumn>b__32_0(ChunkCoordinates coordinates);
}
public class MiNET.Worlds.LevelEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Player <Player>k__BackingField;
    [CompilerGeneratedAttribute]
private Level <Level>k__BackingField;
    public Player Player { get; public set; }
    public Level Level { get; public set; }
    public LevelEventArgs(Player player, Level level);
    [CompilerGeneratedAttribute]
public Player get_Player();
    [CompilerGeneratedAttribute]
public void set_Player(Player value);
    [CompilerGeneratedAttribute]
public Level get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Level value);
}
public class MiNET.Worlds.LevelInfo : object {
    [CompilerGeneratedAttribute]
private int <DataVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LevelName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratorName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GeneratorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratorOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RandomSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MapFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastPlayed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hardcore>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GameType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DayTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpawnX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpawnY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpawnZ>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Raining>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RainTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Thundering>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThunderTime>k__BackingField;
    public int DataVersion { get; public set; }
    public int Version { get; public set; }
    public bool Initialized { get; public set; }
    public string LevelName { get; public set; }
    public string GeneratorName { get; public set; }
    public int GeneratorVersion { get; public set; }
    public string GeneratorOptions { get; public set; }
    public long RandomSeed { get; public set; }
    public bool MapFeatures { get; public set; }
    public long LastPlayed { get; public set; }
    public bool AllowCommands { get; public set; }
    public bool Hardcore { get; public set; }
    public int GameType { get; public set; }
    public long Time { get; public set; }
    public long DayTime { get; public set; }
    public int SpawnX { get; public set; }
    public int SpawnY { get; public set; }
    public int SpawnZ { get; public set; }
    public bool Raining { get; public set; }
    public int RainTime { get; public set; }
    public bool Thundering { get; public set; }
    public int ThunderTime { get; public set; }
    public LevelInfo(NbtTag dataTag);
    [CompilerGeneratedAttribute]
public int get_DataVersion();
    [CompilerGeneratedAttribute]
public void set_DataVersion(int value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
public void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
public string get_LevelName();
    [CompilerGeneratedAttribute]
public void set_LevelName(string value);
    [CompilerGeneratedAttribute]
public string get_GeneratorName();
    [CompilerGeneratedAttribute]
public void set_GeneratorName(string value);
    [CompilerGeneratedAttribute]
public int get_GeneratorVersion();
    [CompilerGeneratedAttribute]
public void set_GeneratorVersion(int value);
    [CompilerGeneratedAttribute]
public string get_GeneratorOptions();
    [CompilerGeneratedAttribute]
public void set_GeneratorOptions(string value);
    [CompilerGeneratedAttribute]
public long get_RandomSeed();
    [CompilerGeneratedAttribute]
public void set_RandomSeed(long value);
    [CompilerGeneratedAttribute]
public bool get_MapFeatures();
    [CompilerGeneratedAttribute]
public void set_MapFeatures(bool value);
    [CompilerGeneratedAttribute]
public long get_LastPlayed();
    [CompilerGeneratedAttribute]
public void set_LastPlayed(long value);
    [CompilerGeneratedAttribute]
public bool get_AllowCommands();
    [CompilerGeneratedAttribute]
public void set_AllowCommands(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hardcore();
    [CompilerGeneratedAttribute]
public void set_Hardcore(bool value);
    [CompilerGeneratedAttribute]
public int get_GameType();
    [CompilerGeneratedAttribute]
public void set_GameType(int value);
    [CompilerGeneratedAttribute]
public long get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(long value);
    [CompilerGeneratedAttribute]
public long get_DayTime();
    [CompilerGeneratedAttribute]
public void set_DayTime(long value);
    [CompilerGeneratedAttribute]
public int get_SpawnX();
    [CompilerGeneratedAttribute]
public void set_SpawnX(int value);
    [CompilerGeneratedAttribute]
public int get_SpawnY();
    [CompilerGeneratedAttribute]
public void set_SpawnY(int value);
    [CompilerGeneratedAttribute]
public int get_SpawnZ();
    [CompilerGeneratedAttribute]
public void set_SpawnZ(int value);
    [CompilerGeneratedAttribute]
public bool get_Raining();
    [CompilerGeneratedAttribute]
public void set_Raining(bool value);
    [CompilerGeneratedAttribute]
public int get_RainTime();
    [CompilerGeneratedAttribute]
public void set_RainTime(int value);
    [CompilerGeneratedAttribute]
public bool get_Thundering();
    [CompilerGeneratedAttribute]
public void set_Thundering(bool value);
    [CompilerGeneratedAttribute]
public int get_ThunderTime();
    [CompilerGeneratedAttribute]
public void set_ThunderTime(int value);
    public T GetPropertyValue(NbtTag tag, Expression`1<Func`1<T>> property);
    public void SetPropertyValue(NbtTag tag, Expression`1<Func`1<T>> property, bool upperFirst);
    private static string LowercaseFirst(string s);
    public void LoadFromNbt(NbtTag dataTag);
    public void SaveToNbt(NbtTag dataTag);
    public sealed virtual object Clone();
}
public class MiNET.Worlds.LevelInfoBedrock : object {
    [CompilerGeneratedAttribute]
private string <BiomeOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <CenterMapsToOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ConfirmedPlatformLockedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Difficulty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FlatWorldLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ForceGameType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GameType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InventoryVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <LANBroadcast>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <LANBroadcastIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastPlayed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LevelName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LimitedWorldOriginX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LimitedWorldOriginY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LimitedWorldOriginZ>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MultiplayerGame>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MultiplayerGameIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NetherScale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NetworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PlatformBroadcastIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RandomSeed>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SpawnV1Villagers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpawnX>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpawnY>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpawnZ>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StorageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private int <XBLBroadcastIntent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseGameVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BonusChestEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <BonusChestSpawned>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Commandblockoutput>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Commandblocksenabled>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <CommandsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentTick>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Dodaylightcycle>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Doentitydrops>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Dofiretick>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Doimmediaterespawn>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Doinsomnia>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Domobloot>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Domobspawning>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Dotiledrops>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Doweathercycle>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Drowningdamage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EduOffer>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <EducationFeaturesEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Experimentalgameplay>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Falldamage>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Firedamage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Functioncommandlimit>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <HasBeenLoadedInCreative>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <HasLockedBehaviorPack>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <HasLockedResourcePack>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ImmutableWorld>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <IsFromLockedTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <IsFromWorldTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <IsSingleUseWorld>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <IsWorldTemplateOptionLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Keepinventory>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LightningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LightningTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LimitedWorldDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LimitedWorldWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Maxcommandchainlength>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Mobgriefing>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Naturalregeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prid>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Pvp>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RainLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RainTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Randomtickspeed>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <RequiresCopiedPackRemovalCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Sendcommandfeedback>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ServerChunkTickRange>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Showcoordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Showdeathmessages>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Showtags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SpawnMobs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Spawnradius>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <StartWithMapEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <TexturePacksRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Tntexplodes>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <UseMsaGamertagsOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorldStartCount>k__BackingField;
    public string BiomeOverride { get; public set; }
    public byte CenterMapsToOrigin { get; public set; }
    public byte ConfirmedPlatformLockedContent { get; public set; }
    public int Difficulty { get; public set; }
    public string FlatWorldLayers { get; public set; }
    public byte ForceGameType { get; public set; }
    public int GameType { get; public set; }
    public int Generator { get; public set; }
    public string InventoryVersion { get; public set; }
    public byte LANBroadcast { get; public set; }
    public byte LANBroadcastIntent { get; public set; }
    public long LastPlayed { get; public set; }
    public string LevelName { get; public set; }
    public int LimitedWorldOriginX { get; public set; }
    public int LimitedWorldOriginY { get; public set; }
    public int LimitedWorldOriginZ { get; public set; }
    public byte MultiplayerGame { get; public set; }
    public byte MultiplayerGameIntent { get; public set; }
    public int NetherScale { get; public set; }
    public int NetworkVersion { get; public set; }
    public int Platform { get; public set; }
    public int PlatformBroadcastIntent { get; public set; }
    public long RandomSeed { get; public set; }
    public byte SpawnV1Villagers { get; public set; }
    public int SpawnX { get; public set; }
    public int SpawnY { get; public set; }
    public int SpawnZ { get; public set; }
    public int StorageVersion { get; public set; }
    public long Time { get; public set; }
    public int XBLBroadcastIntent { get; public set; }
    [JsonPropertyNameAttribute("baseGameVersion")]
public string BaseGameVersion { get; public set; }
    [JsonPropertyNameAttribute("bonusChestEnabled")]
public byte BonusChestEnabled { get; public set; }
    [JsonPropertyNameAttribute("bonusChestSpawned")]
public byte BonusChestSpawned { get; public set; }
    [JsonPropertyNameAttribute("commandblockoutput")]
public byte Commandblockoutput { get; public set; }
    [JsonPropertyNameAttribute("commandblocksenabled")]
public byte Commandblocksenabled { get; public set; }
    [JsonPropertyNameAttribute("commandsEnabled")]
public byte CommandsEnabled { get; public set; }
    [JsonPropertyNameAttribute("currentTick")]
public long CurrentTick { get; public set; }
    [JsonPropertyNameAttribute("dodaylightcycle")]
public byte Dodaylightcycle { get; public set; }
    [JsonPropertyNameAttribute("doentitydrops")]
public byte Doentitydrops { get; public set; }
    [JsonPropertyNameAttribute("dofiretick")]
public byte Dofiretick { get; public set; }
    [JsonPropertyNameAttribute("doimmediaterespawn")]
public byte Doimmediaterespawn { get; public set; }
    [JsonPropertyNameAttribute("doinsomnia")]
public byte Doinsomnia { get; public set; }
    [JsonPropertyNameAttribute("domobloot")]
public byte Domobloot { get; public set; }
    [JsonPropertyNameAttribute("domobspawning")]
public byte Domobspawning { get; public set; }
    [JsonPropertyNameAttribute("dotiledrops")]
public byte Dotiledrops { get; public set; }
    [JsonPropertyNameAttribute("doweathercycle")]
public byte Doweathercycle { get; public set; }
    [JsonPropertyNameAttribute("drowningdamage")]
public byte Drowningdamage { get; public set; }
    [JsonPropertyNameAttribute("eduOffer")]
public int EduOffer { get; public set; }
    [JsonPropertyNameAttribute("educationFeaturesEnabled")]
public byte EducationFeaturesEnabled { get; public set; }
    [JsonPropertyNameAttribute("experimentalgameplay")]
public byte Experimentalgameplay { get; public set; }
    [JsonPropertyNameAttribute("falldamage")]
public byte Falldamage { get; public set; }
    [JsonPropertyNameAttribute("firedamage")]
public byte Firedamage { get; public set; }
    [JsonPropertyNameAttribute("functioncommandlimit")]
public int Functioncommandlimit { get; public set; }
    [JsonPropertyNameAttribute("hasBeenLoadedInCreative")]
public byte HasBeenLoadedInCreative { get; public set; }
    [JsonPropertyNameAttribute("hasLockedBehaviorPack")]
public byte HasLockedBehaviorPack { get; public set; }
    [JsonPropertyNameAttribute("hasLockedResourcePack")]
public byte HasLockedResourcePack { get; public set; }
    [JsonPropertyNameAttribute("immutableWorld")]
public byte ImmutableWorld { get; public set; }
    [JsonPropertyNameAttribute("isFromLockedTemplate")]
public byte IsFromLockedTemplate { get; public set; }
    [JsonPropertyNameAttribute("isFromWorldTemplate")]
public byte IsFromWorldTemplate { get; public set; }
    [JsonPropertyNameAttribute("isSingleUseWorld")]
public byte IsSingleUseWorld { get; public set; }
    [JsonPropertyNameAttribute("isWorldTemplateOptionLocked")]
public byte IsWorldTemplateOptionLocked { get; public set; }
    [JsonPropertyNameAttribute("keepinventory")]
public byte Keepinventory { get; public set; }
    [JsonPropertyNameAttribute("lightningLevel")]
public float LightningLevel { get; public set; }
    [JsonPropertyNameAttribute("lightningTime")]
public int LightningTime { get; public set; }
    [JsonPropertyNameAttribute("limitedWorldDepth")]
public int LimitedWorldDepth { get; public set; }
    [JsonPropertyNameAttribute("limitedWorldWidth")]
public int LimitedWorldWidth { get; public set; }
    [JsonPropertyNameAttribute("maxcommandchainlength")]
public int Maxcommandchainlength { get; public set; }
    [JsonPropertyNameAttribute("mobgriefing")]
public byte Mobgriefing { get; public set; }
    [JsonPropertyNameAttribute("naturalregeneration")]
public byte Naturalregeneration { get; public set; }
    [JsonPropertyNameAttribute("prid")]
public string Prid { get; public set; }
    [JsonPropertyNameAttribute("pvp")]
public byte Pvp { get; public set; }
    [JsonPropertyNameAttribute("rainLevel")]
public float RainLevel { get; public set; }
    [JsonPropertyNameAttribute("rainTime")]
public int RainTime { get; public set; }
    [JsonPropertyNameAttribute("randomtickspeed")]
public int Randomtickspeed { get; public set; }
    [JsonPropertyNameAttribute("requiresCopiedPackRemovalCheck")]
public byte RequiresCopiedPackRemovalCheck { get; public set; }
    [JsonPropertyNameAttribute("sendcommandfeedback")]
public byte Sendcommandfeedback { get; public set; }
    [JsonPropertyNameAttribute("serverChunkTickRange")]
public int ServerChunkTickRange { get; public set; }
    [JsonPropertyNameAttribute("showcoordinates")]
public byte Showcoordinates { get; public set; }
    [JsonPropertyNameAttribute("showdeathmessages")]
public byte Showdeathmessages { get; public set; }
    [JsonPropertyNameAttribute("showtags")]
public byte Showtags { get; public set; }
    [JsonPropertyNameAttribute("spawnMobs")]
public byte SpawnMobs { get; public set; }
    [JsonPropertyNameAttribute("spawnradius")]
public int Spawnradius { get; public set; }
    [JsonPropertyNameAttribute("startWithMapEnabled")]
public byte StartWithMapEnabled { get; public set; }
    [JsonPropertyNameAttribute("texturePacksRequired")]
public byte TexturePacksRequired { get; public set; }
    [JsonPropertyNameAttribute("tntexplodes")]
public byte Tntexplodes { get; public set; }
    [JsonPropertyNameAttribute("useMsaGamertagsOnly")]
public byte UseMsaGamertagsOnly { get; public set; }
    [JsonPropertyNameAttribute("worldStartCount")]
public long WorldStartCount { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BiomeOverride();
    [CompilerGeneratedAttribute]
public void set_BiomeOverride(string value);
    [CompilerGeneratedAttribute]
public byte get_CenterMapsToOrigin();
    [CompilerGeneratedAttribute]
public void set_CenterMapsToOrigin(byte value);
    [CompilerGeneratedAttribute]
public byte get_ConfirmedPlatformLockedContent();
    [CompilerGeneratedAttribute]
public void set_ConfirmedPlatformLockedContent(byte value);
    [CompilerGeneratedAttribute]
public int get_Difficulty();
    [CompilerGeneratedAttribute]
public void set_Difficulty(int value);
    [CompilerGeneratedAttribute]
public string get_FlatWorldLayers();
    [CompilerGeneratedAttribute]
public void set_FlatWorldLayers(string value);
    [CompilerGeneratedAttribute]
public byte get_ForceGameType();
    [CompilerGeneratedAttribute]
public void set_ForceGameType(byte value);
    [CompilerGeneratedAttribute]
public int get_GameType();
    [CompilerGeneratedAttribute]
public void set_GameType(int value);
    [CompilerGeneratedAttribute]
public int get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(int value);
    [CompilerGeneratedAttribute]
public string get_InventoryVersion();
    [CompilerGeneratedAttribute]
public void set_InventoryVersion(string value);
    [CompilerGeneratedAttribute]
public byte get_LANBroadcast();
    [CompilerGeneratedAttribute]
public void set_LANBroadcast(byte value);
    [CompilerGeneratedAttribute]
public byte get_LANBroadcastIntent();
    [CompilerGeneratedAttribute]
public void set_LANBroadcastIntent(byte value);
    [CompilerGeneratedAttribute]
public long get_LastPlayed();
    [CompilerGeneratedAttribute]
public void set_LastPlayed(long value);
    [CompilerGeneratedAttribute]
public string get_LevelName();
    [CompilerGeneratedAttribute]
public void set_LevelName(string value);
    [CompilerGeneratedAttribute]
public int get_LimitedWorldOriginX();
    [CompilerGeneratedAttribute]
public void set_LimitedWorldOriginX(int value);
    [CompilerGeneratedAttribute]
public int get_LimitedWorldOriginY();
    [CompilerGeneratedAttribute]
public void set_LimitedWorldOriginY(int value);
    [CompilerGeneratedAttribute]
public int get_LimitedWorldOriginZ();
    [CompilerGeneratedAttribute]
public void set_LimitedWorldOriginZ(int value);
    [CompilerGeneratedAttribute]
public byte get_MultiplayerGame();
    [CompilerGeneratedAttribute]
public void set_MultiplayerGame(byte value);
    [CompilerGeneratedAttribute]
public byte get_MultiplayerGameIntent();
    [CompilerGeneratedAttribute]
public void set_MultiplayerGameIntent(byte value);
    [CompilerGeneratedAttribute]
public int get_NetherScale();
    [CompilerGeneratedAttribute]
public void set_NetherScale(int value);
    [CompilerGeneratedAttribute]
public int get_NetworkVersion();
    [CompilerGeneratedAttribute]
public void set_NetworkVersion(int value);
    [CompilerGeneratedAttribute]
public int get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(int value);
    [CompilerGeneratedAttribute]
public int get_PlatformBroadcastIntent();
    [CompilerGeneratedAttribute]
public void set_PlatformBroadcastIntent(int value);
    [CompilerGeneratedAttribute]
public long get_RandomSeed();
    [CompilerGeneratedAttribute]
public void set_RandomSeed(long value);
    [CompilerGeneratedAttribute]
public byte get_SpawnV1Villagers();
    [CompilerGeneratedAttribute]
public void set_SpawnV1Villagers(byte value);
    [CompilerGeneratedAttribute]
public int get_SpawnX();
    [CompilerGeneratedAttribute]
public void set_SpawnX(int value);
    [CompilerGeneratedAttribute]
public int get_SpawnY();
    [CompilerGeneratedAttribute]
public void set_SpawnY(int value);
    [CompilerGeneratedAttribute]
public int get_SpawnZ();
    [CompilerGeneratedAttribute]
public void set_SpawnZ(int value);
    [CompilerGeneratedAttribute]
public int get_StorageVersion();
    [CompilerGeneratedAttribute]
public void set_StorageVersion(int value);
    [CompilerGeneratedAttribute]
public long get_Time();
    [CompilerGeneratedAttribute]
public void set_Time(long value);
    [CompilerGeneratedAttribute]
public int get_XBLBroadcastIntent();
    [CompilerGeneratedAttribute]
public void set_XBLBroadcastIntent(int value);
    [CompilerGeneratedAttribute]
public string get_BaseGameVersion();
    [CompilerGeneratedAttribute]
public void set_BaseGameVersion(string value);
    [CompilerGeneratedAttribute]
public byte get_BonusChestEnabled();
    [CompilerGeneratedAttribute]
public void set_BonusChestEnabled(byte value);
    [CompilerGeneratedAttribute]
public byte get_BonusChestSpawned();
    [CompilerGeneratedAttribute]
public void set_BonusChestSpawned(byte value);
    [CompilerGeneratedAttribute]
public byte get_Commandblockoutput();
    [CompilerGeneratedAttribute]
public void set_Commandblockoutput(byte value);
    [CompilerGeneratedAttribute]
public byte get_Commandblocksenabled();
    [CompilerGeneratedAttribute]
public void set_Commandblocksenabled(byte value);
    [CompilerGeneratedAttribute]
public byte get_CommandsEnabled();
    [CompilerGeneratedAttribute]
public void set_CommandsEnabled(byte value);
    [CompilerGeneratedAttribute]
public long get_CurrentTick();
    [CompilerGeneratedAttribute]
public void set_CurrentTick(long value);
    [CompilerGeneratedAttribute]
public byte get_Dodaylightcycle();
    [CompilerGeneratedAttribute]
public void set_Dodaylightcycle(byte value);
    [CompilerGeneratedAttribute]
public byte get_Doentitydrops();
    [CompilerGeneratedAttribute]
public void set_Doentitydrops(byte value);
    [CompilerGeneratedAttribute]
public byte get_Dofiretick();
    [CompilerGeneratedAttribute]
public void set_Dofiretick(byte value);
    [CompilerGeneratedAttribute]
public byte get_Doimmediaterespawn();
    [CompilerGeneratedAttribute]
public void set_Doimmediaterespawn(byte value);
    [CompilerGeneratedAttribute]
public byte get_Doinsomnia();
    [CompilerGeneratedAttribute]
public void set_Doinsomnia(byte value);
    [CompilerGeneratedAttribute]
public byte get_Domobloot();
    [CompilerGeneratedAttribute]
public void set_Domobloot(byte value);
    [CompilerGeneratedAttribute]
public byte get_Domobspawning();
    [CompilerGeneratedAttribute]
public void set_Domobspawning(byte value);
    [CompilerGeneratedAttribute]
public byte get_Dotiledrops();
    [CompilerGeneratedAttribute]
public void set_Dotiledrops(byte value);
    [CompilerGeneratedAttribute]
public byte get_Doweathercycle();
    [CompilerGeneratedAttribute]
public void set_Doweathercycle(byte value);
    [CompilerGeneratedAttribute]
public byte get_Drowningdamage();
    [CompilerGeneratedAttribute]
public void set_Drowningdamage(byte value);
    [CompilerGeneratedAttribute]
public int get_EduOffer();
    [CompilerGeneratedAttribute]
public void set_EduOffer(int value);
    [CompilerGeneratedAttribute]
public byte get_EducationFeaturesEnabled();
    [CompilerGeneratedAttribute]
public void set_EducationFeaturesEnabled(byte value);
    [CompilerGeneratedAttribute]
public byte get_Experimentalgameplay();
    [CompilerGeneratedAttribute]
public void set_Experimentalgameplay(byte value);
    [CompilerGeneratedAttribute]
public byte get_Falldamage();
    [CompilerGeneratedAttribute]
public void set_Falldamage(byte value);
    [CompilerGeneratedAttribute]
public byte get_Firedamage();
    [CompilerGeneratedAttribute]
public void set_Firedamage(byte value);
    [CompilerGeneratedAttribute]
public int get_Functioncommandlimit();
    [CompilerGeneratedAttribute]
public void set_Functioncommandlimit(int value);
    [CompilerGeneratedAttribute]
public byte get_HasBeenLoadedInCreative();
    [CompilerGeneratedAttribute]
public void set_HasBeenLoadedInCreative(byte value);
    [CompilerGeneratedAttribute]
public byte get_HasLockedBehaviorPack();
    [CompilerGeneratedAttribute]
public void set_HasLockedBehaviorPack(byte value);
    [CompilerGeneratedAttribute]
public byte get_HasLockedResourcePack();
    [CompilerGeneratedAttribute]
public void set_HasLockedResourcePack(byte value);
    [CompilerGeneratedAttribute]
public byte get_ImmutableWorld();
    [CompilerGeneratedAttribute]
public void set_ImmutableWorld(byte value);
    [CompilerGeneratedAttribute]
public byte get_IsFromLockedTemplate();
    [CompilerGeneratedAttribute]
public void set_IsFromLockedTemplate(byte value);
    [CompilerGeneratedAttribute]
public byte get_IsFromWorldTemplate();
    [CompilerGeneratedAttribute]
public void set_IsFromWorldTemplate(byte value);
    [CompilerGeneratedAttribute]
public byte get_IsSingleUseWorld();
    [CompilerGeneratedAttribute]
public void set_IsSingleUseWorld(byte value);
    [CompilerGeneratedAttribute]
public byte get_IsWorldTemplateOptionLocked();
    [CompilerGeneratedAttribute]
public void set_IsWorldTemplateOptionLocked(byte value);
    [CompilerGeneratedAttribute]
public byte get_Keepinventory();
    [CompilerGeneratedAttribute]
public void set_Keepinventory(byte value);
    [CompilerGeneratedAttribute]
public float get_LightningLevel();
    [CompilerGeneratedAttribute]
public void set_LightningLevel(float value);
    [CompilerGeneratedAttribute]
public int get_LightningTime();
    [CompilerGeneratedAttribute]
public void set_LightningTime(int value);
    [CompilerGeneratedAttribute]
public int get_LimitedWorldDepth();
    [CompilerGeneratedAttribute]
public void set_LimitedWorldDepth(int value);
    [CompilerGeneratedAttribute]
public int get_LimitedWorldWidth();
    [CompilerGeneratedAttribute]
public void set_LimitedWorldWidth(int value);
    [CompilerGeneratedAttribute]
public int get_Maxcommandchainlength();
    [CompilerGeneratedAttribute]
public void set_Maxcommandchainlength(int value);
    [CompilerGeneratedAttribute]
public byte get_Mobgriefing();
    [CompilerGeneratedAttribute]
public void set_Mobgriefing(byte value);
    [CompilerGeneratedAttribute]
public byte get_Naturalregeneration();
    [CompilerGeneratedAttribute]
public void set_Naturalregeneration(byte value);
    [CompilerGeneratedAttribute]
public string get_Prid();
    [CompilerGeneratedAttribute]
public void set_Prid(string value);
    [CompilerGeneratedAttribute]
public byte get_Pvp();
    [CompilerGeneratedAttribute]
public void set_Pvp(byte value);
    [CompilerGeneratedAttribute]
public float get_RainLevel();
    [CompilerGeneratedAttribute]
public void set_RainLevel(float value);
    [CompilerGeneratedAttribute]
public int get_RainTime();
    [CompilerGeneratedAttribute]
public void set_RainTime(int value);
    [CompilerGeneratedAttribute]
public int get_Randomtickspeed();
    [CompilerGeneratedAttribute]
public void set_Randomtickspeed(int value);
    [CompilerGeneratedAttribute]
public byte get_RequiresCopiedPackRemovalCheck();
    [CompilerGeneratedAttribute]
public void set_RequiresCopiedPackRemovalCheck(byte value);
    [CompilerGeneratedAttribute]
public byte get_Sendcommandfeedback();
    [CompilerGeneratedAttribute]
public void set_Sendcommandfeedback(byte value);
    [CompilerGeneratedAttribute]
public int get_ServerChunkTickRange();
    [CompilerGeneratedAttribute]
public void set_ServerChunkTickRange(int value);
    [CompilerGeneratedAttribute]
public byte get_Showcoordinates();
    [CompilerGeneratedAttribute]
public void set_Showcoordinates(byte value);
    [CompilerGeneratedAttribute]
public byte get_Showdeathmessages();
    [CompilerGeneratedAttribute]
public void set_Showdeathmessages(byte value);
    [CompilerGeneratedAttribute]
public byte get_Showtags();
    [CompilerGeneratedAttribute]
public void set_Showtags(byte value);
    [CompilerGeneratedAttribute]
public byte get_SpawnMobs();
    [CompilerGeneratedAttribute]
public void set_SpawnMobs(byte value);
    [CompilerGeneratedAttribute]
public int get_Spawnradius();
    [CompilerGeneratedAttribute]
public void set_Spawnradius(int value);
    [CompilerGeneratedAttribute]
public byte get_StartWithMapEnabled();
    [CompilerGeneratedAttribute]
public void set_StartWithMapEnabled(byte value);
    [CompilerGeneratedAttribute]
public byte get_TexturePacksRequired();
    [CompilerGeneratedAttribute]
public void set_TexturePacksRequired(byte value);
    [CompilerGeneratedAttribute]
public byte get_Tntexplodes();
    [CompilerGeneratedAttribute]
public void set_Tntexplodes(byte value);
    [CompilerGeneratedAttribute]
public byte get_UseMsaGamertagsOnly();
    [CompilerGeneratedAttribute]
public void set_UseMsaGamertagsOnly(byte value);
    [CompilerGeneratedAttribute]
public long get_WorldStartCount();
    [CompilerGeneratedAttribute]
public void set_WorldStartCount(long value);
    public static LevelInfoBedrock FromNbt(NbtTag tag);
    public sealed virtual object Clone();
}
public class MiNET.Worlds.Mapper : Tuple`2<int, Func`3<int, byte, byte>> {
    public Mapper(int blockId, Func`3<int, byte, byte> dataMapper);
}
internal enum MiNET.Worlds.Material : Enum {
    public byte value__;
    public static Material Air;
    public static Material Stone;
    public static Material Grass;
    public static Material Dirt;
    public static Material Bedrock;
    public static Material Gold;
}
[ExtensionAttribute]
public static class MiNET.Worlds.NbtSerializationHelper : object {
    [ExtensionAttribute]
public static T Deserialize(NbtTag tag);
    private static string LowercaseFirst(string s);
    [ExtensionAttribute]
public static NbtTag Serialize(T obj, NbtTag tag);
}
public class MiNET.Worlds.NoDataMapper : Mapper {
    public NoDataMapper(int blockId);
}
internal class MiNET.Worlds.SimplexOctaveGenerator : object {
    private long _seed;
    private int _octaves;
    private SimplexPerlin[] _generators;
    [CompilerGeneratedAttribute]
private double <XScale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <YScale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ZScale>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WScale>k__BackingField;
    public double XScale { get; public set; }
    public double YScale { get; public set; }
    public double ZScale { get; public set; }
    public double WScale { get; public set; }
    public SimplexOctaveGenerator(int seed, int octaves);
    public double Noise(double x, double y, double frequency, double amplitude);
    public double Noise(double x, double y, double z, double frequency, double amplitude);
    public double Noise(double x, double y, double z, double w, double frequency, double amplitude);
    public double Noise(double x, double y, double z, double w, double frequency, double amplitude, bool normalized);
    [CompilerGeneratedAttribute]
public double get_XScale();
    [CompilerGeneratedAttribute]
public void set_XScale(double value);
    [CompilerGeneratedAttribute]
public double get_YScale();
    [CompilerGeneratedAttribute]
public void set_YScale(double value);
    [CompilerGeneratedAttribute]
public double get_ZScale();
    [CompilerGeneratedAttribute]
public void set_ZScale(double value);
    [CompilerGeneratedAttribute]
public double get_WScale();
    [CompilerGeneratedAttribute]
public void set_WScale(double value);
    public void SetScale(double scale);
}
public class MiNET.Worlds.SkyLightBlockAccess : object {
    private IWorldProvider _worldProvider;
    private int _heightForUnloadedChunk;
    private ChunkCoordinates _coord;
    private ChunkColumn _chunk;
    public SkyLightBlockAccess(IWorldProvider worldProvider, int heightForUnloadedChunk);
    public SkyLightBlockAccess(IWorldProvider worldProvider, ChunkColumn chunk);
    public sealed virtual ChunkColumn GetChunk(BlockCoordinates coordinates, bool cacheOnly);
    public sealed virtual ChunkColumn GetChunk(ChunkCoordinates coordinates, bool cacheOnly);
    public sealed virtual void SetSkyLight(BlockCoordinates coordinates, byte skyLight);
    public sealed virtual int GetHeight(BlockCoordinates coordinates);
    public sealed virtual Block GetBlock(BlockCoordinates coord, ChunkColumn tryChunk);
    public void SetBlock(int x, int y, int z, int blockId, int metadata, bool broadcast, bool applyPhysics, bool calculateLight);
    public sealed virtual void SetBlock(Block block, bool broadcast, bool applyPhysics, bool calculateLight, ChunkColumn possibleChunk);
}
public class MiNET.Worlds.SkyLightCalculations : object {
    private static FontCollection _fontCollection;
    private static Font _font;
    private static ILog Log;
    [CompilerGeneratedAttribute]
private bool <TrackResults>k__BackingField;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<BlockCoordinates, int> <Visits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartTimeInMilliseconds>k__BackingField;
    private ConcurrentDictionary`2<ChunkColumn, bool> _visitedColumns;
    public long visits;
    private object _imageSync;
    private static int _chunkCount;
    [CompilerGeneratedAttribute]
private List`1<Task`1<Image>> <RenderingTasks>k__BackingField;
    public bool TrackResults { get; }
    public ConcurrentDictionary`2<BlockCoordinates, int> Visits { get; }
    public long StartTimeInMilliseconds { get; public set; }
    public List`1<Task`1<Image>> RenderingTasks { get; }
    private static SkyLightCalculations();
    public SkyLightCalculations(bool trackResults);
    [CompilerGeneratedAttribute]
public bool get_TrackResults();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<BlockCoordinates, int> get_Visits();
    [CompilerGeneratedAttribute]
public long get_StartTimeInMilliseconds();
    [CompilerGeneratedAttribute]
public void set_StartTimeInMilliseconds(long value);
    public static void Calculate(Level level);
    public int CalculateSkyLights(IBlockAccess level, ChunkColumn[] chunks);
    public bool RecalcSkyLight(ChunkColumn chunk, IBlockAccess level);
    public void Calculate(Level level, BlockCoordinates coordinates);
    public void ResetLight(Level level, Queue`1<BlockCoordinates> resetQueue, Queue`1<BlockCoordinates> sourceQueue, BlockCoordinates coordinates);
    private void TestForSource(Level level, Queue`1<BlockCoordinates> resetQueue, Queue`1<BlockCoordinates> sourceQueue, BlockCoordinates coordinates, int currentLight, bool down);
    public void Calculate(IBlockAccess level, Queue`1<BlockCoordinates> lightBfQueue, HashSet`1<BlockCoordinates> lightBfSet);
    private void ProcessNode(IBlockAccess level, ChunkColumn chunk, BlockCoordinates coordinates, Queue`1<BlockCoordinates> lightBfsQueue, HashSet`1<BlockCoordinates> lightBfSet);
    private byte SetLightLevel(IBlockAccess level, ChunkColumn chunk, SubChunk subChunk, int sectionIdx, Queue`1<BlockCoordinates> lightBfsQueue, HashSet`1<BlockCoordinates> lightBfSet, BlockCoordinates coordinates, byte lightLevel, bool down, bool up);
    public static void SetSkyLight(BlockCoordinates coordinates, byte skyLight, ChunkColumn chunk);
    public static bool IsNotBlockingSkylight(BlockCoordinates blockCoordinates, ChunkColumn chunk);
    public static int GetDiffuseLevel(BlockCoordinates blockCoordinates, SubChunk section);
    public static bool IsTransparent(BlockCoordinates blockCoordinates, SubChunk section);
    public static byte GetSkyLight(BlockCoordinates blockCoordinates, SubChunk chunk);
    public static byte GetSkyLight(BlockCoordinates blockCoordinates, ChunkColumn chunk);
    public static int GetHeight(BlockCoordinates blockCoordinates, ChunkColumn chunk);
    private void MakeVisit(BlockCoordinates inc);
    public static void CheckIfSpawnIsMiddle(IOrderedEnumerable`1<ChunkColumn> chunks, Vector3 spawnPoint);
    [CompilerGeneratedAttribute]
public List`1<Task`1<Image>> get_RenderingTasks();
    public void SnapshotVisits();
    private int GetMidX(ChunkColumn[] chunks);
    private int GetWidth(ChunkColumn[] chunks);
    private int GetWidth();
    private int GetHeight();
    private void RenderVideo();
    public static Byte[] ToByteArray(Image image, IImageFormat imageFormat);
    private static Color CreateHeatColor(double value, double max);
    private static bool IsOnChunkBorder(int x, int z);
    private static int GetHigestSurrounding(int x, int z, ChunkColumn chunk, IBlockAccess level);
    public void ShowHeights(ChunkColumn chunk);
}
public class MiNET.Worlds.SubChunk : object {
    private static ILog Log;
    private bool _isAllAir;
    private List`1<int> _runtimeIds;
    private Int16[] _blocks;
    private List`1<int> _loggedRuntimeIds;
    private Byte[] _loggedBlocks;
    public NibbleArray _blocklight;
    public NibbleArray _skylight;
    [CompilerGeneratedAttribute]
private bool <IsDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCache>k__BackingField;
    private Byte[] _cache;
    private static ChunkPool`1<SubChunk> Pool;
    internal List`1<int> RuntimeIds { get; }
    internal Int16[] Blocks { get; }
    internal List`1<int> LoggedRuntimeIds { get; }
    internal Byte[] LoggedBlocks { get; }
    public bool IsDirty { get; private set; }
    public ulong Hash { get; public set; }
    public bool DisableCache { get; public set; }
    public SubChunk(bool clearBuffers);
    private static SubChunk();
    internal List`1<int> get_RuntimeIds();
    internal Int16[] get_Blocks();
    internal List`1<int> get_LoggedRuntimeIds();
    internal Byte[] get_LoggedBlocks();
    [CompilerGeneratedAttribute]
public bool get_IsDirty();
    [CompilerGeneratedAttribute]
private void set_IsDirty(bool value);
    [CompilerGeneratedAttribute]
public ulong get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(ulong value);
    [CompilerGeneratedAttribute]
public bool get_DisableCache();
    [CompilerGeneratedAttribute]
public void set_DisableCache(bool value);
    public void ClearBuffers();
    public bool IsAllAir();
    public static bool AllZeroFast(T[] data);
    private static int GetIndex(int bx, int by, int bz);
    public int GetBlockId(int bx, int by, int bz);
    public Block GetBlockObject(int bx, int by, int bz);
    public void SetBlock(int bx, int by, int bz, Block block);
    public void SetBlockByRuntimeId(int bx, int by, int bz, int runtimeId);
    public void SetBlockIndex(int bx, int by, int bz, short paletteIndex);
    public void SetLoggedBlock(int bx, int by, int bz, Block block);
    public void SetLoggedBlockByRuntimeId(int bx, int by, int bz, int runtimeId);
    public void SetLoggedBlockIndex(int bx, int by, int bz, byte paletteIndex);
    public byte GetBlocklight(int bx, int by, int bz);
    public void SetBlocklight(int bx, int by, int bz, byte data);
    public byte GetSkylight(int bx, int by, int bz);
    public void SetSkylight(int bx, int by, int bz, byte data);
    public void Write(MemoryStream stream);
    public static bool WriteStore(MemoryStream stream, Int16[] blocks, Byte[] loggedBlocks, bool forceWrite, List`1<int> palette);
    public sealed virtual object Clone();
    public static SubChunk CreateObject();
    public void PutPool();
    public void REMOVEReset();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class MiNET.Worlds.SuperflatGenerator : object {
    [CompilerGeneratedAttribute]
private string <Seed>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Block> <BlockLayers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dimension <Dimension>k__BackingField;
    public string Seed { get; public set; }
    public List`1<Block> BlockLayers { get; public set; }
    public Dimension Dimension { get; public set; }
    public SuperflatGenerator(Dimension dimension);
    [CompilerGeneratedAttribute]
public string get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(string value);
    [CompilerGeneratedAttribute]
public List`1<Block> get_BlockLayers();
    [CompilerGeneratedAttribute]
public void set_BlockLayers(List`1<Block> value);
    [CompilerGeneratedAttribute]
public Dimension get_Dimension();
    [CompilerGeneratedAttribute]
public void set_Dimension(Dimension value);
    public sealed virtual void Initialize(IWorldProvider worldProvider);
    public sealed virtual ChunkColumn GenerateChunkColumn(ChunkCoordinates chunkCoordinates);
    private void GenerateGlowStone(Random random, ChunkColumn chunk);
    private void GenerateLake(Random random, ChunkColumn chunk, Block block);
    private int FindGroundLevel();
    public void PopulateChunk(ChunkColumn chunk);
    public static List`1<Block> ParseSeed(string inputSeed);
}
internal enum MiNET.Worlds.WoodType : Enum {
    public byte value__;
    public static WoodType Oak;
    public static WoodType Spruce;
    public static WoodType Birch;
    public static WoodType Jungle;
}
public class SicStream.SicStreamCipher : object {
    private SicBlockCipher parent;
    private int blockSize;
    private Byte[] zeroBlock;
    private Byte[] blockBuffer;
    private int processed;
    public string AlgorithmName { get; }
    public SicStreamCipher(SicBlockCipher parent);
    public sealed virtual string get_AlgorithmName();
    public sealed virtual void Init(bool forEncryption, ICipherParameters parameters);
    public sealed virtual void ProcessBytes(Byte[] input, int inOff, int length, Byte[] output, int outOff);
    public sealed virtual void Reset();
    public sealed virtual byte ReturnByte(byte input);
}
public class SicStream.StreamingSicBlockCipher : BufferedCipherBase {
    private SicStreamCipher parent;
    private int blockSize;
    public string AlgorithmName { get; }
    public StreamingSicBlockCipher(SicBlockCipher parent);
    public virtual string get_AlgorithmName();
    public virtual Byte[] DoFinal();
    public virtual Byte[] DoFinal(Byte[] input, int inOff, int length);
    public virtual int GetBlockSize();
    public virtual int GetOutputSize(int inputLen);
    public virtual int GetUpdateOutputSize(int inputLen);
    public virtual void Init(bool forEncryption, ICipherParameters parameters);
    public virtual Byte[] ProcessByte(byte input);
    public virtual Byte[] ProcessBytes(Byte[] input, int inOff, int length);
    public virtual void Reset();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
