[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class MiniExcelLibs.Attributes.DynamicExcelColumn : ExcelColumnAttribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; public set; }
    public DynamicExcelColumn(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
}
public class MiniExcelLibs.Attributes.DynamicExcelSheet : ExcelSheetAttribute {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Key { get; public set; }
    public DynamicExcelSheet(string key);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
}
[AttributeUsageAttribute("384")]
public class MiniExcelLibs.Attributes.ExcelColumnAttribute : Attribute {
    private int _index;
    private string _xName;
    [CompilerGeneratedAttribute]
private int <FormatId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    internal int FormatId { get; internal set; }
    public string Name { get; public set; }
    public String[] Aliases { get; public set; }
    public double Width { get; public set; }
    public string Format { get; public set; }
    public bool Ignore { get; public set; }
    public int Index { get; public set; }
    public string IndexName { get; public set; }
    [CompilerGeneratedAttribute]
internal int get_FormatId();
    [CompilerGeneratedAttribute]
internal void set_FormatId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
    public int get_Index();
    public void set_Index(int value);
    public string get_IndexName();
    public void set_IndexName(string value);
    private void Init(int index, string columnName);
}
[AttributeUsageAttribute("384")]
public class MiniExcelLibs.Attributes.ExcelColumnIndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <ExcelColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcelXName>k__BackingField;
    public int ExcelColumnIndex { get; public set; }
    internal string ExcelXName { get; internal set; }
    public ExcelColumnIndexAttribute(string columnName);
    public ExcelColumnIndexAttribute(int columnIndex);
    [CompilerGeneratedAttribute]
public int get_ExcelColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ExcelColumnIndex(int value);
    [CompilerGeneratedAttribute]
internal string get_ExcelXName();
    [CompilerGeneratedAttribute]
internal void set_ExcelXName(string value);
    private void Init(int columnIndex, string columnName);
}
[AttributeUsageAttribute("384")]
public class MiniExcelLibs.Attributes.ExcelColumnNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ExcelColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Aliases>k__BackingField;
    public string ExcelColumnName { get; public set; }
    public String[] Aliases { get; public set; }
    public ExcelColumnNameAttribute(string excelColumnName, String[] aliases);
    [CompilerGeneratedAttribute]
public string get_ExcelColumnName();
    [CompilerGeneratedAttribute]
public void set_ExcelColumnName(string value);
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
}
[AttributeUsageAttribute("384")]
public class MiniExcelLibs.Attributes.ExcelColumnWidthAttribute : Attribute {
    [CompilerGeneratedAttribute]
private double <ExcelColumnWidth>k__BackingField;
    public double ExcelColumnWidth { get; public set; }
    public ExcelColumnWidthAttribute(double excelColumnWidth);
    [CompilerGeneratedAttribute]
public double get_ExcelColumnWidth();
    [CompilerGeneratedAttribute]
public void set_ExcelColumnWidth(double value);
}
[AttributeUsageAttribute("384")]
public class MiniExcelLibs.Attributes.ExcelFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; public set; }
    public ExcelFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
}
[AttributeUsageAttribute("384")]
public class MiniExcelLibs.Attributes.ExcelIgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ExcelIgnore>k__BackingField;
    public bool ExcelIgnore { get; public set; }
    public ExcelIgnoreAttribute(bool excelIgnore);
    [CompilerGeneratedAttribute]
public bool get_ExcelIgnore();
    [CompilerGeneratedAttribute]
public void set_ExcelIgnore(bool value);
}
[AttributeUsageAttribute("4")]
public class MiniExcelLibs.Attributes.ExcelSheetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SheetState <State>k__BackingField;
    public string Name { get; public set; }
    public SheetState State { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SheetState get_State();
    [CompilerGeneratedAttribute]
public void set_State(SheetState value);
}
public abstract class MiniExcelLibs.Configuration : object {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicExcelColumn[] <DynamicColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FastMode>k__BackingField;
    public CultureInfo Culture { get; public set; }
    public DynamicExcelColumn[] DynamicColumns { get; public set; }
    public int BufferSize { get; public set; }
    public bool FastMode { get; public set; }
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public DynamicExcelColumn[] get_DynamicColumns();
    [CompilerGeneratedAttribute]
public void set_DynamicColumns(DynamicExcelColumn[] value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public bool get_FastMode();
    [CompilerGeneratedAttribute]
public void set_FastMode(bool value);
}
public class MiniExcelLibs.Csv.CsvConfiguration : Configuration {
    private static Encoding _defaultEncoding;
    [CompilerGeneratedAttribute]
private char <Seperator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadLineBreaksWithinQuotes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadEmptyStringAsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysQuote>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, String[]> <SplitFn>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Stream, StreamReader> <StreamReaderFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Stream, StreamWriter> <StreamWriterFunc>k__BackingField;
    internal static CsvConfiguration DefaultConfiguration;
    public char Seperator { get; public set; }
    public string NewLine { get; public set; }
    public bool ReadLineBreaksWithinQuotes { get; public set; }
    public bool ReadEmptyStringAsNull { get; public set; }
    public bool AlwaysQuote { get; public set; }
    public Func`2<string, String[]> SplitFn { get; public set; }
    public Func`2<Stream, StreamReader> StreamReaderFunc { get; public set; }
    public Func`2<Stream, StreamWriter> StreamWriterFunc { get; public set; }
    private static CsvConfiguration();
    [CompilerGeneratedAttribute]
public char get_Seperator();
    [CompilerGeneratedAttribute]
public void set_Seperator(char value);
    [CompilerGeneratedAttribute]
public string get_NewLine();
    [CompilerGeneratedAttribute]
public void set_NewLine(string value);
    [CompilerGeneratedAttribute]
public bool get_ReadLineBreaksWithinQuotes();
    [CompilerGeneratedAttribute]
public void set_ReadLineBreaksWithinQuotes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadEmptyStringAsNull();
    [CompilerGeneratedAttribute]
public void set_ReadEmptyStringAsNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysQuote();
    [CompilerGeneratedAttribute]
public void set_AlwaysQuote(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, String[]> get_SplitFn();
    [CompilerGeneratedAttribute]
public void set_SplitFn(Func`2<string, String[]> value);
    [CompilerGeneratedAttribute]
public Func`2<Stream, StreamReader> get_StreamReaderFunc();
    [CompilerGeneratedAttribute]
public void set_StreamReaderFunc(Func`2<Stream, StreamReader> value);
    [CompilerGeneratedAttribute]
public Func`2<Stream, StreamWriter> get_StreamWriterFunc();
    [CompilerGeneratedAttribute]
public void set_StreamWriterFunc(Func`2<Stream, StreamWriter> value);
}
internal static class MiniExcelLibs.Csv.CsvHelpers : object {
    public static string ConvertToCsvValue(string value, bool alwaysQuote, char separator);
}
internal class MiniExcelLibs.Csv.CsvReader : object {
    private Stream _stream;
    private CsvConfiguration _config;
    public CsvReader(Stream stream, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.Csv.CsvReader/<Query>d__3")]
public sealed virtual IEnumerable`1<IDictionary`2<string, object>> Query(bool useHeaderRow, string sheetName, string startCell);
    public sealed virtual IEnumerable`1<T> Query(string sheetName, string startCell);
    private String[] Split(string row);
    public sealed virtual Task`1<IEnumerable`1<IDictionary`2<string, object>>> QueryAsync(bool UseHeaderRow, string sheetName, string startCell, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<T>> QueryAsync(string sheetName, string startCell, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [IteratorStateMachineAttribute("MiniExcelLibs.Csv.CsvReader/<QueryRange>d__9")]
public sealed virtual IEnumerable`1<IDictionary`2<string, object>> QueryRange(bool useHeaderRow, string sheetName, string startCell, string endCell);
    public sealed virtual IEnumerable`1<T> QueryRange(string sheetName, string startCell, string endCel);
    public sealed virtual Task`1<IEnumerable`1<IDictionary`2<string, object>>> QueryAsyncRange(bool UseHeaderRow, string sheetName, string startCell, string endCel, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<T>> QueryAsyncRange(string sheetName, string startCell, string endCel, CancellationToken cancellationToken);
}
internal class MiniExcelLibs.Csv.CsvWriter : object {
    private Stream _stream;
    private CsvConfiguration _configuration;
    private bool _printHeader;
    private object _value;
    private StreamWriter _writer;
    private bool disposedValue;
    public CsvWriter(Stream stream, object value, IConfiguration configuration, bool printHeader);
    public sealed virtual void SaveAs();
    private void GenerateSheetByIEnumerable(IEnumerable values, string seperator, string newLine, StreamWriter writer);
    public sealed virtual void Insert();
    [AsyncStateMachineAttribute("MiniExcelLibs.Csv.CsvWriter/<SaveAsAsync>d__10")]
public sealed virtual Task SaveAsAsync(CancellationToken cancellationToken);
    private void GenerateSheetByIDataReader(object value, string seperator, string newLine, StreamWriter writer);
    private void GenerateSheetByDataTable(StreamWriter writer, DataTable dt, string seperator, string newLine);
    private void GenerateSheetByProperties(StreamWriter writer, IEnumerator value, List`1<ExcelColumnInfo> props, string seperator, string newLine);
    private void GenerateSheetByIDictionary(StreamWriter writer, IEnumerator value, List`1<object> keys, string seperator, string newLine);
    private void GenerateSheetByDapperRow(StreamWriter writer, IEnumerator value, List`1<string> keys, string seperator, string newLine);
    public string ToCsvString(object value, ExcelColumnInfo p);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private string <GenerateSheetByIEnumerable>b__8_0(ExcelColumnInfo s);
    [CompilerGeneratedAttribute]
private void <SaveAsAsync>b__10_0();
    [CompilerGeneratedAttribute]
private string <GenerateSheetByDataTable>b__12_0(DataColumn s);
}
internal class MiniExcelLibs.ExcelReaderFactory : object {
    internal static IExcelReader GetProvider(Stream stream, ExcelType excelType, IConfiguration configuration);
}
internal class MiniExcelLibs.ExcelTemplateFactory : object {
    internal static IExcelTemplateAsync GetProvider(Stream stream, IConfiguration configuration, ExcelType excelType);
}
public enum MiniExcelLibs.ExcelType : Enum {
    public int value__;
    public static ExcelType XLSX;
    public static ExcelType CSV;
    public static ExcelType UNKNOWN;
}
internal class MiniExcelLibs.ExcelWriterFactory : object {
    internal static IExcelWriter GetProvider(Stream stream, object value, string sheetName, ExcelType excelType, IConfiguration configuration, bool printHeader);
}
public class MiniExcelLibs.Exceptions.ExcelColumnNotFoundException : KeyNotFoundException {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ColumnAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, int> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RowValues>k__BackingField;
    public string ColumnName { get; public set; }
    public String[] ColumnAliases { get; }
    public string ColumnIndex { get; public set; }
    public int RowIndex { get; public set; }
    public IDictionary`2<string, int> Headers { get; }
    public object RowValues { get; public set; }
    public ExcelColumnNotFoundException(string columnIndex, string columnName, String[] columnAliases, int rowIndex, IDictionary`2<string, int> headers, object value, string message);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ColumnAliases();
    [CompilerGeneratedAttribute]
public string get_ColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ColumnIndex(string value);
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, int> get_Headers();
    [CompilerGeneratedAttribute]
public object get_RowValues();
    [CompilerGeneratedAttribute]
public void set_RowValues(object value);
}
public class MiniExcelLibs.Exceptions.ExcelInvalidCastException : InvalidCastException {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <InvalidCastType>k__BackingField;
    public string ColumnName { get; public set; }
    public int Row { get; public set; }
    public object Value { get; public set; }
    public Type InvalidCastType { get; public set; }
    public ExcelInvalidCastException(string columnName, int row, object value, Type invalidCastType, string message);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public int get_Row();
    [CompilerGeneratedAttribute]
public void set_Row(int value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public Type get_InvalidCastType();
    [CompilerGeneratedAttribute]
public void set_InvalidCastType(Type value);
}
public interface MiniExcelLibs.IConfiguration {
}
internal interface MiniExcelLibs.IExcelReader {
    public abstract virtual IEnumerable`1<IDictionary`2<string, object>> Query(bool UseHeaderRow, string sheetName, string startCell);
    public abstract virtual IEnumerable`1<T> Query(string sheetName, string startCell);
    public abstract virtual Task`1<IEnumerable`1<IDictionary`2<string, object>>> QueryAsync(bool UseHeaderRow, string sheetName, string startCell, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<T>> QueryAsync(string sheetName, string startCell, CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<IDictionary`2<string, object>> QueryRange(bool UseHeaderRow, string sheetName, string startCell, string endCell);
    public abstract virtual IEnumerable`1<T> QueryRange(string sheetName, string startCell, string endCell);
    public abstract virtual Task`1<IEnumerable`1<IDictionary`2<string, object>>> QueryAsyncRange(bool UseHeaderRow, string sheetName, string startCell, string endCell, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<T>> QueryAsyncRange(string sheetName, string startCell, string endCell, CancellationToken cancellationToken);
}
internal interface MiniExcelLibs.IExcelTemplate {
    public abstract virtual void SaveAsByTemplate(string templatePath, object value);
    public abstract virtual void SaveAsByTemplate(Byte[] templateBtyes, object value);
    public abstract virtual void MergeSameCells(string path);
    public abstract virtual void MergeSameCells(Byte[] fileInBytes);
}
internal interface MiniExcelLibs.IExcelTemplateAsync {
    public abstract virtual Task SaveAsByTemplateAsync(string templatePath, object value, CancellationToken cancellationToken);
    public abstract virtual Task SaveAsByTemplateAsync(Byte[] templateBtyes, object value, CancellationToken cancellationToken);
    public abstract virtual Task MergeSameCellsAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task MergeSameCellsAsync(Byte[] fileInBytes, CancellationToken cancellationToken);
}
internal interface MiniExcelLibs.IExcelWriter {
    public abstract virtual void SaveAs();
    public abstract virtual Task SaveAsAsync(CancellationToken cancellationToken);
    public abstract virtual void Insert();
}
public abstract class MiniExcelLibs.Member : object {
}
public class MiniExcelLibs.MemberGetter : object {
    private Func`2<object, object> m_getFunc;
    public MemberGetter(PropertyInfo property);
    public MemberGetter(FieldInfo fieldInfo);
    public object Invoke(object instance);
    private static Func`2<object, object> CreateGetterDelegate(PropertyInfo property);
    private static Func`2<object, object> CreateGetterDelegate(FieldInfo fieldInfo);
}
public class MiniExcelLibs.MemberSetter : object {
    private Action`2<object, object> setFunc;
    public MemberSetter(PropertyInfo property);
    public void Invoke(object instance, object value);
    private static Action`2<object, object> CreateSetterDelegate(PropertyInfo property);
}
[ExtensionAttribute]
public static class MiniExcelLibs.MiniExcel : object {
    public static string LISENCE_CODE;
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<SaveAsAsync>d__0")]
public static Task SaveAsAsync(string path, object value, bool printHeader, string sheetName, ExcelType excelType, IConfiguration configuration, bool overwriteFile, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<SaveAsAsync>d__1")]
[ExtensionAttribute]
public static Task SaveAsAsync(Stream stream, object value, bool printHeader, string sheetName, ExcelType excelType, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<MergeSameCellsAsync>d__2")]
public static Task MergeSameCellsAsync(string mergedFilePath, string path, ExcelType excelType, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<MergeSameCellsAsync>d__3")]
[ExtensionAttribute]
public static Task MergeSameCellsAsync(Stream stream, string path, ExcelType excelType, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<MergeSameCellsAsync>d__4")]
[ExtensionAttribute]
public static Task MergeSameCellsAsync(Stream stream, Byte[] fileBytes, ExcelType excelType, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryAsync>d__5")]
public static Task`1<IEnumerable`1<object>> QueryAsync(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryAsync>d__6`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> QueryAsync(Stream stream, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryAsync>d__7`1")]
public static Task`1<IEnumerable`1<T>> QueryAsync(string path, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryAsync>d__8")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<object>> QueryAsync(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<SaveAsByTemplateAsync>d__9")]
[ExtensionAttribute]
public static Task SaveAsByTemplateAsync(Stream stream, string templatePath, object value, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<SaveAsByTemplateAsync>d__10")]
[ExtensionAttribute]
public static Task SaveAsByTemplateAsync(Stream stream, Byte[] templateBytes, object value, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<SaveAsByTemplateAsync>d__11")]
public static Task SaveAsByTemplateAsync(string path, string templatePath, object value, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<SaveAsByTemplateAsync>d__12")]
public static Task SaveAsByTemplateAsync(string path, Byte[] templateBytes, object value, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryAsDataTableAsync>d__13")]
[ObsoleteAttribute("QueryAsDataTable is not recommended, because it'll load all data into memory.")]
public static Task`1<DataTable> QueryAsDataTableAsync(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryAsDataTableAsync>d__14")]
[ExtensionAttribute]
[ObsoleteAttribute("QueryAsDataTable is not recommended, because it'll load all data into memory.")]
public static Task`1<DataTable> QueryAsDataTableAsync(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration, CancellationToken cancellationToken);
    public static MiniExcelDataReader GetReader(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [ExtensionAttribute]
public static MiniExcelDataReader GetReader(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    public static void Insert(string path, object value, string sheetName, ExcelType excelType, IConfiguration configuration);
    [ExtensionAttribute]
public static void Insert(Stream stream, object value, string sheetName, ExcelType excelType, IConfiguration configuration);
    public static void SaveAs(string path, object value, bool printHeader, string sheetName, ExcelType excelType, IConfiguration configuration, bool overwriteFile);
    [ExtensionAttribute]
public static void SaveAs(Stream stream, object value, bool printHeader, string sheetName, ExcelType excelType, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.MiniExcel/<Query>d__22`1")]
public static IEnumerable`1<T> Query(string path, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.MiniExcel/<Query>d__23`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Query(Stream stream, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.MiniExcel/<Query>d__24")]
public static IEnumerable`1<object> Query(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.MiniExcel/<Query>d__25")]
[ExtensionAttribute]
public static IEnumerable`1<object> Query(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryRange>d__26")]
public static IEnumerable`1<object> QueryRange(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, string endCell, IConfiguration configuration);
    [IteratorStateMachineAttribute("MiniExcelLibs.MiniExcel/<QueryRange>d__27")]
[ExtensionAttribute]
public static IEnumerable`1<object> QueryRange(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, string endCell, IConfiguration configuration);
    public static void SaveAsByTemplate(string path, string templatePath, object value, IConfiguration configuration);
    public static void SaveAsByTemplate(string path, Byte[] templateBytes, object value, IConfiguration configuration);
    [ExtensionAttribute]
public static void SaveAsByTemplate(Stream stream, string templatePath, object value, IConfiguration configuration);
    [ExtensionAttribute]
public static void SaveAsByTemplate(Stream stream, Byte[] templateBytes, object value, IConfiguration configuration);
    public static void MergeSameCells(string mergedFilePath, string path, ExcelType excelType, IConfiguration configuration);
    [ExtensionAttribute]
public static void MergeSameCells(Stream stream, string path, ExcelType excelType, IConfiguration configuration);
    [ExtensionAttribute]
public static void MergeSameCells(Stream stream, Byte[] filePath, ExcelType excelType, IConfiguration configuration);
    [ObsoleteAttribute("QueryAsDataTable is not recommended, because it'll load all data into memory.")]
public static DataTable QueryAsDataTable(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [ExtensionAttribute]
public static DataTable QueryAsDataTable(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    public static List`1<string> GetSheetNames(string path, OpenXmlConfiguration config);
    [ExtensionAttribute]
public static List`1<string> GetSheetNames(Stream stream, OpenXmlConfiguration config);
    public static List`1<SheetInfo> GetSheetInformations(string path, OpenXmlConfiguration config);
    [ExtensionAttribute]
public static List`1<SheetInfo> GetSheetInformations(Stream stream, OpenXmlConfiguration config);
    public static ICollection`1<string> GetColumns(string path, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    [ExtensionAttribute]
public static ICollection`1<string> GetColumns(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    public static void ConvertCsvToXlsx(string csv, string xlsx);
    public static void ConvertCsvToXlsx(Stream csv, Stream xlsx);
    public static void ConvertXlsxToCsv(string xlsx, string csv);
    public static void ConvertXlsxToCsv(Stream xlsx, Stream csv);
}
public class MiniExcelLibs.MiniExcelDataReader : MiniExcelDataReaderBase {
    private IEnumerator`1<IDictionary`2<string, object>> _source;
    private int _fieldCount;
    private List`1<string> _keys;
    private Stream _stream;
    private bool _isFirst;
    public int FieldCount { get; }
    internal MiniExcelDataReader(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration);
    public virtual object GetValue(int i);
    public virtual int get_FieldCount();
    public virtual bool Read();
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
public abstract class MiniExcelLibs.MiniExcelDataReaderBase : object {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecordsAffected>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    [CompilerGeneratedAttribute]
public virtual int get_Depth();
    [CompilerGeneratedAttribute]
public virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public virtual int get_FieldCount();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual IDataReader GetData(int i);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public virtual string GetString(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual bool NextResult();
    public abstract virtual string GetName(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual bool Read();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class MiniExcelLibs.OpenXml.Config : object {
    public static string SpreadsheetmlXmlns;
    public static string SpreadsheetmlXmlStrictns;
    public static string SpreadsheetmlXmlRelationshipns;
    public static string SpreadsheetmlXmlStrictRelationshipns;
    public static string SpreadsheetmlXml_x14ac;
}
internal static class MiniExcelLibs.OpenXml.Constants.ExcelContentTypes : object {
    internal static string Relationships;
    internal static string SharedStrings;
    internal static string Worksheet;
    internal static string Styles;
    internal static string Drawing;
    internal static string Workbook;
}
internal static class MiniExcelLibs.OpenXml.Constants.ExcelFileNames : object {
    internal static string Rels;
    internal static string SharedStrings;
    internal static string ContentTypes;
    internal static string Styles;
    internal static string Workbook;
    internal static string WorkbookRels;
    internal static string SheetRels(int sheetId);
    internal static string Drawing(int sheetIndex);
    internal static string DrawingRels(int sheetIndex);
}
internal static class MiniExcelLibs.OpenXml.Constants.ExcelXml : object {
    internal static string EmptySheetXml;
    internal static string DefaultRels;
    internal static string DefaultWorkbookXmlRels;
    internal static string DefaultWorkbookXml;
    internal static string DefaultSheetRelXml;
    internal static string DefaultDrawing;
    internal static string DefaultDrawingXmlRels;
    internal static string DefaultSharedString;
    internal static string StartTypes;
    internal static string EndTypes;
    private static ExcelXml();
    internal static string ContentType(string contentType, string partName);
    internal static string WorksheetRelationship(SheetDto sheetDto);
    internal static string ImageRelationship(FileDto image);
    internal static string DrawingRelationship(int sheetId);
    internal static string DrawingXml(FileDto file, int fileIndex);
    internal static string Sheet(SheetDto sheetDto, int sheetId);
}
internal class MiniExcelLibs.OpenXml.Constants.WorksheetXml : object {
    internal static string StartWorksheet;
    internal static string StartWorksheetWithRelationship;
    internal static string EndWorksheet;
    internal static string StartDimension;
    internal static string DimensionPlaceholder;
    internal static string StartSheetViews;
    internal static string EndSheetViews;
    internal static string EndSheetView;
    internal static string StartSheetData;
    internal static string EndSheetData;
    internal static string EndRow;
    internal static string StartCols;
    internal static string EndCols;
    internal static string Dimension(string dimensionRef);
    internal static string StartSheetView(int tabSelected, int workbookViewId);
    internal static string StartPane(Nullable`1<int> xSplit, Nullable`1<int> ySplit, string topLeftCell, string activePane, string state);
    internal static string PaneSelection(string pane, string activeCell, string sqref);
    internal static string StartRow(int rowIndex);
    internal static string Column(Nullable`1<int> colIndex, Nullable`1<double> columnWidth);
    internal static string EmptyCell(string cellReference, string styleIndex);
    internal static string Cell(string cellReference, string cellType, string styleIndex, string cellValue, bool preserveSpace);
    internal static string Autofilter(string dimensionRef);
    internal static string Drawing(int sheetIndex);
}
internal class MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader : object {
    private bool _disposed;
    private static String[] _ns;
    private static String[] _relationshiopNs;
    private List`1<SheetRecord> _sheetRecords;
    internal IDictionary`2<int, string> _sharedStrings;
    private MergeCells _mergeCells;
    private ExcelOpenXmlStyles _style;
    private ExcelOpenXmlZip _archive;
    private OpenXmlConfiguration _config;
    private static XmlReaderSettings _xmlSettings;
    public ExcelOpenXmlSheetReader(Stream stream, IConfiguration configuration);
    private static ExcelOpenXmlSheetReader();
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<Query>d__11")]
public sealed virtual IEnumerable`1<IDictionary`2<string, object>> Query(bool useHeaderRow, string sheetName, string startCell);
    private IDictionary`2<string, object> GetCell(bool useHeaderRow, int maxColumnIndex, Dictionary`2<int, string> headRows, int startColumnIndex);
    private void SetCellsValueAndHeaders(object cellValue, bool useHeaderRow, Dictionary`2& headRows, Boolean& isFirstRow, IDictionary`2& cell, int columnIndex);
    public sealed virtual IEnumerable`1<T> Query(string sheetName, string startCell);
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryImpl>d__15`1")]
public static IEnumerable`1<T> QueryImpl(IEnumerable`1<IDictionary`2<string, object>> values, string startCell, Configuration configuration);
    private void SetSharedStrings();
    private void SetWorkbookRels(ReadOnlyCollection`1<ZipArchiveEntry> entries);
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<ReadWorkbook>d__18")]
internal IEnumerable`1<SheetRecord> ReadWorkbook(ReadOnlyCollection`1<ZipArchiveEntry> entries);
    internal List`1<SheetRecord> GetWorkbookRels(ReadOnlyCollection`1<ZipArchiveEntry> entries);
    private object ReadCellAndSetColumnIndex(XmlReader reader, Int32& columnIndex, bool withoutCR, int startColumnIndex, string aR, string aT);
    private void ConvertCellValue(string rawValue, string aT, int xfIndex, Object& value);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryAsync>d__22")]
public sealed virtual Task`1<IEnumerable`1<IDictionary`2<string, object>>> QueryAsync(bool UseHeaderRow, string sheetName, string startCell, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryAsync>d__23`1")]
public sealed virtual Task`1<IEnumerable`1<T>> QueryAsync(string sheetName, string startCell, CancellationToken cancellationToken);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryRange>d__27")]
public sealed virtual IEnumerable`1<IDictionary`2<string, object>> QueryRange(bool useHeaderRow, string sheetName, string startCell, string endCell);
    public sealed virtual IEnumerable`1<T> QueryRange(string sheetName, string startCell, string endCell);
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryImplRange>d__29`1")]
public static IEnumerable`1<T> QueryImplRange(IEnumerable`1<IDictionary`2<string, object>> values, string startCell, string endCell, Configuration configuration);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryAsyncRange>d__30")]
public sealed virtual Task`1<IEnumerable`1<IDictionary`2<string, object>>> QueryAsyncRange(bool UseHeaderRow, string sheetName, string startCell, string endCell, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetReader/<QueryAsyncRange>d__31`1")]
public sealed virtual Task`1<IEnumerable`1<T>> QueryAsyncRange(string sheetName, string startCell, string endCell, CancellationToken cancellationToken);
}
internal class MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter : object {
    private MiniExcelZipArchive _archive;
    private static UTF8Encoding _utf8WithBom;
    private OpenXmlConfiguration _configuration;
    private Stream _stream;
    private bool _printHeader;
    private object _value;
    private string _defaultSheetName;
    private List`1<SheetDto> _sheets;
    private List`1<FileDto> _files;
    private int currentSheetIndex;
    private Dictionary`2<string, ZipPackageInfo> _zipDictionary;
    public ExcelOpenXmlSheetWriter(Stream stream, object value, string sheetName, IConfiguration configuration, bool printHeader);
    private static ExcelOpenXmlSheetWriter();
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<SaveAsAsync>d__0")]
public sealed virtual Task SaveAsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateDefaultOpenXmlAsync>d__1")]
internal Task GenerateDefaultOpenXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<CreateSheetXmlAsync>d__2")]
private Task CreateSheetXmlAsync(object value, string sheetPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<WriteEmptySheetAsync>d__3")]
private Task WriteEmptySheetAsync(MiniExcelAsyncStreamWriter writer);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<WriteDimensionPlaceholderAsync>d__4")]
private Task`1<long> WriteDimensionPlaceholderAsync(MiniExcelAsyncStreamWriter writer);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<WriteDimensionAsync>d__5")]
private Task WriteDimensionAsync(MiniExcelAsyncStreamWriter writer, int maxRowIndex, int maxColumnIndex, long placeholderPosition);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateSheetByIDataReaderAsync>d__6")]
private Task GenerateSheetByIDataReaderAsync(MiniExcelAsyncStreamWriter writer, IDataReader reader);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateSheetByEnumerableAsync>d__7")]
private Task GenerateSheetByEnumerableAsync(MiniExcelAsyncStreamWriter writer, IEnumerable values);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateSheetByDataTableAsync>d__8")]
private Task GenerateSheetByDataTableAsync(MiniExcelAsyncStreamWriter writer, DataTable value);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<WriteColumnsWidthsAsync>d__9")]
private static Task WriteColumnsWidthsAsync(MiniExcelAsyncStreamWriter writer, IEnumerable`1<ExcelColumnInfo> props);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<PrintHeaderAsync>d__10")]
private static Task PrintHeaderAsync(MiniExcelAsyncStreamWriter writer, List`1<ExcelColumnInfo> props);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateSheetByColumnInfoAsync>d__11`1")]
private Task`1<int> GenerateSheetByColumnInfoAsync(MiniExcelAsyncStreamWriter writer, IEnumerator value, List`1<ExcelColumnInfo> props, int xIndex, int yIndex);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<WriteCellAsync>d__12")]
private static Task WriteCellAsync(MiniExcelAsyncStreamWriter writer, string cellReference, string columnName);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<WriteCellAsync>d__13")]
private Task WriteCellAsync(MiniExcelAsyncStreamWriter writer, int rowIndex, int cellIndex, object value, ExcelColumnInfo p);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateEndXmlAsync>d__14")]
private Task GenerateEndXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<AddFilesToZipAsync>d__15")]
private Task AddFilesToZipAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateStylesXmlAsync>d__16")]
private Task GenerateStylesXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateDrawinRelXmlAsync>d__17")]
private Task GenerateDrawinRelXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateDrawingXmlAsync>d__18")]
private Task GenerateDrawingXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateWorkbookXmlAsync>d__19")]
private Task GenerateWorkbookXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GenerateContentTypesXmlAsync>d__20")]
private Task GenerateContentTypesXmlAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<CreateZipEntryAsync>d__21")]
private Task CreateZipEntryAsync(string path, string contentType, string content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<CreateZipEntryAsync>d__22")]
private Task CreateZipEntryAsync(string path, Byte[] content, CancellationToken cancellationToken);
    public sealed virtual void SaveAs();
    internal void GenerateDefaultOpenXml();
    private void CreateSheetXml(object value, string sheetPath);
    private void WriteEmptySheet(MiniExcelStreamWriter writer);
    private long WriteDimensionPlaceholder(MiniExcelStreamWriter writer);
    private void WriteDimension(MiniExcelStreamWriter writer, int maxRowIndex, int maxColumnIndex, long placeholderPosition);
    private void GenerateSheetByIDataReader(MiniExcelStreamWriter writer, IDataReader reader);
    private void GenerateSheetByEnumerable(MiniExcelStreamWriter writer, IEnumerable values);
    private void GenerateSheetByDataTable(MiniExcelStreamWriter writer, DataTable value);
    private static void WriteColumnsWidths(MiniExcelStreamWriter writer, IEnumerable`1<ExcelColumnInfo> props);
    private void WriteSheetViews(MiniExcelStreamWriter writer);
    private void WritePanes(MiniExcelStreamWriter writer);
    private static void PrintHeader(MiniExcelStreamWriter writer, List`1<ExcelColumnInfo> props);
    private int GenerateSheetByColumnInfo(MiniExcelStreamWriter writer, IEnumerator value, List`1<ExcelColumnInfo> props, int xIndex, int yIndex);
    private void WriteCell(MiniExcelStreamWriter writer, int rowIndex, int cellIndex, object value, ExcelColumnInfo columnInfo);
    private static void WriteCell(MiniExcelStreamWriter writer, string cellReference, string columnName);
    private void GenerateEndXml();
    private void AddFilesToZip();
    private void GenerateStylesXml();
    private void GenerateDrawinRelXml();
    private void GenerateDrawingXml();
    private void GenerateWorkbookXml();
    private void GenerateContentTypesXml();
    private void CreateZipEntry(string path, string contentType, string content);
    private void CreateZipEntry(string path, Byte[] content);
    public sealed virtual void Insert();
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.ExcelOpenXmlSheetWriter/<GetSheets>d__62")]
private IEnumerable`1<Tuple`2<SheetDto, object>> GetSheets();
    private ExcellSheetInfo GetSheetInfos(string sheetName);
    private ExcelColumnInfo GetColumnInfosFromDynamicConfiguration(string columnName);
    private void SetGenericTypePropertiesMode(Type genericType, String& mode, Int32& maxColumnIndex, List`1& props);
    private Tuple`3<string, string, string> GetCellValue(int rowIndex, int cellIndex, object value, ExcelColumnInfo columnInfo, bool valueIsNull);
    private static Type GetValueType(object value, ExcelColumnInfo columnInfo);
    private string GetNumericValue(object value, Type type);
    private string GetFileValue(int rowIndex, int cellIndex, object value);
    private Tuple`3<string, string, string> GetDateTimeValue(DateTime value, ExcelColumnInfo columnInfo);
    private static double CorrectDateTimeValue(DateTime value);
    private string GetDimensionRef(int maxRowIndex, int maxColumnIndex);
    private string GetStylesXml(ICollection`1<ExcelColumnAttribute> columns);
    private string GetDrawingRelationshipXml(int sheetIndex);
    private string GetDrawingXml(int sheetIndex);
    private void GenerateWorkBookXmls(StringBuilder& workbookXml, StringBuilder& workbookRelsXml, Dictionary`2& sheetsRelsXml);
    private string GetContentTypesXml();
}
internal class MiniExcelLibs.OpenXml.ExcelOpenXmlStyles : object {
    private static String[] _ns;
    private Dictionary`2<int, StyleRecord> _cellXfs;
    private Dictionary`2<int, StyleRecord> _cellStyleXfs;
    private Dictionary`2<int, NumberFormatString> _customFormats;
    [CompilerGeneratedAttribute]
private static Dictionary`2<int, NumberFormatString> <Formats>k__BackingField;
    private static Dictionary`2<int, NumberFormatString> Formats { get; }
    public ExcelOpenXmlStyles(ExcelOpenXmlZip zip);
    private static ExcelOpenXmlStyles();
    public NumberFormatString GetStyleFormat(int index);
    public object ConvertValueByStyleFormat(int index, object value);
    [CompilerGeneratedAttribute]
private static Dictionary`2<int, NumberFormatString> get_Formats();
}
internal class MiniExcelLibs.OpenXml.ExcelOpenXmlTemplate : object {
    private static XmlNamespaceManager _ns;
    private static Regex _isExpressionRegex;
    private Stream _stream;
    private OpenXmlConfiguration _configuration;
    private StringBuilder _calcChainContent;
    [CompilerGeneratedAttribute]
private List`1<XRowInfo> <XRowInfos>k__BackingField;
    private List`1<string> CalcChainCellRefs;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XMergeCell> <XMergeCellInfos>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XMergeCell> <NewXMergeCellInfos>k__BackingField;
    private List`1<XRowInfo> XRowInfos { get; private set; }
    private Dictionary`2<string, XMergeCell> XMergeCellInfos { get; private set; }
    public List`1<XMergeCell> NewXMergeCellInfos { get; private set; }
    private static ExcelOpenXmlTemplate();
    public ExcelOpenXmlTemplate(Stream stream, IConfiguration configuration);
    public sealed virtual void SaveAsByTemplate(string templatePath, object value);
    public sealed virtual void SaveAsByTemplate(Byte[] templateBtyes, object value);
    public void SaveAsByTemplateImpl(Stream templateStream, object value);
    public sealed virtual Task SaveAsByTemplateAsync(string templatePath, object value, CancellationToken cancellationToken);
    public sealed virtual Task SaveAsByTemplateAsync(Byte[] templateBtyes, object value, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private List`1<XRowInfo> get_XRowInfos();
    [CompilerGeneratedAttribute]
private void set_XRowInfos(List`1<XRowInfo> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XMergeCell> get_XMergeCellInfos();
    [CompilerGeneratedAttribute]
private void set_XMergeCellInfos(Dictionary`2<string, XMergeCell> value);
    [CompilerGeneratedAttribute]
public List`1<XMergeCell> get_NewXMergeCellInfos();
    [CompilerGeneratedAttribute]
private void set_NewXMergeCellInfos(List`1<XMergeCell> value);
    private void GenerateSheetXmlImpl(ZipArchiveEntry sheetZipEntry, Stream stream, Stream sheetStream, Dictionary`2<string, object> inputMaps, IDictionary`2<int, string> sharedStrings, bool mergeCells);
    private void GetMercells(XmlDocument doc, XmlNode worksheet);
    private void WriteSheetXml(Stream stream, XmlDocument doc, XmlNode sheetData, bool mergeCells);
    private void ProcessFormulas(StringBuilder rowXml, int rowIndex);
    private static string ConvertToDateTimeString(KeyValuePair`2<string, PropInfo> propInfo, object cellValue);
    private static StringBuilder CleanXml(StringBuilder xml, string endPrefix);
    private static string CleanXml(string xml, string endPrefix);
    private void ReplaceSharedStringsToStr(IDictionary`2<int, string> sharedStrings, XmlNodeList& rows);
    private void UpdateDimensionAndGetRowsInfo(Dictionary`2<string, object> inputMaps, XmlDocument& doc, XmlNodeList& rows, bool changeRowIndex);
    private static bool EvaluateStatement(object tagValue, string comparisonOperator, string value);
    public sealed virtual void MergeSameCells(string path);
    public sealed virtual void MergeSameCells(Byte[] fileInBytes);
    private void MergeSameCellsImpl(Stream stream);
    public sealed virtual Task MergeSameCellsAsync(string path, CancellationToken cancellationToken);
    public sealed virtual Task MergeSameCellsAsync(Byte[] fileInBytes, CancellationToken cancellationToken);
}
internal static class MiniExcelLibs.OpenXml.ExcelOpenXmlUtils : object {
    public static string MinifyXml(string xml);
    public static string EncodeXML(string value);
    public static string ConvertXyToCell(Tuple`2<int, int> xy);
    public static string ConvertXyToCell(int x, int y);
    public static Tuple`2<int, int> ConvertCellToXY(string cell);
    public static int GetColumnNumber(string name);
    public static int GetCellColumnIndex(string cell);
    public static int GetCellRowNumber(string cell);
    public static string GetCellColumnLetter(string cell);
    public static string ConvertColumnName(int x);
}
internal class MiniExcelLibs.OpenXml.MergeCells : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <MergesValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <MergesMap>k__BackingField;
    public Dictionary`2<string, object> MergesValues { get; public set; }
    public Dictionary`2<string, string> MergesMap { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_MergesValues();
    [CompilerGeneratedAttribute]
public void set_MergesValues(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_MergesMap();
    [CompilerGeneratedAttribute]
public void set_MergesMap(Dictionary`2<string, string> value);
}
internal class MiniExcelLibs.OpenXml.MiniExcelAsyncStreamWriter : object {
    private Stream _stream;
    private Encoding _encoding;
    private CancellationToken _cancellationToken;
    private StreamWriter _streamWriter;
    private bool disposedValue;
    public MiniExcelAsyncStreamWriter(Stream stream, Encoding encoding, int bufferSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.MiniExcelAsyncStreamWriter/<WriteAsync>d__6")]
public Task WriteAsync(string content);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.MiniExcelAsyncStreamWriter/<WriteAndFlushAsync>d__7")]
public Task`1<long> WriteAndFlushAsync(string content);
    [AsyncStateMachineAttribute("MiniExcelLibs.OpenXml.MiniExcelAsyncStreamWriter/<FlushAsync>d__8")]
public Task`1<long> FlushAsync();
    public void SetPosition(long position);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class MiniExcelLibs.OpenXml.MiniExcelStreamWriter : object {
    private Stream _stream;
    private Encoding _encoding;
    private StreamWriter _streamWriter;
    private bool disposedValue;
    public MiniExcelStreamWriter(Stream stream, Encoding encoding, int bufferSize);
    public void Write(string content);
    public long WriteAndFlush(string content);
    public long Flush();
    public void SetPosition(long position);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class MiniExcelLibs.OpenXml.Models.DrawingDto : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    internal string ID { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ID();
    [CompilerGeneratedAttribute]
internal void set_ID(string value);
}
internal class MiniExcelLibs.OpenXml.Models.FileDto : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Byte>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CellIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SheetId>k__BackingField;
    internal string ID { get; internal set; }
    internal string Extension { get; internal set; }
    internal string Path { get; }
    internal string Path2 { get; }
    internal Byte[] Byte { get; internal set; }
    internal int RowIndex { get; internal set; }
    internal int CellIndex { get; internal set; }
    internal bool IsImage { get; internal set; }
    internal int SheetId { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ID();
    [CompilerGeneratedAttribute]
internal void set_ID(string value);
    [CompilerGeneratedAttribute]
internal string get_Extension();
    [CompilerGeneratedAttribute]
internal void set_Extension(string value);
    internal string get_Path();
    internal string get_Path2();
    [CompilerGeneratedAttribute]
internal Byte[] get_Byte();
    [CompilerGeneratedAttribute]
internal void set_Byte(Byte[] value);
    [CompilerGeneratedAttribute]
internal int get_RowIndex();
    [CompilerGeneratedAttribute]
internal void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
internal int get_CellIndex();
    [CompilerGeneratedAttribute]
internal void set_CellIndex(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsImage();
    [CompilerGeneratedAttribute]
internal void set_IsImage(bool value);
    [CompilerGeneratedAttribute]
internal int get_SheetId();
    [CompilerGeneratedAttribute]
internal void set_SheetId(int value);
}
internal class MiniExcelLibs.OpenXml.Models.SheetDto : object {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SheetIdx>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    internal string ID { get; internal set; }
    internal string Name { get; internal set; }
    internal int SheetIdx { get; internal set; }
    internal string Path { get; }
    internal string State { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ID();
    [CompilerGeneratedAttribute]
internal void set_ID(string value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal int get_SheetIdx();
    [CompilerGeneratedAttribute]
internal void set_SheetIdx(int value);
    internal string get_Path();
    [CompilerGeneratedAttribute]
internal string get_State();
    [CompilerGeneratedAttribute]
internal void set_State(string value);
}
internal class MiniExcelLibs.OpenXml.NumberFormatString : object {
    [CompilerGeneratedAttribute]
private string <FormatCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedConvertToString>k__BackingField;
    public string FormatCode { get; }
    public Type Type { get; public set; }
    public bool NeedConvertToString { get; }
    public NumberFormatString(string formatCode, Type type, bool needConvertToString);
    [CompilerGeneratedAttribute]
public string get_FormatCode();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_NeedConvertToString();
}
public class MiniExcelLibs.OpenXml.OpenXmlConfiguration : Configuration {
    internal static OpenXmlConfiguration DefaultConfig;
    [CompilerGeneratedAttribute]
private bool <FillMergedCells>k__BackingField;
    [CompilerGeneratedAttribute]
private TableStyles <TableStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FreezeRowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FreezeColumnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableConvertByteArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTemplateParameterMissing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableWriteNullValueCell>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSharedStringCache>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SharedStringCacheSize>k__BackingField;
    [CompilerGeneratedAttribute]
private DynamicExcelSheet[] <DynamicSheets>k__BackingField;
    public bool FillMergedCells { get; public set; }
    public TableStyles TableStyles { get; public set; }
    public bool AutoFilter { get; public set; }
    public int FreezeRowCount { get; public set; }
    public int FreezeColumnCount { get; public set; }
    public bool EnableConvertByteArray { get; public set; }
    public bool IgnoreTemplateParameterMissing { get; public set; }
    public bool EnableWriteNullValueCell { get; public set; }
    public bool EnableSharedStringCache { get; public set; }
    public long SharedStringCacheSize { get; public set; }
    public DynamicExcelSheet[] DynamicSheets { get; public set; }
    private static OpenXmlConfiguration();
    [CompilerGeneratedAttribute]
public bool get_FillMergedCells();
    [CompilerGeneratedAttribute]
public void set_FillMergedCells(bool value);
    [CompilerGeneratedAttribute]
public TableStyles get_TableStyles();
    [CompilerGeneratedAttribute]
public void set_TableStyles(TableStyles value);
    [CompilerGeneratedAttribute]
public bool get_AutoFilter();
    [CompilerGeneratedAttribute]
public void set_AutoFilter(bool value);
    [CompilerGeneratedAttribute]
public int get_FreezeRowCount();
    [CompilerGeneratedAttribute]
public void set_FreezeRowCount(int value);
    [CompilerGeneratedAttribute]
public int get_FreezeColumnCount();
    [CompilerGeneratedAttribute]
public void set_FreezeColumnCount(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableConvertByteArray();
    [CompilerGeneratedAttribute]
public void set_EnableConvertByteArray(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTemplateParameterMissing();
    [CompilerGeneratedAttribute]
public void set_IgnoreTemplateParameterMissing(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableWriteNullValueCell();
    [CompilerGeneratedAttribute]
public void set_EnableWriteNullValueCell(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableSharedStringCache();
    [CompilerGeneratedAttribute]
public void set_EnableSharedStringCache(bool value);
    [CompilerGeneratedAttribute]
public long get_SharedStringCacheSize();
    [CompilerGeneratedAttribute]
public void set_SharedStringCacheSize(long value);
    [CompilerGeneratedAttribute]
public DynamicExcelSheet[] get_DynamicSheets();
    [CompilerGeneratedAttribute]
public void set_DynamicSheets(DynamicExcelSheet[] value);
}
[DefaultMemberAttribute("Item")]
internal class MiniExcelLibs.OpenXml.SharedStringsDiskCache : object {
    private FileStream _positionFs;
    private FileStream _lengthFs;
    private FileStream _valueFs;
    private bool _disposedValue;
    private static Encoding _encoding;
    private long _maxIndx;
    public int Count { get; }
    public string Item { get; public set; }
    public ICollection`1<int> Keys { get; }
    public ICollection`1<string> Values { get; }
    public bool IsReadOnly { get; }
    private static SharedStringsDiskCache();
    public sealed virtual int get_Count();
    public sealed virtual string get_Item(int key);
    public sealed virtual void set_Item(int key, string value);
    public sealed virtual bool ContainsKey(int key);
    internal void Add(int index, string value);
    private string GetValue(int index);
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public sealed virtual ICollection`1<int> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(int key);
    public sealed virtual bool TryGetValue(int key, String& value);
    public sealed virtual void Add(KeyValuePair`2<int, string> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<int, string> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<int, string> item);
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.SharedStringsDiskCache/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<KeyValuePair`2<int, string>> GetEnumerator();
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.SharedStringsDiskCache/<System-Collections-IEnumerable-GetEnumerator>d__32")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.IDictionary<System.Int32,System.String>.Add(int key, string value);
}
public class MiniExcelLibs.OpenXml.SheetInfo : object {
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SheetState <State>k__BackingField;
    public UInt32 Id { get; }
    public UInt32 Index { get; }
    public string Name { get; }
    public SheetState State { get; }
    public SheetInfo(UInt32 id, UInt32 index, string name, SheetState sheetState);
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public UInt32 get_Index();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public SheetState get_State();
}
internal class MiniExcelLibs.OpenXml.SheetRecord : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Name { get; }
    public string State { get; public set; }
    public UInt32 Id { get; }
    public string Rid { get; public set; }
    public string Path { get; public set; }
    public SheetRecord(string name, string state, UInt32 id, string rid);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Id();
    [CompilerGeneratedAttribute]
public string get_Rid();
    [CompilerGeneratedAttribute]
public void set_Rid(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public SheetInfo ToSheetInfo(UInt32 index);
}
public enum MiniExcelLibs.OpenXml.SheetState : Enum {
    public int value__;
    public static SheetState Visible;
    public static SheetState Hidden;
    public static SheetState VeryHidden;
}
internal class MiniExcelLibs.OpenXml.StyleRecord : object {
    [CompilerGeneratedAttribute]
private int <XfId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumFmtId>k__BackingField;
    public int XfId { get; public set; }
    public int NumFmtId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_XfId();
    [CompilerGeneratedAttribute]
public void set_XfId(int value);
    [CompilerGeneratedAttribute]
public int get_NumFmtId();
    [CompilerGeneratedAttribute]
public void set_NumFmtId(int value);
}
public class MiniExcelLibs.OpenXml.Styles.DefaultSheetStyleBuilder : object {
    private static int startUpNumFmts;
    private static string NumFmtsToken;
    private static string NumFmtsCountToken;
    private static int startUpCellXfs;
    private static string cellXfsToken;
    private static string cellXfsCountToken;
    internal static string DefaultStylesXml;
    private static DefaultSheetStyleBuilder();
    public sealed virtual string Build(ICollection`1<ExcelColumnAttribute> columns);
}
public interface MiniExcelLibs.OpenXml.Styles.ISheetStyleBuilder {
    public abstract virtual string Build(ICollection`1<ExcelColumnAttribute> columns);
}
public class MiniExcelLibs.OpenXml.Styles.MinimalSheetStyleBuilder : object {
    private static int startUpNumFmts;
    private static string NumFmtsToken;
    private static string NumFmtsCountToken;
    private static int startUpCellXfs;
    private static string cellXfsToken;
    private static string cellXfsCountToken;
    internal static string NoneStylesXml;
    private static MinimalSheetStyleBuilder();
    public sealed virtual string Build(ICollection`1<ExcelColumnAttribute> columns);
}
public static class MiniExcelLibs.OpenXml.Styles.SheetStyleBuilderHelper : object {
    [IteratorStateMachineAttribute("MiniExcelLibs.OpenXml.Styles.SheetStyleBuilderHelper/<GenerateStyleIds>d__0")]
public static IEnumerable`1<ExcelColumnAttribute> GenerateStyleIds(int startUpCellXfs, ICollection`1<ExcelColumnAttribute> dynamicColumns);
}
public enum MiniExcelLibs.OpenXml.TableStyles : Enum {
    public int value__;
    public static TableStyles None;
    public static TableStyles Default;
}
public class MiniExcelLibs.Property : Member {
    private static ConcurrentDictionary`2<Type, Property[]> m_cached;
    private MemberGetter m_geter;
    private MemberSetter m_seter;
    [CompilerGeneratedAttribute]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool CanRead { get; private set; }
    public bool CanWrite { get; private set; }
    public PropertyInfo Info { get; private set; }
    public string Name { get; protected set; }
    public Property(PropertyInfo property);
    private static Property();
    [CompilerGeneratedAttribute]
public bool get_CanRead();
    [CompilerGeneratedAttribute]
private void set_CanRead(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanWrite();
    [CompilerGeneratedAttribute]
private void set_CanWrite(bool value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(PropertyInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    public static Property[] GetProperties(Type type);
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
}
[ExtensionAttribute]
internal static class MiniExcelLibs.Utils.AttributeExtension : object {
    [ExtensionAttribute]
internal static TValue GetAttributeValue(Type attrType, Func`2<TAttribute, TValue> selector);
    private static TValue GetValueOrDefault(Func`2<TAttribute, TValue> selector, TAttribute attr);
    [ExtensionAttribute]
internal static TAttribute GetAttribute(PropertyInfo prop, bool isInherit);
    [ExtensionAttribute]
internal static TValue GetAttributeValue(PropertyInfo prop, Func`2<TAttribute, TValue> selector, bool isInherit);
    [ExtensionAttribute]
internal static bool IsUseAttribute(PropertyInfo prop);
}
internal static class MiniExcelLibs.Utils.CalcChainHelper : object {
    public static string GetCalcChainContent(List`1<string> cellRefs, int sheetIndex);
    public static void GenerateCalcChainSheet(Stream calcChainStream, string calcChainContent);
}
internal static class MiniExcelLibs.Utils.ColumnHelper : object {
    private static int GENERAL_COLUMN_INDEX;
    private static int MAX_COLUMN_INDEX;
    private static int _IntMappingAlphabetCount;
    private static ConcurrentDictionary`2<int, string> _IntMappingAlphabet;
    private static ConcurrentDictionary`2<string, int> _AlphabetMappingInt;
    private static ColumnHelper();
    public static string GetAlphabetColumnName(int columnIndex);
    public static int GetColumnIndex(string columnName);
    private static void CheckAndSetMaxColumnIndex(int columnIndex);
    internal static string IntToLetters(int value);
}
[ExtensionAttribute]
internal static class MiniExcelLibs.Utils.CustomPropertyHelper : object {
    internal static IDictionary`2<string, object> GetEmptyExpandoObject(int maxColumnIndex, int startCellIndex);
    internal static IDictionary`2<string, object> GetEmptyExpandoObject(Dictionary`2<int, string> hearrows);
    [ExtensionAttribute]
internal static List`1<ExcelColumnInfo> GetSaveAsProperties(Type type, Configuration configuration);
    internal static List`1<ExcelColumnInfo> SortCustomProps(List`1<ExcelColumnInfo> props);
    internal static List`1<ExcelColumnInfo> GetExcelCustomPropertyInfos(Type type, String[] keys, Configuration configuration);
    internal static string DescriptionAttr(Type type, object source);
    private static IEnumerable`1<ExcelColumnInfo> ConvertToExcelCustomPropertyInfo(PropertyInfo[] props, Configuration configuration);
    private static IEnumerable`1<ExcelColumnInfo> GetExcelPropertyInfo(Type type, BindingFlags bindingFlags, Configuration configuration);
    internal static ExcellSheetInfo GetExcellSheetInfo(Type type, Configuration configuration);
    internal static List`1<ExcelColumnInfo> GetDictionaryColumnInfo(IDictionary`2<string, object> dicString, IDictionary dic, Configuration configuration);
    internal static void SetDictionaryColumnInfo(List`1<ExcelColumnInfo> _props, object key, Configuration configuration);
}
internal static class MiniExcelLibs.Utils.DateTimeHelper : object {
    public static double OADateMinAsDouble;
    public static double OADateMaxAsDouble;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long TicksPerMinute;
    private static long TicksPerHour;
    private static long TicksPerDay;
    private static int MillisPerSecond;
    private static int MillisPerMinute;
    private static int MillisPerHour;
    private static int MillisPerDay;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1899;
    private static int DaysTo10000;
    private static long MaxMillis;
    private static long DoubleDateOffset;
    public static bool IsDateTimeFormat(string formatCode);
    public static DateTime FromOADate(double d);
    internal static long DoubleDateToTicks(double value);
    public static double AdjustOADateTime(double value, bool date1904);
    public static bool IsValidOADateTime(double value);
    public static object ConvertFromOATime(double value, bool date1904);
}
[ExtensionAttribute]
internal static class MiniExcelLibs.Utils.DictionaryHelper : object {
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> defaultValueProvider);
}
internal static class MiniExcelLibs.Utils.Evaluator : object {
    public static Section GetSection(List`1<Section> sections, object value);
    public static Section GetFirstSection(List`1<Section> sections, SectionType type);
    private static Section GetNumericSection(List`1<Section> sections, double value);
}
internal class MiniExcelLibs.Utils.ExcelColumnInfo : object {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ExcelColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcelColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ExcelColumnAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private Property <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExcludeNullableType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcelFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ExcelColumnWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcelIndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcelIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExcelFormatId>k__BackingField;
    public object Key { get; public set; }
    public Nullable`1<int> ExcelColumnIndex { get; public set; }
    public string ExcelColumnName { get; public set; }
    public String[] ExcelColumnAliases { get; public set; }
    public Property Property { get; public set; }
    public Type ExcludeNullableType { get; public set; }
    public bool Nullable { get; internal set; }
    public string ExcelFormat { get; internal set; }
    public Nullable`1<double> ExcelColumnWidth { get; internal set; }
    public string ExcelIndexName { get; internal set; }
    public bool ExcelIgnore { get; internal set; }
    public int ExcelFormatId { get; internal set; }
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ExcelColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ExcelColumnIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ExcelColumnName();
    [CompilerGeneratedAttribute]
public void set_ExcelColumnName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ExcelColumnAliases();
    [CompilerGeneratedAttribute]
public void set_ExcelColumnAliases(String[] value);
    [CompilerGeneratedAttribute]
public Property get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(Property value);
    [CompilerGeneratedAttribute]
public Type get_ExcludeNullableType();
    [CompilerGeneratedAttribute]
public void set_ExcludeNullableType(Type value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
internal void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public string get_ExcelFormat();
    [CompilerGeneratedAttribute]
internal void set_ExcelFormat(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_ExcelColumnWidth();
    [CompilerGeneratedAttribute]
internal void set_ExcelColumnWidth(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_ExcelIndexName();
    [CompilerGeneratedAttribute]
internal void set_ExcelIndexName(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcelIgnore();
    [CompilerGeneratedAttribute]
internal void set_ExcelIgnore(bool value);
    [CompilerGeneratedAttribute]
public int get_ExcelFormatId();
    [CompilerGeneratedAttribute]
internal void set_ExcelFormatId(int value);
}
internal class MiniExcelLibs.Utils.ExcelDateTime : object {
    [CompilerGeneratedAttribute]
private DateTime <AdjustedDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AdjustDaysPost>k__BackingField;
    private static DateTime Excel1900LeapMinDate;
    private static DateTime Excel1900LeapMaxDate;
    private static DateTime Excel1900ZeroethMinDate;
    private static DateTime Excel1900ZeroethMaxDate;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long TicksPerMinute;
    private static long TicksPerHour;
    private static long TicksPerDay;
    private static int MillisPerSecond;
    private static int MillisPerMinute;
    private static int MillisPerHour;
    private static int MillisPerDay;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1899;
    private static long DoubleDateOffset;
    public DateTime AdjustedDateTime { get; }
    public int AdjustDaysPost { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Millisecond { get; }
    public DayOfWeek DayOfWeek { get; }
    public ExcelDateTime(double numericDate, bool isDate1904);
    public ExcelDateTime(DateTime value);
    private static ExcelDateTime();
    [CompilerGeneratedAttribute]
public DateTime get_AdjustedDateTime();
    [CompilerGeneratedAttribute]
public int get_AdjustDaysPost();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Millisecond();
    public DayOfWeek get_DayOfWeek();
    public string ToString(string numberFormat, CultureInfo culture);
    public static bool TryConvert(object value, bool isDate1904, CultureInfo culture, ExcelDateTime& result);
    internal static long DoubleDateToTicks(double value);
}
internal class MiniExcelLibs.Utils.ExcellSheetInfo : object {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExcelSheetName>k__BackingField;
    [CompilerGeneratedAttribute]
private SheetState <ExcelSheetState>k__BackingField;
    public object Key { get; public set; }
    public string ExcelSheetName { get; public set; }
    public SheetState ExcelSheetState { get; public set; }
    private string ExcelSheetStateAsString { get; }
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(object value);
    [CompilerGeneratedAttribute]
public string get_ExcelSheetName();
    [CompilerGeneratedAttribute]
public void set_ExcelSheetName(string value);
    [CompilerGeneratedAttribute]
public SheetState get_ExcelSheetState();
    [CompilerGeneratedAttribute]
public void set_ExcelSheetState(SheetState value);
    private string get_ExcelSheetStateAsString();
    public SheetDto ToDto(int sheetIndex);
}
internal class MiniExcelLibs.Utils.ExcelNumberFormat : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDateTimeFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTimeSpanFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Section> <Sections>k__BackingField;
    public bool IsValid { get; }
    public string FormatString { get; }
    public bool IsDateTimeFormat { get; }
    public bool IsTimeSpanFormat { get; }
    internal List`1<Section> Sections { get; }
    public ExcelNumberFormat(string formatString);
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public bool get_IsDateTimeFormat();
    [CompilerGeneratedAttribute]
public bool get_IsTimeSpanFormat();
    [CompilerGeneratedAttribute]
internal List`1<Section> get_Sections();
}
public static class MiniExcelLibs.Utils.ExcelTypeHelper : object {
    internal static ExcelType GetExcelType(string filePath, ExcelType excelType);
    internal static ExcelType GetExcelType(Stream stream, ExcelType excelType);
}
internal static class MiniExcelLibs.Utils.FileHelper : object {
    public static FileStream OpenSharedRead(string path);
}
[ExtensionAttribute]
public static class MiniExcelLibs.Utils.IEnumerableHelper : object {
    [ExtensionAttribute]
public static bool StartsWith(IList`1<T> span, IList`1<T> value);
}
internal class MiniExcelLibs.Utils.ImageHelper : object {
    public static ImageFormat GetImageFormat(ReadOnlySpan`1<byte> bytes);
}
internal static class MiniExcelLibs.Utils.Parser : object {
    public static List`1<Section> ParseSections(string formatString, Boolean& syntaxError);
    private static Section ParseSection(Tokenizer reader, int index, Boolean& syntaxError);
    internal static int ParseNumberTokens(List`1<string> tokens, int startPosition, List`1& beforeDecimal, Boolean& decimalSeparator, List`1& afterDecimal);
    private static void ParseMilliseconds(List`1<string> tokens, List`1& result);
    private static string ReadToken(Tokenizer reader, Boolean& syntaxError);
    private static bool ReadLiteral(Tokenizer reader);
}
internal static class MiniExcelLibs.Utils.ReferenceHelper : object {
    public static string GetCellNumber(string cell);
    public static string GetCellLetter(string cell);
    public static Tuple`2<int, int> ConvertCellToXY(string cell);
    public static string ConvertXyToCell(int x, int y);
    public static bool ParseReference(string value, Int32& column, Int32& row);
}
internal class MiniExcelLibs.Utils.Section : object {
    [CompilerGeneratedAttribute]
private int <SectionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private SectionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <GeneralTextDateDurationParts>k__BackingField;
    public int SectionIndex { get; public set; }
    public SectionType Type { get; public set; }
    public List`1<string> GeneralTextDateDurationParts { get; public set; }
    [CompilerGeneratedAttribute]
public int get_SectionIndex();
    [CompilerGeneratedAttribute]
public void set_SectionIndex(int value);
    [CompilerGeneratedAttribute]
public SectionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SectionType value);
    [CompilerGeneratedAttribute]
public List`1<string> get_GeneralTextDateDurationParts();
    [CompilerGeneratedAttribute]
public void set_GeneralTextDateDurationParts(List`1<string> value);
}
internal enum MiniExcelLibs.Utils.SectionType : Enum {
    public int value__;
    public static SectionType General;
    public static SectionType Date;
    public static SectionType Duration;
    public static SectionType Text;
}
internal static class MiniExcelLibs.Utils.StringHelper : object {
    private static String[] _ns;
    private static StringHelper();
    public static string GetLetter(string content);
    public static int GetNumber(string content);
    public static string ReadStringItem(XmlReader reader);
    private static string ReadRichTextRun(XmlReader reader);
}
internal static class MiniExcelLibs.Utils.Token : object {
    public static bool IsLiteral(string token);
    public static bool IsNumberLiteral(string token);
    public static bool IsPlaceholder(string token);
    public static bool IsGeneral(string token);
    public static bool IsDatePart(string token);
    public static bool IsDurationPart(string token);
    public static bool IsDigit09(string token);
    public static bool IsDigit19(string token);
}
internal class MiniExcelLibs.Utils.Tokenizer : object {
    private string formatString;
    private int formatStringPosition;
    public int Position { get; }
    public int Length { get; }
    public Tokenizer(string fmt);
    public int get_Position();
    public int get_Length();
    public string Substring(int startIndex, int length);
    public int Peek(int offset);
    public int PeekUntil(int startOffset, int until);
    public bool PeekOneOf(int offset, string s);
    public void Advance(int characters);
    public bool ReadOneOrMore(int c);
    public bool ReadOneOf(string s);
    public bool ReadString(string s, bool ignoreCase);
    public bool ReadEnclosed(char open, char close);
}
internal static class MiniExcelLibs.Utils.TypeHelper : object {
    [IteratorStateMachineAttribute("MiniExcelLibs.Utils.TypeHelper/<ConvertToEnumerableDictionary>d__0")]
public static IEnumerable`1<IDictionary`2<string, object>> ConvertToEnumerableDictionary(IDataReader reader);
    public static IEnumerable`1<Type> GetGenericIEnumerables(object o);
    public static bool IsNumericType(Type type, bool isNullableUnderlyingType);
    public static object TypeMapping(T v, ExcelColumnInfo pInfo, object newValue, object itemValue, int rowIndex, string startCell, Configuration _config);
    private static object TypeMappingImpl(T v, ExcelColumnInfo pInfo, Object& newValue, object itemValue, Configuration _config);
}
internal static class MiniExcelLibs.Utils.XmlEncoder : object {
    private static Regex xHHHHRegex;
    private static Regex Uppercase_X_HHHHRegex;
    private static Regex EscapeRegex;
    private static XmlEncoder();
    public static StringBuilder EncodeString(string encodeStr);
    public static string DecodeString(string decodeStr);
    public static string ConvertEscapeChars(string input);
}
[ExtensionAttribute]
internal static class MiniExcelLibs.Utils.XmlReaderHelper : object {
    [ExtensionAttribute]
public static void PassXmlDeclartionAndWorksheet(XmlReader reader);
    public static void SkipToNextSameLevelDom(XmlReader reader);
    public static bool ReadFirstContent(XmlReader reader);
    public static bool SkipContent(XmlReader reader);
    public static bool IsStartElement(XmlReader reader, string name, String[] nss);
    public static string GetAttribute(XmlReader reader, string name, String[] nss);
    [IteratorStateMachineAttribute("MiniExcelLibs.Utils.XmlReaderHelper/<GetSharedStrings>d__6")]
public static IEnumerable`1<string> GetSharedStrings(Stream stream, String[] nss);
}
internal class MiniExcelLibs.Zip.ExcelOpenXmlZip : object {
    private Dictionary`2<string, ZipArchiveEntry> _entries;
    private bool _disposed;
    internal MiniExcelZipArchive zipFile;
    public ReadOnlyCollection`1<ZipArchiveEntry> entries;
    private static XmlReaderSettings XmlSettings;
    public ExcelOpenXmlZip(Stream fileStream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding);
    private static ExcelOpenXmlZip();
    public ZipArchiveEntry GetEntry(string path);
    public XmlReader GetXmlReader(string path);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class MiniExcelLibs.Zip.MiniExcelZipArchive : ZipArchive {
    public MiniExcelZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding);
    public void Dispose();
}
internal class MiniExcelLibs.Zip.ZipPackageInfo : object {
    [CompilerGeneratedAttribute]
private ZipArchiveEntry <ZipArchiveEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public ZipArchiveEntry ZipArchiveEntry { get; public set; }
    public string ContentType { get; public set; }
    public ZipPackageInfo(ZipArchiveEntry zipArchiveEntry, string contentType);
    [CompilerGeneratedAttribute]
public ZipArchiveEntry get_ZipArchiveEntry();
    [CompilerGeneratedAttribute]
public void set_ZipArchiveEntry(ZipArchiveEntry value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
