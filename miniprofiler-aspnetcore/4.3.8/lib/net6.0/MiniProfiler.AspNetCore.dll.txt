[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.MiniProfilerBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseMiniProfiler(IApplicationBuilder builder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class StackExchange.Profiling.EmbeddedProvider : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> <ResourceCache>k__BackingField;
    private IOptions`1<MiniProfilerOptions> _options;
    private IWebHostEnvironment _env;
    private ConcurrentDictionary`2<string, string> ResourceCache { get; }
    public EmbeddedProvider(IOptions`1<MiniProfilerOptions> options, IWebHostEnvironment env);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, string> get_ResourceCache();
    public string GetFile(HttpContext context, PathString file);
    public bool TryGetResource(string filename, String& resource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Internal.MiniProfilerBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public MiniProfilerBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.MiniProfilerExtensions : object {
    [ExtensionAttribute]
public static HtmlString RenderIncludes(MiniProfiler profiler, HttpContext context, RenderOptions renderOptions);
    [ExtensionAttribute]
public static HtmlString RenderIncludes(MiniProfiler profiler, HttpContext context, Nullable`1<RenderPosition> position, Nullable`1<bool> showTrivial, Nullable`1<bool> showTimeWithChildren, Nullable`1<int> maxTracesToShow, Nullable`1<bool> showControls, Nullable`1<bool> startHidden);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.MiniProfilerMiddleware : object {
    private RequestDelegate _next;
    private IWebHostEnvironment _env;
    private IOptions`1<MiniProfilerOptions> _options;
    internal EmbeddedProvider Embedded;
    internal MiniProfilerOptions Options { get; }
    public MiniProfilerMiddleware(RequestDelegate next, IWebHostEnvironment hostingEnvironment, IOptions`1<MiniProfilerOptions> options);
    internal MiniProfilerOptions get_Options();
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<Invoke>d__7")]
public Task Invoke(HttpContext context);
    private bool ShouldProfile(HttpRequest request);
    private void EnsureName(MiniProfiler profiler, HttpContext context);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<SetHeadersAndState>d__10")]
private Task SetHeadersAndState(HttpContext context, MiniProfiler current);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<HandleRequest>d__11")]
private Task HandleRequest(HttpContext context, PathString subPath);
    private static string NotFound(HttpContext context, string message, string contentType);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<AuthorizeRequestAsync>d__13")]
private Task`1<bool> AuthorizeRequestAsync(HttpContext context, bool isList, bool setResponse);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<ResultsIndexAsync>d__14")]
private Task`1<string> ResultsIndexAsync(HttpContext context);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<ResultsListAsync>d__15")]
private Task`1<string> ResultsListAsync(HttpContext context);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfilerMiddleware/<GetSingleProfilerResultAsync>d__16")]
private Task`1<string> GetSingleProfilerResultAsync(HttpContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.MiniProfilerOptions : MiniProfilerBaseOptions {
    [CompilerGeneratedAttribute]
private PathString <RouteBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpRequest, bool> <ShouldProfile>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, bool> <ResultsAuthorize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, Task`1<bool>> <ResultsAuthorizeAsync>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, bool> <ResultsListAuthorize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, Task`1<bool>> <ResultsListAuthorizeAsync>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, string> <UserIdProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableServerTimingHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMvcFilterProfiling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <MvcFilterMinimumSaveMs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMvcViewProfiling>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <MvcViewMinimumSaveMs>k__BackingField;
    public PathString RouteBasePath { get; public set; }
    public Func`2<HttpRequest, bool> ShouldProfile { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, bool> ResultsAuthorize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, Task`1<bool>> ResultsAuthorizeAsync { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, bool> ResultsListAuthorize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, Task`1<bool>> ResultsListAuthorizeAsync { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, string> UserIdProvider { get; public set; }
    public bool EnableServerTimingHeader { get; public set; }
    public bool EnableMvcFilterProfiling { get; public set; }
    public Nullable`1<decimal> MvcFilterMinimumSaveMs { get; public set; }
    public bool EnableMvcViewProfiling { get; public set; }
    public Nullable`1<decimal> MvcViewMinimumSaveMs { get; public set; }
    [CompilerGeneratedAttribute]
public PathString get_RouteBasePath();
    [CompilerGeneratedAttribute]
public void set_RouteBasePath(PathString value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, bool> get_ShouldProfile();
    [CompilerGeneratedAttribute]
public void set_ShouldProfile(Func`2<HttpRequest, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, bool> get_ResultsAuthorize();
    [CompilerGeneratedAttribute]
public void set_ResultsAuthorize(Func`2<HttpRequest, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, Task`1<bool>> get_ResultsAuthorizeAsync();
    [CompilerGeneratedAttribute]
public void set_ResultsAuthorizeAsync(Func`2<HttpRequest, Task`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, bool> get_ResultsListAuthorize();
    [CompilerGeneratedAttribute]
public void set_ResultsListAuthorize(Func`2<HttpRequest, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, Task`1<bool>> get_ResultsListAuthorizeAsync();
    [CompilerGeneratedAttribute]
public void set_ResultsListAuthorizeAsync(Func`2<HttpRequest, Task`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, string> get_UserIdProvider();
    [CompilerGeneratedAttribute]
public void set_UserIdProvider(Func`2<HttpRequest, string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableServerTimingHeader();
    [CompilerGeneratedAttribute]
public void set_EnableServerTimingHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMvcFilterProfiling();
    [CompilerGeneratedAttribute]
public void set_EnableMvcFilterProfiling(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_MvcFilterMinimumSaveMs();
    [CompilerGeneratedAttribute]
public void set_MvcFilterMinimumSaveMs(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public bool get_EnableMvcViewProfiling();
    [CompilerGeneratedAttribute]
public void set_EnableMvcViewProfiling(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_MvcViewMinimumSaveMs();
    [CompilerGeneratedAttribute]
public void set_MvcViewMinimumSaveMs(Nullable`1<decimal> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class StackExchange.Profiling.RequestState : object {
    [NullableAttribute("1")]
private static string HttpContextKey;
    [CompilerGeneratedAttribute]
private bool <IsAuthorized>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Guid> <RequestIDs>k__BackingField;
    public bool IsAuthorized { get; public set; }
    public List`1<Guid> RequestIDs { get; public set; }
    [NullableContextAttribute("1")]
public void Store(HttpContext context);
    [NullableContextAttribute("1")]
public static RequestState Get(HttpContext context);
    [CompilerGeneratedAttribute]
public bool get_IsAuthorized();
    [CompilerGeneratedAttribute]
public void set_IsAuthorized(bool value);
    [CompilerGeneratedAttribute]
public List`1<Guid> get_RequestIDs();
    [CompilerGeneratedAttribute]
public void set_RequestIDs(List`1<Guid> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Storage.MemoryCacheStorage : object {
    private IMemoryCache _cache;
    [CompilerGeneratedAttribute]
private MemoryCacheEntryOptions <CacheEntryOptions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedList`2<ProfilerSortedKey, object> _profiles;
    public static string CacheKeyPrefix;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheDuration>k__BackingField;
    private MemoryCacheEntryOptions CacheEntryOptions { get; }
    public TimeSpan CacheDuration { get; public set; }
    public MemoryCacheStorage(IMemoryCache cache, TimeSpan cacheDuration);
    [CompilerGeneratedAttribute]
private MemoryCacheEntryOptions get_CacheEntryOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheDuration();
    [CompilerGeneratedAttribute]
public void set_CacheDuration(TimeSpan value);
    private static string GetCacheKey(Guid id);
    public sealed virtual List`1<Guid> GetUnviewedIds(string user);
    public sealed virtual Task`1<List`1<Guid>> GetUnviewedIdsAsync(string user);
    private static string GetPerUserUnviewedCacheKey(string user);
    private List`1<Guid> GetPerUserUnviewedIds(string user);
    public sealed virtual IEnumerable`1<Guid> List(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public sealed virtual Task`1<IEnumerable`1<Guid>> ListAsync(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    [NullableContextAttribute("2")]
public sealed virtual MiniProfiler Load(Guid id);
    public sealed virtual Task`1<MiniProfiler> LoadAsync(Guid id);
    public sealed virtual void Save(MiniProfiler profiler);
    public sealed virtual Task SaveAsync(MiniProfiler profiler);
    [NullableContextAttribute("2")]
public sealed virtual void SetUnviewed(string user, Guid id);
    public sealed virtual Task SetUnviewedAsync(string user, Guid id);
    [NullableContextAttribute("2")]
public sealed virtual void SetViewed(string user, Guid id);
    public sealed virtual Task SetViewedAsync(string user, Guid id);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
