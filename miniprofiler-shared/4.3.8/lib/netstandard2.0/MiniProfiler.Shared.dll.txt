[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IMiniProfilerBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.ClientTiming : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MiniProfilerId>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public decimal Start { get; public set; }
    [DataMemberAttribute]
public decimal Duration { get; public set; }
    public Guid Id { get; public set; }
    public Guid MiniProfilerId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public decimal get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(decimal value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_MiniProfilerId();
    [CompilerGeneratedAttribute]
public void set_MiniProfilerId(Guid value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StackExchange.Profiling.ClientTimingHelper : object {
    public static string InitScript;
    public static string TimeScript(string name, string html);
}
[DataContractAttribute]
public class StackExchange.Profiling.ClientTimings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ClientTiming> <Timings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RedirectCount>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public List`1<ClientTiming> Timings { get; public set; }
    [DataMemberAttribute]
public int RedirectCount { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ClientTiming> get_Timings();
    [CompilerGeneratedAttribute]
public void set_Timings(List`1<ClientTiming> value);
    [CompilerGeneratedAttribute]
public int get_RedirectCount();
    [CompilerGeneratedAttribute]
public void set_RedirectCount(int value);
    [NullableContextAttribute("1")]
public static ClientTimings FromRequest(ResultRequest request);
}
public enum StackExchange.Profiling.ColorScheme : Enum {
    public int value__;
    public static ColorScheme Light;
    public static ColorScheme Dark;
    public static ColorScheme Auto;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.CustomTiming : object {
    [NullableAttribute("1")]
private MiniProfiler _profiler;
    private long _startTicks;
    private Nullable`1<decimal> _minSaveMs;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecuteType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTraceSnippet>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <StartMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <DurationMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <FirstFetchDurationMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Errored>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string CommandString { get; public set; }
    [DataMemberAttribute]
public string ExecuteType { get; public set; }
    [DataMemberAttribute]
public string StackTraceSnippet { get; public set; }
    [DataMemberAttribute]
public decimal StartMilliseconds { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> DurationMilliseconds { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> FirstFetchDurationMilliseconds { get; public set; }
    [DataMemberAttribute]
public bool Errored { get; public set; }
    internal string Category { get; internal set; }
    [NullableContextAttribute("1")]
public CustomTiming(MiniProfiler profiler, string commandString, Nullable`1<decimal> minSaveMs, bool includeStackTrace);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_CommandString();
    [CompilerGeneratedAttribute]
public void set_CommandString(string value);
    [CompilerGeneratedAttribute]
public string get_ExecuteType();
    [CompilerGeneratedAttribute]
public void set_ExecuteType(string value);
    [CompilerGeneratedAttribute]
public string get_StackTraceSnippet();
    [CompilerGeneratedAttribute]
public void set_StackTraceSnippet(string value);
    [CompilerGeneratedAttribute]
public decimal get_StartMilliseconds();
    [CompilerGeneratedAttribute]
public void set_StartMilliseconds(decimal value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_DurationMilliseconds();
    [CompilerGeneratedAttribute]
public void set_DurationMilliseconds(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_FirstFetchDurationMilliseconds();
    [CompilerGeneratedAttribute]
public void set_FirstFetchDurationMilliseconds(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public bool get_Errored();
    [CompilerGeneratedAttribute]
public void set_Errored(bool value);
    [CompilerGeneratedAttribute]
internal string get_Category();
    [CompilerGeneratedAttribute]
internal void set_Category(string value);
    public void FirstFetchCompleted();
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface StackExchange.Profiling.Data.IDbProfiler {
    public bool IsActive { get; }
    public abstract virtual bool get_IsActive();
    public abstract virtual void ExecuteStart(IDbCommand profiledDbCommand, SqlExecuteType executeType);
    public abstract virtual void ExecuteFinish(IDbCommand profiledDbCommand, SqlExecuteType executeType, DbDataReader reader);
    public abstract virtual void ReaderFinish(IDataReader reader);
    public abstract virtual void OnError(IDbCommand profiledDbCommand, SqlExecuteType executeType, Exception exception);
}
public class StackExchange.Profiling.Data.Link`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Link`2<TKey, TValue> <Tail>k__BackingField;
    public TKey Key { get; }
    public TValue Value { get; }
    public Link`2<TKey, TValue> Tail { get; }
    private Link`2(TKey key, TValue value, Link`2<TKey, TValue> tail);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public Link`2<TKey, TValue> get_Tail();
    public static bool TryGet(Link`2<TKey, TValue> link, TKey key, TValue& value);
    public static bool TryAdd(Link`2& head, TKey key, TValue& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class StackExchange.Profiling.Data.ProfiledDbCommand : DbCommand {
    private DbCommand _command;
    [NullableAttribute("2")]
private DbConnection _connection;
    [NullableAttribute("2")]
private DbTransaction _transaction;
    [NullableAttribute("2")]
private IDbProfiler _profiler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Link`2<Type, Action`2<IDbCommand, bool>> bindByNameCache;
    private bool _bindByName;
    protected bool AlwaysWrapReaders { get; }
    public bool BindByName { get; public set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    [NullableAttribute("2")]
protected DbTransaction DbTransaction { get; protected set; }
    public bool DesignTimeVisible { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Please use WrappedCommand", "False")]
public DbCommand InternalCommand { get; }
    public DbCommand WrappedCommand { get; }
    [NullableContextAttribute("2")]
public ProfiledDbCommand(DbCommand command, DbConnection connection, IDbProfiler profiler);
    protected virtual bool get_AlwaysWrapReaders();
    public bool get_BindByName();
    public void set_BindByName(bool value);
    private static Action`2<IDbCommand, bool> GetBindByName(Type commandType);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [NullableContextAttribute("2")]
protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("2")]
private void UnwrapAndAssignConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    [NullableContextAttribute("2")]
protected virtual DbTransaction get_DbTransaction();
    [NullableContextAttribute("2")]
protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    protected virtual DbDataReader CreateDbDataReader(DbDataReader original, CommandBehavior behavior, IDbProfiler profiler);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [AsyncStateMachineAttribute("StackExchange.Profiling.Data.ProfiledDbCommand/<ExecuteDbDataReaderAsync>d__39")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    [AsyncStateMachineAttribute("StackExchange.Profiling.Data.ProfiledDbCommand/<ExecuteNonQueryAsync>d__41")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    [AsyncStateMachineAttribute("StackExchange.Profiling.Data.ProfiledDbCommand/<ExecuteScalarAsync>d__43")]
public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public virtual void Cancel();
    public virtual void Prepare();
    protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    public DbCommand get_InternalCommand();
    public DbCommand get_WrappedCommand();
    private sealed virtual override object System.ICloneable.Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerCategoryAttribute("")]
public class StackExchange.Profiling.Data.ProfiledDbConnection : DbConnection {
    private DbConnection _connection;
    [NullableAttribute("2")]
private IDbProfiler _profiler;
    [NullableAttribute("2")]
public IDbProfiler Profiler { get; }
    public DbConnection WrappedConnection { get; }
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    public string ServerVersion { get; }
    public ConnectionState State { get; }
    protected bool CanRaiseEvents { get; }
    public ProfiledDbConnection(DbConnection connection, IDbProfiler profiler);
    [NullableContextAttribute("2")]
public IDbProfiler get_Profiler();
    public DbConnection get_WrappedConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    public virtual void Open();
    [AsyncStateMachineAttribute("StackExchange.Profiling.Data.ProfiledDbConnection/<OpenAsync>d__23")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    protected virtual DbCommand CreateDbCommand(DbCommand original, IDbProfiler profiler);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    private void StateChangeHandler(object sender, StateChangeEventArgs stateChangeEventArguments);
    protected virtual bool get_CanRaiseEvents();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Data.ProfiledDbDataAdapter : DbDataAdapter {
    [NullableAttribute("1")]
private static DbDataReader TokenReader;
    private IDbProfiler _profiler;
    private IDbCommand _selectCommand;
    private IDbCommand _insertCommand;
    private IDbCommand _updateCommand;
    private IDbCommand _deleteCommand;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDbDataAdapter <InternalAdapter>k__BackingField;
    [NullableAttribute("1")]
public IDbDataAdapter InternalAdapter { get; }
    public MissingMappingAction MissingMappingAction { get; public set; }
    public MissingSchemaAction MissingSchemaAction { get; public set; }
    [NullableAttribute("1")]
public ITableMappingCollection TableMappings { get; }
    public IDbCommand SelectCommand { get; public set; }
    public IDbCommand InsertCommand { get; public set; }
    public IDbCommand UpdateCommand { get; public set; }
    public IDbCommand DeleteCommand { get; public set; }
    [NullableContextAttribute("1")]
public ProfiledDbDataAdapter(IDbDataAdapter wrappedAdapter, IDbProfiler profiler);
    private static ProfiledDbDataAdapter();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IDbDataAdapter get_InternalAdapter();
    [NullableContextAttribute("1")]
private void InitCommands(IDbDataAdapter wrappedAdapter);
    [NullableContextAttribute("1")]
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    [NullableContextAttribute("1")]
public int Fill(DataSet dataSet);
    [NullableContextAttribute("1")]
public int Fill(DataTable dataTable);
    [NullableContextAttribute("1")]
public IDataParameter[] GetFillParameters();
    public MissingMappingAction get_MissingMappingAction();
    public void set_MissingMappingAction(MissingMappingAction value);
    public MissingSchemaAction get_MissingSchemaAction();
    public void set_MissingSchemaAction(MissingSchemaAction value);
    [NullableContextAttribute("1")]
public ITableMappingCollection get_TableMappings();
    public IDbCommand get_SelectCommand();
    public void set_SelectCommand(IDbCommand value);
    public IDbCommand get_InsertCommand();
    public void set_InsertCommand(IDbCommand value);
    public IDbCommand get_UpdateCommand();
    public void set_UpdateCommand(IDbCommand value);
    public IDbCommand get_DeleteCommand();
    public void set_DeleteCommand(IDbCommand value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class StackExchange.Profiling.Data.ProfiledDbDataReader : DbDataReader {
    [NullableAttribute("2")]
private IDbProfiler _profiler;
    [CompilerGeneratedAttribute]
private CommandBehavior <Behavior>k__BackingField;
    [CompilerGeneratedAttribute]
private DbDataReader <WrappedReader>k__BackingField;
    public CommandBehavior Behavior { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public DbDataReader WrappedReader { get; }
    public object Item { get; }
    public object Item { get; }
    public ProfiledDbDataReader(DbDataReader reader, IDbProfiler profiler);
    public ProfiledDbDataReader(DbDataReader reader, CommandBehavior behavior, IDbProfiler profiler);
    [CompilerGeneratedAttribute]
public CommandBehavior get_Behavior();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    [CompilerGeneratedAttribute]
public DbDataReader get_WrappedReader();
    public virtual object get_Item(string name);
    public virtual object get_Item(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public DbDataReader GetData(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    [NullableContextAttribute("0")]
public virtual T GetFieldValue(int ordinal);
    [NullableContextAttribute("0")]
public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Data.ProfiledDbProviderFactory : DbProviderFactory {
    private DbProviderFactory _factory;
    private bool _alwaysWrap;
    public static ProfiledDbProviderFactory Instance;
    public DbProviderFactory WrappedDbProviderFactory { get; }
    public bool CanCreateDataSourceEnumerator { get; }
    public ProfiledDbProviderFactory(DbProviderFactory factory, bool alwaysWrap);
    private static ProfiledDbProviderFactory();
    public DbProviderFactory get_WrappedDbProviderFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbParameter CreateParameter();
    public void InitProfiledDbProviderFactory(DbProviderFactory tail);
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Data.ProfiledDbTransaction : DbTransaction {
    private ProfiledDbConnection _connection;
    private DbTransaction _transaction;
    protected DbConnection DbConnection { get; }
    public DbTransaction WrappedTransaction { get; }
    public IsolationLevel IsolationLevel { get; }
    public ProfiledDbTransaction(DbTransaction transaction, ProfiledDbConnection connection);
    protected virtual DbConnection get_DbConnection();
    public DbTransaction get_WrappedTransaction();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    public virtual void Rollback();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Data.SimpleProfiledCommand : object {
    private IDbCommand _command;
    private IDbConnection _connection;
    [NullableAttribute("2")]
private IDbProfiler _profiler;
    [NullableAttribute("2")]
private IDbTransaction _transaction;
    public IDbConnection Connection { get; public set; }
    [NullableAttribute("2")]
public IDbTransaction Transaction { get; public set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public SimpleProfiledCommand(IDbCommand command, IDbConnection connection, IDbProfiler profiler);
    public sealed virtual void Prepare();
    public sealed virtual void Cancel();
    public sealed virtual IDbDataParameter CreateParameter();
    public sealed virtual int ExecuteNonQuery();
    public sealed virtual IDataReader ExecuteReader();
    public sealed virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public sealed virtual object ExecuteScalar();
    private TResult ProfileWith(SqlExecuteType type, Func`1<TResult> func);
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual void set_Connection(IDbConnection value);
    [NullableContextAttribute("2")]
public sealed virtual IDbTransaction get_Transaction();
    [NullableContextAttribute("2")]
public sealed virtual void set_Transaction(IDbTransaction value);
    public sealed virtual string get_CommandText();
    public sealed virtual void set_CommandText(string value);
    public sealed virtual int get_CommandTimeout();
    public sealed virtual void set_CommandTimeout(int value);
    public sealed virtual CommandType get_CommandType();
    public sealed virtual void set_CommandType(CommandType value);
    public sealed virtual IDataParameterCollection get_Parameters();
    public sealed virtual UpdateRowSource get_UpdatedRowSource();
    public sealed virtual void set_UpdatedRowSource(UpdateRowSource value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SimpleProfiledDataReader <ExecuteReader>b__9_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <ExecuteScalar>b__11_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Data.SimpleProfiledConnection : object {
    [NullableAttribute("2")]
private IDbProfiler _profiler;
    private IDbConnection _connection;
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public IDbConnection WrappedConnection { get; }
    public SimpleProfiledConnection(IDbConnection connection, IDbProfiler profiler);
    public sealed virtual string get_ConnectionString();
    public sealed virtual void set_ConnectionString(string value);
    public sealed virtual int get_ConnectionTimeout();
    public sealed virtual string get_Database();
    public sealed virtual ConnectionState get_State();
    public IDbConnection get_WrappedConnection();
    public sealed virtual IDbTransaction BeginTransaction();
    public sealed virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public sealed virtual void ChangeDatabase(string databaseName);
    public sealed virtual IDbCommand CreateCommand();
    public sealed virtual void Close();
    public sealed virtual void Open();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class StackExchange.Profiling.Data.SimpleProfiledDataReader : object {
    private IDataReader _reader;
    [NullableAttribute("2")]
private IDbProfiler _profiler;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public SimpleProfiledDataReader(IDataReader reader, IDbProfiler profiler);
    public sealed virtual int get_Depth();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool get_IsClosed();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int ordinal);
    public sealed virtual bool GetBoolean(int ordinal);
    public sealed virtual byte GetByte(int ordinal);
    public sealed virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public sealed virtual char GetChar(int ordinal);
    public sealed virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public sealed virtual IDataReader GetData(int ordinal);
    public sealed virtual string GetDataTypeName(int ordinal);
    public sealed virtual DateTime GetDateTime(int ordinal);
    public sealed virtual decimal GetDecimal(int ordinal);
    public sealed virtual double GetDouble(int ordinal);
    public sealed virtual Type GetFieldType(int ordinal);
    public sealed virtual float GetFloat(int ordinal);
    public sealed virtual Guid GetGuid(int ordinal);
    public sealed virtual short GetInt16(int ordinal);
    public sealed virtual int GetInt32(int ordinal);
    public sealed virtual long GetInt64(int ordinal);
    public sealed virtual string GetName(int ordinal);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual string GetString(int ordinal);
    public sealed virtual object GetValue(int ordinal);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int ordinal);
    public sealed virtual void Close();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Data.SimpleProfiledTransaction : object {
    private SimpleProfiledConnection _connection;
    [CompilerGeneratedAttribute]
private IDbTransaction <WrappedTransaction>k__BackingField;
    public IDbTransaction WrappedTransaction { get; }
    public IDbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public SimpleProfiledTransaction(IDbTransaction transaction, SimpleProfiledConnection connection);
    [CompilerGeneratedAttribute]
public IDbTransaction get_WrappedTransaction();
    public sealed virtual IDbConnection get_Connection();
    public sealed virtual IsolationLevel get_IsolationLevel();
    public sealed virtual void Commit();
    public sealed virtual void Rollback();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public enum StackExchange.Profiling.Data.SqlExecuteType : Enum {
    public byte value__;
    public static SqlExecuteType None;
    public static SqlExecuteType NonQuery;
    public static SqlExecuteType Scalar;
    public static SqlExecuteType Reader;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.DefaultProfilerProvider : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<MiniProfiler> _profiler;
    [NullableAttribute("2")]
public MiniProfiler CurrentProfiler { get; protected set; }
    private static DefaultProfilerProvider();
    [NullableContextAttribute("2")]
public virtual MiniProfiler get_CurrentProfiler();
    [NullableContextAttribute("2")]
protected virtual void set_CurrentProfiler(MiniProfiler value);
    [NullableContextAttribute("2")]
public virtual MiniProfiler Start(string profilerName, MiniProfilerBaseOptions options);
    public virtual void Stopped(MiniProfiler profiler, bool discardResults);
    [AsyncStateMachineAttribute("StackExchange.Profiling.DefaultProfilerProvider/<StoppedAsync>d__6")]
public virtual Task StoppedAsync(MiniProfiler profiler, bool discardResults);
    protected void Save(MiniProfiler profiler);
    [AsyncStateMachineAttribute("StackExchange.Profiling.DefaultProfilerProvider/<SaveAsync>d__8")]
protected Task SaveAsync(MiniProfiler profiler);
}
public interface StackExchange.Profiling.Helpers.IStopwatch {
    public long ElapsedTicks { get; }
    public long Frequency { get; }
    public bool IsRunning { get; }
    public abstract virtual long get_ElapsedTicks();
    public abstract virtual long get_Frequency();
    public abstract virtual bool get_IsRunning();
    public abstract virtual void Stop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Helpers.ProfilerSortedKey : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    public Guid Id { get; }
    public DateTime Started { get; }
    public ProfilerSortedKey(MiniProfiler profiler);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public DateTime get_Started();
    public sealed virtual int CompareTo(ProfilerSortedKey other);
}
[ExtensionAttribute]
public static class StackExchange.Profiling.Helpers.ProfilerSortedKeyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int BinaryClosestSearch(SortedList`2<ProfilerSortedKey, T> list, DateTime date);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class StackExchange.Profiling.Helpers.StackTraceExtensions : object {
    private static Char[] _dot;
    private static Regex _genericTypeRegex;
    private static String[] _singleT;
    private static Dictionary`2<string, String[]> _commonGenerics;
    private static StackTraceExtensions();
    [ExtensionAttribute]
internal static StringBuilder AppendHtmlEncode(StringBuilder sb, string s);
    [ExtensionAttribute]
internal static StringBuilder AppendGenericsHtml(StringBuilder sb, string typeOrMethod);
    [CompilerGeneratedAttribute]
internal static void <AppendGenericsHtml>g__AppendArgs|5_0(String[] tArgs, <>c__DisplayClass5_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StackExchange.Profiling.Helpers.StackTraceSnippet : object {
    private static ConcurrentDictionary`2<Assembly, string> AssemblyNames;
    private static ConcurrentDictionary`2<Module, string> ModuleNames;
    private static StackTraceSnippet();
    public static string Get(MiniProfilerBaseOptions options);
    [CompilerGeneratedAttribute]
internal static bool <Get>g__ShouldExcludeType|2_0(MethodBase method, <>c__DisplayClass2_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class StackExchange.Profiling.Helpers.StackTraceUtils : object {
    internal static string Space;
    internal static string NoSpace;
    private static Char[] NewLine_CarriageReturn;
    private static string EndStack;
    private static HashSet`1<string> _asyncFrames;
    private static Regex _regex;
    [CompilerGeneratedAttribute]
private static Char[] <Backslash>k__BackingField;
    private static Char[] Backslash { get; }
    private static StackTraceUtils();
    internal static string HtmlPrettify(string stackTrace, Nullable`1<int> commonStart);
    [CompilerGeneratedAttribute]
private static Char[] get_Backslash();
    private static string GetSubPath(string sourcePath, string type);
    private static string NormalizeMethodName(string method);
    [CompilerGeneratedAttribute]
internal static string <HtmlPrettify>g__GetBetween|7_0(Capture prev, Capture next, <>c__DisplayClass7_0& );
}
[NullableContextAttribute("2")]
public interface StackExchange.Profiling.IAsyncProfilerProvider {
    public MiniProfiler CurrentProfiler { get; }
    public abstract virtual MiniProfiler get_CurrentProfiler();
    public abstract virtual MiniProfiler Start(string profilerName, MiniProfilerBaseOptions options);
    [NullableContextAttribute("1")]
public abstract virtual void Stopped(MiniProfiler profiler, bool discardResults);
    [NullableContextAttribute("1")]
public abstract virtual Task StoppedAsync(MiniProfiler profiler, bool discardResults);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Internal.DiagnosticInitializer : object {
    private List`1<IDisposable> _subscriptions;
    private IEnumerable`1<IMiniProfilerDiagnosticListener> _diagnosticListeners;
    private bool _initialized;
    public DiagnosticInitializer(IEnumerable`1<IMiniProfilerDiagnosticListener> diagnosticListeners);
    public void Start();
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnNext(DiagnosticListener value);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnError(Exception error);
    private sealed virtual override void System.IObserver<System.Diagnostics.DiagnosticListener>.OnCompleted();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.Internal.ExtensionMethods : object {
    [NullableAttribute("1")]
private static JsonSerializerSettings defaultSettings;
    [NullableAttribute("1")]
private static JsonSerializerSettings htmlEscapeSettings;
    private static ExtensionMethods();
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
    [ExtensionAttribute]
public static bool HasValue(string value);
    [ExtensionAttribute]
public static string Truncate(string s, int maxLength);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Contains(string s, string value, StringComparison comparison);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string EnsureTrailingSlash(string input);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToJson(List`1<Guid> guids);
    [ExtensionAttribute]
public static string ToJson(MiniProfiler profiler, bool htmlEscape);
    [ExtensionAttribute]
public static string ToJson(object o);
    [ExtensionAttribute]
public static T FromJson(string s);
    [ExtensionAttribute]
public static bool TryRemove(Dictionary`2<TKey, TValue> dict, TKey key, TValue& value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.Internal.IDataParameterExtensions : object {
    [ExtensionAttribute]
public static string GetStringValue(IDataParameter parameter);
    [ExtensionAttribute]
public static int GetSize(IDbDataParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.Internal.IDbCommandExtensions : object {
    private static Regex commandSpacing;
    private static IDbCommandExtensions();
    [ExtensionAttribute]
public static CustomTiming GetTiming(IDbCommand command, string commandType, MiniProfiler profiler, string customType);
    [ExtensionAttribute]
public static string GetReadableCommand(IDbCommand command);
    [ExtensionAttribute]
public static List`1<SqlTimingParameter> GetParameters(IDbCommand command);
}
[NullableContextAttribute("1")]
public interface StackExchange.Profiling.Internal.IMiniProfilerDiagnosticListener {
    public string ListenerName { get; }
    public abstract virtual string get_ListenerName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Internal.MiniProfilerBaseOptions : object {
    [CompilerGeneratedAttribute]
private static Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionHash>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludedAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludedMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoredPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxUnviewedProfiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StackMaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackConnectionOpenClose>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <TrivialDurationThresholdMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopupShowTimeWithChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopupShowTrivial>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PopupMaxTracesToShow>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderPosition <PopupRenderPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PopupDecimalPlaces>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorScheme <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopupToggleKeyboardShortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopupStartHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowControls>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoredDuplicateExecuteTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeStackTraceSnippetFromCustomTimings>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncStorage <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlFormatter <SqlFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncProfilerProvider <ProfilerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IStopwatch> <StopwatchProvider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Timing, IDisposable> <TimingInstrumentationProvider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Exception> <OnInternalError>k__BackingField;
    public static Version Version { get; }
    public string VersionHash { get; public set; }
    public bool EnableDebugMode { get; public set; }
    public HashSet`1<string> ExcludedAssemblies { get; }
    public HashSet`1<string> ExcludedTypes { get; }
    public HashSet`1<string> ExcludedMethods { get; }
    public HashSet`1<string> IgnoredPaths { get; }
    public int MaxUnviewedProfiles { get; public set; }
    public int StackMaxLength { get; public set; }
    public bool TrackConnectionOpenClose { get; public set; }
    public decimal TrivialDurationThresholdMilliseconds { get; public set; }
    public bool PopupShowTimeWithChildren { get; public set; }
    public bool PopupShowTrivial { get; public set; }
    public int PopupMaxTracesToShow { get; public set; }
    public RenderPosition PopupRenderPosition { get; public set; }
    public int PopupDecimalPlaces { get; public set; }
    public ColorScheme ColorScheme { get; public set; }
    public string PopupToggleKeyboardShortcut { get; public set; }
    public bool PopupStartHidden { get; public set; }
    public bool ShowControls { get; public set; }
    public HashSet`1<string> IgnoredDuplicateExecuteTypes { get; }
    public bool ExcludeStackTraceSnippetFromCustomTimings { get; public set; }
    public IAsyncStorage Storage { get; public set; }
    public ISqlFormatter SqlFormatter { get; public set; }
    public IAsyncProfilerProvider ProfilerProvider { get; public set; }
    public Func`1<IStopwatch> StopwatchProvider { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Timing, IDisposable> TimingInstrumentationProvider { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<Exception> OnInternalError { get; public set; }
    private static MiniProfilerBaseOptions();
    [CompilerGeneratedAttribute]
public static Version get_Version();
    [CompilerGeneratedAttribute]
public virtual string get_VersionHash();
    [CompilerGeneratedAttribute]
public virtual void set_VersionHash(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugMode();
    [CompilerGeneratedAttribute]
public void set_EnableDebugMode(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludedAssemblies();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludedTypes();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludedMethods();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoredPaths();
    [CompilerGeneratedAttribute]
public int get_MaxUnviewedProfiles();
    [CompilerGeneratedAttribute]
public void set_MaxUnviewedProfiles(int value);
    [CompilerGeneratedAttribute]
public int get_StackMaxLength();
    [CompilerGeneratedAttribute]
public void set_StackMaxLength(int value);
    [CompilerGeneratedAttribute]
public bool get_TrackConnectionOpenClose();
    [CompilerGeneratedAttribute]
public void set_TrackConnectionOpenClose(bool value);
    [CompilerGeneratedAttribute]
public decimal get_TrivialDurationThresholdMilliseconds();
    [CompilerGeneratedAttribute]
public void set_TrivialDurationThresholdMilliseconds(decimal value);
    [CompilerGeneratedAttribute]
public bool get_PopupShowTimeWithChildren();
    [CompilerGeneratedAttribute]
public void set_PopupShowTimeWithChildren(bool value);
    [CompilerGeneratedAttribute]
public bool get_PopupShowTrivial();
    [CompilerGeneratedAttribute]
public void set_PopupShowTrivial(bool value);
    [CompilerGeneratedAttribute]
public int get_PopupMaxTracesToShow();
    [CompilerGeneratedAttribute]
public void set_PopupMaxTracesToShow(int value);
    [CompilerGeneratedAttribute]
public RenderPosition get_PopupRenderPosition();
    [CompilerGeneratedAttribute]
public void set_PopupRenderPosition(RenderPosition value);
    [CompilerGeneratedAttribute]
public int get_PopupDecimalPlaces();
    [CompilerGeneratedAttribute]
public void set_PopupDecimalPlaces(int value);
    [CompilerGeneratedAttribute]
public ColorScheme get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(ColorScheme value);
    [CompilerGeneratedAttribute]
public string get_PopupToggleKeyboardShortcut();
    [CompilerGeneratedAttribute]
public void set_PopupToggleKeyboardShortcut(string value);
    [CompilerGeneratedAttribute]
public bool get_PopupStartHidden();
    [CompilerGeneratedAttribute]
public void set_PopupStartHidden(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowControls();
    [CompilerGeneratedAttribute]
public void set_ShowControls(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IgnoredDuplicateExecuteTypes();
    [CompilerGeneratedAttribute]
public bool get_ExcludeStackTraceSnippetFromCustomTimings();
    [CompilerGeneratedAttribute]
public void set_ExcludeStackTraceSnippetFromCustomTimings(bool value);
    [CompilerGeneratedAttribute]
public IAsyncStorage get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(IAsyncStorage value);
    [CompilerGeneratedAttribute]
public ISqlFormatter get_SqlFormatter();
    [CompilerGeneratedAttribute]
public void set_SqlFormatter(ISqlFormatter value);
    [CompilerGeneratedAttribute]
public IAsyncProfilerProvider get_ProfilerProvider();
    [CompilerGeneratedAttribute]
public void set_ProfilerProvider(IAsyncProfilerProvider value);
    [CompilerGeneratedAttribute]
public Func`1<IStopwatch> get_StopwatchProvider();
    [CompilerGeneratedAttribute]
public void set_StopwatchProvider(Func`1<IStopwatch> value);
    [NullableContextAttribute("2")]
public MiniProfiler StartProfiler(string profilerName);
    [CompilerGeneratedAttribute]
public Func`2<Timing, IDisposable> get_TimingInstrumentationProvider();
    [CompilerGeneratedAttribute]
public void set_TimingInstrumentationProvider(Func`2<Timing, IDisposable> value);
    protected virtual void OnConfigure();
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_OnInternalError();
    [CompilerGeneratedAttribute]
public void set_OnInternalError(Action`1<Exception> value);
    internal void Configure();
}
[ExtensionAttribute]
public static class StackExchange.Profiling.Internal.MiniProfilerBaseOptionsExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static List`1<Guid> ExpireAndGetUnviewed(MiniProfilerBaseOptions options, string user);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("StackExchange.Profiling.Internal.MiniProfilerBaseOptionsExtensions/<ExpireAndGetUnviewedAsync>d__1")]
[ExtensionAttribute]
public static Task`1<List`1<Guid>> ExpireAndGetUnviewedAsync(MiniProfilerBaseOptions options, string user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class StackExchange.Profiling.Internal.Render : object {
    public static string Includes(MiniProfiler profiler, string path, bool isAuthorized, RenderOptions renderOptions, List`1<Guid> requestIDs);
    public static string Includes(MiniProfiler profiler, string path, bool isAuthorized, List`1<Guid> requestIDs, Nullable`1<RenderPosition> position, Nullable`1<bool> showTrivial, Nullable`1<bool> showTimeWithChildren, Nullable`1<int> maxTracesToShow, Nullable`1<bool> showControls, Nullable`1<bool> startHidden);
    public static string SingleResultHtml(MiniProfiler profiler, string path);
    public static string ResultListHtml(MiniProfilerBaseOptions options, string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Internal.ResultRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Id>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ClientTiming> <Performance>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ClientTiming> <Probes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RedirectCount>k__BackingField;
    private static JsonSerializer _serializer;
    public Nullable`1<Guid> Id { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ClientTiming> Performance { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ClientTiming> Probes { get; public set; }
    public Nullable`1<int> RedirectCount { get; public set; }
    public int TimingCount { get; }
    private static ResultRequest();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public List`1<ClientTiming> get_Performance();
    [CompilerGeneratedAttribute]
public void set_Performance(List`1<ClientTiming> value);
    [CompilerGeneratedAttribute]
public List`1<ClientTiming> get_Probes();
    [CompilerGeneratedAttribute]
public void set_Probes(List`1<ClientTiming> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RedirectCount();
    [CompilerGeneratedAttribute]
public void set_RedirectCount(Nullable`1<int> value);
    public int get_TimingCount();
    public static bool TryParse(Stream stream, ResultRequest& result);
}
public class StackExchange.Profiling.Internal.StopwatchWrapper : object {
    [NullableAttribute("1")]
private Stopwatch _stopwatch;
    public long ElapsedTicks { get; }
    public long Frequency { get; }
    public bool IsRunning { get; }
    [NullableContextAttribute("1")]
public static IStopwatch StartNew();
    public sealed virtual long get_ElapsedTicks();
    public sealed virtual long get_Frequency();
    public sealed virtual bool get_IsRunning();
    public sealed virtual void Stop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.Internal.StringBuilderCache : object {
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder _perThread;
    [NullableAttribute("2")]
private static StringBuilder _shared;
    private static int DefaultCapacity;
    public static StringBuilder Get(int capacity);
    [ExtensionAttribute]
public static string ToStringRecycle(StringBuilder builder);
    [ExtensionAttribute]
public static string ToStringRecycle(StringBuilder builder, int startIndex, int length);
    public static void Recycle(StringBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.MiniProfiler : object {
    [CompilerGeneratedAttribute]
private MiniProfilerBaseOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <DurationMilliseconds>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomLinks>k__BackingField;
    private Timing _root;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RootTimingId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClientTimings <ClientTimings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClientTimingsRedirectCount>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasUserViewed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLocal`1<Timing> _head;
    [NullableAttribute("2")]
private Timing _lastSetHead;
    [CompilerGeneratedAttribute]
private IStopwatch <Stopwatch>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IAsyncStorage <Storage>k__BackingField;
    private object _dbLocker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Tuple`2<object, SqlExecuteType>, CustomTiming> _inProgress;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IDataReader, CustomTiming> _inProgressReaders;
    [CompilerGeneratedAttribute]
private static MiniProfilerBaseOptions <DefaultOptions>k__BackingField;
    [IgnoreDataMemberAttribute]
public MiniProfilerBaseOptions Options { get; }
    internal bool IsActive { get; internal set; }
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public DateTime Started { get; public set; }
    [DataMemberAttribute]
public decimal DurationMilliseconds { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string MachineName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public Dictionary`2<string, string> CustomLinks { get; public set; }
    [NullableAttribute("2")]
public string CustomLinksJson { get; public set; }
    [DataMemberAttribute]
public Timing Root { get; public set; }
    public Nullable`1<Guid> RootTimingId { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public ClientTimings ClientTimings { get; public set; }
    public Nullable`1<int> ClientTimingsRedirectCount { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string User { get; public set; }
    [DataMemberAttribute]
public bool HasUserViewed { get; public set; }
    [NullableAttribute("2")]
public Timing Head { get; public set; }
    internal long ElapsedTicks { get; }
    internal IStopwatch Stopwatch { get; internal set; }
    [NullableAttribute("2")]
public static MiniProfiler Current { get; }
    [NullableAttribute("2")]
[IgnoreDataMemberAttribute]
public IAsyncStorage Storage { get; public set; }
    private bool StackExchange.Profiling.Data.IDbProfiler.IsActive { get; }
    public static MiniProfilerBaseOptions DefaultOptions { get; private set; }
    public MiniProfiler(string name, MiniProfilerBaseOptions options);
    private static MiniProfiler();
    [CompilerGeneratedAttribute]
public MiniProfilerBaseOptions get_Options();
    [CompilerGeneratedAttribute]
internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Started();
    [CompilerGeneratedAttribute]
public void set_Started(DateTime value);
    [CompilerGeneratedAttribute]
public decimal get_DurationMilliseconds();
    [CompilerGeneratedAttribute]
public void set_DurationMilliseconds(decimal value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MachineName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomLinks();
    [CompilerGeneratedAttribute]
public void set_CustomLinks(Dictionary`2<string, string> value);
    [NullableContextAttribute("2")]
public string get_CustomLinksJson();
    [NullableContextAttribute("2")]
public void set_CustomLinksJson(string value);
    public Timing get_Root();
    public void set_Root(Timing value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_RootTimingId();
    [CompilerGeneratedAttribute]
public void set_RootTimingId(Nullable`1<Guid> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ClientTimings get_ClientTimings();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ClientTimings(ClientTimings value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClientTimingsRedirectCount();
    [CompilerGeneratedAttribute]
public void set_ClientTimingsRedirectCount(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_User();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public bool get_HasUserViewed();
    [CompilerGeneratedAttribute]
public void set_HasUserViewed(bool value);
    [NullableContextAttribute("2")]
public Timing get_Head();
    [NullableContextAttribute("2")]
public void set_Head(Timing value);
    internal long get_ElapsedTicks();
    [CompilerGeneratedAttribute]
internal IStopwatch get_Stopwatch();
    [CompilerGeneratedAttribute]
internal void set_Stopwatch(IStopwatch value);
    public IStopwatch GetStopwatch();
    [NullableContextAttribute("2")]
public static MiniProfiler get_Current();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IAsyncStorage get_Storage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Storage(IAsyncStorage value);
    public bool Stop(bool discardResults);
    [AsyncStateMachineAttribute("StackExchange.Profiling.MiniProfiler/<StopAsync>d__79")]
public Task`1<bool> StopAsync(bool discardResults);
    private bool InnerStop();
    public static MiniProfiler FromJson(string json);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [IteratorStateMachineAttribute("StackExchange.Profiling.MiniProfiler/<GetTimingHierarchy>d__85")]
public IEnumerable`1<Timing> GetTimingHierarchy();
    public MiniProfiler Clone();
    internal Timing StepImpl(string name, Nullable`1<decimal> minSaveMs, Nullable`1<bool> includeChildrenWithMinSave);
    internal decimal GetRoundedMilliseconds(long ticks);
    internal decimal GetDurationMilliseconds(long startTicks);
    private sealed virtual override void StackExchange.Profiling.Data.IDbProfiler.ExecuteStart(IDbCommand profiledDbCommand, SqlExecuteType executeType);
    private sealed virtual override void StackExchange.Profiling.Data.IDbProfiler.ExecuteFinish(IDbCommand profiledDbCommand, SqlExecuteType executeType, DbDataReader reader);
    private sealed virtual override void StackExchange.Profiling.Data.IDbProfiler.ReaderFinish(IDataReader reader);
    private sealed virtual override void StackExchange.Profiling.Data.IDbProfiler.OnError(IDbCommand profiledDbCommand, SqlExecuteType executeType, Exception exception);
    private sealed virtual override bool StackExchange.Profiling.Data.IDbProfiler.get_IsActive();
    [CompilerGeneratedAttribute]
public static MiniProfilerBaseOptions get_DefaultOptions();
    [CompilerGeneratedAttribute]
private static void set_DefaultOptions(MiniProfilerBaseOptions value);
    public static T Configure(T options);
    [NullableContextAttribute("2")]
public static MiniProfiler StartNew(string profilerName);
    public string GetServerTimingHeader();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.MiniProfilerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T Inline(MiniProfiler profiler, Func`1<T> selector, string name);
    [ExtensionAttribute]
public static Timing Step(MiniProfiler profiler, string name);
    [ExtensionAttribute]
public static Timing StepIf(MiniProfiler profiler, string name, decimal minSaveMs, bool includeChildren);
    [ExtensionAttribute]
public static CustomTiming CustomTiming(MiniProfiler profiler, string category, string commandString, string executeType, bool includeStackTrace);
    [ExtensionAttribute]
public static CustomTiming CustomTimingIf(MiniProfiler profiler, string category, string commandString, decimal minSaveMs, string executeType, bool includeStackTrace);
    [ExtensionAttribute]
public static IDisposable Ignore(MiniProfiler profiler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddProfilerResults(MiniProfiler profiler, MiniProfiler externalProfiler);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddCustomLink(MiniProfiler profiler, string text, string url);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string RenderPlainText(MiniProfiler profiler, bool htmlEncode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.MiniProfilerOptionsExtensions : object {
    [ExtensionAttribute]
public static T ExcludeAssembly(T options, string assembly);
    [ExtensionAttribute]
public static T ExcludeMethod(T options, string method);
    [ExtensionAttribute]
public static T ExcludeType(T options, string type);
    [ExtensionAttribute]
public static T IgnorePath(T options, string path);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class StackExchange.Profiling.RenderOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<RenderPosition> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowTrivial>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowTimeWithChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTracesToShow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowControls>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StartHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopupToggleKeyboardShortcut>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TrivialDurationThresholdMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ColorScheme> <ColorScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DecimalPlaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    public Nullable`1<RenderPosition> Position { get; public set; }
    public Nullable`1<bool> ShowTrivial { get; public set; }
    public Nullable`1<bool> ShowTimeWithChildren { get; public set; }
    public Nullable`1<int> MaxTracesToShow { get; public set; }
    public Nullable`1<bool> ShowControls { get; public set; }
    public Nullable`1<bool> StartHidden { get; public set; }
    public string PopupToggleKeyboardShortcut { get; public set; }
    public Nullable`1<int> TrivialDurationThresholdMilliseconds { get; public set; }
    public Nullable`1<ColorScheme> ColorScheme { get; public set; }
    public Nullable`1<int> DecimalPlaces { get; public set; }
    public string Nonce { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<RenderPosition> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<RenderPosition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowTrivial();
    [CompilerGeneratedAttribute]
public void set_ShowTrivial(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowTimeWithChildren();
    [CompilerGeneratedAttribute]
public void set_ShowTimeWithChildren(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxTracesToShow();
    [CompilerGeneratedAttribute]
public void set_MaxTracesToShow(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowControls();
    [CompilerGeneratedAttribute]
public void set_ShowControls(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_StartHidden();
    [CompilerGeneratedAttribute]
public void set_StartHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_PopupToggleKeyboardShortcut();
    [CompilerGeneratedAttribute]
public void set_PopupToggleKeyboardShortcut(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TrivialDurationThresholdMilliseconds();
    [CompilerGeneratedAttribute]
public void set_TrivialDurationThresholdMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ColorScheme> get_ColorScheme();
    [CompilerGeneratedAttribute]
public void set_ColorScheme(Nullable`1<ColorScheme> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DecimalPlaces();
    [CompilerGeneratedAttribute]
public void set_DecimalPlaces(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
}
public enum StackExchange.Profiling.RenderPosition : Enum {
    public int value__;
    public static RenderPosition Left;
    public static RenderPosition Right;
    public static RenderPosition BottomLeft;
    public static RenderPosition BottomRight;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.SingletonProfilerProvider : object {
    [NullableAttribute("2")]
private static MiniProfiler _profiler;
    [NullableAttribute("2")]
public MiniProfiler CurrentProfiler { get; }
    [NullableContextAttribute("2")]
public sealed virtual MiniProfiler get_CurrentProfiler();
    public sealed virtual MiniProfiler Start(string profilerName, MiniProfilerBaseOptions options);
    public sealed virtual void Stopped(MiniProfiler profiler, bool discardResults);
    public sealed virtual Task StoppedAsync(MiniProfiler profiler, bool discardResults);
}
public interface StackExchange.Profiling.SqlFormatters.IAdvancedSqlFormatter {
    [NullableContextAttribute("1")]
public abstract virtual string FormatSql(string commandText, List`1<SqlTimingParameter> parameters, IDbCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.SqlFormatters.InlineFormatter : object {
    private static Regex CommandSpacing;
    private static bool includeTypeInfo;
    [CompilerGeneratedAttribute]
private bool <InsertSpacesAfterCommas>k__BackingField;
    public bool InsertSpacesAfterCommas { get; public set; }
    public InlineFormatter(bool includeTypeInfo);
    private static InlineFormatter();
    [CompilerGeneratedAttribute]
public bool get_InsertSpacesAfterCommas();
    [CompilerGeneratedAttribute]
public void set_InsertSpacesAfterCommas(bool value);
    public sealed virtual string FormatSql(string commandText, List`1<SqlTimingParameter> parameters);
    public string GetParameterValue(SqlTimingParameter param);
}
[NullableContextAttribute("1")]
public interface StackExchange.Profiling.SqlFormatters.ISqlFormatter {
    public abstract virtual string FormatSql(string commandText, List`1<SqlTimingParameter> parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.SqlFormatters.SqlFormatterExtensions : object {
    [ExtensionAttribute]
public static string GetFormattedSql(ISqlFormatter sqlFormatter, string commandText, List`1<SqlTimingParameter> parameters, IDbCommand command);
    [ExtensionAttribute]
public static string GetFormattedSql(ISqlFormatter sqlFormatter, IDbCommand command);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.SqlFormatters.SqlServerFormatter : object {
    private static Regex CommandSpacing;
    [CompilerGeneratedAttribute]
private bool <IncludeParameterValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InsertSpacesAfterCommas>k__BackingField;
    protected static Dictionary`2<DbType, Func`2<SqlTimingParameter, string>> ParamTranslator;
    protected static String[] DontQuote;
    public bool IncludeParameterValues { get; public set; }
    public bool InsertSpacesAfterCommas { get; public set; }
    private static SqlServerFormatter();
    [CompilerGeneratedAttribute]
public bool get_IncludeParameterValues();
    [CompilerGeneratedAttribute]
public void set_IncludeParameterValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_InsertSpacesAfterCommas();
    [CompilerGeneratedAttribute]
public void set_InsertSpacesAfterCommas(bool value);
    private static Func`2<SqlTimingParameter, string> GetWithLenFormatter(string native);
    private static Func`2<SqlTimingParameter, string> GetWithDecimalFormatter(string native);
    public virtual string FormatSql(string commandText, List`1<SqlTimingParameter> parameters);
    public virtual string FormatSql(string commandText, List`1<SqlTimingParameter> parameters, IDbCommand command);
    private string EnsureParameterPrefix(string name);
    private string RemoveParameterPrefix(string name);
    private void GenerateStoreProcedureCall(string commandText, List`1<SqlTimingParameter> parameters, StringBuilder buffer);
    private void GenerateSelectStatement(StringBuilder buffer, List`1<SqlTimingParameter> parameters);
    [NullableContextAttribute("2")]
private static SqlTimingParameter GetReturnValueParameter(List`1<SqlTimingParameter> parameters);
    private void TerminateSqlStatement(StringBuilder sqlStatement);
    private void GenerateStoredProcedureParameters(StringBuilder buffer, List`1<SqlTimingParameter> parameters);
    protected void GenerateParamText(StringBuilder buffer, List`1<SqlTimingParameter> parameters);
    protected string PrepareValue(SqlTimingParameter parameter);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GenerateSelectStatement>b__18_1(SqlTimingParameter x);
}
public class StackExchange.Profiling.SqlFormatters.VerboseSqlServerFormatter : SqlServerFormatter {
    [CompilerGeneratedAttribute]
private bool <IncludeMetaData>k__BackingField;
    public bool IncludeMetaData { get; public set; }
    public VerboseSqlServerFormatter(bool includeMetaData);
    [CompilerGeneratedAttribute]
public bool get_IncludeMetaData();
    [CompilerGeneratedAttribute]
public void set_IncludeMetaData(bool value);
    [NullableContextAttribute("1")]
public virtual string FormatSql(string commandText, List`1<SqlTimingParameter> parameters, IDbCommand command);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.SqlTimingParameter : object {
    internal static int MaxByteParameterSize;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [NullableAttribute("1")]
[DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [DataMemberAttribute]
public string DbType { get; public set; }
    [DataMemberAttribute]
public int Size { get; public set; }
    [DataMemberAttribute]
public string Direction { get; public set; }
    [DataMemberAttribute]
public bool IsNullable { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    [CompilerGeneratedAttribute]
public string get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.Storage.AsyncStorageExtensions : object {
    [ExtensionAttribute]
public static void SetUnviewed(IAsyncStorage storage, MiniProfiler profiler);
    [ExtensionAttribute]
public static Task SetUnviewedAsync(IAsyncStorage storage, MiniProfiler profiler);
    [ExtensionAttribute]
public static void SetViewed(IAsyncStorage storage, MiniProfiler profiler);
    [ExtensionAttribute]
public static Task SetViewedAsync(IAsyncStorage storage, MiniProfiler profiler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class StackExchange.Profiling.Storage.DatabaseStorageBase : object {
    public string MiniProfilersTable;
    public string MiniProfilerTimingsTable;
    public string MiniProfilerClientTimingsTable;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _tableCreationScripts;
    protected string ConnectionString { get; protected set; }
    public bool SetUnviewedAfterSave { get; }
    public List`1<string> TableCreationScripts { get; }
    protected DatabaseStorageBase(string connectionString);
    protected DatabaseStorageBase(string connectionString, string profilersTable, string timingsTable, string clientTimingsTable);
    [CompilerGeneratedAttribute]
protected string get_ConnectionString();
    [CompilerGeneratedAttribute]
protected void set_ConnectionString(string value);
    protected abstract virtual DbConnection GetConnection();
    public abstract virtual void Save(MiniProfiler profiler);
    public abstract virtual Task SaveAsync(MiniProfiler profiler);
    [NullableContextAttribute("2")]
public abstract virtual MiniProfiler Load(Guid id);
    public abstract virtual Task`1<MiniProfiler> LoadAsync(Guid id);
    public virtual bool get_SetUnviewedAfterSave();
    [NullableContextAttribute("2")]
public abstract virtual void SetUnviewed(string user, Guid id);
    public abstract virtual Task SetUnviewedAsync(string user, Guid id);
    [NullableContextAttribute("2")]
public abstract virtual void SetViewed(string user, Guid id);
    public abstract virtual Task SetViewedAsync(string user, Guid id);
    public abstract virtual List`1<Guid> GetUnviewedIds(string user);
    public abstract virtual Task`1<List`1<Guid>> GetUnviewedIdsAsync(string user);
    public abstract virtual IEnumerable`1<Guid> List(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public abstract virtual Task`1<IEnumerable`1<Guid>> ListAsync(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    protected void ConnectTimings(MiniProfiler profiler, List`1<Timing> timings, List`1<ClientTiming> clientTimings);
    private void PopulateChildTimings(Timing parent, ILookup`2<Guid, Timing> timingsLookupByParent);
    protected void FlattenTimings(Timing timing, List`1<Timing> timingsCollection);
    public List`1<string> get_TableCreationScripts();
    protected abstract virtual IEnumerable`1<string> GetTableCreationScripts();
    private sealed virtual override DbConnection StackExchange.Profiling.Storage.IDatabaseStorageConnectable.GetConnection();
}
[NullableContextAttribute("1")]
public interface StackExchange.Profiling.Storage.IAsyncStorage {
    public abstract virtual IEnumerable`1<Guid> List(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public abstract virtual void Save(MiniProfiler profiler);
    [NullableContextAttribute("2")]
public abstract virtual MiniProfiler Load(Guid id);
    [NullableContextAttribute("2")]
public abstract virtual void SetUnviewed(string user, Guid id);
    [NullableContextAttribute("2")]
public abstract virtual void SetViewed(string user, Guid id);
    public abstract virtual List`1<Guid> GetUnviewedIds(string user);
    public abstract virtual Task`1<IEnumerable`1<Guid>> ListAsync(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public abstract virtual Task SaveAsync(MiniProfiler profiler);
    public abstract virtual Task`1<MiniProfiler> LoadAsync(Guid id);
    public abstract virtual Task SetUnviewedAsync(string user, Guid id);
    public abstract virtual Task SetViewedAsync(string user, Guid id);
    public abstract virtual Task`1<List`1<Guid>> GetUnviewedIdsAsync(string user);
}
[NullableContextAttribute("1")]
public interface StackExchange.Profiling.Storage.IDatabaseStorageConnectable {
    public abstract virtual DbConnection GetConnection();
}
public enum StackExchange.Profiling.Storage.ListResultsOrder : Enum {
    public int value__;
    public static ListResultsOrder Ascending;
    public static ListResultsOrder Descending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Storage.MultiStorageProvider : object {
    [CompilerGeneratedAttribute]
private List`1<IAsyncStorage> <Stores>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowParallelOps>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetUnviewedAfterSave>k__BackingField;
    public List`1<IAsyncStorage> Stores { get; public set; }
    public bool AllowParallelOps { get; public set; }
    public bool SetUnviewedAfterSave { get; }
    public MultiStorageProvider(IAsyncStorage[] stores);
    [CompilerGeneratedAttribute]
public List`1<IAsyncStorage> get_Stores();
    [CompilerGeneratedAttribute]
public void set_Stores(List`1<IAsyncStorage> value);
    [CompilerGeneratedAttribute]
public bool get_AllowParallelOps();
    [CompilerGeneratedAttribute]
public void set_AllowParallelOps(bool value);
    public sealed virtual IEnumerable`1<Guid> List(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    [AsyncStateMachineAttribute("StackExchange.Profiling.Storage.MultiStorageProvider/<ListAsync>d__10")]
public sealed virtual Task`1<IEnumerable`1<Guid>> ListAsync(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public sealed virtual void Save(MiniProfiler profiler);
    public sealed virtual Task SaveAsync(MiniProfiler profiler);
    [NullableContextAttribute("2")]
public sealed virtual MiniProfiler Load(Guid id);
    [AsyncStateMachineAttribute("StackExchange.Profiling.Storage.MultiStorageProvider/<LoadAsync>d__14")]
public sealed virtual Task`1<MiniProfiler> LoadAsync(Guid id);
    [CompilerGeneratedAttribute]
public bool get_SetUnviewedAfterSave();
    [NullableContextAttribute("2")]
public sealed virtual void SetUnviewed(string user, Guid id);
    public sealed virtual Task SetUnviewedAsync(string user, Guid id);
    [NullableContextAttribute("2")]
public sealed virtual void SetViewed(string user, Guid id);
    public sealed virtual Task SetViewedAsync(string user, Guid id);
    public sealed virtual List`1<Guid> GetUnviewedIds(string user);
    [AsyncStateMachineAttribute("StackExchange.Profiling.Storage.MultiStorageProvider/<GetUnviewedIdsAsync>d__23")]
public sealed virtual Task`1<List`1<Guid>> GetUnviewedIdsAsync(string user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Storage.NullStorage : object {
    public sealed virtual IEnumerable`1<Guid> List(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public sealed virtual Task`1<IEnumerable`1<Guid>> ListAsync(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public sealed virtual void Save(MiniProfiler profiler);
    public sealed virtual Task SaveAsync(MiniProfiler profiler);
    [NullableContextAttribute("2")]
public sealed virtual MiniProfiler Load(Guid id);
    public sealed virtual Task`1<MiniProfiler> LoadAsync(Guid id);
    [NullableContextAttribute("2")]
public sealed virtual void SetUnviewed(string user, Guid id);
    public sealed virtual Task SetUnviewedAsync(string user, Guid id);
    [NullableContextAttribute("2")]
public sealed virtual void SetViewed(string user, Guid id);
    public sealed virtual Task SetViewedAsync(string user, Guid id);
    public sealed virtual List`1<Guid> GetUnviewedIds(string user);
    public sealed virtual Task`1<List`1<Guid>> GetUnviewedIdsAsync(string user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.Suppression : object {
    private bool _wasSuppressed;
    [CompilerGeneratedAttribute]
private MiniProfiler <Profiler>k__BackingField;
    internal MiniProfiler Profiler { get; }
    public Suppression(MiniProfiler profiler);
    [CompilerGeneratedAttribute]
internal MiniProfiler get_Profiler();
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.Timing : object {
    private long _startTicks;
    private Nullable`1<decimal> _minSaveMs;
    private bool _includeChildrenWithMinSave;
    [NullableAttribute("1")]
private object _syncRoot;
    private IDisposable _instrumentation;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <DurationMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <StartMilliseconds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Timing> _children;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<CustomTiming>> <CustomTimings>k__BackingField;
    [CompilerGeneratedAttribute]
private TimingDebugInfo <DebugInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Timing <ParentTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentTimingId>k__BackingField;
    [CompilerGeneratedAttribute]
private MiniProfiler <Profiler>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MiniProfilerId>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public Nullable`1<decimal> DurationMilliseconds { get; public set; }
    [DataMemberAttribute]
public decimal StartMilliseconds { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public List`1<Timing> Children { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public Dictionary`2<string, List`1<CustomTiming>> CustomTimings { get; public set; }
    [DataMemberAttribute]
public TimingDebugInfo DebugInfo { get; public set; }
    public string CustomTimingsJson { get; public set; }
    [MemberNotNullWhenAttribute("True", "CustomTimings")]
public bool HasCustomTimings { get; }
    [IgnoreDataMemberAttribute]
public Timing ParentTiming { get; public set; }
    [IgnoreDataMemberAttribute]
public Guid ParentTimingId { get; public set; }
    [IgnoreDataMemberAttribute]
public decimal DurationWithoutChildrenMilliseconds { get; }
    [IgnoreDataMemberAttribute]
public bool IsTrivial { get; }
    [IgnoreDataMemberAttribute]
[MemberNotNullWhenAttribute("True", "Children")]
public bool HasChildren { get; }
    [IgnoreDataMemberAttribute]
public bool IsRoot { get; }
    [IgnoreDataMemberAttribute]
public short Depth { get; }
    internal MiniProfiler Profiler { get; internal set; }
    [IgnoreDataMemberAttribute]
public Guid MiniProfilerId { get; public set; }
    public Timing(MiniProfiler profiler, Timing parent, string name, Nullable`1<decimal> minSaveMs, Nullable`1<bool> includeChildrenWithMinSave);
    public Timing(MiniProfiler profiler, Timing parent, string name, Nullable`1<decimal> minSaveMs, Nullable`1<bool> includeChildrenWithMinSave, int debugStackShave);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_DurationMilliseconds();
    [CompilerGeneratedAttribute]
public void set_DurationMilliseconds(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public decimal get_StartMilliseconds();
    [CompilerGeneratedAttribute]
public void set_StartMilliseconds(decimal value);
    public List`1<Timing> get_Children();
    public void set_Children(List`1<Timing> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<CustomTiming>> get_CustomTimings();
    [CompilerGeneratedAttribute]
public void set_CustomTimings(Dictionary`2<string, List`1<CustomTiming>> value);
    [CompilerGeneratedAttribute]
public TimingDebugInfo get_DebugInfo();
    [CompilerGeneratedAttribute]
public void set_DebugInfo(TimingDebugInfo value);
    public string get_CustomTimingsJson();
    public void set_CustomTimingsJson(string value);
    [MemberNotNullWhenAttribute("True", "CustomTimings")]
public bool get_HasCustomTimings();
    [CompilerGeneratedAttribute]
public Timing get_ParentTiming();
    [CompilerGeneratedAttribute]
public void set_ParentTiming(Timing value);
    [CompilerGeneratedAttribute]
public Guid get_ParentTimingId();
    [CompilerGeneratedAttribute]
public void set_ParentTimingId(Guid value);
    public decimal get_DurationWithoutChildrenMilliseconds();
    public bool get_IsTrivial();
    [MemberNotNullWhenAttribute("True", "Children")]
public bool get_HasChildren();
    public bool get_IsRoot();
    public short get_Depth();
    [CompilerGeneratedAttribute]
internal MiniProfiler get_Profiler();
    [CompilerGeneratedAttribute]
internal void set_Profiler(MiniProfiler value);
    [CompilerGeneratedAttribute]
public Guid get_MiniProfilerId();
    [CompilerGeneratedAttribute]
public void set_MiniProfilerId(Guid value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
    [NullableContextAttribute("1")]
public void AddChild(Timing timing);
    [NullableContextAttribute("1")]
internal void RemoveChild(Timing timing);
    [NullableContextAttribute("1")]
public void AddCustomTiming(string category, CustomTiming customTiming);
    [NullableContextAttribute("1")]
internal void RemoveCustomTiming(string category, CustomTiming customTiming);
    [NullableContextAttribute("1")]
private List`1<CustomTiming> GetCustomTimingList(string category);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class StackExchange.Profiling.TimingDebugInfo : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CommonStackStart>k__BackingField;
    [CompilerGeneratedAttribute]
private StackTrace <RawStack>k__BackingField;
    [DataMemberAttribute]
public string RichHtmlStack { get; }
    [DataMemberAttribute]
public Nullable`1<int> CommonStackStart { get; }
    private StackTrace RawStack { get; }
    internal TimingDebugInfo(Timing parent, int debugStackShave);
    public string get_RichHtmlStack();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CommonStackStart();
    [CompilerGeneratedAttribute]
private StackTrace get_RawStack();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
