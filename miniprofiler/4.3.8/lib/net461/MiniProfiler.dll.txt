[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.AspNetRequestProvider : DefaultProfilerProvider {
    private bool _enableFallback;
    private static string CacheKey;
    [NullableAttribute("2")]
public MiniProfiler CurrentProfiler { get; protected set; }
    public AspNetRequestProvider(bool enableFallback);
    [NullableContextAttribute("2")]
public virtual MiniProfiler get_CurrentProfiler();
    [NullableContextAttribute("2")]
protected virtual void set_CurrentProfiler(MiniProfiler value);
    [NullableContextAttribute("2")]
public virtual MiniProfiler Start(string profilerName, MiniProfilerBaseOptions options);
    public virtual void Stopped(MiniProfiler profiler, bool discardResults);
    [AsyncStateMachineAttribute("StackExchange.Profiling.AspNetRequestProvider/<StoppedAsync>d__8")]
public virtual Task StoppedAsync(MiniProfiler profiler, bool discardResults);
    private static void EnsureName(MiniProfiler profiler, HttpContext context);
    [CompilerGeneratedAttribute]
internal static string <EnsureName>g__GetUrl|9_0(<>c__DisplayClass9_0& );
}
internal static class StackExchange.Profiling.Helpers.Compression : object {
    [NullableContextAttribute("1")]
public static void EncodeStreamAndAppendResponseHeaders(HttpRequest request, HttpResponse response);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <EncodeStreamAndAppendResponseHeaders>g__Compress|0_0(string encoding, Stream stream, <>c__DisplayClass0_0& );
}
internal static class StackExchange.Profiling.Helpers.IpAddressIdentity : object {
    [NullableContextAttribute("1")]
public static string GetUser(HttpRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.MiniProfilerHandler : object {
    private ConcurrentDictionary`2<string, string> ResourceCache;
    [CompilerGeneratedAttribute]
private MiniProfilerOptions <Options>k__BackingField;
    public bool IsReusable { get; }
    public MiniProfilerOptions Options { get; }
    public MiniProfilerHandler(MiniProfilerOptions options);
    public sealed virtual bool get_IsReusable();
    [CompilerGeneratedAttribute]
public MiniProfilerOptions get_Options();
    public static MiniProfilerHandler Configure(MiniProfilerOptions options);
    public void RegisterRoutes();
    private sealed virtual override IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext);
    public sealed virtual void ProcessRequest(HttpContext context);
    private string Includes(HttpContext context, string path);
    private string ResultsIndex(HttpContext context);
    private bool AuthorizeRequest(HttpContext context, bool isList, String& message);
    private string ResultsList(HttpContext context);
    private string GetSingleProfilerResult(HttpContext context);
    private static string ResultsJson(HttpContext context, MiniProfiler profiler);
    private string ResultsFullPage(HttpContext context, MiniProfiler profiler);
    private bool TryGetResource(string filename, String& resource);
    private static string NotFound(HttpContext context, string contentType, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.MiniProfilerOptions : MiniProfilerBaseOptions {
    [CompilerGeneratedAttribute]
private string <RouteBasePath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, bool> <ResultsAuthorize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, bool> <ResultsListAuthorize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<HttpRequest, string> <UserIdProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCompression>k__BackingField;
    public string RouteBasePath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, bool> ResultsAuthorize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, bool> ResultsListAuthorize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<HttpRequest, string> UserIdProvider { get; public set; }
    public bool EnableCompression { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RouteBasePath();
    [CompilerGeneratedAttribute]
public void set_RouteBasePath(string value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, bool> get_ResultsAuthorize();
    [CompilerGeneratedAttribute]
public void set_ResultsAuthorize(Func`2<HttpRequest, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, bool> get_ResultsListAuthorize();
    [CompilerGeneratedAttribute]
public void set_ResultsListAuthorize(Func`2<HttpRequest, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<HttpRequest, string> get_UserIdProvider();
    [CompilerGeneratedAttribute]
public void set_UserIdProvider(Func`2<HttpRequest, string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableCompression();
    [CompilerGeneratedAttribute]
public void set_EnableCompression(bool value);
    protected virtual void OnConfigure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class StackExchange.Profiling.MiniProfilerWebExtensions : object {
    private static HtmlString _empty;
    private static MiniProfilerWebExtensions();
    [ExtensionAttribute]
public static IHtmlString RenderIncludes(MiniProfiler profiler, RenderOptions renderOptions);
    [ExtensionAttribute]
public static IHtmlString RenderIncludes(MiniProfiler profiler, Nullable`1<RenderPosition> position, Nullable`1<bool> showTrivial, Nullable`1<bool> showTimeWithChildren, Nullable`1<int> maxTracesToShow, Nullable`1<bool> showControls, Nullable`1<bool> startHidden);
    [ExtensionAttribute]
public static IHtmlString Render(MiniProfiler profiler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class StackExchange.Profiling.Storage.MemoryCacheStorage : object {
    private MemoryCache _cache;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedList`2<ProfilerSortedKey, object> _profiles;
    public static string CacheKeyPrefix;
    [CompilerGeneratedAttribute]
private TimeSpan <CacheDuration>k__BackingField;
    public TimeSpan CacheDuration { get; }
    public MemoryCacheStorage(TimeSpan cacheDuration);
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheDuration();
    private string GetCacheKey(Guid id);
    public sealed virtual List`1<Guid> GetUnviewedIds(string user);
    public sealed virtual Task`1<List`1<Guid>> GetUnviewedIdsAsync(string user);
    private string GetPerUserUnviewedCacheKey(string user);
    private List`1<Guid> GetPerUserUnviewedIds(string user);
    public sealed virtual IEnumerable`1<Guid> List(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    public sealed virtual Task`1<IEnumerable`1<Guid>> ListAsync(int maxResults, Nullable`1<DateTime> start, Nullable`1<DateTime> finish, ListResultsOrder orderBy);
    [NullableContextAttribute("2")]
public sealed virtual MiniProfiler Load(Guid id);
    public sealed virtual Task`1<MiniProfiler> LoadAsync(Guid id);
    public sealed virtual void Save(MiniProfiler profiler);
    public sealed virtual Task SaveAsync(MiniProfiler profiler);
    [NullableContextAttribute("2")]
public sealed virtual void SetUnviewed(string user, Guid id);
    public sealed virtual Task SetUnviewedAsync(string user, Guid id);
    [NullableContextAttribute("2")]
public sealed virtual void SetViewed(string user, Guid id);
    public sealed virtual Task SetViewedAsync(string user, Guid id);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
