[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MinVer.Lib.Commit : object {
    [CompilerGeneratedAttribute]
private string <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Commit> <Parents>k__BackingField;
    public string Sha { get; }
    public string ShortSha { get; }
    public List`1<Commit> Parents { get; }
    public Commit(string sha);
    [CompilerGeneratedAttribute]
public string get_Sha();
    public string get_ShortSha();
    [CompilerGeneratedAttribute]
public List`1<Commit> get_Parents();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class MinVer.Lib.DictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TValue GetOrAdd(Dictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MinVer.Lib.Git : object {
    private static Char[] newLineChars;
    private static Git();
    public static bool IsWorkingDirectory(string directory, ILogger log);
    public static bool TryGetHead(string directory, Commit& head, ILogger log);
    public static IEnumerable`1<ValueTuple`2<string, string>> GetTags(string directory, ILogger log);
    [ExtensionAttribute]
private static string RemoveFromEnd(string text, string value);
}
internal static class MinVer.Lib.GitCommand : object {
    [NullableContextAttribute("1")]
public static bool TryRun(string args, string workingDirectory, ILogger log, String& output);
}
[NullableContextAttribute("1")]
public interface MinVer.Lib.ILogger {
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public abstract virtual bool get_IsTraceEnabled();
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool Trace(string message);
    public abstract virtual bool Debug(string message);
    public abstract virtual bool Info(string message);
    public abstract virtual bool Warn(int code, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MinVer.Lib.MajorMinor : object {
    [CompilerGeneratedAttribute]
private static MajorMinor <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    public static MajorMinor Default { get; }
    public int Major { get; }
    public int Minor { get; }
    public static string ValidValues { get; }
    public MajorMinor(int major, int minor);
    private static MajorMinor();
    [CompilerGeneratedAttribute]
public static MajorMinor get_Default();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    public virtual string ToString();
    public static string get_ValidValues();
    public static bool TryParse(string value, MajorMinor& majorMinor);
}
public class MinVer.Lib.NoGitException : Exception {
    [NullableContextAttribute("1")]
public NoGitException(string message, Exception innerException);
}
public static class MinVer.Lib.PreReleaseIdentifiers : object {
    [NullableAttribute("1")]
public static IReadOnlyCollection`1<string> Default;
    private static PreReleaseIdentifiers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MinVer.Lib.Version : SemanticVersion {
    private List`1<string> preReleaseIdentifiers;
    private int height;
    public Version(IEnumerable`1<string> defaultPreReleaseIdentifiers);
    private Version(int major, int minor, int patch, List`1<string> preReleaseIdentifiers, int height, string buildMetadata);
    [NullableContextAttribute("2")]
public virtual string ToString(string format, IFormatProvider formatProvider);
    public Version Satisfying(MajorMinor minMajorMinor, IEnumerable`1<string> defaultPreReleaseIdentifiers);
    public Version WithHeight(int newHeight, VersionPart autoIncrement, IEnumerable`1<string> defaultPreReleaseIdentifiers);
    public Version AddBuildMetadata(string newBuildMetadata);
    public static bool TryParse(string text, Version& version, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MinVer.Lib.Versioner : object {
    public static Version GetVersion(string workDir, string tagPrefix, MajorMinor minMajorMinor, string buildMeta, VersionPart autoIncrement, IEnumerable`1<string> defaultPreReleaseIdentifiers, bool ignoreHeight, ILogger log);
    private static ValueTuple`3<Version, Nullable`1<int>, bool> GetVersion(string workDir, string tagPrefix, List`1<string> defaultPreReleaseIdentifiers, ILogger log);
    private static List`1<Candidate> GetCandidates(Commit head, IEnumerable`1<ValueTuple`2<string, string>> tags, string tagPrefix, IReadOnlyCollection`1<string> defaultPreReleaseIdentifiers, ILogger log);
}
public enum MinVer.Lib.VersionPart : Enum {
    public int value__;
    public static VersionPart Patch;
    public static VersionPart Minor;
    public static VersionPart Major;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MinVer.Lib.VersionPartExtensions : object {
    public static string ValidValues { get; }
    public static string get_ValidValues();
}
