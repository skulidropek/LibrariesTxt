public class MockQueryable.Core.TestExpressionVisitor : ExpressionVisitor {
}
public abstract class MockQueryable.Core.TestQueryProvider`1 : object {
    private IEnumerable`1<T> _enumerable;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    protected TestQueryProvider`1(Expression expression);
    protected TestQueryProvider`1(IEnumerable`1<T> enumerable);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TEntity> CreateQuery(Expression expression);
    private object CreateInstance(Type tElement, Expression expression);
    public sealed virtual object Execute(Expression expression);
    public virtual TResult Execute(Expression expression);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Type get_ElementType();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    protected static TResult CompileExpressionItem(Expression expression);
}
