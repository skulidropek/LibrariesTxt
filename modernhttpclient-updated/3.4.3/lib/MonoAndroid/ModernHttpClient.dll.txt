[ExtensionAttribute]
public static class ModernHttpClient.AwaitableOkHttp : object {
    [ExtensionAttribute]
public static Task`1<Response> EnqueueAsync(ICall This);
}
public class ModernHttpClient.CaptiveNetworkException : WebException {
    private static string DefaultCaptiveNetworkErrorMessage;
    [CompilerGeneratedAttribute]
private Uri <SourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DestinationUri>k__BackingField;
    public Uri SourceUri { get; private set; }
    public Uri DestinationUri { get; private set; }
    public CaptiveNetworkException(Uri sourceUri, Uri destinationUri);
    [CompilerGeneratedAttribute]
public Uri get_SourceUri();
    [CompilerGeneratedAttribute]
private void set_SourceUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_DestinationUri();
    [CompilerGeneratedAttribute]
private void set_DestinationUri(Uri value);
}
public class ModernHttpClient.CertificatePinner : Object {
    private Builder Builder;
    private Dictionary`2<string, String[]> Pins;
    public CertificatePinner Build();
    public bool HasPins(string hostname);
    public void AddPins(string hostname, String[] pins);
}
public class ModernHttpClient.ClientCertificate : object {
    [CompilerGeneratedAttribute]
private string <Passphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    public string Passphrase { get; public set; }
    public string RawData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Passphrase();
    [CompilerGeneratedAttribute]
public void set_Passphrase(string value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(string value);
}
internal class ModernHttpClient.ConcatenatingStream : Stream {
    private CancellationTokenSource cts;
    private Action onDispose;
    private long position;
    private bool closeStreams;
    private int isEnding;
    private Task blockUntil;
    private IEnumerator`1<Stream> iterator;
    private Stream current;
    private Stream Current { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ConcatenatingStream(IEnumerable`1<Func`1<Stream>> source, bool closeStreams, Task blockUntil, Action onDispose);
    private Stream get_Current();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [AsyncStateMachineAttribute("ModernHttpClient.ConcatenatingStream/<ReadAsync>d__29")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    private int readInternal(Byte[] buffer, int offset, int count, CancellationToken ct);
    protected virtual void Dispose(bool disposing);
    private void EndOfStream();
}
internal class ModernHttpClient.CustomX509TrustManager : Object {
    public sealed virtual void CheckClientTrusted(X509Certificate[] chain, string authType);
    public sealed virtual void CheckServerTrusted(X509Certificate[] chain, string authType);
    private sealed virtual override X509Certificate[] Javax.Net.Ssl.IX509TrustManager.GetAcceptedIssuers();
}
public static class ModernHttpClient.FailureMessages : object {
    public static string NoCertAtAll;
    public static string NoRoot;
    public static string ChainError;
    public static string SubjectNameMismatch;
    public static string PinMismatch;
    public static string NoPinsProvided;
    public static string InvalidPublicKey;
    public static string InvalidRawData;
}
internal class ModernHttpClient.HostnameVerifier : Object {
    private static Regex cnRegex;
    public static string PinningFailureMessage;
    [CompilerGeneratedAttribute]
private NativeMessageHandler <nativeHandler>k__BackingField;
    private NativeMessageHandler nativeHandler { get; private set; }
    public HostnameVerifier(NativeMessageHandler handler);
    private static HostnameVerifier();
    [CompilerGeneratedAttribute]
private NativeMessageHandler get_nativeHandler();
    [CompilerGeneratedAttribute]
private void set_nativeHandler(NativeMessageHandler value);
    public sealed virtual bool Verify(string hostname, ISSLSession session);
}
public class ModernHttpClient.NativeCookieHandler : CookieManager {
    public List`1<Cookie> Cookies { get; }
    public void SetCookies(IEnumerable`1<Cookie> cookies);
    public void DeleteCookies();
    public void SetCookie(Cookie cookie);
    public void DeleteCookie(Cookie cookie);
    public List`1<Cookie> get_Cookies();
    private static HttpCookie ToNativeCookie(Cookie cookie);
    private static Cookie ToNetCookie(HttpCookie cookie);
    public sealed virtual IList`1<Cookie> LoadForRequest(HttpUrl p0);
    public sealed virtual void SaveFromResponse(HttpUrl p0, IList`1<Cookie> p1);
}
public class ModernHttpClient.NativeMessageHandler : HttpClientHandler {
    private OkHttpClient client;
    private CacheControl noCacheCacheControl;
    private bool throwOnCaptiveNetwork;
    private Dictionary`2<HttpRequestMessage, WeakReference> registeredProgressCallbacks;
    private Dictionary`2<string, string> headerSeparators;
    [CompilerGeneratedAttribute]
private bool <DisableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    public CertificatePinner CertificatePinner;
    private IKeyManager[] KeyManagers;
    public TLSConfig TLSConfig;
    public string PinningMode;
    public bool DisableCaching { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public NativeMessageHandler(bool throwOnCaptiveNetwork, TLSConfig tLSConfig, NativeCookieHandler cookieHandler, IWebProxy proxy);
    [CompilerGeneratedAttribute]
public bool get_DisableCaching();
    [CompilerGeneratedAttribute]
public void set_DisableCaching(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    private void SetClientCertificate(ClientCertificate certificate);
    public void RegisterForProgress(HttpRequestMessage request, ProgressDelegate callback);
    private ProgressDelegate getAndRemoveCallbackFromRegister(HttpRequestMessage request);
    private string getHeaderSeparator(string name);
    [AsyncStateMachineAttribute("ModernHttpClient.NativeMessageHandler/<SendAsync>d__23")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class ModernHttpClient.Pin : object {
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublicKeys>k__BackingField;
    public string Hostname { get; public set; }
    public String[] PublicKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public String[] get_PublicKeys();
    [CompilerGeneratedAttribute]
public void set_PublicKeys(String[] value);
}
public class ModernHttpClient.ProgressDelegate : MulticastDelegate {
    public ProgressDelegate(object object, IntPtr method);
    public virtual void Invoke(long bytes, long totalBytes, long totalBytesExpected);
    public virtual IAsyncResult BeginInvoke(long bytes, long totalBytes, long totalBytesExpected, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ModernHttpClient.ProgressStreamContent : StreamContent {
    private long _totalBytes;
    private long _totalBytesExpected;
    private ProgressDelegate _progress;
    public ProgressDelegate Progress { get; public set; }
    public ProgressStreamContent(Stream stream, CancellationToken token);
    public ProgressStreamContent(Stream stream, int bufferSize);
    private ProgressStreamContent(ProgressStream stream);
    private ProgressStreamContent(ProgressStream stream, int bufferSize);
    private void init(ProgressStream stream);
    private void reset();
    private void readBytes(long bytes);
    public ProgressDelegate get_Progress();
    public void set_Progress(ProgressDelegate value);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
}
public class ModernHttpClient.ProxyAuthenticator : Object {
    private string credentials;
    public ProxyAuthenticator(string username, string password);
    public sealed virtual Request Authenticate(Route route, Response response);
}
public enum ModernHttpClient.ReasonPhrases : Enum {
    public int value__;
    public static ReasonPhrases Continue;
    public static ReasonPhrases Switching_Protocols;
    public static ReasonPhrases Processing;
    public static ReasonPhrases Early_Hints;
    public static ReasonPhrases OK;
    public static ReasonPhrases Created;
    public static ReasonPhrases Accepted;
    public static ReasonPhrases Non_Authoritative_Information;
    public static ReasonPhrases No_Content;
    public static ReasonPhrases Reset_Content;
    public static ReasonPhrases Partial_Content;
    public static ReasonPhrases Multi_Status;
    public static ReasonPhrases Already_Reported;
    public static ReasonPhrases IM_Used;
    public static ReasonPhrases Multiple_Choices;
    public static ReasonPhrases Moved_Permanently;
    public static ReasonPhrases Found;
    public static ReasonPhrases See_Other;
    public static ReasonPhrases Not_Modified;
    public static ReasonPhrases Use_Proxy;
    public static ReasonPhrases Unused;
    public static ReasonPhrases Temporary_Redirect;
    public static ReasonPhrases Permanent_Redirect;
    public static ReasonPhrases Bad_Request;
    public static ReasonPhrases Unauthorized;
    public static ReasonPhrases Payment_Required;
    public static ReasonPhrases Forbidden;
    public static ReasonPhrases Not_Found;
    public static ReasonPhrases Method_Not_Allowed;
    public static ReasonPhrases Not_Acceptable;
    public static ReasonPhrases Proxy_Authentication_Required;
    public static ReasonPhrases Request_Timeout;
    public static ReasonPhrases Conflict;
    public static ReasonPhrases Gone;
    public static ReasonPhrases Length_Required;
    public static ReasonPhrases Precondition_Failed;
    public static ReasonPhrases Payload_Too_Large;
    public static ReasonPhrases URI_Too_Long;
    public static ReasonPhrases Unsupported_Media_Type;
    public static ReasonPhrases Range_Not_Satisfiable;
    public static ReasonPhrases Expectation_Failed;
    public static ReasonPhrases Misdirected_Request;
    public static ReasonPhrases Unprocessable_Entity;
    public static ReasonPhrases Locked;
    public static ReasonPhrases Failed_Dependency;
    public static ReasonPhrases Upgrade_Required;
    public static ReasonPhrases Precondition_Required;
    public static ReasonPhrases Too_Many_Requests;
    public static ReasonPhrases Request_Header_Fields_Too_Large;
    public static ReasonPhrases Unavailable_For_Legal_Reasons;
    public static ReasonPhrases Internal_Server_Error;
    public static ReasonPhrases Not_Implemented;
    public static ReasonPhrases Bad_Gateway;
    public static ReasonPhrases Service_Unavailable;
    public static ReasonPhrases Gateway_Timeout;
    public static ReasonPhrases HTTP_Version_Not_Supported;
    public static ReasonPhrases Variant_Also_Negotiates;
    public static ReasonPhrases Insufficient_Storage;
    public static ReasonPhrases Loop_Detected;
    public static ReasonPhrases Not_Extended;
    public static ReasonPhrases Network_Authentication_Required;
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "1.0.0.0")]
public class ModernHttpClient.Resource : object {
    private static Resource();
}
public class ModernHttpClient.TLSConfig : object {
    [CompilerGeneratedAttribute]
private List`1<Pin> <Pins>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCertificate <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DangerousAcceptAnyServerCertificateValidator>k__BackingField;
    public List`1<Pin> Pins { get; public set; }
    public ClientCertificate ClientCertificate { get; public set; }
    public bool DangerousAcceptAnyServerCertificateValidator { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Pin> get_Pins();
    [CompilerGeneratedAttribute]
public void set_Pins(List`1<Pin> value);
    [CompilerGeneratedAttribute]
public ClientCertificate get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(ClientCertificate value);
    [CompilerGeneratedAttribute]
public bool get_DangerousAcceptAnyServerCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_DangerousAcceptAnyServerCertificateValidator(bool value);
}
internal class ModernHttpClient.TlsSslSocketFactory : SSLSocketFactory {
    private SSLSocketFactory _factory;
    public TlsSslSocketFactory(IKeyManager[] keyManagers, ITrustManager[] trustManagers);
    public virtual String[] GetDefaultCipherSuites();
    public virtual String[] GetSupportedCipherSuites();
    public virtual Socket CreateSocket(InetAddress address, int port, InetAddress localAddress, int localPort);
    public virtual Socket CreateSocket(InetAddress host, int port);
    public virtual Socket CreateSocket(string host, int port, InetAddress localHost, int localPort);
    public virtual Socket CreateSocket(string host, int port);
    public virtual Socket CreateSocket(Socket s, string host, int port, bool autoClose);
    protected virtual void Dispose(bool disposing);
    public virtual Socket CreateSocket();
    public static IX509TrustManager GetSystemDefaultTrustManager();
}
internal static class ModernHttpClient.Utility : object {
    public static bool MatchHostnameToPattern(string hostname, string pattern);
    public static bool PathMatches(string path, string cookiePath);
    public static void VerifyPins(String[] pins);
}
[ExtensionAttribute]
internal static class ModernHttpClient.X509Certificate2Extension : object {
    [ExtensionAttribute]
internal static List`1<string> ParseSubjectAlternativeName(X509Certificate2 cert);
}
