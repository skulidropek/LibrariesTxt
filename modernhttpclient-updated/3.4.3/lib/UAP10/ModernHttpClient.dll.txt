public class ModernHttpClient.CaptiveNetworkException : WebException {
    private static string DefaultCaptiveNetworkErrorMessage;
    [CompilerGeneratedAttribute]
private Uri <SourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DestinationUri>k__BackingField;
    public Uri SourceUri { get; private set; }
    public Uri DestinationUri { get; private set; }
    public CaptiveNetworkException(Uri sourceUri, Uri destinationUri);
    [CompilerGeneratedAttribute]
public Uri get_SourceUri();
    [CompilerGeneratedAttribute]
private void set_SourceUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_DestinationUri();
    [CompilerGeneratedAttribute]
private void set_DestinationUri(Uri value);
}
public class ModernHttpClient.CertificatePinner : object {
    private Dictionary`2<string, String[]> Pins;
    public bool HasPins(string hostname);
    public void AddPins(string hostname, String[] pins);
    public bool Check(string hostname, List`1<X509Certificate2> peerCertificates);
}
public class ModernHttpClient.ClientCertificate : object {
    [CompilerGeneratedAttribute]
private string <Passphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    public string Passphrase { get; public set; }
    public string RawData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Passphrase();
    [CompilerGeneratedAttribute]
public void set_Passphrase(string value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(string value);
}
public static class ModernHttpClient.FailureMessages : object {
    public static string NoCertAtAll;
    public static string NoRoot;
    public static string ChainError;
    public static string SubjectNameMismatch;
    public static string PinMismatch;
    public static string NoPinsProvided;
    public static string InvalidPublicKey;
    public static string InvalidRawData;
}
[ExtensionAttribute]
public static class ModernHttpClient.HttpRequestHeadersExtensions : object {
    [ExtensionAttribute]
public static void Set(HttpRequestHeaders headers, string name, string value);
}
public class ModernHttpClient.NativeCookieHandler : CookieContainer {
    private string CurrentDomain;
    private Uri CurrentUri { get; }
    public List`1<Cookie> Cookies { get; }
    private Uri get_CurrentUri();
    public void SetCookies(IEnumerable`1<Cookie> cookies);
    public void DeleteCookies();
    public void SetCookie(Cookie cookie);
    public void DeleteCookie(Cookie cookie);
    public List`1<Cookie> get_Cookies();
}
public class ModernHttpClient.NativeMessageHandler : HttpClientHandler {
    private bool throwOnCaptiveNetwork;
    [CompilerGeneratedAttribute]
private bool <DisableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    private CertificatePinner CertificatePinner;
    public TLSConfig TLSConfig;
    public string PinningMode;
    private static Regex cnRegex;
    public bool DisableCaching { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public NativeMessageHandler(bool throwOnCaptiveNetwork, TLSConfig tLSConfig, NativeCookieHandler cookieHandler, IWebProxy proxy);
    private static NativeMessageHandler();
    [CompilerGeneratedAttribute]
public bool get_DisableCaching();
    [CompilerGeneratedAttribute]
public void set_DisableCaching(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    [AsyncStateMachineAttribute("ModernHttpClient.NativeMessageHandler/<SetClientCertificate>d__15")]
private void SetClientCertificate(ClientCertificate certificate);
    [AsyncStateMachineAttribute("ModernHttpClient.NativeMessageHandler/<SendAsync>d__16")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__14_1(HttpRequestMessage request, X509Certificate2 root, X509Chain chain, SslPolicyErrors e);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class ModernHttpClient.Pin : object {
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublicKeys>k__BackingField;
    public string Hostname { get; public set; }
    public String[] PublicKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public String[] get_PublicKeys();
    [CompilerGeneratedAttribute]
public void set_PublicKeys(String[] value);
}
public class ModernHttpClient.SpkiFingerprint : object {
    public static string ComputeSHA256(Byte[] certificate);
    public static string ComputeSHA1(Byte[] certificate);
}
public class ModernHttpClient.TLSConfig : object {
    [CompilerGeneratedAttribute]
private List`1<Pin> <Pins>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCertificate <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DangerousAcceptAnyServerCertificateValidator>k__BackingField;
    public List`1<Pin> Pins { get; public set; }
    public ClientCertificate ClientCertificate { get; public set; }
    public bool DangerousAcceptAnyServerCertificateValidator { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Pin> get_Pins();
    [CompilerGeneratedAttribute]
public void set_Pins(List`1<Pin> value);
    [CompilerGeneratedAttribute]
public ClientCertificate get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(ClientCertificate value);
    [CompilerGeneratedAttribute]
public bool get_DangerousAcceptAnyServerCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_DangerousAcceptAnyServerCertificateValidator(bool value);
}
internal static class ModernHttpClient.Utility : object {
    public static bool MatchHostnameToPattern(string hostname, string pattern);
    public static bool PathMatches(string path, string cookiePath);
    public static void VerifyPins(String[] pins);
}
[ExtensionAttribute]
internal static class ModernHttpClient.X509Certificate2Extension : object {
    [ExtensionAttribute]
internal static List`1<string> ParseSubjectAlternativeName(X509Certificate2 cert);
}
