public class ModernHttpClient.AsyncLock : object {
    private SemaphoreSlim m_semaphore;
    private Task`1<IDisposable> m_releaser;
    private AsyncLock(bool isLocked);
    public static AsyncLock CreateLocked(IDisposable& releaser);
    public Task`1<IDisposable> LockAsync();
}
internal class ModernHttpClient.ByteArrayListStream : Stream {
    private Exception exception;
    private IDisposable lockRelease;
    private AsyncLock readStreamLock;
    private List`1<Byte[]> bytes;
    private bool isCompleted;
    private long maxLength;
    private long position;
    private int offsetInCurrentBuffer;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("ModernHttpClient.ByteArrayListStream/<ReadAsync>d__28")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public void AddByteArray(Byte[] arrayToAdd);
    public void Complete();
    public void SetException(Exception ex);
}
internal class ModernHttpClient.CancellableStreamContent : ProgressStreamContent {
    private Action onDispose;
    public CancellableStreamContent(Stream source, Action onDispose);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
}
public class ModernHttpClient.CaptiveNetworkException : WebException {
    private static string DefaultCaptiveNetworkErrorMessage;
    [CompilerGeneratedAttribute]
private Uri <SourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DestinationUri>k__BackingField;
    public Uri SourceUri { get; private set; }
    public Uri DestinationUri { get; private set; }
    public CaptiveNetworkException(Uri sourceUri, Uri destinationUri);
    [CompilerGeneratedAttribute]
public Uri get_SourceUri();
    [CompilerGeneratedAttribute]
private void set_SourceUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_DestinationUri();
    [CompilerGeneratedAttribute]
private void set_DestinationUri(Uri value);
}
public class ModernHttpClient.CertificatePinner : object {
    private Dictionary`2<string, String[]> Pins;
    public bool HasPins(string hostname);
    public void AddPins(string hostname, String[] pins);
    public bool Check(string hostname, List`1<X509Certificate2> peerCertificates);
}
public class ModernHttpClient.ClientCertificate : object {
    [CompilerGeneratedAttribute]
private string <Passphrase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawData>k__BackingField;
    public string Passphrase { get; public set; }
    public string RawData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Passphrase();
    [CompilerGeneratedAttribute]
public void set_Passphrase(string value);
    [CompilerGeneratedAttribute]
public string get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(string value);
}
public static class ModernHttpClient.CoreFoundation.CFNetworkError : object {
    public static NSString ErrorDomain { get; }
    public static NSString get_ErrorDomain();
}
public enum ModernHttpClient.CoreFoundation.CFNetworkErrors : Enum {
    public int value__;
    public static CFNetworkErrors CFHostErrorHostNotFound;
    public static CFNetworkErrors CFHostErrorUnknown;
    public static CFNetworkErrors CFSOCKSErrorUnknownClientVersion;
    public static CFNetworkErrors CFSOCKSErrorUnsupportedServerVersion;
    public static CFNetworkErrors CFSOCKS4ErrorRequestFailed;
    public static CFNetworkErrors CFSOCKS4ErrorIdentdFailed;
    public static CFNetworkErrors CFSOCKS4ErrorIdConflict;
    public static CFNetworkErrors CFSOCKS4ErrorUnknownStatusCode;
    public static CFNetworkErrors CFSOCKS5ErrorBadState;
    public static CFNetworkErrors CFSOCKS5ErrorBadResponseAddr;
    public static CFNetworkErrors CFSOCKS5ErrorBadCredentials;
    public static CFNetworkErrors CFSOCKS5ErrorUnsupportedNegotiationMethod;
    public static CFNetworkErrors CFSOCKS5ErrorNoAcceptableMethod;
    public static CFNetworkErrors CFFTPErrorUnexpectedStatusCode;
    public static CFNetworkErrors CFErrorHttpAuthenticationTypeUnsupported;
    public static CFNetworkErrors CFErrorHttpBadCredentials;
    public static CFNetworkErrors CFErrorHttpConnectionLost;
    public static CFNetworkErrors CFErrorHttpParseFailure;
    public static CFNetworkErrors CFErrorHttpRedirectionLoopDetected;
    public static CFNetworkErrors CFErrorHttpBadURL;
    public static CFNetworkErrors CFErrorHttpProxyConnectionFailure;
    public static CFNetworkErrors CFErrorHttpBadProxyCredentials;
    public static CFNetworkErrors CFErrorPACFileError;
    public static CFNetworkErrors CFErrorPACFileAuth;
    public static CFNetworkErrors CFErrorHttpsProxyConnectionFailure;
    public static CFNetworkErrors CFStreamErrorHttpsProxyFailureUnexpectedResponseToConnectMethod;
    public static CFNetworkErrors CFURLErrorUnknown;
    public static CFNetworkErrors CFURLErrorCancelled;
    public static CFNetworkErrors CFURLErrorBadURL;
    public static CFNetworkErrors CFURLErrorTimedOut;
    public static CFNetworkErrors CFURLErrorUnsupportedURL;
    public static CFNetworkErrors CFURLErrorCannotFindHost;
    public static CFNetworkErrors CFURLErrorCannotConnectToHost;
    public static CFNetworkErrors CFURLErrorNetworkConnectionLost;
    public static CFNetworkErrors CFURLErrorDNSLookupFailed;
    public static CFNetworkErrors CFURLErrorHTTPTooManyRedirects;
    public static CFNetworkErrors CFURLErrorResourceUnavailable;
    public static CFNetworkErrors CFURLErrorNotConnectedToInternet;
    public static CFNetworkErrors CFURLErrorRedirectToNonExistentLocation;
    public static CFNetworkErrors CFURLErrorBadServerResponse;
    public static CFNetworkErrors CFURLErrorUserCancelledAuthentication;
    public static CFNetworkErrors CFURLErrorUserAuthenticationRequired;
    public static CFNetworkErrors CFURLErrorZeroByteResource;
    public static CFNetworkErrors CFURLErrorCannotDecodeRawData;
    public static CFNetworkErrors CFURLErrorCannotDecodeContentData;
    public static CFNetworkErrors CFURLErrorCannotParseResponse;
    public static CFNetworkErrors CFURLErrorInternationalRoamingOff;
    public static CFNetworkErrors CFURLErrorCallIsActive;
    public static CFNetworkErrors CFURLErrorDataNotAllowed;
    public static CFNetworkErrors CFURLErrorRequestBodyStreamExhausted;
    public static CFNetworkErrors CFURLErrorFileDoesNotExist;
    public static CFNetworkErrors CFURLErrorFileIsDirectory;
    public static CFNetworkErrors CFURLErrorNoPermissionsToReadFile;
    public static CFNetworkErrors CFURLErrorDataLengthExceedsMaximum;
    public static CFNetworkErrors CFURLErrorSecureConnectionFailed;
    public static CFNetworkErrors CFURLErrorServerCertificateHasBadDate;
    public static CFNetworkErrors CFURLErrorServerCertificateUntrusted;
    public static CFNetworkErrors CFURLErrorServerCertificateHasUnknownRoot;
    public static CFNetworkErrors CFURLErrorServerCertificateNotYetValid;
    public static CFNetworkErrors CFURLErrorClientCertificateRejected;
    public static CFNetworkErrors CFURLErrorClientCertificateRequired;
    public static CFNetworkErrors CFURLErrorCannotLoadFromNetwork;
    public static CFNetworkErrors CFURLErrorCannotCreateFile;
    public static CFNetworkErrors CFURLErrorCannotOpenFile;
    public static CFNetworkErrors CFURLErrorCannotCloseFile;
    public static CFNetworkErrors CFURLErrorCannotWriteToFile;
    public static CFNetworkErrors CFURLErrorCannotRemoveFile;
    public static CFNetworkErrors CFURLErrorCannotMoveFile;
    public static CFNetworkErrors CFURLErrorDownloadDecodingFailedMidStream;
    public static CFNetworkErrors CFURLErrorDownloadDecodingFailedToComplete;
    public static CFNetworkErrors CFHTTPCookieCannotParseCookieFile;
    public static CFNetworkErrors CFNetServiceErrorUnknown;
    public static CFNetworkErrors CFNetServiceErrorCollision;
    public static CFNetworkErrors CFNetServiceErrorNotFound;
    public static CFNetworkErrors CFNetServiceErrorInProgress;
    public static CFNetworkErrors CFNetServiceErrorBadArgument;
    public static CFNetworkErrors CFNetServiceErrorCancel;
    public static CFNetworkErrors CFNetServiceErrorInvalid;
    public static CFNetworkErrors CFNetServiceErrorTimeout;
    public static CFNetworkErrors CFNetServiceErrorDNSServiceFailure;
}
internal class ModernHttpClient.EmptyDisposable : object {
    private static IDisposable instance;
    public static IDisposable Instance { get; }
    private static EmptyDisposable();
    public static IDisposable get_Instance();
    public sealed virtual void Dispose();
}
public static class ModernHttpClient.FailureMessages : object {
    public static string NoCertAtAll;
    public static string NoRoot;
    public static string ChainError;
    public static string SubjectNameMismatch;
    public static string PinMismatch;
    public static string NoPinsProvided;
    public static string InvalidPublicKey;
    public static string InvalidRawData;
}
public enum ModernHttpClient.Foundation.NSUrlErrorExtended : Enum {
    public int value__;
    public static NSUrlErrorExtended Unknown;
    public static NSUrlErrorExtended Cancelled;
    public static NSUrlErrorExtended BadURL;
    public static NSUrlErrorExtended TimedOut;
    public static NSUrlErrorExtended UnsupportedURL;
    public static NSUrlErrorExtended CannotFindHost;
    public static NSUrlErrorExtended CannotConnectToHost;
    public static NSUrlErrorExtended NetworkConnectionLost;
    public static NSUrlErrorExtended DNSLookupFailed;
    public static NSUrlErrorExtended HTTPTooManyRedirects;
    public static NSUrlErrorExtended ResourceUnavailable;
    public static NSUrlErrorExtended NotConnectedToInternet;
    public static NSUrlErrorExtended RedirectToNonExistentLocation;
    public static NSUrlErrorExtended BadServerResponse;
    public static NSUrlErrorExtended UserCancelledAuthentication;
    public static NSUrlErrorExtended UserAuthenticationRequired;
    public static NSUrlErrorExtended ZeroByteResource;
    public static NSUrlErrorExtended CannotDecodeRawData;
    public static NSUrlErrorExtended CannotDecodeContentData;
    public static NSUrlErrorExtended CannotParseResponse;
    public static NSUrlErrorExtended InternationalRoamingOff;
    public static NSUrlErrorExtended CallIsActive;
    public static NSUrlErrorExtended DataNotAllowed;
    public static NSUrlErrorExtended RequestBodyStreamExhausted;
    public static NSUrlErrorExtended SecureConnectionFailed;
    public static NSUrlErrorExtended ServerCertificateHasBadDate;
    public static NSUrlErrorExtended ServerCertificateUntrusted;
    public static NSUrlErrorExtended ServerCertificateHasUnknownRoot;
    public static NSUrlErrorExtended ServerCertificateNotYetValid;
    public static NSUrlErrorExtended ClientCertificateRejected;
    public static NSUrlErrorExtended ClientCertificateRequired;
    public static NSUrlErrorExtended CannotLoadFromNetwork;
    public static NSUrlErrorExtended CannotCreateFile;
    public static NSUrlErrorExtended CannotOpenFile;
    public static NSUrlErrorExtended CannotCloseFile;
    public static NSUrlErrorExtended CannotWriteToFile;
    public static NSUrlErrorExtended CannotRemoveFile;
    public static NSUrlErrorExtended CannotMoveFile;
    public static NSUrlErrorExtended DownloadDecodingFailedMidStream;
    public static NSUrlErrorExtended DownloadDecodingFailedToComplete;
    public static NSUrlErrorExtended FileDoesNotExist;
    public static NSUrlErrorExtended FileIsDirectory;
    public static NSUrlErrorExtended NoPermissionsToReadFile;
    public static NSUrlErrorExtended DataLengthExceedsMaximum;
    public static NSUrlErrorExtended BackgroundSessionRequiresSharedContainer;
    public static NSUrlErrorExtended BackgroundSessionInUseByAnotherProcess;
    public static NSUrlErrorExtended BackgroundSessionWasDisconnected;
}
internal class ModernHttpClient.InflightOperation : object {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<HttpResponseMessage> <FutureResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressDelegate <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private ByteArrayListStream <ResponseBody>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    public HttpRequestMessage Request { get; public set; }
    public TaskCompletionSource`1<HttpResponseMessage> FutureResponse { get; public set; }
    public ProgressDelegate Progress { get; public set; }
    public ByteArrayListStream ResponseBody { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public bool IsCompleted { get; public set; }
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<HttpResponseMessage> get_FutureResponse();
    [CompilerGeneratedAttribute]
public void set_FutureResponse(TaskCompletionSource`1<HttpResponseMessage> value);
    [CompilerGeneratedAttribute]
public ProgressDelegate get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(ProgressDelegate value);
    [CompilerGeneratedAttribute]
public ByteArrayListStream get_ResponseBody();
    [CompilerGeneratedAttribute]
public void set_ResponseBody(ByteArrayListStream value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
public void set_IsCompleted(bool value);
}
public class ModernHttpClient.NativeCookieHandler : object {
    public List`1<Cookie> Cookies { get; }
    public void SetCookies(IEnumerable`1<Cookie> cookies);
    public void DeleteCookies();
    public void SetCookie(Cookie cookie);
    public void DeleteCookie(Cookie cookie);
    public List`1<Cookie> get_Cookies();
    private static NSHttpCookie ToNativeCookie(Cookie cookie);
    private static Cookie ToNetCookie(NSHttpCookie cookie);
}
public class ModernHttpClient.NativeMessageHandler : HttpClientHandler {
    private NSUrlSession session;
    private Dictionary`2<NSUrlSessionTask, InflightOperation> inflightRequests;
    private Dictionary`2<HttpRequestMessage, ProgressDelegate> registeredProgressCallbacks;
    private Dictionary`2<string, string> headerSeparators;
    private bool throwOnCaptiveNetwork;
    [CompilerGeneratedAttribute]
private bool <DisableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    public CertificatePinner CertificatePinner;
    private NSUrlCredential UrlCredential;
    public TLSConfig TLSConfig;
    public string PinningMode;
    public bool DisableCaching { get; public set; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    public NativeMessageHandler(bool throwOnCaptiveNetwork, TLSConfig tLSConfig, NativeCookieHandler cookieHandler, IWebProxy proxy);
    [CompilerGeneratedAttribute]
public bool get_DisableCaching();
    [CompilerGeneratedAttribute]
public void set_DisableCaching(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(Nullable`1<TimeSpan> value);
    private void SetClientCertificate(ClientCertificate certificate);
    private string getHeaderSeparator(string name);
    public void RegisterForProgress(HttpRequestMessage request, ProgressDelegate callback);
    private ProgressDelegate getAndRemoveCallbackFromRegister(HttpRequestMessage request);
    [AsyncStateMachineAttribute("ModernHttpClient.NativeMessageHandler/<SendAsync>d__23")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class ModernHttpClient.Pin : object {
    [CompilerGeneratedAttribute]
private string <Hostname>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublicKeys>k__BackingField;
    public string Hostname { get; public set; }
    public String[] PublicKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hostname();
    [CompilerGeneratedAttribute]
public void set_Hostname(string value);
    [CompilerGeneratedAttribute]
public String[] get_PublicKeys();
    [CompilerGeneratedAttribute]
public void set_PublicKeys(String[] value);
}
public class ModernHttpClient.ProgressDelegate : MulticastDelegate {
    public ProgressDelegate(object object, IntPtr method);
    public virtual void Invoke(long bytes, long totalBytes, long totalBytesExpected);
    public virtual IAsyncResult BeginInvoke(long bytes, long totalBytes, long totalBytesExpected, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ModernHttpClient.ProgressStreamContent : StreamContent {
    private long _totalBytes;
    private long _totalBytesExpected;
    private ProgressDelegate _progress;
    public ProgressDelegate Progress { get; public set; }
    public ProgressStreamContent(Stream stream, CancellationToken token);
    public ProgressStreamContent(Stream stream, int bufferSize);
    private ProgressStreamContent(ProgressStream stream);
    private ProgressStreamContent(ProgressStream stream, int bufferSize);
    private void init(ProgressStream stream);
    private void reset();
    private void readBytes(long bytes);
    public ProgressDelegate get_Progress();
    public void set_Progress(ProgressDelegate value);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
}
public class ModernHttpClient.SpkiFingerprint : object {
    public static string ComputeSHA256(Byte[] certificate);
    public static string ComputeSHA1(Byte[] certificate);
}
public class ModernHttpClient.TLSConfig : object {
    [CompilerGeneratedAttribute]
private List`1<Pin> <Pins>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCertificate <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DangerousAcceptAnyServerCertificateValidator>k__BackingField;
    public List`1<Pin> Pins { get; public set; }
    public ClientCertificate ClientCertificate { get; public set; }
    public bool DangerousAcceptAnyServerCertificateValidator { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<Pin> get_Pins();
    [CompilerGeneratedAttribute]
public void set_Pins(List`1<Pin> value);
    [CompilerGeneratedAttribute]
public ClientCertificate get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(ClientCertificate value);
    [CompilerGeneratedAttribute]
public bool get_DangerousAcceptAnyServerCertificateValidator();
    [CompilerGeneratedAttribute]
public void set_DangerousAcceptAnyServerCertificateValidator(bool value);
}
internal static class ModernHttpClient.Utility : object {
    public static bool MatchHostnameToPattern(string hostname, string pattern);
    public static bool PathMatches(string path, string cookiePath);
    public static void VerifyPins(String[] pins);
}
[ExtensionAttribute]
internal static class ModernHttpClient.X509Certificate2Extension : object {
    [ExtensionAttribute]
internal static List`1<string> ParseSubjectAlternativeName(X509Certificate2 cert);
}
