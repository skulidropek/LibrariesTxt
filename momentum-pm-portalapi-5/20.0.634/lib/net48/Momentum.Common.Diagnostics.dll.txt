internal static class Holzer.Common.GlobalAssemblyInfo : object {
    public static string CompanyName;
    public static string CompanyNameShort;
    public static string ProductNameMessaging;
    public static string ProductNameDataVault;
    public static string ProductNameModus;
    public static string ProductNameApps;
    public static string ProductNameBusiness;
    public static string ProductNameBoplats;
    public static string ProductNameReporting;
    public static string ProductNameFiles;
    public static string ProductNameLogin;
    public static string ProductNameAvalanche;
    public static string ProductNameSignaling;
    public static string ProductNameGraphQL;
    public static string ProductNameCommon;
    public static string ProductNameConsetti;
    public static string ProductNameMaintainDB;
    public static string ProductNameRedisHost;
    public static string CopyrightText;
    public static string CopyrightTextYears;
}
public static class Holzer.Hosting.Debugging : object {
    public static IDebugging Default;
    private static int hostId;
    private static ConsoleColor originalConsoleForegroundColor;
    private static DateTime lastWrittenDay;
    private static ConsoleColor foregroundColor;
    [ThreadStaticAttribute]
private static int indentation;
    [ThreadStaticAttribute]
private static string prefix;
    private static bool verbose;
    private static List`1<IDebugListener> listeners;
    unknown static ConsoleColor ForegoundColor {public set; }
    public static int HostId { get; public set; }
    public static bool Verbose { get; public set; }
    private static Debugging();
    public static void set_ForegoundColor(ConsoleColor value);
    public static int get_HostId();
    public static void set_HostId(int value);
    public static void Attach(IDebugListener listener);
    public static void Detach(IDebugListener listener);
    public static void WriteVerboseLine(string s, object context, string taskName, bool forcePersist);
    public static void WriteVerboseLine(Func`1<string> s, object context, string taskName, bool forcePersist);
    private static void WriteVerboseCore(string s, object context, string taskName, bool forcePersist);
    public static void WriteLine(Exception x, string reference, object context, string appInstanceId);
    public static void WriteLine();
    public static void WriteLine(string s, object context, string taskName, string appInstanceId);
    public static void WriteLine(FaultPriority priority, string s, string reference, Dictionary`2<string, string> context);
    public static void WriteWarningLine(string s, object context);
    public static void WriteErrorLine(string s, string reference, object context, string taskName, string appInstanceId);
    public static void WriteData(string type, object context);
    public static void Indent();
    public static void Collapse();
    public static bool get_Verbose();
    public static void set_Verbose(bool value);
    public static void WriteDate();
    private static string GetLinePrefix();
    public static void ResetForegoundColor();
}
public class Holzer.Hosting.DefaultDebugging : object {
    public sealed virtual void WriteLine(Exception x, string reference, object context);
    public sealed virtual void WriteLine();
    public sealed virtual void WriteLine(string s, object context);
    public sealed virtual void WriteLine(FaultPriority priority, string s, string reference, Dictionary`2<string, string> context);
    public sealed virtual void WriteVerboseLine(string s, object context);
    public sealed virtual void WriteWarningLine(string s, object context);
    public sealed virtual void WriteErrorLine(string s, string reference, object context);
}
public interface Holzer.Hosting.IDebugListener {
    public abstract virtual void WriteLine(int identation, Exception x, string reference, Dictionary`2<string, string> context, string taskName, string appInstanceId);
    public abstract virtual void WriteLine(int identation, string s, Dictionary`2<string, string> context, string taskName, string appInstanceId);
    public abstract virtual void WriteLine(int identation, FaultPriority priority, string s, string reference, Dictionary`2<string, string> context, string taskName, string appInstanceId);
    public abstract virtual void WriteWarningLine(int identation, string s, Dictionary`2<string, string> context, string taskName, string appInstanceId);
    public abstract virtual void WriteVerboseLine(int indentation, string s, Dictionary`2<string, string> context, string taskName, bool forcedPersist, string appInstanceId);
    public abstract virtual void WriteData(string type, Dictionary`2<string, string> context, string taskName, string appInstanceId);
}
public class Momentum.Common.Diagnostics.DiagnosticsContext : object {
    private static AsyncLocal`1<string> rayId;
    private static AsyncLocal`1<string> forwardedFor;
    private static AsyncLocal`1<string> deviceId;
    private static AsyncLocal`1<string> client;
    private static AsyncLocal`1<string> referer;
    private static AsyncLocal`1<string> userAgent;
    private static AsyncLocal`1<string> changeSourceData;
    private static AsyncLocal`1<string> controllerName;
    private static AsyncLocal`1<string> operationName;
    private static DiagnosticsContext();
    public static string GetRayId();
    public static void SetRayId(string value);
    public static string GenerateRayId();
    public static string GetForwardedFor();
    public static void SetForwardedFor(string value);
    public static string GetDeviceId();
    public static void SetDeviceId(string value);
    public static string GetClient();
    public static void SetClient(string value);
    public static string GetReferer();
    public static void SetReferer(string value);
    public static string GetUserAgent();
    public static void SetUserAgent(string value);
    public static string GetChangeSourceData();
    public static void SetChangeSourceData(string value);
    public static string GetControllerName();
    public static void SetControllerName(string value);
    public static string GetOperationName();
    public static void SetOperationName(string value);
}
public class Momentum.Common.Diagnostics.DynamicDictionaryConverter : object {
    public static Dictionary`2<string, string> ToStringDictionary(object context);
}
public interface Momentum.Common.Diagnostics.IDebugging {
    public abstract virtual void WriteVerboseLine(string s, object context);
    public abstract virtual void WriteLine(Exception x, string reference, object context);
    public abstract virtual void WriteLine();
    public abstract virtual void WriteLine(string s, object context);
    public abstract virtual void WriteLine(FaultPriority priority, string s, string reference, Dictionary`2<string, string> context);
    public abstract virtual void WriteWarningLine(string s, object context);
    public abstract virtual void WriteErrorLine(string s, string reference, object context);
}
public class Momentum.Common.Diagnostics.UsageContext : object {
    private static AsyncLocal`1<UsageContextData> usage;
    [CompilerGeneratedAttribute]
private static EventHandler RequestChanged;
    public static UsageContextData Current { get; }
    private static UsageContext();
    public static UsageContextData get_Current();
    private static UsageContextData GetOrCreateCurrent();
    public static void CountRequest(string usageType, Nullable`1<decimal> complexityCost);
    public static void CountAdditional(string usageType, Nullable`1<decimal> complexityCost);
    public static UsageContextData Initialize();
    [CompilerGeneratedAttribute]
public static void add_RequestChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_RequestChanged(EventHandler value);
}
public class Momentum.Common.Diagnostics.UsageContextData : object {
    [CompilerGeneratedAttribute]
private UsageContextDataItem <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UsageContextDataItem> <Additional>k__BackingField;
    public UsageContextDataItem Request { get; public set; }
    public List`1<UsageContextDataItem> Additional { get; public set; }
    public UsageContextData(UsageContextDataItem request, List`1<UsageContextDataItem> additional);
    [CompilerGeneratedAttribute]
public UsageContextDataItem get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(UsageContextDataItem value);
    [CompilerGeneratedAttribute]
public List`1<UsageContextDataItem> get_Additional();
    [CompilerGeneratedAttribute]
public void set_Additional(List`1<UsageContextDataItem> value);
}
public class Momentum.Common.Diagnostics.UsageContextDataItem : object {
    [CompilerGeneratedAttribute]
private string <UsageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <ComplexityCost>k__BackingField;
    public string UsageType { get; public set; }
    public Nullable`1<decimal> ComplexityCost { get; public set; }
    public UsageContextDataItem(string usageType, Nullable`1<decimal> complexityCost);
    [CompilerGeneratedAttribute]
public string get_UsageType();
    [CompilerGeneratedAttribute]
public void set_UsageType(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_ComplexityCost();
    [CompilerGeneratedAttribute]
public void set_ComplexityCost(Nullable`1<decimal> value);
}
public static class Momentum.Common.Diagnostics.UsageType : object {
    public static string LoginBankId;
    public static string LoginApi;
    public static string FastighetApi;
    public static string FastApi;
    private static UsageType();
}
