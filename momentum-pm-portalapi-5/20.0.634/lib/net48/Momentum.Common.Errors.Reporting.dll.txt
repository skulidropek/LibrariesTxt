internal static class Holzer.Common.GlobalAssemblyInfo : object {
    public static string CompanyName;
    public static string CompanyNameShort;
    public static string ProductNameMessaging;
    public static string ProductNameDataVault;
    public static string ProductNameModus;
    public static string ProductNameApps;
    public static string ProductNameBusiness;
    public static string ProductNameBoplats;
    public static string ProductNameReporting;
    public static string ProductNameFiles;
    public static string ProductNameLogin;
    public static string ProductNameAvalanche;
    public static string ProductNameSignaling;
    public static string ProductNameGraphQL;
    public static string ProductNameCommon;
    public static string ProductNameConsetti;
    public static string ProductNameMaintainDB;
    public static string ProductNameRedisHost;
    public static string CopyrightText;
    public static string CopyrightTextYears;
}
public static class Momentum.Common.Errors.Reporting.ErrorReportingService : object {
    [CompilerGeneratedAttribute]
private static IErrorReportingService <Default>k__BackingField;
    public static IErrorReportingService Default { get; private set; }
    public static IErrorReportingService DefaultRequired { get; }
    [CompilerGeneratedAttribute]
public static IErrorReportingService get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(IErrorReportingService value);
    public static IErrorReportingService get_DefaultRequired();
    public static void Use(IErrorReportingService service);
    public static void TryUse(Func`1<IErrorReportingService> factory);
}
public static class Momentum.Common.Errors.Reporting.Formatting.ExceptionFormatting : object {
    private static IExceptionFormattingService defaultService;
    public static IExceptionFormattingService Default { get; public set; }
    private static ExceptionFormatting();
    public static IExceptionFormattingService get_Default();
    public static void set_Default(IExceptionFormattingService value);
}
public class Momentum.Common.Errors.Reporting.Formatting.ExceptionFormattingService : object {
    private List`1<Action`1<FormatExceptionsArgs>> exceptionFormatterList;
    public sealed virtual void FormatException(FormatExceptionsArgs args);
    public sealed virtual void RegisterExceptionFormatter(Action`1<FormatExceptionsArgs> handler);
}
public class Momentum.Common.Errors.Reporting.Formatting.FormatExceptionsArgs : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionDetails>k__BackingField;
    public Exception Exception { get; }
    public bool IsHandled { get; private set; }
    public string Message { get; private set; }
    public string ExceptionDetails { get; private set; }
    public FormatExceptionsArgs(Exception currentException);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public bool get_IsHandled();
    [CompilerGeneratedAttribute]
private void set_IsHandled(bool value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionDetails();
    [CompilerGeneratedAttribute]
private void set_ExceptionDetails(string value);
    public void HandleFormatting(string message, string exceptionDetails);
}
public interface Momentum.Common.Errors.Reporting.Formatting.IExceptionFormattingService {
    public abstract virtual void FormatException(FormatExceptionsArgs args);
    public abstract virtual void RegisterExceptionFormatter(Action`1<FormatExceptionsArgs> handler);
}
public interface Momentum.Common.Errors.Reporting.IErrorReportingService {
    public abstract virtual void Report(Exception error);
    public abstract virtual Task ReportAsync(Exception error);
}
