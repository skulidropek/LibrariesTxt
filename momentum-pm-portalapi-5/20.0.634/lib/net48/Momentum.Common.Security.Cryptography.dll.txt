public class Momentum.Security.Cryptography.CreatedSymmetricCryptoKey : object {
    [CompilerGeneratedAttribute]
private string <KeyData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    public string KeyData { get; }
    public int KeySize { get; }
    public CreatedSymmetricCryptoKey(string keyData, int keySize);
    [CompilerGeneratedAttribute]
public string get_KeyData();
    [CompilerGeneratedAttribute]
public int get_KeySize();
}
public enum Momentum.Security.Cryptography.CryptoDataType : Enum {
    public byte value__;
    public static CryptoDataType LoginContextKey;
    public static CryptoDataType LoginAuthorityKey;
    public static CryptoDataType AppsConfig;
    public static CryptoDataType AppsProtectionKeyStorage;
}
public enum Momentum.Security.Cryptography.CryptoKeyType : Enum {
    public int value__;
    public static CryptoKeyType Aes256;
}
public class Momentum.Security.Cryptography.CryptoService : object {
    private static byte PreambleV1;
    private static int Sha256HashLength;
    private static int PlainPackDataTypeLength;
    private static int CipherPackPreambleLength;
    private static int CipherPackKeyIdLength;
    private static int CipherPackIvLengthIdLength;
    [CompilerGeneratedAttribute]
private static ICryptoService <Default>k__BackingField;
    public static ICryptoService Default { get; }
    private static CryptoService();
    [CompilerGeneratedAttribute]
public static ICryptoService get_Default();
    public sealed virtual Byte[] SymmetricEncryptString(string keyId, SymmetricCryptoKey key, CryptoDataType dataType, string data, int plainBytesMaxLength);
    public sealed virtual Byte[] SymmetricEncrypt(string keyId, SymmetricCryptoKey key, CryptoDataType dataType, Byte[] plainBytes, int plainBytesMaxLength);
    public sealed virtual string SymmetricDecryptString(Func`2<string, SymmetricCryptoKey> keyResolver, CryptoDataType dataType, Byte[] data);
    public sealed virtual Byte[] SymmetricDecrypt(Func`2<string, SymmetricCryptoKey> keyResolver, CryptoDataType dataType, Byte[] cipherPack);
    public sealed virtual string GenerateRandomText(int approximateByteLength);
    public sealed virtual string HashSha256(string data);
}
public interface Momentum.Security.Cryptography.ICryptoService {
    public abstract virtual Byte[] SymmetricEncrypt(string keyId, SymmetricCryptoKey key, CryptoDataType dataType, Byte[] plainBytes, int plainBytesMaxLength);
    public abstract virtual Byte[] SymmetricEncryptString(string keyId, SymmetricCryptoKey key, CryptoDataType dataType, string data, int plainBytesMaxLength);
    public abstract virtual Byte[] SymmetricDecrypt(Func`2<string, SymmetricCryptoKey> keyResolver, CryptoDataType dataType, Byte[] cipherPack);
    public abstract virtual string SymmetricDecryptString(Func`2<string, SymmetricCryptoKey> keyResolver, CryptoDataType dataType, Byte[] data);
    public abstract virtual string GenerateRandomText(int approximateLength);
    public abstract virtual string HashSha256(string token);
}
public class Momentum.Security.Cryptography.SymmetricCryptoKey : object {
    private static RandomNumberGenerator rng;
    private static CipherMode AesCipherMode;
    private static PaddingMode AesPaddingMode;
    private Func`2<Byte[], ICryptoTransform> encryptorFactory;
    private Func`2<Byte[], ICryptoTransform> decryptorFactory;
    private Func`1<Byte[]> ivGenerator;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeySize>k__BackingField;
    public Nullable`1<int> KeySize { get; private set; }
    public SymmetricCryptoKey(int keyLength, Func`2<Byte[], ICryptoTransform> encryptorFactory, Func`2<Byte[], ICryptoTransform> decryptorFactory, Func`1<Byte[]> ivGenerator);
    private static SymmetricCryptoKey();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeySize();
    [CompilerGeneratedAttribute]
private void set_KeySize(Nullable`1<int> value);
    public static SymmetricCryptoKey Load(CryptoKeyType type, string data, Action`1<SymmetricCryptoKeyUsageArgs> usage);
    public static SymmetricCryptoKey LoadAes(Byte[] data, Action`1<SymmetricCryptoKeyUsageArgs> usage, Nullable`1<int> bitLength);
    public static CreatedSymmetricCryptoKey Create(CryptoKeyType type);
    private static CreatedSymmetricCryptoKey CreateAes256();
    private static Byte[] RandomBytes(int length);
    public Byte[] GenerateIV();
    public ICryptoTransform CreateDecryptor(Byte[] iv);
    public ICryptoTransform CreateEncryptor(Byte[] iv);
}
public class Momentum.Security.Cryptography.SymmetricCryptoKeyUsageArgs : object {
    [CompilerGeneratedAttribute]
private SymmetricCryptoKeyUsageType <Type>k__BackingField;
    public SymmetricCryptoKeyUsageType Type { get; }
    public SymmetricCryptoKeyUsageArgs(SymmetricCryptoKeyUsageType type);
    [CompilerGeneratedAttribute]
public SymmetricCryptoKeyUsageType get_Type();
}
public enum Momentum.Security.Cryptography.SymmetricCryptoKeyUsageType : Enum {
    public int value__;
    public static SymmetricCryptoKeyUsageType Unprotect;
    public static SymmetricCryptoKeyUsageType Protect;
}
