public interface Momentum.Common.Security.Keys.DataProtection.IDataProtectionKeys {
    public abstract virtual ProtectionKeyCurrentSymmetric GetCurrentProtectKeySymmetric(bool required);
    public abstract virtual SymmetricCryptoKey GetUnprotectKeySymmetric(string keyId, bool checkNotBefore, bool checkNotAfter, bool checkRevoked, bool throwIfMissing);
}
public interface Momentum.Common.Security.Keys.IKeyBuilder {
    public abstract virtual ProtectionKey CreateCertificateKey(string keyId, ProtectionKeyTypeId keyType, ProtectionKeyPurposeId purpose, string commonName, DateTime created, Nullable`1<DateTime> notBefore);
    public abstract virtual ProtectionKey CreateSymmetricKey(string keyId, ProtectionKeyTypeId keyType, ProtectionKeyPurposeId purpose, DateTime created, Nullable`1<DateTime> notBefore);
}
public interface Momentum.Common.Security.Keys.IKeyConverter {
    public abstract virtual SecurityKey BuildPrivateSecurityKey(X509Certificate2 certificate, string keyId);
    public abstract virtual SecurityKey BuildPublicSecurityKey(X509Certificate2 certificate, string keyId);
}
public interface Momentum.Common.Security.Keys.ISigningCredentialsBuilder {
    public abstract virtual SigningCredentials BuildSigningCredentials(SecurityKey signingKey);
    public abstract virtual SigningCredentials BuildSigningCredentials(X509Certificate2 certificate);
}
public class Momentum.Common.Security.Keys.KeyBuilder : object {
    public sealed virtual ProtectionKey CreateCertificateKey(string keyId, ProtectionKeyTypeId keyType, ProtectionKeyPurposeId purpose, string commonName, DateTime created, Nullable`1<DateTime> notBefore);
    private ProtectionKey CreateCertificateKeyRsa(string keyId, ProtectionKeyTypeId keyType, ProtectionKeyPurposeId purpose, string commonName, DateTime created, Nullable`1<DateTime> notBefore, HashAlgorithmName hashAlgorithmName, RSASignaturePadding padding);
    private ProtectionKey CreateCertificateKeyEc(string keyId, ProtectionKeyTypeId keyType, ProtectionKeyPurposeId purpose, string commonName, DateTime created, Nullable`1<DateTime> notBefore, HashAlgorithmName hashAlgorithmName, ECCurve curve, int keySize);
    public sealed virtual ProtectionKey CreateSymmetricKey(string keyId, ProtectionKeyTypeId keyType, ProtectionKeyPurposeId purpose, DateTime created, Nullable`1<DateTime> notBefore);
}
public class Momentum.Common.Security.Keys.KeyConverter : object {
    [CompilerGeneratedAttribute]
private static IKeyConverter <Default>k__BackingField;
    public static IKeyConverter Default { get; }
    private static KeyConverter();
    [CompilerGeneratedAttribute]
public static IKeyConverter get_Default();
    public sealed virtual SecurityKey BuildPrivateSecurityKey(X509Certificate2 certificate, string keyId);
    public sealed virtual SecurityKey BuildPublicSecurityKey(X509Certificate2 certificate, string keyId);
}
public class Momentum.Common.Security.Keys.ProtectionKeyCurrentCertificate : object {
    private Func`2<ProtectionKeyUsageArgs, X509Certificate2> certificateAccessor;
    private Func`2<ProtectionKeyUsageArgs, SecurityKey> securityKeyAccessor;
    private Func`2<ProtectionKeyUsageArgs, SigningCredentials> signingCredentialsAccessor;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextKeyId>k__BackingField;
    public string KeyId { get; }
    public DateTime NextChange { get; }
    public string NextKeyId { get; }
    public ProtectionKeyCurrentCertificate(string keyId, Func`2<ProtectionKeyUsageArgs, X509Certificate2> certificateAccessor, Func`2<ProtectionKeyUsageArgs, SecurityKey> securityKeyAccessor, Func`2<ProtectionKeyUsageArgs, SigningCredentials> signingCredentialsAccessor, DateTime nextChange, string nextKeyId);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    public X509Certificate2 GetCertificate(ProtectionKeyUsageArgs usage);
    public SecurityKey GetSecurityKey(ProtectionKeyUsageArgs usage);
    public SigningCredentials GetSigningCredentials(ProtectionKeyUsageArgs usage);
    [CompilerGeneratedAttribute]
public DateTime get_NextChange();
    [CompilerGeneratedAttribute]
public string get_NextKeyId();
}
public class Momentum.Common.Security.Keys.ProtectionKeyCurrentSymmetric : object {
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricCryptoKey <SymmetricKey>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NextChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextKeyId>k__BackingField;
    public string KeyId { get; }
    public SymmetricCryptoKey SymmetricKey { get; }
    public DateTime NextChange { get; }
    public string NextKeyId { get; }
    public ProtectionKeyCurrentSymmetric(string keyId, SymmetricCryptoKey key, DateTime nextChange, string nextKeyId);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
public SymmetricCryptoKey get_SymmetricKey();
    [CompilerGeneratedAttribute]
public DateTime get_NextChange();
    [CompilerGeneratedAttribute]
public string get_NextKeyId();
}
public enum Momentum.Common.Security.Keys.ProtectionKeyPurposeId : Enum {
    public int value__;
    public static ProtectionKeyPurposeId Apps;
    public static ProtectionKeyPurposeId Transport;
    public static ProtectionKeyPurposeId Data;
    public static ProtectionKeyPurposeId Auth;
}
public enum Momentum.Common.Security.Keys.ProtectionKeyTypeId : Enum {
    public int value__;
    public static ProtectionKeyTypeId CertRsaSha256Pkcs1;
    public static ProtectionKeyTypeId CertEcNist384;
    public static ProtectionKeyTypeId CertEcNist256;
    public static ProtectionKeyTypeId Rsa;
    public static ProtectionKeyTypeId Aes256;
}
public static class Momentum.Common.Security.Keys.ProtectionKeyTypes : object {
    public static ProtectionKeyTypeId[] Symmetric;
    public static ProtectionKeyTypeId[] Certificate;
    private static ProtectionKeyTypes();
}
public class Momentum.Common.Security.Keys.ProtectionKeyUsageArgs : object {
    public static ProtectionKeyUsageArgs None;
    public static ProtectionKeyUsageArgs Transport;
    public static ProtectionKeyUsageArgs AuthProve;
    public static ProtectionKeyUsageArgs AuthVerify;
    public static ProtectionKeyUsageArgs Protect;
    public static ProtectionKeyUsageArgs Unprotect;
    [CompilerGeneratedAttribute]
private ProtectionKeyUsageType <Type>k__BackingField;
    public ProtectionKeyUsageType Type { get; public set; }
    public ProtectionKeyUsageArgs(ProtectionKeyUsageType type);
    private static ProtectionKeyUsageArgs();
    [CompilerGeneratedAttribute]
public ProtectionKeyUsageType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ProtectionKeyUsageType value);
}
public enum Momentum.Common.Security.Keys.ProtectionKeyUsageType : Enum {
    public int value__;
    public static ProtectionKeyUsageType AuthProve;
    public static ProtectionKeyUsageType AuthVerify;
    public static ProtectionKeyUsageType Protect;
    public static ProtectionKeyUsageType Unprotect;
    public static ProtectionKeyUsageType Transport;
    public static ProtectionKeyUsageType None;
}
public class Momentum.Common.Security.Keys.SecurityKeyData : object {
    [CompilerGeneratedAttribute]
private string <Use>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <N>k__BackingField;
    [CompilerGeneratedAttribute]
private string <E>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Crv>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Y>k__BackingField;
    public string Use { get; public set; }
    public string Kid { get; public set; }
    public string Kty { get; public set; }
    public string N { get; public set; }
    public string E { get; public set; }
    public string Crv { get; public set; }
    public string X { get; public set; }
    public string Y { get; public set; }
    public static SecurityKeyData Create(X509Certificate2 cert, string kid);
    private static string GetCurveName(ECParameters publicKey);
    public static ECCurve GetCurve(string name);
    public static string GetCertificateThumbprint(X509Certificate2 cert);
    private static string ToBase64String(Byte[] data);
    [CompilerGeneratedAttribute]
public string get_Use();
    [CompilerGeneratedAttribute]
public void set_Use(string value);
    [CompilerGeneratedAttribute]
public string get_Kid();
    [CompilerGeneratedAttribute]
public void set_Kid(string value);
    [CompilerGeneratedAttribute]
public string get_Kty();
    [CompilerGeneratedAttribute]
public void set_Kty(string value);
    [CompilerGeneratedAttribute]
public string get_N();
    [CompilerGeneratedAttribute]
public void set_N(string value);
    [CompilerGeneratedAttribute]
public string get_E();
    [CompilerGeneratedAttribute]
public void set_E(string value);
    [CompilerGeneratedAttribute]
public string get_Crv();
    [CompilerGeneratedAttribute]
public void set_Crv(string value);
    [CompilerGeneratedAttribute]
public string get_X();
    [CompilerGeneratedAttribute]
public void set_X(string value);
    [CompilerGeneratedAttribute]
public string get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(string value);
}
public class Momentum.Common.Security.Keys.SecurityKeyDataSet : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKeyData> <Keys>k__BackingField;
    public IEnumerable`1<SecurityKeyData> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKeyData> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IEnumerable`1<SecurityKeyData> value);
}
public class Momentum.Common.Security.Keys.SigningCredentialsBuilder : object {
    private IKeyConverter keyConverter;
    [CompilerGeneratedAttribute]
private static ISigningCredentialsBuilder <Default>k__BackingField;
    public static ISigningCredentialsBuilder Default { get; }
    public SigningCredentialsBuilder(IKeyConverter keyConverter);
    private static SigningCredentialsBuilder();
    [CompilerGeneratedAttribute]
public static ISigningCredentialsBuilder get_Default();
    public sealed virtual SigningCredentials BuildSigningCredentials(SecurityKey signingKey);
    public sealed virtual SigningCredentials BuildSigningCredentials(X509Certificate2 certificate);
}
public class Momentum.Common.Security.Keys.Store.DirectoryProtectionKeyStorage : object {
    private static ProtectionKeyTypeId DefaultCertificateKeyType;
    private static ProtectionKeyTypeId DefaultSymmetricKeyType;
    private static string KeyFileExtension;
    private static int ClockSkewSeconds;
    private IHostEnvironmentService hostEnvironment;
    private IErrorReportingService errorReportingService;
    private IKeyBuilder keyBuilder;
    private Dictionary`2<string, ProtectionKey> keySet;
    private bool watcherReading;
    private SemaphoreSlim writeLock;
    private FileSystemWatcher watcher;
    [CompilerGeneratedAttribute]
private string <StoragePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Monitor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Writable>k__BackingField;
    [CompilerGeneratedAttribute]
private Action Changed;
    public string StoragePath { get; private set; }
    public bool Monitor { get; private set; }
    public bool Writable { get; private set; }
    public DirectoryProtectionKeyStorage(IHostEnvironmentService hostEnvironment, IErrorReportingService errorReportingService, IKeyBuilder keyBuilder);
    [CompilerGeneratedAttribute]
public string get_StoragePath();
    [CompilerGeneratedAttribute]
private void set_StoragePath(string value);
    [CompilerGeneratedAttribute]
public bool get_Monitor();
    [CompilerGeneratedAttribute]
private void set_Monitor(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Writable();
    [CompilerGeneratedAttribute]
private void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(Action value);
    private void Initialize(string path, bool monitor);
    private void FileChangedHandler();
    private void ReadKeys(string throwOnErrorIfFileName);
    private static ProtectionKey LoadKeyFile(string filePath, string dataOverride);
    private string GetKeyFileName(ProtectionKey key);
    private string ToLowerFirstChar(string v);
    private string DateString(DateTime created);
    private static DateTime DateValue(string name, string value);
    private string WriteKeyFile(ProtectionKey key, Action`1<ProtectionKey> parseTest);
    public sealed virtual IEnumerable`1<ProtectionKeyStorageListItem> ListKeys();
    public sealed virtual ProtectionKeyCurrentCertificate GetCurrentCertificateKey(ProtectionKeyPurposeId purpose, bool autoCreate, Nullable`1<DateTime> future);
    private void CheckLoadedCertificateKey(ProtectionKey loadedKey);
    private ProtectionKeyCurrentCertificate GetCurrentCertificateKey(ProtectionKeyPurposeId purpose, DateTime now);
    public sealed virtual ProtectionKeyCurrentSymmetric GetCurrentSymmetricKey(ProtectionKeyPurposeId purpose, bool autoCreate, Nullable`1<DateTime> future);
    private void CheckLoadedSymmetricKey(ProtectionKey loadedKey);
    private ProtectionKeyCurrentSymmetric GetCurrentSymmetricKey(ProtectionKeyPurposeId purpose, DateTime now);
    public sealed virtual SymmetricCryptoKey ResolveSymmetricUnprotectKey(string keyId, bool checkNotBefore, bool checkNotAfter, bool checkRevoked, bool throwIfMissing);
    private string GetDebugInfo();
    public sealed virtual ProtectionKey AddSymmetricKey(ProtectionKeyPurposeId purpose, DateTime created, Nullable`1<DateTime> notBefore);
    public sealed virtual ProtectionKey AddCertificateKey(ProtectionKeyPurposeId purpose, DateTime created, Nullable`1<DateTime> notBefore);
    public sealed virtual void ChangeKey(string keyId, Nullable`1<DateTime> notAfter);
    private static ProtectionKey GetCurrentKey(DateTime now, IEnumerable`1<ProtectionKey> matchingKeys);
    private IEnumerable`1<ProtectionKey> GetMatchingKeys(ProtectionKeyPurposeId purpose, ProtectionKeyTypeId[] keyTypes);
    private static DateTime GetNextChange(DateTime now, IEnumerable`1<ProtectionKey> matchingKeys);
    private static string GetNewKeyId();
    private string GetCertificateCommonName();
    [CompilerGeneratedAttribute]
private void <Initialize>b__27_0(object sender, FileSystemEventArgs args);
    [CompilerGeneratedAttribute]
private void <Initialize>b__27_1(object sender, FileSystemEventArgs args);
    [CompilerGeneratedAttribute]
private void <Initialize>b__27_2(object sender, RenamedEventArgs args);
    [CompilerGeneratedAttribute]
private void <Initialize>b__27_3(object sender, ErrorEventArgs args);
    [AsyncStateMachineAttribute("Momentum.Common.Security.Keys.Store.DirectoryProtectionKeyStorage/<<FileChangedHandler>b__28_0>d")]
[CompilerGeneratedAttribute]
private Task <FileChangedHandler>b__28_0();
}
public interface Momentum.Common.Security.Keys.Store.IProtectionKeyStorage {
    public bool Writable { get; }
    public abstract virtual IEnumerable`1<ProtectionKeyStorageListItem> ListKeys();
    public abstract virtual ProtectionKeyCurrentCertificate GetCurrentCertificateKey(ProtectionKeyPurposeId purpose, bool autoCreate, Nullable`1<DateTime> future);
    public abstract virtual ProtectionKeyCurrentSymmetric GetCurrentSymmetricKey(ProtectionKeyPurposeId purpose, bool autoCreate, Nullable`1<DateTime> future);
    public abstract virtual SymmetricCryptoKey ResolveSymmetricUnprotectKey(string keyId, bool checkNotBefore, bool checkNotAfter, bool checkRevoked, bool throwIfMissing);
    public abstract virtual ProtectionKey AddSymmetricKey(ProtectionKeyPurposeId purpose, DateTime created, Nullable`1<DateTime> notBefore);
    public abstract virtual ProtectionKey AddCertificateKey(ProtectionKeyPurposeId purpose, DateTime created, Nullable`1<DateTime> notBefore);
    public abstract virtual void ChangeKey(string keyId, Nullable`1<DateTime> notAfter);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(Action value);
    public abstract virtual bool get_Writable();
}
public class Momentum.Common.Security.Keys.Store.ProtectionKey : object {
    private string publicData;
    private X509Certificate2 certificate;
    private SecurityKey securityKey;
    private SigningCredentials signingCredentials;
    private SymmetricCryptoKey symmetricCryptoKey;
    private long useCounterProtect;
    private long useCounterUnprotect;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtectionKeyPurposeId <Purpose>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtectionKeyTypeId <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateData>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <RevokedAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalStorageId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    public string Id { get; }
    public ProtectionKeyPurposeId Purpose { get; }
    public ProtectionKeyTypeId Type { get; }
    public string PrivateData { get; }
    public DateTime Created { get; }
    public DateTime NotBefore { get; }
    public DateTime NotAfter { get; }
    public DateTime RevokedAfter { get; }
    internal string InternalStorageId { get; }
    public int KeySize { get; }
    public long UseCounterProtect { get; }
    public long UseCounterUnprotect { get; }
    public ProtectionKey(string id, ProtectionKeyPurposeId purpose, ProtectionKeyTypeId type, string privateData, DateTime created, DateTime notBefore, DateTime notAfter, DateTime revokedAt, string internalStorageId, int keySize);
    internal ProtectionKey Change(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> notAfter);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ProtectionKeyPurposeId get_Purpose();
    [CompilerGeneratedAttribute]
public ProtectionKeyTypeId get_Type();
    [CompilerGeneratedAttribute]
public string get_PrivateData();
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public DateTime get_NotBefore();
    [CompilerGeneratedAttribute]
public DateTime get_NotAfter();
    [CompilerGeneratedAttribute]
public DateTime get_RevokedAfter();
    [CompilerGeneratedAttribute]
internal string get_InternalStorageId();
    [CompilerGeneratedAttribute]
public int get_KeySize();
    public long get_UseCounterProtect();
    public long get_UseCounterUnprotect();
    internal ProtectionKeyStorageListItem ToListItem();
    public bool IsReadyToProtectNowOrFuture(DateTime now);
    public bool IsReadyToProtect(DateTime now);
    public Nullable`1<DateTime> IsReadyToProtectNextChange(DateTime now);
    public bool IsReadyToUnprotect(DateTime now, bool checkRevoked);
    public string GetPublicData();
    public X509Certificate2 GetCertificate(ProtectionKeyUsageArgs usage);
    public SecurityKey GetPrivateSecurityKey(ProtectionKeyUsageArgs usage);
    public SigningCredentials GetSigningCredentials(ProtectionKeyUsageArgs usage);
    private static SigningCredentials GetSigningCredentialsFromCertificate(X509Certificate2 certificate);
    public SymmetricCryptoKey GetSymmetricKey();
    private void CountUsage(ProtectionKeyUsageArgs args);
    private void CountUsage(SymmetricCryptoKeyUsageArgs args);
}
public static class Momentum.Common.Security.Keys.Store.ProtectionKeyStorage : object {
    [CompilerGeneratedAttribute]
private static IProtectionKeyStorage <Default>k__BackingField;
    public static IProtectionKeyStorage Default { get; private set; }
    public static IProtectionKeyStorage DefaultRequired { get; }
    [CompilerGeneratedAttribute]
public static IProtectionKeyStorage get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(IProtectionKeyStorage value);
    public static IProtectionKeyStorage get_DefaultRequired();
    public static void Use(IProtectionKeyStorage storage);
    public static void TryUse(Func`1<IProtectionKeyStorage> factory);
}
public class Momentum.Common.Security.Keys.Store.ProtectionKeyStorageListItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtectionKeyPurposeId <Purpose>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtectionKeyTypeId <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicData>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <RevokedAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UseCounterProtect>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UseCounterUnprotect>k__BackingField;
    public string Id { get; }
    public ProtectionKeyPurposeId Purpose { get; }
    public ProtectionKeyTypeId Type { get; }
    public string PublicData { get; }
    public DateTime Created { get; }
    public DateTime NotBefore { get; }
    public DateTime NotAfter { get; }
    public DateTime RevokedAfter { get; }
    public long UseCounterProtect { get; }
    public long UseCounterUnprotect { get; }
    public ProtectionKeyStorageListItem(string id, ProtectionKeyPurposeId purpose, ProtectionKeyTypeId type, DateTime created, DateTime notBefore, DateTime notAfter, DateTime revokedAfter, long useCounterProtect, long useCounterUnprotect, string publicData);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ProtectionKeyPurposeId get_Purpose();
    [CompilerGeneratedAttribute]
public ProtectionKeyTypeId get_Type();
    [CompilerGeneratedAttribute]
public string get_PublicData();
    [CompilerGeneratedAttribute]
public DateTime get_Created();
    [CompilerGeneratedAttribute]
public DateTime get_NotBefore();
    [CompilerGeneratedAttribute]
public DateTime get_NotAfter();
    [CompilerGeneratedAttribute]
public DateTime get_RevokedAfter();
    [CompilerGeneratedAttribute]
public long get_UseCounterProtect();
    [CompilerGeneratedAttribute]
public long get_UseCounterUnprotect();
    public bool IsReadyToProtectNowOrFuture(DateTime now);
}
public class Momentum.Common.Security.Keys.Transport.DataProtectionKeys : object {
    private IProtectionKeyStorage protectionKeyStorage;
    private IProtectionKeyStorage lastKeyStorage;
    private ProtectionKeyCurrentSymmetric cachedResolve;
    private string lastCacheResolveKeyId;
    public DataProtectionKeys(IProtectionKeyStorage protectionKeyStorage);
    public IProtectionKeyStorage GetProtectionKeyStorage();
    private void ProtectionKeyStorage_Changed();
    private void ClearCache();
    public sealed virtual ProtectionKeyCurrentSymmetric GetCurrentProtectKeySymmetric(bool required);
    public sealed virtual SymmetricCryptoKey GetUnprotectKeySymmetric(string keyId, bool checkNotBefore, bool checkNotAfter, bool checkRevoked, bool throwIfMissing);
}
public interface Momentum.Common.Security.Keys.Transport.INetworkTransportKeys {
    public abstract virtual ProtectionKeyCurrentCertificate GetCurrentKey();
}
public class Momentum.Common.Security.Keys.Transport.NetworkTransportKeys : object {
    private IProtectionKeyStorage protectionKeyStorage;
    private IProtectionKeyStorage lastKeyStorage;
    private ProtectionKeyCurrentCertificate cachedResolve;
    public NetworkTransportKeys(IProtectionKeyStorage protectionKeyStorage);
    public IProtectionKeyStorage GetProtectionKeyStorage();
    private void ProtectionKeyStorage_Changed();
    private void ClearCache();
    public sealed virtual ProtectionKeyCurrentCertificate GetCurrentKey();
}
