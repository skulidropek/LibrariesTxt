public class Momentum.Data.CustomJavaScriptDateTimeConverter : JavaScriptDateTimeConverter {
    private IList`1<string> _toDateTime;
    private IList`1<string> _ToDate;
    public CustomJavaScriptDateTimeConverter(IList`1<string> ToDateTime, IList`1<string> ToDate);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Momentum.Data.JqContractResolver : DefaultContractResolver {
    private IList`1<string> _propertiesToSerialize;
    private List`1<string> _customPropertiesToSerialize;
    private List`1<TypeList> _typesToSerialize;
    private bool _JsDate;
    private bool _ignorePropertiesWithRelatedNullable;
    public JqContractResolver(bool JsDate);
    public JqContractResolver(bool JsDate, bool ignorePropertiesWithRelatedNullable);
    public JqContractResolver(IList`1<string> propertiesToSerialize, bool JsDate);
    public JqContractResolver(IList`1<string> propertiesToSerialize);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
}
public static class Momentum.Data.Json : object {
    private static JsonSerializerSettings settingsVersion1;
    private static JsonSerializerOptions settingsVersion1BuiltIn;
    private static JsonSerializerOptions settingsVersion1BuiltInIndented;
    private static JsonSerializerSettings[] settings;
    private static JsonSerializerSettings settingsVersion0;
    public static JsonSerializerSettings SettingsVersion0 { get; }
    public static JsonSerializerSettings SettingsVersion1 { get; }
    private static Json();
    public static string JqStringify(T data, bool indented, bool JsDate, bool ignoreNullValues, bool ignorePropertiesWithRelatedNullable);
    public static string JqStringify(T data, IList`1<string> propertiesToSerialize, bool indented, bool JsDate);
    public static string Serialize(T data);
    public static string Serialize(T data, bool indented);
    public static T Deserialize(string data);
    public static T Deserialize(ReadOnlySpan`1<char> data);
    public static void ApplyDefaultsSerializerOptions(JsonSerializerOptions options);
    public static void ApplyDefaultsSerializerSettings(JsonSerializerSettings settings);
    public static JsonSerializerSettings get_SettingsVersion0();
    public static JsonSerializerSettings get_SettingsVersion1();
    public static string Stringify(T data, bool indented, int version);
    public static T Parse(string data, int version);
    public static T Convert(object data);
    public static Byte[] Compress(T data);
    public static T Expand(Byte[] compressedJson);
}
public abstract class Momentum.Data.JsonExtensionObject : object {
    [JsonExtensionDataAttribute]
protected IDictionary`2<string, JToken> extensionData;
}
public class Momentum.Data.StringJSobject : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    private string Value { get; private set; }
    public StringJSobject(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class Momentum.Data.StringJSobjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
}
public class Momentum.Data.TypeList : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public Type Type { get; public set; }
    public string PropertyName { get; public set; }
    public TypeList(Type type, string propertyName);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
