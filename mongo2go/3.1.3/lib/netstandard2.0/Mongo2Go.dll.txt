public class Mongo2Go.Helper.FileSystem : object {
    public sealed virtual void CreateFolder(string path);
    public sealed virtual void DeleteFolder(string path);
    public sealed virtual void DeleteFile(string fullFileName);
    public sealed virtual void MakeFileExecutable(string path);
}
[ExtensionAttribute]
public static class Mongo2Go.Helper.FolderSearch : object {
    private static Char[] _separators;
    private static FolderSearch();
    public static string CurrentExecutingDirectory();
    [ExtensionAttribute]
public static string FindFolder(string startPath, string searchPattern);
    [ExtensionAttribute]
public static string FindFolderUpwards(string startPath, string searchPattern);
    [ExtensionAttribute]
internal static string RemoveLastPart(string path);
    public static string FinalizePath(string fileName);
    private static string MatchVersionToAssemblyVersion(String[] folders);
}
public interface Mongo2Go.Helper.IFileSystem {
    public abstract virtual void CreateFolder(string path);
    public abstract virtual void DeleteFolder(string path);
    public abstract virtual void DeleteFile(string fullFileName);
    public abstract virtual void MakeFileExecutable(string path);
}
public interface Mongo2Go.Helper.IMongoBinaryLocator {
    public string Directory { get; }
    public abstract virtual string get_Directory();
}
public interface Mongo2Go.Helper.IMongoDbProcess {
    public IEnumerable`1<string> StandardOutput { get; }
    public IEnumerable`1<string> ErrorOutput { get; }
    public abstract virtual IEnumerable`1<string> get_StandardOutput();
    public abstract virtual IEnumerable`1<string> get_ErrorOutput();
}
public interface Mongo2Go.Helper.IMongoDbProcessStarter {
    public abstract virtual IMongoDbProcess Start(string binariesDirectory, string dataDirectory, int port, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout, ILogger logger);
    public abstract virtual IMongoDbProcess Start(string binariesDirectory, string dataDirectory, int port, bool doNotKill, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout, ILogger logger);
}
public interface Mongo2Go.Helper.IPortPool {
    public abstract virtual int GetNextOpenPort();
}
public interface Mongo2Go.Helper.IPortWatcher {
    public abstract virtual int FindOpenPort();
    public abstract virtual bool IsPortAvailable(int portNumber);
}
public interface Mongo2Go.Helper.IProcessWatcher {
    public abstract virtual bool IsProcessRunning(string processName);
}
public class Mongo2Go.Helper.MongoBinaryLocator : object {
    private string _nugetPrefix;
    private string _nugetCachePrefix;
    private string _nugetCacheBasePrefix;
    public static string DefaultWindowsSearchPattern;
    public static string DefaultLinuxSearchPattern;
    public static string DefaultOsxSearchPattern;
    public static string WindowsNugetCacheLocation;
    public static string OsxAndLinuxNugetCacheLocation;
    private string _binFolder;
    private string _searchPattern;
    private string _nugetCacheDirectory;
    private string _additionalSearchDirectory;
    public string Directory { get; }
    public MongoBinaryLocator(string searchPatternOverride, string additionalSearchDirectory);
    private static MongoBinaryLocator();
    public sealed virtual string get_Directory();
    private string ResolveBinariesDirectory();
    private string FindBinariesDirectory(IList`1<string> searchDirectories);
}
public static class Mongo2Go.Helper.MongodArguments : object {
    private static string ArgumentSeparator;
    private static string Space;
    public static string GetValidAdditionalArguments(string existingMongodArguments, string additionalMongodArguments);
}
internal class Mongo2Go.Helper.MongoDate : object {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    [JsonPropertyNameAttribute("$date")]
public DateTime DateTime { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_DateTime();
    [CompilerGeneratedAttribute]
public void set_DateTime(DateTime value);
}
public class Mongo2Go.Helper.MongoDbProcess : object {
    private WrappedProcess _process;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ErrorOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <StandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    public IEnumerable`1<string> ErrorOutput { get; public set; }
    public IEnumerable`1<string> StandardOutput { get; public set; }
    public bool Disposed { get; private set; }
    internal MongoDbProcess(WrappedProcess process);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_ErrorOutput();
    [CompilerGeneratedAttribute]
public void set_ErrorOutput(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_StandardOutput();
    [CompilerGeneratedAttribute]
public void set_StandardOutput(IEnumerable`1<string> value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class Mongo2Go.Helper.MongoDbProcessStarter : object {
    private static string ProcessReadyIdentifier;
    private static string Space;
    private static string ReplicaSetName;
    private static string ReplicaSetReadyIdentifier;
    public sealed virtual IMongoDbProcess Start(string binariesDirectory, string dataDirectory, int port, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout, ILogger logger);
    public sealed virtual IMongoDbProcess Start(string binariesDirectory, string dataDirectory, int port, bool doNotKill, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout, ILogger logger);
}
public static class Mongo2Go.Helper.MongoImportExport : object {
    public static ProcessOutput Import(string binariesDirectory, int port, string database, string collection, string inputFile, bool drop, string additionalMongodArguments);
    public static ProcessOutput Export(string binariesDirectory, int port, string database, string collection, string outputFile, string additionalMongodArguments);
}
internal class Mongo2Go.Helper.MongoLogStatement : object {
    [CompilerGeneratedAttribute]
private MongoDate <MongoDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JsonElement> <Attributes>k__BackingField;
    [JsonPropertyNameAttribute("t")]
public MongoDate MongoDate { get; public set; }
    [JsonPropertyNameAttribute("s")]
public string Severity { get; public set; }
    public LogLevel Level { get; }
    [JsonPropertyNameAttribute("c")]
public string Component { get; public set; }
    [JsonPropertyNameAttribute("ctx")]
public string Context { get; public set; }
    [JsonPropertyNameAttribute("id")]
public Nullable`1<int> Id { get; public set; }
    [JsonPropertyNameAttribute("msg")]
public string Message { get; public set; }
    [JsonPropertyNameAttribute("tags")]
public IEnumerable`1<string> Tags { get; public set; }
    [JsonPropertyNameAttribute("attr")]
public IDictionary`2<string, JsonElement> Attributes { get; public set; }
    [CompilerGeneratedAttribute]
public MongoDate get_MongoDate();
    [CompilerGeneratedAttribute]
public void set_MongoDate(MongoDate value);
    [CompilerGeneratedAttribute]
public string get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(string value);
    public LogLevel get_Level();
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonElement> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(IDictionary`2<string, JsonElement> value);
}
[ExtensionAttribute]
public static class Mongo2Go.Helper.NetStandard21Compatibility : object {
    [ExtensionAttribute]
public static bool Contains(string string, string value, StringComparison comparisonType);
}
public class Mongo2Go.Helper.NoFreePortFoundException : Exception {
    public NoFreePortFoundException(string message);
    public NoFreePortFoundException(string message, Exception inner);
}
public class Mongo2Go.Helper.PortPool : object {
    private static PortPool Instance;
    public static PortPool GetInstance { get; }
    private static PortPool();
    public static PortPool get_GetInstance();
    public sealed virtual int GetNextOpenPort();
}
public class Mongo2Go.Helper.PortWatcher : object {
    public sealed virtual int FindOpenPort();
    public sealed virtual bool IsPortAvailable(int portNumber);
}
public class Mongo2Go.Helper.PortWatcherFactory : object {
    public static IPortWatcher CreatePortWatcher();
}
public static class Mongo2Go.Helper.ProcessControl : object {
    public static WrappedProcess ProcessFactory(string fileName, string arguments);
    public static ProcessOutput StartAndWaitForExit(Process process);
    public static ProcessOutput StartAndWaitForReady(Process process, int timeoutInSeconds, string processReadyIdentifier, ILogger logger);
    private static void WireLogsToConsoleAndDebugOutput(Process process);
    private static void WireLogsToLogger(Process process, ILogger logger);
    [CompilerGeneratedAttribute]
internal static void <WireLogsToConsoleAndDebugOutput>g__DebugOutputHandler|3_0(object sender, DataReceivedEventArgs args);
    [CompilerGeneratedAttribute]
internal static void <WireLogsToConsoleAndDebugOutput>g__ConsoleOutputHandler|3_1(object sender, DataReceivedEventArgs args);
}
public class Mongo2Go.Helper.ProcessOutput : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <StandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ErrorOutput>k__BackingField;
    public IEnumerable`1<string> StandardOutput { get; private set; }
    public IEnumerable`1<string> ErrorOutput { get; private set; }
    public ProcessOutput(IEnumerable`1<string> errorOutput, IEnumerable`1<string> standardOutput);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_StandardOutput();
    [CompilerGeneratedAttribute]
private void set_StandardOutput(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ErrorOutput();
    [CompilerGeneratedAttribute]
private void set_ErrorOutput(IEnumerable`1<string> value);
}
public class Mongo2Go.Helper.ProcessWatcher : object {
    public sealed virtual bool IsProcessRunning(string processName);
}
[ExtensionAttribute]
public static class Mongo2Go.Helper.StringFormatExtension : object {
    [ExtensionAttribute]
public static string Formatted(string template, Object[] args);
    [ExtensionAttribute]
public static string Formatted(string template, IFormatProvider formatter, Object[] args);
}
public class Mongo2Go.Helper.UnixPortWatcher : object {
    public sealed virtual int FindOpenPort();
    public sealed virtual bool IsPortAvailable(int portNumber);
}
public class Mongo2Go.Helper.WrappedProcess : Process {
    [CompilerGeneratedAttribute]
private bool <DoNotKill>k__BackingField;
    public bool DoNotKill { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DoNotKill();
    [CompilerGeneratedAttribute]
public void set_DoNotKill(bool value);
}
public static class Mongo2Go.MongoDbDefaults : object {
    public static string ProcessName;
    public static string MongodExecutable;
    public static string MongoExportExecutable;
    public static string MongoImportExecutable;
    public static int DefaultPort;
    public static int TestStartPort;
    public static string Lockfile;
    public static int SingleNodeReplicaSetWaitTimeout;
}
public class Mongo2Go.MongoDbPortAlreadyTakenException : Exception {
    public MongoDbPortAlreadyTakenException(string message);
    public MongoDbPortAlreadyTakenException(string message, Exception inner);
}
public class Mongo2Go.MongoDbRunner : object {
    private IMongoDbProcess _mongoDbProcess;
    private IFileSystem _fileSystem;
    private string _dataDirectoryWithPort;
    private int _port;
    private IMongoBinaryLocator _mongoBin;
    [CompilerGeneratedAttribute]
private State <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    public State State { get; private set; }
    public string ConnectionString { get; private set; }
    public bool Disposed { get; private set; }
    private MongoDbRunner(IProcessWatcher processWatcher, IPortWatcher portWatcher, IFileSystem fileSystem, IMongoDbProcessStarter processStarter, IMongoBinaryLocator mongoBin, int port, string dataDirectory, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout);
    private MongoDbRunner(IPortPool portPool, IFileSystem fileSystem, IMongoDbProcessStarter processStarter, IMongoBinaryLocator mongoBin, string dataDirectory, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout, ILogger logger);
    [CompilerGeneratedAttribute]
public State get_State();
    [CompilerGeneratedAttribute]
private void set_State(State value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    public static MongoDbRunner Start(string dataDirectory, string binariesSearchPatternOverride, string binariesSearchDirectory, bool singleNodeReplSet, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout, ILogger logger);
    [ObsoleteAttribute("Use MongoDbRunner.Start() if possible.")]
public static MongoDbRunner StartUnitTest(IPortPool portPool, IFileSystem fileSystem, IMongoDbProcessStarter processStarter, IMongoBinaryLocator mongoBin, string dataDirectory, string additionalMongodArguments);
    public static MongoDbRunner StartForDebugging(string dataDirectory, string binariesSearchPatternOverride, string binariesSearchDirectory, bool singleNodeReplSet, int port, string additionalMongodArguments, ushort singleNodeReplSetWaitTimeout);
    [ObsoleteAttribute("Use MongoDbRunner.StartForDebugging() if possible.")]
public static MongoDbRunner StartForDebuggingUnitTest(IProcessWatcher processWatcher, IPortWatcher portWatcher, IFileSystem fileSystem, IMongoDbProcessStarter processStarter, IMongoBinaryLocator mongoBin, string dataDirectory, string additionalMongodArguments);
    public void Import(string database, string collection, string inputFile, bool drop, string additionalMongodArguments);
    public void Export(string database, string collection, string outputFile, string additionalMongodArguments);
    private void MakeMongoBinarysExecutable();
    private static string CreateTemporaryDataDirectory();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public class Mongo2Go.MonogDbBinariesNotFoundException : Exception {
    public MonogDbBinariesNotFoundException(string message);
    public MonogDbBinariesNotFoundException(string message, Exception inner);
}
public enum Mongo2Go.State : Enum {
    public int value__;
    public static State Stopped;
    public static State Running;
    public static State AlreadyRunning;
}
