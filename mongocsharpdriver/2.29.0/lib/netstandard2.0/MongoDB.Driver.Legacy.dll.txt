public class MongoDB.Driver.AggregateArgs : object {
    private Nullable`1<bool> _allowDiskUse;
    private Nullable`1<int> _batchSize;
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private Nullable`1<TimeSpan> _maxTime;
    private AggregateOutputMode _outputMode;
    private IEnumerable`1<BsonDocument> _pipeline;
    public Nullable`1<bool> AllowDiskUse { get; public set; }
    public Nullable`1<int> BatchSize { get; public set; }
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    [ObsoleteAttribute("Server versions 3.6 and newer always use a cursor.")]
public AggregateOutputMode OutputMode { get; public set; }
    public IEnumerable`1<BsonDocument> Pipeline { get; public set; }
    public Nullable`1<bool> get_AllowDiskUse();
    public void set_AllowDiskUse(Nullable`1<bool> value);
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public AggregateOutputMode get_OutputMode();
    public void set_OutputMode(AggregateOutputMode value);
    public IEnumerable`1<BsonDocument> get_Pipeline();
    public void set_Pipeline(IEnumerable`1<BsonDocument> value);
}
internal class MongoDB.Driver.AggregateEnumerable : object {
    private MongoCollection _collection;
    private IReadOperation`1<IAsyncCursor`1<BsonDocument>> _operation;
    private ReadPreference _readPreference;
    public AggregateEnumerable(MongoCollection collection, IReadOperation`1<IAsyncCursor`1<BsonDocument>> operation, ReadPreference readPreference);
    public sealed virtual IEnumerator`1<BsonDocument> GetEnumerator();
    private IEnumerator`1<BsonDocument> GetEnumerator(IClientSessionHandle session);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private IEnumerator`1<BsonDocument> <GetEnumerator>b__4_0(IClientSessionHandle session);
}
[ObsoleteAttribute("Server versions 3.6 and newer always use a cursor.")]
public enum MongoDB.Driver.AggregateOutputMode : Enum {
    public int value__;
    public static AggregateOutputMode Inline;
    public static AggregateOutputMode Cursor;
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.BuilderBase/Serializer")]
public abstract class MongoDB.Driver.Builders.BuilderBase : object {
    public abstract virtual BsonDocument ToBsonDocument();
    public virtual string ToString();
    private sealed virtual override BsonDocument MongoDB.Bson.IConvertibleToBsonDocument.ToBsonDocument();
}
public static class MongoDB.Driver.Builders.CollectionOptions : object {
    public static IMongoCollectionOptions Null { get; }
    public static IMongoCollectionOptions get_Null();
    [ObsoleteAttribute("AutoIndexId has been deprecated since server version 3.2.")]
public static CollectionOptionsBuilder SetAutoIndexId(bool value);
    public static CollectionOptionsBuilder SetCapped(bool value);
    public static CollectionOptionsBuilder SetCollation(Collation value);
    public static CollectionOptionsBuilder SetIndexOptionDefaults(IndexOptionDefaults value);
    public static CollectionOptionsBuilder SetMaxDocuments(long value);
    public static CollectionOptionsBuilder SetMaxSize(long value);
    public static CollectionOptionsBuilder SetStorageEngineOptions(BsonDocument value);
    public static CollectionOptionsBuilder SetValidationAction(DocumentValidationAction validationAction);
    public static CollectionOptionsBuilder SetValidationLevel(DocumentValidationLevel validationLevel);
    public static CollectionOptionsBuilder SetValidator(IMongoQuery validator);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.CollectionOptionsBuilder/Serializer")]
public class MongoDB.Driver.Builders.CollectionOptionsBuilder : BuilderBase {
    private BsonDocument _document;
    [ObsoleteAttribute("AutoIndexId has been deprecated since server version 3.2.")]
public CollectionOptionsBuilder SetAutoIndexId(bool value);
    public CollectionOptionsBuilder SetCapped(bool value);
    public CollectionOptionsBuilder SetCollation(Collation value);
    public CollectionOptionsBuilder SetIndexOptionDefaults(IndexOptionDefaults value);
    public CollectionOptionsBuilder SetMaxDocuments(long value);
    public CollectionOptionsBuilder SetMaxSize(long value);
    public CollectionOptionsBuilder SetStorageEngineOptions(BsonDocument value);
    public CollectionOptionsBuilder SetValidationAction(DocumentValidationAction validationAction);
    public CollectionOptionsBuilder SetValidationLevel(DocumentValidationLevel validationLevel);
    public CollectionOptionsBuilder SetValidator(IMongoQuery validator);
    public virtual BsonDocument ToBsonDocument();
}
public static class MongoDB.Driver.Builders.CreateViewOptions : object {
    public static CreateViewOptionsBuilder SetCollation(Collation collation);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.CreateViewOptionsBuilder/Serializer")]
public class MongoDB.Driver.Builders.CreateViewOptionsBuilder : BuilderBase {
    private BsonDocument _document;
    public CreateViewOptionsBuilder SetCollation(Collation collation);
    public virtual BsonDocument ToBsonDocument();
}
public static class MongoDB.Driver.Builders.Fields : object {
    public static IMongoFields Null { get; }
    public static IMongoFields get_Null();
    public static FieldsBuilder ElemMatch(string name, IMongoQuery query);
    public static FieldsBuilder Exclude(String[] names);
    public static FieldsBuilder Include(String[] names);
    public static FieldsBuilder MetaTextScore(string name);
    public static FieldsBuilder Slice(string name, int size);
    public static FieldsBuilder Slice(string name, int skip, int limit);
}
public static class MongoDB.Driver.Builders.Fields`1 : object {
    public static IMongoFields Null { get; }
    public static IMongoFields get_Null();
    public static FieldsBuilder`1<TDocument> ElemMatch(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Func`2<QueryBuilder`1<TValue>, IMongoQuery> elementQueryBuilderFunction);
    public static FieldsBuilder`1<TDocument> Exclude(Expression`1[] memberExpressions);
    public static FieldsBuilder`1<TDocument> Include(Expression`1[] memberExpressions);
    public static FieldsBuilder`1<TDocument> MetaTextScore(Expression`1<Func`2<TDocument, object>> memberExpression);
    public static FieldsBuilder`1<TDocument> Slice(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, int size);
    public static FieldsBuilder`1<TDocument> Slice(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, int skip, int limit);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.FieldsBuilder/Serializer")]
public class MongoDB.Driver.Builders.FieldsBuilder : BuilderBase {
    private BsonDocument _document;
    public FieldsBuilder ElemMatch(string name, IMongoQuery query);
    public FieldsBuilder Exclude(String[] names);
    public FieldsBuilder Include(String[] names);
    public FieldsBuilder MetaTextScore(string name);
    public FieldsBuilder Slice(string name, int size);
    public FieldsBuilder Slice(string name, int skip, int limit);
    public virtual BsonDocument ToBsonDocument();
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.FieldsBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.FieldsBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private FieldsBuilder _fieldsBuilder;
    public FieldsBuilder`1<TDocument> ElemMatch(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Func`2<QueryBuilder`1<TValue>, IMongoQuery> elementQueryBuilderFunction);
    public FieldsBuilder`1<TDocument> Exclude(Expression`1[] memberExpressions);
    public FieldsBuilder`1<TDocument> Include(Expression`1[] memberExpressions);
    public FieldsBuilder`1<TDocument> MetaTextScore(Expression`1<Func`2<TDocument, object>> memberExpression);
    public FieldsBuilder`1<TDocument> Slice(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, int size);
    public FieldsBuilder`1<TDocument> Slice(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, int skip, int limit);
    public virtual BsonDocument ToBsonDocument();
    private IEnumerable`1<string> GetElementNames(IEnumerable`1<Expression`1<Func`2<TDocument, object>>> memberExpressions);
    [CompilerGeneratedAttribute]
private BsonSerializationInfo <GetElementNames>b__10_0(Expression`1<Func`2<TDocument, object>> x);
}
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
public static class MongoDB.Driver.Builders.GeoHaystackSearchOptions : object {
    public static IMongoGeoHaystackSearchOptions Null { get; }
    public static IMongoGeoHaystackSearchOptions get_Null();
    public static GeoHaystackSearchOptionsBuilder SetLimit(int value);
    public static GeoHaystackSearchOptionsBuilder SetMaxDistance(double value);
    public static GeoHaystackSearchOptionsBuilder SetQuery(string additionalFieldName, BsonValue value);
}
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
public static class MongoDB.Driver.Builders.GeoHaystackSearchOptions`1 : object {
    public static IMongoGeoHaystackSearchOptions Null { get; }
    public static IMongoGeoHaystackSearchOptions get_Null();
    public static GeoHaystackSearchOptionsBuilder`1<TDocument> SetLimit(int value);
    public static GeoHaystackSearchOptionsBuilder`1<TDocument> SetMaxDistance(double value);
    public static GeoHaystackSearchOptionsBuilder`1<TDocument> SetQuery(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
}
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
[BsonSerializerAttribute("MongoDB.Driver.Builders.GeoHaystackSearchOptionsBuilder/Serializer")]
public class MongoDB.Driver.Builders.GeoHaystackSearchOptionsBuilder : BuilderBase {
    private BsonDocument _document;
    public GeoHaystackSearchOptionsBuilder SetLimit(int value);
    public GeoHaystackSearchOptionsBuilder SetMaxDistance(double value);
    public GeoHaystackSearchOptionsBuilder SetQuery(string additionalFieldName, BsonValue value);
    public virtual BsonDocument ToBsonDocument();
}
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
[BsonSerializerAttribute("MongoDB.Driver.Builders.GeoHaystackSearchOptionsBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.GeoHaystackSearchOptionsBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private GeoHaystackSearchOptionsBuilder _geoHaystackBuilder;
    public GeoHaystackSearchOptionsBuilder`1<TDocument> SetLimit(int value);
    public GeoHaystackSearchOptionsBuilder`1<TDocument> SetMaxDistance(double value);
    public GeoHaystackSearchOptionsBuilder`1<TDocument> SetQuery(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public virtual BsonDocument ToBsonDocument();
}
[ObsoleteAttribute("Use GeoNearArgs instead.")]
public static class MongoDB.Driver.Builders.GeoNearOptions : object {
    public static IMongoGeoNearOptions Null { get; }
    public static IMongoGeoNearOptions get_Null();
    public static GeoNearOptionsBuilder SetDistanceMultiplier(double value);
    public static GeoNearOptionsBuilder SetMaxDistance(double value);
    public static GeoNearOptionsBuilder SetSpherical(bool value);
}
[ObsoleteAttribute("Use GeoNearArgs instead.")]
[BsonSerializerAttribute("MongoDB.Driver.Builders.GeoNearOptionsBuilder/Serializer")]
public class MongoDB.Driver.Builders.GeoNearOptionsBuilder : BuilderBase {
    private BsonDocument _document;
    public GeoNearOptionsBuilder SetDistanceMultiplier(double value);
    public GeoNearOptionsBuilder SetMaxDistance(double value);
    public GeoNearOptionsBuilder SetSpherical(bool value);
    public virtual BsonDocument ToBsonDocument();
}
public static class MongoDB.Driver.Builders.GroupBy : object {
    public static BsonJavaScript Function(BsonJavaScript keyFunction);
    public static GroupByBuilder Keys(String[] names);
}
public static class MongoDB.Driver.Builders.GroupBy`1 : object {
    public static GroupByBuilder`1<TDocument> Keys(Expression`1[] memberExpressions);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.GroupByBuilder/Serializer")]
public class MongoDB.Driver.Builders.GroupByBuilder : BuilderBase {
    private BsonDocument _document;
    public GroupByBuilder(String[] names);
    public GroupByBuilder Keys(String[] names);
    public virtual BsonDocument ToBsonDocument();
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.GroupByBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.GroupByBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private GroupByBuilder _groupByBuilder;
    public GroupByBuilder`1<TDocument> Keys(Expression`1[] memberExpressions);
    public virtual BsonDocument ToBsonDocument();
    [CompilerGeneratedAttribute]
private BsonSerializationInfo <Keys>b__3_0(Expression`1<Func`2<TDocument, object>> x);
}
public static class MongoDB.Driver.Builders.IndexKeys : object {
    public static IndexKeysBuilder Ascending(String[] names);
    public static IndexKeysBuilder Descending(String[] names);
    public static IndexKeysBuilder GeoSpatial(string name);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexKeysBuilder GeoSpatialHaystack(string name);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexKeysBuilder GeoSpatialHaystack(string name, string additionalName);
    public static IndexKeysBuilder GeoSpatialSpherical(string name);
    public static IndexKeysBuilder Hashed(string name);
    public static IndexKeysBuilder Text(String[] names);
    public static IndexKeysBuilder TextAll();
    public static IndexKeysBuilder Wildcard(string name);
}
public static class MongoDB.Driver.Builders.IndexKeys`1 : object {
    public static IndexKeysBuilder`1<TDocument> Ascending(Expression`1[] memberExpressions);
    public static IndexKeysBuilder`1<TDocument> Descending(Expression`1[] memberExpressions);
    public static IndexKeysBuilder`1<TDocument> GeoSpatial(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexKeysBuilder`1<TDocument> GeoSpatialHaystack(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexKeysBuilder`1<TDocument> GeoSpatialHaystack(Expression`1<Func`2<TDocument, TMember>> memberExpression, Expression`1<Func`2<TDocument, TAdditionalMember>> additionalMemberExpression);
    public static IndexKeysBuilder`1<TDocument> GeoSpatialSpherical(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public static IndexKeysBuilder`1<TDocument> Hashed(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public static IndexKeysBuilder`1<TDocument> Text(Expression`1[] memberExpressions);
    public static IndexKeysBuilder`1<TDocument> Text(Expression`1[] memberExpressions);
    public static IndexKeysBuilder`1<TDocument> TextAll();
    public static IndexKeysBuilder`1<TDocument> Wildcard(Expression`1<Func`2<TDocument, object>> memberExpression);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.IndexKeysBuilder/Serializer")]
public class MongoDB.Driver.Builders.IndexKeysBuilder : BuilderBase {
    private BsonDocument _document;
    public IndexKeysBuilder Ascending(String[] names);
    public IndexKeysBuilder Descending(String[] names);
    public IndexKeysBuilder GeoSpatial(string name);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexKeysBuilder GeoSpatialHaystack(string name);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexKeysBuilder GeoSpatialHaystack(string name, string additionalName);
    public IndexKeysBuilder GeoSpatialSpherical(string name);
    public IndexKeysBuilder Hashed(string name);
    public IndexKeysBuilder Text(String[] names);
    public IndexKeysBuilder TextAll();
    public virtual BsonDocument ToBsonDocument();
    public IndexKeysBuilder Wildcard(string name);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.IndexKeysBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.IndexKeysBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private IndexKeysBuilder _indexKeysBuilder;
    public IndexKeysBuilder`1<TDocument> Ascending(Expression`1[] memberExpressions);
    public IndexKeysBuilder`1<TDocument> Descending(Expression`1[] memberExpressions);
    public IndexKeysBuilder`1<TDocument> GeoSpatial(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexKeysBuilder`1<TDocument> GeoSpatialHaystack(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexKeysBuilder`1<TDocument> GeoSpatialHaystack(Expression`1<Func`2<TDocument, TMember>> memberExpression, Expression`1<Func`2<TDocument, TAdditionalMember>> additionalMemberExpression);
    public IndexKeysBuilder`1<TDocument> GeoSpatialSpherical(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public IndexKeysBuilder`1<TDocument> Hashed(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public IndexKeysBuilder`1<TDocument> Text(Expression`1[] memberExpressions);
    public IndexKeysBuilder`1<TDocument> Text(Expression`1[] memberExpressions);
    public IndexKeysBuilder`1<TDocument> TextAll();
    public virtual BsonDocument ToBsonDocument();
    public IndexKeysBuilder`1<TDocument> Wildcard(Expression`1<Func`2<TDocument, object>> memberExpression);
    private string GetElementName(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    private IEnumerable`1<string> GetElementNames(IEnumerable`1<Expression`1<Func`2<TDocument, TMember>>> memberExpressions);
    [CompilerGeneratedAttribute]
private string <GetElementNames>b__16_0(Expression`1<Func`2<TDocument, TMember>> x);
}
public static class MongoDB.Driver.Builders.IndexOptions : object {
    public static IMongoIndexOptions Null { get; }
    public static IMongoIndexOptions get_Null();
    public static IndexOptionsBuilder SetBackground(bool value);
    public static IndexOptionsBuilder SetBits(int value);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexOptionsBuilder SetBucketSize(double value);
    public static IndexOptionsBuilder SetDropDups(bool value);
    public static IndexOptionsBuilder SetGeoSpatialRange(double min, double max);
    public static IndexOptionsBuilder SetHidden(bool value);
    public static IndexOptionsBuilder SetName(string value);
    public static IndexOptionsBuilder SetPartialFilterExpression(IMongoQuery value);
    public static IndexOptionsBuilder SetSparse(bool value);
    public static IndexOptionsBuilder SetStorageEngineOptions(BsonDocument value);
    public static IndexOptionsBuilder SetTextDefaultLanguage(string language);
    public static IndexOptionsBuilder SetTextLanguageOverride(string fieldName);
    public static IndexOptionsBuilder SetTimeToLive(TimeSpan timeToLive);
    public static IndexOptionsBuilder SetUnique(bool value);
    public static IndexOptionsBuilder SetWeight(string name, int value);
    public static IndexOptionsBuilder SetWildcardProjection(string name, bool included);
}
public static class MongoDB.Driver.Builders.IndexOptions`1 : object {
    public static IMongoIndexOptions Null { get; }
    public static IMongoIndexOptions get_Null();
    public static IndexOptionsBuilder`1<TDocument> SetBackground(bool value);
    public static IndexOptionsBuilder`1<TDocument> SetBits(int value);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexOptionsBuilder`1<TDocument> SetBucketSize(double value);
    public static IndexOptionsBuilder`1<TDocument> SetDropDups(bool value);
    public static IndexOptionsBuilder`1<TDocument> SetHidden(bool value);
    public static IndexOptionsBuilder`1<TDocument> SetGeoSpatialRange(double min, double max);
    public static IndexOptionsBuilder`1<TDocument> SetName(string value);
    public static IndexOptionsBuilder`1<TDocument> SetPartialFilterExpression(IMongoQuery value);
    public static IndexOptionsBuilder`1<TDocument> SetSparse(bool value);
    public static IndexOptionsBuilder`1<TDocument> SetStorageEngineOptions(BsonDocument value);
    public static IndexOptionsBuilder`1<TDocument> SetTextDefaultLanguage(string language);
    public static IndexOptionsBuilder`1<TDocument> SetTextLanguageOverride(Expression`1<Func`2<TDocument, string>> memberExpression);
    public static IndexOptionsBuilder`1<TDocument> SetTimeToLive(TimeSpan timeToLive);
    public static IndexOptionsBuilder`1<TDocument> SetUnique(bool value);
    public static IndexOptionsBuilder`1<TDocument> SetWeight(Expression`1<Func`2<TDocument, TMember>> memberExpression, int value);
    public static IndexOptionsBuilder`1<TDocument> SetWildcardProjection(Expression`1<Func`2<TDocument, TMember>> memberExpression, bool included);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.IndexOptionsBuilder/Serializer")]
public class MongoDB.Driver.Builders.IndexOptionsBuilder : BuilderBase {
    private BsonDocument _document;
    public IndexOptionsBuilder SetBackground(bool value);
    public IndexOptionsBuilder SetBits(int value);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexOptionsBuilder SetBucketSize(double value);
    public IndexOptionsBuilder SetDropDups(bool value);
    public IndexOptionsBuilder SetGeoSpatialRange(double min, double max);
    public IndexOptionsBuilder SetHidden(bool value);
    public IndexOptionsBuilder SetName(string value);
    public IndexOptionsBuilder SetPartialFilterExpression(IMongoQuery value);
    public IndexOptionsBuilder SetSparse(bool value);
    public IndexOptionsBuilder SetStorageEngineOptions(BsonDocument value);
    public IndexOptionsBuilder SetTextDefaultLanguage(string language);
    public IndexOptionsBuilder SetTextLanguageOverride(string fieldName);
    public IndexOptionsBuilder SetTimeToLive(TimeSpan timeToLive);
    public IndexOptionsBuilder SetUnique(bool value);
    public IndexOptionsBuilder SetWeight(string name, int value);
    public IndexOptionsBuilder SetWildcardProjection(string name, bool included);
    public virtual BsonDocument ToBsonDocument();
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.IndexOptionsBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.IndexOptionsBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private IndexOptionsBuilder _indexOptionsBuilder;
    public IndexOptionsBuilder`1<TDocument> SetBackground(bool value);
    public IndexOptionsBuilder`1<TDocument> SetBits(int value);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexOptionsBuilder`1<TDocument> SetBucketSize(double value);
    public IndexOptionsBuilder`1<TDocument> SetDropDups(bool value);
    public IndexOptionsBuilder`1<TDocument> SetGeoSpatialRange(double min, double max);
    public IndexOptionsBuilder`1<TDocument> SetHidden(bool value);
    public IndexOptionsBuilder`1<TDocument> SetName(string value);
    public IndexOptionsBuilder`1<TDocument> SetPartialFilterExpression(IMongoQuery value);
    public IndexOptionsBuilder`1<TDocument> SetSparse(bool value);
    public IndexOptionsBuilder`1<TDocument> SetStorageEngineOptions(BsonDocument value);
    public IndexOptionsBuilder`1<TDocument> SetTextDefaultLanguage(string language);
    public IndexOptionsBuilder`1<TDocument> SetTextLanguageOverride(Expression`1<Func`2<TDocument, string>> memberExpression);
    public IndexOptionsBuilder`1<TDocument> SetTimeToLive(TimeSpan timeToLive);
    public IndexOptionsBuilder`1<TDocument> SetUnique(bool value);
    public IndexOptionsBuilder`1<TDocument> SetWeight(Expression`1<Func`2<TDocument, TMember>> memberExpression, int value);
    public IndexOptionsBuilder`1<TDocument> SetWildcardProjection(Expression`1<Func`2<TDocument, TMember>> memberExpression, bool included);
    public virtual BsonDocument ToBsonDocument();
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.MongoQueryWrapper/Serializer")]
internal class MongoDB.Driver.Builders.MongoQueryWrapper : object {
    private BsonDocument _wrapped;
    public MongoQueryWrapper(BsonDocument wrapped);
    public virtual string ToString();
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.MongoUpdateWrapper/Serializer")]
internal class MongoDB.Driver.Builders.MongoUpdateWrapper : object {
    private Type _nominalType;
    private IBsonSerializer _serializer;
    private object _wrapped;
    public MongoUpdateWrapper(object wrapped, IBsonSerializer serializer, Type nominalType);
}
public class MongoDB.Driver.Builders.PushEachOptions : object {
    private Nullable`1<int> _position;
    private Nullable`1<int> _slice;
    private IMongoSortBy _sort;
    public Nullable`1<int> Position { get; public set; }
    public Nullable`1<int> Slice { get; public set; }
    public IMongoSortBy Sort { get; public set; }
    public Nullable`1<int> get_Position();
    public void set_Position(Nullable`1<int> value);
    public Nullable`1<int> get_Slice();
    public void set_Slice(Nullable`1<int> value);
    public IMongoSortBy get_Sort();
    public void set_Sort(IMongoSortBy value);
}
public class MongoDB.Driver.Builders.PushEachOptionsBuilder`1 : object {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private Nullable`1<int> _position;
    private SortByBuilder`1<TValue> _sortBy;
    private Nullable`1<int> _slice;
    internal PushEachOptionsBuilder`1(BsonSerializationInfoHelper serializationInfoHelper);
    public PushEachOptionsBuilder`1<TValue> Position(int position);
    public PushEachOptionsBuilder`1<TValue> Slice(int slice);
    public PushEachOptionsBuilder`1<TValue> SortAscending(Expression`1[] memberExpressions);
    public PushEachOptionsBuilder`1<TValue> SortDescending(Expression`1[] memberExpressions);
    public PushEachOptions Build();
}
public static class MongoDB.Driver.Builders.Query : object {
    public static IMongoQuery Empty { get; }
    public static IMongoQuery Null { get; }
    public static IMongoQuery get_Empty();
    public static IMongoQuery get_Null();
    public static IMongoQuery All(string name, IEnumerable`1<BsonValue> values);
    public static IMongoQuery And(IEnumerable`1<IMongoQuery> queries);
    public static IMongoQuery And(IMongoQuery[] queries);
    public static IMongoQuery BitsAllClear(string name, long bitmask);
    public static IMongoQuery BitsAllSet(string name, long bitmask);
    public static IMongoQuery BitsAnyClear(string name, long bitmask);
    public static IMongoQuery BitsAnySet(string name, long bitmask);
    public static IMongoQuery Create(BsonDocument query);
    public static IMongoQuery Create(string name, BsonValue condition);
    public static IMongoQuery ElemMatch(string name, IMongoQuery query);
    public static IMongoQuery EQ(string name, BsonValue value);
    public static IMongoQuery Exists(string name);
    public static IMongoQuery GeoIntersects(string name, GeoJsonGeometry`1<TCoordinates> geometry);
    public static IMongoQuery GT(string name, BsonValue value);
    public static IMongoQuery GTE(string name, BsonValue value);
    public static IMongoQuery In(string name, IEnumerable`1<BsonValue> values);
    public static IMongoQuery LT(string name, BsonValue value);
    public static IMongoQuery LTE(string name, BsonValue value);
    public static IMongoQuery Matches(string name, BsonRegularExpression regex);
    public static IMongoQuery Mod(string name, long modulus, long value);
    public static IMongoQuery Near(string name, GeoJsonPoint`1<TCoordinates> point);
    public static IMongoQuery Near(string name, GeoJsonPoint`1<TCoordinates> point, double maxDistance);
    public static IMongoQuery Near(string name, GeoJsonPoint`1<TCoordinates> point, double maxDistance, bool spherical);
    public static IMongoQuery Near(string name, double x, double y);
    public static IMongoQuery Near(string name, double x, double y, double maxDistance);
    public static IMongoQuery Near(string name, double x, double y, double maxDistance, bool spherical);
    public static IMongoQuery Not(IMongoQuery query);
    public static IMongoQuery NE(string name, BsonValue value);
    public static IMongoQuery NotExists(string name);
    public static IMongoQuery NotIn(string name, IEnumerable`1<BsonValue> values);
    public static IMongoQuery Or(IEnumerable`1<IMongoQuery> queries);
    public static IMongoQuery Or(IMongoQuery[] queries);
    public static IMongoQuery Size(string name, int size);
    public static IMongoQuery SizeGreaterThan(string name, int size);
    public static IMongoQuery SizeGreaterThanOrEqual(string name, int size);
    public static IMongoQuery SizeLessThan(string name, int size);
    public static IMongoQuery SizeLessThanOrEqual(string name, int size);
    public static IMongoQuery Type(string name, BsonType type);
    public static IMongoQuery Type(string name, string type);
    public static IMongoQuery Where(BsonJavaScript javascript);
    public static IMongoQuery Within(string name, GeoJsonPolygon`1<TCoordinates> polygon);
    public static IMongoQuery WithinCircle(string name, double centerX, double centerY, double radius);
    public static IMongoQuery WithinCircle(string name, double centerX, double centerY, double radius, bool spherical);
    public static IMongoQuery WithinPolygon(string name, Double[0...,0...] points);
    public static IMongoQuery WithinRectangle(string name, double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY);
    public static IMongoQuery Text(string searchString);
    public static IMongoQuery Text(string searchString, string language);
    public static IMongoQuery Text(string searchString, TextSearchOptions options);
    private static void AddAndClause(BsonDocument query, BsonElement clause);
    private static IMongoQuery NegateArbitraryQuery(BsonDocument query);
    private static IMongoQuery NegateQuery(BsonDocument query);
    private static IMongoQuery NegateSingleElementQuery(BsonDocument query, BsonElement element);
    private static IMongoQuery NegateSingleFieldOperatorQuery(BsonDocument query, string fieldName, string operatorName, BsonValue args);
    private static IMongoQuery NegateSingleFieldQuery(BsonDocument query, string fieldName, BsonValue selector);
    private static IMongoQuery NegateSingleFieldValueQuery(BsonDocument query, string fieldName, BsonValue value);
    private static IMongoQuery NegateSingleTopLevelOperatorQuery(BsonDocument query, string operatorName, BsonValue args);
    private static void PromoteQueryToDollarAndForm(BsonDocument query, BsonElement clause);
}
public static class MongoDB.Driver.Builders.Query`1 : object {
    public static IMongoQuery All(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static IMongoQuery BitsAllClear(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public static IMongoQuery BitsAllSet(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public static IMongoQuery BitsAnyClear(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public static IMongoQuery BitsAnySet(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public static IMongoQuery ElemMatch(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Func`2<QueryBuilder`1<TValue>, IMongoQuery> elementQueryBuilderFunction);
    public static IMongoQuery EQ(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static IMongoQuery EQ(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static IMongoQuery Exists(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public static IMongoQuery GeoIntersects(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonGeometry`1<TCoordinates> geometry);
    public static IMongoQuery GT(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static IMongoQuery GT(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static IMongoQuery GTE(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static IMongoQuery GTE(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static IMongoQuery In(Expression`1<Func`2<TDocument, TMember>> memberExpression, IEnumerable`1<TMember> values);
    public static IMongoQuery In(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static IMongoQuery LT(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static IMongoQuery LT(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static IMongoQuery LTE(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static IMongoQuery LTE(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static IMongoQuery Matches(Expression`1<Func`2<TDocument, string>> memberExpression, BsonRegularExpression regex);
    public static IMongoQuery Matches(Expression`1<Func`2<TDocument, IEnumerable`1<string>>> memberExpression, BsonRegularExpression regex);
    public static IMongoQuery Mod(Expression`1<Func`2<TDocument, int>> memberExpression, long modulus, long value);
    public static IMongoQuery Mod(Expression`1<Func`2<TDocument, IEnumerable`1<int>>> memberExpression, long modulus, long value);
    public static IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPoint`1<TCoordinates> point);
    public static IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPoint`1<TCoordinates> point, double maxDistance);
    public static IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPoint`1<TCoordinates> point, double maxDistance, bool spherical);
    public static IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, double x, double y);
    public static IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, double x, double y, double maxDistance);
    public static IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, double x, double y, double maxDistance, bool spherical);
    public static IMongoQuery NE(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static IMongoQuery NE(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static IMongoQuery NotExists(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public static IMongoQuery NotIn(Expression`1<Func`2<TDocument, TMember>> memberExpression, IEnumerable`1<TMember> values);
    public static IMongoQuery NotIn(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static IMongoQuery Size(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, int size);
    public static IMongoQuery Type(Expression`1<Func`2<TDocument, TMember>> memberExpression, BsonType type);
    public static IMongoQuery Type(Expression`1<Func`2<TDocument, TMember>> memberExpression, string type);
    public static IMongoQuery Type(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, BsonType type);
    public static IMongoQuery Type(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, string type);
    public static IMongoQuery Where(Expression`1<Func`2<TDocument, bool>> expression);
    public static IMongoQuery Within(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPolygon`1<TCoordinates> polygon);
    public static IMongoQuery WithinCircle(Expression`1<Func`2<TDocument, TMember>> memberExpression, double centerX, double centerY, double radius);
    public static IMongoQuery WithinCircle(Expression`1<Func`2<TDocument, TMember>> memberExpression, double centerX, double centerY, double radius, bool spherical);
    public static IMongoQuery WithinPolygon(Expression`1<Func`2<TDocument, TMember>> memberExpression, Double[0...,0...] points);
    public static IMongoQuery WithinRectangle(Expression`1<Func`2<TDocument, TMember>> memberExpression, double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY);
}
public class MongoDB.Driver.Builders.QueryBuilder`1 : object {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private PredicateTranslator _predicateTranslator;
    internal QueryBuilder`1(BsonSerializationInfoHelper serializationInfoHelper);
    public IMongoQuery All(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public IMongoQuery And(IEnumerable`1<IMongoQuery> queries);
    public IMongoQuery And(IMongoQuery[] queries);
    public IMongoQuery BitsAllClear(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public IMongoQuery BitsAllSet(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public IMongoQuery BitsAnyClear(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public IMongoQuery BitsAnySet(Expression`1<Func`2<TDocument, object>> memberExpression, long bitmask);
    public IMongoQuery ElemMatch(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Func`2<QueryBuilder`1<TValue>, IMongoQuery> elementQueryBuilderFunction);
    public IMongoQuery EQ(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public IMongoQuery EQ(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public IMongoQuery Exists(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public IMongoQuery GeoIntersects(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonGeometry`1<TCoordinates> geometry);
    public IMongoQuery GT(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public IMongoQuery GT(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public IMongoQuery GTE(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public IMongoQuery GTE(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public IMongoQuery In(Expression`1<Func`2<TDocument, TMember>> memberExpression, IEnumerable`1<TMember> values);
    public IMongoQuery In(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public IMongoQuery LT(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public IMongoQuery LT(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public IMongoQuery LTE(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public IMongoQuery LTE(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public IMongoQuery Matches(Expression`1<Func`2<TDocument, string>> memberExpression, BsonRegularExpression regex);
    public IMongoQuery Matches(Expression`1<Func`2<TDocument, IEnumerable`1<string>>> memberExpression, BsonRegularExpression regex);
    public IMongoQuery Mod(Expression`1<Func`2<TDocument, int>> memberExpression, long modulus, long value);
    public IMongoQuery Mod(Expression`1<Func`2<TDocument, IEnumerable`1<int>>> memberExpression, long modulus, long value);
    public IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPoint`1<TCoordinates> point);
    public IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPoint`1<TCoordinates> point, double maxDistance);
    public IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPoint`1<TCoordinates> point, double maxDistance, bool spherical);
    public IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, double x, double y);
    public IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, double x, double y, double maxDistance);
    public IMongoQuery Near(Expression`1<Func`2<TDocument, TMember>> memberExpression, double x, double y, double maxDistance, bool spherical);
    public IMongoQuery Not(IMongoQuery query);
    public IMongoQuery NE(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public IMongoQuery NE(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public IMongoQuery NotExists(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    public IMongoQuery NotIn(Expression`1<Func`2<TDocument, TMember>> memberExpression, IEnumerable`1<TMember> values);
    public IMongoQuery NotIn(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public IMongoQuery Or(IEnumerable`1<IMongoQuery> queries);
    public IMongoQuery Or(IMongoQuery[] queries);
    public IMongoQuery Size(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, int size);
    public IMongoQuery Type(Expression`1<Func`2<TDocument, TMember>> memberExpression, BsonType type);
    public IMongoQuery Type(Expression`1<Func`2<TDocument, TMember>> memberExpression, string type);
    public IMongoQuery Type(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, BsonType type);
    public IMongoQuery Type(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, string type);
    public IMongoQuery Where(Expression`1<Func`2<TDocument, bool>> expression);
    public IMongoQuery Within(Expression`1<Func`2<TDocument, TMember>> memberExpression, GeoJsonPolygon`1<TCoordinates> polygon);
    public IMongoQuery WithinCircle(Expression`1<Func`2<TDocument, TMember>> memberExpression, double centerX, double centerY, double radius);
    public IMongoQuery WithinCircle(Expression`1<Func`2<TDocument, TMember>> memberExpression, double centerX, double centerY, double radius, bool spherical);
    public IMongoQuery WithinPolygon(Expression`1<Func`2<TDocument, TMember>> memberExpression, Double[0...,0...] points);
    public IMongoQuery WithinRectangle(Expression`1<Func`2<TDocument, TMember>> memberExpression, double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY);
}
public static class MongoDB.Driver.Builders.SortBy : object {
    public static IMongoSortBy Null { get; }
    public static IMongoSortBy get_Null();
    public static SortByBuilder Ascending(String[] keys);
    public static SortByBuilder Descending(String[] keys);
    public static SortByBuilder MetaTextScore(string key);
}
public static class MongoDB.Driver.Builders.SortBy`1 : object {
    public static SortByBuilder`1<TDocument> Ascending(Expression`1[] memberExpressions);
    public static SortByBuilder`1<TDocument> Descending(Expression`1[] memberExpressions);
    public static SortByBuilder`1<TDocument> MetaTextScore(Expression`1<Func`2<TDocument, object>> memberExpression);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.SortByBuilder/Serializer")]
public class MongoDB.Driver.Builders.SortByBuilder : BuilderBase {
    private BsonDocument _document;
    public SortByBuilder Ascending(String[] keys);
    public SortByBuilder Descending(String[] keys);
    public SortByBuilder MetaTextScore(string key);
    public virtual BsonDocument ToBsonDocument();
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.SortByBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.SortByBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private SortByBuilder _sortByBuilder;
    internal SortByBuilder`1(BsonSerializationInfoHelper serializationInfoHelper);
    public SortByBuilder`1<TDocument> Ascending(Expression`1[] memberExpressions);
    public SortByBuilder`1<TDocument> Descending(Expression`1[] memberExpressions);
    public SortByBuilder`1<TDocument> MetaTextScore(Expression`1<Func`2<TDocument, object>> memberExpression);
    public virtual BsonDocument ToBsonDocument();
    private IEnumerable`1<string> GetElementNames(IEnumerable`1<Expression`1<Func`2<TDocument, object>>> memberExpressions);
    [CompilerGeneratedAttribute]
private BsonSerializationInfo <GetElementNames>b__8_0(Expression`1<Func`2<TDocument, object>> x);
}
public static class MongoDB.Driver.Builders.Update : object {
    public static UpdateBuilder AddToSet(string name, BsonValue value);
    public static UpdateBuilder AddToSetEach(string name, BsonArray values);
    public static UpdateBuilder AddToSetEach(string name, IEnumerable`1<BsonValue> values);
    public static UpdateBuilder AddToSetEach(string name, BsonValue[] values);
    public static UpdateBuilder AddToSetEachWrapped(string name, IEnumerable`1<T> values);
    public static UpdateBuilder AddToSetEachWrapped(string name, T[] values);
    public static UpdateBuilder AddToSetWrapped(string name, T value);
    public static UpdateBuilder BitwiseAnd(string name, int value);
    public static UpdateBuilder BitwiseAnd(string name, long value);
    public static UpdateBuilder BitwiseOr(string name, int value);
    public static UpdateBuilder BitwiseOr(string name, long value);
    public static UpdateBuilder BitwiseXor(string name, int value);
    public static UpdateBuilder BitwiseXor(string name, long value);
    public static UpdateBuilder Combine(IEnumerable`1<IMongoUpdate> updates);
    public static UpdateBuilder Combine(IMongoUpdate[] updates);
    public static UpdateBuilder CurrentDate(string name);
    public static UpdateBuilder CurrentDate(string name, UpdateCurrentDateType type);
    public static UpdateBuilder Inc(string name, double value);
    public static UpdateBuilder Inc(string name, int value);
    public static UpdateBuilder Inc(string name, long value);
    public static UpdateBuilder Max(string name, BsonValue value);
    public static UpdateBuilder Min(string name, BsonValue value);
    public static UpdateBuilder Mul(string name, double value);
    public static UpdateBuilder Mul(string name, int value);
    public static UpdateBuilder Mul(string name, long value);
    public static UpdateBuilder PopFirst(string name);
    public static UpdateBuilder PopLast(string name);
    public static UpdateBuilder Pull(string name, BsonValue value);
    public static UpdateBuilder Pull(string name, IMongoQuery query);
    public static UpdateBuilder PullAll(string name, BsonArray values);
    public static UpdateBuilder PullAll(string name, IEnumerable`1<BsonValue> values);
    public static UpdateBuilder PullAll(string name, BsonValue[] values);
    public static UpdateBuilder PullAllWrapped(string name, IEnumerable`1<T> values);
    public static UpdateBuilder PullAllWrapped(string name, T[] values);
    public static UpdateBuilder PullWrapped(string name, T value);
    public static UpdateBuilder Push(string name, BsonValue value);
    public static UpdateBuilder PushAll(string name, BsonArray values);
    public static UpdateBuilder PushAll(string name, IEnumerable`1<BsonValue> values);
    public static UpdateBuilder PushAll(string name, BsonValue[] values);
    public static UpdateBuilder PushAllWrapped(string name, IEnumerable`1<T> values);
    public static UpdateBuilder PushAllWrapped(string name, T[] values);
    public static UpdateBuilder PushEach(string name, BsonArray values);
    public static UpdateBuilder PushEach(string name, IEnumerable`1<BsonValue> values);
    public static UpdateBuilder PushEach(string name, BsonValue[] values);
    public static UpdateBuilder PushEach(string name, PushEachOptions options, BsonArray values);
    public static UpdateBuilder PushEach(string name, PushEachOptions options, IEnumerable`1<BsonValue> values);
    public static UpdateBuilder PushEach(string name, PushEachOptions options, BsonValue[] values);
    public static UpdateBuilder PushEachWrapped(string name, IEnumerable`1<T> values);
    public static UpdateBuilder PushEachWrapped(string name, T[] values);
    public static UpdateBuilder PushEachWrapped(string name, PushEachOptions options, IEnumerable`1<T> values);
    public static UpdateBuilder PushEachWrapped(string name, PushEachOptions options, T[] values);
    public static UpdateBuilder PushWrapped(string name, T value);
    public static UpdateBuilder Rename(string oldElementName, string newElementName);
    public static IMongoUpdate Replace(TNominalType document);
    public static IMongoUpdate Replace(Type nominalType, object document);
    public static UpdateBuilder Set(string name, BsonValue value);
    public static UpdateBuilder SetOnInsert(string name, BsonValue value);
    public static UpdateBuilder SetWrapped(string name, T value);
    public static UpdateBuilder Unset(string name);
}
public static class MongoDB.Driver.Builders.Update`1 : object {
    public static UpdateBuilder`1<TDocument> AddToSet(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static UpdateBuilder`1<TDocument> AddToSetEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static UpdateBuilder`1<TDocument> BitwiseAnd(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public static UpdateBuilder`1<TDocument> BitwiseAnd(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public static UpdateBuilder`1<TDocument> BitwiseOr(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public static UpdateBuilder`1<TDocument> BitwiseOr(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public static UpdateBuilder`1<TDocument> BitwiseXor(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public static UpdateBuilder`1<TDocument> BitwiseXor(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public static UpdateBuilder`1<TDocument> Combine(IEnumerable`1<IMongoUpdate> updates);
    public static UpdateBuilder`1<TDocument> Combine(IMongoUpdate[] updates);
    public static UpdateBuilder`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, DateTime>> memberExpression);
    public static UpdateBuilder`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, BsonDateTime>> memberExpression);
    public static UpdateBuilder`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, BsonTimestamp>> memberExpression);
    public static UpdateBuilder`1<TDocument> Inc(Expression`1<Func`2<TDocument, double>> memberExpression, double value);
    public static UpdateBuilder`1<TDocument> Inc(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public static UpdateBuilder`1<TDocument> Inc(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public static UpdateBuilder`1<TDocument> Max(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static UpdateBuilder`1<TDocument> Min(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static UpdateBuilder`1<TDocument> Mul(Expression`1<Func`2<TDocument, double>> memberExpression, double value);
    public static UpdateBuilder`1<TDocument> Mul(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public static UpdateBuilder`1<TDocument> Mul(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public static UpdateBuilder`1<TDocument> PopFirst(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression);
    public static UpdateBuilder`1<TDocument> PopLast(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression);
    public static UpdateBuilder`1<TDocument> Pull(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static UpdateBuilder`1<TDocument> Pull(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Func`2<QueryBuilder`1<TValue>, IMongoQuery> elementQueryBuilderFunction);
    public static UpdateBuilder`1<TDocument> PullAll(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static UpdateBuilder`1<TDocument> Push(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public static UpdateBuilder`1<TDocument> PushAll(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static UpdateBuilder`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public static UpdateBuilder`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, PushEachOptions options, IEnumerable`1<TValue> values);
    public static UpdateBuilder`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Action`1<PushEachOptionsBuilder`1<TValue>> options, IEnumerable`1<TValue> values);
    public static IMongoUpdate Replace(TDocument document);
    public static UpdateBuilder`1<TDocument> Set(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static UpdateBuilder`1<TDocument> SetOnInsert(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public static UpdateBuilder`1<TDocument> Unset(Expression`1<Func`2<TDocument, TMember>> memberExpression);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.UpdateBuilder/Serializer")]
public class MongoDB.Driver.Builders.UpdateBuilder : BuilderBase {
    private BsonDocument _document;
    internal BsonDocument Document { get; }
    internal BsonDocument get_Document();
    public UpdateBuilder AddToSet(string name, BsonValue value);
    public UpdateBuilder AddToSetEach(string name, BsonArray values);
    public UpdateBuilder AddToSetEach(string name, IEnumerable`1<BsonValue> values);
    public UpdateBuilder AddToSetEach(string name, BsonValue[] values);
    public UpdateBuilder AddToSetEachWrapped(string name, IEnumerable`1<T> values);
    public UpdateBuilder AddToSetEachWrapped(string name, T[] values);
    public UpdateBuilder AddToSetWrapped(string name, T value);
    public UpdateBuilder BitwiseAnd(string name, int value);
    public UpdateBuilder BitwiseAnd(string name, long value);
    public UpdateBuilder BitwiseOr(string name, int value);
    public UpdateBuilder BitwiseOr(string name, long value);
    public UpdateBuilder BitwiseXor(string name, int value);
    public UpdateBuilder BitwiseXor(string name, long value);
    public UpdateBuilder Combine(IMongoUpdate other);
    public UpdateBuilder CurrentDate(string name);
    public UpdateBuilder CurrentDate(string name, UpdateCurrentDateType type);
    public UpdateBuilder Inc(string name, double value);
    public UpdateBuilder Inc(string name, int value);
    public UpdateBuilder Inc(string name, long value);
    public UpdateBuilder Max(string name, BsonValue value);
    public UpdateBuilder Min(string name, BsonValue value);
    public UpdateBuilder Mul(string name, double value);
    public UpdateBuilder Mul(string name, int value);
    public UpdateBuilder Mul(string name, long value);
    public UpdateBuilder PopFirst(string name);
    public UpdateBuilder PopLast(string name);
    public UpdateBuilder Pull(string name, BsonValue value);
    public UpdateBuilder Pull(string name, IMongoQuery query);
    public UpdateBuilder PullAll(string name, BsonArray values);
    public UpdateBuilder PullAll(string name, IEnumerable`1<BsonValue> values);
    public UpdateBuilder PullAll(string name, BsonValue[] values);
    public UpdateBuilder PullAllWrapped(string name, IEnumerable`1<T> values);
    public UpdateBuilder PullAllWrapped(string name, T[] values);
    public UpdateBuilder PullWrapped(string name, T value);
    public UpdateBuilder Push(string name, BsonValue value);
    public UpdateBuilder PushAll(string name, BsonArray values);
    public UpdateBuilder PushAll(string name, IEnumerable`1<BsonValue> values);
    public UpdateBuilder PushAll(string name, BsonValue[] values);
    public UpdateBuilder PushAllWrapped(string name, IEnumerable`1<T> values);
    public UpdateBuilder PushAllWrapped(string name, T[] values);
    public UpdateBuilder PushEach(string name, BsonArray values);
    public UpdateBuilder PushEach(string name, IEnumerable`1<BsonValue> values);
    public UpdateBuilder PushEach(string name, BsonValue[] values);
    public UpdateBuilder PushEach(string name, PushEachOptions options, BsonArray values);
    public UpdateBuilder PushEach(string name, PushEachOptions options, IEnumerable`1<BsonValue> values);
    public UpdateBuilder PushEach(string name, PushEachOptions options, BsonValue[] values);
    public UpdateBuilder PushEachWrapped(string name, IEnumerable`1<T> values);
    public UpdateBuilder PushEachWrapped(string name, T[] values);
    public UpdateBuilder PushEachWrapped(string name, PushEachOptions args, IEnumerable`1<T> values);
    public UpdateBuilder PushEachWrapped(string name, PushEachOptions args, T[] values);
    public UpdateBuilder PushWrapped(string name, T value);
    public UpdateBuilder Rename(string oldElementName, string newElementName);
    public UpdateBuilder Set(string name, BsonValue value);
    public UpdateBuilder SetOnInsert(string name, BsonValue value);
    public UpdateBuilder SetWrapped(string name, T value);
    public virtual BsonDocument ToBsonDocument();
    public UpdateBuilder Unset(string name);
    private void BitwiseOperation(string name, string operation, BsonValue value);
    private void Inc(string name, BsonValue value);
    private void Mul(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.Builders.UpdateBuilder`1/Serializer")]
public class MongoDB.Driver.Builders.UpdateBuilder`1 : BuilderBase {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private UpdateBuilder _updateBuilder;
    public UpdateBuilder`1<TDocument> AddToSet(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public UpdateBuilder`1<TDocument> AddToSetEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public UpdateBuilder`1<TDocument> BitwiseAnd(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public UpdateBuilder`1<TDocument> BitwiseAnd(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public UpdateBuilder`1<TDocument> BitwiseOr(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public UpdateBuilder`1<TDocument> BitwiseOr(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public UpdateBuilder`1<TDocument> BitwiseXor(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public UpdateBuilder`1<TDocument> BitwiseXor(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public UpdateBuilder`1<TDocument> Combine(IMongoUpdate other);
    public UpdateBuilder`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, DateTime>> memberExpression);
    public UpdateBuilder`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, BsonDateTime>> memberExpression);
    public UpdateBuilder`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, BsonTimestamp>> memberExpression);
    public UpdateBuilder`1<TDocument> Inc(Expression`1<Func`2<TDocument, double>> memberExpression, double value);
    public UpdateBuilder`1<TDocument> Inc(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public UpdateBuilder`1<TDocument> Inc(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public UpdateBuilder`1<TDocument> Max(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public UpdateBuilder`1<TDocument> Min(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public UpdateBuilder`1<TDocument> Mul(Expression`1<Func`2<TDocument, double>> memberExpression, double value);
    public UpdateBuilder`1<TDocument> Mul(Expression`1<Func`2<TDocument, int>> memberExpression, int value);
    public UpdateBuilder`1<TDocument> Mul(Expression`1<Func`2<TDocument, long>> memberExpression, long value);
    public UpdateBuilder`1<TDocument> PopFirst(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression);
    public UpdateBuilder`1<TDocument> PopLast(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression);
    public UpdateBuilder`1<TDocument> Pull(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public UpdateBuilder`1<TDocument> Pull(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Func`2<QueryBuilder`1<TValue>, IMongoQuery> elementQueryBuilderFunction);
    public UpdateBuilder`1<TDocument> PullAll(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public UpdateBuilder`1<TDocument> Push(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, TValue value);
    public UpdateBuilder`1<TDocument> PushAll(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public UpdateBuilder`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, IEnumerable`1<TValue> values);
    public UpdateBuilder`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, PushEachOptions options, IEnumerable`1<TValue> values);
    public UpdateBuilder`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TValue>>> memberExpression, Action`1<PushEachOptionsBuilder`1<TValue>> options, IEnumerable`1<TValue> values);
    public UpdateBuilder`1<TDocument> Set(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public UpdateBuilder`1<TDocument> SetOnInsert(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
    public virtual BsonDocument ToBsonDocument();
    public UpdateBuilder`1<TDocument> Unset(Expression`1<Func`2<TDocument, TMember>> memberExpression);
    private UpdateBuilder`1<TDocument> BitwiseAnd(BsonSerializationInfo serializationInfo, BsonValue serializedValue);
    private UpdateBuilder`1<TDocument> BitwiseOr(BsonSerializationInfo serializationInfo, BsonValue serializedValue);
    private UpdateBuilder`1<TDocument> BitwiseXor(BsonSerializationInfo serializationInfo, BsonValue serializedValue);
    private UpdateBuilder`1<TDocument> Inc(BsonSerializationInfo serializationInfo, BsonValue serializedValue);
    private UpdateBuilder`1<TDocument> Mul(BsonSerializationInfo serializationInfo, BsonValue serializedValue);
}
public enum MongoDB.Driver.Builders.UpdateCurrentDateType : Enum {
    public int value__;
    public static UpdateCurrentDateType Date;
    public static UpdateCurrentDateType Timestamp;
}
public class MongoDB.Driver.BulkUpdateRequestBuilder`1 : object {
    private Action`1<WriteRequest> _addRequest;
    private Collation _collation;
    private IMongoQuery _query;
    private bool _upsert;
    internal BulkUpdateRequestBuilder`1(Action`1<WriteRequest> addRequest, IMongoQuery query, Collation collation, bool upsert);
    public void ReplaceOne(TDocument document);
    public void Update(IMongoUpdate update);
    public void UpdateOne(IMongoUpdate update);
    private void Update(UpdateType updateType, BsonDocument update, bool multi);
}
public class MongoDB.Driver.BulkWriteOperation`1 : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private MongoCollection _collection;
    private bool _isOrdered;
    private List`1<WriteRequest> _requests;
    private bool _hasBeenExecuted;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    internal BulkWriteOperation`1(MongoCollection collection, bool isOrdered);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public BulkWriteResult`1<TDocument> Execute();
    public BulkWriteResult`1<TDocument> Execute(WriteConcern writeConcern);
    public BulkWriteRequestBuilder`1<TDocument> Find(IMongoQuery query, Collation collation);
    public void Insert(TDocument document);
    private void AddRequest(WriteRequest request);
    private BulkWriteResult`1<TDocument> ExecuteHelper(WriteConcern writeConcern);
    private BulkWriteResult`1<TDocument> ExecuteHelper(IClientSessionHandle session, WriteConcern writeConcern);
    [CompilerGeneratedAttribute]
private WriteRequest <ExecuteHelper>b__15_0(WriteRequest x);
}
public class MongoDB.Driver.BulkWriteRequestBuilder`1 : object {
    private Action`1<WriteRequest> _addRequest;
    private Collation _collation;
    private IMongoQuery _query;
    internal BulkWriteRequestBuilder`1(Action`1<WriteRequest> addRequest, IMongoQuery query, Collation collation);
    public void Remove();
    public void RemoveOne();
    public void ReplaceOne(TDocument document);
    public void Update(IMongoUpdate update);
    public void UpdateOne(IMongoUpdate update);
    public BulkUpdateRequestBuilder`1<TDocument> Upsert();
}
[BsonSerializerAttribute("MongoDB.Driver.CollectionOptionsDocument/Serializer")]
public class MongoDB.Driver.CollectionOptionsDocument : BsonDocument {
    public CollectionOptionsDocument(bool allowDuplicateNames);
    public CollectionOptionsDocument(BsonElement element);
    public CollectionOptionsDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use CollectionOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CollectionOptionsDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public CollectionOptionsDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use CollectionOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CollectionOptionsDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public CollectionOptionsDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use CollectionOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CollectionOptionsDocument(IDictionary dictionary, IEnumerable keys);
    public CollectionOptionsDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use CollectionOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CollectionOptionsDocument(BsonElement[] elements);
    public CollectionOptionsDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.CollectionStatsResult>")]
public class MongoDB.Driver.CollectionStatsResult : CommandResult {
    private IndexSizesResult _indexSizes;
    public double AverageObjectSize { get; }
    public long DataSize { get; }
    public int ExtentCount { get; }
    public int IndexCount { get; }
    public IndexSizesResult IndexSizes { get; }
    public bool IsCapped { get; }
    public long LastExtentSize { get; }
    public long MaxDocuments { get; }
    public string Namespace { get; }
    public long ObjectCount { get; }
    public double PaddingFactor { get; }
    public long StorageSize { get; }
    public CollectionSystemFlags SystemFlags { get; }
    public long TotalIndexSize { get; }
    public CollectionUserFlags UserFlags { get; }
    public CollectionStatsResult(BsonDocument response);
    public double get_AverageObjectSize();
    public long get_DataSize();
    public int get_ExtentCount();
    public int get_IndexCount();
    public IndexSizesResult get_IndexSizes();
    public bool get_IsCapped();
    public long get_LastExtentSize();
    public long get_MaxDocuments();
    public string get_Namespace();
    public long get_ObjectCount();
    public double get_PaddingFactor();
    public long get_StorageSize();
    public CollectionSystemFlags get_SystemFlags();
    public long get_TotalIndexSize();
    public CollectionUserFlags get_UserFlags();
}
[FlagsAttribute]
public enum MongoDB.Driver.CollectionSystemFlags : Enum {
    public int value__;
    public static CollectionSystemFlags None;
    public static CollectionSystemFlags HasIdIndex;
}
[FlagsAttribute]
public enum MongoDB.Driver.CollectionUserFlags : Enum {
    public int value__;
    public static CollectionUserFlags None;
    public static CollectionUserFlags UsePowerOf2Sizes;
    public static CollectionUserFlags NoPadding;
}
[BsonSerializerAttribute("MongoDB.Driver.CommandDocument/Serializer")]
public class MongoDB.Driver.CommandDocument : QueryDocument {
    public CommandDocument(bool allowDuplicateNames);
    public CommandDocument(BsonElement element);
    public CommandDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use CommandDocument<IEnumerable<BsonElement> elements) instead.")]
public CommandDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public CommandDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use CommandDocument<IEnumerable<BsonElement> elements) instead.")]
public CommandDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public CommandDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use CommandDocument<IEnumerable<BsonElement> elements) instead.")]
public CommandDocument(IDictionary dictionary, IEnumerable keys);
    public CommandDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use CommandDocument<IEnumerable<BsonElement> elements) instead.")]
public CommandDocument(BsonElement[] elements);
    public CommandDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.CommandResult>")]
public class MongoDB.Driver.CommandResult : object {
    private BsonDocument _response;
    public Nullable`1<int> Code { get; }
    public BsonDocument Response { get; }
    public string ErrorMessage { get; }
    public bool Ok { get; }
    public CommandResult(BsonDocument response);
    public Nullable`1<int> get_Code();
    public BsonDocument get_Response();
    public string get_ErrorMessage();
    public bool get_Ok();
}
public class MongoDB.Driver.CommandResultSerializer`1 : SerializerBase`1<TCommandResult> {
    public virtual TCommandResult Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
}
public class MongoDB.Driver.CountArgs : object {
    private Collation _collation;
    private BsonValue _hint;
    private Nullable`1<long> _limit;
    private Nullable`1<TimeSpan> _maxTime;
    private IMongoQuery _query;
    private ReadPreference _readPreference;
    private Nullable`1<long> _skip;
    public Collation Collation { get; public set; }
    public BsonValue Hint { get; public set; }
    public Nullable`1<long> Limit { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IMongoQuery Query { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public Nullable`1<long> Skip { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public Nullable`1<long> get_Limit();
    public void set_Limit(Nullable`1<long> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public Nullable`1<long> get_Skip();
    public void set_Skip(Nullable`1<long> value);
}
[BsonSerializerAttribute("MongoDB.Driver.CreateViewOptionsDocument/Serializer")]
public class MongoDB.Driver.CreateViewOptionsDocument : BsonDocument {
    public CreateViewOptionsDocument(bool allowDuplicateNames);
    public CreateViewOptionsDocument(BsonElement element);
    public CreateViewOptionsDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use CreateViewOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CreateViewOptionsDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public CreateViewOptionsDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use CreateViewOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CreateViewOptionsDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public CreateViewOptionsDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use CreateViewOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CreateViewOptionsDocument(IDictionary dictionary, IEnumerable keys);
    public CreateViewOptionsDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use CreateViewOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public CreateViewOptionsDocument(BsonElement[] elements);
    public CreateViewOptionsDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.DatabaseStatsResult>")]
public class MongoDB.Driver.DatabaseStatsResult : CommandResult {
    public double AverageObjectSize { get; }
    public int CollectionCount { get; }
    public long DataSize { get; }
    public int ExtentCount { get; }
    public long FileSize { get; }
    public int IndexCount { get; }
    public long IndexSize { get; }
    public long ObjectCount { get; }
    public long StorageSize { get; }
    public DatabaseStatsResult(BsonDocument response);
    public double get_AverageObjectSize();
    public int get_CollectionCount();
    public long get_DataSize();
    public int get_ExtentCount();
    public long get_FileSize();
    public int get_IndexCount();
    public long get_IndexSize();
    public long get_ObjectCount();
    public long get_StorageSize();
}
internal class MongoDB.Driver.DefaultLegacyOperationExecutor : object {
    public sealed virtual TResult ExecuteReadOperation(IReadBinding binding, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteReadOperationAsync(IReadBinding binding, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    public sealed virtual TResult ExecuteWriteOperation(IWriteBinding binding, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> ExecuteWriteOperationAsync(IWriteBinding binding, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    public sealed virtual IClientSessionHandle StartImplicitSession(CancellationToken cancellationToken);
    public sealed virtual Task`1<IClientSessionHandle> StartImplicitSessionAsync(CancellationToken cancellationToken);
}
public class MongoDB.Driver.DistinctArgs : object {
    private Collation _collation;
    private string _key;
    private Nullable`1<TimeSpan> _maxTime;
    private IMongoQuery _query;
    private IBsonSerializer _valueSerializer;
    public Collation Collation { get; public set; }
    public string Key { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IMongoQuery Query { get; public set; }
    public IBsonSerializer ValueSerializer { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public string get_Key();
    public void set_Key(string value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public IBsonSerializer get_ValueSerializer();
    public void set_ValueSerializer(IBsonSerializer value);
}
public class MongoDB.Driver.EvalArgs : object {
    private IEnumerable`1<BsonValue> _args;
    private BsonJavaScript _code;
    private Nullable`1<bool> _lock;
    private Nullable`1<TimeSpan> _maxTime;
    public IEnumerable`1<BsonValue> Args { get; public set; }
    public BsonJavaScript Code { get; public set; }
    public Nullable`1<bool> Lock { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IEnumerable`1<BsonValue> get_Args();
    public void set_Args(IEnumerable`1<BsonValue> value);
    public BsonJavaScript get_Code();
    public void set_Code(BsonJavaScript value);
    public Nullable`1<bool> get_Lock();
    public void set_Lock(Nullable`1<bool> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
}
[FlagsAttribute]
public enum MongoDB.Driver.EvalFlags : Enum {
    public int value__;
    public static EvalFlags None;
    public static EvalFlags NoLock;
}
public enum MongoDB.Driver.FeatureId : Enum {
    public int value__;
    public static FeatureId AggregateAllowDiskUse;
    public static FeatureId AggregateCursor;
    public static FeatureId AggregateExplain;
    public static FeatureId AggregateOutputToCollection;
    public static FeatureId CreateIndexCommand;
    public static FeatureId MaxTime;
    public static FeatureId GeoJson;
    public static FeatureId ParallelScanCommand;
    public static FeatureId TextSearchCommand;
    public static FeatureId TextSearchQuery;
    public static FeatureId UserManagementCommands;
    public static FeatureId WriteCommands;
    public static FeatureId WriteOpcodes;
}
[BsonSerializerAttribute("MongoDB.Driver.FieldsDocument/Serializer")]
public class MongoDB.Driver.FieldsDocument : BsonDocument {
    public FieldsDocument(bool allowDuplicateNames);
    public FieldsDocument(BsonElement element);
    public FieldsDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use FieldsDocument<IEnumerable<BsonElement> elements) instead.")]
public FieldsDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public FieldsDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use FieldsDocument<IEnumerable<BsonElement> elements) instead.")]
public FieldsDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public FieldsDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use FieldsDocument<IEnumerable<BsonElement> elements) instead.")]
public FieldsDocument(IDictionary dictionary, IEnumerable keys);
    public FieldsDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use FieldsDocument<IEnumerable<BsonElement> elements) instead.")]
public FieldsDocument(BsonElement[] elements);
    public FieldsDocument(string name, BsonValue value);
}
public class MongoDB.Driver.FindAndModifyArgs : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private IMongoFields _fields;
    private Nullable`1<TimeSpan> _maxTime;
    private IMongoQuery _query;
    private IMongoSortBy _sort;
    private IMongoUpdate _update;
    private bool _upsert;
    private Nullable`1<FindAndModifyDocumentVersion> _versionReturned;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public IMongoFields Fields { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IMongoQuery Query { get; public set; }
    public IMongoSortBy SortBy { get; public set; }
    public IMongoUpdate Update { get; public set; }
    public bool Upsert { get; public set; }
    public Nullable`1<FindAndModifyDocumentVersion> VersionReturned { get; public set; }
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public IMongoFields get_Fields();
    public void set_Fields(IMongoFields value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public IMongoSortBy get_SortBy();
    public void set_SortBy(IMongoSortBy value);
    public IMongoUpdate get_Update();
    public void set_Update(IMongoUpdate value);
    public bool get_Upsert();
    public void set_Upsert(bool value);
    public Nullable`1<FindAndModifyDocumentVersion> get_VersionReturned();
    public void set_VersionReturned(Nullable`1<FindAndModifyDocumentVersion> value);
}
public enum MongoDB.Driver.FindAndModifyDocumentVersion : Enum {
    public int value__;
    public static FindAndModifyDocumentVersion Original;
    public static FindAndModifyDocumentVersion Modified;
}
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.FindAndModifyResult>")]
public class MongoDB.Driver.FindAndModifyResult : CommandResult {
    public BsonDocument ModifiedDocument { get; }
    public FindAndModifyResult(BsonDocument response);
    public BsonDocument get_ModifiedDocument();
    public TDocument GetModifiedDocumentAs();
    public object GetModifiedDocumentAs(Type documentType);
}
public class MongoDB.Driver.FindAndRemoveArgs : object {
    private Collation _collation;
    private IMongoFields _fields;
    private Nullable`1<TimeSpan> _maxTime;
    private IMongoQuery _query;
    private IMongoSortBy _sort;
    public Collation Collation { get; public set; }
    public IMongoFields Fields { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IMongoQuery Query { get; public set; }
    public IMongoSortBy SortBy { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public IMongoFields get_Fields();
    public void set_Fields(IMongoFields value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public IMongoSortBy get_SortBy();
    public void set_SortBy(IMongoSortBy value);
}
public class MongoDB.Driver.FindOneArgs : object {
    private Collation _collation;
    private IMongoFields _fields;
    private BsonDocument _hint;
    private Nullable`1<TimeSpan> _maxTime;
    private IMongoQuery _query;
    private ReadPreference _readPreference;
    private IBsonSerializer _serializer;
    private Nullable`1<int> _skip;
    private IMongoSortBy _sortBy;
    public Collation Collation { get; public set; }
    public IMongoFields Fields { get; public set; }
    public BsonDocument Hint { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IMongoQuery Query { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public IBsonSerializer Serializer { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public IMongoSortBy SortBy { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public IMongoFields get_Fields();
    public void set_Fields(IMongoFields value);
    public BsonDocument get_Hint();
    public void set_Hint(BsonDocument value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public IBsonSerializer get_Serializer();
    public void set_Serializer(IBsonSerializer value);
    public Nullable`1<int> get_Skip();
    public void set_Skip(Nullable`1<int> value);
    public IMongoSortBy get_SortBy();
    public void set_SortBy(IMongoSortBy value);
}
[ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public class MongoDB.Driver.GeoHaystackSearchArgs : object {
    private string _additionalFieldName;
    private BsonValue _additionalFieldValue;
    private Nullable`1<int> _limit;
    private Nullable`1<double> _maxDistance;
    private Nullable`1<TimeSpan> _maxTime;
    private XYPoint _near;
    public string AdditionalFieldName { get; public set; }
    public BsonValue AdditionalFieldValue { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<double> MaxDistance { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public XYPoint Near { get; public set; }
    public string get_AdditionalFieldName();
    public void set_AdditionalFieldName(string value);
    public BsonValue get_AdditionalFieldValue();
    public void set_AdditionalFieldValue(BsonValue value);
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    public Nullable`1<double> get_MaxDistance();
    public void set_MaxDistance(Nullable`1<double> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public XYPoint get_Near();
    public void set_Near(XYPoint value);
    public GeoHaystackSearchArgs SetAdditionalField(string name, BsonValue value);
    public GeoHaystackSearchArgs SetAdditionalField(Expression`1<Func`2<TDocument, TMember>> memberExpression, TMember value);
}
[BsonSerializerAttribute("MongoDB.Driver.GeoHaystackSearchOptionsDocument/Serializer")]
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
public class MongoDB.Driver.GeoHaystackSearchOptionsDocument : BsonDocument {
    public GeoHaystackSearchOptionsDocument(bool allowDuplicateNames);
    public GeoHaystackSearchOptionsDocument(BsonElement element);
    public GeoHaystackSearchOptionsDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use GeoHaystackSearchOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoHaystackSearchOptionsDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public GeoHaystackSearchOptionsDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use GeoHaystackSearchOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoHaystackSearchOptionsDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public GeoHaystackSearchOptionsDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use GeoHaystackSearchOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoHaystackSearchOptionsDocument(IDictionary dictionary, IEnumerable keys);
    public GeoHaystackSearchOptionsDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use GeoHaystackSearchOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoHaystackSearchOptionsDocument(BsonElement[] elements);
    public GeoHaystackSearchOptionsDocument(string name, BsonValue value);
}
[ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public abstract class MongoDB.Driver.GeoHaystackSearchResult : CommandResult {
    private GeoHaystackSearchStats _stats;
    public GeoHaystackSearchHits Hits { get; }
    public GeoHaystackSearchStats Stats { get; }
    protected GeoHaystackSearchHits HitsImplementation { get; }
    protected GeoHaystackSearchResult(BsonDocument response);
    public GeoHaystackSearchHits get_Hits();
    public GeoHaystackSearchStats get_Stats();
    protected abstract virtual GeoHaystackSearchHits get_HitsImplementation();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoHaystackSearchResult`1/Serializer")]
[ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public class MongoDB.Driver.GeoHaystackSearchResult`1 : GeoHaystackSearchResult {
    private GeoHaystackSearchHits<TDocument> _hits;
    public GeoHaystackSearchHits<TDocument> Hits { get; }
    protected GeoHaystackSearchHits HitsImplementation { get; }
    public GeoHaystackSearchResult`1(BsonDocument response);
    public GeoHaystackSearchHits<TDocument> get_Hits();
    protected virtual GeoHaystackSearchHits get_HitsImplementation();
}
public class MongoDB.Driver.GeoNearArgs : object {
    private Collation _collation;
    private Nullable`1<double> _distanceMultiplier;
    private Nullable`1<bool> _includeLocs;
    private Nullable`1<int> _limit;
    private Nullable`1<double> _maxDistance;
    private Nullable`1<TimeSpan> _maxTime;
    private GeoNearPoint _near;
    private IMongoQuery _query;
    private Nullable`1<bool> _spherical;
    private Nullable`1<bool> _uniqueDocs;
    public Collation Collation { get; public set; }
    public Nullable`1<double> DistanceMultiplier { get; public set; }
    public Nullable`1<bool> IncludeLocs { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<double> MaxDistance { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public GeoNearPoint Near { get; public set; }
    public IMongoQuery Query { get; public set; }
    public Nullable`1<bool> Spherical { get; public set; }
    public Nullable`1<bool> UniqueDocs { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public Nullable`1<double> get_DistanceMultiplier();
    public void set_DistanceMultiplier(Nullable`1<double> value);
    public Nullable`1<bool> get_IncludeLocs();
    public void set_IncludeLocs(Nullable`1<bool> value);
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    public Nullable`1<double> get_MaxDistance();
    public void set_MaxDistance(Nullable`1<double> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public GeoNearPoint get_Near();
    public void set_Near(GeoNearPoint value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public Nullable`1<bool> get_Spherical();
    public void set_Spherical(Nullable`1<bool> value);
    public Nullable`1<bool> get_UniqueDocs();
    public void set_UniqueDocs(Nullable`1<bool> value);
}
[BsonSerializerAttribute("MongoDB.Driver.GeoNearOptionsDocument/Serializer")]
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
public class MongoDB.Driver.GeoNearOptionsDocument : BsonDocument {
    public GeoNearOptionsDocument(bool allowDuplicateNames);
    public GeoNearOptionsDocument(BsonElement element);
    public GeoNearOptionsDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use GeoNearOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoNearOptionsDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public GeoNearOptionsDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use GeoNearOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoNearOptionsDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public GeoNearOptionsDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use GeoNearOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoNearOptionsDocument(IDictionary dictionary, IEnumerable keys);
    public GeoNearOptionsDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use GeoNearOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public GeoNearOptionsDocument(BsonElement[] elements);
    public GeoNearOptionsDocument(string name, BsonValue value);
}
public abstract class MongoDB.Driver.GeoNearPoint : object {
    public static GeoNearPoint op_Implicit(XYPoint value);
    public static GeoNearPoint op_Implicit(GeoJsonPoint`1<GeoJson2DCoordinates> value);
    public static GeoNearPoint op_Implicit(GeoJsonPoint`1<GeoJson2DGeographicCoordinates> value);
    public static GeoNearPoint op_Implicit(GeoJsonPoint`1<GeoJson2DProjectedCoordinates> value);
    internal abstract virtual BsonValue ToGeoNearCommandValue();
}
public abstract class MongoDB.Driver.GeoNearResult : CommandResult {
    private GeoNearStats _stats;
    public GeoNearHits Hits { get; }
    public string Namespace { get; }
    public GeoNearStats Stats { get; }
    protected GeoNearHits HitsImplementation { get; }
    protected GeoNearResult(BsonDocument response);
    public GeoNearHits get_Hits();
    public string get_Namespace();
    public GeoNearStats get_Stats();
    protected abstract virtual GeoNearHits get_HitsImplementation();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoNearResult`1/Serializer")]
public class MongoDB.Driver.GeoNearResult`1 : GeoNearResult {
    private GeoNearHits<TDocument> _hits;
    public GeoNearHits<TDocument> Hits { get; }
    protected GeoNearHits HitsImplementation { get; }
    public GeoNearResult`1(BsonDocument response);
    public GeoNearHits<TDocument> get_Hits();
    protected virtual GeoNearHits get_HitsImplementation();
}
[DefaultMemberAttribute("Item")]
public class MongoDB.Driver.GetIndexesResult : object {
    private BsonDocument[] _documents;
    private IndexInfo[] _indexes;
    public IndexInfo Item { get; }
    public int Count { get; }
    public IEnumerable`1<BsonDocument> RawDocuments { get; }
    public GetIndexesResult(BsonDocument[] documents);
    public IndexInfo get_Item(int index);
    public int get_Count();
    public IEnumerable`1<BsonDocument> get_RawDocuments();
    private sealed virtual override IEnumerator`1<IndexInfo> System.Collections.Generic.IEnumerable<MongoDB.Driver.IndexInfo>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.GetProfilingLevelResult>")]
public class MongoDB.Driver.GetProfilingLevelResult : CommandResult {
    public ProfilingLevel Level { get; }
    public TimeSpan Slow { get; }
    public GetProfilingLevelResult(BsonDocument response);
    public ProfilingLevel get_Level();
    public TimeSpan get_Slow();
}
public class MongoDB.Driver.GetStatsArgs : object {
    private Nullable`1<TimeSpan> _maxTime;
    private Nullable`1<int> _scale;
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public Nullable`1<int> get_Scale();
    public void set_Scale(Nullable`1<int> value);
}
public class MongoDB.Driver.GridFS.MongoGridFS : object {
    private string _databaseName;
    private MongoServer _server;
    private MongoGridFSSettings _settings;
    public MongoCollection`1<BsonDocument> Chunks { get; }
    public MongoDatabase Database { get; }
    public string DatabaseName { get; }
    public MongoCollection`1<BsonDocument> Files { get; }
    public MongoServer Server { get; }
    public MongoGridFSSettings Settings { get; }
    [ObsoleteAttribute("Use a different constructor instead.")]
public MongoGridFS(MongoDatabase database);
    [ObsoleteAttribute("Use a different constructor instead.")]
public MongoGridFS(MongoDatabase database, MongoGridFSSettings settings);
    public MongoGridFS(MongoServer server, string databaseName, MongoGridFSSettings settings);
    public MongoCollection`1<BsonDocument> get_Chunks();
    public MongoDatabase get_Database();
    public string get_DatabaseName();
    public MongoCollection`1<BsonDocument> get_Files();
    public MongoServer get_Server();
    public MongoGridFSSettings get_Settings();
    private static MongoGridFSSettings ApplyDefaultValues(MongoGridFSSettings settings, MongoDatabase database);
    private static string GetDatabaseName(MongoDatabase database);
    private static MongoServer GetServer(MongoDatabase database);
    public StreamWriter AppendText(string remoteFileName);
    public MongoGridFSFileInfo CopyTo(string sourceFileName, string destFileName);
    public MongoGridFSFileInfo CopyTo(string sourceFileName, string destFileName, MongoGridFSCreateOptions createOptions);
    public MongoGridFSStream Create(string remoteFileName);
    public MongoGridFSStream Create(string remoteFileName, MongoGridFSCreateOptions createOptions);
    public StreamWriter CreateText(string remoteFileName);
    public StreamWriter CreateText(string remoteFileName, MongoGridFSCreateOptions createOptions);
    public void Delete(IMongoQuery query);
    public void Delete(string remoteFileName);
    public void DeleteById(BsonValue id);
    public void Download(Stream stream, IMongoQuery query);
    public void Download(Stream stream, IMongoQuery query, int version);
    public void Download(Stream stream, MongoGridFSFileInfo fileInfo);
    public void Download(Stream stream, string remoteFileName);
    public void Download(Stream stream, string remoteFileName, int version);
    public void Download(string fileName);
    public void Download(string fileName, int version);
    public void Download(string localFileName, IMongoQuery query);
    public void Download(string localFileName, IMongoQuery query, int version);
    public void Download(string localFileName, MongoGridFSFileInfo fileInfo);
    public void Download(string localFileName, string remoteFileName);
    public void Download(string localFileName, string remoteFileName, int version);
    public void EnsureIndexes();
    public void EnsureIndexes(int maxFiles);
    public bool Exists(IMongoQuery query);
    public bool Exists(string remoteFileName);
    public bool ExistsById(BsonValue id);
    public MongoCursor`1<MongoGridFSFileInfo> Find(IMongoQuery query);
    public MongoCursor`1<MongoGridFSFileInfo> Find(string remoteFileName);
    public MongoCursor`1<MongoGridFSFileInfo> FindAll();
    public MongoGridFSFileInfo FindOne(IMongoQuery query);
    public MongoGridFSFileInfo FindOne(IMongoQuery query, int version);
    public MongoGridFSFileInfo FindOne(string remoteFileName);
    public MongoGridFSFileInfo FindOne(string remoteFileName, int version);
    public MongoGridFSFileInfo FindOneById(BsonValue id);
    public void MoveTo(string sourceFileName, string destFileName);
    public MongoGridFSStream Open(string remoteFileName, FileMode mode);
    public MongoGridFSStream Open(string remoteFileName, FileMode mode, FileAccess access);
    public MongoGridFSStream Open(string remoteFileName, FileMode mode, FileAccess access, MongoGridFSCreateOptions createOptions);
    public MongoGridFSStream OpenRead(string remoteFileName);
    public StreamReader OpenText(string remoteFileName);
    public MongoGridFSStream OpenWrite(string remoteFileName);
    public MongoGridFSStream OpenWrite(string remoteFileName, MongoGridFSCreateOptions createOptions);
    public void SetAliases(MongoGridFSFileInfo fileInfo, String[] aliases);
    public void SetContentType(MongoGridFSFileInfo fileInfo, string contentType);
    public void SetMetadata(MongoGridFSFileInfo fileInfo, BsonValue metadata);
    public MongoGridFSFileInfo Upload(Stream stream, string remoteFileName);
    public MongoGridFSFileInfo Upload(Stream stream, string remoteFileName, MongoGridFSCreateOptions createOptions);
    public MongoGridFSFileInfo Upload(string fileName);
    public MongoGridFSFileInfo Upload(string localFileName, string remoteFileName);
    internal MongoCollection`1<BsonDocument> GetChunksCollection(MongoDatabase database);
    internal MongoDatabase GetDatabase();
    internal MongoDatabase GetDatabase(ReadPreference readPreference);
    internal MongoCollection`1<BsonDocument> GetFilesCollection(MongoDatabase database);
    private ReadPreference DetermineReadPreference(FileMode mode);
    private ReadPreference DetermineReadPreference(FileMode mode, FileAccess access);
    private MongoGridFS WithReadPreferencePrimary();
}
public class MongoDB.Driver.GridFS.MongoGridFSCreateOptions : object {
    private String[] _aliases;
    private int _chunkSize;
    private string _contentType;
    private BsonValue _id;
    private BsonDocument _metadata;
    private DateTime _uploadDate;
    public String[] Aliases { get; public set; }
    public int ChunkSize { get; public set; }
    public string ContentType { get; public set; }
    public BsonValue Id { get; public set; }
    public BsonDocument Metadata { get; public set; }
    public DateTime UploadDate { get; public set; }
    public String[] get_Aliases();
    public void set_Aliases(String[] value);
    public int get_ChunkSize();
    public void set_ChunkSize(int value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public BsonValue get_Id();
    public void set_Id(BsonValue value);
    public BsonDocument get_Metadata();
    public void set_Metadata(BsonDocument value);
    public DateTime get_UploadDate();
    public void set_UploadDate(DateTime value);
}
public class MongoDB.Driver.GridFS.MongoGridFSException : MongoServerException {
    public MongoGridFSException(ConnectionId connectionId, string message);
    public MongoGridFSException(ConnectionId connectionId, string message, Exception innerException);
    public MongoGridFSException(SerializationInfo info, StreamingContext context);
}
public class MongoDB.Driver.GridFS.MongoGridFSFileInfo : object {
    private String[] _aliases;
    private int _chunkSize;
    private string _contentType;
    private BsonValue _id;
    private long _length;
    private string _md5;
    private BsonDocument _metadata;
    private string _name;
    private DateTime _uploadDate;
    private MongoServer _server;
    private MongoServerInstance _serverInstance;
    private string _databaseName;
    private MongoGridFSSettings _settings;
    private bool _cached;
    private bool _exists;
    public String[] Aliases { get; }
    public int ChunkSize { get; }
    public string ContentType { get; }
    public string DatabaseName { get; }
    public bool Exists { get; }
    public MongoGridFS GridFS { get; }
    public MongoGridFSSettings GridFSSettings { get; }
    public BsonValue Id { get; }
    public long Length { get; }
    public string MD5 { get; }
    public BsonDocument Metadata { get; }
    public string Name { get; }
    public MongoServer Server { get; }
    public MongoServerInstance ServerInstance { get; }
    public DateTime UploadDate { get; }
    [ObsoleteAttribute("Use a different constructor instead.")]
public MongoGridFSFileInfo(MongoGridFS gridFS, string remoteFileName);
    [ObsoleteAttribute("Use a different constructor instead.")]
public MongoGridFSFileInfo(MongoGridFS gridFS, string remoteFileName, int chunkSize);
    [ObsoleteAttribute("Use a different constructor instead.")]
public MongoGridFSFileInfo(MongoGridFS gridFS, string remoteFileName, MongoGridFSCreateOptions createOptions);
    private MongoGridFSFileInfo(MongoServer server, MongoServerInstance serverInstance, string databaseName, MongoGridFSSettings gridFSSettings);
    public MongoGridFSFileInfo(MongoServer server, MongoServerInstance serverInstance, string databaseName, MongoGridFSSettings gridFSSettings, string remoteFileName);
    public MongoGridFSFileInfo(MongoServer server, MongoServerInstance serverInstance, string databaseName, MongoGridFSSettings gridFSSettings, BsonDocument fileInfo);
    public MongoGridFSFileInfo(MongoServer server, MongoServerInstance serverInstance, string databaseName, MongoGridFSSettings gridFSSettings, string remoteFileName, MongoGridFSCreateOptions createOptions);
    public String[] get_Aliases();
    public int get_ChunkSize();
    public string get_ContentType();
    public string get_DatabaseName();
    public bool get_Exists();
    public MongoGridFS get_GridFS();
    public MongoGridFSSettings get_GridFSSettings();
    public BsonValue get_Id();
    public long get_Length();
    public string get_MD5();
    public BsonDocument get_Metadata();
    public string get_Name();
    public MongoServer get_Server();
    public MongoServerInstance get_ServerInstance();
    public DateTime get_UploadDate();
    public static bool op_Inequality(MongoGridFSFileInfo lhs, MongoGridFSFileInfo rhs);
    public static bool op_Equality(MongoGridFSFileInfo lhs, MongoGridFSFileInfo rhs);
    public static bool Equals(MongoGridFSFileInfo lhs, MongoGridFSFileInfo rhs);
    private static string GetDatabaseName(MongoGridFS gridFS);
    private static MongoGridFSSettings GetGridFSSettings(MongoGridFS gridFS);
    private static MongoServer GetServer(MongoGridFS gridFS);
    private static MongoServerInstance GetServerInstance(MongoGridFS gridFS);
    public StreamWriter AppendText();
    public MongoGridFSFileInfo CopyTo(string destFileName);
    public MongoGridFSFileInfo CopyTo(string destFileName, MongoGridFSCreateOptions createOptions);
    public MongoGridFSStream Create();
    public StreamWriter CreateText();
    public void Delete();
    public sealed virtual bool Equals(MongoGridFSFileInfo rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void MoveTo(string destFileName);
    public MongoGridFSStream Open(FileMode mode);
    public MongoGridFSStream Open(FileMode mode, FileAccess access);
    public MongoGridFSStream OpenRead();
    public StreamReader OpenText();
    public MongoGridFSStream OpenWrite();
    public void Refresh();
    internal void SetId(BsonValue id);
    private void CacheFileInfo(BsonDocument fileInfo);
    private void EnsureServerInstanceIsPrimary();
}
internal class MongoDB.Driver.GridFS.MongoGridFSFileInfoSerializer : SerializerBase`1<MongoGridFSFileInfo> {
    private MongoServer _server;
    private MongoServerInstance _serverInstance;
    private string _databaseName;
    private MongoGridFSSettings _gridFSSettings;
    public MongoGridFSFileInfoSerializer(MongoServer server, MongoServerInstance serverInstance, string databaseName, MongoGridFSSettings gridFSSettings);
    public virtual MongoGridFSFileInfo Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
}
public class MongoDB.Driver.GridFS.MongoGridFSSettings : object {
    private static MongoGridFSSettings __defaults;
    private Setting`1<int> _chunkSize;
    private Setting`1<GuidRepresentation> _guidRepresentation;
    private Setting`1<UTF8Encoding> _readEncoding;
    private Setting`1<ReadPreference> _readPreference;
    private Setting`1<string> _root;
    private Setting`1<bool> _updateMD5;
    private Setting`1<bool> _verifyMD5;
    private Setting`1<WriteConcern> _writeConcern;
    private Setting`1<UTF8Encoding> _writeEncoding;
    private bool _isFrozen;
    private int _frozenHashCode;
    public static MongoGridFSSettings Defaults { get; public set; }
    [ObsoleteAttribute("Use Root instead.")]
public string ChunksCollectionName { get; }
    public int ChunkSize { get; public set; }
    [ObsoleteAttribute("Use Root instead.")]
public string FilesCollectionName { get; }
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public bool IsFrozen { get; }
    public UTF8Encoding ReadEncoding { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public string Root { get; public set; }
    public bool UpdateMD5 { get; public set; }
    public bool VerifyMD5 { get; public set; }
    public WriteConcern WriteConcern { get; public set; }
    public UTF8Encoding WriteEncoding { get; public set; }
    private static MongoGridFSSettings();
    [ObsoleteAttribute("Use new MongoGridFSSettings() instead.")]
public MongoGridFSSettings(MongoDatabase database);
    [ObsoleteAttribute("Use new MongoGridFSSettings() instead.")]
public MongoGridFSSettings(int chunkSize, string root, WriteConcern writeConcern);
    public static MongoGridFSSettings get_Defaults();
    public static void set_Defaults(MongoGridFSSettings value);
    public string get_ChunksCollectionName();
    public int get_ChunkSize();
    public void set_ChunkSize(int value);
    public string get_FilesCollectionName();
    public GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public bool get_IsFrozen();
    public UTF8Encoding get_ReadEncoding();
    public void set_ReadEncoding(UTF8Encoding value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public string get_Root();
    public void set_Root(string value);
    public bool get_UpdateMD5();
    public void set_UpdateMD5(bool value);
    public bool get_VerifyMD5();
    public void set_VerifyMD5(bool value);
    public WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
    public UTF8Encoding get_WriteEncoding();
    public void set_WriteEncoding(UTF8Encoding value);
    public static bool op_Inequality(MongoGridFSSettings lhs, MongoGridFSSettings rhs);
    public static bool op_Equality(MongoGridFSSettings lhs, MongoGridFSSettings rhs);
    public MongoGridFSSettings Clone();
    public sealed virtual bool Equals(MongoGridFSSettings rhs);
    public virtual bool Equals(object obj);
    public MongoGridFSSettings Freeze();
    public MongoGridFSSettings FrozenCopy();
    public virtual int GetHashCode();
    internal void ApplyDefaultValues(MongoDatabaseSettings databaseSettings);
    internal void ApplyDefaultValues(MongoServerSettings serverSettings);
    internal MongoDatabaseSettings GetDatabaseSettings();
    private void ThrowFrozen();
}
public class MongoDB.Driver.GridFS.MongoGridFSStream : Stream {
    private MongoGridFSFileInfo _fileInfo;
    private FileAccess _access;
    private long _length;
    private long _position;
    private Byte[] _chunk;
    private long _chunkIndex;
    private BsonValue _chunkId;
    private bool _chunkIsDirty;
    private bool _fileIsDirty;
    private bool _updateMD5;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [ObsoleteAttribute("Use UpdateMD5 on MongoGridFSSettings instead.")]
public bool UpdateMD5 { get; public set; }
    public MongoGridFSStream(MongoGridFSFileInfo fileInfo, FileMode mode);
    public MongoGridFSStream(MongoGridFSFileInfo fileInfo, FileMode mode, FileAccess access);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public bool get_UpdateMD5();
    public void set_UpdateMD5(bool value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    protected virtual void Dispose(bool disposing);
    private void AddMissingChunks();
    private void EnsureServerInstanceIsPrimary();
    private void LoadChunk(long chunkIndex);
    private void LoadChunkNoData(long chunkIndex);
    private void OpenAppend();
    private void OpenCreate();
    private void OpenExisting();
    private void OpenTruncate();
    private void SaveChunk();
    private void UpdateMetadata();
}
public class MongoDB.Driver.GroupArgs : object {
    private Collation _collation;
    private BsonJavaScript _finalizeFunction;
    private BsonDocument _initial;
    private IMongoGroupBy _keyFields;
    private BsonJavaScript _keyFunction;
    private Nullable`1<TimeSpan> _maxTime;
    private IMongoQuery _query;
    private BsonJavaScript _reduceFunction;
    public Collation Collation { get; public set; }
    public BsonJavaScript FinalizeFunction { get; public set; }
    public BsonDocument Initial { get; public set; }
    public IMongoGroupBy KeyFields { get; public set; }
    public BsonJavaScript KeyFunction { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public IMongoQuery Query { get; public set; }
    public BsonJavaScript ReduceFunction { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonJavaScript get_FinalizeFunction();
    public void set_FinalizeFunction(BsonJavaScript value);
    public BsonDocument get_Initial();
    public void set_Initial(BsonDocument value);
    public IMongoGroupBy get_KeyFields();
    public void set_KeyFields(IMongoGroupBy value);
    public BsonJavaScript get_KeyFunction();
    public void set_KeyFunction(BsonJavaScript value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public BsonJavaScript get_ReduceFunction();
    public void set_ReduceFunction(BsonJavaScript value);
}
[BsonSerializerAttribute("MongoDB.Driver.GroupByDocument/Serializer")]
public class MongoDB.Driver.GroupByDocument : BsonDocument {
    public GroupByDocument(bool allowDuplicateNames);
    public GroupByDocument(BsonElement element);
    public GroupByDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use GroupByDocument<IEnumerable<BsonElement> elements) instead.")]
public GroupByDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public GroupByDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use GroupByDocument<IEnumerable<BsonElement> elements) instead.")]
public GroupByDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public GroupByDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use GroupByDocument<IEnumerable<BsonElement> elements) instead.")]
public GroupByDocument(IDictionary dictionary, IEnumerable keys);
    public GroupByDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use GroupByDocument<IEnumerable<BsonElement> elements) instead.")]
public GroupByDocument(BsonElement[] elements);
    public GroupByDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoCollectionOptions>")]
public interface MongoDB.Driver.IMongoCollectionOptions {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoCommand>")]
public interface MongoDB.Driver.IMongoCommand {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoCreateViewOptions>")]
public interface MongoDB.Driver.IMongoCreateViewOptions {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoFields>")]
public interface MongoDB.Driver.IMongoFields {
}
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoGeoHaystackSearchOptions>")]
public interface MongoDB.Driver.IMongoGeoHaystackSearchOptions {
}
[ObsoleteAttribute("Use GeoNearArgs instead.")]
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoGeoNearOptions>")]
public interface MongoDB.Driver.IMongoGeoNearOptions {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoGroupBy>")]
public interface MongoDB.Driver.IMongoGroupBy {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoIndexKeys>")]
public interface MongoDB.Driver.IMongoIndexKeys {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoIndexOptions>")]
public interface MongoDB.Driver.IMongoIndexOptions {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoQuery>")]
public interface MongoDB.Driver.IMongoQuery {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoScope>")]
public interface MongoDB.Driver.IMongoScope {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoSortBy>")]
public interface MongoDB.Driver.IMongoSortBy {
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1<MongoDB.Driver.IMongoUpdate>")]
public interface MongoDB.Driver.IMongoUpdate {
}
public class MongoDB.Driver.IndexInfo : object {
    private BsonDocument _document;
    public bool DroppedDups { get; }
    public bool IsBackground { get; }
    public bool IsHidden { get; }
    public bool IsSparse { get; }
    public bool IsUnique { get; }
    public IndexKeysDocument Key { get; }
    public string Name { get; }
    public string Namespace { get; }
    public BsonDocument RawDocument { get; }
    public TimeSpan TimeToLive { get; }
    public int Version { get; }
    public IndexInfo(BsonDocument document);
    public bool get_DroppedDups();
    public bool get_IsBackground();
    public bool get_IsHidden();
    public bool get_IsSparse();
    public bool get_IsUnique();
    public IndexKeysDocument get_Key();
    public string get_Name();
    public string get_Namespace();
    public BsonDocument get_RawDocument();
    public TimeSpan get_TimeToLive();
    public int get_Version();
}
[BsonSerializerAttribute("MongoDB.Driver.IndexKeysDocument/Serializer")]
public class MongoDB.Driver.IndexKeysDocument : BsonDocument {
    public IndexKeysDocument(bool allowDuplicateNames);
    public IndexKeysDocument(BsonElement element);
    public IndexKeysDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use IndexKeysDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexKeysDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public IndexKeysDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use IndexKeysDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexKeysDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public IndexKeysDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use IndexKeysDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexKeysDocument(IDictionary dictionary, IEnumerable keys);
    public IndexKeysDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use IndexKeysDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexKeysDocument(BsonElement[] elements);
    public IndexKeysDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.IndexOptionsDocument/Serializer")]
public class MongoDB.Driver.IndexOptionsDocument : BsonDocument {
    public IndexOptionsDocument(bool allowDuplicateNames);
    public IndexOptionsDocument(BsonElement element);
    public IndexOptionsDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use IndexOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexOptionsDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public IndexOptionsDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use IndexOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexOptionsDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public IndexOptionsDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use IndexOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexOptionsDocument(IDictionary dictionary, IEnumerable keys);
    public IndexOptionsDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use IndexOptionsDocument<IEnumerable<BsonElement> elements) instead.")]
public IndexOptionsDocument(BsonElement[] elements);
    public IndexOptionsDocument(string name, BsonValue value);
}
[FlagsAttribute]
public enum MongoDB.Driver.InsertFlags : Enum {
    public int value__;
    public static InsertFlags None;
    public static InsertFlags ContinueOnError;
}
internal static class MongoDB.Driver.Legacy.TargetFramework : object {
    public static string Moniker { get; }
    public static string get_Moniker();
}
public class MongoDB.Driver.Linq.DeserializationProjector`1 : object {
    private IEnumerable`1<BsonValue> _source;
    private BsonSerializationInfo _serializationInfo;
    public DeserializationProjector`1(IEnumerable`1<BsonValue> source, BsonSerializationInfo serializationInfo);
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.DeserializationProjector`1/<GetEnumerator>d__3")]
public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MongoDB.Driver.Linq.ExpressionFormatter : ExpressionVisitor {
    private StringBuilder _sb;
    public static string ToString(Expression node);
    public virtual string ToString();
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual ElementInit VisitElementInit(ElementInit node);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitList(ReadOnlyCollection`1<ElementInit> nodes);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLambda(LambdaExpression node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual MemberBinding VisitMemberBinding(MemberBinding node);
    protected virtual IEnumerable`1<MemberBinding> VisitMemberBindingList(ReadOnlyCollection`1<MemberBinding> nodes);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual NewExpression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private string FriendlyTypeName(Type type);
    private bool IsAnonymousType(Type type);
    private void VisitValue(object value);
    [CompilerGeneratedAttribute]
private string <VisitLambda>b__10_0(ParameterExpression p);
    [CompilerGeneratedAttribute]
private string <VisitMethodCall>b__19_0(Type t);
}
internal class MongoDB.Driver.Linq.ExpressionNormalizer : ExpressionVisitor {
    public static Expression Normalize(Expression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private BinaryExpression EnsureConstantIsOnRight(BinaryExpression node);
    private Expression VisitVBCompilerServicesOperators(MethodCallExpression mex, ExpressionType expressionType, ConstantExpression constant);
    private Expression VisitVBCompilerServicesOperatorsCompareString(MethodCallExpression mex, ExpressionType expressionType, int comparisonValue);
}
public class MongoDB.Driver.Linq.ExpressionParameterReplacer : ExpressionVisitor {
    private ParameterExpression _fromParameter;
    private Expression _toExpression;
    public ExpressionParameterReplacer(ParameterExpression fromParameter, Expression toExpression);
    public static Expression ReplaceParameter(Expression node, ParameterExpression fromParameter, Expression toExpression);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
public class MongoDB.Driver.Linq.ExpressionPrettyPrinter : ExpressionVisitor {
    private StringBuilder _sb;
    private string _indentation;
    public static string PrettyPrint(Expression node);
    public virtual string ToString();
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual ElementInit VisitElementInit(ElementInit node);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitList(ReadOnlyCollection`1<ElementInit> nodes);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLambda(LambdaExpression node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual MemberBinding VisitMemberBinding(MemberBinding node);
    protected virtual IEnumerable`1<MemberBinding> VisitMemberBindingList(ReadOnlyCollection`1<MemberBinding> nodes);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual NewExpression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private string FriendlyClassName(Type type);
    private string PublicClassName(Type type);
    private void VisitIndented(Expression node);
    private void WriteHeader(Expression node);
    private void WriteLine(string line);
    private void WriteLine(string format, Object[] args);
}
internal class MongoDB.Driver.Linq.Expressions.ExpressionNominator : ExpressionVisitor {
    private Func`2<Expression, bool> _predicate;
    private HashSet`1<Expression> _candidates;
    private bool _isBlocked;
    internal ExpressionNominator(Func`2<Expression, bool> predicate);
    internal HashSet`1<Expression> Nominate(Expression expression);
    protected virtual Expression Visit(Expression expression);
}
public abstract class MongoDB.Driver.Linq.ExpressionVisitor : object {
    protected virtual Expression Visit(Expression node);
    protected ReadOnlyCollection`1<Expression> Visit(ReadOnlyCollection`1<Expression> nodes);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual ElementInit VisitElementInit(ElementInit node);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitList(ReadOnlyCollection`1<ElementInit> nodes);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLambda(LambdaExpression node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual MemberBinding VisitMemberBinding(MemberBinding node);
    protected virtual IEnumerable`1<MemberBinding> VisitMemberBindingList(ReadOnlyCollection`1<MemberBinding> nodes);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual NewExpression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
}
public abstract class MongoDB.Driver.Linq.ExpressionVisitor`1 : object {
    protected virtual T Visit(Expression node);
    protected T Visit(ReadOnlyCollection`1<Expression> nodes);
    protected virtual T VisitBinary(BinaryExpression node);
    protected virtual T VisitConditional(ConditionalExpression node);
    protected virtual T VisitConstant(ConstantExpression node);
    protected virtual T VisitElementInit(ElementInit node);
    protected T VisitElementInitList(ReadOnlyCollection`1<ElementInit> nodes);
    protected virtual T VisitInvocation(InvocationExpression node);
    protected virtual T VisitLambda(LambdaExpression node);
    protected virtual T VisitListInit(ListInitExpression node);
    protected virtual T VisitMember(MemberExpression node);
    protected virtual T VisitMemberAssignment(MemberAssignment node);
    protected virtual T VisitMemberBinding(MemberBinding node);
    protected virtual T VisitMemberBindingList(ReadOnlyCollection`1<MemberBinding> nodes);
    protected virtual T VisitMemberInit(MemberInitExpression node);
    protected virtual T VisitMemberListBinding(MemberListBinding node);
    protected virtual T VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual T VisitMethodCall(MethodCallExpression node);
    protected virtual T VisitNew(NewExpression node);
    protected virtual T VisitNewArray(NewArrayExpression node);
    protected virtual T VisitParameter(ParameterExpression node);
    protected virtual T VisitTypeBinary(TypeBinaryExpression node);
    protected virtual T VisitUnary(UnaryExpression node);
}
internal class MongoDB.Driver.Linq.IdentityProjector`1 : object {
    private MongoCursor _cursor;
    public MongoCursor Cursor { get; }
    public IdentityProjector`1(MongoCursor cursor);
    public sealed virtual MongoCursor get_Cursor();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface MongoDB.Driver.Linq.IProjector {
    public MongoCursor Cursor { get; }
    public abstract virtual MongoCursor get_Cursor();
}
internal interface MongoDB.Driver.Linq.IProjector`2 {
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.LinqExtensionMethods : object {
    [ExtensionAttribute]
public static IQueryable`1<T> AsQueryable(MongoCollection collection);
    [ExtensionAttribute]
public static IQueryable`1<T> AsQueryable(MongoCollection`1<T> collection);
    [ExtensionAttribute]
public static BsonDocument Explain(IQueryable`1<TSource> source);
    [ExtensionAttribute]
public static BsonDocument Explain(IQueryable`1<TSource> source, bool verbose);
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.LinqToMongo : object {
    [ExtensionAttribute]
public static bool ContainsAll(IEnumerable`1<TSource> source, IEnumerable`1<TSource> values);
    [ExtensionAttribute]
public static bool ContainsAny(IEnumerable`1<TSource> source, IEnumerable`1<TSource> values);
    [ExtensionAttribute]
public static bool In(TSource value, IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static bool Inject(IMongoQuery query);
    [ExtensionAttribute]
public static IQueryable`1<TSource> WithIndex(IQueryable`1<TSource> source, string indexName);
    [ExtensionAttribute]
public static IQueryable`1<TSource> WithIndex(IQueryable`1<TSource> source, BsonDocument indexHint);
    private static IQueryable`1<TSource> WithIndex(IQueryable`1<TSource> query, BsonValue indexHint);
}
public class MongoDB.Driver.Linq.MongoQueryable`1 : object {
    private MongoQueryProvider _provider;
    private Expression _expression;
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public MongoQueryable`1(MongoQueryProvider provider);
    public MongoQueryable`1(MongoQueryProvider provider, Expression expression);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public IMongoQuery GetMongoQuery();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
}
public class MongoDB.Driver.Linq.MongoQueryProvider : object {
    private MongoCollection _collection;
    public MongoCollection Collection { get; }
    public MongoQueryProvider(MongoCollection collection);
    public MongoCollection get_Collection();
    public IMongoQuery BuildMongoQuery(MongoQueryable`1<T> query);
    public sealed virtual IQueryable`1<T> CreateQuery(Expression expression);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual object Execute(Expression expression);
    private static Type GetElementType(Type seqType);
    private static Type FindIEnumerable(Type seqType);
}
public static class MongoDB.Driver.Linq.MongoQueryTranslator : object {
    public static TranslatedQuery Translate(IQueryable query);
    public static TranslatedQuery Translate(MongoQueryProvider provider, Expression expression);
    private static Type GetDocumentType(Expression expression);
}
public class MongoDB.Driver.Linq.OrderByClause : object {
    private LambdaExpression _key;
    private OrderByDirection _direction;
    public LambdaExpression Key { get; }
    public OrderByDirection Direction { get; }
    public OrderByClause(LambdaExpression key, OrderByDirection direction);
    public LambdaExpression get_Key();
    public OrderByDirection get_Direction();
}
public enum MongoDB.Driver.Linq.OrderByDirection : Enum {
    public int value__;
    public static OrderByDirection Ascending;
    public static OrderByDirection Descending;
}
internal static class MongoDB.Driver.Linq.PartialEvaluator : object {
    public static Expression Evaluate(Expression expression);
    public static Expression Evaluate(Expression expression, IQueryProvider queryProvider);
    private static bool CanBeEvaluatedLocally(Expression expression, IQueryProvider queryProvider);
}
internal class MongoDB.Driver.Linq.PredicateTranslator : object {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    public PredicateTranslator(BsonSerializationInfoHelper serializationHelper);
    public IMongoQuery BuildQuery(Expression expression);
    private IMongoQuery BuildAndAlsoQuery(BinaryExpression binaryExpression);
    private IMongoQuery BuildAndQuery(BinaryExpression binaryExpression);
    private IMongoQuery BuildAnyQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildArrayLengthQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildBooleanQuery(bool value);
    private IMongoQuery BuildBooleanQuery(Expression expression);
    private IMongoQuery BuildComparisonQuery(BinaryExpression binaryExpression);
    private IMongoQuery BuildComparisonQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildConstantQuery(ConstantExpression constantExpression);
    private IMongoQuery BuildContainsAllQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildContainsAnyQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildContainsKeyQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildContainsQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildEqualsQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildInQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildInjectQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildIsMatchQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildIsNullOrEmptyQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildMethodCallQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildModQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildNotQuery(UnaryExpression unaryExpression);
    private IMongoQuery BuildOrElseQuery(BinaryExpression binaryExpression);
    private IMongoQuery BuildOrQuery(BinaryExpression binaryExpression);
    private IMongoQuery BuildStringIndexOfQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildStringIndexQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildStringLengthQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildStringCaseInsensitiveComparisonQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildStringQuery(MethodCallExpression methodCallExpression);
    private IMongoQuery BuildTypeComparisonQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private IMongoQuery BuildTypeIsQuery(TypeBinaryExpression typeBinaryExpression);
    private string GetTrimCharsPattern(Expression trimCharsExpression);
    private int ToInt32(Expression expression);
    private long ToInt64(Expression expression);
}
internal class MongoDB.Driver.Linq.Projector`2 : object {
    private MongoCursor`1<TSource> _cursor;
    private Func`2<TSource, TResult> _projection;
    public MongoCursor Cursor { get; }
    public Projector`2(MongoCursor`1<TSource> cursor, Func`2<TSource, TResult> projection);
    public sealed virtual MongoCursor get_Cursor();
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MongoDB.Driver.Linq.SelectQuery : TranslatedQuery {
    private BsonSerializationInfoHelper _serializationInfoHelper;
    private LambdaExpression _where;
    private Type _ofType;
    private List`1<OrderByClause> _orderBy;
    private BsonValue _indexHint;
    private LambdaExpression _projection;
    private Nullable`1<int> _skip;
    private Nullable`1<int> _take;
    private Func`2<IEnumerable, object> _elementSelector;
    private LambdaExpression _distinct;
    private Expression _lastExpression;
    public Type OfType { get; }
    public ReadOnlyCollection`1<OrderByClause> OrderBy { get; }
    public LambdaExpression Projection { get; }
    public Nullable`1<int> Skip { get; }
    public Nullable`1<int> Take { get; }
    public BsonValue IndexHint { get; }
    public LambdaExpression Where { get; }
    public SelectQuery(MongoCollection collection, Type documentType);
    public Type get_OfType();
    public ReadOnlyCollection`1<OrderByClause> get_OrderBy();
    public LambdaExpression get_Projection();
    public Nullable`1<int> get_Skip();
    public Nullable`1<int> get_Take();
    public BsonValue get_IndexHint();
    public LambdaExpression get_Where();
    public IMongoQuery BuildQuery();
    public virtual object Execute();
    public void Translate(Expression expression);
    private void CombinePredicateWithWhereClause(MethodCallExpression methodCallExpression, LambdaExpression predicate);
    private void EnsurePreviousExpressionIsSkipOrTake();
    private object ExecuteDistinct(IMongoQuery query);
    private void SetElementSelector(MethodCallExpression methodCallExpression, Func`2<IEnumerable, object> elementSelector);
    private Expression StripQuote(Expression expression);
    private int ToInt32(Expression expression);
    private void TranslateAny(MethodCallExpression methodCallExpression);
    private void TranslateCount(MethodCallExpression methodCallExpression);
    private void TranslateDistinct(MethodCallExpression methodCallExpression);
    private void TranslateElementAt(MethodCallExpression methodCallExpression);
    private void TranslateFirstOrSingle(MethodCallExpression methodCallExpression);
    private void TranslateLast(MethodCallExpression methodCallExpression);
    private void TranslateMaxMin(MethodCallExpression methodCallExpression);
    private void TranslateMethodCall(MethodCallExpression methodCallExpression);
    private void TranslateOfType(MethodCallExpression methodCallExpression);
    private void TranslateOrderBy(MethodCallExpression methodCallExpression);
    private void TranslateSelect(MethodCallExpression methodCallExpression);
    private void TranslateSkip(MethodCallExpression methodCallExpression);
    private void TranslateTake(MethodCallExpression methodCallExpression);
    private void TranslateThenBy(MethodCallExpression methodCallExpression);
    private void TranslateWithIndex(MethodCallExpression methodCallExpression);
    private void TranslateWhere(MethodCallExpression methodCallExpression);
}
public abstract class MongoDB.Driver.Linq.TranslatedQuery : object {
    private MongoCollection _collection;
    private Type _documentType;
    public MongoCollection Collection { get; }
    public Type DocumentType { get; }
    protected TranslatedQuery(MongoCollection collection, Type documentType);
    public MongoCollection get_Collection();
    public Type get_DocumentType();
    public virtual object Execute();
}
internal class MongoDB.Driver.Linq.Utils.BsonSerializationInfoFinder : ExpressionVisitor`1<BsonSerializationInfo> {
    private Dictionary`2<Expression, BsonSerializationInfo> _serializationInfoCache;
    private BsonSerializationInfoFinder(Dictionary`2<Expression, BsonSerializationInfo> serializationInfoCache);
    public static BsonSerializationInfo GetSerializationInfo(Expression node, Dictionary`2<Expression, BsonSerializationInfo> serializationInfoCache);
    public static bool TryGetSerializationInfo(Expression node, Dictionary`2<Expression, BsonSerializationInfo> serializationInfoCache, BsonSerializationInfo& serializationInfo);
    protected virtual BsonSerializationInfo Visit(Expression node);
    protected virtual BsonSerializationInfo VisitBinary(BinaryExpression node);
    protected virtual BsonSerializationInfo VisitLambda(LambdaExpression node);
    protected virtual BsonSerializationInfo VisitMember(MemberExpression node);
    protected virtual BsonSerializationInfo VisitMethodCall(MethodCallExpression node);
    protected virtual BsonSerializationInfo VisitParameter(ParameterExpression node);
    protected virtual BsonSerializationInfo VisitUnary(UnaryExpression node);
    private BsonSerializationInfo VisitGetItem(MethodCallExpression node);
    private BsonSerializationInfo VisitElementAt(MethodCallExpression node);
    private static BsonSerializationInfo CombineSerializationInfo(BsonSerializationInfo baseInfo, BsonSerializationInfo newInfo);
    private static BsonSerializationInfo CreateSerializationInfo(Expression node, IBsonSerializer serializer);
}
internal class MongoDB.Driver.Linq.Utils.BsonSerializationInfoHelper : object {
    private Dictionary`2<Expression, BsonSerializationInfo> _serializationInfoCache;
    public BsonSerializationInfo GetSerializationInfo(Expression node);
    public bool TryGetSerializationInfo(Expression node, BsonSerializationInfo& serializationInfo);
    public BsonSerializationInfo GetItemSerializationInfo(string methodName, BsonSerializationInfo serializationInfo);
    public bool TryGetItemSerializationInfo(BsonSerializationInfo serializationInfo, BsonSerializationInfo& itemSerializationInfo);
    public void RegisterExpressionSerializer(Expression node, IBsonSerializer serializer);
    public void RegisterExpressionSerializationInfo(Expression node, BsonSerializationInfo serializationInfo);
    public BsonValue SerializeValue(BsonSerializationInfo serializationInfo, object value);
    public BsonArray SerializeValues(BsonSerializationInfo serializationInfo, IEnumerable values);
}
[ObsoleteAttribute("Use Aggregation pipeline instead.")]
public class MongoDB.Driver.MapReduceArgs : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private BsonJavaScript _finalizeFunction;
    private Nullable`1<bool> _jsMode;
    private Nullable`1<long> _limit;
    private BsonJavaScript _mapFunction;
    private Nullable`1<TimeSpan> _maxTime;
    private string _outputCollectionName;
    private string _outputDatabaseName;
    private Nullable`1<bool> _outputIsNonAtomic;
    private Nullable`1<bool> _outputIsSharded;
    private MapReduceOutputMode _outputMode;
    private IMongoQuery _query;
    private BsonJavaScript _reduceFunction;
    private IMongoScope _scope;
    private IMongoSortBy _sortBy;
    private Nullable`1<bool> _verbose;
    public Collation Collation { get; public set; }
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public BsonJavaScript FinalizeFunction { get; public set; }
    [ObsoleteAttribute("JsMode is ignored by server versions 4.4.0 and newer.")]
public Nullable`1<bool> JsMode { get; public set; }
    public Nullable`1<long> Limit { get; public set; }
    public BsonJavaScript MapFunction { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public string OutputCollectionName { get; public set; }
    public string OutputDatabaseName { get; public set; }
    [ObsoleteAttribute("OutputIsNonAtomic is rejected by server versions 4.4.0 and newer.")]
public Nullable`1<bool> OutputIsNonAtomic { get; public set; }
    [ObsoleteAttribute("OutputIsSharded is rejected by server versions 4.4.0 and newer.")]
public Nullable`1<bool> OutputIsSharded { get; public set; }
    public MapReduceOutputMode OutputMode { get; public set; }
    public IMongoQuery Query { get; public set; }
    public BsonJavaScript ReduceFunction { get; public set; }
    public IMongoScope Scope { get; public set; }
    public IMongoSortBy SortBy { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public BsonJavaScript get_FinalizeFunction();
    public void set_FinalizeFunction(BsonJavaScript value);
    public Nullable`1<bool> get_JsMode();
    public void set_JsMode(Nullable`1<bool> value);
    public Nullable`1<long> get_Limit();
    public void set_Limit(Nullable`1<long> value);
    public BsonJavaScript get_MapFunction();
    public void set_MapFunction(BsonJavaScript value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public string get_OutputCollectionName();
    public void set_OutputCollectionName(string value);
    public string get_OutputDatabaseName();
    public void set_OutputDatabaseName(string value);
    public Nullable`1<bool> get_OutputIsNonAtomic();
    public void set_OutputIsNonAtomic(Nullable`1<bool> value);
    public Nullable`1<bool> get_OutputIsSharded();
    public void set_OutputIsSharded(Nullable`1<bool> value);
    public MapReduceOutputMode get_OutputMode();
    public void set_OutputMode(MapReduceOutputMode value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public BsonJavaScript get_ReduceFunction();
    public void set_ReduceFunction(BsonJavaScript value);
    public IMongoScope get_Scope();
    public void set_Scope(IMongoScope value);
    public IMongoSortBy get_SortBy();
    public void set_SortBy(IMongoSortBy value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
[ObsoleteAttribute("Use Aggregation pipeline instead.")]
public enum MongoDB.Driver.MapReduceOutputMode : Enum {
    public int value__;
    public static MapReduceOutputMode Inline;
    public static MapReduceOutputMode Replace;
    public static MapReduceOutputMode Merge;
    public static MapReduceOutputMode Reduce;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.MapReduceOutputModeExtensionMethods : object {
    [ExtensionAttribute]
public static MapReduceOutputMode ToCore(MapReduceOutputMode outputMode);
}
[ObsoleteAttribute("Use Aggregation pipeline instead.")]
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.MapReduceResult>")]
public class MongoDB.Driver.MapReduceResult : CommandResult {
    private MongoDatabase _inputDatabase;
    public string CollectionName { get; }
    public string DatabaseName { get; }
    [ObsoleteAttribute("Duration is not available on server versions 4.4.0 and newer.")]
public TimeSpan Duration { get; }
    [ObsoleteAttribute("EmitCount is not available on server versions 4.4.0 and newer.")]
public long EmitCount { get; }
    [ObsoleteAttribute("OutputCount is not available on server versions 4.4.0 and newer.")]
public long OutputCount { get; }
    public IEnumerable`1<BsonDocument> InlineResults { get; }
    [ObsoleteAttribute("InputCount is not available on server versions 4.4.0 and newer.")]
public long InputCount { get; }
    public MapReduceResult(BsonDocument response);
    public string get_CollectionName();
    public string get_DatabaseName();
    public TimeSpan get_Duration();
    public long get_EmitCount();
    public long get_OutputCount();
    public IEnumerable`1<BsonDocument> get_InlineResults();
    public long get_InputCount();
    public IEnumerable`1<TDocument> GetInlineResultsAs();
    public IEnumerable`1<object> GetInlineResultsAs(Type documentType);
    public IEnumerable`1<BsonDocument> GetResults();
    public IEnumerable`1<TDocument> GetResultsAs();
    public IEnumerable`1<object> GetResultsAs(Type documentType);
    internal void SetInputDatabase(MongoDatabase inputDatabase);
}
[ExtensionAttribute]
public static class MongoDB.Driver.MongoClientExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use the new API instead.")]
public static MongoServer GetServer(MongoClient client);
}
public abstract class MongoDB.Driver.MongoCollection : object {
    private MongoServer _server;
    private MongoDatabase _database;
    private MongoCollectionSettings _settings;
    private CollectionNamespace _collectionNamespace;
    private IOperationExecutor _operationExecutor;
    public MongoDatabase Database { get; }
    public string FullName { get; }
    public string Name { get; }
    public MongoCollectionSettings Settings { get; }
    internal IOperationExecutor OperationExecutor { get; }
    protected MongoCollection(MongoDatabase database, string name, MongoCollectionSettings settings);
    internal MongoCollection(MongoDatabase database, string name, MongoCollectionSettings settings, IOperationExecutor operationExecutor);
    public virtual MongoDatabase get_Database();
    public virtual string get_FullName();
    public virtual string get_Name();
    public virtual MongoCollectionSettings get_Settings();
    internal IOperationExecutor get_OperationExecutor();
    public virtual IEnumerable`1<BsonDocument> Aggregate(AggregateArgs args);
    private IEnumerable`1<BsonDocument> Aggregate(IClientSessionHandle session, AggregateArgs args);
    public virtual CommandResult AggregateExplain(AggregateArgs args);
    private CommandResult AggregateExplain(IClientSessionHandle session, AggregateArgs args);
    public virtual long Count();
    public virtual long Count(CountArgs args);
    private long Count(IClientSessionHandle session, CountArgs args);
    public virtual long Count(IMongoQuery query);
    public virtual WriteConcernResult CreateIndex(IMongoIndexKeys keys, IMongoIndexOptions options);
    private WriteConcernResult CreateIndex(IClientSessionHandle session, IMongoIndexKeys keys, IMongoIndexOptions options);
    public virtual WriteConcernResult CreateIndex(IMongoIndexKeys keys);
    public virtual WriteConcernResult CreateIndex(String[] keyNames);
    public IEnumerable`1<TValue> Distinct(DistinctArgs args);
    private IEnumerable`1<TValue> Distinct(IClientSessionHandle session, DistinctArgs args);
    public virtual IEnumerable`1<BsonValue> Distinct(string key);
    public virtual IEnumerable`1<BsonValue> Distinct(string key, IMongoQuery query);
    public virtual IEnumerable`1<TValue> Distinct(string key);
    public virtual IEnumerable`1<TValue> Distinct(string key, IMongoQuery query);
    public virtual CommandResult Drop();
    public virtual CommandResult DropAllIndexes();
    public virtual CommandResult DropIndex(IMongoIndexKeys keys);
    public virtual CommandResult DropIndex(String[] keyNames);
    public virtual CommandResult DropIndexByName(string indexName);
    private CommandResult DropIndexByName(IClientSessionHandle session, string indexName);
    [ObsoleteAttribute("Use CreateIndex instead.")]
public virtual void EnsureIndex(IMongoIndexKeys keys, IMongoIndexOptions options);
    [ObsoleteAttribute("Use CreateIndex instead.")]
public virtual void EnsureIndex(IMongoIndexKeys keys);
    [ObsoleteAttribute("Use CreateIndex instead.")]
public virtual void EnsureIndex(String[] keyNames);
    public virtual bool Exists();
    public virtual MongoCursor`1<TDocument> FindAllAs();
    public virtual MongoCursor FindAllAs(Type documentType);
    [ObsoleteAttribute("Use the overload of FindAndModify that has a FindAndModifyArgs parameter instead.")]
public virtual FindAndModifyResult FindAndModify(IMongoQuery query, IMongoSortBy sortBy, IMongoUpdate update);
    [ObsoleteAttribute("Use the overload of FindAndModify that has a FindAndModifyArgs parameter instead.")]
public virtual FindAndModifyResult FindAndModify(IMongoQuery query, IMongoSortBy sortBy, IMongoUpdate update, bool returnNew);
    [ObsoleteAttribute("Use the overload of FindAndModify that has a FindAndModifyArgs parameter instead.")]
public virtual FindAndModifyResult FindAndModify(IMongoQuery query, IMongoSortBy sortBy, IMongoUpdate update, bool returnNew, bool upsert);
    [ObsoleteAttribute("Use the overload of FindAndModify that has a FindAndModifyArgs parameter instead.")]
public virtual FindAndModifyResult FindAndModify(IMongoQuery query, IMongoSortBy sortBy, IMongoUpdate update, IMongoFields fields, bool returnNew, bool upsert);
    public virtual FindAndModifyResult FindAndModify(FindAndModifyArgs args);
    private FindAndModifyResult FindAndModify(IClientSessionHandle session, FindAndModifyArgs args);
    [ObsoleteAttribute("Use the overload of FindAndRemove that has a FindAndRemoveArgs parameter instead.")]
public virtual FindAndModifyResult FindAndRemove(IMongoQuery query, IMongoSortBy sortBy);
    public virtual FindAndModifyResult FindAndRemove(FindAndRemoveArgs args);
    private FindAndModifyResult FindAndRemove(IClientSessionHandle session, FindAndRemoveArgs args);
    public virtual MongoCursor`1<TDocument> FindAs(IMongoQuery query);
    public virtual MongoCursor FindAs(Type documentType, IMongoQuery query);
    public virtual TDocument FindOneAs();
    public virtual TDocument FindOneAs(FindOneArgs args);
    private TDocument FindOneAs(IClientSessionHandle session, FindOneArgs args);
    public virtual TDocument FindOneAs(IMongoQuery query);
    public virtual object FindOneAs(Type documentType);
    public virtual object FindOneAs(Type documentType, FindOneArgs args);
    public virtual object FindOneAs(Type documentType, IMongoQuery query);
    public virtual TDocument FindOneByIdAs(BsonValue id);
    public virtual object FindOneByIdAs(Type documentType, BsonValue id);
    [ObsoleteAttribute("Use the overload of GeoHaystackSearchAs that has a GeoHaystackSearchArgs parameter instead.")]
public virtual GeoHaystackSearchResult`1<TDocument> GeoHaystackSearchAs(double x, double y, IMongoGeoHaystackSearchOptions options);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public virtual GeoHaystackSearchResult`1<TDocument> GeoHaystackSearchAs(GeoHaystackSearchArgs args);
    private GeoHaystackSearchResult`1<TDocument> GeoHaystackSearchAs(IClientSessionHandle session, GeoHaystackSearchArgs args);
    [ObsoleteAttribute("Use the overload of GeoHaystackSearchAs that has a GeoHaystackSearchArgs parameter instead.")]
public virtual GeoHaystackSearchResult GeoHaystackSearchAs(Type documentType, double x, double y, IMongoGeoHaystackSearchOptions options);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public virtual GeoHaystackSearchResult GeoHaystackSearchAs(Type documentType, GeoHaystackSearchArgs args);
    public virtual GeoNearResult`1<TDocument> GeoNearAs(GeoNearArgs args);
    private GeoNearResult`1<TDocument> GeoNearAs(IClientSessionHandle session, GeoNearArgs args);
    [ObsoleteAttribute("Use the overload of GeoNearAs that has a GeoNearArgs parameter instead.")]
public virtual GeoNearResult`1<TDocument> GeoNearAs(IMongoQuery query, double x, double y, int limit);
    [ObsoleteAttribute("Use the overload of GeoNearAs that has a GeoNearArgs parameter instead.")]
public virtual GeoNearResult`1<TDocument> GeoNearAs(IMongoQuery query, double x, double y, int limit, IMongoGeoNearOptions options);
    public virtual GeoNearResult GeoNearAs(Type documentType, GeoNearArgs args);
    [ObsoleteAttribute("Use the overload of GeoNearAs that has a GeoNearArgs parameter instead.")]
public virtual GeoNearResult GeoNearAs(Type documentType, IMongoQuery query, double x, double y, int limit);
    [ObsoleteAttribute("Use the overload of GeoNearAs that has a GeoNearArgs parameter instead.")]
public virtual GeoNearResult GeoNearAs(Type documentType, IMongoQuery query, double x, double y, int limit, IMongoGeoNearOptions options);
    public virtual GetIndexesResult GetIndexes();
    private GetIndexesResult GetIndexes(IClientSessionHandle session);
    public virtual CollectionStatsResult GetStats();
    public virtual CollectionStatsResult GetStats(GetStatsArgs args);
    [ObsoleteAttribute("The group command was deprecated in server version 3.4.")]
public virtual IEnumerable`1<BsonDocument> Group(GroupArgs args);
    [ObsoleteAttribute("The group command was deprecated in server version 3.4.")]
private IEnumerable`1<BsonDocument> Group(IClientSessionHandle session, GroupArgs args);
    [ObsoleteAttribute("The group command was deprecated in server version 3.4.")]
public virtual IEnumerable`1<BsonDocument> Group(IMongoQuery query, BsonJavaScript keyFunction, BsonDocument initial, BsonJavaScript reduce, BsonJavaScript finalize);
    [ObsoleteAttribute("The group command was deprecated in server version 3.4.")]
public virtual IEnumerable`1<BsonDocument> Group(IMongoQuery query, IMongoGroupBy keys, BsonDocument initial, BsonJavaScript reduce, BsonJavaScript finalize);
    [ObsoleteAttribute("The group command was deprecated in server version 3.4.")]
public virtual IEnumerable`1<BsonDocument> Group(IMongoQuery query, string key, BsonDocument initial, BsonJavaScript reduce, BsonJavaScript finalize);
    public virtual bool IndexExists(IMongoIndexKeys keys);
    public virtual bool IndexExists(String[] keyNames);
    public virtual bool IndexExistsByName(string indexName);
    private bool IndexExistsByName(IClientSessionHandle session, string indexName);
    public virtual BulkWriteOperation`1<TDocument> InitializeOrderedBulkOperationAs();
    public virtual BulkWriteOperation`1<TDocument> InitializeUnorderedBulkOperationAs();
    public virtual WriteConcernResult Insert(TNominalType document);
    public virtual WriteConcernResult Insert(TNominalType document, MongoInsertOptions options);
    public virtual WriteConcernResult Insert(TNominalType document, WriteConcern writeConcern);
    public virtual WriteConcernResult Insert(Type nominalType, object document);
    public virtual WriteConcernResult Insert(Type nominalType, object document, MongoInsertOptions options);
    public virtual WriteConcernResult Insert(Type nominalType, object document, WriteConcern writeConcern);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(IEnumerable`1<TNominalType> documents);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(IEnumerable`1<TNominalType> documents, MongoInsertOptions options);
    private IEnumerable`1<WriteConcernResult> InsertBatch(IClientSessionHandle session, IEnumerable`1<TNominalType> documents, MongoInsertOptions options);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(IEnumerable`1<TNominalType> documents, WriteConcern writeConcern);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(Type nominalType, IEnumerable documents);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(Type nominalType, IEnumerable documents, WriteConcern writeConcern);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(Type nominalType, IEnumerable documents, MongoInsertOptions options);
    private IEnumerable`1<WriteConcernResult> InsertBatchInvoker(IEnumerable documents, MongoInsertOptions options);
    public virtual bool IsCapped();
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual MapReduceResult MapReduce(MapReduceArgs args);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
private MapReduceResult MapReduce(IClientSessionHandle session, MapReduceArgs args);
    [ObsoleteAttribute("ParallelScanAs was deprecated in server version 4.1.")]
public ReadOnlyCollection`1<IEnumerator`1<TDocument>> ParallelScanAs(ParallelScanArgs`1<TDocument> args);
    [ObsoleteAttribute("ParallelScanAs was deprecated in server version 4.1.")]
private ReadOnlyCollection`1<IEnumerator`1<TDocument>> ParallelScanAs(IClientSessionHandle session, ParallelScanArgs`1<TDocument> args);
    [ObsoleteAttribute("ParallelScanAs was deprecated in server version 4.1.")]
public ReadOnlyCollection`1<IEnumerator> ParallelScanAs(Type documentType, ParallelScanArgs args);
    [ObsoleteAttribute("This method will be removed in a later version of the driver.")]
public virtual CommandResult ReIndex();
    private CommandResult ReIndex(IClientSessionHandle session);
    public virtual WriteConcernResult Remove(IMongoQuery query);
    public virtual WriteConcernResult Remove(IMongoQuery query, WriteConcern writeConcern);
    public virtual WriteConcernResult Remove(IMongoQuery query, RemoveFlags flags);
    public virtual WriteConcernResult Remove(IMongoQuery query, RemoveFlags flags, WriteConcern writeConcern);
    public virtual WriteConcernResult Remove(RemoveArgs args);
    private WriteConcernResult Remove(IClientSessionHandle session, RemoveArgs args);
    public virtual WriteConcernResult RemoveAll();
    public virtual WriteConcernResult RemoveAll(WriteConcern writeConcern);
    public virtual WriteConcernResult Save(TNominalType document);
    public virtual WriteConcernResult Save(TNominalType document, MongoInsertOptions options);
    public virtual WriteConcernResult Save(TNominalType document, WriteConcern writeConcern);
    public virtual WriteConcernResult Save(Type nominalType, object document);
    public virtual WriteConcernResult Save(Type nominalType, object document, MongoInsertOptions options);
    public virtual WriteConcernResult Save(Type nominalType, object document, WriteConcern writeConcern);
    public virtual string ToString();
    public virtual WriteConcernResult Update(IMongoQuery query, IMongoUpdate update);
    public virtual WriteConcernResult Update(IMongoQuery query, IMongoUpdate update, MongoUpdateOptions options);
    private WriteConcernResult Update(IClientSessionHandle session, IMongoQuery query, IMongoUpdate update, MongoUpdateOptions options);
    public virtual WriteConcernResult Update(IMongoQuery query, IMongoUpdate update, WriteConcern writeConcern);
    public virtual WriteConcernResult Update(IMongoQuery query, IMongoUpdate update, UpdateFlags flags);
    public virtual WriteConcernResult Update(IMongoQuery query, IMongoUpdate update, UpdateFlags flags, WriteConcern writeConcern);
    public virtual ValidateCollectionResult Validate();
    public virtual ValidateCollectionResult Validate(ValidateCollectionArgs args);
    internal MessageEncoderSettings GetMessageEncoderSettings();
    internal void AssignId(object document, IBsonSerializer serializer);
    internal TResult ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<TResult> operation, ReadPreference readPreference);
    internal TResult ExecuteWriteOperation(IClientSessionHandle session, IWriteOperation`1<TResult> operation);
    private MongoCursor FindAs(Type documentType, IMongoQuery query, IBsonSerializer serializer);
    private MongoCursor`1<TDocument> FindAs(IMongoQuery query, IBsonSerializer serializer);
    internal TResult UsingImplicitSession(Func`2<IClientSessionHandle, TResult> func);
    [CompilerGeneratedAttribute]
private GetIndexesResult <GetIndexes>b__79_0(IClientSessionHandle session);
    [CompilerGeneratedAttribute]
private TNominalType <InsertBatch>b__102_0(TNominalType d);
    [CompilerGeneratedAttribute]
private CommandResult <ReIndex>b__114_0(IClientSessionHandle session);
}
public class MongoDB.Driver.MongoCollection`1 : MongoCollection {
    [ObsoleteAttribute("Use database.GetCollection() instead.")]
public MongoCollection`1(MongoDatabase database, string name, MongoCollectionSettings settings);
    internal MongoCollection`1(MongoDatabase database, string name, MongoCollectionSettings settings, IOperationExecutor operationExecutor);
    public virtual MongoCursor`1<TDefaultDocument> Find(IMongoQuery query);
    public virtual MongoCursor`1<TDefaultDocument> FindAll();
    public virtual TDefaultDocument FindOne();
    public virtual TDefaultDocument FindOne(IMongoQuery query);
    public virtual TDefaultDocument FindOneById(BsonValue id);
    [ObsoleteAttribute("Use the overload of GeoHaystackSearch that has a GeoHaystackSearchArgs parameter instead.")]
public virtual GeoHaystackSearchResult`1<TDefaultDocument> GeoHaystackSearch(double x, double y, IMongoGeoHaystackSearchOptions options);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public virtual GeoHaystackSearchResult`1<TDefaultDocument> GeoHaystackSearch(GeoHaystackSearchArgs args);
    public virtual GeoNearResult`1<TDefaultDocument> GeoNear(GeoNearArgs args);
    [ObsoleteAttribute("Use the overload of GeoNear that takes a GeoNearArgs parameter instead.")]
public virtual GeoNearResult`1<TDefaultDocument> GeoNear(IMongoQuery query, double x, double y, int limit);
    [ObsoleteAttribute("Use the overload of GeoNear that takes a GeoNearArgs parameter instead.")]
public virtual GeoNearResult`1<TDefaultDocument> GeoNear(IMongoQuery query, double x, double y, int limit, IMongoGeoNearOptions options);
    public virtual BulkWriteOperation`1<TDefaultDocument> InitializeOrderedBulkOperation();
    public virtual BulkWriteOperation`1<TDefaultDocument> InitializeUnorderedBulkOperation();
    public virtual WriteConcernResult Insert(TDefaultDocument document);
    public virtual WriteConcernResult Insert(TDefaultDocument document, MongoInsertOptions options);
    public virtual WriteConcernResult Insert(TDefaultDocument document, WriteConcern writeConcern);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(IEnumerable`1<TDefaultDocument> documents);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(IEnumerable`1<TDefaultDocument> documents, MongoInsertOptions options);
    public virtual IEnumerable`1<WriteConcernResult> InsertBatch(IEnumerable`1<TDefaultDocument> documents, WriteConcern writeConcern);
    [ObsoleteAttribute("ParallelScan was deprecated in server version 4.1.")]
public virtual ReadOnlyCollection`1<IEnumerator`1<TDefaultDocument>> ParallelScan(ParallelScanArgs`1<TDefaultDocument> args);
    public virtual WriteConcernResult Save(TDefaultDocument document);
    public virtual WriteConcernResult Save(TDefaultDocument document, MongoInsertOptions options);
    public virtual WriteConcernResult Save(TDefaultDocument document, WriteConcern writeConcern);
    public virtual MongoCollection`1<TDefaultDocument> WithReadConcern(ReadConcern readConcern);
    public virtual MongoCollection`1<TDefaultDocument> WithReadPreference(ReadPreference readPreference);
    public virtual MongoCollection`1<TDefaultDocument> WithWriteConcern(WriteConcern writeConcern);
}
public abstract class MongoDB.Driver.MongoCursor : object {
    private Collation _collation;
    private MongoCollection _collection;
    private MongoDatabase _database;
    private IMongoQuery _query;
    private MongoServer _server;
    private IMongoFields _fields;
    private BsonDocument _options;
    private QueryFlags _flags;
    private Nullable`1<TimeSpan> _maxAwaitTime;
    private ReadConcern _readConcern;
    private ReadPreference _readPreference;
    private IBsonSerializer _serializer;
    private int _skip;
    private int _limit;
    private int _batchSize;
    private bool _isFrozen;
    public MongoServer Server { get; }
    public MongoDatabase Database { get; }
    public Collation Collation { get; }
    public MongoCollection Collection { get; }
    public IMongoQuery Query { get; }
    public IMongoFields Fields { get; public set; }
    public BsonDocument Options { get; public set; }
    public QueryFlags Flags { get; public set; }
    public Nullable`1<TimeSpan> MaxAwaitTime { get; public set; }
    public ReadConcern ReadConcern { get; }
    public ReadPreference ReadPreference { get; public set; }
    public int Skip { get; public set; }
    public int Limit { get; public set; }
    public int BatchSize { get; public set; }
    public IBsonSerializer Serializer { get; }
    public bool IsFrozen { get; protected set; }
    protected MongoCursor(MongoCollection collection, IMongoQuery query, ReadPreference readPreference, IBsonSerializer serializer);
    protected MongoCursor(MongoCollection collection, IMongoQuery query, ReadConcern readConcern, ReadPreference readPreference, IBsonSerializer serializer);
    public virtual MongoServer get_Server();
    public virtual MongoDatabase get_Database();
    public virtual Collation get_Collation();
    public virtual MongoCollection get_Collection();
    public virtual IMongoQuery get_Query();
    public virtual IMongoFields get_Fields();
    public virtual void set_Fields(IMongoFields value);
    public virtual BsonDocument get_Options();
    public virtual void set_Options(BsonDocument value);
    public virtual QueryFlags get_Flags();
    public virtual void set_Flags(QueryFlags value);
    public virtual Nullable`1<TimeSpan> get_MaxAwaitTime();
    public virtual void set_MaxAwaitTime(Nullable`1<TimeSpan> value);
    public virtual ReadConcern get_ReadConcern();
    public virtual ReadPreference get_ReadPreference();
    public virtual void set_ReadPreference(ReadPreference value);
    public virtual int get_Skip();
    public virtual void set_Skip(int value);
    public virtual int get_Limit();
    public virtual void set_Limit(int value);
    public virtual int get_BatchSize();
    public virtual void set_BatchSize(int value);
    public virtual IBsonSerializer get_Serializer();
    public virtual bool get_IsFrozen();
    protected virtual void set_IsFrozen(bool value);
    [ObsoleteAttribute("Use a method that returns a cursor instead.")]
public static MongoCursor Create(Type documentType, MongoCollection collection, IMongoQuery query, ReadPreference readPreference, IBsonSerializer serializer);
    [ObsoleteAttribute("Use a method that returns a cursor instead.")]
public static MongoCursor Create(Type documentType, MongoCollection collection, IMongoQuery query, ReadConcern readConcern, ReadPreference readPreference, IBsonSerializer serializer);
    public virtual MongoCursor`1<TDocument> Clone();
    public virtual MongoCursor`1<TDocument> Clone(IBsonSerializer serializer);
    public virtual MongoCursor Clone(Type documentType);
    public virtual MongoCursor Clone(Type documentType, IBsonSerializer serializer);
    public virtual long Count();
    public virtual BsonDocument Explain();
    public virtual BsonDocument Explain(bool verbose);
    protected abstract virtual ExplainOperation CreateExplainOperation(ExplainVerbosity verbosity);
    public virtual MongoCursor SetCollation(Collation collation);
    public virtual MongoCursor SetBatchSize(int batchSize);
    public virtual MongoCursor SetFields(IMongoFields fields);
    public virtual MongoCursor SetFields(String[] fields);
    public virtual MongoCursor SetFlags(QueryFlags flags);
    public virtual MongoCursor SetHint(BsonDocument hint);
    public virtual MongoCursor SetHint(string indexName);
    public virtual MongoCursor SetLimit(int limit);
    public virtual MongoCursor SetMax(BsonDocument max);
    public virtual MongoCursor SetMaxAwaitTime(Nullable`1<TimeSpan> value);
    [ObsoleteAttribute("MaxScan was deprecated in server version 4.0.")]
public virtual MongoCursor SetMaxScan(int maxScan);
    public virtual MongoCursor SetMaxTime(TimeSpan maxTime);
    public virtual MongoCursor SetMin(BsonDocument min);
    public virtual MongoCursor SetOption(string name, BsonValue value);
    public virtual MongoCursor SetOptions(BsonDocument options);
    public virtual MongoCursor SetReadPreference(ReadPreference readPreference);
    public virtual MongoCursor SetSerializer(IBsonSerializer serializer);
    public virtual MongoCursor SetShowDiskLoc();
    public virtual MongoCursor SetSkip(int skip);
    [ObsoleteAttribute("Snapshot was deprecated in server version 3.7.4.")]
public virtual MongoCursor SetSnapshot();
    public virtual MongoCursor SetSortOrder(IMongoSortBy sortBy);
    public virtual MongoCursor SetSortOrder(String[] keys);
    public virtual long Size();
    protected abstract virtual IEnumerator IEnumerableGetEnumerator();
    private void ThrowFrozen();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MongoDB.Driver.MongoCursor`1 : MongoCursor {
    public IBsonSerializer`1<TDocument> Serializer { get; }
    [ObsoleteAttribute("Use a method that returns a cursor instead.")]
public MongoCursor`1(MongoCollection collection, IMongoQuery query, ReadPreference readPreference, IBsonSerializer serializer);
    [ObsoleteAttribute("Use a method that returns a cursor instead.")]
public MongoCursor`1(MongoCollection collection, IMongoQuery query, ReadConcern readConcern, ReadPreference readPreference, IBsonSerializer serializer);
    public virtual IBsonSerializer`1<TDocument> get_Serializer();
    public virtual IEnumerator`1<TDocument> GetEnumerator();
    private IEnumerator`1<TDocument> GetEnumerator(IClientSessionHandle session);
    private FindOperation`1<TDocument> CreateFindOperation();
    protected virtual ExplainOperation CreateExplainOperation(ExplainVerbosity verbosity);
    public virtual MongoCursor`1<TDocument> SetCollation(Collation collation);
    public virtual MongoCursor`1<TDocument> SetBatchSize(int batchSize);
    public virtual MongoCursor`1<TDocument> SetFields(IMongoFields fields);
    public virtual MongoCursor`1<TDocument> SetFields(String[] fields);
    public virtual MongoCursor`1<TDocument> SetFlags(QueryFlags flags);
    public virtual MongoCursor`1<TDocument> SetHint(BsonDocument hint);
    public virtual MongoCursor`1<TDocument> SetHint(string indexName);
    public virtual MongoCursor`1<TDocument> SetLimit(int limit);
    public virtual MongoCursor`1<TDocument> SetMax(BsonDocument max);
    public virtual MongoCursor SetMaxAwaitTime(Nullable`1<TimeSpan> value);
    [ObsoleteAttribute("MaxScan was deprecated in server version 4.0.")]
public virtual MongoCursor`1<TDocument> SetMaxScan(int maxScan);
    public virtual MongoCursor`1<TDocument> SetMaxTime(TimeSpan maxTime);
    public virtual MongoCursor`1<TDocument> SetMin(BsonDocument min);
    public virtual MongoCursor`1<TDocument> SetOption(string name, BsonValue value);
    public virtual MongoCursor`1<TDocument> SetOptions(BsonDocument options);
    public virtual MongoCursor`1<TDocument> SetReadPreference(ReadPreference readPreference);
    public virtual MongoCursor`1<TDocument> SetSerializer(IBsonSerializer`1<TDocument> serializer);
    public virtual MongoCursor`1<TDocument> SetShowDiskLoc();
    public virtual MongoCursor`1<TDocument> SetSkip(int skip);
    [ObsoleteAttribute("Snapshot was deprecated in server version 3.7.4.")]
public virtual MongoCursor`1<TDocument> SetSnapshot();
    public virtual MongoCursor`1<TDocument> SetSortOrder(IMongoSortBy sortBy);
    public virtual MongoCursor`1<TDocument> SetSortOrder(String[] keys);
    protected virtual IEnumerator IEnumerableGetEnumerator();
    [CompilerGeneratedAttribute]
private IEnumerator`1<TDocument> <GetEnumerator>b__4_0(IClientSessionHandle session);
}
[DefaultMemberAttribute("Item")]
public class MongoDB.Driver.MongoDatabase : object {
    private IOperationExecutor _operationExecutor;
    private MongoServer _server;
    private MongoDatabaseSettings _settings;
    private DatabaseNamespace _namespace;
    [ObsoleteAttribute("CommandCollection will be removed and there will be no replacement.")]
public MongoCollection`1<BsonDocument> CommandCollection { get; }
    public MongoGridFS GridFS { get; }
    public string Name { get; }
    public MongoServer Server { get; }
    public MongoDatabaseSettings Settings { get; }
    [ObsoleteAttribute("Use GetCollection instead.")]
public MongoCollection`1<BsonDocument> Item { get; }
    [ObsoleteAttribute("Use GetCollection instead.")]
public MongoCollection`1<BsonDocument> Item { get; }
    [ObsoleteAttribute("User server.GetDatabase() instead.")]
public MongoDatabase(MongoServer server, string name, MongoDatabaseSettings settings);
    internal MongoDatabase(MongoServer server, string name, MongoDatabaseSettings settings, IOperationExecutor operationExecutor);
    public virtual MongoCollection`1<BsonDocument> get_CommandCollection();
    public virtual MongoGridFS get_GridFS();
    public virtual string get_Name();
    public virtual MongoServer get_Server();
    public virtual MongoDatabaseSettings get_Settings();
    public virtual MongoCollection`1<BsonDocument> get_Item(string collectionName);
    public virtual MongoCollection`1<BsonDocument> get_Item(string collectionName, WriteConcern writeConcern);
    [ObsoleteAttribute("Use the new user management command 'createUser' or 'updateUser'.")]
public virtual void AddUser(MongoUser user);
    private void AddUser(IClientSessionHandle session, MongoUser user);
    public virtual bool CollectionExists(string collectionName);
    private bool CollectionExists(IClientSessionHandle session, string collectionName);
    public virtual CommandResult CreateCollection(string collectionName);
    public virtual CommandResult CreateCollection(string collectionName, IMongoCollectionOptions options);
    private CommandResult CreateCollection(IClientSessionHandle session, string collectionName, IMongoCollectionOptions options);
    public virtual CommandResult CreateView(string viewName, string viewOn, IEnumerable`1<BsonDocument> pipeline, IMongoCreateViewOptions options);
    private CommandResult CreateView(IClientSessionHandle session, string viewName, string viewOn, IEnumerable`1<BsonDocument> pipeline, IMongoCreateViewOptions options);
    public virtual void Drop();
    public virtual CommandResult DropCollection(string collectionName);
    private CommandResult DropCollection(IClientSessionHandle session, string collectionName);
    [ObsoleteAttribute("Use the overload of Eval that has an EvalArgs parameter instead.")]
public virtual BsonValue Eval(EvalFlags flags, BsonJavaScript code, Object[] args);
    [ObsoleteAttribute("Use the overload of Eval that has an EvalArgs parameter instead.")]
public virtual BsonValue Eval(BsonJavaScript code, Object[] args);
    public virtual BsonValue Eval(EvalArgs args);
    private BsonValue Eval(IClientSessionHandle session, EvalArgs args);
    public virtual BsonDocument FetchDBRef(MongoDBRef dbRef);
    public virtual TDocument FetchDBRefAs(MongoDBRef dbRef);
    public virtual object FetchDBRefAs(Type documentType, MongoDBRef dbRef);
    [ObsoleteAttribute("Use the new user management command 'usersInfo'.")]
public virtual MongoUser[] FindAllUsers();
    private MongoUser[] FindAllUsers(IClientSessionHandle session);
    [ObsoleteAttribute("Use the new user management command 'usersInfo'.")]
public virtual MongoUser FindUser(string username);
    private MongoUser FindUser(IClientSessionHandle session, string username);
    public virtual MongoCollection`1<TDefaultDocument> GetCollection(string collectionName);
    public virtual MongoCollection`1<TDefaultDocument> GetCollection(string collectionName, MongoCollectionSettings collectionSettings);
    public virtual MongoCollection`1<TDefaultDocument> GetCollection(string collectionName, WriteConcern writeConcern);
    public virtual MongoCollection`1<BsonDocument> GetCollection(string collectionName);
    public virtual MongoCollection`1<BsonDocument> GetCollection(string collectionName, MongoCollectionSettings collectionSettings);
    public virtual MongoCollection`1<BsonDocument> GetCollection(string collectionName, WriteConcern writeConcern);
    public virtual MongoCollection GetCollection(Type defaultDocumentType, string collectionName);
    public virtual MongoCollection GetCollection(Type defaultDocumentType, string collectionName, MongoCollectionSettings collectionSettings);
    public virtual MongoCollection GetCollection(Type defaultDocumentType, string collectionName, WriteConcern writeConcern);
    public virtual IEnumerable`1<string> GetCollectionNames();
    private IEnumerable`1<string> GetCollectionNames(IClientSessionHandle session);
    public virtual BsonDocument GetCurrentOp();
    private BsonDocument GetCurrentOp(IClientSessionHandle session);
    public virtual MongoGridFS GetGridFS(MongoGridFSSettings gridFSSettings);
    public MongoCursor`1<SystemProfileInfo> GetProfilingInfo(IMongoQuery query);
    public GetProfilingLevelResult GetProfilingLevel();
    public virtual MongoDatabase GetSisterDatabase(string databaseName);
    public virtual DatabaseStatsResult GetStats();
    public virtual bool IsCollectionNameValid(string collectionName, String& message);
    [ObsoleteAttribute("Use RunCommand with a { dropUser: <username> } document.")]
public virtual void RemoveUser(MongoUser user);
    [ObsoleteAttribute("Use RunCommand with a { dropUser: <username> } document.")]
public virtual void RemoveUser(string username);
    private void RemoveUser(IClientSessionHandle session, string username);
    public virtual CommandResult RenameCollection(string oldCollectionName, string newCollectionName);
    public virtual CommandResult RenameCollection(string oldCollectionName, string newCollectionName, bool dropTarget);
    private CommandResult RenameCollection(IClientSessionHandle session, string oldCollectionName, string newCollectionName, bool dropTarget);
    public virtual CommandResult RunCommand(IMongoCommand command);
    public virtual CommandResult RunCommand(string commandName);
    public virtual TCommandResult RunCommandAs(IMongoCommand command);
    public TCommandResult RunCommandAs(IMongoCommand command, ReadPreference readPreference);
    private TCommandResult RunCommandAs(IClientSessionHandle session, IMongoCommand command, ReadPreference readPreference);
    public virtual TCommandResult RunCommandAs(string commandName);
    public virtual CommandResult RunCommandAs(Type commandResultType, IMongoCommand command);
    public virtual CommandResult RunCommandAs(Type commandResultType, string commandName);
    public virtual CommandResult SetProfilingLevel(ProfilingLevel level);
    public virtual CommandResult SetProfilingLevel(ProfilingLevel level, TimeSpan slow);
    public virtual string ToString();
    public virtual MongoDatabase WithReadConcern(ReadConcern readConcern);
    public virtual MongoDatabase WithReadPreference(ReadPreference readPreference);
    public virtual MongoDatabase WithWriteConcern(WriteConcern writeConcern);
    private TResult ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<TResult> operation, ReadPreference readPreference);
    private TResult ExecuteWriteOperation(IClientSessionHandle session, IWriteOperation`1<TResult> operation);
    private MessageEncoderSettings GetMessageEncoderSettings();
    internal TCommandResult RunCommandAs(IClientSessionHandle session, IMongoCommand command, IBsonSerializer`1<TCommandResult> resultSerializer, ReadPreference readPreference);
    private MongoUser ToMongoUser(BsonDocument userDocument);
    private void UsingImplicitSession(Action`1<IClientSessionHandle> action);
    private TResult UsingImplicitSession(Func`2<IClientSessionHandle, TResult> func);
    [CompilerGeneratedAttribute]
private MongoUser[] <FindAllUsers>b__39_0(IClientSessionHandle session);
    [CompilerGeneratedAttribute]
private MongoUser <FindAllUsers>b__40_0(BsonDocument u);
    [CompilerGeneratedAttribute]
private MongoUser <FindUser>b__42_0(BsonDocument u);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetCollectionNames>b__52_0(IClientSessionHandle session);
    [CompilerGeneratedAttribute]
private BsonDocument <GetCurrentOp>b__54_0(IClientSessionHandle session);
}
public class MongoDB.Driver.MongoInsertOptions : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private InsertFlags _flags;
    private WriteConcern _writeConcern;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public InsertFlags Flags { get; public set; }
    public WriteConcern WriteConcern { get; public set; }
    [ObsoleteAttribute("Options constructors which take a MongoCollection parameter are obsolete and will be removed in a future release of the MongoDB CSharp Driver. Please use a constructor which does not take a MongoCollection parameter.")]
public MongoInsertOptions(MongoCollection collection);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public InsertFlags get_Flags();
    public void set_Flags(InsertFlags value);
    public WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
}
[DefaultMemberAttribute("Item")]
public class MongoDB.Driver.MongoServer : object {
    private static object __staticLock;
    private static Dictionary`2<MongoServerSettings, MongoServer> __servers;
    private static int __nextSequentialId;
    private static int __maxServerCount;
    private static HashSet`1<char> __invalidDatabaseNameChars;
    [ThreadStaticAttribute]
private static Request __threadStaticRequest;
    private ICluster _cluster;
    private IOperationExecutor _operationExecutor;
    private object _serverLock;
    private MongoServerSettings _settings;
    private int _sequentialId;
    private List`1<MongoServerInstance> _serverInstances;
    public static int MaxServerCount { get; public set; }
    public int MaxWireVersion { get; }
    public static int ServerCount { get; }
    public MongoServerInstance[] Arbiters { get; }
    internal ICluster Cluster { get; }
    public MongoServerInstance Instance { get; }
    public MongoServerInstance[] Instances { get; }
    [ObsoleteAttribute("Passives are treated the same as secondaries.")]
public MongoServerInstance[] Passives { get; }
    public MongoServerInstance Primary { get; }
    public string ReplicaSetName { get; }
    internal ConnectionId RequestConnectionId { get; }
    internal MongoServerInstance RequestServerInstance { get; }
    internal int RequestNestingLevel { get; }
    public MongoServerInstance[] Secondaries { get; }
    public int SequentialId { get; }
    public MongoServerSettings Settings { get; }
    public MongoServerState State { get; }
    [ObsoleteAttribute("Use GetDatabase instead.")]
public MongoDatabase Item { get; }
    [ObsoleteAttribute("Use GetDatabase instead.")]
public MongoDatabase Item { get; }
    private static MongoServer();
    [ObsoleteAttribute("Use client.GetServer instead.")]
public MongoServer(MongoServerSettings settings);
    internal MongoServer(MongoServerSettings settings, IOperationExecutor operationExecutor);
    internal static MongoServer Create(MongoServerSettings settings, IOperationExecutor operationExecutor);
    internal static MongoServer Create(string connectionString, IOperationExecutor operationExecutor);
    public static int get_MaxServerCount();
    public static void set_MaxServerCount(int value);
    public int get_MaxWireVersion();
    public static int get_ServerCount();
    public virtual MongoServerInstance[] get_Arbiters();
    internal ICluster get_Cluster();
    public virtual MongoServerInstance get_Instance();
    public virtual MongoServerInstance[] get_Instances();
    public virtual MongoServerInstance[] get_Passives();
    public virtual MongoServerInstance get_Primary();
    public virtual string get_ReplicaSetName();
    internal virtual ConnectionId get_RequestConnectionId();
    internal virtual MongoServerInstance get_RequestServerInstance();
    internal virtual int get_RequestNestingLevel();
    public virtual MongoServerInstance[] get_Secondaries();
    public virtual int get_SequentialId();
    public virtual MongoServerSettings get_Settings();
    public virtual MongoServerState get_State();
    public virtual MongoDatabase get_Item(string databaseName);
    public virtual MongoDatabase get_Item(string databaseName, WriteConcern writeConcern);
    public static MongoServer[] GetAllServers();
    public static void UnregisterAllServers();
    public static void UnregisterServer(MongoServer server);
    public virtual void Connect();
    public virtual void Connect(TimeSpan timeout);
    public virtual bool DatabaseExists(string databaseName);
    public virtual void Disconnect();
    public virtual CommandResult DropDatabase(string databaseName);
    private CommandResult DropDatabase(IClientSessionHandle session, string databaseName);
    public virtual BsonDocument FetchDBRef(MongoDBRef dbRef);
    public virtual TDocument FetchDBRefAs(MongoDBRef dbRef);
    public virtual object FetchDBRefAs(Type documentType, MongoDBRef dbRef);
    public virtual MongoDatabase GetDatabase(string databaseName);
    public virtual MongoDatabase GetDatabase(string databaseName, WriteConcern writeConcern);
    public virtual MongoDatabase GetDatabase(string databaseName, MongoDatabaseSettings databaseSettings);
    public virtual IEnumerable`1<string> GetDatabaseNames();
    private IEnumerable`1<string> GetDatabaseNames(IClientSessionHandle session);
    public virtual MongoServerInstance GetServerInstance(MongoServerAddress address);
    public virtual bool IsDatabaseNameValid(string databaseName, String& message);
    public virtual void Ping();
    public virtual void Reconnect();
    internal virtual void RequestDone();
    internal virtual IDisposable RequestStart();
    internal virtual IDisposable RequestStart(ReadPreference readPreference);
    internal virtual IDisposable RequestStart(MongoServerInstance serverInstance);
    public virtual MongoServer WithReadConcern(ReadConcern readConcern);
    public virtual MongoServer WithReadPreference(ReadPreference readPreference);
    public virtual MongoServer WithWriteConcern(WriteConcern writeConcern);
    internal IReadBindingHandle GetReadBinding(ReadPreference readPreference, IClientSessionHandle session);
    internal MongoServerInstance GetServerInstance(EndPoint endPoint);
    internal IWriteBindingHandle GetWriteBinding(IClientSessionHandle session);
    private TResult ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<TResult> operation, ReadPreference readPreference);
    private TResult ExecuteWriteOperation(IClientSessionHandle session, IWriteOperation`1<TResult> operation);
    private MessageEncoderSettings GetMessageEncoderSettings();
    private void OnClusterDescriptionChanged(object sender, EventArgs args);
    private IDisposable RequestStart(IServerSelector serverSelector, ReadPreference readPreference);
    private void StartTrackingServerInstances();
    private MongoServerAddress ToMongoServerAddress(EndPoint endPoint);
    private IWriteBindingHandle ToWriteBinding(IReadBindingHandle binding);
    private TResult UsingImplicitSession(Func`2<IClientSessionHandle, TResult> func);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetDatabaseNames>b__71_0(IClientSessionHandle session);
    [CompilerGeneratedAttribute]
private MongoServerInstance <StartTrackingServerInstances>b__92_0(ServerDescription serverDescription);
}
public class MongoDB.Driver.MongoServerInstance : object {
    private static int __nextSequentialId;
    [CompilerGeneratedAttribute]
private EventHandler StateChanged;
    private MongoServerSettings _settings;
    private MongoServerAddress _address;
    private int _sequentialId;
    private ICluster _cluster;
    private EndPoint _endPoint;
    public MongoServerInstanceType InstanceType { get; }
    public MongoServerAddress Address { get; }
    public bool IsArbiter { get; }
    [ObsoleteAttribute("Passives are treated the same as secondaries.")]
public bool IsPassive { get; }
    public bool IsPrimary { get; }
    public bool IsSecondary { get; }
    public int MaxDocumentSize { get; }
    public int MaxMessageLength { get; }
    public int MaxWireDocumentSize { get; }
    public int MaxBatchCount { get; }
    public int MaxWireVersion { get; }
    public int SequentialId { get; }
    public MongoServerSettings Settings { get; }
    public MongoServerState State { get; }
    internal EndPoint EndPoint { get; }
    internal MongoServerInstance(MongoServerSettings settings, MongoServerAddress address, ICluster cluster, EndPoint endPoint);
    [CompilerGeneratedAttribute]
public void add_StateChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StateChanged(EventHandler value);
    public MongoServerInstanceType get_InstanceType();
    public MongoServerAddress get_Address();
    public bool get_IsArbiter();
    public bool get_IsPassive();
    public bool get_IsPrimary();
    public bool get_IsSecondary();
    public int get_MaxDocumentSize();
    public int get_MaxMessageLength();
    public int get_MaxWireDocumentSize();
    public int get_MaxBatchCount();
    public int get_MaxWireVersion();
    public int get_SequentialId();
    public MongoServerSettings get_Settings();
    public MongoServerState get_State();
    internal EndPoint get_EndPoint();
    public IPEndPoint GetIPEndPoint();
    public ServerDescription GetServerDescription();
    public void Ping();
    public bool Supports(FeatureId featureId);
    private MessageEncoderSettings GetMessageEncoderSettings();
    private IServer GetServer();
    private void OnStateChanged();
    [CompilerGeneratedAttribute]
private bool <GetIPEndPoint>b__40_0(IPAddress a);
    [CompilerGeneratedAttribute]
private bool <GetServerDescription>b__41_0(ServerDescription s);
}
public enum MongoDB.Driver.MongoServerInstanceType : Enum {
    public int value__;
    public static MongoServerInstanceType Unknown;
    public static MongoServerInstanceType StandAlone;
    public static MongoServerInstanceType ReplicaSetMember;
    public static MongoServerInstanceType ShardRouter;
}
public class MongoDB.Driver.MongoServerSettings : object {
    private bool _allowInsecureTls;
    private string _applicationName;
    private Action`1<ClusterBuilder> _clusterConfigurator;
    private IReadOnlyList`1<CompressorConfiguration> _compressors;
    private ConnectionMode _connectionMode;
    private ConnectionModeSwitch _connectionModeSwitch;
    private TimeSpan _connectTimeout;
    private MongoCredentialStore _credentials;
    private Nullable`1<bool> _directConnection;
    private GuidRepresentation _guidRepresentation;
    private TimeSpan _heartbeatInterval;
    private TimeSpan _heartbeatTimeout;
    private bool _ipv6;
    private TimeSpan _localThreshold;
    private TimeSpan _maxConnectionIdleTime;
    private TimeSpan _maxConnectionLifeTime;
    private int _maxConnectionPoolSize;
    private int _minConnectionPoolSize;
    private TimeSpan _operationTimeout;
    private ReadConcern _readConcern;
    private UTF8Encoding _readEncoding;
    private ReadPreference _readPreference;
    private string _replicaSetName;
    private bool _retryReads;
    private bool _retryWrites;
    private ConnectionStringScheme _scheme;
    private string _sdamLogFilename;
    private List`1<MongoServerAddress> _servers;
    private TimeSpan _serverSelectionTimeout;
    private TimeSpan _socketTimeout;
    private SslSettings _sslSettings;
    private bool _useTls;
    private int _waitQueueSize;
    private TimeSpan _waitQueueTimeout;
    private WriteConcern _writeConcern;
    private UTF8Encoding _writeEncoding;
    private bool _isFrozen;
    private int _frozenHashCode;
    private string _frozenStringRepresentation;
    [ObsoleteAttribute("Use IPv6 instead.")]
public AddressFamily AddressFamily { get; }
    public bool AllowInsecureTls { get; public set; }
    public string ApplicationName { get; public set; }
    public Action`1<ClusterBuilder> ClusterConfigurator { get; public set; }
    public IReadOnlyList`1<CompressorConfiguration> Compressors { get; public set; }
    [ObsoleteAttribute("Use DirectConnection instead.")]
public ConnectionMode ConnectionMode { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public ConnectionModeSwitch ConnectionModeSwitch { get; }
    public TimeSpan ConnectTimeout { get; public set; }
    public MongoCredential Credential { get; public set; }
    [ObsoleteAttribute("Use Credential instead. Using multiple credentials is deprecated.")]
public IEnumerable`1<MongoCredential> Credentials { get; public set; }
    public Nullable`1<bool> DirectConnection { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public TimeSpan HeartbeatTimeout { get; public set; }
    public bool IsFrozen { get; }
    public bool IPv6 { get; public set; }
    public TimeSpan LocalThreshold { get; public set; }
    public TimeSpan MaxConnectionIdleTime { get; public set; }
    public TimeSpan MaxConnectionLifeTime { get; public set; }
    public int MaxConnectionPoolSize { get; public set; }
    public int MinConnectionPoolSize { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    public ReadConcern ReadConcern { get; public set; }
    public UTF8Encoding ReadEncoding { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public string ReplicaSetName { get; public set; }
    public bool RetryReads { get; public set; }
    public bool RetryWrites { get; public set; }
    public ConnectionStringScheme Scheme { get; public set; }
    [ObsoleteAttribute("Use MongoClientSettings.LoggerFactory instead.")]
public string SdamLogFilename { get; public set; }
    public MongoServerAddress Server { get; public set; }
    public IEnumerable`1<MongoServerAddress> Servers { get; public set; }
    public TimeSpan ServerSelectionTimeout { get; public set; }
    public TimeSpan SocketTimeout { get; public set; }
    public SslSettings SslSettings { get; public set; }
    [ObsoleteAttribute("Use UseTls instead.")]
public bool UseSsl { get; public set; }
    public bool UseTls { get; public set; }
    [ObsoleteAttribute("Use AllowInsecureTls instead.")]
public bool VerifySslCertificate { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int WaitQueueSize { get; public set; }
    public TimeSpan WaitQueueTimeout { get; public set; }
    public WriteConcern WriteConcern { get; public set; }
    public UTF8Encoding WriteEncoding { get; public set; }
    public AddressFamily get_AddressFamily();
    public bool get_AllowInsecureTls();
    public void set_AllowInsecureTls(bool value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public Action`1<ClusterBuilder> get_ClusterConfigurator();
    public void set_ClusterConfigurator(Action`1<ClusterBuilder> value);
    public IReadOnlyList`1<CompressorConfiguration> get_Compressors();
    public void set_Compressors(IReadOnlyList`1<CompressorConfiguration> value);
    public ConnectionMode get_ConnectionMode();
    public void set_ConnectionMode(ConnectionMode value);
    public ConnectionModeSwitch get_ConnectionModeSwitch();
    public TimeSpan get_ConnectTimeout();
    public void set_ConnectTimeout(TimeSpan value);
    public MongoCredential get_Credential();
    public void set_Credential(MongoCredential value);
    public IEnumerable`1<MongoCredential> get_Credentials();
    public void set_Credentials(IEnumerable`1<MongoCredential> value);
    public Nullable`1<bool> get_DirectConnection();
    public void set_DirectConnection(Nullable`1<bool> value);
    public sealed virtual GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public TimeSpan get_HeartbeatInterval();
    public void set_HeartbeatInterval(TimeSpan value);
    public TimeSpan get_HeartbeatTimeout();
    public void set_HeartbeatTimeout(TimeSpan value);
    public bool get_IsFrozen();
    public bool get_IPv6();
    public void set_IPv6(bool value);
    public TimeSpan get_LocalThreshold();
    public void set_LocalThreshold(TimeSpan value);
    public TimeSpan get_MaxConnectionIdleTime();
    public void set_MaxConnectionIdleTime(TimeSpan value);
    public TimeSpan get_MaxConnectionLifeTime();
    public void set_MaxConnectionLifeTime(TimeSpan value);
    public int get_MaxConnectionPoolSize();
    public void set_MaxConnectionPoolSize(int value);
    public int get_MinConnectionPoolSize();
    public void set_MinConnectionPoolSize(int value);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    public sealed virtual ReadConcern get_ReadConcern();
    public void set_ReadConcern(ReadConcern value);
    public sealed virtual UTF8Encoding get_ReadEncoding();
    public void set_ReadEncoding(UTF8Encoding value);
    public sealed virtual ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public string get_ReplicaSetName();
    public void set_ReplicaSetName(string value);
    public bool get_RetryReads();
    public void set_RetryReads(bool value);
    public bool get_RetryWrites();
    public void set_RetryWrites(bool value);
    public ConnectionStringScheme get_Scheme();
    public void set_Scheme(ConnectionStringScheme value);
    public string get_SdamLogFilename();
    public void set_SdamLogFilename(string value);
    public MongoServerAddress get_Server();
    public void set_Server(MongoServerAddress value);
    public IEnumerable`1<MongoServerAddress> get_Servers();
    public void set_Servers(IEnumerable`1<MongoServerAddress> value);
    public TimeSpan get_ServerSelectionTimeout();
    public void set_ServerSelectionTimeout(TimeSpan value);
    public TimeSpan get_SocketTimeout();
    public void set_SocketTimeout(TimeSpan value);
    public SslSettings get_SslSettings();
    public void set_SslSettings(SslSettings value);
    public bool get_UseSsl();
    public void set_UseSsl(bool value);
    public bool get_UseTls();
    public void set_UseTls(bool value);
    public bool get_VerifySslCertificate();
    public void set_VerifySslCertificate(bool value);
    public int get_WaitQueueSize();
    public void set_WaitQueueSize(int value);
    public TimeSpan get_WaitQueueTimeout();
    public void set_WaitQueueTimeout(TimeSpan value);
    public sealed virtual WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
    public sealed virtual UTF8Encoding get_WriteEncoding();
    public void set_WriteEncoding(UTF8Encoding value);
    public static bool op_Equality(MongoServerSettings lhs, MongoServerSettings rhs);
    public static bool op_Inequality(MongoServerSettings lhs, MongoServerSettings rhs);
    public static MongoServerSettings FromClientSettings(MongoClientSettings clientSettings);
    public static MongoServerSettings FromUrl(MongoUrl url);
    public MongoServerSettings Clone();
    public sealed virtual bool Equals(MongoServerSettings obj);
    public virtual bool Equals(object obj);
    public MongoServerSettings Freeze();
    public MongoServerSettings FrozenCopy();
    public virtual int GetHashCode();
    public virtual string ToString();
    internal ClusterKey ToClusterKey();
    private void ThrowIfSettingsAreInvalid();
    [CompilerGeneratedAttribute]
private bool <ThrowIfSettingsAreInvalid>g__IsDirectConnection|175_0();
}
public enum MongoDB.Driver.MongoServerState : Enum {
    public int value__;
    public static MongoServerState Disconnected;
    public static MongoServerState Connecting;
    public static MongoServerState Connected;
    public static MongoServerState ConnectedToSubset;
    public static MongoServerState Disconnecting;
}
public class MongoDB.Driver.MongoUpdateOptions : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private UpdateFlags _flags;
    private WriteConcern _writeConcern;
    public Collation Collation { get; public set; }
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public UpdateFlags Flags { get; public set; }
    public WriteConcern WriteConcern { get; public set; }
    [ObsoleteAttribute("Options constructors which take a MongoCollection parameter are obsolete and will be removed in a future release of the MongoDB CSharp Driver. Please use a constructor which does not take a MongoCollection parameter.")]
public MongoUpdateOptions(MongoCollection collection);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public UpdateFlags get_Flags();
    public void set_Flags(UpdateFlags value);
    public WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
}
[ObsoleteAttribute("Use the new user management commands instead.")]
public class MongoDB.Driver.MongoUser : object {
    private string _username;
    private string _passwordHash;
    private bool _isReadOnly;
    public string Username { get; public set; }
    public string PasswordHash { get; public set; }
    public bool IsReadOnly { get; public set; }
    public MongoUser(string username, PasswordEvidence password, bool isReadOnly);
    public MongoUser(string username, string passwordHash, bool isReadOnly);
    public string get_Username();
    public void set_Username(string value);
    public string get_PasswordHash();
    public void set_PasswordHash(string value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public static bool op_Inequality(MongoUser lhs, MongoUser rhs);
    public static bool op_Equality(MongoUser lhs, MongoUser rhs);
    public static bool Equals(MongoUser lhs, MongoUser rhs);
    public static string HashPassword(string username, PasswordEvidence password);
    public static string HashPassword(string username, string password);
    public sealed virtual bool Equals(MongoUser rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class MongoDB.Driver.Operations.AddUserOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    private string _passwordHash;
    private bool _readOnly;
    private string _username;
    public AddUserOperation(DatabaseNamespace databaseNamespace, string username, string passwordHash, bool readOnly, MessageEncoderSettings messageEncoderSettings);
    public sealed virtual bool Execute(IWriteBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ExecuteAsync(IWriteBinding binding, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Operations.AddUserUsingUserManagementCommandsOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    private string _passwordHash;
    private bool _readOnly;
    private string _username;
    public AddUserUsingUserManagementCommandsOperation(DatabaseNamespace databaseNamespace, string username, string passwordHash, bool readOnly, MessageEncoderSettings messageEncoderSettings);
    public sealed virtual bool Execute(IWriteBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ExecuteAsync(IWriteBinding binding, CancellationToken cancellationToken);
    private bool UserExists(IChannelSourceHandle channelSource, ICoreSessionHandle session, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Operations.CurrentOpOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    public DatabaseNamespace DatabaseNamespace { get; }
    public MessageEncoderSettings MessageEncoderSettings { get; }
    public CurrentOpOperation(DatabaseNamespace databaseNamespace, MessageEncoderSettings messageEncoderSettings);
    public DatabaseNamespace get_DatabaseNamespace();
    public MessageEncoderSettings get_MessageEncoderSettings();
    public sealed virtual BsonDocument Execute(IReadBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<BsonDocument> ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Operations.CurrentOpUsingCommandOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    public DatabaseNamespace DatabaseNamespace { get; }
    public MessageEncoderSettings MessageEncoderSettings { get; }
    public CurrentOpUsingCommandOperation(DatabaseNamespace databaseNamespace, MessageEncoderSettings messageEncoderSettings);
    public DatabaseNamespace get_DatabaseNamespace();
    public MessageEncoderSettings get_MessageEncoderSettings();
    public sealed virtual BsonDocument Execute(IReadBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<BsonDocument> ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken);
    internal ReadCommandOperation`1<BsonDocument> CreateOperation();
}
internal class MongoDB.Driver.Operations.DropUserOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    private string _username;
    public DropUserOperation(DatabaseNamespace databaseNamespace, string username, MessageEncoderSettings messageEncoderSettings);
    public sealed virtual bool Execute(IWriteBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ExecuteAsync(IWriteBinding binding, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Operations.DropUserUsingUserManagementCommandsOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    private string _username;
    public DropUserUsingUserManagementCommandsOperation(DatabaseNamespace databaseNamespace, string username, MessageEncoderSettings messageEncoderSettings);
    public sealed virtual bool Execute(IWriteBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ExecuteAsync(IWriteBinding binding, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Operations.FindUsersOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    private string _username;
    public FindUsersOperation(DatabaseNamespace databaseNamespace, string username, MessageEncoderSettings messageEncoderSettings);
    public sealed virtual IEnumerable`1<BsonDocument> Execute(IReadBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<BsonDocument>> ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Operations.FindUsersUsingUserManagementCommandsOperation : object {
    private DatabaseNamespace _databaseNamespace;
    private MessageEncoderSettings _messageEncoderSettings;
    private string _username;
    public FindUsersUsingUserManagementCommandsOperation(DatabaseNamespace databaseNamespace, string username, MessageEncoderSettings messageEncoderSettings);
    public sealed virtual IEnumerable`1<BsonDocument> Execute(IReadBinding binding, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<BsonDocument>> ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken);
}
public class MongoDB.Driver.ParallelScanArgs : object {
    private Nullable`1<int> _batchSize;
    private int _numberOfCursors;
    private ReadPreference _readPreference;
    private IBsonSerializer _serializer;
    public Nullable`1<int> BatchSize { get; public set; }
    public int NumberOfCursors { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public IBsonSerializer Serializer { get; public set; }
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public int get_NumberOfCursors();
    public void set_NumberOfCursors(int value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public IBsonSerializer get_Serializer();
    public void set_Serializer(IBsonSerializer value);
}
public class MongoDB.Driver.ParallelScanArgs`1 : ParallelScanArgs {
    public IBsonSerializer`1<TDocument> Serializer { get; public set; }
    public IBsonSerializer`1<TDocument> get_Serializer();
    public void set_Serializer(IBsonSerializer`1<TDocument> value);
}
public enum MongoDB.Driver.ProfilingLevel : Enum {
    public int value__;
    public static ProfilingLevel None;
    public static ProfilingLevel Slow;
    public static ProfilingLevel All;
}
[BsonSerializerAttribute("MongoDB.Driver.QueryDocument/Serializer")]
public class MongoDB.Driver.QueryDocument : BsonDocument {
    public QueryDocument(bool allowDuplicateNames);
    public QueryDocument(BsonElement element);
    public QueryDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use QueryDocument<IEnumerable<BsonElement> elements) instead.")]
public QueryDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public QueryDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use QueryDocument<IEnumerable<BsonElement> elements) instead.")]
public QueryDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public QueryDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use QueryDocument<IEnumerable<BsonElement> elements) instead.")]
public QueryDocument(IDictionary dictionary, IEnumerable keys);
    public QueryDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use QueryDocument<IEnumerable<BsonElement> elements) instead.")]
public QueryDocument(BsonElement[] elements);
    public QueryDocument(string name, BsonValue value);
}
[FlagsAttribute]
public enum MongoDB.Driver.QueryFlags : Enum {
    public int value__;
    public static QueryFlags None;
    public static QueryFlags TailableCursor;
    public static QueryFlags SecondaryOk;
    public static QueryFlags NoCursorTimeout;
    public static QueryFlags AwaitData;
    public static QueryFlags Exhaust;
    public static QueryFlags Partial;
}
public class MongoDB.Driver.RemoveArgs : object {
    private Collation _collation;
    private RemoveFlags _flags;
    private IMongoQuery _query;
    private WriteConcern _writeConcern;
    public Collation Collation { get; public set; }
    public RemoveFlags Flags { get; public set; }
    public IMongoQuery Query { get; public set; }
    public WriteConcern WriteConcern { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public RemoveFlags get_Flags();
    public void set_Flags(RemoveFlags value);
    public IMongoQuery get_Query();
    public void set_Query(IMongoQuery value);
    public WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
}
[FlagsAttribute]
public enum MongoDB.Driver.RemoveFlags : Enum {
    public int value__;
    public static RemoveFlags None;
    public static RemoveFlags Single;
}
[BsonSerializerAttribute("MongoDB.Driver.ScopeDocument/Serializer")]
public class MongoDB.Driver.ScopeDocument : BsonDocument {
    public ScopeDocument(bool allowDuplicateNames);
    public ScopeDocument(BsonElement element);
    public ScopeDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use ScopeDocument<IEnumerable<BsonElement> elements) instead.")]
public ScopeDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public ScopeDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use ScopeDocument<IEnumerable<BsonElement> elements) instead.")]
public ScopeDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public ScopeDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use ScopeDocument<IEnumerable<BsonElement> elements) instead.")]
public ScopeDocument(IDictionary dictionary, IEnumerable keys);
    public ScopeDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use ScopeDocument<IEnumerable<BsonElement> elements) instead.")]
public ScopeDocument(BsonElement[] elements);
    public ScopeDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.SortByDocument/Serializer")]
public class MongoDB.Driver.SortByDocument : BsonDocument {
    public SortByDocument(bool allowDuplicateNames);
    public SortByDocument(BsonElement element);
    public SortByDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use SortByDocument<IEnumerable<BsonElement> elements) instead.")]
public SortByDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public SortByDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use SortByDocument<IEnumerable<BsonElement> elements) instead.")]
public SortByDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public SortByDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use SortByDocument<IEnumerable<BsonElement> elements) instead.")]
public SortByDocument(IDictionary dictionary, IEnumerable keys);
    public SortByDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use SortByDocument<IEnumerable<BsonElement> elements) instead.")]
public SortByDocument(BsonElement[] elements);
    public SortByDocument(string name, BsonValue value);
}
[BsonSerializerAttribute("MongoDB.Driver.SystemProfileInfoSerializer")]
public class MongoDB.Driver.SystemProfileInfo : BsonDocumentBackedClass {
    public string Abbreviated { get; public set; }
    public string Client { get; public set; }
    public BsonDocument Command { get; public set; }
    public long CursorId { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string Error { get; public set; }
    public string Exception { get; public set; }
    public int ExceptionCode { get; public set; }
    public bool Exhaust { get; public set; }
    public bool FastMod { get; public set; }
    public bool FastModInsert { get; public set; }
    public bool IdHack { get; public set; }
    public string Info { get; public set; }
    public int KeyUpdates { get; public set; }
    public SystemProfileLockStatistics LockStatistics { get; public set; }
    public bool Moved { get; public set; }
    public string Namespace { get; public set; }
    public int NumberMoved { get; public set; }
    public int NumberOfYields { get; public set; }
    public int NumberReturned { get; public set; }
    public int NumberScanned { get; public set; }
    public int NumberToReturn { get; public set; }
    public int NumberToSkip { get; public set; }
    public int NumberUpdated { get; public set; }
    public string Op { get; public set; }
    public BsonDocument Query { get; public set; }
    public BsonDocument RawDocument { get; }
    public int ResponseLength { get; public set; }
    public bool ScanAndOrder { get; public set; }
    public DateTime Timestamp { get; public set; }
    public BsonDocument UpdateObject { get; public set; }
    public bool Upsert { get; public set; }
    public string User { get; public set; }
    internal SystemProfileInfo(BsonDocument backingDocument);
    public string get_Abbreviated();
    public void set_Abbreviated(string value);
    public string get_Client();
    public void set_Client(string value);
    public BsonDocument get_Command();
    public void set_Command(BsonDocument value);
    public long get_CursorId();
    public void set_CursorId(long value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public string get_Error();
    public void set_Error(string value);
    public string get_Exception();
    public void set_Exception(string value);
    public int get_ExceptionCode();
    public void set_ExceptionCode(int value);
    public bool get_Exhaust();
    public void set_Exhaust(bool value);
    public bool get_FastMod();
    public void set_FastMod(bool value);
    public bool get_FastModInsert();
    public void set_FastModInsert(bool value);
    public bool get_IdHack();
    public void set_IdHack(bool value);
    public string get_Info();
    public void set_Info(string value);
    public int get_KeyUpdates();
    public void set_KeyUpdates(int value);
    public SystemProfileLockStatistics get_LockStatistics();
    public void set_LockStatistics(SystemProfileLockStatistics value);
    public bool get_Moved();
    public void set_Moved(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_NumberMoved();
    public void set_NumberMoved(int value);
    public int get_NumberOfYields();
    public void set_NumberOfYields(int value);
    public int get_NumberReturned();
    public void set_NumberReturned(int value);
    public int get_NumberScanned();
    public void set_NumberScanned(int value);
    public int get_NumberToReturn();
    public void set_NumberToReturn(int value);
    public int get_NumberToSkip();
    public void set_NumberToSkip(int value);
    public int get_NumberUpdated();
    public void set_NumberUpdated(int value);
    public string get_Op();
    public void set_Op(string value);
    public BsonDocument get_Query();
    public void set_Query(BsonDocument value);
    public BsonDocument get_RawDocument();
    public int get_ResponseLength();
    public void set_ResponseLength(int value);
    public bool get_ScanAndOrder();
    public void set_ScanAndOrder(bool value);
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    public BsonDocument get_UpdateObject();
    public void set_UpdateObject(BsonDocument value);
    public bool get_Upsert();
    public void set_Upsert(bool value);
    public string get_User();
    public void set_User(string value);
}
public class MongoDB.Driver.SystemProfileInfoSerializer : BsonDocumentBackedClassSerializer`1<SystemProfileInfo> {
    private static SystemProfileInfoSerializer __instance;
    [ObsoleteAttribute("Use constructor instead.")]
public static SystemProfileInfoSerializer Instance { get; }
    private static SystemProfileInfoSerializer();
    public static SystemProfileInfoSerializer get_Instance();
    protected virtual SystemProfileInfo CreateInstance(BsonDocument backingDocument);
}
[BsonSerializerAttribute("MongoDB.Driver.SystemProfileLockStatisticsSerializer")]
public class MongoDB.Driver.SystemProfileLockStatistics : BsonDocumentBackedClass {
    public BsonDocument RawDocument { get; }
    public SystemProfileReadWriteLockStatistics TimeAcquiring { get; public set; }
    public SystemProfileReadWriteLockStatistics TimeLocked { get; public set; }
    internal SystemProfileLockStatistics(BsonDocument backingDocument);
    public BsonDocument get_RawDocument();
    public SystemProfileReadWriteLockStatistics get_TimeAcquiring();
    public void set_TimeAcquiring(SystemProfileReadWriteLockStatistics value);
    public SystemProfileReadWriteLockStatistics get_TimeLocked();
    public void set_TimeLocked(SystemProfileReadWriteLockStatistics value);
}
public class MongoDB.Driver.SystemProfileLockStatisticsSerializer : BsonDocumentBackedClassSerializer`1<SystemProfileLockStatistics> {
    private static SystemProfileLockStatisticsSerializer __instance;
    [ObsoleteAttribute("Use constructor instead.")]
public static SystemProfileLockStatisticsSerializer Instance { get; }
    private static SystemProfileLockStatisticsSerializer();
    public static SystemProfileLockStatisticsSerializer get_Instance();
    protected virtual SystemProfileLockStatistics CreateInstance(BsonDocument backingDocument);
}
[BsonSerializerAttribute("MongoDB.Driver.SystemProfileReadWriteLockStatisticsSerializer")]
public class MongoDB.Driver.SystemProfileReadWriteLockStatistics : BsonDocumentBackedClass {
    public TimeSpan DatabaseReadLock { get; public set; }
    public TimeSpan DatabaseWriteLock { get; public set; }
    public TimeSpan GlobalReadLock { get; public set; }
    public TimeSpan GlobalWriteLock { get; public set; }
    public BsonDocument RawDocument { get; }
    [ObsoleteAttribute("Use DatabaseReadLock or GlobalReadLock instead.")]
public TimeSpan Read { get; public set; }
    [ObsoleteAttribute("Use DatabaseWriteLock or GlobalWriteLock instead.")]
public TimeSpan Write { get; public set; }
    internal SystemProfileReadWriteLockStatistics(BsonDocument backingDocument);
    public TimeSpan get_DatabaseReadLock();
    public void set_DatabaseReadLock(TimeSpan value);
    public TimeSpan get_DatabaseWriteLock();
    public void set_DatabaseWriteLock(TimeSpan value);
    public TimeSpan get_GlobalReadLock();
    public void set_GlobalReadLock(TimeSpan value);
    public TimeSpan get_GlobalWriteLock();
    public void set_GlobalWriteLock(TimeSpan value);
    public BsonDocument get_RawDocument();
    public TimeSpan get_Read();
    public void set_Read(TimeSpan value);
    public TimeSpan get_Write();
    public void set_Write(TimeSpan value);
}
public class MongoDB.Driver.SystemProfileReadWriteLockStatisticsSerializer : BsonDocumentBackedClassSerializer`1<SystemProfileReadWriteLockStatistics> {
    private static SystemProfileReadWriteLockStatisticsSerializer __instance;
    [ObsoleteAttribute("Use constructor instead.")]
public static SystemProfileReadWriteLockStatisticsSerializer Instance { get; }
    private static SystemProfileReadWriteLockStatisticsSerializer();
    public static SystemProfileReadWriteLockStatisticsSerializer get_Instance();
    protected virtual SystemProfileReadWriteLockStatistics CreateInstance(BsonDocument backingDocument);
}
[BsonSerializerAttribute("MongoDB.Driver.UpdateDocument/Serializer")]
public class MongoDB.Driver.UpdateDocument : BsonDocument {
    public UpdateDocument(bool allowDuplicateNames);
    public UpdateDocument(BsonElement element);
    public UpdateDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use UpdateDocument<IEnumerable<BsonElement> elements) instead.")]
public UpdateDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public UpdateDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use UpdateDocument<IEnumerable<BsonElement> elements) instead.")]
public UpdateDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public UpdateDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use UpdateDocument<IEnumerable<BsonElement> elements) instead.")]
public UpdateDocument(IDictionary dictionary, IEnumerable keys);
    public UpdateDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use UpdateDocument<IEnumerable<BsonElement> elements) instead.")]
public UpdateDocument(BsonElement[] elements);
    public UpdateDocument(string name, BsonValue value);
}
[FlagsAttribute]
public enum MongoDB.Driver.UpdateFlags : Enum {
    public int value__;
    public static UpdateFlags None;
    public static UpdateFlags Upsert;
    public static UpdateFlags Multi;
}
public class MongoDB.Driver.ValidateCollectionArgs : object {
    private Nullable`1<bool> _full;
    private Nullable`1<TimeSpan> _maxTime;
    private Nullable`1<bool> _scanData;
    public Nullable`1<bool> Full { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public Nullable`1<bool> ScanData { get; public set; }
    public Nullable`1<bool> get_Full();
    public void set_Full(Nullable`1<bool> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public Nullable`1<bool> get_ScanData();
    public void set_ScanData(Nullable`1<bool> value);
}
[BsonSerializerAttribute("MongoDB.Driver.CommandResultSerializer`1<MongoDB.Driver.ValidateCollectionResult>")]
public class MongoDB.Driver.ValidateCollectionResult : CommandResult {
    private String[] _errors;
    private ExtentDetails _firstExtentDetails;
    private Dictionary`2<string, long> _keysPerIndex;
    public long DataSize { get; }
    public long DeletedCount { get; }
    public long DeletedSize { get; }
    public String[] Errors { get; }
    public long ExtentCount { get; }
    public string FirstExtent { get; }
    public ExtentDetails FirstExtentDetails { get; }
    public int IndexCount { get; }
    public bool IsValid { get; }
    public Dictionary`2<string, long> KeysPerIndex { get; }
    public string LastExtent { get; }
    public long LastExtentSize { get; }
    public string Namespace { get; }
    public double Padding { get; }
    public long RecordCount { get; }
    public string ResultString { get; }
    public string Warning { get; }
    public ValidateCollectionResult(BsonDocument response);
    public long get_DataSize();
    public long get_DeletedCount();
    public long get_DeletedSize();
    public String[] get_Errors();
    public long get_ExtentCount();
    public string get_FirstExtent();
    public ExtentDetails get_FirstExtentDetails();
    public int get_IndexCount();
    public bool get_IsValid();
    public Dictionary`2<string, long> get_KeysPerIndex();
    public string get_LastExtent();
    public long get_LastExtentSize();
    public string get_Namespace();
    public double get_Padding();
    public long get_RecordCount();
    public string get_ResultString();
    public string get_Warning();
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.BaseWrapper/Serializer")]
public abstract class MongoDB.Driver.Wrappers.BaseWrapper : object {
    private Type _nominalType;
    private object _wrapped;
    protected BaseWrapper(object wrapped);
    protected BaseWrapper(Type nominalType, object wrapped);
    protected void SerializeWrappedObject(BsonSerializationContext context);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.CollectionOptionsWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.CollectionOptionsWrapper : BaseWrapper {
    public CollectionOptionsWrapper(object options);
    public static CollectionOptionsWrapper Create(object options);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.CommandWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.CommandWrapper : QueryWrapper {
    public CommandWrapper(object command);
    public static CommandWrapper Create(object command);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.CreateViewOptionsWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.CreateViewOptionsWrapper : BaseWrapper {
    public CreateViewOptionsWrapper(object options);
    public static CreateViewOptionsWrapper Create(object options);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.FieldsWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.FieldsWrapper : BaseWrapper {
    public FieldsWrapper(object fields);
    public static FieldsWrapper Create(object fields);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.GeoHaystackSearchOptionsWrapper/Serializer")]
[ObsoleteAttribute("Use GeoHaystackSearchArgs instead.")]
public class MongoDB.Driver.Wrappers.GeoHaystackSearchOptionsWrapper : BaseWrapper {
    public GeoHaystackSearchOptionsWrapper(object options);
    public static GeoHaystackSearchOptionsWrapper Create(object options);
}
[ObsoleteAttribute("Use GeoNearArgs instead.")]
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.GeoNearOptionsWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.GeoNearOptionsWrapper : BaseWrapper {
    public GeoNearOptionsWrapper(object options);
    public static GeoNearOptionsWrapper Create(object options);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.GroupByWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.GroupByWrapper : BaseWrapper {
    public GroupByWrapper(object groupBy);
    public static GroupByWrapper Create(object groupBy);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.IndexKeysWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.IndexKeysWrapper : BaseWrapper {
    public IndexKeysWrapper(object keys);
    public static IndexKeysWrapper Create(object keys);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.IndexOptionsWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.IndexOptionsWrapper : BaseWrapper {
    public IndexOptionsWrapper(object options);
    public static IndexOptionsWrapper Create(object options);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.QueryWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.QueryWrapper : BaseWrapper {
    public QueryWrapper(object query);
    public static QueryWrapper Create(object query);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.ScopeWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.ScopeWrapper : BaseWrapper {
    public ScopeWrapper(object scope);
    public static ScopeWrapper Create(object scope);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.SortByWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.SortByWrapper : BaseWrapper {
    public SortByWrapper(object sortBy);
    public static SortByWrapper Create(object sortBy);
}
[BsonSerializerAttribute("MongoDB.Driver.Wrappers.UpdateWrapper/Serializer")]
public class MongoDB.Driver.Wrappers.UpdateWrapper : BaseWrapper {
    public UpdateWrapper(Type nominalType, object update);
    public static UpdateWrapper Create(T update);
    public static UpdateWrapper Create(Type nominalType, object update);
}
public class MongoDB.Driver.XYPoint : object {
    private double _x;
    private double _y;
    public double X { get; }
    public double Y { get; }
    public XYPoint(double x, double y);
    public double get_X();
    public double get_Y();
}
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
