[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class MongoDB.Driver.AddToSetUpdateDefinition`2 : UpdateDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private List`1<TItem> _values;
    public AddToSetUpdateDefinition`2(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.AggregateBucketAutoGranularity : ValueType {
    private string _value;
    public static AggregateBucketAutoGranularity E6 { get; }
    public static AggregateBucketAutoGranularity E12 { get; }
    public static AggregateBucketAutoGranularity E24 { get; }
    public static AggregateBucketAutoGranularity E48 { get; }
    public static AggregateBucketAutoGranularity E96 { get; }
    public static AggregateBucketAutoGranularity E192 { get; }
    public static AggregateBucketAutoGranularity PowersOf2 { get; }
    public static AggregateBucketAutoGranularity R5 { get; }
    public static AggregateBucketAutoGranularity R10 { get; }
    public static AggregateBucketAutoGranularity R20 { get; }
    public static AggregateBucketAutoGranularity R40 { get; }
    public static AggregateBucketAutoGranularity R80 { get; }
    public static AggregateBucketAutoGranularity S1_2_5 { get; }
    public string Value { get; }
    public AggregateBucketAutoGranularity(string value);
    public static AggregateBucketAutoGranularity get_E6();
    public static AggregateBucketAutoGranularity get_E12();
    public static AggregateBucketAutoGranularity get_E24();
    public static AggregateBucketAutoGranularity get_E48();
    public static AggregateBucketAutoGranularity get_E96();
    public static AggregateBucketAutoGranularity get_E192();
    public static AggregateBucketAutoGranularity get_PowersOf2();
    public static AggregateBucketAutoGranularity get_R5();
    public static AggregateBucketAutoGranularity get_R10();
    public static AggregateBucketAutoGranularity get_R20();
    public static AggregateBucketAutoGranularity get_R40();
    public static AggregateBucketAutoGranularity get_R80();
    public static AggregateBucketAutoGranularity get_S1_2_5();
    public string get_Value();
}
public class MongoDB.Driver.AggregateBucketAutoOptions : object {
    [CompilerGeneratedAttribute]
private Optional`1<AggregateBucketAutoGranularity> <Granularity>k__BackingField;
    public Optional`1<AggregateBucketAutoGranularity> Granularity { get; public set; }
    [CompilerGeneratedAttribute]
public Optional`1<AggregateBucketAutoGranularity> get_Granularity();
    [CompilerGeneratedAttribute]
public void set_Granularity(Optional`1<AggregateBucketAutoGranularity> value);
}
public class MongoDB.Driver.AggregateBucketAutoResult`1 : object {
    [CompilerGeneratedAttribute]
private AggregateBucketAutoResultId`1<TValue> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [BsonIdAttribute]
public AggregateBucketAutoResultId`1<TValue> Id { get; private set; }
    [BsonElementAttribute("count")]
public long Count { get; private set; }
    public TValue Max { get; }
    public TValue Min { get; }
    public AggregateBucketAutoResult`1(AggregateBucketAutoResultId`1<TValue> id, long count);
    public AggregateBucketAutoResult`1(TValue min, TValue max, long count);
    [CompilerGeneratedAttribute]
public AggregateBucketAutoResultId`1<TValue> get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(AggregateBucketAutoResultId`1<TValue> value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(long value);
    public TValue get_Max();
    public TValue get_Min();
}
public class MongoDB.Driver.AggregateBucketAutoResultId`1 : object {
    private TValue _min;
    private TValue _max;
    [BsonElementAttribute("max")]
public TValue Max { get; }
    [BsonElementAttribute("min")]
public TValue Min { get; }
    public AggregateBucketAutoResultId`1(TValue min, TValue max);
    public TValue get_Max();
    public TValue get_Min();
}
public static class MongoDB.Driver.AggregateBucketAutoResultIdSerializer : object {
    public static IBsonSerializer`1<AggregateBucketAutoResultId`1<TValue>> Create(IBsonSerializer`1<TValue> valueSerializer);
}
public class MongoDB.Driver.AggregateBucketAutoResultIdSerializer`1 : ClassSerializerBase`1<AggregateBucketAutoResultId`1<TValue>> {
    private IBsonSerializer`1<TValue> _valueSerializer;
    public AggregateBucketAutoResultIdSerializer`1(IBsonSerializer`1<TValue> valueSerializer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual AggregateBucketAutoResultId`1<TValue> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, AggregateBucketAutoResultId`1<TValue> value);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Driver.AggregateBucketOptions`1 : object {
    [CompilerGeneratedAttribute]
private Optional`1<TValue> <DefaultBucket>k__BackingField;
    public Optional`1<TValue> DefaultBucket { get; public set; }
    [CompilerGeneratedAttribute]
public Optional`1<TValue> get_DefaultBucket();
    [CompilerGeneratedAttribute]
public void set_DefaultBucket(Optional`1<TValue> value);
}
public class MongoDB.Driver.AggregateBucketResult`1 : object {
    [CompilerGeneratedAttribute]
private TValue <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [BsonIdAttribute]
public TValue Id { get; private set; }
    [BsonElementAttribute("count")]
public long Count { get; private set; }
    public AggregateBucketResult`1(TValue id, long count);
    [CompilerGeneratedAttribute]
public TValue get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(TValue value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(long value);
}
public class MongoDB.Driver.AggregateCountResult : object {
    private long _count;
    [BsonElementAttribute("count")]
public long Count { get; }
    public AggregateCountResult(long count);
    public long get_Count();
}
public abstract class MongoDB.Driver.AggregateExpressionDefinition`2 : object {
    public static AggregateExpressionDefinition`2<TSource, TResult> op_Implicit(BsonValue expression);
    public static AggregateExpressionDefinition`2<TSource, TResult> op_Implicit(string expression);
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual BsonValue Render(IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonValue Render(RenderArgs`1<TSource> args);
}
public static class MongoDB.Driver.AggregateFacet : object {
    public static AggregateFacet`2<TInput, TOutput> Create(string name, PipelineDefinition`2<TInput, TOutput> pipeline);
}
public abstract class MongoDB.Driver.AggregateFacet`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public IBsonSerializer OutputSerializer { get; }
    public Type OutputType { get; }
    protected AggregateFacet`1(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual IBsonSerializer get_OutputSerializer();
    public abstract virtual Type get_OutputType();
    [ObsoleteAttribute("Use Render(RenderArgs<TInput> args) overload instead.")]
public virtual BsonArray RenderPipeline(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonArray RenderPipeline(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.AggregateFacet`2 : AggregateFacet`1<TInput> {
    [CompilerGeneratedAttribute]
private PipelineDefinition`2<TInput, TOutput> <Pipeline>k__BackingField;
    public IBsonSerializer OutputSerializer { get; }
    public Type OutputType { get; }
    public PipelineDefinition`2<TInput, TOutput> Pipeline { get; private set; }
    public AggregateFacet`2(string name, PipelineDefinition`2<TInput, TOutput> pipeline);
    public virtual IBsonSerializer get_OutputSerializer();
    public virtual Type get_OutputType();
    [CompilerGeneratedAttribute]
public PipelineDefinition`2<TInput, TOutput> get_Pipeline();
    [CompilerGeneratedAttribute]
private void set_Pipeline(PipelineDefinition`2<TInput, TOutput> value);
    public virtual BsonArray RenderPipeline(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.AggregateFacetOptions`1 : object {
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; public set; }
    public IBsonSerializer`1<TOutput> get_OutputSerializer();
    public void set_OutputSerializer(IBsonSerializer`1<TOutput> value);
}
public abstract class MongoDB.Driver.AggregateFacetResult : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    internal AggregateFacetResult(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public IReadOnlyList`1<TOutput> Output();
}
public class MongoDB.Driver.AggregateFacetResult`1 : AggregateFacetResult {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<TOutput> <Output>k__BackingField;
    public IReadOnlyList`1<TOutput> Output { get; public set; }
    public AggregateFacetResult`1(string name, IEnumerable`1<TOutput> output);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<TOutput> get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(IReadOnlyList`1<TOutput> value);
}
public class MongoDB.Driver.AggregateFacetResults : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AggregateFacetResult> <Facets>k__BackingField;
    public IReadOnlyList`1<AggregateFacetResult> Facets { get; private set; }
    public AggregateFacetResults(AggregateFacetResult[] facets);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AggregateFacetResult> get_Facets();
    [CompilerGeneratedAttribute]
private void set_Facets(IReadOnlyList`1<AggregateFacetResult> value);
}
internal class MongoDB.Driver.AggregateFacetResultsSerializer : SerializerBase`1<AggregateFacetResults> {
    private String[] _names;
    private IBsonSerializer[] _serializers;
    public AggregateFacetResultsSerializer(IEnumerable`1<string> names, IEnumerable`1<IBsonSerializer> serializers);
    public virtual AggregateFacetResults Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class MongoDB.Driver.AggregateFluent`2 : AggregateFluentBase`1<TResult> {
    protected AggregateOptions _options;
    protected PipelineDefinition`2<TInput, TResult> _pipeline;
    protected IClientSessionHandle _session;
    public AggregateOptions Options { get; }
    public PipelineDefinition`2<TInput, TResult> Pipeline { get; }
    public IList`1<IPipelineStageDefinition> Stages { get; }
    protected AggregateFluent`2(IClientSessionHandle session, PipelineDefinition`2<TInput, TResult> pipeline, AggregateOptions options);
    public virtual AggregateOptions get_Options();
    public PipelineDefinition`2<TInput, TResult> get_Pipeline();
    public virtual IList`1<IPipelineStageDefinition> get_Stages();
    public virtual IAggregateFluent`1<TNewResult> AppendStage(PipelineStageDefinition`2<TResult, TNewResult> stage);
    public virtual IAggregateFluent`1<TNewResult> As(IBsonSerializer`1<TNewResult> newResultSerializer);
    public virtual IAggregateFluent`1<AggregateBucketResult`1<TValue>> Bucket(AggregateExpressionDefinition`2<TResult, TValue> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options);
    public virtual IAggregateFluent`1<TNewResult> Bucket(AggregateExpressionDefinition`2<TResult, TValue> groupBy, IEnumerable`1<TValue> boundaries, ProjectionDefinition`2<TResult, TNewResult> output, AggregateBucketOptions`1<TValue> options);
    public virtual IAggregateFluent`1<AggregateBucketAutoResult`1<TValue>> BucketAuto(AggregateExpressionDefinition`2<TResult, TValue> groupBy, int buckets, AggregateBucketAutoOptions options);
    public virtual IAggregateFluent`1<TNewResult> BucketAuto(AggregateExpressionDefinition`2<TResult, TValue> groupBy, int buckets, ProjectionDefinition`2<TResult, TNewResult> output, AggregateBucketAutoOptions options);
    public virtual IAggregateFluent`1<ChangeStreamDocument`1<TResult>> ChangeStream(ChangeStreamStageOptions options);
    public virtual IAggregateFluent`1<AggregateCountResult> Count();
    public virtual IAggregateFluent`1<TResult> Densify(FieldDefinition`1<TResult> field, DensifyRange range, IEnumerable`1<FieldDefinition`1<TResult>> partitionByFields);
    public virtual IAggregateFluent`1<TResult> Densify(FieldDefinition`1<TResult> field, DensifyRange range, FieldDefinition`1[] partitionByFields);
    public virtual IAggregateFluent`1<TNewResult> Facet(IEnumerable`1<AggregateFacet`1<TResult>> facets, AggregateFacetOptions`1<TNewResult> options);
    public virtual IAggregateFluent`1<TNewResult> GraphLookup(IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TResult, TStartWith> startWith, FieldDefinition`2<TNewResult, TAs> as, FieldDefinition`2<TAsElement, int> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TNewResult> options);
    public virtual IAggregateFluent`1<TNewResult> Group(ProjectionDefinition`2<TResult, TNewResult> group);
    public virtual IAggregateFluent`1<TResult> Limit(long limit);
    public virtual IAggregateFluent`1<TNewResult> Lookup(string foreignCollectionName, FieldDefinition`1<TResult> localField, FieldDefinition`1<TForeignDocument> foreignField, FieldDefinition`1<TNewResult> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    public virtual IAggregateFluent`1<TNewResult> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, FieldDefinition`2<TNewResult, TAs> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    public virtual IAggregateFluent`1<TResult> Match(FilterDefinition`1<TResult> filter);
    public virtual IAsyncCursor`1<TOutput> Merge(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.AggregateFluent`2/<MergeAsync>d__28`1")]
public virtual Task`1<IAsyncCursor`1<TOutput>> MergeAsync(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions, CancellationToken cancellationToken);
    public virtual IAggregateFluent`1<TNewResult> OfType(IBsonSerializer`1<TNewResult> newResultSerializer);
    public virtual IAsyncCursor`1<TResult> Out(IMongoCollection`1<TResult> outputCollection, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Out(string collectionName, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Out(IMongoCollection`1<TResult> outputCollection, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Out(string collectionName, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(IMongoCollection`1<TResult> outputCollection, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(string collectionName, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(IMongoCollection`1<TResult> outputCollection, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(string collectionName, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public virtual IAggregateFluent`1<TNewResult> Project(ProjectionDefinition`2<TResult, TNewResult> projection);
    public virtual IAggregateFluent`1<TNewResult> ReplaceRoot(AggregateExpressionDefinition`2<TResult, TNewResult> newRoot);
    public virtual IAggregateFluent`1<TNewResult> ReplaceWith(AggregateExpressionDefinition`2<TResult, TNewResult> newRoot);
    public virtual IAggregateFluent`1<TResult> Sample(long size);
    public virtual IAggregateFluent`1<TResult> Search(SearchDefinition`1<TResult> searchDefinition, SearchHighlightOptions`1<TResult> highlight, string indexName, SearchCountOptions count, bool returnStoredSource, bool scoreDetails);
    public virtual IAggregateFluent`1<TResult> Search(SearchDefinition`1<TResult> searchDefinition, SearchOptions`1<TResult> searchOptions);
    public virtual IAggregateFluent`1<SearchMetaResult> SearchMeta(SearchDefinition`1<TResult> searchDefinition, string indexName, SearchCountOptions count);
    public virtual IAggregateFluent`1<TResult> Set(SetFieldDefinitions`1<TResult> fields);
    public virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TResult, TPartitionBy> partitionBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TResult, TPartitionBy> partitionBy, SortDefinition`1<TResult> sortBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public virtual IAggregateFluent`1<TResult> Skip(long skip);
    public virtual IAggregateFluent`1<TResult> Sort(SortDefinition`1<TResult> sort);
    public virtual IAggregateFluent`1<AggregateSortByCountResult`1<TId>> SortByCount(AggregateExpressionDefinition`2<TResult, TId> id);
    public virtual IOrderedAggregateFluent`1<TResult> ThenBy(SortDefinition`1<TResult> newSort);
    public virtual IAggregateFluent`1<TResult> UnionWith(IMongoCollection`1<TWith> withCollection, PipelineDefinition`2<TWith, TResult> withPipeline);
    public virtual IAggregateFluent`1<TNewResult> Unwind(FieldDefinition`1<TResult> field, IBsonSerializer`1<TNewResult> newResultSerializer);
    public virtual IAggregateFluent`1<TNewResult> Unwind(FieldDefinition`1<TResult> field, AggregateUnwindOptions`1<TNewResult> options);
    public virtual IAggregateFluent`1<TResult> VectorSearch(FieldDefinition`1<TResult> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TResult> options);
    public virtual string ToString();
    protected abstract virtual IAggregateFluent`1<TNewResult> WithPipeline(PipelineDefinition`2<TInput, TNewResult> pipeline);
}
public abstract class MongoDB.Driver.AggregateFluentBase`1 : object {
    public IMongoDatabase Database { get; }
    public AggregateOptions Options { get; }
    public IList`1<IPipelineStageDefinition> Stages { get; }
    public virtual IMongoDatabase get_Database();
    public abstract virtual AggregateOptions get_Options();
    public abstract virtual IList`1<IPipelineStageDefinition> get_Stages();
    public abstract virtual IAggregateFluent`1<TNewResult> AppendStage(PipelineStageDefinition`2<TResult, TNewResult> stage);
    public abstract virtual IAggregateFluent`1<TNewResult> As(IBsonSerializer`1<TNewResult> newResultSerializer);
    public virtual IAggregateFluent`1<AggregateBucketResult`1<TValue>> Bucket(AggregateExpressionDefinition`2<TResult, TValue> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options);
    public virtual IAggregateFluent`1<TNewResult> Bucket(AggregateExpressionDefinition`2<TResult, TValue> groupBy, IEnumerable`1<TValue> boundaries, ProjectionDefinition`2<TResult, TNewResult> output, AggregateBucketOptions`1<TValue> options);
    public virtual IAggregateFluent`1<AggregateBucketAutoResult`1<TValue>> BucketAuto(AggregateExpressionDefinition`2<TResult, TValue> groupBy, int buckets, AggregateBucketAutoOptions options);
    public virtual IAggregateFluent`1<TNewResult> BucketAuto(AggregateExpressionDefinition`2<TResult, TValue> groupBy, int buckets, ProjectionDefinition`2<TResult, TNewResult> output, AggregateBucketAutoOptions options);
    public virtual IAggregateFluent`1<ChangeStreamDocument`1<TResult>> ChangeStream(ChangeStreamStageOptions options);
    public virtual IAggregateFluent`1<AggregateCountResult> Count();
    public virtual IAggregateFluent`1<TResult> Densify(FieldDefinition`1<TResult> field, DensifyRange range, IEnumerable`1<FieldDefinition`1<TResult>> partitionByFields);
    public virtual IAggregateFluent`1<TResult> Densify(FieldDefinition`1<TResult> field, DensifyRange range, FieldDefinition`1[] partitionByFields);
    public virtual IAggregateFluent`1<TNewResult> Facet(IEnumerable`1<AggregateFacet`1<TResult>> facets, AggregateFacetOptions`1<TNewResult> options);
    public virtual IAggregateFluent`1<TNewResult> GraphLookup(IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TResult, TStartWith> startWith, FieldDefinition`2<TNewResult, TAs> as, FieldDefinition`2<TAsElement, int> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TNewResult> options);
    public abstract virtual IAggregateFluent`1<TNewResult> Group(ProjectionDefinition`2<TResult, TNewResult> group);
    public abstract virtual IAggregateFluent`1<TResult> Limit(long limit);
    public virtual IAggregateFluent`1<TNewResult> Lookup(string foreignCollectionName, FieldDefinition`1<TResult> localField, FieldDefinition`1<TForeignDocument> foreignField, FieldDefinition`1<TNewResult> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    public virtual IAggregateFluent`1<TNewResult> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, FieldDefinition`2<TNewResult, TAs> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    public abstract virtual IAggregateFluent`1<TResult> Match(FilterDefinition`1<TResult> filter);
    public virtual IAsyncCursor`1<TOutput> Merge(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TOutput>> MergeAsync(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions, CancellationToken cancellationToken);
    public abstract virtual IAggregateFluent`1<TNewResult> OfType(IBsonSerializer`1<TNewResult> newResultSerializer);
    public virtual IAsyncCursor`1<TResult> Out(IMongoCollection`1<TResult> outputCollection, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Out(string collectionName, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Out(IMongoCollection`1<TResult> outputCollection, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Out(string collectionName, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(IMongoCollection`1<TResult> outputCollection, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(string collectionName, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(IMongoCollection`1<TResult> outputCollection, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(string collectionName, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public abstract virtual IAggregateFluent`1<TNewResult> Project(ProjectionDefinition`2<TResult, TNewResult> projection);
    public virtual IAggregateFluent`1<TNewResult> ReplaceRoot(AggregateExpressionDefinition`2<TResult, TNewResult> newRoot);
    public virtual IAggregateFluent`1<TNewResult> ReplaceWith(AggregateExpressionDefinition`2<TResult, TNewResult> newRoot);
    public virtual IAggregateFluent`1<TResult> Sample(long size);
    public virtual IAggregateFluent`1<TResult> Search(SearchDefinition`1<TResult> searchDefinition, SearchHighlightOptions`1<TResult> highlight, string indexName, SearchCountOptions count, bool returnStoredSource, bool scoreDetails);
    public virtual IAggregateFluent`1<TResult> Search(SearchDefinition`1<TResult> searchDefinition, SearchOptions`1<TResult> searchOptions);
    public virtual IAggregateFluent`1<SearchMetaResult> SearchMeta(SearchDefinition`1<TResult> searchDefinition, string indexName, SearchCountOptions count);
    public virtual IAggregateFluent`1<TResult> Set(SetFieldDefinitions`1<TResult> fields);
    public virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TResult, TPartitionBy> partitionBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TResult, TPartitionBy> partitionBy, SortDefinition`1<TResult> sortBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public abstract virtual IAggregateFluent`1<TResult> Skip(long skip);
    public abstract virtual IAggregateFluent`1<TResult> Sort(SortDefinition`1<TResult> sort);
    public virtual IAggregateFluent`1<AggregateSortByCountResult`1<TId>> SortByCount(AggregateExpressionDefinition`2<TResult, TId> id);
    public virtual IOrderedAggregateFluent`1<TResult> ThenBy(SortDefinition`1<TResult> newSort);
    public virtual IAggregateFluent`1<TResult> UnionWith(IMongoCollection`1<TWith> withCollection, PipelineDefinition`2<TWith, TResult> withPipeline);
    public abstract virtual IAggregateFluent`1<TNewResult> Unwind(FieldDefinition`1<TResult> field, IBsonSerializer`1<TNewResult> newResultSerializer);
    public virtual IAggregateFluent`1<TNewResult> Unwind(FieldDefinition`1<TResult> field, AggregateUnwindOptions`1<TNewResult> options);
    public virtual IAggregateFluent`1<TResult> VectorSearch(FieldDefinition`1<TResult> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TResult> options);
    public virtual void ToCollection(CancellationToken cancellationToken);
    public virtual Task ToCollectionAsync(CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> ToCursor(CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> ToCursorAsync(CancellationToken cancellationToken);
}
public class MongoDB.Driver.AggregateGraphLookupOptions`3 : object {
    [CompilerGeneratedAttribute]
private IBsonSerializer`1<TAsElement> <AsElementSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IBsonSerializer`1<TFrom> <FromSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private IBsonSerializer`1<TOutput> <OutputSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterDefinition`1<TFrom> <RestrictSearchWithMatch>k__BackingField;
    public IBsonSerializer`1<TAsElement> AsElementSerializer { get; public set; }
    public IBsonSerializer`1<TFrom> FromSerializer { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public IBsonSerializer`1<TOutput> OutputSerializer { get; public set; }
    public FilterDefinition`1<TFrom> RestrictSearchWithMatch { get; public set; }
    [CompilerGeneratedAttribute]
public IBsonSerializer`1<TAsElement> get_AsElementSerializer();
    [CompilerGeneratedAttribute]
public void set_AsElementSerializer(IBsonSerializer`1<TAsElement> value);
    [CompilerGeneratedAttribute]
public IBsonSerializer`1<TFrom> get_FromSerializer();
    [CompilerGeneratedAttribute]
public void set_FromSerializer(IBsonSerializer`1<TFrom> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxDepth();
    [CompilerGeneratedAttribute]
public void set_MaxDepth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IBsonSerializer`1<TOutput> get_OutputSerializer();
    [CompilerGeneratedAttribute]
public void set_OutputSerializer(IBsonSerializer`1<TOutput> value);
    [CompilerGeneratedAttribute]
public FilterDefinition`1<TFrom> get_RestrictSearchWithMatch();
    [CompilerGeneratedAttribute]
public void set_RestrictSearchWithMatch(FilterDefinition`1<TFrom> value);
}
public class MongoDB.Driver.AggregateLookupOptions`2 : object {
    private IBsonSerializer`1<TForeignDocument> _foreignSerializer;
    private IBsonSerializer`1<TResult> _resultSerializer;
    public IBsonSerializer`1<TForeignDocument> ForeignSerializer { get; public set; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; public set; }
    public IBsonSerializer`1<TForeignDocument> get_ForeignSerializer();
    public void set_ForeignSerializer(IBsonSerializer`1<TForeignDocument> value);
    public IBsonSerializer`1<TResult> get_ResultSerializer();
    public void set_ResultSerializer(IBsonSerializer`1<TResult> value);
}
public class MongoDB.Driver.AggregateOptions : object {
    private Nullable`1<bool> _allowDiskUse;
    private Nullable`1<int> _batchSize;
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private BsonDocument _let;
    private Nullable`1<TimeSpan> _maxAwaitTime;
    private Nullable`1<TimeSpan> _maxTime;
    private ExpressionTranslationOptions _translationOptions;
    private Nullable`1<bool> _useCursor;
    public Nullable`1<bool> AllowDiskUse { get; public set; }
    public Nullable`1<int> BatchSize { get; public set; }
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public BsonDocument Let { get; public set; }
    public Nullable`1<TimeSpan> MaxAwaitTime { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public ExpressionTranslationOptions TranslationOptions { get; public set; }
    [ObsoleteAttribute("Server versions 3.6 and newer always use a cursor.")]
public Nullable`1<bool> UseCursor { get; public set; }
    public Nullable`1<bool> get_AllowDiskUse();
    public void set_AllowDiskUse(Nullable`1<bool> value);
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
    public Nullable`1<TimeSpan> get_MaxAwaitTime();
    public void set_MaxAwaitTime(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public ExpressionTranslationOptions get_TranslationOptions();
    public void set_TranslationOptions(ExpressionTranslationOptions value);
    public Nullable`1<bool> get_UseCursor();
    public void set_UseCursor(Nullable`1<bool> value);
}
public class MongoDB.Driver.AggregateSortByCountResult`1 : object {
    private long _count;
    private TId _id;
    [BsonElementAttribute("count")]
public long Count { get; }
    [BsonElementAttribute("_id")]
public TId Id { get; }
    public AggregateSortByCountResult`1(TId id, long count);
    public long get_Count();
    public TId get_Id();
}
public enum MongoDB.Driver.AggregateStringTranslationMode : Enum {
    public int value__;
    public static AggregateStringTranslationMode Bytes;
    public static AggregateStringTranslationMode CodePoints;
}
public class MongoDB.Driver.AggregateUnwindOptions`1 : object {
    private FieldDefinition`1<TResult> _includeArrayIndex;
    private Nullable`1<bool> _preserveNullAndEmptyArrays;
    private IBsonSerializer`1<TResult> _resultSerializer;
    public FieldDefinition`1<TResult> IncludeArrayIndex { get; public set; }
    public Nullable`1<bool> PreserveNullAndEmptyArrays { get; public set; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; public set; }
    public FieldDefinition`1<TResult> get_IncludeArrayIndex();
    public void set_IncludeArrayIndex(FieldDefinition`1<TResult> value);
    public Nullable`1<bool> get_PreserveNullAndEmptyArrays();
    public void set_PreserveNullAndEmptyArrays(Nullable`1<bool> value);
    public IBsonSerializer`1<TResult> get_ResultSerializer();
    public void set_ResultSerializer(IBsonSerializer`1<TResult> value);
}
internal class MongoDB.Driver.AndFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private static String[] __operatorsThatCannotBeCombined;
    private List`1<FilterDefinition`1<TDocument>> _filters;
    public AndFilterDefinition`1(IEnumerable`1<FilterDefinition`1<TDocument>> filters);
    private static AndFilterDefinition`1();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    private static void AddClause(BsonDocument document, BsonElement clause);
    private static void PromoteFilterToDollarForm(BsonDocument document, Nullable`1<BsonElement> clause);
    [CompilerGeneratedAttribute]
internal static bool <AddClause>g__IsFieldName|4_0(string fieldOrOperatorName);
}
public class MongoDB.Driver.AppendedStagePipelineDefinition`3 : PipelineDefinition`2<TInput, TOutput> {
    private IBsonSerializer`1<TOutput> _outputSerializer;
    private PipelineDefinition`2<TInput, TIntermediate> _pipeline;
    private PipelineStageDefinition`2<TIntermediate, TOutput> _stage;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public AppendedStagePipelineDefinition`3(PipelineDefinition`2<TInput, TIntermediate> pipeline, PipelineStageDefinition`2<TIntermediate, TOutput> stage, IBsonSerializer`1<TOutput> outputSerializer);
    public virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
internal class MongoDB.Driver.ArrayAsSingleItemOperatorFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`1<TDocument> _field;
    private TItem _value;
    public ArrayAsSingleItemOperatorFilterDefinition`2(string operatorName, FieldDefinition`1<TDocument> field, TItem value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.ArrayAsSingleItemSimpleFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private TItem _value;
    public ArrayAsSingleItemSimpleFilterDefinition`2(FieldDefinition`1<TDocument> field, TItem value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public abstract class MongoDB.Driver.ArrayFilterDefinition : object {
    public Type ItemType { get; }
    public abstract virtual Type get_ItemType();
    public abstract virtual BsonDocument Render(IBsonSerializer itemSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
public abstract class MongoDB.Driver.ArrayFilterDefinition`1 : ArrayFilterDefinition {
    public Type ItemType { get; }
    public virtual Type get_ItemType();
    public static ArrayFilterDefinition`1<TItem> op_Implicit(BsonDocument document);
    public static ArrayFilterDefinition`1<TItem> op_Implicit(string json);
    public abstract virtual BsonDocument Render(IBsonSerializer`1<TItem> itemSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
internal class MongoDB.Driver.ArrayIndexExistsFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private int _index;
    private bool _exists;
    public ArrayIndexExistsFilterDefinition`1(FieldDefinition`1<TDocument> field, int index, bool exists);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.ArrayOperatorFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`1<TDocument> _field;
    private IEnumerable`1<TItem> _values;
    public ArrayOperatorFilterDefinition`2(string operatorName, FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal static class MongoDB.Driver.AsyncCursorHelper : object {
    [AsyncStateMachineAttribute("MongoDB.Driver.AsyncCursorHelper/<AnyAsync>d__0`1")]
public static Task`1<bool> AnyAsync(Task`1<IAsyncCursor`1<T>> cursorTask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.AsyncCursorHelper/<FirstAsync>d__1`1")]
public static Task`1<T> FirstAsync(Task`1<IAsyncCursor`1<T>> cursorTask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.AsyncCursorHelper/<FirstOrDefaultAsync>d__2`1")]
public static Task`1<T> FirstOrDefaultAsync(Task`1<IAsyncCursor`1<T>> cursorTask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.AsyncCursorHelper/<SingleAsync>d__3`1")]
public static Task`1<T> SingleAsync(Task`1<IAsyncCursor`1<T>> cursorTask, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.AsyncCursorHelper/<SingleOrDefaultAsync>d__4`1")]
public static Task`1<T> SingleOrDefaultAsync(Task`1<IAsyncCursor`1<T>> cursorTask, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.BitwiseOperatorUpdateDefinition`2 : UpdateDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, TField> _field;
    private TField _value;
    public BitwiseOperatorUpdateDefinition`2(string operatorName, FieldDefinition`2<TDocument, TField> field, TField value);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.BsonDocumentArrayFilterDefinition`1 : ArrayFilterDefinition`1<TItem> {
    private BsonDocument _document;
    public BsonDocument Document { get; }
    public BsonDocumentArrayFilterDefinition`1(BsonDocument document);
    public BsonDocument get_Document();
    public virtual BsonDocument Render(IBsonSerializer itemSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public virtual BsonDocument Render(IBsonSerializer`1<TItem> itemSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
public class MongoDB.Driver.BsonDocumentCommand`1 : Command`1<TResult> {
    private BsonDocument _document;
    private IBsonSerializer`1<TResult> _resultSerializer;
    public BsonDocument Document { get; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; }
    public BsonDocumentCommand`1(BsonDocument document, IBsonSerializer`1<TResult> resultSerializer);
    public BsonDocument get_Document();
    public IBsonSerializer`1<TResult> get_ResultSerializer();
    public virtual RenderedCommand`1<TResult> Render(IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Driver.BsonDocumentFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private BsonDocument _document;
    public BsonDocument Document { get; }
    public BsonDocumentFilterDefinition`1(BsonDocument document);
    public BsonDocument get_Document();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.BsonDocumentIndexKeysDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private BsonDocument _document;
    public BsonDocument Document { get; }
    public BsonDocumentIndexKeysDefinition`1(BsonDocument document);
    public BsonDocument get_Document();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.BsonDocumentPipelineStageDefinition`2 : PipelineStageDefinition`2<TInput, TOutput> {
    private BsonDocument _document;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public string OperatorName { get; }
    public BsonDocumentPipelineStageDefinition`2(BsonDocument document, IBsonSerializer`1<TOutput> outputSerializer);
    public virtual string get_OperatorName();
    public virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.BsonDocumentProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private BsonDocument _document;
    public BsonDocument Document { get; }
    public BsonDocumentProjectionDefinition`1(BsonDocument document);
    public BsonDocument get_Document();
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.BsonDocumentProjectionDefinition`2 : ProjectionDefinition`2<TSource, TProjection> {
    private BsonDocument _document;
    private IBsonSerializer`1<TProjection> _projectionSerializer;
    public BsonDocument Document { get; }
    public IBsonSerializer`1<TProjection> ProjectionSerializer { get; }
    public BsonDocumentProjectionDefinition`2(BsonDocument document, IBsonSerializer`1<TProjection> projectionSerializer);
    public BsonDocument get_Document();
    public IBsonSerializer`1<TProjection> get_ProjectionSerializer();
    public virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.BsonDocumentSortDefinition`1 : SortDefinition`1<TDocument> {
    private BsonDocument _document;
    public BsonDocument Document { get; }
    public BsonDocumentSortDefinition`1(BsonDocument document);
    public BsonDocument get_Document();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.BsonDocumentStagePipelineDefinition`2 : PipelineDefinition`2<TInput, TOutput> {
    private IBsonSerializer`1<TOutput> _outputSerializer;
    private List`1<BsonDocument> _stages;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public IList`1<BsonDocument> Documents { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public BsonDocumentStagePipelineDefinition`2(IEnumerable`1<BsonDocument> stages, IBsonSerializer`1<TOutput> outputSerializer);
    public virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public IList`1<BsonDocument> get_Documents();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    [CompilerGeneratedAttribute]
private BsonDocumentPipelineStageDefinition`2<TInput, TOutput> <get_Stages>b__8_0(BsonDocument s);
}
public class MongoDB.Driver.BsonDocumentUpdateDefinition`1 : UpdateDefinition`1<TDocument> {
    private BsonDocument _document;
    public BsonDocument Document { get; }
    public BsonDocumentUpdateDefinition`1(BsonDocument document);
    public BsonDocument get_Document();
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.BsonValueAggregateExpressionDefinition`2 : AggregateExpressionDefinition`2<TSource, TResult> {
    private BsonValue _expression;
    public BsonValueAggregateExpressionDefinition`2(BsonValue expression);
    public virtual BsonValue Render(RenderArgs`1<TSource> args);
}
public static class MongoDB.Driver.Builders`1 : object {
    [CompilerGeneratedAttribute]
private static FilterDefinitionBuilder`1<TDocument> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private static IndexKeysDefinitionBuilder`1<TDocument> <IndexKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private static ProjectionDefinitionBuilder`1<TDocument> <Projection>k__BackingField;
    [CompilerGeneratedAttribute]
private static SetFieldDefinitionsBuilder`1<TDocument> <SetFields>k__BackingField;
    [CompilerGeneratedAttribute]
private static SortDefinitionBuilder`1<TDocument> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private static UpdateDefinitionBuilder`1<TDocument> <Update>k__BackingField;
    [CompilerGeneratedAttribute]
private static SearchFacetBuilder`1<TDocument> <SearchFacet>k__BackingField;
    [CompilerGeneratedAttribute]
private static SearchPathDefinitionBuilder`1<TDocument> <SearchPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static SearchScoreDefinitionBuilder`1<TDocument> <SearchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private static SearchScoreFunctionBuilder`1<TDocument> <SearchScoreFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private static SearchDefinitionBuilder`1<TDocument> <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private static SearchSpanDefinitionBuilder`1<TDocument> <SearchSpan>k__BackingField;
    public static FilterDefinitionBuilder`1<TDocument> Filter { get; }
    public static IndexKeysDefinitionBuilder`1<TDocument> IndexKeys { get; }
    public static ProjectionDefinitionBuilder`1<TDocument> Projection { get; }
    public static SetFieldDefinitionsBuilder`1<TDocument> SetFields { get; }
    public static SortDefinitionBuilder`1<TDocument> Sort { get; }
    public static UpdateDefinitionBuilder`1<TDocument> Update { get; }
    public static SearchFacetBuilder`1<TDocument> SearchFacet { get; }
    public static SearchPathDefinitionBuilder`1<TDocument> SearchPath { get; }
    public static SearchScoreDefinitionBuilder`1<TDocument> SearchScore { get; }
    public static SearchScoreFunctionBuilder`1<TDocument> SearchScoreFunction { get; }
    public static SearchDefinitionBuilder`1<TDocument> Search { get; }
    public static SearchSpanDefinitionBuilder`1<TDocument> SearchSpan { get; }
    private static Builders`1();
    [CompilerGeneratedAttribute]
public static FilterDefinitionBuilder`1<TDocument> get_Filter();
    [CompilerGeneratedAttribute]
public static IndexKeysDefinitionBuilder`1<TDocument> get_IndexKeys();
    [CompilerGeneratedAttribute]
public static ProjectionDefinitionBuilder`1<TDocument> get_Projection();
    [CompilerGeneratedAttribute]
public static SetFieldDefinitionsBuilder`1<TDocument> get_SetFields();
    [CompilerGeneratedAttribute]
public static SortDefinitionBuilder`1<TDocument> get_Sort();
    [CompilerGeneratedAttribute]
public static UpdateDefinitionBuilder`1<TDocument> get_Update();
    [CompilerGeneratedAttribute]
public static SearchFacetBuilder`1<TDocument> get_SearchFacet();
    [CompilerGeneratedAttribute]
public static SearchPathDefinitionBuilder`1<TDocument> get_SearchPath();
    [CompilerGeneratedAttribute]
public static SearchScoreDefinitionBuilder`1<TDocument> get_SearchScore();
    [CompilerGeneratedAttribute]
public static SearchScoreFunctionBuilder`1<TDocument> get_SearchScoreFunction();
    [CompilerGeneratedAttribute]
public static SearchDefinitionBuilder`1<TDocument> get_Search();
    [CompilerGeneratedAttribute]
public static SearchSpanDefinitionBuilder`1<TDocument> get_SearchSpan();
}
public class MongoDB.Driver.BulkWriteError : WriteError {
    private int _index;
    public int Index { get; }
    internal BulkWriteError(int index, ServerErrorCategory category, int code, string message, BsonDocument details);
    public int get_Index();
    internal static BulkWriteError FromCore(BulkWriteOperationError error);
    internal BulkWriteError WithMappedIndex(IndexMap indexMap);
}
public class MongoDB.Driver.BulkWriteOptions : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private BsonValue _comment;
    private bool _isOrdered;
    private BsonDocument _let;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public BsonValue Comment { get; public set; }
    public bool IsOrdered { get; public set; }
    public BsonDocument Let { get; public set; }
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public bool get_IsOrdered();
    public void set_IsOrdered(bool value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
}
public abstract class MongoDB.Driver.BulkWriteResult : object {
    private int _requestCount;
    public long DeletedCount { get; }
    public long InsertedCount { get; }
    public bool IsAcknowledged { get; }
    public bool IsModifiedCountAvailable { get; }
    public long MatchedCount { get; }
    public long ModifiedCount { get; }
    public int RequestCount { get; }
    public IReadOnlyList`1<BulkWriteUpsert> Upserts { get; }
    protected BulkWriteResult(int requestCount);
    public abstract virtual long get_DeletedCount();
    public abstract virtual long get_InsertedCount();
    public abstract virtual bool get_IsAcknowledged();
    public abstract virtual bool get_IsModifiedCountAvailable();
    public abstract virtual long get_MatchedCount();
    public abstract virtual long get_ModifiedCount();
    public int get_RequestCount();
    public abstract virtual IReadOnlyList`1<BulkWriteUpsert> get_Upserts();
}
public abstract class MongoDB.Driver.BulkWriteResult`1 : BulkWriteResult {
    private IReadOnlyList`1<WriteModel`1<TDocument>> _processedRequests;
    public IReadOnlyList`1<WriteModel`1<TDocument>> ProcessedRequests { get; }
    protected BulkWriteResult`1(int requestCount, IReadOnlyList`1<WriteModel`1<TDocument>> processedRequests);
    public IReadOnlyList`1<WriteModel`1<TDocument>> get_ProcessedRequests();
    internal static BulkWriteResult`1<TDocument> FromCore(BulkWriteOperationResult result);
    internal static BulkWriteResult`1<TDocument> FromCore(BulkWriteOperationResult result, IReadOnlyList`1<WriteModel`1<TDocument>> requests);
}
public class MongoDB.Driver.BulkWriteUpsert : object {
    private BsonValue _id;
    private int _index;
    public BsonValue Id { get; }
    public int Index { get; }
    internal BulkWriteUpsert(int index, BsonValue id);
    public BsonValue get_Id();
    public int get_Index();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static BulkWriteUpsert FromCore(BulkWriteOperationUpsert upsert);
    internal BulkWriteUpsert WithMappedIndex(IndexMap indexMap);
}
internal static class MongoDB.Driver.ChangeStreamHelper : object {
    public static ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, ReadConcern readConcern, MessageEncoderSettings messageEncoderSettings, bool retryRequested);
    public static ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, LinqProvider linqProvider, ChangeStreamOptions options, ReadConcern readConcern, MessageEncoderSettings messageEncoderSettings, bool retryRequested);
    public static ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(IMongoDatabase database, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, ReadConcern readConcern, MessageEncoderSettings messageEncoderSettings, bool retryRequested);
    public static ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(IMongoDatabase database, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, LinqProvider linqProvider, ChangeStreamOptions options, ReadConcern readConcern, MessageEncoderSettings messageEncoderSettings, bool retryRequested);
    public static ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(IMongoCollection`1<TDocument> collection, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, IBsonSerializer`1<TDocument> documentSerializer, ChangeStreamOptions options, ReadConcern readConcern, MessageEncoderSettings messageEncoderSettings, bool retryRequested);
    public static ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(IMongoCollection`1<TDocument> collection, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, IBsonSerializer`1<TDocument> documentSerializer, LinqProvider linqProvider, ChangeStreamOptions options, ReadConcern readConcern, MessageEncoderSettings messageEncoderSettings, bool retryRequested);
    private static RenderedPipelineDefinition`1<TResult> RenderPipeline(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, IBsonSerializer`1<TDocument> documentSerializer, LinqProvider linqProvider);
    private static void SetOperationOptions(ChangeStreamOperation`1<TResult> operation, ChangeStreamOptions options, ReadConcern readConcern);
}
public class MongoDB.Driver.ChangeStreamOptions : object {
    private Nullable`1<int> _batchSize;
    private Collation _collation;
    private BsonValue _comment;
    private ChangeStreamFullDocumentOption _fullDocument;
    private ChangeStreamFullDocumentBeforeChangeOption _fullDocumentBeforeChange;
    private Nullable`1<TimeSpan> _maxAwaitTime;
    private BsonDocument _resumeAfter;
    private Nullable`1<bool> _showExpandedEvents;
    private BsonDocument _startAfter;
    private BsonTimestamp _startAtOperationTime;
    public Nullable`1<int> BatchSize { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public ChangeStreamFullDocumentOption FullDocument { get; public set; }
    public ChangeStreamFullDocumentBeforeChangeOption FullDocumentBeforeChange { get; public set; }
    public Nullable`1<TimeSpan> MaxAwaitTime { get; public set; }
    public BsonDocument ResumeAfter { get; public set; }
    public Nullable`1<bool> ShowExpandedEvents { get; public set; }
    public BsonDocument StartAfter { get; public set; }
    public BsonTimestamp StartAtOperationTime { get; public set; }
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public ChangeStreamFullDocumentOption get_FullDocument();
    public void set_FullDocument(ChangeStreamFullDocumentOption value);
    public ChangeStreamFullDocumentBeforeChangeOption get_FullDocumentBeforeChange();
    public void set_FullDocumentBeforeChange(ChangeStreamFullDocumentBeforeChangeOption value);
    public Nullable`1<TimeSpan> get_MaxAwaitTime();
    public void set_MaxAwaitTime(Nullable`1<TimeSpan> value);
    public BsonDocument get_ResumeAfter();
    public void set_ResumeAfter(BsonDocument value);
    public Nullable`1<bool> get_ShowExpandedEvents();
    public void set_ShowExpandedEvents(Nullable`1<bool> value);
    public BsonDocument get_StartAfter();
    public void set_StartAfter(BsonDocument value);
    public BsonTimestamp get_StartAtOperationTime();
    public void set_StartAtOperationTime(BsonTimestamp value);
}
public class MongoDB.Driver.ChangeStreamPreAndPostImagesOptions : BsonDocumentBackedClass {
    public BsonDocument BackingDocument { get; }
    public bool Enabled { get; public set; }
    public ChangeStreamPreAndPostImagesOptions(BsonDocument bsonDocument);
    public BsonDocument get_BackingDocument();
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
internal class MongoDB.Driver.ChangeStreamPreAndPostImagesOptionsSerializer : BsonDocumentBackedClassSerializer`1<ChangeStreamPreAndPostImagesOptions> {
    [CompilerGeneratedAttribute]
private static ChangeStreamPreAndPostImagesOptionsSerializer <Instance>k__BackingField;
    public static ChangeStreamPreAndPostImagesOptionsSerializer Instance { get; }
    private static ChangeStreamPreAndPostImagesOptionsSerializer();
    [CompilerGeneratedAttribute]
public static ChangeStreamPreAndPostImagesOptionsSerializer get_Instance();
    protected virtual ChangeStreamPreAndPostImagesOptions CreateInstance(BsonDocument backingDocument);
}
public class MongoDB.Driver.ChangeStreamStageOptions : object {
    private Nullable`1<bool> _allChangesForCluster;
    private ChangeStreamFullDocumentOption _fullDocument;
    private BsonDocument _resumeAfter;
    private BsonDocument _startAfter;
    private BsonTimestamp _startAtOperationTime;
    public Nullable`1<bool> AllChangesForCluster { get; public set; }
    public ChangeStreamFullDocumentOption FullDocument { get; public set; }
    public BsonDocument ResumeAfter { get; public set; }
    public BsonDocument StartAfter { get; public set; }
    public BsonTimestamp StartAtOperationTime { get; public set; }
    public Nullable`1<bool> get_AllChangesForCluster();
    public void set_AllChangesForCluster(Nullable`1<bool> value);
    public ChangeStreamFullDocumentOption get_FullDocument();
    public void set_FullDocument(ChangeStreamFullDocumentOption value);
    public BsonDocument get_ResumeAfter();
    public void set_ResumeAfter(BsonDocument value);
    public BsonDocument get_StartAfter();
    public void set_StartAfter(BsonDocument value);
    public BsonTimestamp get_StartAtOperationTime();
    public void set_StartAtOperationTime(BsonTimestamp value);
}
internal class MongoDB.Driver.ClientSessionHandle : object {
    private IMongoClient _client;
    private IClock _clock;
    private ICoreSessionHandle _coreSession;
    private bool _disposed;
    private ClientSessionOptions _options;
    private IServerSession _serverSession;
    public IMongoClient Client { get; }
    public BsonDocument ClusterTime { get; }
    public bool IsImplicit { get; }
    public bool IsInTransaction { get; }
    public BsonTimestamp OperationTime { get; }
    public ClientSessionOptions Options { get; }
    public IServerSession ServerSession { get; }
    public ICoreSessionHandle WrappedCoreSession { get; }
    public ClientSessionHandle(IMongoClient client, ClientSessionOptions options, ICoreSessionHandle coreSession);
    internal ClientSessionHandle(IMongoClient client, ClientSessionOptions options, ICoreSessionHandle coreSession, IClock clock);
    public sealed virtual IMongoClient get_Client();
    public sealed virtual BsonDocument get_ClusterTime();
    public sealed virtual bool get_IsImplicit();
    public sealed virtual bool get_IsInTransaction();
    public sealed virtual BsonTimestamp get_OperationTime();
    public sealed virtual ClientSessionOptions get_Options();
    public sealed virtual IServerSession get_ServerSession();
    public sealed virtual ICoreSessionHandle get_WrappedCoreSession();
    public sealed virtual void AbortTransaction(CancellationToken cancellationToken);
    public sealed virtual Task AbortTransactionAsync(CancellationToken cancellationToken);
    public sealed virtual void AdvanceClusterTime(BsonDocument newClusterTime);
    public sealed virtual void AdvanceOperationTime(BsonTimestamp newOperationTime);
    public sealed virtual void CommitTransaction(CancellationToken cancellationToken);
    public sealed virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public sealed virtual IClientSessionHandle Fork();
    public sealed virtual void StartTransaction(TransactionOptions transactionOptions);
    public sealed virtual TResult WithTransaction(Func`3<IClientSessionHandle, CancellationToken, TResult> callback, TransactionOptions transactionOptions, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> WithTransactionAsync(Func`3<IClientSessionHandle, CancellationToken, Task`1<TResult>> callbackAsync, TransactionOptions transactionOptions, CancellationToken cancellationToken);
    private TransactionOptions GetEffectiveTransactionOptions(TransactionOptions transactionOptions);
}
public class MongoDB.Driver.ClientSessionOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CausalConsistency>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionOptions <DefaultTransactionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Snapshot>k__BackingField;
    public Nullable`1<bool> CausalConsistency { get; public set; }
    public TransactionOptions DefaultTransactionOptions { get; public set; }
    public bool Snapshot { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CausalConsistency();
    [CompilerGeneratedAttribute]
public void set_CausalConsistency(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public TransactionOptions get_DefaultTransactionOptions();
    [CompilerGeneratedAttribute]
public void set_DefaultTransactionOptions(TransactionOptions value);
    [CompilerGeneratedAttribute]
public bool get_Snapshot();
    [CompilerGeneratedAttribute]
public void set_Snapshot(bool value);
    internal CoreSessionOptions ToCore(bool isImplicit);
}
public class MongoDB.Driver.ClientSideDeserializationProjectionDefinition`2 : ProjectionDefinition`2<TSource, TProjection> {
    private IBsonSerializer`1<TProjection> _projectionSerializer;
    public IBsonSerializer`1<TProjection> ResultSerializer { get; }
    public ClientSideDeserializationProjectionDefinition`2(IBsonSerializer`1<TProjection> projectionSerializer);
    public IBsonSerializer`1<TProjection> get_ResultSerializer();
    public virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.ClusteredIndexOptions`1 : object {
    private IndexKeysDefinition`1<TDocument> _key;
    private string _name;
    private bool _unique;
    public IndexKeysDefinition`1<TDocument> Key { get; public set; }
    public string Name { get; public set; }
    public bool Unique { get; public set; }
    public IndexKeysDefinition`1<TDocument> get_Key();
    public void set_Key(IndexKeysDefinition`1<TDocument> value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_Unique();
    public void set_Unique(bool value);
    internal BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
}
internal class MongoDB.Driver.ClusterKey : object {
    private bool _allowInsecureTls;
    private string _applicationName;
    private Action`1<ClusterBuilder> _clusterConfigurator;
    private IReadOnlyList`1<CompressorConfiguration> _compressors;
    private ConnectionMode _connectionMode;
    private ConnectionModeSwitch _connectionModeSwitch;
    private TimeSpan _connectTimeout;
    private IReadOnlyList`1<MongoCredential> _credentials;
    private CryptClientSettings _cryptClientSettings;
    private Nullable`1<bool> _directConnection;
    private int _hashCode;
    private TimeSpan _heartbeatInterval;
    private TimeSpan _heartbeatTimeout;
    private bool _ipv6;
    private LibraryInfo _libraryInfo;
    private bool _loadBalanced;
    private TimeSpan _localThreshold;
    private LoggingSettings _loggingSettings;
    private int _maxConnecting;
    private TimeSpan _maxConnectionIdleTime;
    private TimeSpan _maxConnectionLifeTime;
    private int _maxConnectionPoolSize;
    private int _minConnectionPoolSize;
    private int _receiveBufferSize;
    private string _replicaSetName;
    private ConnectionStringScheme _scheme;
    private string _sdamLogFilename;
    private int _sendBufferSize;
    private ServerApi _serverApi;
    private IReadOnlyList`1<MongoServerAddress> _servers;
    private ServerMonitoringMode _serverMonitoringMode;
    private TimeSpan _serverSelectionTimeout;
    private TimeSpan _socketTimeout;
    private int _srvMaxHosts;
    private string _srvServiceName;
    private SslSettings _sslSettings;
    private bool _useTls;
    private int _waitQueueSize;
    private TimeSpan _waitQueueTimeout;
    public bool AllowInsecureTls { get; }
    public string ApplicationName { get; }
    public Action`1<ClusterBuilder> ClusterConfigurator { get; }
    public IReadOnlyList`1<CompressorConfiguration> Compressors { get; }
    [ObsoleteAttribute("Use DirectConnection instead.")]
public ConnectionMode ConnectionMode { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public ConnectionModeSwitch ConnectionModeSwitch { get; }
    public TimeSpan ConnectTimeout { get; }
    public IReadOnlyList`1<MongoCredential> Credentials { get; }
    public CryptClientSettings CryptClientSettings { get; }
    public Nullable`1<bool> DirectConnection { get; }
    public TimeSpan HeartbeatInterval { get; }
    public TimeSpan HeartbeatTimeout { get; }
    public bool IPv6 { get; }
    public LibraryInfo LibraryInfo { get; }
    public bool LoadBalanced { get; }
    public TimeSpan LocalThreshold { get; }
    public LoggingSettings LoggingSettings { get; }
    public int MaxConnecting { get; }
    public TimeSpan MaxConnectionIdleTime { get; }
    public TimeSpan MaxConnectionLifeTime { get; }
    public int MaxConnectionPoolSize { get; }
    public int MinConnectionPoolSize { get; }
    public int ReceiveBufferSize { get; }
    public string ReplicaSetName { get; }
    public ConnectionStringScheme Scheme { get; }
    public string SdamLogFilename { get; }
    public int SendBufferSize { get; }
    public ServerApi ServerApi { get; }
    public IReadOnlyList`1<MongoServerAddress> Servers { get; }
    public ServerMonitoringMode ServerMonitoringMode { get; }
    public TimeSpan ServerSelectionTimeout { get; }
    public TimeSpan SocketTimeout { get; }
    public int SrvMaxHosts { get; }
    public string SrvServiceName { get; }
    public SslSettings SslSettings { get; }
    public bool UseTls { get; }
    public int WaitQueueSize { get; }
    public TimeSpan WaitQueueTimeout { get; }
    public ClusterKey(bool allowInsecureTls, string applicationName, Action`1<ClusterBuilder> clusterConfigurator, IReadOnlyList`1<CompressorConfiguration> compressors, ConnectionMode connectionMode, ConnectionModeSwitch connectionModeSwitch, TimeSpan connectTimeout, IReadOnlyList`1<MongoCredential> credentials, CryptClientSettings cryptClientSettings, Nullable`1<bool> directConnection, TimeSpan heartbeatInterval, TimeSpan heartbeatTimeout, bool ipv6, LibraryInfo libraryInfo, bool loadBalanced, TimeSpan localThreshold, LoggingSettings loggingSettings, int maxConnecting, TimeSpan maxConnectionIdleTime, TimeSpan maxConnectionLifeTime, int maxConnectionPoolSize, int minConnectionPoolSize, int receiveBufferSize, string replicaSetName, ConnectionStringScheme scheme, string sdamLogFilename, int sendBufferSize, ServerApi serverApi, IReadOnlyList`1<MongoServerAddress> servers, ServerMonitoringMode serverMonitoringMode, TimeSpan serverSelectionTimeout, TimeSpan socketTimeout, int srvMaxHosts, string srvServiceName, SslSettings sslSettings, bool useTls, int waitQueueSize, TimeSpan waitQueueTimeout);
    public bool get_AllowInsecureTls();
    public string get_ApplicationName();
    public Action`1<ClusterBuilder> get_ClusterConfigurator();
    public IReadOnlyList`1<CompressorConfiguration> get_Compressors();
    public ConnectionMode get_ConnectionMode();
    public ConnectionModeSwitch get_ConnectionModeSwitch();
    public TimeSpan get_ConnectTimeout();
    public IReadOnlyList`1<MongoCredential> get_Credentials();
    public CryptClientSettings get_CryptClientSettings();
    public Nullable`1<bool> get_DirectConnection();
    public TimeSpan get_HeartbeatInterval();
    public TimeSpan get_HeartbeatTimeout();
    public bool get_IPv6();
    public LibraryInfo get_LibraryInfo();
    public bool get_LoadBalanced();
    public TimeSpan get_LocalThreshold();
    public LoggingSettings get_LoggingSettings();
    public int get_MaxConnecting();
    public TimeSpan get_MaxConnectionIdleTime();
    public TimeSpan get_MaxConnectionLifeTime();
    public int get_MaxConnectionPoolSize();
    public int get_MinConnectionPoolSize();
    public int get_ReceiveBufferSize();
    public string get_ReplicaSetName();
    public ConnectionStringScheme get_Scheme();
    public string get_SdamLogFilename();
    public int get_SendBufferSize();
    public ServerApi get_ServerApi();
    public IReadOnlyList`1<MongoServerAddress> get_Servers();
    public ServerMonitoringMode get_ServerMonitoringMode();
    public TimeSpan get_ServerSelectionTimeout();
    public TimeSpan get_SocketTimeout();
    public int get_SrvMaxHosts();
    public string get_SrvServiceName();
    public SslSettings get_SslSettings();
    public bool get_UseTls();
    public int get_WaitQueueSize();
    public TimeSpan get_WaitQueueTimeout();
    private int CalculateHashCode();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class MongoDB.Driver.ClusterRegistry : object {
    private static ClusterRegistry __instance;
    private object _lock;
    private Dictionary`2<ClusterKey, ICluster> _registry;
    public static ClusterRegistry Instance { get; }
    private static ClusterRegistry();
    public static ClusterRegistry get_Instance();
    private ICluster CreateCluster(ClusterKey clusterKey);
    private ClusterSettings ConfigureCluster(ClusterSettings settings, ClusterKey clusterKey);
    private ConnectionPoolSettings ConfigureConnectionPool(ConnectionPoolSettings settings, ClusterKey clusterKey);
    private ConnectionSettings ConfigureConnection(ConnectionSettings settings, ClusterKey clusterKey);
    private SdamLoggingSettings ConfigureSdamLogging(SdamLoggingSettings settings, ClusterKey clusterKey);
    private ServerSettings ConfigureServer(ServerSettings settings, ClusterKey clusterKey);
    private SslStreamSettings ConfigureSsl(SslStreamSettings settings, ClusterKey clusterKey);
    private TcpStreamSettings ConfigureTcp(TcpStreamSettings settings, ClusterKey clusterKey);
    internal ICluster GetOrCreateCluster(ClusterKey clusterKey);
    private static bool AcceptAnySslCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    public void UnregisterAndDisposeCluster(ICluster cluster);
}
internal class MongoDB.Driver.CollectionAggregateFluent`2 : AggregateFluent`2<TDocument, TResult> {
    private IMongoCollection`1<TDocument> _collection;
    public IMongoDatabase Database { get; }
    public CollectionAggregateFluent`2(IClientSessionHandle session, IMongoCollection`1<TDocument> collection, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options);
    public virtual IMongoDatabase get_Database();
    public virtual void ToCollection(CancellationToken cancellationToken);
    public virtual Task ToCollectionAsync(CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> ToCursor(CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> ToCursorAsync(CancellationToken cancellationToken);
    protected virtual IAggregateFluent`1<TNewResult> WithPipeline(PipelineDefinition`2<TDocument, TNewResult> pipeline);
}
internal class MongoDB.Driver.CombinedIndexKeysDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private List`1<IndexKeysDefinition`1<TDocument>> _keys;
    public CombinedIndexKeysDefinition`1(IEnumerable`1<IndexKeysDefinition`1<TDocument>> keys);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.CombinedProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private List`1<ProjectionDefinition`1<TSource>> _projections;
    public CombinedProjectionDefinition`1(IEnumerable`1<ProjectionDefinition`1<TSource>> projections);
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
internal class MongoDB.Driver.CombinedSortDefinition`1 : SortDefinition`1<TDocument> {
    private List`1<SortDefinition`1<TDocument>> _sorts;
    public CombinedSortDefinition`1(IEnumerable`1<SortDefinition`1<TDocument>> sorts);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.CombinedUpdateDefinition`1 : UpdateDefinition`1<TDocument> {
    private List`1<UpdateDefinition`1<TDocument>> _updates;
    public CombinedUpdateDefinition`1(IEnumerable`1<UpdateDefinition`1<TDocument>> updates);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
    private void ThrowIfPipelineUpdateDefinitionIsCombinedWithOtherUpdates(List`1<UpdateDefinition`1<TDocument>> updates);
}
public abstract class MongoDB.Driver.Command`1 : object {
    public abstract virtual RenderedCommand`1<TResult> Render(IBsonSerializerRegistry serializerRegistry);
    public static Command`1<TResult> op_Implicit(BsonDocument document);
    public static Command`1<TResult> op_Implicit(string json);
}
[ObsoleteAttribute("Use DirectConnection instead.")]
public enum MongoDB.Driver.ConnectionMode : Enum {
    public int value__;
    public static ConnectionMode Automatic;
    public static ConnectionMode Direct;
    public static ConnectionMode ReplicaSet;
    public static ConnectionMode ShardRouter;
    public static ConnectionMode Standalone;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.ConnectionModeExtensionMethods : object {
    [ExtensionAttribute]
public static ClusterConnectionMode ToCore(ConnectionMode value);
}
internal static class MongoDB.Driver.ConnectionModeHelper : object {
    public static void EnsureConnectionModeValuesAreValid(ConnectionMode connectionMode, ConnectionModeSwitch connectionModeSwitch, Nullable`1<bool> directConnection);
}
public class MongoDB.Driver.ConstantSetFieldDefinition`2 : SetFieldDefinition`1<TDocument> {
    private FieldDefinition`2<TDocument, TField> _field;
    private TField _value;
    public ConstantSetFieldDefinition`2(FieldDefinition`2<TDocument, TField> field, TField value);
    public virtual BsonElement Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.CountOptions : object {
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private Nullable`1<long> _limit;
    private Nullable`1<TimeSpan> _maxTime;
    private Nullable`1<long> _skip;
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public Nullable`1<long> Limit { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public Nullable`1<long> Skip { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public Nullable`1<long> get_Limit();
    public void set_Limit(Nullable`1<long> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public Nullable`1<long> get_Skip();
    public void set_Skip(Nullable`1<long> value);
}
public class MongoDB.Driver.CreateCollectionOptions : object {
    private Nullable`1<bool> _autoIndexId;
    private Nullable`1<bool> _capped;
    private ChangeStreamPreAndPostImagesOptions _changeStreamPreAndPostImagesOptions;
    private Collation _collation;
    private BsonDocument _encryptedFields;
    private Nullable`1<TimeSpan> _expireAfter;
    private IndexOptionDefaults _indexOptionDefaults;
    private Nullable`1<long> _maxDocuments;
    private Nullable`1<long> _maxSize;
    private Nullable`1<bool> _noPadding;
    private BsonDocument _storageEngine;
    private TimeSeriesOptions _timeSeriesOptions;
    private Nullable`1<bool> _usePowerOf2Sizes;
    private IBsonSerializerRegistry _serializerRegistry;
    private Nullable`1<DocumentValidationAction> _validationAction;
    private Nullable`1<DocumentValidationLevel> _validationLevel;
    public Collation Collation { get; public set; }
    [ObsoleteAttribute("AutoIndexId has been deprecated since server version 3.2.")]
public Nullable`1<bool> AutoIndexId { get; public set; }
    public Nullable`1<bool> Capped { get; public set; }
    public ChangeStreamPreAndPostImagesOptions ChangeStreamPreAndPostImagesOptions { get; public set; }
    public BsonDocument EncryptedFields { get; public set; }
    public Nullable`1<TimeSpan> ExpireAfter { get; public set; }
    public IndexOptionDefaults IndexOptionDefaults { get; public set; }
    public Nullable`1<long> MaxDocuments { get; public set; }
    public Nullable`1<long> MaxSize { get; public set; }
    public Nullable`1<bool> NoPadding { get; public set; }
    public IBsonSerializerRegistry SerializerRegistry { get; public set; }
    public BsonDocument StorageEngine { get; public set; }
    public TimeSeriesOptions TimeSeriesOptions { get; public set; }
    public Nullable`1<bool> UsePowerOf2Sizes { get; public set; }
    public Nullable`1<DocumentValidationAction> ValidationAction { get; public set; }
    public Nullable`1<DocumentValidationLevel> ValidationLevel { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public Nullable`1<bool> get_AutoIndexId();
    public void set_AutoIndexId(Nullable`1<bool> value);
    public Nullable`1<bool> get_Capped();
    public void set_Capped(Nullable`1<bool> value);
    public ChangeStreamPreAndPostImagesOptions get_ChangeStreamPreAndPostImagesOptions();
    public void set_ChangeStreamPreAndPostImagesOptions(ChangeStreamPreAndPostImagesOptions value);
    public BsonDocument get_EncryptedFields();
    public void set_EncryptedFields(BsonDocument value);
    public Nullable`1<TimeSpan> get_ExpireAfter();
    public void set_ExpireAfter(Nullable`1<TimeSpan> value);
    public IndexOptionDefaults get_IndexOptionDefaults();
    public void set_IndexOptionDefaults(IndexOptionDefaults value);
    public Nullable`1<long> get_MaxDocuments();
    public void set_MaxDocuments(Nullable`1<long> value);
    public Nullable`1<long> get_MaxSize();
    public void set_MaxSize(Nullable`1<long> value);
    public Nullable`1<bool> get_NoPadding();
    public void set_NoPadding(Nullable`1<bool> value);
    public IBsonSerializerRegistry get_SerializerRegistry();
    public void set_SerializerRegistry(IBsonSerializerRegistry value);
    public BsonDocument get_StorageEngine();
    public void set_StorageEngine(BsonDocument value);
    public TimeSeriesOptions get_TimeSeriesOptions();
    public void set_TimeSeriesOptions(TimeSeriesOptions value);
    public Nullable`1<bool> get_UsePowerOf2Sizes();
    public void set_UsePowerOf2Sizes(Nullable`1<bool> value);
    public Nullable`1<DocumentValidationAction> get_ValidationAction();
    public void set_ValidationAction(Nullable`1<DocumentValidationAction> value);
    public Nullable`1<DocumentValidationLevel> get_ValidationLevel();
    public void set_ValidationLevel(Nullable`1<DocumentValidationLevel> value);
    internal virtual CreateCollectionOptions Clone();
}
public class MongoDB.Driver.CreateCollectionOptions`1 : CreateCollectionOptions {
    private ClusteredIndexOptions`1<TDocument> _clusteredIndex;
    private IBsonSerializer`1<TDocument> _documentSerializer;
    private FilterDefinition`1<TDocument> _validator;
    public ClusteredIndexOptions`1<TDocument> ClusteredIndex { get; public set; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; public set; }
    public FilterDefinition`1<TDocument> Validator { get; public set; }
    internal static CreateCollectionOptions`1<TDocument> CoercedFrom(CreateCollectionOptions options);
    public ClusteredIndexOptions`1<TDocument> get_ClusteredIndex();
    public void set_ClusteredIndex(ClusteredIndexOptions`1<TDocument> value);
    public IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public void set_DocumentSerializer(IBsonSerializer`1<TDocument> value);
    public FilterDefinition`1<TDocument> get_Validator();
    public void set_Validator(FilterDefinition`1<TDocument> value);
    internal virtual CreateCollectionOptions Clone();
}
public class MongoDB.Driver.CreateIndexModel`1 : object {
    private IndexKeysDefinition`1<TDocument> _keys;
    private CreateIndexOptions`1<TDocument> _options;
    public IndexKeysDefinition`1<TDocument> Keys { get; }
    public CreateIndexOptions`1<TDocument> Options { get; }
    public CreateIndexModel`1(IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options);
    public IndexKeysDefinition`1<TDocument> get_Keys();
    public CreateIndexOptions`1<TDocument> get_Options();
}
public class MongoDB.Driver.CreateIndexOptions : object {
    private Nullable`1<bool> _background;
    private Nullable`1<int> _bits;
    private Nullable`1<double> _bucketSize;
    private Collation _collation;
    private string _defaultLanguage;
    private Nullable`1<TimeSpan> _expireAfter;
    private Nullable`1<bool> _hidden;
    private string _languageOverride;
    private Nullable`1<double> _max;
    private Nullable`1<double> _min;
    private string _name;
    private Nullable`1<bool> _sparse;
    private Nullable`1<int> _sphereIndexVersion;
    private BsonDocument _storageEngine;
    private Nullable`1<int> _textIndexVersion;
    private Nullable`1<bool> _unique;
    private Nullable`1<int> _version;
    private BsonDocument _weights;
    public Nullable`1<bool> Background { get; public set; }
    public Nullable`1<int> Bits { get; public set; }
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public Nullable`1<double> BucketSize { get; public set; }
    public Collation Collation { get; public set; }
    public string DefaultLanguage { get; public set; }
    public Nullable`1<TimeSpan> ExpireAfter { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public string LanguageOverride { get; public set; }
    public Nullable`1<double> Max { get; public set; }
    public Nullable`1<double> Min { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> Sparse { get; public set; }
    public Nullable`1<int> SphereIndexVersion { get; public set; }
    public BsonDocument StorageEngine { get; public set; }
    public Nullable`1<int> TextIndexVersion { get; public set; }
    public Nullable`1<bool> Unique { get; public set; }
    public Nullable`1<int> Version { get; public set; }
    public BsonDocument Weights { get; public set; }
    public Nullable`1<bool> get_Background();
    public void set_Background(Nullable`1<bool> value);
    public Nullable`1<int> get_Bits();
    public void set_Bits(Nullable`1<int> value);
    public Nullable`1<double> get_BucketSize();
    public void set_BucketSize(Nullable`1<double> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public string get_DefaultLanguage();
    public void set_DefaultLanguage(string value);
    public Nullable`1<TimeSpan> get_ExpireAfter();
    public void set_ExpireAfter(Nullable`1<TimeSpan> value);
    public Nullable`1<bool> get_Hidden();
    public void set_Hidden(Nullable`1<bool> value);
    public string get_LanguageOverride();
    public void set_LanguageOverride(string value);
    public Nullable`1<double> get_Max();
    public void set_Max(Nullable`1<double> value);
    public Nullable`1<double> get_Min();
    public void set_Min(Nullable`1<double> value);
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<bool> get_Sparse();
    public void set_Sparse(Nullable`1<bool> value);
    public Nullable`1<int> get_SphereIndexVersion();
    public void set_SphereIndexVersion(Nullable`1<int> value);
    public BsonDocument get_StorageEngine();
    public void set_StorageEngine(BsonDocument value);
    public Nullable`1<int> get_TextIndexVersion();
    public void set_TextIndexVersion(Nullable`1<int> value);
    public Nullable`1<bool> get_Unique();
    public void set_Unique(Nullable`1<bool> value);
    public Nullable`1<int> get_Version();
    public void set_Version(Nullable`1<int> value);
    public BsonDocument get_Weights();
    public void set_Weights(BsonDocument value);
}
public class MongoDB.Driver.CreateIndexOptions`1 : CreateIndexOptions {
    private FilterDefinition`1<TDocument> _partialFilterExpression;
    private ProjectionDefinition`1<TDocument> _wildcardProjection;
    public FilterDefinition`1<TDocument> PartialFilterExpression { get; public set; }
    public ProjectionDefinition`1<TDocument> WildcardProjection { get; public set; }
    internal static CreateIndexOptions`1<TDocument> CoercedFrom(CreateIndexOptions options);
    public FilterDefinition`1<TDocument> get_PartialFilterExpression();
    public void set_PartialFilterExpression(FilterDefinition`1<TDocument> value);
    public ProjectionDefinition`1<TDocument> get_WildcardProjection();
    public void set_WildcardProjection(ProjectionDefinition`1<TDocument> value);
}
public class MongoDB.Driver.CreateManyIndexesOptions : object {
    private BsonValue _comment;
    private CreateIndexCommitQuorum _commitQuorum;
    private Nullable`1<TimeSpan> _maxTime;
    public BsonValue Comment { get; public set; }
    public CreateIndexCommitQuorum CommitQuorum { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public CreateIndexCommitQuorum get_CommitQuorum();
    public void set_CommitQuorum(CreateIndexCommitQuorum value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
}
public class MongoDB.Driver.CreateOneIndexOptions : object {
    private CreateIndexCommitQuorum _commitQuorum;
    private Nullable`1<TimeSpan> _maxTime;
    public CreateIndexCommitQuorum CommitQuorum { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public CreateIndexCommitQuorum get_CommitQuorum();
    public void set_CommitQuorum(CreateIndexCommitQuorum value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
}
public class MongoDB.Driver.CreateSearchIndexModel : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonDocument <Definition>k__BackingField;
    public string Name { get; }
    public BsonDocument Definition { get; }
    public CreateSearchIndexModel(string name, BsonDocument definition);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public BsonDocument get_Definition();
}
public class MongoDB.Driver.CreateViewOptions`1 : object {
    private Collation _collation;
    private IBsonSerializer`1<TDocument> _documentSerializer;
    private IBsonSerializerRegistry _serializerRegistry;
    public Collation Collation { get; public set; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; public set; }
    public IBsonSerializerRegistry SerializerRegistry { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public void set_DocumentSerializer(IBsonSerializer`1<TDocument> value);
    public IBsonSerializerRegistry get_SerializerRegistry();
    public void set_SerializerRegistry(IBsonSerializerRegistry value);
}
public enum MongoDB.Driver.CursorType : Enum {
    public int value__;
    public static CursorType NonTailable;
    public static CursorType Tailable;
    public static CursorType TailableAwait;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.CursorTypeExtensions : object {
    [ExtensionAttribute]
public static CursorType ToCore(CursorType cursorType);
}
internal class MongoDB.Driver.DatabaseAggregateFluent`1 : AggregateFluent`2<NoPipelineInput, TResult> {
    private IMongoDatabase _database;
    public IMongoDatabase Database { get; }
    public DatabaseAggregateFluent`1(IClientSessionHandle session, IMongoDatabase database, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options);
    public virtual IMongoDatabase get_Database();
    public virtual void ToCollection(CancellationToken cancellationToken);
    public virtual Task ToCollectionAsync(CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> ToCursor(CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> ToCursorAsync(CancellationToken cancellationToken);
    protected virtual IAggregateFluent`1<TNewResult> WithPipeline(PipelineDefinition`2<NoPipelineInput, TNewResult> pipeline);
}
internal class MongoDB.Driver.DecryptedSecureString : object {
    private Char[] _chars;
    private GCHandle _charsHandle;
    private IntPtr _charsIntPtr;
    private bool _disposed;
    private SecureString _secureString;
    private Byte[] _utf8Bytes;
    private GCHandle _utf8BytesHandle;
    public DecryptedSecureString(SecureString secureString);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public Char[] GetChars();
    public Byte[] GetUtf8Bytes();
    private void Dispose(bool disposing);
}
internal class MongoDB.Driver.DelegatedPipelineStageDefinition`2 : PipelineStageDefinition`2<TInput, TOutput> {
    private string _operatorName;
    private Func`2<RenderArgs`1<TInput>, RenderedPipelineStageDefinition`1<TOutput>> _renderer;
    public string OperatorName { get; }
    public DelegatedPipelineStageDefinition`2(string operatorName, Func`2<RenderArgs`1<TInput>, RenderedPipelineStageDefinition`1<TOutput>> renderer);
    public virtual string get_OperatorName();
    public virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.DeleteManyModel`1 : WriteModel`1<TDocument> {
    private Collation _collation;
    private FilterDefinition`1<TDocument> _filter;
    private BsonValue _hint;
    public Collation Collation { get; public set; }
    public FilterDefinition`1<TDocument> Filter { get; }
    public BsonValue Hint { get; public set; }
    public WriteModelType ModelType { get; }
    public DeleteManyModel`1(FilterDefinition`1<TDocument> filter);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public FilterDefinition`1<TDocument> get_Filter();
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public virtual WriteModelType get_ModelType();
}
public class MongoDB.Driver.DeleteOneModel`1 : WriteModel`1<TDocument> {
    private Collation _collation;
    private FilterDefinition`1<TDocument> _filter;
    private BsonValue _hint;
    public Collation Collation { get; public set; }
    public FilterDefinition`1<TDocument> Filter { get; }
    public BsonValue Hint { get; public set; }
    public WriteModelType ModelType { get; }
    public DeleteOneModel`1(FilterDefinition`1<TDocument> filter);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public FilterDefinition`1<TDocument> get_Filter();
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public virtual WriteModelType get_ModelType();
}
public class MongoDB.Driver.DeleteOptions : object {
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private BsonDocument _let;
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public BsonDocument Let { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
}
public abstract class MongoDB.Driver.DeleteResult : object {
    public long DeletedCount { get; }
    public bool IsAcknowledged { get; }
    internal static DeleteResult FromCore(BulkWriteResult result);
    public abstract virtual long get_DeletedCount();
    public abstract virtual bool get_IsAcknowledged();
}
public class MongoDB.Driver.DensifyBounds : object {
    private static DensifyBounds __full;
    private static DensifyBounds __partition;
    private string _keyword;
    public static DensifyBounds Full { get; }
    public static DensifyBounds Partition { get; }
    public string Keyword { get; }
    private DensifyBounds(string keyword);
    private static DensifyBounds();
    public static DensifyBounds get_Full();
    public static DensifyBounds get_Partition();
    public string get_Keyword();
    internal DensifyKeywordDateTimeBounds ToDateTimeBounds();
    internal DensifyKeywordNumericBounds`1<TNumber> ToNumericBounds();
}
public abstract class MongoDB.Driver.DensifyDateTimeBounds : object {
    public abstract virtual BsonValue Render();
}
public class MongoDB.Driver.DensifyDateTimeRange : DensifyRange {
    private DensifyDateTimeBounds _bounds;
    private long _step;
    private DensifyDateTimeUnit _unit;
    public DensifyDateTimeBounds Bounds { get; }
    public long Step { get; }
    public DensifyDateTimeUnit Unit { get; }
    public DensifyDateTimeRange(DensifyDateTimeBounds bounds, int step, DensifyDateTimeUnit unit);
    public DensifyDateTimeBounds get_Bounds();
    public long get_Step();
    public DensifyDateTimeUnit get_Unit();
    public virtual BsonDocument Render();
    private BsonValue RenderUnit(DensifyDateTimeUnit unit);
}
public enum MongoDB.Driver.DensifyDateTimeUnit : Enum {
    public int value__;
    public static DensifyDateTimeUnit Milliseconds;
    public static DensifyDateTimeUnit Seconds;
    public static DensifyDateTimeUnit Minutes;
    public static DensifyDateTimeUnit Hours;
    public static DensifyDateTimeUnit Days;
    public static DensifyDateTimeUnit Weeks;
    public static DensifyDateTimeUnit Months;
    public static DensifyDateTimeUnit Quarters;
    public static DensifyDateTimeUnit Years;
}
public class MongoDB.Driver.DensifyKeywordDateTimeBounds : DensifyDateTimeBounds {
    private static DensifyKeywordDateTimeBounds __full;
    private static DensifyKeywordDateTimeBounds __partition;
    private string _keyword;
    internal static DensifyKeywordDateTimeBounds Full { get; }
    internal static DensifyKeywordDateTimeBounds Partition { get; }
    public string Keyword { get; }
    internal DensifyKeywordDateTimeBounds(string keyword);
    private static DensifyKeywordDateTimeBounds();
    internal static DensifyKeywordDateTimeBounds get_Full();
    internal static DensifyKeywordDateTimeBounds get_Partition();
    public string get_Keyword();
    public virtual BsonValue Render();
}
public class MongoDB.Driver.DensifyKeywordNumericBounds`1 : DensifyNumericBounds`1<TNumber> {
    private static DensifyKeywordNumericBounds`1<TNumber> __full;
    private static DensifyKeywordNumericBounds`1<TNumber> __partition;
    private string _keyword;
    internal static DensifyKeywordNumericBounds`1<TNumber> Full { get; }
    internal static DensifyKeywordNumericBounds`1<TNumber> Partition { get; }
    public string Keyword { get; }
    internal DensifyKeywordNumericBounds`1(string keyword);
    private static DensifyKeywordNumericBounds`1();
    internal static DensifyKeywordNumericBounds`1<TNumber> get_Full();
    internal static DensifyKeywordNumericBounds`1<TNumber> get_Partition();
    public string get_Keyword();
    public virtual BsonValue Render();
}
public class MongoDB.Driver.DensifyLowerUpperDateTimeBounds : DensifyDateTimeBounds {
    private DateTime _lowerBound;
    private DateTime _upperBound;
    public DateTime LowerBound { get; }
    public DateTime UpperBound { get; }
    public DensifyLowerUpperDateTimeBounds(DateTime lowerBound, DateTime upperBound);
    public DateTime get_LowerBound();
    public DateTime get_UpperBound();
    public virtual BsonValue Render();
}
public class MongoDB.Driver.DensifyLowerUpperNumericBounds`1 : DensifyNumericBounds`1<TNumber> {
    private TNumber _lowerBound;
    private TNumber _upperBound;
    public TNumber LowerBound { get; }
    public TNumber UpperBound { get; }
    public DensifyLowerUpperNumericBounds`1(TNumber lowerBound, TNumber upperBound);
    public TNumber get_LowerBound();
    public TNumber get_UpperBound();
    public virtual BsonValue Render();
    private BsonValue RenderBound(TNumber bound);
}
public abstract class MongoDB.Driver.DensifyNumericBounds`1 : object {
    public abstract virtual BsonValue Render();
}
public class MongoDB.Driver.DensifyNumericRange`1 : DensifyRange {
    private DensifyNumericBounds`1<TNumber> _bounds;
    private TNumber _step;
    public DensifyNumericBounds`1<TNumber> Bounds { get; }
    public TNumber Step { get; }
    public DensifyNumericRange`1(DensifyNumericBounds`1<TNumber> bounds, TNumber step);
    internal static void EnsureIsValidNumericType();
    internal static BsonValue RenderNumber(TNumber number);
    public DensifyNumericBounds`1<TNumber> get_Bounds();
    public TNumber get_Step();
    public virtual BsonDocument Render();
}
public abstract class MongoDB.Driver.DensifyRange : object {
    public static DensifyRange DateTime(DateTime lowerBound, DateTime upperBound, int step, DensifyDateTimeUnit unit);
    public static DensifyRange DateTime(DensifyBounds bounds, int step, DensifyDateTimeUnit unit);
    public static DensifyRange Numeric(TNumber lowerBound, TNumber upperBound, TNumber step);
    public static DensifyRange Numeric(DensifyBounds bounds, TNumber step);
    public abstract virtual BsonDocument Render();
    public virtual string ToString();
}
internal class MongoDB.Driver.DirectionalIndexKeyDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private SortDirection _direction;
    public DirectionalIndexKeyDefinition`1(FieldDefinition`1<TDocument> field, SortDirection direction);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.DirectionalSortDefinition`1 : SortDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private SortDirection _direction;
    public SortDirection Direction { get; }
    public FieldDefinition`1<TDocument> Field { get; }
    public DirectionalSortDefinition`1(FieldDefinition`1<TDocument> field, SortDirection direction);
    public SortDirection get_Direction();
    public FieldDefinition`1<TDocument> get_Field();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.DistinctOptions : object {
    private Collation _collation;
    private BsonValue _comment;
    private Nullable`1<TimeSpan> _maxTime;
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
}
internal class MongoDB.Driver.DocumentOfTypeFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private FilterDefinition`1<TDerived> _derivedDocumentFilter;
    public DocumentOfTypeFilterDefinition`2(FilterDefinition`1<TDerived> derivedDocumentFilter);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.DocumentsAggregateExpressionDefinition`1 : AggregateExpressionDefinition`2<NoPipelineInput, IEnumerable`1<TDocument>> {
    private IReadOnlyList`1<TDocument> _documents;
    private IBsonSerializer`1<TDocument> _documentSerializer;
    public DocumentsAggregateExpressionDefinition`1(IEnumerable`1<TDocument> documents, IBsonSerializer`1<TDocument> documentSerializer);
    public virtual BsonValue Render(RenderArgs`1<NoPipelineInput> args);
}
public class MongoDB.Driver.DocumentsWindow : SetWindowFieldsWindow {
    private static KeywordDocumentsWindowBoundary __current;
    private static KeywordDocumentsWindowBoundary __unbounded;
    private DocumentsWindowBoundary _lowerBoundary;
    private DocumentsWindowBoundary _upperBoundary;
    public static KeywordDocumentsWindowBoundary Current { get; }
    public static KeywordDocumentsWindowBoundary Unbounded { get; }
    public DocumentsWindowBoundary LowerBoundary { get; }
    public DocumentsWindowBoundary UpperBoundary { get; }
    internal DocumentsWindow(DocumentsWindowBoundary lowerBoundary, DocumentsWindowBoundary upperBoundary);
    private static DocumentsWindow();
    public static KeywordDocumentsWindowBoundary get_Current();
    public static KeywordDocumentsWindowBoundary get_Unbounded();
    public static DocumentsWindow Create(int lowerBoundary, int upperBoundary);
    public static DocumentsWindow Create(int lowerBoundary, KeywordDocumentsWindowBoundary upperBoundary);
    public static DocumentsWindow Create(KeywordDocumentsWindowBoundary lowerBoundary, int upperBoundary);
    public static DocumentsWindow Create(KeywordDocumentsWindowBoundary lowerBoundary, KeywordDocumentsWindowBoundary upperBoundary);
    public DocumentsWindowBoundary get_LowerBoundary();
    public DocumentsWindowBoundary get_UpperBoundary();
    public virtual string ToString();
}
public abstract class MongoDB.Driver.DocumentsWindowBoundary : object {
    internal abstract virtual BsonValue Render();
}
public class MongoDB.Driver.DropCollectionOptions : object {
    private BsonDocument _encryptedFields;
    public BsonDocument EncryptedFields { get; public set; }
    public BsonDocument get_EncryptedFields();
    public void set_EncryptedFields(BsonDocument value);
}
public class MongoDB.Driver.DropIndexOptions : object {
    private BsonValue _comment;
    private Nullable`1<TimeSpan> _maxTime;
    public BsonValue Comment { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
}
internal class MongoDB.Driver.ElementMatchFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private FilterDefinition`1<TItem> _filter;
    public ElementMatchFilterDefinition`2(FieldDefinition`1<TDocument> field, FilterDefinition`1<TItem> filter);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.ElementMatchProjectionDefinition`2 : ProjectionDefinition`1<TSource> {
    private FieldDefinition`1<TSource> _field;
    private FilterDefinition`1<TItem> _filter;
    public ElementMatchProjectionDefinition`2(FieldDefinition`1<TSource> field, FilterDefinition`1<TItem> filter);
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
internal class MongoDB.Driver.EmptyFilterDefinition`1 : FilterDefinition`1<TDocument> {
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.EmptyPipelineDefinition`1 : PipelineDefinition`2<TInput, TInput> {
    private IBsonSerializer`1<TInput> _inputSerializer;
    public IBsonSerializer`1<TInput> OutputSerializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public EmptyPipelineDefinition`1(IBsonSerializer`1<TInput> inputSerializer);
    public virtual IBsonSerializer`1<TInput> get_OutputSerializer();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TInput> Render(RenderArgs`1<TInput> args);
}
internal class MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController : LibMongoCryptControllerBase {
    private IMongoClient _internalClient;
    private IMongoClient _metadataClient;
    private Lazy`1<IMongoClient> _mongocryptdClient;
    private MongocryptdFactory _mongocryptdFactory;
    internal IMongoClient InternalClient { get; }
    internal IMongoClient MongoCryptdClient { get; }
    private AutoEncryptionLibMongoCryptController(IMongoClient internalClient, IMongoClient keyVaultClient, IMongoClient metadataClient, CryptClient cryptClient, AutoEncryptionOptions autoEncryptionOptions);
    public static AutoEncryptionLibMongoCryptController Create(IMongoClient client, CryptClient cryptClient, AutoEncryptionOptions autoEncryptionOptions);
    internal IMongoClient get_InternalClient();
    internal IMongoClient get_MongoCryptdClient();
    public sealed virtual Byte[] DecryptFields(Byte[] encryptedDocumentBytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController/<DecryptFieldsAsync>d__11")]
public sealed virtual Task`1<Byte[]> DecryptFieldsAsync(Byte[] encryptedDocumentBytes, CancellationToken cancellationToken);
    public sealed virtual Byte[] EncryptFields(string databaseName, Byte[] unencryptedCommandBytes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController/<EncryptFieldsAsync>d__13")]
public sealed virtual Task`1<Byte[]> EncryptFieldsAsync(string databaseName, Byte[] unencryptedCommandBytes, CancellationToken cancellationToken);
    protected virtual void ProcessState(CryptContext context, string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController/<ProcessStateAsync>d__15")]
protected virtual Task ProcessStateAsync(CryptContext context, string databaseName, CancellationToken cancellationToken);
    private void ProcessNeedCollectionInfoState(CryptContext context, string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController/<ProcessNeedCollectionInfoStateAsync>d__17")]
private Task ProcessNeedCollectionInfoStateAsync(CryptContext context, string databaseName, CancellationToken cancellationToken);
    private void ProcessNeedMongoMarkingsState(CryptContext context, string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController/<ProcessNeedMongoMarkingsStateAsync>d__19")]
private Task ProcessNeedMongoMarkingsStateAsync(CryptContext context, string databaseName, CancellationToken cancellationToken);
    private void WaitForMongocryptdReady();
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.AutoEncryptionLibMongoCryptController/<WaitForMongocryptdReadyAsync>d__21")]
private Task WaitForMongocryptdReadyAsync();
    [CompilerGeneratedAttribute]
private IMongoClient <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CryptContext context, string databaseName, CancellationToken cancellationToken);
}
public class MongoDB.Driver.Encryption.AutoEncryptionOptions : object {
    private bool _bypassAutoEncryption;
    private Nullable`1<bool> _bypassQueryAnalysis;
    private IReadOnlyDictionary`2<string, BsonDocument> _encryptedFieldsMap;
    private IReadOnlyDictionary`2<string, object> _extraOptions;
    private IMongoClient _keyVaultClient;
    private CollectionNamespace _keyVaultNamespace;
    private IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> _kmsProviders;
    private IReadOnlyDictionary`2<string, SslSettings> _tlsOptions;
    private IReadOnlyDictionary`2<string, BsonDocument> _schemaMap;
    public bool BypassAutoEncryption { get; }
    public Nullable`1<bool> BypassQueryAnalysis { get; }
    public IReadOnlyDictionary`2<string, BsonDocument> EncryptedFieldsMap { get; }
    public IReadOnlyDictionary`2<string, object> ExtraOptions { get; }
    public IMongoClient KeyVaultClient { get; }
    public CollectionNamespace KeyVaultNamespace { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> KmsProviders { get; }
    public IReadOnlyDictionary`2<string, SslSettings> TlsOptions { get; }
    public IReadOnlyDictionary`2<string, BsonDocument> SchemaMap { get; }
    public AutoEncryptionOptions(CollectionNamespace keyVaultNamespace, IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> kmsProviders, Optional`1<bool> bypassAutoEncryption, Optional`1<IReadOnlyDictionary`2<string, object>> extraOptions, Optional`1<IMongoClient> keyVaultClient, Optional`1<IReadOnlyDictionary`2<string, BsonDocument>> schemaMap, Optional`1<IReadOnlyDictionary`2<string, SslSettings>> tlsOptions, Optional`1<IReadOnlyDictionary`2<string, BsonDocument>> encryptedFieldsMap, Optional`1<Nullable`1<bool>> bypassQueryAnalysis);
    public bool get_BypassAutoEncryption();
    public Nullable`1<bool> get_BypassQueryAnalysis();
    public IReadOnlyDictionary`2<string, BsonDocument> get_EncryptedFieldsMap();
    public IReadOnlyDictionary`2<string, object> get_ExtraOptions();
    public IMongoClient get_KeyVaultClient();
    public sealed virtual CollectionNamespace get_KeyVaultNamespace();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> get_KmsProviders();
    public sealed virtual IReadOnlyDictionary`2<string, SslSettings> get_TlsOptions();
    public IReadOnlyDictionary`2<string, BsonDocument> get_SchemaMap();
    public AutoEncryptionOptions With(Optional`1<CollectionNamespace> keyVaultNamespace, Optional`1<IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>>> kmsProviders, Optional`1<bool> bypassAutoEncryption, Optional`1<Nullable`1<bool>> bypassQueryAnalysis, Optional`1<IReadOnlyDictionary`2<string, object>> extraOptions, Optional`1<IMongoClient> keyVaultClient, Optional`1<IReadOnlyDictionary`2<string, BsonDocument>> schemaMap, Optional`1<IReadOnlyDictionary`2<string, SslSettings>> tlsOptions, Optional`1<IReadOnlyDictionary`2<string, BsonDocument>> encryptedFieldsMap);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal CryptClientSettings ToCryptClientSettings();
    private bool ExtraOptionsEquals(IReadOnlyDictionary`2<string, object> x, IReadOnlyDictionary`2<string, object> y);
    private bool ExtraOptionEquals(object x, object y);
}
public class MongoDB.Driver.Encryption.ClientEncryption : object {
    private CryptClient _cryptClient;
    private bool _disposed;
    private ExplicitEncryptionLibMongoCryptController _libMongoCryptController;
    public ClientEncryption(ClientEncryptionOptions clientEncryptionOptions);
    public BsonDocument AddAlternateKeyName(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    public Task`1<BsonDocument> AddAlternateKeyNameAsync(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload with masterKey instead.")]
public CreateEncryptedCollectionResult CreateEncryptedCollection(IMongoDatabase database, string collectionName, CreateCollectionOptions createCollectionOptions, string kmsProvider, DataKeyOptions dataKeyOptions, CancellationToken cancellationToken);
    public CreateEncryptedCollectionResult CreateEncryptedCollection(IMongoDatabase database, string collectionName, CreateCollectionOptions createCollectionOptions, string kmsProvider, BsonDocument masterKey, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload with masterKey instead.")]
public Task`1<CreateEncryptedCollectionResult> CreateEncryptedCollectionAsync(IMongoDatabase database, string collectionName, CreateCollectionOptions createCollectionOptions, string kmsProvider, DataKeyOptions dataKeyOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ClientEncryption/<CreateEncryptedCollectionAsync>d__9")]
public Task`1<CreateEncryptedCollectionResult> CreateEncryptedCollectionAsync(IMongoDatabase database, string collectionName, CreateCollectionOptions createCollectionOptions, string kmsProvider, BsonDocument masterKey, CancellationToken cancellationToken);
    public Guid CreateDataKey(string kmsProvider, DataKeyOptions dataKeyOptions, CancellationToken cancellationToken);
    public Task`1<Guid> CreateDataKeyAsync(string kmsProvider, DataKeyOptions dataKeyOptions, CancellationToken cancellationToken);
    public BsonValue Decrypt(BsonBinaryData value, CancellationToken cancellationToken);
    public Task`1<BsonValue> DecryptAsync(BsonBinaryData value, CancellationToken cancellationToken);
    public DeleteResult DeleteKey(Guid id, CancellationToken cancellationToken);
    public Task`1<DeleteResult> DeleteKeyAsync(Guid id, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public BsonBinaryData Encrypt(BsonValue value, EncryptOptions encryptOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ClientEncryption/<EncryptAsync>d__18")]
public Task`1<BsonBinaryData> EncryptAsync(BsonValue value, EncryptOptions encryptOptions, CancellationToken cancellationToken);
    public BsonDocument EncryptExpression(BsonDocument expression, EncryptOptions encryptOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ClientEncryption/<EncryptExpressionAsync>d__20")]
public Task`1<BsonDocument> EncryptExpressionAsync(BsonDocument expression, EncryptOptions encryptOptions, CancellationToken cancellationToken);
    public BsonDocument GetKey(Guid id, CancellationToken cancellationToken);
    public Task`1<BsonDocument> GetKeyAsync(Guid id, CancellationToken cancellationToken);
    public BsonDocument GetKeyByAlternateKeyName(string alternateKeyName, CancellationToken cancellationToken);
    public Task`1<BsonDocument> GetKeyByAlternateKeyNameAsync(string alternateKeyName, CancellationToken cancellationToken);
    public IReadOnlyList`1<BsonDocument> GetKeys(CancellationToken cancellationToken);
    public Task`1<IReadOnlyList`1<BsonDocument>> GetKeysAsync(CancellationToken cancellationToken);
    public BsonDocument RemoveAlternateKeyName(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    public Task`1<BsonDocument> RemoveAlternateKeyNameAsync(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    public RewrapManyDataKeyResult RewrapManyDataKey(FilterDefinition`1<BsonDocument> filter, RewrapManyDataKeyOptions options, CancellationToken cancellationToken);
    public Task`1<RewrapManyDataKeyResult> RewrapManyDataKeyAsync(FilterDefinition`1<BsonDocument> filter, RewrapManyDataKeyOptions options, CancellationToken cancellationToken);
    private TEncryptedValue EnsureEncryptedData(BsonValue encryptedValue);
    private void EnsureFeatureSupported(ICluster cluster, Feature feature, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ClientEncryption/<EnsureFeatureSupportedAsync>d__33")]
private Task EnsureFeatureSupportedAsync(ICluster cluster, Feature feature, CancellationToken cancellationToken);
}
public class MongoDB.Driver.Encryption.ClientEncryptionOptions : object {
    private IMongoClient _keyVaultClient;
    private CollectionNamespace _keyVaultNamespace;
    private IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> _kmsProviders;
    private IReadOnlyDictionary`2<string, SslSettings> _tlsOptions;
    public IMongoClient KeyVaultClient { get; }
    public CollectionNamespace KeyVaultNamespace { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> KmsProviders { get; }
    public IReadOnlyDictionary`2<string, SslSettings> TlsOptions { get; }
    public ClientEncryptionOptions(IMongoClient keyVaultClient, CollectionNamespace keyVaultNamespace, IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> kmsProviders, Optional`1<IReadOnlyDictionary`2<string, SslSettings>> tlsOptions);
    public IMongoClient get_KeyVaultClient();
    public sealed virtual CollectionNamespace get_KeyVaultNamespace();
    public sealed virtual IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> get_KmsProviders();
    public sealed virtual IReadOnlyDictionary`2<string, SslSettings> get_TlsOptions();
    public ClientEncryptionOptions With(Optional`1<IMongoClient> keyVaultClient, Optional`1<CollectionNamespace> keyVaultNamespace, Optional`1<IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>>> kmsProviders, Optional`1<IReadOnlyDictionary`2<string, SslSettings>> tlsOptions);
}
public class MongoDB.Driver.Encryption.CreateEncryptedCollectionResult : object {
    private BsonDocument _encryptedFields;
    public BsonDocument EncryptedFields { get; }
    public CreateEncryptedCollectionResult(BsonDocument encryptedFields);
    public BsonDocument get_EncryptedFields();
}
public class MongoDB.Driver.Encryption.DataKeyOptions : object {
    private IReadOnlyList`1<string> _alternateKeyNames;
    private BsonBinaryData _keyMaterial;
    private BsonDocument _masterKey;
    public IReadOnlyList`1<string> AlternateKeyNames { get; }
    public BsonBinaryData KeyMaterial { get; }
    public BsonDocument MasterKey { get; }
    public DataKeyOptions(Optional`1<IReadOnlyList`1<string>> alternateKeyNames, Optional`1<BsonDocument> masterKey, Optional`1<BsonBinaryData> keyMaterial);
    public IReadOnlyList`1<string> get_AlternateKeyNames();
    public BsonBinaryData get_KeyMaterial();
    public BsonDocument get_MasterKey();
    public DataKeyOptions With(Optional`1<IReadOnlyList`1<string>> alternateKeyNames, Optional`1<BsonDocument> masterKey, Optional`1<BsonBinaryData> keyMaterial);
}
public enum MongoDB.Driver.Encryption.EncryptionAlgorithm : Enum {
    public int value__;
    public static EncryptionAlgorithm AEAD_AES_256_CBC_HMAC_SHA_512_Deterministic;
    public static EncryptionAlgorithm AEAD_AES_256_CBC_HMAC_SHA_512_Random;
    public static EncryptionAlgorithm Indexed;
    public static EncryptionAlgorithm Unindexed;
    public static EncryptionAlgorithm Range;
    [ObsoleteAttribute("Please use Range algorithm instead")]
public static EncryptionAlgorithm RangePreview;
}
internal static class MongoDB.Driver.Encryption.EncryptionExtraOptionsHelper : object {
    private static Dictionary`2<string, Type[]> __supportedExtraOptions;
    private static EncryptionExtraOptionsHelper();
    public static void EnsureThatExtraOptionsAreValid(IReadOnlyDictionary`2<string, object> extraOptions);
    public static string ExtractCryptSharedLibPath(IReadOnlyDictionary`2<string, object> dict);
    public static Nullable`1<bool> ExtractCryptSharedLibRequired(IReadOnlyDictionary`2<string, object> dict);
}
public class MongoDB.Driver.Encryption.EncryptOptions : object {
    private string _algorithm;
    private string _alternateKeyName;
    private Nullable`1<long> _contentionFactor;
    private Nullable`1<Guid> _keyId;
    private RangeOptions _rangeOptions;
    private string _queryType;
    public string Algorithm { get; }
    public string AlternateKeyName { get; }
    public Nullable`1<long> ContentionFactor { get; }
    public Nullable`1<Guid> KeyId { get; }
    public string QueryType { get; }
    public RangeOptions RangeOptions { get; }
    public EncryptOptions(string algorithm, Optional`1<string> alternateKeyName, Optional`1<Nullable`1<Guid>> keyId, Optional`1<Nullable`1<long>> contentionFactor, Optional`1<string> queryType, Optional`1<RangeOptions> rangeOptions);
    public EncryptOptions(EncryptionAlgorithm algorithm, Optional`1<string> alternateKeyName, Optional`1<Nullable`1<Guid>> keyId, Optional`1<Nullable`1<long>> contentionFactor, Optional`1<string> queryType, Optional`1<RangeOptions> rangeOptions);
    private static string ConvertEnumAlgorithmToString(EncryptionAlgorithm encryptionAlgorithm);
    public string get_Algorithm();
    public string get_AlternateKeyName();
    public Nullable`1<long> get_ContentionFactor();
    public Nullable`1<Guid> get_KeyId();
    public string get_QueryType();
    public RangeOptions get_RangeOptions();
    public EncryptOptions With(Optional`1<string> algorithm, Optional`1<string> alternateKeyName, Optional`1<Nullable`1<Guid>> keyId, Optional`1<Nullable`1<long>> contentionFactor, Optional`1<string> queryType, Optional`1<RangeOptions> rangeOptions);
    private void EnsureThatOptionsAreValid();
}
internal class MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController : LibMongoCryptControllerBase {
    private static int BufferOverhead;
    public ExplicitEncryptionLibMongoCryptController(CryptClient cryptClient, ClientEncryptionOptions clientEncryptionOptions);
    public BsonDocument AddAlternateKeyName(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<AddAlternateKeyNameAsync>d__3")]
public Task`1<BsonDocument> AddAlternateKeyNameAsync(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    public Guid CreateDataKey(string kmsProvider, DataKeyOptions dataKeyOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<CreateDataKeyAsync>d__5")]
public Task`1<Guid> CreateDataKeyAsync(string kmsProvider, DataKeyOptions dataKeyOptions, CancellationToken cancellationToken);
    public BsonValue DecryptField(BsonBinaryData encryptedValue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<DecryptFieldAsync>d__7")]
public Task`1<BsonValue> DecryptFieldAsync(BsonBinaryData encryptedValue, CancellationToken cancellationToken);
    public DeleteResult DeleteKey(Guid id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<DeleteKeyAsync>d__9")]
public Task`1<DeleteResult> DeleteKeyAsync(Guid id, CancellationToken cancellationToken);
    public BsonValue EncryptField(BsonValue value, EncryptOptions encryptOptions, bool isExpressionMode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<EncryptFieldAsync>d__11")]
public Task`1<BsonValue> EncryptFieldAsync(BsonValue value, EncryptOptions encryptOptions, bool isExpressionMode, CancellationToken cancellationToken);
    public BsonDocument GetKey(Guid id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<GetKeyAsync>d__13")]
public Task`1<BsonDocument> GetKeyAsync(Guid id, CancellationToken cancellationToken);
    public BsonDocument GetKeyByAlternateKeyName(string alternateKeyName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<GetKeyByAlternateKeyNameAsync>d__15")]
public Task`1<BsonDocument> GetKeyByAlternateKeyNameAsync(string alternateKeyName, CancellationToken cancellationToken);
    public IReadOnlyList`1<BsonDocument> GetKeys(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<GetKeysAsync>d__17")]
public Task`1<IReadOnlyList`1<BsonDocument>> GetKeysAsync(CancellationToken cancellationToken);
    public BsonDocument RemoveAlternateKeyName(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<RemoveAlternateKeyNameAsync>d__19")]
public Task`1<BsonDocument> RemoveAlternateKeyNameAsync(Guid id, string alternateKeyName, CancellationToken cancellationToken);
    public RewrapManyDataKeyResult RewrapManyDataKey(FilterDefinition`1<BsonDocument> filter, RewrapManyDataKeyOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.ExplicitEncryptionLibMongoCryptController/<RewrapManyDataKeyAsync>d__21")]
public Task`1<RewrapManyDataKeyResult> RewrapManyDataKeyAsync(FilterDefinition`1<BsonDocument> filter, RewrapManyDataKeyOptions options, CancellationToken cancellationToken);
    private FilterDefinition`1<BsonDocument> CreateFilter(BsonDocument filter);
    private FilterDefinition`1<BsonDocument> CreateFilterById(Guid id);
    private FilterDefinition`1<BsonDocument> CreateFilterById(BsonBinaryData id);
    private UpdateDefinition`1<BsonDocument> CreateRemoveAlternateKeyNameUpdatePipeline(string keyAlterName);
    private IEnumerable`1<UpdateOneModel`1<BsonDocument>> CreateRewrapManyDataKeysBulkUpdateRequests(Byte[] rewrappedDocumentBytes);
    private KmsKeyId GetKmsKeyId(string kmsProvider, DataKeyOptions dataKeyOptions);
    private Byte[] GetWrappedAlternateKeyNameBytes(string value);
    private Byte[] GetWrappedValueBytes(BsonValue value);
    private BsonValue RenderFilter(FilterDefinition`1<BsonDocument> filter);
    private Guid UnwrapKeyId(BsonDocument wrappedKeyDocument);
    private BsonValue UnwrapValue(Byte[] encryptedWrappedBytes);
    [CompilerGeneratedAttribute]
private UpdateOneModel`1<BsonDocument> <CreateRewrapManyDataKeysBulkUpdateRequests>b__26_0(BsonDocument document);
}
internal interface MongoDB.Driver.Encryption.IEncryptionOptions {
    public CollectionNamespace KeyVaultNamespace { get; }
    public IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> KmsProviders { get; }
    public IReadOnlyDictionary`2<string, SslSettings> TlsOptions { get; }
    public abstract virtual CollectionNamespace get_KeyVaultNamespace();
    public abstract virtual IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> get_KmsProviders();
    public abstract virtual IReadOnlyDictionary`2<string, SslSettings> get_TlsOptions();
}
internal static class MongoDB.Driver.Encryption.KmsProvidersHelper : object {
    public static void EnsureKmsProvidersAreValid(IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> kmsProviders);
    public static void EnsureKmsProvidersTlsSettingsAreValid(IReadOnlyDictionary`2<string, SslSettings> kmsProviderTlsSettings);
}
internal abstract class MongoDB.Driver.Encryption.LibMongoCryptControllerBase : object {
    protected CryptClient _cryptClient;
    protected IMongoClient _keyVaultClient;
    protected Lazy`1<IMongoCollection`1<BsonDocument>> _keyVaultCollection;
    protected CollectionNamespace _keyVaultNamespace;
    private IReadOnlyDictionary`2<string, IReadOnlyDictionary`2<string, object>> _kmsProviders;
    private IStreamFactory _networkStreamFactory;
    private IReadOnlyDictionary`2<string, SslSettings> _tlsOptions;
    public IMongoClient KeyVaultClient { get; }
    protected LibMongoCryptControllerBase(CryptClient cryptClient, IMongoClient keyVaultClient, IEncryptionOptions encryptionOptions);
    public IMongoClient get_KeyVaultClient();
    protected void FeedResult(CryptContext context, BsonDocument document);
    protected void FeedResults(CryptContext context, IEnumerable`1<BsonDocument> documents);
    protected virtual void ProcessState(CryptContext context, string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.LibMongoCryptControllerBase/<ProcessStateAsync>d__13")]
protected virtual Task ProcessStateAsync(CryptContext context, string databaseName, CancellationToken cancellationToken);
    protected Byte[] ProcessStates(CryptContext context, string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.LibMongoCryptControllerBase/<ProcessStatesAsync>d__15")]
protected Task`1<Byte[]> ProcessStatesAsync(CryptContext context, string databaseName, CancellationToken cancellationToken);
    protected Byte[] ToBsonIfNotNull(BsonValue value, int estimatedBsonSize);
    private IMongoCollection`1<BsonDocument> GetKeyVaultCollection();
    private DnsEndPoint CreateKmsEndPoint(string value);
    private SslStreamSettings GetTlsStreamSettings(string kmsProvider);
    private void ProcessNeedKmsState(CryptContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.LibMongoCryptControllerBase/<ProcessNeedKmsStateAsync>d__21")]
private Task ProcessNeedKmsStateAsync(CryptContext context, CancellationToken cancellationToken);
    private void ProcessNeedMongoKeysState(CryptContext context, CancellationToken cancellationToken);
    private void ProcessNeedKmsCredentials(CryptContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.LibMongoCryptControllerBase/<ProcessNeedKmsCredentialsAsync>d__24")]
private Task ProcessNeedKmsCredentialsAsync(CryptContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.LibMongoCryptControllerBase/<ProcessNeedMongoKeysStateAsync>d__25")]
private Task ProcessNeedMongoKeysStateAsync(CryptContext context, CancellationToken cancellationToken);
    private Byte[] ProcessReadyState(CryptContext context);
    private void SendKmsRequest(KmsRequest request, CancellationToken cancellation);
    [AsyncStateMachineAttribute("MongoDB.Driver.Encryption.LibMongoCryptControllerBase/<SendKmsRequestAsync>d__28")]
private Task SendKmsRequestAsync(KmsRequest request, CancellationToken cancellation);
}
internal class MongoDB.Driver.Encryption.MongocryptdFactory : object {
    private Nullable`1<bool> _bypassQueryAnalysis;
    private IEventSubscriber _eventSubscriber;
    private IReadOnlyDictionary`2<string, object> _extraOptions;
    public MongocryptdFactory(IReadOnlyDictionary`2<string, object> extraOptions, Nullable`1<bool> bypassQueryAnalysis, IEventSubscriber eventSubscriber);
    public IMongoClient CreateMongocryptdClient();
    public void SpawnMongocryptdProcessIfRequired();
    private MongoClientSettings CreateMongocryptdClientSettings();
    private string CreateMongocryptdConnectionString();
    private bool ShouldMongocryptdBeSpawned(String& path, String& args);
    private void StartProcess(string path, string args);
    [CompilerGeneratedAttribute]
private void <CreateMongocryptdClient>b__4_0(ClusterBuilder c);
    [CompilerGeneratedAttribute]
internal static string <ShouldMongocryptdBeSpawned>g__GetMongocryptdExtension|8_0();
    [CompilerGeneratedAttribute]
internal static string <ShouldMongocryptdBeSpawned>g__GetLogPath|8_1();
}
public class MongoDB.Driver.Encryption.MongoEncryptionCreateCollectionException : MongoEncryptionException {
    private BsonDocument _encryptedFields;
    public BsonDocument EncryptedFields { get; }
    public MongoEncryptionCreateCollectionException(Exception innerException, BsonDocument encryptedFields);
    protected MongoEncryptionCreateCollectionException(SerializationInfo info, StreamingContext context);
    public BsonDocument get_EncryptedFields();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class MongoDB.Driver.Encryption.MongoEncryptionException : MongoClientException {
    public MongoEncryptionException(Exception innerException);
    protected MongoEncryptionException(SerializationInfo info, StreamingContext context);
    private static string FormatErrorMessage(string errorMessage);
}
internal class MongoDB.Driver.Encryption.NoopBinaryDocumentFieldCryptor : object {
    public sealed virtual Byte[] DecryptFields(Byte[] encryptedDocumentBytes, CancellationToken cancellationToken);
    public sealed virtual Task`1<Byte[]> DecryptFieldsAsync(Byte[] encryptedDocumentBytes, CancellationToken cancellationToken);
    public sealed virtual Byte[] EncryptFields(string databaseName, Byte[] unencryptedCommandBytes, CancellationToken cancellationToken);
    public sealed virtual Task`1<Byte[]> EncryptFieldsAsync(string databaseName, Byte[] unencryptedCommandBytes, CancellationToken cancellationToken);
}
public class MongoDB.Driver.Encryption.RangeOptions : object {
    private BsonValue _max;
    private BsonValue _min;
    private Nullable`1<int> _precision;
    private Nullable`1<long> _sparsity;
    private Nullable`1<int> _trimFactor;
    public BsonValue Min { get; }
    public BsonValue Max { get; }
    public Nullable`1<int> TrimFactor { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<long> Sparsity { get; }
    public RangeOptions(Optional`1<BsonValue> min, Optional`1<BsonValue> max, Optional`1<Nullable`1<int>> precision, Optional`1<Nullable`1<long>> sparsity, Optional`1<Nullable`1<int>> trimFactor);
    public BsonValue get_Min();
    public BsonValue get_Max();
    public Nullable`1<int> get_TrimFactor();
    public Nullable`1<int> get_Precision();
    public Nullable`1<long> get_Sparsity();
    internal BsonDocument CreateDocument();
}
public class MongoDB.Driver.Encryption.RewrapManyDataKeyOptions : object {
    private string _provider;
    private BsonDocument _masterKey;
    public string Provider { get; }
    public BsonDocument MasterKey { get; }
    public RewrapManyDataKeyOptions(string provider, Optional`1<BsonDocument> masterKey);
    public string get_Provider();
    public BsonDocument get_MasterKey();
    public RewrapManyDataKeyOptions With(Optional`1<BsonDocument> masterKey, Optional`1<string> provider);
}
public class MongoDB.Driver.Encryption.RewrapManyDataKeyResult : object {
    [CompilerGeneratedAttribute]
private BulkWriteResult <BulkWriteResult>k__BackingField;
    public BulkWriteResult BulkWriteResult { get; }
    public RewrapManyDataKeyResult(BulkWriteResult bulkWriteResult);
    [CompilerGeneratedAttribute]
public BulkWriteResult get_BulkWriteResult();
}
public class MongoDB.Driver.EstimatedDocumentCountOptions : object {
    private BsonValue _comment;
    private Nullable`1<TimeSpan> _maxTime;
    public BsonValue Comment { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
}
public class MongoDB.Driver.ExpressionAggregateExpressionDefinition`2 : AggregateExpressionDefinition`2<TSource, TResult> {
    private TranslationContextData _contextData;
    private Expression`1<Func`2<TSource, TResult>> _expression;
    private ExpressionTranslationOptions _translationOptions;
    public ExpressionAggregateExpressionDefinition`2(Expression`1<Func`2<TSource, TResult>> expression, ExpressionTranslationOptions translationOptions);
    internal ExpressionAggregateExpressionDefinition`2(Expression`1<Func`2<TSource, TResult>> expression, ExpressionTranslationOptions translationOptions, TranslationContextData contextData);
    public virtual BsonValue Render(RenderArgs`1<TSource> args);
}
internal class MongoDB.Driver.ExpressionBucketOutputProjection`3 : ProjectionDefinition`2<TInput, TOutput> {
    private Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> _outputExpression;
    private ExpressionTranslationOptions _translationOptions;
    private Expression`1<Func`2<TInput, TValue>> _valueExpression;
    public Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> OutputExpression { get; }
    public ExpressionBucketOutputProjection`3(Expression`1<Func`2<TInput, TValue>> valueExpression, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> outputExpression, ExpressionTranslationOptions translationOptions);
    public Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> get_OutputExpression();
    public virtual RenderedProjectionDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.ExpressionFieldDefinition`1 : FieldDefinition`1<TDocument> {
    private LambdaExpression _expression;
    public LambdaExpression Expression { get; }
    public ExpressionFieldDefinition`1(LambdaExpression expression);
    public LambdaExpression get_Expression();
    public virtual RenderedFieldDefinition Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.ExpressionFieldDefinition`2 : FieldDefinition`2<TDocument, TField> {
    private Expression`1<Func`2<TDocument, TField>> _expression;
    public Expression`1<Func`2<TDocument, TField>> Expression { get; }
    public ExpressionFieldDefinition`2(Expression`1<Func`2<TDocument, TField>> expression);
    public Expression`1<Func`2<TDocument, TField>> get_Expression();
    public virtual RenderedFieldDefinition`1<TField> Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.ExpressionFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private Expression`1<Func`2<TDocument, bool>> _expression;
    public Expression`1<Func`2<TDocument, bool>> Expression { get; }
    public ExpressionFilterDefinition`1(Expression`1<Func`2<TDocument, bool>> expression);
    public Expression`1<Func`2<TDocument, bool>> get_Expression();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.ExpressionProjectionDefinition`2 : ProjectionDefinition`2<TInput, TOutput> {
    private Expression`1<Func`2<TInput, TOutput>> _expression;
    private ExpressionTranslationOptions _translationOptions;
    public Expression`1<Func`2<TInput, TOutput>> Expression { get; }
    public ExpressionProjectionDefinition`2(Expression`1<Func`2<TInput, TOutput>> expression, ExpressionTranslationOptions translationOptions);
    public Expression`1<Func`2<TInput, TOutput>> get_Expression();
    public virtual RenderedProjectionDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.ExpressionSetFieldDefinitions`2 : SetFieldDefinitions`1<TDocument> {
    private Expression`1<Func`2<TDocument, TFields>> _expression;
    public ExpressionSetFieldDefinitions`2(Expression`1<Func`2<TDocument, TFields>> expression);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.ExpressionTranslationOptions : object {
    internal static ExpressionTranslationOptions Default;
    [CompilerGeneratedAttribute]
private Nullable`1<AggregateStringTranslationMode> <StringTranslationMode>k__BackingField;
    public Nullable`1<AggregateStringTranslationMode> StringTranslationMode { get; public set; }
    private static ExpressionTranslationOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<AggregateStringTranslationMode> get_StringTranslationMode();
    [CompilerGeneratedAttribute]
public void set_StringTranslationMode(Nullable`1<AggregateStringTranslationMode> value);
}
public class MongoDB.Driver.ExternalEvidence : MongoIdentityEvidence {
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class MongoDB.Driver.FieldDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual RenderedFieldDefinition Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual RenderedFieldDefinition Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual RenderedFieldDefinition Render(RenderArgs`1<TDocument> args);
    public static FieldDefinition`1<TDocument> op_Implicit(string fieldName);
}
public abstract class MongoDB.Driver.FieldDefinition`2 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual RenderedFieldDefinition`1<TField> Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual RenderedFieldDefinition`1<TField> Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, bool allowScalarValueForArrayField);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual RenderedFieldDefinition`1<TField> Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider, bool allowScalarValueForArrayField);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual RenderedFieldDefinition`1<TField> Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual RenderedFieldDefinition`1<TField> Render(RenderArgs`1<TDocument> args);
    public static FieldDefinition`2<TDocument, TField> op_Implicit(string fieldName);
    public static FieldDefinition`1<TDocument> op_Implicit(FieldDefinition`2<TDocument, TField> field);
}
internal class MongoDB.Driver.FieldOfTypeFilterDefinition`3 : FilterDefinition`1<TDocument> {
    private FilterDefinition`1<TDerived> _derivedFieldFilter;
    private FieldDefinition`2<TDocument, TField> _field;
    public FieldOfTypeFilterDefinition`3(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDerived> derivedFieldFilter);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal static class MongoDB.Driver.FieldValueSerializerHelper : object {
    public static IBsonSerializer GetSerializerForValueType(IBsonSerializer fieldSerializer, IBsonSerializerRegistry serializerRegistry, Type valueType);
    public static IBsonSerializer GetSerializerForValueType(IBsonSerializer fieldSerializer, IBsonSerializerRegistry serializerRegistry, Type valueType, bool allowScalarValueForArrayField);
    public static IBsonSerializer GetSerializerForValueType(IBsonSerializer fieldSerializer, IBsonSerializerRegistry serializerRegistry, Type valueType, object value);
    private static bool HasStringRepresentation(IBsonSerializer serializer);
    private static IBsonSerializer WithStringRepresentation(IBsonSerializer serializer);
}
public abstract class MongoDB.Driver.FilterDefinition`1 : object {
    private static FilterDefinition`1<TDocument> __empty;
    public static FilterDefinition`1<TDocument> Empty { get; }
    private static FilterDefinition`1();
    public static FilterDefinition`1<TDocument> get_Empty();
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    public static FilterDefinition`1<TDocument> op_Implicit(BsonDocument document);
    public static FilterDefinition`1<TDocument> op_Implicit(Expression`1<Func`2<TDocument, bool>> predicate);
    public static FilterDefinition`1<TDocument> op_Implicit(string json);
    public static FilterDefinition`1<TDocument> op_BitwiseAnd(FilterDefinition`1<TDocument> lhs, FilterDefinition`1<TDocument> rhs);
    public static FilterDefinition`1<TDocument> op_BitwiseOr(FilterDefinition`1<TDocument> lhs, FilterDefinition`1<TDocument> rhs);
    public static FilterDefinition`1<TDocument> op_LogicalNot(FilterDefinition`1<TDocument> op);
}
public class MongoDB.Driver.FilterDefinitionBuilder`1 : object {
    public FilterDefinition`1<TDocument> Empty { get; }
    public FilterDefinition`1<TDocument> get_Empty();
    public FilterDefinition`1<TDocument> All(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public FilterDefinition`1<TDocument> All(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    public FilterDefinition`1<TDocument> And(FilterDefinition`1[] filters);
    public FilterDefinition`1<TDocument> And(IEnumerable`1<FilterDefinition`1<TDocument>> filters);
    public FilterDefinition`1<TDocument> AnyEq(FieldDefinition`1<TDocument> field, TItem value);
    public FilterDefinition`1<TDocument> AnyEq(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public FilterDefinition`1<TDocument> AnyGt(FieldDefinition`1<TDocument> field, TItem value);
    public FilterDefinition`1<TDocument> AnyGt(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public FilterDefinition`1<TDocument> AnyGte(FieldDefinition`1<TDocument> field, TItem value);
    public FilterDefinition`1<TDocument> AnyGte(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public FilterDefinition`1<TDocument> AnyLt(FieldDefinition`1<TDocument> field, TItem value);
    public FilterDefinition`1<TDocument> AnyLt(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public FilterDefinition`1<TDocument> AnyLte(FieldDefinition`1<TDocument> field, TItem value);
    public FilterDefinition`1<TDocument> AnyLte(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public FilterDefinition`1<TDocument> AnyIn(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public FilterDefinition`1<TDocument> AnyIn(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    public FilterDefinition`1<TDocument> AnyNe(FieldDefinition`1<TDocument> field, TItem value);
    public FilterDefinition`1<TDocument> AnyNe(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public FilterDefinition`1<TDocument> AnyNin(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public FilterDefinition`1<TDocument> AnyNin(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    public FilterDefinition`1<TDocument> AnyStringIn(FieldDefinition`2<TDocument, IEnumerable`1<string>> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> AnyStringIn(FieldDefinition`2<TDocument, IEnumerable`1<string>> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> AnyStringIn(Expression`1<Func`2<TDocument, IEnumerable`1<string>>> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> AnyStringIn(Expression`1<Func`2<TDocument, IEnumerable`1<string>>> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> AnyStringNin(FieldDefinition`2<TDocument, IEnumerable`1<string>> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> AnyStringNin(FieldDefinition`2<TDocument, IEnumerable`1<string>> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> AnyStringNin(Expression`1<Func`2<TDocument, IEnumerable`1<string>>> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> AnyStringNin(Expression`1<Func`2<TDocument, IEnumerable`1<string>>> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> BitsAllClear(FieldDefinition`1<TDocument> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAllClear(Expression`1<Func`2<TDocument, object>> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAllSet(FieldDefinition`1<TDocument> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAllSet(Expression`1<Func`2<TDocument, object>> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAnyClear(FieldDefinition`1<TDocument> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAnyClear(Expression`1<Func`2<TDocument, object>> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAnySet(FieldDefinition`1<TDocument> field, long bitmask);
    public FilterDefinition`1<TDocument> BitsAnySet(Expression`1<Func`2<TDocument, object>> field, long bitmask);
    public FilterDefinition`1<TDocument> ElemMatch(FieldDefinition`1<TDocument> field, FilterDefinition`1<TItem> filter);
    public FilterDefinition`1<TDocument> ElemMatch(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TItem> filter);
    public FilterDefinition`1<TDocument> ElemMatch(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TItem, bool>> filter);
    public FilterDefinition`1<TDocument> Eq(FieldDefinition`2<TDocument, TField> field, TField value);
    public FilterDefinition`1<TDocument> Eq(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public FilterDefinition`1<TDocument> Exists(FieldDefinition`1<TDocument> field, bool exists);
    public FilterDefinition`1<TDocument> Exists(Expression`1<Func`2<TDocument, object>> field, bool exists);
    public FilterDefinition`1<TDocument> GeoIntersects(FieldDefinition`1<TDocument> field, GeoJsonGeometry`1<TCoordinates> geometry);
    public FilterDefinition`1<TDocument> GeoIntersects(Expression`1<Func`2<TDocument, object>> field, GeoJsonGeometry`1<TCoordinates> geometry);
    public FilterDefinition`1<TDocument> GeoWithin(FieldDefinition`1<TDocument> field, GeoJsonGeometry`1<TCoordinates> geometry);
    public FilterDefinition`1<TDocument> GeoWithin(Expression`1<Func`2<TDocument, object>> field, GeoJsonGeometry`1<TCoordinates> geometry);
    public FilterDefinition`1<TDocument> GeoWithinBox(FieldDefinition`1<TDocument> field, double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY);
    public FilterDefinition`1<TDocument> GeoWithinBox(Expression`1<Func`2<TDocument, object>> field, double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY);
    public FilterDefinition`1<TDocument> GeoWithinCenter(FieldDefinition`1<TDocument> field, double x, double y, double radius);
    public FilterDefinition`1<TDocument> GeoWithinCenter(Expression`1<Func`2<TDocument, object>> field, double x, double y, double radius);
    public FilterDefinition`1<TDocument> GeoWithinCenterSphere(FieldDefinition`1<TDocument> field, double x, double y, double radius);
    public FilterDefinition`1<TDocument> GeoWithinCenterSphere(Expression`1<Func`2<TDocument, object>> field, double x, double y, double radius);
    public FilterDefinition`1<TDocument> GeoWithinPolygon(FieldDefinition`1<TDocument> field, Double[0...,0...] points);
    public FilterDefinition`1<TDocument> GeoWithinPolygon(Expression`1<Func`2<TDocument, object>> field, Double[0...,0...] points);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gt(FieldDefinition`2<TDocument, UInt32> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gt(FieldDefinition`2<TDocument, ulong> field, ulong value);
    public FilterDefinition`1<TDocument> Gt(FieldDefinition`2<TDocument, TField> field, TField value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gt(Expression`1<Func`2<TDocument, UInt32>> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gt(Expression`1<Func`2<TDocument, ulong>> field, ulong value);
    public FilterDefinition`1<TDocument> Gt(Expression`1<Func`2<TDocument, TField>> field, TField value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gte(FieldDefinition`2<TDocument, UInt32> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gte(FieldDefinition`2<TDocument, ulong> field, ulong value);
    public FilterDefinition`1<TDocument> Gte(FieldDefinition`2<TDocument, TField> field, TField value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gte(Expression`1<Func`2<TDocument, UInt32>> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Gte(Expression`1<Func`2<TDocument, ulong>> field, ulong value);
    public FilterDefinition`1<TDocument> Gte(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public FilterDefinition`1<TDocument> In(FieldDefinition`2<TDocument, TField> field, IEnumerable`1<TField> values);
    public FilterDefinition`1<TDocument> In(Expression`1<Func`2<TDocument, TField>> field, IEnumerable`1<TField> values);
    public FilterDefinition`1<TDocument> JsonSchema(BsonDocument schema);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lt(FieldDefinition`2<TDocument, UInt32> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lt(FieldDefinition`2<TDocument, ulong> field, ulong value);
    public FilterDefinition`1<TDocument> Lt(FieldDefinition`2<TDocument, TField> field, TField value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lt(Expression`1<Func`2<TDocument, UInt32>> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lt(Expression`1<Func`2<TDocument, ulong>> field, ulong value);
    public FilterDefinition`1<TDocument> Lt(Expression`1<Func`2<TDocument, TField>> field, TField value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lte(FieldDefinition`2<TDocument, UInt32> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lte(FieldDefinition`2<TDocument, ulong> field, ulong value);
    public FilterDefinition`1<TDocument> Lte(FieldDefinition`2<TDocument, TField> field, TField value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lte(Expression`1<Func`2<TDocument, UInt32>> field, UInt32 value);
    [CLSCompliantAttribute("False")]
public FilterDefinition`1<TDocument> Lte(Expression`1<Func`2<TDocument, ulong>> field, ulong value);
    public FilterDefinition`1<TDocument> Lte(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public FilterDefinition`1<TDocument> Mod(FieldDefinition`1<TDocument> field, long modulus, long remainder);
    public FilterDefinition`1<TDocument> Mod(Expression`1<Func`2<TDocument, object>> field, long modulus, long remainder);
    public FilterDefinition`1<TDocument> Ne(FieldDefinition`2<TDocument, TField> field, TField value);
    public FilterDefinition`1<TDocument> Ne(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public FilterDefinition`1<TDocument> Near(FieldDefinition`1<TDocument> field, double x, double y, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, object>> field, double x, double y, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> Near(FieldDefinition`1<TDocument> field, GeoJsonPoint`1<TCoordinates> point, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, object>> field, GeoJsonPoint`1<TCoordinates> point, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> NearSphere(FieldDefinition`1<TDocument> field, double x, double y, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> NearSphere(Expression`1<Func`2<TDocument, object>> field, double x, double y, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> NearSphere(FieldDefinition`1<TDocument> field, GeoJsonPoint`1<TCoordinates> point, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> NearSphere(Expression`1<Func`2<TDocument, object>> field, GeoJsonPoint`1<TCoordinates> point, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public FilterDefinition`1<TDocument> Nin(FieldDefinition`2<TDocument, TField> field, IEnumerable`1<TField> values);
    public FilterDefinition`1<TDocument> Nin(Expression`1<Func`2<TDocument, TField>> field, IEnumerable`1<TField> values);
    public FilterDefinition`1<TDocument> Not(FilterDefinition`1<TDocument> filter);
    public FilterDefinition`1<TDocument> OfType();
    public FilterDefinition`1<TDocument> OfType(FilterDefinition`1<TDerived> derivedDocumentFilter);
    public FilterDefinition`1<TDocument> OfType(Expression`1<Func`2<TDerived, bool>> derivedDocumentFilter);
    public FilterDefinition`1<TDocument> OfType(FieldDefinition`2<TDocument, TField> field);
    public FilterDefinition`1<TDocument> OfType(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDerived> derivedFieldFilter);
    public FilterDefinition`1<TDocument> OfType(Expression`1<Func`2<TDocument, TField>> field);
    public FilterDefinition`1<TDocument> OfType(Expression`1<Func`2<TDocument, TField>> field, Expression`1<Func`2<TDerived, bool>> derivedFieldFilter);
    public FilterDefinition`1<TDocument> Or(FilterDefinition`1[] filters);
    public FilterDefinition`1<TDocument> Or(IEnumerable`1<FilterDefinition`1<TDocument>> filters);
    public FilterDefinition`1<TDocument> Regex(FieldDefinition`1<TDocument> field, BsonRegularExpression regex);
    public FilterDefinition`1<TDocument> Regex(Expression`1<Func`2<TDocument, object>> field, BsonRegularExpression regex);
    public FilterDefinition`1<TDocument> Size(FieldDefinition`1<TDocument> field, int size);
    public FilterDefinition`1<TDocument> Size(Expression`1<Func`2<TDocument, object>> field, int size);
    public FilterDefinition`1<TDocument> SizeGt(FieldDefinition`1<TDocument> field, int size);
    public FilterDefinition`1<TDocument> SizeGt(Expression`1<Func`2<TDocument, object>> field, int size);
    public FilterDefinition`1<TDocument> SizeGte(FieldDefinition`1<TDocument> field, int size);
    public FilterDefinition`1<TDocument> SizeGte(Expression`1<Func`2<TDocument, object>> field, int size);
    public FilterDefinition`1<TDocument> SizeLt(FieldDefinition`1<TDocument> field, int size);
    public FilterDefinition`1<TDocument> SizeLt(Expression`1<Func`2<TDocument, object>> field, int size);
    public FilterDefinition`1<TDocument> SizeLte(FieldDefinition`1<TDocument> field, int size);
    public FilterDefinition`1<TDocument> SizeLte(Expression`1<Func`2<TDocument, object>> field, int size);
    public FilterDefinition`1<TDocument> StringIn(FieldDefinition`2<TDocument, string> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> StringIn(FieldDefinition`2<TDocument, string> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> StringIn(Expression`1<Func`2<TDocument, string>> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> StringIn(Expression`1<Func`2<TDocument, string>> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> StringNin(FieldDefinition`2<TDocument, string> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> StringNin(FieldDefinition`2<TDocument, string> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> StringNin(Expression`1<Func`2<TDocument, string>> field, IEnumerable`1<StringOrRegularExpression> values);
    public FilterDefinition`1<TDocument> StringNin(Expression`1<Func`2<TDocument, string>> field, StringOrRegularExpression[] values);
    public FilterDefinition`1<TDocument> Text(string search, TextSearchOptions options);
    public FilterDefinition`1<TDocument> Text(string search, string language);
    public FilterDefinition`1<TDocument> Type(FieldDefinition`1<TDocument> field, BsonType type);
    public FilterDefinition`1<TDocument> Type(FieldDefinition`1<TDocument> field, string type);
    public FilterDefinition`1<TDocument> Type(Expression`1<Func`2<TDocument, object>> field, BsonType type);
    public FilterDefinition`1<TDocument> Type(Expression`1<Func`2<TDocument, object>> field, string type);
    public FilterDefinition`1<TDocument> Where(Expression`1<Func`2<TDocument, bool>> expression);
}
internal abstract class MongoDB.Driver.FilteredMongoCollectionBase`1 : MongoCollectionBase`1<TDocument> {
    private FilterDefinition`1<TDocument> _filter;
    private IMongoCollection`1<TDocument> _wrappedCollection;
    public CollectionNamespace CollectionNamespace { get; }
    public IMongoDatabase Database { get; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public FilterDefinition`1<TDocument> Filter { get; }
    public IMongoIndexManager`1<TDocument> Indexes { get; }
    public IMongoSearchIndexManager SearchIndexes { get; }
    public MongoCollectionSettings Settings { get; }
    protected IMongoCollection`1<TDocument> WrappedCollection { get; }
    public FilteredMongoCollectionBase`1(IMongoCollection`1<TDocument> wrappedCollection, FilterDefinition`1<TDocument> filter);
    public virtual CollectionNamespace get_CollectionNamespace();
    public virtual IMongoDatabase get_Database();
    public virtual IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public sealed virtual FilterDefinition`1<TDocument> get_Filter();
    public virtual IMongoIndexManager`1<TDocument> get_Indexes();
    public virtual IMongoSearchIndexManager get_SearchIndexes();
    public virtual MongoCollectionSettings get_Settings();
    protected IMongoCollection`1<TDocument> get_WrappedCollection();
    public virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual BulkWriteResult`1<TDocument> BulkWrite(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual BulkWriteResult`1<TDocument> BulkWrite(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public virtual long Count(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public virtual long Count(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public virtual Task`1<long> CountAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public virtual Task`1<long> CountAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual long CountDocuments(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual long CountDocuments(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TField> Distinct(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TField> Distinct(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TItem> DistinctMany(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TItem> DistinctMany(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual long EstimatedDocumentCount(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> EstimatedDocumentCountAsync(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TProjection> FindSync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TProjection> FindSync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndDelete(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndDelete(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndDeleteAsync(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndDeleteAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndReplace(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndReplace(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndReplaceAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndReplaceAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndUpdate(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndUpdate(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndUpdateAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndUpdateAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual IAsyncCursor`1<TResult> MapReduce(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual IAsyncCursor`1<TResult> MapReduce(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    private FilterDefinition`1<TDocument> CombineFilters(FilterDefinition`1<TDocument> filter);
    protected virtual UpdateDefinition`1<TDocument> AdjustUpdateDefinition(UpdateDefinition`1<TDocument> updateDefinition, bool isUpsert);
    private IEnumerable`1<WriteModel`1<TDocument>> CombineModelFilters(IEnumerable`1<WriteModel`1<TDocument>> models);
    private PipelineDefinition`2<TDocument, TResult> CreateFilteredPipeline(PipelineDefinition`2<TDocument, TResult> pipeline);
    [CompilerGeneratedAttribute]
private WriteModel`1<TDocument> <CombineModelFilters>b__71_0(WriteModel`1<TDocument> x);
}
public class MongoDB.Driver.FindExpressionProjectionDefinition`2 : ProjectionDefinition`2<TSource, TProjection> {
    private Expression`1<Func`2<TSource, TProjection>> _expression;
    public Expression`1<Func`2<TSource, TProjection>> Expression { get; }
    public FindExpressionProjectionDefinition`2(Expression`1<Func`2<TSource, TProjection>> expression);
    public Expression`1<Func`2<TSource, TProjection>> get_Expression();
    public virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
}
internal class MongoDB.Driver.FindFluent`2 : FindFluentBase`2<TDocument, TProjection> {
    private IMongoCollection`1<TDocument> _collection;
    private FilterDefinition`1<TDocument> _filter;
    private FindOptions`2<TDocument, TProjection> _options;
    private IClientSessionHandle _session;
    public FilterDefinition`1<TDocument> Filter { get; public set; }
    public FindOptions`2<TDocument, TProjection> Options { get; }
    public FindFluent`2(IClientSessionHandle session, IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options);
    public virtual FilterDefinition`1<TDocument> get_Filter();
    public virtual void set_Filter(FilterDefinition`1<TDocument> value);
    public virtual FindOptions`2<TDocument, TProjection> get_Options();
    public virtual IFindFluent`2<TDocument, TResult> As(IBsonSerializer`1<TResult> resultSerializer);
    [ObsoleteAttribute("Use CountDocuments instead.")]
public virtual long Count(CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync instead.")]
public virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    public virtual long CountDocuments(CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(CancellationToken cancellationToken);
    public virtual IFindFluent`2<TDocument, TProjection> Limit(Nullable`1<int> limit);
    public virtual IFindFluent`2<TDocument, TNewProjection> Project(ProjectionDefinition`2<TDocument, TNewProjection> projection);
    public virtual IFindFluent`2<TDocument, TProjection> Skip(Nullable`1<int> skip);
    public virtual IFindFluent`2<TDocument, TProjection> Sort(SortDefinition`1<TDocument> sort);
    public virtual IAsyncCursor`1<TProjection> ToCursor(CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TProjection>> ToCursorAsync(CancellationToken cancellationToken);
    public virtual string ToString();
    private CountOptions CreateCountOptions();
    private TRendered Render(Func`2<RenderArgs`1<TDocument>, TRendered> renderer, bool renderForFind);
}
public abstract class MongoDB.Driver.FindFluentBase`2 : object {
    public FilterDefinition`1<TDocument> Filter { get; public set; }
    public FindOptions`2<TDocument, TProjection> Options { get; }
    public abstract virtual FilterDefinition`1<TDocument> get_Filter();
    public abstract virtual void set_Filter(FilterDefinition`1<TDocument> value);
    public abstract virtual FindOptions`2<TDocument, TProjection> get_Options();
    public abstract virtual IFindFluent`2<TDocument, TResult> As(IBsonSerializer`1<TResult> resultSerializer);
    [ObsoleteAttribute("Use CountDocuments instead.")]
public virtual long Count(CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync instead.")]
public abstract virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    public virtual long CountDocuments(CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(CancellationToken cancellationToken);
    public abstract virtual IFindFluent`2<TDocument, TProjection> Limit(Nullable`1<int> limit);
    public abstract virtual IFindFluent`2<TDocument, TNewProjection> Project(ProjectionDefinition`2<TDocument, TNewProjection> projection);
    public abstract virtual IFindFluent`2<TDocument, TProjection> Skip(Nullable`1<int> skip);
    public abstract virtual IFindFluent`2<TDocument, TProjection> Sort(SortDefinition`1<TDocument> sort);
    public virtual IAsyncCursor`1<TProjection> ToCursor(CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TProjection>> ToCursorAsync(CancellationToken cancellationToken);
}
public class MongoDB.Driver.FindOneAndDeleteOptions`1 : FindOneAndDeleteOptions`2<TDocument, TDocument> {
}
public class MongoDB.Driver.FindOneAndDeleteOptions`2 : object {
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private BsonDocument _let;
    private Nullable`1<TimeSpan> _maxTime;
    private ProjectionDefinition`2<TDocument, TProjection> _projection;
    private SortDefinition`1<TDocument> _sort;
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public BsonDocument Let { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public ProjectionDefinition`2<TDocument, TProjection> Projection { get; public set; }
    public SortDefinition`1<TDocument> Sort { get; public set; }
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public ProjectionDefinition`2<TDocument, TProjection> get_Projection();
    public void set_Projection(ProjectionDefinition`2<TDocument, TProjection> value);
    public SortDefinition`1<TDocument> get_Sort();
    public void set_Sort(SortDefinition`1<TDocument> value);
}
public class MongoDB.Driver.FindOneAndReplaceOptions`1 : FindOneAndReplaceOptions`2<TDocument, TDocument> {
}
public class MongoDB.Driver.FindOneAndReplaceOptions`2 : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private bool _isUpsert;
    private BsonDocument _let;
    private Nullable`1<TimeSpan> _maxTime;
    private ProjectionDefinition`2<TDocument, TProjection> _projection;
    private ReturnDocument _returnDocument;
    private SortDefinition`1<TDocument> _sort;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public BsonDocument Let { get; public set; }
    public bool IsUpsert { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public ProjectionDefinition`2<TDocument, TProjection> Projection { get; public set; }
    public ReturnDocument ReturnDocument { get; public set; }
    public SortDefinition`1<TDocument> Sort { get; public set; }
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public ProjectionDefinition`2<TDocument, TProjection> get_Projection();
    public void set_Projection(ProjectionDefinition`2<TDocument, TProjection> value);
    public ReturnDocument get_ReturnDocument();
    public void set_ReturnDocument(ReturnDocument value);
    public SortDefinition`1<TDocument> get_Sort();
    public void set_Sort(SortDefinition`1<TDocument> value);
}
public class MongoDB.Driver.FindOneAndUpdateOptions`1 : FindOneAndUpdateOptions`2<TDocument, TDocument> {
}
public class MongoDB.Driver.FindOneAndUpdateOptions`2 : object {
    private IEnumerable`1<ArrayFilterDefinition> _arrayFilters;
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private bool _isUpsert;
    private BsonDocument _let;
    private Nullable`1<TimeSpan> _maxTime;
    private ProjectionDefinition`2<TDocument, TProjection> _projection;
    private ReturnDocument _returnDocument;
    private SortDefinition`1<TDocument> _sort;
    public IEnumerable`1<ArrayFilterDefinition> ArrayFilters { get; public set; }
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public bool IsUpsert { get; public set; }
    public BsonDocument Let { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public ProjectionDefinition`2<TDocument, TProjection> Projection { get; public set; }
    public ReturnDocument ReturnDocument { get; public set; }
    public SortDefinition`1<TDocument> Sort { get; public set; }
    public IEnumerable`1<ArrayFilterDefinition> get_ArrayFilters();
    public void set_ArrayFilters(IEnumerable`1<ArrayFilterDefinition> value);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public ProjectionDefinition`2<TDocument, TProjection> get_Projection();
    public void set_Projection(ProjectionDefinition`2<TDocument, TProjection> value);
    public ReturnDocument get_ReturnDocument();
    public void set_ReturnDocument(ReturnDocument value);
    public SortDefinition`1<TDocument> get_Sort();
    public void set_Sort(SortDefinition`1<TDocument> value);
}
public class MongoDB.Driver.FindOptions : FindOptionsBase {
}
public class MongoDB.Driver.FindOptions`1 : FindOptions`2<TDocument, TDocument> {
}
public class MongoDB.Driver.FindOptions`2 : FindOptionsBase {
    private Nullable`1<int> _limit;
    private ProjectionDefinition`2<TDocument, TProjection> _projection;
    private Nullable`1<int> _skip;
    private SortDefinition`1<TDocument> _sort;
    public Nullable`1<int> Limit { get; public set; }
    public ProjectionDefinition`2<TDocument, TProjection> Projection { get; public set; }
    public Nullable`1<int> Skip { get; public set; }
    public SortDefinition`1<TDocument> Sort { get; public set; }
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
    public ProjectionDefinition`2<TDocument, TProjection> get_Projection();
    public void set_Projection(ProjectionDefinition`2<TDocument, TProjection> value);
    public Nullable`1<int> get_Skip();
    public void set_Skip(Nullable`1<int> value);
    public SortDefinition`1<TDocument> get_Sort();
    public void set_Sort(SortDefinition`1<TDocument> value);
}
public abstract class MongoDB.Driver.FindOptionsBase : object {
    private Nullable`1<bool> _allowDiskUse;
    private Nullable`1<bool> _allowPartialResults;
    private Nullable`1<int> _batchSize;
    private Collation _collation;
    private BsonValue _comment;
    private CursorType _cursorType;
    private BsonValue _hint;
    private BsonDocument _let;
    private BsonDocument _max;
    private Nullable`1<TimeSpan> _maxAwaitTime;
    private Nullable`1<TimeSpan> _maxTime;
    private BsonDocument _min;
    private BsonDocument _modifiers;
    private Nullable`1<bool> _noCursorTimeout;
    private Nullable`1<bool> _oplogReplay;
    private Nullable`1<bool> _returnKey;
    private Nullable`1<bool> _showRecordId;
    public Nullable`1<bool> AllowDiskUse { get; public set; }
    public Nullable`1<bool> AllowPartialResults { get; public set; }
    public Nullable`1<int> BatchSize { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public CursorType CursorType { get; public set; }
    public BsonValue Hint { get; public set; }
    public BsonDocument Let { get; public set; }
    public BsonDocument Max { get; public set; }
    public Nullable`1<TimeSpan> MaxAwaitTime { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public BsonDocument Min { get; public set; }
    [ObsoleteAttribute("Use individual properties instead.")]
public BsonDocument Modifiers { get; public set; }
    public Nullable`1<bool> NoCursorTimeout { get; public set; }
    [ObsoleteAttribute("OplogReplay is ignored by server versions 4.4.0 and newer.")]
public Nullable`1<bool> OplogReplay { get; public set; }
    public Nullable`1<bool> ReturnKey { get; public set; }
    public Nullable`1<bool> ShowRecordId { get; public set; }
    public Nullable`1<bool> get_AllowDiskUse();
    public void set_AllowDiskUse(Nullable`1<bool> value);
    public Nullable`1<bool> get_AllowPartialResults();
    public void set_AllowPartialResults(Nullable`1<bool> value);
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public CursorType get_CursorType();
    public void set_CursorType(CursorType value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
    public BsonDocument get_Max();
    public void set_Max(BsonDocument value);
    public Nullable`1<TimeSpan> get_MaxAwaitTime();
    public void set_MaxAwaitTime(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public BsonDocument get_Min();
    public void set_Min(BsonDocument value);
    public BsonDocument get_Modifiers();
    public void set_Modifiers(BsonDocument value);
    public Nullable`1<bool> get_NoCursorTimeout();
    public void set_NoCursorTimeout(Nullable`1<bool> value);
    public Nullable`1<bool> get_OplogReplay();
    public void set_OplogReplay(Nullable`1<bool> value);
    public Nullable`1<bool> get_ReturnKey();
    public void set_ReturnKey(Nullable`1<bool> value);
    public Nullable`1<bool> get_ShowRecordId();
    public void set_ShowRecordId(Nullable`1<bool> value);
}
[ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
internal class MongoDB.Driver.GeoHaystackIndexKeyDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private FieldDefinition`1<TDocument> _additionalFieldName;
    public GeoHaystackIndexKeyDefinition`1(FieldDefinition`1<TDocument> field, FieldDefinition`1<TDocument> additionalFieldName);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public static class MongoDB.Driver.GeoJsonObjectModel.GeoJson : object {
    public static GeoJsonBoundingBox`1<TCoordinates> BoundingBox(TCoordinates min, TCoordinates max);
    public static GeoJsonFeature`1<TCoordinates> Feature(GeoJsonGeometry`1<TCoordinates> geometry);
    public static GeoJsonFeature`1<TCoordinates> Feature(GeoJsonFeatureArgs`1<TCoordinates> args, GeoJsonGeometry`1<TCoordinates> geometry);
    public static GeoJsonFeatureCollection`1<TCoordinates> FeatureCollection(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonFeature`1[] features);
    public static GeoJsonFeatureCollection`1<TCoordinates> FeatureCollection(GeoJsonFeature`1[] features);
    public static GeoJson2DGeographicCoordinates Geographic(double longitude, double latitude);
    public static GeoJson3DGeographicCoordinates Geographic(double longitude, double latitude, double altitude);
    public static GeoJsonGeometryCollection`1<TCoordinates> GeometryCollection(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonGeometry`1[] geometries);
    public static GeoJsonGeometryCollection`1<TCoordinates> GeometryCollection(GeoJsonGeometry`1[] geometries);
    public static GeoJsonLinearRingCoordinates`1<TCoordinates> LinearRingCoordinates(TCoordinates[] positions);
    public static GeoJsonLineString`1<TCoordinates> LineString(GeoJsonObjectArgs`1<TCoordinates> args, TCoordinates[] positions);
    public static GeoJsonLineString`1<TCoordinates> LineString(TCoordinates[] positions);
    public static GeoJsonLineStringCoordinates`1<TCoordinates> LineStringCoordinates(TCoordinates[] positions);
    public static GeoJsonMultiLineString`1<TCoordinates> MultiLineString(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonLineStringCoordinates`1[] lineStrings);
    public static GeoJsonMultiLineString`1<TCoordinates> MultiLineString(GeoJsonLineStringCoordinates`1[] lineStrings);
    public static GeoJsonMultiPoint`1<TCoordinates> MultiPoint(GeoJsonObjectArgs`1<TCoordinates> args, TCoordinates[] positions);
    public static GeoJsonMultiPoint`1<TCoordinates> MultiPoint(TCoordinates[] positions);
    public static GeoJsonMultiPolygon`1<TCoordinates> MultiPolygon(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonPolygonCoordinates`1[] polygons);
    public static GeoJsonMultiPolygon`1<TCoordinates> MultiPolygon(GeoJsonPolygonCoordinates`1[] polygons);
    public static GeoJsonPoint`1<TCoordinates> Point(GeoJsonObjectArgs`1<TCoordinates> args, TCoordinates coordinates);
    public static GeoJsonPoint`1<TCoordinates> Point(TCoordinates coordinates);
    public static GeoJsonPolygon`1<TCoordinates> Polygon(GeoJsonObjectArgs`1<TCoordinates> args, TCoordinates[] positions);
    public static GeoJsonPolygon`1<TCoordinates> Polygon(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonPolygonCoordinates`1<TCoordinates> coordinates);
    public static GeoJsonPolygon`1<TCoordinates> Polygon(GeoJsonPolygonCoordinates`1<TCoordinates> coordinates);
    public static GeoJsonPolygon`1<TCoordinates> Polygon(TCoordinates[] positions);
    public static GeoJsonPolygonCoordinates`1<TCoordinates> PolygonCoordinates(TCoordinates[] positions);
    public static GeoJsonPolygonCoordinates`1<TCoordinates> PolygonCoordinates(GeoJsonLinearRingCoordinates`1<TCoordinates> exterior, GeoJsonLinearRingCoordinates`1[] holes);
    public static GeoJson2DCoordinates Position(double x, double y);
    public static GeoJson3DCoordinates Position(double x, double y, double z);
    public static GeoJson2DProjectedCoordinates Projected(double easting, double northing);
    public static GeoJson3DProjectedCoordinates Projected(double easting, double northing, double altitude);
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DCoordinatesSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJson2DCoordinates : GeoJsonCoordinates {
    private ReadOnlyCollection`1<double> _values;
    public ReadOnlyCollection`1<double> Values { get; }
    public double X { get; }
    public double Y { get; }
    public GeoJson2DCoordinates(double x, double y);
    public virtual ReadOnlyCollection`1<double> get_Values();
    public double get_X();
    public double get_Y();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DGeographicCoordinatesSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates : GeoJsonCoordinates {
    private ReadOnlyCollection`1<double> _values;
    public ReadOnlyCollection`1<double> Values { get; }
    public double Longitude { get; }
    public double Latitude { get; }
    public GeoJson2DGeographicCoordinates(double longitude, double latitude);
    public virtual ReadOnlyCollection`1<double> get_Values();
    public double get_Longitude();
    public double get_Latitude();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DProjectedCoordinatesSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJson2DProjectedCoordinates : GeoJsonCoordinates {
    private ReadOnlyCollection`1<double> _values;
    public ReadOnlyCollection`1<double> Values { get; }
    public double Easting { get; }
    public double Northing { get; }
    public GeoJson2DProjectedCoordinates(double easting, double northing);
    public virtual ReadOnlyCollection`1<double> get_Values();
    public double get_Easting();
    public double get_Northing();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DCoordinatesSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJson3DCoordinates : GeoJsonCoordinates {
    private ReadOnlyCollection`1<double> _values;
    public ReadOnlyCollection`1<double> Values { get; }
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    public GeoJson3DCoordinates(double x, double y, double z);
    public virtual ReadOnlyCollection`1<double> get_Values();
    public double get_X();
    public double get_Y();
    public double get_Z();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DGeographicCoordinatesSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJson3DGeographicCoordinates : GeoJsonCoordinates {
    private ReadOnlyCollection`1<double> _values;
    public ReadOnlyCollection`1<double> Values { get; }
    public double Longitude { get; }
    public double Latitude { get; }
    public double Altitude { get; }
    public GeoJson3DGeographicCoordinates(double longitude, double latitude, double altitude);
    public virtual ReadOnlyCollection`1<double> get_Values();
    public double get_Longitude();
    public double get_Latitude();
    public double get_Altitude();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DProjectedCoordinatesSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJson3DProjectedCoordinates : GeoJsonCoordinates {
    private ReadOnlyCollection`1<double> _values;
    public ReadOnlyCollection`1<double> Values { get; }
    public double Easting { get; }
    public double Northing { get; }
    public double Altitude { get; }
    public GeoJson3DProjectedCoordinates(double easting, double northing, double altitude);
    public virtual ReadOnlyCollection`1<double> get_Values();
    public double get_Easting();
    public double get_Northing();
    public double get_Altitude();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonBoundingBoxSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonBoundingBox`1 : object {
    private TCoordinates _max;
    private TCoordinates _min;
    public TCoordinates Max { get; }
    public TCoordinates Min { get; }
    public GeoJsonBoundingBox`1(TCoordinates min, TCoordinates max);
    public TCoordinates get_Max();
    public TCoordinates get_Min();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinateReferenceSystemSerializer")]
public abstract class MongoDB.Driver.GeoJsonObjectModel.GeoJsonCoordinateReferenceSystem : object {
    public string Type { get; }
    public abstract virtual string get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinatesSerializer")]
public abstract class MongoDB.Driver.GeoJsonObjectModel.GeoJsonCoordinates : object {
    public ReadOnlyCollection`1<double> Values { get; }
    public abstract virtual ReadOnlyCollection`1<double> get_Values();
    public static bool op_Equality(GeoJsonCoordinates lhs, GeoJsonCoordinates rhs);
    public static bool op_Inequality(GeoJsonCoordinates lhs, GeoJsonCoordinates rhs);
    public sealed virtual bool Equals(GeoJsonCoordinates obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeature`1 : GeoJsonObject`1<TCoordinates> {
    private GeoJsonGeometry`1<TCoordinates> _geometry;
    private BsonValue _id;
    private BsonDocument _properties;
    public GeoJsonGeometry`1<TCoordinates> Geometry { get; }
    public BsonValue Id { get; }
    public BsonDocument Properties { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonFeature`1(GeoJsonGeometry`1<TCoordinates> geometry);
    public GeoJsonFeature`1(GeoJsonFeatureArgs`1<TCoordinates> args, GeoJsonGeometry`1<TCoordinates> geometry);
    public GeoJsonGeometry`1<TCoordinates> get_Geometry();
    public BsonValue get_Id();
    public BsonDocument get_Properties();
    public virtual GeoJsonObjectType get_Type();
}
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeatureArgs`1 : GeoJsonObjectArgs`1<TCoordinates> {
    [CompilerGeneratedAttribute]
private BsonValue <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonDocument <Properties>k__BackingField;
    public BsonValue Id { get; public set; }
    public BsonDocument Properties { get; public set; }
    [CompilerGeneratedAttribute]
public BsonValue get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(BsonValue value);
    [CompilerGeneratedAttribute]
public BsonDocument get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(BsonDocument value);
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureCollectionSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonFeatureCollection`1 : GeoJsonObject`1<TCoordinates> {
    private ReadOnlyCollection`1<GeoJsonFeature`1<TCoordinates>> _features;
    public ReadOnlyCollection`1<GeoJsonFeature`1<TCoordinates>> Features { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonFeatureCollection`1(IEnumerable`1<GeoJsonFeature`1<TCoordinates>> features);
    public GeoJsonFeatureCollection`1(GeoJsonObjectArgs`1<TCoordinates> args, IEnumerable`1<GeoJsonFeature`1<TCoordinates>> features);
    public ReadOnlyCollection`1<GeoJsonFeature`1<TCoordinates>> get_Features();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometrySerializer`1")]
public abstract class MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometry`1 : GeoJsonObject`1<TCoordinates> {
    protected GeoJsonGeometry`1(GeoJsonObjectArgs`1<TCoordinates> args);
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometryCollectionSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometryCollection`1 : GeoJsonGeometry`1<TCoordinates> {
    private ReadOnlyCollection`1<GeoJsonGeometry`1<TCoordinates>> _geometries;
    public ReadOnlyCollection`1<GeoJsonGeometry`1<TCoordinates>> Geometries { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonGeometryCollection`1(IEnumerable`1<GeoJsonGeometry`1<TCoordinates>> geometries);
    public GeoJsonGeometryCollection`1(GeoJsonObjectArgs`1<TCoordinates> args, IEnumerable`1<GeoJsonGeometry`1<TCoordinates>> geometries);
    public ReadOnlyCollection`1<GeoJsonGeometry`1<TCoordinates>> get_Geometries();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinearRingCoordinatesSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonLinearRingCoordinates`1 : GeoJsonLineStringCoordinates`1<TCoordinates> {
    public GeoJsonLinearRingCoordinates`1(IEnumerable`1<TCoordinates> positions);
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonLineString`1 : GeoJsonGeometry`1<TCoordinates> {
    private GeoJsonLineStringCoordinates`1<TCoordinates> _coordinates;
    public GeoJsonLineStringCoordinates`1<TCoordinates> Coordinates { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonLineString`1(GeoJsonLineStringCoordinates`1<TCoordinates> coordinates);
    public GeoJsonLineString`1(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonLineStringCoordinates`1<TCoordinates> coordinates);
    public GeoJsonLineStringCoordinates`1<TCoordinates> get_Coordinates();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringCoordinatesSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonLineStringCoordinates`1 : object {
    private ReadOnlyCollection`1<TCoordinates> _positions;
    public ReadOnlyCollection`1<TCoordinates> Positions { get; }
    public GeoJsonLineStringCoordinates`1(IEnumerable`1<TCoordinates> positions);
    public ReadOnlyCollection`1<TCoordinates> get_Positions();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinkedCoordinateReferenceSystemSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonLinkedCoordinateReferenceSystem : GeoJsonCoordinateReferenceSystem {
    private string _href;
    private string _hrefType;
    public string HRef { get; }
    public string HRefType { get; }
    public string Type { get; }
    public GeoJsonLinkedCoordinateReferenceSystem(string href);
    public GeoJsonLinkedCoordinateReferenceSystem(string href, string hrefType);
    public string get_HRef();
    public string get_HRefType();
    public virtual string get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiLineString`1 : GeoJsonGeometry`1<TCoordinates> {
    private GeoJsonMultiLineStringCoordinates`1<TCoordinates> _coordinates;
    public GeoJsonMultiLineStringCoordinates`1<TCoordinates> Coordinates { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonMultiLineString`1(GeoJsonMultiLineStringCoordinates`1<TCoordinates> coordinates);
    public GeoJsonMultiLineString`1(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonMultiLineStringCoordinates`1<TCoordinates> coordinates);
    public GeoJsonMultiLineStringCoordinates`1<TCoordinates> get_Coordinates();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringCoordinatesSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiLineStringCoordinates`1 : object {
    private ReadOnlyCollection`1<GeoJsonLineStringCoordinates`1<TCoordinates>> _lineStrings;
    public ReadOnlyCollection`1<GeoJsonLineStringCoordinates`1<TCoordinates>> LineStrings { get; }
    public GeoJsonMultiLineStringCoordinates`1(IEnumerable`1<GeoJsonLineStringCoordinates`1<TCoordinates>> lineStrings);
    public ReadOnlyCollection`1<GeoJsonLineStringCoordinates`1<TCoordinates>> get_LineStrings();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPoint`1 : GeoJsonGeometry`1<TCoordinates> {
    private GeoJsonMultiPointCoordinates`1<TCoordinates> _coordinates;
    public GeoJsonMultiPointCoordinates`1<TCoordinates> Coordinates { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonMultiPoint`1(GeoJsonMultiPointCoordinates`1<TCoordinates> coordinates);
    public GeoJsonMultiPoint`1(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonMultiPointCoordinates`1<TCoordinates> coordinates);
    public GeoJsonMultiPointCoordinates`1<TCoordinates> get_Coordinates();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointCoordinatesSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPointCoordinates`1 : object {
    private ReadOnlyCollection`1<TCoordinates> _positions;
    public ReadOnlyCollection`1<TCoordinates> Positions { get; }
    public GeoJsonMultiPointCoordinates`1(IEnumerable`1<TCoordinates> positions);
    public ReadOnlyCollection`1<TCoordinates> get_Positions();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPolygon`1 : GeoJsonGeometry`1<TCoordinates> {
    private GeoJsonMultiPolygonCoordinates`1<TCoordinates> _coordinates;
    public GeoJsonMultiPolygonCoordinates`1<TCoordinates> Coordinates { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonMultiPolygon`1(GeoJsonMultiPolygonCoordinates`1<TCoordinates> coordinates);
    public GeoJsonMultiPolygon`1(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonMultiPolygonCoordinates`1<TCoordinates> coordinates);
    public GeoJsonMultiPolygonCoordinates`1<TCoordinates> get_Coordinates();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonCoordinatesSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonMultiPolygonCoordinates`1 : object {
    private ReadOnlyCollection`1<GeoJsonPolygonCoordinates`1<TCoordinates>> _polygons;
    public ReadOnlyCollection`1<GeoJsonPolygonCoordinates`1<TCoordinates>> Polygons { get; }
    public GeoJsonMultiPolygonCoordinates`1(IEnumerable`1<GeoJsonPolygonCoordinates`1<TCoordinates>> polygons);
    public ReadOnlyCollection`1<GeoJsonPolygonCoordinates`1<TCoordinates>> get_Polygons();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonNamedCoordinateReferenceSystemSerializer")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonNamedCoordinateReferenceSystem : GeoJsonCoordinateReferenceSystem {
    private string _name;
    public string Name { get; }
    public string Type { get; }
    public GeoJsonNamedCoordinateReferenceSystem(string name);
    public string get_Name();
    public virtual string get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializer`1")]
public abstract class MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject`1 : object {
    private GeoJsonBoundingBox`1<TCoordinates> _boundingBox;
    private GeoJsonCoordinateReferenceSystem _coordinateReferenceSystem;
    private BsonDocument _extraMembers;
    public GeoJsonBoundingBox`1<TCoordinates> BoundingBox { get; }
    public GeoJsonCoordinateReferenceSystem CoordinateReferenceSystem { get; }
    public BsonDocument ExtraMembers { get; }
    public GeoJsonObjectType Type { get; }
    protected GeoJsonObject`1(GeoJsonObjectArgs`1<TCoordinates> args);
    public GeoJsonBoundingBox`1<TCoordinates> get_BoundingBox();
    public GeoJsonCoordinateReferenceSystem get_CoordinateReferenceSystem();
    public BsonDocument get_ExtraMembers();
    public abstract virtual GeoJsonObjectType get_Type();
}
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonObjectArgs`1 : object {
    [CompilerGeneratedAttribute]
private GeoJsonBoundingBox`1<TCoordinates> <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private GeoJsonCoordinateReferenceSystem <CoordinateReferenceSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonDocument <ExtraMembers>k__BackingField;
    public GeoJsonBoundingBox`1<TCoordinates> BoundingBox { get; public set; }
    public GeoJsonCoordinateReferenceSystem CoordinateReferenceSystem { get; public set; }
    public BsonDocument ExtraMembers { get; public set; }
    [CompilerGeneratedAttribute]
public GeoJsonBoundingBox`1<TCoordinates> get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(GeoJsonBoundingBox`1<TCoordinates> value);
    [CompilerGeneratedAttribute]
public GeoJsonCoordinateReferenceSystem get_CoordinateReferenceSystem();
    [CompilerGeneratedAttribute]
public void set_CoordinateReferenceSystem(GeoJsonCoordinateReferenceSystem value);
    [CompilerGeneratedAttribute]
public BsonDocument get_ExtraMembers();
    [CompilerGeneratedAttribute]
public void set_ExtraMembers(BsonDocument value);
}
public enum MongoDB.Driver.GeoJsonObjectModel.GeoJsonObjectType : Enum {
    public int value__;
    public static GeoJsonObjectType Feature;
    public static GeoJsonObjectType FeatureCollection;
    public static GeoJsonObjectType GeometryCollection;
    public static GeoJsonObjectType LineString;
    public static GeoJsonObjectType MultiLineString;
    public static GeoJsonObjectType MultiPoint;
    public static GeoJsonObjectType MultiPolygon;
    public static GeoJsonObjectType Point;
    public static GeoJsonObjectType Polygon;
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPointSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint`1 : GeoJsonGeometry`1<TCoordinates> {
    private TCoordinates _coordinates;
    public TCoordinates Coordinates { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonPoint`1(TCoordinates coordinates);
    public GeoJsonPoint`1(GeoJsonObjectArgs`1<TCoordinates> args, TCoordinates coordinates);
    public TCoordinates get_Coordinates();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonPolygon`1 : GeoJsonGeometry`1<TCoordinates> {
    private GeoJsonPolygonCoordinates`1<TCoordinates> _coordinates;
    public GeoJsonPolygonCoordinates`1<TCoordinates> Coordinates { get; }
    public GeoJsonObjectType Type { get; }
    public GeoJsonPolygon`1(GeoJsonPolygonCoordinates`1<TCoordinates> coordinates);
    public GeoJsonPolygon`1(GeoJsonObjectArgs`1<TCoordinates> args, GeoJsonPolygonCoordinates`1<TCoordinates> coordinates);
    public GeoJsonPolygonCoordinates`1<TCoordinates> get_Coordinates();
    public virtual GeoJsonObjectType get_Type();
}
[BsonSerializerAttribute("MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonCoordinatesSerializer`1")]
public class MongoDB.Driver.GeoJsonObjectModel.GeoJsonPolygonCoordinates`1 : object {
    private GeoJsonLinearRingCoordinates`1<TCoordinates> _exterior;
    private ReadOnlyCollection`1<GeoJsonLinearRingCoordinates`1<TCoordinates>> _holes;
    public GeoJsonLinearRingCoordinates`1<TCoordinates> Exterior { get; }
    public ReadOnlyCollection`1<GeoJsonLinearRingCoordinates`1<TCoordinates>> Holes { get; }
    public GeoJsonPolygonCoordinates`1(GeoJsonLinearRingCoordinates`1<TCoordinates> exterior);
    public GeoJsonPolygonCoordinates`1(GeoJsonLinearRingCoordinates`1<TCoordinates> exterior, IEnumerable`1<GeoJsonLinearRingCoordinates`1<TCoordinates>> holes);
    public GeoJsonLinearRingCoordinates`1<TCoordinates> get_Exterior();
    public ReadOnlyCollection`1<GeoJsonLinearRingCoordinates`1<TCoordinates>> get_Holes();
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DCoordinatesSerializer : ClassSerializerBase`1<GeoJson2DCoordinates> {
    private static IBsonSerializer`1<double> __doubleSerializer;
    private static GeoJson2DCoordinatesSerializer();
    protected virtual GeoJson2DCoordinates DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJson2DCoordinates value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DGeographicCoordinatesSerializer : ClassSerializerBase`1<GeoJson2DGeographicCoordinates> {
    private static IBsonSerializer`1<double> __doubleSerializer;
    private static GeoJson2DGeographicCoordinatesSerializer();
    protected virtual GeoJson2DGeographicCoordinates DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJson2DGeographicCoordinates value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson2DProjectedCoordinatesSerializer : ClassSerializerBase`1<GeoJson2DProjectedCoordinates> {
    private static IBsonSerializer`1<double> __doubleSerializer;
    private static GeoJson2DProjectedCoordinatesSerializer();
    protected virtual GeoJson2DProjectedCoordinates DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJson2DProjectedCoordinates value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DCoordinatesSerializer : ClassSerializerBase`1<GeoJson3DCoordinates> {
    private static IBsonSerializer`1<double> __doubleSerializer;
    private static GeoJson3DCoordinatesSerializer();
    protected virtual GeoJson3DCoordinates DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJson3DCoordinates value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DGeographicCoordinatesSerializer : ClassSerializerBase`1<GeoJson3DGeographicCoordinates> {
    private static IBsonSerializer`1<double> __doubleSerializer;
    private static GeoJson3DGeographicCoordinatesSerializer();
    protected virtual GeoJson3DGeographicCoordinates DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJson3DGeographicCoordinates value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJson3DProjectedCoordinatesSerializer : ClassSerializerBase`1<GeoJson3DProjectedCoordinates> {
    private static IBsonSerializer`1<double> __doubleSerializer;
    private static GeoJson3DProjectedCoordinatesSerializer();
    protected virtual GeoJson3DProjectedCoordinates DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJson3DProjectedCoordinates value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonBoundingBoxSerializer`1 : ClassSerializerBase`1<GeoJsonBoundingBox`1<TCoordinates>> {
    private IBsonSerializer`1<TCoordinates> _coordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonBoundingBox`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonBoundingBox`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinateReferenceSystemSerializer : ClassSerializerBase`1<GeoJsonCoordinateReferenceSystem> {
    protected virtual Type GetActualType(BsonDeserializationContext context);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonCoordinatesSerializer : ClassSerializerBase`1<GeoJsonCoordinates> {
    protected virtual Type GetActualType(BsonDeserializationContext context);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureCollectionSerializer`1 : ClassSerializerBase`1<GeoJsonFeatureCollection`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonFeature`1<TCoordinates>> _featureSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonFeatureCollection`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonFeatureCollection`1<TCoordinates> value);
    private List`1<GeoJsonFeature`1<TCoordinates>> DeserializeFeatures(BsonDeserializationContext context);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonFeatureCollection`1<TCoordinates> value);
    private void SerializeFeatures(BsonSerializationContext context, IEnumerable`1<GeoJsonFeature`1<TCoordinates>> features);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonFeatureSerializer`1 : ClassSerializerBase`1<GeoJsonFeature`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonGeometry`1<TCoordinates>> _geometrySerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonFeature`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonFeature`1<TCoordinates> value);
    private GeoJsonGeometry`1<TCoordinates> DeserializeGeometry(BsonDeserializationContext context);
    private BsonValue DeserializeId(BsonDeserializationContext context);
    private BsonDocument DeserializeProperties(BsonDeserializationContext context);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonFeature`1<TCoordinates> value);
    private void SerializeGeometry(BsonSerializationContext context, GeoJsonGeometry`1<TCoordinates> geometry);
    private void SerializeId(BsonSerializationContext context, BsonValue id);
    private void SerializeProperties(BsonSerializationContext context, BsonDocument properties);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometryCollectionSerializer`1 : ClassSerializerBase`1<GeoJsonGeometryCollection`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonGeometry`1<TCoordinates>> _geometrySerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonGeometryCollection`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonGeometryCollection`1<TCoordinates> value);
    private List`1<GeoJsonGeometry`1<TCoordinates>> DeserializeGeometries(BsonDeserializationContext context);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonGeometryCollection`1<TCoordinates> value);
    private void SerializeGeometries(BsonSerializationContext context, IEnumerable`1<GeoJsonGeometry`1<TCoordinates>> geometries);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonGeometrySerializer`1 : ClassSerializerBase`1<GeoJsonGeometry`1<TCoordinates>> {
    protected virtual Type GetActualType(BsonDeserializationContext context);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinearRingCoordinatesSerializer`1 : ClassSerializerBase`1<GeoJsonLinearRingCoordinates`1<TCoordinates>> {
    private IBsonSerializer`1<TCoordinates> _coordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonLinearRingCoordinates`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonLinearRingCoordinates`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringCoordinatesSerializer`1 : ClassSerializerBase`1<GeoJsonLineStringCoordinates`1<TCoordinates>> {
    private IBsonSerializer`1<TCoordinates> _coordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonLineStringCoordinates`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonLineStringCoordinates`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLineStringSerializer`1 : ClassSerializerBase`1<GeoJsonLineString`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonLineStringCoordinates`1<TCoordinates>> _coordinatesSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonLineString`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonLineString`1<TCoordinates> value);
    private GeoJsonLineStringCoordinates`1<TCoordinates> DeserializeCoordinates(BsonDeserializationContext context);
    private void SerializeCoordinates(BsonSerializationContext context, GeoJsonLineStringCoordinates`1<TCoordinates> coordinates);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonLineString`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonLinkedCoordinateReferenceSystemSerializer : ClassSerializerBase`1<GeoJsonLinkedCoordinateReferenceSystem> {
    private SerializerHelper _helper;
    private SerializerHelper _propertiesHelper;
    protected virtual GeoJsonLinkedCoordinateReferenceSystem DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonLinkedCoordinateReferenceSystem value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringCoordinatesSerializer`1 : ClassSerializerBase`1<GeoJsonMultiLineStringCoordinates`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonLineStringCoordinates`1<TCoordinates>> _lineStringCoordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonMultiLineStringCoordinates`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonMultiLineStringCoordinates`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiLineStringSerializer`1 : ClassSerializerBase`1<GeoJsonMultiLineString`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonMultiLineStringCoordinates`1<TCoordinates>> _coordinatesSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonMultiLineString`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonMultiLineString`1<TCoordinates> value);
    private GeoJsonMultiLineStringCoordinates`1<TCoordinates> DeserializeCoordinates(BsonDeserializationContext context);
    private void SerializeCoordinates(BsonSerializationContext context, GeoJsonMultiLineStringCoordinates`1<TCoordinates> coordinates);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonMultiLineString`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointCoordinatesSerializer`1 : ClassSerializerBase`1<GeoJsonMultiPointCoordinates`1<TCoordinates>> {
    private IBsonSerializer`1<TCoordinates> _coordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonMultiPointCoordinates`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonMultiPointCoordinates`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPointSerializer`1 : ClassSerializerBase`1<GeoJsonMultiPoint`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonMultiPointCoordinates`1<TCoordinates>> _coordinatesSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonMultiPoint`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonMultiPoint`1<TCoordinates> value);
    private GeoJsonMultiPointCoordinates`1<TCoordinates> DeserializeCoordinates(BsonDeserializationContext context);
    private void SerializeCoordinates(BsonSerializationContext context, GeoJsonMultiPointCoordinates`1<TCoordinates> coordinates);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonMultiPoint`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonCoordinatesSerializer`1 : ClassSerializerBase`1<GeoJsonMultiPolygonCoordinates`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonPolygonCoordinates`1<TCoordinates>> _polygonCoordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonMultiPolygonCoordinates`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonMultiPolygonCoordinates`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonMultiPolygonSerializer`1 : ClassSerializerBase`1<GeoJsonMultiPolygon`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonMultiPolygonCoordinates`1<TCoordinates>> _coordinatesSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonMultiPolygon`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonMultiPolygon`1<TCoordinates> value);
    private GeoJsonMultiPolygonCoordinates`1<TCoordinates> DeserializeCoordinates(BsonDeserializationContext context);
    private void SerializeCoordinates(BsonSerializationContext context, GeoJsonMultiPolygonCoordinates`1<TCoordinates> coordinates);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonMultiPolygon`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonNamedCoordinateReferenceSystemSerializer : ClassSerializerBase`1<GeoJsonNamedCoordinateReferenceSystem> {
    private SerializerHelper _helper;
    private SerializerHelper _propertiesHelper;
    protected virtual GeoJsonNamedCoordinateReferenceSystem DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonNamedCoordinateReferenceSystem value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializer`1 : ClassSerializerBase`1<GeoJsonObject`1<TCoordinates>> {
    protected virtual Type GetActualType(BsonDeserializationContext context);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonObjectSerializerHelper`1 : SerializerHelper {
    private IBsonSerializer`1<GeoJsonBoundingBox`1<TCoordinates>> _boundingBoxSerializer;
    private IBsonSerializer`1<GeoJsonCoordinateReferenceSystem> _coordinateReferenceSystemSerializer;
    private string _type;
    public GeoJsonObjectSerializerHelper`1(string type, Member[] derivedMembers);
    private static IEnumerable`1<Member> CreateBaseMembers();
    private static Member[] CreateCombinedMembers(IEnumerable`1<Member> derivedMembers);
    private static void ThrowIfDuplicateMemberFlags(Member[] members);
    public void DeserializeBaseMember(BsonDeserializationContext context, string elementName, long flag, GeoJsonObjectArgs`1<TCoordinates> args);
    public void SerializeMembers(BsonSerializationContext context, TValue value, Action`2<BsonSerializationContext, TValue> serializeDerivedMembers);
    private GeoJsonBoundingBox`1<TCoordinates> DeserializeBoundingBox(BsonDeserializationContext context);
    private GeoJsonCoordinateReferenceSystem DeserializeCoordinateReferenceSystem(BsonDeserializationContext context);
    private void DeserializeExtraMember(BsonDeserializationContext context, string elementName, GeoJsonObjectArgs`1<TCoordinates> args);
    private void EnsureTypeIsValid(BsonDeserializationContext context);
    private void SerializeBoundingBox(BsonSerializationContext context, GeoJsonBoundingBox`1<TCoordinates> boundingBox);
    private void SerializeCoordinateReferenceSystem(BsonSerializationContext context, GeoJsonCoordinateReferenceSystem coordinateReferenceSystem);
    private void SerializeExtraMembers(BsonSerializationContext context, BsonDocument value);
    private void SerializeType(BsonSerializationContext context, GeoJsonObjectType type);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPointSerializer`1 : ClassSerializerBase`1<GeoJsonPoint`1<TCoordinates>> {
    private IBsonSerializer`1<TCoordinates> _coordinatesSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonPoint`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonPoint`1<TCoordinates> value);
    private TCoordinates DeserializeCoordinates(BsonDeserializationContext context);
    private void SerializeCoordinates(BsonSerializationContext context, TCoordinates coordinates);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonPoint`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonCoordinatesSerializer`1 : ClassSerializerBase`1<GeoJsonPolygonCoordinates`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonLinearRingCoordinates`1<TCoordinates>> _linearRingCoordinatesSerializer;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonPolygonCoordinates`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonPolygonCoordinates`1<TCoordinates> value);
}
public class MongoDB.Driver.GeoJsonObjectModel.Serializers.GeoJsonPolygonSerializer`1 : ClassSerializerBase`1<GeoJsonPolygon`1<TCoordinates>> {
    private IBsonSerializer`1<GeoJsonPolygonCoordinates`1<TCoordinates>> _coordinatesSerializer;
    private GeoJsonObjectSerializerHelper`1<TCoordinates> _helper;
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected virtual GeoJsonPolygon`1<TCoordinates> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, GeoJsonPolygon`1<TCoordinates> value);
    private GeoJsonPolygonCoordinates`1<TCoordinates> DeserializeCoordinates(BsonDeserializationContext context);
    private void SerializeCoordinates(BsonSerializationContext context, GeoJsonPolygonCoordinates`1<TCoordinates> coordinates);
    private void SerializeDerivedMembers(BsonSerializationContext context, GeoJsonPolygon`1<TCoordinates> value);
}
internal class MongoDB.Driver.GeometryOperatorFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`1<TDocument> _field;
    private GeoJsonGeometry`1<TCoordinates> _geometry;
    public GeometryOperatorFilterDefinition`2(string operatorName, FieldDefinition`1<TDocument> field, GeoJsonGeometry`1<TCoordinates> geometry);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.GroupExpressionProjection`3 : ProjectionDefinition`2<TInput, TOutput> {
    private Expression`1<Func`2<TInput, TKey>> _idExpression;
    private Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> _groupExpression;
    private ExpressionTranslationOptions _translationOptions;
    public Expression`1<Func`2<TInput, TKey>> IdExpression { get; }
    public Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> GroupExpression { get; }
    public GroupExpressionProjection`3(Expression`1<Func`2<TInput, TKey>> idExpression, Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> groupExpression, ExpressionTranslationOptions translationOptions);
    public Expression`1<Func`2<TInput, TKey>> get_IdExpression();
    public Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> get_GroupExpression();
    public virtual RenderedProjectionDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public interface MongoDB.Driver.IAggregateFluent`1 {
    public IMongoDatabase Database { get; }
    public AggregateOptions Options { get; }
    public IList`1<IPipelineStageDefinition> Stages { get; }
    public abstract virtual IMongoDatabase get_Database();
    public abstract virtual AggregateOptions get_Options();
    public abstract virtual IList`1<IPipelineStageDefinition> get_Stages();
    public abstract virtual IAggregateFluent`1<TNewResult> AppendStage(PipelineStageDefinition`2<TResult, TNewResult> stage);
    public abstract virtual IAggregateFluent`1<TNewResult> As(IBsonSerializer`1<TNewResult> newResultSerializer);
    public abstract virtual IAggregateFluent`1<AggregateBucketResult`1<TValue>> Bucket(AggregateExpressionDefinition`2<TResult, TValue> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options);
    public abstract virtual IAggregateFluent`1<TNewResult> Bucket(AggregateExpressionDefinition`2<TResult, TValue> groupBy, IEnumerable`1<TValue> boundaries, ProjectionDefinition`2<TResult, TNewResult> output, AggregateBucketOptions`1<TValue> options);
    public abstract virtual IAggregateFluent`1<AggregateBucketAutoResult`1<TValue>> BucketAuto(AggregateExpressionDefinition`2<TResult, TValue> groupBy, int buckets, AggregateBucketAutoOptions options);
    public abstract virtual IAggregateFluent`1<TNewResult> BucketAuto(AggregateExpressionDefinition`2<TResult, TValue> groupBy, int buckets, ProjectionDefinition`2<TResult, TNewResult> output, AggregateBucketAutoOptions options);
    public abstract virtual IAggregateFluent`1<ChangeStreamDocument`1<TResult>> ChangeStream(ChangeStreamStageOptions options);
    public abstract virtual IAggregateFluent`1<AggregateCountResult> Count();
    public abstract virtual IAggregateFluent`1<TResult> Densify(FieldDefinition`1<TResult> field, DensifyRange range, IEnumerable`1<FieldDefinition`1<TResult>> partitionByFields);
    public abstract virtual IAggregateFluent`1<TResult> Densify(FieldDefinition`1<TResult> field, DensifyRange range, FieldDefinition`1[] partitionByFields);
    public abstract virtual IAggregateFluent`1<TNewResult> Facet(IEnumerable`1<AggregateFacet`1<TResult>> facets, AggregateFacetOptions`1<TNewResult> options);
    public abstract virtual IAggregateFluent`1<TNewResult> GraphLookup(IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TResult, TStartWith> startWith, FieldDefinition`2<TNewResult, TAs> as, FieldDefinition`2<TAsElement, int> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TNewResult> options);
    public abstract virtual IAggregateFluent`1<TNewResult> Group(ProjectionDefinition`2<TResult, TNewResult> group);
    public abstract virtual IAggregateFluent`1<TResult> Limit(long limit);
    public abstract virtual IAggregateFluent`1<TNewResult> Lookup(string foreignCollectionName, FieldDefinition`1<TResult> localField, FieldDefinition`1<TForeignDocument> foreignField, FieldDefinition`1<TNewResult> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    public abstract virtual IAggregateFluent`1<TNewResult> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, FieldDefinition`2<TNewResult, TAs> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    public abstract virtual IAggregateFluent`1<TResult> Match(FilterDefinition`1<TResult> filter);
    public abstract virtual IAsyncCursor`1<TOutput> Merge(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TOutput>> MergeAsync(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions, CancellationToken cancellationToken);
    public abstract virtual IAggregateFluent`1<TNewResult> OfType(IBsonSerializer`1<TNewResult> newResultSerializer);
    public abstract virtual IAsyncCursor`1<TResult> Out(IMongoCollection`1<TResult> outputCollection, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TResult> Out(string collectionName, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TResult> Out(IMongoCollection`1<TResult> outputCollection, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TResult> Out(string collectionName, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(IMongoCollection`1<TResult> outputCollection, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(string collectionName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(IMongoCollection`1<TResult> outputCollection, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> OutAsync(string collectionName, TimeSeriesOptions timeSeriesOptions, CancellationToken cancellationToken);
    public abstract virtual IAggregateFluent`1<TNewResult> Project(ProjectionDefinition`2<TResult, TNewResult> projection);
    public abstract virtual IAggregateFluent`1<TNewResult> ReplaceRoot(AggregateExpressionDefinition`2<TResult, TNewResult> newRoot);
    public abstract virtual IAggregateFluent`1<TNewResult> ReplaceWith(AggregateExpressionDefinition`2<TResult, TNewResult> newRoot);
    public abstract virtual IAggregateFluent`1<TResult> Sample(long size);
    public abstract virtual IAggregateFluent`1<TResult> Set(SetFieldDefinitions`1<TResult> fields);
    public abstract virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public abstract virtual IAggregateFluent`1<TResult> Search(SearchDefinition`1<TResult> searchDefinition, SearchHighlightOptions`1<TResult> highlight, string indexName, SearchCountOptions count, bool returnStoredSource, bool scoreDetails);
    public abstract virtual IAggregateFluent`1<TResult> Search(SearchDefinition`1<TResult> searchDefinition, SearchOptions`1<TResult> searchOptions);
    public abstract virtual IAggregateFluent`1<SearchMetaResult> SearchMeta(SearchDefinition`1<TResult> searchDefinition, string indexName, SearchCountOptions count);
    public abstract virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TResult, TPartitionBy> partitionBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public abstract virtual IAggregateFluent`1<BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TResult, TPartitionBy> partitionBy, SortDefinition`1<TResult> sortBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields> output);
    public abstract virtual IAggregateFluent`1<TResult> Skip(long skip);
    public abstract virtual IAggregateFluent`1<TResult> Sort(SortDefinition`1<TResult> sort);
    public abstract virtual IAggregateFluent`1<AggregateSortByCountResult`1<TId>> SortByCount(AggregateExpressionDefinition`2<TResult, TId> id);
    public abstract virtual void ToCollection(CancellationToken cancellationToken);
    public abstract virtual Task ToCollectionAsync(CancellationToken cancellationToken);
    public abstract virtual IAggregateFluent`1<TResult> UnionWith(IMongoCollection`1<TWith> withCollection, PipelineDefinition`2<TWith, TResult> withPipeline);
    [ObsoleteAttribute("Use the Unwind overload which takes an options parameter.")]
public abstract virtual IAggregateFluent`1<TNewResult> Unwind(FieldDefinition`1<TResult> field, IBsonSerializer`1<TNewResult> newResultSerializer);
    public abstract virtual IAggregateFluent`1<TNewResult> Unwind(FieldDefinition`1<TResult> field, AggregateUnwindOptions`1<TNewResult> options);
    public abstract virtual IAggregateFluent`1<TResult> VectorSearch(FieldDefinition`1<TResult> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TResult> options);
}
[ExtensionAttribute]
public static class MongoDB.Driver.IAggregateFluentExtensions : object {
    [ExtensionAttribute]
public static IAggregateFluent`1<AggregateBucketResult`1<TValue>> Bucket(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TValue>> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Bucket(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TValue>> groupBy, IEnumerable`1<TValue> boundaries, Expression`1<Func`2<IGrouping`2<TValue, TResult>, TNewResult>> output, AggregateBucketOptions`1<TValue> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<AggregateBucketAutoResult`1<TValue>> BucketAuto(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TValue>> groupBy, int buckets, AggregateBucketAutoOptions options);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> BucketAuto(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<AggregateBucketAutoResultId`1<TValue>, TResult>, TNewResult>> output, AggregateBucketAutoOptions options);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> BucketAutoForLinq2(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<TValue, TResult>, TNewResult>> output, AggregateBucketAutoOptions options);
    [ExtensionAttribute]
public static IAggregateFluent`1<ChangeStreamDocument`1<TResult>> ChangeStreamSplitLargeEvent(IAggregateFluent`1<ChangeStreamDocument`1<TResult>> aggregate);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> Densify(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field, DensifyRange range, IEnumerable`1<Expression`1<Func`2<TResult, object>>> partitionByFields);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> Densify(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field, DensifyRange range, Expression`1[] partitionByFields);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> Documents(IAggregateFluent`1<NoPipelineInput> aggregate, AggregateExpressionDefinition`2<NoPipelineInput, IEnumerable`1<TResult>> documents, IBsonSerializer`1<TResult> documentSerializer);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> Documents(IAggregateFluent`1<NoPipelineInput> aggregate, IEnumerable`1<TResult> documents, IBsonSerializer`1<TResult> documentSerializer);
    [ExtensionAttribute]
public static IAggregateFluent`1<AggregateFacetResults> Facet(IAggregateFluent`1<TResult> aggregate, IEnumerable`1<AggregateFacet`1<TResult>> facets);
    [ExtensionAttribute]
public static IAggregateFluent`1<AggregateFacetResults> Facet(IAggregateFluent`1<TResult> aggregate, AggregateFacet`1[] facets);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Facet(IAggregateFluent`1<TResult> aggregate, AggregateFacet`1[] facets);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> GraphLookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TResult, TStartWith> startWith, FieldDefinition`2<TNewResult, TAs> as, AggregateGraphLookupOptions`3<TFrom, TFrom, TNewResult> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> GraphLookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, BsonValue> connectFromField, FieldDefinition`2<TFrom, BsonValue> connectToField, AggregateExpressionDefinition`2<TResult, BsonValue> startWith, FieldDefinition`2<BsonDocument, IEnumerable`1<BsonDocument>> as, FieldDefinition`2<BsonDocument, int> depthField);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> GraphLookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<TFrom> from, Expression`1<Func`2<TFrom, TConnectFrom>> connectFromField, Expression`1<Func`2<TFrom, TConnectTo>> connectToField, Expression`1<Func`2<TResult, TStartWith>> startWith, Expression`1<Func`2<TNewResult, TAs>> as, AggregateGraphLookupOptions`3<TFrom, TFrom, TNewResult> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> GraphLookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<TFrom> from, Expression`1<Func`2<TFrom, TConnectFrom>> connectFromField, Expression`1<Func`2<TFrom, TConnectTo>> connectToField, Expression`1<Func`2<TResult, TStartWith>> startWith, Expression`1<Func`2<TNewResult, TAs>> as, Expression`1<Func`2<TAsElement, int>> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TNewResult> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> Group(IAggregateFluent`1<TResult> aggregate, ProjectionDefinition`2<TResult, BsonDocument> group);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Group(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TKey>> id, Expression`1<Func`2<IGrouping`2<TKey, TResult>, TNewResult>> group);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> Lookup(IAggregateFluent`1<TResult> aggregate, string foreignCollectionName, FieldDefinition`1<TResult> localField, FieldDefinition`1<BsonDocument> foreignField, FieldDefinition`1<BsonDocument> as);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Lookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<TForeignDocument> foreignCollection, Expression`1<Func`2<TResult, object>> localField, Expression`1<Func`2<TForeignDocument, object>> foreignField, Expression`1<Func`2<TNewResult, object>> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> Lookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<BsonDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<BsonDocument, BsonDocument> lookupPipeline, FieldDefinition`2<BsonDocument, IEnumerable`1<BsonDocument>> as);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Lookup(IAggregateFluent`1<TResult> aggregate, IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, Expression`1<Func`2<TNewResult, TAs>> as, AggregateLookupOptions`2<TForeignDocument, TNewResult> options);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> Match(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, bool>> filter);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> Project(IAggregateFluent`1<TResult> aggregate, ProjectionDefinition`2<TResult, BsonDocument> projection);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Project(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TNewResult>> projection);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> ReplaceRoot(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TNewResult>> newRoot);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> ReplaceWith(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TNewResult>> newRoot);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> Set(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TFields>> fields);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> SetWindowFields(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields>> output);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> SetWindowFields(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TPartitionBy>> partitionBy, Expression`1<Func`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields>> output);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> SetWindowFields(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TPartitionBy>> partitionBy, SortDefinition`1<TResult> sortBy, Expression`1<Func`2<ISetWindowFieldsPartition`1<TResult>, TWindowFields>> output);
    [ExtensionAttribute]
public static IOrderedAggregateFluent`1<TResult> SortBy(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field);
    [ExtensionAttribute]
public static IAggregateFluent`1<AggregateSortByCountResult`1<TKey>> SortByCount(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, TKey>> id);
    [ExtensionAttribute]
public static IOrderedAggregateFluent`1<TResult> SortByDescending(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field);
    [ExtensionAttribute]
public static IOrderedAggregateFluent`1<TResult> ThenBy(IOrderedAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field);
    [ExtensionAttribute]
public static IOrderedAggregateFluent`1<TResult> ThenByDescending(IOrderedAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> Unwind(IAggregateFluent`1<TResult> aggregate, FieldDefinition`1<TResult> field);
    [ExtensionAttribute]
public static IAggregateFluent`1<BsonDocument> Unwind(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the Unwind overload which takes an options parameter.")]
public static IAggregateFluent`1<TNewResult> Unwind(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field, IBsonSerializer`1<TNewResult> newResultSerializer);
    [ExtensionAttribute]
public static IAggregateFluent`1<TNewResult> Unwind(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field, AggregateUnwindOptions`1<TNewResult> options);
    [ExtensionAttribute]
public static TResult First(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> FirstAsync(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult FirstOrDefault(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> FirstOrDefaultAsync(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult Single(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> SingleAsync(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult SingleOrDefault(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> SingleOrDefaultAsync(IAggregateFluent`1<TResult> aggregate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAggregateFluent`1<TResult> VectorSearch(IAggregateFluent`1<TResult> aggregate, Expression`1<Func`2<TResult, object>> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TResult> options);
}
public interface MongoDB.Driver.IClientSession {
    public IMongoClient Client { get; }
    public BsonDocument ClusterTime { get; }
    public bool IsImplicit { get; }
    public bool IsInTransaction { get; }
    public BsonTimestamp OperationTime { get; }
    public ClientSessionOptions Options { get; }
    public IServerSession ServerSession { get; }
    public ICoreSessionHandle WrappedCoreSession { get; }
    public abstract virtual IMongoClient get_Client();
    public abstract virtual BsonDocument get_ClusterTime();
    public abstract virtual bool get_IsImplicit();
    public abstract virtual bool get_IsInTransaction();
    public abstract virtual BsonTimestamp get_OperationTime();
    public abstract virtual ClientSessionOptions get_Options();
    public abstract virtual IServerSession get_ServerSession();
    public abstract virtual ICoreSessionHandle get_WrappedCoreSession();
    public abstract virtual void AbortTransaction(CancellationToken cancellationToken);
    public abstract virtual Task AbortTransactionAsync(CancellationToken cancellationToken);
    public abstract virtual void AdvanceClusterTime(BsonDocument newClusterTime);
    public abstract virtual void AdvanceOperationTime(BsonTimestamp newOperationTime);
    public abstract virtual void CommitTransaction(CancellationToken cancellationToken);
    public abstract virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public abstract virtual void StartTransaction(TransactionOptions transactionOptions);
    public abstract virtual TResult WithTransaction(Func`3<IClientSessionHandle, CancellationToken, TResult> callback, TransactionOptions transactionOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> WithTransactionAsync(Func`3<IClientSessionHandle, CancellationToken, Task`1<TResult>> callbackAsync, TransactionOptions transactionOptions, CancellationToken cancellationToken);
}
public interface MongoDB.Driver.IClientSessionHandle {
    public abstract virtual IClientSessionHandle Fork();
}
public interface MongoDB.Driver.IFilteredMongoCollection`1 {
    public FilterDefinition`1<TDocument> Filter { get; }
    public abstract virtual FilterDefinition`1<TDocument> get_Filter();
}
public interface MongoDB.Driver.IFindFluent`2 {
    public FilterDefinition`1<TDocument> Filter { get; public set; }
    public FindOptions`2<TDocument, TProjection> Options { get; }
    public abstract virtual FilterDefinition`1<TDocument> get_Filter();
    public abstract virtual void set_Filter(FilterDefinition`1<TDocument> value);
    public abstract virtual FindOptions`2<TDocument, TProjection> get_Options();
    public abstract virtual IFindFluent`2<TDocument, TResult> As(IBsonSerializer`1<TResult> resultSerializer);
    [ObsoleteAttribute("Use CountDocuments instead.")]
public abstract virtual long Count(CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync instead.")]
public abstract virtual Task`1<long> CountAsync(CancellationToken cancellationToken);
    public abstract virtual long CountDocuments(CancellationToken cancellationToken);
    public abstract virtual Task`1<long> CountDocumentsAsync(CancellationToken cancellationToken);
    public abstract virtual IFindFluent`2<TDocument, TProjection> Limit(Nullable`1<int> limit);
    public abstract virtual IFindFluent`2<TDocument, TNewProjection> Project(ProjectionDefinition`2<TDocument, TNewProjection> projection);
    public abstract virtual IFindFluent`2<TDocument, TProjection> Skip(Nullable`1<int> skip);
    public abstract virtual IFindFluent`2<TDocument, TProjection> Sort(SortDefinition`1<TDocument> sort);
}
[ExtensionAttribute]
public static class MongoDB.Driver.IFindFluentExtensions : object {
    [ExtensionAttribute]
public static IFindFluent`2<TDocument, BsonDocument> Project(IFindFluent`2<TDocument, TProjection> find, ProjectionDefinition`2<TDocument, BsonDocument> projection);
    [ExtensionAttribute]
public static IFindFluent`2<TDocument, TNewProjection> Project(IFindFluent`2<TDocument, TProjection> find, Expression`1<Func`2<TDocument, TNewProjection>> projection);
    [ExtensionAttribute]
public static IOrderedFindFluent`2<TDocument, TProjection> SortBy(IFindFluent`2<TDocument, TProjection> find, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IOrderedFindFluent`2<TDocument, TProjection> SortByDescending(IFindFluent`2<TDocument, TProjection> find, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IOrderedFindFluent`2<TDocument, TProjection> ThenBy(IOrderedFindFluent`2<TDocument, TProjection> find, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IOrderedFindFluent`2<TDocument, TProjection> ThenByDescending(IOrderedFindFluent`2<TDocument, TProjection> find, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static bool Any(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection First(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FirstAsync(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FirstOrDefault(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FirstOrDefaultAsync(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection Single(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> SingleAsync(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection SingleOrDefault(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> SingleOrDefaultAsync(IFindFluent`2<TDocument, TProjection> find, CancellationToken cancellationToken);
}
internal interface MongoDB.Driver.IInheritableMongoClientSettings {
    public GuidRepresentation GuidRepresentation { get; }
    public ReadConcern ReadConcern { get; }
    public UTF8Encoding ReadEncoding { get; }
    public ReadPreference ReadPreference { get; }
    public WriteConcern WriteConcern { get; }
    public UTF8Encoding WriteEncoding { get; }
    public abstract virtual GuidRepresentation get_GuidRepresentation();
    public abstract virtual ReadConcern get_ReadConcern();
    public abstract virtual UTF8Encoding get_ReadEncoding();
    public abstract virtual ReadPreference get_ReadPreference();
    public abstract virtual WriteConcern get_WriteConcern();
    public abstract virtual UTF8Encoding get_WriteEncoding();
}
public interface MongoDB.Driver.IMongoClient {
    public ICluster Cluster { get; }
    public MongoClientSettings Settings { get; }
    public abstract virtual ICluster get_Cluster();
    public abstract virtual MongoClientSettings get_Settings();
    public abstract virtual void DropDatabase(string name, CancellationToken cancellationToken);
    public abstract virtual void DropDatabase(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual Task DropDatabaseAsync(string name, CancellationToken cancellationToken);
    public abstract virtual Task DropDatabaseAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual IMongoDatabase GetDatabase(string name, MongoDatabaseSettings settings);
    public abstract virtual IAsyncCursor`1<string> ListDatabaseNames(CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<string> ListDatabaseNames(ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<string> ListDatabaseNames(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<string> ListDatabaseNames(IClientSessionHandle session, ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(IClientSessionHandle session, ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> ListDatabases(CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> ListDatabases(ListDatabasesOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> ListDatabases(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> ListDatabases(IClientSessionHandle session, ListDatabasesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(ListDatabasesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(IClientSessionHandle session, ListDatabasesOptions options, CancellationToken cancellationToken);
    public abstract virtual IClientSessionHandle StartSession(ClientSessionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IClientSessionHandle> StartSessionAsync(ClientSessionOptions options, CancellationToken cancellationToken);
    public abstract virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual IMongoClient WithReadConcern(ReadConcern readConcern);
    public abstract virtual IMongoClient WithReadPreference(ReadPreference readPreference);
    public abstract virtual IMongoClient WithWriteConcern(WriteConcern writeConcern);
}
[ExtensionAttribute]
public static class MongoDB.Driver.IMongoClientExtensions : object {
    [ExtensionAttribute]
public static IAsyncCursor`1<ChangeStreamDocument`1<BsonDocument>> Watch(IMongoClient client, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<ChangeStreamDocument`1<BsonDocument>> Watch(IMongoClient client, IClientSessionHandle session, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IChangeStreamCursor`1<ChangeStreamDocument`1<BsonDocument>>> WatchAsync(IMongoClient client, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IChangeStreamCursor`1<ChangeStreamDocument`1<BsonDocument>>> WatchAsync(IMongoClient client, IClientSessionHandle session, ChangeStreamOptions options, CancellationToken cancellationToken);
}
public interface MongoDB.Driver.IMongoCollection`1 {
    public CollectionNamespace CollectionNamespace { get; }
    public IMongoDatabase Database { get; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public IMongoIndexManager`1<TDocument> Indexes { get; }
    public IMongoSearchIndexManager SearchIndexes { get; }
    public MongoCollectionSettings Settings { get; }
    public abstract virtual CollectionNamespace get_CollectionNamespace();
    public abstract virtual IMongoDatabase get_Database();
    public abstract virtual IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public abstract virtual IMongoIndexManager`1<TDocument> get_Indexes();
    public abstract virtual IMongoSearchIndexManager get_SearchIndexes();
    public abstract virtual MongoCollectionSettings get_Settings();
    public abstract virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual void AggregateToCollection(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task AggregateToCollectionAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual BulkWriteResult`1<TDocument> BulkWrite(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public abstract virtual BulkWriteResult`1<TDocument> BulkWrite(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public abstract virtual long Count(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public abstract virtual long Count(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public abstract virtual Task`1<long> CountAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public abstract virtual Task`1<long> CountAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public abstract virtual long CountDocuments(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public abstract virtual long CountDocuments(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> CountDocumentsAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> CountDocumentsAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public abstract virtual DeleteResult DeleteMany(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public abstract virtual DeleteResult DeleteMany(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual DeleteResult DeleteMany(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResult> DeleteManyAsync(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResult> DeleteManyAsync(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResult> DeleteManyAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual DeleteResult DeleteOne(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public abstract virtual DeleteResult DeleteOne(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual DeleteResult DeleteOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResult> DeleteOneAsync(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResult> DeleteOneAsync(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DeleteResult> DeleteOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TField> Distinct(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TField> Distinct(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TItem> DistinctMany(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TItem> DistinctMany(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual long EstimatedDocumentCount(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> EstimatedDocumentCountAsync(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TProjection> FindSync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TProjection> FindSync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual TProjection FindOneAndDelete(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual TProjection FindOneAndDelete(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndDeleteAsync(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndDeleteAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual TProjection FindOneAndReplace(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual TProjection FindOneAndReplace(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndReplaceAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndReplaceAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual TProjection FindOneAndUpdate(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual TProjection FindOneAndUpdate(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndUpdateAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndUpdateAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual void InsertOne(TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    public abstract virtual void InsertOne(IClientSessionHandle session, TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the new overload of InsertOneAsync with an InsertOneOptions parameter instead.")]
public abstract virtual Task InsertOneAsync(TDocument document, CancellationToken _cancellationToken);
    public abstract virtual Task InsertOneAsync(TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    public abstract virtual Task InsertOneAsync(IClientSessionHandle session, TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    public abstract virtual void InsertMany(IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    public abstract virtual void InsertMany(IClientSessionHandle session, IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    public abstract virtual Task InsertManyAsync(IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    public abstract virtual Task InsertManyAsync(IClientSessionHandle session, IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public abstract virtual IAsyncCursor`1<TResult> MapReduce(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public abstract virtual IAsyncCursor`1<TResult> MapReduce(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public abstract virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public abstract virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    public abstract virtual IFilteredMongoCollection`1<TDerivedDocument> OfType();
    public abstract virtual ReplaceOneResult ReplaceOne(FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public abstract virtual ReplaceOneResult ReplaceOne(FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual ReplaceOneResult ReplaceOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public abstract virtual ReplaceOneResult ReplaceOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReplaceOneResult> ReplaceOneAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public abstract virtual Task`1<ReplaceOneResult> ReplaceOneAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ReplaceOneResult> ReplaceOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public abstract virtual Task`1<ReplaceOneResult> ReplaceOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual UpdateResult UpdateMany(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual UpdateResult UpdateMany(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateResult> UpdateManyAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateResult> UpdateManyAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual UpdateResult UpdateOne(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual UpdateResult UpdateOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateResult> UpdateOneAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<UpdateResult> UpdateOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public abstract virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual IMongoCollection`1<TDocument> WithReadConcern(ReadConcern readConcern);
    public abstract virtual IMongoCollection`1<TDocument> WithReadPreference(ReadPreference readPreference);
    public abstract virtual IMongoCollection`1<TDocument> WithWriteConcern(WriteConcern writeConcern);
}
[ExtensionAttribute]
public static class MongoDB.Driver.IMongoCollectionExtensions : object {
    [ExtensionAttribute]
public static IAggregateFluent`1<TDocument> Aggregate(IMongoCollection`1<TDocument> collection, AggregateOptions options);
    [ExtensionAttribute]
public static IAggregateFluent`1<TDocument> Aggregate(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions options);
    [ExtensionAttribute]
public static IMongoQueryable`1<TDocument> AsQueryable(IMongoCollection`1<TDocument> collection, AggregateOptions aggregateOptions);
    [ExtensionAttribute]
public static IMongoQueryable`1<TDocument> AsQueryable(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions aggregateOptions);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public static long Count(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public static long Count(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public static Task`1<long> CountAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public static Task`1<long> CountAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static long CountDocuments(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static long CountDocuments(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> CountDocumentsAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> CountDocumentsAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, CountOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DeleteResult DeleteMany(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DeleteResult DeleteMany(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DeleteResult DeleteMany(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DeleteResult> DeleteManyAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DeleteResult> DeleteManyAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DeleteResult> DeleteManyAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DeleteResult DeleteOne(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DeleteResult DeleteOne(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static DeleteResult DeleteOne(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DeleteResult> DeleteOneAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DeleteResult> DeleteOneAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<DeleteResult> DeleteOneAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, DeleteOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TField> Distinct(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, TField>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TField> Distinct(IMongoCollection`1<TDocument> collection, FieldDefinition`2<TDocument, TField> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TField> Distinct(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, TField>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TField> Distinct(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, TField>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TField> Distinct(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TField> Distinct(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, TField>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TField>> DistinctAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, TField>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TField>> DistinctAsync(IMongoCollection`1<TDocument> collection, FieldDefinition`2<TDocument, TField> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TField>> DistinctAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, TField>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TField>> DistinctAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, TField>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TField>> DistinctAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TField>> DistinctAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, TField>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TItem> DistinctMany(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TItem> DistinctMany(IMongoCollection`1<TDocument> collection, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TItem> DistinctMany(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TItem> DistinctMany(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TItem> DistinctMany(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TItem> DistinctMany(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IMongoCollection`1<TDocument> collection, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TDocument, bool>> filter, DistinctOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IFindFluent`2<TDocument, TDocument> Find(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOptions options);
    [ExtensionAttribute]
public static IFindFluent`2<TDocument, TDocument> Find(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions options);
    private static IFindFluent`2<TDocument, TDocument> FindHelper(IClientSessionHandle session, IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOptions options);
    [ExtensionAttribute]
public static IFindFluent`2<TDocument, TDocument> Find(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOptions options);
    [ExtensionAttribute]
public static IFindFluent`2<TDocument, TDocument> Find(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOptions options);
    [ExtensionAttribute]
public static IAsyncCursor`1<TDocument> FindSync(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TDocument> FindSync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TDocument> FindSync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncCursor`1<TDocument> FindSync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TDocument>> FindAsync(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TDocument>> FindAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TDocument>> FindAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IAsyncCursor`1<TDocument>> FindAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndDelete(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndDelete(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FindOneAndDelete(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndDelete(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndDelete(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FindOneAndDelete(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndDeleteAsync(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndDeleteAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FindOneAndDeleteAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndDeleteAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndDeleteAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FindOneAndDeleteAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndReplace(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndReplace(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FindOneAndReplace(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndReplace(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndReplace(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FindOneAndReplace(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndReplaceAsync(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndReplaceAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FindOneAndReplaceAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndReplaceAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndReplaceAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, IClientSessionHandle session, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FindOneAndReplaceAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndUpdate(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndUpdate(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FindOneAndUpdate(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndUpdate(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TDocument FindOneAndUpdate(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TProjection FindOneAndUpdate(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndUpdateAsync(IMongoCollection`1<TDocument> collection, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndUpdateAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FindOneAndUpdateAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndUpdateAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TDocument> FindOneAndUpdateAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TDocument> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TProjection> FindOneAndUpdateAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ReplaceOneResult ReplaceOne(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public static ReplaceOneResult ReplaceOne(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ReplaceOneResult ReplaceOne(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public static ReplaceOneResult ReplaceOne(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ReplaceOneResult> ReplaceOneAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public static Task`1<ReplaceOneResult> ReplaceOneAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<ReplaceOneResult> ReplaceOneAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public static Task`1<ReplaceOneResult> ReplaceOneAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static UpdateResult UpdateMany(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static UpdateResult UpdateMany(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<UpdateResult> UpdateManyAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<UpdateResult> UpdateManyAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static UpdateResult UpdateOne(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static UpdateResult UpdateOne(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<UpdateResult> UpdateOneAsync(IMongoCollection`1<TDocument> collection, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<UpdateResult> UpdateOneAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, Expression`1<Func`2<TDocument, bool>> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IChangeStreamCursor`1<ChangeStreamDocument`1<TDocument>> Watch(IMongoCollection`1<TDocument> collection, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IChangeStreamCursor`1<ChangeStreamDocument`1<TDocument>> Watch(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IChangeStreamCursor`1<ChangeStreamDocument`1<TDocument>>> WatchAsync(IMongoCollection`1<TDocument> collection, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IChangeStreamCursor`1<ChangeStreamDocument`1<TDocument>>> WatchAsync(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, ChangeStreamOptions options, CancellationToken cancellationToken);
    private static IMongoQueryable`1<TDocument> AsQueryableHelper(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions aggregateOptions);
}
public interface MongoDB.Driver.IMongoDatabase {
    public IMongoClient Client { get; }
    public DatabaseNamespace DatabaseNamespace { get; }
    public MongoDatabaseSettings Settings { get; }
    public abstract virtual IMongoClient get_Client();
    public abstract virtual DatabaseNamespace get_DatabaseNamespace();
    public abstract virtual MongoDatabaseSettings get_Settings();
    public abstract virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual void AggregateToCollection(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task AggregateToCollectionAsync(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual void CreateCollection(string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual void CreateCollection(IClientSessionHandle session, string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task CreateCollectionAsync(string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task CreateCollectionAsync(IClientSessionHandle session, string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual void CreateView(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public abstract virtual void CreateView(IClientSessionHandle session, string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public abstract virtual Task CreateViewAsync(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public abstract virtual Task CreateViewAsync(IClientSessionHandle session, string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public abstract virtual void DropCollection(string name, CancellationToken cancellationToken);
    public abstract virtual void DropCollection(string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual void DropCollection(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual void DropCollection(IClientSessionHandle session, string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropCollectionAsync(string name, CancellationToken cancellationToken);
    public abstract virtual Task DropCollectionAsync(string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropCollectionAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual Task DropCollectionAsync(IClientSessionHandle session, string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual IMongoCollection`1<TDocument> GetCollection(string name, MongoCollectionSettings settings);
    public abstract virtual IAsyncCursor`1<string> ListCollectionNames(ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<string> ListCollectionNames(IClientSessionHandle session, ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<string>> ListCollectionNamesAsync(ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<string>> ListCollectionNamesAsync(IClientSessionHandle session, ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> ListCollections(ListCollectionsOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> ListCollections(IClientSessionHandle session, ListCollectionsOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListCollectionsAsync(ListCollectionsOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListCollectionsAsync(IClientSessionHandle session, ListCollectionsOptions options, CancellationToken cancellationToken);
    public abstract virtual void RenameCollection(string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual void RenameCollection(IClientSessionHandle session, string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task RenameCollectionAsync(string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task RenameCollectionAsync(IClientSessionHandle session, string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual TResult RunCommand(Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public abstract virtual TResult RunCommand(IClientSessionHandle session, Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> RunCommandAsync(Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> RunCommandAsync(IClientSessionHandle session, Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public abstract virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public abstract virtual IMongoDatabase WithReadConcern(ReadConcern readConcern);
    public abstract virtual IMongoDatabase WithReadPreference(ReadPreference readPreference);
    public abstract virtual IMongoDatabase WithWriteConcern(WriteConcern writeConcern);
}
[ExtensionAttribute]
public static class MongoDB.Driver.IMongoDatabaseExtensions : object {
    [ExtensionAttribute]
public static IAggregateFluent`1<NoPipelineInput> Aggregate(IMongoDatabase database, AggregateOptions options);
    [ExtensionAttribute]
public static IAggregateFluent`1<NoPipelineInput> Aggregate(IMongoDatabase database, IClientSessionHandle session, AggregateOptions options);
    [ExtensionAttribute]
public static IMongoQueryable`1<NoPipelineInput> AsQueryable(IMongoDatabase database, AggregateOptions aggregateOptions);
    [ExtensionAttribute]
public static IMongoQueryable`1<NoPipelineInput> AsQueryable(IMongoDatabase database, IClientSessionHandle session, AggregateOptions aggregateOptions);
    [ExtensionAttribute]
public static IChangeStreamCursor`1<ChangeStreamDocument`1<BsonDocument>> Watch(IMongoDatabase database, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IChangeStreamCursor`1<ChangeStreamDocument`1<BsonDocument>> Watch(IMongoDatabase database, IClientSessionHandle session, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IChangeStreamCursor`1<ChangeStreamDocument`1<BsonDocument>>> WatchAsync(IMongoDatabase database, ChangeStreamOptions options, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<IChangeStreamCursor`1<ChangeStreamDocument`1<BsonDocument>>> WatchAsync(IMongoDatabase database, IClientSessionHandle session, ChangeStreamOptions options, CancellationToken cancellationToken);
    private static IMongoQueryable`1<NoPipelineInput> AsQueryableHelper(IMongoDatabase database, IClientSessionHandle session, AggregateOptions aggregateOptions);
}
public interface MongoDB.Driver.IMongoIndexManager`1 {
    public CollectionNamespace CollectionNamespace { get; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public MongoCollectionSettings Settings { get; }
    public abstract virtual CollectionNamespace get_CollectionNamespace();
    public abstract virtual IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public abstract virtual MongoCollectionSettings get_Settings();
    public abstract virtual IEnumerable`1<string> CreateMany(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<string> CreateMany(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<string> CreateMany(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<string> CreateMany(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual string CreateOne(CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CreateOne with a CreateIndexModel instead.")]
public abstract virtual string CreateOne(IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CreateOne with a CreateIndexModel instead.")]
public abstract virtual string CreateOne(IClientSessionHandle session, IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual string CreateOne(IClientSessionHandle session, CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> CreateOneAsync(CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CreateOneAsync with a CreateIndexModel instead.")]
public abstract virtual Task`1<string> CreateOneAsync(IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CreateOneAsyc with a CreateIndexModel instead.")]
public abstract virtual Task`1<string> CreateOneAsync(IClientSessionHandle session, IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> CreateOneAsync(IClientSessionHandle session, CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual void DropAll(DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual void DropAll(CancellationToken cancellationToken);
    public abstract virtual void DropAll(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual void DropAll(IClientSessionHandle session, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropAllAsync(DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropAllAsync(CancellationToken cancellationToken);
    public abstract virtual Task DropAllAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual Task DropAllAsync(IClientSessionHandle session, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual void DropOne(string name, CancellationToken cancellationToken);
    public abstract virtual void DropOne(string name, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual void DropOne(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual void DropOne(IClientSessionHandle session, string name, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropOneAsync(string name, CancellationToken cancellationToken);
    public abstract virtual Task DropOneAsync(string name, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropOneAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual Task DropOneAsync(IClientSessionHandle session, string name, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> List(CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> List(ListIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> List(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> List(IClientSessionHandle session, ListIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(ListIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(IClientSessionHandle session, ListIndexesOptions options, CancellationToken cancellationToken);
}
public abstract class MongoDB.Driver.IndexKeysDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    public static IndexKeysDefinition`1<TDocument> op_Implicit(BsonDocument document);
    public static IndexKeysDefinition`1<TDocument> op_Implicit(string json);
}
public class MongoDB.Driver.IndexKeysDefinitionBuilder`1 : object {
    public IndexKeysDefinition`1<TDocument> Ascending(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Ascending(Expression`1<Func`2<TDocument, object>> field);
    public IndexKeysDefinition`1<TDocument> Combine(IndexKeysDefinition`1[] keys);
    public IndexKeysDefinition`1<TDocument> Combine(IEnumerable`1<IndexKeysDefinition`1<TDocument>> keys);
    public IndexKeysDefinition`1<TDocument> Descending(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Descending(Expression`1<Func`2<TDocument, object>> field);
    public IndexKeysDefinition`1<TDocument> Geo2D(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Geo2D(Expression`1<Func`2<TDocument, object>> field);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexKeysDefinition`1<TDocument> GeoHaystack(FieldDefinition`1<TDocument> field, FieldDefinition`1<TDocument> additionalFieldName);
    [ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public IndexKeysDefinition`1<TDocument> GeoHaystack(Expression`1<Func`2<TDocument, object>> field, Expression`1<Func`2<TDocument, object>> additionalFieldName);
    public IndexKeysDefinition`1<TDocument> Geo2DSphere(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Geo2DSphere(Expression`1<Func`2<TDocument, object>> field);
    public IndexKeysDefinition`1<TDocument> Hashed(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Hashed(Expression`1<Func`2<TDocument, object>> field);
    public IndexKeysDefinition`1<TDocument> Text(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Text(Expression`1<Func`2<TDocument, object>> field);
    public IndexKeysDefinition`1<TDocument> Wildcard(FieldDefinition`1<TDocument> field);
    public IndexKeysDefinition`1<TDocument> Wildcard(Expression`1<Func`2<TDocument, object>> field);
}
[ExtensionAttribute]
public static class MongoDB.Driver.IndexKeysDefinitionExtensions : object {
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Ascending(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Ascending(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Descending(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Descending(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Geo2D(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Geo2D(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
[ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexKeysDefinition`1<TDocument> GeoHaystack(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field, FieldDefinition`1<TDocument> additionalFieldName);
    [ExtensionAttribute]
[ObsoleteAttribute("GeoHaystack indexes were deprecated in server version 4.4.")]
public static IndexKeysDefinition`1<TDocument> GeoHaystack(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field, Expression`1<Func`2<TDocument, object>> additionalFieldName);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Geo2DSphere(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Geo2DSphere(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Hashed(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Hashed(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Text(IndexKeysDefinition`1<TDocument> keys, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static IndexKeysDefinition`1<TDocument> Text(IndexKeysDefinition`1<TDocument> keys, Expression`1<Func`2<TDocument, object>> field);
}
public class MongoDB.Driver.IndexOptionDefaults : object {
    private BsonDocument _storageEngine;
    public BsonDocument StorageEngine { get; public set; }
    public BsonDocument get_StorageEngine();
    public void set_StorageEngine(BsonDocument value);
    internal BsonDocument ToBsonDocument();
}
public class MongoDB.Driver.InsertManyOptions : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private BsonValue _comment;
    private bool _isOrdered;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public BsonValue Comment { get; public set; }
    public bool IsOrdered { get; public set; }
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public bool get_IsOrdered();
    public void set_IsOrdered(bool value);
}
public class MongoDB.Driver.InsertOneModel`1 : WriteModel`1<TDocument> {
    private TDocument _document;
    public TDocument Document { get; }
    public WriteModelType ModelType { get; }
    public InsertOneModel`1(TDocument document);
    public TDocument get_Document();
    public virtual WriteModelType get_ModelType();
}
public class MongoDB.Driver.InsertOneOptions : object {
    private BsonValue _comment;
    private Nullable`1<bool> _bypassDocumentValidation;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public BsonValue Comment { get; public set; }
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
}
internal interface MongoDB.Driver.IOperationExecutor {
    public abstract virtual TResult ExecuteReadOperation(IReadBinding binding, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteReadOperationAsync(IReadBinding binding, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    public abstract virtual TResult ExecuteWriteOperation(IWriteBinding binding, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> ExecuteWriteOperationAsync(IWriteBinding binding, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    public abstract virtual IClientSessionHandle StartImplicitSession(CancellationToken cancellationToken);
    public abstract virtual Task`1<IClientSessionHandle> StartImplicitSessionAsync(CancellationToken cancellationToken);
}
public interface MongoDB.Driver.IOrderedAggregateFluent`1 {
    public abstract virtual IOrderedAggregateFluent`1<TResult> ThenBy(SortDefinition`1<TResult> newSort);
}
public interface MongoDB.Driver.IOrderedFindFluent`2 {
}
public interface MongoDB.Driver.IPipelineStageDefinition {
    public Type InputType { get; }
    public string OperatorName { get; }
    public Type OutputType { get; }
    public abstract virtual Type get_InputType();
    public abstract virtual string get_OperatorName();
    public abstract virtual Type get_OutputType();
    [ObsoleteAttribute("Use other Render overload instead.")]
public abstract virtual IRenderedPipelineStageDefinition Render(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry);
    public abstract virtual IRenderedPipelineStageDefinition Render(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual string ToString(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry);
    public abstract virtual string ToString(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
public interface MongoDB.Driver.IRenderedPipelineStageDefinition {
    public string OperatorName { get; }
    public BsonDocument Document { get; }
    public IReadOnlyList`1<BsonDocument> Documents { get; }
    public IBsonSerializer OutputSerializer { get; }
    public abstract virtual string get_OperatorName();
    public abstract virtual BsonDocument get_Document();
    public abstract virtual IReadOnlyList`1<BsonDocument> get_Documents();
    public abstract virtual IBsonSerializer get_OutputSerializer();
}
public interface MongoDB.Driver.IServerSession {
    public BsonDocument Id { get; }
    public Nullable`1<DateTime> LastUsedAt { get; }
    public abstract virtual BsonDocument get_Id();
    public abstract virtual Nullable`1<DateTime> get_LastUsedAt();
    [ObsoleteAttribute("Let the driver handle when to advance the transaction number.")]
public abstract virtual long AdvanceTransactionNumber();
    [ObsoleteAttribute("Let the driver handle tracking when the session was last used.")]
public abstract virtual void WasUsed();
}
public class MongoDB.Driver.ISetWindowFieldsPartition`1 : object {
}
public class MongoDB.Driver.JsonArrayFilterDefinition`1 : ArrayFilterDefinition`1<TItem> {
    private BsonDocument _document;
    private string _json;
    public BsonDocument Document { get; }
    public string Json { get; }
    public JsonArrayFilterDefinition`1(string json);
    public BsonDocument get_Document();
    public string get_Json();
    public virtual BsonDocument Render(IBsonSerializer itemSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public virtual BsonDocument Render(IBsonSerializer`1<TItem> itemSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
public class MongoDB.Driver.JsonCommand`1 : Command`1<TResult> {
    private string _json;
    private IBsonSerializer`1<TResult> _resultSerializer;
    public string Json { get; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; }
    public JsonCommand`1(string json, IBsonSerializer`1<TResult> resultSerializer);
    public string get_Json();
    public IBsonSerializer`1<TResult> get_ResultSerializer();
    public virtual RenderedCommand`1<TResult> Render(IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Driver.JsonFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private string _json;
    public string Json { get; }
    public JsonFilterDefinition`1(string json);
    public string get_Json();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.JsonIndexKeysDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private string _json;
    public string Json { get; }
    public JsonIndexKeysDefinition`1(string json);
    public string get_Json();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.JsonPipelineStageDefinition`2 : PipelineStageDefinition`2<TInput, TOutput> {
    private BsonDocument _document;
    private string _json;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public string Json { get; }
    public string OperatorName { get; }
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public JsonPipelineStageDefinition`2(string json, IBsonSerializer`1<TOutput> outputSerializer);
    public string get_Json();
    public virtual string get_OperatorName();
    public IBsonSerializer`1<TOutput> get_OutputSerializer();
    public virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.JsonProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private string _json;
    public string Json { get; }
    public JsonProjectionDefinition`1(string json);
    public string get_Json();
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.JsonProjectionDefinition`2 : ProjectionDefinition`2<TSource, TProjection> {
    private string _json;
    private IBsonSerializer`1<TProjection> _projectionSerializer;
    public string Json { get; }
    public IBsonSerializer`1<TProjection> ProjectionSerializer { get; }
    public JsonProjectionDefinition`2(string json, IBsonSerializer`1<TProjection> projectionSerializer);
    public string get_Json();
    public IBsonSerializer`1<TProjection> get_ProjectionSerializer();
    public virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.JsonSortDefinition`1 : SortDefinition`1<TDocument> {
    private string _json;
    public string Json { get; }
    public JsonSortDefinition`1(string json);
    public string get_Json();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.JsonUpdateDefinition`1 : UpdateDefinition`1<TDocument> {
    private string _json;
    public string Json { get; }
    public JsonUpdateDefinition`1(string json);
    public string get_Json();
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.KeywordDocumentsWindowBoundary : DocumentsWindowBoundary {
    private string _keyword;
    public string Keyword { get; }
    internal KeywordDocumentsWindowBoundary(string keyword);
    public string get_Keyword();
    public virtual string ToString();
    internal virtual BsonValue Render();
}
public class MongoDB.Driver.KeywordRangeWindowBoundary : RangeWindowBoundary {
    private string _keyword;
    public string Keyword { get; }
    internal KeywordRangeWindowBoundary(string keyword);
    public string get_Keyword();
    public virtual string ToString();
    internal virtual BsonValue Render(IBsonSerializer valueSerializer);
}
internal class MongoDB.Driver.KnownResultTypeProjectionDefinitionAdapter`2 : ProjectionDefinition`2<TSource, TProjection> {
    private ProjectionDefinition`1<TSource> _projection;
    private IBsonSerializer`1<TProjection> _projectionSerializer;
    public ProjectionDefinition`1<TSource> Projection { get; }
    public IBsonSerializer`1<TProjection> ResultSerializer { get; }
    public KnownResultTypeProjectionDefinitionAdapter`2(ProjectionDefinition`1<TSource> projection, IBsonSerializer`1<TProjection> projectionSerializer);
    public ProjectionDefinition`1<TSource> get_Projection();
    public IBsonSerializer`1<TProjection> get_ResultSerializer();
    public virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.Linq.AggregateQueryableExecutionModel`1 : QueryableExecutionModel {
    private IReadOnlyList`1<BsonDocument> _stages;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public IEnumerable`1<BsonDocument> Stages { get; }
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public Type OutputType { get; }
    internal AggregateQueryableExecutionModel`1(IEnumerable`1<BsonDocument> stages, IBsonSerializer`1<TOutput> outputSerializer);
    public IEnumerable`1<BsonDocument> get_Stages();
    public IBsonSerializer`1<TOutput> get_OutputSerializer();
    public virtual Type get_OutputType();
    public virtual string ToString();
    internal virtual object Execute(IMongoCollection`1<TInput> collection, IClientSessionHandle session, AggregateOptions options);
    internal virtual Task ExecuteAsync(IMongoCollection`1<TInput> collection, IClientSessionHandle session, AggregateOptions options, CancellationToken cancellationToken);
    private BsonDocumentStagePipelineDefinition`2<TInput, TOutput> CreatePipeline();
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.DateTimeExtensions : object {
    [ExtensionAttribute]
public static DateTime Add(DateTime this, long value, DateTimeUnit unit);
    [ExtensionAttribute]
public static DateTime Add(DateTime this, long value, DateTimeUnit unit, string timezone);
    [ExtensionAttribute]
public static DateTime Add(DateTime this, TimeSpan value, string timezone);
    [ExtensionAttribute]
public static DateTime AddDays(DateTime this, double value, string timezone);
    [ExtensionAttribute]
public static DateTime AddHours(DateTime this, double value, string timezone);
    [ExtensionAttribute]
public static DateTime AddMilliseconds(DateTime this, double value, string timezone);
    [ExtensionAttribute]
public static DateTime AddMinutes(DateTime this, double value, string timezone);
    [ExtensionAttribute]
public static DateTime AddMonths(DateTime this, int value, string timezone);
    [ExtensionAttribute]
public static DateTime AddQuarters(DateTime this, int value);
    [ExtensionAttribute]
public static DateTime AddQuarters(DateTime this, int value, string timezone);
    [ExtensionAttribute]
public static DateTime AddSeconds(DateTime this, double value, string timezone);
    [ExtensionAttribute]
public static DateTime AddWeeks(DateTime this, int value);
    [ExtensionAttribute]
public static DateTime AddWeeks(DateTime this, int value, string timezone);
    [ExtensionAttribute]
public static DateTime AddYears(DateTime this, int value, string timezone);
    [ExtensionAttribute]
public static long Subtract(DateTime this, DateTime startDate, DateTimeUnit unit);
    [ExtensionAttribute]
public static long Subtract(DateTime this, DateTime startDate, DateTimeUnit unit, string timezone);
    [ExtensionAttribute]
public static TimeSpan Subtract(DateTime this, DateTime value, string timezone);
    [ExtensionAttribute]
public static DateTime Subtract(DateTime this, TimeSpan value, string timezone);
    [ExtensionAttribute]
public static DateTime Subtract(DateTime this, long value, DateTimeUnit unit);
    [ExtensionAttribute]
public static DateTime Subtract(DateTime this, long value, DateTimeUnit unit, string timezone);
    [ExtensionAttribute]
public static string ToString(DateTime this, string format, string timezone);
    [ExtensionAttribute]
public static DateTime Truncate(DateTime this, DateTimeUnit unit);
    [ExtensionAttribute]
public static DateTime Truncate(DateTime this, DateTimeUnit unit, long binSize);
    [ExtensionAttribute]
public static DateTime Truncate(DateTime this, DateTimeUnit unit, long binSize, string timezone);
    [ExtensionAttribute]
public static int Week(DateTime this);
    [ExtensionAttribute]
public static int Week(DateTime this, string timezone);
}
public abstract class MongoDB.Driver.Linq.DateTimeUnit : object {
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Millisecond>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Quarter>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Week>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingFriday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingMonday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingSaturday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingSunday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingThursday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingTuesday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <WeekStartingWednesday>k__BackingField;
    [CompilerGeneratedAttribute]
private static DateTimeUnit <Year>k__BackingField;
    public static DateTimeUnit Day { get; }
    public static DateTimeUnit Hour { get; }
    public static DateTimeUnit Millisecond { get; }
    public static DateTimeUnit Minute { get; }
    public static DateTimeUnit Month { get; }
    public static DateTimeUnit Quarter { get; }
    public static DateTimeUnit Second { get; }
    public static DateTimeUnit Week { get; }
    public static DateTimeUnit WeekStartingFriday { get; }
    public static DateTimeUnit WeekStartingMonday { get; }
    public static DateTimeUnit WeekStartingSaturday { get; }
    public static DateTimeUnit WeekStartingSunday { get; }
    public static DateTimeUnit WeekStartingThursday { get; }
    public static DateTimeUnit WeekStartingTuesday { get; }
    public static DateTimeUnit WeekStartingWednesday { get; }
    public static DateTimeUnit Year { get; }
    public string StartOfWeek { get; }
    public string Unit { get; }
    private static DateTimeUnit();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Day();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Hour();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Millisecond();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Minute();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Month();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Quarter();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Second();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Week();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingFriday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingMonday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingSaturday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingSunday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingThursday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingTuesday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_WeekStartingWednesday();
    [CompilerGeneratedAttribute]
public static DateTimeUnit get_Year();
    public abstract virtual string get_StartOfWeek();
    public abstract virtual string get_Unit();
}
public class MongoDB.Driver.Linq.ExponentialMovingAverageAlphaWeighting : ExponentialMovingAverageWeighting {
    private double _alpha;
    public double Alpha { get; }
    internal ExponentialMovingAverageAlphaWeighting(double alpha);
    public double get_Alpha();
}
public class MongoDB.Driver.Linq.ExponentialMovingAveragePositionalWeighting : ExponentialMovingAverageWeighting {
    private int _n;
    public int N { get; }
    internal ExponentialMovingAveragePositionalWeighting(int n);
    public int get_N();
}
public abstract class MongoDB.Driver.Linq.ExponentialMovingAverageWeighting : object {
    public static ExponentialMovingAverageAlphaWeighting Alpha(double alpha);
    public static ExponentialMovingAveragePositionalWeighting N(int n);
}
public class MongoDB.Driver.Linq.ExpressionNotSupportedException : NotSupportedException {
    public ExpressionNotSupportedException(string message);
    public ExpressionNotSupportedException(Expression expression);
    public ExpressionNotSupportedException(Expression expression, string because);
    public ExpressionNotSupportedException(Expression expression, Expression containingExpression);
    public ExpressionNotSupportedException(Expression expression, Expression containingExpression, string because);
    private static string FormatMessage(Expression expression);
    private static string FormatMessage(Expression expression, string because);
    private static string FormatMessage(Expression expression, Expression containingExpression);
    private static string FormatMessage(Expression expression, Expression containingExpression, string because);
}
public interface MongoDB.Driver.Linq.IMongoQueryable {
    public BsonDocument[] LoggedStages { get; }
    public IMongoQueryProvider Provider { get; }
    public abstract virtual BsonDocument[] get_LoggedStages();
    public abstract virtual IMongoQueryProvider get_Provider();
    public abstract virtual QueryableExecutionModel GetExecutionModel();
}
public interface MongoDB.Driver.Linq.IMongoQueryable`1 {
}
public interface MongoDB.Driver.Linq.IMongoQueryProvider {
    public BsonDocument[] LoggedStages { get; }
    public abstract virtual BsonDocument[] get_LoggedStages();
    public abstract virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
internal interface MongoDB.Driver.Linq.IMongoQueryProviderInternal {
    public CollectionNamespace CollectionNamespace { get; }
    public IBsonSerializer PipelineInputSerializer { get; }
    public abstract virtual CollectionNamespace get_CollectionNamespace();
    public abstract virtual IBsonSerializer get_PipelineInputSerializer();
    public abstract virtual QueryableExecutionModel GetExecutionModel(Expression expression);
}
public interface MongoDB.Driver.Linq.IOrderedMongoQueryable`1 {
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.ISetWindowFieldsPartitionExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TValue> AddToSet(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<decimal>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<double>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<float> Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<float>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<int>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> Average(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<long>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static long Count(ISetWindowFieldsPartition`1<TInput> partition, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector1, Func`2<TInput, decimal> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<decimal> CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<decimal>> selector1, Func`2<TInput, Nullable`1<decimal>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector1, Func`2<TInput, double> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<double>> selector1, Func`2<TInput, Nullable`1<double>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector1, Func`2<TInput, int> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<int>> selector1, Func`2<TInput, Nullable`1<int>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector1, Func`2<TInput, long> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<long>> selector1, Func`2<TInput, Nullable`1<long>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector1, Func`2<TInput, float> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<float> CovariancePopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<float>> selector1, Func`2<TInput, Nullable`1<float>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector1, Func`2<TInput, decimal> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<decimal> CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<decimal>> selector1, Func`2<TInput, Nullable`1<decimal>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector1, Func`2<TInput, double> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<double>> selector1, Func`2<TInput, Nullable`1<double>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector1, Func`2<TInput, int> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<int>> selector1, Func`2<TInput, Nullable`1<int>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector1, Func`2<TInput, long> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<long>> selector1, Func`2<TInput, Nullable`1<long>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector1, Func`2<TInput, float> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<float> CovarianceSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<float>> selector1, Func`2<TInput, Nullable`1<float>> selector2, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal DenseRank(ISetWindowFieldsPartition`1<TInput> partition);
    [ExtensionAttribute]
public static decimal Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Derivative(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal DocumentNumber(ISetWindowFieldsPartition`1<TInput> partition);
    [ExtensionAttribute]
public static decimal ExponentialMovingAverage(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, ExponentialMovingAverageWeighting weighting, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double ExponentialMovingAverage(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, ExponentialMovingAverageWeighting weighting, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double ExponentialMovingAverage(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, ExponentialMovingAverageWeighting weighting, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double ExponentialMovingAverage(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, ExponentialMovingAverageWeighting weighting, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float ExponentialMovingAverage(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, ExponentialMovingAverageWeighting weighting, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static TValue First(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Integral(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, WindowTimeUnit unit, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static TValue Last(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static TValue Locf(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static TValue Max(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static TValue Min(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static IEnumerable`1<TValue> Push(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal Rank(ISetWindowFieldsPartition`1<TInput> partition);
    [ExtensionAttribute]
public static TValue Shift(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, int by);
    [ExtensionAttribute]
public static TValue Shift(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, TValue> selector, int by, TValue defaultValue);
    [ExtensionAttribute]
public static decimal StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<decimal>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<double>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<int>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<long>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationPopulation(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<float>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<decimal>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<double>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<int>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<long>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationSample(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<float>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static decimal Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, decimal> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<decimal>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static double Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, double> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<double>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static float Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, float> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<float>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static long Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, int> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<int>> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static long Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, long> selector, SetWindowFieldsWindow window);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(ISetWindowFieldsPartition`1<TInput> partition, Func`2<TInput, Nullable`1<long>> selector, SetWindowFieldsWindow window);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.ExecutionPlanBuilder : object {
    public static Expression BuildPlan(Expression provider, QueryableTranslation translation);
    public static Expression BuildAsyncPlan(Expression provider, QueryableTranslation translation, Expression cancellationToken);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.ExpressionHelper : object {
    public static LambdaExpression GetLambda(Expression node);
    public static bool IsLambda(Expression node);
    public static bool IsLambda(Expression node, int parameterCount);
    public static bool IsLinqMethod(MethodCallExpression node, String[] names);
    public static bool TryGetExpression(Expression node, T& value);
    private static Expression StripQuotes(Expression expression);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.AccumulatorExpression : SerializationExpression {
    private AccumulatorType _accumulatorType;
    private Expression _argument;
    private string _fieldName;
    private IBsonSerializer _serializer;
    private Type _type;
    public AccumulatorType AccumulatorType { get; }
    public Expression Argument { get; }
    public Expression Document { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public string FieldName { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public AccumulatorExpression(Type type, string fieldName, IBsonSerializer serializer, AccumulatorType accumulatorType, Expression argument);
    public AccumulatorType get_AccumulatorType();
    public Expression get_Argument();
    public sealed virtual Expression get_Document();
    public virtual ExtensionExpressionType get_ExtensionType();
    public sealed virtual string get_FieldName();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    public AccumulatorExpression Update(Expression argument);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal enum MongoDB.Driver.Linq.Linq2Implementation.Expressions.AccumulatorType : Enum {
    public int value__;
    public static AccumulatorType AddToSet;
    public static AccumulatorType Average;
    public static AccumulatorType First;
    public static AccumulatorType Last;
    public static AccumulatorType Min;
    public static AccumulatorType Max;
    public static AccumulatorType Push;
    public static AccumulatorType StandardDeviationPopulation;
    public static AccumulatorType StandardDeviationSample;
    public static AccumulatorType Sum;
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.AggregateExpressionExpression : SerializationExpression {
    private Expression _expression;
    private IBsonSerializer _serializer;
    public Expression Expression { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public AggregateExpressionExpression(Expression expression, IBsonSerializer serializer);
    public Expression get_Expression();
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    public AggregateExpressionExpression Update(Expression expression);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ArrayIndexExpression : SerializationExpression {
    private Expression _array;
    private Expression _index;
    private Expression _original;
    private IBsonSerializer _serializer;
    public Expression Array { get; }
    public Expression Index { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Original { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public ArrayIndexExpression(Expression array, Expression index, IBsonSerializer serializer);
    public ArrayIndexExpression(Expression array, Expression index, IBsonSerializer serializer, Expression original);
    public Expression get_Array();
    public Expression get_Index();
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Original();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    public ArrayIndexExpression Update(Expression array, Expression index, Expression original);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.CollectionExpression : SerializationExpression {
    private CollectionNamespace _collectionNamespace;
    private IBsonSerializer _serializer;
    public ExtensionExpressionType ExtensionType { get; }
    public CollectionNamespace CollectionNamespace { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public CollectionExpression(CollectionNamespace collectionNamespace, IBsonSerializer itemSerializer);
    public virtual ExtensionExpressionType get_ExtensionType();
    public CollectionNamespace get_CollectionNamespace();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ConcatExpression : ExtensionExpression {
    private Expression _source;
    private Expression _other;
    public Expression Other { get; }
    public Expression Source { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public ConcatExpression(Expression source, Expression other);
    public Expression get_Other();
    public sealed virtual Expression get_Source();
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual string ToString();
    public ConcatExpression Update(Expression source, Expression other);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.CorrelatedExpression : ExtensionExpression {
    private Guid _correlationId;
    private Expression _expression;
    public Guid CorrelationId { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Expression { get; }
    public Type Type { get; }
    public CorrelatedExpression(Guid correlationId, Expression expression);
    public Guid get_CorrelationId();
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Expression();
    public virtual Type get_Type();
    public virtual string ToString();
    public CorrelatedExpression Update(Expression expression);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.DefaultIfEmptyExpression : ExtensionExpression {
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public DefaultIfEmptyExpression(Expression source);
    public virtual ExtensionExpressionType get_ExtensionType();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public DefaultIfEmptyExpression Update(Expression source);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.DistinctExpression : ExtensionExpression {
    private Expression _source;
    public Expression Source { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public DistinctExpression(Expression source);
    public sealed virtual Expression get_Source();
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual string ToString();
    public DistinctExpression Update(Expression source);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.DocumentExpression : SerializationExpression {
    private IBsonSerializer _serializer;
    public ExtensionExpressionType ExtensionType { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public DocumentExpression(IBsonSerializer serializer);
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ExceptExpression : ExtensionExpression {
    private Expression _other;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Other { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public ExceptExpression(Expression source, Expression other);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Other();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public ExceptExpression Update(Expression source, Expression other);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ExpressionComparer : object {
    private ScopedDictionary`2<ParameterExpression, ParameterExpression> _parameterScope;
    public bool Compare(Expression a, Expression b);
    private bool CompareAccumulator(AccumulatorExpression a, AccumulatorExpression b);
    private bool CompareDocument(DocumentExpression a, DocumentExpression b);
    private bool CompareDocumentWrappedField(FieldAsDocumentExpression a, FieldAsDocumentExpression b);
    private bool CompareField(FieldExpression a, FieldExpression b);
    private bool CompareSerializedConstant(SerializedConstantExpression a, SerializedConstantExpression b);
    private bool CompareUnary(UnaryExpression a, UnaryExpression b);
    private bool CompareBinary(BinaryExpression a, BinaryExpression b);
    private bool CompareTypeIs(TypeBinaryExpression a, TypeBinaryExpression b);
    private bool CompareConditional(ConditionalExpression a, ConditionalExpression b);
    private bool CompareConstant(ConstantExpression a, ConstantExpression b);
    private bool CompareConstantValues(object a, object b);
    private bool CompareParameter(ParameterExpression a, ParameterExpression b);
    private bool CompareMemberAccess(MemberExpression a, MemberExpression b);
    private bool CompareMethodCall(MethodCallExpression a, MethodCallExpression b);
    private bool CompareLambda(LambdaExpression a, LambdaExpression b);
    private bool CompareNew(NewExpression a, NewExpression b);
    private bool CompareExpressionList(ReadOnlyCollection`1<Expression> a, ReadOnlyCollection`1<Expression> b);
    private bool CompareMemberList(ReadOnlyCollection`1<MemberInfo> a, ReadOnlyCollection`1<MemberInfo> b);
    private bool CompareNewArray(NewArrayExpression a, NewArrayExpression b);
    private bool CompareInvocation(InvocationExpression a, InvocationExpression b);
    private bool CompareMemberInit(MemberInitExpression a, MemberInitExpression b);
    private bool CompareBindingList(ReadOnlyCollection`1<MemberBinding> a, ReadOnlyCollection`1<MemberBinding> b);
    private bool CompareBinding(MemberBinding a, MemberBinding b);
    private bool CompareMemberAssignment(MemberAssignment a, MemberAssignment b);
    private bool CompareMemberListBinding(MemberListBinding a, MemberListBinding b);
    private bool CompareMemberMemberBinding(MemberMemberBinding a, MemberMemberBinding b);
    private bool CompareListInit(ListInitExpression a, ListInitExpression b);
    private bool CompareElementInitList(ReadOnlyCollection`1<ElementInit> a, ReadOnlyCollection`1<ElementInit> b);
    private bool CompareElementInit(ElementInit a, ElementInit b);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ExpressionReplacer : ExtensionExpressionVisitor {
    private Expression _original;
    private Expression _replacement;
    private ExpressionReplacer(Expression original, Expression replacement);
    public static Expression Replace(Expression node, Expression original, Expression replacement);
    public virtual Expression Visit(Expression node);
}
internal abstract class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ExtensionExpression : Expression {
    public ExtensionExpressionType ExtensionType { get; }
    public ExpressionType NodeType { get; }
    public abstract virtual ExtensionExpressionType get_ExtensionType();
    public sealed virtual ExpressionType get_NodeType();
    protected sealed virtual Expression Accept(ExpressionVisitor visitor);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal enum MongoDB.Driver.Linq.Linq2Implementation.Expressions.ExtensionExpressionType : Enum {
    public int value__;
    public static ExtensionExpressionType Pipeline;
    public static ExtensionExpressionType Concat;
    public static ExtensionExpressionType DefaultIfEmpty;
    public static ExtensionExpressionType Distinct;
    public static ExtensionExpressionType Except;
    public static ExtensionExpressionType GroupBy;
    public static ExtensionExpressionType GroupByWithResultSelector;
    public static ExtensionExpressionType GroupJoin;
    public static ExtensionExpressionType Intersect;
    public static ExtensionExpressionType Join;
    public static ExtensionExpressionType OrderBy;
    public static ExtensionExpressionType Reverse;
    public static ExtensionExpressionType Sample;
    public static ExtensionExpressionType Select;
    public static ExtensionExpressionType SelectMany;
    public static ExtensionExpressionType Skip;
    public static ExtensionExpressionType Take;
    public static ExtensionExpressionType Union;
    public static ExtensionExpressionType Where;
    public static ExtensionExpressionType Zip;
    public static ExtensionExpressionType Accumulator;
    public static ExtensionExpressionType AggregateExpression;
    public static ExtensionExpressionType ArrayIndex;
    public static ExtensionExpressionType Collection;
    public static ExtensionExpressionType Document;
    public static ExtensionExpressionType FieldAsDocument;
    public static ExtensionExpressionType Field;
    public static ExtensionExpressionType GroupingKey;
    public static ExtensionExpressionType InjectedFilter;
    public static ExtensionExpressionType SerializedConstant;
    public static ExtensionExpressionType Correlated;
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ExtensionExpressionVisitor : ExpressionVisitor {
    protected internal virtual Expression VisitExtensionExpression(ExtensionExpression node);
    protected internal virtual Expression VisitAccumulator(AccumulatorExpression node);
    protected internal virtual Expression VisitAggregateExpression(AggregateExpressionExpression node);
    protected internal virtual Expression VisitArrayIndex(ArrayIndexExpression node);
    protected internal virtual Expression VisitCollection(CollectionExpression node);
    protected internal virtual Expression VisitInjectedFilter(InjectedFilterExpression node);
    protected internal virtual Expression VisitConcat(ConcatExpression node);
    protected internal virtual Expression VisitCorrelated(CorrelatedExpression node);
    protected internal virtual Expression VisitDefaultIfEmpty(DefaultIfEmptyExpression node);
    protected internal virtual Expression VisitDistinct(DistinctExpression node);
    protected internal virtual Expression VisitDocument(DocumentExpression node);
    protected internal virtual Expression VisitDocumentWrappedField(FieldAsDocumentExpression node);
    protected internal virtual Expression VisitExcept(ExceptExpression node);
    protected internal virtual Expression VisitField(FieldExpression node);
    protected internal virtual Expression VisitGroupBy(GroupByExpression node);
    protected internal virtual Expression VisitGroupByWithResultSelector(GroupByWithResultSelectorExpression node);
    protected internal virtual Expression VisitGroupingKey(GroupingKeyExpression node);
    protected internal virtual Expression VisitGroupJoin(GroupJoinExpression node);
    protected internal virtual Expression VisitIntersect(IntersectExpression node);
    protected internal virtual Expression VisitJoin(JoinExpression node);
    protected internal virtual Expression VisitOrderBy(OrderByExpression node);
    protected internal virtual OrderByClause VisitOrderByClause(OrderByClause clause);
    protected internal virtual Expression VisitPipeline(PipelineExpression node);
    protected internal virtual ResultOperator VisitResultOperator(ResultOperator resultOperator);
    protected internal virtual Expression VisitReverse(ReverseExpression node);
    protected internal virtual Expression VisitSample(SampleExpression node);
    protected internal virtual Expression VisitSelect(SelectExpression node);
    protected internal virtual Expression VisitSelectMany(SelectManyExpression node);
    protected internal virtual Expression VisitSerializedConstant(SerializedConstantExpression node);
    protected internal virtual Expression VisitSkip(SkipExpression node);
    protected internal virtual Expression VisitTake(TakeExpression node);
    protected internal virtual Expression VisitUnion(UnionExpression node);
    protected internal virtual Expression VisitWhere(WhereExpression node);
    protected internal virtual Expression VisitZip(ZipExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.FieldAsDocumentExpression : SerializationExpression {
    private Expression _expression;
    private string _fieldName;
    private IBsonSerializer _serializer;
    public Expression Document { get; }
    public Expression Expression { get; }
    public string FieldName { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public FieldAsDocumentExpression(Expression expression, string fieldName, IBsonSerializer serializer);
    public sealed virtual Expression get_Document();
    public Expression get_Expression();
    public sealed virtual string get_FieldName();
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    public FieldAsDocumentExpression Update(Expression expression);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.FieldExpression : SerializationExpression {
    private Expression _document;
    private string _fieldName;
    private Expression _original;
    private IBsonSerializer _serializer;
    private string _outOfCurrentScopePrefix;
    public Expression Document { get; }
    public string FieldName { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Original { get; }
    public string OutOfCurrentScopePrefix { get; public set; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public FieldExpression(string fieldName, IBsonSerializer serializer);
    public FieldExpression(Expression document, string fieldName, IBsonSerializer serializer);
    public FieldExpression(string fieldName, IBsonSerializer serializer, Expression original);
    public FieldExpression(Expression document, string fieldName, IBsonSerializer serializer, Expression original);
    public sealed virtual Expression get_Document();
    public sealed virtual string get_FieldName();
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Original();
    public sealed virtual string get_OutOfCurrentScopePrefix();
    public sealed virtual void set_OutOfCurrentScopePrefix(string value);
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    public FieldExpression Update(Expression document, Expression original);
    public FieldExpression WithSerializer(IBsonSerializer serializer);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.GroupByExpression : ExtensionExpression {
    private Expression _keySelector;
    private Expression _source;
    private ReadOnlyCollection`1<AccumulatorExpression> _accumulators;
    private Type _type;
    public ReadOnlyCollection`1<AccumulatorExpression> Accumulators { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public Expression KeySelector { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public GroupByExpression(Expression source, Expression keySelector);
    public GroupByExpression(Type type, Expression source, Expression keySelector, IEnumerable`1<AccumulatorExpression> accumulators);
    public ReadOnlyCollection`1<AccumulatorExpression> get_Accumulators();
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_KeySelector();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public GroupByExpression Update(Expression source, Expression keySelector, IEnumerable`1<AccumulatorExpression> accumulators);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.GroupByWithResultSelectorExpression : ExtensionExpression {
    private Expression _selector;
    private Expression _source;
    private Type _type;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Selector { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public GroupByWithResultSelectorExpression(Expression source, Expression selector);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Selector();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public GroupByWithResultSelectorExpression Update(Expression source, Expression selector);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.GroupingKeyExpression : SerializationExpression {
    private Expression _expression;
    private IBsonSerializer _serializer;
    public Expression Document { get; }
    public Expression Expression { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public string FieldName { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public GroupingKeyExpression(Expression expression, IBsonSerializer serializer);
    public sealed virtual Expression get_Document();
    public Expression get_Expression();
    public virtual ExtensionExpressionType get_ExtensionType();
    public sealed virtual string get_FieldName();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public virtual string ToString();
    public GroupingKeyExpression Update(Expression expression);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.GroupJoinExpression : ExtensionExpression {
    private Type _type;
    private Expression _source;
    private Expression _joined;
    private Expression _sourceKeySelector;
    private Expression _joinedKeySelector;
    private string _joinedItemName;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Joined { get; }
    public Expression JoinedKeySelector { get; }
    public string JoinedItemName { get; }
    public Expression Source { get; }
    public Expression SourceKeySelector { get; }
    public Type Type { get; }
    public GroupJoinExpression(Type type, Expression source, Expression joined, Expression sourceKeySelector, Expression joinedKeySelector, string joinedItemName);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Joined();
    public Expression get_JoinedKeySelector();
    public string get_JoinedItemName();
    public sealed virtual Expression get_Source();
    public Expression get_SourceKeySelector();
    public virtual Type get_Type();
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
    public Expression Update(Expression source, Expression joined, Expression sourceKeySelector, Expression joinedKeySelector);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Expressions.IFieldExpression {
    public Expression Document { get; }
    public string FieldName { get; }
    public abstract virtual Expression get_Document();
    public abstract virtual string get_FieldName();
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Expressions.IHasOutOfCurrentScopePrefix {
    public string OutOfCurrentScopePrefix { get; public set; }
    public abstract virtual string get_OutOfCurrentScopePrefix();
    public abstract virtual void set_OutOfCurrentScopePrefix(string value);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.InjectedFilterExpression : ExtensionExpression {
    private BsonDocument _filter;
    public ExtensionExpressionType ExtensionType { get; }
    public BsonDocument Filter { get; }
    public Type Type { get; }
    public InjectedFilterExpression(BsonDocument filter);
    public virtual ExtensionExpressionType get_ExtensionType();
    public BsonDocument get_Filter();
    public virtual Type get_Type();
    public virtual string ToString();
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.IntersectExpression : ExtensionExpression {
    private Expression _other;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Other { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public IntersectExpression(Expression source, Expression other);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Other();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public IntersectExpression Update(Expression source, Expression other);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Expressions.ISerializationExpression {
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public abstract virtual IBsonSerializer get_Serializer();
    public abstract virtual Type get_Type();
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ISerializationExpressionExtensions : object {
    [ExtensionAttribute]
public static string AppendFieldName(ISerializationExpression node, string suffix);
    [ExtensionAttribute]
public static string PrependFieldName(ISerializationExpression node, string prefix);
    [ExtensionAttribute]
public static BsonValue SerializeValue(ISerializationExpression field, Type valueType, object value);
    [ExtensionAttribute]
public static BsonArray SerializeValues(ISerializationExpression field, Type itemType, IEnumerable values);
    private static string CombineFieldNames(string prefix, string suffix);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Expressions.ISourcedExpression {
    public Expression Source { get; }
    public abstract virtual Expression get_Source();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.JoinExpression : ExtensionExpression {
    private Type _type;
    private Expression _source;
    private Expression _joined;
    private Expression _sourceKeySelector;
    private Expression _joinedKeySelector;
    private string _joinedItemName;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Joined { get; }
    public Expression JoinedKeySelector { get; }
    public string JoinedItemName { get; }
    public Expression Source { get; }
    public Expression SourceKeySelector { get; }
    public Type Type { get; }
    public JoinExpression(Type type, Expression source, Expression joined, Expression sourceKeySelector, Expression joinedKeySelector, string joinedItemName);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Joined();
    public Expression get_JoinedKeySelector();
    public string get_JoinedItemName();
    public sealed virtual Expression get_Source();
    public Expression get_SourceKeySelector();
    public virtual Type get_Type();
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
    public Expression Update(Expression source, Expression joined, Expression sourceKeySelector, Expression joinedKeySelector);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.OrderByClause : object {
    private SortDirection _direction;
    private Expression _expression;
    public SortDirection Direction { get; }
    public Expression Expression { get; }
    public OrderByClause(Expression expression, SortDirection direction);
    public SortDirection get_Direction();
    public Expression get_Expression();
    public virtual string ToString();
    public OrderByClause Update(Expression expression);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.OrderByExpression : ExtensionExpression {
    private Expression _source;
    private ReadOnlyCollection`1<OrderByClause> _clauses;
    public ReadOnlyCollection`1<OrderByClause> Clauses { get; }
    public Expression Source { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public OrderByExpression(Expression source, IEnumerable`1<OrderByClause> clauses);
    public ReadOnlyCollection`1<OrderByClause> get_Clauses();
    public sealed virtual Expression get_Source();
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual string ToString();
    public OrderByExpression Update(Expression source, ReadOnlyCollection`1<OrderByClause> clauses);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.PipelineExpression : SerializationExpression {
    private Expression _source;
    private SerializationExpression _projector;
    private ResultOperator _resultOperator;
    private IBsonSerializer _serializer;
    private Type _type;
    public SerializationExpression Projector { get; }
    public ResultOperator ResultOperator { get; }
    public IBsonSerializer Serializer { get; }
    public Expression Source { get; }
    public ExtensionExpressionType ExtensionType { get; }
    public Type Type { get; }
    public PipelineExpression(Expression source, SerializationExpression projector);
    public PipelineExpression(Expression source, SerializationExpression projector, ResultOperator resultOperator);
    public SerializationExpression get_Projector();
    public ResultOperator get_ResultOperator();
    public virtual IBsonSerializer get_Serializer();
    public sealed virtual Expression get_Source();
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual Type get_Type();
    public virtual string ToString();
    public PipelineExpression Update(Expression source, SerializationExpression projector, ResultOperator resultOperator);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal abstract class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperator : object {
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public abstract virtual string get_Name();
    public abstract virtual IBsonSerializer get_Serializer();
    public abstract virtual Type get_Type();
    protected internal virtual ResultOperator Update(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.AggregateResultOperator : ResultOperator {
    private Expression _finalizer;
    private string _itemName;
    private Expression _reducer;
    private Expression _seed;
    private IBsonSerializer _serializer;
    public Expression Finalizer { get; }
    public string ItemName { get; }
    public string Name { get; }
    public Expression Reducer { get; }
    public Expression Seed { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public AggregateResultOperator(Expression seed, Expression reducer, Expression finalizer, string itemName, IBsonSerializer serializer);
    public Expression get_Finalizer();
    public string get_ItemName();
    public virtual string get_Name();
    public Expression get_Reducer();
    public Expression get_Seed();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    protected internal virtual ResultOperator Update(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.AllResultOperator : ResultOperator {
    private static BooleanSerializer __serializer;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    private static AllResultOperator();
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.AnyResultOperator : ResultOperator {
    private static BooleanSerializer __serializer;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    private static AnyResultOperator();
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.ArrayResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public ArrayResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.AverageResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public AverageResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.ContainsResultOperator : ResultOperator {
    private static BooleanSerializer __serializer;
    private Expression _value;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public Expression Value { get; }
    public ContainsResultOperator(Expression value);
    private static ContainsResultOperator();
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public Expression get_Value();
    protected internal virtual ResultOperator Update(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.CountResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public CountResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.FirstResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    private bool _isDefault;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public FirstResultOperator(Type type, IBsonSerializer serializer, bool isDefault);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.HashSetResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public HashSetResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.LastResultOperator : ResultOperator {
    private bool _isDefault;
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public LastResultOperator(Type type, IBsonSerializer serializer, bool isDefault);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.ListResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public ListResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.MaxResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public MaxResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.MinResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public MinResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.ResultTransformerHelper : object {
    public static LambdaExpression CreateAggregator(string methodName, Type sourceType);
    public static LambdaExpression CreateAsyncAggregator(string methodName, Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.SingleResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    private bool _isDefault;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public SingleResultOperator(Type type, IBsonSerializer serializer, bool isDefault);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.StandardDeviationResultOperator : ResultOperator {
    private bool _isSample;
    private IBsonSerializer _serializer;
    private Type _type;
    public bool IsSample { get; }
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public StandardDeviationResultOperator(Type type, IBsonSerializer serializer, bool isSample);
    public bool get_IsSample();
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ResultOperators.SumResultOperator : ResultOperator {
    private IBsonSerializer _serializer;
    private Type _type;
    public string Name { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public SumResultOperator(Type type, IBsonSerializer serializer);
    public virtual string get_Name();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public sealed virtual LambdaExpression CreateAggregator(Type sourceType);
    public sealed virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ReverseExpression : ExtensionExpression {
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public ReverseExpression(Expression source);
    public virtual ExtensionExpressionType get_ExtensionType();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public ReverseExpression Update(Expression source);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.SampleExpression : ExtensionExpression {
    private Expression _count;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Count { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public SampleExpression(Expression source, Expression count);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Count();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public SampleExpression Update(Expression source, Expression count);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.SelectExpression : ExtensionExpression {
    private string _itemName;
    private Expression _selector;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Selector { get; }
    public Expression Source { get; }
    public string ItemName { get; }
    public Type Type { get; }
    public SelectExpression(Expression source, string itemName, Expression selector);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Selector();
    public sealed virtual Expression get_Source();
    public string get_ItemName();
    public virtual Type get_Type();
    public virtual string ToString();
    public SelectExpression Update(Expression source, Expression selector);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.SelectManyExpression : ExtensionExpression {
    private string _collectionItemName;
    private Expression _collectionSelector;
    private string _resultItemName;
    private Expression _resultSelector;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public string CollectionItemName { get; }
    public Expression CollectionSelector { get; }
    public string ResultItemName { get; }
    public Expression ResultSelector { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public SelectManyExpression(Expression source, string collectionItemName, Expression collectionSelector, string resultItemName, Expression resultSelector);
    public virtual ExtensionExpressionType get_ExtensionType();
    public string get_CollectionItemName();
    public Expression get_CollectionSelector();
    public string get_ResultItemName();
    public Expression get_ResultSelector();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public SelectManyExpression Update(Expression source, Expression collectionSelector, Expression resultSelector);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal abstract class MongoDB.Driver.Linq.Linq2Implementation.Expressions.SerializationExpression : ExtensionExpression {
    public IBsonSerializer Serializer { get; }
    public abstract virtual IBsonSerializer get_Serializer();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.SerializedConstantExpression : SerializationExpression {
    private object _value;
    private IBsonSerializer _serializer;
    public ExtensionExpressionType ExtensionType { get; }
    public IBsonSerializer Serializer { get; }
    public Type Type { get; }
    public object Value { get; }
    public SerializedConstantExpression(object value, IBsonSerializer serializer);
    public virtual ExtensionExpressionType get_ExtensionType();
    public virtual IBsonSerializer get_Serializer();
    public virtual Type get_Type();
    public object get_Value();
    public virtual string ToString();
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.SkipExpression : ExtensionExpression {
    private Expression _count;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Count { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public SkipExpression(Expression source, Expression count);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Count();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public SkipExpression Update(Expression source, Expression count);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.TakeExpression : ExtensionExpression {
    private Expression _count;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Count { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public TakeExpression(Expression source, Expression count);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Count();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public TakeExpression Update(Expression source, Expression count);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.UnionExpression : ExtensionExpression {
    private Expression _other;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Other { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public UnionExpression(Expression source, Expression other);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Other();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public UnionExpression Update(Expression source, Expression other);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.WhereExpression : ExtensionExpression {
    private string _itemName;
    private Expression _predicate;
    private Expression _source;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Predicate { get; }
    public Expression Source { get; }
    public string ItemName { get; }
    public Type Type { get; }
    public WhereExpression(Expression source, string itemName, Expression predicate);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Predicate();
    public sealed virtual Expression get_Source();
    public string get_ItemName();
    public virtual Type get_Type();
    public virtual string ToString();
    public WhereExpression Update(Expression source, Expression predicate);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Expressions.ZipExpression : ExtensionExpression {
    private Expression _other;
    private Expression _source;
    private Type _type;
    public ExtensionExpressionType ExtensionType { get; }
    public Expression Other { get; }
    public Expression Source { get; }
    public Type Type { get; }
    public ZipExpression(Type type, Expression source, Expression other);
    public virtual ExtensionExpressionType get_ExtensionType();
    public Expression get_Other();
    public sealed virtual Expression get_Source();
    public virtual Type get_Type();
    public virtual string ToString();
    public ZipExpression Update(Expression source, Expression other);
    protected internal virtual Expression Accept(ExtensionExpressionVisitor visitor);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.FieldExpressionFlattener : ExtensionExpressionVisitor {
    public static Expression FlattenFields(Expression node);
    protected internal virtual Expression VisitArrayIndex(ArrayIndexExpression node);
    protected internal virtual Expression VisitDocumentWrappedField(FieldAsDocumentExpression node);
    protected internal virtual Expression VisitField(FieldExpression node);
    private static string FormatArrayIndex(object index);
    private static string FormatArrayIndex(long index);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.IResultTransformer {
    public abstract virtual LambdaExpression CreateAggregator(Type sourceType);
    public abstract virtual LambdaExpression CreateAsyncAggregator(Type sourceType);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.LinqProviderAdapterV2 : LinqProviderAdapter {
    internal virtual IMongoQueryable`1<TDocument> AsQueryable(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions options);
    internal virtual IMongoQueryable`1<NoPipelineInput> AsQueryable(IMongoDatabase database, IClientSessionHandle session, AggregateOptions options);
    public virtual string ToString();
    internal virtual BsonValue TranslateExpressionToAggregateExpression(Expression`1<Func`2<TSource, TResult>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions, TranslationContextData contextData);
    internal virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToBucketOutputProjection(Expression`1<Func`2<TInput, TValue>> valueExpression, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> outputExpression, IBsonSerializer`1<TInput> documentSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal virtual RenderedFieldDefinition TranslateExpressionToField(LambdaExpression expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    internal virtual RenderedFieldDefinition`1<TField> TranslateExpressionToField(Expression`1<Func`2<TDocument, TField>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, bool allowScalarValueForArrayField);
    internal virtual BsonDocument TranslateExpressionToFilter(Expression`1<Func`2<TDocument, bool>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    internal virtual RenderedProjectionDefinition`1<TProjection> TranslateExpressionToFindProjection(Expression`1<Func`2<TSource, TProjection>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry);
    internal virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToGroupProjection(Expression`1<Func`2<TInput, TKey>> idExpression, Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> groupExpression, IBsonSerializer`1<TInput> documentSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToProjection(Expression`1<Func`2<TInput, TOutput>> expression, IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal virtual BsonDocument TranslateExpressionToSetStage(Expression`1<Func`2<TDocument, TFields>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.MethodHelper : object {
    public static MethodInfo GetMethodInfo(Expression`1<Func`1<TResult>> lambda);
    public static MethodInfo GetMethodInfo(Expression`1<Func`2<T, TResult>> lambda);
    public static MethodInfo GetMethodDefinition(Expression`1<Func`1<TResult>> lambda);
    public static MethodInfo GetMethodDefinition(Expression`1<Func`2<T, TResult>> lambda);
    public static IEnumerable`1<MethodInfo> GetEnumerableAndQueryableMethodDefinitions(string name);
    public static MethodInfo GetMethodDefinition(MethodInfo methodInfo);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.MongoQueryableImpl`2 : object {
    private IMongoQueryProviderInternal _queryProvider;
    private Expression _expression;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public BsonDocument[] LoggedStages { get; }
    public IMongoQueryProvider Provider { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public MongoQueryableImpl`2(IMongoQueryProviderInternal queryProvider);
    public MongoQueryableImpl`2(IMongoQueryProviderInternal queryProvider, Expression expression);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual BsonDocument[] get_LoggedStages();
    public sealed virtual IMongoQueryProvider get_Provider();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public sealed virtual IEnumerator`1<TOutput> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual QueryableExecutionModel GetExecutionModel();
    public sealed virtual IAsyncCursor`1<TOutput> ToCursor(CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<TOutput>> ToCursorAsync(CancellationToken cancellationToken);
    public virtual string ToString();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.MongoQueryProviderImpl`1 : object {
    private IMongoCollection`1<TDocument> _collection;
    private AggregateOptions _options;
    private IClientSessionHandle _session;
    public CollectionNamespace CollectionNamespace { get; }
    public BsonDocument[] LoggedStages { get; }
    public IBsonSerializer PipelineInputSerializer { get; }
    public MongoQueryProviderImpl`1(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions options);
    public sealed virtual CollectionNamespace get_CollectionNamespace();
    public sealed virtual BsonDocument[] get_LoggedStages();
    public sealed virtual IBsonSerializer get_PipelineInputSerializer();
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public sealed virtual QueryableExecutionModel GetExecutionModel(Expression expression);
    internal object ExecuteModel(QueryableExecutionModel model);
    internal Task ExecuteModelAsync(QueryableExecutionModel model, CancellationToken cancellationToken);
    private Expression Prepare(Expression expression);
    private QueryableTranslation Translate(Expression expression);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.AccumulatorBinder : ExtensionExpressionVisitor {
    private IBindingContext _bindingContext;
    private int _count;
    public AccumulatorBinder(IBindingContext bindingContext);
    public static Expression Bind(Expression node, IBindingContext bindingContext);
    protected internal virtual Expression VisitAccumulator(AccumulatorExpression node);
    protected internal virtual Expression VisitPipeline(PipelineExpression node);
    private bool TryGetCorrelatedGroup(Expression source, Guid& correlationId);
    private bool TryGetAccumulatorTypeAndArgument(PipelineExpression node, AccumulatorType& accumulatorType, Expression& argument);
    private Expression GetCountAccumulatorArgument(Expression node);
    private Expression GetAccumulatorArgument(Expression node);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.Processors.BinderHelper : object {
    public static SelectExpression BindSelect(PipelineExpression pipeline, IBindingContext bindingContext, LambdaExpression lambda);
    public static WhereExpression BindWhere(PipelineExpression pipeline, IBindingContext bindingContext, LambdaExpression lambda);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.CompositeMethodCallBinder`1 : object {
    private MethodInfoMethodCallBinder`1<TBindingContext> _infoBinder;
    private NameBasedMethodCallBinder`1<TBindingContext> _nameBinder;
    public CompositeMethodCallBinder`1(MethodInfoMethodCallBinder`1<TBindingContext> infoBinder, NameBasedMethodCallBinder`1<TBindingContext> nameBinder);
    public bool IsRegistered(MethodCallExpression node);
    public sealed virtual Expression Bind(PipelineExpression pipeline, TBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.CorrelatedAccumulatorRemover : ExtensionExpressionVisitor {
    private Guid _correlationId;
    private CorrelatedAccumulatorRemover(Guid correlationId);
    public static Expression Remove(Expression node, Guid correlationId);
    protected internal virtual Expression VisitCorrelated(CorrelatedExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.CorrelatedGroupRewriter : ExtensionExpressionVisitor {
    private ILookup`2<Guid, CorrelatedExpression> _accumulatorLookup;
    private Dictionary`2<CorrelatedExpression, Expression> _accumulatorReplacementMap;
    public static Expression Rewrite(Expression node);
    protected internal virtual Expression VisitCorrelated(CorrelatedExpression node);
    private Expression VisitCorrelatedAccumulator(CorrelatedExpression node);
    private Expression VisitCorrelatedGroup(CorrelatedExpression node);
    protected internal virtual Expression VisitPipeline(PipelineExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.EmbeddedPipelineBinder : PipelineBinderBase`1<EmbeddedPipelineBindingContext> {
    private static CompositeMethodCallBinder`1<EmbeddedPipelineBindingContext> __methodCallBinder;
    private static EmbeddedPipelineBinder();
    public EmbeddedPipelineBinder(EmbeddedPipelineBindingContext bindingContext);
    public static bool SupportsNode(MethodCallExpression node);
    public static Expression Bind(Expression node, IBindingContext parent);
    protected virtual Expression BindNonMethodCall(Expression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.EmbeddedPipelineBindingContext : object {
    private Dictionary`2<Expression, Guid> _correlationMapping;
    private Dictionary`2<Expression, Expression> _expressionMapping;
    private Dictionary`2<MemberInfo, Expression> _memberMapping;
    private IBindingContext _parent;
    public IBsonSerializerRegistry SerializerRegistry { get; }
    public EmbeddedPipelineBindingContext(IBindingContext parent);
    public sealed virtual IBsonSerializerRegistry get_SerializerRegistry();
    public sealed virtual void AddCorrelatingId(Expression node, Guid correlatingId);
    public sealed virtual void AddExpressionMapping(Expression original, Expression replacement);
    public sealed virtual void AddMemberMapping(MemberInfo member, Expression replacement);
    public sealed virtual Expression Bind(Expression node);
    public sealed virtual IBsonSerializer GetSerializer(Type type, Expression node);
    public sealed virtual bool TryGetCorrelatingId(Expression node, Guid& correlatingId);
    public sealed virtual bool TryGetExpressionMapping(Expression original, Expression& replacement);
    public sealed virtual bool TryGetMemberMapping(MemberInfo member, Expression& replacement);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AggregateBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AggregateBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AllBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AnyBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AsQueryableBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AsQueryableBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.AverageBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ConcatBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ContainsBinder : object {
    public static String[] SupportedMethodNames { get; }
    public static String[] get_SupportedMethodNames();
    public static bool IsSupported(MethodCallExpression node);
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.CountBinder : object {
    public static String[] SupportedMethodNames { get; }
    public static String[] get_SupportedMethodNames();
    public static bool IsSupported(MethodCallExpression node);
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.DefaultIfEmptyBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.DefaultIfEmptyBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.DistinctBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.DistinctBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ExceptBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ExceptBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.FirstBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.IntersectBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.IntersectBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.LastBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.MaxBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.MinBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.OfTypeBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ReverseBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ReverseBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.SelectBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.SelectBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.SkipBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.StandardDeviationBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.SumBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.TakeBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ToArrayBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ToHashSetBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ToHashSetBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ToListBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.UnionBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.UnionBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.WhereBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.WhereBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ZipBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.EmbeddedPipeline.MethodCallBinders.ZipBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, EmbeddedPipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Processors.IBindingContext {
    public IBsonSerializerRegistry SerializerRegistry { get; }
    public abstract virtual IBsonSerializerRegistry get_SerializerRegistry();
    public abstract virtual void AddCorrelatingId(Expression node, Guid correlatingId);
    public abstract virtual void AddExpressionMapping(Expression original, Expression replacement);
    public abstract virtual void AddMemberMapping(MemberInfo member, Expression replacement);
    public abstract virtual Expression Bind(Expression node);
    public abstract virtual IBsonSerializer GetSerializer(Type type, Expression node);
    public abstract virtual bool TryGetCorrelatingId(Expression node, Guid& correlatingId);
    public abstract virtual bool TryGetExpressionMapping(Expression original, Expression& replacement);
    public abstract virtual bool TryGetMemberMapping(MemberInfo member, Expression& replacement);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Processors.IMethodCallBinder`1 {
    public abstract virtual Expression Bind(PipelineExpression pipeline, TBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.MethodInfoMethodCallBinder`1 : object {
    private Dictionary`2<MethodInfo, IMethodCallBinder`1<TBindingContext>> _binders;
    public sealed virtual Expression Bind(PipelineExpression pipeline, TBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
    public bool IsRegistered(MethodCallExpression node);
    public void Register(IMethodCallBinder`1<TBindingContext> binder, IEnumerable`1<MethodInfo> methods);
    private bool TryGetMethodCallBinder(MethodInfo method, IMethodCallBinder`1& binder);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.MultipleWhereMerger : ExtensionExpressionVisitor {
    public static Expression Merge(Expression node);
    protected internal virtual Expression VisitWhere(WhereExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.NameBasedMethodCallBinder`1 : object {
    private Dictionary`2<string, List`1<KeyValuePair`2<Registration<TBindingContext>, IMethodCallBinder`1<TBindingContext>>>> _binders;
    public sealed virtual Expression Bind(PipelineExpression pipeline, TBindingContext context, MethodCallExpression node, IEnumerable`1<Expression> arguments);
    public bool IsRegistered(MethodCallExpression node);
    public void Register(IMethodCallBinder`1<TBindingContext> binder, String[] names);
    public void Register(IMethodCallBinder`1<TBindingContext> binder, Func`2<MethodCallExpression, bool> filter, String[] names);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.OutOfCurrentScopePrefixCollector : ExtensionExpressionVisitor {
    private bool _isWhereSourceConstantExpression;
    private HashSet`1<string> _outOfCurrentScopePrefixCollection;
    public static IEnumerable`1<string> Collect(Expression expression);
    public virtual Expression Visit(Expression node);
    protected internal virtual Expression VisitWhere(WhereExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.PartialEvaluator : ExpressionVisitor {
    private HashSet`1<Expression> _candidates;
    private PartialEvaluator(HashSet`1<Expression> candidates);
    public static Expression Evaluate(Expression node);
    public virtual Expression Visit(Expression node);
    private Expression EvaluateSubtree(Expression subtree);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.AnyBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.AverageBinder : SelectingResultOperatorBinderBase {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    protected virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
    protected virtual AccumulatorType GetAccumulatorType();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.CountBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.DistinctBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.DistinctBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.FirstBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.GroupByBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.GroupByBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
    private Expression BindKey(PipelineExpression pipeline, PipelineBindingContext bindingContext, Expression node);
    private DocumentExpression BuildProjector(PipelineBindingContext bindingContext, Expression idSelector, Expression elementSelector);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.GroupByWithResultSelectorBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.GroupByWithResultSelectorBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
    private Expression BindKey(PipelineExpression pipeline, PipelineBindingContext bindingContext, Expression node);
    private Expression BindSelector(PipelineExpression pipeline, PipelineBindingContext bindingContext, Expression keySelector, Expression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.JoinBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.JoinBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.JoinSerializer`1 : SerializerBase`1<T> {
    private IBsonSerializer _sourceSerializer;
    private string _sourceMemberName;
    private IBsonSerializer _joinedSerializer;
    private string _joinedFieldName;
    private string _joinedMemberName;
    private Func`3<object, object, object> _creator;
    public JoinSerializer`1(IBsonSerializer sourceSerializer, string sourceMemberName, IBsonSerializer joinedSerializer, string joinedMemberName, string joinedFieldName, Func`3<object, object, object> creator);
    public virtual T Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    [CompilerGeneratedAttribute]
private bool <Deserialize>b__7_0(string fieldName);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.MaxBinder : SelectingResultOperatorBinderBase {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    protected virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
    protected virtual AccumulatorType GetAccumulatorType();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.MinBinder : SelectingResultOperatorBinderBase {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    protected virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
    protected virtual AccumulatorType GetAccumulatorType();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.OfTypeBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.OrderByBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.OrderByBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SampleBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SelectBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SelectBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal abstract class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SelectingResultOperatorBinderBase : object {
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
    protected abstract virtual AccumulatorType GetAccumulatorType();
    protected abstract virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SelectManyBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SelectManyBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
    private static IFieldExpression GetCollectionField(Expression collectionSelector);
    private FieldExpression PrepareFieldExpression(IFieldExpression collectionField, IBsonSerializer serializer, PipelineBindingContext bindingContext);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SingleBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SkipBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.StandardDeviationPopulationBinder : SelectingResultOperatorBinderBase {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    protected virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
    protected virtual AccumulatorType GetAccumulatorType();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.StandardDeviationSampleBinder : SelectingResultOperatorBinderBase {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    protected virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
    protected virtual AccumulatorType GetAccumulatorType();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.SumBinder : SelectingResultOperatorBinderBase {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    protected virtual ResultOperator CreateResultOperator(Type resultType, IBsonSerializer serializer);
    protected virtual AccumulatorType GetAccumulatorType();
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.TakeBinder : object {
    public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.ThenByBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.ThenByBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.WhereBinder : object {
    [IteratorStateMachineAttribute("MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.MethodCallBinders.WhereBinder/<GetSupportedMethods>d__0")]
public static IEnumerable`1<MethodInfo> GetSupportedMethods();
    public sealed virtual Expression Bind(PipelineExpression pipeline, PipelineBindingContext bindingContext, MethodCallExpression node, IEnumerable`1<Expression> arguments);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Pipeline.PipelineBinder : PipelineBinderBase`1<PipelineBindingContext> {
    private static MethodInfoMethodCallBinder`1<PipelineBindingContext> __methodCallBinder;
    private static PipelineBinder();
    private PipelineBinder(PipelineBindingContext bindingContext);
    public static Expression Bind(Expression node, IBsonSerializerRegistry serializerRegistry);
    protected virtual Expression BindNonMethodCall(Expression node);
}
internal abstract class MongoDB.Driver.Linq.Linq2Implementation.Processors.PipelineBinderBase`1 : object {
    private TBindingContext _bindingContext;
    private IMethodCallBinder`1<TBindingContext> _methodCallBinder;
    protected TBindingContext BindingContext { get; }
    protected PipelineBinderBase`1(TBindingContext bindingContext, IMethodCallBinder`1<TBindingContext> methodCallBinder);
    protected TBindingContext get_BindingContext();
    protected abstract virtual Expression BindNonMethodCall(Expression node);
    protected Expression Bind(Expression node);
    private PipelineExpression BindPipeline(Expression node);
    private Expression BindMethodCall(MethodCallExpression node);
    private Expression RemoveUnnecessaries(Expression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.PipelineBindingContext : object {
    private Dictionary`2<Expression, Guid> _correlationMapping;
    private Dictionary`2<Expression, Expression> _expressionMapping;
    private Dictionary`2<MemberInfo, Expression> _memberMapping;
    private IBsonSerializerRegistry _serializerRegistry;
    public IBsonSerializerRegistry SerializerRegistry { get; }
    public PipelineBindingContext(IBsonSerializerRegistry serializerRegistry);
    public sealed virtual IBsonSerializerRegistry get_SerializerRegistry();
    public sealed virtual void AddCorrelatingId(Expression node, Guid correlatingId);
    public sealed virtual void AddExpressionMapping(Expression original, Expression replacement);
    public sealed virtual void AddMemberMapping(MemberInfo member, Expression replacement);
    public sealed virtual Expression Bind(Expression node);
    public Expression Bind(Expression node, bool isClientSideProjection);
    public sealed virtual IBsonSerializer GetSerializer(Type type, Expression node);
    public SerializationExpression BindProjector(Expression& selector);
    public sealed virtual bool TryGetCorrelatingId(Expression node, Guid& correlatingId);
    public sealed virtual bool TryGetExpressionMapping(Expression original, Expression& replacement);
    public sealed virtual bool TryGetMemberMapping(MemberInfo member, Expression& replacement);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.PreviouslyUsedSerializerFinder : ExtensionExpressionVisitor {
    private Type _valueType;
    private IBsonSerializer _serializer;
    private PreviouslyUsedSerializerFinder(Type valueType);
    public static bool TryFindSerializer(Expression node, Type type, IBsonSerializer& serializer);
    public virtual Expression Visit(Expression expression);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.ProjectionMapper : object {
    private ConstructorInfo _constructor;
    private List`1<ProjectionMemberMapping> _mappings;
    public static ProjectionMapping Map(Expression node);
    public void Visit(Expression node);
    private void VisitMemberInit(MemberInitExpression node);
    private void VisitNew(NewExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.ProjectionMapping : object {
    public ConstructorInfo Constructor;
    public Expression Expression;
    public List`1<ProjectionMemberMapping> Members;
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.ProjectionMemberMapping : object {
    public MemberInfo Member;
    public Expression Expression;
    public ParameterInfo Parameter;
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.SerializationBinder : ExtensionExpressionVisitor {
    private IBindingContext _bindingContext;
    private bool _isInEmbeddedPipeline;
    private bool _isClientSideProjection;
    private bool _isOutOfCurrentScope;
    private SerializationBinder(IBindingContext bindingContext, bool isClientSideProjection);
    public static Expression Bind(Expression node, IBindingContext context, bool isClientSideProjection);
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
    private Expression BindElementAt(MethodCallExpression node);
    private Expression BindEmbeddedPipeline(MethodCallExpression node);
    private Expression BindGetItem(MethodCallExpression node);
    private Expression BindInject(MethodCallExpression node);
    private Expression BindClientSideProjector(MethodCallExpression node);
    private void SetOutOfCurrentScopePrefixIfPossible(Expression expression, string value);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.SerializerBuilder : object {
    private IBsonSerializerRegistry _serializerRegistry;
    private SerializerBuilder(IBsonSerializerRegistry serializerRegistry);
    public static IBsonSerializer Build(Expression node, IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer Build(Expression node);
    private IBsonSerializer BuildMemberInit(MemberInitExpression node);
    private IBsonSerializer BuildNew(NewExpression node);
    private IBsonSerializer BuildProjectedSerializer(ProjectionMapping mapping);
    private BsonClassMap BuildClassMap(Type type, ProjectionMapping mapping);
    private static Type GetMemberType(MemberInfo memberInfo);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformer : ExpressionVisitor {
    private static ExpressionTransformerRegistry __registry;
    private static Transformer();
    public static Expression Transform(Expression node);
    public virtual Expression Visit(Expression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.CollectionConstructorTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(NewExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.ConstantOnRightTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(BinaryExpression node);
    private Expression RemoveUnnecessaries(Expression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.EqualsAnyBooleanTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(BinaryExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.ExpressionTransformerRegistry : object {
    private Dictionary`2<ExpressionType, List`1<Func`2<Expression, Expression>>> _transformations;
    public IEnumerable`1<Func`2<Expression, Expression>> GetTransformers(ExpressionType nodeType);
    public void Register(IExpressionTransformer`1<TExpression> transformer);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.FirstLastNormalizingTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(MemberExpression node);
    private bool IsAggregateMethod(string methodName);
}
internal interface MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.IExpressionTransformer`1 {
    public ExpressionType[] SupportedNodeTypes { get; }
    public abstract virtual ExpressionType[] get_SupportedNodeTypes();
    public abstract virtual Expression Transform(TExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.NullableTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(MemberExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.SelectSelectCombiningTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(MethodCallExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.VBCoalesceTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(BinaryExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.VBCompareStringTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(BinaryExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.VBInformationIsNothingTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(MethodCallExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.VBNothingConversionRemovalTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(BinaryExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Processors.Transformers.VBStringIndexComparisonTransformer : object {
    private ExpressionType[] _supportedNodeTypes;
    public ExpressionType[] SupportedNodeTypes { get; }
    public sealed virtual ExpressionType[] get_SupportedNodeTypes();
    public sealed virtual Expression Transform(BinaryExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.QueryableTranslation : object {
    private QueryableExecutionModel _model;
    private IResultTransformer _resultTransformer;
    public QueryableExecutionModel Model { get; }
    public IResultTransformer ResultTransformer { get; }
    public QueryableTranslation(QueryableExecutionModel model, IResultTransformer resultTransformer);
    public QueryableExecutionModel get_Model();
    public IResultTransformer get_ResultTransformer();
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.SerializerHelper : object {
    public static IBsonSerializer CreateArraySerializer(IBsonSerializer serializer);
    public static IBsonSerializer CreateEnumerableSerializer(IBsonSerializer itemSerializer);
    public static IBsonSerializer CreateHashSetSerializer(IBsonSerializer itemSerializer);
    public static IBsonSerializer CreateListSerializer(IBsonSerializer itemSerializer);
    public static IBsonSerializer RecursiveConfigureChildSerializer(IChildSerializerConfigurable configurable, IBsonSerializer childSerializer);
    public static IBsonSerializer GetDeepestChildSerializer(IChildSerializerConfigurable childConfigurableSerializer);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.Translators.AggregateExpressionTranslator : object {
    public static BsonValue Translate(Expression`1<Func`2<TSource, TResult>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    private static Expression BindResult(PipelineBindingContext bindingContext, Expression`1<Func`2<TSource, TResult>> expression, IBsonSerializer`1<TSource> sourceSerializer);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.Translators.AggregateGroupTranslator : object {
    public static RenderedProjectionDefinition`1<TResult> Translate(Expression`1<Func`2<TDocument, TKey>> idProjector, Expression`1<Func`2<IGrouping`2<TKey, TDocument>, TResult>> groupProjector, IBsonSerializer`1<TDocument> parameterSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    private static Expression BindKeySelector(PipelineBindingContext bindingContext, Expression`1<Func`2<TDocument, TKey>> keySelector, IBsonSerializer`1<TDocument> parameterSerializer);
    private static Expression BindGroup(PipelineBindingContext bindingContext, Expression`1<Func`2<IGrouping`2<TKey, TDocument>, TResult>> groupProjector, IBsonSerializer`1<TDocument> parameterSerializer, Expression keySelector);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.AggregateLanguageTranslator : object {
    private AggregateStringTranslationMode _stringTranslationMode;
    private AggregateLanguageTranslator(ExpressionTranslationOptions translationOptions);
    public static BsonValue Translate(Expression node, ExpressionTranslationOptions translationOptions);
    private BsonValue TranslateValue(Expression node);
    private BsonValue TranslateAdd(BinaryExpression node);
    private BsonValue TranslateAccumulator(AccumulatorExpression node);
    private BsonValue TranslateAggregateExpression(AggregateExpressionExpression node);
    private BsonValue TranslateArrayIndex(ArrayIndexExpression node);
    private BsonValue TranslateArrayLength(Expression node);
    private BsonValue TranslateConcat(ConcatExpression node);
    private BsonValue TranslateConditional(ConditionalExpression node);
    private static BsonValue TranslateConstant(Expression node);
    private BsonValue TranslateDocumentWrappedField(FieldAsDocumentExpression expression);
    private BsonValue TranslateExcept(ExceptExpression node);
    private BsonValue TranslateField(FieldExpression expression);
    private BsonValue TranslateGroupingKey(GroupingKeyExpression node);
    private BsonValue TranslateIntersect(IntersectExpression node);
    private BsonValue TranslateMemberAccess(MemberExpression node);
    private BsonValue TranslateMethodCall(MethodCallExpression node);
    private BsonValue TranslateMemberInit(MemberInitExpression node);
    private BsonValue TranslateNew(NewExpression node);
    private BsonValue TranslateNewArrayInit(NewArrayExpression node);
    private BsonValue TranslateNewDateTime(NewExpression node);
    private BsonValue TranslateMapping(ProjectionMapping mapping);
    private BsonValue TranslateNot(UnaryExpression node);
    private BsonValue TranslateOperation(BinaryExpression node, string op, bool canBeFlattened);
    private BsonValue TranslatePipeline(PipelineExpression node);
    private BsonValue TranslateReverse(ReverseExpression node);
    private BsonValue TranslateSelect(SelectExpression node);
    private BsonValue TranslateSerializedConstant(SerializedConstantExpression node);
    private BsonValue TranslateSkip(SkipExpression node);
    private BsonValue TranslateTake(TakeExpression node);
    private BsonValue TranslateUnion(UnionExpression node);
    private BsonValue TranslateWhere(WhereExpression node);
    private BsonValue TranslateZip(ZipExpression node);
    private bool TryTranslateAggregateResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateAllResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateAnyResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateAvgResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateContainsResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateCountResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateDateTimeCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateDateTimeMemberAccess(MemberExpression node, BsonValue& result);
    private bool TryTranslateStringMemberAccess(MemberExpression node, BsonValue& result);
    private bool TryTranslateFirstResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateHashSetMethodCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateLastResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateMaxResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateMinResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateObjectIdCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateSimpleTypeCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateStaticDateTimeMethodCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateStaticEnumerableMethodCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateStaticMathMethodCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateStaticStringMethodCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateStringMethodCall(MethodCallExpression node, BsonValue& result);
    private bool TryTranslateStdDevResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateSumResultOperator(PipelineExpression node, BsonValue& result);
    private bool TryTranslateViaToString(MethodCallExpression node, BsonValue field, BsonValue& result);
}
internal static class MongoDB.Driver.Linq.Linq2Implementation.Translators.AggregateProjectTranslator : object {
    public static RenderedProjectionDefinition`1<TResult> Translate(Expression`1<Func`2<TDocument, TResult>> projector, IBsonSerializer`1<TDocument> parameterSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    public static BsonDocument TranslateProject(Expression expression, ExpressionTranslationOptions translationOptions);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.FieldNamePrefixer : ExtensionExpressionVisitor {
    private string _prefix;
    private FieldNamePrefixer(string prefix);
    public static Expression Prefix(Expression node, string prefix);
    protected internal virtual Expression VisitDocument(DocumentExpression node);
    protected internal virtual Expression VisitField(FieldExpression node);
    protected internal virtual Expression VisitPipeline(PipelineExpression node);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.FindProjectionTranslator : ExtensionExpressionVisitor {
    private IReadOnlyList`1<IFieldExpression> _fields;
    private bool _fullDocument;
    private DocumentExpression _documentExpression;
    private ParameterExpression _parameterExpression;
    private FindProjectionTranslator(DocumentExpression documentExpression, ParameterExpression parameterExpression, IReadOnlyList`1<IFieldExpression> fields);
    public static RenderedProjectionDefinition`1<TProjection> Translate(Expression`1<Func`2<TDocument, TProjection>> projector, IBsonSerializer`1<TDocument> parameterSerializer, IBsonSerializerRegistry serializerRegistry);
    protected internal virtual Expression VisitField(FieldExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected internal virtual Expression VisitDocument(DocumentExpression node);
    private FieldExpression GetDottedFieldExpression(FieldExpression node);
    private static BsonDocument GetProjectionDocument(IEnumerable`1<BsonSerializationInfo> used);
    private static IReadOnlyList`1<IFieldExpression> GetUniqueFieldsByHierarchy(IEnumerable`1<IFieldExpression> usedFields);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.PredicateTranslator : object {
    private static FilterDefinitionBuilder`1<BsonDocument> __builder;
    private IBsonSerializerRegistry _serializerRegistry;
    private PredicateTranslator(IBsonSerializerRegistry serializerRegistry);
    private static PredicateTranslator();
    public static BsonDocument Translate(Expression`1<Func`2<TDocument, bool>> predicate, IBsonSerializer`1<TDocument> parameterSerializer, IBsonSerializerRegistry serializerRegistry);
    public static BsonDocument Translate(Expression node, IBsonSerializerRegistry serializerRegistry);
    private FilterDefinition`1<BsonDocument> Translate(Expression node);
    private FilterDefinition`1<BsonDocument> TranslateAndAlso(BinaryExpression node);
    private FilterDefinition`1<BsonDocument> TranslateAnd(BinaryExpression node);
    private bool CanAnyBeRenderedWithoutElemMatch(Expression node);
    private FilterDefinition`1<BsonDocument> ConvertElemMatchFilterToScalarElementMatchIfNeeded(FilterDefinition`1<BsonDocument> filter, IFieldExpression fieldExpression, Expression wherePredicate);
    private bool DoesExpressionUseDocumentItself(Expression node);
    private string PrepareFieldName(IFieldExpression fieldExpression);
    private FilterDefinition`1<BsonDocument> TranslateArrayLength(Expression variableNode, ExpressionType operatorType, ConstantExpression constantNode);
    private FilterDefinition`1<BsonDocument> TranslateBitwiseComparison(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateBoolean(bool value);
    private FilterDefinition`1<BsonDocument> TranslateBoolean(Expression expression);
    private FilterDefinition`1<BsonDocument> TranslateComparison(BinaryExpression binaryExpression);
    private FilterDefinition`1<BsonDocument> TranslateCompareTo(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateComparison(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateConstant(ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateContainsKey(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateContains(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateEquals(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateHasFlag(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateIn(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateInjectedFilter(InjectedFilterExpression node);
    private FilterDefinition`1<BsonDocument> TranslateIsMatch(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateIsNullOrEmpty(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateMethodCall(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateMod(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateNot(UnaryExpression unaryExpression);
    private FilterDefinition`1<BsonDocument> TranslateOrElse(BinaryExpression binaryExpression);
    private FilterDefinition`1<BsonDocument> TranslateOr(BinaryExpression binaryExpression);
    private FilterDefinition`1<BsonDocument> TranslatePipeline(PipelineExpression node);
    private FilterDefinition`1<BsonDocument> TranslatePipelineAll(PipelineExpression node);
    private FilterDefinition`1<BsonDocument> TranslatePipelineAny(PipelineExpression node);
    private FilterDefinition`1<BsonDocument> TranslatePipelineAnyScalar(PipelineExpression node);
    private FilterDefinition`1<BsonDocument> TranslatePipelineContains(PipelineExpression node);
    private FilterDefinition`1<BsonDocument> TranslateStringIndexOfQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateStringIndexQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateStringLengthQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateStringCaseInsensitiveComparisonQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateStringQuery(MethodCallExpression methodCallExpression);
    private FilterDefinition`1<BsonDocument> TranslateTypeComparisonQuery(Expression variableExpression, ExpressionType operatorType, ConstantExpression constantExpression);
    private FilterDefinition`1<BsonDocument> TranslateTypeIsQuery(TypeBinaryExpression typeBinaryExpression);
    private string GetTrimCharsPattern(Expression trimCharsExpression);
    private int ToInt32(Expression expression);
    private long ToInt64(Expression expression);
    private bool TryGetFieldExpression(Expression expression, IFieldExpression& fieldExpression);
    private IFieldExpression GetFieldExpression(Expression expression);
    private void ValidatePipelineExpressionThrowIfNotValid(WhereExpression whereExpression);
    [CompilerGeneratedAttribute]
internal static bool <TranslatePipelineContains>g__TryGetFieldNameAndSerializationExpression|37_0(Expression containsResultOperatorValue, String& fieldName, ISerializationExpression& serializationExpression);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.ProjectedObject : object {
    private Dictionary`2<string, object> _values;
    public void Add(string name, object value);
    public T GetValue(string name, object valueIfNotPresent);
    private Tuple`2<object, string> GetValueAndRemainingKey(string firstKey, string secondKey, object valueIfNotPresent);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.ProjectedObjectDeserializer : SerializerBase`1<ProjectedObject> {
    private Dictionary`2<string, BsonSerializationInfo> _deserializationMap;
    public ProjectedObjectDeserializer(IEnumerable`1<BsonSerializationInfo> deserializationInfo);
    public virtual ProjectedObject Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    private string BuildElementName(string prefix, string name);
    private List`1<object> ReadArray(BsonDeserializationContext context, string currentKey);
    private ProjectedObject ReadDocument(BsonDeserializationContext context, string currentKey, string scopeKey, ProjectedObject currentObject);
}
internal class MongoDB.Driver.Linq.Linq2Implementation.Translators.QueryableTranslator : object {
    private IBsonSerializer _outputSerializer;
    private IBsonSerializerRegistry _serializerRegistry;
    private List`1<BsonDocument> _stages;
    private IResultTransformer _resultTransformer;
    private ExpressionTranslationOptions _translationOptions;
    public QueryableTranslator(IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    public static QueryableTranslation Translate(Expression node, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    private void Translate(Expression node);
    private void TranslateGroupBy(GroupByExpression node);
    private void TranslateGroupByWithResultSelector(GroupByWithResultSelectorExpression node);
    private void TranslateGroupJoin(GroupJoinExpression node);
    private void TranslateJoin(JoinExpression node);
    private void TranslateOrderBy(OrderByExpression node);
    private void TranslatePipeline(PipelineExpression node);
    private void TranslateSample(SampleExpression node);
    private void TranslateSelect(SelectExpression node);
    private void TranslateSelectMany(SelectManyExpression node);
    private void TranslateSkip(SkipExpression node);
    private void TranslateTake(TakeExpression node);
    private void TranslateWhere(WhereExpression node);
    private BsonDocument TranslateProjectValue(Expression selector);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstAccumulatorField : AstNode {
    private string _path;
    private AstAccumulatorExpression _value;
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public AstAccumulatorExpression Value { get; }
    public AstAccumulatorField(string path, AstAccumulatorExpression value);
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public AstAccumulatorExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public BsonElement RenderAsElement();
    public virtual string ToString();
    public AstAccumulatorField Update(AstAccumulatorExpression value);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstAscendingSortOrder : AstSortOrder {
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstComputedField : AstNode {
    private string _path;
    private AstExpression _value;
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public AstExpression Value { get; }
    public AstComputedField(string path, AstExpression value);
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public AstExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public BsonElement RenderAsElement();
    public virtual string ToString();
    public AstComputedField Update(AstExpression value);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstDescendingSortOrder : AstSortOrder {
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstMetaTextScoreSortOrder : AstSortOrder {
    public virtual BsonValue Render();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstNode : object {
    public AstNodeType NodeType { get; }
    public abstract virtual AstNodeType get_NodeType();
    public abstract virtual AstNode Accept(AstNodeVisitor visitor);
    public abstract virtual BsonValue Render();
    public virtual string ToString();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.AstNodeType : Enum {
    public int value__;
    public static AstNodeType AccumulatorField;
    public static AstNodeType AddFieldsStage;
    public static AstNodeType AllFilterOperation;
    public static AstNodeType AndFilter;
    public static AstNodeType BinaryExpression;
    public static AstNodeType BinaryWindowExpression;
    public static AstNodeType BitsAllClearFilterOperation;
    public static AstNodeType BitsAllSetFilterOperation;
    public static AstNodeType BitsAnyClearFilterOperation;
    public static AstNodeType BitsAnySetFilterOperation;
    public static AstNodeType BucketAutoStage;
    public static AstNodeType BucketStage;
    public static AstNodeType CollStatsStage;
    public static AstNodeType ComparisonFilterOperation;
    public static AstNodeType ComputedArrayExpression;
    public static AstNodeType ComputedDocumentExpression;
    public static AstNodeType ComputedField;
    public static AstNodeType CondExpression;
    public static AstNodeType ConstantExpression;
    public static AstNodeType ConvertExpression;
    public static AstNodeType CountStage;
    public static AstNodeType CurrentOpStage;
    public static AstNodeType CustomAccumulatorExpression;
    public static AstNodeType DateAddExpression;
    public static AstNodeType DateDiffExpression;
    public static AstNodeType DateFromIsoWeekPartsExpression;
    public static AstNodeType DateFromPartsExpression;
    public static AstNodeType DateFromStringExpression;
    public static AstNodeType DatePartExpression;
    public static AstNodeType DateSubtractExpression;
    public static AstNodeType DateToPartsExpression;
    public static AstNodeType DateToStringExpression;
    public static AstNodeType DateTruncExpression;
    public static AstNodeType DensifyStage;
    public static AstNodeType DerivativeOrIntegralWindowExpression;
    public static AstNodeType DocumentsStage;
    public static AstNodeType ElemMatchFilterOperation;
    public static AstNodeType ExistsFilterOperation;
    public static AstNodeType ExponentialMovingAverageWindowExpression;
    public static AstNodeType ExprFilter;
    public static AstNodeType FacetStage;
    public static AstNodeType FacetStageFacet;
    public static AstNodeType FieldOperationFilter;
    public static AstNodeType FieldPathExpression;
    public static AstNodeType FilterExpression;
    public static AstNodeType FilterField;
    public static AstNodeType FindProjection;
    public static AstNodeType FunctionExpression;
    public static AstNodeType GeoIntersectsFilterOperation;
    public static AstNodeType GeoNearStage;
    public static AstNodeType GeoWithinBoxFilterOperation;
    public static AstNodeType GeoWithinCenterFilterOperation;
    public static AstNodeType GeoWithinCenterSphereFilterOperation;
    public static AstNodeType GeoWithinFilterOperation;
    public static AstNodeType GetFieldExpression;
    public static AstNodeType GraphLookupStage;
    public static AstNodeType GroupStage;
    public static AstNodeType ImpliedOperationFilterOperation;
    public static AstNodeType IndexOfArrayExpression;
    public static AstNodeType IndexOfBytesExpression;
    public static AstNodeType IndexOfCPExpression;
    public static AstNodeType IndexStatsStage;
    public static AstNodeType InFilterOperation;
    public static AstNodeType JsonSchemaFilter;
    public static AstNodeType LetExpression;
    public static AstNodeType LimitStage;
    public static AstNodeType ListLocalSessionsStage;
    public static AstNodeType ListSessionsStage;
    public static AstNodeType LookupStage;
    public static AstNodeType LookupStageEqualityMatch;
    public static AstNodeType LookupStageUncorrelatedMatch;
    public static AstNodeType LTrimExpression;
    public static AstNodeType MapExpression;
    public static AstNodeType MatchesEverythingFilter;
    public static AstNodeType MatchesNothingFilter;
    public static AstNodeType MatchStage;
    public static AstNodeType MergeStage;
    public static AstNodeType ModFilterOperation;
    public static AstNodeType NaryExpression;
    public static AstNodeType NearFilterOperation;
    public static AstNodeType NearSphereFilterOperation;
    public static AstNodeType NinFilterOperation;
    public static AstNodeType NorFilter;
    public static AstNodeType NotFilterOperation;
    public static AstNodeType NullaryWindowExpression;
    public static AstNodeType OrFilter;
    public static AstNodeType OutStage;
    public static AstNodeType PickAccumulatorExpression;
    public static AstNodeType PickExpression;
    public static AstNodeType Pipeline;
    public static AstNodeType PlanCacheStatsStage;
    public static AstNodeType ProjectStage;
    public static AstNodeType ProjectStageExcludeFieldSpecification;
    public static AstNodeType ProjectStageIncludeFieldSpecification;
    public static AstNodeType ProjectStageSetFieldSpecification;
    public static AstNodeType RangeExpression;
    public static AstNodeType RawFilter;
    public static AstNodeType RedactStage;
    public static AstNodeType ReduceExpression;
    public static AstNodeType RegexFilterOperation;
    public static AstNodeType RegexExpression;
    public static AstNodeType ReplaceAllExpression;
    public static AstNodeType ReplaceOneExpression;
    public static AstNodeType ReplaceRootStage;
    public static AstNodeType ReplaceWithStage;
    public static AstNodeType RTrimExpression;
    public static AstNodeType SampleStage;
    public static AstNodeType SetStage;
    public static AstNodeType SetWindowFieldsStage;
    public static AstNodeType ShiftWindowExpression;
    public static AstNodeType SizeFilterOperation;
    public static AstNodeType SkipStage;
    public static AstNodeType SliceExpression;
    public static AstNodeType SortArrayExpression;
    public static AstNodeType SortStage;
    public static AstNodeType SortByCountStage;
    public static AstNodeType SwitchExpression;
    public static AstNodeType SwitchExpressionBranch;
    public static AstNodeType TernaryExpression;
    public static AstNodeType TextFilter;
    public static AstNodeType TrimExpression;
    public static AstNodeType TypeFilterOperation;
    public static AstNodeType UnaryAccumulatorExpression;
    public static AstNodeType UnaryExpression;
    public static AstNodeType UnaryWindowExpression;
    public static AstNodeType UnionWithStage;
    public static AstNodeType UniversalStage;
    public static AstNodeType UnsetStage;
    public static AstNodeType UnwindStage;
    public static AstNodeType VarBinding;
    public static AstNodeType VarExpression;
    public static AstNodeType WhereFilter;
    public static AstNodeType WindowField;
    public static AstNodeType ZipExpression;
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstPipeline : AstNode {
    private IBsonSerializer _outputSerializer;
    private IReadOnlyList`1<AstStage> _stages;
    public AstNodeType NodeType { get; }
    public IBsonSerializer OutputSerializer { get; }
    public IReadOnlyList`1<AstStage> Stages { get; }
    public AstPipeline(IEnumerable`1<AstStage> stages, IBsonSerializer outputSerializer);
    public static AstPipeline Empty(IBsonSerializer outputSerializer);
    public virtual AstNodeType get_NodeType();
    public IBsonSerializer get_OutputSerializer();
    public IReadOnlyList`1<AstStage> get_Stages();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public AstPipeline AddStages(IBsonSerializer newOutputSerializer, AstStage[] newStages);
    public virtual BsonValue Render();
    public AstPipeline ReplaceLastStage(IBsonSerializer newOutputSerializer, AstStage newLastStage);
    public AstPipeline ReplaceStagesAtEnd(IBsonSerializer newOutputSerializer, int numberOfStagesToReplace, AstStage[] newStages);
    public AstPipeline Update(IEnumerable`1<AstStage> stages);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstSort : object {
    public static AstSortField Field(string path, AstSortOrder order);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstSortField : object {
    private string _path;
    private AstSortOrder _order;
    public AstSortOrder Order { get; }
    public string Path { get; }
    public AstSortField(string path, AstSortOrder order);
    public AstSortOrder get_Order();
    public string get_Path();
    public BsonElement RenderAsElement();
    public virtual string ToString();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstSortFields : object {
    private IReadOnlyList`1<AstSortField> _fields;
    public IReadOnlyList`1<AstSortField> Fields { get; }
    public AstSortFields(IEnumerable`1<AstSortField> fields);
    public IReadOnlyList`1<AstSortField> get_Fields();
    public sealed virtual IEnumerator`1<AstSortField> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public AstSortFields AddSortField(AstSortField field);
    public BsonDocument Render();
    public virtual string ToString();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstSortOrder : object {
    private static AstSortOrder __ascending;
    private static AstSortOrder __descending;
    private static AstSortOrder __metaTextScore;
    public static AstSortOrder Ascending { get; }
    public static AstSortOrder Descending { get; }
    public static AstSortOrder MetaTextScore { get; }
    private static AstSortOrder();
    public static AstSortOrder get_Ascending();
    public static AstSortOrder get_Descending();
    public static AstSortOrder get_MetaTextScore();
    public abstract virtual BsonValue Render();
    public virtual string ToString();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstVarBinding : AstNode {
    private AstExpression _value;
    private AstVarExpression _var;
    public AstNodeType NodeType { get; }
    public AstExpression Value { get; }
    public AstVarExpression Var { get; }
    public AstVarBinding(AstVarExpression var, AstExpression value);
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Value();
    public AstVarExpression get_Var();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public BsonElement RenderAsElement();
    public virtual string ToString();
    public AstVarBinding Update(AstVarExpression var, AstExpression value);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.AstWindowField : AstNode {
    private string _path;
    private AstWindowExpression _value;
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public AstWindowExpression Value { get; }
    public AstWindowField(string path, AstWindowExpression value);
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public AstWindowExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public BsonElement RenderAsElement();
    public virtual string ToString();
    public AstWindowField Update(string path, AstWindowExpression value);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstAccumulatorExpression : AstExpression {
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstBinaryExpression : AstExpression {
    private AstExpression _arg1;
    private AstExpression _arg2;
    private AstBinaryOperator _operator;
    public AstExpression Arg1 { get; }
    public AstExpression Arg2 { get; }
    public AstNodeType NodeType { get; }
    public AstBinaryOperator Operator { get; }
    public AstBinaryExpression(AstBinaryOperator operator, AstExpression arg1, AstExpression arg2);
    public AstExpression get_Arg1();
    public AstExpression get_Arg2();
    public virtual AstNodeType get_NodeType();
    public AstBinaryOperator get_Operator();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstBinaryExpression Update(AstExpression arg1, AstExpression arg2);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstBinaryOperator : Enum {
    public int value__;
    public static AstBinaryOperator ArrayElemAt;
    public static AstBinaryOperator Atan2;
    public static AstBinaryOperator Cmp;
    public static AstBinaryOperator Divide;
    public static AstBinaryOperator Eq;
    public static AstBinaryOperator Gt;
    public static AstBinaryOperator Gte;
    public static AstBinaryOperator IfNull;
    public static AstBinaryOperator In;
    public static AstBinaryOperator Log;
    public static AstBinaryOperator Lt;
    public static AstBinaryOperator Lte;
    public static AstBinaryOperator Mod;
    public static AstBinaryOperator Ne;
    public static AstBinaryOperator Pow;
    public static AstBinaryOperator Round;
    public static AstBinaryOperator SetDifference;
    public static AstBinaryOperator SetIsSubset;
    public static AstBinaryOperator Split;
    public static AstBinaryOperator StrCaseCmp;
    public static AstBinaryOperator Subtract;
    public static AstBinaryOperator Trunc;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstBinaryOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstBinaryOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstBinaryWindowExpression : AstWindowExpression {
    private AstExpression _arg1;
    private AstExpression _arg2;
    private AstBinaryWindowOperator _operator;
    private AstWindow _window;
    public AstExpression Arg1 { get; }
    public AstExpression Arg2 { get; }
    public AstNodeType NodeType { get; }
    public AstBinaryWindowOperator Operator { get; }
    public AstWindow Window { get; }
    public AstBinaryWindowExpression(AstBinaryWindowOperator operator, AstExpression arg1, AstExpression arg2, AstWindow window);
    public AstExpression get_Arg1();
    public AstExpression get_Arg2();
    public virtual AstNodeType get_NodeType();
    public AstBinaryWindowOperator get_Operator();
    public AstWindow get_Window();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstBinaryWindowExpression Update(AstBinaryWindowOperator operator, AstExpression arg1, AstExpression arg2, AstWindow window);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstBinaryWindowOperator : Enum {
    public int value__;
    public static AstBinaryWindowOperator CovariancePopulation;
    public static AstBinaryWindowOperator CovarianceSample;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstBinaryWindowOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstBinaryWindowOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstComputedArrayExpression : AstExpression {
    private IReadOnlyList`1<AstExpression> _items;
    public IReadOnlyList`1<AstExpression> Items { get; }
    public AstNodeType NodeType { get; }
    public AstComputedArrayExpression(IEnumerable`1<AstExpression> items);
    public IReadOnlyList`1<AstExpression> get_Items();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstComputedArrayExpression Update(IEnumerable`1<AstExpression> items);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstComputedDocumentExpression : AstExpression {
    private IReadOnlyList`1<AstComputedField> _fields;
    public IReadOnlyList`1<AstComputedField> Fields { get; }
    public AstNodeType NodeType { get; }
    public AstComputedDocumentExpression(IEnumerable`1<AstComputedField> fields);
    public IReadOnlyList`1<AstComputedField> get_Fields();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstComputedDocumentExpression Update(IEnumerable`1<AstComputedField> fields);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstCondExpression : AstExpression {
    private AstExpression _else;
    private AstExpression _if;
    private AstExpression _then;
    public AstExpression Else { get; }
    public AstExpression If { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Then { get; }
    public AstCondExpression(AstExpression if, AstExpression then, AstExpression else);
    public AstExpression get_Else();
    public AstExpression get_If();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Then();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstCondExpression Update(AstExpression if, AstExpression then, AstExpression else);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstConstantExpression : AstExpression {
    private BsonValue _value;
    public AstNodeType NodeType { get; }
    public BsonValue Value { get; }
    public AstConstantExpression(BsonValue value);
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstConvertExpression : AstExpression {
    private AstExpression _input;
    private AstExpression _onError;
    private AstExpression _onNull;
    private AstExpression _to;
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstExpression OnError { get; }
    public AstExpression OnNull { get; }
    public AstExpression To { get; }
    public AstConvertExpression(AstExpression input, AstExpression to, AstExpression onError, AstExpression onNull);
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_OnError();
    public AstExpression get_OnNull();
    public AstExpression get_To();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstConvertExpression Update(AstExpression input, AstExpression to, AstExpression onError, AstExpression onNull);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_1();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstCustomAccumulatorExpression : AstExpression {
    private string _accumulate;
    private IReadOnlyList`1<AstExpression> _accumulateArgs;
    private string _finalize;
    private string _init;
    private IReadOnlyList`1<AstExpression> _initArgs;
    private string _lang;
    private string _merge;
    public string Accumulate { get; }
    public IReadOnlyList`1<AstExpression> AccumulateArgs { get; }
    public string Finalize { get; }
    public string Init { get; }
    public IReadOnlyList`1<AstExpression> InitArgs { get; }
    public string Lang { get; }
    public string Merge { get; }
    public AstNodeType NodeType { get; }
    public AstCustomAccumulatorExpression(string lang, string init, IEnumerable`1<AstExpression> initArgs, string accumulate, IEnumerable`1<AstExpression> accumulateArgs, string merge, string finalize);
    public string get_Accumulate();
    public IReadOnlyList`1<AstExpression> get_AccumulateArgs();
    public string get_Finalize();
    public string get_Init();
    public IReadOnlyList`1<AstExpression> get_InitArgs();
    public string get_Lang();
    public string get_Merge();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstCustomAccumulatorExpression Update(IEnumerable`1<AstExpression> initArgs, IEnumerable`1<AstExpression> accumulateArgs);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__25_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateAddExpression : AstExpression {
    private AstExpression _amount;
    private AstExpression _startDate;
    private AstExpression _timezone;
    private AstExpression _unit;
    public AstExpression Amount { get; }
    public AstNodeType NodeType { get; }
    public AstExpression StartDate { get; }
    public AstExpression Timezone { get; }
    public AstExpression Unit { get; }
    public AstDateAddExpression(AstExpression startDate, AstExpression unit, AstExpression amount, AstExpression timezone);
    public AstExpression get_Amount();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_StartDate();
    public AstExpression get_Timezone();
    public AstExpression get_Unit();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateAddExpression Update(AstExpression startDate, AstExpression unit, AstExpression amount, AstExpression timezone);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateDiffExpression : AstExpression {
    private AstExpression _endDate;
    private AstExpression _startDate;
    private AstExpression _startOfWeek;
    private AstExpression _timezone;
    private AstExpression _unit;
    public AstExpression EndDate { get; }
    public AstNodeType NodeType { get; }
    public AstExpression StartDate { get; }
    public AstExpression StartOfWeek { get; }
    public AstExpression Timezone { get; }
    public AstExpression Unit { get; }
    public AstDateDiffExpression(AstExpression startDate, AstExpression endDate, AstExpression unit, AstExpression timezone, AstExpression startOfWeek);
    public AstExpression get_EndDate();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_StartDate();
    public AstExpression get_StartOfWeek();
    public AstExpression get_Timezone();
    public AstExpression get_Unit();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateDiffExpression Update(AstExpression startDate, AstExpression endDate, AstExpression unit, AstExpression timezone, AstExpression startOfWeek);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_1();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateFromIsoWeekPartsExpression : AstExpression {
    private AstExpression _hour;
    private AstExpression _isoDayOfWeek;
    private AstExpression _isoWeek;
    private AstExpression _isoWeekYear;
    private AstExpression _millisecond;
    private AstExpression _minute;
    private AstExpression _second;
    private AstExpression _timezone;
    public AstExpression Hour { get; }
    public AstExpression IsoDayOfWeek { get; }
    public AstExpression IsoWeek { get; }
    public AstExpression IsoWeekYear { get; }
    public AstExpression Millisecond { get; }
    public AstExpression Minute { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Second { get; }
    public AstExpression Timezone { get; }
    public AstDateFromIsoWeekPartsExpression(AstExpression isoWeekYear, AstExpression isoWeek, AstExpression isoDayOfWeek, AstExpression hour, AstExpression minute, AstExpression second, AstExpression millisecond, AstExpression timezone);
    public AstExpression get_Hour();
    public AstExpression get_IsoDayOfWeek();
    public AstExpression get_IsoWeek();
    public AstExpression get_IsoWeekYear();
    public AstExpression get_Millisecond();
    public AstExpression get_Minute();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Second();
    public AstExpression get_Timezone();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateFromIsoWeekPartsExpression Update(AstExpression isoWeekYear, AstExpression isoWeek, AstExpression isoDayOfWeek, AstExpression hour, AstExpression minute, AstExpression second, AstExpression millisecond, AstExpression timezone);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_3();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_4();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_5();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_6();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateFromPartsExpression : AstExpression {
    private AstExpression _day;
    private AstExpression _hour;
    private AstExpression _millisecond;
    private AstExpression _minute;
    private AstExpression _month;
    private AstExpression _second;
    private AstExpression _timezone;
    private AstExpression _year;
    public AstExpression Day { get; }
    public AstExpression Hour { get; }
    public AstExpression Millisecond { get; }
    public AstExpression Minute { get; }
    public AstExpression Month { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Second { get; }
    public AstExpression Year { get; }
    public AstExpression Timezone { get; }
    public AstDateFromPartsExpression(AstExpression year, AstExpression month, AstExpression day, AstExpression hour, AstExpression minute, AstExpression second, AstExpression millisecond, AstExpression timezone);
    public AstExpression get_Day();
    public AstExpression get_Hour();
    public AstExpression get_Millisecond();
    public AstExpression get_Minute();
    public AstExpression get_Month();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Second();
    public AstExpression get_Year();
    public AstExpression get_Timezone();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateFromPartsExpression Update(AstExpression year, AstExpression month, AstExpression day, AstExpression hour, AstExpression minute, AstExpression second, AstExpression millisecond, AstExpression timezone);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_3();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_4();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_5();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_6();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateFromStringExpression : AstExpression {
    private AstExpression _dateString;
    private AstExpression _format;
    private AstExpression _onError;
    private AstExpression _onNull;
    private AstExpression _timezone;
    public AstExpression DateString { get; }
    public AstExpression Format { get; }
    public AstNodeType NodeType { get; }
    public AstExpression OnError { get; }
    public AstExpression OnNull { get; }
    public AstExpression Timezone { get; }
    public AstDateFromStringExpression(AstExpression dateString, AstExpression format, AstExpression timezone, AstExpression onError, AstExpression onNull);
    public AstExpression get_DateString();
    public AstExpression get_Format();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_OnError();
    public AstExpression get_OnNull();
    public AstExpression get_Timezone();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateFromStringExpression Update(AstExpression dateString, AstExpression format, AstExpression timezone, AstExpression onError, AstExpression onNull);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_3();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDatePart : Enum {
    public int value__;
    public static AstDatePart DayOfMonth;
    public static AstDatePart DayOfWeek;
    public static AstDatePart DayOfYear;
    public static AstDatePart Hour;
    public static AstDatePart IsoDayOfWeek;
    public static AstDatePart IsoWeek;
    public static AstDatePart IsoWeekYear;
    public static AstDatePart Millisecond;
    public static AstDatePart Minute;
    public static AstDatePart Month;
    public static AstDatePart Second;
    public static AstDatePart Week;
    public static AstDatePart Year;
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDatePartExpression : AstExpression {
    private AstExpression _date;
    private AstDatePart _part;
    private AstExpression _timezone;
    public AstExpression Date { get; }
    public AstNodeType NodeType { get; }
    public AstDatePart Part { get; }
    public AstExpression Timezone { get; }
    public AstDatePartExpression(AstDatePart part, AstExpression date, AstExpression timezone);
    public AstExpression get_Date();
    public virtual AstNodeType get_NodeType();
    public AstDatePart get_Part();
    public AstExpression get_Timezone();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDatePartExpression Update(AstExpression date, AstExpression timezone);
    private BsonValue RenderArgs();
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDatePartExtensions : object {
    [ExtensionAttribute]
public static string Render(AstDatePart part);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateSubtractExpression : AstExpression {
    private AstExpression _amount;
    private AstExpression _startDate;
    private AstExpression _timezone;
    private AstExpression _unit;
    public AstExpression Amount { get; }
    public AstNodeType NodeType { get; }
    public AstExpression StartDate { get; }
    public AstExpression Timezone { get; }
    public AstExpression Unit { get; }
    public AstDateSubtractExpression(AstExpression startDate, AstExpression unit, AstExpression amount, AstExpression timezone);
    public AstExpression get_Amount();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_StartDate();
    public AstExpression get_Timezone();
    public AstExpression get_Unit();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateSubtractExpression Update(AstExpression startDate, AstExpression unit, AstExpression amount, AstExpression timezone);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateToPartsExpression : AstExpression {
    private AstExpression _expression;
    private AstExpression _iso8601;
    private AstExpression _timezone;
    public AstExpression Expression { get; }
    public AstExpression Iso8601 { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Timezone { get; }
    public AstDateToPartsExpression(AstExpression expression, AstExpression timezone, AstExpression iso8601);
    public AstExpression get_Expression();
    public AstExpression get_Iso8601();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Timezone();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateToPartsExpression Update(AstExpression expression, AstExpression timezone, AstExpression iso8601);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_1();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateToStringExpression : AstExpression {
    private AstExpression _date;
    private AstExpression _format;
    private AstExpression _timezone;
    private AstExpression _onNull;
    public AstExpression Date { get; }
    public AstExpression Format { get; }
    public AstExpression Timezone { get; }
    public AstNodeType NodeType { get; }
    public AstExpression OnNull { get; }
    public AstDateToStringExpression(AstExpression date, AstExpression format, AstExpression timezone, AstExpression onNull);
    public AstExpression get_Date();
    public AstExpression get_Format();
    public AstExpression get_Timezone();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_OnNull();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateToStringExpression Update(AstExpression date, AstExpression format, AstExpression timezone, AstExpression onNull);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_2();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDateTruncExpression : AstExpression {
    private AstExpression _binSize;
    private AstExpression _date;
    private AstExpression _startOfWeek;
    private AstExpression _timezone;
    private AstExpression _unit;
    public AstExpression BinSize { get; }
    public AstExpression Date { get; }
    public AstNodeType NodeType { get; }
    public AstExpression StartOfWeek { get; }
    public AstExpression Timezone { get; }
    public AstExpression Unit { get; }
    public AstDateTruncExpression(AstExpression date, AstExpression unit, AstExpression binSize, AstExpression timezone, AstExpression startOfWeek);
    public AstExpression get_BinSize();
    public AstExpression get_Date();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_StartOfWeek();
    public AstExpression get_Timezone();
    public AstExpression get_Unit();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDateTruncExpression Update(AstExpression date, AstExpression unit, AstExpression binSize, AstExpression timezone, AstExpression startOfWeek);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_2();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDerivativeOrIntegralWindowExpression : AstWindowExpression {
    private AstExpression _arg;
    private AstDerivativeOrIntegralWindowOperator _operator;
    private Nullable`1<WindowTimeUnit> _unit;
    private AstWindow _window;
    public AstExpression Arg { get; }
    public AstNodeType NodeType { get; }
    public AstDerivativeOrIntegralWindowOperator Operator { get; }
    public Nullable`1<WindowTimeUnit> Unit { get; }
    public AstWindow Window { get; }
    public AstDerivativeOrIntegralWindowExpression(AstDerivativeOrIntegralWindowOperator operator, AstExpression arg, Nullable`1<WindowTimeUnit> unit, AstWindow window);
    public AstExpression get_Arg();
    public virtual AstNodeType get_NodeType();
    public AstDerivativeOrIntegralWindowOperator get_Operator();
    public Nullable`1<WindowTimeUnit> get_Unit();
    public AstWindow get_Window();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDerivativeOrIntegralWindowExpression Update(AstDerivativeOrIntegralWindowOperator operator, AstExpression arg, Nullable`1<WindowTimeUnit> unit, AstWindow window);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDerivativeOrIntegralWindowOperator : Enum {
    public int value__;
    public static AstDerivativeOrIntegralWindowOperator Derivative;
    public static AstDerivativeOrIntegralWindowOperator Integral;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstDeriviateOrIntegralWindowOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstDerivativeOrIntegralWindowOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstExponentialMovingAverageWindowExpression : AstWindowExpression {
    private AstExpression _arg;
    private ExponentialMovingAverageWeighting _weighting;
    private AstWindow _window;
    public AstExpression Arg { get; }
    public AstNodeType NodeType { get; }
    public ExponentialMovingAverageWeighting Weighting { get; }
    public AstWindow Window { get; }
    public AstExponentialMovingAverageWindowExpression(AstExpression arg, ExponentialMovingAverageWeighting weighting, AstWindow window);
    public AstExpression get_Arg();
    public virtual AstNodeType get_NodeType();
    public ExponentialMovingAverageWeighting get_Weighting();
    public AstWindow get_Window();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstExponentialMovingAverageWindowExpression Update(AstExpression arg, ExponentialMovingAverageWeighting weighting, AstWindow window);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_1();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstExpression : AstNode {
    public static AstExpression op_Implicit(BsonValue value);
    public static AstExpression op_Implicit(bool value);
    public static AstExpression op_Implicit(double value);
    public static AstExpression op_Implicit(int value);
    public static AstExpression op_Implicit(long value);
    public static AstExpression op_Implicit(string value);
    public static AstExpression Abs(AstExpression arg);
    public static AstAccumulatorField AccumulatorField(string name, AstUnaryAccumulatorOperator operator, AstExpression arg);
    public static AstAccumulatorField AccumulatorField(string name, AstAccumulatorExpression value);
    public static AstExpression Add(AstExpression[] args);
    public static AstExpression AllElementsTrue(AstExpression array);
    public static AstExpression AnyElementTrue(AstExpression array);
    public static AstExpression And(AstExpression[] args);
    public static AstExpression ArrayElemAt(AstExpression array, AstExpression index);
    public static AstExpression Avg(AstExpression array);
    public static AstExpression Binary(AstBinaryOperator operator, AstExpression arg1, AstExpression arg2);
    public static AstExpression BinaryWindowExpression(AstBinaryWindowOperator operator, AstExpression arg1, AstExpression arg2, AstWindow window);
    public static AstExpression BitAnd(AstExpression[] args);
    public static AstExpression BitNot(AstExpression arg);
    public static AstExpression BitOr(AstExpression[] args);
    public static AstExpression BitXor(AstExpression[] args);
    public static AstExpression Ceil(AstExpression arg);
    public static AstExpression Cmp(AstExpression arg1, AstExpression arg2);
    public static AstExpression Comparison(AstBinaryOperator comparisonOperator, AstExpression arg1, AstExpression arg2);
    public static AstExpression ComputedArray(IEnumerable`1<AstExpression> items);
    public static AstExpression ComputedArray(AstExpression[] items);
    public static AstExpression ComputedDocument(IEnumerable`1<AstComputedField> fields);
    public static AstComputedField ComputedField(string name, AstExpression value);
    public static IEnumerable`1<AstComputedField> ComputedFields(ValueTuple`2[] fields);
    public static AstExpression Concat(AstExpression[] args);
    public static AstExpression ConcatArrays(AstExpression[] arrays);
    public static AstExpression Cond(AstExpression if, AstExpression then, AstExpression else);
    public static AstExpression Constant(BsonValue value);
    public static AstExpression Convert(AstExpression input, AstExpression to, AstExpression onError, AstExpression onNull);
    public static AstExpression DateAdd(AstExpression startDate, AstExpression unit, AstExpression amount, AstExpression timezone);
    public static AstExpression DateDiff(AstExpression startDate, AstExpression endDate, AstExpression unit, AstExpression timezone, AstExpression startOfWeek);
    public static AstExpression DateFromParts(AstExpression year, AstExpression month, AstExpression day, AstExpression hour, AstExpression minute, AstExpression second, AstExpression millisecond, AstExpression timezone);
    public static AstExpression DateFromString(AstExpression dateString, AstExpression format, AstExpression timezone, AstExpression onError, AstExpression onNull);
    public static AstExpression DatePart(AstDatePart part, AstExpression date, AstExpression timezone);
    public static AstExpression DateSubtract(AstExpression startDate, AstExpression unit, AstExpression amount, AstExpression timezone);
    public static AstExpression DateToString(AstExpression date, AstExpression format, AstExpression timezone, AstExpression onNull);
    public static AstExpression DateTrunc(AstExpression date, AstExpression unit, AstExpression binSize, AstExpression timezone, AstExpression startOfWeek);
    public static AstExpression DerivativeOrIntegralWindowExpression(AstDerivativeOrIntegralWindowOperator operator, AstExpression arg, Nullable`1<WindowTimeUnit> unit, AstWindow window);
    public static AstExpression Divide(AstExpression arg1, AstExpression arg2);
    public static AstExpression Eq(AstExpression arg1, AstExpression arg2);
    public static AstExpression Exp(AstExpression arg);
    public static AstExpression ExponentialMovingAverageWindowExpression(AstExpression arg, ExponentialMovingAverageWeighting weighting, AstWindow window);
    public static AstFieldPathExpression FieldPath(string path);
    public static AstExpression Filter(AstExpression input, AstExpression cond, string as, AstExpression limit);
    public static AstExpression First(AstExpression array);
    public static AstExpression Floor(AstExpression arg);
    public static AstExpression GetField(AstExpression input, AstExpression fieldName);
    public static AstExpression Gt(AstExpression arg1, AstExpression arg2);
    public static AstExpression Gte(AstExpression arg1, AstExpression arg2);
    public static AstExpression IfNull(AstExpression arg, AstExpression replacement);
    public static AstExpression In(AstExpression value, AstExpression array);
    public static AstExpression IndexOfBytes(AstExpression string, AstExpression value, AstExpression start, AstExpression end);
    public static AstExpression IndexOfCP(AstExpression string, AstExpression value, AstExpression start, AstExpression end);
    public static AstExpression IsArray(AstExpression value);
    public static AstExpression Last(AstExpression array);
    public static AstExpression Let(AstVarBinding var, AstExpression in);
    public static AstExpression Let(AstVarBinding var1, AstVarBinding var2, AstExpression in);
    public static AstExpression Let(AstVarBinding var1, AstVarBinding var2, AstVarBinding var3, AstExpression in);
    public static AstExpression Let(IEnumerable`1<AstVarBinding> vars, AstExpression in);
    public static AstExpression Literal(AstExpression value);
    public static AstExpression Ln(AstExpression arg);
    public static AstExpression Log(AstExpression arg, AstExpression base);
    public static AstExpression Log10(AstExpression arg);
    public static AstExpression Lt(AstExpression arg1, AstExpression arg2);
    public static AstExpression Lte(AstExpression arg1, AstExpression arg2);
    public static AstExpression LTrim(AstExpression input, AstExpression chars);
    public static AstExpression Map(AstExpression input, AstVarExpression as, AstExpression in);
    public static AstExpression Max(AstExpression array);
    public static AstExpression Min(AstExpression array);
    public static AstExpression Mod(AstExpression arg1, AstExpression arg2);
    public static AstExpression Multiply(AstExpression[] args);
    public static AstExpression Ne(AstExpression arg1, AstExpression arg2);
    public static AstExpression Not(AstExpression arg);
    public static AstExpression NullaryWindowExpression(AstNullaryWindowOperator operator, AstWindow window);
    public static AstExpression ObjectToArray(AstExpression arg);
    public static AstExpression Or(AstExpression[] args);
    public static AstExpression PickExpression(AstPickOperator operator, AstExpression source, AstSortFields sortBy, AstVarExpression as, AstExpression selector, AstExpression n);
    public static AstExpression PickAccumulatorExpression(AstPickAccumulatorOperator operator, AstSortFields sortBy, AstExpression selector, AstExpression n);
    public static AstExpression Pow(AstExpression arg, AstExpression exponent);
    public static AstExpression Push(AstExpression arg);
    public static AstExpression Range(AstExpression start, AstExpression end, AstExpression step);
    public static AstExpression Reduce(AstExpression input, AstExpression initialValue, AstExpression in);
    public static AstExpression RegexMatch(AstExpression input, string pattern, string options);
    public static AstExpression ReverseArray(AstExpression array);
    public static AstExpression Round(AstExpression arg);
    public static AstExpression Round(AstExpression arg, AstExpression place);
    public static AstExpression RTrim(AstExpression input, AstExpression chars);
    public static AstExpression SetDifference(AstExpression arg1, AstExpression arg2);
    public static AstExpression SetEquals(AstExpression arg1, AstExpression arg2);
    public static AstExpression SetIntersection(AstExpression[] args);
    public static AstExpression SetIsSubset(AstExpression arg1, AstExpression arg2);
    public static AstExpression SetUnion(AstExpression[] args);
    public static AstExpression ShiftWindowExpression(AstExpression arg, int by, AstExpression defaultValue);
    public static AstExpression Size(AstExpression arg);
    public static AstExpression Slice(AstExpression array, AstExpression n);
    public static AstExpression Slice(AstExpression array, AstExpression position, AstExpression n);
    public static AstExpression SortArray(AstExpression input, AstSortFields fields);
    public static AstExpression SortArray(AstExpression input, AstSortField[] fields);
    public static AstExpression SortArray(AstExpression input, AstSortOrder order);
    public static AstExpression Split(AstExpression arg, AstExpression delimiter);
    public static AstExpression Sqrt(AstExpression arg);
    public static AstExpression StdDev(AstUnaryOperator stdDevOperator, AstExpression array);
    public static AstExpression StdDevPop(AstExpression array);
    public static AstExpression StdDevSamp(AstExpression array);
    public static AstExpression StrCaseCmp(AstExpression arg1, AstExpression arg2);
    public static AstExpression StrLen(AstUnaryOperator strlenOperator, AstExpression arg);
    public static AstExpression StrLenBytes(AstExpression arg);
    public static AstExpression StrLenCP(AstExpression arg);
    public static AstExpression Substr(AstTernaryOperator substrOperator, AstExpression arg, AstExpression index, AstExpression count);
    public static AstExpression SubstrBytes(AstExpression arg, AstExpression index, AstExpression count);
    public static AstExpression SubstrCP(AstExpression arg, AstExpression index, AstExpression count);
    public static AstExpression Subtract(AstExpression arg1, AstExpression arg2);
    public static AstExpression Sum(AstExpression array);
    public static AstExpression ToLower(AstExpression arg);
    public static AstExpression ToString(AstExpression arg);
    public static AstExpression ToUpper(AstExpression arg);
    public static AstExpression Trim(AstExpression input, AstExpression chars);
    public static AstExpression Trunc(AstExpression arg);
    public static AstExpression Type(AstExpression arg);
    public static AstExpression Unary(AstUnaryOperator operator, AstExpression arg);
    public static AstAccumulatorExpression UnaryAccumulator(AstUnaryAccumulatorOperator operator, AstExpression arg);
    public static AstExpression UnaryWindowExpression(AstUnaryWindowOperator operator, AstExpression arg, AstWindow window);
    public static ValueTuple`2<AstVarBinding, AstExpression> UseVarIfNotSimple(string name, AstExpression expression);
    public static AstVarExpression Var(string name, bool isCurrent);
    public static AstVarBinding VarBinding(AstVarExpression var, AstExpression value);
    public static AstExpression Zip(IEnumerable`1<AstExpression> inputs, Nullable`1<bool> useLongestLength, AstExpression defaults);
    private static bool AllArgsAreConstantBools(AstExpression[] args, List`1& values);
    private static bool AllArgsAreConstantInt32s(AstExpression[] args, List`1& values);
    private static IEnumerable`1<AstExpression> FlattenNaryArgs(IEnumerable`1<AstExpression> args, AstNaryOperator naryOperator);
    public virtual bool CanBeConvertedToFieldPath();
    public virtual string ConvertToFieldPath();
    [CompilerGeneratedAttribute]
internal static AstExpression <Divide>g__Divide|43_0(AstConstantExpression constant1, AstConstantExpression constant2);
    [CompilerGeneratedAttribute]
internal static bool <UseVarIfNotSimple>g__IsSimple|127_0(AstExpression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstFieldPathExpression : AstExpression {
    private string _path;
    public string Path { get; }
    public AstNodeType NodeType { get; }
    public AstFieldPathExpression(string path);
    public string get_Path();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual bool CanBeConvertedToFieldPath();
    public virtual string ConvertToFieldPath();
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstFilterExpression : AstExpression {
    private string _as;
    private AstExpression _cond;
    private AstExpression _input;
    private AstExpression _limit;
    public string As { get; }
    public AstExpression Cond { get; }
    public AstExpression Input { get; }
    public AstExpression Limit { get; }
    public AstNodeType NodeType { get; }
    public AstFilterExpression(AstExpression input, AstExpression cond, string as, AstExpression limit);
    public string get_As();
    public AstExpression get_Cond();
    public AstExpression get_Input();
    public AstExpression get_Limit();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstFilterExpression Update(AstExpression input, AstExpression cond, AstExpression limit);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstFunctionExpression : AstExpression {
    private string _body;
    private IReadOnlyList`1<AstExpression> _args;
    private string _lang;
    public string Body { get; }
    public IReadOnlyList`1<AstExpression> Args { get; }
    public string Lang { get; }
    public AstNodeType NodeType { get; }
    public AstFunctionExpression(string lang, string body, IEnumerable`1<AstExpression> args);
    public string get_Body();
    public IReadOnlyList`1<AstExpression> get_Args();
    public string get_Lang();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstFunctionExpression Update(IEnumerable`1<AstExpression> args);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstGetFieldExpression : AstExpression {
    private AstExpression _fieldName;
    private AstExpression _input;
    public AstExpression FieldName { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstGetFieldExpression(AstExpression input, AstExpression fieldName);
    public AstExpression get_FieldName();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual bool CanBeConvertedToFieldPath();
    public virtual string ConvertToFieldPath();
    public bool HasSafeFieldName(String& fieldName);
    public virtual BsonValue Render();
    public AstGetFieldExpression Update(AstExpression input, AstExpression fieldName);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstIndexOfArrayExpression : AstExpression {
    private AstExpression _array;
    private AstExpression _end;
    private AstExpression _start;
    private AstExpression _value;
    public AstExpression Array { get; }
    public AstExpression End { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Start { get; }
    public AstExpression Value { get; }
    public AstIndexOfArrayExpression(AstExpression array, AstExpression value, AstExpression start, AstExpression end);
    public AstExpression get_Array();
    public AstExpression get_End();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Start();
    public AstExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstIndexOfArrayExpression Update(AstExpression array, AstExpression value, AstExpression start, AstExpression end);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstIndexOfBytesExpression : AstExpression {
    private AstExpression _end;
    private AstExpression _start;
    private AstExpression _string;
    private AstExpression _value;
    public AstExpression End { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Start { get; }
    public AstExpression String { get; }
    public AstExpression Value { get; }
    public AstIndexOfBytesExpression(AstExpression string, AstExpression value, AstExpression start, AstExpression end);
    public AstExpression get_End();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Start();
    public AstExpression get_String();
    public AstExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstIndexOfBytesExpression Update(AstExpression string, AstExpression value, AstExpression start, AstExpression end);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstIndexOfCPExpression : AstExpression {
    private AstExpression _end;
    private AstExpression _start;
    private AstExpression _string;
    private AstExpression _value;
    public AstExpression End { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Start { get; }
    public AstExpression String { get; }
    public AstExpression Value { get; }
    public AstIndexOfCPExpression(AstExpression string, AstExpression value, AstExpression start, AstExpression end);
    public AstExpression get_End();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Start();
    public AstExpression get_String();
    public AstExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstIndexOfCPExpression Update(AstExpression string, AstExpression value, AstExpression start, AstExpression end);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstLetExpression : AstExpression {
    private AstExpression _in;
    private IReadOnlyList`1<AstVarBinding> _vars;
    public AstExpression In { get; }
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<AstVarBinding> Vars { get; }
    public AstLetExpression(IEnumerable`1<AstVarBinding> vars, AstExpression in);
    public AstExpression get_In();
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<AstVarBinding> get_Vars();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstLetExpression Update(IEnumerable`1<AstVarBinding> vars, AstExpression in);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstLTrimExpression : AstExpression {
    private AstExpression _chars;
    private AstExpression _input;
    public AstExpression Chars { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstLTrimExpression(AstExpression input, AstExpression chars);
    public AstExpression get_Chars();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstLTrimExpression Update(AstExpression input, AstExpression chars);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__10_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstMapExpression : AstExpression {
    private AstVarExpression _as;
    private AstExpression _in;
    private AstExpression _input;
    public AstVarExpression As { get; }
    public AstExpression In { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstMapExpression(AstExpression input, AstVarExpression as, AstExpression in);
    public AstVarExpression get_As();
    public AstExpression get_In();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstMapExpression Update(AstExpression input, AstVarExpression as, AstExpression in);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstNaryExpression : AstExpression {
    private IReadOnlyList`1<AstExpression> _args;
    private AstNaryOperator _operator;
    public IReadOnlyList`1<AstExpression> Args { get; }
    public AstNodeType NodeType { get; }
    public AstNaryOperator Operator { get; }
    public AstNaryExpression(AstNaryOperator operator, IEnumerable`1<AstExpression> args);
    public AstNaryExpression(AstNaryOperator operator, AstExpression[] args);
    public IReadOnlyList`1<AstExpression> get_Args();
    public virtual AstNodeType get_NodeType();
    public AstNaryOperator get_Operator();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstNaryExpression Update(IEnumerable`1<AstExpression> args);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstNaryOperator : Enum {
    public int value__;
    public static AstNaryOperator Add;
    public static AstNaryOperator And;
    public static AstNaryOperator Avg;
    public static AstNaryOperator BitAnd;
    public static AstNaryOperator BitOr;
    public static AstNaryOperator BitXor;
    public static AstNaryOperator Concat;
    public static AstNaryOperator ConcatArrays;
    public static AstNaryOperator Max;
    public static AstNaryOperator MergeObjects;
    public static AstNaryOperator Min;
    public static AstNaryOperator Multiply;
    public static AstNaryOperator Or;
    public static AstNaryOperator SetEquals;
    public static AstNaryOperator SetIntersection;
    public static AstNaryOperator SetUnion;
    public static AstNaryOperator StdDevPop;
    public static AstNaryOperator StdDevSamp;
    public static AstNaryOperator Sum;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstNaryOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstNaryOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstNullaryWindowExpression : AstWindowExpression {
    private AstNullaryWindowOperator _operator;
    private AstWindow _window;
    public AstNodeType NodeType { get; }
    public AstNullaryWindowOperator Operator { get; }
    public AstWindow Window { get; }
    public AstNullaryWindowExpression(AstNullaryWindowOperator operator, AstWindow window);
    public virtual AstNodeType get_NodeType();
    public AstNullaryWindowOperator get_Operator();
    public AstWindow get_Window();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstNullaryWindowExpression Update(AstNullaryWindowOperator operator, AstWindow window);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstNullaryWindowOperator : Enum {
    public int value__;
    public static AstNullaryWindowOperator Count;
    public static AstNullaryWindowOperator DenseRank;
    public static AstNullaryWindowOperator DocumentNumber;
    public static AstNullaryWindowOperator Rank;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstNullaryWindowOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstNullaryWindowOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstPickAccumulatorExpression : AstAccumulatorExpression {
    private AstExpression _n;
    private AstPickAccumulatorOperator _operator;
    private AstExpression _selector;
    private AstSortFields _sortBy;
    public AstExpression N { get; }
    public AstNodeType NodeType { get; }
    public AstPickAccumulatorOperator Operator { get; }
    public AstExpression Selector { get; }
    public AstSortFields SortBy { get; }
    public AstPickAccumulatorExpression(AstPickAccumulatorOperator operator, AstSortFields sortBy, AstExpression selector, AstExpression n);
    private static AstExpression EnsureNIsValid(AstPickAccumulatorOperator operator, AstExpression n);
    private static AstSortFields EnsureSortByIsValid(AstPickAccumulatorOperator operator, AstSortFields sortBy);
    public AstExpression get_N();
    public virtual AstNodeType get_NodeType();
    public AstPickAccumulatorOperator get_Operator();
    public AstExpression get_Selector();
    public AstSortFields get_SortBy();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstPickAccumulatorExpression Update(AstPickAccumulatorOperator operator, AstSortFields sortBy, AstExpression selector, AstExpression n);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstPickAccumulatorOperator : Enum {
    public int value__;
    public static AstPickAccumulatorOperator Bottom;
    public static AstPickAccumulatorOperator BottomN;
    public static AstPickAccumulatorOperator FirstN;
    public static AstPickAccumulatorOperator LastN;
    public static AstPickAccumulatorOperator MaxN;
    public static AstPickAccumulatorOperator MinN;
    public static AstPickAccumulatorOperator Top;
    public static AstPickAccumulatorOperator TopN;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstPickAccumulatorOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstPickAccumulatorOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstPickExpression : AstExpression {
    private AstVarExpression _as;
    private AstExpression _n;
    private AstPickOperator _operator;
    private AstExpression _selector;
    private AstSortFields _sortBy;
    private AstExpression _source;
    public AstVarExpression As { get; }
    public AstExpression N { get; }
    public AstNodeType NodeType { get; }
    public AstPickOperator Operator { get; }
    public AstExpression Selector { get; }
    public AstSortFields SortBy { get; }
    public AstExpression Source { get; }
    public AstPickExpression(AstPickOperator operator, AstExpression source, AstSortFields sortBy, AstVarExpression as, AstExpression selector, AstExpression n);
    private static ValueTuple`2<AstVarExpression, AstExpression> EnsureAsAndSelectorAreValid(AstPickOperator operator, AstVarExpression as, AstExpression selector);
    private static AstExpression EnsureNIsValid(AstPickOperator operator, AstExpression n);
    private static AstSortFields EnsureSortByIsValid(AstPickOperator operator, AstSortFields sortBy);
    public AstVarExpression get_As();
    public AstExpression get_N();
    public virtual AstNodeType get_NodeType();
    public AstPickOperator get_Operator();
    public AstExpression get_Selector();
    public AstSortFields get_SortBy();
    public AstExpression get_Source();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstPickExpression Update(AstPickOperator operator, AstExpression source, AstVarExpression as, AstSortFields sortBy, AstExpression selector, AstExpression n);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstPickOperator : Enum {
    public int value__;
    public static AstPickOperator BottomPlaceholder;
    public static AstPickOperator BottomNPlaceholder;
    public static AstPickOperator FirstNPlaceholder;
    public static AstPickOperator FirstNArray;
    public static AstPickOperator LastNPlaceholder;
    public static AstPickOperator LastNArray;
    public static AstPickOperator MaxNPlaceholder;
    public static AstPickOperator MaxNArray;
    public static AstPickOperator MinNPlaceholder;
    public static AstPickOperator MinNArray;
    public static AstPickOperator TopPlaceholder;
    public static AstPickOperator TopNPlaceholder;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstPickOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstPickOperator operator);
    [ExtensionAttribute]
public static AstPickAccumulatorOperator ToAccumulatorOperator(AstPickOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstRangeExpression : AstExpression {
    private AstExpression _end;
    private AstExpression _start;
    private AstExpression _step;
    public AstExpression End { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Start { get; }
    public AstExpression Step { get; }
    public AstRangeExpression(AstExpression start, AstExpression end, AstExpression step);
    public AstExpression get_End();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Start();
    public AstExpression get_Step();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstRangeExpression Update(AstExpression start, AstExpression end, AstExpression step);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstReduceExpression : AstExpression {
    private AstExpression _in;
    private AstExpression _initialValue;
    private AstExpression _input;
    public AstExpression In { get; }
    public AstExpression InitialValue { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstReduceExpression(AstExpression input, AstExpression initialValue, AstExpression in);
    public AstExpression get_In();
    public AstExpression get_InitialValue();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstReduceExpression Update(AstExpression input, AstExpression initialValue, AstExpression in);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstRegexExpression : AstExpression {
    private AstExpression _input;
    private AstRegexOperator _operator;
    private AstExpression _options;
    private AstExpression _regex;
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstRegexOperator Operator { get; }
    public AstExpression Options { get; }
    public AstExpression Regex { get; }
    public AstRegexExpression(AstRegexOperator operator, AstExpression input, AstExpression regex, AstExpression options);
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public AstRegexOperator get_Operator();
    public AstExpression get_Options();
    public AstExpression get_Regex();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstRegexExpression Update(AstExpression input, AstExpression regex, AstExpression options);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstRegexOperator : Enum {
    public int value__;
    public static AstRegexOperator Find;
    public static AstRegexOperator FindAll;
    public static AstRegexOperator Match;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstRegexOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstRegexOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstReplaceAllExpression : AstExpression {
    private AstExpression _find;
    private AstExpression _input;
    private AstExpression _replacement;
    public AstExpression Find { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Replacement { get; }
    public AstReplaceAllExpression(AstExpression input, AstExpression find, AstExpression replacement);
    public AstExpression get_Find();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Replacement();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstReplaceAllExpression Update(AstExpression input, AstExpression find, AstExpression replacement);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstReplaceOneExpression : AstExpression {
    private AstExpression _find;
    private AstExpression _input;
    private AstExpression _replacement;
    public AstExpression Find { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Replacement { get; }
    public AstReplaceOneExpression(AstExpression input, AstExpression find, AstExpression replacement);
    public AstExpression get_Find();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Replacement();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstReplaceOneExpression Update(AstExpression input, AstExpression find, AstExpression replacement);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstRTrimExpression : AstExpression {
    private AstExpression _chars;
    private AstExpression _input;
    public AstExpression Chars { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstRTrimExpression(AstExpression input, AstExpression chars);
    public AstExpression get_Chars();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstRTrimExpression Update(AstExpression input, AstExpression chars);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__10_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstShiftWindowExpression : AstWindowExpression {
    private AstExpression _arg;
    private int _by;
    private AstExpression _defaultValue;
    public AstExpression Arg { get; }
    public int By { get; }
    public AstExpression DefaultValue { get; }
    public AstNodeType NodeType { get; }
    public AstShiftWindowExpression(AstExpression arg, int by, AstExpression defaultValue);
    public AstExpression get_Arg();
    public int get_By();
    public AstExpression get_DefaultValue();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstShiftWindowExpression Update(AstExpression arg, int by, AstExpression defaultValue);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstSliceExpression : AstExpression {
    private AstExpression _array;
    private AstExpression _n;
    private AstExpression _position;
    public AstExpression Array { get; }
    public AstExpression N { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Position { get; }
    public AstSliceExpression(AstExpression array, AstExpression position, AstExpression n);
    public AstExpression get_Array();
    public AstExpression get_N();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Position();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSliceExpression Update(AstExpression array, AstExpression position, AstExpression n);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstSortArrayExpression : AstExpression {
    private AstSortFields _fields;
    private AstExpression _input;
    private AstSortOrder _order;
    public AstSortFields Fields { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstSortOrder Order { get; }
    public AstSortArrayExpression(AstExpression input, AstSortFields fields);
    public AstSortArrayExpression(AstExpression input, AstSortOrder order);
    public AstSortFields get_Fields();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public AstSortOrder get_Order();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSortArrayExpression Update(AstExpression input, AstSortFields fields, AstSortOrder order);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstSwitchExpression : AstExpression {
    private IReadOnlyList`1<AstSwitchExpressionBranch> _branches;
    private AstExpression _default;
    public IReadOnlyList`1<AstSwitchExpressionBranch> Branches { get; }
    public AstExpression Default { get; }
    public AstNodeType NodeType { get; }
    public AstSwitchExpression(IEnumerable`1<AstSwitchExpressionBranch> branches, AstExpression default);
    public IReadOnlyList`1<AstSwitchExpressionBranch> get_Branches();
    public AstExpression get_Default();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSwitchExpression Update(IEnumerable`1<AstSwitchExpressionBranch> branches, AstExpression default);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__10_1();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstSwitchExpressionBranch : AstNode {
    private AstExpression _case;
    private AstExpression _then;
    public AstExpression Case { get; }
    public AstNodeType NodeType { get; }
    public AstExpression Then { get; }
    public AstSwitchExpressionBranch(AstExpression case, AstExpression then);
    public AstExpression get_Case();
    public virtual AstNodeType get_NodeType();
    public AstExpression get_Then();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSwitchExpressionBranch Update(AstExpression case, AstExpression then);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstTernaryExpression : AstExpression {
    private AstExpression _arg1;
    private AstExpression _arg2;
    private AstExpression _arg3;
    private AstTernaryOperator _operator;
    public AstExpression Arg1 { get; }
    public AstExpression Arg2 { get; }
    public AstExpression Arg3 { get; }
    public AstNodeType NodeType { get; }
    public AstTernaryOperator Operator { get; }
    public AstTernaryExpression(AstTernaryOperator operator, AstExpression arg1, AstExpression arg2, AstExpression arg3);
    public AstExpression get_Arg1();
    public AstExpression get_Arg2();
    public AstExpression get_Arg3();
    public virtual AstNodeType get_NodeType();
    public AstTernaryOperator get_Operator();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstTernaryExpression Update(AstExpression arg1, AstExpression arg2, AstExpression arg3);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstTernaryOperator : Enum {
    public int value__;
    public static AstTernaryOperator Substr;
    public static AstTernaryOperator SubstrBytes;
    public static AstTernaryOperator SubstrCP;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstTernaryOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstTernaryOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstTrimExpression : AstExpression {
    private AstExpression _chars;
    private AstExpression _input;
    public AstExpression Chars { get; }
    public AstExpression Input { get; }
    public AstNodeType NodeType { get; }
    public AstTrimExpression(AstExpression input, AstExpression chars);
    public AstExpression get_Chars();
    public AstExpression get_Input();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstTrimExpression Update(AstExpression input, AstExpression chars);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__10_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryAccumulatorExpression : AstAccumulatorExpression {
    private AstExpression _arg;
    private AstUnaryAccumulatorOperator _operator;
    public AstExpression Arg { get; }
    public AstNodeType NodeType { get; }
    public AstUnaryAccumulatorOperator Operator { get; }
    public AstUnaryAccumulatorExpression(AstUnaryAccumulatorOperator operator, AstExpression arg);
    public AstExpression get_Arg();
    public virtual AstNodeType get_NodeType();
    public AstUnaryAccumulatorOperator get_Operator();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstUnaryAccumulatorExpression Update(AstExpression arg);
    private BsonValue RenderArg();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryAccumulatorOperator : Enum {
    public int value__;
    public static AstUnaryAccumulatorOperator AddToSet;
    public static AstUnaryAccumulatorOperator Avg;
    public static AstUnaryAccumulatorOperator First;
    public static AstUnaryAccumulatorOperator Last;
    public static AstUnaryAccumulatorOperator Max;
    public static AstUnaryAccumulatorOperator MergeObjects;
    public static AstUnaryAccumulatorOperator Min;
    public static AstUnaryAccumulatorOperator Push;
    public static AstUnaryAccumulatorOperator StdDevPop;
    public static AstUnaryAccumulatorOperator StdDevSamp;
    public static AstUnaryAccumulatorOperator Sum;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryAccumulatorOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstUnaryAccumulatorOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryExpression : AstExpression {
    private AstExpression _arg;
    private AstUnaryOperator _operator;
    public AstExpression Arg { get; }
    public AstNodeType NodeType { get; }
    public AstUnaryOperator Operator { get; }
    public AstUnaryExpression(AstUnaryOperator operator, AstExpression arg);
    public AstExpression get_Arg();
    public virtual AstNodeType get_NodeType();
    public AstUnaryOperator get_Operator();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstUnaryExpression Update(AstExpression arg);
    private BsonValue RenderArg();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryOperator : Enum {
    public int value__;
    public static AstUnaryOperator Abs;
    public static AstUnaryOperator Acos;
    public static AstUnaryOperator Acosh;
    public static AstUnaryOperator AddToSet;
    public static AstUnaryOperator AllElementsTrue;
    public static AstUnaryOperator AnyElementTrue;
    public static AstUnaryOperator ArrayToObject;
    public static AstUnaryOperator Asin;
    public static AstUnaryOperator Asinh;
    public static AstUnaryOperator Atan;
    public static AstUnaryOperator Atanh;
    public static AstUnaryOperator Avg;
    public static AstUnaryOperator BinarySize;
    public static AstUnaryOperator BitNot;
    public static AstUnaryOperator BsonSize;
    public static AstUnaryOperator Ceil;
    public static AstUnaryOperator Cos;
    public static AstUnaryOperator Cosh;
    public static AstUnaryOperator DegreesToRadians;
    public static AstUnaryOperator Exp;
    public static AstUnaryOperator First;
    public static AstUnaryOperator Floor;
    public static AstUnaryOperator IsArray;
    public static AstUnaryOperator IsNumber;
    public static AstUnaryOperator Last;
    public static AstUnaryOperator Literal;
    public static AstUnaryOperator Ln;
    public static AstUnaryOperator Log10;
    public static AstUnaryOperator Max;
    public static AstUnaryOperator MergeObjects;
    public static AstUnaryOperator Meta;
    public static AstUnaryOperator Min;
    public static AstUnaryOperator Not;
    public static AstUnaryOperator ObjectToArray;
    public static AstUnaryOperator Push;
    public static AstUnaryOperator RadiansToDegrees;
    public static AstUnaryOperator ReverseArray;
    public static AstUnaryOperator Round;
    public static AstUnaryOperator Sin;
    public static AstUnaryOperator Sinh;
    public static AstUnaryOperator Size;
    public static AstUnaryOperator Sqrt;
    public static AstUnaryOperator StdDevPop;
    public static AstUnaryOperator StdDevSamp;
    public static AstUnaryOperator StrLenBytes;
    public static AstUnaryOperator StrLenCP;
    public static AstUnaryOperator Sum;
    public static AstUnaryOperator Tan;
    public static AstUnaryOperator Tanh;
    public static AstUnaryOperator ToBool;
    public static AstUnaryOperator ToDate;
    public static AstUnaryOperator ToDecimal;
    public static AstUnaryOperator ToDouble;
    public static AstUnaryOperator ToInt;
    public static AstUnaryOperator ToLong;
    public static AstUnaryOperator ToLower;
    public static AstUnaryOperator ToObjectId;
    public static AstUnaryOperator ToString;
    public static AstUnaryOperator ToUpper;
    public static AstUnaryOperator Trunc;
    public static AstUnaryOperator Type;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryOperatorExtensions : object {
    [ExtensionAttribute]
public static bool IsAccumulator(AstUnaryOperator operator, AstUnaryAccumulatorOperator& accumulatorOperator);
    [ExtensionAttribute]
public static string Render(AstUnaryOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryWindowExpression : AstWindowExpression {
    private AstExpression _arg;
    private AstUnaryWindowOperator _operator;
    private AstWindow _window;
    public AstExpression Arg { get; }
    public AstNodeType NodeType { get; }
    public AstUnaryWindowOperator Operator { get; }
    public AstWindow Window { get; }
    public AstUnaryWindowExpression(AstUnaryWindowOperator operator, AstExpression arg, AstWindow window);
    public AstExpression get_Arg();
    public virtual AstNodeType get_NodeType();
    public AstUnaryWindowOperator get_Operator();
    public AstWindow get_Window();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstUnaryWindowExpression Update(AstUnaryWindowOperator operator, AstExpression arg, AstWindow window);
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryWindowOperator : Enum {
    public int value__;
    public static AstUnaryWindowOperator AddToSet;
    public static AstUnaryWindowOperator Average;
    public static AstUnaryWindowOperator First;
    public static AstUnaryWindowOperator Last;
    public static AstUnaryWindowOperator Locf;
    public static AstUnaryWindowOperator Max;
    public static AstUnaryWindowOperator Min;
    public static AstUnaryWindowOperator Push;
    public static AstUnaryWindowOperator StandardDeviationPopulation;
    public static AstUnaryWindowOperator StandardDeviationSample;
    public static AstUnaryWindowOperator Sum;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstUnaryWindowOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstUnaryWindowOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstVarExpression : AstExpression {
    private bool _isCurrent;
    private string _name;
    public bool IsCurrent { get; }
    public string Name { get; }
    public AstNodeType NodeType { get; }
    public AstVarExpression(string name, bool isCurrent);
    public bool get_IsCurrent();
    public string get_Name();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public AstVarExpression AsNotCurrent();
    public virtual bool CanBeConvertedToFieldPath();
    public virtual string ConvertToFieldPath();
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstWindow : object {
    private BsonValue _lowerBoundary;
    private string _type;
    private string _unit;
    private BsonValue _upperBoundary;
    public BsonValue LowerBoundary { get; }
    public string Type { get; }
    public string Unit { get; }
    public BsonValue UpperBoundary { get; }
    public AstWindow(string type, BsonValue lowerBoundary, BsonValue upperBoundary, string unit);
    public BsonValue get_LowerBoundary();
    public string get_Type();
    public string get_Unit();
    public BsonValue get_UpperBoundary();
    public BsonDocument Render();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstWindowExpression : AstExpression {
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Expressions.AstZipExpression : AstExpression {
    private AstExpression _defaults;
    private IReadOnlyList`1<AstExpression> _inputs;
    private Nullable`1<bool> _useLongestLength;
    public AstExpression Defaults { get; }
    public IReadOnlyList`1<AstExpression> Inputs { get; }
    public AstNodeType NodeType { get; }
    public Nullable`1<bool> UseLongestLength { get; }
    public AstZipExpression(IEnumerable`1<AstExpression> inputs, Nullable`1<bool> useLongestLength, AstExpression defaults);
    public AstExpression get_Defaults();
    public IReadOnlyList`1<AstExpression> get_Inputs();
    public virtual AstNodeType get_NodeType();
    public Nullable`1<bool> get_UseLongestLength();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstZipExpression Update(IEnumerable`1<AstExpression> inputs, AstExpression defaults);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_2();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstAllFilterOperation : AstFilterOperation {
    private IReadOnlyList`1<BsonValue> _values;
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<BsonValue> Values { get; }
    public AstAllFilterOperation(IEnumerable`1<BsonValue> values);
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<BsonValue> get_Values();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstAndFilter : AstFilter {
    private IReadOnlyList`1<AstFilter> _filters;
    public IReadOnlyList`1<AstFilter> Filters { get; }
    public AstNodeType NodeType { get; }
    public bool UsesExpr { get; }
    public AstAndFilter(IEnumerable`1<AstFilter> filters);
    public IReadOnlyList`1<AstFilter> get_Filters();
    public virtual AstNodeType get_NodeType();
    public virtual bool get_UsesExpr();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstAndFilter Update(IEnumerable`1<AstFilter> filters);
    private bool TryRenderAsImplicitAnd(IReadOnlyList`1<AstFilter> filters, BsonDocument& renderedAsImplicitAnd);
    private bool OperationCanBeUsedInImplicitAnd(AstFilterOperation operation);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstBitsAllClearFilterOperation : AstFilterOperation {
    private BsonValue _bitmask;
    public BsonValue Bitmask { get; }
    public AstNodeType NodeType { get; }
    public AstBitsAllClearFilterOperation(BsonValue bitmask);
    public BsonValue get_Bitmask();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstBitsAllSetFilterOperation : AstFilterOperation {
    private BsonValue _bitmask;
    public BsonValue Bitmask { get; }
    public AstNodeType NodeType { get; }
    public AstBitsAllSetFilterOperation(BsonValue bitmask);
    public BsonValue get_Bitmask();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstBitsAnyClearFilterOperation : AstFilterOperation {
    private BsonValue _bitmask;
    public BsonValue Bitmask { get; }
    public AstNodeType NodeType { get; }
    public AstBitsAnyClearFilterOperation(BsonValue bitmask);
    public BsonValue get_Bitmask();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstBitsAnySetFilterOperation : AstFilterOperation {
    private BsonValue _bitmask;
    public BsonValue Bitmask { get; }
    public AstNodeType NodeType { get; }
    public AstBitsAnySetFilterOperation(BsonValue bitmask);
    public BsonValue get_Bitmask();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstComparisonFilterOperation : AstFilterOperation {
    private AstComparisonFilterOperator _operator;
    private BsonValue _value;
    public AstNodeType NodeType { get; }
    public AstComparisonFilterOperator Operator { get; }
    public BsonValue Value { get; }
    public AstComparisonFilterOperation(AstComparisonFilterOperator operator, BsonValue value);
    public virtual AstNodeType get_NodeType();
    public AstComparisonFilterOperator get_Operator();
    public BsonValue get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstComparisonFilterOperator : Enum {
    public int value__;
    public static AstComparisonFilterOperator Eq;
    public static AstComparisonFilterOperator Gt;
    public static AstComparisonFilterOperator Gte;
    public static AstComparisonFilterOperator Lt;
    public static AstComparisonFilterOperator Lte;
    public static AstComparisonFilterOperator Ne;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstComparisonFilterOperatorExtensions : object {
    [ExtensionAttribute]
public static string Render(AstComparisonFilterOperator operator);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstElemMatchFilterOperation : AstFilterOperation {
    private AstFilter _filter;
    public AstFilter Filter { get; }
    public AstNodeType NodeType { get; }
    public AstElemMatchFilterOperation(AstFilter filter);
    public AstFilter get_Filter();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstElemMatchFilterOperation Update(AstFilter filter);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstExistsFilterOperation : AstFilterOperation {
    private bool _exists;
    public bool Exists { get; }
    public AstNodeType NodeType { get; }
    public AstExistsFilterOperation(bool exists);
    public bool get_Exists();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstExprFilter : AstFilter {
    private AstExpression _expression;
    public AstExpression Expression { get; }
    public AstNodeType NodeType { get; }
    public bool UsesExpr { get; }
    public AstExprFilter(AstExpression expression);
    public AstExpression get_Expression();
    public virtual AstNodeType get_NodeType();
    public virtual bool get_UsesExpr();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstExprFilter Update(AstExpression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstFieldOperationFilter : AstFilter {
    private AstFilterField _field;
    private AstFilterOperation _operation;
    public AstFilterField Field { get; }
    public AstNodeType NodeType { get; }
    public AstFilterOperation Operation { get; }
    public AstFieldOperationFilter(AstFilterField field, AstFilterOperation operation);
    public AstFilterField get_Field();
    public virtual AstNodeType get_NodeType();
    public AstFilterOperation get_Operation();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstFieldOperationFilter Update(AstFilterField field, AstFilterOperation operation);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstFilter : AstNode {
    public bool UsesExpr { get; }
    public static AstFilter All(AstFilterField field, IEnumerable`1<BsonValue> values);
    public static AstFilter And(AstFilter[] filters);
    public static AstFieldOperationFilter BitsAllClear(AstFilterField field, BsonValue bitMask);
    public static AstFieldOperationFilter BitsAllSet(AstFilterField field, BsonValue bitMask);
    public static AstFieldOperationFilter BitsAnyClear(AstFilterField field, BsonValue bitMask);
    public static AstFieldOperationFilter BitsAnySet(AstFilterField field, BsonValue bitMask);
    public static AstFilter Combine(AstFilter optionalFilter1, AstFilter optionalFilter2);
    public static AstFieldOperationFilter Compare(AstFilterField field, AstComparisonFilterOperator comparisonOperator, BsonValue value);
    public static AstFieldOperationFilter ElemMatch(AstFilterField field, AstFilter filter);
    public static AstFieldOperationFilter Eq(AstFilterField field, BsonValue value);
    public static AstFieldOperationFilter Exists(AstFilterField field);
    public static AstFilter Expr(AstExpression expression);
    public static AstFilterField Field(string path, IBsonSerializer serializer);
    public static AstFieldOperationFilter In(AstFilterField field, IEnumerable`1<BsonValue> values);
    public static AstFilter MatchesEverything();
    public static AstFilter MatchesNothing();
    public static AstFieldOperationFilter Mod(AstFilterField field, BsonValue divisor, BsonValue remainder);
    public static AstFieldOperationFilter Ne(AstFilterField field, BsonValue value);
    public static AstFieldOperationFilter Nin(AstFilterField field, IEnumerable`1<BsonValue> values);
    public static AstFilter Not(AstFilter filter);
    public static AstFieldOperationFilter NotExists(AstFilterField field);
    public static AstFilter Or(AstFilter[] filters);
    public static AstRawFilter Raw(BsonDocument filter);
    public static AstFieldOperationFilter Regex(AstFilterField field, string pattern, string options);
    public static AstFieldOperationFilter Size(AstFilterField field, BsonValue size);
    public static AstFieldOperationFilter Type(AstFilterField field, BsonType type);
    public virtual bool get_UsesExpr();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstFilterField : AstNode {
    private string _path;
    private IBsonSerializer _serializer;
    public string Path { get; }
    public AstNodeType NodeType { get; }
    public IBsonSerializer Serializer { get; }
    public AstFilterField(string path, IBsonSerializer serializer);
    public string get_Path();
    public virtual AstNodeType get_NodeType();
    public IBsonSerializer get_Serializer();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public AstFilterField SubField(string subFieldName, IBsonSerializer subFieldSerializer);
    public virtual BsonValue Render();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstFilterOperation : AstNode {
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstGeoIntersectsFilterOperation : AstFilterOperation {
    private BsonDocument _geometry;
    public BsonDocument Geometry { get; }
    public AstNodeType NodeType { get; }
    public AstGeoIntersectsFilterOperation(BsonDocument geometry);
    public BsonDocument get_Geometry();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstGeoWithinBoxFilterOperation : AstFilterOperation {
    private BsonArray _bottomLeftCoordinates;
    private BsonArray _upperRightCoordinates;
    public BsonArray BottomLeftCoordinates { get; }
    public AstNodeType NodeType { get; }
    public BsonArray UpperRightCoordinates { get; }
    public AstGeoWithinBoxFilterOperation(BsonArray bottomLeftCoordinates, BsonArray upperRightCoordinates);
    public BsonArray get_BottomLeftCoordinates();
    public virtual AstNodeType get_NodeType();
    public BsonArray get_UpperRightCoordinates();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstGeoWithinCenterFilterOperation : AstFilterOperation {
    private BsonValue _radius;
    private BsonValue _x;
    private BsonValue _y;
    public AstNodeType NodeType { get; }
    public BsonValue Radius { get; }
    public BsonValue X { get; }
    public BsonValue Y { get; }
    public AstGeoWithinCenterFilterOperation(BsonValue x, BsonValue y, BsonValue radius);
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Radius();
    public BsonValue get_X();
    public BsonValue get_Y();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstGeoWithinCenterSphereFilterOperation : AstFilterOperation {
    private BsonValue _radius;
    private BsonValue _x;
    private BsonValue _y;
    public AstNodeType NodeType { get; }
    public BsonValue Radius { get; }
    public BsonValue X { get; }
    public BsonValue Y { get; }
    public AstGeoWithinCenterSphereFilterOperation(BsonValue x, BsonValue y, BsonValue radius);
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Radius();
    public BsonValue get_X();
    public BsonValue get_Y();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstGeoWithinFilterOperation : AstFilterOperation {
    private BsonDocument _geometry;
    public BsonDocument Geometry { get; }
    public AstNodeType NodeType { get; }
    public AstGeoWithinFilterOperation(BsonDocument geometry);
    public BsonDocument get_Geometry();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstImpliedOperationFilterOperation : AstFilterOperation {
    private BsonValue _value;
    public AstNodeType NodeType { get; }
    public BsonValue Value { get; }
    public AstImpliedOperationFilterOperation(BsonValue value);
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstImpliedOperationFilterOperation Update(BsonValue value);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstInFilterOperation : AstFilterOperation {
    private IReadOnlyList`1<BsonValue> _values;
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<BsonValue> Values { get; }
    public AstInFilterOperation(IEnumerable`1<BsonValue> values);
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<BsonValue> get_Values();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstJsonSchemaFilter : AstFilter {
    private BsonDocument _schema;
    public AstNodeType NodeType { get; }
    public BsonDocument Schema { get; }
    public AstJsonSchemaFilter(BsonDocument schema);
    public virtual AstNodeType get_NodeType();
    public BsonDocument get_Schema();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstMatchesEverythingFilter : AstFilter {
    public AstNodeType NodeType { get; }
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstMatchesNothingFilter : AstFilter {
    public AstNodeType NodeType { get; }
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstModFilterOperation : AstFilterOperation {
    private BsonValue _divisor;
    private BsonValue _remainder;
    public BsonValue Divisor { get; }
    public AstNodeType NodeType { get; }
    public BsonValue Remainder { get; }
    public AstModFilterOperation(BsonValue divisor, BsonValue remainder);
    public BsonValue get_Divisor();
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Remainder();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstNearFilterOperation : AstFilterOperation {
    private BsonDocument _geometry;
    private BsonValue _maxDistance;
    private BsonValue _minDistance;
    public BsonDocument Geometry { get; }
    public AstNodeType NodeType { get; }
    public BsonValue MaxDistance { get; }
    public BsonValue MinDistance { get; }
    public AstNearFilterOperation(BsonDocument geometry, BsonValue maxDistance, BsonValue minDistance);
    public BsonDocument get_Geometry();
    public virtual AstNodeType get_NodeType();
    public BsonValue get_MaxDistance();
    public BsonValue get_MinDistance();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstNearSphereFilterOperation : AstFilterOperation {
    private BsonDocument _geometry;
    private BsonValue _maxDistance;
    private BsonValue _minDistance;
    public BsonDocument Geometry { get; }
    public AstNodeType NodeType { get; }
    public BsonValue MaxDistance { get; }
    public BsonValue MinDistance { get; }
    public AstNearSphereFilterOperation(BsonDocument geometry, BsonValue maxDistance, BsonValue minDistance);
    public BsonDocument get_Geometry();
    public virtual AstNodeType get_NodeType();
    public BsonValue get_MaxDistance();
    public BsonValue get_MinDistance();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstNinFilterOperation : AstFilterOperation {
    private IReadOnlyList`1<BsonValue> _values;
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<BsonValue> Values { get; }
    public AstNinFilterOperation(IEnumerable`1<BsonValue> values);
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<BsonValue> get_Values();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstNorFilter : AstFilter {
    private IReadOnlyList`1<AstFilter> _filters;
    public IReadOnlyList`1<AstFilter> Filters { get; }
    public AstNodeType NodeType { get; }
    public bool UsesExpr { get; }
    public AstNorFilter(IEnumerable`1<AstFilter> filters);
    public IReadOnlyList`1<AstFilter> get_Filters();
    public virtual AstNodeType get_NodeType();
    public virtual bool get_UsesExpr();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstNorFilter Update(IEnumerable`1<AstFilter> filters);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstNotFilterOperation : AstFilterOperation {
    private AstFilterOperation _operation;
    public AstNodeType NodeType { get; }
    public AstFilterOperation Operation { get; }
    public AstNotFilterOperation(AstFilterOperation operation);
    public virtual AstNodeType get_NodeType();
    public AstFilterOperation get_Operation();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstNotFilterOperation Update(AstFilterOperation operation);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstOrFilter : AstFilter {
    private IReadOnlyList`1<AstFilter> _filters;
    public IReadOnlyList`1<AstFilter> Filters { get; }
    public AstNodeType NodeType { get; }
    public bool UsesExpr { get; }
    public AstOrFilter(IEnumerable`1<AstFilter> filters);
    public IReadOnlyList`1<AstFilter> get_Filters();
    public virtual AstNodeType get_NodeType();
    public virtual bool get_UsesExpr();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstOrFilter Update(IEnumerable`1<AstFilter> filters);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstRawFilter : AstFilter {
    private BsonDocument _filter;
    public AstNodeType NodeType { get; }
    public BsonValue Filter { get; }
    public AstRawFilter(BsonDocument filter);
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Filter();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstRegexFilterOperation : AstFilterOperation {
    private string _options;
    private string _pattern;
    public AstNodeType NodeType { get; }
    public string Options { get; }
    public string Pattern { get; }
    public AstRegexFilterOperation(string pattern, string options);
    public virtual AstNodeType get_NodeType();
    public string get_Options();
    public string get_Pattern();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstSizeFilterOperation : AstFilterOperation {
    private BsonValue _size;
    public AstNodeType NodeType { get; }
    public BsonValue Size { get; }
    public AstSizeFilterOperation(BsonValue size);
    public virtual AstNodeType get_NodeType();
    public BsonValue get_Size();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstTextFilter : AstFilter {
    private Nullable`1<bool> _caseSensitive;
    private Nullable`1<bool> _diacriticSensitive;
    private string _language;
    private string _search;
    public Nullable`1<bool> CaseSensitive { get; }
    public Nullable`1<bool> DiacriticSensitive { get; }
    public string Language { get; }
    public AstNodeType NodeType { get; }
    public string Search { get; }
    public AstTextFilter(string search, string language, Nullable`1<bool> caseSensitive, Nullable`1<bool> diacriticSensitive);
    public Nullable`1<bool> get_CaseSensitive();
    public Nullable`1<bool> get_DiacriticSensitive();
    public string get_Language();
    public virtual AstNodeType get_NodeType();
    public string get_Search();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_1();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstTypeFilterOperation : AstFilterOperation {
    private IReadOnlyList`1<BsonType> _types;
    public AstNodeType NodeType { get; }
    public BsonType Type { get; }
    public IReadOnlyList`1<BsonType> Types { get; }
    public AstTypeFilterOperation(BsonType type);
    public AstTypeFilterOperation(IEnumerable`1<BsonType> types);
    public virtual AstNodeType get_NodeType();
    public BsonType get_Type();
    public IReadOnlyList`1<BsonType> get_Types();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    private string MapBsonTypeToString(BsonType type);
    [CompilerGeneratedAttribute]
private string <Render>b__10_0(BsonType type);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Filters.AstWhereFilter : AstFilter {
    private BsonJavaScript _code;
    public BsonJavaScript Code { get; }
    public AstNodeType NodeType { get; }
    public AstWhereFilter(BsonJavaScript code);
    public BsonJavaScript get_Code();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Optimizers.AstFindProjectionSimplifier : AstSimplifier {
    public virtual AstNode VisitProjectStageSetFieldSpecification(AstProjectStageSetFieldSpecification node);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Optimizers.AstGroupingPipelineOptimizer : object {
    private AccumulatorSet _accumulators;
    private AstExpression _element;
    public static AstPipeline Optimize(AstPipeline pipeline);
    private AstPipeline OptimizeGroupingStage(AstPipeline pipeline, int i, AstStage groupingStage);
    private ValueTuple`2[] OptimizeGroupingAndFollowingStages(AstStage groupingStage, List`1<AstStage> followingStages);
    private AstStage OptimizeFollowingStage(AstStage stage);
    private AstStage OptimizeLimitStage(AstLimitStage stage);
    private AstStage OptimizeMatchStage(AstMatchStage stage);
    private AstStage OptimizeProjectStage(AstProjectStage stage);
    private AstProjectStageSpecification OptimizeProjectStageSpecification(AstProjectStageSpecification specification);
    private AstProjectStageSpecification OptimizeProjectStageSetFieldSpecification(AstProjectStageSetFieldSpecification specification);
    private AstStage OptimizeSampleStage(AstSampleStage stage);
    private AstStage OptimizeSkipStage(AstSkipStage stage);
    [CompilerGeneratedAttribute]
internal static bool <Optimize>g__IsGroupingStage|0_0(AstStage stage);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeGroupingStage>g__IsOptimizableGroupingStage|3_0(AstStage groupingStage, AstExpression& element);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeGroupingStage>g__IsElementsPush|3_2(AstAccumulatorField field, AstExpression& element);
    [CompilerGeneratedAttribute]
internal static List`1<AstStage> <OptimizeGroupingStage>g__GetFollowingStagesToOptimize|3_1(AstPipeline pipeline, int from);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeGroupingStage>g__StageCanBeOptimized|3_3(AstStage stage);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeGroupingStage>g__IsLastStageThatCanBeOptimized|3_4(AstStage stage);
    [CompilerGeneratedAttribute]
internal static bool <OptimizeGroupingStage>g__ProjectsRoot|3_5(AstProjectStage projectStage);
    [CompilerGeneratedAttribute]
internal static AstStage <OptimizeGroupingAndFollowingStages>g__CreateNewGroupingStage|4_0(AstStage groupingStage, AccumulatorSet accumulators);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Optimizers.AstPipelineOptimizer : object {
    public static AstPipeline Optimize(AstPipeline pipeline);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Optimizers.AstSimplifier : AstNodeVisitor {
    public static AstNode Simplify(AstNode node);
    public static TNode SimplifyAndConvert(TNode node);
    public virtual AstNode VisitCondExpression(AstCondExpression node);
    public virtual AstNode VisitFieldOperationFilter(AstFieldOperationFilter node);
    public virtual AstNode VisitGetFieldExpression(AstGetFieldExpression node);
    public virtual AstNode VisitLetExpression(AstLetExpression node);
    public virtual AstNode VisitMapExpression(AstMapExpression node);
    public virtual AstNode VisitUnaryExpression(AstUnaryExpression node);
    [CompilerGeneratedAttribute]
internal static bool <VisitCondExpression>g__OperatorMapsNullToNull|2_0(AstUnaryOperator operator);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldEqValue|3_0(AstFieldOperationFilter node, BsonValue& value);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldRegex|3_1(AstFieldOperationFilter node, BsonRegularExpression& regex);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldNotRegex|3_2(AstFieldOperationFilter node, BsonRegularExpression& regex);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldElemMatchEqValue|3_3(AstFieldOperationFilter node, BsonValue& value);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldElemMatchRegex|3_4(AstFieldOperationFilter node, BsonRegularExpression& regex);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldElemMatchNotRegex|3_5(AstFieldOperationFilter node, AstFilterField& elemField, BsonRegularExpression& regex);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldNotElemMatchEqValue|3_6(AstFieldOperationFilter node, BsonValue& value);
    [CompilerGeneratedAttribute]
internal static bool <VisitFieldOperationFilter>g__IsFieldNotElemMatchRegex|3_7(AstFieldOperationFilter node, BsonRegularExpression& regex);
    [CompilerGeneratedAttribute]
internal static bool <VisitGetFieldExpression>g__TrySimplifyAsFieldPath|4_0(AstGetFieldExpression node, AstExpression& simplified);
    [CompilerGeneratedAttribute]
private bool <VisitGetFieldExpression>g__TrySimplifyAsLet|4_1(AstGetFieldExpression node, AstExpression& simplified);
    [CompilerGeneratedAttribute]
internal static AstExpression <VisitMapExpression>g__UltimateGetFieldInput|6_0(AstGetFieldExpression getField);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstAddFieldsStage : AstStage {
    private IReadOnlyList`1<AstComputedField> _fields;
    public IReadOnlyList`1<AstComputedField> Fields { get; }
    public AstNodeType NodeType { get; }
    public AstAddFieldsStage(IEnumerable`1<AstComputedField> fields);
    public IReadOnlyList`1<AstComputedField> get_Fields();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstAddFieldsStage Update(IEnumerable`1<AstComputedField> newFields);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstBucketAutoStage : AstStage {
    private int _buckets;
    private string _granularity;
    private AstExpression _groupBy;
    private IReadOnlyList`1<AstAccumulatorField> _output;
    public int Buckets { get; }
    public string Granularity { get; }
    public AstExpression GroupBy { get; }
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<AstAccumulatorField> Output { get; }
    public AstBucketAutoStage(AstExpression groupBy, int buckets, string granularity, IEnumerable`1<AstAccumulatorField> output);
    public int get_Buckets();
    public string get_Granularity();
    public AstExpression get_GroupBy();
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<AstAccumulatorField> get_Output();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstBucketAutoStage Update(AstExpression groupBy, IEnumerable`1<AstAccumulatorField> output);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstBucketStage : AstStage {
    private IReadOnlyList`1<BsonValue> _boundaries;
    private BsonValue _default;
    private AstExpression _groupBy;
    private IReadOnlyList`1<AstAccumulatorField> _output;
    public IReadOnlyList`1<BsonValue> Boundaries { get; }
    public BsonValue Default { get; }
    public AstExpression GroupBy { get; }
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<AstAccumulatorField> Output { get; }
    public AstBucketStage(AstExpression groupBy, IEnumerable`1<BsonValue> boundaries, BsonValue default, IEnumerable`1<AstAccumulatorField> output);
    public IReadOnlyList`1<BsonValue> get_Boundaries();
    public BsonValue get_Default();
    public AstExpression get_GroupBy();
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<AstAccumulatorField> get_Output();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstBucketStage Update(AstExpression groupBy, IEnumerable`1<AstAccumulatorField> output);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCollStatsStage : AstStage {
    private AstCollStatsStageCount _count;
    private AstCollStatsStageLatencyStats _latencyStats;
    private AstCollStatsStageQueryExecStats _queryExecStats;
    private AstCollStatsStageStorageStats _storageStats;
    public AstCollStatsStageCount Count { get; }
    public AstCollStatsStageLatencyStats LatencyStats { get; }
    public AstNodeType NodeType { get; }
    public AstCollStatsStageQueryExecStats QueryExecStats { get; }
    public AstCollStatsStageStorageStats StorageStats { get; }
    public AstCollStatsStage(AstCollStatsStageLatencyStats latencyStats, AstCollStatsStageStorageStats storageStats, AstCollStatsStageCount count, AstCollStatsStageQueryExecStats queryExecStats);
    public AstCollStatsStageCount get_Count();
    public AstCollStatsStageLatencyStats get_LatencyStats();
    public virtual AstNodeType get_NodeType();
    public AstCollStatsStageQueryExecStats get_QueryExecStats();
    public AstCollStatsStageStorageStats get_StorageStats();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__16_3();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCollStatsStageCount : object {
    public BsonDocument Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCollStatsStageLatencyStats : object {
    private Nullable`1<bool> _histograms;
    public Nullable`1<bool> Histograms { get; }
    private AstCollStatsStageLatencyStats(Nullable`1<bool> histograms);
    public Nullable`1<bool> get_Histograms();
    public BsonDocument Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__4_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCollStatsStageQueryExecStats : object {
    public BsonDocument Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCollStatsStageStorageStats : object {
    private Nullable`1<int> _scale;
    public Nullable`1<int> Scale { get; }
    public AstCollStatsStageStorageStats(Nullable`1<int> scale);
    public Nullable`1<int> get_Scale();
    public BsonDocument Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__4_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCountStage : AstStage {
    private string _outputField;
    public AstNodeType NodeType { get; }
    public string OutputField { get; }
    public AstCountStage(string outputField);
    public virtual AstNodeType get_NodeType();
    public string get_OutputField();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstCurrentOpStage : AstStage {
    private Nullable`1<bool> _allUsers;
    private Nullable`1<bool> _idleConnections;
    private Nullable`1<bool> _idleCursors;
    private Nullable`1<bool> _idleSessions;
    private Nullable`1<bool> _localOps;
    public Nullable`1<bool> AllUsers { get; }
    public Nullable`1<bool> IdleConnections { get; }
    public Nullable`1<bool> IdleCursors { get; }
    public Nullable`1<bool> IdleSessions { get; }
    public Nullable`1<bool> LocalOps { get; }
    public AstNodeType NodeType { get; }
    public AstCurrentOpStage(Nullable`1<bool> allUsers, Nullable`1<bool> idleConnections, Nullable`1<bool> idleCursors, Nullable`1<bool> idleSessions, Nullable`1<bool> localOps);
    public Nullable`1<bool> get_AllUsers();
    public Nullable`1<bool> get_IdleConnections();
    public Nullable`1<bool> get_IdleCursors();
    public Nullable`1<bool> get_IdleSessions();
    public Nullable`1<bool> get_LocalOps();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_3();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__19_4();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstDensifyStage : AstStage {
    private string _fieldPath;
    private IReadOnlyList`1<string> _partitionByFieldPaths;
    private DensifyRange _range;
    public string FieldPath { get; }
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<string> PartitionByFieldPaths { get; }
    public DensifyRange Range { get; }
    public AstDensifyStage(string fieldPath, DensifyRange range, IEnumerable`1<string> partitionByFieldPaths);
    public string get_FieldPath();
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<string> get_PartitionByFieldPaths();
    public DensifyRange get_Range();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__13_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstDocumentsStage : AstStage {
    private AstExpression _documents;
    public AstExpression Documents { get; }
    public AstNodeType NodeType { get; }
    public AstDocumentsStage(AstExpression documents);
    public AstExpression get_Documents();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstDocumentsStage Update(AstExpression documents);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstFacetStage : AstStage {
    private IReadOnlyList`1<AstFacetStageFacet> _facets;
    public IReadOnlyList`1<AstFacetStageFacet> Facets { get; }
    public AstNodeType NodeType { get; }
    public AstFacetStage(IEnumerable`1<AstFacetStageFacet> facets);
    public IReadOnlyList`1<AstFacetStageFacet> get_Facets();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstFacetStage Update(IEnumerable`1<AstFacetStageFacet> facets);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstFacetStageFacet : AstNode {
    private string _outputField;
    private AstPipeline _pipeline;
    public AstNodeType NodeType { get; }
    public string OutputField { get; }
    public AstPipeline Pipeline { get; }
    public AstFacetStageFacet(string outputField, AstPipeline pipeline);
    public virtual AstNodeType get_NodeType();
    public string get_OutputField();
    public AstPipeline get_Pipeline();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public BsonElement RenderAsElement();
    public AstFacetStageFacet Update(AstPipeline pipeline);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstGeoNearStage : AstStage {
    private string _distanceField;
    private Nullable`1<double> _distanceMultiplier;
    private string _includeLocs;
    private string _key;
    private Nullable`1<double> _maxDistance;
    private Nullable`1<double> _minDistance;
    private BsonValue _near;
    private BsonDocument _query;
    private Nullable`1<bool> _spherical;
    private Nullable`1<bool> _uniqueDocs;
    public string DistanceField { get; }
    public Nullable`1<double> DistanceMultiplier { get; }
    public string IncludeLocs { get; }
    public string Key { get; }
    public Nullable`1<double> MaxDistance { get; }
    public Nullable`1<double> MinDistance { get; }
    public BsonValue Near { get; }
    public AstNodeType NodeType { get; }
    public BsonDocument Query { get; }
    public Nullable`1<bool> Spherical { get; }
    public Nullable`1<bool> UniqueDocs { get; }
    public AstGeoNearStage(BsonValue near, string distanceField, Nullable`1<bool> spherical, Nullable`1<double> maxDistance, BsonDocument query, Nullable`1<double> distanceMultiplier, string includeLocs, Nullable`1<bool> uniqueDocs, Nullable`1<double> minDistance, string key);
    public string get_DistanceField();
    public Nullable`1<double> get_DistanceMultiplier();
    public string get_IncludeLocs();
    public string get_Key();
    public Nullable`1<double> get_MaxDistance();
    public Nullable`1<double> get_MinDistance();
    public BsonValue get_Near();
    public virtual AstNodeType get_NodeType();
    public BsonDocument get_Query();
    public Nullable`1<bool> get_Spherical();
    public Nullable`1<bool> get_UniqueDocs();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__34_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__34_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__34_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__34_3();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__34_4();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstGraphLookupStage : AstStage {
    private string _as;
    private string _connectFromField;
    private string _connectToField;
    private string _depthField;
    private string _from;
    private Nullable`1<int> _maxDepth;
    private AstFilter _restrictSearchWithMatch;
    private AstExpression _startWith;
    public string As { get; }
    public string From { get; }
    public string ConnectFromField { get; }
    public string ConnectToField { get; }
    public string DepthField { get; }
    public Nullable`1<int> MaxDepth { get; }
    public AstNodeType NodeType { get; }
    public AstFilter RestrictSearchWithMatch { get; }
    public AstExpression StartWith { get; }
    public AstGraphLookupStage(string from, AstExpression startWith, string connectFromField, string connectToField, string as, Nullable`1<int> maxDepth, string depthField, AstFilter restrictSearchWithMatch);
    public string get_As();
    public string get_From();
    public string get_ConnectFromField();
    public string get_ConnectToField();
    public string get_DepthField();
    public Nullable`1<int> get_MaxDepth();
    public virtual AstNodeType get_NodeType();
    public AstFilter get_RestrictSearchWithMatch();
    public AstExpression get_StartWith();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstGraphLookupStage Update(AstExpression startWith, AstFilter restrictSearchWithMatch);
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__28_1();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstGroupStage : AstStage {
    private IReadOnlyList`1<AstAccumulatorField> _fields;
    private AstExpression _id;
    public IReadOnlyList`1<AstAccumulatorField> Fields { get; }
    public AstExpression Id { get; }
    public AstNodeType NodeType { get; }
    public AstGroupStage(AstExpression id, IEnumerable`1<AstAccumulatorField> fields);
    public IReadOnlyList`1<AstAccumulatorField> get_Fields();
    public AstExpression get_Id();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstGroupStage Update(AstExpression id, IEnumerable`1<AstAccumulatorField> fields);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstIndexStatsStage : AstStage {
    public AstNodeType NodeType { get; }
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstLimitStage : AstStage {
    private long _limit;
    public long Limit { get; }
    public AstNodeType NodeType { get; }
    public AstLimitStage(long limit);
    public long get_Limit();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstListLocalSessionsStage : AstStage {
    private BsonDocument _options;
    public AstNodeType NodeType { get; }
    public BsonDocument Options { get; }
    public AstListLocalSessionsStage(BsonDocument options);
    public virtual AstNodeType get_NodeType();
    public BsonDocument get_Options();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstListSessionsStage : AstStage {
    private BsonDocument _options;
    public AstNodeType NodeType { get; }
    public BsonDocument Options { get; }
    public AstListSessionsStage(BsonDocument options);
    public virtual AstNodeType get_NodeType();
    public BsonDocument get_Options();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstLookupStage : AstStage {
    private string _as;
    private string _from;
    private AstLookupStageMatch _match;
    public string As { get; }
    public string From { get; }
    public AstLookupStageMatch Match { get; }
    public AstNodeType NodeType { get; }
    public AstLookupStage(string from, AstLookupStageMatch match, string as);
    public string get_As();
    public string get_From();
    public AstLookupStageMatch get_Match();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstLookupStage Update(AstLookupStageMatch match);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstLookupStageEqualityMatch : AstLookupStageMatch {
    private string _foreignField;
    private string _localField;
    public string ForeignField { get; }
    public string LocalField { get; }
    public AstNodeType NodeType { get; }
    public AstLookupStageEqualityMatch(string localField, string foreignField);
    public string get_ForeignField();
    public string get_LocalField();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual IEnumerable`1<BsonElement> RenderAsElements();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstLookupStageMatch : AstNode {
    public virtual BsonValue Render();
    public abstract virtual IEnumerable`1<BsonElement> RenderAsElements();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstLookupStageUncorrelatedMatch : AstLookupStageMatch {
    private IReadOnlyList`1<AstComputedField> _let;
    private AstPipeline _pipeline;
    public IReadOnlyList`1<AstComputedField> Let { get; }
    public AstNodeType NodeType { get; }
    public AstPipeline Pipeline { get; }
    public AstLookupStageUncorrelatedMatch(AstPipeline pipeline, IEnumerable`1<AstComputedField> let);
    public IReadOnlyList`1<AstComputedField> get_Let();
    public virtual AstNodeType get_NodeType();
    public AstPipeline get_Pipeline();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual IEnumerable`1<BsonElement> RenderAsElements();
    public AstLookupStageUncorrelatedMatch Update(AstPipeline pipeline, IEnumerable`1<AstComputedField> let);
    [CompilerGeneratedAttribute]
private BsonValue <RenderAsElements>b__10_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstMatchStage : AstStage {
    private AstFilter _filter;
    public AstFilter Filter { get; }
    public AstNodeType NodeType { get; }
    public AstMatchStage(AstFilter filter);
    public AstFilter get_Filter();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstMatchStage Update(AstFilter filter);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstMergeStage : AstStage {
    private string _intoCollection;
    private string _intoDatabase;
    private IReadOnlyList`1<AstVarBinding> _let;
    private IReadOnlyList`1<string> _on;
    private Nullable`1<AstMergeStageWhenMatched> _whenMatched;
    private Nullable`1<AstMergeStageWhenNotMatched> _whenNotMatched;
    public string IntoCollection { get; }
    public string IntoDatabase { get; }
    public IReadOnlyList`1<AstVarBinding> Let { get; }
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<string> On { get; }
    public Nullable`1<AstMergeStageWhenMatched> WhenMatched { get; }
    public Nullable`1<AstMergeStageWhenNotMatched> WhenNotMatched { get; }
    public AstMergeStage(string intoDatabase, string intoCollection, IEnumerable`1<string> on, IEnumerable`1<AstVarBinding> let, Nullable`1<AstMergeStageWhenMatched> whenMatched, Nullable`1<AstMergeStageWhenNotMatched> whenNotMatched);
    public string get_IntoCollection();
    public string get_IntoDatabase();
    public IReadOnlyList`1<AstVarBinding> get_Let();
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<string> get_On();
    public Nullable`1<AstMergeStageWhenMatched> get_WhenMatched();
    public Nullable`1<AstMergeStageWhenNotMatched> get_WhenNotMatched();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstMergeStage Update(IEnumerable`1<AstVarBinding> let);
    private BsonValue RenderInto();
    private BsonDocument RenderLet();
    private BsonValue RenderOn();
    private BsonValue RenderWhenMatched();
    private BsonValue RenderWhenNotMatched();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__22_0();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__22_1();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__22_2();
    [CompilerGeneratedAttribute]
private BsonValue <Render>b__22_3();
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstMergeStageWhenMatched : Enum {
    public int value__;
    public static AstMergeStageWhenMatched Replace;
    public static AstMergeStageWhenMatched KeepExisting;
    public static AstMergeStageWhenMatched Merge;
    public static AstMergeStageWhenMatched Fail;
    public static AstMergeStageWhenMatched Pipeline;
}
internal enum MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstMergeStageWhenNotMatched : Enum {
    public int value__;
    public static AstMergeStageWhenNotMatched Insert;
    public static AstMergeStageWhenNotMatched Discard;
    public static AstMergeStageWhenNotMatched Fail;
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstOutStage : AstStage {
    private string _outputCollection;
    private string _outputDatabase;
    public AstNodeType NodeType { get; }
    public string OutputCollection { get; }
    public string OutputDatabase { get; }
    public AstOutStage(string outputDatabase, string outputCollection);
    public virtual AstNodeType get_NodeType();
    public string get_OutputCollection();
    public string get_OutputDatabase();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    private BsonValue RenderOutput();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstPlanCacheStatsStage : AstStage {
    public AstNodeType NodeType { get; }
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstProject : object {
    public static AstProjectStageSpecification Exclude(string path);
    public static AstProjectStageSpecification ExcludeId();
    public static AstProjectStageSpecification Include(string path);
    public static AstProjectStageSpecification Set(string path, AstExpression value);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstProjectStage : AstStage {
    private IReadOnlyList`1<AstProjectStageSpecification> _specifications;
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<AstProjectStageSpecification> Specifications { get; }
    public AstProjectStage(IEnumerable`1<AstProjectStageSpecification> specifications);
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<AstProjectStageSpecification> get_Specifications();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstProjectStage Update(IEnumerable`1<AstProjectStageSpecification> specifications);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstProjectStageExcludeFieldSpecification : AstProjectStageSpecification {
    private string _path;
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public AstProjectStageExcludeFieldSpecification(string path);
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonElement RenderAsElement();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstProjectStageIncludeFieldSpecification : AstProjectStageSpecification {
    private string _path;
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public AstProjectStageIncludeFieldSpecification(string path);
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonElement RenderAsElement();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstProjectStageSetFieldSpecification : AstProjectStageSpecification {
    private string _path;
    private AstExpression _value;
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public AstExpression Value { get; }
    public AstProjectStageSetFieldSpecification(string path, AstExpression value);
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public AstExpression get_Value();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonElement RenderAsElement();
    public AstProjectStageSetFieldSpecification Update(AstExpression value);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstProjectStageSpecification : AstNode {
    public virtual BsonValue Render();
    public abstract virtual BsonElement RenderAsElement();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstRedactStage : AstStage {
    private AstExpression _expression;
    public AstExpression Expression { get; }
    public AstNodeType NodeType { get; }
    public AstRedactStage(AstExpression expression);
    public AstExpression get_Expression();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstRedactStage Update(AstExpression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstReplaceRootStage : AstStage {
    private AstExpression _expression;
    public AstExpression Expression { get; }
    public AstNodeType NodeType { get; }
    public AstReplaceRootStage(AstExpression expression);
    public AstExpression get_Expression();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstReplaceRootStage Update(AstExpression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstReplaceWithStage : AstStage {
    private AstExpression _expression;
    public AstExpression Expression { get; }
    public AstNodeType NodeType { get; }
    public AstReplaceWithStage(AstExpression expression);
    public AstExpression get_Expression();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstReplaceWithStage Update(AstExpression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstSampleStage : AstStage {
    private long _size;
    public AstNodeType NodeType { get; }
    public long SampleSize { get; }
    public AstSampleStage(long size);
    public virtual AstNodeType get_NodeType();
    public long get_SampleSize();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstSetStage : AstStage {
    private IReadOnlyList`1<AstComputedField> _fields;
    public IReadOnlyList`1<AstComputedField> Fields { get; }
    public AstNodeType NodeType { get; }
    public AstSetStage(IEnumerable`1<AstComputedField> fields);
    public IReadOnlyList`1<AstComputedField> get_Fields();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSetStage Update(IEnumerable`1<AstComputedField> fields);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstSetWindowFieldsStage : AstStage {
    private IReadOnlyList`1<AstWindowField> _output;
    private AstExpression _partitionBy;
    private AstSortFields _sortBy;
    public AstNodeType NodeType { get; }
    public IReadOnlyList`1<AstWindowField> Output { get; }
    public AstExpression PartitionBy { get; }
    public AstSortFields SortBy { get; }
    public AstSetWindowFieldsStage(AstExpression partitionBy, AstSortFields sortBy, IEnumerable`1<AstWindowField> output);
    public virtual AstNodeType get_NodeType();
    public IReadOnlyList`1<AstWindowField> get_Output();
    public AstExpression get_PartitionBy();
    public AstSortFields get_SortBy();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSetWindowFieldsStage Update(AstExpression partitionBy, AstSortFields sortBy, IEnumerable`1<AstWindowField> output);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstSkipStage : AstStage {
    private long _skip;
    public AstNodeType NodeType { get; }
    public long Skip { get; }
    public AstSkipStage(long skip);
    public virtual AstNodeType get_NodeType();
    public long get_Skip();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstSortByCountStage : AstStage {
    private AstExpression _expression;
    public AstExpression Expression { get; }
    public AstNodeType NodeType { get; }
    public AstSortByCountStage(AstExpression expression);
    public AstExpression get_Expression();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstSortByCountStage Update(AstExpression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstSortStage : AstStage {
    private AstSortFields _fields;
    public AstSortFields Fields { get; }
    public AstNodeType NodeType { get; }
    public AstSortStage(AstSortFields fields);
    public AstSortFields get_Fields();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public AstSortStage AddSortField(AstSortField field);
    public virtual BsonValue Render();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstStage : AstNode {
    public static AstStage AddFields(IEnumerable`1<AstComputedField> fields);
    public static AstStage Bucket(AstExpression groupBy, IEnumerable`1<BsonValue> boundaries, BsonValue default, IEnumerable`1<AstAccumulatorField> output);
    public static AstStage BucketAuto(AstExpression groupBy, int buckets, string granularity, IEnumerable`1<AstAccumulatorField> output);
    public static AstStage CollStats(AstCollStatsStageLatencyStats latencyStats, AstCollStatsStageStorageStats storageStats, AstCollStatsStageCount count, AstCollStatsStageQueryExecStats queryExecStats);
    public static AstStage Count(string outputField);
    public static AstStage CurrentOp(Nullable`1<bool> allUsers, Nullable`1<bool> idleConnections, Nullable`1<bool> idleCursors, Nullable`1<bool> idleSessions, Nullable`1<bool> localOps);
    public static AstStage Densify(string fieldPath, DensifyRange range, IEnumerable`1<string> partitionByFieldPaths);
    public static AstStage Documents(AstExpression documents);
    public static AstStage Facet(IEnumerable`1<AstFacetStageFacet> facets);
    public static AstStage GeoNear(BsonValue near, string distanceField, Nullable`1<bool> spherical, Nullable`1<double> maxDistance, BsonDocument query, Nullable`1<double> distanceMultiplier, string includeLocs, Nullable`1<bool> uniqueDocs, Nullable`1<double> minDistance, string key);
    public static AstStage GraphLookup(string from, AstExpression startWith, string connectFromField, string connectToField, string as, Nullable`1<int> maxDepth, string depthField, AstFilter restrictSearchWithMatch);
    public static AstGroupStage Group(AstExpression id, IEnumerable`1<AstAccumulatorField> fields);
    public static AstStage Group(AstExpression id, AstAccumulatorField[] fields);
    public static AstStage IndexStats();
    public static AstStage Limit(long limit);
    public static AstStage ListLocalSessions(BsonDocument options);
    public static AstStage ListSessions(BsonDocument options);
    public static AstStage Lookup(string from, AstLookupStageMatch match, string as);
    public static AstStage Match(AstFilter filter);
    public static AstStage Merge(string intoDatabase, string intoCollection, IEnumerable`1<string> on, IEnumerable`1<AstVarBinding> let, Nullable`1<AstMergeStageWhenMatched> whenMatched, Nullable`1<AstMergeStageWhenNotMatched> whenNotMatched);
    public static AstStage Out(string outputDatabase, string outputCollection);
    public static AstStage PlanCache();
    public static AstProjectStage Project(IEnumerable`1<AstProjectStageSpecification> specifications);
    public static AstProjectStage Project(AstProjectStageSpecification[] specifications);
    public static AstStage Redact(AstExpression expression);
    public static AstStage ReplaceRoot(AstExpression expression);
    public static AstStage ReplaceWith(AstExpression expression);
    public static AstStage Sample(long size);
    public static AstStage Set(IEnumerable`1<AstComputedField> fields);
    public static AstStage Skip(long skip);
    public static AstSortStage Sort(IEnumerable`1<AstSortField> fields);
    public static AstSortStage Sort(AstSortField[] fields);
    public static AstStage UnionWith(string collection, AstPipeline pipeline);
    public static AstStage Universal(BsonDocument stage);
    public static AstStage Unset(IEnumerable`1<string> fields);
    public static AstStage Unwind(string field, string includeArrayIndex, Nullable`1<bool> preserveNullAndEmptyArrays);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstUnionWithStage : AstStage {
    private string _collection;
    private AstPipeline _pipeline;
    public string Collection { get; }
    public AstNodeType NodeType { get; }
    public AstPipeline Pipeline { get; }
    public AstUnionWithStage(string collection, AstPipeline pipeline);
    public string get_Collection();
    public virtual AstNodeType get_NodeType();
    public AstPipeline get_Pipeline();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstUnionWithStage Update(AstPipeline pipeline);
    private BsonValue RenderWith();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstUniversalStage : AstStage {
    private BsonDocument _stage;
    public AstNodeType NodeType { get; }
    public BsonDocument Stage { get; }
    public AstUniversalStage(BsonDocument stage);
    public virtual AstNodeType get_NodeType();
    public BsonDocument get_Stage();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    public AstUniversalStage Update(BsonDocument stage);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstUnsetStage : AstStage {
    private IReadOnlyList`1<string> _fields;
    public IReadOnlyList`1<string> Fields { get; }
    public AstNodeType NodeType { get; }
    public AstUnsetStage(IEnumerable`1<string> fields);
    public IReadOnlyList`1<string> get_Fields();
    public virtual AstNodeType get_NodeType();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    private BsonValue RenderFields();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Stages.AstUnwindStage : AstStage {
    private string _includeArrayIndex;
    private string _path;
    private Nullable`1<bool> _preserveNullAndEmptyArrays;
    public string IncludeArrayIndex { get; }
    public AstNodeType NodeType { get; }
    public string Path { get; }
    public Nullable`1<bool> PreserveNullAndEmptyArrays { get; }
    public AstUnwindStage(string path, string includeArrayIndex, Nullable`1<bool> preserveNullAndEmptyArrays);
    public string get_IncludeArrayIndex();
    public virtual AstNodeType get_NodeType();
    public string get_Path();
    public Nullable`1<bool> get_PreserveNullAndEmptyArrays();
    public virtual AstNode Accept(AstNodeVisitor visitor);
    public virtual BsonValue Render();
    private BsonValue RenderUnwind();
    [CompilerGeneratedAttribute]
private BsonValue <RenderUnwind>b__14_0();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Ast.Visitors.AstNodeReplacer : AstNodeVisitor {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _mappings;
    public AstNodeReplacer(ValueTuple`2[] mappings);
    public static AstNode Replace(AstNode node, ValueTuple`2[] mappings);
    public virtual AstNode Visit(AstNode node);
    [CompilerGeneratedAttribute]
internal static bool <Visit>g__TryFindReplacement|3_0(ValueTuple`2[] mappings, AstNode original, AstNode& replacement);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Ast.Visitors.AstNodeVisitor : object {
    public virtual AstNode Visit(AstNode node);
    public IReadOnlyList`1<AstNode> Visit(IReadOnlyList`1<AstNode> nodes);
    public virtual AstNode VisitAccumulatorField(AstAccumulatorField node);
    public virtual AstNode VisitAddFieldsStage(AstAddFieldsStage node);
    public virtual AstNode VisitAllFilterOperation(AstAllFilterOperation node);
    public TNode VisitAndConvert(TNode node);
    public IReadOnlyList`1<TNode> VisitAndConvert(IReadOnlyList`1<TNode> nodes);
    public virtual AstNode VisitAndFilter(AstAndFilter node);
    public virtual AstNode VisitBinaryExpression(AstBinaryExpression node);
    public virtual AstNode VisitBinaryWindowExpression(AstBinaryWindowExpression node);
    public virtual AstNode VisitBitsAllClearFilterOperation(AstBitsAllClearFilterOperation node);
    public virtual AstNode VisitBitsAllSetFilterOperation(AstBitsAllSetFilterOperation node);
    public virtual AstNode VisitBitsAnyClearFilterOperation(AstBitsAnyClearFilterOperation node);
    public virtual AstNode VisitBitsAnySetFilterOperation(AstBitsAnySetFilterOperation node);
    public virtual AstNode VisitBucketAutoStage(AstBucketAutoStage node);
    public virtual AstNode VisitBucketStage(AstBucketStage node);
    public virtual AstNode VisitCollStatsStage(AstCollStatsStage node);
    public virtual AstNode VisitComparisonFilterOperation(AstComparisonFilterOperation node);
    public virtual AstNode VisitComputedArrayExpression(AstComputedArrayExpression node);
    public virtual AstNode VisitComputedDocumentExpression(AstComputedDocumentExpression node);
    public virtual AstNode VisitComputedField(AstComputedField node);
    public virtual AstNode VisitCondExpression(AstCondExpression node);
    public virtual AstNode VisitConstantExpression(AstConstantExpression node);
    public virtual AstNode VisitConvertExpression(AstConvertExpression node);
    public virtual AstNode VisitCountStage(AstCountStage node);
    public virtual AstNode VisitCurrentOpStage(AstCurrentOpStage node);
    public virtual AstNode VisitCustomAccumulatorExpression(AstCustomAccumulatorExpression node);
    public virtual AstNode VisitDateAddExpression(AstDateAddExpression node);
    public virtual AstNode VisitDateDiffExpression(AstDateDiffExpression node);
    public virtual AstNode VisitDateFromIsoWeekPartsExpression(AstDateFromIsoWeekPartsExpression node);
    public virtual AstNode VisitDateFromPartsExpression(AstDateFromPartsExpression node);
    public virtual AstNode VisitDateFromStringExpression(AstDateFromStringExpression node);
    public virtual AstNode VisitDatePartExpression(AstDatePartExpression node);
    public virtual AstNode VisitDateSubtractExpression(AstDateSubtractExpression node);
    public virtual AstNode VisitDateToPartsExpression(AstDateToPartsExpression node);
    public virtual AstNode VisitDateToStringExpression(AstDateToStringExpression node);
    public virtual AstNode VisitDateTruncExpression(AstDateTruncExpression node);
    public virtual AstNode VisitDensifyStage(AstDensifyStage node);
    public virtual AstNode VisitDerivativeOrIntegralWindowExpression(AstDerivativeOrIntegralWindowExpression node);
    public virtual AstNode VisitDocumentsStage(AstDocumentsStage node);
    public virtual AstNode VisitElemMatchFilterOperation(AstElemMatchFilterOperation node);
    public virtual AstNode VisitExistsFilterOperation(AstExistsFilterOperation node);
    public virtual AstNode VisitExponentialMovingAverageWindowExpression(AstExponentialMovingAverageWindowExpression node);
    public virtual AstNode VisitExprFilter(AstExprFilter node);
    public virtual AstNode VisitFacetStage(AstFacetStage node);
    public virtual AstNode VisitFacetStageFacet(AstFacetStageFacet node);
    public virtual AstNode VisitFieldOperationFilter(AstFieldOperationFilter node);
    public virtual AstNode VisitFieldPathExpression(AstFieldPathExpression node);
    public virtual AstNode VisitFilterExpression(AstFilterExpression node);
    public virtual AstNode VisitFilterField(AstFilterField node);
    public virtual AstNode VisitFunctionExpression(AstFunctionExpression node);
    public virtual AstNode VisitGeoIntersectsFilterOperation(AstGeoIntersectsFilterOperation node);
    public virtual AstNode VisitGeoNearStage(AstGeoNearStage node);
    public virtual AstNode VisitGeoWithinBoxFilterOperation(AstGeoWithinBoxFilterOperation node);
    public virtual AstNode VisitGeoWithinCenterFilterOperation(AstGeoWithinCenterFilterOperation node);
    public virtual AstNode VisitGeoWithinCenterSphereFilterOperation(AstGeoWithinCenterSphereFilterOperation node);
    public virtual AstNode VisitGeoWithinFilterOperation(AstGeoWithinFilterOperation node);
    public virtual AstNode VisitGetFieldExpression(AstGetFieldExpression node);
    public virtual AstNode VisitGraphLookupStage(AstGraphLookupStage node);
    public virtual AstNode VisitGroupStage(AstGroupStage node);
    public virtual AstNode VisitImpliedOperationFilterOperation(AstImpliedOperationFilterOperation node);
    public virtual AstNode VisitIndexOfArrayExpression(AstIndexOfArrayExpression node);
    public virtual AstNode VisitIndexOfBytesExpression(AstIndexOfBytesExpression node);
    public virtual AstNode VisitIndexOfCPExpression(AstIndexOfCPExpression node);
    public virtual AstNode VisitIndexStatsStage(AstIndexStatsStage node);
    public virtual AstNode VisitInFilterOperation(AstInFilterOperation node);
    public virtual AstNode VisitJsonSchemaFilter(AstJsonSchemaFilter node);
    public virtual AstNode VisitLetExpression(AstLetExpression node);
    public virtual AstNode VisitLimitStage(AstLimitStage node);
    public virtual AstNode VisitListLocalSessionsStage(AstListLocalSessionsStage node);
    public virtual AstNode VisitListSessionsStage(AstListSessionsStage node);
    public virtual AstNode VisitLookupStage(AstLookupStage node);
    public virtual AstNode VisitLookupStageEqualityMatch(AstLookupStageEqualityMatch node);
    public virtual AstNode VisitLookupStageUncorrelatedMatch(AstLookupStageUncorrelatedMatch node);
    public virtual AstNode VisitLTrimExpression(AstLTrimExpression node);
    public virtual AstNode VisitMapExpression(AstMapExpression node);
    public virtual AstNode VisitMatchesEverythingFilter(AstMatchesEverythingFilter node);
    public virtual AstNode VisitMatchesNothingFilter(AstMatchesNothingFilter node);
    public virtual AstNode VisitMatchStage(AstMatchStage node);
    public virtual AstNode VisitMergeStage(AstMergeStage node);
    public virtual AstNode VisitModFilterOperation(AstModFilterOperation node);
    public virtual AstNode VisitNaryExpression(AstNaryExpression node);
    public virtual AstNode VisitNearFilterOperation(AstNearFilterOperation node);
    public virtual AstNode VisitNearSphereFilterOperation(AstNearSphereFilterOperation node);
    public virtual AstNode VisitNinFilterOperation(AstNinFilterOperation node);
    public virtual AstNode VisitNorFilter(AstNorFilter node);
    public virtual AstNode VisitNotFilterOperation(AstNotFilterOperation node);
    public virtual AstNode VisitNullaryWindowExpression(AstNullaryWindowExpression node);
    public virtual AstNode VisitOrFilter(AstOrFilter node);
    public virtual AstNode VisitOutStage(AstOutStage node);
    public virtual AstNode VisitPickAccumulatorExpression(AstPickAccumulatorExpression node);
    public virtual AstNode VisitPickExpression(AstPickExpression node);
    public virtual AstNode VisitPipeline(AstPipeline node);
    public virtual AstNode VisitPlanCacheStatsStage(AstPlanCacheStatsStage node);
    public virtual AstNode VisitProjectStage(AstProjectStage node);
    public virtual AstNode VisitProjectStageExcludeFieldSpecification(AstProjectStageExcludeFieldSpecification node);
    public virtual AstNode VisitProjectStageIncludeFieldSpecification(AstProjectStageIncludeFieldSpecification node);
    public virtual AstNode VisitProjectStageSetFieldSpecification(AstProjectStageSetFieldSpecification node);
    public virtual AstNode VisitRangeExpression(AstRangeExpression node);
    public virtual AstNode VisitRawFilter(AstRawFilter node);
    public virtual AstNode VisitRedactStage(AstRedactStage node);
    public virtual AstNode VisitReduceExpression(AstReduceExpression node);
    public virtual AstNode VisitRegexExpression(AstRegexExpression node);
    public virtual AstNode VisitRegexFilterOperation(AstRegexFilterOperation node);
    public virtual AstNode VisitReplaceAllExpression(AstReplaceAllExpression node);
    public virtual AstNode VisitReplaceOneExpression(AstReplaceOneExpression node);
    public virtual AstNode VisitReplaceRootStage(AstReplaceRootStage node);
    public virtual AstNode VisitReplaceWithStage(AstReplaceWithStage node);
    public virtual AstNode VisitRTrimExpression(AstRTrimExpression node);
    public virtual AstNode VisitSampleStage(AstSampleStage node);
    public virtual AstNode VisitSetStage(AstSetStage node);
    public virtual AstNode VisitSetWindowFieldsStage(AstSetWindowFieldsStage node);
    public virtual AstNode VisitShiftWindowExpression(AstShiftWindowExpression node);
    public virtual AstNode VisitSizeFilterOperation(AstSizeFilterOperation node);
    public virtual AstNode VisitSkipStage(AstSkipStage node);
    public virtual AstNode VisitSliceExpression(AstSliceExpression node);
    public virtual AstNode VisitSortArrayExpression(AstSortArrayExpression node);
    public virtual AstNode VisitSortByCountStage(AstSortByCountStage node);
    public virtual AstNode VisitSortStage(AstSortStage node);
    public virtual AstNode VisitSwitchExpression(AstSwitchExpression node);
    public virtual AstNode VisitSwitchExpressionBranch(AstSwitchExpressionBranch node);
    public virtual AstNode VisitTernaryExpression(AstTernaryExpression node);
    public virtual AstNode VisitTextFilter(AstTextFilter node);
    public virtual AstNode VisitTrimExpression(AstTrimExpression node);
    public virtual AstNode VisitTypeFilterOperation(AstTypeFilterOperation node);
    public virtual AstNode VisitUnaryAccumulatorExpression(AstUnaryAccumulatorExpression node);
    public virtual AstNode VisitUnaryExpression(AstUnaryExpression node);
    public virtual AstNode VisitUnaryWindowExpression(AstUnaryWindowExpression node);
    public virtual AstNode VisitUnionWithStage(AstUnionWithStage node);
    public virtual AstNode VisitUniversalStage(AstUniversalStage node);
    public virtual AstNode VisitUnsetStage(AstUnsetStage node);
    public virtual AstNode VisitUnwindStage(AstUnwindStage node);
    public virtual AstNode VisitVarBinding(AstVarBinding node);
    public virtual AstNode VisitVarExpression(AstVarExpression node);
    public virtual AstNode VisitWhereFilter(AstWhereFilter node);
    public virtual AstNode VisitWindowField(AstWindowField node);
    public virtual AstNode VisitZipExpression(AstZipExpression node);
    [CompilerGeneratedAttribute]
internal static AstNode[] <Visit>g__InitializeNewNodes|1_0(IReadOnlyList`1<AstNode> oldNodes);
    [CompilerGeneratedAttribute]
internal static TNode[] <VisitAndConvert>g__InitializeNewNodes|6_0(IReadOnlyList`1<TNode> oldNodes);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.BucketAutoWithOutputExpressionStageDefinition`3 : GroupingWithOutputExpressionStageDefinition`3<TInput, IGrouping`2<AggregateBucketAutoResultId`1<TValue>, TInput>, TOutput> {
    private int _buckets;
    private Expression`1<Func`2<TInput, TValue>> _groupBy;
    private AggregateBucketAutoOptions _options;
    public string OperatorName { get; }
    public BucketAutoWithOutputExpressionStageDefinition`3(Expression`1<Func`2<TInput, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<AggregateBucketAutoResultId`1<TValue>, TInput>, TOutput>> output, AggregateBucketAutoOptions options);
    public virtual string get_OperatorName();
    protected virtual AstStage RenderGroupingStage(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, IBsonSerializer`1& groupingOutputSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.BucketWithOutputExpressionStageDefinition`3 : GroupingWithOutputExpressionStageDefinition`3<TInput, IGrouping`2<TValue, TInput>, TOutput> {
    private IReadOnlyList`1<TValue> _boundaries;
    private Expression`1<Func`2<TInput, TValue>> _groupBy;
    private AggregateBucketOptions`1<TValue> _options;
    private ExpressionTranslationOptions _translationOptions;
    public string OperatorName { get; }
    public BucketWithOutputExpressionStageDefinition`3(Expression`1<Func`2<TInput, TValue>> groupBy, IEnumerable`1<TValue> boundaries, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> output, AggregateBucketOptions`1<TValue> options, ExpressionTranslationOptions translationOptions);
    public virtual string get_OperatorName();
    public virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    protected virtual AstStage RenderGroupingStage(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, IBsonSerializer`1& groupingOutputSerializer);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.ExtensionMethods.ExpressionExtensions : object {
    [ExtensionAttribute]
public static object Evaluate(Expression expression);
    [ExtensionAttribute]
public static ValueTuple`2<string, IBsonSerializer> GetCollectionInfo(Expression innerExpression, Expression containerExpression);
    [ExtensionAttribute]
public static TValue GetConstantValue(Expression expression, Expression containingExpression);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.GroupingWithOutputExpressionStageDefinition`3 : PipelineStageDefinition`2<TInput, TOutput> {
    protected Expression`1<Func`2<TGrouping, TOutput>> _output;
    public GroupingWithOutputExpressionStageDefinition`3(Expression`1<Func`2<TGrouping, TOutput>> output);
    public virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    protected abstract virtual AstStage RenderGroupingStage(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, IBsonSerializer`1& groupingOutputSerializer);
    private AstStage RenderProjectStage(IBsonSerializer`1<TGrouping> inputSerializer, IBsonSerializerRegistry serializerRegistry, IBsonSerializer`1& outputSerializer);
    private IReadOnlyList`1<AstStage> OptimizeGroupingStages(AstStage groupingStage, AstStage projectStage, IBsonSerializer inputSerializer, IBsonSerializer outputSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.GroupWithOutputExpressionStageDefinition`3 : GroupingWithOutputExpressionStageDefinition`3<TInput, IGrouping`2<TValue, TInput>, TOutput> {
    private Expression`1<Func`2<TInput, TValue>> _groupBy;
    private ExpressionTranslationOptions _translationOptions;
    public string OperatorName { get; }
    public GroupWithOutputExpressionStageDefinition`3(Expression`1<Func`2<TInput, TValue>> groupBy, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> output, ExpressionTranslationOptions translationOptions);
    public virtual string get_OperatorName();
    public virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    protected virtual AstStage RenderGroupingStage(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, IBsonSerializer`1& groupingOutputSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.LinqProviderAdapterV3 : LinqProviderAdapter {
    internal virtual IMongoQueryable`1<TDocument> AsQueryable(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions options);
    internal virtual IMongoQueryable`1<NoPipelineInput> AsQueryable(IMongoDatabase database, IClientSessionHandle session, AggregateOptions options);
    public virtual string ToString();
    internal virtual BsonValue TranslateExpressionToAggregateExpression(Expression`1<Func`2<TSource, TResult>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions, TranslationContextData contextData);
    internal virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToBucketOutputProjection(Expression`1<Func`2<TInput, TValue>> valueExpression, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> outputExpression, IBsonSerializer`1<TInput> documentSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal virtual RenderedFieldDefinition TranslateExpressionToField(LambdaExpression expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    internal virtual RenderedFieldDefinition`1<TField> TranslateExpressionToField(Expression`1<Func`2<TDocument, TField>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, bool allowScalarValueForArrayField);
    internal virtual BsonDocument TranslateExpressionToFilter(Expression`1<Func`2<TDocument, bool>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    internal virtual RenderedProjectionDefinition`1<TProjection> TranslateExpressionToFindProjection(Expression`1<Func`2<TSource, TProjection>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry);
    internal virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToGroupProjection(Expression`1<Func`2<TInput, TKey>> idExpression, Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> groupExpression, IBsonSerializer`1<TInput> documentSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToProjection(Expression`1<Func`2<TInput, TOutput>> expression, IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    private RenderedProjectionDefinition`1<TOutput> TranslateExpressionToProjection(Expression`1<Func`2<TInput, TOutput>> expression, IBsonSerializer`1<TInput> inputSerializer, Func`2<AggregationExpression, ValueTuple`2<IReadOnlyList`1<AstProjectStageSpecification>, IBsonSerializer>> projectionCreator, AstSimplifier simplifier);
    internal virtual BsonDocument TranslateExpressionToSetStage(Expression`1<Func`2<TDocument, TFields>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [CompilerGeneratedAttribute]
internal static Expression <TranslateExpressionToField>g__RemovePossibleConvertToObject|5_0(Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.ArraySerializerHelper : object {
    public static IBsonSerializer GetItemSerializer(IBsonSerializer serializer);
    public static IBsonSerializer GetItemSerializer(Expression expression, IBsonSerializer serializer);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.AsReadOnlyListExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<T> AsReadOnlyList(IEnumerable`1<T> list);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> AsReadOnlyList(IReadOnlyList`1<T> list);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.ConstructorInfoExtensions : object {
    [ExtensionAttribute]
public static bool Is(ConstructorInfo constructor, ConstructorInfo comparand);
    [ExtensionAttribute]
public static bool IsOneOf(ConstructorInfo constructor, ConstructorInfo comparand1, ConstructorInfo comparand2);
    [ExtensionAttribute]
public static bool IsOneOf(ConstructorInfo constructor, ConstructorInfo comparand1, ConstructorInfo comparand2, ConstructorInfo comparand3);
    [ExtensionAttribute]
public static bool IsOneOf(ConstructorInfo constructor, ConstructorInfo comparand1, ConstructorInfo comparand2, ConstructorInfo comparand3, ConstructorInfo comparand4);
    [ExtensionAttribute]
public static bool IsOneOf(ConstructorInfo constructor, ConstructorInfo[] comparands);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.ConvertHelper : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ValueTuple`2[] __wideningConverts;
    private static ConvertHelper();
    public static IBsonSerializer CreateWiderSerializer(Type narrowerType, Type widerType);
    public static bool IsWideningConvert(Type sourceType, Type targetType);
    public static Expression RemoveConvertToMongoQueryable(Expression expression);
    public static Expression RemoveConvertToEnumUnderlyingType(Expression expression);
    public static Expression RemoveConvertToInterface(Expression expression);
    public static Expression RemoveConvertToObject(Expression expression);
    public static Expression RemoveWideningConvert(Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.DocumentSerializerHelper : object {
    public static bool AreMembersRepresentedAsFields(IBsonSerializer serializer, IBsonDocumentSerializer& documentSerializer);
    public static MemberSerializationInfo GetMemberSerializationInfo(IBsonSerializer serializer, string memberName);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.ExpressionHelper : object {
    public static LambdaExpression UnquoteLambda(Expression expression);
    public static LambdaExpression UnquoteLambdaIfQueryableMethod(MethodInfo method, Expression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.ExpressionReplacer : ExpressionVisitor {
    private Expression _original;
    private Expression _replacement;
    private ExpressionReplacer(Expression original, Expression replacement);
    public static Expression Replace(Expression node, Expression original, Expression replacement);
    public virtual Expression Visit(Expression node);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.Grouping`2 : object {
    private TKey _key;
    private List`1<TElement> _elements;
    public TKey Key { get; }
    public Grouping`2(TKey key, List`1<TElement> elements);
    public sealed virtual TKey get_Key();
    public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.LambdaExpressionExtensions : object {
    [ExtensionAttribute]
public static string GetFieldPath(LambdaExpression fieldSelectorLambda, TranslationContext context, IBsonSerializer parameterSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.MemberSerializationInfo : object {
    private string _elementName;
    private IReadOnlyList`1<string> _elementPath;
    private IBsonSerializer _serializer;
    public string ElementName { get; }
    public IReadOnlyList`1<string> ElementPath { get; }
    public IBsonSerializer Serializer { get; }
    public MemberSerializationInfo(string elementName, IBsonSerializer serializer);
    public MemberSerializationInfo(IReadOnlyList`1<string> elementPath, IBsonSerializer serializer);
    public string get_ElementName();
    public IReadOnlyList`1<string> get_ElementPath();
    public IBsonSerializer get_Serializer();
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.MethodCallExpressionExtensions : object {
    [ExtensionAttribute]
public static Type GetResultType(MethodCallExpression expression);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static bool Is(MethodInfo method, MethodInfo comparand);
    [ExtensionAttribute]
public static bool IsOneOf(MethodInfo method, MethodInfo comparand1, MethodInfo comparand2);
    [ExtensionAttribute]
public static bool IsOneOf(MethodInfo method, MethodInfo comparand1, MethodInfo comparand2, MethodInfo comparand3);
    [ExtensionAttribute]
public static bool IsOneOf(MethodInfo method, MethodInfo comparand1, MethodInfo comparand2, MethodInfo comparand3, MethodInfo comparand4);
    [ExtensionAttribute]
public static bool IsOneOf(MethodInfo method, MethodInfo[] comparands);
    [ExtensionAttribute]
public static bool IsOneOf(MethodInfo method, MethodInfo[][] comparands);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.NameGenerator : object {
    private int _parameterCounter;
    private int _varCounter;
    public string GetParameterName(ParameterExpression parameter);
    public string GetVarName(string symbolName);
    [CompilerGeneratedAttribute]
internal static bool <GetVarName>g__IsValidVarName|3_0(string name);
    [CompilerGeneratedAttribute]
internal static bool <GetVarName>g__IsValidFirstChar|3_2(char c);
    [CompilerGeneratedAttribute]
internal static bool <GetVarName>g__IsValidSubsequentChar|3_3(char c);
    [CompilerGeneratedAttribute]
internal static bool <GetVarName>g__IsBetween|3_4(char c, char x, char y);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.NestedAsQueryableHelper : object {
    public static void EnsureQueryableMethodHasNestedAsQueryableSource(MethodCallExpression expression, AggregationExpression sourceTranslation);
    public static void EnsureQueryableMethodHasNestedAsOrderedQueryableSource(MethodCallExpression expression, AggregationExpression sourceTranslation);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.PartialEvaluator : object {
    private static Type[] __customLinqExtensionMethodClasses;
    private static PartialEvaluator();
    public static Expression EvaluatePartially(Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.ProjectionHelper : object {
    public static ValueTuple`2<IReadOnlyList`1<AstProjectStageSpecification>, IBsonSerializer> CreateAggregationProjection(AggregationExpression expression);
    public static ValueTuple`2<IReadOnlyList`1<AstProjectStageSpecification>, IBsonSerializer> CreateFindProjection(AggregationExpression expression);
    public static ValueTuple`2<AstProjectStage, IBsonSerializer> CreateProjectStage(AggregationExpression expression);
    private static ValueTuple`2<IReadOnlyList`1<AstProjectStageSpecification>, IBsonSerializer> CreateComputedDocumentProjection(AggregationExpression expression);
    private static ValueTuple`2<IReadOnlyList`1<AstProjectStageSpecification>, IBsonSerializer> CreateFindGetFieldProjection(AggregationExpression expression);
    private static ValueTuple`2<string, IBsonSerializer> CreateGetFieldChainWithSafeFieldNamesProjection(AstGetFieldExpression getFieldExpression, IBsonSerializer serializer);
    private static ValueTuple`2<IReadOnlyList`1<AstProjectStageSpecification>, IBsonSerializer> CreateWrappedValueProjection(AggregationExpression expression);
    private static bool IsGetFieldChainWithSafeFieldNames(AstGetFieldExpression getFieldExpression);
    private static AstExpression QuoteIfNecessary(AstExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <QuoteIfNecessary>g__ValueNeedsToBeQuoted|8_0(BsonValue value);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool Is(PropertyInfo property, PropertyInfo comparand);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyInfo property, PropertyInfo comparand1, PropertyInfo comparand2);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyInfo property, PropertyInfo comparand1, PropertyInfo comparand2, PropertyInfo comparand3);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyInfo property, PropertyInfo comparand1, PropertyInfo comparand2, PropertyInfo comparand3, PropertyInfo comparand4);
    [ExtensionAttribute]
public static bool IsOneOf(PropertyInfo property, PropertyInfo[] comparands);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.ReferenceEqualityComparer`1 : object {
    [CompilerGeneratedAttribute]
private static ReferenceEqualityComparer`1<T> <Instance>k__BackingField;
    public static ReferenceEqualityComparer`1<T> Instance { get; }
    private static ReferenceEqualityComparer`1();
    [CompilerGeneratedAttribute]
public static ReferenceEqualityComparer`1<T> get_Instance();
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.SerializationHelper : object {
    public static void EnsureRepresentationIsArray(Expression expression, IBsonSerializer serializer);
    public static void EnsureRepresentationIsNumeric(Expression expression, AggregationExpression translation);
    public static void EnsureRepresentationIsNumeric(Expression expression, IBsonSerializer serializer);
    public static BsonType GetRepresentation(IBsonSerializer serializer);
    public static bool IsIntegerRepresentation(BsonType representation);
    public static bool IsNumericRepresentation(BsonType representation);
    public static bool IsRepresentedAsDocument(IBsonSerializer serializer);
    public static bool IsRepresentedAsInteger(IBsonSerializer serializer);
    public static bool IsRepresentedAsIntegerOrNullableInteger(AggregationExpression translation);
    public static bool IsRepresentedAsIntegerOrNullableInteger(IBsonSerializer serializer);
    public static BsonValue SerializeValue(IBsonSerializer serializer, ConstantExpression constantExpression, Expression containingExpression);
    public static BsonValue SerializeValue(IBsonSerializer serializer, object value);
    public static BsonArray SerializeValues(IBsonSerializer itemSerializer, IEnumerable values);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.StringMethod : object {
    private static MethodInfo __anyStringInWithEnumerable;
    private static MethodInfo __anyStringInWithParams;
    private static MethodInfo __anyStringNinWithEnumerable;
    private static MethodInfo __anyStringNinWithParams;
    private static MethodInfo __concatWith1Object;
    private static MethodInfo __concatWith2Objects;
    private static MethodInfo __concatWith3Objects;
    private static MethodInfo __concatWithObjectArray;
    private static MethodInfo __concatWith2Strings;
    private static MethodInfo __concatWith3Strings;
    private static MethodInfo __concatWith4Strings;
    private static MethodInfo __concatWithStringArray;
    private static MethodInfo __containsWithChar;
    private static MethodInfo __containsWithCharAndComparisonType;
    private static MethodInfo __containsWithString;
    private static MethodInfo __containsWithStringAndComparisonType;
    private static MethodInfo __endsWithWithChar;
    private static MethodInfo __endsWithWithString;
    private static MethodInfo __endsWithWithStringAndComparisonType;
    private static MethodInfo __endsWithWithStringAndIgnoreCaseAndCulture;
    private static MethodInfo __getChars;
    private static MethodInfo __indexOfAny;
    private static MethodInfo __indexOfAnyWithStartIndex;
    private static MethodInfo __indexOfAnyWithStartIndexAndCount;
    private static MethodInfo __indexOfBytesWithValue;
    private static MethodInfo __indexOfBytesWithValueAndStartIndex;
    private static MethodInfo __indexOfBytesWithValueAndStartIndexAndCount;
    private static MethodInfo __indexOfWithChar;
    private static MethodInfo __indexOfWithCharAndStartIndex;
    private static MethodInfo __indexOfWithCharAndStartIndexAndCount;
    private static MethodInfo __indexOfWithString;
    private static MethodInfo __indexOfWithStringAndStartIndex;
    private static MethodInfo __indexOfWithStringAndStartIndexAndCount;
    private static MethodInfo __indexOfWithStringAndComparisonType;
    private static MethodInfo __indexOfWithStringAndStartIndexAndComparisonType;
    private static MethodInfo __indexOfWithStringAndStartIndexAndCountAndComparisonType;
    private static MethodInfo __isNullOrEmpty;
    private static MethodInfo __isNullOrWhiteSpace;
    private static MethodInfo __splitWithChars;
    private static MethodInfo __splitWithCharsAndCount;
    private static MethodInfo __splitWithCharsAndCountAndOptions;
    private static MethodInfo __splitWithCharsAndOptions;
    private static MethodInfo __splitWithStringsAndCountAndOptions;
    private static MethodInfo __splitWithStringsAndOptions;
    private static MethodInfo __startsWithWithChar;
    private static MethodInfo __startsWithWithString;
    private static MethodInfo __startsWithWithStringAndComparisonType;
    private static MethodInfo __startsWithWithStringAndIgnoreCaseAndCulture;
    private static MethodInfo __stringInWithEnumerable;
    private static MethodInfo __stringInWithParams;
    private static MethodInfo __stringNinWithEnumerable;
    private static MethodInfo __stringNinWithParams;
    private static MethodInfo __strLenBytes;
    private static MethodInfo __substrBytes;
    private static MethodInfo __substring;
    private static MethodInfo __substringWithLength;
    private static MethodInfo __toLower;
    private static MethodInfo __toLowerInvariant;
    private static MethodInfo __toLowerWithCulture;
    private static MethodInfo __toUpper;
    private static MethodInfo __toUpperInvariant;
    private static MethodInfo __toUpperWithCulture;
    private static MethodInfo __trim;
    private static MethodInfo __trimEnd;
    private static MethodInfo __trimStart;
    private static MethodInfo __trimWithChars;
    public static MethodInfo AnyStringInWithEnumerable { get; }
    public static MethodInfo AnyStringInWithParams { get; }
    public static MethodInfo AnyStringNinWithEnumerable { get; }
    public static MethodInfo AnyStringNinWithParams { get; }
    public static MethodInfo ConcatWith1Object { get; }
    public static MethodInfo ConcatWith2Objects { get; }
    public static MethodInfo ConcatWith3Objects { get; }
    public static MethodInfo ConcatWithObjectArray { get; }
    public static MethodInfo ConcatWith2Strings { get; }
    public static MethodInfo ConcatWith3Strings { get; }
    public static MethodInfo ConcatWith4Strings { get; }
    public static MethodInfo ConcatWithStringArray { get; }
    public static MethodInfo ContainsWithChar { get; }
    public static MethodInfo ContainsWithCharAndComparisonType { get; }
    public static MethodInfo ContainsWithString { get; }
    public static MethodInfo ContainsWithStringAndComparisonType { get; }
    public static MethodInfo EndsWithWithChar { get; }
    public static MethodInfo EndsWithWithString { get; }
    public static MethodInfo EndsWithWithStringAndComparisonType { get; }
    public static MethodInfo EndsWithWithStringAndIgnoreCaseAndCulture { get; }
    public static MethodInfo GetChars { get; }
    public static MethodInfo IndexOfAny { get; }
    public static MethodInfo IndexOfAnyWithStartIndex { get; }
    public static MethodInfo IndexOfAnyWithStartIndexAndCount { get; }
    public static MethodInfo IndexOfBytesWithValue { get; }
    public static MethodInfo IndexOfBytesWithValueAndStartIndex { get; }
    public static MethodInfo IndexOfBytesWithValueAndStartIndexAndCount { get; }
    public static MethodInfo IndexOfWithChar { get; }
    public static MethodInfo IndexOfWithCharAndStartIndex { get; }
    public static MethodInfo IndexOfWithCharAndStartIndexAndCount { get; }
    public static MethodInfo IndexOfWithString { get; }
    public static MethodInfo IndexOfWithStringAndStartIndex { get; }
    public static MethodInfo IndexOfWithStringAndStartIndexAndCount { get; }
    public static MethodInfo IndexOfWithStringAndComparisonType { get; }
    public static MethodInfo IndexOfWithStringAndStartIndexAndComparisonType { get; }
    public static MethodInfo IndexOfWithStringAndStartIndexAndCountAndComparisonType { get; }
    public static MethodInfo IsNullOrEmpty { get; }
    public static MethodInfo IsNullOrWhiteSpace { get; }
    public static MethodInfo SplitWithChars { get; }
    public static MethodInfo SplitWithCharsAndCount { get; }
    public static MethodInfo SplitWithCharsAndCountAndOptions { get; }
    public static MethodInfo SplitWithCharsAndOptions { get; }
    public static MethodInfo SplitWithStringsAndCountAndOptions { get; }
    public static MethodInfo SplitWithStringsAndOptions { get; }
    public static MethodInfo StartsWithWithChar { get; }
    public static MethodInfo StartsWithWithString { get; }
    public static MethodInfo StartsWithWithStringAndComparisonType { get; }
    public static MethodInfo StartsWithWithStringAndIgnoreCaseAndCulture { get; }
    public static MethodInfo StringInWithEnumerable { get; }
    public static MethodInfo StringInWithParams { get; }
    public static MethodInfo StringNinWithEnumerable { get; }
    public static MethodInfo StringNinWithParams { get; }
    public static MethodInfo StrLenBytes { get; }
    public static MethodInfo SubstrBytes { get; }
    public static MethodInfo Substring { get; }
    public static MethodInfo SubstringWithLength { get; }
    public static MethodInfo ToLower { get; }
    public static MethodInfo ToLowerInvariant { get; }
    public static MethodInfo ToLowerWithCulture { get; }
    public static MethodInfo ToUpper { get; }
    public static MethodInfo ToUpperInvariant { get; }
    public static MethodInfo ToUpperWithCulture { get; }
    public static MethodInfo Trim { get; }
    public static MethodInfo TrimEnd { get; }
    public static MethodInfo TrimStart { get; }
    public static MethodInfo TrimWithChars { get; }
    private static StringMethod();
    public static MethodInfo get_AnyStringInWithEnumerable();
    public static MethodInfo get_AnyStringInWithParams();
    public static MethodInfo get_AnyStringNinWithEnumerable();
    public static MethodInfo get_AnyStringNinWithParams();
    public static MethodInfo get_ConcatWith1Object();
    public static MethodInfo get_ConcatWith2Objects();
    public static MethodInfo get_ConcatWith3Objects();
    public static MethodInfo get_ConcatWithObjectArray();
    public static MethodInfo get_ConcatWith2Strings();
    public static MethodInfo get_ConcatWith3Strings();
    public static MethodInfo get_ConcatWith4Strings();
    public static MethodInfo get_ConcatWithStringArray();
    public static MethodInfo get_ContainsWithChar();
    public static MethodInfo get_ContainsWithCharAndComparisonType();
    public static MethodInfo get_ContainsWithString();
    public static MethodInfo get_ContainsWithStringAndComparisonType();
    public static MethodInfo get_EndsWithWithChar();
    public static MethodInfo get_EndsWithWithString();
    public static MethodInfo get_EndsWithWithStringAndComparisonType();
    public static MethodInfo get_EndsWithWithStringAndIgnoreCaseAndCulture();
    public static MethodInfo get_GetChars();
    public static MethodInfo get_IndexOfAny();
    public static MethodInfo get_IndexOfAnyWithStartIndex();
    public static MethodInfo get_IndexOfAnyWithStartIndexAndCount();
    public static MethodInfo get_IndexOfBytesWithValue();
    public static MethodInfo get_IndexOfBytesWithValueAndStartIndex();
    public static MethodInfo get_IndexOfBytesWithValueAndStartIndexAndCount();
    public static MethodInfo get_IndexOfWithChar();
    public static MethodInfo get_IndexOfWithCharAndStartIndex();
    public static MethodInfo get_IndexOfWithCharAndStartIndexAndCount();
    public static MethodInfo get_IndexOfWithString();
    public static MethodInfo get_IndexOfWithStringAndStartIndex();
    public static MethodInfo get_IndexOfWithStringAndStartIndexAndCount();
    public static MethodInfo get_IndexOfWithStringAndComparisonType();
    public static MethodInfo get_IndexOfWithStringAndStartIndexAndComparisonType();
    public static MethodInfo get_IndexOfWithStringAndStartIndexAndCountAndComparisonType();
    public static MethodInfo get_IsNullOrEmpty();
    public static MethodInfo get_IsNullOrWhiteSpace();
    public static MethodInfo get_SplitWithChars();
    public static MethodInfo get_SplitWithCharsAndCount();
    public static MethodInfo get_SplitWithCharsAndCountAndOptions();
    public static MethodInfo get_SplitWithCharsAndOptions();
    public static MethodInfo get_SplitWithStringsAndCountAndOptions();
    public static MethodInfo get_SplitWithStringsAndOptions();
    public static MethodInfo get_StartsWithWithChar();
    public static MethodInfo get_StartsWithWithString();
    public static MethodInfo get_StartsWithWithStringAndComparisonType();
    public static MethodInfo get_StartsWithWithStringAndIgnoreCaseAndCulture();
    public static MethodInfo get_StringInWithEnumerable();
    public static MethodInfo get_StringInWithParams();
    public static MethodInfo get_StringNinWithEnumerable();
    public static MethodInfo get_StringNinWithParams();
    public static MethodInfo get_StrLenBytes();
    public static MethodInfo get_SubstrBytes();
    public static MethodInfo get_Substring();
    public static MethodInfo get_SubstringWithLength();
    public static MethodInfo get_ToLower();
    public static MethodInfo get_ToLowerInvariant();
    public static MethodInfo get_ToLowerWithCulture();
    public static MethodInfo get_ToUpper();
    public static MethodInfo get_ToUpperInvariant();
    public static MethodInfo get_ToUpperWithCulture();
    public static MethodInfo get_Trim();
    public static MethodInfo get_TrimEnd();
    public static MethodInfo get_TrimStart();
    public static MethodInfo get_TrimWithChars();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.Symbol : object {
    private AstExpression _ast;
    private bool _isCurrent;
    private string _name;
    private ParameterExpression _parameter;
    private IBsonSerializer _serializer;
    public AstExpression Ast { get; }
    public bool IsCurrent { get; }
    public string Name { get; }
    public ParameterExpression Parameter { get; }
    public IBsonSerializer Serializer { get; }
    public AstVarExpression Var { get; }
    public Symbol(ParameterExpression parameter, string name, AstExpression ast, IBsonSerializer serializer, bool isCurrent);
    public AstExpression get_Ast();
    public bool get_IsCurrent();
    public string get_Name();
    public ParameterExpression get_Parameter();
    public IBsonSerializer get_Serializer();
    public AstVarExpression get_Var();
    public Symbol AsNotCurrent();
    public virtual string ToString();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Misc.SymbolTable : object {
    private IReadOnlyList`1<Symbol> _symbols;
    public IReadOnlyList`1<Symbol> Symbols { get; }
    public SymbolTable(Symbol symbol);
    public SymbolTable(IEnumerable`1<Symbol> symbols);
    public IReadOnlyList`1<Symbol> get_Symbols();
    public virtual string ToString();
    public bool TryGetSymbol(ParameterExpression parameter, Symbol& symbol);
    public SymbolTable WithSymbol(Symbol newSymbol);
    public SymbolTable WithSymbols(Symbol[] newSymbols);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Misc.TypeExtensions : object {
    private static Type[] __dictionaryInterfaces;
    private static Type[] __tupleTypeDefinitions;
    private static Type[] __valueTupleTypeDefinitions;
    private static TypeExtensions();
    [ExtensionAttribute]
public static Type GetIEnumerableGenericInterface(Type enumerableType);
    [ExtensionAttribute]
public static bool Implements(Type type, Type interface);
    [ExtensionAttribute]
public static bool ImplementsDictionaryInterface(Type type, Type& keyType, Type& valueType);
    [ExtensionAttribute]
public static bool ImplementsIEnumerable(Type type, Type& itemType);
    [ExtensionAttribute]
public static bool ImplementsIEnumerableOf(Type type, Type itemType);
    [ExtensionAttribute]
public static bool ImplementsIList(Type type, Type& itemType);
    [ExtensionAttribute]
public static bool Is(Type type, Type comparand);
    [ExtensionAttribute]
public static bool IsAnonymous(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsEnum(Type type, Type& enumType, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsEnumOrNullableEnum(Type type, Type& enumType, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type, Type& valueType);
    [ExtensionAttribute]
public static bool IsNullableEnum(Type type);
    [ExtensionAttribute]
public static bool IsNullableEnum(Type type, Type& enumType, Type& underlyingType);
    [ExtensionAttribute]
public static bool IsNullableOf(Type type, Type valueType);
    [ExtensionAttribute]
public static bool IsSameAsOrNullableOf(Type type, Type valueType);
    [ExtensionAttribute]
public static bool IsTuple(Type type);
    [ExtensionAttribute]
public static bool IsTupleOrValueTuple(Type type);
    [ExtensionAttribute]
public static bool IsValueTuple(Type type);
    [ExtensionAttribute]
public static bool TryGetGenericInterface(Type type, Type[] interfaceDefinitions, Type& genericInterface);
    [ExtensionAttribute]
public static bool TryGetIEnumerableGenericInterface(Type type, Type& ienumerableGenericInterface);
    [ExtensionAttribute]
public static bool TryGetIListGenericInterface(Type type, Type& ilistGenericInterface);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.MongoQuery`1 : object {
    public abstract virtual IAsyncCursor`1<TOutput> Execute();
    public abstract virtual Task`1<IAsyncCursor`1<TOutput>> ExecuteAsync();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.MongoQuery`2 : MongoQuery`1<TOutput> {
    private Expression _expression;
    private MongoQueryProvider`1<TDocument> _provider;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public BsonDocument[] LoggedStages { get; }
    public IMongoQueryProvider Provider { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public MongoQuery`2(MongoQueryProvider`1<TDocument> provider);
    public MongoQuery`2(MongoQueryProvider`1<TDocument> provider, Expression expression);
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual BsonDocument[] get_LoggedStages();
    public sealed virtual IMongoQueryProvider get_Provider();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public virtual IAsyncCursor`1<TOutput> Execute();
    public virtual Task`1<IAsyncCursor`1<TOutput>> ExecuteAsync();
    public sealed virtual IEnumerator`1<TOutput> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual QueryableExecutionModel GetExecutionModel();
    public sealed virtual IAsyncCursor`1<TOutput> ToCursor(CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<TOutput>> ToCursorAsync(CancellationToken cancellationToken);
    public virtual string ToString();
    private sealed virtual override Task`1<bool> MongoDB.Driver.IMongoQueryableForwarder<TOutput>.AnyAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<TOutput> MongoDB.Driver.IMongoQueryableForwarder<TOutput>.FirstAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<TOutput> MongoDB.Driver.IMongoQueryableForwarder<TOutput>.FirstOrDefaultAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<TOutput> MongoDB.Driver.IMongoQueryableForwarder<TOutput>.SingleAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<TOutput> MongoDB.Driver.IMongoQueryableForwarder<TOutput>.SingleOrDefaultAsync(CancellationToken cancellationToken);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.MongoQueryProvider : object {
    protected AggregateOptions _options;
    protected IClientSessionHandle _session;
    public CollectionNamespace CollectionNamespace { get; }
    public BsonDocument[] LoggedStages { get; }
    public AggregateOptions Options { get; }
    public IBsonSerializer PipelineInputSerializer { get; }
    public IClientSessionHandle Session { get; }
    protected MongoQueryProvider(IClientSessionHandle session, AggregateOptions options);
    public abstract virtual CollectionNamespace get_CollectionNamespace();
    public abstract virtual BsonDocument[] get_LoggedStages();
    public AggregateOptions get_Options();
    public abstract virtual IBsonSerializer get_PipelineInputSerializer();
    public IClientSessionHandle get_Session();
    public abstract virtual IQueryable CreateQuery(Expression expression);
    public abstract virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public abstract virtual QueryableExecutionModel GetExecutionModel(Expression expression);
    public abstract virtual object Execute(Expression expression);
    public abstract virtual TResult Execute(Expression expression);
    public abstract virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.MongoQueryProvider`1 : MongoQueryProvider {
    private IMongoCollection`1<TDocument> _collection;
    private IMongoDatabase _database;
    private ExecutableQuery`1<TDocument> _executedQuery;
    public IMongoCollection`1<TDocument> Collection { get; }
    public CollectionNamespace CollectionNamespace { get; }
    public IMongoDatabase Database { get; }
    public BsonDocument[] LoggedStages { get; }
    public IBsonSerializer PipelineInputSerializer { get; }
    public MongoQueryProvider`1(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions options);
    public MongoQueryProvider`1(IMongoDatabase database, IClientSessionHandle session, AggregateOptions options);
    public IMongoCollection`1<TDocument> get_Collection();
    public virtual CollectionNamespace get_CollectionNamespace();
    public IMongoDatabase get_Database();
    public virtual BsonDocument[] get_LoggedStages();
    public virtual IBsonSerializer get_PipelineInputSerializer();
    public virtual IQueryable CreateQuery(Expression expression);
    public virtual IQueryable`1<TOutput> CreateQuery(Expression expression);
    public virtual QueryableExecutionModel GetExecutionModel(Expression expression);
    public virtual object Execute(Expression expression);
    public virtual TResult Execute(Expression expression);
    public TResult Execute(ExecutableQuery`2<TDocument, TResult> executableQuery, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public Task`1<TResult> ExecuteAsync(ExecutableQuery`2<TDocument, TResult> executableQuery, CancellationToken cancellationToken);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.ArrayMethod : object {
    private static MethodInfo __exists;
    public static MethodInfo Exists { get; }
    private static ArrayMethod();
    public static MethodInfo get_Exists();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.BsonValueMethod : object {
    private static MethodInfo __getItemWithInt;
    private static MethodInfo __getItemWithString;
    public static MethodInfo GetItemWithInt { get; }
    public static MethodInfo GetItemWithString { get; }
    private static BsonValueMethod();
    public static MethodInfo get_GetItemWithInt();
    public static MethodInfo get_GetItemWithString();
    public static bool IsGetItemWithIntMethod(MethodInfo method);
    public static bool IsGetItemWithStringMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.DateTimeConstructor : object {
    private static ConstructorInfo __withYearMonthDay;
    private static ConstructorInfo __withYearMonthDayHourMinuteSecond;
    private static ConstructorInfo __withYearMonthDayHourMinuteSecondMillisecond;
    public static ConstructorInfo WithYearMonthDay { get; }
    public static ConstructorInfo WithYearMonthDayHourMinuteSecond { get; }
    public static ConstructorInfo WithYearMonthDayHourMinuteSecondMillisecond { get; }
    private static DateTimeConstructor();
    public static ConstructorInfo get_WithYearMonthDay();
    public static ConstructorInfo get_WithYearMonthDayHourMinuteSecond();
    public static ConstructorInfo get_WithYearMonthDayHourMinuteSecondMillisecond();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.DateTimeMethod : object {
    private static MethodInfo __add;
    private static MethodInfo __addDays;
    private static MethodInfo __addDaysWithTimezone;
    private static MethodInfo __addHours;
    private static MethodInfo __addHoursWithTimezone;
    private static MethodInfo __addMilliseconds;
    private static MethodInfo __addMillisecondsWithTimezone;
    private static MethodInfo __addMinutes;
    private static MethodInfo __addMinutesWithTimezone;
    private static MethodInfo __addMonths;
    private static MethodInfo __addMonthsWithTimezone;
    private static MethodInfo __addQuarters;
    private static MethodInfo __addQuartersWithTimezone;
    private static MethodInfo __addSeconds;
    private static MethodInfo __addSecondsWithTimezone;
    private static MethodInfo __addTicks;
    private static MethodInfo __addWeeks;
    private static MethodInfo __addWeeksWithTimezone;
    private static MethodInfo __addWithTimezone;
    private static MethodInfo __addWithUnit;
    private static MethodInfo __addWithUnitAndTimezone;
    private static MethodInfo __addYears;
    private static MethodInfo __addYearsWithTimezone;
    private static MethodInfo __parse;
    private static MethodInfo __subtractWithDateTime;
    private static MethodInfo __subtractWithDateTimeAndTimezone;
    private static MethodInfo __subtractWithDateTimeAndUnit;
    private static MethodInfo __subtractWithDateTimeAndUnitAndTimezone;
    private static MethodInfo __subtractWithTimeSpan;
    private static MethodInfo __subtractWithTimeSpanAndTimezone;
    private static MethodInfo __subtractWithUnit;
    private static MethodInfo __subtractWithUnitAndTimezone;
    private static MethodInfo __toStringWithFormat;
    private static MethodInfo __toStringWithFormatAndTimezone;
    private static MethodInfo __truncate;
    private static MethodInfo __truncateWithBinSize;
    private static MethodInfo __truncateWithBinSizeAndTimezone;
    private static MethodInfo __week;
    private static MethodInfo __weekWithTimezone;
    public static MethodInfo Add { get; }
    public static MethodInfo AddDays { get; }
    public static MethodInfo AddDaysWithTimezone { get; }
    public static MethodInfo AddHours { get; }
    public static MethodInfo AddHoursWithTimezone { get; }
    public static MethodInfo AddMilliseconds { get; }
    public static MethodInfo AddMillisecondsWithTimezone { get; }
    public static MethodInfo AddMinutes { get; }
    public static MethodInfo AddMinutesWithTimezone { get; }
    public static MethodInfo AddMonths { get; }
    public static MethodInfo AddMonthsWithTimezone { get; }
    public static MethodInfo AddQuarters { get; }
    public static MethodInfo AddQuartersWithTimezone { get; }
    public static MethodInfo AddSeconds { get; }
    public static MethodInfo AddSecondsWithTimezone { get; }
    public static MethodInfo AddTicks { get; }
    public static MethodInfo AddWeeks { get; }
    public static MethodInfo AddWeeksWithTimezone { get; }
    public static MethodInfo AddWithTimezone { get; }
    public static MethodInfo AddWithUnit { get; }
    public static MethodInfo AddWithUnitAndTimezone { get; }
    public static MethodInfo AddYears { get; }
    public static MethodInfo AddYearsWithTimezone { get; }
    public static MethodInfo Parse { get; }
    public static MethodInfo SubtractWithDateTime { get; }
    public static MethodInfo SubtractWithDateTimeAndTimezone { get; }
    public static MethodInfo SubtractWithDateTimeAndUnit { get; }
    public static MethodInfo SubtractWithDateTimeAndUnitAndTimezone { get; }
    public static MethodInfo SubtractWithTimeSpan { get; }
    public static MethodInfo SubtractWithTimeSpanAndTimezone { get; }
    public static MethodInfo SubtractWithUnit { get; }
    public static MethodInfo SubtractWithUnitAndTimezone { get; }
    public static MethodInfo ToStringWithFormat { get; }
    public static MethodInfo ToStringWithFormatAndTimezone { get; }
    public static MethodInfo Truncate { get; }
    public static MethodInfo TruncateWithBinSize { get; }
    public static MethodInfo TruncateWithBinSizeAndTimezone { get; }
    public static MethodInfo Week { get; }
    public static MethodInfo WeekWithTimezone { get; }
    private static DateTimeMethod();
    public static MethodInfo get_Add();
    public static MethodInfo get_AddDays();
    public static MethodInfo get_AddDaysWithTimezone();
    public static MethodInfo get_AddHours();
    public static MethodInfo get_AddHoursWithTimezone();
    public static MethodInfo get_AddMilliseconds();
    public static MethodInfo get_AddMillisecondsWithTimezone();
    public static MethodInfo get_AddMinutes();
    public static MethodInfo get_AddMinutesWithTimezone();
    public static MethodInfo get_AddMonths();
    public static MethodInfo get_AddMonthsWithTimezone();
    public static MethodInfo get_AddQuarters();
    public static MethodInfo get_AddQuartersWithTimezone();
    public static MethodInfo get_AddSeconds();
    public static MethodInfo get_AddSecondsWithTimezone();
    public static MethodInfo get_AddTicks();
    public static MethodInfo get_AddWeeks();
    public static MethodInfo get_AddWeeksWithTimezone();
    public static MethodInfo get_AddWithTimezone();
    public static MethodInfo get_AddWithUnit();
    public static MethodInfo get_AddWithUnitAndTimezone();
    public static MethodInfo get_AddYears();
    public static MethodInfo get_AddYearsWithTimezone();
    public static MethodInfo get_Parse();
    public static MethodInfo get_SubtractWithDateTime();
    public static MethodInfo get_SubtractWithDateTimeAndTimezone();
    public static MethodInfo get_SubtractWithDateTimeAndUnit();
    public static MethodInfo get_SubtractWithDateTimeAndUnitAndTimezone();
    public static MethodInfo get_SubtractWithTimeSpan();
    public static MethodInfo get_SubtractWithTimeSpanAndTimezone();
    public static MethodInfo get_SubtractWithUnit();
    public static MethodInfo get_SubtractWithUnitAndTimezone();
    public static MethodInfo get_ToStringWithFormat();
    public static MethodInfo get_ToStringWithFormatAndTimezone();
    public static MethodInfo get_Truncate();
    public static MethodInfo get_TruncateWithBinSize();
    public static MethodInfo get_TruncateWithBinSizeAndTimezone();
    public static MethodInfo get_Week();
    public static MethodInfo get_WeekWithTimezone();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.DictionaryMethod : object {
    public static bool IsGetItemWithStringMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.EnumerableMethod : object {
    private static MethodInfo __aggregateWithFunc;
    private static MethodInfo __aggregateWithSeedAndFunc;
    private static MethodInfo __aggregateWithSeedFuncAndResultSelector;
    private static MethodInfo __all;
    private static MethodInfo __any;
    private static MethodInfo __anyWithPredicate;
    private static MethodInfo __averageDecimal;
    private static MethodInfo __averageDecimalWithSelector;
    private static MethodInfo __averageDouble;
    private static MethodInfo __averageDoubleWithSelector;
    private static MethodInfo __averageInt32;
    private static MethodInfo __averageInt32WithSelector;
    private static MethodInfo __averageInt64;
    private static MethodInfo __averageInt64WithSelector;
    private static MethodInfo __averageNullableDecimal;
    private static MethodInfo __averageNullableDecimalWithSelector;
    private static MethodInfo __averageNullableDouble;
    private static MethodInfo __averageNullableDoubleWithSelector;
    private static MethodInfo __averageNullableInt32;
    private static MethodInfo __averageNullableInt32WithSelector;
    private static MethodInfo __averageNullableInt64;
    private static MethodInfo __averageNullableInt64WithSelector;
    private static MethodInfo __averageNullableSingle;
    private static MethodInfo __averageNullableSingleWithSelector;
    private static MethodInfo __averageSingle;
    private static MethodInfo __averageSingleWithSelector;
    private static MethodInfo __bottom;
    private static MethodInfo __bottomN;
    private static MethodInfo __bottomNWithComputedN;
    private static MethodInfo __cast;
    private static MethodInfo __concat;
    private static MethodInfo __contains;
    private static MethodInfo __count;
    private static MethodInfo __countWithPredicate;
    private static MethodInfo __defaultIfEmpty;
    private static MethodInfo __defaultIfEmptyWithDefaultValue;
    private static MethodInfo __distinct;
    private static MethodInfo __elementAt;
    private static MethodInfo __elementAtOrDefault;
    private static MethodInfo __except;
    private static MethodInfo __first;
    private static MethodInfo __firstN;
    private static MethodInfo __firstNWithComputedN;
    private static MethodInfo __firstOrDefault;
    private static MethodInfo __firstOrDefaultWithPredicate;
    private static MethodInfo __firstWithPredicate;
    private static MethodInfo __groupBy;
    private static MethodInfo __groupByWithKeySelectorAndElementSelector;
    private static MethodInfo __groupByWithKeySelectorAndResultSelector;
    private static MethodInfo __groupByWithKeySelectorElementSelectorAndResultSelector;
    private static MethodInfo __groupJoin;
    private static MethodInfo __intersect;
    private static MethodInfo __join;
    private static MethodInfo __last;
    private static MethodInfo __lastN;
    private static MethodInfo __lastNWithComputedN;
    private static MethodInfo __lastOrDefault;
    private static MethodInfo __lastOrDefaultWithPredicate;
    private static MethodInfo __lastWithPredicate;
    private static MethodInfo __longCount;
    private static MethodInfo __longCountWithPredicate;
    private static MethodInfo __max;
    private static MethodInfo __maxDecimal;
    private static MethodInfo __maxDecimalWithSelector;
    private static MethodInfo __maxDouble;
    private static MethodInfo __maxDoubleWithSelector;
    private static MethodInfo __maxInt32;
    private static MethodInfo __maxInt32WithSelector;
    private static MethodInfo __maxInt64;
    private static MethodInfo __maxInt64WithSelector;
    private static MethodInfo __maxN;
    private static MethodInfo __maxNullableDecimal;
    private static MethodInfo __maxNullableDecimalWithSelector;
    private static MethodInfo __maxNullableDouble;
    private static MethodInfo __maxNullableDoubleWithSelector;
    private static MethodInfo __maxNullableInt32;
    private static MethodInfo __maxNullableInt32WithSelector;
    private static MethodInfo __maxNullableInt64;
    private static MethodInfo __maxNullableInt64WithSelector;
    private static MethodInfo __maxNullableSingle;
    private static MethodInfo __maxNullableSingleWithSelector;
    private static MethodInfo __maxNWithComputedN;
    private static MethodInfo __maxSingle;
    private static MethodInfo __maxSingleWithSelector;
    private static MethodInfo __maxWithSelector;
    private static MethodInfo __min;
    private static MethodInfo __minDecimal;
    private static MethodInfo __minDecimalWithSelector;
    private static MethodInfo __minDouble;
    private static MethodInfo __minDoubleWithSelector;
    private static MethodInfo __minInt32;
    private static MethodInfo __minInt32WithSelector;
    private static MethodInfo __minInt64;
    private static MethodInfo __minInt64WithSelector;
    private static MethodInfo __minN;
    private static MethodInfo __minNullableDecimal;
    private static MethodInfo __minNullableDecimalWithSelector;
    private static MethodInfo __minNullableDouble;
    private static MethodInfo __minNullableDoubleWithSelector;
    private static MethodInfo __minNullableInt32;
    private static MethodInfo __minNullableInt32WithSelector;
    private static MethodInfo __minNullableInt64;
    private static MethodInfo __minNullableInt64WithSelector;
    private static MethodInfo __minNullableSingle;
    private static MethodInfo __minNullableSingleWithSelector;
    private static MethodInfo __minNWithComputedN;
    private static MethodInfo __minSingle;
    private static MethodInfo __minSingleWithSelector;
    private static MethodInfo __minWithSelector;
    private static MethodInfo __ofType;
    private static MethodInfo __orderBy;
    private static MethodInfo __orderByDescending;
    private static MethodInfo __range;
    private static MethodInfo __repeat;
    private static MethodInfo __reverse;
    private static MethodInfo __select;
    private static MethodInfo __selectMany;
    private static MethodInfo __selectManyWithCollectionSelectorAndResultSelector;
    private static MethodInfo __selectManyWithCollectionSelectorTakingIndexAndResultSelector;
    private static MethodInfo __selectManyWithSelectorTakingIndex;
    private static MethodInfo __selectWithSelectorTakingIndex;
    private static MethodInfo __sequenceEqual;
    private static MethodInfo __single;
    private static MethodInfo __singleOrDefault;
    private static MethodInfo __singleOrDefaultWithPredicate;
    private static MethodInfo __singleWithPredicate;
    private static MethodInfo __skip;
    private static MethodInfo __sumDecimal;
    private static MethodInfo __sumDecimalWithSelector;
    private static MethodInfo __sumDouble;
    private static MethodInfo __sumDoubleWithSelector;
    private static MethodInfo __sumInt32;
    private static MethodInfo __sumInt32WithSelector;
    private static MethodInfo __sumInt64;
    private static MethodInfo __sumInt64WithSelector;
    private static MethodInfo __sumNullableDecimal;
    private static MethodInfo __sumNullableDecimalWithSelector;
    private static MethodInfo __sumNullableDouble;
    private static MethodInfo __sumNullableDoubleWithSelector;
    private static MethodInfo __sumNullableInt32;
    private static MethodInfo __sumNullableInt32WithSelector;
    private static MethodInfo __sumNullableInt64;
    private static MethodInfo __sumNullableInt64WithSelector;
    private static MethodInfo __sumNullableSingle;
    private static MethodInfo __sumNullableSingleWithSelector;
    private static MethodInfo __sumSingle;
    private static MethodInfo __sumSingleWithSelector;
    private static MethodInfo __take;
    private static MethodInfo __thenBy;
    private static MethodInfo __thenByDescending;
    private static MethodInfo __toArray;
    private static MethodInfo __toList;
    private static MethodInfo __top;
    private static MethodInfo __topN;
    private static MethodInfo __topNWithComputedN;
    private static MethodInfo __union;
    private static MethodInfo __where;
    private static MethodInfo __whereWithPredicateTakingIndex;
    private static MethodInfo __zip;
    public static MethodInfo AggregateWithFunc { get; }
    public static MethodInfo AggregateWithSeedAndFunc { get; }
    public static MethodInfo AggregateWithSeedFuncAndResultSelector { get; }
    public static MethodInfo All { get; }
    public static MethodInfo Any { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AverageDecimal { get; }
    public static MethodInfo AverageDecimalWithSelector { get; }
    public static MethodInfo AverageDouble { get; }
    public static MethodInfo AverageDoubleWithSelector { get; }
    public static MethodInfo AverageInt32 { get; }
    public static MethodInfo AverageInt32WithSelector { get; }
    public static MethodInfo AverageInt64 { get; }
    public static MethodInfo AverageInt64WithSelector { get; }
    public static MethodInfo AverageNullableDecimal { get; }
    public static MethodInfo AverageNullableDecimalWithSelector { get; }
    public static MethodInfo AverageNullableDouble { get; }
    public static MethodInfo AverageNullableDoubleWithSelector { get; }
    public static MethodInfo AverageNullableInt32 { get; }
    public static MethodInfo AverageNullableInt32WithSelector { get; }
    public static MethodInfo AverageNullableInt64 { get; }
    public static MethodInfo AverageNullableInt64WithSelector { get; }
    public static MethodInfo AverageNullableSingle { get; }
    public static MethodInfo AverageNullableSingleWithSelector { get; }
    public static MethodInfo AverageSingle { get; }
    public static MethodInfo AverageSingleWithSelector { get; }
    public static MethodInfo Bottom { get; }
    public static MethodInfo BottomN { get; }
    public static MethodInfo BottomNWithComputedN { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo Count { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmpty { get; }
    public static MethodInfo DefaultIfEmptyWithDefaultValue { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo First { get; }
    public static MethodInfo FirstN { get; }
    public static MethodInfo FirstNWithComputedN { get; }
    public static MethodInfo FirstOrDefault { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo GroupBy { get; }
    public static MethodInfo GroupByWithKeySelectorAndElementSelector { get; }
    public static MethodInfo GroupByWithKeySelectorAndResultSelector { get; }
    public static MethodInfo GroupByWithKeySelectorElementSelectorAndResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo Last { get; }
    public static MethodInfo LastN { get; }
    public static MethodInfo LastNWithComputedN { get; }
    public static MethodInfo LastOrDefault { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LongCount { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo Max { get; }
    public static MethodInfo MaxDecimal { get; }
    public static MethodInfo MaxDecimalWithSelector { get; }
    public static MethodInfo MaxDouble { get; }
    public static MethodInfo MaxDoubleWithSelector { get; }
    public static MethodInfo MaxInt32 { get; }
    public static MethodInfo MaxInt32WithSelector { get; }
    public static MethodInfo MaxInt64 { get; }
    public static MethodInfo MaxInt64WithSelector { get; }
    public static MethodInfo MaxN { get; }
    public static MethodInfo MaxNullableDecimal { get; }
    public static MethodInfo MaxNullableDecimalWithSelector { get; }
    public static MethodInfo MaxNullableDouble { get; }
    public static MethodInfo MaxNullableDoubleWithSelector { get; }
    public static MethodInfo MaxNullableInt32 { get; }
    public static MethodInfo MaxNullableInt32WithSelector { get; }
    public static MethodInfo MaxNullableInt64 { get; }
    public static MethodInfo MaxNullableInt64WithSelector { get; }
    public static MethodInfo MaxNullableSingle { get; }
    public static MethodInfo MaxNullableSingleWithSelector { get; }
    public static MethodInfo MaxNWithComputedN { get; }
    public static MethodInfo MaxSingle { get; }
    public static MethodInfo MaxSingleWithSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo Min { get; }
    public static MethodInfo MinDecimal { get; }
    public static MethodInfo MinDecimalWithSelector { get; }
    public static MethodInfo MinDouble { get; }
    public static MethodInfo MinDoubleWithSelector { get; }
    public static MethodInfo MinInt32 { get; }
    public static MethodInfo MinInt32WithSelector { get; }
    public static MethodInfo MinInt64 { get; }
    public static MethodInfo MinInt64WithSelector { get; }
    public static MethodInfo MinN { get; }
    public static MethodInfo MinNullableDecimal { get; }
    public static MethodInfo MinNullableDecimalWithSelector { get; }
    public static MethodInfo MinNullableDouble { get; }
    public static MethodInfo MinNullableDoubleWithSelector { get; }
    public static MethodInfo MinNullableInt32 { get; }
    public static MethodInfo MinNullableInt32WithSelector { get; }
    public static MethodInfo MinNullableInt64 { get; }
    public static MethodInfo MinNullableInt64WithSelector { get; }
    public static MethodInfo MinNullableSingle { get; }
    public static MethodInfo MinNullableSingleWithSelector { get; }
    public static MethodInfo MinNWithComputedN { get; }
    public static MethodInfo MinSingle { get; }
    public static MethodInfo MinSingleWithSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Range { get; }
    public static MethodInfo Repeat { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectMany { get; }
    public static MethodInfo SelectManyWithCollectionSelectorAndResultSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelectorTakingIndexAndResultSelector { get; }
    public static MethodInfo SelectManyWithSelectorTakingIndex { get; }
    public static MethodInfo SelectWithSelectorTakingIndex { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo Single { get; }
    public static MethodInfo SingleOrDefault { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SumDecimal { get; }
    public static MethodInfo SumDecimalWithSelector { get; }
    public static MethodInfo SumDouble { get; }
    public static MethodInfo SumDoubleWithSelector { get; }
    public static MethodInfo SumInt32 { get; }
    public static MethodInfo SumInt32WithSelector { get; }
    public static MethodInfo SumInt64 { get; }
    public static MethodInfo SumInt64WithSelector { get; }
    public static MethodInfo SumNullableDecimal { get; }
    public static MethodInfo SumNullableDecimalWithSelector { get; }
    public static MethodInfo SumNullableDouble { get; }
    public static MethodInfo SumNullableDoubleWithSelector { get; }
    public static MethodInfo SumNullableInt32 { get; }
    public static MethodInfo SumNullableInt32WithSelector { get; }
    public static MethodInfo SumNullableInt64 { get; }
    public static MethodInfo SumNullableInt64WithSelector { get; }
    public static MethodInfo SumNullableSingle { get; }
    public static MethodInfo SumNullableSingleWithSelector { get; }
    public static MethodInfo SumSingle { get; }
    public static MethodInfo SumSingleWithSelector { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Top { get; }
    public static MethodInfo TopN { get; }
    public static MethodInfo TopNWithComputedN { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    public static MethodInfo WhereWithPredicateTakingIndex { get; }
    public static MethodInfo Zip { get; }
    private static EnumerableMethod();
    public static MethodInfo get_AggregateWithFunc();
    public static MethodInfo get_AggregateWithSeedAndFunc();
    public static MethodInfo get_AggregateWithSeedFuncAndResultSelector();
    public static MethodInfo get_All();
    public static MethodInfo get_Any();
    public static MethodInfo get_AnyWithPredicate();
    public static MethodInfo get_AverageDecimal();
    public static MethodInfo get_AverageDecimalWithSelector();
    public static MethodInfo get_AverageDouble();
    public static MethodInfo get_AverageDoubleWithSelector();
    public static MethodInfo get_AverageInt32();
    public static MethodInfo get_AverageInt32WithSelector();
    public static MethodInfo get_AverageInt64();
    public static MethodInfo get_AverageInt64WithSelector();
    public static MethodInfo get_AverageNullableDecimal();
    public static MethodInfo get_AverageNullableDecimalWithSelector();
    public static MethodInfo get_AverageNullableDouble();
    public static MethodInfo get_AverageNullableDoubleWithSelector();
    public static MethodInfo get_AverageNullableInt32();
    public static MethodInfo get_AverageNullableInt32WithSelector();
    public static MethodInfo get_AverageNullableInt64();
    public static MethodInfo get_AverageNullableInt64WithSelector();
    public static MethodInfo get_AverageNullableSingle();
    public static MethodInfo get_AverageNullableSingleWithSelector();
    public static MethodInfo get_AverageSingle();
    public static MethodInfo get_AverageSingleWithSelector();
    public static MethodInfo get_Bottom();
    public static MethodInfo get_BottomN();
    public static MethodInfo get_BottomNWithComputedN();
    public static MethodInfo get_Cast();
    public static MethodInfo get_Concat();
    public static MethodInfo get_Contains();
    public static MethodInfo get_Count();
    public static MethodInfo get_CountWithPredicate();
    public static MethodInfo get_DefaultIfEmpty();
    public static MethodInfo get_DefaultIfEmptyWithDefaultValue();
    public static MethodInfo get_Distinct();
    public static MethodInfo get_ElementAt();
    public static MethodInfo get_ElementAtOrDefault();
    public static MethodInfo get_Except();
    public static MethodInfo get_First();
    public static MethodInfo get_FirstN();
    public static MethodInfo get_FirstNWithComputedN();
    public static MethodInfo get_FirstOrDefault();
    public static MethodInfo get_FirstOrDefaultWithPredicate();
    public static MethodInfo get_FirstWithPredicate();
    public static MethodInfo get_GroupBy();
    public static MethodInfo get_GroupByWithKeySelectorAndElementSelector();
    public static MethodInfo get_GroupByWithKeySelectorAndResultSelector();
    public static MethodInfo get_GroupByWithKeySelectorElementSelectorAndResultSelector();
    public static MethodInfo get_GroupJoin();
    public static MethodInfo get_Intersect();
    public static MethodInfo get_Join();
    public static MethodInfo get_Last();
    public static MethodInfo get_LastN();
    public static MethodInfo get_LastNWithComputedN();
    public static MethodInfo get_LastOrDefault();
    public static MethodInfo get_LastOrDefaultWithPredicate();
    public static MethodInfo get_LastWithPredicate();
    public static MethodInfo get_LongCount();
    public static MethodInfo get_LongCountWithPredicate();
    public static MethodInfo get_Max();
    public static MethodInfo get_MaxDecimal();
    public static MethodInfo get_MaxDecimalWithSelector();
    public static MethodInfo get_MaxDouble();
    public static MethodInfo get_MaxDoubleWithSelector();
    public static MethodInfo get_MaxInt32();
    public static MethodInfo get_MaxInt32WithSelector();
    public static MethodInfo get_MaxInt64();
    public static MethodInfo get_MaxInt64WithSelector();
    public static MethodInfo get_MaxN();
    public static MethodInfo get_MaxNullableDecimal();
    public static MethodInfo get_MaxNullableDecimalWithSelector();
    public static MethodInfo get_MaxNullableDouble();
    public static MethodInfo get_MaxNullableDoubleWithSelector();
    public static MethodInfo get_MaxNullableInt32();
    public static MethodInfo get_MaxNullableInt32WithSelector();
    public static MethodInfo get_MaxNullableInt64();
    public static MethodInfo get_MaxNullableInt64WithSelector();
    public static MethodInfo get_MaxNullableSingle();
    public static MethodInfo get_MaxNullableSingleWithSelector();
    public static MethodInfo get_MaxNWithComputedN();
    public static MethodInfo get_MaxSingle();
    public static MethodInfo get_MaxSingleWithSelector();
    public static MethodInfo get_MaxWithSelector();
    public static MethodInfo get_Min();
    public static MethodInfo get_MinDecimal();
    public static MethodInfo get_MinDecimalWithSelector();
    public static MethodInfo get_MinDouble();
    public static MethodInfo get_MinDoubleWithSelector();
    public static MethodInfo get_MinInt32();
    public static MethodInfo get_MinInt32WithSelector();
    public static MethodInfo get_MinInt64();
    public static MethodInfo get_MinInt64WithSelector();
    public static MethodInfo get_MinN();
    public static MethodInfo get_MinNullableDecimal();
    public static MethodInfo get_MinNullableDecimalWithSelector();
    public static MethodInfo get_MinNullableDouble();
    public static MethodInfo get_MinNullableDoubleWithSelector();
    public static MethodInfo get_MinNullableInt32();
    public static MethodInfo get_MinNullableInt32WithSelector();
    public static MethodInfo get_MinNullableInt64();
    public static MethodInfo get_MinNullableInt64WithSelector();
    public static MethodInfo get_MinNullableSingle();
    public static MethodInfo get_MinNullableSingleWithSelector();
    public static MethodInfo get_MinNWithComputedN();
    public static MethodInfo get_MinSingle();
    public static MethodInfo get_MinSingleWithSelector();
    public static MethodInfo get_MinWithSelector();
    public static MethodInfo get_OfType();
    public static MethodInfo get_OrderBy();
    public static MethodInfo get_OrderByDescending();
    public static MethodInfo get_Range();
    public static MethodInfo get_Repeat();
    public static MethodInfo get_Reverse();
    public static MethodInfo get_Select();
    public static MethodInfo get_SelectMany();
    public static MethodInfo get_SelectManyWithCollectionSelectorAndResultSelector();
    public static MethodInfo get_SelectManyWithCollectionSelectorTakingIndexAndResultSelector();
    public static MethodInfo get_SelectManyWithSelectorTakingIndex();
    public static MethodInfo get_SelectWithSelectorTakingIndex();
    public static MethodInfo get_SequenceEqual();
    public static MethodInfo get_Single();
    public static MethodInfo get_SingleOrDefault();
    public static MethodInfo get_SingleOrDefaultWithPredicate();
    public static MethodInfo get_SingleWithPredicate();
    public static MethodInfo get_Skip();
    public static MethodInfo get_SumDecimal();
    public static MethodInfo get_SumDecimalWithSelector();
    public static MethodInfo get_SumDouble();
    public static MethodInfo get_SumDoubleWithSelector();
    public static MethodInfo get_SumInt32();
    public static MethodInfo get_SumInt32WithSelector();
    public static MethodInfo get_SumInt64();
    public static MethodInfo get_SumInt64WithSelector();
    public static MethodInfo get_SumNullableDecimal();
    public static MethodInfo get_SumNullableDecimalWithSelector();
    public static MethodInfo get_SumNullableDouble();
    public static MethodInfo get_SumNullableDoubleWithSelector();
    public static MethodInfo get_SumNullableInt32();
    public static MethodInfo get_SumNullableInt32WithSelector();
    public static MethodInfo get_SumNullableInt64();
    public static MethodInfo get_SumNullableInt64WithSelector();
    public static MethodInfo get_SumNullableSingle();
    public static MethodInfo get_SumNullableSingleWithSelector();
    public static MethodInfo get_SumSingle();
    public static MethodInfo get_SumSingleWithSelector();
    public static MethodInfo get_Take();
    public static MethodInfo get_ThenBy();
    public static MethodInfo get_ThenByDescending();
    public static MethodInfo get_ToArray();
    public static MethodInfo get_ToList();
    public static MethodInfo get_Top();
    public static MethodInfo get_TopN();
    public static MethodInfo get_TopNWithComputedN();
    public static MethodInfo get_Union();
    public static MethodInfo get_Where();
    public static MethodInfo get_WhereWithPredicateTakingIndex();
    public static MethodInfo get_Zip();
    public static bool IsContainsMethod(MethodCallExpression methodCallExpression, Expression& sourceExpression, Expression& valueExpression);
    public static bool IsToArrayMethod(MethodCallExpression methodCallExpression, Expression& sourceExpression);
    public static MethodInfo MakeSelect(Type sourceType, Type resultType);
    public static MethodInfo MakeWhere(Type tsource);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.EnumerableProperty : object {
    public static bool IsCountProperty(MemberExpression expression);
    [CompilerGeneratedAttribute]
internal static bool <IsCountProperty>g__ImplementsCollectionInterface|0_0(Type type);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.EnumMethod : object {
    private static MethodInfo __hasFlag;
    public static MethodInfo HasFlag { get; }
    private static EnumMethod();
    public static MethodInfo get_HasFlag();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.IComparableMethod : object {
    public static bool IsCompareToMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.IListMethod : object {
    public static bool IsGetItemWithIntMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.LinqExtensionsMethod : object {
    private static MethodInfo __inject;
    public static MethodInfo Inject { get; }
    private static LinqExtensionsMethod();
    public static MethodInfo get_Inject();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.ListMethod : object {
    public static bool IsExistsMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.MathMethod : object {
    private static MethodInfo __absDecimal;
    private static MethodInfo __absDouble;
    private static MethodInfo __absInt16;
    private static MethodInfo __absInt32;
    private static MethodInfo __absInt64;
    private static MethodInfo __absSByte;
    private static MethodInfo __absSingle;
    private static MethodInfo __acos;
    private static MethodInfo __acosh;
    private static MethodInfo __asin;
    private static MethodInfo __asinh;
    private static MethodInfo __atan;
    private static MethodInfo __atan2;
    private static MethodInfo __atanh;
    private static MethodInfo __ceilingWithDecimal;
    private static MethodInfo __ceilingWithDouble;
    private static MethodInfo __cos;
    private static MethodInfo __cosh;
    private static MethodInfo __exp;
    private static MethodInfo __floorWithDecimal;
    private static MethodInfo __floorWithDouble;
    private static MethodInfo __log;
    private static MethodInfo __logWithNewBase;
    private static MethodInfo __log10;
    private static MethodInfo __pow;
    private static MethodInfo __roundWithDecimal;
    private static MethodInfo __roundWithDecimalAndDecimals;
    private static MethodInfo __roundWithDouble;
    private static MethodInfo __roundWithDoubleAndDigits;
    private static MethodInfo __sin;
    private static MethodInfo __sinh;
    private static MethodInfo __sqrt;
    private static MethodInfo __tan;
    private static MethodInfo __tanh;
    private static MethodInfo __truncateDecimal;
    private static MethodInfo __truncateDouble;
    public static MethodInfo AbsDecimal { get; }
    public static MethodInfo AbsDouble { get; }
    public static MethodInfo AbsInt16 { get; }
    public static MethodInfo AbsInt32 { get; }
    public static MethodInfo AbsInt64 { get; }
    public static MethodInfo AbsSByte { get; }
    public static MethodInfo AbsSingle { get; }
    public static MethodInfo Acos { get; }
    public static MethodInfo Acosh { get; }
    public static MethodInfo Asin { get; }
    public static MethodInfo Asinh { get; }
    public static MethodInfo Atan { get; }
    public static MethodInfo Atan2 { get; }
    public static MethodInfo Atanh { get; }
    public static MethodInfo CeilingWithDecimal { get; }
    public static MethodInfo CeilingWithDouble { get; }
    public static MethodInfo Cos { get; }
    public static MethodInfo Cosh { get; }
    public static MethodInfo Exp { get; }
    public static MethodInfo FloorWithDecimal { get; }
    public static MethodInfo FloorWithDouble { get; }
    public static MethodInfo Log { get; }
    public static MethodInfo LogWithNewBase { get; }
    public static MethodInfo Log10 { get; }
    public static MethodInfo Pow { get; }
    public static MethodInfo RoundWithDecimal { get; }
    public static MethodInfo RoundWithDecimalAndDecimals { get; }
    public static MethodInfo RoundWithDouble { get; }
    public static MethodInfo RoundWithDoubleAndDigits { get; }
    public static MethodInfo Sin { get; }
    public static MethodInfo Sinh { get; }
    public static MethodInfo Sqrt { get; }
    public static MethodInfo Tan { get; }
    public static MethodInfo Tanh { get; }
    public static MethodInfo TruncateDecimal { get; }
    public static MethodInfo TruncateDouble { get; }
    private static MathMethod();
    public static MethodInfo get_AbsDecimal();
    public static MethodInfo get_AbsDouble();
    public static MethodInfo get_AbsInt16();
    public static MethodInfo get_AbsInt32();
    public static MethodInfo get_AbsInt64();
    public static MethodInfo get_AbsSByte();
    public static MethodInfo get_AbsSingle();
    public static MethodInfo get_Acos();
    public static MethodInfo get_Acosh();
    public static MethodInfo get_Asin();
    public static MethodInfo get_Asinh();
    public static MethodInfo get_Atan();
    public static MethodInfo get_Atan2();
    public static MethodInfo get_Atanh();
    public static MethodInfo get_CeilingWithDecimal();
    public static MethodInfo get_CeilingWithDouble();
    public static MethodInfo get_Cos();
    public static MethodInfo get_Cosh();
    public static MethodInfo get_Exp();
    public static MethodInfo get_FloorWithDecimal();
    public static MethodInfo get_FloorWithDouble();
    public static MethodInfo get_Log();
    public static MethodInfo get_LogWithNewBase();
    public static MethodInfo get_Log10();
    public static MethodInfo get_Pow();
    public static MethodInfo get_RoundWithDecimal();
    public static MethodInfo get_RoundWithDecimalAndDecimals();
    public static MethodInfo get_RoundWithDouble();
    public static MethodInfo get_RoundWithDoubleAndDigits();
    public static MethodInfo get_Sin();
    public static MethodInfo get_Sinh();
    public static MethodInfo get_Sqrt();
    public static MethodInfo get_Tan();
    public static MethodInfo get_Tanh();
    public static MethodInfo get_TruncateDecimal();
    public static MethodInfo get_TruncateDouble();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.MongoDBMathMethod : object {
    private static MethodInfo __degreesToRadians;
    private static MethodInfo __radiansToDegrees;
    public static MethodInfo DegreesToRadians { get; }
    public static MethodInfo RadiansToDegrees { get; }
    private static MongoDBMathMethod();
    public static MethodInfo get_DegreesToRadians();
    public static MethodInfo get_RadiansToDegrees();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.MongoEnumerableMethod : object {
    private static MethodInfo __allElements;
    private static MethodInfo __allMatchingElements;
    private static MethodInfo __firstMatchingElement;
    private static MethodInfo __whereWithLimit;
    public static MethodInfo AllElements { get; }
    public static MethodInfo AllMatchingElements { get; }
    public static MethodInfo FirstMatchingElement { get; }
    public static MethodInfo WhereWithLimit { get; }
    private static MongoEnumerableMethod();
    public static MethodInfo get_AllElements();
    public static MethodInfo get_AllMatchingElements();
    public static MethodInfo get_FirstMatchingElement();
    public static MethodInfo get_WhereWithLimit();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.MongoQueryableMethod : object {
    private static MethodInfo __anyAsync;
    private static MethodInfo __anyWithPredicateAsync;
    private static MethodInfo __appendStage;
    private static MethodInfo __as;
    private static MethodInfo __averageDecimalAsync;
    private static MethodInfo __averageDecimalWithSelectorAsync;
    private static MethodInfo __averageDoubleAsync;
    private static MethodInfo __averageDoubleWithSelectorAsync;
    private static MethodInfo __averageInt32Async;
    private static MethodInfo __averageInt32WithSelectorAsync;
    private static MethodInfo __averageInt64Async;
    private static MethodInfo __averageInt64WithSelectorAsync;
    private static MethodInfo __averageNullableDecimalAsync;
    private static MethodInfo __averageNullableDecimalWithSelectorAsync;
    private static MethodInfo __averageNullableDoubleAsync;
    private static MethodInfo __averageNullableDoubleWithSelectorAsync;
    private static MethodInfo __averageNullableInt32Async;
    private static MethodInfo __averageNullableInt32WithSelectorAsync;
    private static MethodInfo __averageNullableInt64Async;
    private static MethodInfo __averageNullableInt64WithSelectorAsync;
    private static MethodInfo __averageNullableSingleAsync;
    private static MethodInfo __averageNullableSingleWithSelectorAsync;
    private static MethodInfo __averageSingleAsync;
    private static MethodInfo __averageSingleWithSelectorAsync;
    private static MethodInfo __countAsync;
    private static MethodInfo __countWithPredicateAsync;
    private static MethodInfo __densifyWithArrayPartitionByFields;
    private static MethodInfo __documents;
    private static MethodInfo __documentsWithSerializer;
    private static MethodInfo __firstAsync;
    private static MethodInfo __firstOrDefaultAsync;
    private static MethodInfo __firstOrDefaultWithPredicateAsync;
    private static MethodInfo __firstWithPredicateAsync;
    private static MethodInfo __longCountAsync;
    private static MethodInfo __longCountWithPredicateAsync;
    private static MethodInfo __maxAsync;
    private static MethodInfo __maxWithSelectorAsync;
    private static MethodInfo __minAsync;
    private static MethodInfo __minWithSelectorAsync;
    private static MethodInfo __sample;
    private static MethodInfo __singleAsync;
    private static MethodInfo __singleOrDefaultAsync;
    private static MethodInfo __singleOrDefaultWithPredicateAsync;
    private static MethodInfo __singleWithPredicateAsync;
    private static MethodInfo __skipWithLong;
    private static MethodInfo __standardDeviationPopulationDecimal;
    private static MethodInfo __standardDeviationPopulationDecimalAsync;
    private static MethodInfo __standardDeviationPopulationDecimalWithSelector;
    private static MethodInfo __standardDeviationPopulationDecimalWithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationDouble;
    private static MethodInfo __standardDeviationPopulationDoubleAsync;
    private static MethodInfo __standardDeviationPopulationDoubleWithSelector;
    private static MethodInfo __standardDeviationPopulationDoubleWithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationInt32;
    private static MethodInfo __standardDeviationPopulationInt32Async;
    private static MethodInfo __standardDeviationPopulationInt32WithSelector;
    private static MethodInfo __standardDeviationPopulationInt32WithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationInt64;
    private static MethodInfo __standardDeviationPopulationInt64Async;
    private static MethodInfo __standardDeviationPopulationInt64WithSelector;
    private static MethodInfo __standardDeviationPopulationInt64WithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationNullableDecimal;
    private static MethodInfo __standardDeviationPopulationNullableDecimalAsync;
    private static MethodInfo __standardDeviationPopulationNullableDecimalWithSelector;
    private static MethodInfo __standardDeviationPopulationNullableDecimalWithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationNullableDouble;
    private static MethodInfo __standardDeviationPopulationNullableDoubleAsync;
    private static MethodInfo __standardDeviationPopulationNullableDoubleWithSelector;
    private static MethodInfo __standardDeviationPopulationNullableDoubleWithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationNullableInt32;
    private static MethodInfo __standardDeviationPopulationNullableInt32Async;
    private static MethodInfo __standardDeviationPopulationNullableInt32WithSelector;
    private static MethodInfo __standardDeviationPopulationNullableInt32WithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationNullableInt64;
    private static MethodInfo __standardDeviationPopulationNullableInt64Async;
    private static MethodInfo __standardDeviationPopulationNullableInt64WithSelector;
    private static MethodInfo __standardDeviationPopulationNullableInt64WithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationNullableSingle;
    private static MethodInfo __standardDeviationPopulationNullableSingleAsync;
    private static MethodInfo __standardDeviationPopulationNullableSingleWithSelector;
    private static MethodInfo __standardDeviationPopulationNullableSingleWithSelectorAsync;
    private static MethodInfo __standardDeviationPopulationSingle;
    private static MethodInfo __standardDeviationPopulationSingleAsync;
    private static MethodInfo __standardDeviationPopulationSingleWithSelector;
    private static MethodInfo __standardDeviationPopulationSingleWithSelectorAsync;
    private static MethodInfo __standardDeviationSampleDecimal;
    private static MethodInfo __standardDeviationSampleDecimalAsync;
    private static MethodInfo __standardDeviationSampleDecimalWithSelector;
    private static MethodInfo __standardDeviationSampleDecimalWithSelectorAsync;
    private static MethodInfo __standardDeviationSampleDouble;
    private static MethodInfo __standardDeviationSampleDoubleAsync;
    private static MethodInfo __standardDeviationSampleDoubleWithSelector;
    private static MethodInfo __standardDeviationSampleDoubleWithSelectorAsync;
    private static MethodInfo __standardDeviationSampleInt32;
    private static MethodInfo __standardDeviationSampleInt32Async;
    private static MethodInfo __standardDeviationSampleInt32WithSelector;
    private static MethodInfo __standardDeviationSampleInt32WithSelectorAsync;
    private static MethodInfo __standardDeviationSampleInt64;
    private static MethodInfo __standardDeviationSampleInt64Async;
    private static MethodInfo __standardDeviationSampleInt64WithSelector;
    private static MethodInfo __standardDeviationSampleInt64WithSelectorAsync;
    private static MethodInfo __standardDeviationSampleNullableDecimal;
    private static MethodInfo __standardDeviationSampleNullableDecimalAsync;
    private static MethodInfo __standardDeviationSampleNullableDecimalWithSelector;
    private static MethodInfo __standardDeviationSampleNullableDecimalWithSelectorAsync;
    private static MethodInfo __standardDeviationSampleNullableDouble;
    private static MethodInfo __standardDeviationSampleNullableDoubleAsync;
    private static MethodInfo __standardDeviationSampleNullableDoubleWithSelector;
    private static MethodInfo __standardDeviationSampleNullableDoubleWithSelectorAsync;
    private static MethodInfo __standardDeviationSampleNullableInt32;
    private static MethodInfo __standardDeviationSampleNullableInt32Async;
    private static MethodInfo __standardDeviationSampleNullableInt32WithSelector;
    private static MethodInfo __standardDeviationSampleNullableInt32WithSelectorAsync;
    private static MethodInfo __standardDeviationSampleNullableInt64;
    private static MethodInfo __standardDeviationSampleNullableInt64Async;
    private static MethodInfo __standardDeviationSampleNullableInt64WithSelector;
    private static MethodInfo __standardDeviationSampleNullableInt64WithSelectorAsync;
    private static MethodInfo __standardDeviationSampleNullableSingle;
    private static MethodInfo __standardDeviationSampleNullableSingleAsync;
    private static MethodInfo __standardDeviationSampleNullableSingleWithSelector;
    private static MethodInfo __standardDeviationSampleNullableSingleWithSelectorAsync;
    private static MethodInfo __standardDeviationSampleSingle;
    private static MethodInfo __standardDeviationSampleSingleAsync;
    private static MethodInfo __standardDeviationSampleSingleWithSelector;
    private static MethodInfo __standardDeviationSampleSingleWithSelectorAsync;
    private static MethodInfo __sumDecimalAsync;
    private static MethodInfo __sumDecimalWithSelectorAsync;
    private static MethodInfo __sumDoubleAsync;
    private static MethodInfo __sumDoubleWithSelectorAsync;
    private static MethodInfo __sumInt32Async;
    private static MethodInfo __sumInt32WithSelectorAsync;
    private static MethodInfo __sumInt64Async;
    private static MethodInfo __sumInt64WithSelectorAsync;
    private static MethodInfo __sumNullableDecimalAsync;
    private static MethodInfo __sumNullableDecimalWithSelectorAsync;
    private static MethodInfo __sumNullableDoubleAsync;
    private static MethodInfo __sumNullableDoubleWithSelectorAsync;
    private static MethodInfo __sumNullableInt32Async;
    private static MethodInfo __sumNullableInt32WithSelectorAsync;
    private static MethodInfo __sumNullableInt64Async;
    private static MethodInfo __sumNullableInt64WithSelectorAsync;
    private static MethodInfo __sumNullableSingleAsync;
    private static MethodInfo __sumNullableSingleWithSelectorAsync;
    private static MethodInfo __sumSingleAsync;
    private static MethodInfo __sumSingleWithSelectorAsync;
    private static MethodInfo __takeWithLong;
    public static MethodInfo AnyAsync { get; }
    public static MethodInfo AnyWithPredicateAsync { get; }
    public static MethodInfo AppendStage { get; }
    public static MethodInfo As { get; }
    public static MethodInfo AverageDecimalAsync { get; }
    public static MethodInfo AverageDecimalWithSelectorAsync { get; }
    public static MethodInfo AverageDoubleAsync { get; }
    public static MethodInfo AverageDoubleWithSelectorAsync { get; }
    public static MethodInfo AverageInt32Async { get; }
    public static MethodInfo AverageInt32WithSelectorAsync { get; }
    public static MethodInfo AverageInt64Async { get; }
    public static MethodInfo AverageInt64WithSelectorAsync { get; }
    public static MethodInfo AverageNullableDecimalAsync { get; }
    public static MethodInfo AverageNullableDecimalWithSelectorAsync { get; }
    public static MethodInfo AverageNullableDoubleAsync { get; }
    public static MethodInfo AverageNullableDoubleWithSelectorAsync { get; }
    public static MethodInfo AverageNullableInt32Async { get; }
    public static MethodInfo AverageNullableInt32WithSelectorAsync { get; }
    public static MethodInfo AverageNullableInt64Async { get; }
    public static MethodInfo AverageNullableInt64WithSelectorAsync { get; }
    public static MethodInfo AverageNullableSingleAsync { get; }
    public static MethodInfo AverageNullableSingleWithSelectorAsync { get; }
    public static MethodInfo AverageSingleAsync { get; }
    public static MethodInfo AverageSingleWithSelectorAsync { get; }
    public static MethodInfo CountAsync { get; }
    public static MethodInfo CountWithPredicateAsync { get; }
    public static MethodInfo DensifyWithArrayPartitionByFields { get; }
    public static MethodInfo Documents { get; }
    public static MethodInfo DocumentsWithSerializer { get; }
    public static MethodInfo FirstAsync { get; }
    public static MethodInfo FirstOrDefaultAsync { get; }
    public static MethodInfo FirstOrDefaultWithPredicateAsync { get; }
    public static MethodInfo FirstWithPredicateAsync { get; }
    public static MethodInfo LongCountAsync { get; }
    public static MethodInfo LongCountWithPredicateAsync { get; }
    public static MethodInfo MaxAsync { get; }
    public static MethodInfo MaxWithSelectorAsync { get; }
    public static MethodInfo MinAsync { get; }
    public static MethodInfo MinWithSelectorAsync { get; }
    public static MethodInfo Sample { get; }
    public static MethodInfo SingleAsync { get; }
    public static MethodInfo SingleOrDefaultAsync { get; }
    public static MethodInfo SingleOrDefaultWithPredicateAsync { get; }
    public static MethodInfo SingleWithPredicateAsync { get; }
    public static MethodInfo SkipWithLong { get; }
    public static MethodInfo StandardDeviationPopulationDecimal { get; }
    public static MethodInfo StandardDeviationPopulationDecimalAsync { get; }
    public static MethodInfo StandardDeviationPopulationDecimalWithSelector { get; }
    public static MethodInfo StandardDeviationPopulationDecimalWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationDouble { get; }
    public static MethodInfo StandardDeviationPopulationDoubleAsync { get; }
    public static MethodInfo StandardDeviationPopulationDoubleWithSelector { get; }
    public static MethodInfo StandardDeviationPopulationDoubleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationInt32 { get; }
    public static MethodInfo StandardDeviationPopulationInt32Async { get; }
    public static MethodInfo StandardDeviationPopulationInt32WithSelector { get; }
    public static MethodInfo StandardDeviationPopulationInt32WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationInt64 { get; }
    public static MethodInfo StandardDeviationPopulationInt64Async { get; }
    public static MethodInfo StandardDeviationPopulationInt64WithSelector { get; }
    public static MethodInfo StandardDeviationPopulationInt64WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableDecimal { get; }
    public static MethodInfo StandardDeviationPopulationNullableDecimalAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableDecimalWithSelector { get; }
    public static MethodInfo StandardDeviationPopulationNullableDecimalWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableDouble { get; }
    public static MethodInfo StandardDeviationPopulationNullableDoubleAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableDoubleWithSelector { get; }
    public static MethodInfo StandardDeviationPopulationNullableDoubleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt32 { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt32Async { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt32WithSelector { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt32WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt64 { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt64Async { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt64WithSelector { get; }
    public static MethodInfo StandardDeviationPopulationNullableInt64WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableSingle { get; }
    public static MethodInfo StandardDeviationPopulationNullableSingleAsync { get; }
    public static MethodInfo StandardDeviationPopulationNullableSingleWithSelector { get; }
    public static MethodInfo StandardDeviationPopulationNullableSingleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationPopulationSingle { get; }
    public static MethodInfo StandardDeviationPopulationSingleAsync { get; }
    public static MethodInfo StandardDeviationPopulationSingleWithSelector { get; }
    public static MethodInfo StandardDeviationPopulationSingleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleDecimal { get; }
    public static MethodInfo StandardDeviationSampleDecimalAsync { get; }
    public static MethodInfo StandardDeviationSampleDecimalWithSelector { get; }
    public static MethodInfo StandardDeviationSampleDecimalWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleDouble { get; }
    public static MethodInfo StandardDeviationSampleDoubleAsync { get; }
    public static MethodInfo StandardDeviationSampleDoubleWithSelector { get; }
    public static MethodInfo StandardDeviationSampleDoubleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleInt32 { get; }
    public static MethodInfo StandardDeviationSampleInt32Async { get; }
    public static MethodInfo StandardDeviationSampleInt32WithSelector { get; }
    public static MethodInfo StandardDeviationSampleInt32WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleInt64 { get; }
    public static MethodInfo StandardDeviationSampleInt64Async { get; }
    public static MethodInfo StandardDeviationSampleInt64WithSelector { get; }
    public static MethodInfo StandardDeviationSampleInt64WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableDecimal { get; }
    public static MethodInfo StandardDeviationSampleNullableDecimalAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableDecimalWithSelector { get; }
    public static MethodInfo StandardDeviationSampleNullableDecimalWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableDouble { get; }
    public static MethodInfo StandardDeviationSampleNullableDoubleAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableDoubleWithSelector { get; }
    public static MethodInfo StandardDeviationSampleNullableDoubleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableInt32 { get; }
    public static MethodInfo StandardDeviationSampleNullableInt32Async { get; }
    public static MethodInfo StandardDeviationSampleNullableInt32WithSelector { get; }
    public static MethodInfo StandardDeviationSampleNullableInt32WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableInt64 { get; }
    public static MethodInfo StandardDeviationSampleNullableInt64Async { get; }
    public static MethodInfo StandardDeviationSampleNullableInt64WithSelector { get; }
    public static MethodInfo StandardDeviationSampleNullableInt64WithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableSingle { get; }
    public static MethodInfo StandardDeviationSampleNullableSingleAsync { get; }
    public static MethodInfo StandardDeviationSampleNullableSingleWithSelector { get; }
    public static MethodInfo StandardDeviationSampleNullableSingleWithSelectorAsync { get; }
    public static MethodInfo StandardDeviationSampleSingle { get; }
    public static MethodInfo StandardDeviationSampleSingleAsync { get; }
    public static MethodInfo StandardDeviationSampleSingleWithSelector { get; }
    public static MethodInfo StandardDeviationSampleSingleWithSelectorAsync { get; }
    public static MethodInfo SumDecimalAsync { get; }
    public static MethodInfo SumDecimalWithSelectorAsync { get; }
    public static MethodInfo SumDoubleAsync { get; }
    public static MethodInfo SumDoubleWithSelectorAsync { get; }
    public static MethodInfo SumInt32Async { get; }
    public static MethodInfo SumInt32WithSelectorAsync { get; }
    public static MethodInfo SumInt64Async { get; }
    public static MethodInfo SumInt64WithSelectorAsync { get; }
    public static MethodInfo SumNullableDecimalAsync { get; }
    public static MethodInfo SumNullableDecimalWithSelectorAsync { get; }
    public static MethodInfo SumNullableDoubleAsync { get; }
    public static MethodInfo SumNullableDoubleWithSelectorAsync { get; }
    public static MethodInfo SumNullableInt32Async { get; }
    public static MethodInfo SumNullableInt32WithSelectorAsync { get; }
    public static MethodInfo SumNullableInt64Async { get; }
    public static MethodInfo SumNullableInt64WithSelectorAsync { get; }
    public static MethodInfo SumNullableSingleAsync { get; }
    public static MethodInfo SumNullableSingleWithSelectorAsync { get; }
    public static MethodInfo SumSingleAsync { get; }
    public static MethodInfo SumSingleWithSelectorAsync { get; }
    public static MethodInfo TakeWithLong { get; }
    private static MongoQueryableMethod();
    public static MethodInfo get_AnyAsync();
    public static MethodInfo get_AnyWithPredicateAsync();
    public static MethodInfo get_AppendStage();
    public static MethodInfo get_As();
    public static MethodInfo get_AverageDecimalAsync();
    public static MethodInfo get_AverageDecimalWithSelectorAsync();
    public static MethodInfo get_AverageDoubleAsync();
    public static MethodInfo get_AverageDoubleWithSelectorAsync();
    public static MethodInfo get_AverageInt32Async();
    public static MethodInfo get_AverageInt32WithSelectorAsync();
    public static MethodInfo get_AverageInt64Async();
    public static MethodInfo get_AverageInt64WithSelectorAsync();
    public static MethodInfo get_AverageNullableDecimalAsync();
    public static MethodInfo get_AverageNullableDecimalWithSelectorAsync();
    public static MethodInfo get_AverageNullableDoubleAsync();
    public static MethodInfo get_AverageNullableDoubleWithSelectorAsync();
    public static MethodInfo get_AverageNullableInt32Async();
    public static MethodInfo get_AverageNullableInt32WithSelectorAsync();
    public static MethodInfo get_AverageNullableInt64Async();
    public static MethodInfo get_AverageNullableInt64WithSelectorAsync();
    public static MethodInfo get_AverageNullableSingleAsync();
    public static MethodInfo get_AverageNullableSingleWithSelectorAsync();
    public static MethodInfo get_AverageSingleAsync();
    public static MethodInfo get_AverageSingleWithSelectorAsync();
    public static MethodInfo get_CountAsync();
    public static MethodInfo get_CountWithPredicateAsync();
    public static MethodInfo get_DensifyWithArrayPartitionByFields();
    public static MethodInfo get_Documents();
    public static MethodInfo get_DocumentsWithSerializer();
    public static MethodInfo get_FirstAsync();
    public static MethodInfo get_FirstOrDefaultAsync();
    public static MethodInfo get_FirstOrDefaultWithPredicateAsync();
    public static MethodInfo get_FirstWithPredicateAsync();
    public static MethodInfo get_LongCountAsync();
    public static MethodInfo get_LongCountWithPredicateAsync();
    public static MethodInfo get_MaxAsync();
    public static MethodInfo get_MaxWithSelectorAsync();
    public static MethodInfo get_MinAsync();
    public static MethodInfo get_MinWithSelectorAsync();
    public static MethodInfo get_Sample();
    public static MethodInfo get_SingleAsync();
    public static MethodInfo get_SingleOrDefaultAsync();
    public static MethodInfo get_SingleOrDefaultWithPredicateAsync();
    public static MethodInfo get_SingleWithPredicateAsync();
    public static MethodInfo get_SkipWithLong();
    public static MethodInfo get_StandardDeviationPopulationDecimal();
    public static MethodInfo get_StandardDeviationPopulationDecimalAsync();
    public static MethodInfo get_StandardDeviationPopulationDecimalWithSelector();
    public static MethodInfo get_StandardDeviationPopulationDecimalWithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationDouble();
    public static MethodInfo get_StandardDeviationPopulationDoubleAsync();
    public static MethodInfo get_StandardDeviationPopulationDoubleWithSelector();
    public static MethodInfo get_StandardDeviationPopulationDoubleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationInt32();
    public static MethodInfo get_StandardDeviationPopulationInt32Async();
    public static MethodInfo get_StandardDeviationPopulationInt32WithSelector();
    public static MethodInfo get_StandardDeviationPopulationInt32WithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationInt64();
    public static MethodInfo get_StandardDeviationPopulationInt64Async();
    public static MethodInfo get_StandardDeviationPopulationInt64WithSelector();
    public static MethodInfo get_StandardDeviationPopulationInt64WithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableDecimal();
    public static MethodInfo get_StandardDeviationPopulationNullableDecimalAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableDecimalWithSelector();
    public static MethodInfo get_StandardDeviationPopulationNullableDecimalWithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableDouble();
    public static MethodInfo get_StandardDeviationPopulationNullableDoubleAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableDoubleWithSelector();
    public static MethodInfo get_StandardDeviationPopulationNullableDoubleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableInt32();
    public static MethodInfo get_StandardDeviationPopulationNullableInt32Async();
    public static MethodInfo get_StandardDeviationPopulationNullableInt32WithSelector();
    public static MethodInfo get_StandardDeviationPopulationNullableInt32WithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableInt64();
    public static MethodInfo get_StandardDeviationPopulationNullableInt64Async();
    public static MethodInfo get_StandardDeviationPopulationNullableInt64WithSelector();
    public static MethodInfo get_StandardDeviationPopulationNullableInt64WithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableSingle();
    public static MethodInfo get_StandardDeviationPopulationNullableSingleAsync();
    public static MethodInfo get_StandardDeviationPopulationNullableSingleWithSelector();
    public static MethodInfo get_StandardDeviationPopulationNullableSingleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationPopulationSingle();
    public static MethodInfo get_StandardDeviationPopulationSingleAsync();
    public static MethodInfo get_StandardDeviationPopulationSingleWithSelector();
    public static MethodInfo get_StandardDeviationPopulationSingleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleDecimal();
    public static MethodInfo get_StandardDeviationSampleDecimalAsync();
    public static MethodInfo get_StandardDeviationSampleDecimalWithSelector();
    public static MethodInfo get_StandardDeviationSampleDecimalWithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleDouble();
    public static MethodInfo get_StandardDeviationSampleDoubleAsync();
    public static MethodInfo get_StandardDeviationSampleDoubleWithSelector();
    public static MethodInfo get_StandardDeviationSampleDoubleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleInt32();
    public static MethodInfo get_StandardDeviationSampleInt32Async();
    public static MethodInfo get_StandardDeviationSampleInt32WithSelector();
    public static MethodInfo get_StandardDeviationSampleInt32WithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleInt64();
    public static MethodInfo get_StandardDeviationSampleInt64Async();
    public static MethodInfo get_StandardDeviationSampleInt64WithSelector();
    public static MethodInfo get_StandardDeviationSampleInt64WithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleNullableDecimal();
    public static MethodInfo get_StandardDeviationSampleNullableDecimalAsync();
    public static MethodInfo get_StandardDeviationSampleNullableDecimalWithSelector();
    public static MethodInfo get_StandardDeviationSampleNullableDecimalWithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleNullableDouble();
    public static MethodInfo get_StandardDeviationSampleNullableDoubleAsync();
    public static MethodInfo get_StandardDeviationSampleNullableDoubleWithSelector();
    public static MethodInfo get_StandardDeviationSampleNullableDoubleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleNullableInt32();
    public static MethodInfo get_StandardDeviationSampleNullableInt32Async();
    public static MethodInfo get_StandardDeviationSampleNullableInt32WithSelector();
    public static MethodInfo get_StandardDeviationSampleNullableInt32WithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleNullableInt64();
    public static MethodInfo get_StandardDeviationSampleNullableInt64Async();
    public static MethodInfo get_StandardDeviationSampleNullableInt64WithSelector();
    public static MethodInfo get_StandardDeviationSampleNullableInt64WithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleNullableSingle();
    public static MethodInfo get_StandardDeviationSampleNullableSingleAsync();
    public static MethodInfo get_StandardDeviationSampleNullableSingleWithSelector();
    public static MethodInfo get_StandardDeviationSampleNullableSingleWithSelectorAsync();
    public static MethodInfo get_StandardDeviationSampleSingle();
    public static MethodInfo get_StandardDeviationSampleSingleAsync();
    public static MethodInfo get_StandardDeviationSampleSingleWithSelector();
    public static MethodInfo get_StandardDeviationSampleSingleWithSelectorAsync();
    public static MethodInfo get_SumDecimalAsync();
    public static MethodInfo get_SumDecimalWithSelectorAsync();
    public static MethodInfo get_SumDoubleAsync();
    public static MethodInfo get_SumDoubleWithSelectorAsync();
    public static MethodInfo get_SumInt32Async();
    public static MethodInfo get_SumInt32WithSelectorAsync();
    public static MethodInfo get_SumInt64Async();
    public static MethodInfo get_SumInt64WithSelectorAsync();
    public static MethodInfo get_SumNullableDecimalAsync();
    public static MethodInfo get_SumNullableDecimalWithSelectorAsync();
    public static MethodInfo get_SumNullableDoubleAsync();
    public static MethodInfo get_SumNullableDoubleWithSelectorAsync();
    public static MethodInfo get_SumNullableInt32Async();
    public static MethodInfo get_SumNullableInt32WithSelectorAsync();
    public static MethodInfo get_SumNullableInt64Async();
    public static MethodInfo get_SumNullableInt64WithSelectorAsync();
    public static MethodInfo get_SumNullableSingleAsync();
    public static MethodInfo get_SumNullableSingleWithSelectorAsync();
    public static MethodInfo get_SumSingleAsync();
    public static MethodInfo get_SumSingleWithSelectorAsync();
    public static MethodInfo get_TakeWithLong();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.MqlMethod : object {
    private static MethodInfo __dateFromString;
    private static MethodInfo __dateFromStringWithFormat;
    private static MethodInfo __dateFromStringWithFormatAndTimezone;
    private static MethodInfo __dateFromStringWithFormatAndTimezoneAndOnErrorAndOnNull;
    private static MethodInfo __exists;
    private static MethodInfo __isMissing;
    private static MethodInfo __isNullOrMissing;
    public static MethodInfo DateFromString { get; }
    public static MethodInfo DateFromStringWithFormat { get; }
    public static MethodInfo DateFromStringWithFormatAndTimezone { get; }
    public static MethodInfo DateFromStringWithFormatAndTimezoneAndOnErrorAndOnNull { get; }
    public static MethodInfo Exists { get; }
    public static MethodInfo IsMissing { get; }
    public static MethodInfo IsNullOrMissing { get; }
    private static MqlMethod();
    public static MethodInfo get_DateFromString();
    public static MethodInfo get_DateFromStringWithFormat();
    public static MethodInfo get_DateFromStringWithFormatAndTimezone();
    public static MethodInfo get_DateFromStringWithFormatAndTimezoneAndOnErrorAndOnNull();
    public static MethodInfo get_Exists();
    public static MethodInfo get_IsMissing();
    public static MethodInfo get_IsNullOrMissing();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.NullableDateTimeMethod : object {
    private static MethodInfo __toStringWithFormatAndTimezoneAndOnNull;
    public static MethodInfo ToStringWithFormatAndTimezoneAndOnNull { get; }
    private static NullableDateTimeMethod();
    public static MethodInfo get_ToStringWithFormatAndTimezoneAndOnNull();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.NullableProperty : object {
    private static PropertyInfo __hasValue;
    private static PropertyInfo __value;
    public static PropertyInfo HasValue { get; }
    public static PropertyInfo Value { get; }
    private static NullableProperty();
    public static PropertyInfo get_HasValue();
    public static PropertyInfo get_Value();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.ObjectMethod : object {
    private static MethodInfo __equals;
    private static MethodInfo __getType;
    private static MethodInfo __toString;
    public static MethodInfo Equals { get; }
    public static MethodInfo GetType { get; }
    public static MethodInfo ToString { get; }
    private static ObjectMethod();
    public static MethodInfo get_Equals();
    public static MethodInfo get_GetType();
    public static MethodInfo get_ToString();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.QueryableMethod : object {
    private static MethodInfo __aggregateWithFunc;
    private static MethodInfo __aggregateWithSeedAndFunc;
    private static MethodInfo __aggregateWithSeedFuncAndResultSelector;
    private static MethodInfo __all;
    private static MethodInfo __any;
    private static MethodInfo __anyWithPredicate;
    private static MethodInfo __asQueryable;
    private static MethodInfo __averageDecimal;
    private static MethodInfo __averageDecimalWithSelector;
    private static MethodInfo __averageDouble;
    private static MethodInfo __averageDoubleWithSelector;
    private static MethodInfo __averageInt32;
    private static MethodInfo __averageInt32WithSelector;
    private static MethodInfo __averageInt64;
    private static MethodInfo __averageInt64WithSelector;
    private static MethodInfo __averageNullableDecimal;
    private static MethodInfo __averageNullableDecimalWithSelector;
    private static MethodInfo __averageNullableDouble;
    private static MethodInfo __averageNullableDoubleWithSelector;
    private static MethodInfo __averageNullableInt32;
    private static MethodInfo __averageNullableInt32WithSelector;
    private static MethodInfo __averageNullableInt64;
    private static MethodInfo __averageNullableInt64WithSelector;
    private static MethodInfo __averageNullableSingle;
    private static MethodInfo __averageNullableSingleWithSelector;
    private static MethodInfo __averageSingle;
    private static MethodInfo __averageSingleWithSelector;
    private static MethodInfo __cast;
    private static MethodInfo __concat;
    private static MethodInfo __contains;
    private static MethodInfo __count;
    private static MethodInfo __countWithPredicate;
    private static MethodInfo __defaultIfEmpty;
    private static MethodInfo __defaultIfEmptyWithDefaultValue;
    private static MethodInfo __distinct;
    private static MethodInfo __elementAt;
    private static MethodInfo __elementAtOrDefault;
    private static MethodInfo __except;
    private static MethodInfo __first;
    private static MethodInfo __firstOrDefault;
    private static MethodInfo __firstOrDefaultWithPredicate;
    private static MethodInfo __firstWithPredicate;
    private static MethodInfo __groupByWithKeySelector;
    private static MethodInfo __groupByWithKeySelectorAndElementSelector;
    private static MethodInfo __groupByWithKeySelectorAndResultSelector;
    private static MethodInfo __groupByWithKeySelectorElementSelectorAndResultSelector;
    private static MethodInfo __groupJoin;
    private static MethodInfo __intersect;
    private static MethodInfo __join;
    private static MethodInfo __last;
    private static MethodInfo __lastOrDefault;
    private static MethodInfo __lastOrDefaultWithPredicate;
    private static MethodInfo __lastWithPredicate;
    private static MethodInfo __longCount;
    private static MethodInfo __longCountWithPredicate;
    private static MethodInfo __max;
    private static MethodInfo __maxWithSelector;
    private static MethodInfo __min;
    private static MethodInfo __minWithSelector;
    private static MethodInfo __ofType;
    private static MethodInfo __orderBy;
    private static MethodInfo __orderByDescending;
    private static MethodInfo __reverse;
    private static MethodInfo __select;
    private static MethodInfo __selectMany;
    private static MethodInfo __selectManyWithCollectionSelectorAndResultSelector;
    private static MethodInfo __selectManyWithCollectionSelectorTakingIndexAndResultSelector;
    private static MethodInfo __selectManyWithSelectorTakingIndex;
    private static MethodInfo __selectWithSelectorTakingIndex;
    private static MethodInfo __single;
    private static MethodInfo __singleOrDefault;
    private static MethodInfo __singleOrDefaultWithPredicate;
    private static MethodInfo __singleWithPredicate;
    private static MethodInfo __skip;
    private static MethodInfo __sumDecimal;
    private static MethodInfo __sumDecimalWithSelector;
    private static MethodInfo __sumDouble;
    private static MethodInfo __sumDoubleWithSelector;
    private static MethodInfo __sumInt32;
    private static MethodInfo __sumInt32WithSelector;
    private static MethodInfo __sumInt64;
    private static MethodInfo __sumInt64WithSelector;
    private static MethodInfo __sumNullableDecimal;
    private static MethodInfo __sumNullableDecimalWithSelector;
    private static MethodInfo __sumNullableDouble;
    private static MethodInfo __sumNullableDoubleWithSelector;
    private static MethodInfo __sumNullableInt32;
    private static MethodInfo __sumNullableInt32WithSelector;
    private static MethodInfo __sumNullableInt64;
    private static MethodInfo __sumNullableInt64WithSelector;
    private static MethodInfo __sumNullableSingle;
    private static MethodInfo __sumNullableSingleWithSelector;
    private static MethodInfo __sumSingle;
    private static MethodInfo __sumSingleWithSelector;
    private static MethodInfo __take;
    private static MethodInfo __thenBy;
    private static MethodInfo __thenByDescending;
    private static MethodInfo __union;
    private static MethodInfo __where;
    private static MethodInfo __whereWithPredicateTakingIndex;
    private static MethodInfo __zip;
    public static MethodInfo AggregateWithFunc { get; }
    public static MethodInfo AggregateWithSeedAndFunc { get; }
    public static MethodInfo AggregateWithSeedFuncAndResultSelector { get; }
    public static MethodInfo All { get; }
    public static MethodInfo Any { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsQueryable { get; }
    public static MethodInfo AverageDecimal { get; }
    public static MethodInfo AverageDecimalWithSelector { get; }
    public static MethodInfo AverageDouble { get; }
    public static MethodInfo AverageDoubleWithSelector { get; }
    public static MethodInfo AverageInt32 { get; }
    public static MethodInfo AverageInt32WithSelector { get; }
    public static MethodInfo AverageInt64 { get; }
    public static MethodInfo AverageInt64WithSelector { get; }
    public static MethodInfo AverageNullableDecimal { get; }
    public static MethodInfo AverageNullableDecimalWithSelector { get; }
    public static MethodInfo AverageNullableDouble { get; }
    public static MethodInfo AverageNullableDoubleWithSelector { get; }
    public static MethodInfo AverageNullableInt32 { get; }
    public static MethodInfo AverageNullableInt32WithSelector { get; }
    public static MethodInfo AverageNullableInt64 { get; }
    public static MethodInfo AverageNullableInt64WithSelector { get; }
    public static MethodInfo AverageNullableSingle { get; }
    public static MethodInfo AverageNullableSingleWithSelector { get; }
    public static MethodInfo AverageSingle { get; }
    public static MethodInfo AverageSingleWithSelector { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo Count { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmpty { get; }
    public static MethodInfo DefaultIfEmptyWithDefaultValue { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo First { get; }
    public static MethodInfo FirstOrDefault { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeySelectorAndElementSelector { get; }
    public static MethodInfo GroupByWithKeySelectorAndResultSelector { get; }
    public static MethodInfo GroupByWithKeySelectorElementSelectorAndResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Interset { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo Last { get; }
    public static MethodInfo LastOrDefault { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LongCount { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo Max { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo Min { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectMany { get; }
    public static MethodInfo SelectManyWithCollectionSelectorAndResultSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelectorTakingIndexAndResultSelector { get; }
    public static MethodInfo SelectManyWithSelectorTakingIndex { get; }
    public static MethodInfo SelectWithSelectorTakingIndex { get; }
    public static MethodInfo Single { get; }
    public static MethodInfo SingleOrDefault { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SumDecimal { get; }
    public static MethodInfo SumDecimalWithSelector { get; }
    public static MethodInfo SumDouble { get; }
    public static MethodInfo SumDoubleWithSelector { get; }
    public static MethodInfo SumInt32 { get; }
    public static MethodInfo SumInt32WithSelector { get; }
    public static MethodInfo SumInt64 { get; }
    public static MethodInfo SumInt64WithSelector { get; }
    public static MethodInfo SumNullableDecimal { get; }
    public static MethodInfo SumNullableDecimalWithSelector { get; }
    public static MethodInfo SumNullableDouble { get; }
    public static MethodInfo SumNullableDoubleWithSelector { get; }
    public static MethodInfo SumNullableInt32 { get; }
    public static MethodInfo SumNullableInt32WithSelector { get; }
    public static MethodInfo SumNullableInt64 { get; }
    public static MethodInfo SumNullableInt64WithSelector { get; }
    public static MethodInfo SumNullableSingle { get; }
    public static MethodInfo SumNullableSingleWithSelector { get; }
    public static MethodInfo SumSingle { get; }
    public static MethodInfo SumSingleWithSelector { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    public static MethodInfo WhereWithPredicateTakingIndex { get; }
    public static MethodInfo Zip { get; }
    private static QueryableMethod();
    public static MethodInfo get_AggregateWithFunc();
    public static MethodInfo get_AggregateWithSeedAndFunc();
    public static MethodInfo get_AggregateWithSeedFuncAndResultSelector();
    public static MethodInfo get_All();
    public static MethodInfo get_Any();
    public static MethodInfo get_AnyWithPredicate();
    public static MethodInfo get_AsQueryable();
    public static MethodInfo get_AverageDecimal();
    public static MethodInfo get_AverageDecimalWithSelector();
    public static MethodInfo get_AverageDouble();
    public static MethodInfo get_AverageDoubleWithSelector();
    public static MethodInfo get_AverageInt32();
    public static MethodInfo get_AverageInt32WithSelector();
    public static MethodInfo get_AverageInt64();
    public static MethodInfo get_AverageInt64WithSelector();
    public static MethodInfo get_AverageNullableDecimal();
    public static MethodInfo get_AverageNullableDecimalWithSelector();
    public static MethodInfo get_AverageNullableDouble();
    public static MethodInfo get_AverageNullableDoubleWithSelector();
    public static MethodInfo get_AverageNullableInt32();
    public static MethodInfo get_AverageNullableInt32WithSelector();
    public static MethodInfo get_AverageNullableInt64();
    public static MethodInfo get_AverageNullableInt64WithSelector();
    public static MethodInfo get_AverageNullableSingle();
    public static MethodInfo get_AverageNullableSingleWithSelector();
    public static MethodInfo get_AverageSingle();
    public static MethodInfo get_AverageSingleWithSelector();
    public static MethodInfo get_Cast();
    public static MethodInfo get_Concat();
    public static MethodInfo get_Contains();
    public static MethodInfo get_Count();
    public static MethodInfo get_CountWithPredicate();
    public static MethodInfo get_DefaultIfEmpty();
    public static MethodInfo get_DefaultIfEmptyWithDefaultValue();
    public static MethodInfo get_Distinct();
    public static MethodInfo get_ElementAt();
    public static MethodInfo get_ElementAtOrDefault();
    public static MethodInfo get_Except();
    public static MethodInfo get_First();
    public static MethodInfo get_FirstOrDefault();
    public static MethodInfo get_FirstOrDefaultWithPredicate();
    public static MethodInfo get_FirstWithPredicate();
    public static MethodInfo get_GroupByWithKeySelector();
    public static MethodInfo get_GroupByWithKeySelectorAndElementSelector();
    public static MethodInfo get_GroupByWithKeySelectorAndResultSelector();
    public static MethodInfo get_GroupByWithKeySelectorElementSelectorAndResultSelector();
    public static MethodInfo get_GroupJoin();
    public static MethodInfo get_Interset();
    public static MethodInfo get_Join();
    public static MethodInfo get_Last();
    public static MethodInfo get_LastOrDefault();
    public static MethodInfo get_LastOrDefaultWithPredicate();
    public static MethodInfo get_LastWithPredicate();
    public static MethodInfo get_LongCount();
    public static MethodInfo get_LongCountWithPredicate();
    public static MethodInfo get_Max();
    public static MethodInfo get_MaxWithSelector();
    public static MethodInfo get_Min();
    public static MethodInfo get_MinWithSelector();
    public static MethodInfo get_OfType();
    public static MethodInfo get_OrderBy();
    public static MethodInfo get_OrderByDescending();
    public static MethodInfo get_Reverse();
    public static MethodInfo get_Select();
    public static MethodInfo get_SelectMany();
    public static MethodInfo get_SelectManyWithCollectionSelectorAndResultSelector();
    public static MethodInfo get_SelectManyWithCollectionSelectorTakingIndexAndResultSelector();
    public static MethodInfo get_SelectManyWithSelectorTakingIndex();
    public static MethodInfo get_SelectWithSelectorTakingIndex();
    public static MethodInfo get_Single();
    public static MethodInfo get_SingleOrDefault();
    public static MethodInfo get_SingleOrDefaultWithPredicate();
    public static MethodInfo get_SingleWithPredicate();
    public static MethodInfo get_Skip();
    public static MethodInfo get_SumDecimal();
    public static MethodInfo get_SumDecimalWithSelector();
    public static MethodInfo get_SumDouble();
    public static MethodInfo get_SumDoubleWithSelector();
    public static MethodInfo get_SumInt32();
    public static MethodInfo get_SumInt32WithSelector();
    public static MethodInfo get_SumInt64();
    public static MethodInfo get_SumInt64WithSelector();
    public static MethodInfo get_SumNullableDecimal();
    public static MethodInfo get_SumNullableDecimalWithSelector();
    public static MethodInfo get_SumNullableDouble();
    public static MethodInfo get_SumNullableDoubleWithSelector();
    public static MethodInfo get_SumNullableInt32();
    public static MethodInfo get_SumNullableInt32WithSelector();
    public static MethodInfo get_SumNullableInt64();
    public static MethodInfo get_SumNullableInt64WithSelector();
    public static MethodInfo get_SumNullableSingle();
    public static MethodInfo get_SumNullableSingleWithSelector();
    public static MethodInfo get_SumSingle();
    public static MethodInfo get_SumSingleWithSelector();
    public static MethodInfo get_Take();
    public static MethodInfo get_ThenBy();
    public static MethodInfo get_ThenByDescending();
    public static MethodInfo get_Union();
    public static MethodInfo get_Where();
    public static MethodInfo get_WhereWithPredicateTakingIndex();
    public static MethodInfo get_Zip();
    public static MethodInfo MakeSelect(Type tsource, Type tresult);
    public static MethodInfo MakeWhere(Type tsource);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.ReflectionInfo : object {
    public static ConstructorInfo Constructor(Expression`1<Func`1<TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`2<T1, TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`3<T1, T2, TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`4<T1, T2, T3, TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`5<T1, T2, T3, T4, TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`6<T1, T2, T3, T4, T5, TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TObject>> lambda);
    public static ConstructorInfo Constructor(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TObject>> lambda);
    public static MethodInfo Method(Expression`1<Func`2<T1, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`3<T1, T2, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`4<T1, T2, T3, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`5<T1, T2, T3, T4, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`6<T1, T2, T3, T4, T5, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`7<T1, T2, T3, T4, T5, T6, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`8<T1, T2, T3, T4, T5, T6, T7, TResult>> lambda);
    public static MethodInfo Method(Expression`1<Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> lambda);
    public static PropertyInfo Property(Expression`1<Func`2<TObject, TProperty>> lambda);
    public static MethodInfo IndexerGet(Expression`1<Func`3<TObject, TIndex, TValue>> lambda);
    public static MethodInfo IndexerSet(Expression`1<Func`3<TObject, TIndex, TValue>> lambda);
    private static ConstructorInfo ExtractConstructorInfoFromLambda(LambdaExpression lambda);
    private static MethodInfo ExtractIndexerSetMethodInfoFromLambda(LambdaExpression lambda);
    private static MethodInfo ExtractMethodInfoFromLambda(LambdaExpression lambda);
    public static PropertyInfo ExtractPropertyInfoFromLambda(LambdaExpression lambda);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.RegexMethod : object {
    private static MethodInfo __isMatch;
    private static MethodInfo __staticIsMatch;
    private static MethodInfo __staticIsMatchWithOptions;
    public static MethodInfo IsMatch { get; }
    public static MethodInfo StaticIsMatch { get; }
    public static MethodInfo StaticIsMatchWithOptions { get; }
    private static RegexMethod();
    public static MethodInfo get_IsMatch();
    public static MethodInfo get_StaticIsMatch();
    public static MethodInfo get_StaticIsMatchWithOptions();
    public static bool IsMatchMethod(MethodCallExpression expression, Expression& inputExpression, Regex& regex);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.StringProperty : object {
    private static PropertyInfo __Length;
    public static PropertyInfo Length { get; }
    private static StringProperty();
    public static PropertyInfo get_Length();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.TupleMethod : object {
    private static MethodInfo __create1;
    private static MethodInfo __create2;
    private static MethodInfo __create3;
    private static MethodInfo __create4;
    private static MethodInfo __create5;
    private static MethodInfo __create6;
    private static MethodInfo __create7;
    private static MethodInfo __create8;
    public static MethodInfo Create1 { get; }
    public static MethodInfo Create2 { get; }
    public static MethodInfo Create3 { get; }
    public static MethodInfo Create4 { get; }
    public static MethodInfo Create5 { get; }
    public static MethodInfo Create6 { get; }
    public static MethodInfo Create7 { get; }
    public static MethodInfo Create8 { get; }
    private static TupleMethod();
    public static MethodInfo get_Create1();
    public static MethodInfo get_Create2();
    public static MethodInfo get_Create3();
    public static MethodInfo get_Create4();
    public static MethodInfo get_Create5();
    public static MethodInfo get_Create6();
    public static MethodInfo get_Create7();
    public static MethodInfo get_Create8();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.ValueTupleMethod : object {
    private static MethodInfo __create1;
    private static MethodInfo __create2;
    private static MethodInfo __create3;
    private static MethodInfo __create4;
    private static MethodInfo __create5;
    private static MethodInfo __create6;
    private static MethodInfo __create7;
    private static MethodInfo __create8;
    public static MethodInfo Create1 { get; }
    public static MethodInfo Create2 { get; }
    public static MethodInfo Create3 { get; }
    public static MethodInfo Create4 { get; }
    public static MethodInfo Create5 { get; }
    public static MethodInfo Create6 { get; }
    public static MethodInfo Create7 { get; }
    public static MethodInfo Create8 { get; }
    private static ValueTupleMethod();
    public static MethodInfo get_Create1();
    public static MethodInfo get_Create2();
    public static MethodInfo get_Create3();
    public static MethodInfo get_Create4();
    public static MethodInfo get_Create5();
    public static MethodInfo get_Create6();
    public static MethodInfo get_Create7();
    public static MethodInfo get_Create8();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Reflection.WindowMethod : object {
    private static MethodInfo __addToSet;
    private static MethodInfo __averageWithDecimal;
    private static MethodInfo __averageWithDouble;
    private static MethodInfo __averageWithInt32;
    private static MethodInfo __averageWithInt64;
    private static MethodInfo __averageWithNullableDecimal;
    private static MethodInfo __averageWithNullableDouble;
    private static MethodInfo __averageWithNullableInt32;
    private static MethodInfo __averageWithNullableInt64;
    private static MethodInfo __averageWithNullableSingle;
    private static MethodInfo __averageWithSingle;
    private static MethodInfo __count;
    private static MethodInfo __covariancePopulationWithDecimals;
    private static MethodInfo __covariancePopulationWithDoubles;
    private static MethodInfo __covariancePopulationWithInt32s;
    private static MethodInfo __covariancePopulationWithInt64s;
    private static MethodInfo __covariancePopulationWithNullableDecimals;
    private static MethodInfo __covariancePopulationWithNullableDoubles;
    private static MethodInfo __covariancePopulationWithNullableInt32s;
    private static MethodInfo __covariancePopulationWithNullableInt64s;
    private static MethodInfo __covariancePopulationWithNullableSingles;
    private static MethodInfo __covariancePopulationWithSingles;
    private static MethodInfo __covarianceSampleWithDecimals;
    private static MethodInfo __covarianceSampleWithDoubles;
    private static MethodInfo __covarianceSampleWithInt32s;
    private static MethodInfo __covarianceSampleWithInt64s;
    private static MethodInfo __covarianceSampleWithNullableDecimals;
    private static MethodInfo __covarianceSampleWithNullableDoubles;
    private static MethodInfo __covarianceSampleWithNullableInt32s;
    private static MethodInfo __covarianceSampleWithNullableInt64s;
    private static MethodInfo __covarianceSampleWithNullableSingles;
    private static MethodInfo __covarianceSampleWithSingles;
    private static MethodInfo __denseRank;
    private static MethodInfo __derivativeWithDecimal;
    private static MethodInfo __derivativeWithDecimalAndUnit;
    private static MethodInfo __derivativeWithDouble;
    private static MethodInfo __derivativeWithDoubleAndUnit;
    private static MethodInfo __derivativeWithInt32;
    private static MethodInfo __derivativeWithInt32AndUnit;
    private static MethodInfo __derivativeWithInt64;
    private static MethodInfo __derivativeWithInt64AndUnit;
    private static MethodInfo __derivativeWithSingle;
    private static MethodInfo __derivativeWithSingleAndUnit;
    private static MethodInfo __documentNumber;
    private static MethodInfo __exponentialMovingAverageWithDecimal;
    private static MethodInfo __exponentialMovingAverageWithDouble;
    private static MethodInfo __exponentialMovingAverageWithInt32;
    private static MethodInfo __exponentialMovingAverageWithInt64;
    private static MethodInfo __exponentialMovingAverageWithSingle;
    private static MethodInfo __first;
    private static MethodInfo __integralWithDecimal;
    private static MethodInfo __integralWithDecimalAndUnit;
    private static MethodInfo __integralWithDouble;
    private static MethodInfo __integralWithDoubleAndUnit;
    private static MethodInfo __integralWithInt32;
    private static MethodInfo __integralWithInt32AndUnit;
    private static MethodInfo __integralWithInt64;
    private static MethodInfo __integralWithInt64AndUnit;
    private static MethodInfo __integralWithSingle;
    private static MethodInfo __integralWithSingleAndUnit;
    private static MethodInfo __last;
    private static MethodInfo __locf;
    private static MethodInfo __max;
    private static MethodInfo __min;
    private static MethodInfo __push;
    private static MethodInfo __rank;
    private static MethodInfo __shift;
    private static MethodInfo __shiftWithDefaultValue;
    private static MethodInfo __standardDeviationPopulationWithDecimal;
    private static MethodInfo __standardDeviationPopulationWithDouble;
    private static MethodInfo __standardDeviationPopulationWithInt32;
    private static MethodInfo __standardDeviationPopulationWithInt64;
    private static MethodInfo __standardDeviationPopulationWithNullableDecimal;
    private static MethodInfo __standardDeviationPopulationWithNullableDouble;
    private static MethodInfo __standardDeviationPopulationWithNullableInt32;
    private static MethodInfo __standardDeviationPopulationWithNullableInt64;
    private static MethodInfo __standardDeviationPopulationWithNullableSingle;
    private static MethodInfo __standardDeviationPopulationWithSingle;
    private static MethodInfo __standardDeviationSampleWithDecimal;
    private static MethodInfo __standardDeviationSampleWithDouble;
    private static MethodInfo __standardDeviationSampleWithInt32;
    private static MethodInfo __standardDeviationSampleWithInt64;
    private static MethodInfo __standardDeviationSampleWithNullableDecimal;
    private static MethodInfo __standardDeviationSampleWithNullableDouble;
    private static MethodInfo __standardDeviationSampleWithNullableInt32;
    private static MethodInfo __standardDeviationSampleWithNullableInt64;
    private static MethodInfo __standardDeviationSampleWithNullableSingle;
    private static MethodInfo __standardDeviationSampleWithSingle;
    private static MethodInfo __sumWithDecimal;
    private static MethodInfo __sumWithDouble;
    private static MethodInfo __sumWithInt32;
    private static MethodInfo __sumWithInt64;
    private static MethodInfo __sumWithNullableDecimal;
    private static MethodInfo __sumWithNullableDouble;
    private static MethodInfo __sumWithNullableInt32;
    private static MethodInfo __sumWithNullableInt64;
    private static MethodInfo __sumWithNullableSingle;
    private static MethodInfo __sumWithSingle;
    public static MethodInfo AddToSet { get; }
    public static MethodInfo AverageWithDecimal { get; }
    public static MethodInfo AverageWithDouble { get; }
    public static MethodInfo AverageWithInt32 { get; }
    public static MethodInfo AverageWithInt64 { get; }
    public static MethodInfo AverageWithNullableDecimal { get; }
    public static MethodInfo AverageWithNullableDouble { get; }
    public static MethodInfo AverageWithNullableInt32 { get; }
    public static MethodInfo AverageWithNullableInt64 { get; }
    public static MethodInfo AverageWithNullableSingle { get; }
    public static MethodInfo AverageWithSingle { get; }
    public static MethodInfo Count { get; }
    public static MethodInfo CovariancePopulationWithDecimals { get; }
    public static MethodInfo CovariancePopulationWithDoubles { get; }
    public static MethodInfo CovariancePopulationWithInt32s { get; }
    public static MethodInfo CovariancePopulationWithInt64s { get; }
    public static MethodInfo CovariancePopulationWithNullableDecimals { get; }
    public static MethodInfo CovariancePopulationWithNullableDoubles { get; }
    public static MethodInfo CovariancePopulationWithNullableInt32s { get; }
    public static MethodInfo CovariancePopulationWithNullableInt64s { get; }
    public static MethodInfo CovariancePopulationWithNullableSingles { get; }
    public static MethodInfo CovariancePopulationWithSingles { get; }
    public static MethodInfo CovarianceSampleWithDecimals { get; }
    public static MethodInfo CovarianceSampleWithDoubles { get; }
    public static MethodInfo CovarianceSampleWithInt32s { get; }
    public static MethodInfo CovarianceSampleWithInt64s { get; }
    public static MethodInfo CovarianceSampleWithNullableDecimals { get; }
    public static MethodInfo CovarianceSampleWithNullableDoubles { get; }
    public static MethodInfo CovarianceSampleWithNullableInt32s { get; }
    public static MethodInfo CovarianceSampleWithNullableInt64s { get; }
    public static MethodInfo CovarianceSampleWithNullableSingles { get; }
    public static MethodInfo CovarianceSampleWithSingles { get; }
    public static MethodInfo DenseRank { get; }
    public static MethodInfo DerivativeWithDecimal { get; }
    public static MethodInfo DerivativeWithDecimalAndUnit { get; }
    public static MethodInfo DerivativeWithDouble { get; }
    public static MethodInfo DerivativeWithDoubleAndUnit { get; }
    public static MethodInfo DerivativeWithInt32 { get; }
    public static MethodInfo DerivativeWithInt32AndUnit { get; }
    public static MethodInfo DerivativeWithInt64 { get; }
    public static MethodInfo DerivativeWithInt64AndUnit { get; }
    public static MethodInfo DerivativeWithSingle { get; }
    public static MethodInfo DerivativeWithSingleAndUnit { get; }
    public static MethodInfo DocumentNumber { get; }
    public static MethodInfo ExponentialMovingAverageWithDecimal { get; }
    public static MethodInfo ExponentialMovingAverageWithDouble { get; }
    public static MethodInfo ExponentialMovingAverageWithInt32 { get; }
    public static MethodInfo ExponentialMovingAverageWithInt64 { get; }
    public static MethodInfo ExponentialMovingAverageWithSingle { get; }
    public static MethodInfo First { get; }
    public static MethodInfo IntegralWithDecimal { get; }
    public static MethodInfo IntegralWithDecimalAndUnit { get; }
    public static MethodInfo IntegralWithDouble { get; }
    public static MethodInfo IntegralWithDoubleAndUnit { get; }
    public static MethodInfo IntegralWithInt32 { get; }
    public static MethodInfo IntegralWithInt32AndUnit { get; }
    public static MethodInfo IntegralWithInt64 { get; }
    public static MethodInfo IntegralWithInt64AndUnit { get; }
    public static MethodInfo IntegralWithSingle { get; }
    public static MethodInfo IntegralWithSingleAndUnit { get; }
    public static MethodInfo Last { get; }
    public static MethodInfo Locf { get; }
    public static MethodInfo Max { get; }
    public static MethodInfo Min { get; }
    public static MethodInfo Push { get; }
    public static MethodInfo Rank { get; }
    public static MethodInfo Shift { get; }
    public static MethodInfo ShiftWithDefaultValue { get; }
    public static MethodInfo StandardDeviationPopulationWithDecimal { get; }
    public static MethodInfo StandardDeviationPopulationWithDouble { get; }
    public static MethodInfo StandardDeviationPopulationWithInt32 { get; }
    public static MethodInfo StandardDeviationPopulationWithInt64 { get; }
    public static MethodInfo StandardDeviationPopulationWithNullableDecimal { get; }
    public static MethodInfo StandardDeviationPopulationWithNullableDouble { get; }
    public static MethodInfo StandardDeviationPopulationWithNullableInt32 { get; }
    public static MethodInfo StandardDeviationPopulationWithNullableInt64 { get; }
    public static MethodInfo StandardDeviationPopulationWithNullableSingle { get; }
    public static MethodInfo StandardDeviationPopulationWithSingle { get; }
    public static MethodInfo StandardDeviationSampleWithDecimal { get; }
    public static MethodInfo StandardDeviationSampleWithDouble { get; }
    public static MethodInfo StandardDeviationSampleWithInt32 { get; }
    public static MethodInfo StandardDeviationSampleWithInt64 { get; }
    public static MethodInfo StandardDeviationSampleWithNullableDecimal { get; }
    public static MethodInfo StandardDeviationSampleWithNullableDouble { get; }
    public static MethodInfo StandardDeviationSampleWithNullableInt32 { get; }
    public static MethodInfo StandardDeviationSampleWithNullableInt64 { get; }
    public static MethodInfo StandardDeviationSampleWithNullableSingle { get; }
    public static MethodInfo StandardDeviationSampleWithSingle { get; }
    public static MethodInfo SumWithDecimal { get; }
    public static MethodInfo SumWithDouble { get; }
    public static MethodInfo SumWithInt32 { get; }
    public static MethodInfo SumWithInt64 { get; }
    public static MethodInfo SumWithNullableDecimal { get; }
    public static MethodInfo SumWithNullableDouble { get; }
    public static MethodInfo SumWithNullableInt32 { get; }
    public static MethodInfo SumWithNullableInt64 { get; }
    public static MethodInfo SumWithNullableSingle { get; }
    public static MethodInfo SumWithSingle { get; }
    private static WindowMethod();
    public static MethodInfo get_AddToSet();
    public static MethodInfo get_AverageWithDecimal();
    public static MethodInfo get_AverageWithDouble();
    public static MethodInfo get_AverageWithInt32();
    public static MethodInfo get_AverageWithInt64();
    public static MethodInfo get_AverageWithNullableDecimal();
    public static MethodInfo get_AverageWithNullableDouble();
    public static MethodInfo get_AverageWithNullableInt32();
    public static MethodInfo get_AverageWithNullableInt64();
    public static MethodInfo get_AverageWithNullableSingle();
    public static MethodInfo get_AverageWithSingle();
    public static MethodInfo get_Count();
    public static MethodInfo get_CovariancePopulationWithDecimals();
    public static MethodInfo get_CovariancePopulationWithDoubles();
    public static MethodInfo get_CovariancePopulationWithInt32s();
    public static MethodInfo get_CovariancePopulationWithInt64s();
    public static MethodInfo get_CovariancePopulationWithNullableDecimals();
    public static MethodInfo get_CovariancePopulationWithNullableDoubles();
    public static MethodInfo get_CovariancePopulationWithNullableInt32s();
    public static MethodInfo get_CovariancePopulationWithNullableInt64s();
    public static MethodInfo get_CovariancePopulationWithNullableSingles();
    public static MethodInfo get_CovariancePopulationWithSingles();
    public static MethodInfo get_CovarianceSampleWithDecimals();
    public static MethodInfo get_CovarianceSampleWithDoubles();
    public static MethodInfo get_CovarianceSampleWithInt32s();
    public static MethodInfo get_CovarianceSampleWithInt64s();
    public static MethodInfo get_CovarianceSampleWithNullableDecimals();
    public static MethodInfo get_CovarianceSampleWithNullableDoubles();
    public static MethodInfo get_CovarianceSampleWithNullableInt32s();
    public static MethodInfo get_CovarianceSampleWithNullableInt64s();
    public static MethodInfo get_CovarianceSampleWithNullableSingles();
    public static MethodInfo get_CovarianceSampleWithSingles();
    public static MethodInfo get_DenseRank();
    public static MethodInfo get_DerivativeWithDecimal();
    public static MethodInfo get_DerivativeWithDecimalAndUnit();
    public static MethodInfo get_DerivativeWithDouble();
    public static MethodInfo get_DerivativeWithDoubleAndUnit();
    public static MethodInfo get_DerivativeWithInt32();
    public static MethodInfo get_DerivativeWithInt32AndUnit();
    public static MethodInfo get_DerivativeWithInt64();
    public static MethodInfo get_DerivativeWithInt64AndUnit();
    public static MethodInfo get_DerivativeWithSingle();
    public static MethodInfo get_DerivativeWithSingleAndUnit();
    public static MethodInfo get_DocumentNumber();
    public static MethodInfo get_ExponentialMovingAverageWithDecimal();
    public static MethodInfo get_ExponentialMovingAverageWithDouble();
    public static MethodInfo get_ExponentialMovingAverageWithInt32();
    public static MethodInfo get_ExponentialMovingAverageWithInt64();
    public static MethodInfo get_ExponentialMovingAverageWithSingle();
    public static MethodInfo get_First();
    public static MethodInfo get_IntegralWithDecimal();
    public static MethodInfo get_IntegralWithDecimalAndUnit();
    public static MethodInfo get_IntegralWithDouble();
    public static MethodInfo get_IntegralWithDoubleAndUnit();
    public static MethodInfo get_IntegralWithInt32();
    public static MethodInfo get_IntegralWithInt32AndUnit();
    public static MethodInfo get_IntegralWithInt64();
    public static MethodInfo get_IntegralWithInt64AndUnit();
    public static MethodInfo get_IntegralWithSingle();
    public static MethodInfo get_IntegralWithSingleAndUnit();
    public static MethodInfo get_Last();
    public static MethodInfo get_Locf();
    public static MethodInfo get_Max();
    public static MethodInfo get_Min();
    public static MethodInfo get_Push();
    public static MethodInfo get_Rank();
    public static MethodInfo get_Shift();
    public static MethodInfo get_ShiftWithDefaultValue();
    public static MethodInfo get_StandardDeviationPopulationWithDecimal();
    public static MethodInfo get_StandardDeviationPopulationWithDouble();
    public static MethodInfo get_StandardDeviationPopulationWithInt32();
    public static MethodInfo get_StandardDeviationPopulationWithInt64();
    public static MethodInfo get_StandardDeviationPopulationWithNullableDecimal();
    public static MethodInfo get_StandardDeviationPopulationWithNullableDouble();
    public static MethodInfo get_StandardDeviationPopulationWithNullableInt32();
    public static MethodInfo get_StandardDeviationPopulationWithNullableInt64();
    public static MethodInfo get_StandardDeviationPopulationWithNullableSingle();
    public static MethodInfo get_StandardDeviationPopulationWithSingle();
    public static MethodInfo get_StandardDeviationSampleWithDecimal();
    public static MethodInfo get_StandardDeviationSampleWithDouble();
    public static MethodInfo get_StandardDeviationSampleWithInt32();
    public static MethodInfo get_StandardDeviationSampleWithInt64();
    public static MethodInfo get_StandardDeviationSampleWithNullableDecimal();
    public static MethodInfo get_StandardDeviationSampleWithNullableDouble();
    public static MethodInfo get_StandardDeviationSampleWithNullableInt32();
    public static MethodInfo get_StandardDeviationSampleWithNullableInt64();
    public static MethodInfo get_StandardDeviationSampleWithNullableSingle();
    public static MethodInfo get_StandardDeviationSampleWithSingle();
    public static MethodInfo get_SumWithDecimal();
    public static MethodInfo get_SumWithDouble();
    public static MethodInfo get_SumWithInt32();
    public static MethodInfo get_SumWithInt64();
    public static MethodInfo get_SumWithNullableDecimal();
    public static MethodInfo get_SumWithNullableDouble();
    public static MethodInfo get_SumWithNullableInt32();
    public static MethodInfo get_SumWithNullableInt64();
    public static MethodInfo get_SumWithNullableSingle();
    public static MethodInfo get_SumWithSingle();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.ReflectionHelper : object {
    public static Type GetCollectionElementType(Type enumerableType);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.EnumUnderlyingTypeSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer enumSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.EnumUnderlyingTypeSerializer`2 : StructSerializerBase`1<TEnumUnderlyingType> {
    private IBsonSerializer`1<TEnum> _enumSerializer;
    public IBsonSerializer`1<TEnum> EnumSerializer { get; }
    private IBsonSerializer MongoDB.Driver.Linq.Linq3Implementation.Serializers.IEnumUnderlyingTypeSerializer.EnumSerializer { get; }
    public EnumUnderlyingTypeSerializer`2(IBsonSerializer`1<TEnum> enumSerializer);
    public IBsonSerializer`1<TEnum> get_EnumSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Driver.Linq.Linq3Implementation.Serializers.IEnumUnderlyingTypeSerializer.get_EnumSerializer();
    public virtual TEnumUnderlyingType Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TEnumUnderlyingType value);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IEnumerableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IEnumerableSerializer`1 : IEnumerableSerializerBase`2<IEnumerable`1<TItem>, TItem> {
    public IEnumerableSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual IEnumerable`1<TItem> CreateDeserializedValue(List`1<TItem> items);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IEnumerableSerializerBase`2 : SerializerBase`1<TEnumerable> {
    private IBsonSerializer`1<TItem> _itemSerializer;
    public IEnumerableSerializerBase`2(IBsonSerializer`1<TItem> itemSerializer);
    public virtual TEnumerable Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TEnumerable value);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    protected abstract virtual TEnumerable CreateDeserializedValue(List`1<TItem> items);
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Serializers.IEnumUnderlyingTypeSerializer {
    public IBsonSerializer EnumSerializer { get; }
    public abstract virtual IBsonSerializer get_EnumSerializer();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IGroupingSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer keySerializer, IBsonSerializer elementSerializer);
    public static IBsonSerializer`1<IGrouping`2<TKey, TElement>> Create(IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TElement> elementSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IGroupingSerializer`2 : SerializerBase`1<IGrouping`2<TKey, TElement>> {
    private IBsonSerializer`1<TElement> _elementSerializer;
    private IBsonSerializer`1<TKey> _keySerializer;
    public string EnumerableFieldName { get; }
    public IBsonSerializer EnumerableElementSerializer { get; }
    public IGroupingSerializer`2(IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TElement> elementSerializer);
    public sealed virtual string get_EnumerableFieldName();
    public sealed virtual IBsonSerializer get_EnumerableElementSerializer();
    public virtual IGrouping`2<TKey, TElement> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, IGrouping`2<TKey, TElement> value);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Serializers.INestedAsOrderedQueryableSerializer {
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Serializers.INestedAsQueryableSerializer {
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IOrderedEnumerableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IOrderedEnumerableSerializer`1 : IEnumerableSerializerBase`2<IOrderedEnumerable`1<TItem>, TItem> {
    public IOrderedEnumerableSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual IOrderedEnumerable`1<TItem> CreateDeserializedValue(List`1<TItem> items);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IOrderedQueryableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IOrderedQueryableSerializer`1 : IEnumerableSerializerBase`2<IOrderedQueryable`1<TItem>, TItem> {
    public IOrderedQueryableSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual IOrderedQueryable`1<TItem> CreateDeserializedValue(List`1<TItem> items);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IQueryableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.IQueryableSerializer`1 : IEnumerableSerializerBase`2<IQueryable`1<TItem>, TItem> {
    public IQueryableSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual IQueryable`1<TItem> CreateDeserializedValue(List`1<TItem> items);
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Serializers.ISetWindowFieldsPartitionSerializer {
    public IBsonSerializer InputSerializer { get; }
    public abstract virtual IBsonSerializer get_InputSerializer();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.ISetWindowFieldsPartitionSerializer`1 : object {
    private IBsonSerializer`1<TInput> _inputSerializer;
    private IBsonSerializer MongoDB.Driver.Linq.Linq3Implementation.Serializers.ISetWindowFieldsPartitionSerializer.InputSerializer { get; }
    public IBsonSerializer`1<TInput> InputSerializer { get; }
    public Type ValueType { get; }
    public ISetWindowFieldsPartitionSerializer`1(IBsonSerializer`1<TInput> inputSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Driver.Linq.Linq3Implementation.Serializers.ISetWindowFieldsPartitionSerializer.get_InputSerializer();
    public IBsonSerializer`1<TInput> get_InputSerializer();
    public sealed virtual Type get_ValueType();
    public sealed virtual ISetWindowFieldsPartition`1<TInput> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ISetWindowFieldsPartition`1<TInput> value);
    public sealed virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value);
    private sealed virtual override object MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Serializers.IWrappedEnumerableSerializer {
    public string EnumerableFieldName { get; }
    public IBsonSerializer EnumerableElementSerializer { get; }
    public abstract virtual string get_EnumerableFieldName();
    public abstract virtual IBsonSerializer get_EnumerableElementSerializer();
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Serializers.IWrappedValueSerializer {
    public string FieldName { get; }
    public IBsonSerializer ValueSerializer { get; }
    public abstract virtual string get_FieldName();
    public abstract virtual IBsonSerializer get_ValueSerializer();
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.KnownSerializers.KnownSerializerFinder : ExpressionVisitor {
    private KnownSerializersNode _currentKnownSerializersNode;
    private IBsonDocumentSerializer _currentSerializer;
    private KnownSerializersRegistry _registry;
    private Expression _root;
    private IBsonDocumentSerializer _rootSerializer;
    private KnownSerializerFinder(Expression root, IBsonDocumentSerializer rootSerializer);
    public static KnownSerializersRegistry FindKnownSerializers(Expression root, IBsonDocumentSerializer rootSerializer);
    public virtual Expression Visit(Expression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual Expression VisitNew(NewExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    private bool ShouldPropagateKnownSerializersToParent(KnownSerializersNode parent);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.KnownSerializers.KnownSerializersNode : object {
    private Expression _expression;
    private Dictionary`2<Type, HashSet`1<IBsonSerializer>> _knownSerializers;
    private IBsonSerializer _nodeSerializer;
    private KnownSerializersNode _parent;
    public Expression Expression { get; }
    public Dictionary`2<Type, HashSet`1<IBsonSerializer>> KnownSerializers { get; }
    public KnownSerializersNode Parent { get; }
    public KnownSerializersNode(Expression expression, KnownSerializersNode parent);
    public Expression get_Expression();
    public Dictionary`2<Type, HashSet`1<IBsonSerializer>> get_KnownSerializers();
    public KnownSerializersNode get_Parent();
    public void AddKnownSerializersFromChild(KnownSerializersNode child);
    public void AddKnownSerializer(Type type, IBsonSerializer serializer);
    public void SetKnownSerializerForType(Type type, IBsonSerializer serializer);
    public void SetNodeSerializer(IBsonSerializer serializer);
    public HashSet`1<IBsonSerializer> GetPossibleSerializers(Type type);
    private HashSet`1<IBsonSerializer> GetPossibleSerializersAtThisLevel(Type type);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.KnownSerializers.KnownSerializersRegistry : object {
    private Dictionary`2<Expression, KnownSerializersNode> _registry;
    public void Add(Expression expression, KnownSerializersNode knownSerializers);
    public void SetNodeSerializer(Expression expression, IBsonSerializer nodeSerializer);
    public IBsonSerializer GetSerializer(Expression expression, IBsonSerializer defaultSerializer);
    public IBsonSerializer GetSerializer(Expression expression, Type type, IBsonSerializer defaultSerializer);
    public IBsonSerializer GetSerializerAtThisLevel(Expression expression);
    public IBsonSerializer GetSerializerAtThisLevel(Expression expression, Type type);
    private IBsonSerializer LookupSerializer(Expression expression, Type type);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.NestedAsOrderedQueryableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer);
    public static IBsonSerializer CreateIOrderedEnumerableOrNestedAsOrderedQueryableSerializer(Type resultType, IBsonSerializer itemSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.NestedAsOrderedQueryableSerializer`1 : IOrderedQueryableSerializer`1<TITem> {
    public NestedAsOrderedQueryableSerializer`1(IBsonSerializer`1<TITem> itemSerializer);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.NestedAsQueryableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer);
    public static IBsonSerializer CreateIEnumerableOrNestedAsQueryableSerializer(Type resultType, IBsonSerializer itemSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.NestedAsQueryableSerializer`1 : IQueryableSerializer`1<TITem> {
    public NestedAsQueryableSerializer`1(IBsonSerializer`1<TITem> itemSerializer);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Serializers.WrappedValueSerializer : object {
    public static IWrappedValueSerializer Create(string fieldName, IBsonSerializer valueSerializer);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Serializers.WrappedValueSerializer`1 : SerializerBase`1<TValue> {
    private string _fieldName;
    private IBsonSerializer`1<TValue> _valueSerializer;
    public string FieldName { get; }
    public IBsonSerializer`1<TValue> ValueSerializer { get; }
    private IBsonSerializer MongoDB.Driver.Linq.Linq3Implementation.Serializers.IWrappedValueSerializer.ValueSerializer { get; }
    public WrappedValueSerializer`1(string fieldName, IBsonSerializer`1<TValue> valueSerializer);
    public sealed virtual string get_FieldName();
    public IBsonSerializer`1<TValue> get_ValueSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Driver.Linq.Linq3Implementation.Serializers.IWrappedValueSerializer.get_ValueSerializer();
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.AggregationExpression : object {
    private AstExpression _ast;
    private Expression _expression;
    private IBsonSerializer _serializer;
    public AstExpression Ast { get; }
    public Expression Expression { get; }
    public IBsonSerializer Serializer { get; }
    public AggregationExpression(Expression expression, AstExpression ast, IBsonSerializer serializer);
    public AstExpression get_Ast();
    public Expression get_Expression();
    public IBsonSerializer get_Serializer();
    public virtual string ToString();
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ArrayIndexExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, BinaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ArrayLengthExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, UnaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.BinaryExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, BinaryExpression expression);
    public static bool AreOperandTypesCompatible(Expression expression, Expression leftExpression, Expression rightExpression);
    private static IBsonSerializer GetConstantSerializer(BinaryExpression containingExpression, IBsonSerializer otherSerializer, Type constantType);
    private static bool IsAddOrSubtractExpression(Expression expression);
    private static bool IsArithmeticExpression(BinaryExpression expression);
    private static bool IsArithmeticOperator(ExpressionType nodeType);
    private static bool IsComparisonExpression(Expression expression);
    private static bool IsConvertEnumToUnderlyingType(Expression expression);
    internal static bool IsEnumExpression(BinaryExpression expression);
    private static bool IsEnumOrConvertEnumToUnderlyingType(Expression expression);
    private static AstBinaryOperator ToBinaryOperator(ExpressionType nodeType);
    private static AggregationExpression TranslateConstant(BinaryExpression containingExpression, ConstantExpression constantExpression, IBsonSerializer otherSerializer);
    private static AggregationExpression TranslateEnumExpression(TranslationContext context, BinaryExpression expression);
    [CompilerGeneratedAttribute]
internal static AggregationExpression <TranslateEnumExpression>g__TranslateEnumConstant|12_0(Expression expression, Expression constantExpression, IBsonSerializer serializer);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ConditionalExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, ConditionalExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ConstantExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, ConstantExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ConvertExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, UnaryExpression expression);
    private static AggregationExpression Translate(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
    private static bool IsConvertEnumToEnum(Type sourceType, Type targetType);
    private static bool IsConvertEnumToUnderlyingType(Type sourceType, Type targetType);
    private static bool IsConvertFromNullableType(Type sourceType);
    private static bool IsConvertToBaseType(Type sourceType, Type targetType);
    private static bool IsConvertToDerivedType(Type sourceType, Type targetType);
    private static bool IsConvertToNullableType(Type targetType);
    private static bool IsConvertUnderlyingTypeToEnum(Type sourceType, Type targetType);
    private static AggregationExpression TranslateConvertToBaseType(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertToDerivedType(UnaryExpression expression, Type targetType, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertToBsonValue(UnaryExpression expression, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertEnumToEnum(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertEnumToUnderlyingType(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertFromNullableType(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertToNullableType(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
    private static AggregationExpression TranslateConvertUnderlyingTypeToEnum(UnaryExpression expression, Type sourceType, Type targetType, AggregationExpression sourceTranslation);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, Expression expression);
    public static AggregationExpression TranslateEnumerable(TranslationContext context, Expression expression);
    public static AggregationExpression TranslateLambdaBody(TranslationContext context, LambdaExpression lambdaExpression, IBsonSerializer parameterSerializer, bool asRoot);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.GetTypeComparisonExpressionToAggregationExpressionTranslator : object {
    public static bool CanTranslate(BinaryExpression expression);
    public static AggregationExpression Translate(TranslationContext context, BinaryExpression expression);
    private static bool CanTranslate(BinaryExpression expression, MethodCallExpression& getTypeMethodCallExpression, Type& comparandType);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.IndexExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, IndexExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MemberExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MemberExpression expression);
    private static AggregationExpression TranslateTupleItemProperty(MemberExpression expression, AggregationExpression containerTranslation);
    private static bool TryTranslateCollectionCountProperty(MemberExpression expression, AggregationExpression container, MemberInfo memberInfo, AggregationExpression& result);
    private static bool TryTranslateDateTimeProperty(MemberExpression expression, AggregationExpression container, MemberInfo memberInfo, AggregationExpression& result);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MemberInitExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MemberInitExpression expression);
    public static AggregationExpression Translate(TranslationContext context, Expression expression, NewExpression newExpression, IReadOnlyList`1<MemberBinding> bindings);
    private static BsonClassMap CreateClassMap(Type classType, ConstructorInfo constructorInfo, BsonCreatorMap& creatorMap);
    private static IBsonSerializer CoerceSourceSerializerToMemberSerializer(BsonMemberMap memberMap, IBsonSerializer sourceSerializer);
    private static BsonMemberMap EnsureMemberMap(Expression expression, BsonClassMap classMap, MemberInfo creatorMapParameter);
    private static void EnsureDefaultValue(BsonMemberMap memberMap);
    private static BsonMemberMap FindMemberMap(Expression expression, BsonClassMap classMap, string memberName);
    [CompilerGeneratedAttribute]
internal static bool <EnsureMemberMap>g__MemberMapMatchesCreatorMapParameter|4_0(BsonMemberMap memberMap, MemberInfo creatorMapParameter);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodCallExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AbsMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __absMethods;
    private static AbsMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AddMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AddToSetMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AggregateMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __aggregateMethods;
    private static MethodInfo[] __aggregateWithoutSeedMethods;
    private static MethodInfo[] __aggregateWithSeedMethods;
    private static MethodInfo[] __aggregateWithSeedFuncAndResultSelectorMethods;
    private static AggregateMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AllMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __allMethods;
    private static AllMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AnyMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __anyMethods;
    private static MethodInfo[] __anyWithPredicateMethods;
    private static AnyMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AsQueryableMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.AverageMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __averageMethods;
    private static MethodInfo[] __averageWithSelectorMethods;
    private static AverageMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.CeilingMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.CompareToMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ConcatMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ContainsKeyMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static AstExpression GetKeyFieldName(TranslationContext context, Expression expression, Expression keyExpression, IBsonSerializer keySerializer);
    private static IBsonDictionarySerializer GetDictionarySerializer(Expression expression, AggregationExpression dictionaryTranslation);
    private static bool IsContainsKeyMethod(MethodInfo method);
    private static void ThrowIfKeyIsNotRepresentedAsAString(Expression expression, IBsonSerializer keySerializer);
    private static void ThrowIfKeyIsNotRepresentedAsAString(Expression expression, BsonType keyRepresentation);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ContainsMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsEnumerableContainsMethod(MethodCallExpression expression, Expression& sourceExpression, Expression& valueExpression);
    private static AggregationExpression TranslateEnumerableContains(TranslationContext context, MethodCallExpression expression, Expression sourceExpression, Expression valueExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ContainsValueMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static IBsonDictionarySerializer GetDictionarySerializer(Expression expression, AggregationExpression dictionaryTranslation);
    private static bool IsContainsValueMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.CountMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __countMethods;
    private static MethodInfo[] __countWithPredicateMethods;
    private static CountMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static IBsonSerializer GetSerializer(Type type);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.CovariancePopulationMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.CovarianceSampleMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.CreateMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __tupleCreateMethods;
    private static MethodInfo[] __valueTupleCreateMethods;
    private static CreateMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static IBsonSerializer CreateTupleSerializer(Type tupleType, IEnumerable`1<IBsonSerializer> itemSerializers);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DateFromStringMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __dateFromStringMethods;
    private static MethodInfo[] __withFormatMethods;
    private static MethodInfo[] __withTimezoneMethods;
    private static DateFromStringMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DateTimeAddOrSubtractMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __dateTimeAddOrSubtractMethods;
    private static MethodInfo[] __dateTimeAddOrSubtractWithTimeSpanMethods;
    private static MethodInfo[] __dateTimeAddOrSubtractWithUnitMethods;
    private static MethodInfo[] __dateTimeAddOrSubtractWithTimezoneMethods;
    private static MethodInfo[] __dateTimeSubtractMethods;
    private static DateTimeAddOrSubtractMethodToAggregationExpressionTranslator();
    public static bool CanTranslate(MethodCallExpression expression);
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DateTimeSubtractWithDateTimeMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __dateTimeSubtractWithDateTimeMethods;
    private static MethodInfo[] __dateTimeSubtractWithTimezoneMethods;
    private static MethodInfo[] __dateTimeSubtractWithUnitMethods;
    private static DateTimeSubtractWithDateTimeMethodToAggregationExpressionTranslator();
    public static bool CanTranslate(MethodCallExpression expression);
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DefaultIfEmptyMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __defaultIfEmptyMethods;
    private static MethodInfo[] __defaultIfEmptyWithDefaultValueMethods;
    private static DefaultIfEmptyMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DenseRankMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DerivativeMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DistinctMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __distinctMethods;
    private static DistinctMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.DocumentNumberMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ElementAtMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __elementAtMethods;
    private static MethodInfo[] __elementAtOrDefaultMethods;
    private static ElementAtMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.EnumerableConcatMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __concatMethods;
    private static EnumerableConcatMethodToAggregationExpressionTranslator();
    public static bool CanTranslate(MethodCallExpression expression);
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.EqualsMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsInstanceEqualsMethod(MethodInfo method);
    private static bool IsStringEqualsMethod(MethodInfo method);
    private static AggregationExpression TranslateInstanceEqualsMethod(TranslationContext context, MethodCallExpression expression);
    private static AggregationExpression TranslateStringEqualsMethod(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ExceptMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __exceptMethods;
    private static ExceptMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ExistsMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ExpMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ExponentialMovingAverageMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.FirstOrLastMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __firstOrLastMethods;
    private static MethodInfo[] __firstMethods;
    private static MethodInfo[] __orDefaultMethods;
    private static MethodInfo[] __withPredicateMethods;
    private static FirstOrLastMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.FloorMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.GetItemMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    public static AggregationExpression Translate(TranslationContext context, Expression expression, MethodInfo method, Expression sourceExpression, ReadOnlyCollection`1<Expression> arguments);
    private static IBsonSerializer GetDictionaryValueSerializer(IBsonSerializer serializer);
    private static AggregationExpression TranslateBsonValueGetItemWithInt(TranslationContext context, Expression expression, Expression sourceExpression, Expression indexExpression);
    private static AggregationExpression TranslateBsonValueGetItemWithString(TranslationContext context, Expression expression, Expression sourceExpression, Expression keyExpression);
    private static AggregationExpression TranslateIListGetItemWithInt(TranslationContext context, Expression expression, Expression sourceExpression, Expression indexExpression);
    private static AggregationExpression TranslateIDictionaryGetItemWithString(TranslationContext context, Expression expression, Expression sourceExpression, Expression keyExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IndexOfAnyMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __indexOfAnyMethods;
    private static IndexOfAnyMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<AstVarBinding, AstExpression> <Translate>g__TranslateObject|1_0(Expression objectExpression, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static string <Translate>g__TranslateAnyOf|1_1(ReadOnlyCollection`1<Expression> arguments, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<AstVarBinding, AstExpression> <Translate>g__TranslateStartIndex|1_2(ReadOnlyCollection`1<Expression> arguments, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<AstVarBinding, AstExpression> <Translate>g__TranslateCount|1_3(ReadOnlyCollection`1<Expression> arguments, <>c__DisplayClass1_0& );
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<AstVarBinding, AstExpression> <Translate>g__ComputeEnd|1_4(AstExpression startIndexAst, AstExpression countAst);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IndexOfMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __indexOfMethods;
    private static MethodInfo[] __indexOfWithStartIndexMethods;
    private static MethodInfo[] __indexOfWithCountMethods;
    private static MethodInfo[] __indexOfWithStringComparisonMethods;
    private static MethodInfo[] __indexOfBytesMethods;
    private static IndexOfMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsStringIndexOfMethod(MethodCallExpression expression, Expression& instanceExpression, Expression& valueExpression, Expression& startIndexExpression, Expression& countExpression, Expression& comparisonTypeExpression);
    [CompilerGeneratedAttribute]
internal static AggregationExpression <Translate>g__TranslateValue|5_0(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static bool <Translate>g__GetOrdinalFromComparisonType|5_1(<>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__CreateEndAst|5_2(AstExpression startIndexAst, AstExpression countAst);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IntegralMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IntersectMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __intersectMethods;
    private static IntersectMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IsMatchMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IsMissingMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __isMissingMethods;
    private static IsMissingMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IsNullOrEmptyMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IsNullOrWhiteSpaceMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.IsSubsetOfMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsIsSubsetOfMethod(MethodCallExpression expression, Expression& sourceExpression, Expression& otherExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.LocfMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.LogMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.MaxOrMinMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __maxOrMinMethods;
    private static MaxOrMinMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.OrderByMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __translatableMethods;
    private static MethodInfo[] __orderByMethods;
    private static MethodInfo[] __thenByMethods;
    private static OrderByMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static AstSortOrder GetOrder(MethodInfo method);
    private static bool IsIdentityLambda(LambdaExpression lambdaExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ParseMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static AggregationExpression TranslateDateTimeParse(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.PickMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __pickMethods;
    private static MethodInfo[] __withNMethods;
    private static MethodInfo[] __withComputedNMethods;
    private static MethodInfo[] __withSortByMethods;
    private static MethodInfo[] __accumulatorOnlyMethods;
    private static PickMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static AstPickOperator GetPlaceholderOperator(MethodInfo method);
    private static AstPickOperator GetArrayOperator(MethodInfo method);
    private static Expression GetSelectorArgument(MethodInfo method, Expression[] arguments);
    private static object GetSortByDefinition(Expression sortByExpression, Expression expression);
    private static bool IsGroupingSource(AstExpression source);
    private static bool IsValidKey(AggregationExpression keyTranslation);
    private static AstSortFields TranslateSortByDefinition(Expression expression, Expression sortByExpression, object sortByDefinition, IBsonSerializer documentSerializer);
    private static AstSortFields TranslateSortByDefinitionGeneric(Expression expression, Expression sortByExpression, SortDefinition`1<TDocument> sortByDefinition, IBsonSerializer`1<TDocument> documentSerializer);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.PowMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.PushMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.RangeMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.RankMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ReverseMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __reverseMethods;
    private static ReverseMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.RoundMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __roundMethods;
    private static MethodInfo[] __roundWithPlaceMethods;
    private static RoundMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SelectManyMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __selectManyMethods;
    private static SelectManyMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SelectMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __selectMethods;
    private static SelectMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SetEqualsMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsSetEqualsMethod(MethodCallExpression expression, Expression& objectExpression, Expression& otherExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ShiftMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SplitMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __splitMethods;
    private static MethodInfo[] __splitWithCharsMethods;
    private static MethodInfo[] __splitWithCountMethods;
    private static MethodInfo[] __splitWithOptionsMethods;
    private static MethodInfo[] __splitWithStringsMethods;
    private static SplitMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SqrtMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.StandardDeviationMethodsToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsStandardDeviationMethod(MethodInfo methodInfo, AstUnaryOperator& stddevOperator);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.StartsWithContainsOrEndsWithMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __startsWithContainsOrEndsWithMethods;
    private static MethodInfo[] __withComparisonTypeMethods;
    private static MethodInfo[] __withIgnoreCaseAndCultureMethods;
    private static StartsWithContainsOrEndsWithMethodToAggregationExpressionTranslator();
    public static bool CanTranslate(MethodCallExpression expression);
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__CreateAst|5_0(string methodName, AstExpression stringAst, AstExpression substringAst);
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__CreateStartsWithAst|5_5(AstExpression stringAst, AstExpression substringAst);
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__CreateContainsAst|5_6(AstExpression stringAst, AstExpression substringAst);
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__CreateEndsWithAst|5_7(AstExpression stringAst, AstExpression substringAst);
    [CompilerGeneratedAttribute]
internal static bool <Translate>g__GetIgnoreCaseFromComparisonType|5_1(Expression comparisonTypeExpression, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static bool <Translate>g__GetIgnoreCaseFromIgnoreCaseAndCulture|5_2(Expression ignoreCaseExpression, Expression cultureExpression, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static bool <Translate>g__IsWithComparisonTypeMethod|5_3(MethodInfo method);
    [CompilerGeneratedAttribute]
internal static bool <Translate>g__IsWithIgnoreCaseAndCultureMethod|5_4(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.StringConcatMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __stringConcatMethods;
    private static StringConcatMethodToAggregationExpressionTranslator();
    public static bool CanTranslate(BinaryExpression expression, MethodInfo& method, ReadOnlyCollection`1& arguments);
    public static bool CanTranslate(MethodCallExpression expression, MethodInfo& method, ReadOnlyCollection`1& arguments);
    public static AggregationExpression Translate(TranslationContext context, Expression expression, MethodInfo method, ReadOnlyCollection`1<Expression> arguments);
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__ExpressionToString|3_2(AggregationExpression aggregationExpression);
    [CompilerGeneratedAttribute]
internal static string <Translate>g__ValueToString|3_3(Expression expression, BsonValue value);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.StrLenBytesMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SubstringMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static AggregationExpression TranslateHelper(TranslationContext context, Expression expression, Expression stringExpression, Expression startIndexExpression, Expression lengthExpression, AstTernaryOperator substrOperator);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SubtractMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.SumMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __sumMethods;
    private static SumMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.TakeMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __takeMethods;
    private static MethodInfo[] __skipMethods;
    private static TakeMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ToArrayMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ToListMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ToLowerOrToUpperMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ToStringMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __dateTimeToStringMethods;
    private static MethodInfo[] __dateTimeToStringMethodsWithTimezone;
    private static MethodInfo[] __dateTimeToStringMethodsWithOnNull;
    private static ToStringMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static bool IsInstanceToStringMethodWithNoArguments(MethodInfo method);
    private static AggregationExpression TranslateDateTimeToStringMethod(TranslationContext context, MethodCallExpression expression, MethodInfo method, Expression[] arguments);
    private static AggregationExpression TranslateInstanceToStringMethodWithNoArguments(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.TrigMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __binaryTrigMethods;
    private static MethodInfo[] __unaryTrigMethods;
    private static TrigMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static AstBinaryOperator ToBinaryOperator(string methodName);
    private static AstUnaryOperator ToUnaryOperator(string methodName);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.TrimMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __trimMethods;
    private static TrimMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    [CompilerGeneratedAttribute]
internal static AstExpression <Translate>g__GetTrimCharsValue|2_0(Expression trimCharsExpression, <>c__DisplayClass2_0& );
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.TruncateMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.UnionMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __unionMethods;
    private static UnionMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.WeekMethodToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.WhereMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __whereMethods;
    private static WhereMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.WindowMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __windowMethods;
    private static MethodInfo[] __nullaryMethods;
    private static MethodInfo[] __unaryMethods;
    private static MethodInfo[] __binaryMethods;
    private static MethodInfo[] __derivativeOrIntegralMethods;
    private static MethodInfo[] __exponentialMovingAverageMethods;
    private static MethodInfo[] __shiftMethods;
    private static WindowMethodToAggregationExpressionTranslator();
    public static bool CanTranslate(MethodCallExpression expression);
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
    private static TExpression GetArgument(ParameterInfo[] parameters, string parameterName, Expression[] arguments);
    public static AstBinaryWindowOperator GetBinaryWindowOperator(MethodInfo method);
    public static AstDerivativeOrIntegralWindowOperator GetDerivativeOrIntegralWindowOperator(MethodInfo method);
    public static AstNullaryWindowOperator GetNullaryWindowOperator(MethodInfo method);
    public static AstUnaryWindowOperator GetUnaryWindowOperator(MethodInfo method);
    private static bool HasArgument(ParameterInfo[] parameters, string parameterName, Expression[] arguments, TExpression& argument);
    private static void ThrowIfSelectorTranslationIsNull(AggregationExpression selectTranslation);
    private static AggregationExpression TranslateSelector(TranslationContext context, LambdaExpression selectorLambda, IBsonSerializer inputSerializer);
    private static AstWindow TranslateWindow(TranslationContext context, Expression expression, Expression windowExpression, IBsonSerializer inputSerializer);
    private static AstWindow ToAstWindow(SetWindowFieldsWindow window, object sortBy, IBsonSerializer inputSerializer, BsonSerializerRegistry serializerRegistry);
    private static IBsonSerializer GetSortBySerializer(object sortBy, IBsonSerializer inputSerializer, BsonSerializerRegistry serializerRegistry);
    private static IBsonSerializer GetSortBySerializerGeneric(SortDefinition`1<TDocument> sortBy, IBsonSerializer`1<TDocument> documentSerializer, BsonSerializerRegistry serializerRegistry);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.MethodTranslators.ZipMethodToAggregationExpressionTranslator : object {
    private static MethodInfo[] __zipMethods;
    private static ZipMethodToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NegateExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, UnaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NewArrayInitExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, NewArrayExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NewDateTimeExpressionToAggregationExpressionTranslator : object {
    private static ConstructorInfo[] __dateTimeConstructors;
    private static NewDateTimeExpressionToAggregationExpressionTranslator();
    public static AggregationExpression Translate(TranslationContext context, NewExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NewExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, NewExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NewHashSetExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, NewExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NewListExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, NewExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NewTupleExpressionToAggregationExpressionTranslator : object {
    public static bool CanTranslate(NewExpression expression);
    public static AggregationExpression Translate(TranslationContext context, NewExpression expression);
    private static IBsonSerializer CreateTupleSerializer(Type tupleType, IEnumerable`1<IBsonSerializer> itemSerializers);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.NotExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, UnaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.ParameterExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, ParameterExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.PropertyTranslators.HasValuePropertyToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MemberExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.PropertyTranslators.LengthPropertyToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MemberExpression expression);
    private static bool IsStringLengthProperty(MemberExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.PropertyTranslators.ValuePropertyToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, MemberExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.StringGetCharsComparisonExpressionToAggregationExpressionTranslator : object {
    public static bool CanTranslate(BinaryExpression expression, MethodCallExpression& getCharsExpression);
    public static AggregationExpression Translate(TranslationContext context, BinaryExpression expression, MethodCallExpression getCharsExpression);
    private static bool IsConvertGetCharsExpression(Expression expression, MethodCallExpression& getCharsExpression);
    private static AstBinaryOperator GetComparisonOperator(Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToAggregationExpressionTranslators.TypeIsExpressionToAggregationExpressionTranslator : object {
    public static AggregationExpression Translate(TranslationContext context, TypeBinaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.AllMethodToExecutableQueryTranslator : object {
    private static AllFinalizer __finalizer;
    private static IBsonSerializer`1<BsonNull> __outputSerializer;
    private static AllMethodToExecutableQueryTranslator();
    public static ExecutableQuery`2<TDocument, bool> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.AnyMethodToExecutableQueryTranslator : object {
    private static MethodInfo[] __anyMethods;
    private static MethodInfo[] __anyWithPredicateMethods;
    private static IExecutableQueryFinalizer`2<BsonNull, bool> __finalizer;
    private static IBsonSerializer`1<BsonNull> __outputSerializer;
    private static AnyMethodToExecutableQueryTranslator();
    public static ExecutableQuery`2<TDocument, bool> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.AverageMethodToExecutableQueryTranslator`1 : object {
    private static MethodInfo[] __averageMethods;
    private static MethodInfo[] __averageWithSelectorMethods;
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __finalizer;
    private static AverageMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ContainsMethodToExecutableQueryTranslator : object {
    private static IExecutableQueryFinalizer`2<BsonNull, bool> __finalizer;
    private static IBsonSerializer`1<BsonNull> __outputSerializer;
    private static ContainsMethodToExecutableQueryTranslator();
    public static ExecutableQuery`2<TDocument, bool> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.CountMethodToExecutableQueryTranslator : object {
    private static MethodInfo[] __countMethods;
    private static MethodInfo[] __countWithPredicateMethods;
    private static IExecutableQueryFinalizer`2<int, int> _finalizer;
    private static IBsonSerializer`1<int> __wrappedInt32Serializer;
    private static CountMethodToExecutableQueryTranslator();
    public static ExecutableQuery`2<TDocument, int> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ElementAtMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __finalizer;
    private static ElementAtMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExecutableQuery : object {
    public static ExecutableQuery`3<TDocument, TOutput, TResult> Create(MongoQueryProvider`1<TDocument> provider, AstPipeline unoptimizedPipeline, IExecutableQueryFinalizer`2<TOutput, TResult> finalizer);
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExecutableQuery`1 : object {
    public BsonDocument[] LoggedStages { get; }
    public AstPipeline Pipeline { get; }
    public abstract virtual BsonDocument[] get_LoggedStages();
    public abstract virtual AstPipeline get_Pipeline();
}
internal abstract class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExecutableQuery`2 : ExecutableQuery`1<TDocument> {
    public abstract virtual TResult Execute(IClientSessionHandle session, CancellationToken cancellation);
    public abstract virtual Task`1<TResult> ExecuteAsync(IClientSessionHandle session, CancellationToken cancellation);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExecutableQuery`3 : ExecutableQuery`2<TDocument, TResult> {
    private IMongoCollection`1<TDocument> _collection;
    private IMongoDatabase _database;
    private IExecutableQueryFinalizer`2<TOutput, TResult> _finalizer;
    private BsonDocument[] _loggedStages;
    private AggregateOptions _options;
    private AstPipeline _pipeline;
    public BsonDocument[] LoggedStages { get; }
    public AstPipeline Pipeline { get; }
    public ExecutableQuery`3(IMongoCollection`1<TDocument> collection, AggregateOptions options, AstPipeline pipeline, IExecutableQueryFinalizer`2<TOutput, TResult> finalizer);
    public ExecutableQuery`3(IMongoDatabase database, AggregateOptions options, AstPipeline pipeline, IExecutableQueryFinalizer`2<TOutput, TResult> finalizer);
    private ExecutableQuery`3(AggregateOptions options, AstPipeline pipeline, IExecutableQueryFinalizer`2<TOutput, TResult> finalizer);
    public virtual BsonDocument[] get_LoggedStages();
    public virtual AstPipeline get_Pipeline();
    public virtual TResult Execute(IClientSessionHandle session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExecutableQuery`3/<ExecuteAsync>d__14")]
public virtual Task`1<TResult> ExecuteAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual string ToString();
    private BsonDocumentStagePipelineDefinition`2<TDocument, TOutput> CreateCollectionPipelineDefinition(BsonDocument[] stages);
    private BsonDocumentStagePipelineDefinition`2<NoPipelineInput, TOutput> CreateDatabasePipelineDefinition(BsonDocument[] stages);
    private BsonDocument[] RenderPipeline();
    private IBsonSerializer`1<TOutput> GetOutputSerializer();
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExecutableQueryExtensions : object {
    [ExtensionAttribute]
public static ExecutableQuery`2<TDocument, TResult> AsExecutableQuery(ExecutableQuery`1<TDocument> executableQuery);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.ExpressionToExecutableQueryTranslator : object {
    public static ExecutableQuery`2<TDocument, IAsyncCursor`1<TOutput>> Translate(MongoQueryProvider`1<TDocument> provider, Expression expression);
    public static ExecutableQuery`2<TDocument, TResult> TranslateScalar(MongoQueryProvider`1<TDocument> provider, Expression expression);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.FirstFinalizer`1 : object {
    public sealed virtual TOutput Finalize(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.FirstFinalizer`1/<FinalizeAsync>d__1")]
public sealed virtual Task`1<TOutput> FinalizeAsync(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.FirstOrDefaultFinalizer`1 : object {
    public sealed virtual TOutput Finalize(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.FirstOrDefaultFinalizer`1/<FinalizeAsync>d__1")]
public sealed virtual Task`1<TOutput> FinalizeAsync(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.SingleFinalizer`1 : object {
    public sealed virtual TOutput Finalize(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.SingleFinalizer`1/<FinalizeAsync>d__1")]
public sealed virtual Task`1<TOutput> FinalizeAsync(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.SingleOrDefaultFinalizer`1 : object {
    public sealed virtual TOutput Finalize(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.Finalizers.SingleOrDefaultFinalizer`1/<FinalizeAsync>d__1")]
public sealed virtual Task`1<TOutput> FinalizeAsync(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.FirstMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __firstFinalizer;
    private static MethodInfo[] __firstMethods;
    private static MethodInfo[] __firstWithPredicateMethods;
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __firstOrDefaultFinalizer;
    private static FirstMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal interface MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.IExecutableQueryFinalizer`2 {
    public abstract virtual TResult Finalize(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> FinalizeAsync(IAsyncCursor`1<TOutput> cursor, CancellationToken cancellationToken);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.LastMethodToExecutableQueryTranslator`1 : object {
    private static MethodInfo[] __lastMethods;
    private static MethodInfo[] __lastWithPredicateMethods;
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __singleFinalizer;
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __singleOrDefaultFinalizer;
    private static LastMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.LongCountMethodToExecutableQueryTranslator : object {
    private static MethodInfo[] __longCountMethods;
    private static MethodInfo[] __longCountWithPredicateMethods;
    private static IExecutableQueryFinalizer`2<long, long> _finalizer;
    private static IBsonSerializer`1<long> __wrappedInt64Serializer;
    private static LongCountMethodToExecutableQueryTranslator();
    public static ExecutableQuery`2<TDocument, long> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.MaxMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __finalizer;
    private static MethodInfo[] __maxMethods;
    private static MethodInfo[] __maxWithSelectorMethods;
    private static MaxMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.MinMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __finalizer;
    private static MethodInfo[] __minMethods;
    private static MethodInfo[] __minWithSelectorMethods;
    private static MinMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.SingleMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __singleFinalizer;
    private static MethodInfo[] __singleMethods;
    private static MethodInfo[] __singleOrDefaultMethods;
    private static MethodInfo[] __singleWithPredicateMethods;
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __singleOrDefaultFinalizer;
    private static SingleMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.StandardDeviationMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __singleFinalizer;
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __singleOrDefaultFinalizer;
    private static MethodInfo[] __standardDeviationMethods;
    private static MethodInfo[] __standardDeviationNullableMethods;
    private static MethodInfo[] __standardDeviationPopulationMethods;
    private static MethodInfo[] __standardDeviationWithSelectorMethods;
    private static StandardDeviationMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToExecutableQueryTranslators.SumMethodToExecutableQueryTranslator`1 : object {
    private static IExecutableQueryFinalizer`2<TOutput, TOutput> __finalizer;
    private static MethodInfo[] __sumMethods;
    private static MethodInfo[] __sumWithSelectorMethods;
    private static SumMethodToExecutableQueryTranslator`1();
    public static ExecutableQuery`2<TDocument, TOutput> Translate(MongoQueryProvider`1<TDocument> provider, TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, Expression expression, bool exprOk);
    public static AstFilter TranslateLambda(TranslationContext context, LambdaExpression lambdaExpression, IBsonSerializer parameterSerializer, bool asRoot);
    private static AstFilter TranslateUsingAggregationOperators(TranslationContext context, Expression expression);
    private static AstFilter TranslateUsingQueryOperators(TranslationContext context, Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.AndExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.ArrayLengthComparisonExpressionToFilterTranslator : object {
    public static bool CanTranslate(Expression leftExpression, Expression rightExpression, UnaryExpression& arrayLengthExpression, Expression& sizeExpression);
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression, AstComparisonFilterOperator comparisonOperator, UnaryExpression arrayLengthExpression, Expression sizeExpression);
    [CompilerGeneratedAttribute]
internal static AstFilterField <Translate>g__ItemField|1_0(AstFilterField field, int index);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.BitMaskComparisonExpressionToFilterTranslator : object {
    public static bool CanTranslate(Expression leftExpression, Expression rightExpression);
    public static bool CanTranslate(Expression leftExpression, Expression rightExpression, BinaryExpression& leftBinaryExpression);
    public static AstFilter Translate(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.CompareToComparisonExpressionToFilterTranslator : object {
    public static bool CanTranslate(Expression leftExpression);
    public static AstFilter Translate(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.ComparisonExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression);
    private static AstFilter TranslateComparisonToBooleanConstant(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, bool comparand);
    private static AstComparisonFilterOperator GetComparisonOperator(Expression expression);
    private static AstComparisonFilterOperator GetComparisonOperatorForSwappedLeftAndRight(Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.ConstantExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, ConstantExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.CountComparisonExpressionToFilterTranslator : object {
    public static bool CanTranslate(Expression leftExpression, Expression rightExpression, Expression& enumerableExpression, Expression& sizeExpression);
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression, AstComparisonFilterOperator comparisonOperator, Expression enumerableExpression, Expression sizeExpression);
    private static bool TryConvertSizeExpressionToBsonValue(Expression sizeExpression, BsonValue& size);
    [CompilerGeneratedAttribute]
internal static AstFilterField <Translate>g__ItemField|1_0(AstFilterField field, long index);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.GetTypeComparisonExpressionToFilterTranslator : object {
    public static bool CanTranslate(Expression leftExpression, Expression rightExpression);
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression, MethodCallExpression getTypeExpression, Expression typeConstantExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.MemberExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MemberExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.ModuloComparisonExpressionToFilterTranslator : object {
    public static bool CanTranslate(Expression leftExpression, Expression rightExpression, BinaryExpression& moduloExpression, Expression& remainderExpression);
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression, BinaryExpression moduloExpression, Expression remainderExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.NotExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, UnaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.OrExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, BinaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.ParameterExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, ParameterExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ExpressionTranslators.TypeIsExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, TypeBinaryExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.AllOrAnyMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.AllWithContainsInPredicateMethodToFilterTranslator : object {
    public static bool CanTranslate(MethodCallExpression expression, Expression& arrayFieldExpression, ConstantExpression& arrayConstantExpression);
    public static AstFilter Translate(TranslationContext context, Expression arrayFieldExpression, ConstantExpression arrayConstantExpression);
    private static bool IsContainsParameterExpression(Expression predicateBody, ParameterExpression predicateParameter, Expression& innerSourceExpression);
    [CompilerGeneratedAttribute]
internal static bool <IsContainsParameterExpression>g__IsContainsMethodCall|2_0(MethodCallExpression methodCallExpression, Expression& sourceExpression, Expression& valueExpression);
    [CompilerGeneratedAttribute]
internal static bool <IsContainsParameterExpression>g__ValueTypeIsElementTypeOfSourceType|2_1(Expression valueExpression, Expression sourceExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.AnyWithContainsInPredicateMethodToFilterTranslator : object {
    public static bool CanTranslate(MethodCallExpression expression, Expression& arrayFieldExpression, ConstantExpression& arrayConstantExpression);
    public static AstFilter Translate(TranslationContext context, Expression arrayFieldExpression, ConstantExpression arrayConstantExpression);
    private static bool IsContainsParameterExpression(Expression predicateBody, ParameterExpression predicateParameter, Expression& innerSourceExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.ContainsKeyMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
    private static IBsonDictionarySerializer GetDictionarySerializer(Expression expression, AstFilterField field);
    private static string GetKeyStringConstant(Expression expression, Expression keyExpression, IBsonSerializer keySerializer);
    private static bool IsContainsKeyMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.ContainsMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
    private static AstFilter Translate(TranslationContext context, Expression expression, Expression sourceExpression, Expression itemExpression);
    private static bool TypeImplementsIEnumerable(Type type, Type itemType);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.ContainsValueMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
    private static IBsonDictionarySerializer GetDictionarySerializer(Expression expression, AstFilterField field);
    private static bool IsContainsValueMethod(MethodInfo method);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.EndsWithMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.EqualsMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
    private static AstFilter Translate(TranslationContext context, Expression expression, Expression expression1, Expression expression2);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.ExistsMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.FilteredEnumerableFilterFieldTranslator : object {
    public static ValueTuple`2<AstFilterField, AstFilter> Translate(TranslationContext context, Expression sourceExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.HasFlagMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.InjectMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.IsMatchMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.IsNullOrEmptyMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.IsNullOrWhiteSpaceMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.MethodCallExpressionToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.StartsWithMethodToFilterTranslator : object {
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.StringExpressionToRegexFilterTranslator : object {
    private static MethodInfo[] __indexOfAnyMethods;
    private static MethodInfo[] __indexOfMethods;
    private static MethodInfo[] __indexOfWithCharMethods;
    private static MethodInfo[] __indexOfWithComparisonTypeMethods;
    private static MethodInfo[] __indexOfWithCountMethods;
    private static MethodInfo[] __indexOfWithStartIndexMethods;
    private static MethodInfo[] __indexOfWithStringMethods;
    private static MethodInfo[] __modifierMethods;
    private static MethodInfo[] __translatableMethods;
    private static MethodInfo[] __withComparisonTypeMethods;
    private static MethodInfo[] __withIgnoreCaseAndCultureMethods;
    private static StringExpressionToRegexFilterTranslator();
    public static bool CanTranslate(Expression expression);
    public static bool CanTranslateComparisonExpression(Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
    public static bool TryTranslate(TranslationContext context, Expression expression, AstFilter& filter);
    public static bool TryTranslateComparisonExpression(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression, AstFilter& filter);
    public static AstFilter Translate(TranslationContext context, Expression expression);
    public static AstFilter TranslateComparisonExpression(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
    private static AstFilter CreateRegexFilter(AstFilterField field, Modifiers modifiers, string pattern);
    private static string CreateRegexOptions(Modifiers modifiers);
    private static string EscapeCharacterSet(Char[] chars);
    private static string GetEscapedTrimChars(MethodCallExpression trimExpression);
    private static bool IsGetCharsComparison(Expression leftExpression);
    private static bool IsStringEqualityComparison(Expression leftExpression, AstComparisonFilterOperator comparisonOperator);
    private static bool IsStringCountComparison(Expression leftExpression);
    private static bool IsStringIndexOfComparison(Expression leftExpression);
    private static bool IsStringLengthComparison(Expression leftExpression);
    private static bool IsWithComparisonTypeMethod(MethodInfo method);
    private static Modifiers TranslateComparisonType(Modifiers modifiers, Expression expression, Expression comparisonTypeExpression);
    private static Modifiers TranslateCulture(Modifiers modifiers, Expression expression, Expression cultureExpression);
    private static AstFilter TranslateGetCharsComparison(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
    private static ValueTuple`2<AstFilterField, Modifiers> TranslateField(TranslationContext context, Expression expression, Expression fieldExpression);
    private static Modifiers TranslateIgnoreCase(Modifiers modifiers, Expression expression, Expression ignoreCaseExpression);
    private static Modifiers TranslateModifier(Modifiers modifiers, MethodCallExpression modifierExpression);
    private static AstFilter TranslateStartsWithOrContainsOrEndsWith(TranslationContext context, MethodCallExpression expression);
    private static AstFilter TranslateStringEqualityComparison(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
    private static AstFilter TranslateStringIndexOfComparison(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
    private static AstFilter TranslateStringLengthComparison(TranslationContext context, Expression expression, Expression leftExpression, AstComparisonFilterOperator comparisonOperator, Expression rightExpression);
    private static Modifiers TranslateToLower(Modifiers modifiers, MethodCallExpression toLowerExpression);
    private static Modifiers TranslateToUpper(Modifiers modifiers, MethodCallExpression toUpperExpression);
    private static Modifiers TranslateTrim(Modifiers modifiers, MethodCallExpression trimExpression);
    private static Modifiers TranslateTrimEnd(Modifiers modifiers, MethodCallExpression trimEndExpression);
    private static Modifiers TranslateTrimStart(Modifiers modifiers, MethodCallExpression trimStartExpression);
    [CompilerGeneratedAttribute]
internal static string <TranslateStartsWithOrContainsOrEndsWith>g__CreatePattern|34_0(string methodName, string value);
    [CompilerGeneratedAttribute]
internal static bool <TranslateStartsWithOrContainsOrEndsWith>g__IsImpossibleMatch|34_1(Modifiers modifiers, string value);
    [CompilerGeneratedAttribute]
internal static bool <TranslateStringEqualityComparison>g__IsImpossibleMatch|35_0(Modifiers modifiers, string comparand);
    [CompilerGeneratedAttribute]
internal static AstFilter <TranslateStringIndexOfComparison>g__CreateFilter|36_0(Expression expression, AstFilterField field, Modifiers modifiers, AstComparisonFilterOperator comparisonOperator, string pattern);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.MethodTranslators.StringInOrNinMethodToFilterTranslator : object {
    private static MethodInfo[] __stringInOrNinMethods;
    private static MethodInfo[] __stringInMethods;
    private static StringInOrNinMethodToFilterTranslator();
    public static AstFilter Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.AllElementsMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.AllMatchingElementsMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.ArrayIndexExpressionToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, BinaryExpression expression);
    public static AstFilterField Translate(TranslationContext context, Expression expression, Expression fieldExpression, Expression indexExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.ConvertExpressionToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, UnaryExpression expression);
    private static bool IsConvertEnumToUnderlyingType(Type fieldType, Type targetType);
    private static bool IsConvertToBaseType(Type fieldType, Type targetType);
    private static bool IsConvertToDerivedType(Type fieldType, Type targetType);
    private static bool IsConvertToNullable(Type fieldType, Type targetType);
    private static bool IsConvertUnderlyingTypeToEnum(Type fieldType, Type targetType);
    private static bool IsNumericConversion(Type fieldType, Type targetType);
    private static bool IsNumericType(Type type);
    private static AstFilterField TranslateConvertEnumToUnderlyingType(AstFilterField field, Type targetType);
    private static AstFilterField TranslateConvertToBaseType(AstFilterField field, Type baseType);
    private static AstFilterField TranslateConvertToDerivedType(AstFilterField field, Type targetType);
    private static AstFilterField TranslateConvertToNullable(AstFilterField field);
    private static AstFilterField TranslateConvertUnderlyingTypeToEnum(AstFilterField field, Type targetType);
    private static AstFilterField TranslateNumericConversion(AstFilterField field, Type targetType);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.ElementAtMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.ExpressionToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, Expression expression);
    public static AstFilterField TranslateEnumerable(TranslationContext context, Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.FirstMatchingElementMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.FirstMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.GetItemMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
    public static AstFilterField Translate(TranslationContext context, Expression expression, MethodInfo method, Expression fieldExpression, ReadOnlyCollection`1<Expression> arguments);
    private static AstFilterField TranslateBsonValueGetItemWithInt(TranslationContext context, Expression expression, Expression fieldExpression, Expression indexExpression);
    private static AstFilterField TranslateBsonValueGetItemWithString(TranslationContext context, Expression expression, Expression fieldExpression, Expression keyExpression);
    private static AstFilterField TranslateIListGetItemWithInt(TranslationContext context, Expression expression, Expression fieldExpression, Expression indexExpression);
    private static AstFilterField TranslateDictionaryGetItemWithString(TranslationContext context, Expression expression, Expression fieldExpression, Expression keyExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.IndexExpressionToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, IndexExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.MemberExpressionToFilterFieldTranslator : object {
    private static IBsonSerializer`1<Nullable`1<bool>> __nullableBooleanSerializer;
    private static IBsonSerializer`1<Nullable`1<DateTime>> __nullableDateTimeSerializer;
    private static IBsonSerializer`1<Nullable`1<decimal>> __nullableDecimalSerializer;
    private static IBsonSerializer`1<Nullable`1<Decimal128>> __nullableDecimal128Serializer;
    private static IBsonSerializer`1<Nullable`1<double>> __nullableDoubleSerializer;
    private static IBsonSerializer`1<Nullable`1<Guid>> __nullableGuidSerializer;
    private static IBsonSerializer`1<Nullable`1<int>> __nullableInt32Serializer;
    private static IBsonSerializer`1<Nullable`1<long>> __nullableInt64Serializer;
    private static IBsonSerializer`1<Nullable`1<ObjectId>> __nullableObjectIdSerializer;
    private static MemberExpressionToFilterFieldTranslator();
    public static AstFilterField Translate(TranslationContext context, MemberExpression memberExpression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.MethodCallExpressionToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.ParameterExpressionToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, ParameterExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToFilterTranslators.ToFilterFieldTranslators.SelectMethodToFilterFieldTranslator : object {
    public static AstFilterField Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.AppendStageMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
    private static IRenderedPipelineStageDefinition TranslateStage(Expression expression, Expression stageExpression, IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.AsMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.DensifyMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.DistinctMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.DocumentsMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.ExpressionToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, Expression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.GroupByMethodToPipelineTranslator : object {
    private static MethodInfo[] __groupByMethods;
    private static MethodInfo[] __groupByWithElementSelectorMethods;
    private static MethodInfo[] __groupByWithResultSelectorMethods;
    private static GroupByMethodToPipelineTranslator();
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
    private static ValueTuple`2<AstExpression, IBsonSerializer> TranslateElement(TranslationContext context, MethodInfo method, ReadOnlyCollection`1<Expression> arguments, IBsonSerializer sourceSerializer);
    private static AstPipeline TranslateResultSelector(TranslationContext context, AstPipeline pipeline, ReadOnlyCollection`1<Expression> arguments, IBsonSerializer keySerializer, IBsonSerializer elementSerializer);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.GroupJoinMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.JoinMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.OfTypeMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.OrderByMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
    private static AstPipeline AppendSortStages(AstPipeline pipeline, AstStage[] newSortStages);
    private static AstPipeline CombineSortStages(AstPipeline pipeline, AstStage[] newSortStages);
    private static AstStage[] CreateSortStages(string methodName, AggregationExpression keySelectorTranslation);
    private static AstSortOrder ToSortOrder(string methodName);
    private static bool TryConvertKeySelectorTranslationToFieldPath(AggregationExpression keySelectorTranslation, String& path);
    [CompilerGeneratedAttribute]
internal static AstStage[] <CombineSortStages>g__FindOldSortStages|2_0(AstPipeline pipeline);
    [CompilerGeneratedAttribute]
internal static AstPipeline <CombineSortStages>g__Combine1And1|2_1(AstPipeline pipeline, AstStage[] oldSortStages, AstStage[] newSortStages);
    [CompilerGeneratedAttribute]
internal static AstPipeline <CombineSortStages>g__Combine1And3|2_2(AstPipeline pipeline, AstStage[] oldSortStages, AstStage[] newSortStages);
    [CompilerGeneratedAttribute]
internal static AstPipeline <CombineSortStages>g__Combine3And1|2_3(AstPipeline pipeline, AstStage[] oldSortStages, AstStage[] newSortStages);
    [CompilerGeneratedAttribute]
internal static AstPipeline <CombineSortStages>g__Combine3And3|2_4(AstPipeline pipeline, AstStage[] oldSortStages, AstStage[] newSortStages);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.SampleMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.SelectManyMethodToPipelineTranslator : object {
    private static MethodInfo[] __selectManyMethods;
    private static SelectManyMethodToPipelineTranslator();
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
    private static AstPipeline TranslateSelectMany(TranslationContext context, AstPipeline pipeline, ReadOnlyCollection`1<Expression> arguments);
    private static AstPipeline TranslateSelectManyWithCollectionSelectorAndResultSelector(TranslationContext context, AstPipeline pipeline, ReadOnlyCollection`1<Expression> arguments);
    private static AstPipeline TranslateSelectManyWithCollectionSelectorAndIdentityResultSelector(AstPipeline pipeline, AggregationExpression collectionSelectorTranslation);
    private static AstPipeline TranslateSelectManyWithCollectionSelectorAndNonIdentityResultSelector(TranslationContext context, AstPipeline pipeline, AggregationExpression collectionSelectorTranslation, LambdaExpression resultSelectorLambda);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.SelectMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.SkipMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.TakeMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.UnionMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToPipelineTranslators.WhereMethodToPipelineTranslator : object {
    public static AstPipeline Translate(TranslationContext context, MethodCallExpression expression);
}
internal static class MongoDB.Driver.Linq.Linq3Implementation.Translators.ExpressionToSetStageTranslators.ExpressionToSetStageTranslator : object {
    public static AstStage Translate(TranslationContext context, IBsonSerializer inputSerializer, LambdaExpression expression);
    private static bool IsNewAnonymousClass(LambdaExpression expression, NewExpression& newExpression);
    private static bool IsNewWithOptionalMemberInitializers(LambdaExpression expression, MemberInitExpression& memberInitExpression);
    private static AstStage TranslateNewAnonymousClass(TranslationContext context, IBsonDocumentSerializer documentSerializer, NewExpression newExpression);
    private static AstStage TranslateNewWithOptionalMemberInitializers(TranslationContext context, IBsonDocumentSerializer documentSerializer, MemberInitExpression memberInitExpression);
    private static AstComputedField CreateComputedField(TranslationContext context, IBsonDocumentSerializer documentSerializer, MemberInfo member, Expression valueExpression);
    private static void ThrowIfMemberAndValueSerializersAreNotCompatible(Expression expression, IBsonSerializer memberSerializer, IBsonSerializer valueSerializer);
    [CompilerGeneratedAttribute]
internal static bool <IsNewWithOptionalMemberInitializers>g__IsDefaultConstructor|2_0(ConstructorInfo constructor);
    [CompilerGeneratedAttribute]
internal static bool <IsNewWithOptionalMemberInitializers>g__IsCopyConstructor|2_1(ConstructorInfo constructor);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.TranslationContext : object {
    private TranslationContextData _data;
    private KnownSerializersRegistry _knownSerializersRegistry;
    private NameGenerator _nameGenerator;
    private SymbolTable _symbolTable;
    public TranslationContextData Data { get; }
    public KnownSerializersRegistry KnownSerializersRegistry { get; }
    public NameGenerator NameGenerator { get; }
    public SymbolTable SymbolTable { get; }
    private TranslationContext(SymbolTable symbolTable, NameGenerator nameGenerator, KnownSerializersRegistry knownSerializersRegistry, TranslationContextData data);
    public static TranslationContext Create(Expression expression, IBsonSerializer serializer, TranslationContextData data);
    public TranslationContextData get_Data();
    public KnownSerializersRegistry get_KnownSerializersRegistry();
    public NameGenerator get_NameGenerator();
    public SymbolTable get_SymbolTable();
    public Symbol CreateSymbol(ParameterExpression parameter, IBsonSerializer serializer, bool isCurrent);
    public Symbol CreateSymbol(ParameterExpression parameter, string name, IBsonSerializer serializer, bool isCurrent);
    public Symbol CreateSymbol(ParameterExpression parameter, string name, string varName, IBsonSerializer serializer, bool isCurrent);
    public Symbol CreateSymbol(ParameterExpression parameter, AstExpression ast, IBsonSerializer serializer, bool isCurrent);
    public Symbol CreateSymbol(ParameterExpression parameter, string name, AstExpression ast, IBsonSerializer serializer, bool isCurrent);
    public Symbol CreateSymbolWithVarName(ParameterExpression parameter, string varName, IBsonSerializer serializer, bool isCurrent);
    public virtual string ToString();
    public TranslationContext WithSingleSymbol(Symbol newSymbol);
    public TranslationContext WithSymbol(Symbol newSymbol);
    public TranslationContext WithSymbols(Symbol[] newSymbols);
    public TranslationContext WithSymbolTable(SymbolTable symbolTable);
}
internal class MongoDB.Driver.Linq.Linq3Implementation.Translators.TranslationContextData : object {
    private Dictionary`2<string, object> _data;
    private TranslationContextData(Dictionary`2<string, object> data);
    public TValue GetValue(string key);
    public TValue GetValueOrDefault(string key, TValue defaultValue);
    public TranslationContextData With(string key, TValue value);
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.LinqExtensions : object {
    [ExtensionAttribute]
public static bool Inject(FilterDefinition`1<TDocument> filter);
}
public enum MongoDB.Driver.Linq.LinqProvider : Enum {
    public int value__;
    public static LinqProvider V2;
    public static LinqProvider V3;
}
internal abstract class MongoDB.Driver.Linq.LinqProviderAdapter : object {
    public static LinqProviderAdapter V2;
    public static LinqProviderAdapter V3;
    private static LinqProviderAdapter();
    internal abstract virtual IMongoQueryable`1<TDocument> AsQueryable(IMongoCollection`1<TDocument> collection, IClientSessionHandle session, AggregateOptions options);
    internal abstract virtual IMongoQueryable`1<NoPipelineInput> AsQueryable(IMongoDatabase database, IClientSessionHandle session, AggregateOptions options);
    internal abstract virtual BsonValue TranslateExpressionToAggregateExpression(Expression`1<Func`2<TSource, TResult>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions, TranslationContextData contextData);
    internal abstract virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToBucketOutputProjection(Expression`1<Func`2<TInput, TValue>> valueExpression, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> outputExpression, IBsonSerializer`1<TInput> documentSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal abstract virtual RenderedFieldDefinition TranslateExpressionToField(LambdaExpression expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    internal abstract virtual RenderedFieldDefinition`1<TField> TranslateExpressionToField(Expression`1<Func`2<TDocument, TField>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, bool allowScalarValueForArrayField);
    internal abstract virtual BsonDocument TranslateExpressionToFilter(Expression`1<Func`2<TDocument, bool>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    internal abstract virtual RenderedProjectionDefinition`1<TProjection> TranslateExpressionToFindProjection(Expression`1<Func`2<TSource, TProjection>> expression, IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry);
    internal abstract virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToGroupProjection(Expression`1<Func`2<TInput, TKey>> idExpression, Expression`1<Func`2<IGrouping`2<TKey, TInput>, TOutput>> groupExpression, IBsonSerializer`1<TInput> documentSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal abstract virtual RenderedProjectionDefinition`1<TOutput> TranslateExpressionToProjection(Expression`1<Func`2<TInput, TOutput>> expression, IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions);
    internal abstract virtual BsonDocument TranslateExpressionToSetStage(Expression`1<Func`2<TDocument, TOutput>> expression, IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.LinqProviderExtensions : object {
    [ExtensionAttribute]
public static LinqProviderAdapter GetAdapter(LinqProvider linqProvider);
}
public static class MongoDB.Driver.Linq.MongoDBMath : object {
    public static double DegreesToRadians(double degrees);
    public static double RadiansToDegrees(double radians);
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.MongoEnumerable : object {
    [ExtensionAttribute]
internal static HashSet`1<T> ToHashSet(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static TSource AllElements(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource AllMatchingElements(IEnumerable`1<TSource> source, string identifier);
    [ExtensionAttribute]
public static TResult Bottom(IEnumerable`1<TSource> source, SortDefinition`1<TSource> sortBy, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> BottomN(IEnumerable`1<TSource> source, SortDefinition`1<TSource> sortBy, Func`2<TSource, TResult> selector, int n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> BottomN(IEnumerable`1<TSource> source, SortDefinition`1<TSource> sortBy, Func`2<TSource, TResult> selector, TKey key, Func`2<TKey, int> n);
    [ExtensionAttribute]
public static TSource FirstMatchingElement(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FirstN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, int n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FirstN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, TKey key, Func`2<TKey, int> n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LastN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, int n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LastN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, TKey key, Func`2<TKey, int> n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> MaxN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, int n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> MaxN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, TKey key, Func`2<TKey, int> n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> MinN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, int n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> MinN(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, TKey key, Func`2<TKey, int> n);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float StandardDeviationPopulation(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationPopulation(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal StandardDeviationPopulation(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationPopulation(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static float StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static decimal StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationPopulation(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static double StandardDeviationSample(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static double StandardDeviationSample(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float StandardDeviationSample(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationSample(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double StandardDeviationSample(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal StandardDeviationSample(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationSample(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static double StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static double StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static float StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static decimal StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationSample(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
public static TResult Top(IEnumerable`1<TSource> source, SortDefinition`1<TSource> sortBy, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> TopN(IEnumerable`1<TSource> source, SortDefinition`1<TSource> sortBy, Func`2<TSource, TResult> selector, int n);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> TopN(IEnumerable`1<TSource> source, SortDefinition`1<TSource> sortBy, Func`2<TSource, TResult> selector, TKey key, Func`2<TKey, int> n);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, int limit);
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.MongoQueryable : object {
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> AppendStage(IMongoQueryable`1<TSource> source, PipelineStageDefinition`2<TSource, TResult> stage, IBsonSerializer`1<TResult> resultSerializer);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> As(IMongoQueryable`1<TSource> source, IBsonSerializer`1<TResult> resultSerializer);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IMongoQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IMongoQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IMongoQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IMongoQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IMongoQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IMongoQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IMongoQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IMongoQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IMongoQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IMongoQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Densify(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, object>> field, DensifyRange range, IEnumerable`1<Expression`1<Func`2<TSource, object>>> partitionByFields);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Densify(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, object>> field, DensifyRange range, Expression`1[] partitionByFields);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Distinct(IMongoQueryable`1<TSource> source);
    [ExtensionAttribute]
public static IMongoQueryable`1<TDocument> Documents(IMongoQueryable`1<NoPipelineInput> source, TDocument[] documents);
    [ExtensionAttribute]
public static IMongoQueryable`1<TDocument> Documents(IMongoQueryable`1<NoPipelineInput> source, IEnumerable`1<TDocument> documents, IBsonSerializer`1<TDocument> documentSerializer);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IMongoQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> GroupBy(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> GroupJoin(IMongoQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> GroupJoin(IMongoQueryable`1<TOuter> outer, IMongoCollection`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> Join(IMongoQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> Join(IMongoQueryable`1<TOuter> outer, IMongoCollection`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MaxAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MinAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> OfType(IMongoQueryable source);
    [ExtensionAttribute]
public static IOrderedMongoQueryable`1<TSource> OrderBy(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IOrderedMongoQueryable`1<TSource> OrderByDescending(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Sample(IMongoQueryable`1<TSource> source, long count);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Search(IMongoQueryable`1<TSource> source, SearchDefinition`1<TSource> searchDefinition, SearchHighlightOptions`1<TSource> highlight, string indexName, SearchCountOptions count, bool returnStoredSource, bool scoreDetails);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Search(IMongoQueryable`1<TSource> source, SearchDefinition`1<TSource> searchDefinition, SearchOptions`1<TSource> searchOptions);
    [ExtensionAttribute]
public static IMongoQueryable`1<SearchMetaResult> SearchMeta(IMongoQueryable`1<TSource> source, SearchDefinition`1<TSource> searchDefinition, string indexName, SearchCountOptions count);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> Select(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> SelectMany(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TResult> SelectMany(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IMongoQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Skip(IMongoQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Skip(IMongoQueryable`1<TSource> source, long count);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IMongoQueryable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IMongoQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IMongoQueryable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IMongoQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float StandardDeviationPopulation(IMongoQueryable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationPopulation(IMongoQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IMongoQueryable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IMongoQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal StandardDeviationPopulation(IMongoQueryable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationPopulation(IMongoQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static float StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static double StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static decimal StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationPopulation(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationPopulationAsync(IMongoQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationPopulationAsync(IMongoQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationPopulationAsync(IMongoQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationPopulationAsync(IMongoQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> StandardDeviationPopulationAsync(IMongoQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> StandardDeviationPopulationAsync(IMongoQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationPopulationAsync(IMongoQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationPopulationAsync(IMongoQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> StandardDeviationPopulationAsync(IMongoQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> StandardDeviationPopulationAsync(IMongoQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> StandardDeviationPopulationAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static double StandardDeviationSample(IMongoQueryable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IMongoQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static double StandardDeviationSample(IMongoQueryable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IMongoQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static float StandardDeviationSample(IMongoQueryable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationSample(IMongoQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double StandardDeviationSample(IMongoQueryable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IMongoQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static decimal StandardDeviationSample(IMongoQueryable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationSample(IMongoQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
public static double StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
public static double StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
public static float StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
public static Nullable`1<float> StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
public static double StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
public static decimal StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> StandardDeviationSample(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationSampleAsync(IMongoQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationSampleAsync(IMongoQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationSampleAsync(IMongoQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationSampleAsync(IMongoQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> StandardDeviationSampleAsync(IMongoQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> StandardDeviationSampleAsync(IMongoQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationSampleAsync(IMongoQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationSampleAsync(IMongoQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> StandardDeviationSampleAsync(IMongoQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> StandardDeviationSampleAsync(IMongoQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> StandardDeviationSampleAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IMongoQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IMongoQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IMongoQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IMongoQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IMongoQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IMongoQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IMongoQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IMongoQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IMongoQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IMongoQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Take(IMongoQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Take(IMongoQueryable`1<TSource> source, long count);
    [ExtensionAttribute]
public static IOrderedMongoQueryable`1<TSource> ThenBy(IOrderedMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IOrderedMongoQueryable`1<TSource> ThenByDescending(IOrderedMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> VectorSearch(IMongoQueryable`1<TSource> source, FieldDefinition`1<TSource> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TSource> options);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> VectorSearch(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, TField>> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TSource> options);
    [ExtensionAttribute]
public static IMongoQueryable`1<TSource> Where(IMongoQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    private static MethodInfo GetMethodInfo(Func`2<T1, T2> f, T1 unused);
    private static MethodInfo GetMethodInfo(Func`3<T1, T2, T3> f, T1 unused1, T2 unused2);
    private static MethodInfo GetMethodInfo(Func`4<T1, T2, T3, T4> f, T1 unused1, T2 unused2, T3 unused3);
    private static MethodInfo GetMethodInfo(Func`5<T1, T2, T3, T4, T5> f, T1 unused1, T2 unused2, T3 unused3, T4 unused4);
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.NullableDateTimeExtensions : object {
    [ExtensionAttribute]
public static string ToString(Nullable`1<DateTime> this, string format, string timezone, string onNull);
}
public abstract class MongoDB.Driver.Linq.QueryableExecutionModel : object {
    public Type OutputType { get; }
    public abstract virtual Type get_OutputType();
    internal abstract virtual Task ExecuteAsync(IMongoCollection`1<TInput> collection, IClientSessionHandle session, AggregateOptions options, CancellationToken cancellationToken);
    internal abstract virtual object Execute(IMongoCollection`1<TInput> collection, IClientSessionHandle session, AggregateOptions options);
}
[ExtensionAttribute]
public static class MongoDB.Driver.Linq.StringExtensions : object {
    [ExtensionAttribute]
public static bool AnyStringIn(IEnumerable`1<string> s, IEnumerable`1<StringOrRegularExpression> values);
    [ExtensionAttribute]
public static bool AnyStringIn(IEnumerable`1<string> s, StringOrRegularExpression[] values);
    [ExtensionAttribute]
public static bool AnyStringNin(IEnumerable`1<string> s, IEnumerable`1<StringOrRegularExpression> values);
    [ExtensionAttribute]
public static bool AnyStringNin(IEnumerable`1<string> s, StringOrRegularExpression[] values);
    [ExtensionAttribute]
public static int IndexOfBytes(string s, string value);
    [ExtensionAttribute]
public static int IndexOfBytes(string s, string value, int startIndex);
    [ExtensionAttribute]
public static int IndexOfBytes(string s, string value, int startIndex, int count);
    [ExtensionAttribute]
public static bool StringIn(string s, IEnumerable`1<StringOrRegularExpression> values);
    [ExtensionAttribute]
public static bool StringIn(string s, StringOrRegularExpression[] values);
    [ExtensionAttribute]
public static bool StringNin(string s, IEnumerable`1<StringOrRegularExpression> values);
    [ExtensionAttribute]
public static bool StringNin(string s, StringOrRegularExpression[] values);
    [ExtensionAttribute]
public static int StrLenBytes(string s);
    [ExtensionAttribute]
public static string SubstrBytes(string s, int startIndex, int length);
}
internal class MongoDB.Driver.Linq.UnitOnlyDayTimeUnit : DateTimeUnit {
    private string _unit;
    public string StartOfWeek { get; }
    public string Unit { get; }
    public UnitOnlyDayTimeUnit(string unit);
    public virtual string get_StartOfWeek();
    public virtual string get_Unit();
    public virtual string ToString();
}
internal class MongoDB.Driver.Linq.WeekWithStartOfWeekDayTimeUnit : DateTimeUnit {
    private string _startOfWeek;
    public string StartOfWeek { get; }
    public string Unit { get; }
    public WeekWithStartOfWeekDayTimeUnit(string startOfWeek);
    public virtual string get_StartOfWeek();
    public virtual string get_Unit();
    public virtual string ToString();
}
public enum MongoDB.Driver.Linq.WindowTimeUnit : Enum {
    public int value__;
    public static WindowTimeUnit Week;
    public static WindowTimeUnit Day;
    public static WindowTimeUnit Hour;
    public static WindowTimeUnit Minute;
    public static WindowTimeUnit Second;
    public static WindowTimeUnit Millisecond;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Linq.WindowTimeUnitExtensions : object {
    [ExtensionAttribute]
public static BsonValue Render(WindowTimeUnit unit);
}
public class MongoDB.Driver.ListCollectionNamesOptions : object {
    private Nullable`1<bool> authorizedCollections;
    private BsonValue _comment;
    private FilterDefinition`1<BsonDocument> _filter;
    public Nullable`1<bool> AuthorizedCollections { get; public set; }
    public BsonValue Comment { get; public set; }
    public FilterDefinition`1<BsonDocument> Filter { get; public set; }
    public Nullable`1<bool> get_AuthorizedCollections();
    public void set_AuthorizedCollections(Nullable`1<bool> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public FilterDefinition`1<BsonDocument> get_Filter();
    public void set_Filter(FilterDefinition`1<BsonDocument> value);
}
public class MongoDB.Driver.ListCollectionsOptions : object {
    private Nullable`1<int> _batchSize;
    private BsonValue _comment;
    private FilterDefinition`1<BsonDocument> _filter;
    public Nullable`1<int> BatchSize { get; public set; }
    public BsonValue Comment { get; public set; }
    public FilterDefinition`1<BsonDocument> Filter { get; public set; }
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public FilterDefinition`1<BsonDocument> get_Filter();
    public void set_Filter(FilterDefinition`1<BsonDocument> value);
}
public class MongoDB.Driver.ListDatabaseNamesOptions : object {
    private Nullable`1<bool> _authorizedDatabases;
    private BsonValue _comment;
    private FilterDefinition`1<BsonDocument> _filter;
    public Nullable`1<bool> AuthorizedDatabases { get; public set; }
    public BsonValue Comment { get; public set; }
    public FilterDefinition`1<BsonDocument> Filter { get; public set; }
    public Nullable`1<bool> get_AuthorizedDatabases();
    public void set_AuthorizedDatabases(Nullable`1<bool> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public FilterDefinition`1<BsonDocument> get_Filter();
    public void set_Filter(FilterDefinition`1<BsonDocument> value);
}
public class MongoDB.Driver.ListDatabasesOptions : object {
    private Nullable`1<bool> _authorizedDatabases;
    private BsonValue _comment;
    private FilterDefinition`1<BsonDocument> _filter;
    private Nullable`1<bool> _nameOnly;
    public Nullable`1<bool> AuthorizedDatabases { get; public set; }
    public BsonValue Comment { get; public set; }
    public FilterDefinition`1<BsonDocument> Filter { get; public set; }
    public Nullable`1<bool> NameOnly { get; public set; }
    public Nullable`1<bool> get_AuthorizedDatabases();
    public void set_AuthorizedDatabases(Nullable`1<bool> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public FilterDefinition`1<BsonDocument> get_Filter();
    public void set_Filter(FilterDefinition`1<BsonDocument> value);
    public Nullable`1<bool> get_NameOnly();
    public void set_NameOnly(Nullable`1<bool> value);
}
public class MongoDB.Driver.ListIndexesOptions : object {
    private Nullable`1<int> _batchSize;
    private BsonValue _comment;
    public Nullable`1<int> BatchSize { get; public set; }
    public BsonValue Comment { get; public set; }
    public Nullable`1<int> get_BatchSize();
    public void set_BatchSize(Nullable`1<int> value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
}
public class MongoDB.Driver.ListSetFieldDefinitions`1 : SetFieldDefinitions`1<TDocument> {
    private IReadOnlyList`1<SetFieldDefinition`1<TDocument>> _list;
    public IReadOnlyList`1<SetFieldDefinition`1<TDocument>> List { get; }
    public ListSetFieldDefinitions`1(IEnumerable`1<SetFieldDefinition`1<TDocument>> setFieldDefinitions);
    public IReadOnlyList`1<SetFieldDefinition`1<TDocument>> get_List();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
[ExtensionAttribute]
public static class MongoDB.Driver.ListSetFieldDefinitionsExtensions : object {
    [ExtensionAttribute]
public static ListSetFieldDefinitions`1<TDocument> Set(ListSetFieldDefinitions`1<TDocument> fields, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static ListSetFieldDefinitions`1<TDocument> Set(ListSetFieldDefinitions`1<TDocument> fields, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
internal static ListSetFieldDefinitions`1<TDocument> Set(ListSetFieldDefinitions`1<TDocument> fields, SetFieldDefinition`1<TDocument> setFieldDefinition);
}
[ObsoleteAttribute("Use Aggregation pipeline instead.")]
public class MongoDB.Driver.MapReduceOptions`2 : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private FilterDefinition`1<TDocument> _filter;
    private BsonJavaScript _finalize;
    private Nullable`1<bool> _javaScriptMode;
    private Nullable`1<long> _limit;
    private Nullable`1<TimeSpan> _maxTime;
    private MapReduceOutputOptions _outputOptions;
    private IBsonSerializer`1<TResult> _resultSerializer;
    private BsonDocument _scope;
    private SortDefinition`1<TDocument> _sort;
    private Nullable`1<bool> _verbose;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public FilterDefinition`1<TDocument> Filter { get; public set; }
    public BsonJavaScript Finalize { get; public set; }
    [ObsoleteAttribute("JavaScriptMode is ignored by server versions 4.4.0 and newer.")]
public Nullable`1<bool> JavaScriptMode { get; public set; }
    public Nullable`1<long> Limit { get; public set; }
    public Nullable`1<TimeSpan> MaxTime { get; public set; }
    public MapReduceOutputOptions OutputOptions { get; public set; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; public set; }
    public BsonDocument Scope { get; public set; }
    public SortDefinition`1<TDocument> Sort { get; public set; }
    public Nullable`1<bool> Verbose { get; public set; }
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public FilterDefinition`1<TDocument> get_Filter();
    public void set_Filter(FilterDefinition`1<TDocument> value);
    public BsonJavaScript get_Finalize();
    public void set_Finalize(BsonJavaScript value);
    public Nullable`1<bool> get_JavaScriptMode();
    public void set_JavaScriptMode(Nullable`1<bool> value);
    public Nullable`1<long> get_Limit();
    public void set_Limit(Nullable`1<long> value);
    public Nullable`1<TimeSpan> get_MaxTime();
    public void set_MaxTime(Nullable`1<TimeSpan> value);
    public MapReduceOutputOptions get_OutputOptions();
    public void set_OutputOptions(MapReduceOutputOptions value);
    public IBsonSerializer`1<TResult> get_ResultSerializer();
    public void set_ResultSerializer(IBsonSerializer`1<TResult> value);
    public BsonDocument get_Scope();
    public void set_Scope(BsonDocument value);
    public SortDefinition`1<TDocument> get_Sort();
    public void set_Sort(SortDefinition`1<TDocument> value);
    public Nullable`1<bool> get_Verbose();
    public void set_Verbose(Nullable`1<bool> value);
}
[ObsoleteAttribute("Use Aggregation pipeline instead.")]
public abstract class MongoDB.Driver.MapReduceOutputOptions : object {
    private static MapReduceOutputOptions __inline;
    public static MapReduceOutputOptions Inline { get; }
    private static MapReduceOutputOptions();
    public static MapReduceOutputOptions get_Inline();
    [ObsoleteAttribute("Use an overload of Merge that does not have sharded and nonAtomic parameters instead.")]
public static MapReduceOutputOptions Merge(string collectionName, string databaseName, Nullable`1<bool> sharded, Nullable`1<bool> nonAtomic);
    public static MapReduceOutputOptions Merge(string collectionName, string databaseName);
    [ObsoleteAttribute("Use an overload of Reduce that does not have sharded and nonAtomic parameters instead.")]
public static MapReduceOutputOptions Reduce(string collectionName, string databaseName, Nullable`1<bool> sharded, Nullable`1<bool> nonAtomic);
    public static MapReduceOutputOptions Reduce(string collectionName, string databaseName);
    [ObsoleteAttribute("Use an overload of Replace that does not have a sharded parameter instead.")]
public static MapReduceOutputOptions Replace(string collectionName, string databaseName, Nullable`1<bool> sharded);
    public static MapReduceOutputOptions Replace(string collectionName, string databaseName);
}
public class MongoDB.Driver.MergeStageOptions`1 : object {
    private BsonDocument _letVariables;
    private IReadOnlyList`1<string> _onFieldNames;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    private Nullable`1<MergeStageWhenMatched> _whenMatched;
    private PipelineDefinition`2<TOutput, TOutput> _whenMatchedPipeline;
    private Nullable`1<MergeStageWhenNotMatched> _whenNotMatched;
    public BsonDocument LetVariables { get; public set; }
    public IReadOnlyList`1<string> OnFieldNames { get; public set; }
    public IBsonSerializer`1<TOutput> OutputSerializer { get; public set; }
    public Nullable`1<MergeStageWhenMatched> WhenMatched { get; public set; }
    public PipelineDefinition`2<TOutput, TOutput> WhenMatchedPipeline { get; public set; }
    public Nullable`1<MergeStageWhenNotMatched> WhenNotMatched { get; public set; }
    public BsonDocument get_LetVariables();
    public void set_LetVariables(BsonDocument value);
    public IReadOnlyList`1<string> get_OnFieldNames();
    public void set_OnFieldNames(IReadOnlyList`1<string> value);
    public IBsonSerializer`1<TOutput> get_OutputSerializer();
    public void set_OutputSerializer(IBsonSerializer`1<TOutput> value);
    public Nullable`1<MergeStageWhenMatched> get_WhenMatched();
    public void set_WhenMatched(Nullable`1<MergeStageWhenMatched> value);
    public PipelineDefinition`2<TOutput, TOutput> get_WhenMatchedPipeline();
    public void set_WhenMatchedPipeline(PipelineDefinition`2<TOutput, TOutput> value);
    public Nullable`1<MergeStageWhenNotMatched> get_WhenNotMatched();
    public void set_WhenNotMatched(Nullable`1<MergeStageWhenNotMatched> value);
}
public enum MongoDB.Driver.MergeStageWhenMatched : Enum {
    public int value__;
    public static MergeStageWhenMatched Replace;
    public static MergeStageWhenMatched KeepExisting;
    public static MergeStageWhenMatched Merge;
    public static MergeStageWhenMatched Fail;
    public static MergeStageWhenMatched Pipeline;
}
public enum MongoDB.Driver.MergeStageWhenNotMatched : Enum {
    public int value__;
    public static MergeStageWhenNotMatched Insert;
    public static MergeStageWhenNotMatched Discard;
    public static MergeStageWhenNotMatched Fail;
}
public abstract class MongoDB.Driver.MongoBulkWriteException : MongoServerException {
    private WriteConcernError _writeConcernError;
    private IReadOnlyList`1<BulkWriteError> _writeErrors;
    public WriteConcernError WriteConcernError { get; }
    public IReadOnlyList`1<BulkWriteError> WriteErrors { get; }
    public MongoBulkWriteException(ConnectionId connectionId, IEnumerable`1<BulkWriteError> writeErrors, WriteConcernError writeConcernError);
    public MongoBulkWriteException(SerializationInfo info, StreamingContext context);
    public WriteConcernError get_WriteConcernError();
    public IReadOnlyList`1<BulkWriteError> get_WriteErrors();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string FormatMessage(IEnumerable`1<BulkWriteError> writeErrors, WriteConcernError writeConcernError);
}
public class MongoDB.Driver.MongoBulkWriteException`1 : MongoBulkWriteException {
    private BulkWriteResult`1<TDocument> _result;
    private IReadOnlyList`1<WriteModel`1<TDocument>> _unprocessedRequests;
    public BulkWriteResult`1<TDocument> Result { get; }
    public IReadOnlyList`1<WriteModel`1<TDocument>> UnprocessedRequests { get; }
    public MongoBulkWriteException`1(ConnectionId connectionId, BulkWriteResult`1<TDocument> result, IEnumerable`1<BulkWriteError> writeErrors, WriteConcernError writeConcernError, IEnumerable`1<WriteModel`1<TDocument>> unprocessedRequests);
    public MongoBulkWriteException`1(SerializationInfo info, StreamingContext context);
    public BulkWriteResult`1<TDocument> get_Result();
    public IReadOnlyList`1<WriteModel`1<TDocument>> get_UnprocessedRequests();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static MongoBulkWriteException`1<TDocument> FromCore(MongoBulkWriteOperationException ex);
    internal static MongoBulkWriteException`1<TDocument> FromCore(MongoBulkWriteOperationException ex, IReadOnlyList`1<WriteModel`1<TDocument>> requests);
}
public class MongoDB.Driver.MongoClient : MongoClientBase {
    private ICluster _cluster;
    private AutoEncryptionLibMongoCryptController _libMongoCryptController;
    private LinqProvider _linqProvider;
    private IOperationExecutor _operationExecutor;
    private MongoClientSettings _settings;
    public ICluster Cluster { get; }
    public MongoClientSettings Settings { get; }
    internal AutoEncryptionLibMongoCryptController LibMongoCryptController { get; }
    internal IOperationExecutor OperationExecutor { get; }
    public MongoClient(MongoClientSettings settings);
    public MongoClient(MongoUrl url);
    public MongoClient(string connectionString);
    internal MongoClient(IOperationExecutor operationExecutor, MongoClientSettings settings);
    public virtual ICluster get_Cluster();
    public sealed virtual MongoClientSettings get_Settings();
    internal AutoEncryptionLibMongoCryptController get_LibMongoCryptController();
    internal IOperationExecutor get_OperationExecutor();
    internal void ConfigureAutoEncryptionMessageEncoderSettings(MessageEncoderSettings messageEncoderSettings);
    public sealed virtual void DropDatabase(string name, CancellationToken cancellationToken);
    public sealed virtual void DropDatabase(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public sealed virtual Task DropDatabaseAsync(string name, CancellationToken cancellationToken);
    public sealed virtual Task DropDatabaseAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public sealed virtual IMongoDatabase GetDatabase(string name, MongoDatabaseSettings settings);
    public sealed virtual IAsyncCursor`1<string> ListDatabaseNames(CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<string> ListDatabaseNames(ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<string> ListDatabaseNames(IClientSessionHandle session, CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<string> ListDatabaseNames(IClientSessionHandle session, ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoClient/<ListDatabaseNamesAsync>d__31")]
public sealed virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(IClientSessionHandle session, ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<BsonDocument> ListDatabases(CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<BsonDocument> ListDatabases(ListDatabasesOptions options, CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<BsonDocument> ListDatabases(IClientSessionHandle session, CancellationToken cancellationToken);
    public sealed virtual IAsyncCursor`1<BsonDocument> ListDatabases(IClientSessionHandle session, ListDatabasesOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(ListDatabasesOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public sealed virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(IClientSessionHandle session, ListDatabasesOptions options, CancellationToken cancellationToken);
    internal IClientSessionHandle StartImplicitSession(CancellationToken cancellationToken);
    internal Task`1<IClientSessionHandle> StartImplicitSessionAsync(CancellationToken cancellationToken);
    public sealed virtual IClientSessionHandle StartSession(ClientSessionOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<IClientSessionHandle> StartSessionAsync(ClientSessionOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IMongoClient WithReadConcern(ReadConcern readConcern);
    public virtual IMongoClient WithReadPreference(ReadPreference readPreference);
    public virtual IMongoClient WithWriteConcern(WriteConcern writeConcern);
    private IAsyncCursor`1<string> CreateDatabaseNamesCursor(IAsyncCursor`1<BsonDocument> cursor);
    private ListDatabasesOperation CreateListDatabaseOperation(ListDatabasesOptions options, MessageEncoderSettings messageEncoderSettings);
    private ListDatabasesOptions CreateListDatabasesOptionsFromListDatabaseNamesOptions(ListDatabaseNamesOptions options);
    private IReadBindingHandle CreateReadBinding(IClientSessionHandle session);
    private IReadWriteBindingHandle CreateReadWriteBinding(IClientSessionHandle session);
    private ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options);
    private TResult ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoClient/<ExecuteReadOperationAsync>d__58`1")]
private Task`1<TResult> ExecuteReadOperationAsync(IClientSessionHandle session, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    private TResult ExecuteWriteOperation(IClientSessionHandle session, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoClient/<ExecuteWriteOperationAsync>d__60`1")]
private Task`1<TResult> ExecuteWriteOperationAsync(IClientSessionHandle session, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    private MessageEncoderSettings GetMessageEncoderSettings();
    private IClientSessionHandle StartImplicitSession();
    private IClientSessionHandle StartSession(ClientSessionOptions options);
    private void UsingImplicitSession(Action`1<IClientSessionHandle> func, CancellationToken cancellationToken);
    private TResult UsingImplicitSession(Func`2<IClientSessionHandle, TResult> func, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoClient/<UsingImplicitSessionAsync>d__66")]
private Task UsingImplicitSessionAsync(Func`2<IClientSessionHandle, Task> funcAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoClient/<UsingImplicitSessionAsync>d__67`1")]
private Task`1<TResult> UsingImplicitSessionAsync(Func`2<IClientSessionHandle, Task`1<TResult>> funcAsync, CancellationToken cancellationToken);
}
public abstract class MongoDB.Driver.MongoClientBase : object {
    public ICluster Cluster { get; }
    public MongoClientSettings Settings { get; }
    public abstract virtual ICluster get_Cluster();
    public abstract virtual MongoClientSettings get_Settings();
    public virtual void DropDatabase(string name, CancellationToken cancellationToken);
    public virtual void DropDatabase(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual Task DropDatabaseAsync(string name, CancellationToken cancellationToken);
    public virtual Task DropDatabaseAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public abstract virtual IMongoDatabase GetDatabase(string name, MongoDatabaseSettings settings);
    public virtual IAsyncCursor`1<string> ListDatabaseNames(CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<string> ListDatabaseNames(ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<string> ListDatabaseNames(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<string> ListDatabaseNames(IClientSessionHandle session, ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListDatabaseNamesAsync(IClientSessionHandle session, ListDatabaseNamesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListDatabases(CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListDatabases(ListDatabasesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListDatabases(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListDatabases(IClientSessionHandle session, ListDatabasesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(ListDatabasesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListDatabasesAsync(IClientSessionHandle session, ListDatabasesOptions options, CancellationToken cancellationToken);
    public virtual IClientSessionHandle StartSession(ClientSessionOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IClientSessionHandle> StartSessionAsync(ClientSessionOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IMongoClient WithReadConcern(ReadConcern readConcern);
    public virtual IMongoClient WithReadPreference(ReadPreference readPreference);
    public virtual IMongoClient WithWriteConcern(WriteConcern writeConcern);
}
public class MongoDB.Driver.MongoClientSettings : object {
    private bool _allowInsecureTls;
    private string _applicationName;
    private AutoEncryptionOptions _autoEncryptionOptions;
    private Action`1<ClusterBuilder> _clusterConfigurator;
    private IReadOnlyList`1<CompressorConfiguration> _compressors;
    private ConnectionMode _connectionMode;
    private ConnectionModeSwitch _connectionModeSwitch;
    private TimeSpan _connectTimeout;
    private MongoCredentialStore _credentials;
    private Nullable`1<bool> _directConnection;
    private GuidRepresentation _guidRepresentation;
    private TimeSpan _heartbeatInterval;
    private TimeSpan _heartbeatTimeout;
    private bool _ipv6;
    private LibraryInfo _libraryInfo;
    private LinqProvider _linqProvider;
    private bool _loadBalanced;
    private TimeSpan _localThreshold;
    private LoggingSettings _loggingSettings;
    private int _maxConnecting;
    private TimeSpan _maxConnectionIdleTime;
    private TimeSpan _maxConnectionLifeTime;
    private int _maxConnectionPoolSize;
    private int _minConnectionPoolSize;
    private ReadConcern _readConcern;
    private UTF8Encoding _readEncoding;
    private ReadPreference _readPreference;
    private string _replicaSetName;
    private bool _retryReads;
    private bool _retryWrites;
    private ConnectionStringScheme _scheme;
    private string _sdamLogFilename;
    private ServerApi _serverApi;
    private List`1<MongoServerAddress> _servers;
    private ServerMonitoringMode _serverMonitoringMode;
    private TimeSpan _serverSelectionTimeout;
    private TimeSpan _socketTimeout;
    private int _srvMaxHosts;
    private string _srvServiceName;
    private SslSettings _sslSettings;
    private bool _useTls;
    private int _waitQueueSize;
    private TimeSpan _waitQueueTimeout;
    private WriteConcern _writeConcern;
    private UTF8Encoding _writeEncoding;
    private bool _isFrozen;
    private int _frozenHashCode;
    private string _frozenStringRepresentation;
    public bool AllowInsecureTls { get; public set; }
    public string ApplicationName { get; public set; }
    public AutoEncryptionOptions AutoEncryptionOptions { get; public set; }
    public IReadOnlyList`1<CompressorConfiguration> Compressors { get; public set; }
    public Action`1<ClusterBuilder> ClusterConfigurator { get; public set; }
    [ObsoleteAttribute("Use DirectConnection instead.")]
public ConnectionMode ConnectionMode { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public ConnectionModeSwitch ConnectionModeSwitch { get; }
    public TimeSpan ConnectTimeout { get; public set; }
    public MongoCredential Credential { get; public set; }
    [ObsoleteAttribute("Use Credential instead. Using multiple credentials is deprecated.")]
public IEnumerable`1<MongoCredential> Credentials { get; public set; }
    public Nullable`1<bool> DirectConnection { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public bool IsFrozen { get; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public TimeSpan HeartbeatTimeout { get; public set; }
    public bool IPv6 { get; public set; }
    public LibraryInfo LibraryInfo { get; public set; }
    public LinqProvider LinqProvider { get; public set; }
    public bool LoadBalanced { get; public set; }
    public TimeSpan LocalThreshold { get; public set; }
    public LoggingSettings LoggingSettings { get; public set; }
    public int MaxConnecting { get; public set; }
    public TimeSpan MaxConnectionIdleTime { get; public set; }
    public TimeSpan MaxConnectionLifeTime { get; public set; }
    public int MaxConnectionPoolSize { get; public set; }
    public int MinConnectionPoolSize { get; public set; }
    public ReadConcern ReadConcern { get; public set; }
    public UTF8Encoding ReadEncoding { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public string ReplicaSetName { get; public set; }
    public bool RetryReads { get; public set; }
    public bool RetryWrites { get; public set; }
    public ConnectionStringScheme Scheme { get; public set; }
    [ObsoleteAttribute("Use LoggerFactory instead.")]
public string SdamLogFilename { get; public set; }
    public ServerApi ServerApi { get; public set; }
    public MongoServerAddress Server { get; public set; }
    public IEnumerable`1<MongoServerAddress> Servers { get; public set; }
    public ServerMonitoringMode ServerMonitoringMode { get; public set; }
    public TimeSpan ServerSelectionTimeout { get; public set; }
    public TimeSpan SocketTimeout { get; public set; }
    public int SrvMaxHosts { get; public set; }
    public string SrvServiceName { get; public set; }
    public SslSettings SslSettings { get; public set; }
    [ObsoleteAttribute("Use UseTls instead.")]
public bool UseSsl { get; public set; }
    public bool UseTls { get; public set; }
    [ObsoleteAttribute("Use AllowInsecureTls instead.")]
public bool VerifySslCertificate { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int WaitQueueSize { get; public set; }
    public TimeSpan WaitQueueTimeout { get; public set; }
    public WriteConcern WriteConcern { get; public set; }
    public UTF8Encoding WriteEncoding { get; public set; }
    public bool get_AllowInsecureTls();
    public void set_AllowInsecureTls(bool value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public AutoEncryptionOptions get_AutoEncryptionOptions();
    public void set_AutoEncryptionOptions(AutoEncryptionOptions value);
    public IReadOnlyList`1<CompressorConfiguration> get_Compressors();
    public void set_Compressors(IReadOnlyList`1<CompressorConfiguration> value);
    public Action`1<ClusterBuilder> get_ClusterConfigurator();
    public void set_ClusterConfigurator(Action`1<ClusterBuilder> value);
    public ConnectionMode get_ConnectionMode();
    public void set_ConnectionMode(ConnectionMode value);
    public ConnectionModeSwitch get_ConnectionModeSwitch();
    public TimeSpan get_ConnectTimeout();
    public void set_ConnectTimeout(TimeSpan value);
    public MongoCredential get_Credential();
    public void set_Credential(MongoCredential value);
    public IEnumerable`1<MongoCredential> get_Credentials();
    public void set_Credentials(IEnumerable`1<MongoCredential> value);
    public Nullable`1<bool> get_DirectConnection();
    public void set_DirectConnection(Nullable`1<bool> value);
    public sealed virtual GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public bool get_IsFrozen();
    public TimeSpan get_HeartbeatInterval();
    public void set_HeartbeatInterval(TimeSpan value);
    public TimeSpan get_HeartbeatTimeout();
    public void set_HeartbeatTimeout(TimeSpan value);
    public bool get_IPv6();
    public void set_IPv6(bool value);
    public LibraryInfo get_LibraryInfo();
    public void set_LibraryInfo(LibraryInfo value);
    public LinqProvider get_LinqProvider();
    public void set_LinqProvider(LinqProvider value);
    public bool get_LoadBalanced();
    public void set_LoadBalanced(bool value);
    public TimeSpan get_LocalThreshold();
    public void set_LocalThreshold(TimeSpan value);
    public LoggingSettings get_LoggingSettings();
    public void set_LoggingSettings(LoggingSettings value);
    public int get_MaxConnecting();
    public void set_MaxConnecting(int value);
    public TimeSpan get_MaxConnectionIdleTime();
    public void set_MaxConnectionIdleTime(TimeSpan value);
    public TimeSpan get_MaxConnectionLifeTime();
    public void set_MaxConnectionLifeTime(TimeSpan value);
    public int get_MaxConnectionPoolSize();
    public void set_MaxConnectionPoolSize(int value);
    public int get_MinConnectionPoolSize();
    public void set_MinConnectionPoolSize(int value);
    public sealed virtual ReadConcern get_ReadConcern();
    public void set_ReadConcern(ReadConcern value);
    public sealed virtual UTF8Encoding get_ReadEncoding();
    public void set_ReadEncoding(UTF8Encoding value);
    public sealed virtual ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public string get_ReplicaSetName();
    public void set_ReplicaSetName(string value);
    public bool get_RetryReads();
    public void set_RetryReads(bool value);
    public bool get_RetryWrites();
    public void set_RetryWrites(bool value);
    public ConnectionStringScheme get_Scheme();
    public void set_Scheme(ConnectionStringScheme value);
    public string get_SdamLogFilename();
    public void set_SdamLogFilename(string value);
    public ServerApi get_ServerApi();
    public void set_ServerApi(ServerApi value);
    public MongoServerAddress get_Server();
    public void set_Server(MongoServerAddress value);
    public IEnumerable`1<MongoServerAddress> get_Servers();
    public void set_Servers(IEnumerable`1<MongoServerAddress> value);
    public ServerMonitoringMode get_ServerMonitoringMode();
    public void set_ServerMonitoringMode(ServerMonitoringMode value);
    public TimeSpan get_ServerSelectionTimeout();
    public void set_ServerSelectionTimeout(TimeSpan value);
    public TimeSpan get_SocketTimeout();
    public void set_SocketTimeout(TimeSpan value);
    public int get_SrvMaxHosts();
    public void set_SrvMaxHosts(int value);
    public string get_SrvServiceName();
    public void set_SrvServiceName(string value);
    public SslSettings get_SslSettings();
    public void set_SslSettings(SslSettings value);
    public bool get_UseSsl();
    public void set_UseSsl(bool value);
    public bool get_UseTls();
    public void set_UseTls(bool value);
    public bool get_VerifySslCertificate();
    public void set_VerifySslCertificate(bool value);
    public int get_WaitQueueSize();
    public void set_WaitQueueSize(int value);
    public TimeSpan get_WaitQueueTimeout();
    public void set_WaitQueueTimeout(TimeSpan value);
    public sealed virtual WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
    public sealed virtual UTF8Encoding get_WriteEncoding();
    public void set_WriteEncoding(UTF8Encoding value);
    public static bool op_Equality(MongoClientSettings lhs, MongoClientSettings rhs);
    public static bool op_Inequality(MongoClientSettings lhs, MongoClientSettings rhs);
    public static MongoClientSettings FromConnectionString(string connectionString);
    public static MongoClientSettings FromUrl(MongoUrl url);
    public MongoClientSettings Clone();
    public sealed virtual bool Equals(MongoClientSettings obj);
    public virtual bool Equals(object obj);
    public MongoClientSettings Freeze();
    public MongoClientSettings FrozenCopy();
    public virtual int GetHashCode();
    public virtual string ToString();
    internal ClusterKey ToClusterKey();
    private void ThrowIfFrozen();
    private void ThrowIfSettingsAreInvalid();
    [CompilerGeneratedAttribute]
private bool <ThrowIfSettingsAreInvalid>g__IsDirectConnection|210_0();
}
public abstract class MongoDB.Driver.MongoCollectionBase`1 : object {
    public CollectionNamespace CollectionNamespace { get; }
    public IMongoDatabase Database { get; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public IMongoIndexManager`1<TDocument> Indexes { get; }
    public IMongoSearchIndexManager SearchIndexes { get; }
    public MongoCollectionSettings Settings { get; }
    public abstract virtual CollectionNamespace get_CollectionNamespace();
    public abstract virtual IMongoDatabase get_Database();
    public abstract virtual IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public abstract virtual IMongoIndexManager`1<TDocument> get_Indexes();
    public abstract virtual IMongoSearchIndexManager get_SearchIndexes();
    public abstract virtual MongoCollectionSettings get_Settings();
    public virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual BulkWriteResult`1<TDocument> BulkWrite(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual BulkWriteResult`1<TDocument> BulkWrite(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public virtual long Count(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public virtual long Count(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public abstract virtual Task`1<long> CountAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public virtual Task`1<long> CountAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual long CountDocuments(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual long CountDocuments(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual DeleteResult DeleteMany(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public virtual DeleteResult DeleteMany(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public virtual DeleteResult DeleteMany(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    private DeleteResult DeleteMany(FilterDefinition`1<TDocument> filter, DeleteOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, BulkWriteResult> bulkWriteFunc);
    public virtual Task`1<DeleteResult> DeleteManyAsync(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public virtual Task`1<DeleteResult> DeleteManyAsync(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public virtual Task`1<DeleteResult> DeleteManyAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionBase`1/<DeleteManyAsync>d__39")]
private Task`1<DeleteResult> DeleteManyAsync(FilterDefinition`1<TDocument> filter, DeleteOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task`1<BulkWriteResult`1<TDocument>>> bulkWriteFuncAsync);
    public virtual DeleteResult DeleteOne(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public virtual DeleteResult DeleteOne(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public virtual DeleteResult DeleteOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    private DeleteResult DeleteOne(FilterDefinition`1<TDocument> filter, DeleteOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, BulkWriteResult> bulkWrite);
    public virtual Task`1<DeleteResult> DeleteOneAsync(FilterDefinition`1<TDocument> filter, CancellationToken cancellationToken);
    public virtual Task`1<DeleteResult> DeleteOneAsync(FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    public virtual Task`1<DeleteResult> DeleteOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, DeleteOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionBase`1/<DeleteOneAsync>d__47")]
private Task`1<DeleteResult> DeleteOneAsync(FilterDefinition`1<TDocument> filter, DeleteOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task`1<BulkWriteResult`1<TDocument>>> bulkWriteAsync);
    public virtual IAsyncCursor`1<TField> Distinct(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TField> Distinct(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TItem> DistinctMany(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TItem> DistinctMany(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual long EstimatedDocumentCount(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> EstimatedDocumentCountAsync(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TProjection> FindSync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TProjection> FindSync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndDelete(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndDelete(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndDeleteAsync(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndDeleteAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndReplace(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndReplace(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndReplaceAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndReplaceAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndUpdate(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndUpdate(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public abstract virtual Task`1<TProjection> FindOneAndUpdateAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndUpdateAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual void InsertOne(TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    public virtual void InsertOne(IClientSessionHandle session, TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    private void InsertOne(TDocument document, InsertOneOptions options, Action`2<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions> bulkWrite);
    [ObsoleteAttribute("Use the new overload of InsertOneAsync with an InsertOneOptions parameter instead.")]
public virtual Task InsertOneAsync(TDocument document, CancellationToken _cancellationToken);
    public virtual Task InsertOneAsync(TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    public virtual Task InsertOneAsync(IClientSessionHandle session, TDocument document, InsertOneOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionBase`1/<InsertOneAsync>d__80")]
private Task InsertOneAsync(TDocument document, InsertOneOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task> bulkWriteAsync);
    public virtual void InsertMany(IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    public virtual void InsertMany(IClientSessionHandle session, IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    private void InsertMany(IEnumerable`1<TDocument> documents, InsertManyOptions options, Action`2<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions> bulkWrite);
    public virtual Task InsertManyAsync(IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    public virtual Task InsertManyAsync(IClientSessionHandle session, IEnumerable`1<TDocument> documents, InsertManyOptions options, CancellationToken cancellationToken);
    private Task InsertManyAsync(IEnumerable`1<TDocument> documents, InsertManyOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task> bulkWriteAsync);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual IAsyncCursor`1<TResult> MapReduce(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual IAsyncCursor`1<TResult> MapReduce(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public abstract virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    public abstract virtual IFilteredMongoCollection`1<TDerivedDocument> OfType();
    public virtual ReplaceOneResult ReplaceOne(FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public virtual ReplaceOneResult ReplaceOne(FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    public virtual ReplaceOneResult ReplaceOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public virtual ReplaceOneResult ReplaceOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    private ReplaceOneResult ReplaceOne(FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, BulkWriteResult`1<TDocument>> bulkWrite);
    public virtual Task`1<ReplaceOneResult> ReplaceOneAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public virtual Task`1<ReplaceOneResult> ReplaceOneAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<ReplaceOneResult> ReplaceOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the overload that takes a ReplaceOptions instead of an UpdateOptions.")]
public virtual Task`1<ReplaceOneResult> ReplaceOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, UpdateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionBase`1/<ReplaceOneAsync>d__101")]
private Task`1<ReplaceOneResult> ReplaceOneAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, ReplaceOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task`1<BulkWriteResult`1<TDocument>>> bulkWriteAsync);
    public virtual UpdateResult UpdateMany(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public virtual UpdateResult UpdateMany(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    private UpdateResult UpdateMany(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, BulkWriteResult`1<TDocument>> bulkWrite);
    public virtual Task`1<UpdateResult> UpdateManyAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<UpdateResult> UpdateManyAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionBase`1/<UpdateManyAsync>d__107")]
private Task`1<UpdateResult> UpdateManyAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task`1<BulkWriteResult`1<TDocument>>> bulkWriteAsync);
    public virtual UpdateResult UpdateOne(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public virtual UpdateResult UpdateOne(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    private UpdateResult UpdateOne(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, BulkWriteResult`1<TDocument>> bulkWrite);
    public virtual Task`1<UpdateResult> UpdateOneAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<UpdateResult> UpdateOneAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionBase`1/<UpdateOneAsync>d__113")]
private Task`1<UpdateResult> UpdateOneAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, UpdateOptions options, Func`3<IEnumerable`1<WriteModel`1<TDocument>>, BulkWriteOptions, Task`1<BulkWriteResult`1<TDocument>>> bulkWriteAsync);
    public virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IMongoCollection`1<TDocument> WithReadConcern(ReadConcern readConcern);
    public abstract virtual IMongoCollection`1<TDocument> WithReadPreference(ReadPreference readPreference);
    public abstract virtual IMongoCollection`1<TDocument> WithWriteConcern(WriteConcern writeConcern);
}
internal class MongoDB.Driver.MongoCollectionImpl`1 : MongoCollectionBase`1<TDocument> {
    private ICluster _cluster;
    private CollectionNamespace _collectionNamespace;
    private IMongoDatabase _database;
    private LinqProvider _linqProvider;
    private MessageEncoderSettings _messageEncoderSettings;
    private IOperationExecutor _operationExecutor;
    private IBsonSerializer`1<TDocument> _documentSerializer;
    private MongoCollectionSettings _settings;
    private RenderArgs`1<TDocument> _args;
    public CollectionNamespace CollectionNamespace { get; }
    public IMongoDatabase Database { get; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public IMongoIndexManager`1<TDocument> Indexes { get; }
    public IMongoSearchIndexManager SearchIndexes { get; }
    public MongoCollectionSettings Settings { get; }
    public MongoCollectionImpl`1(IMongoDatabase database, CollectionNamespace collectionNamespace, MongoCollectionSettings settings, ICluster cluster, IOperationExecutor operationExecutor);
    private MongoCollectionImpl`1(IMongoDatabase database, CollectionNamespace collectionNamespace, MongoCollectionSettings settings, ICluster cluster, IOperationExecutor operationExecutor, IBsonSerializer`1<TDocument> documentSerializer);
    public virtual CollectionNamespace get_CollectionNamespace();
    public virtual IMongoDatabase get_Database();
    public virtual IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public virtual IMongoIndexManager`1<TDocument> get_Indexes();
    public virtual IMongoSearchIndexManager get_SearchIndexes();
    public virtual MongoCollectionSettings get_Settings();
    public virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<AggregateAsync>d__26`1")]
public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<AggregateToCollectionAsync>d__30`1")]
public virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<TDocument, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual BulkWriteResult`1<TDocument> BulkWrite(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual BulkWriteResult`1<TDocument> BulkWrite(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    public virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<BulkWriteAsync>d__34")]
public virtual Task`1<BulkWriteResult`1<TDocument>> BulkWriteAsync(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public virtual long Count(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocuments or EstimatedDocumentCount instead.")]
public virtual long Count(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public virtual Task`1<long> CountAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CountDocumentsAsync or EstimatedDocumentCountAsync instead.")]
public virtual Task`1<long> CountAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual long CountDocuments(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual long CountDocuments(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> CountDocumentsAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, CountOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TField> Distinct(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TField> Distinct(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TField>> DistinctAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TItem> DistinctMany(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TItem> DistinctMany(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TItem>> DistinctManyAsync(IClientSessionHandle session, FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options, CancellationToken cancellationToken);
    public virtual long EstimatedDocumentCount(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public virtual Task`1<long> EstimatedDocumentCountAsync(EstimatedDocumentCountOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TProjection> FindSync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TProjection> FindSync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TProjection>> FindAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndDelete(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndDelete(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndDeleteAsync(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndDeleteAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndReplace(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndReplace(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndReplaceAsync(FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndReplaceAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, TDocument replacement, FindOneAndReplaceOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndUpdate(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual TProjection FindOneAndUpdate(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndUpdateAsync(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    public virtual Task`1<TProjection> FindOneAndUpdateAsync(IClientSessionHandle session, FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual IAsyncCursor`1<TResult> MapReduce(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual IAsyncCursor`1<TResult> MapReduce(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<MapReduceAsync>d__72`1")]
[ObsoleteAttribute("Use Aggregation pipeline instead.")]
public virtual Task`1<IAsyncCursor`1<TResult>> MapReduceAsync(IClientSessionHandle session, BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, CancellationToken cancellationToken);
    public virtual IFilteredMongoCollection`1<TDerivedDocument> OfType();
    public virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<WatchAsync>d__77`1")]
public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IMongoCollection`1<TDocument> WithReadConcern(ReadConcern readConcern);
    public virtual IMongoCollection`1<TDocument> WithReadPreference(ReadPreference readPreference);
    public virtual IMongoCollection`1<TDocument> WithWriteConcern(WriteConcern writeConcern);
    private void AssignId(TDocument document);
    private WriteRequest ConvertWriteModelToWriteRequest(WriteModel`1<TDocument> model, int index);
    private AggregateOperation`1<TResult> CreateAggregateOperation(RenderedPipelineDefinition`1<TResult> renderedPipeline, AggregateOptions options);
    private FindOperation`1<TResult> CreateAggregateToCollectionFindOperation(BsonDocument outStage, IBsonSerializer`1<TResult> resultSerializer, AggregateOptions options);
    private AggregateToCollectionOperation CreateAggregateToCollectionOperation(RenderedPipelineDefinition`1<TResult> renderedPipeline, AggregateOptions options);
    private BulkMixedWriteOperation CreateBulkWriteOperation(IClientSessionHandle session, IEnumerable`1<WriteModel`1<TDocument>> requests, BulkWriteOptions options);
    private ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(PipelineDefinition`2<ChangeStreamDocument`1<TDocument>, TResult> pipeline, ChangeStreamOptions options);
    private CountDocumentsOperation CreateCountDocumentsOperation(FilterDefinition`1<TDocument> filter, CountOptions options);
    private CountOperation CreateCountOperation(FilterDefinition`1<TDocument> filter, CountOptions options);
    private DistinctOperation`1<TField> CreateDistinctOperation(FieldDefinition`2<TDocument, TField> field, FilterDefinition`1<TDocument> filter, DistinctOptions options);
    private DistinctOperation`1<TItem> CreateDistinctManyOperation(FieldDefinition`2<TDocument, IEnumerable`1<TItem>> field, FilterDefinition`1<TDocument> filter, DistinctOptions options);
    private EstimatedDocumentCountOperation CreateEstimatedDocumentCountOperation(EstimatedDocumentCountOptions options);
    private FindOneAndDeleteOperation`1<TProjection> CreateFindOneAndDeleteOperation(FilterDefinition`1<TDocument> filter, FindOneAndDeleteOptions`2<TDocument, TProjection> options);
    private FindOneAndReplaceOperation`1<TProjection> CreateFindOneAndReplaceOperation(FilterDefinition`1<TDocument> filter, object replacementObject, FindOneAndReplaceOptions`2<TDocument, TProjection> options);
    private FindOneAndUpdateOperation`1<TProjection> CreateFindOneAndUpdateOperation(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update, FindOneAndUpdateOptions`2<TDocument, TProjection> options);
    private FindOperation`1<TProjection> CreateFindOperation(FilterDefinition`1<TDocument> filter, FindOptions`2<TDocument, TProjection> options);
    private MapReduceOperation`1<TResult> CreateMapReduceOperation(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, IBsonSerializer`1<TResult> resultSerializer);
    private MapReduceOutputToCollectionOperation CreateMapReduceOutputToCollectionOperation(BsonJavaScript map, BsonJavaScript reduce, MapReduceOptions`2<TDocument, TResult> options, MapReduceOutputOptions outputOptions);
    private FindOperation`1<TResult> CreateMapReduceOutputToCollectionFindOperation(MapReduceOptions`2<TDocument, TResult> options, CollectionNamespace outputCollectionNamespace, IBsonSerializer`1<TResult> resultSerializer);
    private IReadBindingHandle CreateReadBinding(IClientSessionHandle session, ReadPreference readPreference);
    private IWriteBindingHandle CreateReadWriteBinding(IClientSessionHandle session);
    private MessageEncoderSettings GetMessageEncoderSettings();
    private IBsonSerializer`1<TField> GetValueSerializerForDistinct(RenderedFieldDefinition`1<TField> renderedField, IBsonSerializerRegistry serializerRegistry);
    private IBsonSerializer`1<TItem> GetItemSerializerForDistinctMany(RenderedFieldDefinition`1<IEnumerable`1<TItem>> renderedField, IBsonSerializerRegistry serializerRegistry);
    private TResult ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    private TResult ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<TResult> operation, ReadPreference readPreference, CancellationToken cancellationToken);
    private Task`1<TResult> ExecuteReadOperationAsync(IClientSessionHandle session, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<ExecuteReadOperationAsync>d__108`1")]
private Task`1<TResult> ExecuteReadOperationAsync(IClientSessionHandle session, IReadOperation`1<TResult> operation, ReadPreference readPreference, CancellationToken cancellationToken);
    private TResult ExecuteWriteOperation(IClientSessionHandle session, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<ExecuteWriteOperationAsync>d__110`1")]
private Task`1<TResult> ExecuteWriteOperationAsync(IClientSessionHandle session, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    private IEnumerable`1<BsonDocument> RenderArrayFilters(IEnumerable`1<ArrayFilterDefinition> arrayFilters);
    private IBsonSerializer`1<TResult> ResolveResultSerializer(IBsonSerializer`1<TResult> resultSerializer);
    private void UsingImplicitSession(Action`1<IClientSessionHandle> func, CancellationToken cancellationToken);
    private TResult UsingImplicitSession(Func`2<IClientSessionHandle, TResult> func, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<UsingImplicitSessionAsync>d__115")]
private Task UsingImplicitSessionAsync(Func`2<IClientSessionHandle, Task> funcAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoCollectionImpl`1/<UsingImplicitSessionAsync>d__116`1")]
private Task`1<TResult> UsingImplicitSessionAsync(Func`2<IClientSessionHandle, Task`1<TResult>> funcAsync, CancellationToken cancellationToken);
}
public class MongoDB.Driver.MongoCollectionSettings : object {
    private Setting`1<bool> _assignIdOnInsert;
    private Setting`1<GuidRepresentation> _guidRepresentation;
    private Setting`1<ReadConcern> _readConcern;
    private Setting`1<UTF8Encoding> _readEncoding;
    private Setting`1<ReadPreference> _readPreference;
    private Setting`1<WriteConcern> _writeConcern;
    private Setting`1<UTF8Encoding> _writeEncoding;
    private bool _isFrozen;
    private int _frozenHashCode;
    private string _frozenStringRepresentation;
    public bool AssignIdOnInsert { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public bool IsFrozen { get; }
    public ReadConcern ReadConcern { get; public set; }
    public UTF8Encoding ReadEncoding { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public IBsonSerializerRegistry SerializerRegistry { get; }
    public WriteConcern WriteConcern { get; public set; }
    public UTF8Encoding WriteEncoding { get; public set; }
    public bool get_AssignIdOnInsert();
    public void set_AssignIdOnInsert(bool value);
    public GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public bool get_IsFrozen();
    public ReadConcern get_ReadConcern();
    public void set_ReadConcern(ReadConcern value);
    public UTF8Encoding get_ReadEncoding();
    public void set_ReadEncoding(UTF8Encoding value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public IBsonSerializerRegistry get_SerializerRegistry();
    public WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
    public UTF8Encoding get_WriteEncoding();
    public void set_WriteEncoding(UTF8Encoding value);
    public virtual MongoCollectionSettings Clone();
    public virtual bool Equals(object obj);
    public MongoCollectionSettings Freeze();
    public MongoCollectionSettings FrozenCopy();
    public virtual int GetHashCode();
    public virtual string ToString();
    internal void ApplyDefaultValues(MongoDatabaseSettings databaseSettings);
}
public class MongoDB.Driver.MongoCredential : object {
    private MongoIdentityEvidence _evidence;
    private MongoIdentity _identity;
    private string _mechanism;
    private Dictionary`2<string, object> _mechanismProperties;
    public MongoIdentityEvidence Evidence { get; }
    public MongoIdentity Identity { get; }
    public string Mechanism { get; }
    [ObsoleteAttribute("Use Evidence instead.")]
public string Password { get; }
    public string Source { get; }
    public string Username { get; }
    public MongoCredential(string mechanism, MongoIdentity identity, MongoIdentityEvidence evidence);
    public MongoIdentityEvidence get_Evidence();
    public MongoIdentity get_Identity();
    public string get_Mechanism();
    public string get_Password();
    public string get_Source();
    public string get_Username();
    public static bool op_Equality(MongoCredential lhs, MongoCredential rhs);
    public static bool op_Inequality(MongoCredential lhs, MongoCredential rhs);
    public static MongoCredential CreateCredential(string databaseName, string username, string password);
    public static MongoCredential CreateCredential(string databaseName, string username, SecureString password);
    public static MongoCredential CreateGssapiCredential(string username);
    public static MongoCredential CreateGssapiCredential(string username, string password);
    public static MongoCredential CreateGssapiCredential(string username, SecureString password);
    [ObsoleteAttribute("MONGODB-CR was replaced by SCRAM-SHA-1 in MongoDB 3.0, and is now deprecated.")]
public static MongoCredential CreateMongoCRCredential(string databaseName, string username, string password);
    [ObsoleteAttribute("MONGODB-CR was replaced by SCRAM-SHA-1 in MongoDB 3.0, and is now deprecated.")]
public static MongoCredential CreateMongoCRCredential(string databaseName, string username, SecureString password);
    public static MongoCredential CreateOidcCredential(IOidcCallback callback, string principalName);
    public static MongoCredential CreateOidcCredential(string environment, string userName);
    public static MongoCredential CreateMongoX509Credential(string username);
    public static MongoCredential CreatePlainCredential(string databaseName, string username, string password);
    public static MongoCredential CreatePlainCredential(string databaseName, string username, SecureString password);
    public T GetMechanismProperty(string key, T defaultValue);
    public sealed virtual bool Equals(MongoCredential rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public MongoCredential WithMechanismProperty(string key, object value);
    internal IAuthenticator ToAuthenticator(IReadOnlyList`1<EndPoint> endPoints, ServerApi serverApi, IEnvironmentVariableProvider environmentVariableProvider);
    internal static MongoCredential CreateRawOidcCredential(string userName);
    internal static MongoCredential FromComponents(string mechanism, string source, string username, string password);
    internal static MongoCredential FromComponents(string mechanism, string source, string databaseName, string username, string password);
    private static void EnsureNullOrExternalSource(string mechanism, string source);
    private static MongoCredential FromComponents(string mechanism, string source, string databaseName, string username, MongoIdentityEvidence evidence);
}
internal class MongoDB.Driver.MongoCredentialStore : object {
    private ReadOnlyCollection`1<MongoCredential> _credentials;
    public MongoCredentialStore(IEnumerable`1<MongoCredential> credentials);
    public static bool op_Equality(MongoCredentialStore lhs, MongoCredentialStore rhs);
    public static bool op_Inequality(MongoCredentialStore lhs, MongoCredentialStore rhs);
    public sealed virtual bool Equals(MongoCredentialStore obj);
    public virtual bool Equals(object obj);
    public sealed virtual IEnumerator`1<MongoCredential> GetEnumerator();
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void EnsureCredentialsAreCompatibleWithEachOther();
}
public abstract class MongoDB.Driver.MongoDatabaseBase : object {
    public IMongoClient Client { get; }
    public DatabaseNamespace DatabaseNamespace { get; }
    public MongoDatabaseSettings Settings { get; }
    public abstract virtual IMongoClient get_Client();
    public abstract virtual DatabaseNamespace get_DatabaseNamespace();
    public abstract virtual MongoDatabaseSettings get_Settings();
    public virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void CreateCollection(string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public virtual void CreateCollection(IClientSessionHandle session, string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task CreateCollectionAsync(string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task CreateCollectionAsync(IClientSessionHandle session, string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public virtual void CreateView(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual void CreateView(IClientSessionHandle session, string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual Task CreateViewAsync(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual Task CreateViewAsync(IClientSessionHandle session, string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual void DropCollection(string name, CancellationToken cancellationToken);
    public virtual void DropCollection(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public virtual void DropCollection(string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public virtual void DropCollection(IClientSessionHandle session, string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropCollectionAsync(string name, CancellationToken cancellationToken);
    public virtual Task DropCollectionAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public virtual Task DropCollectionAsync(string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task DropCollectionAsync(IClientSessionHandle session, string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual IMongoCollection`1<TDocument> GetCollection(string name, MongoCollectionSettings settings);
    public virtual IAsyncCursor`1<string> ListCollectionNames(ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<string> ListCollectionNames(IClientSessionHandle session, ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListCollectionNamesAsync(ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListCollectionNamesAsync(IClientSessionHandle session, ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListCollections(ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListCollections(IClientSessionHandle session, ListCollectionsOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListCollectionsAsync(ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListCollectionsAsync(IClientSessionHandle session, ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual void RenameCollection(string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual void RenameCollection(IClientSessionHandle session, string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public abstract virtual Task RenameCollectionAsync(string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task RenameCollectionAsync(IClientSessionHandle session, string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual TResult RunCommand(Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual TResult RunCommand(IClientSessionHandle session, Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> RunCommandAsync(Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual Task`1<TResult> RunCommandAsync(IClientSessionHandle session, Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IMongoDatabase WithReadConcern(ReadConcern readConcern);
    public virtual IMongoDatabase WithReadPreference(ReadPreference readPreference);
    public virtual IMongoDatabase WithWriteConcern(WriteConcern writeConcern);
}
internal class MongoDB.Driver.MongoDatabaseImpl : MongoDatabaseBase {
    private IMongoClient _client;
    private ICluster _cluster;
    private DatabaseNamespace _databaseNamespace;
    private LinqProvider _linqProvider;
    private IOperationExecutor _operationExecutor;
    private MongoDatabaseSettings _settings;
    public IMongoClient Client { get; }
    public DatabaseNamespace DatabaseNamespace { get; }
    public MongoDatabaseSettings Settings { get; }
    public MongoDatabaseImpl(IMongoClient client, DatabaseNamespace databaseNamespace, MongoDatabaseSettings settings, ICluster cluster, IOperationExecutor operationExecutor);
    public virtual IMongoClient get_Client();
    public virtual DatabaseNamespace get_DatabaseNamespace();
    public virtual MongoDatabaseSettings get_Settings();
    public virtual IAsyncCursor`1<TResult> Aggregate(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<TResult> Aggregate(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<AggregateAsync>d__16`1")]
public virtual Task`1<IAsyncCursor`1<TResult>> AggregateAsync(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void AggregateToCollection(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual Task AggregateToCollectionAsync(PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<AggregateToCollectionAsync>d__20`1")]
public virtual Task AggregateToCollectionAsync(IClientSessionHandle session, PipelineDefinition`2<NoPipelineInput, TResult> pipeline, AggregateOptions options, CancellationToken cancellationToken);
    public virtual void CreateCollection(string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public virtual void CreateCollection(IClientSessionHandle session, string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task CreateCollectionAsync(string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<CreateCollectionAsync>d__24")]
public virtual Task CreateCollectionAsync(IClientSessionHandle session, string name, CreateCollectionOptions options, CancellationToken cancellationToken);
    public virtual void CreateView(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual void CreateView(IClientSessionHandle session, string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual Task CreateViewAsync(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual Task CreateViewAsync(IClientSessionHandle session, string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options, CancellationToken cancellationToken);
    public virtual void DropCollection(string name, CancellationToken cancellationToken);
    public virtual void DropCollection(string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public virtual void DropCollection(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public virtual void DropCollection(IClientSessionHandle session, string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task DropCollectionAsync(string name, CancellationToken cancellationToken);
    public virtual Task DropCollectionAsync(string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task DropCollectionAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<DropCollectionAsync>d__36")]
public virtual Task DropCollectionAsync(IClientSessionHandle session, string name, DropCollectionOptions options, CancellationToken cancellationToken);
    public virtual IMongoCollection`1<TDocument> GetCollection(string name, MongoCollectionSettings settings);
    public virtual IAsyncCursor`1<string> ListCollectionNames(ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<string> ListCollectionNames(IClientSessionHandle session, ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<string>> ListCollectionNamesAsync(ListCollectionNamesOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<ListCollectionNamesAsync>d__41")]
public virtual Task`1<IAsyncCursor`1<string>> ListCollectionNamesAsync(IClientSessionHandle session, ListCollectionNamesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListCollections(ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> ListCollections(IClientSessionHandle session, ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListCollectionsAsync(ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListCollectionsAsync(IClientSessionHandle session, ListCollectionsOptions options, CancellationToken cancellationToken);
    public virtual void RenameCollection(string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual void RenameCollection(IClientSessionHandle session, string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task RenameCollectionAsync(string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual Task RenameCollectionAsync(IClientSessionHandle session, string oldName, string newName, RenameCollectionOptions options, CancellationToken cancellationToken);
    public virtual TResult RunCommand(Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual TResult RunCommand(IClientSessionHandle session, Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual Task`1<TResult> RunCommandAsync(Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual Task`1<TResult> RunCommandAsync(IClientSessionHandle session, Command`1<TResult> command, ReadPreference readPreference, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IChangeStreamCursor`1<TResult> Watch(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IChangeStreamCursor`1<TResult>> WatchAsync(IClientSessionHandle session, PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options, CancellationToken cancellationToken);
    public virtual IMongoDatabase WithReadConcern(ReadConcern readConcern);
    public virtual IMongoDatabase WithReadPreference(ReadPreference readPreference);
    public virtual IMongoDatabase WithWriteConcern(WriteConcern writeConcern);
    private AggregateOperation`1<TResult> CreateAggregateOperation(RenderedPipelineDefinition`1<TResult> renderedPipeline, AggregateOptions options);
    private FindOperation`1<TResult> CreateAggregateToCollectionFindOperation(BsonDocument outStage, IBsonSerializer`1<TResult> resultSerializer, AggregateOptions options);
    private AggregateToCollectionOperation CreateAggregateToCollectionOperation(RenderedPipelineDefinition`1<TResult> renderedPipeline, AggregateOptions options);
    private void CreateCollectionHelper(IClientSessionHandle session, string name, CreateCollectionOptions`1<TDocument> options, CancellationToken cancellationToken);
    private Task CreateCollectionHelperAsync(IClientSessionHandle session, string name, CreateCollectionOptions`1<TDocument> options, CancellationToken cancellationToken);
    private IWriteOperation`1<BsonDocument> CreateCreateCollectionOperation(string name, CreateCollectionOptions`1<TDocument> options);
    private CreateViewOperation CreateCreateViewOperation(string viewName, string viewOn, PipelineDefinition`2<TDocument, TResult> pipeline, CreateViewOptions`1<TDocument> options);
    private IWriteOperation`1<BsonDocument> CreateDropCollectionOperation(string name, DropCollectionOptions options, IClientSessionHandle session, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<CreateDropCollectionOperationAsync>d__69")]
private Task`1<IWriteOperation`1<BsonDocument>> CreateDropCollectionOperationAsync(string name, DropCollectionOptions options, IClientSessionHandle session, CancellationToken cancellationToken);
    private ListCollectionsOperation CreateListCollectionNamesOperation(ListCollectionNamesOptions options);
    private ListCollectionsOperation CreateListCollectionsOperation(ListCollectionsOptions options);
    private IReadBinding CreateReadBinding(IClientSessionHandle session, ReadPreference readPreference);
    private IWriteBindingHandle CreateReadWriteBinding(IClientSessionHandle session);
    private RenameCollectionOperation CreateRenameCollectionOperation(string oldName, string newName, RenameCollectionOptions options);
    private ReadCommandOperation`1<TResult> CreateRunCommandOperation(Command`1<TResult> command);
    private ChangeStreamOperation`1<TResult> CreateChangeStreamOperation(PipelineDefinition`2<ChangeStreamDocument`1<BsonDocument>, TResult> pipeline, ChangeStreamOptions options);
    private IEnumerable`1<string> ExtractCollectionNames(IEnumerable`1<BsonDocument> collections);
    private T ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<T> operation, CancellationToken cancellationToken);
    private T ExecuteReadOperation(IClientSessionHandle session, IReadOperation`1<T> operation, ReadPreference readPreference, CancellationToken cancellationToken);
    private Task`1<T> ExecuteReadOperationAsync(IClientSessionHandle session, IReadOperation`1<T> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<ExecuteReadOperationAsync>d__81`1")]
private Task`1<T> ExecuteReadOperationAsync(IClientSessionHandle session, IReadOperation`1<T> operation, ReadPreference readPreference, CancellationToken cancellationToken);
    private T ExecuteWriteOperation(IClientSessionHandle session, IWriteOperation`1<T> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<ExecuteWriteOperationAsync>d__83`1")]
private Task`1<T> ExecuteWriteOperationAsync(IClientSessionHandle session, IWriteOperation`1<T> operation, CancellationToken cancellationToken);
    private MessageEncoderSettings GetMessageEncoderSettings(bool withGuidRepresentationUnspecified);
    private void UsingImplicitSession(Action`1<IClientSessionHandle> func, CancellationToken cancellationToken);
    private TResult UsingImplicitSession(Func`2<IClientSessionHandle, TResult> func, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<UsingImplicitSessionAsync>d__87")]
private Task UsingImplicitSessionAsync(Func`2<IClientSessionHandle, Task> funcAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoDatabaseImpl/<UsingImplicitSessionAsync>d__88`1")]
private Task`1<TResult> UsingImplicitSessionAsync(Func`2<IClientSessionHandle, Task`1<TResult>> funcAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <CreateDropCollectionOperation>b__68_0(DropCollectionOperation dco);
    [CompilerGeneratedAttribute]
private void <CreateDropCollectionOperationAsync>b__69_0(DropCollectionOperation dco);
}
public class MongoDB.Driver.MongoDatabaseSettings : object {
    private Setting`1<GuidRepresentation> _guidRepresentation;
    private Setting`1<ReadConcern> _readConcern;
    private Setting`1<UTF8Encoding> _readEncoding;
    private Setting`1<ReadPreference> _readPreference;
    private Setting`1<WriteConcern> _writeConcern;
    private Setting`1<UTF8Encoding> _writeEncoding;
    private bool _isFrozen;
    private int _frozenHashCode;
    private string _frozenStringRepresentation;
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public bool IsFrozen { get; }
    public ReadConcern ReadConcern { get; public set; }
    public UTF8Encoding ReadEncoding { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public IBsonSerializerRegistry SerializerRegistry { get; }
    public WriteConcern WriteConcern { get; public set; }
    public UTF8Encoding WriteEncoding { get; public set; }
    public GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public bool get_IsFrozen();
    public ReadConcern get_ReadConcern();
    public void set_ReadConcern(ReadConcern value);
    public UTF8Encoding get_ReadEncoding();
    public void set_ReadEncoding(UTF8Encoding value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public IBsonSerializerRegistry get_SerializerRegistry();
    public WriteConcern get_WriteConcern();
    public void set_WriteConcern(WriteConcern value);
    public UTF8Encoding get_WriteEncoding();
    public void set_WriteEncoding(UTF8Encoding value);
    public MongoDatabaseSettings Clone();
    public virtual bool Equals(object obj);
    public MongoDatabaseSettings Freeze();
    public MongoDatabaseSettings FrozenCopy();
    public virtual int GetHashCode();
    public virtual string ToString();
    internal void ApplyDefaultValues(IInheritableMongoClientSettings clientSettings);
}
[BsonSerializerAttribute("MongoDB.Driver.MongoDBRefSerializer")]
public class MongoDB.Driver.MongoDBRef : object {
    private string _databaseName;
    private string _collectionName;
    private BsonValue _id;
    public string DatabaseName { get; }
    public string CollectionName { get; }
    public BsonValue Id { get; }
    public MongoDBRef(string collectionName, BsonValue id);
    public MongoDBRef(string databaseName, string collectionName, BsonValue id);
    public string get_DatabaseName();
    public string get_CollectionName();
    public BsonValue get_Id();
    public static bool op_Inequality(MongoDBRef lhs, MongoDBRef rhs);
    public static bool op_Equality(MongoDBRef lhs, MongoDBRef rhs);
    public static bool Equals(MongoDBRef lhs, MongoDBRef rhs);
    public sealed virtual bool Equals(MongoDBRef rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MongoDB.Driver.MongoDBRefSerializer : ClassSerializerBase`1<MongoDBRef> {
    private SerializerHelper _helper;
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    protected virtual MongoDBRef DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, MongoDBRef value);
}
public static class MongoDB.Driver.MongoDefaults : object {
    private static bool __assignIdOnInsert;
    private static string __authenticationMechanism;
    private static TimeSpan __connectTimeout;
    private static TimeSpan __localThreshold;
    private static TimeSpan __maxConnectionIdleTime;
    private static TimeSpan __maxConnectionLifeTime;
    private static int __maxBatchCount;
    private static int __maxConnectionPoolSize;
    private static int __maxMessageLength;
    private static int __minConnectionPoolSize;
    private static TimeSpan __operationTimeout;
    private static UTF8Encoding __readEncoding;
    private static TimeSpan __serverSelectionTimeout;
    private static TimeSpan __socketTimeout;
    private static int __tcpReceiveBufferSize;
    private static int __tcpSendBufferSize;
    private static double __waitQueueMultiple;
    private static int __waitQueueSize;
    private static TimeSpan __waitQueueTimeout;
    private static UTF8Encoding __writeEncoding;
    private static int __maxDocumentSize;
    public static bool AssignIdOnInsert { get; public set; }
    public static string AuthenticationMechanism { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public static int ComputedWaitQueueSize { get; }
    public static TimeSpan ConnectTimeout { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public static GuidRepresentation GuidRepresentation { get; public set; }
    public static TimeSpan LocalThreshold { get; public set; }
    public static int MaxBatchCount { get; public set; }
    public static TimeSpan MaxConnectionIdleTime { get; public set; }
    public static TimeSpan MaxConnectionLifeTime { get; public set; }
    public static int MaxConnectionPoolSize { get; public set; }
    public static int MaxDocumentSize { get; public set; }
    public static int MaxMessageLength { get; public set; }
    public static int MinConnectionPoolSize { get; public set; }
    public static TimeSpan OperationTimeout { get; public set; }
    public static UTF8Encoding ReadEncoding { get; public set; }
    public static TimeSpan ServerSelectionTimeout { get; public set; }
    public static TimeSpan SocketTimeout { get; public set; }
    public static int TcpReceiveBufferSize { get; public set; }
    public static int TcpSendBufferSize { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public static double WaitQueueMultiple { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public static int WaitQueueSize { get; public set; }
    public static TimeSpan WaitQueueTimeout { get; public set; }
    public static UTF8Encoding WriteEncoding { get; public set; }
    private static MongoDefaults();
    public static bool get_AssignIdOnInsert();
    public static void set_AssignIdOnInsert(bool value);
    public static string get_AuthenticationMechanism();
    public static void set_AuthenticationMechanism(string value);
    public static int get_ComputedWaitQueueSize();
    public static TimeSpan get_ConnectTimeout();
    public static void set_ConnectTimeout(TimeSpan value);
    public static GuidRepresentation get_GuidRepresentation();
    public static void set_GuidRepresentation(GuidRepresentation value);
    public static TimeSpan get_LocalThreshold();
    public static void set_LocalThreshold(TimeSpan value);
    public static int get_MaxBatchCount();
    public static void set_MaxBatchCount(int value);
    public static TimeSpan get_MaxConnectionIdleTime();
    public static void set_MaxConnectionIdleTime(TimeSpan value);
    public static TimeSpan get_MaxConnectionLifeTime();
    public static void set_MaxConnectionLifeTime(TimeSpan value);
    public static int get_MaxConnectionPoolSize();
    public static void set_MaxConnectionPoolSize(int value);
    public static int get_MaxDocumentSize();
    public static void set_MaxDocumentSize(int value);
    public static int get_MaxMessageLength();
    public static void set_MaxMessageLength(int value);
    public static int get_MinConnectionPoolSize();
    public static void set_MinConnectionPoolSize(int value);
    public static TimeSpan get_OperationTimeout();
    public static void set_OperationTimeout(TimeSpan value);
    public static UTF8Encoding get_ReadEncoding();
    public static void set_ReadEncoding(UTF8Encoding value);
    public static TimeSpan get_ServerSelectionTimeout();
    public static void set_ServerSelectionTimeout(TimeSpan value);
    public static TimeSpan get_SocketTimeout();
    public static void set_SocketTimeout(TimeSpan value);
    public static int get_TcpReceiveBufferSize();
    public static void set_TcpReceiveBufferSize(int value);
    public static int get_TcpSendBufferSize();
    public static void set_TcpSendBufferSize(int value);
    public static double get_WaitQueueMultiple();
    public static void set_WaitQueueMultiple(double value);
    public static int get_WaitQueueSize();
    public static void set_WaitQueueSize(int value);
    public static TimeSpan get_WaitQueueTimeout();
    public static void set_WaitQueueTimeout(TimeSpan value);
    public static UTF8Encoding get_WriteEncoding();
    public static void set_WriteEncoding(UTF8Encoding value);
}
public class MongoDB.Driver.MongoExternalAwsIdentity : MongoIdentity {
}
public class MongoDB.Driver.MongoExternalIdentity : MongoIdentity {
    public MongoExternalIdentity(string username);
    public MongoExternalIdentity(string source, string username);
}
public abstract class MongoDB.Driver.MongoIdentity : object {
    private string _source;
    private string _username;
    public string Source { get; }
    public string Username { get; }
    internal MongoIdentity(string source, string username, bool allowNullUsername);
    public string get_Source();
    public string get_Username();
    public static bool op_Equality(MongoIdentity lhs, MongoIdentity rhs);
    public static bool op_Inequality(MongoIdentity lhs, MongoIdentity rhs);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MongoIdentity rhs);
    public virtual int GetHashCode();
}
public abstract class MongoDB.Driver.MongoIdentityEvidence : object {
    public static bool op_Equality(MongoIdentityEvidence lhs, MongoIdentityEvidence rhs);
    public static bool op_Inequality(MongoIdentityEvidence lhs, MongoIdentityEvidence rhs);
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
}
public abstract class MongoDB.Driver.MongoIndexManagerBase`1 : object {
    public CollectionNamespace CollectionNamespace { get; }
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public MongoCollectionSettings Settings { get; }
    public abstract virtual CollectionNamespace get_CollectionNamespace();
    public abstract virtual IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public abstract virtual MongoCollectionSettings get_Settings();
    [ObsoleteAttribute("Use CreateOne with a CreateIndexModel instead.")]
public virtual string CreateOne(IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    public virtual string CreateOne(CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CreateOne with a CreateIndexModel instead.")]
public virtual string CreateOne(IClientSessionHandle session, IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    public virtual string CreateOne(IClientSessionHandle session, CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoIndexManagerBase`1/<CreateOneAsync>d__10")]
[ObsoleteAttribute("Use CreateOneAsync with a CreateIndexModel instead.")]
public virtual Task`1<string> CreateOneAsync(IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoIndexManagerBase`1/<CreateOneAsync>d__11")]
public virtual Task`1<string> CreateOneAsync(CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoIndexManagerBase`1/<CreateOneAsync>d__12")]
[ObsoleteAttribute("Use CreateOneAsync with a CreateIndexModel instead.")]
public virtual Task`1<string> CreateOneAsync(IClientSessionHandle session, IndexKeysDefinition`1<TDocument> keys, CreateIndexOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoIndexManagerBase`1/<CreateOneAsync>d__13")]
public virtual Task`1<string> CreateOneAsync(IClientSessionHandle session, CreateIndexModel`1<TDocument> model, CreateOneIndexOptions options, CancellationToken cancellationToken);
    public virtual IEnumerable`1<string> CreateMany(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public virtual IEnumerable`1<string> CreateMany(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public virtual IEnumerable`1<string> CreateMany(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public virtual IEnumerable`1<string> CreateMany(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CancellationToken cancellationToken);
    public virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IClientSessionHandle session, IEnumerable`1<CreateIndexModel`1<TDocument>> models, CreateManyIndexesOptions options, CancellationToken cancellationToken);
    public virtual void DropAll(DropIndexOptions options, CancellationToken cancellationToken);
    public virtual void DropAll(CancellationToken cancellationToken);
    public virtual void DropAll(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual void DropAll(IClientSessionHandle session, DropIndexOptions options, CancellationToken cancellationToken);
    public virtual Task DropAllAsync(DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropAllAsync(CancellationToken cancellationToken);
    public virtual Task DropAllAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual Task DropAllAsync(IClientSessionHandle session, DropIndexOptions options, CancellationToken cancellationToken);
    public virtual void DropOne(string name, CancellationToken cancellationToken);
    public virtual void DropOne(string name, DropIndexOptions options, CancellationToken cancellationToken);
    public virtual void DropOne(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public virtual void DropOne(IClientSessionHandle session, string name, DropIndexOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DropOneAsync(string name, CancellationToken cancellationToken);
    public virtual Task DropOneAsync(string name, DropIndexOptions options, CancellationToken cancellationToken);
    public virtual Task DropOneAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken);
    public virtual Task DropOneAsync(IClientSessionHandle session, string name, DropIndexOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> List(CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> List(ListIndexesOptions options, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> List(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual IAsyncCursor`1<BsonDocument> List(IClientSessionHandle session, ListIndexesOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(ListIndexesOptions options, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(IClientSessionHandle session, CancellationToken cancellationToken);
    public virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(IClientSessionHandle session, ListIndexesOptions options, CancellationToken cancellationToken);
    private CreateManyIndexesOptions ToCreateManyIndexesOptions(CreateOneIndexOptions options);
}
public class MongoDB.Driver.MongoInternalIdentity : MongoIdentity {
    public MongoInternalIdentity(string databaseName, string username);
}
public class MongoDB.Driver.MongoOidcIdentity : MongoIdentity {
    public MongoOidcIdentity(string username);
}
public class MongoDB.Driver.MongoServerAddress : object {
    private string _host;
    private int _port;
    public string Host { get; }
    public int Port { get; }
    public MongoServerAddress(string host);
    public MongoServerAddress(string host, int port);
    public static MongoServerAddress Parse(string value);
    public static bool TryParse(string value, MongoServerAddress& address);
    public string get_Host();
    public int get_Port();
    public static bool op_Equality(MongoServerAddress lhs, MongoServerAddress rhs);
    public static bool op_Inequality(MongoServerAddress lhs, MongoServerAddress rhs);
    public sealed virtual bool Equals(MongoServerAddress rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[TypeConverterAttribute("MongoDB.Driver.MongoUrlTypeConverter")]
public class MongoDB.Driver.MongoUrl : object {
    private static object __staticLock;
    private static Dictionary`2<string, MongoUrl> __cache;
    private bool _allowInsecureTls;
    private string _applicationName;
    private string _authenticationMechanism;
    private IEnumerable`1<KeyValuePair`2<string, string>> _authenticationMechanismProperties;
    private string _authenticationSource;
    private IReadOnlyList`1<CompressorConfiguration> _compressors;
    private ConnectionMode _connectionMode;
    private ConnectionModeSwitch _connectionModeSwitch;
    private TimeSpan _connectTimeout;
    private string _databaseName;
    private Nullable`1<bool> _directConnection;
    private Nullable`1<bool> _fsync;
    private GuidRepresentation _guidRepresentation;
    private TimeSpan _heartbeatInterval;
    private TimeSpan _heartbeatTimeout;
    private bool _ipv6;
    private bool _isResolved;
    private Nullable`1<bool> _journal;
    private bool _loadBalanced;
    private int _maxConnecting;
    private TimeSpan _maxConnectionIdleTime;
    private TimeSpan _maxConnectionLifeTime;
    private int _maxConnectionPoolSize;
    private int _minConnectionPoolSize;
    private string _password;
    private Nullable`1<ReadConcernLevel> _readConcernLevel;
    private ReadPreference _readPreference;
    private string _replicaSetName;
    private Nullable`1<bool> _retryReads;
    private Nullable`1<bool> _retryWrites;
    private TimeSpan _localThreshold;
    private ConnectionStringScheme _scheme;
    private IEnumerable`1<MongoServerAddress> _servers;
    private Nullable`1<ServerMonitoringMode> _serverMonitoringMode;
    private TimeSpan _serverSelectionTimeout;
    private TimeSpan _socketTimeout;
    private Nullable`1<int> _srvMaxHosts;
    private string _srvServiceName;
    private bool _tlsDisableCertificateRevocationCheck;
    private string _username;
    private bool _useTls;
    private WValue _w;
    private double _waitQueueMultiple;
    private int _waitQueueSize;
    private TimeSpan _waitQueueTimeout;
    private Nullable`1<TimeSpan> _wTimeout;
    private string _url;
    private string _originalUrl;
    public bool AllowInsecureTls { get; }
    public string ApplicationName { get; }
    public string AuthenticationMechanism { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> AuthenticationMechanismProperties { get; }
    public string AuthenticationSource { get; }
    public IReadOnlyList`1<CompressorConfiguration> Compressors { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int ComputedWaitQueueSize { get; }
    [ObsoleteAttribute("Use DirectConnection instead.")]
public ConnectionMode ConnectionMode { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public ConnectionModeSwitch ConnectionModeSwitch { get; }
    public TimeSpan ConnectTimeout { get; }
    public string DatabaseName { get; }
    public Nullable`1<bool> DirectConnection { get; }
    public Nullable`1<bool> FSync { get; }
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; }
    public bool HasAuthenticationSettings { get; }
    public TimeSpan HeartbeatInterval { get; }
    public TimeSpan HeartbeatTimeout { get; }
    public bool IPv6 { get; }
    public bool IsResolved { get; }
    public Nullable`1<bool> Journal { get; }
    public bool LoadBalanced { get; }
    public TimeSpan LocalThreshold { get; }
    public int MaxConnecting { get; }
    public TimeSpan MaxConnectionIdleTime { get; }
    public TimeSpan MaxConnectionLifeTime { get; }
    public int MaxConnectionPoolSize { get; }
    public int MinConnectionPoolSize { get; }
    public string Password { get; }
    public Nullable`1<ReadConcernLevel> ReadConcernLevel { get; }
    public ReadPreference ReadPreference { get; }
    public string ReplicaSetName { get; }
    public Nullable`1<bool> RetryReads { get; }
    public Nullable`1<bool> RetryWrites { get; }
    public ConnectionStringScheme Scheme { get; }
    public MongoServerAddress Server { get; }
    public IEnumerable`1<MongoServerAddress> Servers { get; }
    public Nullable`1<ServerMonitoringMode> ServerMonitoringMode { get; }
    public TimeSpan ServerSelectionTimeout { get; }
    public TimeSpan SocketTimeout { get; }
    public Nullable`1<int> SrvMaxHosts { get; }
    public string SrvServiceName { get; }
    public bool TlsDisableCertificateRevocationCheck { get; }
    public string Url { get; }
    public string Username { get; }
    [ObsoleteAttribute("Use UseTls instead.")]
public bool UseSsl { get; }
    public bool UseTls { get; }
    [ObsoleteAttribute("Use AllowInsecureTls instead.")]
public bool VerifySslCertificate { get; }
    public WValue W { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public double WaitQueueMultiple { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int WaitQueueSize { get; }
    public TimeSpan WaitQueueTimeout { get; }
    public Nullable`1<TimeSpan> WTimeout { get; }
    public MongoUrl(string url);
    internal MongoUrl(MongoUrlBuilder builder);
    private static MongoUrl();
    public bool get_AllowInsecureTls();
    public string get_ApplicationName();
    public string get_AuthenticationMechanism();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_AuthenticationMechanismProperties();
    public string get_AuthenticationSource();
    public IReadOnlyList`1<CompressorConfiguration> get_Compressors();
    public int get_ComputedWaitQueueSize();
    public ConnectionMode get_ConnectionMode();
    public ConnectionModeSwitch get_ConnectionModeSwitch();
    public TimeSpan get_ConnectTimeout();
    public string get_DatabaseName();
    public Nullable`1<bool> get_DirectConnection();
    public Nullable`1<bool> get_FSync();
    public GuidRepresentation get_GuidRepresentation();
    public bool get_HasAuthenticationSettings();
    public TimeSpan get_HeartbeatInterval();
    public TimeSpan get_HeartbeatTimeout();
    public bool get_IPv6();
    public bool get_IsResolved();
    public Nullable`1<bool> get_Journal();
    public bool get_LoadBalanced();
    public TimeSpan get_LocalThreshold();
    public int get_MaxConnecting();
    public TimeSpan get_MaxConnectionIdleTime();
    public TimeSpan get_MaxConnectionLifeTime();
    public int get_MaxConnectionPoolSize();
    public int get_MinConnectionPoolSize();
    public string get_Password();
    public Nullable`1<ReadConcernLevel> get_ReadConcernLevel();
    public ReadPreference get_ReadPreference();
    public string get_ReplicaSetName();
    public Nullable`1<bool> get_RetryReads();
    public Nullable`1<bool> get_RetryWrites();
    public ConnectionStringScheme get_Scheme();
    public MongoServerAddress get_Server();
    public IEnumerable`1<MongoServerAddress> get_Servers();
    public Nullable`1<ServerMonitoringMode> get_ServerMonitoringMode();
    public TimeSpan get_ServerSelectionTimeout();
    public TimeSpan get_SocketTimeout();
    public Nullable`1<int> get_SrvMaxHosts();
    public string get_SrvServiceName();
    public bool get_TlsDisableCertificateRevocationCheck();
    public string get_Url();
    public string get_Username();
    public bool get_UseSsl();
    public bool get_UseTls();
    public bool get_VerifySslCertificate();
    public WValue get_W();
    public double get_WaitQueueMultiple();
    public int get_WaitQueueSize();
    public TimeSpan get_WaitQueueTimeout();
    public Nullable`1<TimeSpan> get_WTimeout();
    public static bool op_Equality(MongoUrl lhs, MongoUrl rhs);
    public static bool op_Inequality(MongoUrl lhs, MongoUrl rhs);
    public static void ClearCache();
    public static MongoUrl Create(string url);
    public sealed virtual bool Equals(MongoUrl rhs);
    public virtual bool Equals(object obj);
    public MongoCredential GetCredential();
    public virtual int GetHashCode();
    public WriteConcern GetWriteConcern(bool enabledDefault);
    public MongoUrl Resolve(CancellationToken cancellationToken);
    public MongoUrl Resolve(bool resolveHosts, CancellationToken cancellationToken);
    public Task`1<MongoUrl> ResolveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.MongoUrl/<ResolveAsync>d__168")]
public Task`1<MongoUrl> ResolveAsync(bool resolveHosts, CancellationToken cancellationToken);
    public virtual string ToString();
    private bool AnyWriteConcernSettingsAreSet();
}
public class MongoDB.Driver.MongoUrlBuilder : object {
    private bool _allowInsecureTls;
    private string _applicationName;
    private string _authenticationMechanism;
    private Dictionary`2<string, string> _authenticationMechanismProperties;
    private string _authenticationSource;
    private IReadOnlyList`1<CompressorConfiguration> _compressors;
    private ConnectionMode _connectionMode;
    private ConnectionModeSwitch _connectionModeSwitch;
    private TimeSpan _connectTimeout;
    private string _databaseName;
    private Nullable`1<bool> _directConnection;
    private Nullable`1<bool> _fsync;
    private GuidRepresentation _guidRepresentation;
    private TimeSpan _heartbeatInterval;
    private TimeSpan _heartbeatTimeout;
    private bool _ipv6;
    private Nullable`1<bool> _journal;
    private bool _loadBalanced;
    private TimeSpan _localThreshold;
    private TimeSpan _maxConnectionIdleTime;
    private TimeSpan _maxConnectionLifeTime;
    private int _maxConnecting;
    private int _maxConnectionPoolSize;
    private int _minConnectionPoolSize;
    private string _password;
    private Nullable`1<ReadConcernLevel> _readConcernLevel;
    private ReadPreference _readPreference;
    private string _replicaSetName;
    private Nullable`1<bool> _retryReads;
    private Nullable`1<bool> _retryWrites;
    private ConnectionStringScheme _scheme;
    private IEnumerable`1<MongoServerAddress> _servers;
    private Nullable`1<ServerMonitoringMode> _serverMonitoringMode;
    private TimeSpan _serverSelectionTimeout;
    private TimeSpan _socketTimeout;
    private Nullable`1<int> _srvMaxHosts;
    private string _srvServiceName;
    private Nullable`1<bool> _tlsDisableCertificateRevocationCheck;
    private string _username;
    private bool _useTls;
    private WValue _w;
    private double _waitQueueMultiple;
    private int _waitQueueSize;
    private TimeSpan _waitQueueTimeout;
    private Nullable`1<TimeSpan> _wTimeout;
    public bool AllowInsecureTls { get; public set; }
    public string ApplicationName { get; public set; }
    public string AuthenticationMechanism { get; public set; }
    public IEnumerable`1<KeyValuePair`2<string, string>> AuthenticationMechanismProperties { get; public set; }
    public string AuthenticationSource { get; public set; }
    public IReadOnlyList`1<CompressorConfiguration> Compressors { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int ComputedWaitQueueSize { get; }
    [ObsoleteAttribute("Use DirectConnection instead.")]
public ConnectionMode ConnectionMode { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public ConnectionModeSwitch ConnectionModeSwitch { get; }
    public TimeSpan ConnectTimeout { get; public set; }
    public string DatabaseName { get; public set; }
    public Nullable`1<bool> DirectConnection { get; public set; }
    public Nullable`1<bool> FSync { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public TimeSpan HeartbeatInterval { get; public set; }
    public TimeSpan HeartbeatTimeout { get; public set; }
    public bool IPv6 { get; public set; }
    public Nullable`1<bool> Journal { get; public set; }
    public bool LoadBalanced { get; public set; }
    public TimeSpan LocalThreshold { get; public set; }
    public int MaxConnecting { get; public set; }
    public TimeSpan MaxConnectionIdleTime { get; public set; }
    public TimeSpan MaxConnectionLifeTime { get; public set; }
    public int MaxConnectionPoolSize { get; public set; }
    public int MinConnectionPoolSize { get; public set; }
    public string Password { get; public set; }
    public Nullable`1<ReadConcernLevel> ReadConcernLevel { get; public set; }
    public ReadPreference ReadPreference { get; public set; }
    public string ReplicaSetName { get; public set; }
    public Nullable`1<bool> RetryReads { get; public set; }
    public Nullable`1<bool> RetryWrites { get; public set; }
    public ConnectionStringScheme Scheme { get; public set; }
    public MongoServerAddress Server { get; public set; }
    public IEnumerable`1<MongoServerAddress> Servers { get; public set; }
    public Nullable`1<ServerMonitoringMode> ServerMonitoringMode { get; public set; }
    public TimeSpan ServerSelectionTimeout { get; public set; }
    public TimeSpan SocketTimeout { get; public set; }
    public Nullable`1<int> SrvMaxHosts { get; public set; }
    public string SrvServiceName { get; public set; }
    public bool TlsDisableCertificateRevocationCheck { get; public set; }
    public string Username { get; public set; }
    [ObsoleteAttribute("Use UseTls instead.")]
public bool UseSsl { get; public set; }
    public bool UseTls { get; public set; }
    [ObsoleteAttribute("Use AllowInsecureTls instead.")]
public bool VerifySslCertificate { get; public set; }
    public WValue W { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public double WaitQueueMultiple { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int WaitQueueSize { get; public set; }
    public TimeSpan WaitQueueTimeout { get; public set; }
    public Nullable`1<TimeSpan> WTimeout { get; public set; }
    public MongoUrlBuilder(string url);
    internal MongoUrlBuilder(ConnectionString connectionString);
    public bool get_AllowInsecureTls();
    public void set_AllowInsecureTls(bool value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_AuthenticationMechanism();
    public void set_AuthenticationMechanism(string value);
    public IEnumerable`1<KeyValuePair`2<string, string>> get_AuthenticationMechanismProperties();
    public void set_AuthenticationMechanismProperties(IEnumerable`1<KeyValuePair`2<string, string>> value);
    public string get_AuthenticationSource();
    public void set_AuthenticationSource(string value);
    public IReadOnlyList`1<CompressorConfiguration> get_Compressors();
    public void set_Compressors(IReadOnlyList`1<CompressorConfiguration> value);
    public int get_ComputedWaitQueueSize();
    public ConnectionMode get_ConnectionMode();
    public void set_ConnectionMode(ConnectionMode value);
    public ConnectionModeSwitch get_ConnectionModeSwitch();
    public TimeSpan get_ConnectTimeout();
    public void set_ConnectTimeout(TimeSpan value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public Nullable`1<bool> get_DirectConnection();
    public void set_DirectConnection(Nullable`1<bool> value);
    public Nullable`1<bool> get_FSync();
    public void set_FSync(Nullable`1<bool> value);
    public GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public TimeSpan get_HeartbeatInterval();
    public void set_HeartbeatInterval(TimeSpan value);
    public TimeSpan get_HeartbeatTimeout();
    public void set_HeartbeatTimeout(TimeSpan value);
    public bool get_IPv6();
    public void set_IPv6(bool value);
    public Nullable`1<bool> get_Journal();
    public void set_Journal(Nullable`1<bool> value);
    public bool get_LoadBalanced();
    public void set_LoadBalanced(bool value);
    public TimeSpan get_LocalThreshold();
    public void set_LocalThreshold(TimeSpan value);
    public int get_MaxConnecting();
    public void set_MaxConnecting(int value);
    public TimeSpan get_MaxConnectionIdleTime();
    public void set_MaxConnectionIdleTime(TimeSpan value);
    public TimeSpan get_MaxConnectionLifeTime();
    public void set_MaxConnectionLifeTime(TimeSpan value);
    public int get_MaxConnectionPoolSize();
    public void set_MaxConnectionPoolSize(int value);
    public int get_MinConnectionPoolSize();
    public void set_MinConnectionPoolSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public Nullable`1<ReadConcernLevel> get_ReadConcernLevel();
    public void set_ReadConcernLevel(Nullable`1<ReadConcernLevel> value);
    public ReadPreference get_ReadPreference();
    public void set_ReadPreference(ReadPreference value);
    public string get_ReplicaSetName();
    public void set_ReplicaSetName(string value);
    public Nullable`1<bool> get_RetryReads();
    public void set_RetryReads(Nullable`1<bool> value);
    public Nullable`1<bool> get_RetryWrites();
    public void set_RetryWrites(Nullable`1<bool> value);
    public ConnectionStringScheme get_Scheme();
    public void set_Scheme(ConnectionStringScheme value);
    public MongoServerAddress get_Server();
    public void set_Server(MongoServerAddress value);
    public IEnumerable`1<MongoServerAddress> get_Servers();
    public void set_Servers(IEnumerable`1<MongoServerAddress> value);
    public Nullable`1<ServerMonitoringMode> get_ServerMonitoringMode();
    public void set_ServerMonitoringMode(Nullable`1<ServerMonitoringMode> value);
    public TimeSpan get_ServerSelectionTimeout();
    public void set_ServerSelectionTimeout(TimeSpan value);
    public TimeSpan get_SocketTimeout();
    public void set_SocketTimeout(TimeSpan value);
    public Nullable`1<int> get_SrvMaxHosts();
    public void set_SrvMaxHosts(Nullable`1<int> value);
    public string get_SrvServiceName();
    public void set_SrvServiceName(string value);
    public bool get_TlsDisableCertificateRevocationCheck();
    public void set_TlsDisableCertificateRevocationCheck(bool value);
    public string get_Username();
    public void set_Username(string value);
    public bool get_UseSsl();
    public void set_UseSsl(bool value);
    public bool get_UseTls();
    public void set_UseTls(bool value);
    public bool get_VerifySslCertificate();
    public void set_VerifySslCertificate(bool value);
    public WValue get_W();
    public void set_W(WValue value);
    public double get_WaitQueueMultiple();
    public void set_WaitQueueMultiple(double value);
    public int get_WaitQueueSize();
    public void set_WaitQueueSize(int value);
    public TimeSpan get_WaitQueueTimeout();
    public void set_WaitQueueTimeout(TimeSpan value);
    public Nullable`1<TimeSpan> get_WTimeout();
    public void set_WTimeout(Nullable`1<TimeSpan> value);
    public WriteConcern GetWriteConcern(bool enabledDefault);
    public void Parse(string url);
    public MongoUrl ToMongoUrl();
    public virtual string ToString();
    private void InitializeFromConnectionString(ConnectionString connectionString);
    private bool AnyWriteConcernSettingsAreSet();
    private string FormatTimeSpan(TimeSpan value);
    private static void ParseAndAppendCompressorOptions(StringBuilder builder, CompressorConfiguration compressorConfiguration);
}
public class MongoDB.Driver.MongoUrlTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[ExtensionAttribute]
public static class MongoDB.Driver.MongoUtils : object {
    public static string Hash(string text);
    public static TimeSpan TimeSpanFromMicroseconds(long microseconds);
    public static string ToCamelCase(string value);
    [ExtensionAttribute]
internal static string ToCamelCase(TEnum enum);
}
public class MongoDB.Driver.MongoWriteException : MongoServerException {
    private WriteConcernError _writeConcernError;
    private WriteError _writeError;
    public WriteConcernError WriteConcernError { get; }
    public WriteError WriteError { get; }
    public MongoWriteException(ConnectionId connectionId, WriteError writeError, WriteConcernError writeConcernError, Exception innerException);
    public MongoWriteException(SerializationInfo info, StreamingContext context);
    internal static MongoWriteException FromBulkWriteException(MongoBulkWriteException bulkException);
    public WriteConcernError get_WriteConcernError();
    public WriteError get_WriteError();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private static string FormatMessage(WriteError writeError, WriteConcernError writeConcernError);
}
public class MongoDB.Driver.MongoX509Identity : MongoIdentity {
    public MongoX509Identity(string username);
}
public static class MongoDB.Driver.Mql : object {
    public static DateTime DateFromString(string dateString);
    public static DateTime DateFromString(string dateString, string format);
    public static DateTime DateFromString(string dateString, string format, string timezone);
    public static Nullable`1<DateTime> DateFromString(string dateString, string format, string timezone, Nullable`1<DateTime> onError, Nullable`1<DateTime> onNull);
    public static bool Exists(TField field);
    public static bool IsMissing(TField field);
    public static bool IsNullOrMissing(TField field);
}
internal class MongoDB.Driver.NearFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private GeoJsonPoint`1<TCoordinates> _point;
    private Nullable`1<double> _maxDistance;
    private Nullable`1<double> _minDistance;
    private bool _spherical;
    public NearFilterDefinition`2(FieldDefinition`1<TDocument> field, GeoJsonPoint`1<TCoordinates> point, bool spherical, Nullable`1<double> maxDistance, Nullable`1<double> minDistance);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.NoPipelineInput : object {
}
internal class MongoDB.Driver.NoPipelineInputSerializer : object {
    private static NoPipelineInputSerializer __instance;
    public static NoPipelineInputSerializer Instance { get; }
    public Type ValueType { get; }
    private static NoPipelineInputSerializer();
    public static NoPipelineInputSerializer get_Instance();
    public sealed virtual Type get_ValueType();
    private sealed virtual override object MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual NoPipelineInput Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override void MongoDB.Bson.Serialization.IBsonSerializer.Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value);
    public sealed virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, NoPipelineInput value);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
internal class MongoDB.Driver.NotFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private FilterDefinition`1<TDocument> _filter;
    public NotFilterDefinition`1(FilterDefinition`1<TDocument> filter);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    private static BsonDocument NegateArbitraryFilter(BsonDocument filter);
    private static BsonDocument NegateSingleElementFilter(BsonDocument filter, BsonElement element);
    private static BsonDocument NegateSingleFieldOperatorFilter(string field, BsonElement element);
    private static BsonDocument NegateSingleElementTopLevelOperatorFilter(BsonDocument filter, BsonElement element);
}
public class MongoDB.Driver.ObjectCommand`1 : Command`1<TResult> {
    private object _obj;
    private IBsonSerializer`1<TResult> _resultSerializer;
    public object Object { get; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; }
    public ObjectCommand`1(object obj, IBsonSerializer`1<TResult> resultSerializer);
    public object get_Object();
    public IBsonSerializer`1<TResult> get_ResultSerializer();
    public virtual RenderedCommand`1<TResult> Render(IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Driver.ObjectFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private object _obj;
    public object Object { get; }
    public ObjectFilterDefinition`1(object obj);
    public object get_Object();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.ObjectProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private object _obj;
    public object Object { get; }
    public ObjectProjectionDefinition`1(object obj);
    public object get_Object();
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.ObjectProjectionDefinition`2 : ProjectionDefinition`2<TSource, TProjection> {
    private object _obj;
    private IBsonSerializer`1<TProjection> _projectionSerializer;
    public object Object { get; }
    public IBsonSerializer`1<TProjection> ProjectionSerializer { get; }
    public ObjectProjectionDefinition`2(object obj, IBsonSerializer`1<TProjection> projectionSerializer);
    public object get_Object();
    public IBsonSerializer`1<TProjection> get_ProjectionSerializer();
    public virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.ObjectSortDefinition`1 : SortDefinition`1<TDocument> {
    private object _obj;
    public object Object { get; }
    public ObjectSortDefinition`1(object obj);
    public object get_Object();
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.ObjectUpdateDefinition`1 : UpdateDefinition`1<TDocument> {
    private object _obj;
    public object Object { get; }
    public ObjectUpdateDefinition`1(object obj);
    public object get_Object();
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.OfTypeMongoCollection`2 : FilteredMongoCollectionBase`1<TDerivedDocument> {
    private IMongoCollection`1<TRootDocument> _rootDocumentCollection;
    public OfTypeMongoCollection`2(IMongoCollection`1<TRootDocument> rootDocumentCollection, IMongoCollection`1<TDerivedDocument> derivedDocumentCollection, FilterDefinition`1<TDerivedDocument> ofTypeFilter);
    public virtual IFilteredMongoCollection`1<TMoreDerivedDocument> OfType();
    public virtual IMongoCollection`1<TDerivedDocument> WithReadConcern(ReadConcern readConcern);
    public virtual IMongoCollection`1<TDerivedDocument> WithReadPreference(ReadPreference readPreference);
    public virtual IMongoCollection`1<TDerivedDocument> WithWriteConcern(WriteConcern writeConcern);
    protected virtual UpdateDefinition`1<TDerivedDocument> AdjustUpdateDefinition(UpdateDefinition`1<TDerivedDocument> updateDefinition, bool isUpsert);
}
internal class MongoDB.Driver.OfTypeSerializer`2 : SerializerBase`1<TDerivedDocument> {
    private IBsonSerializer`1<TDerivedDocument> _derivedDocumentSerializer;
    public OfTypeSerializer`2(IBsonSerializer`1<TDerivedDocument> derivedDocumentSerializer);
    public virtual TDerivedDocument Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public sealed virtual bool GetDocumentId(object document, Object& id, Type& idNominalType, IIdGenerator& idGenerator);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TDerivedDocument value);
    public sealed virtual void SetDocumentId(object document, object id);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
internal class MongoDB.Driver.OperationExecutor : object {
    private MongoClient _client;
    public OperationExecutor(MongoClient client);
    public sealed virtual TResult ExecuteReadOperation(IReadBinding binding, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.OperationExecutor/<ExecuteReadOperationAsync>d__3`1")]
public sealed virtual Task`1<TResult> ExecuteReadOperationAsync(IReadBinding binding, IReadOperation`1<TResult> operation, CancellationToken cancellationToken);
    public sealed virtual TResult ExecuteWriteOperation(IWriteBinding binding, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.OperationExecutor/<ExecuteWriteOperationAsync>d__5`1")]
public sealed virtual Task`1<TResult> ExecuteWriteOperationAsync(IWriteBinding binding, IWriteOperation`1<TResult> operation, CancellationToken cancellationToken);
    public sealed virtual IClientSessionHandle StartImplicitSession(CancellationToken cancellationToken);
    public sealed virtual Task`1<IClientSessionHandle> StartImplicitSessionAsync(CancellationToken cancellationToken);
}
internal class MongoDB.Driver.OperatorFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`1<TDocument> _field;
    private BsonValue _value;
    public OperatorFilterDefinition`1(string operatorName, FieldDefinition`1<TDocument> field, BsonValue value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.OperatorFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, TField> _field;
    private TField _value;
    private bool _allowScalarValueForArrayField;
    public OperatorFilterDefinition`2(string operatorName, FieldDefinition`2<TDocument, TField> field, TField value, bool allowScalarValueForArrayField);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.OperatorUpdateDefinition`1 : UpdateDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`1<TDocument> _field;
    private BsonValue _value;
    public OperatorUpdateDefinition`1(string operatorName, FieldDefinition`1<TDocument> field, BsonValue value);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.OperatorUpdateDefinition`2 : UpdateDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, TField> _field;
    private TField _value;
    public OperatorUpdateDefinition`2(string operatorName, FieldDefinition`2<TDocument, TField> field, TField value);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.OptimizingPipelineDefinition`2 : PipelineDefinition`2<TInput, TOutput> {
    private PipelineDefinition`2<TInput, TOutput> _wrapped;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public OptimizingPipelineDefinition`2(PipelineDefinition`2<TInput, TOutput> wrapped);
    public virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
internal class MongoDB.Driver.OrFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private List`1<FilterDefinition`1<TDocument>> _filters;
    public OrFilterDefinition`1(IEnumerable`1<FilterDefinition`1<TDocument>> filters);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    private static void AddClause(BsonArray clauses, BsonDocument filter);
}
public class MongoDB.Driver.PasswordEvidence : MongoIdentityEvidence {
    private SecureString _securePassword;
    public SecureString SecurePassword { get; }
    public PasswordEvidence(SecureString password);
    public PasswordEvidence(string password);
    public SecureString get_SecurePassword();
    public virtual bool Equals(object rhs);
    public virtual int GetHashCode();
    [ObsoleteAttribute("MONGODB-CR was replaced by SCRAM-SHA-1 in MongoDB 3.0, and is now deprecated.")]
internal string ComputeMongoCRPasswordDigest(string username);
    private static SecureString CreateSecureString(string value);
    private static Byte[] ComputeHash(HashAlgorithm algorithm, Byte[] prefixBytes, Byte[] passwordBytes);
}
public class MongoDB.Driver.PathRenderArgs : ValueType {
    [CompilerGeneratedAttribute]
private string <PathPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowScalarValueForArray>k__BackingField;
    public string PathPrefix { get; public set; }
    public bool AllowScalarValueForArray { get; public set; }
    public PathRenderArgs(string PathPrefix, bool AllowScalarValueForArray);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_PathPrefix();
    [CompilerGeneratedAttribute]
public void set_PathPrefix(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_AllowScalarValueForArray();
    [CompilerGeneratedAttribute]
public void set_AllowScalarValueForArray(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(PathRenderArgs left, PathRenderArgs right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(PathRenderArgs left, PathRenderArgs right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(PathRenderArgs other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& PathPrefix, Boolean& AllowScalarValueForArray);
}
public abstract class MongoDB.Driver.PipelineDefinition`2 : object {
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public abstract virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public abstract virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    [ObsoleteAttribute("Use Render(RenderArgs<TInput> args) overload instead.")]
public virtual RenderedPipelineDefinition`1<TOutput> Render(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TInput> args) overload instead.")]
public virtual RenderedPipelineDefinition`1<TOutput> Render(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    public virtual string ToString();
    public string ToString(LinqProvider linqProvider);
    public string ToString(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry);
    public string ToString(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public static PipelineDefinition`2<TInput, TOutput> Create(IEnumerable`1<IPipelineStageDefinition> stages, IBsonSerializer`1<TOutput> outputSerializer);
    public static PipelineDefinition`2<TInput, TOutput> Create(IEnumerable`1<BsonDocument> stages, IBsonSerializer`1<TOutput> outputSerializer);
    public static PipelineDefinition`2<TInput, TOutput> Create(IEnumerable`1<string> stages, IBsonSerializer`1<TOutput> outputSerializer);
    public static PipelineDefinition`2<TInput, TOutput> Create(BsonDocument[] stages);
    public static PipelineDefinition`2<TInput, TOutput> Create(String[] stages);
    public static PipelineDefinition`2<TInput, TOutput> op_Implicit(IPipelineStageDefinition[] stages);
    public static PipelineDefinition`2<TInput, TOutput> op_Implicit(List`1<IPipelineStageDefinition> stages);
    public static PipelineDefinition`2<TInput, TOutput> op_Implicit(BsonDocument[] stages);
    public static PipelineDefinition`2<TInput, TOutput> op_Implicit(List`1<BsonDocument> stages);
}
[ExtensionAttribute]
public static class MongoDB.Driver.PipelineDefinitionBuilder : object {
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> AppendStage(PipelineDefinition`2<TInput, TIntermediate> pipeline, PipelineStageDefinition`2<TIntermediate, TOutput> stage, IBsonSerializer`1<TOutput> outputSerializer);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> As(PipelineDefinition`2<TInput, TIntermediate> pipeline, IBsonSerializer`1<TOutput> outputSerializer);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateBucketResult`1<TValue>> Bucket(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TValue> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Bucket(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TValue> groupBy, IEnumerable`1<TValue> boundaries, ProjectionDefinition`2<TIntermediate, TOutput> output, AggregateBucketOptions`1<TValue> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateBucketResult`1<TValue>> Bucket(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TValue>> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Bucket(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TValue>> groupBy, IEnumerable`1<TValue> boundaries, Expression`1<Func`2<IGrouping`2<TValue, TIntermediate>, TOutput>> output, AggregateBucketOptions`1<TValue> options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateBucketAutoResult`1<TValue>> BucketAuto(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TValue> groupBy, int buckets, AggregateBucketAutoOptions options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> BucketAuto(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TValue> groupBy, int buckets, ProjectionDefinition`2<TIntermediate, TOutput> output, AggregateBucketAutoOptions options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateBucketAutoResult`1<TValue>> BucketAuto(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TValue>> groupBy, int buckets, AggregateBucketAutoOptions options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> BucketAuto(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<AggregateBucketAutoResultId`1<TValue>, TIntermediate>, TOutput>> output, AggregateBucketAutoOptions options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> BucketAutoForLinq2(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<TValue, TIntermediate>, TOutput>> output, AggregateBucketAutoOptions options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, ChangeStreamDocument`1<TIntermediate>> ChangeStream(PipelineDefinition`2<TInput, TIntermediate> pipeline, ChangeStreamStageOptions options);
    [ExtensionAttribute]
public static PipelineDefinition`2<ChangeStreamDocument`1<TInput>, ChangeStreamDocument`1<TInput>> ChangeStreamSplitLargeEvent(PipelineDefinition`2<ChangeStreamDocument`1<TInput>, ChangeStreamDocument`1<TInput>> pipeline);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateCountResult> Count(PipelineDefinition`2<TInput, TIntermediate> pipeline);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Densify(PipelineDefinition`2<TInput, TOutput> pipeline, FieldDefinition`1<TOutput> field, DensifyRange range, IEnumerable`1<FieldDefinition`1<TOutput>> partitionByFields);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Densify(PipelineDefinition`2<TInput, TOutput> pipeline, FieldDefinition`1<TOutput> field, DensifyRange range, FieldDefinition`1[] partitionByFields);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Densify(PipelineDefinition`2<TInput, TOutput> pipeline, Expression`1<Func`2<TOutput, object>> field, DensifyRange range, IEnumerable`1<Expression`1<Func`2<TOutput, object>>> partitionByFields);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Densify(PipelineDefinition`2<TInput, TOutput> pipeline, Expression`1<Func`2<TOutput, object>> field, DensifyRange range, Expression`1[] partitionByFields);
    [ExtensionAttribute]
public static PipelineDefinition`2<NoPipelineInput, TDocument> Documents(PipelineDefinition`2<NoPipelineInput, NoPipelineInput> pipeline, AggregateExpressionDefinition`2<NoPipelineInput, IEnumerable`1<TDocument>> documents, IBsonSerializer`1<TDocument> documentSerializer);
    [ExtensionAttribute]
public static PipelineDefinition`2<NoPipelineInput, TDocument> Documents(PipelineDefinition`2<NoPipelineInput, NoPipelineInput> pipeline, IEnumerable`1<TDocument> documents, IBsonSerializer`1<TDocument> documentSerializer);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Facet(PipelineDefinition`2<TInput, TIntermediate> pipeline, IEnumerable`1<AggregateFacet`1<TIntermediate>> facets, AggregateFacetOptions`1<TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateFacetResults> Facet(PipelineDefinition`2<TInput, TIntermediate> pipeline, IEnumerable`1<AggregateFacet`1<TIntermediate>> facets);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateFacetResults> Facet(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateFacet`1[] facets);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Facet(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateFacet`1[] facets);
    public static PipelineDefinition`2<TInput, TInput> For(IBsonSerializer`1<TInput> inputSerializer);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> GraphLookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TIntermediate, TStartWith> startWith, FieldDefinition`2<TOutput, TAs> as, FieldDefinition`2<TAsElement, int> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> GraphLookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TIntermediate, TStartWith> startWith, FieldDefinition`2<TOutput, TAs> as, AggregateGraphLookupOptions`3<TFrom, TFrom, TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> GraphLookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, BsonValue> connectFromField, FieldDefinition`2<TFrom, BsonValue> connectToField, AggregateExpressionDefinition`2<TIntermediate, BsonValue> startWith, FieldDefinition`2<BsonDocument, IEnumerable`1<BsonDocument>> as, FieldDefinition`2<BsonDocument, int> depthField);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> GraphLookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TFrom> from, Expression`1<Func`2<TFrom, TConnectFrom>> connectFromField, Expression`1<Func`2<TFrom, TConnectTo>> connectToField, Expression`1<Func`2<TIntermediate, TStartWith>> startWith, Expression`1<Func`2<TOutput, TAs>> as, AggregateGraphLookupOptions`3<TFrom, TFrom, TOutput> options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> GraphLookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TFrom> from, Expression`1<Func`2<TFrom, TConnectFrom>> connectFromField, Expression`1<Func`2<TFrom, TConnectTo>> connectToField, Expression`1<Func`2<TIntermediate, TStartWith>> startWith, Expression`1<Func`2<TOutput, TAs>> as, Expression`1<Func`2<TAsElement, int>> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TOutput> options, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Group(PipelineDefinition`2<TInput, TIntermediate> pipeline, ProjectionDefinition`2<TIntermediate, TOutput> group);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> Group(PipelineDefinition`2<TInput, TIntermediate> pipeline, ProjectionDefinition`2<TIntermediate, BsonDocument> group);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Group(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TKey>> id, Expression`1<Func`2<IGrouping`2<TKey, TIntermediate>, TOutput>> group, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Limit(PipelineDefinition`2<TInput, TOutput> pipeline, long limit);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Lookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TForeignDocument> foreignCollection, FieldDefinition`1<TIntermediate> localField, FieldDefinition`1<TForeignDocument> foreignField, FieldDefinition`1<TOutput> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Lookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TForeignDocument> foreignCollection, Expression`1<Func`2<TIntermediate, object>> localField, Expression`1<Func`2<TForeignDocument, object>> foreignField, Expression`1<Func`2<TOutput, object>> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Lookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, FieldDefinition`2<TOutput, TAs> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Lookup(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, Expression`1<Func`2<TOutput, TAs>> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Match(PipelineDefinition`2<TInput, TOutput> pipeline, FilterDefinition`1<TOutput> filter);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Match(PipelineDefinition`2<TInput, TOutput> pipeline, Expression`1<Func`2<TOutput, bool>> filter);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> OfType(PipelineDefinition`2<TInput, TIntermediate> pipeline, IBsonSerializer`1<TOutput> outputSerializer);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Merge(PipelineDefinition`2<TInput, TIntermediate> pipeline, IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Out(PipelineDefinition`2<TInput, TOutput> pipeline, IMongoCollection`1<TOutput> outputCollection, TimeSeriesOptions timeSeriesOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Project(PipelineDefinition`2<TInput, TIntermediate> pipeline, ProjectionDefinition`2<TIntermediate, TOutput> projection);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> Project(PipelineDefinition`2<TInput, TIntermediate> pipeline, ProjectionDefinition`2<TIntermediate, BsonDocument> projection);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Project(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TOutput>> projection, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> ReplaceRoot(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TOutput> newRoot);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> ReplaceRoot(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TOutput>> newRoot, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> ReplaceWith(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TOutput> newRoot);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> ReplaceWith(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TOutput>> newRoot, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Sample(PipelineDefinition`2<TInput, TOutput> pipeline, long size);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Search(PipelineDefinition`2<TInput, TOutput> pipeline, SearchDefinition`1<TOutput> searchDefinition, SearchHighlightOptions`1<TOutput> highlight, string indexName, SearchCountOptions count, bool returnStoredSource, bool scoreDetails);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Search(PipelineDefinition`2<TInput, TOutput> pipeline, SearchDefinition`1<TOutput> searchDefinition, SearchOptions`1<TOutput> searchOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, SearchMetaResult> SearchMeta(PipelineDefinition`2<TInput, TOutput> pipeline, SearchDefinition`1<TOutput> query, string indexName, SearchCountOptions count);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Set(PipelineDefinition`2<TInput, TOutput> pipeline, SetFieldDefinitions`1<TOutput> fields);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Set(PipelineDefinition`2<TInput, TOutput> pipeline, Expression`1<Func`2<TOutput, TFields>> fields);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> SetWindowFields(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TIntermediate>, TWindowFields> output);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> SetWindowFields(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TPartitionBy> partitionBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TIntermediate>, TWindowFields> output);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> SetWindowFields(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TPartitionBy> partitionBy, SortDefinition`1<TIntermediate> sortBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TIntermediate>, TWindowFields> output);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> SetWindowFields(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<ISetWindowFieldsPartition`1<TIntermediate>, TWindowFields>> output);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> SetWindowFields(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TPartitionBy>> partitionBy, Expression`1<Func`2<ISetWindowFieldsPartition`1<TIntermediate>, TWindowFields>> output);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> SetWindowFields(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TPartitionBy>> partitionBy, SortDefinition`1<TIntermediate> sortBy, Expression`1<Func`2<ISetWindowFieldsPartition`1<TIntermediate>, TWindowFields>> output);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Skip(PipelineDefinition`2<TInput, TOutput> pipeline, long skip);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Sort(PipelineDefinition`2<TInput, TOutput> pipeline, SortDefinition`1<TOutput> sort);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateSortByCountResult`1<TValue>> SortByCount(PipelineDefinition`2<TInput, TIntermediate> pipeline, AggregateExpressionDefinition`2<TIntermediate, TValue> value);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, AggregateSortByCountResult`1<TValue>> SortByCount(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, TValue>> value, ExpressionTranslationOptions translationOptions);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> UnionWith(PipelineDefinition`2<TInput, TOutput> pipeline, IMongoCollection`1<TWith> withCollection, PipelineDefinition`2<TWith, TOutput> withPipeline);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Unwind(PipelineDefinition`2<TInput, TIntermediate> pipeline, FieldDefinition`1<TIntermediate> field, AggregateUnwindOptions`1<TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> Unwind(PipelineDefinition`2<TInput, TIntermediate> pipeline, FieldDefinition`1<TIntermediate> field, AggregateUnwindOptions`1<BsonDocument> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, BsonDocument> Unwind(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, object>> field, AggregateUnwindOptions`1<BsonDocument> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> Unwind(PipelineDefinition`2<TInput, TIntermediate> pipeline, Expression`1<Func`2<TIntermediate, object>> field, AggregateUnwindOptions`1<TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> VectorSearch(PipelineDefinition`2<TInput, TOutput> pipeline, Expression`1<Func`2<TOutput, TField>> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TOutput> options);
    [ExtensionAttribute]
public static PipelineDefinition`2<TInput, TOutput> VectorSearch(PipelineDefinition`2<TInput, TOutput> pipeline, FieldDefinition`1<TOutput> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TOutput> options);
}
public abstract class MongoDB.Driver.PipelineStageDefinition`2 : object {
    public Type InputType { get; }
    public string OperatorName { get; }
    public Type OutputType { get; }
    public sealed virtual Type get_InputType();
    public abstract virtual string get_OperatorName();
    public sealed virtual Type get_OutputType();
    [ObsoleteAttribute("Use Render(RenderArgs<TInput> args) overload instead.")]
public virtual RenderedPipelineStageDefinition`1<TOutput> Render(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TInput> args) overload instead.")]
public RenderedPipelineStageDefinition`1<TOutput> Render(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual RenderedPipelineStageDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    public virtual string ToString();
    public string ToString(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry);
    public string ToString(IBsonSerializer`1<TInput> inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    private sealed virtual override string MongoDB.Driver.IPipelineStageDefinition.ToString(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry);
    private sealed virtual override string MongoDB.Driver.IPipelineStageDefinition.ToString(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public static PipelineStageDefinition`2<TInput, TOutput> op_Implicit(BsonDocument document);
    public static PipelineStageDefinition`2<TInput, TOutput> op_Implicit(string json);
    private sealed virtual override IRenderedPipelineStageDefinition MongoDB.Driver.IPipelineStageDefinition.Render(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry);
    private sealed virtual override IRenderedPipelineStageDefinition MongoDB.Driver.IPipelineStageDefinition.Render(IBsonSerializer inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
public static class MongoDB.Driver.PipelineStageDefinitionBuilder : object {
    public static PipelineStageDefinition`2<TInput, AggregateBucketResult`1<TValue>> Bucket(AggregateExpressionDefinition`2<TInput, TValue> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options);
    public static PipelineStageDefinition`2<TInput, TOutput> Bucket(AggregateExpressionDefinition`2<TInput, TValue> groupBy, IEnumerable`1<TValue> boundaries, ProjectionDefinition`2<TInput, TOutput> output, AggregateBucketOptions`1<TValue> options);
    public static PipelineStageDefinition`2<TInput, AggregateBucketResult`1<TValue>> Bucket(Expression`1<Func`2<TInput, TValue>> groupBy, IEnumerable`1<TValue> boundaries, AggregateBucketOptions`1<TValue> options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> Bucket(Expression`1<Func`2<TInput, TValue>> groupBy, IEnumerable`1<TValue> boundaries, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> output, AggregateBucketOptions`1<TValue> options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, AggregateBucketAutoResult`1<TValue>> BucketAuto(AggregateExpressionDefinition`2<TInput, TValue> groupBy, int buckets, AggregateBucketAutoOptions options);
    public static PipelineStageDefinition`2<TInput, TOutput> BucketAuto(AggregateExpressionDefinition`2<TInput, TValue> groupBy, int buckets, ProjectionDefinition`2<TInput, TOutput> output, AggregateBucketAutoOptions options);
    public static PipelineStageDefinition`2<TInput, AggregateBucketAutoResult`1<TValue>> BucketAuto(Expression`1<Func`2<TInput, TValue>> groupBy, int buckets, AggregateBucketAutoOptions options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> BucketAuto(Expression`1<Func`2<TInput, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<AggregateBucketAutoResultId`1<TValue>, TInput>, TOutput>> output, AggregateBucketAutoOptions options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> BucketAutoForLinq2(Expression`1<Func`2<TInput, TValue>> groupBy, int buckets, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> output, AggregateBucketAutoOptions options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, ChangeStreamDocument`1<TInput>> ChangeStream(ChangeStreamStageOptions options);
    public static PipelineStageDefinition`2<ChangeStreamDocument`1<TInput>, ChangeStreamDocument`1<TInput>> ChangeStreamSplitLargeEvent();
    public static PipelineStageDefinition`2<TInput, AggregateCountResult> Count();
    public static PipelineStageDefinition`2<TInput, TInput> Densify(FieldDefinition`1<TInput> field, DensifyRange range, IEnumerable`1<FieldDefinition`1<TInput>> partitionByFields);
    public static PipelineStageDefinition`2<TInput, TInput> Densify(FieldDefinition`1<TInput> field, DensifyRange range, FieldDefinition`1[] partitionByFields);
    public static PipelineStageDefinition`2<TInput, TInput> Densify(Expression`1<Func`2<TInput, object>> field, DensifyRange range, IEnumerable`1<Expression`1<Func`2<TInput, object>>> partitionByFields);
    public static PipelineStageDefinition`2<TInput, TInput> Densify(Expression`1<Func`2<TInput, object>> field, DensifyRange range, Expression`1[] partitionByFields);
    public static PipelineStageDefinition`2<NoPipelineInput, TDocument> Documents(AggregateExpressionDefinition`2<NoPipelineInput, IEnumerable`1<TDocument>> documents, IBsonSerializer`1<TDocument> documentSerializer);
    public static PipelineStageDefinition`2<NoPipelineInput, TDocument> Documents(IEnumerable`1<TDocument> documents, IBsonSerializer`1<TDocument> documentSerializer);
    public static PipelineStageDefinition`2<TInput, TOutput> Facet(IEnumerable`1<AggregateFacet`1<TInput>> facets, AggregateFacetOptions`1<TOutput> options);
    public static PipelineStageDefinition`2<TInput, AggregateFacetResults> Facet(IEnumerable`1<AggregateFacet`1<TInput>> facets);
    public static PipelineStageDefinition`2<TInput, AggregateFacetResults> Facet(AggregateFacet`1[] facets);
    public static PipelineStageDefinition`2<TInput, TOutput> Facet(AggregateFacet`1[] facets);
    public static PipelineStageDefinition`2<TInput, TOutput> GraphLookup(IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TInput, TStartWith> startWith, FieldDefinition`2<TOutput, TAs> as, FieldDefinition`2<TAsElement, int> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TOutput> options);
    public static PipelineStageDefinition`2<TInput, TOutput> GraphLookup(IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, TConnectFrom> connectFromField, FieldDefinition`2<TFrom, TConnectTo> connectToField, AggregateExpressionDefinition`2<TInput, TStartWith> startWith, FieldDefinition`2<TOutput, TAs> as, AggregateGraphLookupOptions`3<TFrom, TFrom, TOutput> options);
    public static PipelineStageDefinition`2<TInput, BsonDocument> GraphLookup(IMongoCollection`1<TFrom> from, FieldDefinition`2<TFrom, BsonValue> connectFromField, FieldDefinition`2<TFrom, BsonValue> connectToField, AggregateExpressionDefinition`2<TInput, BsonValue> startWith, FieldDefinition`2<BsonDocument, IEnumerable`1<BsonDocument>> as, FieldDefinition`2<BsonDocument, int> depthField);
    public static PipelineStageDefinition`2<TInput, TOutput> GraphLookup(IMongoCollection`1<TFrom> from, Expression`1<Func`2<TFrom, TConnectFrom>> connectFromField, Expression`1<Func`2<TFrom, TConnectTo>> connectToField, Expression`1<Func`2<TInput, TStartWith>> startWith, Expression`1<Func`2<TOutput, TAs>> as, AggregateGraphLookupOptions`3<TFrom, TFrom, TOutput> options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> GraphLookup(IMongoCollection`1<TFrom> from, Expression`1<Func`2<TFrom, TConnectFrom>> connectFromField, Expression`1<Func`2<TFrom, TConnectTo>> connectToField, Expression`1<Func`2<TInput, TStartWith>> startWith, Expression`1<Func`2<TOutput, TAs>> as, Expression`1<Func`2<TAsElement, int>> depthField, AggregateGraphLookupOptions`3<TFrom, TAsElement, TOutput> options, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> Group(ProjectionDefinition`2<TInput, TOutput> group);
    public static PipelineStageDefinition`2<TInput, BsonDocument> Group(ProjectionDefinition`2<TInput, BsonDocument> group);
    public static PipelineStageDefinition`2<TInput, TOutput> Group(Expression`1<Func`2<TInput, TValue>> value, Expression`1<Func`2<IGrouping`2<TValue, TInput>, TOutput>> group, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TInput> Limit(long limit);
    public static PipelineStageDefinition`2<TInput, TOutput> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, FieldDefinition`1<TInput> localField, FieldDefinition`1<TForeignDocument> foreignField, FieldDefinition`1<TOutput> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    public static PipelineStageDefinition`2<TInput, TOutput> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, Expression`1<Func`2<TInput, object>> localField, Expression`1<Func`2<TForeignDocument, object>> foreignField, Expression`1<Func`2<TOutput, object>> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    public static PipelineStageDefinition`2<TInput, TOutput> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, FieldDefinition`2<TOutput, TAs> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    public static PipelineStageDefinition`2<TInput, TOutput> Lookup(IMongoCollection`1<TForeignDocument> foreignCollection, BsonDocument let, PipelineDefinition`2<TForeignDocument, TAsElement> lookupPipeline, Expression`1<Func`2<TOutput, TAs>> as, AggregateLookupOptions`2<TForeignDocument, TOutput> options);
    public static PipelineStageDefinition`2<TInput, TInput> Match(FilterDefinition`1<TInput> filter);
    public static PipelineStageDefinition`2<TInput, TInput> Match(Expression`1<Func`2<TInput, bool>> filter);
    public static PipelineStageDefinition`2<TInput, TOutput> Merge(IMongoCollection`1<TOutput> outputCollection, MergeStageOptions`1<TOutput> mergeOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> OfType(IBsonSerializer`1<TOutput> outputSerializer);
    public static PipelineStageDefinition`2<TInput, TInput> Out(IMongoCollection`1<TInput> outputCollection, TimeSeriesOptions timeSeriesOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> Project(ProjectionDefinition`2<TInput, TOutput> projection);
    public static PipelineStageDefinition`2<TInput, BsonDocument> Project(ProjectionDefinition`2<TInput, BsonDocument> projection);
    public static PipelineStageDefinition`2<TInput, TOutput> Project(Expression`1<Func`2<TInput, TOutput>> projection, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TInput> Search(SearchDefinition`1<TInput> searchDefinition, SearchHighlightOptions`1<TInput> highlight, string indexName, SearchCountOptions count, bool returnStoredSource, bool scoreDetails);
    public static PipelineStageDefinition`2<TInput, TInput> Search(SearchDefinition`1<TInput> searchDefinition, SearchOptions`1<TInput> searchOptions);
    public static PipelineStageDefinition`2<TInput, SearchMetaResult> SearchMeta(SearchDefinition`1<TInput> searchDefinition, string indexName, SearchCountOptions count);
    public static PipelineStageDefinition`2<TInput, TOutput> ReplaceRoot(AggregateExpressionDefinition`2<TInput, TOutput> newRoot);
    public static PipelineStageDefinition`2<TInput, TOutput> ReplaceRoot(Expression`1<Func`2<TInput, TOutput>> newRoot, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TOutput> ReplaceWith(AggregateExpressionDefinition`2<TInput, TOutput> newRoot);
    public static PipelineStageDefinition`2<TInput, TOutput> ReplaceWith(Expression`1<Func`2<TInput, TOutput>> newRoot, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TInput> Set(SetFieldDefinitions`1<TInput> fields);
    public static PipelineStageDefinition`2<TInput, TInput> Set(Expression`1<Func`2<TInput, TFields>> fields);
    public static PipelineStageDefinition`2<TInput, BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TInput>, TWindowFields> output);
    public static PipelineStageDefinition`2<TInput, BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TInput, TPartitionBy> partitionBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TInput>, TWindowFields> output);
    public static PipelineStageDefinition`2<TInput, BsonDocument> SetWindowFields(AggregateExpressionDefinition`2<TInput, TPartitionBy> partitionBy, SortDefinition`1<TInput> sortBy, AggregateExpressionDefinition`2<ISetWindowFieldsPartition`1<TInput>, TWindowFields> output);
    public static PipelineStageDefinition`2<TInput, BsonDocument> SetWindowFields(Expression`1<Func`2<ISetWindowFieldsPartition`1<TInput>, TWindowFields>> output, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, BsonDocument> SetWindowFields(Expression`1<Func`2<TInput, TPartitionBy>> partitionBy, Expression`1<Func`2<ISetWindowFieldsPartition`1<TInput>, TWindowFields>> output, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, BsonDocument> SetWindowFields(Expression`1<Func`2<TInput, TPartitionBy>> partitionBy, SortDefinition`1<TInput> sortBy, Expression`1<Func`2<ISetWindowFieldsPartition`1<TInput>, TWindowFields>> output, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TInput> Skip(long skip);
    public static PipelineStageDefinition`2<TInput, TInput> Sort(SortDefinition`1<TInput> sort);
    public static PipelineStageDefinition`2<TInput, TInput> Sample(long size);
    public static PipelineStageDefinition`2<TInput, AggregateSortByCountResult`1<TValue>> SortByCount(AggregateExpressionDefinition`2<TInput, TValue> value);
    public static PipelineStageDefinition`2<TInput, AggregateSortByCountResult`1<TValue>> SortByCount(Expression`1<Func`2<TInput, TValue>> value, ExpressionTranslationOptions translationOptions);
    public static PipelineStageDefinition`2<TInput, TInput> UnionWith(IMongoCollection`1<TWith> withCollection, PipelineDefinition`2<TWith, TInput> withPipeline);
    public static PipelineStageDefinition`2<TInput, TOutput> Unwind(FieldDefinition`1<TInput> field, AggregateUnwindOptions`1<TOutput> options);
    public static PipelineStageDefinition`2<TInput, BsonDocument> Unwind(FieldDefinition`1<TInput> field, AggregateUnwindOptions`1<BsonDocument> options);
    public static PipelineStageDefinition`2<TInput, BsonDocument> Unwind(Expression`1<Func`2<TInput, object>> field, AggregateUnwindOptions`1<BsonDocument> options);
    public static PipelineStageDefinition`2<TInput, TOutput> Unwind(Expression`1<Func`2<TInput, object>> field, AggregateUnwindOptions`1<TOutput> options);
    public static PipelineStageDefinition`2<TInput, TInput> VectorSearch(Expression`1<Func`2<TInput, TField>> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TInput> options);
    public static PipelineStageDefinition`2<TInput, TInput> VectorSearch(FieldDefinition`1<TInput> field, QueryVector queryVector, int limit, VectorSearchOptions`1<TInput> options);
    private static bool AreGraphLookupFromAndToTypesCompatible();
}
public class MongoDB.Driver.PipelineStagePipelineDefinition`2 : PipelineDefinition`2<TInput, TOutput> {
    private IList`1<IPipelineStageDefinition> _stages;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    [ObsoleteAttribute("Use OutputSerializer instead.")]
public IBsonSerializer`1<TOutput> Serializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public PipelineStagePipelineDefinition`2(IEnumerable`1<IPipelineStageDefinition> stages, IBsonSerializer`1<TOutput> outputSerializer);
    public virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public IBsonSerializer`1<TOutput> get_Serializer();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
    private static List`1<IPipelineStageDefinition> VerifyStages(List`1<IPipelineStageDefinition> stages);
}
public class MongoDB.Driver.PipelineUpdateDefinition`1 : UpdateDefinition`1<TDocument> {
    private PipelineDefinition`2<TDocument, TDocument> _pipeline;
    public PipelineDefinition`2<TDocument, TDocument> Pipeline { get; }
    public PipelineUpdateDefinition`1(PipelineDefinition`2<TDocument, TDocument> pipeline);
    public PipelineDefinition`2<TDocument, TDocument> get_Pipeline();
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
    public virtual string ToString();
    public string ToString(IBsonSerializer`1<TDocument> inputSerializer, IBsonSerializerRegistry serializerRegistry);
    public string ToString(IBsonSerializer`1<TDocument> inputSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
}
internal class MongoDB.Driver.PositionalOperatorProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private FieldDefinition`1<TSource> _field;
    public PositionalOperatorProjectionDefinition`1(FieldDefinition`1<TSource> field);
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
public class MongoDB.Driver.PositionDocumentsWindowBoundary : DocumentsWindowBoundary {
    private int _position;
    public int Position { get; }
    internal PositionDocumentsWindowBoundary(int position);
    public int get_Position();
    public virtual string ToString();
    internal virtual BsonValue Render();
}
public class MongoDB.Driver.PrependedStagePipelineDefinition`3 : PipelineDefinition`2<TInput, TOutput> {
    private IBsonSerializer`1<TOutput> _outputSerializer;
    private PipelineDefinition`2<TIntermediate, TOutput> _pipeline;
    private PipelineStageDefinition`2<TInput, TIntermediate> _stage;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public PrependedStagePipelineDefinition`3(PipelineStageDefinition`2<TInput, TIntermediate> stage, PipelineDefinition`2<TIntermediate, TOutput> pipeline, IBsonSerializer`1<TOutput> outputSerializer);
    public virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public abstract class MongoDB.Driver.ProjectionDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonDocument Render(RenderArgs`1<TSource> args);
    public static ProjectionDefinition`1<TSource> op_Implicit(BsonDocument document);
    public static ProjectionDefinition`1<TSource> op_Implicit(string json);
}
public abstract class MongoDB.Driver.ProjectionDefinition`2 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual RenderedProjectionDefinition`1<TProjection> Render(IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual RenderedProjectionDefinition`1<TProjection> Render(IBsonSerializer`1<TSource> sourceSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual RenderedProjectionDefinition`1<TProjection> Render(RenderArgs`1<TSource> args);
    public static ProjectionDefinition`2<TSource, TProjection> op_Implicit(BsonDocument document);
    public static ProjectionDefinition`2<TSource, TProjection> op_Implicit(string json);
    public static ProjectionDefinition`2<TSource, TProjection> op_Implicit(ProjectionDefinition`1<TSource> projection);
}
public class MongoDB.Driver.ProjectionDefinitionBuilder`1 : object {
    public ProjectionDefinition`2<TSource, TProjection> As(IBsonSerializer`1<TProjection> projectionSerializer);
    public ProjectionDefinition`1<TSource> Combine(ProjectionDefinition`1[] projections);
    public ProjectionDefinition`1<TSource> Combine(IEnumerable`1<ProjectionDefinition`1<TSource>> projections);
    public ProjectionDefinition`1<TSource> ElemMatch(FieldDefinition`1<TSource> field, FilterDefinition`1<TItem> filter);
    public ProjectionDefinition`1<TSource> ElemMatch(Expression`1<Func`2<TSource, IEnumerable`1<TItem>>> field, FilterDefinition`1<TItem> filter);
    public ProjectionDefinition`1<TSource> ElemMatch(Expression`1<Func`2<TSource, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TItem, bool>> filter);
    public ProjectionDefinition`1<TSource> Exclude(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> Exclude(Expression`1<Func`2<TSource, object>> field);
    public ProjectionDefinition`2<TSource, TProjection> Expression(Expression`1<Func`2<TSource, TProjection>> expression);
    public ProjectionDefinition`1<TSource> Include(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> Include(Expression`1<Func`2<TSource, object>> field);
    public ProjectionDefinition`1<TSource> Meta(FieldDefinition`1<TSource> field, string metaFieldName);
    public ProjectionDefinition`1<TSource> MetaSearchHighlights(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> MetaSearchHighlights(Expression`1<Func`2<TSource, TField>> field);
    public ProjectionDefinition`1<TSource> MetaSearchScore(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> MetaSearchScore(Expression`1<Func`2<TSource, TField>> field);
    public ProjectionDefinition`1<TSource> MetaSearchScoreDetails(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> MetaSearchScoreDetails(Expression`1<Func`2<TSource, TField>> field);
    public ProjectionDefinition`1<TSource> MetaTextScore(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> MetaTextScore(Expression`1<Func`2<TSource, TField>> field);
    public ProjectionDefinition`1<TSource> MetaVectorSearchScore(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> MetaVectorSearchScore(Expression`1<Func`2<TSource, TField>> field);
    public ProjectionDefinition`1<TSource> SearchMeta(FieldDefinition`1<TSource> field);
    public ProjectionDefinition`1<TSource> SearchMeta(Expression`1<Func`2<TSource, object>> field);
    public ProjectionDefinition`1<TSource> Slice(FieldDefinition`1<TSource> field, int limit);
    public ProjectionDefinition`1<TSource> Slice(FieldDefinition`1<TSource> field, int skip, int limit);
    public ProjectionDefinition`1<TSource> Slice(Expression`1<Func`2<TSource, object>> field, int limit);
    public ProjectionDefinition`1<TSource> Slice(Expression`1<Func`2<TSource, object>> field, int skip, int limit);
}
[ExtensionAttribute]
public static class MongoDB.Driver.ProjectionDefinitionExtensions : object {
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> ElemMatch(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field, FilterDefinition`1<TItem> filter);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> ElemMatch(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TItem> filter);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> ElemMatch(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TItem, bool>> filter);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Exclude(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Exclude(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Include(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Include(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Meta(ProjectionDefinition`1<TDocument> projection, string field, string metaFieldName);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaSearchHighlights(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaSearchHighlights(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaSearchScore(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaSearchScore(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaSearchScoreDetails(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaSearchScoreDetails(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaTextScore(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaTextScore(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaVectorSearchScore(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> MetaVectorSearchScore(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> SearchMeta(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> SearchMeta(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Slice(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field, int limit);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Slice(ProjectionDefinition`1<TDocument> projection, FieldDefinition`1<TDocument> field, int skip, int limit);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Slice(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field, int limit);
    [ExtensionAttribute]
public static ProjectionDefinition`1<TDocument> Slice(ProjectionDefinition`1<TDocument> projection, Expression`1<Func`2<TDocument, object>> field, int skip, int limit);
}
internal class MongoDB.Driver.PullUpdateDefinition`2 : UpdateDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private FilterDefinition`1<TItem> _filter;
    private List`1<TItem> _values;
    public PullUpdateDefinition`2(FieldDefinition`1<TDocument> field, FilterDefinition`1<TItem> filter);
    public PullUpdateDefinition`2(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.PushUpdateDefinition`2 : UpdateDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private Nullable`1<int> _position;
    private Nullable`1<int> _slice;
    private SortDefinition`1<TItem> _sort;
    private List`1<TItem> _values;
    public PushUpdateDefinition`2(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values, Nullable`1<int> slice, Nullable`1<int> position, SortDefinition`1<TItem> sort);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.QueryVector : object {
    [CompilerGeneratedAttribute]
private BsonArray <Array>k__BackingField;
    internal BsonArray Array { get; }
    private QueryVector(BsonArray array);
    public QueryVector(ReadOnlyMemory`1<double> readOnlyMemory);
    public QueryVector(ReadOnlyMemory`1<float> readOnlyMemory);
    public QueryVector(ReadOnlyMemory`1<int> readOnlyMemory);
    [CompilerGeneratedAttribute]
internal BsonArray get_Array();
    public static QueryVector op_Implicit(Double[] array);
    public static QueryVector op_Implicit(ReadOnlyMemory`1<double> readOnlyMemory);
    public static QueryVector op_Implicit(Single[] array);
    public static QueryVector op_Implicit(ReadOnlyMemory`1<float> readOnlyMemory);
    public static QueryVector op_Implicit(Int32[] array);
    public static QueryVector op_Implicit(ReadOnlyMemory`1<int> readOnlyMemory);
}
internal class MongoDB.Driver.QueryVectorArraySerializer`1 : BsonValueSerializerBase`1<QueryVectorBsonArray`1<T>> {
    protected virtual QueryVectorBsonArray`1<T> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, QueryVectorBsonArray`1<T> value);
}
[BsonSerializerAttribute("MongoDB.Driver.QueryVectorArraySerializer`1")]
internal class MongoDB.Driver.QueryVectorBsonArray`1 : BsonArray {
    private ReadOnlyMemory`1<T> _memory;
    public int Count { get; }
    public ReadOnlySpan`1<T> Span { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public QueryVectorBsonArray`1(ReadOnlyMemory`1<T> memory);
    public virtual int get_Count();
    public ReadOnlySpan`1<T> get_Span();
    [IteratorStateMachineAttribute("MongoDB.Driver.QueryVectorBsonArray`1/<get_Values>d__7")]
public virtual IEnumerable`1<BsonValue> get_Values();
}
public class MongoDB.Driver.RangeWindow : SetWindowFieldsWindow {
    private static KeywordRangeWindowBoundary __current;
    private static KeywordRangeWindowBoundary __unbounded;
    private RangeWindowBoundary _lowerBoundary;
    private RangeWindowBoundary _upperBoundary;
    private string _unit;
    public static KeywordRangeWindowBoundary Current { get; }
    public static KeywordRangeWindowBoundary Unbounded { get; }
    public RangeWindowBoundary LowerBoundary { get; }
    public RangeWindowBoundary UpperBoundary { get; }
    internal RangeWindow(RangeWindowBoundary lowerBoundary, RangeWindowBoundary upperBoundary);
    private static RangeWindow();
    public static KeywordRangeWindowBoundary get_Current();
    public static KeywordRangeWindowBoundary get_Unbounded();
    public static RangeWindow Create(TValue lowerBoundary, TValue upperBoundary);
    public static RangeWindow Create(TValue lowerBoundary, KeywordRangeWindowBoundary upperBoundary);
    public static RangeWindow Create(KeywordRangeWindowBoundary lowerBoundary, TValue upperBoundary);
    public static RangeWindow Create(TimeRangeWindowBoundary lowerBoundary, TimeRangeWindowBoundary upperBoundary);
    public static RangeWindow Create(TimeRangeWindowBoundary lowerBoundary, KeywordRangeWindowBoundary upperBoundary);
    public static RangeWindow Create(KeywordRangeWindowBoundary lowerBoundary, TimeRangeWindowBoundary upperBoundary);
    public static RangeWindow Create(KeywordRangeWindowBoundary lowerBoundary, KeywordRangeWindowBoundary upperBoundary);
    public static TimeRangeWindowBoundary Days(int value);
    public static TimeRangeWindowBoundary Hours(int value);
    public static TimeRangeWindowBoundary Milliseconds(int value);
    public static TimeRangeWindowBoundary Minutes(int value);
    public static TimeRangeWindowBoundary Months(int value);
    public static TimeRangeWindowBoundary Quarters(int value);
    public static TimeRangeWindowBoundary Seconds(int value);
    public static TimeRangeWindowBoundary Weeks(int value);
    public static TimeRangeWindowBoundary Years(int value);
    public RangeWindowBoundary get_LowerBoundary();
    public RangeWindowBoundary get_UpperBoundary();
    public virtual string ToString();
}
public abstract class MongoDB.Driver.RangeWindowBoundary : object {
    internal abstract virtual BsonValue Render(IBsonSerializer valueSerializer);
}
internal static class MongoDB.Driver.ReadPreferenceResolver : object {
    public static ReadPreference GetEffectiveReadPreference(IClientSessionHandle session, ReadPreference explicitReadPreference, ReadPreference defaultReadPreference);
}
public class MongoDB.Driver.RenameCollectionOptions : object {
    private Nullable`1<bool> _dropTarget;
    public Nullable`1<bool> DropTarget { get; public set; }
    public Nullable`1<bool> get_DropTarget();
    public void set_DropTarget(Nullable`1<bool> value);
}
public class MongoDB.Driver.RenderArgs`1 : ValueType {
    private IBsonSerializer`1<TDocument> _documentSerializer;
    private bool _renderForFind;
    private LinqProvider _linqProvider;
    private PathRenderArgs _pathRenderArgs;
    private bool _renderDollarForm;
    private IBsonSerializerRegistry _serializerRegistry;
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; public set; }
    public bool RenderForFind { get; public set; }
    public LinqProvider LinqProvider { get; public set; }
    public PathRenderArgs PathRenderArgs { get; public set; }
    public bool RenderDollarForm { get; public set; }
    public IBsonSerializerRegistry SerializerRegistry { get; public set; }
    public RenderArgs`1(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider, PathRenderArgs pathRenderArgs, bool renderDollarForm, bool renderForFind);
    [IsReadOnlyAttribute]
public IBsonSerializer`1<TDocument> get_DocumentSerializer();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DocumentSerializer(IBsonSerializer`1<TDocument> value);
    [IsReadOnlyAttribute]
public bool get_RenderForFind();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RenderForFind(bool value);
    [IsReadOnlyAttribute]
public LinqProvider get_LinqProvider();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LinqProvider(LinqProvider value);
    [IsReadOnlyAttribute]
public PathRenderArgs get_PathRenderArgs();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PathRenderArgs(PathRenderArgs value);
    [IsReadOnlyAttribute]
public bool get_RenderDollarForm();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RenderDollarForm(bool value);
    [IsReadOnlyAttribute]
public IBsonSerializerRegistry get_SerializerRegistry();
    public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SerializerRegistry(IBsonSerializerRegistry value);
    [IsReadOnlyAttribute]
public IBsonSerializer`1<T> GetSerializer();
    [IsReadOnlyAttribute]
public RenderArgs`1<TNewDocument> WithNewDocumentType(IBsonSerializer`1<TNewDocument> serializer);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RenderArgs`1<TDocument> left, RenderArgs`1<TDocument> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RenderArgs`1<TDocument> left, RenderArgs`1<TDocument> right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RenderArgs`1<TDocument> other);
}
public class MongoDB.Driver.RenderedCommand`1 : object {
    private BsonDocument _document;
    private IBsonSerializer`1<TResult> _resultSerializer;
    public BsonDocument Document { get; }
    public IBsonSerializer`1<TResult> ResultSerializer { get; }
    public RenderedCommand`1(BsonDocument document, IBsonSerializer`1<TResult> resultSerializer);
    public BsonDocument get_Document();
    public IBsonSerializer`1<TResult> get_ResultSerializer();
}
public class MongoDB.Driver.RenderedFieldDefinition : object {
    private string _fieldName;
    private IBsonSerializer _fieldSerializer;
    public string FieldName { get; }
    public IBsonSerializer FieldSerializer { get; }
    public RenderedFieldDefinition(string fieldName, IBsonSerializer fieldSerializer);
    public string get_FieldName();
    public IBsonSerializer get_FieldSerializer();
}
public class MongoDB.Driver.RenderedFieldDefinition`1 : object {
    private string _fieldName;
    private IBsonSerializer`1<TField> _fieldSerializer;
    private IBsonSerializer _underlyingSerializer;
    private IBsonSerializer`1<TField> _valueSerializer;
    public string FieldName { get; }
    public IBsonSerializer`1<TField> FieldSerializer { get; }
    public IBsonSerializer UnderlyingSerializer { get; }
    public IBsonSerializer`1<TField> ValueSerializer { get; }
    [ObsoleteAttribute("Use the constructor that takes 4 arguments instead.")]
public RenderedFieldDefinition`1(string fieldName, IBsonSerializer`1<TField> fieldSerializer);
    public RenderedFieldDefinition`1(string fieldName, IBsonSerializer`1<TField> fieldSerializer, IBsonSerializer`1<TField> valueSerializer, IBsonSerializer underlyingSerializer);
    public string get_FieldName();
    public IBsonSerializer`1<TField> get_FieldSerializer();
    public IBsonSerializer get_UnderlyingSerializer();
    public IBsonSerializer`1<TField> get_ValueSerializer();
}
public class MongoDB.Driver.RenderedPipelineDefinition`1 : object {
    private List`1<BsonDocument> _documents;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public IList`1<BsonDocument> Documents { get; }
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public RenderedPipelineDefinition`1(IEnumerable`1<BsonDocument> documents, IBsonSerializer`1<TOutput> outputSerializer);
    public IList`1<BsonDocument> get_Documents();
    public IBsonSerializer`1<TOutput> get_OutputSerializer();
}
public class MongoDB.Driver.RenderedPipelineStageDefinition`1 : object {
    private string _operatorName;
    private IReadOnlyList`1<BsonDocument> _documents;
    private IBsonSerializer`1<TOutput> _outputSerializer;
    public BsonDocument Document { get; }
    public IReadOnlyList`1<BsonDocument> Documents { get; }
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public string OperatorName { get; }
    private IBsonSerializer MongoDB.Driver.IRenderedPipelineStageDefinition.OutputSerializer { get; }
    public RenderedPipelineStageDefinition`1(string operatorName, BsonDocument document, IBsonSerializer`1<TOutput> outputSerializer);
    public RenderedPipelineStageDefinition`1(string operatorName, IEnumerable`1<BsonDocument> documents, IBsonSerializer`1<TOutput> outputSerializer);
    public sealed virtual BsonDocument get_Document();
    public sealed virtual IReadOnlyList`1<BsonDocument> get_Documents();
    public IBsonSerializer`1<TOutput> get_OutputSerializer();
    public sealed virtual string get_OperatorName();
    private sealed virtual override IBsonSerializer MongoDB.Driver.IRenderedPipelineStageDefinition.get_OutputSerializer();
}
public class MongoDB.Driver.RenderedProjectionDefinition`1 : object {
    private BsonDocument _projection;
    private IBsonSerializer`1<TProjection> _projectionSerializer;
    public BsonDocument Document { get; }
    public IBsonSerializer`1<TProjection> ProjectionSerializer { get; }
    public RenderedProjectionDefinition`1(BsonDocument document, IBsonSerializer`1<TProjection> projectionSerializer);
    public BsonDocument get_Document();
    public IBsonSerializer`1<TProjection> get_ProjectionSerializer();
}
public class MongoDB.Driver.ReplaceOneModel`1 : WriteModel`1<TDocument> {
    private Collation _collation;
    private FilterDefinition`1<TDocument> _filter;
    private BsonValue _hint;
    private bool _isUpsert;
    private TDocument _replacement;
    public Collation Collation { get; public set; }
    public FilterDefinition`1<TDocument> Filter { get; }
    public BsonValue Hint { get; public set; }
    public bool IsUpsert { get; public set; }
    public TDocument Replacement { get; }
    public WriteModelType ModelType { get; }
    public ReplaceOneModel`1(FilterDefinition`1<TDocument> filter, TDocument replacement);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public FilterDefinition`1<TDocument> get_Filter();
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public TDocument get_Replacement();
    public virtual WriteModelType get_ModelType();
}
public abstract class MongoDB.Driver.ReplaceOneResult : object {
    public bool IsAcknowledged { get; }
    public bool IsModifiedCountAvailable { get; }
    public long MatchedCount { get; }
    public long ModifiedCount { get; }
    public BsonValue UpsertedId { get; }
    internal static ReplaceOneResult FromCore(BulkWriteResult result);
    public abstract virtual bool get_IsAcknowledged();
    public abstract virtual bool get_IsModifiedCountAvailable();
    public abstract virtual long get_MatchedCount();
    public abstract virtual long get_ModifiedCount();
    public abstract virtual BsonValue get_UpsertedId();
}
public class MongoDB.Driver.ReplaceOptions : object {
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private bool _isUpsert;
    private BsonDocument _let;
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public bool IsUpsert { get; public set; }
    public BsonDocument Let { get; public set; }
    internal static ReplaceOptions From(UpdateOptions updateOptions);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
}
public class MongoDB.Driver.ReplaceOutputSerializerPipelineDefinition`3 : PipelineDefinition`2<TInput, TOutput> {
    private IBsonSerializer`1<TOutput> _outputSerializer;
    private PipelineDefinition`2<TInput, TIntermediate> _pipeline;
    public IBsonSerializer`1<TOutput> OutputSerializer { get; }
    public IEnumerable`1<IPipelineStageDefinition> Stages { get; }
    public ReplaceOutputSerializerPipelineDefinition`3(PipelineDefinition`2<TInput, TIntermediate> pipeline, IBsonSerializer`1<TOutput> outputSerializer);
    public virtual IBsonSerializer`1<TOutput> get_OutputSerializer();
    public virtual IEnumerable`1<IPipelineStageDefinition> get_Stages();
    public virtual RenderedPipelineDefinition`1<TOutput> Render(RenderArgs`1<TInput> args);
}
public enum MongoDB.Driver.ReturnDocument : Enum {
    public int value__;
    public static ReturnDocument Before;
    public static ReturnDocument After;
}
[ExtensionAttribute]
internal static class MongoDB.Driver.ReturnDocumentExtensions : object {
    [ExtensionAttribute]
public static ReturnDocument ToCore(ReturnDocument returnDocument);
}
internal class MongoDB.Driver.ScalarElementMatchFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private FilterDefinition`1<TDocument> _elementMatchFilter;
    public ScalarElementMatchFilterDefinition`1(FilterDefinition`1<TDocument> elementMatchFilter);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    private static void Compress(BsonDocument elemMatch);
}
internal class MongoDB.Driver.Search.AnalyzerSearchPathDefinition`1 : SearchPathDefinition`1<TDocument> {
    private string _analyzerName;
    private FieldDefinition`1<TDocument> _field;
    public AnalyzerSearchPathDefinition`1(FieldDefinition`1<TDocument> field, string analyzerName);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.ArithmeticSearchScoreFunction`1 : SearchScoreFunction`1<TDocument> {
    private SearchScoreFunction`1[] _operands;
    private string _operatorName;
    public ArithmeticSearchScoreFunction`1(string operatorName, IEnumerable`1<SearchScoreFunction`1<TDocument>> operands);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.AutocompleteSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private SearchFuzzyOptions _fuzzy;
    private SearchQueryDefinition _query;
    private SearchAutocompleteTokenOrder _tokenOrder;
    public AutocompleteSearchDefinition`1(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, SearchAutocompleteTokenOrder tokenOrder, SearchFuzzyOptions fuzzy, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
    [CompilerGeneratedAttribute]
private BsonValue <RenderArguments>b__4_0();
}
internal class MongoDB.Driver.Search.BoostPathSearchScoreDefinition`1 : SearchScoreDefinition`1<TDocument> {
    private SearchPathDefinition`1<TDocument> _path;
    private double _undefined;
    public BoostPathSearchScoreDefinition`1(SearchPathDefinition`1<TDocument> path, double undefined);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.BoostValueSearchScoreDefinition`1 : SearchScoreDefinition`1<TDocument> {
    private double _value;
    public BoostValueSearchScoreDefinition`1(double value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.BsonDocumentSearchDefinition`1 : SearchDefinition`1<TDocument> {
    [CompilerGeneratedAttribute]
private BsonDocument <Document>k__BackingField;
    public BsonDocument Document { get; private set; }
    public BsonDocumentSearchDefinition`1(BsonDocument document);
    [CompilerGeneratedAttribute]
public BsonDocument get_Document();
    [CompilerGeneratedAttribute]
private void set_Document(BsonDocument value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.CompoundSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private List`1<SearchDefinition`1<TDocument>> _filter;
    private int _minimumShouldMatch;
    private List`1<SearchDefinition`1<TDocument>> _must;
    private List`1<SearchDefinition`1<TDocument>> _mustNot;
    private List`1<SearchDefinition`1<TDocument>> _should;
    public CompoundSearchDefinition`1(List`1<SearchDefinition`1<TDocument>> must, List`1<SearchDefinition`1<TDocument>> mustNot, List`1<SearchDefinition`1<TDocument>> should, List`1<SearchDefinition`1<TDocument>> filter, int minimumShouldMatch, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.CompoundSearchDefinitionBuilder`1 : object {
    private List`1<SearchDefinition`1<TDocument>> _must;
    private List`1<SearchDefinition`1<TDocument>> _mustNot;
    private List`1<SearchDefinition`1<TDocument>> _should;
    private List`1<SearchDefinition`1<TDocument>> _filter;
    private int _minimumShouldMatch;
    private SearchScoreDefinition`1<TDocument> _score;
    public CompoundSearchDefinitionBuilder`1(SearchScoreDefinition`1<TDocument> score);
    public CompoundSearchDefinitionBuilder`1<TDocument> Must(IEnumerable`1<SearchDefinition`1<TDocument>> clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> Must(SearchDefinition`1[] clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> MustNot(IEnumerable`1<SearchDefinition`1<TDocument>> clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> MustNot(SearchDefinition`1[] clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> Should(IEnumerable`1<SearchDefinition`1<TDocument>> clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> Should(SearchDefinition`1[] clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> Filter(IEnumerable`1<SearchDefinition`1<TDocument>> clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> Filter(SearchDefinition`1[] clauses);
    public CompoundSearchDefinitionBuilder`1<TDocument> MinimumShouldMatch(int minimumShouldMatch);
    public SearchDefinition`1<TDocument> ToSearchDefinition();
    public static SearchDefinition`1<TDocument> op_Implicit(CompoundSearchDefinitionBuilder`1<TDocument> builder);
    private CompoundSearchDefinitionBuilder`1<TDocument> AddClauses(List`1& clauses, IEnumerable`1<SearchDefinition`1<TDocument>> newClauses);
}
internal class MongoDB.Driver.Search.ConstantSearchScoreDefinition`1 : SearchScoreDefinition`1<TDocument> {
    private double _value;
    public ConstantSearchScoreDefinition`1(double value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.ConstantSearchScoreFunction`1 : SearchScoreFunction`1<TDocument> {
    private double _value;
    public ConstantSearchScoreFunction`1(double value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.DateSearchFacet`1 : SearchFacet`1<TDocument> {
    private DateTime[] _boundaries;
    private string _default;
    private SearchPathDefinition`1<TDocument> _path;
    public DateSearchFacet`1(string name, SearchPathDefinition`1<TDocument> path, IEnumerable`1<DateTime> boundaries, string default);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.EmbeddedDocumentSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private SearchDefinition`1<TField> _operator;
    public EmbeddedDocumentSearchDefinition`2(FieldDefinition`2<TDocument, IEnumerable`1<TField>> path, SearchDefinition`1<TField> operator, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.EqualsSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private BsonValue _value;
    public EqualsSearchDefinition`2(FieldDefinition`1<TDocument> path, TField value, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
    private static BsonValue ToBsonValue(TField value);
}
internal class MongoDB.Driver.Search.ExistsSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    public ExistsSearchDefinition`1(FieldDefinition`1<TDocument> path);
}
internal class MongoDB.Driver.Search.FacetSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private SearchFacet`1[] _facets;
    private SearchDefinition`1<TDocument> _operator;
    public FacetSearchDefinition`1(SearchDefinition`1<TDocument> operator, IEnumerable`1<SearchFacet`1<TDocument>> facets);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.FirstSearchSpanDefinition`1 : SearchSpanDefinition`1<TDocument> {
    private int _endPositionLte;
    private SearchSpanDefinition`1<TDocument> _operator;
    public FirstSearchSpanDefinition`1(SearchSpanDefinition`1<TDocument> operator, int endPositionLte);
    private protected virtual BsonDocument RenderClause(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.FunctionSearchScoreDefinition`1 : SearchScoreDefinition`1<TDocument> {
    private SearchScoreFunction`1<TDocument> _function;
    public FunctionSearchScoreDefinition`1(SearchScoreFunction`1<TDocument> function);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.GaussSearchScoreFunction`1 : SearchScoreFunction`1<TDocument> {
    private double _decay;
    private double _offset;
    private double _origin;
    private SearchPathDefinition`1<TDocument> _path;
    private double _scale;
    public GaussSearchScoreFunction`1(SearchPathDefinition`1<TDocument> path, double origin, double scale, double decay, double offset);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public enum MongoDB.Driver.Search.GeoShapeRelation : Enum {
    public int value__;
    public static GeoShapeRelation Contains;
    public static GeoShapeRelation Disjoint;
    public static GeoShapeRelation Intersects;
    public static GeoShapeRelation Within;
}
internal class MongoDB.Driver.Search.GeoShapeSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private GeoJsonGeometry`1<TCoordinates> _geometry;
    private GeoShapeRelation _relation;
    public GeoShapeSearchDefinition`2(SearchPathDefinition`1<TDocument> path, GeoShapeRelation relation, GeoJsonGeometry`1<TCoordinates> geometry, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
public abstract class MongoDB.Driver.Search.GeoWithinArea`1 : object {
    internal abstract virtual BsonElement Render();
}
public class MongoDB.Driver.Search.GeoWithinBox`1 : GeoWithinArea`1<TCoordinates> {
    [CompilerGeneratedAttribute]
private GeoJsonPoint`1<TCoordinates> <BottomLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private GeoJsonPoint`1<TCoordinates> <TopRight>k__BackingField;
    public GeoJsonPoint`1<TCoordinates> BottomLeft { get; }
    public GeoJsonPoint`1<TCoordinates> TopRight { get; }
    public GeoWithinBox`1(GeoJsonPoint`1<TCoordinates> bottomLeft, GeoJsonPoint`1<TCoordinates> topRight);
    [CompilerGeneratedAttribute]
public GeoJsonPoint`1<TCoordinates> get_BottomLeft();
    [CompilerGeneratedAttribute]
public GeoJsonPoint`1<TCoordinates> get_TopRight();
    internal virtual BsonElement Render();
}
public class MongoDB.Driver.Search.GeoWithinCircle`1 : GeoWithinArea`1<TCoordinates> {
    [CompilerGeneratedAttribute]
private GeoJsonPoint`1<TCoordinates> <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public GeoJsonPoint`1<TCoordinates> Center { get; }
    public double Radius { get; }
    public GeoWithinCircle`1(GeoJsonPoint`1<TCoordinates> center, double radius);
    [CompilerGeneratedAttribute]
public GeoJsonPoint`1<TCoordinates> get_Center();
    [CompilerGeneratedAttribute]
public double get_Radius();
    internal virtual BsonElement Render();
}
public class MongoDB.Driver.Search.GeoWithinGeometry`1 : GeoWithinArea`1<TCoordinates> {
    [CompilerGeneratedAttribute]
private GeoJsonGeometry`1<TCoordinates> <Geometry>k__BackingField;
    public GeoJsonGeometry`1<TCoordinates> Geometry { get; }
    public GeoWithinGeometry`1(GeoJsonGeometry`1<TCoordinates> geometry);
    [CompilerGeneratedAttribute]
public GeoJsonGeometry`1<TCoordinates> get_Geometry();
    internal virtual BsonElement Render();
}
internal class MongoDB.Driver.Search.GeoWithinSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private GeoWithinArea`1<TCoordinates> _area;
    public GeoWithinSearchDefinition`2(SearchPathDefinition`1<TDocument> path, GeoWithinArea`1<TCoordinates> area, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
public enum MongoDB.Driver.Search.HighlightTextType : Enum {
    public int value__;
    public static HighlightTextType Hit;
    public static HighlightTextType Text;
}
public interface MongoDB.Driver.Search.IMongoSearchIndexManager {
    public abstract virtual IEnumerable`1<string> CreateMany(IEnumerable`1<CreateSearchIndexModel> models, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> CreateManyAsync(IEnumerable`1<CreateSearchIndexModel> models, CancellationToken cancellationToken);
    public abstract virtual string CreateOne(BsonDocument definition, string name, CancellationToken cancellationToken);
    public abstract virtual string CreateOne(CreateSearchIndexModel model, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> CreateOneAsync(BsonDocument definition, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> CreateOneAsync(CreateSearchIndexModel model, CancellationToken cancellationToken);
    public abstract virtual void DropOne(string name, CancellationToken cancellationToken);
    public abstract virtual Task DropOneAsync(string name, CancellationToken cancellationToken);
    public abstract virtual IAsyncCursor`1<BsonDocument> List(string name, AggregateOptions aggregateOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<IAsyncCursor`1<BsonDocument>> ListAsync(string name, AggregateOptions aggregateOptions, CancellationToken cancellationToken);
    public abstract virtual void Update(string name, BsonDocument definition, CancellationToken cancellationToken);
    public abstract virtual Task UpdateAsync(string name, BsonDocument definition, CancellationToken cancellationToken);
}
internal class MongoDB.Driver.Search.InSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private BsonArray _values;
    public InSearchDefinition`2(SearchPathDefinition`1<TDocument> path, IEnumerable`1<TField> values, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
    private static BsonValue ToBsonValue(TField value);
}
public class MongoDB.Driver.Search.JsonSearchDefinition`1 : SearchDefinition`1<TDocument> {
    [CompilerGeneratedAttribute]
private string <Json>k__BackingField;
    public string Json { get; private set; }
    public JsonSearchDefinition`1(string json);
    [CompilerGeneratedAttribute]
public string get_Json();
    [CompilerGeneratedAttribute]
private void set_Json(string value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.MoreLikeThisSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private TLike[] _like;
    public MoreLikeThisSearchDefinition`2(IEnumerable`1<TLike> like);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.MultiSearchPathDefinition`1 : SearchPathDefinition`1<TDocument> {
    private FieldDefinition`1[] _fields;
    public MultiSearchPathDefinition`1(IEnumerable`1<FieldDefinition`1<TDocument>> fields);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.MultiSearchQueryDefinition : SearchQueryDefinition {
    private String[] _queries;
    public MultiSearchQueryDefinition(IEnumerable`1<string> queries);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Search.NearSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private BsonValue _origin;
    private BsonValue _pivot;
    public NearSearchDefinition`1(SearchPathDefinition`1<TDocument> path, BsonValue origin, BsonValue pivot, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.NearSearchSpanDefinition`1 : SearchSpanDefinition`1<TDocument> {
    private List`1<SearchSpanDefinition`1<TDocument>> _clauses;
    private bool _inOrder;
    private int _slop;
    public NearSearchSpanDefinition`1(IEnumerable`1<SearchSpanDefinition`1<TDocument>> clauses, int slop, bool inOrder);
    private protected virtual BsonDocument RenderClause(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.NumberSearchFacet`1 : SearchFacet`1<TDocument> {
    private BsonValue[] _boundaries;
    private string _default;
    private SearchPathDefinition`1<TDocument> _path;
    public NumberSearchFacet`1(string name, SearchPathDefinition`1<TDocument> path, IEnumerable`1<BsonValue> boundaries, string default);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal abstract class MongoDB.Driver.Search.OperatorSearchDefinition`1 : SearchDefinition`1<TDocument> {
    private OperatorType<TDocument> _operatorType;
    protected SearchPathDefinition`1<TDocument> _path;
    protected SearchScoreDefinition`1<TDocument> _score;
    private protected OperatorSearchDefinition`1(OperatorType<TDocument> operatorType);
    private protected OperatorSearchDefinition`1(OperatorType<TDocument> operatorType, SearchScoreDefinition`1<TDocument> score);
    private protected OperatorSearchDefinition`1(OperatorType<TDocument> operatorType, SearchPathDefinition`1<TDocument> path, SearchScoreDefinition`1<TDocument> score);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.OrSearchSpanDefinition`1 : SearchSpanDefinition`1<TDocument> {
    private List`1<SearchSpanDefinition`1<TDocument>> _clauses;
    public OrSearchSpanDefinition`1(IEnumerable`1<SearchSpanDefinition`1<TDocument>> clauses);
    private protected virtual BsonDocument RenderClause(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.PathSearchScoreFunction`1 : SearchScoreFunction`1<TDocument> {
    private SearchPathDefinition`1<TDocument> _path;
    private double _undefined;
    public PathSearchScoreFunction`1(SearchPathDefinition`1<TDocument> path, double undefined);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.PhraseSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private SearchQueryDefinition _query;
    private Nullable`1<int> _slop;
    public PhraseSearchDefinition`1(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, Nullable`1<int> slop, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.QueryStringSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private SingleSearchPathDefinition`1<TDocument> _defaultPath;
    private string _query;
    public QueryStringSearchDefinition`1(FieldDefinition`1<TDocument> defaultPath, string query, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.RangeSearchDefinition`2 : OperatorSearchDefinition`1<TDocument> {
    private SearchRange`1<TField> _range;
    private BsonValue _min;
    private BsonValue _max;
    public RangeSearchDefinition`2(SearchPathDefinition`1<TDocument> path, SearchRange`1<TField> range, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
    private static BsonValue ToBsonValue(Nullable`1<TField> value);
}
internal class MongoDB.Driver.Search.RegexSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private bool _allowAnalyzedField;
    private SearchQueryDefinition _query;
    public RegexSearchDefinition`1(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, bool allowAnalyzedField, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.RelevanceSearchScoreFunction`1 : SearchScoreFunction`1<TDocument> {
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public enum MongoDB.Driver.Search.SearchAutocompleteTokenOrder : Enum {
    public int value__;
    public static SearchAutocompleteTokenOrder Any;
    public static SearchAutocompleteTokenOrder Sequential;
}
public class MongoDB.Driver.Search.SearchCountOptions : object {
    private Nullable`1<int> _threshold;
    private SearchCountType _type;
    public Nullable`1<int> Threshold { get; public set; }
    public SearchCountType Type { get; public set; }
    public Nullable`1<int> get_Threshold();
    public void set_Threshold(Nullable`1<int> value);
    public SearchCountType get_Type();
    public void set_Type(SearchCountType value);
    internal BsonDocument Render();
}
public enum MongoDB.Driver.Search.SearchCountType : Enum {
    public int value__;
    public static SearchCountType LowerBound;
    public static SearchCountType Total;
}
public abstract class MongoDB.Driver.Search.SearchDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual BsonDocument Render(SearchDefinitionRenderContext`1<TDocument> renderContext);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    public static SearchDefinition`1<TDocument> op_Implicit(BsonDocument document);
    public static SearchDefinition`1<TDocument> op_Implicit(string json);
}
public class MongoDB.Driver.Search.SearchDefinitionBuilder`1 : object {
    public SearchDefinition`1<TDocument> Autocomplete(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, SearchAutocompleteTokenOrder tokenOrder, SearchFuzzyOptions fuzzy, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Autocomplete(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query, SearchAutocompleteTokenOrder tokenOrder, SearchFuzzyOptions fuzzy, SearchScoreDefinition`1<TDocument> score);
    public CompoundSearchDefinitionBuilder`1<TDocument> Compound(SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> EmbeddedDocument(FieldDefinition`2<TDocument, IEnumerable`1<TField>> path, SearchDefinition`1<TField> operator, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> EmbeddedDocument(Expression`1<Func`2<TDocument, IEnumerable`1<TField>>> path, SearchDefinition`1<TField> operator, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Equals(FieldDefinition`2<TDocument, TField> path, TField value, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Equals(Expression`1<Func`2<TDocument, TField>> path, TField value, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Exists(FieldDefinition`1<TDocument> path);
    public SearchDefinition`1<TDocument> Exists(Expression`1<Func`2<TDocument, TField>> path);
    public SearchDefinition`1<TDocument> Facet(SearchDefinition`1<TDocument> operator, IEnumerable`1<SearchFacet`1<TDocument>> facets);
    public SearchDefinition`1<TDocument> Facet(SearchDefinition`1<TDocument> operator, SearchFacet`1[] facets);
    public SearchDefinition`1<TDocument> GeoShape(SearchPathDefinition`1<TDocument> path, GeoShapeRelation relation, GeoJsonGeometry`1<TCoordinates> geometry, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> GeoShape(Expression`1<Func`2<TDocument, TField>> path, GeoShapeRelation relation, GeoJsonGeometry`1<TCoordinates> geometry, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> GeoWithin(SearchPathDefinition`1<TDocument> path, GeoJsonGeometry`1<TCoordinates> geometry, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> GeoWithin(Expression`1<Func`2<TDocument, TField>> path, GeoJsonGeometry`1<TCoordinates> geometry, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> GeoWithin(Expression`1<Func`2<TDocument, TField>> path, GeoWithinArea`1<TCoordinates> area, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> GeoWithin(SearchPathDefinition`1<TDocument> path, GeoWithinArea`1<TCoordinates> area, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> In(SearchPathDefinition`1<TDocument> path, IEnumerable`1<TField> values, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> In(Expression`1<Func`2<TDocument, TField>> path, IEnumerable`1<TField> values, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> MoreLikeThis(IEnumerable`1<TLike> like);
    public SearchDefinition`1<TDocument> MoreLikeThis(TLike[] like);
    public SearchDefinition`1<TDocument> Near(SearchPathDefinition`1<TDocument> path, double origin, double pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, TField>> path, double origin, double pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(SearchPathDefinition`1<TDocument> path, int origin, int pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, TField>> path, int origin, int pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(SearchPathDefinition`1<TDocument> path, long origin, long pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, TField>> path, long origin, long pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(SearchPathDefinition`1<TDocument> path, DateTime origin, long pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, TField>> path, DateTime origin, long pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(SearchPathDefinition`1<TDocument> path, GeoJsonPoint`1<TCoordinates> origin, double pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Near(Expression`1<Func`2<TDocument, TField>> path, GeoJsonPoint`1<TCoordinates> origin, double pivot, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Phrase(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, Nullable`1<int> slop, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Phrase(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query, Nullable`1<int> slop, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> QueryString(FieldDefinition`1<TDocument> defaultPath, string query, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> QueryString(Expression`1<Func`2<TDocument, TField>> defaultPath, string query, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Range(Expression`1<Func`2<TDocument, TField>> path, SearchRange`1<TField> range, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Range(SearchPathDefinition`1<TDocument> path, SearchRange`1<TField> range, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Regex(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, bool allowAnalyzedField, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Regex(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query, bool allowAnalyzedField, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Span(SearchSpanDefinition`1<TDocument> clause);
    public SearchDefinition`1<TDocument> Text(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, SearchFuzzyOptions fuzzy, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Text(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, string synonyms, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Text(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query, SearchFuzzyOptions fuzzy, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Text(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query, string synonyms, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Wildcard(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, bool allowAnalyzedField, SearchScoreDefinition`1<TDocument> score);
    public SearchDefinition`1<TDocument> Wildcard(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query, bool allowAnalyzedField, SearchScoreDefinition`1<TDocument> score);
}
[ObsoleteAttribute("Use Render overloads with RenderArgs<TSource> instead.")]
public class MongoDB.Driver.Search.SearchDefinitionRenderContext`1 : object {
    [CompilerGeneratedAttribute]
private IBsonSerializer`1<TDocument> <DocumentSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IBsonSerializerRegistry <SerializerRegistry>k__BackingField;
    public IBsonSerializer`1<TDocument> DocumentSerializer { get; }
    public string PathPrefix { get; }
    public IBsonSerializerRegistry SerializerRegistry { get; }
    public SearchDefinitionRenderContext`1(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, string pathPrefix);
    [CompilerGeneratedAttribute]
public IBsonSerializer`1<TDocument> get_DocumentSerializer();
    [CompilerGeneratedAttribute]
public string get_PathPrefix();
    [CompilerGeneratedAttribute]
public IBsonSerializerRegistry get_SerializerRegistry();
}
public abstract class MongoDB.Driver.Search.SearchFacet`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected SearchFacet`1(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(SearchDefinitionRenderContext`1<TDocument> renderContext);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SearchFacetBuilder`1 : object {
    public SearchFacet`1<TDocument> Date(string name, SearchPathDefinition`1<TDocument> path, IEnumerable`1<DateTime> boundaries, string default);
    public SearchFacet`1<TDocument> Date(string name, SearchPathDefinition`1<TDocument> path, DateTime[] boundaries);
    public SearchFacet`1<TDocument> Date(string name, Expression`1<Func`2<TDocument, TField>> path, IEnumerable`1<DateTime> boundaries, string default);
    public SearchFacet`1<TDocument> Date(string name, Expression`1<Func`2<TDocument, TField>> path, DateTime[] boundaries);
    public SearchFacet`1<TDocument> Number(string name, SearchPathDefinition`1<TDocument> path, IEnumerable`1<BsonValue> boundaries, string default);
    public SearchFacet`1<TDocument> Number(string name, SearchPathDefinition`1<TDocument> path, BsonValue[] boundaries);
    public SearchFacet`1<TDocument> Number(string name, Expression`1<Func`2<TDocument, TField>> path, IEnumerable`1<BsonValue> boundaries, string default);
    public SearchFacet`1<TDocument> Number(string name, Expression`1<Func`2<TDocument, TField>> path, BsonValue[] boundaries);
    public SearchFacet`1<TDocument> String(string name, SearchPathDefinition`1<TDocument> path, Nullable`1<int> numBuckets);
    public SearchFacet`1<TDocument> String(string name, Expression`1<Func`2<TDocument, TField>> path, Nullable`1<int> numBuckets);
}
public class MongoDB.Driver.Search.SearchFuzzyOptions : object {
    private Nullable`1<int> _maxEdits;
    private Nullable`1<int> _maxExpansions;
    private Nullable`1<int> _prefixLength;
    public Nullable`1<int> MaxEdits { get; public set; }
    public Nullable`1<int> MaxExpansions { get; public set; }
    public Nullable`1<int> PrefixLength { get; public set; }
    public Nullable`1<int> get_MaxEdits();
    public void set_MaxEdits(Nullable`1<int> value);
    public Nullable`1<int> get_MaxExpansions();
    public void set_MaxExpansions(Nullable`1<int> value);
    public Nullable`1<int> get_PrefixLength();
    public void set_PrefixLength(Nullable`1<int> value);
    internal BsonDocument Render();
}
public class MongoDB.Driver.Search.SearchHighlight : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchHighlightText[] <Texts>k__BackingField;
    [BsonElementAttribute("path")]
public string Path { get; }
    [BsonElementAttribute("score")]
public double Score { get; }
    [BsonDefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BsonElementAttribute("texts")]
public SearchHighlightText[] Texts { get; }
    public SearchHighlight(string path, double score, SearchHighlightText[] texts);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public double get_Score();
    [CompilerGeneratedAttribute]
public SearchHighlightText[] get_Texts();
}
public class MongoDB.Driver.Search.SearchHighlightOptions`1 : object {
    private Nullable`1<int> _maxCharsToExamine;
    private Nullable`1<int> _maxNumPassages;
    private SearchPathDefinition`1<TDocument> _path;
    public Nullable`1<int> MaxCharsToExamine { get; public set; }
    public Nullable`1<int> MaxNumPassages { get; public set; }
    public SearchPathDefinition`1<TDocument> Path { get; public set; }
    public SearchHighlightOptions`1(SearchPathDefinition`1<TDocument> path, Nullable`1<int> maxCharsToExamine, Nullable`1<int> maxNumPassages);
    public SearchHighlightOptions`1(Expression`1<Func`2<TDocument, object>> path, Nullable`1<int> maxCharsToExamine, Nullable`1<int> maxNumPassages);
    public Nullable`1<int> get_MaxCharsToExamine();
    public void set_MaxCharsToExamine(Nullable`1<int> value);
    public Nullable`1<int> get_MaxNumPassages();
    public void set_MaxNumPassages(Nullable`1<int> value);
    public SearchPathDefinition`1<TDocument> get_Path();
    public void set_Path(SearchPathDefinition`1<TDocument> value);
    public BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SearchHighlightText : object {
    [CompilerGeneratedAttribute]
private HighlightTextType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [BsonElementAttribute("type")]
[BsonRepresentationAttribute]
public HighlightTextType Type { get; }
    [BsonElementAttribute("value")]
public string Value { get; }
    public SearchHighlightText(HighlightTextType type, string value);
    [CompilerGeneratedAttribute]
public HighlightTextType get_Type();
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class MongoDB.Driver.Search.SearchMetaCountResult : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <LowerBound>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Total>k__BackingField;
    [BsonDefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BsonElementAttribute("lowerBound")]
public Nullable`1<long> LowerBound { get; }
    [BsonDefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BsonElementAttribute("total")]
public Nullable`1<long> Total { get; }
    public SearchMetaCountResult(Nullable`1<long> lowerBound, Nullable`1<long> total);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_LowerBound();
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Total();
}
public class MongoDB.Driver.Search.SearchMetaFacetBucketResult : object {
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private BsonValue <Id>k__BackingField;
    [BsonElementAttribute("count")]
public long Count { get; }
    [BsonIdAttribute]
public BsonValue Id { get; }
    public SearchMetaFacetBucketResult(long count, BsonValue id);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public BsonValue get_Id();
}
public class MongoDB.Driver.Search.SearchMetaFacetResult : object {
    [CompilerGeneratedAttribute]
private SearchMetaFacetBucketResult[] <Buckets>k__BackingField;
    [BsonElementAttribute("buckets")]
public SearchMetaFacetBucketResult[] Buckets { get; }
    public SearchMetaFacetResult(SearchMetaFacetBucketResult[] buckets);
    [CompilerGeneratedAttribute]
public SearchMetaFacetBucketResult[] get_Buckets();
}
public class MongoDB.Driver.Search.SearchMetaResult : object {
    [CompilerGeneratedAttribute]
private SearchMetaCountResult <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, SearchMetaFacetResult> <Facet>k__BackingField;
    [BsonDefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BsonElementAttribute("count")]
public SearchMetaCountResult Count { get; }
    [BsonDefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BsonElementAttribute("facet")]
public IReadOnlyDictionary`2<string, SearchMetaFacetResult> Facet { get; }
    public SearchMetaResult(SearchMetaCountResult count, IReadOnlyDictionary`2<string, SearchMetaFacetResult> facet);
    [CompilerGeneratedAttribute]
public SearchMetaCountResult get_Count();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, SearchMetaFacetResult> get_Facet();
}
public class MongoDB.Driver.Search.SearchOptions`1 : object {
    [CompilerGeneratedAttribute]
private SearchCountOptions <CountOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchHighlightOptions`1<TDocument> <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnStoredSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScoreDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDefinition`1<TDocument> <Sort>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchTrackingOptions <Tracking>k__BackingField;
    public SearchCountOptions CountOptions { get; public set; }
    public SearchHighlightOptions`1<TDocument> Highlight { get; public set; }
    public string IndexName { get; public set; }
    public bool ReturnStoredSource { get; public set; }
    public bool ScoreDetails { get; public set; }
    public SortDefinition`1<TDocument> Sort { get; public set; }
    public SearchTrackingOptions Tracking { get; public set; }
    [CompilerGeneratedAttribute]
public SearchCountOptions get_CountOptions();
    [CompilerGeneratedAttribute]
public void set_CountOptions(SearchCountOptions value);
    [CompilerGeneratedAttribute]
public SearchHighlightOptions`1<TDocument> get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(SearchHighlightOptions`1<TDocument> value);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
public void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public bool get_ReturnStoredSource();
    [CompilerGeneratedAttribute]
public void set_ReturnStoredSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_ScoreDetails();
    [CompilerGeneratedAttribute]
public void set_ScoreDetails(bool value);
    [CompilerGeneratedAttribute]
public SortDefinition`1<TDocument> get_Sort();
    [CompilerGeneratedAttribute]
public void set_Sort(SortDefinition`1<TDocument> value);
    [CompilerGeneratedAttribute]
public SearchTrackingOptions get_Tracking();
    [CompilerGeneratedAttribute]
public void set_Tracking(SearchTrackingOptions value);
}
public abstract class MongoDB.Driver.Search.SearchPathDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TSource> args) overload instead.")]
public virtual BsonValue Render(SearchDefinitionRenderContext`1<TDocument> renderContext);
    public abstract virtual BsonValue Render(RenderArgs`1<TDocument> args);
    public static SearchPathDefinition`1<TDocument> op_Implicit(FieldDefinition`1<TDocument> field);
    public static SearchPathDefinition`1<TDocument> op_Implicit(string fieldName);
    public static SearchPathDefinition`1<TDocument> op_Implicit(FieldDefinition`1[] fields);
    public static SearchPathDefinition`1<TDocument> op_Implicit(List`1<FieldDefinition`1<TDocument>> fields);
    public static SearchPathDefinition`1<TDocument> op_Implicit(String[] fieldNames);
    public static SearchPathDefinition`1<TDocument> op_Implicit(List`1<string> fieldNames);
    protected string RenderField(FieldDefinition`1<TDocument> fieldDefinition, RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SearchPathDefinitionBuilder`1 : object {
    public SearchPathDefinition`1<TDocument> Analyzer(FieldDefinition`1<TDocument> field, string analyzerName);
    public SearchPathDefinition`1<TDocument> Analyzer(Expression`1<Func`2<TDocument, TField>> field, string analyzerName);
    public SearchPathDefinition`1<TDocument> Multi(IEnumerable`1<FieldDefinition`1<TDocument>> fields);
    public SearchPathDefinition`1<TDocument> Multi(FieldDefinition`1[] fields);
    public SearchPathDefinition`1<TDocument> Multi(Expression`1[] fields);
    public SearchPathDefinition`1<TDocument> Single(FieldDefinition`1<TDocument> field);
    public SearchPathDefinition`1<TDocument> Single(Expression`1<Func`2<TDocument, TField>> field);
    public SearchPathDefinition`1<TDocument> Wildcard(string query);
}
public abstract class MongoDB.Driver.Search.SearchQueryDefinition : object {
    public abstract virtual BsonValue Render();
    public static SearchQueryDefinition op_Implicit(string query);
    public static SearchQueryDefinition op_Implicit(String[] queries);
    public static SearchQueryDefinition op_Implicit(List`1<string> queries);
}
public class MongoDB.Driver.Search.SearchRange`1 : ValueType {
    [CompilerGeneratedAttribute]
private static SearchRange`1<TValue> <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaxInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMinInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TValue> <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TValue> <Min>k__BackingField;
    public static SearchRange`1<TValue> Empty { get; }
    public bool IsMaxInclusive { get; }
    public bool IsMinInclusive { get; }
    public Nullable`1<TValue> Max { get; }
    public Nullable`1<TValue> Min { get; }
    public SearchRange`1(Nullable`1<TValue> min, Nullable`1<TValue> max, bool isMinInclusive, bool isMaxInclusive);
    private static SearchRange`1();
    [CompilerGeneratedAttribute]
public static SearchRange`1<TValue> get_Empty();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsMaxInclusive();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsMinInclusive();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<TValue> get_Max();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<TValue> get_Min();
}
[ExtensionAttribute]
public static class MongoDB.Driver.Search.SearchRangeBuilder : object {
    public static SearchRange`1<TValue> Gt(TValue value);
    [ExtensionAttribute]
public static SearchRange`1<TValue> Gt(SearchRange`1<TValue> searchRange, TValue value);
    public static SearchRange`1<TValue> Gte(TValue value);
    [ExtensionAttribute]
public static SearchRange`1<TValue> Gte(SearchRange`1<TValue> searchRange, TValue value);
    public static SearchRange`1<TValue> Lt(TValue value);
    [ExtensionAttribute]
public static SearchRange`1<TValue> Lt(SearchRange`1<TValue> searchRange, TValue value);
    public static SearchRange`1<TValue> Lte(TValue value);
    [ExtensionAttribute]
public static SearchRange`1<TValue> Lte(SearchRange`1<TValue> searchRange, TValue value);
}
public abstract class MongoDB.Driver.Search.SearchScoreDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(SearchDefinitionRenderContext`1<TDocument> renderContext);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SearchScoreDefinitionBuilder`1 : object {
    public SearchScoreDefinition`1<TDocument> Boost(double value);
    public SearchScoreDefinition`1<TDocument> Boost(SearchPathDefinition`1<TDocument> path, double undefined);
    public SearchScoreDefinition`1<TDocument> Boost(Expression`1<Func`2<TDocument, double>> path, double undefined);
    public SearchScoreDefinition`1<TDocument> Constant(double value);
    public SearchScoreDefinition`1<TDocument> Function(SearchScoreFunction`1<TDocument> function);
}
public class MongoDB.Driver.Search.SearchScoreDetails : object {
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchScoreDetails[] <Details>k__BackingField;
    [BsonElementAttribute("value")]
public double Value { get; }
    [BsonElementAttribute("description")]
public string Description { get; }
    [BsonDefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BsonElementAttribute("details")]
public SearchScoreDetails[] Details { get; }
    public SearchScoreDetails(double value, string description, SearchScoreDetails[] details);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public SearchScoreDetails[] get_Details();
}
public abstract class MongoDB.Driver.Search.SearchScoreFunction`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(SearchDefinitionRenderContext`1<TDocument> renderContext);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SearchScoreFunctionBuilder`1 : object {
    public SearchScoreFunction`1<TDocument> Add(IEnumerable`1<SearchScoreFunction`1<TDocument>> operands);
    public SearchScoreFunction`1<TDocument> Add(SearchScoreFunction`1[] operands);
    public SearchScoreFunction`1<TDocument> Constant(double value);
    public SearchScoreFunction`1<TDocument> Gauss(SearchPathDefinition`1<TDocument> path, double origin, double scale, double decay, double offset);
    public SearchScoreFunction`1<TDocument> Gauss(Expression`1<Func`2<TDocument, double>> path, double origin, double scale, double decay, double offset);
    public SearchScoreFunction`1<TDocument> Log(SearchScoreFunction`1<TDocument> operand);
    public SearchScoreFunction`1<TDocument> Log1p(SearchScoreFunction`1<TDocument> operand);
    public SearchScoreFunction`1<TDocument> Multiply(IEnumerable`1<SearchScoreFunction`1<TDocument>> operands);
    public SearchScoreFunction`1<TDocument> Multiply(SearchScoreFunction`1[] operands);
    public SearchScoreFunction`1<TDocument> Path(SearchPathDefinition`1<TDocument> path, double undefined);
    public SearchScoreFunction`1<TDocument> Path(Expression`1<Func`2<TDocument, double>> path, double undefined);
    public SearchScoreFunction`1<TDocument> Relevance();
}
public abstract class MongoDB.Driver.Search.SearchSpanDefinition`1 : object {
    private ClauseType<TDocument> _clauseType;
    private protected SearchSpanDefinition`1(ClauseType<TDocument> clauseType);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(SearchDefinitionRenderContext`1<TDocument> renderContext);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    private protected virtual BsonDocument RenderClause(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SearchSpanDefinitionBuilder`1 : object {
    public SearchSpanDefinition`1<TDocument> First(SearchSpanDefinition`1<TDocument> operator, int endPositionLte);
    public SearchSpanDefinition`1<TDocument> Near(IEnumerable`1<SearchSpanDefinition`1<TDocument>> clauses, int slop, bool inOrder);
    public SearchSpanDefinition`1<TDocument> Or(IEnumerable`1<SearchSpanDefinition`1<TDocument>> clauses);
    public SearchSpanDefinition`1<TDocument> Or(SearchSpanDefinition`1[] clauses);
    public SearchSpanDefinition`1<TDocument> Subtract(SearchSpanDefinition`1<TDocument> include, SearchSpanDefinition`1<TDocument> exclude);
    public SearchSpanDefinition`1<TDocument> Term(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query);
    public SearchSpanDefinition`1<TDocument> Term(Expression`1<Func`2<TDocument, TField>> path, SearchQueryDefinition query);
}
public class MongoDB.Driver.Search.SearchTrackingOptions : object {
    private string _searchTerms;
    public string SearchTerms { get; public set; }
    public string get_SearchTerms();
    public void set_SearchTerms(string value);
    internal BsonDocument Render();
}
internal class MongoDB.Driver.Search.SingleSearchPathDefinition`1 : SearchPathDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    public SingleSearchPathDefinition`1(FieldDefinition`1<TDocument> field);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.Search.SingleSearchQueryDefinition : SearchQueryDefinition {
    private string _query;
    public SingleSearchQueryDefinition(string query);
    public virtual BsonValue Render();
}
internal class MongoDB.Driver.Search.SpanSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private SearchSpanDefinition`1<TDocument> _clause;
    public SpanSearchDefinition`1(SearchSpanDefinition`1<TDocument> clause);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.StringSearchFacet`1 : SearchFacet`1<TDocument> {
    private Nullable`1<int> _numBuckets;
    private SearchPathDefinition`1<TDocument> _path;
    public StringSearchFacet`1(string name, SearchPathDefinition`1<TDocument> path, Nullable`1<int> numBuckets);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.SubtractSearchSpanDefinition`1 : SearchSpanDefinition`1<TDocument> {
    private SearchSpanDefinition`1<TDocument> _exclude;
    private SearchSpanDefinition`1<TDocument> _include;
    public SubtractSearchSpanDefinition`1(SearchSpanDefinition`1<TDocument> include, SearchSpanDefinition`1<TDocument> exclude);
    private protected virtual BsonDocument RenderClause(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.TermSearchSpanDefinition`1 : SearchSpanDefinition`1<TDocument> {
    private SearchPathDefinition`1<TDocument> _path;
    private SearchQueryDefinition _query;
    public TermSearchSpanDefinition`1(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query);
    private protected virtual BsonDocument RenderClause(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.TextSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private SearchFuzzyOptions _fuzzy;
    private SearchQueryDefinition _query;
    private string _synonyms;
    public TextSearchDefinition`1(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, SearchFuzzyOptions fuzzy, SearchScoreDefinition`1<TDocument> score, string synonyms);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
    [CompilerGeneratedAttribute]
private BsonValue <RenderArguments>b__4_0();
}
internal class MongoDB.Driver.Search.UnarySearchScoreFunction`1 : SearchScoreFunction`1<TDocument> {
    private SearchScoreFunction`1<TDocument> _operand;
    private string _operatorName;
    public UnarySearchScoreFunction`1(string operatorName, SearchScoreFunction`1<TDocument> operand);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.WildcardSearchDefinition`1 : OperatorSearchDefinition`1<TDocument> {
    private bool _allowAnalyzedField;
    private SearchQueryDefinition _query;
    public WildcardSearchDefinition`1(SearchPathDefinition`1<TDocument> path, SearchQueryDefinition query, bool allowAnalyzedField, SearchScoreDefinition`1<TDocument> score);
    private protected virtual BsonDocument RenderArguments(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.Search.WildcardSearchPathDefinition`1 : SearchPathDefinition`1<TDocument> {
    private string _query;
    public WildcardSearchPathDefinition`1(string query);
    public virtual BsonValue Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.ServerSession : object {
    private ICoreServerSession _coreServerSession;
    public BsonDocument Id { get; }
    public Nullable`1<DateTime> LastUsedAt { get; }
    public ServerSession(ICoreServerSession coreServerSession);
    public sealed virtual BsonDocument get_Id();
    public sealed virtual Nullable`1<DateTime> get_LastUsedAt();
    [ObsoleteAttribute("Let the driver handle when to advance the transaction number.")]
public sealed virtual long AdvanceTransactionNumber();
    public sealed virtual void Dispose();
    [ObsoleteAttribute("Let the driver handle tracking when the session was last used.")]
public sealed virtual void WasUsed();
}
public abstract class MongoDB.Driver.SetFieldDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonElement Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonElement Render(RenderArgs`1<TDocument> args);
}
public abstract class MongoDB.Driver.SetFieldDefinitions`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.SetFieldDefinitionsBuilder`1 : object {
    public ListSetFieldDefinitions`1<TDocument> Set(FieldDefinition`2<TDocument, TField> field, TField value);
    public ListSetFieldDefinitions`1<TDocument> Set(Expression`1<Func`2<TDocument, TField>> field, TField value);
}
public class MongoDB.Driver.Setting`1 : ValueType {
    private T _value;
    private bool _hasBeenSet;
    public T Value { get; public set; }
    public bool HasBeenSet { get; }
    public T get_Value();
    public void set_Value(T value);
    public bool get_HasBeenSet();
    public void Reset();
    public virtual string ToString();
    internal Setting`1<T> Clone();
}
public abstract class MongoDB.Driver.SetWindowFieldsWindow : object {
}
internal class MongoDB.Driver.SimpleFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private BsonValue _value;
    public SimpleFilterDefinition`1(FieldDefinition`1<TDocument> field, BsonValue value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.SimpleFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private FieldDefinition`2<TDocument, TField> _field;
    private TField _value;
    private bool _allowScalarValueForArrayField;
    public SimpleFilterDefinition`2(FieldDefinition`2<TDocument, TField> field, TField value, bool allowScalarValueForArrayField);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.SimpleIndexKeyDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    private string _type;
    public SimpleIndexKeyDefinition`1(FieldDefinition`1<TDocument> field, string type);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.SingleFieldProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private FieldDefinition`1<TSource> _field;
    private BsonValue _value;
    public SingleFieldProjectionDefinition`1(FieldDefinition`1<TSource> field, BsonValue value);
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
}
internal class MongoDB.Driver.SingleItemAsArrayOperatorFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, TField> _field;
    private IEnumerable`1<TField> _values;
    private bool _allowScalarValueForArrayField;
    public SingleItemAsArrayOperatorFilterDefinition`2(string operatorName, FieldDefinition`2<TDocument, TField> field, IEnumerable`1<TField> values, bool allowScalarValueForArrayField);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.SliceProjectionDefinition`1 : ProjectionDefinition`1<TSource> {
    private FieldDefinition`1<TSource> _field;
    private BsonValue _limit;
    private BsonValue _skip;
    public SliceProjectionDefinition`1(FieldDefinition`1<TSource> field, BsonValue limit);
    public SliceProjectionDefinition`1(FieldDefinition`1<TSource> field, BsonValue skip, BsonValue limit);
    public virtual BsonDocument Render(RenderArgs`1<TSource> args);
    private BsonValue RenderArgs(string fieldName);
    private BsonValue RenderArgsForFind();
}
public abstract class MongoDB.Driver.SortDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonDocument Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonDocument Render(RenderArgs`1<TDocument> args);
    public static SortDefinition`1<TDocument> op_Implicit(BsonDocument document);
    public static SortDefinition`1<TDocument> op_Implicit(string json);
}
public class MongoDB.Driver.SortDefinitionBuilder`1 : object {
    public SortDefinition`1<TDocument> Ascending(FieldDefinition`1<TDocument> field);
    public SortDefinition`1<TDocument> Ascending(Expression`1<Func`2<TDocument, object>> field);
    public SortDefinition`1<TDocument> Combine(SortDefinition`1[] sorts);
    public SortDefinition`1<TDocument> Combine(IEnumerable`1<SortDefinition`1<TDocument>> sorts);
    public SortDefinition`1<TDocument> Descending(FieldDefinition`1<TDocument> field);
    public SortDefinition`1<TDocument> Descending(Expression`1<Func`2<TDocument, object>> field);
    public SortDefinition`1<TDocument> MetaSearchScoreDescending();
    public SortDefinition`1<TDocument> MetaSearchScoreAscending();
    public SortDefinition`1<TDocument> MetaTextScore(string field);
}
[ExtensionAttribute]
public static class MongoDB.Driver.SortDefinitionExtensions : object {
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> Ascending(SortDefinition`1<TDocument> sort, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> Ascending(SortDefinition`1<TDocument> sort, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> Descending(SortDefinition`1<TDocument> sort, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> Descending(SortDefinition`1<TDocument> sort, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> MetaSearchScoreDescending(SortDefinition`1<TDocument> sort);
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> MetaSearchScoreAscending(SortDefinition`1<TDocument> sort);
    [ExtensionAttribute]
public static SortDefinition`1<TDocument> MetaTextScore(SortDefinition`1<TDocument> sort, string field);
}
public enum MongoDB.Driver.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
internal class MongoDB.Driver.SortPipelineStageDefinition`1 : PipelineStageDefinition`2<TInput, TInput> {
    [CompilerGeneratedAttribute]
private SortDefinition`1<TInput> <Sort>k__BackingField;
    public SortDefinition`1<TInput> Sort { get; private set; }
    public string OperatorName { get; }
    public SortPipelineStageDefinition`1(SortDefinition`1<TInput> sort);
    [CompilerGeneratedAttribute]
public SortDefinition`1<TInput> get_Sort();
    [CompilerGeneratedAttribute]
private void set_Sort(SortDefinition`1<TInput> value);
    public virtual string get_OperatorName();
    public virtual RenderedPipelineStageDefinition`1<TInput> Render(RenderArgs`1<TInput> args);
}
public class MongoDB.Driver.SslSettings : object {
    private static IEqualityComparer`1<X509CertificateCollection> __certificateCollectionEqualityComparer;
    private bool _checkCertificateRevocation;
    private X509CertificateCollection _clientCertificateCollection;
    private LocalCertificateSelectionCallback _clientCertificateSelectionCallback;
    private SslProtocols _enabledSslProtocols;
    private RemoteCertificateValidationCallback _serverCertificateValidationCallback;
    private bool _isFrozen;
    private int _hashCode;
    public bool CheckCertificateRevocation { get; public set; }
    public IEnumerable`1<X509Certificate> ClientCertificates { get; public set; }
    public LocalCertificateSelectionCallback ClientCertificateSelectionCallback { get; public set; }
    public SslProtocols EnabledSslProtocols { get; public set; }
    public RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    internal X509CertificateCollection ClientCertificateCollection { get; }
    private static SslSettings();
    public bool get_CheckCertificateRevocation();
    public void set_CheckCertificateRevocation(bool value);
    public IEnumerable`1<X509Certificate> get_ClientCertificates();
    public void set_ClientCertificates(IEnumerable`1<X509Certificate> value);
    public LocalCertificateSelectionCallback get_ClientCertificateSelectionCallback();
    public void set_ClientCertificateSelectionCallback(LocalCertificateSelectionCallback value);
    public SslProtocols get_EnabledSslProtocols();
    public void set_EnabledSslProtocols(SslProtocols value);
    public RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    public void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    internal X509CertificateCollection get_ClientCertificateCollection();
    public static bool op_Equality(SslSettings lhs, SslSettings rhs);
    public static bool op_Inequality(SslSettings lhs, SslSettings rhs);
    public SslSettings Clone();
    public sealed virtual bool Equals(SslSettings obj);
    public virtual bool Equals(object obj);
    public SslSettings Freeze();
    public virtual int GetHashCode();
    public virtual string ToString();
    internal SslStreamSettings ToSslStreamSettings();
}
internal class MongoDB.Driver.StringArrayFieldInOrNinFilterDefinition`1 : StringInOrNinFilterDefinition`2<TDocument, IEnumerable`1<string>> {
    public StringArrayFieldInOrNinFilterDefinition`1(FieldDefinition`2<TDocument, IEnumerable`1<string>> field, string operator, IEnumerable`1<StringOrRegularExpression> values);
}
public class MongoDB.Driver.StringFieldDefinition`1 : FieldDefinition`1<TDocument> {
    private string _fieldName;
    public StringFieldDefinition`1(string fieldName);
    public virtual RenderedFieldDefinition Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.StringFieldDefinition`2 : FieldDefinition`2<TDocument, TField> {
    private string _fieldName;
    private IBsonSerializer`1<TField> _fieldSerializer;
    public StringFieldDefinition`2(string fieldName, IBsonSerializer`1<TField> fieldSerializer);
    public virtual RenderedFieldDefinition`1<TField> Render(RenderArgs`1<TDocument> args);
}
internal static class MongoDB.Driver.StringFieldDefinitionHelper : object {
    public static void Resolve(string fieldName, IBsonSerializer`1<TDocument> serializer, String& resolvedFieldName, IBsonSerializer& resolvedFieldSerializer);
}
internal class MongoDB.Driver.StringFieldInOrNinFilterDefinition`1 : StringInOrNinFilterDefinition`2<TDocument, string> {
    public StringFieldInOrNinFilterDefinition`1(FieldDefinition`2<TDocument, string> field, string operator, IEnumerable`1<StringOrRegularExpression> values);
}
internal abstract class MongoDB.Driver.StringInOrNinFilterDefinition`2 : FilterDefinition`1<TDocument> {
    private FieldDefinition`2<TDocument, TField> _field;
    private string _operator;
    private IEnumerable`1<StringOrRegularExpression> _values;
    public StringInOrNinFilterDefinition`2(FieldDefinition`2<TDocument, TField> field, string operator, IEnumerable`1<StringOrRegularExpression> values);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.StringOrRegularExpression : object {
    private Type _type;
    private object _value;
    public BsonRegularExpression RegularExpression { get; }
    public string String { get; }
    public Type Type { get; }
    public StringOrRegularExpression(string value);
    public StringOrRegularExpression(BsonRegularExpression value);
    public static StringOrRegularExpression op_Implicit(string value);
    public static StringOrRegularExpression op_Implicit(BsonRegularExpression value);
    public static StringOrRegularExpression op_Implicit(Regex value);
    public BsonRegularExpression get_RegularExpression();
    public string get_String();
    public Type get_Type();
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Support.EndPointExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<MongoServerAddress> ToMongoServerAddresses(IEnumerable`1<EndPoint> endPoints);
}
internal abstract class MongoDB.Driver.Support.IndexMap : object {
    private static IndexMap __identityMap;
    public static IndexMap IdentityMap { get; }
    public bool IsIdentityMap { get; }
    private static IndexMap();
    public static IndexMap get_IdentityMap();
    public abstract virtual bool get_IsIdentityMap();
    public abstract virtual IndexMap Add(int index, int originalIndex);
    public abstract virtual int Map(int index);
}
[ExtensionAttribute]
internal static class MongoDB.Driver.Support.ReflectionExtensions : object {
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static bool ImplementsInterface(Type type, Type iface);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsNullableEnum(Type type);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsNumericOrNullableNumeric(Type type);
    [ExtensionAttribute]
public static bool IsConvertibleToEnum(Type type);
    [ExtensionAttribute]
public static Type GetNullableUnderlyingType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceElementType(Type type);
    [ExtensionAttribute]
public static Type FindIEnumerable(Type seqType);
    private static TValue GetDefaultValueGeneric();
}
internal static class MongoDB.Driver.TargetFramework : object {
    public static string Moniker { get; }
    public static string get_Moniker();
}
public class MongoDB.Driver.TextSearchOptions : object {
    private Nullable`1<bool> _caseSensitive;
    private Nullable`1<bool> _diacriticSensitive;
    private string _language;
    public Nullable`1<bool> CaseSensitive { get; public set; }
    public Nullable`1<bool> DiacriticSensitive { get; public set; }
    public string Language { get; public set; }
    public Nullable`1<bool> get_CaseSensitive();
    public void set_CaseSensitive(Nullable`1<bool> value);
    public Nullable`1<bool> get_DiacriticSensitive();
    public void set_DiacriticSensitive(Nullable`1<bool> value);
    public string get_Language();
    public void set_Language(string value);
}
public class MongoDB.Driver.TimeRangeWindowBoundary : RangeWindowBoundary {
    private string _unit;
    private int _value;
    public string Unit { get; }
    public int Value { get; }
    internal TimeRangeWindowBoundary(int value, string unit);
    public string get_Unit();
    public int get_Value();
    public virtual string ToString();
    internal virtual BsonValue Render(IBsonSerializer valueSerializer);
}
internal static class MongoDB.Driver.TransactionExecutor : object {
    private static string TransientTransactionErrorLabel;
    private static string UnknownTransactionCommitResultLabel;
    private static int MaxTimeMSExpiredErrorCode;
    private static TimeSpan __transactionTimeout;
    private static TransactionExecutor();
    public static TResult ExecuteWithRetries(IClientSessionHandle clientSession, Func`3<IClientSessionHandle, CancellationToken, TResult> callback, TransactionOptions transactionOptions, IClock clock, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.TransactionExecutor/<ExecuteWithRetriesAsync>d__5`1")]
public static Task`1<TResult> ExecuteWithRetriesAsync(IClientSessionHandle clientSession, Func`3<IClientSessionHandle, CancellationToken, Task`1<TResult>> callbackAsync, TransactionOptions transactionOptions, IClock clock, CancellationToken cancellationToken);
    private static bool HasTimedOut(DateTime startTime, DateTime currentTime);
    private static CallbackOutcome`1<TResult> ExecuteCallback(IClientSessionHandle clientSession, Func`3<IClientSessionHandle, CancellationToken, TResult> callback, DateTime startTime, IClock clock, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.TransactionExecutor/<ExecuteCallbackAsync>d__8`1")]
private static Task`1<CallbackOutcome`1<TResult>> ExecuteCallbackAsync(IClientSessionHandle clientSession, Func`3<IClientSessionHandle, CancellationToken, Task`1<TResult>> callbackAsync, DateTime startTime, IClock clock, CancellationToken cancellationToken);
    private static bool CommitWithRetries(IClientSessionHandle clientSession, DateTime startTime, IClock clock, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MongoDB.Driver.TransactionExecutor/<CommitWithRetriesAsync>d__10")]
private static Task`1<bool> CommitWithRetriesAsync(IClientSessionHandle clientSession, DateTime startTime, IClock clock, CancellationToken cancellationToken);
    private static bool HasErrorLabel(Exception ex, string errorLabel);
    private static bool IsMaxTimeMSExpiredException(Exception ex);
    private static bool IsTransactionInStartingOrInProgressState(IClientSessionHandle clientSession);
    private static bool ShouldRetryCommit(Exception ex, DateTime startTime, DateTime now);
}
internal class MongoDB.Driver.UInt32GreaterThanFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, UInt32> _field;
    private UInt32 _value;
    public UInt32GreaterThanFilterDefinition`1(string operatorName, FieldDefinition`2<TDocument, UInt32> field, UInt32 value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.UInt32LessThanFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, UInt32> _field;
    private UInt32 _value;
    public UInt32LessThanFilterDefinition`1(string operatorName, FieldDefinition`2<TDocument, UInt32> field, UInt32 value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.UInt64GreaterThanFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, ulong> _field;
    private ulong _value;
    public UInt64GreaterThanFilterDefinition`1(string operatorName, FieldDefinition`2<TDocument, ulong> field, ulong value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.UInt64LessThanFilterDefinition`1 : FilterDefinition`1<TDocument> {
    private string _operatorName;
    private FieldDefinition`2<TDocument, ulong> _field;
    private ulong _value;
    public UInt64LessThanFilterDefinition`1(string operatorName, FieldDefinition`2<TDocument, ulong> field, ulong value);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
internal class MongoDB.Driver.UntypedFieldDefinitionAdapter`2 : FieldDefinition`1<TDocument> {
    private FieldDefinition`2<TDocument, TField> _adaptee;
    public UntypedFieldDefinitionAdapter`2(FieldDefinition`2<TDocument, TField> adaptee);
    public virtual RenderedFieldDefinition Render(RenderArgs`1<TDocument> args);
}
public abstract class MongoDB.Driver.UpdateDefinition`1 : object {
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonValue Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry);
    [ObsoleteAttribute("Use Render(RenderArgs<TDocument> args) overload instead.")]
public virtual BsonValue Render(IBsonSerializer`1<TDocument> documentSerializer, IBsonSerializerRegistry serializerRegistry, LinqProvider linqProvider);
    public abstract virtual BsonValue Render(RenderArgs`1<TDocument> args);
    public static UpdateDefinition`1<TDocument> op_Implicit(BsonDocument document);
    public static UpdateDefinition`1<TDocument> op_Implicit(string json);
    public static UpdateDefinition`1<TDocument> op_Implicit(PipelineDefinition`2<TDocument, TDocument> pipeline);
}
public class MongoDB.Driver.UpdateDefinitionBuilder`1 : object {
    public UpdateDefinition`1<TDocument> AddToSet(FieldDefinition`1<TDocument> field, TItem value);
    public UpdateDefinition`1<TDocument> AddToSet(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public UpdateDefinition`1<TDocument> AddToSetEach(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public UpdateDefinition`1<TDocument> AddToSetEach(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    public UpdateDefinition`1<TDocument> BitwiseAnd(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> BitwiseAnd(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> BitwiseOr(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> BitwiseOr(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> BitwiseXor(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> BitwiseXor(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> Combine(UpdateDefinition`1[] updates);
    public UpdateDefinition`1<TDocument> Combine(IEnumerable`1<UpdateDefinition`1<TDocument>> updates);
    public UpdateDefinition`1<TDocument> CurrentDate(FieldDefinition`1<TDocument> field, Nullable`1<UpdateDefinitionCurrentDateType> type);
    public UpdateDefinition`1<TDocument> CurrentDate(Expression`1<Func`2<TDocument, object>> field, Nullable`1<UpdateDefinitionCurrentDateType> type);
    public UpdateDefinition`1<TDocument> Inc(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> Inc(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> Max(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> Max(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> Min(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> Min(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> Mul(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> Mul(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> Pipeline(PipelineDefinition`2<TDocument, TDocument> pipeline);
    public UpdateDefinition`1<TDocument> PopFirst(FieldDefinition`1<TDocument> field);
    public UpdateDefinition`1<TDocument> PopFirst(Expression`1<Func`2<TDocument, object>> field);
    public UpdateDefinition`1<TDocument> PopLast(FieldDefinition`1<TDocument> field);
    public UpdateDefinition`1<TDocument> PopLast(Expression`1<Func`2<TDocument, object>> field);
    public UpdateDefinition`1<TDocument> Pull(FieldDefinition`1<TDocument> field, TItem value);
    public UpdateDefinition`1<TDocument> Pull(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public UpdateDefinition`1<TDocument> PullAll(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    public UpdateDefinition`1<TDocument> PullAll(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    public UpdateDefinition`1<TDocument> PullFilter(FieldDefinition`1<TDocument> field, FilterDefinition`1<TItem> filter);
    public UpdateDefinition`1<TDocument> PullFilter(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TItem> filter);
    public UpdateDefinition`1<TDocument> PullFilter(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TItem, bool>> filter);
    public UpdateDefinition`1<TDocument> Push(FieldDefinition`1<TDocument> field, TItem value);
    public UpdateDefinition`1<TDocument> Push(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    public UpdateDefinition`1<TDocument> PushEach(FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values, Nullable`1<int> slice, Nullable`1<int> position, SortDefinition`1<TItem> sort);
    public UpdateDefinition`1<TDocument> PushEach(Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values, Nullable`1<int> slice, Nullable`1<int> position, SortDefinition`1<TItem> sort);
    public UpdateDefinition`1<TDocument> Rename(FieldDefinition`1<TDocument> field, string newName);
    public UpdateDefinition`1<TDocument> Rename(Expression`1<Func`2<TDocument, object>> field, string newName);
    public UpdateDefinition`1<TDocument> Set(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> Set(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> SetOnInsert(FieldDefinition`2<TDocument, TField> field, TField value);
    public UpdateDefinition`1<TDocument> SetOnInsert(Expression`1<Func`2<TDocument, TField>> field, TField value);
    public UpdateDefinition`1<TDocument> Unset(FieldDefinition`1<TDocument> field);
    public UpdateDefinition`1<TDocument> Unset(Expression`1<Func`2<TDocument, object>> field);
}
public enum MongoDB.Driver.UpdateDefinitionCurrentDateType : Enum {
    public int value__;
    public static UpdateDefinitionCurrentDateType Date;
    public static UpdateDefinitionCurrentDateType Timestamp;
}
[ExtensionAttribute]
public static class MongoDB.Driver.UpdateDefinitionExtensions : object {
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> AddToSet(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, TItem value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> AddToSet(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> AddToSetEach(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> AddToSetEach(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> BitwiseAnd(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> BitwiseAnd(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> BitwiseOr(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> BitwiseOr(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> BitwiseXor(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> BitwiseXor(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> CurrentDate(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, Nullable`1<UpdateDefinitionCurrentDateType> type);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> CurrentDate(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, object>> field, Nullable`1<UpdateDefinitionCurrentDateType> type);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Inc(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Inc(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Max(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Max(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Min(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Min(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Mul(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Mul(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PopFirst(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PopFirst(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PopLast(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PopLast(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, object>> field);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Pull(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, TItem value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Pull(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PullAll(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PullAll(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PullFilter(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, FilterDefinition`1<TItem> filter);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PullFilter(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, FilterDefinition`1<TItem> filter);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PullFilter(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, Expression`1<Func`2<TItem, bool>> filter);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Push(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, TItem value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Push(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, TItem value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PushEach(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, IEnumerable`1<TItem> values, Nullable`1<int> slice, Nullable`1<int> position, SortDefinition`1<TItem> sort);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> PushEach(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, IEnumerable`1<TItem>>> field, IEnumerable`1<TItem> values, Nullable`1<int> slice, Nullable`1<int> position, SortDefinition`1<TItem> sort);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Rename(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field, string newName);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Rename(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, object>> field, string newName);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Set(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Set(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> SetOnInsert(UpdateDefinition`1<TDocument> update, FieldDefinition`2<TDocument, TField> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> SetOnInsert(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, TField>> field, TField value);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Unset(UpdateDefinition`1<TDocument> update, FieldDefinition`1<TDocument> field);
    [ExtensionAttribute]
public static UpdateDefinition`1<TDocument> Unset(UpdateDefinition`1<TDocument> update, Expression`1<Func`2<TDocument, object>> field);
}
public class MongoDB.Driver.UpdateManyModel`1 : WriteModel`1<TDocument> {
    private IEnumerable`1<ArrayFilterDefinition> _arrayFilters;
    private Collation _collation;
    private FilterDefinition`1<TDocument> _filter;
    private BsonValue _hint;
    private bool _isUpsert;
    private UpdateDefinition`1<TDocument> _update;
    public IEnumerable`1<ArrayFilterDefinition> ArrayFilters { get; public set; }
    public Collation Collation { get; public set; }
    public FilterDefinition`1<TDocument> Filter { get; }
    public BsonValue Hint { get; public set; }
    public bool IsUpsert { get; public set; }
    public UpdateDefinition`1<TDocument> Update { get; }
    public WriteModelType ModelType { get; }
    public UpdateManyModel`1(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update);
    public IEnumerable`1<ArrayFilterDefinition> get_ArrayFilters();
    public void set_ArrayFilters(IEnumerable`1<ArrayFilterDefinition> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public FilterDefinition`1<TDocument> get_Filter();
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public UpdateDefinition`1<TDocument> get_Update();
    public virtual WriteModelType get_ModelType();
    public virtual void ThrowIfNotValid();
}
public class MongoDB.Driver.UpdateOneModel`1 : WriteModel`1<TDocument> {
    private IEnumerable`1<ArrayFilterDefinition> _arrayFilters;
    private Collation _collation;
    private FilterDefinition`1<TDocument> _filter;
    private BsonValue _hint;
    private bool _isUpsert;
    private UpdateDefinition`1<TDocument> _update;
    public IEnumerable`1<ArrayFilterDefinition> ArrayFilters { get; public set; }
    public Collation Collation { get; public set; }
    public FilterDefinition`1<TDocument> Filter { get; }
    public BsonValue Hint { get; public set; }
    public bool IsUpsert { get; public set; }
    public UpdateDefinition`1<TDocument> Update { get; }
    public WriteModelType ModelType { get; }
    public UpdateOneModel`1(FilterDefinition`1<TDocument> filter, UpdateDefinition`1<TDocument> update);
    public IEnumerable`1<ArrayFilterDefinition> get_ArrayFilters();
    public void set_ArrayFilters(IEnumerable`1<ArrayFilterDefinition> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public FilterDefinition`1<TDocument> get_Filter();
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public UpdateDefinition`1<TDocument> get_Update();
    public virtual WriteModelType get_ModelType();
    public virtual void ThrowIfNotValid();
}
public class MongoDB.Driver.UpdateOptions : object {
    private IEnumerable`1<ArrayFilterDefinition> _arrayFilters;
    private Nullable`1<bool> _bypassDocumentValidation;
    private Collation _collation;
    private BsonValue _comment;
    private BsonValue _hint;
    private bool _isUpsert;
    private BsonDocument _let;
    public IEnumerable`1<ArrayFilterDefinition> ArrayFilters { get; public set; }
    public Nullable`1<bool> BypassDocumentValidation { get; public set; }
    public Collation Collation { get; public set; }
    public BsonValue Comment { get; public set; }
    public BsonValue Hint { get; public set; }
    public bool IsUpsert { get; public set; }
    public BsonDocument Let { get; public set; }
    public IEnumerable`1<ArrayFilterDefinition> get_ArrayFilters();
    public void set_ArrayFilters(IEnumerable`1<ArrayFilterDefinition> value);
    public Nullable`1<bool> get_BypassDocumentValidation();
    public void set_BypassDocumentValidation(Nullable`1<bool> value);
    public Collation get_Collation();
    public void set_Collation(Collation value);
    public BsonValue get_Comment();
    public void set_Comment(BsonValue value);
    public BsonValue get_Hint();
    public void set_Hint(BsonValue value);
    public bool get_IsUpsert();
    public void set_IsUpsert(bool value);
    public BsonDocument get_Let();
    public void set_Let(BsonDocument value);
}
public abstract class MongoDB.Driver.UpdateResult : object {
    public bool IsAcknowledged { get; }
    public bool IsModifiedCountAvailable { get; }
    public long MatchedCount { get; }
    public long ModifiedCount { get; }
    public BsonValue UpsertedId { get; }
    internal static UpdateResult FromCore(BulkWriteResult result);
    public abstract virtual bool get_IsAcknowledged();
    public abstract virtual bool get_IsModifiedCountAvailable();
    public abstract virtual long get_MatchedCount();
    public abstract virtual long get_ModifiedCount();
    public abstract virtual BsonValue get_UpsertedId();
}
public abstract class MongoDB.Driver.ValueRangeWindowBoundary : RangeWindowBoundary {
    internal Type ValueType { get; }
    internal abstract virtual Type get_ValueType();
}
public class MongoDB.Driver.ValueRangeWindowBoundary`1 : ValueRangeWindowBoundary {
    private TValue _value;
    public TValue Value { get; }
    internal Type ValueType { get; }
    internal ValueRangeWindowBoundary`1(TValue value);
    public TValue get_Value();
    internal virtual Type get_ValueType();
    public virtual string ToString();
    internal virtual BsonValue Render(IBsonSerializer valueSerializer);
}
internal class MongoDB.Driver.ValueRangeWindowBoundaryConvertingValueSerializer`2 : SerializerBase`1<TValue> {
    private IBsonSerializer`1<TSortBy> _sortBySerializer;
    public ValueRangeWindowBoundaryConvertingValueSerializer`2(IBsonSerializer`1<TSortBy> sortBySerializer);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    private static TSortBy Coerce(TValue value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class MongoDB.Driver.ValueRangeWindowBoundaryConvertingValueSerializerFactory : object {
    private static IReadOnlyDictionary`2<Type, Type[]> __allowedConversions;
    private static ValueRangeWindowBoundaryConvertingValueSerializerFactory();
    public static IBsonSerializer Create(ValueRangeWindowBoundary boundary, IBsonSerializer sortBySerializer);
    private static bool IsAllowedConversion(Type valueType, Type sortByType);
}
public class MongoDB.Driver.VectorSearchOptions`1 : object {
    [CompilerGeneratedAttribute]
private FilterDefinition`1<TDocument> <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumberOfCandidates>k__BackingField;
    public FilterDefinition`1<TDocument> Filter { get; public set; }
    public string IndexName { get; public set; }
    public Nullable`1<int> NumberOfCandidates { get; public set; }
    [CompilerGeneratedAttribute]
public FilterDefinition`1<TDocument> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(FilterDefinition`1<TDocument> value);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
public void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumberOfCandidates();
    [CompilerGeneratedAttribute]
public void set_NumberOfCandidates(Nullable`1<int> value);
}
internal class MongoDB.Driver.WildcardIndexKeyDefinition`1 : IndexKeysDefinition`1<TDocument> {
    private FieldDefinition`1<TDocument> _field;
    public WildcardIndexKeyDefinition`1(FieldDefinition`1<TDocument> field);
    public virtual BsonDocument Render(RenderArgs`1<TDocument> args);
}
public class MongoDB.Driver.WriteConcernError : object {
    private int _code;
    private string _codeName;
    private BsonDocument _details;
    private IEnumerable`1<string> _errorLabels;
    private string _message;
    public int Code { get; }
    public string CodeName { get; }
    public BsonDocument Details { get; }
    public IEnumerable`1<string> ErrorLabels { get; }
    public string Message { get; }
    internal WriteConcernError(int code, string codeName, string message, BsonDocument details, IEnumerable`1<string> errorLabels);
    public int get_Code();
    public string get_CodeName();
    public BsonDocument get_Details();
    public IEnumerable`1<string> get_ErrorLabels();
    public string get_Message();
    public virtual string ToString();
    internal static WriteConcernError FromCore(BulkWriteConcernError error);
}
public class MongoDB.Driver.WriteError : object {
    private ServerErrorCategory _category;
    private int _code;
    private BsonDocument _details;
    private string _message;
    public ServerErrorCategory Category { get; }
    public int Code { get; }
    public BsonDocument Details { get; }
    public string Message { get; }
    internal WriteError(ServerErrorCategory category, int code, string message, BsonDocument details);
    public ServerErrorCategory get_Category();
    public int get_Code();
    public BsonDocument get_Details();
    public string get_Message();
    public virtual string ToString();
}
public abstract class MongoDB.Driver.WriteModel`1 : object {
    public WriteModelType ModelType { get; }
    internal static WriteModel`1<TDocument> FromCore(WriteRequest request);
    private static WriteModel`1<TDocument> ConvertDeleteRequest(DeleteRequest request);
    private static WriteModel`1<TDocument> ConvertInsertRequest(InsertRequest request);
    private static WriteModel`1<TDocument> ConvertUpdateRequest(UpdateRequest request);
    private static WriteModel`1<TDocument> ConvertToReplaceOne(UpdateRequest request);
    private static bool IsReplaceOneUpdate(BsonValue update);
    private static FilterDefinition`1<TDocument> UnwrapFilter(BsonDocument filter);
    private static UpdateDefinition`1<TDocument> UnwrapUpdate(BsonValue update);
    private static object Unwrap(BsonDocument wrapper);
    public abstract virtual WriteModelType get_ModelType();
    public virtual void ThrowIfNotValid();
}
public enum MongoDB.Driver.WriteModelType : Enum {
    public int value__;
    public static WriteModelType InsertOne;
    public static WriteModelType DeleteOne;
    public static WriteModelType DeleteMany;
    public static WriteModelType ReplaceOne;
    public static WriteModelType UpdateOne;
    public static WriteModelType UpdateMany;
}
internal static class MongoDB.Shared.DictionaryComparer : object {
    public static bool Equals(Dictionary`2<TKey, TValue> x, Dictionary`2<TKey, TValue> y);
}
internal static class MongoDB.Shared.SequenceComparer : object {
    public static bool Equals(IEnumerable`1<TValue> x, IEnumerable`1<TValue> y);
}
[EditorBrowsableAttribute("1")]
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
