[DefaultMemberAttribute("Item")]
public class MongoDB.Bson.BsonArray : BsonValue {
    private List`1<BsonValue> _values;
    public BsonType BsonType { get; }
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [ObsoleteAttribute("Use ToArray to ToList instead.")]
public IEnumerable`1<object> RawValues { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public BsonValue Item { get; public set; }
    public BsonArray(IEnumerable`1<bool> values);
    public BsonArray(IEnumerable`1<BsonValue> values);
    public BsonArray(IEnumerable`1<DateTime> values);
    public BsonArray(IEnumerable`1<double> values);
    public BsonArray(IEnumerable`1<int> values);
    public BsonArray(IEnumerable`1<long> values);
    public BsonArray(IEnumerable`1<ObjectId> values);
    public BsonArray(IEnumerable`1<string> values);
    public BsonArray(IEnumerable values);
    public BsonArray(int capacity);
    public static bool op_Inequality(BsonArray lhs, BsonArray rhs);
    public static bool op_Equality(BsonArray lhs, BsonArray rhs);
    public virtual BsonType get_BsonType();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual IEnumerable`1<object> get_RawValues();
    public virtual IEnumerable`1<BsonValue> get_Values();
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public static BsonArray Create(object value);
    public virtual BsonArray Add(BsonValue value);
    public virtual BsonArray AddRange(IEnumerable`1<bool> values);
    public virtual BsonArray AddRange(IEnumerable`1<BsonValue> values);
    public virtual BsonArray AddRange(IEnumerable`1<DateTime> values);
    public virtual BsonArray AddRange(IEnumerable`1<double> values);
    public virtual BsonArray AddRange(IEnumerable`1<int> values);
    public virtual BsonArray AddRange(IEnumerable`1<long> values);
    public virtual BsonArray AddRange(IEnumerable`1<ObjectId> values);
    public virtual BsonArray AddRange(IEnumerable`1<string> values);
    public virtual BsonArray AddRange(IEnumerable values);
    public virtual BsonValue Clone();
    public virtual void Clear();
    public virtual int CompareTo(BsonArray rhs);
    public virtual int CompareTo(BsonValue other);
    public virtual bool Contains(BsonValue value);
    public virtual void CopyTo(BsonValue[] array, int arrayIndex);
    [ObsoleteAttribute("Use ToArray or ToList instead.")]
public virtual void CopyTo(Object[] array, int arrayIndex);
    public virtual BsonValue DeepClone();
    public sealed virtual bool Equals(BsonArray obj);
    public virtual bool Equals(object obj);
    public virtual IEnumerator`1<BsonValue> GetEnumerator();
    public virtual int GetHashCode();
    public virtual int IndexOf(BsonValue value);
    public virtual int IndexOf(BsonValue value, int index);
    public virtual int IndexOf(BsonValue value, int index, int count);
    public virtual void Insert(int index, BsonValue value);
    public virtual bool Remove(BsonValue value);
    public virtual void RemoveAt(int index);
    public virtual BsonValue[] ToArray();
    public virtual List`1<BsonValue> ToList();
    public virtual string ToString();
    private sealed virtual override void System.Collections.Generic.ICollection<MongoDB.Bson.BsonValue>.Add(BsonValue value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MongoDB.Bson.BsonBinaryData : BsonValue {
    private Byte[] _bytes;
    private BsonBinarySubType _subType;
    private GuidRepresentation _guidRepresentation;
    public BsonType BsonType { get; }
    public Byte[] Bytes { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public GuidRepresentation GuidRepresentation { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public BsonBinarySubType SubType { get; }
    public BsonBinaryData(Byte[] bytes);
    public BsonBinaryData(Byte[] bytes, BsonBinarySubType subType);
    [ObsoleteAttribute("This constructor will be removed in a later release.")]
public BsonBinaryData(Byte[] bytes, BsonBinarySubType subType, GuidRepresentation guidRepresentation);
    [ObsoleteAttribute("Use the constructor that also takes a GuidRepresentation instead.")]
public BsonBinaryData(Guid guid);
    public BsonBinaryData(Guid guid, GuidRepresentation guidRepresentation);
    public virtual BsonType get_BsonType();
    public Byte[] get_Bytes();
    public GuidRepresentation get_GuidRepresentation();
    public virtual object get_RawValue();
    public BsonBinarySubType get_SubType();
    public static BsonBinaryData op_Implicit(Byte[] bytes);
    [ObsoleteAttribute("Use the BsonBinaryData constructor instead and specify a Guid representation.")]
public static BsonBinaryData op_Implicit(Guid value);
    public static bool op_Inequality(BsonBinaryData lhs, BsonBinaryData rhs);
    public static bool op_Equality(BsonBinaryData lhs, BsonBinaryData rhs);
    public static BsonBinaryData Create(object value);
    public sealed virtual int CompareTo(BsonBinaryData other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonBinaryData rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Guid ToGuid();
    public Guid ToGuid(GuidRepresentation guidRepresentation);
    public virtual string ToString();
}
public enum MongoDB.Bson.BsonBinarySubType : Enum {
    public int value__;
    public static BsonBinarySubType Binary;
    public static BsonBinarySubType Function;
    [ObsoleteAttribute("Use Binary instead")]
public static BsonBinarySubType OldBinary;
    public static BsonBinarySubType UuidLegacy;
    public static BsonBinarySubType UuidStandard;
    public static BsonBinarySubType MD5;
    public static BsonBinarySubType Encrypted;
    public static BsonBinarySubType Column;
    public static BsonBinarySubType Sensitive;
    public static BsonBinarySubType UserDefined;
}
public class MongoDB.Bson.BsonBoolean : BsonValue {
    private static BsonBoolean __falseInstance;
    private static BsonBoolean __trueInstance;
    private bool _value;
    public static BsonBoolean False { get; }
    public static BsonBoolean True { get; }
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public bool Value { get; }
    public BsonBoolean(bool value);
    private static BsonBoolean();
    public static BsonBoolean get_False();
    public static BsonBoolean get_True();
    public virtual BsonType get_BsonType();
    public virtual object get_RawValue();
    public bool get_Value();
    public static BsonBoolean op_Implicit(bool value);
    public static bool op_Inequality(BsonBoolean lhs, BsonBoolean rhs);
    public static bool op_Equality(BsonBoolean lhs, BsonBoolean rhs);
    public static BsonBoolean Create(object value);
    public sealed virtual int CompareTo(BsonBoolean other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonBoolean rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
}
public static class MongoDB.Bson.BsonConstants : object {
    private static long __dateTimeMaxValueMillisecondsSinceEpoch;
    private static long __dateTimeMinValueMillisecondsSinceEpoch;
    private static DateTime __unixEpoch;
    public static long DateTimeMaxValueMillisecondsSinceEpoch { get; }
    public static long DateTimeMinValueMillisecondsSinceEpoch { get; }
    public static DateTime UnixEpoch { get; }
    private static BsonConstants();
    public static long get_DateTimeMaxValueMillisecondsSinceEpoch();
    public static long get_DateTimeMinValueMillisecondsSinceEpoch();
    public static DateTime get_UnixEpoch();
}
public class MongoDB.Bson.BsonDateTime : BsonValue {
    private long _millisecondsSinceEpoch;
    public BsonType BsonType { get; }
    public bool IsValidDateTime { get; }
    public long MillisecondsSinceEpoch { get; }
    [ObsoleteAttribute("Use MillisecondsSinceEpoch instead.")]
public object RawValue { get; }
    [ObsoleteAttribute("Use ToUniversalTime instead.")]
public DateTime Value { get; }
    public BsonDateTime(DateTime value);
    public BsonDateTime(long millisecondsSinceEpoch);
    public virtual BsonType get_BsonType();
    public virtual bool get_IsValidDateTime();
    public long get_MillisecondsSinceEpoch();
    public virtual object get_RawValue();
    public DateTime get_Value();
    public static BsonDateTime op_Implicit(DateTime value);
    public static bool op_Inequality(BsonDateTime lhs, BsonDateTime rhs);
    public static bool op_Equality(BsonDateTime lhs, BsonDateTime rhs);
    public static BsonDateTime Create(object value);
    public sealed virtual int CompareTo(BsonDateTime other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonDateTime rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual DateTime ToLocalTime();
    public virtual Nullable`1<DateTime> ToNullableLocalTime();
    public virtual Nullable`1<DateTime> ToNullableUniversalTime();
    public virtual DateTime ToUniversalTime();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual DateTime IConvertibleToDateTimeImplementation(IFormatProvider provider);
}
public class MongoDB.Bson.BsonDecimal128 : BsonValue {
    private Decimal128 _value;
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public Decimal128 Value { get; }
    public BsonDecimal128(Decimal128 value);
    public virtual BsonType get_BsonType();
    public virtual object get_RawValue();
    public Decimal128 get_Value();
    public static BsonDecimal128 op_Implicit(Decimal128 value);
    public static bool op_Inequality(BsonDecimal128 lhs, BsonDecimal128 rhs);
    public static bool op_Equality(BsonDecimal128 lhs, BsonDecimal128 rhs);
    public static BsonDecimal128 Create(object value);
    public sealed virtual int CompareTo(BsonDecimal128 other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonDecimal128 rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual decimal ToDecimal();
    public virtual Decimal128 ToDecimal128();
    public virtual double ToDouble();
    public virtual int ToInt32();
    public virtual long ToInt64();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
    protected virtual bool OperatorEqualsImplementation(BsonValue rhs);
}
public static class MongoDB.Bson.BsonDefaults : object {
    private static bool __dynamicArraySerializerWasSet;
    private static IBsonSerializer __dynamicArraySerializer;
    private static bool __dynamicDocumentSerializerWasSet;
    private static IBsonSerializer __dynamicDocumentSerializer;
    private static GuidRepresentation __guidRepresentation;
    private static GuidRepresentationMode __guidRepresentationMode;
    private static int __maxDocumentSize;
    private static int __maxSerializationDepth;
    public static IBsonSerializer DynamicArraySerializer { get; public set; }
    public static IBsonSerializer DynamicDocumentSerializer { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public static GuidRepresentation GuidRepresentation { get; public set; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public static GuidRepresentationMode GuidRepresentationMode { get; public set; }
    public static int MaxDocumentSize { get; public set; }
    public static int MaxSerializationDepth { get; public set; }
    private static BsonDefaults();
    public static IBsonSerializer get_DynamicArraySerializer();
    public static void set_DynamicArraySerializer(IBsonSerializer value);
    public static IBsonSerializer get_DynamicDocumentSerializer();
    public static void set_DynamicDocumentSerializer(IBsonSerializer value);
    public static GuidRepresentation get_GuidRepresentation();
    public static void set_GuidRepresentation(GuidRepresentation value);
    public static GuidRepresentationMode get_GuidRepresentationMode();
    public static void set_GuidRepresentationMode(GuidRepresentationMode value);
    public static int get_MaxDocumentSize();
    public static void set_MaxDocumentSize(int value);
    public static int get_MaxSerializationDepth();
    public static void set_MaxSerializationDepth(int value);
}
[DefaultMemberAttribute("Item")]
public class MongoDB.Bson.BsonDocument : BsonValue {
    private static int __indexesThreshold;
    private List`1<BsonElement> _elements;
    private Dictionary`2<string, int> _indexes;
    private bool _allowDuplicateNames;
    public bool AllowDuplicateNames { get; public set; }
    public BsonType BsonType { get; }
    public int ElementCount { get; }
    public IEnumerable`1<BsonElement> Elements { get; }
    public IEnumerable`1<string> Names { get; }
    [ObsoleteAttribute("Use Values instead.")]
public IEnumerable`1<object> RawValues { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public BsonValue Item { get; public set; }
    [ObsoleteAttribute("Use GetValue(string name, BsonValue defaultValue) instead.")]
public BsonValue Item { get; }
    public BsonValue Item { get; public set; }
    public BsonDocument(bool allowDuplicateNames);
    public BsonDocument(BsonElement element);
    public BsonDocument(BsonDocument document);
    public BsonDocument(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead.")]
public BsonDocument(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public BsonDocument(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    [ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead.")]
public BsonDocument(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    public BsonDocument(IDictionary dictionary);
    [ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead.")]
public BsonDocument(IDictionary dictionary, IEnumerable keys);
    public BsonDocument(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use BsonDocument(IEnumerable<BsonElement> elements) instead.")]
public BsonDocument(BsonElement[] elements);
    public BsonDocument(string name, BsonValue value);
    public static bool op_Inequality(BsonDocument lhs, BsonDocument rhs);
    public static bool op_Equality(BsonDocument lhs, BsonDocument rhs);
    public bool get_AllowDuplicateNames();
    public void set_AllowDuplicateNames(bool value);
    public virtual BsonType get_BsonType();
    public virtual int get_ElementCount();
    public virtual IEnumerable`1<BsonElement> get_Elements();
    public virtual IEnumerable`1<string> get_Names();
    public virtual IEnumerable`1<object> get_RawValues();
    public virtual IEnumerable`1<BsonValue> get_Values();
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public virtual BsonValue get_Item(string name, BsonValue defaultValue);
    public virtual BsonValue get_Item(string name);
    public virtual void set_Item(string name, BsonValue value);
    public static BsonDocument Create(object value);
    public static BsonDocument Parse(string json);
    public static bool TryParse(string s, BsonDocument& result);
    public virtual BsonDocument Add(BsonElement element);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IDictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IDictionary dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(IDictionary dictionary, IEnumerable keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(BsonElement[] elements);
    public virtual BsonDocument Add(string name, BsonValue value);
    public virtual BsonDocument Add(string name, BsonValue value, bool condition);
    public virtual BsonDocument Add(string name, Func`1<BsonValue> valueFactory, bool condition);
    public virtual BsonDocument AddRange(Dictionary`2<string, object> dictionary);
    public virtual BsonDocument AddRange(IDictionary dictionary);
    public virtual BsonDocument AddRange(IEnumerable`1<BsonElement> elements);
    public virtual BsonDocument AddRange(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    public virtual void Clear();
    public virtual BsonValue Clone();
    public virtual int CompareTo(BsonDocument rhs);
    public virtual int CompareTo(BsonValue other);
    public virtual bool Contains(string name);
    public virtual bool ContainsValue(BsonValue value);
    public virtual BsonValue DeepClone();
    public sealed virtual bool Equals(BsonDocument obj);
    public virtual bool Equals(object obj);
    public virtual BsonElement GetElement(int index);
    public virtual BsonElement GetElement(string name);
    public virtual IEnumerator`1<BsonElement> GetEnumerator();
    public virtual int GetHashCode();
    public virtual BsonValue GetValue(int index);
    public virtual BsonValue GetValue(string name);
    public virtual BsonValue GetValue(string name, BsonValue defaultValue);
    public virtual int IndexOfName(string name);
    public virtual void InsertAt(int index, BsonElement element);
    public virtual BsonDocument Merge(BsonDocument document);
    public virtual BsonDocument Merge(BsonDocument document, bool overwriteExistingElements);
    public virtual void Remove(string name);
    public virtual void RemoveAt(int index);
    public virtual void RemoveElement(BsonElement element);
    public virtual BsonDocument Set(int index, BsonValue value);
    public virtual BsonDocument Set(string name, BsonValue value);
    public virtual BsonDocument SetElement(int index, BsonElement element);
    public virtual BsonDocument SetElement(BsonElement element);
    public Dictionary`2<string, object> ToDictionary();
    public Hashtable ToHashtable();
    public virtual string ToString();
    public virtual bool TryGetElement(string name, BsonElement& value);
    public virtual bool TryGetValue(string name, BsonValue& value);
    private void RebuildIndexes();
    private sealed virtual override BsonDocument MongoDB.Bson.IConvertibleToBsonDocument.ToBsonDocument();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MongoDB.Bson.BsonDocumentWrapper : MaterializedOnDemandBsonDocument {
    private object _wrapped;
    private IBsonSerializer _serializer;
    public IBsonSerializer Serializer { get; }
    public object Wrapped { get; }
    public BsonDocumentWrapper(object value);
    public BsonDocumentWrapper(object value, IBsonSerializer serializer);
    public IBsonSerializer get_Serializer();
    public object get_Wrapped();
    public static BsonDocumentWrapper Create(TNominalType value);
    public static BsonDocumentWrapper Create(Type nominalType, object value);
    public static IEnumerable`1<BsonDocumentWrapper> CreateMultiple(IEnumerable`1<TNominalType> values);
    public static IEnumerable`1<BsonDocumentWrapper> CreateMultiple(Type nominalType, IEnumerable values);
    public virtual BsonValue Clone();
    protected virtual IEnumerable`1<BsonElement> Materialize();
    protected virtual void MaterializeCompleted();
}
public class MongoDB.Bson.BsonDouble : BsonValue {
    private static int __minPrecreatedValue;
    private static int __maxPrecreatedValue;
    private static BsonDouble[] __precreatedInstances;
    private double _value;
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public double Value { get; }
    private static BsonDouble();
    public BsonDouble(double value);
    public virtual BsonType get_BsonType();
    public virtual object get_RawValue();
    public double get_Value();
    public static BsonDouble op_Implicit(double value);
    public static bool op_Inequality(BsonDouble lhs, BsonDouble rhs);
    public static bool op_Equality(BsonDouble lhs, BsonDouble rhs);
    public static BsonDouble Create(object value);
    public sealed virtual int CompareTo(BsonDouble other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonDouble rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual decimal ToDecimal();
    public virtual Decimal128 ToDecimal128();
    public virtual double ToDouble();
    public virtual int ToInt32();
    public virtual long ToInt64();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
    protected virtual bool OperatorEqualsImplementation(BsonValue rhs);
}
public class MongoDB.Bson.BsonElement : ValueType {
    private string _name;
    private BsonValue _value;
    public string Name { get; }
    public BsonValue Value { get; }
    public BsonElement(string name, BsonValue value);
    public string get_Name();
    public BsonValue get_Value();
    public static bool op_Equality(BsonElement lhs, BsonElement rhs);
    public static bool op_Inequality(BsonElement lhs, BsonElement rhs);
    private static void ValidateElementName(string name);
    public BsonElement Clone();
    public BsonElement DeepClone();
    public sealed virtual int CompareTo(BsonElement other);
    public sealed virtual bool Equals(BsonElement rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MongoDB.Bson.BsonException : Exception {
    public BsonException(string message);
    public BsonException(string message, Exception innerException);
    public BsonException(string format, Object[] args);
    public BsonException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class MongoDB.Bson.BsonExtensionMethods : object {
    [ExtensionAttribute]
public static Byte[] ToBson(TNominalType obj, IBsonSerializer`1<TNominalType> serializer, BsonBinaryWriterSettings writerSettings, Action`1<Builder> configurator, BsonSerializationArgs args, int estimatedBsonSize);
    [ExtensionAttribute]
public static Byte[] ToBson(object obj, Type nominalType, BsonBinaryWriterSettings writerSettings, IBsonSerializer serializer, Action`1<Builder> configurator, BsonSerializationArgs args, int estimatedBsonSize);
    [ExtensionAttribute]
public static BsonDocument ToBsonDocument(TNominalType obj, IBsonSerializer`1<TNominalType> serializer, Action`1<Builder> configurator, BsonSerializationArgs args);
    [ExtensionAttribute]
public static BsonDocument ToBsonDocument(object obj, Type nominalType, IBsonSerializer serializer, Action`1<Builder> configurator, BsonSerializationArgs args);
    [ExtensionAttribute]
public static string ToJson(TNominalType obj, JsonWriterSettings writerSettings, IBsonSerializer`1<TNominalType> serializer, Action`1<Builder> configurator, BsonSerializationArgs args);
    [ExtensionAttribute]
public static string ToJson(object obj, Type nominalType, JsonWriterSettings writerSettings, IBsonSerializer serializer, Action`1<Builder> configurator, BsonSerializationArgs args);
}
public class MongoDB.Bson.BsonInt32 : BsonValue {
    private static int __minPrecreatedValue;
    private static int __maxPrecreatedValue;
    private static BsonInt32[] __precreatedInstances;
    private int _value;
    [ObsoleteAttribute("Use (BsonInt32)(-1) instead.")]
public static BsonInt32 MinusOne { get; }
    [ObsoleteAttribute("Use (BsonInt32)0 instead.")]
public static BsonInt32 Zero { get; }
    [ObsoleteAttribute("Use (BsonInt32)1 instead.")]
public static BsonInt32 One { get; }
    [ObsoleteAttribute("Use (BsonInt32)2 instead.")]
public static BsonInt32 Two { get; }
    [ObsoleteAttribute("Use (BsonInt32)3 instead.")]
public static BsonInt32 Three { get; }
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public int Value { get; }
    private static BsonInt32();
    public BsonInt32(int value);
    public static BsonInt32 get_MinusOne();
    public static BsonInt32 get_Zero();
    public static BsonInt32 get_One();
    public static BsonInt32 get_Two();
    public static BsonInt32 get_Three();
    public virtual BsonType get_BsonType();
    public virtual object get_RawValue();
    public int get_Value();
    public static BsonInt32 op_Implicit(int value);
    public static bool op_Inequality(BsonInt32 lhs, BsonInt32 rhs);
    public static bool op_Equality(BsonInt32 lhs, BsonInt32 rhs);
    public static BsonInt32 Create(object value);
    public sealed virtual int CompareTo(BsonInt32 other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonInt32 rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual decimal ToDecimal();
    public virtual Decimal128 ToDecimal128();
    public virtual double ToDouble();
    public virtual int ToInt32();
    public virtual long ToInt64();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual char IConvertibleToCharImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
    protected virtual bool OperatorEqualsImplementation(BsonValue rhs);
}
public class MongoDB.Bson.BsonInt64 : BsonValue {
    private static long __minPrecreatedValue;
    private static long __maxPrecreatedValue;
    private static BsonInt64[] __precreatedInstances;
    private long _value;
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public long Value { get; }
    private static BsonInt64();
    public BsonInt64(long value);
    public virtual BsonType get_BsonType();
    public virtual object get_RawValue();
    public long get_Value();
    public static BsonInt64 op_Implicit(long value);
    public static bool op_Inequality(BsonInt64 lhs, BsonInt64 rhs);
    public static bool op_Equality(BsonInt64 lhs, BsonInt64 rhs);
    public static BsonInt64 Create(object value);
    public sealed virtual int CompareTo(BsonInt64 other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonInt64 rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual decimal ToDecimal();
    public virtual Decimal128 ToDecimal128();
    public virtual double ToDouble();
    public virtual int ToInt32();
    public virtual long ToInt64();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual char IConvertibleToCharImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
    protected virtual bool OperatorEqualsImplementation(BsonValue rhs);
}
public class MongoDB.Bson.BsonInternalException : BsonException {
    public BsonInternalException(string message);
    public BsonInternalException(string message, Exception innerException);
    public BsonInternalException(SerializationInfo info, StreamingContext context);
}
public class MongoDB.Bson.BsonJavaScript : BsonValue {
    private string _code;
    public BsonType BsonType { get; }
    public string Code { get; }
    public BsonJavaScript(string code);
    public virtual BsonType get_BsonType();
    public string get_Code();
    public static bool op_Inequality(BsonJavaScript lhs, BsonJavaScript rhs);
    public static bool op_Equality(BsonJavaScript lhs, BsonJavaScript rhs);
    public static BsonJavaScript op_Implicit(string code);
    public static BsonJavaScript Create(object value);
    public sealed virtual int CompareTo(BsonJavaScript other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonJavaScript rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MongoDB.Bson.BsonJavaScriptWithScope : BsonJavaScript {
    private BsonDocument _scope;
    public BsonType BsonType { get; }
    public BsonDocument Scope { get; }
    public BsonJavaScriptWithScope(string code, BsonDocument scope);
    public static bool op_Inequality(BsonJavaScriptWithScope lhs, BsonJavaScriptWithScope rhs);
    public static bool op_Equality(BsonJavaScriptWithScope lhs, BsonJavaScriptWithScope rhs);
    public virtual BsonType get_BsonType();
    public BsonDocument get_Scope();
    public static BsonJavaScriptWithScope Create(object value);
    public virtual BsonValue Clone();
    public virtual BsonValue DeepClone();
    public sealed virtual int CompareTo(BsonJavaScriptWithScope other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonJavaScriptWithScope rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MongoDB.Bson.BsonMaxKey : BsonValue {
    private static BsonMaxKey __value;
    public static BsonMaxKey Value { get; }
    public BsonType BsonType { get; }
    private static BsonMaxKey();
    public static bool op_Inequality(BsonMaxKey lhs, BsonMaxKey rhs);
    public static bool op_Equality(BsonMaxKey lhs, BsonMaxKey rhs);
    public static BsonMaxKey get_Value();
    public virtual BsonType get_BsonType();
    public sealed virtual int CompareTo(BsonMaxKey other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonMaxKey rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MongoDB.Bson.BsonMinKey : BsonValue {
    private static BsonMinKey __value;
    public static BsonMinKey Value { get; }
    public BsonType BsonType { get; }
    private static BsonMinKey();
    public static bool op_Inequality(BsonMinKey lhs, BsonMinKey rhs);
    public static bool op_Equality(BsonMinKey lhs, BsonMinKey rhs);
    public static BsonMinKey get_Value();
    public virtual BsonType get_BsonType();
    public sealed virtual int CompareTo(BsonMinKey other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonMinKey rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class MongoDB.Bson.BsonNull : BsonValue {
    private static BsonNull __value;
    public static BsonNull Value { get; }
    public BsonType BsonType { get; }
    private static BsonNull();
    public static bool op_Inequality(BsonNull lhs, BsonNull rhs);
    public static bool op_Equality(BsonNull lhs, BsonNull rhs);
    public static BsonNull get_Value();
    public virtual BsonType get_BsonType();
    public sealed virtual int CompareTo(BsonNull other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonNull rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual Nullable`1<DateTime> ToNullableLocalTime();
    public virtual Nullable`1<DateTime> ToNullableUniversalTime();
    public virtual string ToString();
}
public class MongoDB.Bson.BsonObjectId : BsonValue {
    private static BsonObjectId __emptyInstance;
    private ObjectId _value;
    public static BsonObjectId Empty { get; }
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value.Timestamp instead.")]
public int Timestamp { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int Machine { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public short Pid { get; }
    [ObsoleteAttribute("Use Value.Increment instead.")]
public int Increment { get; }
    [ObsoleteAttribute("Use Value.CreationTime instead.")]
public DateTime CreationTime { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public ObjectId Value { get; }
    public BsonObjectId(ObjectId value);
    [ObsoleteAttribute("Use new BsonObjectId(ObjectId value) instead.")]
public BsonObjectId(Byte[] bytes);
    [ObsoleteAttribute("Use new BsonObjectId(new ObjectId(DateTime timestamp, int machine, short pid, int increment)) instead.")]
public BsonObjectId(DateTime timestamp, int machine, short pid, int increment);
    [ObsoleteAttribute("Use new BsonObjectId(new ObjectId(int timestamp, int machine, short pid, int increment)) instead.")]
public BsonObjectId(int timestamp, int machine, short pid, int increment);
    [ObsoleteAttribute("Use new BsonObjectId(new ObjectId(string value)) instead.")]
public BsonObjectId(string value);
    private static BsonObjectId();
    public static BsonObjectId get_Empty();
    public virtual BsonType get_BsonType();
    public int get_Timestamp();
    public int get_Machine();
    public short get_Pid();
    public int get_Increment();
    public DateTime get_CreationTime();
    public virtual object get_RawValue();
    public ObjectId get_Value();
    public static BsonObjectId op_Implicit(ObjectId value);
    public static bool op_Inequality(BsonObjectId lhs, BsonObjectId rhs);
    public static bool op_Equality(BsonObjectId lhs, BsonObjectId rhs);
    public static BsonObjectId Create(object value);
    [ObsoleteAttribute("Use new BsonObjectId(ObjectId.GenerateNewId()) instead.")]
public static BsonObjectId GenerateNewId();
    [ObsoleteAttribute("Use new BsonObjectId(ObjectId.GenerateNewId(DateTime timestamp)) instead.")]
public static BsonObjectId GenerateNewId(DateTime timestamp);
    [ObsoleteAttribute("Use new BsonObjectId(ObjectId.GenerateNewId(int timestamp)) instead.")]
public static BsonObjectId GenerateNewId(int timestamp);
    [ObsoleteAttribute("Use new BsonObjectId(ObjectId.Parse(string s)) instead.")]
public static BsonObjectId Parse(string s);
    [ObsoleteAttribute("Use ObjectId.TryParse instead.")]
public static bool TryParse(string s, BsonObjectId& value);
    public sealed virtual int CompareTo(BsonObjectId other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonObjectId rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [ObsoleteAttribute("Use Value.ToByteArray() instead.")]
public Byte[] ToByteArray();
    public virtual string ToString();
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
}
public class MongoDB.Bson.BsonRegularExpression : BsonValue {
    private string _pattern;
    private string _options;
    public BsonType BsonType { get; }
    public string Pattern { get; }
    public string Options { get; }
    public BsonRegularExpression(string pattern);
    public BsonRegularExpression(string pattern, string options);
    public BsonRegularExpression(Regex regex);
    public virtual BsonType get_BsonType();
    public string get_Pattern();
    public string get_Options();
    public static BsonRegularExpression op_Implicit(Regex value);
    public static BsonRegularExpression op_Implicit(string value);
    public static bool op_Inequality(BsonRegularExpression lhs, BsonRegularExpression rhs);
    public static bool op_Equality(BsonRegularExpression lhs, BsonRegularExpression rhs);
    public static BsonRegularExpression Create(object value);
    public sealed virtual int CompareTo(BsonRegularExpression other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonRegularExpression rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Regex ToRegex();
    public virtual string ToString();
    private string SortOptionsIfNecessary(string options);
    [CompilerGeneratedAttribute]
internal static bool <SortOptionsIfNecessary>g__IsAlreadySorted|23_0(string value);
}
public class MongoDB.Bson.BsonSerializationException : BsonException {
    public BsonSerializationException(string message);
    public BsonSerializationException(string message, Exception innerException);
    public BsonSerializationException(SerializationInfo info, StreamingContext context);
}
public class MongoDB.Bson.BsonString : BsonValue {
    private static BsonString __emptyInstance;
    private string _value;
    public static BsonString Empty { get; }
    public BsonType BsonType { get; }
    [ObsoleteAttribute("Use Value instead.")]
public object RawValue { get; }
    public string Value { get; }
    public BsonString(string value);
    private static BsonString();
    public static BsonString get_Empty();
    public virtual BsonType get_BsonType();
    public virtual object get_RawValue();
    public string get_Value();
    public static BsonString op_Implicit(string value);
    public static bool op_Inequality(BsonString lhs, BsonString rhs);
    public static bool op_Equality(BsonString lhs, BsonString rhs);
    public static BsonString Create(object value);
    public sealed virtual int CompareTo(BsonString other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonString rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual decimal ToDecimal();
    public virtual Decimal128 ToDecimal128();
    public virtual double ToDouble();
    public virtual int ToInt32();
    public virtual long ToInt64();
    public virtual string ToString();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual char IConvertibleToCharImplementation(IFormatProvider provider);
    protected virtual DateTime IConvertibleToDateTimeImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
}
public class MongoDB.Bson.BsonSymbol : BsonValue {
    private string _name;
    public BsonType BsonType { get; }
    public string Name { get; }
    internal BsonSymbol(string name);
    public virtual BsonType get_BsonType();
    public string get_Name();
    public static BsonSymbol op_Implicit(string name);
    public static bool op_Inequality(BsonSymbol lhs, BsonSymbol rhs);
    public static bool op_Equality(BsonSymbol lhs, BsonSymbol rhs);
    public static BsonSymbol Create(object value);
    public sealed virtual int CompareTo(BsonSymbol other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonSymbol rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class MongoDB.Bson.BsonSymbolTable : object {
    private static object __staticLock;
    private static Dictionary`2<string, BsonSymbol> __symbolTable;
    private static BsonSymbolTable();
    public static BsonSymbol Lookup(string name);
}
public class MongoDB.Bson.BsonTimestamp : BsonValue {
    private long _value;
    public BsonType BsonType { get; }
    public long Value { get; }
    public int Increment { get; }
    public int Timestamp { get; }
    public BsonTimestamp(long value);
    public BsonTimestamp(int timestamp, int increment);
    public static bool op_Inequality(BsonTimestamp lhs, BsonTimestamp rhs);
    public static bool op_Equality(BsonTimestamp lhs, BsonTimestamp rhs);
    public virtual BsonType get_BsonType();
    public long get_Value();
    public int get_Increment();
    public int get_Timestamp();
    public static BsonTimestamp Create(object value);
    public sealed virtual int CompareTo(BsonTimestamp other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonTimestamp rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum MongoDB.Bson.BsonType : Enum {
    public int value__;
    public static BsonType EndOfDocument;
    public static BsonType Double;
    public static BsonType String;
    public static BsonType Document;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType ObjectId;
    public static BsonType Boolean;
    public static BsonType DateTime;
    public static BsonType Null;
    public static BsonType RegularExpression;
    public static BsonType JavaScript;
    public static BsonType Symbol;
    public static BsonType JavaScriptWithScope;
    public static BsonType Int32;
    public static BsonType Timestamp;
    public static BsonType Int64;
    public static BsonType Decimal128;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
public static class MongoDB.Bson.BsonTypeMapper : object {
    private static Dictionary`2<Type, Conversion> __fromMappings;
    private static Dictionary`2<Mapping, Conversion> __fromToMappings;
    private static Dictionary`2<Type, ICustomBsonTypeMapper> __customTypeMappers;
    private static BsonTypeMapper();
    public static BsonValue MapToBsonValue(object value);
    public static BsonValue MapToBsonValue(object value, BsonType bsonType);
    public static object MapToDotNetValue(BsonValue bsonValue);
    public static object MapToDotNetValue(BsonValue bsonValue, BsonTypeMapperOptions options);
    public static void RegisterCustomTypeMapper(Type type, ICustomBsonTypeMapper customTypeMapper);
    public static bool TryMapToBsonValue(object value, BsonValue& bsonValue);
    private static BsonValue Convert(object value, Conversion conversion);
}
public class MongoDB.Bson.BsonTypeMapperOptions : object {
    private static BsonTypeMapperOptions __defaults;
    private bool _isFrozen;
    private DuplicateNameHandling _duplicateNameHandling;
    private Type _mapBsonArrayTo;
    private Type _mapBsonDocumentTo;
    private bool _mapOldBinaryToByteArray;
    public static BsonTypeMapperOptions Defaults { get; public set; }
    public DuplicateNameHandling DuplicateNameHandling { get; public set; }
    public bool IsFrozen { get; }
    public Type MapBsonArrayTo { get; public set; }
    public Type MapBsonDocumentTo { get; public set; }
    public bool MapOldBinaryToByteArray { get; public set; }
    private static BsonTypeMapperOptions();
    public static BsonTypeMapperOptions get_Defaults();
    public static void set_Defaults(BsonTypeMapperOptions value);
    public DuplicateNameHandling get_DuplicateNameHandling();
    public void set_DuplicateNameHandling(DuplicateNameHandling value);
    public bool get_IsFrozen();
    public Type get_MapBsonArrayTo();
    public void set_MapBsonArrayTo(Type value);
    public Type get_MapBsonDocumentTo();
    public void set_MapBsonDocumentTo(Type value);
    public bool get_MapOldBinaryToByteArray();
    public void set_MapOldBinaryToByteArray(bool value);
    public BsonTypeMapperOptions Clone();
    public BsonTypeMapperOptions Freeze();
}
public class MongoDB.Bson.BsonUndefined : BsonValue {
    private static BsonUndefined __value;
    public static BsonUndefined Value { get; }
    public BsonType BsonType { get; }
    private static BsonUndefined();
    public static bool op_Inequality(BsonUndefined lhs, BsonUndefined rhs);
    public static bool op_Equality(BsonUndefined lhs, BsonUndefined rhs);
    public static BsonUndefined get_Value();
    public virtual BsonType get_BsonType();
    public sealed virtual int CompareTo(BsonUndefined other);
    public virtual int CompareTo(BsonValue other);
    public sealed virtual bool Equals(BsonUndefined rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual string ToString();
}
public static class MongoDB.Bson.BsonUtils : object {
    public static string GetFriendlyTypeName(Type type);
    public static Byte[] ParseHexString(string s);
    public static DateTime ToDateTimeFromMillisecondsSinceEpoch(long millisecondsSinceEpoch);
    public static char ToHexChar(int value);
    public static string ToHexString(Byte[] bytes);
    public static DateTime ToLocalTime(DateTime dateTime);
    public static long ToMillisecondsSinceEpoch(DateTime dateTime);
    public static long ToSecondsSinceEpoch(DateTime dateTime);
    public static DateTime ToUniversalTime(DateTime dateTime);
    public static bool TryParseHexString(string s, Byte[]& bytes);
    private static bool TryParseHexChar(char c, Int32& value);
}
[DefaultMemberAttribute("Item")]
public abstract class MongoDB.Bson.BsonValue : object {
    private static Dictionary`2<BsonType, int> __bsonTypeSortOrder;
    public bool AsBoolean { get; }
    public BsonArray AsBsonArray { get; }
    public BsonBinaryData AsBsonBinaryData { get; }
    public BsonDateTime AsBsonDateTime { get; }
    public BsonDocument AsBsonDocument { get; }
    public BsonJavaScript AsBsonJavaScript { get; }
    public BsonJavaScriptWithScope AsBsonJavaScriptWithScope { get; }
    public BsonMaxKey AsBsonMaxKey { get; }
    public BsonMinKey AsBsonMinKey { get; }
    public BsonNull AsBsonNull { get; }
    public BsonRegularExpression AsBsonRegularExpression { get; }
    public BsonSymbol AsBsonSymbol { get; }
    public BsonTimestamp AsBsonTimestamp { get; }
    public BsonUndefined AsBsonUndefined { get; }
    public BsonValue AsBsonValue { get; }
    public Byte[] AsByteArray { get; }
    [ObsoleteAttribute("Use ToUniversalTime instead.")]
public DateTime AsDateTime { get; }
    public decimal AsDecimal { get; }
    public Decimal128 AsDecimal128 { get; }
    public double AsDouble { get; }
    public Guid AsGuid { get; }
    public int AsInt32 { get; }
    [ObsoleteAttribute("Use ToLocalTime instead.")]
public DateTime AsLocalTime { get; }
    public long AsInt64 { get; }
    public Nullable`1<bool> AsNullableBoolean { get; }
    [ObsoleteAttribute("Use ToNullableUniversalTime instead.")]
public Nullable`1<DateTime> AsNullableDateTime { get; }
    public Nullable`1<decimal> AsNullableDecimal { get; }
    public Nullable`1<Decimal128> AsNullableDecimal128 { get; }
    public Nullable`1<double> AsNullableDouble { get; }
    public Nullable`1<Guid> AsNullableGuid { get; }
    public Nullable`1<int> AsNullableInt32 { get; }
    public Nullable`1<long> AsNullableInt64 { get; }
    public Nullable`1<ObjectId> AsNullableObjectId { get; }
    public ObjectId AsObjectId { get; }
    public Regex AsRegex { get; }
    public string AsString { get; }
    [ObsoleteAttribute("Use ToUniversalTime instead.")]
public DateTime AsUniversalTime { get; }
    public BsonType BsonType { get; }
    public bool IsBoolean { get; }
    public bool IsBsonArray { get; }
    public bool IsBsonBinaryData { get; }
    public bool IsBsonDateTime { get; }
    public bool IsBsonDocument { get; }
    public bool IsBsonJavaScript { get; }
    public bool IsBsonJavaScriptWithScope { get; }
    public bool IsBsonMaxKey { get; }
    public bool IsBsonMinKey { get; }
    public bool IsBsonNull { get; }
    public bool IsBsonRegularExpression { get; }
    public bool IsBsonSymbol { get; }
    public bool IsBsonTimestamp { get; }
    public bool IsBsonUndefined { get; }
    [ObsoleteAttribute("Use IsValidDateTime instead.")]
public bool IsDateTime { get; }
    public bool IsDecimal128 { get; }
    public bool IsDouble { get; }
    public bool IsGuid { get; }
    public bool IsInt32 { get; }
    public bool IsInt64 { get; }
    public bool IsNumeric { get; }
    public bool IsObjectId { get; }
    public bool IsString { get; }
    public bool IsValidDateTime { get; }
    [ObsoleteAttribute("Use Value property of subclasses or BsonTypeMapper.MapToDotNetValue instead.")]
public object RawValue { get; }
    public BsonValue Item { get; public set; }
    public BsonValue Item { get; public set; }
    private static BsonValue();
    public bool get_AsBoolean();
    public BsonArray get_AsBsonArray();
    public BsonBinaryData get_AsBsonBinaryData();
    public BsonDateTime get_AsBsonDateTime();
    public BsonDocument get_AsBsonDocument();
    public BsonJavaScript get_AsBsonJavaScript();
    public BsonJavaScriptWithScope get_AsBsonJavaScriptWithScope();
    public BsonMaxKey get_AsBsonMaxKey();
    public BsonMinKey get_AsBsonMinKey();
    public BsonNull get_AsBsonNull();
    public BsonRegularExpression get_AsBsonRegularExpression();
    public BsonSymbol get_AsBsonSymbol();
    public BsonTimestamp get_AsBsonTimestamp();
    public BsonUndefined get_AsBsonUndefined();
    public BsonValue get_AsBsonValue();
    public Byte[] get_AsByteArray();
    public DateTime get_AsDateTime();
    public decimal get_AsDecimal();
    public Decimal128 get_AsDecimal128();
    public double get_AsDouble();
    public Guid get_AsGuid();
    public int get_AsInt32();
    public DateTime get_AsLocalTime();
    public long get_AsInt64();
    public Nullable`1<bool> get_AsNullableBoolean();
    public Nullable`1<DateTime> get_AsNullableDateTime();
    public Nullable`1<decimal> get_AsNullableDecimal();
    public Nullable`1<Decimal128> get_AsNullableDecimal128();
    public Nullable`1<double> get_AsNullableDouble();
    public Nullable`1<Guid> get_AsNullableGuid();
    public Nullable`1<int> get_AsNullableInt32();
    public Nullable`1<long> get_AsNullableInt64();
    public Nullable`1<ObjectId> get_AsNullableObjectId();
    public ObjectId get_AsObjectId();
    public Regex get_AsRegex();
    public string get_AsString();
    public DateTime get_AsUniversalTime();
    public abstract virtual BsonType get_BsonType();
    public bool get_IsBoolean();
    public bool get_IsBsonArray();
    public bool get_IsBsonBinaryData();
    public bool get_IsBsonDateTime();
    public bool get_IsBsonDocument();
    public bool get_IsBsonJavaScript();
    public bool get_IsBsonJavaScriptWithScope();
    public bool get_IsBsonMaxKey();
    public bool get_IsBsonMinKey();
    public bool get_IsBsonNull();
    public bool get_IsBsonRegularExpression();
    public bool get_IsBsonSymbol();
    public bool get_IsBsonTimestamp();
    public bool get_IsBsonUndefined();
    public bool get_IsDateTime();
    public bool get_IsDecimal128();
    public bool get_IsDouble();
    public bool get_IsGuid();
    public bool get_IsInt32();
    public bool get_IsInt64();
    public bool get_IsNumeric();
    public bool get_IsObjectId();
    public bool get_IsString();
    public virtual bool get_IsValidDateTime();
    public virtual object get_RawValue();
    public static bool op_Explicit(BsonValue value);
    public static Nullable`1<bool> op_Explicit(BsonValue value);
    public static BsonValue op_Implicit(bool value);
    public static BsonValue op_Implicit(Nullable`1<bool> value);
    public static BsonValue op_Implicit(Byte[] value);
    public static BsonValue op_Implicit(DateTime value);
    public static BsonValue op_Implicit(Nullable`1<DateTime> value);
    public static BsonValue op_Implicit(decimal value);
    public static BsonValue op_Implicit(Nullable`1<decimal> value);
    public static BsonValue op_Implicit(Decimal128 value);
    public static BsonValue op_Implicit(Nullable`1<Decimal128> value);
    public static BsonValue op_Implicit(double value);
    public static BsonValue op_Implicit(Nullable`1<double> value);
    public static BsonValue op_Implicit(Enum value);
    [ObsoleteAttribute("Use the BsonBinaryData constructor instead and specify a Guid representation.")]
public static BsonValue op_Implicit(Guid value);
    [ObsoleteAttribute("Use the BsonBinaryData constructor instead and specify a Guid representation.")]
public static BsonValue op_Implicit(Nullable`1<Guid> value);
    public static BsonValue op_Implicit(int value);
    public static BsonValue op_Implicit(Nullable`1<int> value);
    public static BsonValue op_Implicit(long value);
    public static BsonValue op_Implicit(Nullable`1<long> value);
    public static BsonValue op_Implicit(ObjectId value);
    public static BsonValue op_Implicit(Nullable`1<ObjectId> value);
    public static BsonValue op_Implicit(Regex value);
    public static BsonValue op_Implicit(string value);
    public static Byte[] op_Explicit(BsonValue value);
    public static DateTime op_Explicit(BsonValue value);
    public static Nullable`1<DateTime> op_Explicit(BsonValue value);
    public static decimal op_Explicit(BsonValue value);
    public static Nullable`1<decimal> op_Explicit(BsonValue value);
    public static Decimal128 op_Explicit(BsonValue value);
    public static Nullable`1<Decimal128> op_Explicit(BsonValue value);
    public static double op_Explicit(BsonValue value);
    public static Nullable`1<double> op_Explicit(BsonValue value);
    public static Guid op_Explicit(BsonValue value);
    public static Nullable`1<Guid> op_Explicit(BsonValue value);
    public static int op_Explicit(BsonValue value);
    public static Nullable`1<int> op_Explicit(BsonValue value);
    public static long op_Explicit(BsonValue value);
    public static Nullable`1<long> op_Explicit(BsonValue value);
    public static ObjectId op_Explicit(BsonValue value);
    public static Nullable`1<ObjectId> op_Explicit(BsonValue value);
    public static Regex op_Explicit(BsonValue value);
    public static string op_Explicit(BsonValue value);
    public static bool op_LessThan(BsonValue lhs, BsonValue rhs);
    public static bool op_LessThanOrEqual(BsonValue lhs, BsonValue rhs);
    public static bool op_Inequality(BsonValue lhs, BsonValue rhs);
    public static bool op_Equality(BsonValue lhs, BsonValue rhs);
    public static bool op_GreaterThan(BsonValue lhs, BsonValue rhs);
    public static bool op_GreaterThanOrEqual(BsonValue lhs, BsonValue rhs);
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public virtual BsonValue get_Item(string name);
    public virtual void set_Item(string name, BsonValue value);
    public static BsonValue Create(object value);
    public virtual BsonValue Clone();
    public abstract virtual int CompareTo(BsonValue other);
    public int CompareTypeTo(BsonValue other);
    public virtual BsonValue DeepClone();
    public sealed virtual bool Equals(BsonValue rhs);
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    public virtual bool ToBoolean();
    public virtual decimal ToDecimal();
    public virtual Decimal128 ToDecimal128();
    public virtual double ToDouble();
    public virtual int ToInt32();
    public virtual long ToInt64();
    public virtual DateTime ToLocalTime();
    public virtual Nullable`1<DateTime> ToNullableLocalTime();
    public virtual Nullable`1<DateTime> ToNullableUniversalTime();
    public virtual DateTime ToUniversalTime();
    protected virtual TypeCode IConvertibleGetTypeCodeImplementation();
    protected virtual bool IConvertibleToBooleanImplementation(IFormatProvider provider);
    protected virtual byte IConvertibleToByteImplementation(IFormatProvider provider);
    protected virtual char IConvertibleToCharImplementation(IFormatProvider provider);
    protected virtual DateTime IConvertibleToDateTimeImplementation(IFormatProvider provider);
    protected virtual decimal IConvertibleToDecimalImplementation(IFormatProvider provider);
    protected virtual double IConvertibleToDoubleImplementation(IFormatProvider provider);
    protected virtual short IConvertibleToInt16Implementation(IFormatProvider provider);
    protected virtual int IConvertibleToInt32Implementation(IFormatProvider provider);
    protected virtual long IConvertibleToInt64Implementation(IFormatProvider provider);
    protected virtual sbyte IConvertibleToSByteImplementation(IFormatProvider provider);
    protected virtual float IConvertibleToSingleImplementation(IFormatProvider provider);
    protected virtual string IConvertibleToStringImplementation(IFormatProvider provider);
    protected virtual ushort IConvertibleToUInt16Implementation(IFormatProvider provider);
    protected virtual UInt32 IConvertibleToUInt32Implementation(IFormatProvider provider);
    protected virtual ulong IConvertibleToUInt64Implementation(IFormatProvider provider);
    protected virtual bool OperatorEqualsImplementation(BsonValue rhs);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
}
public class MongoDB.Bson.Decimal128 : ValueType {
    private static short __exponentMax;
    private static short __exponentMin;
    private static short __exponentBias;
    private static short __maxSignificandDigits;
    private static UInt128 __maxSignificand;
    private static Decimal128 __maxDecimalValue;
    private static Decimal128 __minDecimalValue;
    private static Decimal128 __maxValue;
    private static Decimal128 __minValue;
    private ulong _highBits;
    private ulong _lowBits;
    public static Decimal128 MaxValue { get; }
    public static Decimal128 MinValue { get; }
    public static Decimal128 NegativeInfinity { get; }
    public static Decimal128 One { get; }
    public static Decimal128 PositiveInfinity { get; }
    public static Decimal128 QNaN { get; }
    public static Decimal128 SNaN { get; }
    public static Decimal128 Zero { get; }
    private Decimal128(ulong highBits, ulong lowBits);
    public Decimal128(decimal value);
    public Decimal128(double value);
    public Decimal128(float value);
    public Decimal128(int value);
    public Decimal128(long value);
    [CLSCompliantAttribute("False")]
public Decimal128(UInt32 value);
    [CLSCompliantAttribute("False")]
public Decimal128(ulong value);
    private static Decimal128();
    public static Decimal128 get_MaxValue();
    public static Decimal128 get_MinValue();
    public static Decimal128 get_NegativeInfinity();
    public static Decimal128 get_One();
    public static Decimal128 get_PositiveInfinity();
    public static Decimal128 get_QNaN();
    public static Decimal128 get_SNaN();
    public static Decimal128 get_Zero();
    public static bool op_Equality(Decimal128 lhs, Decimal128 rhs);
    public static bool op_Inequality(Decimal128 lhs, Decimal128 rhs);
    public static bool op_GreaterThan(Decimal128 x, Decimal128 y);
    public static bool op_GreaterThanOrEqual(Decimal128 x, Decimal128 y);
    public static bool op_LessThan(Decimal128 x, Decimal128 y);
    public static bool op_LessThanOrEqual(Decimal128 x, Decimal128 y);
    public static byte op_Explicit(Decimal128 value);
    public static char op_Explicit(Decimal128 value);
    public static decimal op_Explicit(Decimal128 value);
    public static Decimal128 op_Implicit(byte value);
    public static Decimal128 op_Implicit(decimal value);
    public static Decimal128 op_Explicit(double value);
    public static Decimal128 op_Explicit(float value);
    public static Decimal128 op_Implicit(int value);
    public static Decimal128 op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static Decimal128 op_Implicit(sbyte value);
    public static Decimal128 op_Implicit(short value);
    [CLSCompliantAttribute("False")]
public static Decimal128 op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Decimal128 op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static Decimal128 op_Implicit(ulong value);
    public static double op_Explicit(Decimal128 value);
    public static float op_Explicit(Decimal128 value);
    public static int op_Explicit(Decimal128 value);
    public static long op_Explicit(Decimal128 value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(Decimal128 value);
    public static short op_Explicit(Decimal128 value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(Decimal128 value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(Decimal128 value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(Decimal128 value);
    public static int Compare(Decimal128 x, Decimal128 y);
    public static bool Equals(Decimal128 x, Decimal128 y);
    [CLSCompliantAttribute("False")]
public static Decimal128 FromComponents(bool isNegative, short exponent, ulong significandHighBits, ulong significandLowBits);
    [CLSCompliantAttribute("False")]
public static Decimal128 FromIEEEBits(ulong highBits, ulong lowBits);
    public static short GetExponent(Decimal128 d);
    [CLSCompliantAttribute("False")]
public static ulong GetSignificandHighBits(Decimal128 d);
    [CLSCompliantAttribute("False")]
public static ulong GetSignificandLowBits(Decimal128 d);
    public static bool IsInfinity(Decimal128 d);
    public static bool IsNaN(Decimal128 d);
    public static bool IsNegative(Decimal128 d);
    public static bool IsNegativeInfinity(Decimal128 d);
    public static bool IsPositiveInfinity(Decimal128 d);
    public static bool IsQNaN(Decimal128 d);
    public static bool IsSNaN(Decimal128 d);
    public static bool IsZero(Decimal128 d);
    public static Decimal128 Negate(Decimal128 x);
    public static Decimal128 Parse(string s);
    public static byte ToByte(Decimal128 d);
    public static decimal ToDecimal(Decimal128 d);
    public static double ToDouble(Decimal128 d);
    public static short ToInt16(Decimal128 d);
    public static int ToInt32(Decimal128 d);
    public static long ToInt64(Decimal128 d);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(Decimal128 d);
    public static float ToSingle(Decimal128 d);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(Decimal128 d);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(Decimal128 d);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(Decimal128 d);
    public static bool TryParse(string s, Decimal128& result);
    private static string ClampOrRound(Int32& exponent, string significandString);
    private static void TryDecreaseExponent(UInt128& significand, Int16& exponent, short goal);
    private static Decimal128 FromComponents(bool isNegative, short exponent, UInt128 significand);
    private static UInt128 GetSignificand(Decimal128 d);
    private static void TryIncreaseExponent(UInt128& significand, Int16& exponent, short goal);
    private static short MapDecimal128BiasedExponentToExponent(short biasedExponent);
    private static ulong MapDecimal128HighBitsToIEEEHighBits(ulong highBits);
    private static short MapExponentToDecimal128BiasedExponent(short exponent);
    private static ulong MapIEEEHighBitsToDecimal128HighBits(ulong highBits);
    private static string RemoveLeadingZeroes(string significandString);
    public sealed virtual int CompareTo(Decimal128 other);
    public sealed virtual bool Equals(Decimal128 other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CLSCompliantAttribute("False")]
public ulong GetIEEEHighBits();
    [CLSCompliantAttribute("False")]
public ulong GetIEEELowBits();
    public virtual string ToString();
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private string ToStringWithExponentialNotation(string coefficientString, int adjustedExponent);
    private string ToStringWithoutExponentialNotation(string coefficientString, int exponent);
    private static bool TryTruncateToUInt64(Decimal128 d, ulong maxNegativeValue, ulong maxPositiveValue, UInt64& value);
}
public class MongoDB.Bson.DuplicateBsonMemberMapAttributeException : BsonException {
    public DuplicateBsonMemberMapAttributeException(string message);
    public DuplicateBsonMemberMapAttributeException(string message, Exception inner);
    protected DuplicateBsonMemberMapAttributeException(SerializationInfo info, StreamingContext context);
}
public enum MongoDB.Bson.DuplicateNameHandling : Enum {
    public int value__;
    public static DuplicateNameHandling Overwrite;
    public static DuplicateNameHandling Ignore;
    public static DuplicateNameHandling ThrowException;
}
public static class MongoDB.Bson.GuidConverter : object {
    public static Guid FromBytes(Byte[] bytes, GuidRepresentation representation);
    public static BsonBinarySubType GetSubType(GuidRepresentation guidRepresentation);
    public static Byte[] ToBytes(Guid guid, GuidRepresentation guidRepresentation);
}
public enum MongoDB.Bson.GuidRepresentation : Enum {
    public int value__;
    public static GuidRepresentation Unspecified;
    public static GuidRepresentation Standard;
    public static GuidRepresentation CSharpLegacy;
    public static GuidRepresentation JavaLegacy;
    public static GuidRepresentation PythonLegacy;
}
public enum MongoDB.Bson.GuidRepresentationMode : Enum {
    public int value__;
    public static GuidRepresentationMode V2;
    public static GuidRepresentationMode V3;
}
public interface MongoDB.Bson.IConvertibleToBsonDocument {
    public abstract virtual BsonDocument ToBsonDocument();
}
public interface MongoDB.Bson.ICustomBsonTypeMapper {
    public abstract virtual bool TryMapToBsonValue(object value, BsonValue& bsonValue);
}
internal class MongoDB.Bson.IO.ArrayElementNameAccelerator : object {
    private static IArrayElementNameAccelerator __default;
    private Byte[][] _cachedElementNames;
    public static IArrayElementNameAccelerator Default { get; public set; }
    public ArrayElementNameAccelerator(int numberOfCachedElementNames);
    private static ArrayElementNameAccelerator();
    public static IArrayElementNameAccelerator get_Default();
    public static void set_Default(IArrayElementNameAccelerator value);
    private Byte[] CreateElementNameBytes(int index);
    public sealed virtual Byte[] GetElementNameBytes(int index);
}
internal static class MongoDB.Bson.IO.BinaryPrimitivesCompat : object {
    public static double ReadDoubleLittleEndian(ReadOnlySpan`1<byte> source);
    public static void WriteDoubleLittleEndian(Span`1<byte> destination, double value);
}
public class MongoDB.Bson.IO.BsonBinaryReader : BsonReader {
    private Stream _baseStream;
    private BsonStream _bsonStream;
    private BsonBinaryReaderContext _context;
    public Stream BaseStream { get; }
    public BsonStream BsonStream { get; }
    public BsonBinaryReaderSettings Settings { get; }
    public BsonBinaryReader(Stream stream);
    public BsonBinaryReader(Stream stream, BsonBinaryReaderSettings settings);
    public Stream get_BaseStream();
    public BsonStream get_BsonStream();
    public BsonBinaryReaderSettings get_Settings();
    public virtual void Close();
    public virtual BsonReaderBookmark GetBookmark();
    public virtual bool IsAtEndOfFile();
    public virtual BsonBinaryData ReadBinaryData();
    public virtual bool ReadBoolean();
    public virtual BsonType ReadBsonType();
    public virtual Byte[] ReadBytes();
    public virtual long ReadDateTime();
    public virtual Decimal128 ReadDecimal128();
    public virtual double ReadDouble();
    public virtual void ReadEndArray();
    public virtual void ReadEndDocument();
    public virtual int ReadInt32();
    public virtual long ReadInt64();
    public virtual string ReadJavaScript();
    public virtual string ReadJavaScriptWithScope();
    public virtual void ReadMaxKey();
    public virtual void ReadMinKey();
    public virtual string ReadName(INameDecoder nameDecoder);
    public virtual void ReadNull();
    public virtual ObjectId ReadObjectId();
    public virtual IByteBuffer ReadRawBsonArray();
    public virtual IByteBuffer ReadRawBsonDocument();
    public virtual BsonRegularExpression ReadRegularExpression();
    public virtual void ReadStartArray();
    public virtual void ReadStartDocument();
    public virtual string ReadString();
    public virtual string ReadSymbol();
    public virtual long ReadTimestamp();
    public virtual void ReadUndefined();
    public virtual void ReturnToBookmark(BsonReaderBookmark bookmark);
    public virtual void SkipName();
    public virtual void SkipValue();
    protected virtual void Dispose(bool disposing);
    private string GenerateDottedElementName();
    private string GenerateDottedElementName(BsonBinaryReaderContext context, string elementName);
    private BsonReaderState GetNextState();
    private int ReadSize();
}
public class MongoDB.Bson.IO.BsonBinaryReaderBookmark : BsonReaderBookmark {
    private BsonBinaryReaderContext _context;
    private long _position;
    internal long Position { get; }
    internal BsonBinaryReaderBookmark(BsonReaderState state, BsonType currentBsonType, string currentName, BsonBinaryReaderContext context, long position);
    internal long get_Position();
    internal BsonBinaryReaderContext CloneContext();
}
internal class MongoDB.Bson.IO.BsonBinaryReaderContext : object {
    private BsonBinaryReaderContext _parentContext;
    private ContextType _contextType;
    private long _startPosition;
    private long _size;
    private string _currentElementName;
    private int _currentArrayIndex;
    public ContextType ContextType { get; }
    public int CurrentArrayIndex { get; public set; }
    public string CurrentElementName { get; public set; }
    public BsonBinaryReaderContext ParentContext { get; }
    internal BsonBinaryReaderContext(BsonBinaryReaderContext parentContext, ContextType contextType, long startPosition, long size);
    public ContextType get_ContextType();
    public int get_CurrentArrayIndex();
    public void set_CurrentArrayIndex(int value);
    public string get_CurrentElementName();
    public void set_CurrentElementName(string value);
    public BsonBinaryReaderContext get_ParentContext();
    public BsonBinaryReaderContext Clone();
    public BsonBinaryReaderContext PopContext(long position);
}
public class MongoDB.Bson.IO.BsonBinaryReaderSettings : BsonReaderSettings {
    private static BsonBinaryReaderSettings __defaults;
    private UTF8Encoding _encoding;
    private bool _fixOldBinarySubTypeOnInput;
    private bool _fixOldDateTimeMaxValueOnInput;
    private int _maxDocumentSize;
    public static BsonBinaryReaderSettings Defaults { get; public set; }
    public UTF8Encoding Encoding { get; public set; }
    public bool FixOldBinarySubTypeOnInput { get; public set; }
    public bool FixOldDateTimeMaxValueOnInput { get; public set; }
    public int MaxDocumentSize { get; public set; }
    public static BsonBinaryReaderSettings get_Defaults();
    public static void set_Defaults(BsonBinaryReaderSettings value);
    public UTF8Encoding get_Encoding();
    public void set_Encoding(UTF8Encoding value);
    public bool get_FixOldBinarySubTypeOnInput();
    public void set_FixOldBinarySubTypeOnInput(bool value);
    public bool get_FixOldDateTimeMaxValueOnInput();
    public void set_FixOldDateTimeMaxValueOnInput(bool value);
    public int get_MaxDocumentSize();
    public void set_MaxDocumentSize(int value);
    public BsonBinaryReaderSettings Clone();
    protected virtual BsonReaderSettings CloneImplementation();
}
public class MongoDB.Bson.IO.BsonBinaryWriter : BsonWriter {
    private Stream _baseStream;
    private BsonStream _bsonStream;
    private BsonBinaryWriterContext _context;
    public Stream BaseStream { get; }
    public BsonStream BsonStream { get; }
    public long Position { get; }
    public BsonBinaryWriterSettings Settings { get; }
    public BsonBinaryWriter(Stream stream);
    public BsonBinaryWriter(Stream stream, BsonBinaryWriterSettings settings);
    public Stream get_BaseStream();
    public BsonStream get_BsonStream();
    public virtual long get_Position();
    public BsonBinaryWriterSettings get_Settings();
    public virtual void Close();
    public virtual void Flush();
    [ObsoleteAttribute("Use PopSettings instead.")]
public void PopMaxDocumentSize();
    [ObsoleteAttribute("Use PushSettings instead.")]
public void PushMaxDocumentSize(int maxDocumentSize);
    public virtual void WriteBinaryData(BsonBinaryData binaryData);
    public virtual void WriteBoolean(bool value);
    public virtual void WriteBytes(Byte[] bytes);
    public virtual void WriteDateTime(long value);
    public virtual void WriteDecimal128(Decimal128 value);
    public virtual void WriteDouble(double value);
    public virtual void WriteEndArray();
    public virtual void WriteEndDocument();
    public virtual void WriteInt32(int value);
    public virtual void WriteInt64(long value);
    public virtual void WriteJavaScript(string code);
    public virtual void WriteJavaScriptWithScope(string code);
    public virtual void WriteMaxKey();
    public virtual void WriteMinKey();
    public virtual void WriteNull();
    public virtual void WriteObjectId(ObjectId objectId);
    public virtual void WriteRawBsonArray(IByteBuffer slice);
    public virtual void WriteRawBsonDocument(IByteBuffer slice);
    public virtual void WriteRegularExpression(BsonRegularExpression regex);
    public virtual void WriteStartArray();
    public virtual void WriteStartDocument();
    public virtual void WriteString(string value);
    public virtual void WriteSymbol(string value);
    public virtual void WriteTimestamp(long value);
    public virtual void WriteUndefined();
    protected virtual void Dispose(bool disposing);
    private void BackpatchSize();
    private BsonWriterState GetNextState();
    private void WriteNameHelper();
}
internal class MongoDB.Bson.IO.BsonBinaryWriterContext : object {
    private BsonBinaryWriterContext _parentContext;
    private ContextType _contextType;
    private long _startPosition;
    private int _index;
    internal BsonBinaryWriterContext ParentContext { get; }
    internal ContextType ContextType { get; }
    internal long StartPosition { get; }
    internal int Index { get; internal set; }
    internal BsonBinaryWriterContext(BsonBinaryWriterContext parentContext, ContextType contextType, long startPosition);
    internal BsonBinaryWriterContext get_ParentContext();
    internal ContextType get_ContextType();
    internal long get_StartPosition();
    internal int get_Index();
    internal void set_Index(int value);
}
public class MongoDB.Bson.IO.BsonBinaryWriterSettings : BsonWriterSettings {
    private static BsonBinaryWriterSettings __defaults;
    private UTF8Encoding _encoding;
    private bool _fixOldBinarySubTypeOnOutput;
    private int _maxDocumentSize;
    public static BsonBinaryWriterSettings Defaults { get; public set; }
    public UTF8Encoding Encoding { get; public set; }
    public bool FixOldBinarySubTypeOnOutput { get; public set; }
    public int MaxDocumentSize { get; public set; }
    public static BsonBinaryWriterSettings get_Defaults();
    public static void set_Defaults(BsonBinaryWriterSettings value);
    public UTF8Encoding get_Encoding();
    public void set_Encoding(UTF8Encoding value);
    public bool get_FixOldBinarySubTypeOnOutput();
    public void set_FixOldBinarySubTypeOnOutput(bool value);
    public int get_MaxDocumentSize();
    public void set_MaxDocumentSize(int value);
    public BsonBinaryWriterSettings Clone();
    protected virtual BsonWriterSettings CloneImplementation();
}
public class MongoDB.Bson.IO.BsonChunkPool : object {
    private static BsonChunkPool __default;
    private Stack`1<ReferenceCountedChunk> _chunks;
    private int _chunkSize;
    private bool _disposed;
    private object _lock;
    private int _maxChunkCount;
    public static BsonChunkPool Default { get; public set; }
    public int ChunkSize { get; }
    public int MaxChunkCount { get; }
    public int ChunkCount { get; }
    public BsonChunkPool(int maxChunkCount, int chunkSize);
    private static BsonChunkPool();
    public static BsonChunkPool get_Default();
    public static void set_Default(BsonChunkPool value);
    public int get_ChunkSize();
    public int get_MaxChunkCount();
    public int get_ChunkCount();
    public sealed virtual void Dispose();
    public sealed virtual IBsonChunk GetChunk(int requestedSize);
    private void ReleaseChunk(ReferenceCountedChunk chunk);
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.BsonDocumentReader : BsonReader {
    private BsonDocumentReaderContext _context;
    private BsonValue _currentValue;
    public BsonDocumentReader(BsonDocument document);
    public BsonDocumentReader(BsonDocument document, BsonDocumentReaderSettings settings);
    public virtual void Close();
    public virtual BsonReaderBookmark GetBookmark();
    public virtual bool IsAtEndOfFile();
    public virtual BsonBinaryData ReadBinaryData();
    public virtual bool ReadBoolean();
    public virtual BsonType ReadBsonType();
    public virtual Byte[] ReadBytes();
    public virtual long ReadDateTime();
    public virtual Decimal128 ReadDecimal128();
    public virtual double ReadDouble();
    public virtual void ReadEndArray();
    public virtual void ReadEndDocument();
    public virtual int ReadInt32();
    public virtual long ReadInt64();
    public virtual string ReadJavaScript();
    public virtual string ReadJavaScriptWithScope();
    public virtual void ReadMaxKey();
    public virtual void ReadMinKey();
    public virtual string ReadName(INameDecoder nameDecoder);
    public virtual void ReadNull();
    public virtual ObjectId ReadObjectId();
    public virtual BsonRegularExpression ReadRegularExpression();
    public virtual void ReadStartArray();
    public virtual void ReadStartDocument();
    public virtual string ReadString();
    public virtual string ReadSymbol();
    public virtual long ReadTimestamp();
    public virtual void ReadUndefined();
    public virtual void ReturnToBookmark(BsonReaderBookmark bookmark);
    public virtual void SkipName();
    public virtual void SkipValue();
    protected virtual void Dispose(bool disposing);
    private BsonReaderState GetNextState();
}
public class MongoDB.Bson.IO.BsonDocumentReaderBookmark : BsonReaderBookmark {
    private BsonDocumentReaderContext _context;
    private BsonValue _currentValue;
    internal BsonValue CurrentValue { get; }
    internal BsonDocumentReaderBookmark(BsonReaderState state, BsonType currentBsonType, string currentName, BsonDocumentReaderContext context, BsonValue currentValue);
    internal BsonValue get_CurrentValue();
    internal BsonDocumentReaderContext CloneContext();
}
internal class MongoDB.Bson.IO.BsonDocumentReaderContext : object {
    private BsonDocumentReaderContext _parentContext;
    private ContextType _contextType;
    private BsonDocument _document;
    private BsonArray _array;
    private int _index;
    internal BsonArray Array { get; }
    internal ContextType ContextType { get; }
    internal BsonDocument Document { get; }
    internal int Index { get; internal set; }
    internal BsonDocumentReaderContext(BsonDocumentReaderContext parentContext, ContextType contextType, BsonArray array);
    internal BsonDocumentReaderContext(BsonDocumentReaderContext parentContext, ContextType contextType, BsonDocument document);
    private BsonDocumentReaderContext(BsonDocumentReaderContext parentContext, ContextType contextType, BsonDocument document, BsonArray array, int index);
    internal BsonArray get_Array();
    internal ContextType get_ContextType();
    internal BsonDocument get_Document();
    internal int get_Index();
    internal void set_Index(int value);
    public BsonDocumentReaderContext Clone();
    public bool TryGetNextElement(BsonElement& element);
    public bool TryGetNextValue(BsonValue& value);
    public BsonDocumentReaderContext PopContext();
}
public class MongoDB.Bson.IO.BsonDocumentReaderSettings : BsonReaderSettings {
    private static BsonDocumentReaderSettings __defaults;
    public static BsonDocumentReaderSettings Defaults { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public BsonDocumentReaderSettings(GuidRepresentation guidRepresentation);
    public static BsonDocumentReaderSettings get_Defaults();
    public static void set_Defaults(BsonDocumentReaderSettings value);
    public BsonDocumentReaderSettings Clone();
    protected virtual BsonReaderSettings CloneImplementation();
}
public class MongoDB.Bson.IO.BsonDocumentWriter : BsonWriter {
    private BsonDocument _document;
    private BsonDocumentWriterContext _context;
    public BsonDocument Document { get; }
    public long Position { get; }
    public BsonDocumentWriter(BsonDocument document);
    public BsonDocumentWriter(BsonDocument document, BsonDocumentWriterSettings settings);
    public BsonDocument get_Document();
    public virtual long get_Position();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteBinaryData(BsonBinaryData binaryData);
    public virtual void WriteBoolean(bool value);
    public virtual void WriteBytes(Byte[] bytes);
    public virtual void WriteDateTime(long value);
    public virtual void WriteDecimal128(Decimal128 value);
    public virtual void WriteDouble(double value);
    public virtual void WriteEndArray();
    public virtual void WriteEndDocument();
    public virtual void WriteInt32(int value);
    public virtual void WriteInt64(long value);
    public virtual void WriteJavaScript(string code);
    public virtual void WriteJavaScriptWithScope(string code);
    public virtual void WriteMaxKey();
    public virtual void WriteMinKey();
    public virtual void WriteName(string name);
    public virtual void WriteNull();
    public virtual void WriteObjectId(ObjectId objectId);
    public virtual void WriteRegularExpression(BsonRegularExpression regex);
    public virtual void WriteStartArray();
    public virtual void WriteStartDocument();
    public virtual void WriteString(string value);
    public virtual void WriteSymbol(string value);
    public virtual void WriteTimestamp(long value);
    public virtual void WriteUndefined();
    protected virtual void Dispose(bool disposing);
    private BsonWriterState GetNextState();
    private void WriteValue(BsonValue value);
}
internal class MongoDB.Bson.IO.BsonDocumentWriterContext : object {
    private BsonDocumentWriterContext _parentContext;
    private ContextType _contextType;
    private BsonDocument _document;
    private BsonArray _array;
    private string _code;
    private string _name;
    internal BsonDocumentWriterContext ParentContext { get; }
    internal string Name { get; internal set; }
    internal ContextType ContextType { get; }
    internal BsonDocument Document { get; }
    internal BsonArray Array { get; }
    internal string Code { get; }
    internal BsonDocumentWriterContext(BsonDocumentWriterContext parentContext, ContextType contextType, BsonDocument document);
    internal BsonDocumentWriterContext(BsonDocumentWriterContext parentContext, ContextType contextType, BsonArray array);
    internal BsonDocumentWriterContext(BsonDocumentWriterContext parentContext, ContextType contextType, string code);
    internal BsonDocumentWriterContext get_ParentContext();
    internal string get_Name();
    internal void set_Name(string value);
    internal ContextType get_ContextType();
    internal BsonDocument get_Document();
    internal BsonArray get_Array();
    internal string get_Code();
}
public class MongoDB.Bson.IO.BsonDocumentWriterSettings : BsonWriterSettings {
    private static BsonDocumentWriterSettings __defaults;
    public static BsonDocumentWriterSettings Defaults { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
public BsonDocumentWriterSettings(GuidRepresentation guidRepresentation);
    public static BsonDocumentWriterSettings get_Defaults();
    public static void set_Defaults(BsonDocumentWriterSettings value);
    public BsonDocumentWriterSettings Clone();
    protected virtual BsonWriterSettings CloneImplementation();
}
public abstract class MongoDB.Bson.IO.BsonReader : object {
    private bool _disposed;
    private BsonReaderSettings _settings;
    private BsonReaderState _state;
    private BsonType _currentBsonType;
    private string _currentName;
    private Stack`1<BsonReaderSettings> _settingsStack;
    public BsonType CurrentBsonType { get; protected set; }
    public BsonReaderSettings Settings { get; }
    public BsonReaderState State { get; protected set; }
    protected string CurrentName { get; protected set; }
    protected bool Disposed { get; }
    protected BsonReader(BsonReaderSettings settings);
    public sealed virtual BsonType get_CurrentBsonType();
    protected void set_CurrentBsonType(BsonType value);
    public BsonReaderSettings get_Settings();
    public sealed virtual BsonReaderState get_State();
    protected void set_State(BsonReaderState value);
    protected string get_CurrentName();
    protected void set_CurrentName(string value);
    protected bool get_Disposed();
    public abstract virtual void Close();
    public sealed virtual void Dispose();
    public abstract virtual BsonReaderBookmark GetBookmark();
    public sealed virtual BsonType GetCurrentBsonType();
    public abstract virtual bool IsAtEndOfFile();
    public sealed virtual void PopSettings();
    public sealed virtual void PushSettings(Action`1<BsonReaderSettings> configurator);
    public abstract virtual BsonBinaryData ReadBinaryData();
    public abstract virtual bool ReadBoolean();
    public abstract virtual BsonType ReadBsonType();
    public abstract virtual Byte[] ReadBytes();
    public abstract virtual long ReadDateTime();
    public abstract virtual Decimal128 ReadDecimal128();
    public abstract virtual double ReadDouble();
    public abstract virtual void ReadEndArray();
    public abstract virtual void ReadEndDocument();
    public abstract virtual int ReadInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual string ReadJavaScript();
    public abstract virtual string ReadJavaScriptWithScope();
    public abstract virtual void ReadMaxKey();
    public abstract virtual void ReadMinKey();
    public virtual string ReadName();
    public abstract virtual string ReadName(INameDecoder nameDecoder);
    public abstract virtual void ReadNull();
    public abstract virtual ObjectId ReadObjectId();
    public virtual IByteBuffer ReadRawBsonArray();
    public virtual IByteBuffer ReadRawBsonDocument();
    public abstract virtual BsonRegularExpression ReadRegularExpression();
    public abstract virtual void ReadStartArray();
    public abstract virtual void ReadStartDocument();
    public abstract virtual string ReadString();
    public abstract virtual string ReadSymbol();
    public abstract virtual long ReadTimestamp();
    public abstract virtual void ReadUndefined();
    public abstract virtual void ReturnToBookmark(BsonReaderBookmark bookmark);
    public abstract virtual void SkipName();
    public abstract virtual void SkipValue();
    protected virtual void Dispose(bool disposing);
    protected void ThrowInvalidContextType(string methodName, ContextType actualContextType, ContextType[] validContextTypes);
    protected void ThrowInvalidState(string methodName, BsonReaderState[] validStates);
    protected void ThrowObjectDisposedException();
    protected void VerifyBsonType(string methodName, BsonType requiredBsonType);
}
public abstract class MongoDB.Bson.IO.BsonReaderBookmark : object {
    private BsonReaderState _state;
    private BsonType _currentBsonType;
    private string _currentName;
    public BsonReaderState State { get; }
    public BsonType CurrentBsonType { get; }
    public string CurrentName { get; }
    protected BsonReaderBookmark(BsonReaderState state, BsonType currentBsonType, string currentName);
    public BsonReaderState get_State();
    public BsonType get_CurrentBsonType();
    public string get_CurrentName();
}
public abstract class MongoDB.Bson.IO.BsonReaderSettings : object {
    private GuidRepresentation _guidRepresentation;
    private bool _isFrozen;
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public bool IsFrozen { get; }
    [ObsoleteAttribute("Configure serializers instead.")]
protected BsonReaderSettings(GuidRepresentation guidRepresentation);
    public GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public bool get_IsFrozen();
    public BsonReaderSettings Clone();
    public BsonReaderSettings Freeze();
    public BsonReaderSettings FrozenCopy();
    protected abstract virtual BsonReaderSettings CloneImplementation();
    protected void ThrowFrozenException();
}
public enum MongoDB.Bson.IO.BsonReaderState : Enum {
    public int value__;
    public static BsonReaderState Initial;
    public static BsonReaderState Type;
    public static BsonReaderState Name;
    public static BsonReaderState Value;
    public static BsonReaderState ScopeDocument;
    public static BsonReaderState EndOfDocument;
    public static BsonReaderState EndOfArray;
    public static BsonReaderState Done;
    public static BsonReaderState Closed;
}
public abstract class MongoDB.Bson.IO.BsonStream : Stream {
    public abstract virtual string ReadCString(UTF8Encoding encoding);
    public abstract virtual ArraySegment`1<byte> ReadCStringBytes();
    public abstract virtual Decimal128 ReadDecimal128();
    public abstract virtual double ReadDouble();
    public abstract virtual int ReadInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual ObjectId ReadObjectId();
    public abstract virtual IByteBuffer ReadSlice();
    public abstract virtual string ReadString(UTF8Encoding encoding);
    public abstract virtual void SkipCString();
    public abstract virtual void WriteCString(string value);
    public abstract virtual void WriteCStringBytes(Byte[] value);
    public abstract virtual void WriteDecimal128(Decimal128 value);
    public abstract virtual void WriteDouble(double value);
    public abstract virtual void WriteInt32(int value);
    public abstract virtual void WriteInt64(long value);
    public abstract virtual void WriteObjectId(ObjectId value);
    public abstract virtual void WriteString(string value, UTF8Encoding encoding);
}
public class MongoDB.Bson.IO.BsonStreamAdapter : BsonStream {
    private bool _disposed;
    private bool _ownsStream;
    private Stream _stream;
    private Byte[] _temp;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public BsonStreamAdapter(Stream stream, bool ownsStream);
    public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void Close();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual string ReadCString(UTF8Encoding encoding);
    public virtual ArraySegment`1<byte> ReadCStringBytes();
    public virtual Decimal128 ReadDecimal128();
    public virtual double ReadDouble();
    public virtual int ReadInt32();
    public virtual long ReadInt64();
    public virtual ObjectId ReadObjectId();
    public virtual IByteBuffer ReadSlice();
    public virtual string ReadString(UTF8Encoding encoding);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void SkipCString();
    private void ThrowIfDisposed();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual void WriteCString(string value);
    public virtual void WriteCStringBytes(Byte[] value);
    public virtual void WriteDecimal128(Decimal128 value);
    public virtual void WriteDouble(double value);
    public virtual void WriteInt32(int value);
    public virtual void WriteInt64(long value);
    public virtual void WriteObjectId(ObjectId value);
    public virtual void WriteString(string value, UTF8Encoding encoding);
    [CompilerGeneratedAttribute]
private void <WriteCString>g__WriteBytes|54_0(Byte[] bytes, int length);
}
[ExtensionAttribute]
public static class MongoDB.Bson.IO.BsonStreamExtensions : object {
    private static Boolean[] __validBsonTypes;
    private static BsonStreamExtensions();
    [ExtensionAttribute]
public static void BackpatchSize(BsonStream stream, long startPosition);
    [ExtensionAttribute]
public static BsonBinarySubType ReadBinarySubType(BsonStream stream);
    [ExtensionAttribute]
public static bool ReadBoolean(BsonStream stream);
    [ExtensionAttribute]
public static BsonType ReadBsonType(BsonStream stream);
    [ExtensionAttribute]
public static void ReadBytes(BsonStream stream, Byte[] buffer, int offset, int count);
    [ExtensionAttribute]
public static Byte[] ReadBytes(BsonStream stream, int count);
    [ExtensionAttribute]
public static void WriteBinarySubType(BsonStream stream, BsonBinarySubType value);
    [ExtensionAttribute]
public static void WriteBoolean(BsonStream stream, bool value);
    [ExtensionAttribute]
public static void WriteBsonType(BsonStream stream, BsonType value);
    [ExtensionAttribute]
public static void WriteBytes(BsonStream stream, Byte[] buffer, int offset, int count);
    [ExtensionAttribute]
public static void WriteSlice(BsonStream stream, IByteBuffer slice);
}
public class MongoDB.Bson.IO.BsonTrie`1 : object {
    private BsonTrieNode`1<TValue> _root;
    public BsonTrieNode`1<TValue> Root { get; }
    public BsonTrieNode`1<TValue> get_Root();
    public void Add(string elementName, TValue value);
    public bool TryGetNode(ArraySegment`1<byte> utf8, BsonTrieNode`1& node);
    public bool TryGetNode(BsonStream stream, BsonTrieNode`1& node);
    public bool TryGetValue(ArraySegment`1<byte> utf8, TValue& value);
    public bool TryGetValue(string elementName, TValue& value);
}
public class MongoDB.Bson.IO.BsonTrieNode`1 : object {
    private byte _keyByte;
    private string _elementName;
    private TValue _value;
    private BsonTrieNode`1<TValue> _onlyChild;
    private BsonTrieNode`1[] _children;
    private Byte[] _childrenIndexes;
    private byte _minChildKeyByte;
    public bool HasValue { get; }
    public string ElementName { get; }
    public TValue Value { get; }
    internal BsonTrieNode`1(byte keyByte);
    public bool get_HasValue();
    public string get_ElementName();
    public TValue get_Value();
    public BsonTrieNode`1<TValue> GetChild(byte keyByte);
    internal void AddChild(BsonTrieNode`1<TValue> child);
    internal void SetValue(string elementName, TValue value);
}
public abstract class MongoDB.Bson.IO.BsonWriter : object {
    private bool _disposed;
    private bool _useChildValidator;
    private IElementNameValidator _elementNameValidator;
    private Stack`1<IElementNameValidator> _elementNameValidatorStack;
    private BsonWriterSettings _settings;
    private Stack`1<BsonWriterSettings> _settingsStack;
    private BsonWriterState _state;
    private string _name;
    private int _serializationDepth;
    public long Position { get; }
    public int SerializationDepth { get; }
    public BsonWriterSettings Settings { get; }
    public BsonWriterState State { get; protected set; }
    public bool Disposed { get; }
    protected string Name { get; }
    protected BsonWriter(BsonWriterSettings settings);
    public abstract virtual long get_Position();
    public sealed virtual int get_SerializationDepth();
    public sealed virtual BsonWriterSettings get_Settings();
    public sealed virtual BsonWriterState get_State();
    protected void set_State(BsonWriterState value);
    public bool get_Disposed();
    protected string get_Name();
    public abstract virtual void Close();
    public sealed virtual void Dispose();
    public abstract virtual void Flush();
    public sealed virtual void PopElementNameValidator();
    public sealed virtual void PopSettings();
    public sealed virtual void PushElementNameValidator(IElementNameValidator validator);
    public sealed virtual void PushSettings(Action`1<BsonWriterSettings> configurator);
    public abstract virtual void WriteBinaryData(BsonBinaryData binaryData);
    public abstract virtual void WriteBoolean(bool value);
    public abstract virtual void WriteBytes(Byte[] bytes);
    public abstract virtual void WriteDateTime(long value);
    public abstract virtual void WriteDecimal128(Decimal128 value);
    public abstract virtual void WriteDouble(double value);
    public virtual void WriteEndArray();
    public virtual void WriteEndDocument();
    public abstract virtual void WriteInt32(int value);
    public abstract virtual void WriteInt64(long value);
    public abstract virtual void WriteJavaScript(string code);
    public abstract virtual void WriteJavaScriptWithScope(string code);
    public abstract virtual void WriteMaxKey();
    public abstract virtual void WriteMinKey();
    public virtual void WriteName(string name);
    public abstract virtual void WriteNull();
    public abstract virtual void WriteObjectId(ObjectId objectId);
    public virtual void WriteRawBsonArray(IByteBuffer slice);
    public virtual void WriteRawBsonDocument(IByteBuffer slice);
    public abstract virtual void WriteRegularExpression(BsonRegularExpression regex);
    public virtual void WriteStartArray();
    public virtual void WriteStartDocument();
    public abstract virtual void WriteString(string value);
    public abstract virtual void WriteSymbol(string value);
    public abstract virtual void WriteTimestamp(long value);
    public abstract virtual void WriteUndefined();
    protected virtual void Dispose(bool disposing);
    protected void ThrowInvalidContextType(string methodName, ContextType actualContextType, ContextType[] validContextTypes);
    protected void ThrowInvalidState(string methodName, BsonWriterState[] validStates);
    private void EnterSerializationScope();
    private void ExitSerializationScope();
}
public abstract class MongoDB.Bson.IO.BsonWriterSettings : object {
    private GuidRepresentation _guidRepresentation;
    private bool _isFrozen;
    private int _maxSerializationDepth;
    [ObsoleteAttribute("Configure serializers instead.")]
public GuidRepresentation GuidRepresentation { get; public set; }
    public bool IsFrozen { get; }
    public int MaxSerializationDepth { get; public set; }
    [ObsoleteAttribute("Configure serializers instead.")]
protected BsonWriterSettings(GuidRepresentation guidRepresentation);
    public GuidRepresentation get_GuidRepresentation();
    public void set_GuidRepresentation(GuidRepresentation value);
    public bool get_IsFrozen();
    public int get_MaxSerializationDepth();
    public void set_MaxSerializationDepth(int value);
    public BsonWriterSettings Clone();
    public BsonWriterSettings Freeze();
    public BsonWriterSettings FrozenCopy();
    protected abstract virtual BsonWriterSettings CloneImplementation();
    protected void ThrowFrozenException();
}
public enum MongoDB.Bson.IO.BsonWriterState : Enum {
    public int value__;
    public static BsonWriterState Initial;
    public static BsonWriterState Name;
    public static BsonWriterState Value;
    public static BsonWriterState ScopeDocument;
    public static BsonWriterState Done;
    public static BsonWriterState Closed;
}
public class MongoDB.Bson.IO.ByteArrayBuffer : object {
    private Byte[] _bytes;
    private bool _disposed;
    private bool _isReadOnly;
    private int _length;
    public int Capacity { get; }
    public bool IsReadOnly { get; }
    public int Length { get; public set; }
    public ByteArrayBuffer(Byte[] bytes, bool isReadOnly);
    public ByteArrayBuffer(Byte[] bytes, int length, bool isReadOnly);
    public sealed virtual int get_Capacity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Length();
    public sealed virtual void set_Length(int value);
    public sealed virtual ArraySegment`1<byte> AccessBackingBytes(int position);
    public sealed virtual void Clear(int position, int count);
    public sealed virtual void Dispose();
    public sealed virtual void EnsureCapacity(int minimumCapacity);
    public sealed virtual byte GetByte(int position);
    public sealed virtual void GetBytes(int position, Byte[] destination, int offset, int count);
    public sealed virtual IByteBuffer GetSlice(int position, int length);
    public sealed virtual void MakeReadOnly();
    public sealed virtual void SetByte(int position, byte value);
    public sealed virtual void SetBytes(int position, Byte[] source, int offset, int count);
    private void EnsureIsReadOnly();
    private void EnsureIsWritable();
    private void SetCapacity(int capacity);
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.ByteArrayChunk : object {
    private Byte[] _bytes;
    private bool _disposed;
    public ArraySegment`1<byte> Bytes { get; }
    public ByteArrayChunk(int size);
    public ByteArrayChunk(Byte[] bytes);
    private static Byte[] CreateByteArray(int size);
    public sealed virtual ArraySegment`1<byte> get_Bytes();
    public sealed virtual void Dispose();
    public sealed virtual IBsonChunk Fork();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
}
public static class MongoDB.Bson.IO.ByteBufferFactory : object {
    public static IByteBuffer Create(IBsonChunkSource chunkSource, int minimumCapacity);
}
public class MongoDB.Bson.IO.ByteBufferSlice : object {
    private IByteBuffer _buffer;
    private bool _disposed;
    private int _length;
    private int _offset;
    public IByteBuffer Buffer { get; }
    public int Capacity { get; }
    public bool IsReadOnly { get; }
    public int Length { get; public set; }
    public ByteBufferSlice(IByteBuffer buffer, int offset, int length);
    public IByteBuffer get_Buffer();
    public sealed virtual int get_Capacity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Length();
    public sealed virtual void set_Length(int value);
    public sealed virtual ArraySegment`1<byte> AccessBackingBytes(int position);
    public sealed virtual void Clear(int position, int count);
    public sealed virtual void Dispose();
    public sealed virtual void EnsureCapacity(int minimumCapacity);
    public sealed virtual byte GetByte(int position);
    public sealed virtual void GetBytes(int position, Byte[] destination, int offset, int count);
    public sealed virtual IByteBuffer GetSlice(int position, int length);
    public sealed virtual void MakeReadOnly();
    public sealed virtual void SetByte(int position, byte value);
    public sealed virtual void SetBytes(int position, Byte[] source, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void EnsureValidPosition(int position);
    private void EnsureValidPositionAndCount(int position, int count);
    private void EnsureValidPositionAndLength(int position, int length);
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.ByteBufferStream : BsonStream {
    private IByteBuffer _buffer;
    private bool _disposed;
    private int _length;
    private bool _ownsBuffer;
    private int _position;
    private Byte[] _temp;
    public IByteBuffer Buffer { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ByteBufferStream(IByteBuffer buffer, bool ownsBuffer);
    public IByteBuffer get_Buffer();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public sealed virtual void EfficientCopyTo(Stream destination);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    protected virtual void Dispose(bool disposing);
    private void EnsureWriteable();
    private int FindNullByte();
    private void PrepareToWrite(int count);
    private Byte[] ReadBytes(int count);
    private void SetPositionAfterWrite(int position);
    private void ThrowIfDisposed();
    private void ThrowIfEndOfStream(int count);
    public virtual string ReadCString(UTF8Encoding encoding);
    public virtual ArraySegment`1<byte> ReadCStringBytes();
    public virtual Decimal128 ReadDecimal128();
    public virtual double ReadDouble();
    public virtual int ReadInt32();
    public virtual long ReadInt64();
    public virtual ObjectId ReadObjectId();
    public virtual IByteBuffer ReadSlice();
    public virtual string ReadString(UTF8Encoding encoding);
    public virtual void SkipCString();
    public virtual void WriteCString(string value);
    public virtual void WriteCStringBytes(Byte[] value);
    public virtual void WriteDecimal128(Decimal128 value);
    public virtual void WriteDouble(double value);
    public virtual void WriteInt32(int value);
    public virtual void WriteInt64(long value);
    public virtual void WriteObjectId(ObjectId value);
    public virtual void WriteString(string value, UTF8Encoding encoding);
    [CompilerGeneratedAttribute]
private void <WriteCString>g__SetBytes|48_0(Byte[] bytes, int lenght, <>c__DisplayClass48_0& );
}
public enum MongoDB.Bson.IO.ContextType : Enum {
    public int value__;
    public static ContextType TopLevel;
    public static ContextType Document;
    public static ContextType Array;
    public static ContextType JavaScriptWithScope;
    public static ContextType ScopeDocument;
}
internal static class MongoDB.Bson.IO.CStringUtf8Encoding : object {
    public static int GetBytes(string value, Byte[] bytes, int byteIndex, UTF8Encoding fallbackEncoding);
    public static int GetMaxByteCount(int charCount);
}
public class MongoDB.Bson.IO.DateTimeJsonToken : JsonToken {
    private BsonDateTime _value;
    public BsonDateTime DateTimeValue { get; }
    public DateTimeJsonToken(string lexeme, BsonDateTime value);
    public virtual BsonDateTime get_DateTimeValue();
}
public class MongoDB.Bson.IO.DoubleJsonToken : JsonToken {
    private double _value;
    public double DoubleValue { get; }
    public int Int32Value { get; }
    public long Int64Value { get; }
    public bool IsNumber { get; }
    public DoubleJsonToken(string lexeme, double value);
    public virtual double get_DoubleValue();
    public virtual int get_Int32Value();
    public virtual long get_Int64Value();
    public virtual bool get_IsNumber();
}
internal class MongoDB.Bson.IO.ElementAppendingBsonWriter : WrappingBsonWriter {
    private int _depth;
    private List`1<BsonElement> _elements;
    private Action`1<BsonWriterSettings> _settingsConfigurator;
    public ElementAppendingBsonWriter(IBsonWriter wrapped, IEnumerable`1<BsonElement> elements, Action`1<BsonWriterSettings> settingsConfigurator);
    public virtual void WriteEndDocument();
    public virtual void WriteRawBsonDocument(IByteBuffer slice);
    public virtual void WriteStartDocument();
}
[ExtensionAttribute]
internal static class MongoDB.Bson.IO.EncodingHelper : object {
    private static ArraySegment`1<byte> __emptySegment;
    private static EncodingHelper();
    [ExtensionAttribute]
public static DisposableSegment GetBytesUsingThreadStaticBuffer(Encoding encoding, string value);
}
internal interface MongoDB.Bson.IO.IArrayElementNameAccelerator {
    public abstract virtual Byte[] GetElementNameBytes(int index);
}
public interface MongoDB.Bson.IO.IBsonChunk {
    public ArraySegment`1<byte> Bytes { get; }
    public abstract virtual ArraySegment`1<byte> get_Bytes();
    public abstract virtual IBsonChunk Fork();
}
public interface MongoDB.Bson.IO.IBsonChunkSource {
    public abstract virtual IBsonChunk GetChunk(int requestedSize);
}
public interface MongoDB.Bson.IO.IBsonReader {
    public BsonType CurrentBsonType { get; }
    public BsonReaderState State { get; }
    public abstract virtual BsonType get_CurrentBsonType();
    public abstract virtual BsonReaderState get_State();
    public abstract virtual void Close();
    public abstract virtual BsonReaderBookmark GetBookmark();
    public abstract virtual BsonType GetCurrentBsonType();
    public abstract virtual bool IsAtEndOfFile();
    public abstract virtual void PopSettings();
    public abstract virtual void PushSettings(Action`1<BsonReaderSettings> configurator);
    public abstract virtual BsonBinaryData ReadBinaryData();
    public abstract virtual bool ReadBoolean();
    public abstract virtual BsonType ReadBsonType();
    public abstract virtual Byte[] ReadBytes();
    public abstract virtual long ReadDateTime();
    public abstract virtual Decimal128 ReadDecimal128();
    public abstract virtual double ReadDouble();
    public abstract virtual void ReadEndArray();
    public abstract virtual void ReadEndDocument();
    public abstract virtual int ReadInt32();
    public abstract virtual long ReadInt64();
    public abstract virtual string ReadJavaScript();
    public abstract virtual string ReadJavaScriptWithScope();
    public abstract virtual void ReadMaxKey();
    public abstract virtual void ReadMinKey();
    public abstract virtual string ReadName(INameDecoder nameDecoder);
    public abstract virtual void ReadNull();
    public abstract virtual ObjectId ReadObjectId();
    public abstract virtual IByteBuffer ReadRawBsonArray();
    public abstract virtual IByteBuffer ReadRawBsonDocument();
    public abstract virtual BsonRegularExpression ReadRegularExpression();
    public abstract virtual void ReadStartArray();
    public abstract virtual void ReadStartDocument();
    public abstract virtual string ReadString();
    public abstract virtual string ReadSymbol();
    public abstract virtual long ReadTimestamp();
    public abstract virtual void ReadUndefined();
    public abstract virtual void ReturnToBookmark(BsonReaderBookmark bookmark);
    public abstract virtual void SkipName();
    public abstract virtual void SkipValue();
}
[ExtensionAttribute]
public static class MongoDB.Bson.IO.IBsonReaderExtensions : object {
    [ExtensionAttribute]
public static bool FindElement(IBsonReader reader, string name);
    [ExtensionAttribute]
public static string FindStringElement(IBsonReader reader, string name);
    [ExtensionAttribute]
public static BsonBinaryData ReadBinaryData(IBsonReader reader, string name);
    [ExtensionAttribute]
[ObsoleteAttribute("In V3 mode use ReadBinaryData instead.")]
public static BsonBinaryData ReadBinaryDataWithGuidRepresentationUnspecified(IBsonReader reader);
    [ExtensionAttribute]
public static bool ReadBoolean(IBsonReader reader, string name);
    [ExtensionAttribute]
public static Byte[] ReadBytes(IBsonReader reader, string name);
    [ExtensionAttribute]
public static long ReadDateTime(IBsonReader reader, string name);
    [ExtensionAttribute]
public static Decimal128 ReadDecimal128(IBsonReader reader, string name);
    [ExtensionAttribute]
public static double ReadDouble(IBsonReader reader, string name);
    [ExtensionAttribute]
public static int ReadInt32(IBsonReader reader, string name);
    [ExtensionAttribute]
public static long ReadInt64(IBsonReader reader, string name);
    [ExtensionAttribute]
public static string ReadJavaScript(IBsonReader reader, string name);
    [ExtensionAttribute]
public static string ReadJavaScriptWithScope(IBsonReader reader, string name);
    [ExtensionAttribute]
public static void ReadMaxKey(IBsonReader reader, string name);
    [ExtensionAttribute]
public static void ReadMinKey(IBsonReader reader, string name);
    [ExtensionAttribute]
public static string ReadName(IBsonReader reader);
    [ExtensionAttribute]
public static void ReadName(IBsonReader reader, string name);
    [ExtensionAttribute]
public static void ReadNull(IBsonReader reader, string name);
    [ExtensionAttribute]
public static ObjectId ReadObjectId(IBsonReader reader, string name);
    [ExtensionAttribute]
public static IByteBuffer ReadRawBsonArray(IBsonReader reader, string name);
    [ExtensionAttribute]
public static IByteBuffer ReadRawBsonDocument(IBsonReader reader, string name);
    [ExtensionAttribute]
public static BsonRegularExpression ReadRegularExpression(IBsonReader reader, string name);
    [ExtensionAttribute]
public static string ReadString(IBsonReader reader, string name);
    [ExtensionAttribute]
public static string ReadSymbol(IBsonReader reader, string name);
    [ExtensionAttribute]
public static long ReadTimestamp(IBsonReader reader, string name);
    [ExtensionAttribute]
public static void ReadUndefined(IBsonReader reader, string name);
    private static void VerifyName(IBsonReader reader, string expectedName);
}
public interface MongoDB.Bson.IO.IBsonWriter {
    public long Position { get; }
    public int SerializationDepth { get; }
    public BsonWriterSettings Settings { get; }
    public BsonWriterState State { get; }
    public abstract virtual long get_Position();
    public abstract virtual int get_SerializationDepth();
    public abstract virtual BsonWriterSettings get_Settings();
    public abstract virtual BsonWriterState get_State();
    public abstract virtual void Close();
    public abstract virtual void Flush();
    public abstract virtual void PopElementNameValidator();
    public abstract virtual void PopSettings();
    public abstract virtual void PushElementNameValidator(IElementNameValidator validator);
    public abstract virtual void PushSettings(Action`1<BsonWriterSettings> configurator);
    public abstract virtual void WriteBinaryData(BsonBinaryData binaryData);
    public abstract virtual void WriteBoolean(bool value);
    public abstract virtual void WriteBytes(Byte[] bytes);
    public abstract virtual void WriteDateTime(long value);
    public abstract virtual void WriteDecimal128(Decimal128 value);
    public abstract virtual void WriteDouble(double value);
    public abstract virtual void WriteEndArray();
    public abstract virtual void WriteEndDocument();
    public abstract virtual void WriteInt32(int value);
    public abstract virtual void WriteInt64(long value);
    public abstract virtual void WriteJavaScript(string code);
    public abstract virtual void WriteJavaScriptWithScope(string code);
    public abstract virtual void WriteMaxKey();
    public abstract virtual void WriteMinKey();
    public abstract virtual void WriteName(string name);
    public abstract virtual void WriteNull();
    public abstract virtual void WriteObjectId(ObjectId objectId);
    public abstract virtual void WriteRawBsonArray(IByteBuffer slice);
    public abstract virtual void WriteRawBsonDocument(IByteBuffer slice);
    public abstract virtual void WriteRegularExpression(BsonRegularExpression regex);
    public abstract virtual void WriteStartArray();
    public abstract virtual void WriteStartDocument();
    public abstract virtual void WriteString(string value);
    public abstract virtual void WriteSymbol(string value);
    public abstract virtual void WriteTimestamp(long value);
    public abstract virtual void WriteUndefined();
}
[ExtensionAttribute]
public static class MongoDB.Bson.IO.IBsonWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteBinaryData(IBsonWriter writer, string name, BsonBinaryData binaryData);
    [ExtensionAttribute]
public static void WriteBoolean(IBsonWriter writer, string name, bool value);
    [ExtensionAttribute]
public static void WriteBytes(IBsonWriter writer, string name, Byte[] bytes);
    [ExtensionAttribute]
public static void WriteDateTime(IBsonWriter writer, string name, long value);
    [ExtensionAttribute]
public static void WriteDecimal128(IBsonWriter writer, string name, Decimal128 value);
    [ExtensionAttribute]
public static void WriteDouble(IBsonWriter writer, string name, double value);
    [ExtensionAttribute]
public static void WriteInt32(IBsonWriter writer, string name, int value);
    [ExtensionAttribute]
public static void WriteInt64(IBsonWriter writer, string name, long value);
    [ExtensionAttribute]
public static void WriteJavaScript(IBsonWriter writer, string name, string code);
    [ExtensionAttribute]
public static void WriteJavaScriptWithScope(IBsonWriter writer, string name, string code);
    [ExtensionAttribute]
public static void WriteMaxKey(IBsonWriter writer, string name);
    [ExtensionAttribute]
public static void WriteMinKey(IBsonWriter writer, string name);
    [ExtensionAttribute]
public static void WriteNull(IBsonWriter writer, string name);
    [ExtensionAttribute]
public static void WriteObjectId(IBsonWriter writer, string name, ObjectId objectId);
    [ExtensionAttribute]
public static void WriteRawBsonArray(IBsonWriter writer, string name, IByteBuffer slice);
    [ExtensionAttribute]
public static void WriteRawBsonDocument(IBsonWriter writer, string name, IByteBuffer slice);
    [ExtensionAttribute]
public static void WriteRegularExpression(IBsonWriter writer, string name, BsonRegularExpression regex);
    [ExtensionAttribute]
public static void WriteStartArray(IBsonWriter writer, string name);
    [ExtensionAttribute]
public static void WriteStartDocument(IBsonWriter writer, string name);
    [ExtensionAttribute]
public static void WriteString(IBsonWriter writer, string name, string value);
    [ExtensionAttribute]
public static void WriteSymbol(IBsonWriter writer, string name, string value);
    [ExtensionAttribute]
public static void WriteTimestamp(IBsonWriter writer, string name, long value);
    [ExtensionAttribute]
public static void WriteUndefined(IBsonWriter writer, string name);
}
public interface MongoDB.Bson.IO.IByteBuffer {
    public int Capacity { get; }
    public bool IsReadOnly { get; }
    public int Length { get; public set; }
    public abstract virtual int get_Capacity();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual int get_Length();
    public abstract virtual void set_Length(int value);
    public abstract virtual ArraySegment`1<byte> AccessBackingBytes(int position);
    public abstract virtual void Clear(int position, int count);
    public abstract virtual void EnsureCapacity(int minimumCapacity);
    public abstract virtual IByteBuffer GetSlice(int position, int length);
    public abstract virtual void MakeReadOnly();
    public abstract virtual byte GetByte(int position);
    public abstract virtual void GetBytes(int position, Byte[] destination, int offset, int count);
    public abstract virtual void SetByte(int position, byte value);
    public abstract virtual void SetBytes(int position, Byte[] source, int offset, int count);
}
public interface MongoDB.Bson.IO.IElementNameValidator {
    public abstract virtual IElementNameValidator GetValidatorForChildContent(string elementName);
    public abstract virtual bool IsValidElementName(string elementName);
}
public interface MongoDB.Bson.IO.INameDecoder {
    public abstract virtual string Decode(BsonStream stream, UTF8Encoding encoding);
    public abstract virtual void Inform(string name);
}
public class MongoDB.Bson.IO.InputBufferChunkSource : object {
    private static int DefaultMaxChunkSize;
    private static int DefaultMaxUnpooledChunkSize;
    private static int DefaultMinChunkSize;
    private IBsonChunkSource _baseSource;
    private bool _disposed;
    private int _maxChunkSize;
    private int _maxUnpooledChunkSize;
    private int _minChunkSize;
    public IBsonChunkSource BaseSource { get; }
    public int MaxChunkSize { get; }
    public int MinChunkSize { get; }
    public int MaxUnpooledChunkSize { get; }
    public InputBufferChunkSource(IBsonChunkSource baseSource, int maxUnpooledChunkSize, int minChunkSize, int maxChunkSize);
    public IBsonChunkSource get_BaseSource();
    public int get_MaxChunkSize();
    public int get_MinChunkSize();
    public int get_MaxUnpooledChunkSize();
    public sealed virtual void Dispose();
    public sealed virtual IBsonChunk GetChunk(int requestedSize);
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.Int32JsonToken : JsonToken {
    private int _value;
    public double DoubleValue { get; }
    public int Int32Value { get; }
    public long Int64Value { get; }
    public bool IsNumber { get; }
    public Int32JsonToken(string lexeme, int value);
    public virtual double get_DoubleValue();
    public virtual int get_Int32Value();
    public virtual long get_Int64Value();
    public virtual bool get_IsNumber();
}
public class MongoDB.Bson.IO.Int64JsonToken : JsonToken {
    private long _value;
    public double DoubleValue { get; }
    public int Int32Value { get; }
    public long Int64Value { get; }
    public bool IsNumber { get; }
    public Int64JsonToken(string lexeme, long value);
    public virtual double get_DoubleValue();
    public virtual int get_Int32Value();
    public virtual long get_Int64Value();
    public virtual bool get_IsNumber();
}
public interface MongoDB.Bson.IO.IStreamEfficientCopyTo {
    public abstract virtual void EfficientCopyTo(Stream destination);
}
internal class MongoDB.Bson.IO.JsonBuffer : object {
    private StringBuilder _buffer;
    private int _position;
    private TextReader _reader;
    public int Position { get; public set; }
    public JsonBuffer(string json);
    public JsonBuffer(TextReader reader);
    public int get_Position();
    public void set_Position(int value);
    public string GetSnippet(int start, int maxLength);
    public string GetSubstring(int start, int count);
    public int Read();
    public void ResetBuffer();
    public void UnRead(int c);
    private void ReadMoreIfAtEndOfBuffer();
}
public static class MongoDB.Bson.IO.JsonConvert : object {
    public static bool ToBoolean(string value);
    public static DateTime ToDateTime(string value);
    public static DateTimeOffset ToDateTimeOffset(string value);
    public static decimal ToDecimal(string value);
    public static Decimal128 ToDecimal128(string value);
    public static double ToDouble(string value);
    public static short ToInt16(string value);
    public static int ToInt32(string value);
    public static long ToInt64(string value);
    public static float ToSingle(string value);
    public static string ToString(bool value);
    public static string ToString(DateTime value);
    public static string ToString(DateTimeOffset value);
    public static string ToString(decimal value);
    public static string ToString(Decimal128 value);
    public static string ToString(double value);
    public static string ToString(float value);
    public static string ToString(int value);
    public static string ToString(long value);
    public static string ToString(short value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string value);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string value);
}
public enum MongoDB.Bson.IO.JsonOutputMode : Enum {
    public int value__;
    [ObsoleteAttribute("Use CanonicalExtendedJson instead.")]
public static JsonOutputMode Strict;
    public static JsonOutputMode Shell;
    public static JsonOutputMode CanonicalExtendedJson;
    public static JsonOutputMode RelaxedExtendedJson;
    [ObsoleteAttribute("Use Shell instead.")]
public static JsonOutputMode JavaScript;
    [ObsoleteAttribute("Use Shell instead.")]
public static JsonOutputMode TenGen;
}
public class MongoDB.Bson.IO.JsonReader : BsonReader {
    private static String[] __variableLengthIso8601Formats;
    private static String[][] __fixedLengthIso8601Formats;
    private JsonBuffer _buffer;
    private JsonReaderSettings _jsonReaderSettings;
    private JsonReaderContext _context;
    private JsonToken _currentToken;
    private BsonValue _currentValue;
    private JsonToken _pushedToken;
    public JsonReader(string json);
    public JsonReader(string json, JsonReaderSettings settings);
    public JsonReader(TextReader textReader);
    public JsonReader(TextReader textReader, JsonReaderSettings settings);
    private JsonReader(JsonBuffer buffer, JsonReaderSettings settings);
    private static JsonReader();
    public virtual void Close();
    public virtual BsonReaderBookmark GetBookmark();
    public virtual bool IsAtEndOfFile();
    public virtual BsonBinaryData ReadBinaryData();
    public virtual bool ReadBoolean();
    public virtual BsonType ReadBsonType();
    public virtual Byte[] ReadBytes();
    public virtual long ReadDateTime();
    public virtual Decimal128 ReadDecimal128();
    public virtual double ReadDouble();
    public virtual void ReadEndArray();
    public virtual void ReadEndDocument();
    public virtual int ReadInt32();
    public virtual long ReadInt64();
    public virtual string ReadJavaScript();
    public virtual string ReadJavaScriptWithScope();
    public virtual void ReadMaxKey();
    public virtual void ReadMinKey();
    public virtual string ReadName(INameDecoder nameDecoder);
    public virtual void ReadNull();
    public virtual ObjectId ReadObjectId();
    public virtual BsonRegularExpression ReadRegularExpression();
    public virtual void ReadStartArray();
    public virtual void ReadStartDocument();
    public virtual string ReadString();
    public virtual string ReadSymbol();
    public virtual long ReadTimestamp();
    public virtual void ReadUndefined();
    public virtual void ReturnToBookmark(BsonReaderBookmark bookmark);
    public virtual void SkipName();
    public virtual void SkipValue();
    protected virtual void Dispose(bool disposing);
    private string FormatInvalidTokenMessage(JsonToken token);
    private string FormatJavaScriptDateTimeString(DateTime dateTime);
    private BsonReaderState GetNextState();
    private bool IsValidBinaryDataSubTypeString(string value);
    private BsonValue ParseBinDataConstructor();
    private BsonValue ParseBinDataExtendedJson();
    private void ParseBinDataExtendedJsonCanonical(Byte[]& bytes, BsonBinarySubType& subType);
    private void ParseBinDataExtendedJsonLegacy(JsonToken nextToken, Byte[]& bytes, BsonBinarySubType& subType);
    private BsonValue ParseHexDataConstructor();
    private BsonType ParseJavaScriptExtendedJson(BsonValue& value);
    private BsonValue ParseISODateTimeConstructor();
    private BsonValue ParseDateTimeExtendedJson();
    private BsonValue ParseDateTimeConstructor(bool withNew);
    private BsonType ParseExtendedJson();
    private DateTime ParseJavaScriptDateTimeString(string dateTimeString);
    private BsonValue ParseMaxKeyExtendedJson();
    private BsonValue ParseMinKeyExtendedJson();
    private BsonType ParseNew(BsonValue& value);
    private BsonValue ParseNumberConstructor();
    private BsonValue ParseNumberDecimalConstructor();
    private BsonValue ParseNumberLongConstructor();
    private BsonValue ParseNumberDecimalExtendedJson();
    private BsonValue ParseNumberDoubleExtendedJson();
    private BsonValue ParseNumberIntExtendedJson();
    private BsonValue ParseNumberLongExtendedJson();
    private BsonValue ParseObjectIdConstructor();
    private BsonValue ParseObjectIdExtendedJson();
    private BsonValue ParseRegularExpressionExtendedJsonCanonical();
    private BsonValue ParseRegularExpressionConstructor();
    private bool TryParseRegularExpressionExtendedJsonLegacy(BsonValue& value);
    private BsonValue ParseSymbolExtendedJson();
    private BsonValue ParseTimestampConstructor();
    private BsonValue ParseTimestampExtendedJson();
    private BsonValue ParseTimestampExtendedJsonNewRepresentation();
    private BsonValue ParseTimestampExtendedJsonOldRepresentation(JsonToken valueToken);
    private BsonValue ParseUndefinedExtendedJson();
    private BsonValue ParseUuidExtendedJson();
    private BsonValue ParseUUIDConstructor(string uuidConstructorName);
    private JsonToken PopToken();
    private void PushToken(JsonToken token);
    private void VerifyString(string expectedString);
    private void VerifyToken(string expectedLexeme);
}
public class MongoDB.Bson.IO.JsonReaderBookmark : BsonReaderBookmark {
    private JsonReaderContext _context;
    private JsonToken _currentToken;
    private BsonValue _currentValue;
    private JsonToken _pushedToken;
    private int _position;
    internal JsonToken CurrentToken { get; }
    internal BsonValue CurrentValue { get; }
    internal int Position { get; }
    internal JsonToken PushedToken { get; }
    internal JsonReaderBookmark(BsonReaderState state, BsonType currentBsonType, string currentName, JsonReaderContext context, JsonToken currentToken, BsonValue currentValue, JsonToken pushedToken, int position);
    internal JsonToken get_CurrentToken();
    internal BsonValue get_CurrentValue();
    internal int get_Position();
    internal JsonToken get_PushedToken();
    internal JsonReaderContext CloneContext();
}
internal class MongoDB.Bson.IO.JsonReaderContext : object {
    private JsonReaderContext _parentContext;
    private ContextType _contextType;
    internal ContextType ContextType { get; }
    internal JsonReaderContext(JsonReaderContext parentContext, ContextType contextType);
    internal ContextType get_ContextType();
    public JsonReaderContext Clone();
    public JsonReaderContext PopContext();
}
public class MongoDB.Bson.IO.JsonReaderSettings : BsonReaderSettings {
    private static JsonReaderSettings __defaults;
    public static JsonReaderSettings Defaults { get; public set; }
    public static JsonReaderSettings get_Defaults();
    public static void set_Defaults(JsonReaderSettings value);
    public JsonReaderSettings Clone();
    protected virtual BsonReaderSettings CloneImplementation();
}
internal static class MongoDB.Bson.IO.JsonScanner : object {
    public static JsonToken GetNextToken(JsonBuffer buffer);
    private static string FormatMessage(string message, JsonBuffer buffer, int start);
    private static JsonToken GetNumberToken(JsonBuffer buffer, int firstChar);
    private static JsonToken GetRegularExpressionToken(JsonBuffer buffer);
    private static JsonToken GetStringToken(JsonBuffer buffer, char quoteCharacter);
    private static JsonToken GetUnquotedStringToken(JsonBuffer buffer);
}
public class MongoDB.Bson.IO.JsonToken : object {
    private JsonTokenType _type;
    private string _lexeme;
    public JsonTokenType Type { get; }
    public string Lexeme { get; }
    public BsonDateTime DateTimeValue { get; }
    public double DoubleValue { get; }
    public int Int32Value { get; }
    public long Int64Value { get; }
    public bool IsNumber { get; }
    public ObjectId ObjectIdValue { get; }
    public BsonRegularExpression RegularExpressionValue { get; }
    public string StringValue { get; }
    public JsonToken(JsonTokenType type, string lexeme);
    public JsonTokenType get_Type();
    public string get_Lexeme();
    public virtual BsonDateTime get_DateTimeValue();
    public virtual double get_DoubleValue();
    public virtual int get_Int32Value();
    public virtual long get_Int64Value();
    public virtual bool get_IsNumber();
    public virtual ObjectId get_ObjectIdValue();
    public virtual BsonRegularExpression get_RegularExpressionValue();
    public virtual string get_StringValue();
}
public enum MongoDB.Bson.IO.JsonTokenType : Enum {
    public int value__;
    public static JsonTokenType Invalid;
    public static JsonTokenType BeginArray;
    public static JsonTokenType BeginObject;
    public static JsonTokenType EndArray;
    public static JsonTokenType LeftParen;
    public static JsonTokenType RightParen;
    public static JsonTokenType EndObject;
    public static JsonTokenType Colon;
    public static JsonTokenType Comma;
    public static JsonTokenType DateTime;
    public static JsonTokenType Double;
    public static JsonTokenType Int32;
    public static JsonTokenType Int64;
    public static JsonTokenType ObjectId;
    public static JsonTokenType RegularExpression;
    public static JsonTokenType String;
    public static JsonTokenType UnquotedString;
    public static JsonTokenType EndOfFile;
}
public class MongoDB.Bson.IO.JsonWriter : BsonWriter {
    private TextWriter _textWriter;
    private JsonWriterContext _context;
    public TextWriter BaseTextWriter { get; }
    public long Position { get; }
    public JsonWriterSettings Settings { get; }
    public JsonWriter(TextWriter writer);
    public JsonWriter(TextWriter writer, JsonWriterSettings settings);
    public TextWriter get_BaseTextWriter();
    public virtual long get_Position();
    public JsonWriterSettings get_Settings();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteBinaryData(BsonBinaryData binaryData);
    public virtual void WriteBoolean(bool value);
    public virtual void WriteBytes(Byte[] bytes);
    public virtual void WriteDateTime(long value);
    public virtual void WriteDecimal128(Decimal128 value);
    public virtual void WriteDouble(double value);
    public virtual void WriteEndArray();
    public virtual void WriteEndDocument();
    public virtual void WriteInt32(int value);
    public virtual void WriteInt64(long value);
    public virtual void WriteJavaScript(string code);
    public virtual void WriteJavaScriptWithScope(string code);
    public virtual void WriteMaxKey();
    public virtual void WriteMinKey();
    public virtual void WriteNull();
    public virtual void WriteObjectId(ObjectId objectId);
    public virtual void WriteRegularExpression(BsonRegularExpression regex);
    public virtual void WriteStartArray();
    public virtual void WriteStartDocument();
    public virtual void WriteString(string value);
    public virtual void WriteSymbol(string value);
    public virtual void WriteTimestamp(long value);
    public virtual void WriteUndefined();
    protected virtual void Dispose(bool disposing);
    private string EscapedString(string value);
    private BsonWriterState GetNextState();
    private string GuidToString(BsonBinarySubType subType, Byte[] bytes, GuidRepresentation guidRepresentation);
    private static bool NeedsEscaping(string text);
    private static bool NeedsEscaping(char c);
    private void WriteNameHelper(string name);
    private void WriteQuotedString(string value);
}
internal class MongoDB.Bson.IO.JsonWriterContext : object {
    private JsonWriterContext _parentContext;
    private ContextType _contextType;
    private string _indentation;
    private bool _hasElements;
    internal JsonWriterContext ParentContext { get; }
    internal ContextType ContextType { get; }
    internal string Indentation { get; }
    internal bool HasElements { get; internal set; }
    internal JsonWriterContext(JsonWriterContext parentContext, ContextType contextType, string indentChars);
    internal JsonWriterContext get_ParentContext();
    internal ContextType get_ContextType();
    internal string get_Indentation();
    internal bool get_HasElements();
    internal void set_HasElements(bool value);
}
public class MongoDB.Bson.IO.JsonWriterSettings : BsonWriterSettings {
    private static JsonWriterSettings __defaults;
    private Encoding _encoding;
    private bool _indent;
    private string _indentChars;
    private string _newLineChars;
    private JsonOutputMode _outputMode;
    private Version _shellVersion;
    public static JsonWriterSettings Defaults { get; public set; }
    [ObsoleteAttribute("Set the Encoding when you create a StreamWriter instead (this property is ignored).")]
public Encoding Encoding { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public string NewLineChars { get; public set; }
    public JsonOutputMode OutputMode { get; public set; }
    public Version ShellVersion { get; public set; }
    public static JsonWriterSettings get_Defaults();
    public static void set_Defaults(JsonWriterSettings value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public JsonOutputMode get_OutputMode();
    public void set_OutputMode(JsonOutputMode value);
    public Version get_ShellVersion();
    public void set_ShellVersion(Version value);
    public JsonWriterSettings Clone();
    protected virtual BsonWriterSettings CloneImplementation();
}
public class MongoDB.Bson.IO.MultiChunkBuffer : object {
    private int _capacity;
    private int _chunkIndex;
    private List`1<IBsonChunk> _chunks;
    private IBsonChunkSource _chunkSource;
    private bool _disposed;
    private bool _isReadOnly;
    private int _length;
    private List`1<int> _positions;
    public int Capacity { get; }
    public IBsonChunkSource ChunkSource { get; }
    public bool IsReadOnly { get; }
    public int Length { get; public set; }
    public MultiChunkBuffer(IBsonChunkSource chunkSource);
    public MultiChunkBuffer(IEnumerable`1<IBsonChunk> chunks, Nullable`1<int> length, bool isReadOnly);
    public sealed virtual int get_Capacity();
    public IBsonChunkSource get_ChunkSource();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Length();
    public sealed virtual void set_Length(int value);
    public sealed virtual ArraySegment`1<byte> AccessBackingBytes(int position);
    public sealed virtual void Clear(int position, int count);
    public sealed virtual void Dispose();
    public sealed virtual void EnsureCapacity(int minimumCapacity);
    public sealed virtual byte GetByte(int position);
    public sealed virtual void GetBytes(int position, Byte[] destination, int offset, int count);
    public sealed virtual IByteBuffer GetSlice(int position, int length);
    public sealed virtual void MakeReadOnly();
    public sealed virtual void SetByte(int position, byte value);
    public sealed virtual void SetBytes(int position, Byte[] source, int offset, int count);
    private void EnsureIsReadOnly();
    private void EnsureIsWritable();
    private void ExpandCapacity(int minimumCapacity);
    private int GetChunkIndex(int position);
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.NoOpElementNameValidator : object {
    private static NoOpElementNameValidator __instance;
    public static NoOpElementNameValidator Instance { get; }
    private static NoOpElementNameValidator();
    public static NoOpElementNameValidator get_Instance();
    public sealed virtual IElementNameValidator GetValidatorForChildContent(string elementName);
    public sealed virtual bool IsValidElementName(string elementName);
}
public class MongoDB.Bson.IO.ObjectIdJsonToken : JsonToken {
    private ObjectId _value;
    public ObjectId ObjectIdValue { get; }
    public ObjectIdJsonToken(string lexeme, ObjectId value);
    public virtual ObjectId get_ObjectIdValue();
}
public class MongoDB.Bson.IO.OutputBufferChunkSource : object {
    private static int DefaultInitialUnpooledChunkSize;
    private static int DefaultMaxChunkSize;
    private static int DefaultMinChunkSize;
    private IBsonChunkSource _baseSource;
    private bool _disposed;
    private int _initialUnpooledChunkSize;
    private int _maxChunkSize;
    private int _minChunkSize;
    private int _previousChunkSize;
    public IBsonChunkSource BaseSource { get; }
    public int InitialUnpooledChunkSize { get; }
    public int MaxChunkSize { get; }
    public int MinChunkSize { get; }
    public OutputBufferChunkSource(IBsonChunkSource baseSource, int initialUnpooledChunkSize, int minChunkSize, int maxChunkSize);
    public IBsonChunkSource get_BaseSource();
    public int get_InitialUnpooledChunkSize();
    public int get_MaxChunkSize();
    public int get_MinChunkSize();
    public sealed virtual void Dispose();
    public sealed virtual IBsonChunk GetChunk(int requestedSize);
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.RegularExpressionJsonToken : JsonToken {
    private BsonRegularExpression _value;
    public BsonRegularExpression RegularExpressionValue { get; }
    public RegularExpressionJsonToken(string lexeme, BsonRegularExpression value);
    public virtual BsonRegularExpression get_RegularExpressionValue();
}
public class MongoDB.Bson.IO.SingleChunkBuffer : object {
    private IBsonChunk _chunk;
    private bool _disposed;
    private bool _isReadOnly;
    private int _length;
    public int Capacity { get; }
    public bool IsReadOnly { get; }
    public int Length { get; public set; }
    public SingleChunkBuffer(IBsonChunk chunk, int length, bool isReadOnly);
    public sealed virtual int get_Capacity();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Length();
    public sealed virtual void set_Length(int value);
    public sealed virtual ArraySegment`1<byte> AccessBackingBytes(int position);
    public sealed virtual void Clear(int position, int count);
    public sealed virtual void Dispose();
    public sealed virtual void EnsureCapacity(int minimumCapacity);
    public sealed virtual byte GetByte(int position);
    public sealed virtual void GetBytes(int position, Byte[] destination, int offset, int count);
    public sealed virtual IByteBuffer GetSlice(int position, int length);
    public sealed virtual void MakeReadOnly();
    public sealed virtual void SetByte(int position, byte value);
    public sealed virtual void SetBytes(int position, Byte[] source, int offset, int count);
    private void EnsureIsReadOnly();
    private void EnsureIsWritable();
    private void ThrowIfDisposed();
}
public class MongoDB.Bson.IO.StringJsonToken : JsonToken {
    private string _value;
    public string StringValue { get; }
    public StringJsonToken(JsonTokenType type, string lexeme, string value);
    public virtual string get_StringValue();
}
internal static class MongoDB.Bson.IO.ThreadStaticBuffer : object {
    private static int MinSize;
    private static int MaxSize;
    private static int MaxAllocationSize;
    [ThreadStaticAttribute]
private static Byte[] __buffer;
    [ThreadStaticAttribute]
private static bool __isBufferRented;
    [ThreadStaticAttribute]
private static int __threadId;
    public static RentedBuffer RentBuffer(int size);
}
public class MongoDB.Bson.IO.TrieNameDecoder`1 : object {
    private bool _found;
    private BsonTrie`1<TValue> _trie;
    private TValue _value;
    public bool Found { get; }
    public TValue Value { get; }
    public TrieNameDecoder`1(BsonTrie`1<TValue> trie);
    public bool get_Found();
    public TValue get_Value();
    public sealed virtual string Decode(BsonStream stream, UTF8Encoding encoding);
    public sealed virtual void Inform(string name);
}
public static class MongoDB.Bson.IO.Utf8Encodings : object {
    private static UTF8Encoding __lenient;
    private static UTF8Encoding __strict;
    public static UTF8Encoding Lenient { get; }
    public static UTF8Encoding Strict { get; }
    private static Utf8Encodings();
    public static UTF8Encoding get_Lenient();
    public static UTF8Encoding get_Strict();
}
public static class MongoDB.Bson.IO.Utf8Helper : object {
    private static String[] __asciiStringTable;
    private static Utf8Helper();
    public static string DecodeUtf8String(Byte[] bytes, int index, int count, UTF8Encoding encoding);
}
public class MongoDB.Bson.IO.Utf8NameDecoder : object {
    private static Utf8NameDecoder __instance;
    public static Utf8NameDecoder Instance { get; }
    private static Utf8NameDecoder();
    public static Utf8NameDecoder get_Instance();
    public sealed virtual string Decode(BsonStream stream, UTF8Encoding encoding);
    public sealed virtual void Inform(string name);
}
public abstract class MongoDB.Bson.IO.WrappingBsonWriter : object {
    private bool _disposed;
    private IBsonWriter _wrapped;
    public long Position { get; }
    public int SerializationDepth { get; }
    public BsonWriterSettings Settings { get; }
    public BsonWriterState State { get; }
    public IBsonWriter Wrapped { get; }
    public WrappingBsonWriter(IBsonWriter wrapped);
    public virtual long get_Position();
    public virtual int get_SerializationDepth();
    public virtual BsonWriterSettings get_Settings();
    public virtual BsonWriterState get_State();
    public IBsonWriter get_Wrapped();
    public virtual void Close();
    public sealed virtual void Dispose();
    public virtual void Flush();
    public virtual void PopElementNameValidator();
    public virtual void PopSettings();
    public virtual void PushElementNameValidator(IElementNameValidator validator);
    public virtual void PushSettings(Action`1<BsonWriterSettings> configurator);
    public virtual void WriteBinaryData(BsonBinaryData binaryData);
    public virtual void WriteBoolean(bool value);
    public virtual void WriteBytes(Byte[] bytes);
    public virtual void WriteDateTime(long value);
    public virtual void WriteDecimal128(Decimal128 value);
    public virtual void WriteDouble(double value);
    public virtual void WriteEndArray();
    public virtual void WriteEndDocument();
    public virtual void WriteInt32(int value);
    public virtual void WriteInt64(long value);
    public virtual void WriteJavaScript(string code);
    public virtual void WriteJavaScriptWithScope(string code);
    public virtual void WriteMaxKey();
    public virtual void WriteMinKey();
    public virtual void WriteName(string name);
    public virtual void WriteNull();
    public virtual void WriteObjectId(ObjectId objectId);
    public virtual void WriteRawBsonArray(IByteBuffer slice);
    public virtual void WriteRawBsonDocument(IByteBuffer slice);
    public virtual void WriteRegularExpression(BsonRegularExpression regex);
    public virtual void WriteStartArray();
    public virtual void WriteStartDocument();
    public virtual void WriteString(string value);
    public virtual void WriteSymbol(string value);
    public virtual void WriteTimestamp(long value);
    public virtual void WriteUndefined();
    protected virtual void Dispose(bool disposing);
    protected void ThrowIfDisposed();
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.LazyBsonArraySerializer")]
public class MongoDB.Bson.LazyBsonArray : MaterializedOnDemandBsonArray {
    private IByteBuffer _slice;
    private List`1<IDisposable> _disposableItems;
    private BsonBinaryReaderSettings _readerSettings;
    public IByteBuffer Slice { get; }
    public LazyBsonArray(IByteBuffer slice);
    public IByteBuffer get_Slice();
    public virtual BsonValue Clone();
    public virtual BsonValue DeepClone();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<BsonValue> Materialize();
    protected virtual void MaterializeCompleted();
    private IByteBuffer CloneSlice();
    private LazyBsonArray DeserializeLazyBsonArray(BsonBinaryReader bsonReader);
    private LazyBsonDocument DeserializeLazyBsonDocument(BsonBinaryReader bsonReader);
    private IEnumerable`1<BsonValue> MaterializeThisLevel();
}
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.LazyBsonDocumentSerializer")]
public class MongoDB.Bson.LazyBsonDocument : MaterializedOnDemandBsonDocument {
    private IByteBuffer _slice;
    private List`1<IDisposable> _disposableItems;
    private BsonBinaryReaderSettings _readerSettings;
    public IByteBuffer Slice { get; }
    public LazyBsonDocument(IByteBuffer slice);
    public LazyBsonDocument(Byte[] bytes);
    public IByteBuffer get_Slice();
    public virtual BsonValue Clone();
    public virtual BsonValue DeepClone();
    protected virtual void Dispose(bool disposing);
    protected virtual IEnumerable`1<BsonElement> Materialize();
    protected virtual void MaterializeCompleted();
    private IByteBuffer CloneSlice();
    private LazyBsonArray DeserializeLazyBsonArray(BsonBinaryReader bsonReader);
    private LazyBsonDocument DeserializeLazyBsonDocument(BsonBinaryReader bsonReader);
    private IEnumerable`1<BsonElement> MaterializeThisLevel();
}
[DefaultMemberAttribute("Item")]
[BsonSerializerAttribute("MongoDB.Bson.MaterializedOnDemandBsonArray/MaterializedOnDemandBsonArraySerializer")]
public abstract class MongoDB.Bson.MaterializedOnDemandBsonArray : BsonArray {
    private bool _disposed;
    private bool _isMaterialized;
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsDisposed { get; }
    public bool IsMaterialized { get; }
    [ObsoleteAttribute("Use ToArray to ToList instead.")]
public IEnumerable`1<object> RawValues { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public BsonValue Item { get; public set; }
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public bool get_IsDisposed();
    public bool get_IsMaterialized();
    public virtual IEnumerable`1<object> get_RawValues();
    public virtual IEnumerable`1<BsonValue> get_Values();
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public virtual BsonArray Add(BsonValue value);
    public virtual BsonArray AddRange(IEnumerable`1<bool> values);
    public virtual BsonArray AddRange(IEnumerable`1<BsonValue> values);
    public virtual BsonArray AddRange(IEnumerable`1<DateTime> values);
    public virtual BsonArray AddRange(IEnumerable`1<double> values);
    public virtual BsonArray AddRange(IEnumerable`1<int> values);
    public virtual BsonArray AddRange(IEnumerable`1<long> values);
    public virtual BsonArray AddRange(IEnumerable`1<ObjectId> values);
    public virtual BsonArray AddRange(IEnumerable`1<string> values);
    public virtual BsonArray AddRange(IEnumerable values);
    public virtual void Clear();
    public virtual BsonValue Clone();
    public virtual int CompareTo(BsonArray other);
    public virtual int CompareTo(BsonValue other);
    public virtual bool Contains(BsonValue value);
    public virtual void CopyTo(BsonValue[] array, int arrayIndex);
    [ObsoleteAttribute("Use ToArray or ToList instead.")]
public virtual void CopyTo(Object[] array, int arrayIndex);
    public virtual BsonValue DeepClone();
    public sealed virtual void Dispose();
    public virtual bool Equals(object obj);
    public virtual IEnumerator`1<BsonValue> GetEnumerator();
    public virtual int GetHashCode();
    public virtual int IndexOf(BsonValue value);
    public virtual int IndexOf(BsonValue value, int index);
    public virtual int IndexOf(BsonValue value, int index, int count);
    public virtual void Insert(int index, BsonValue value);
    public virtual bool Remove(BsonValue value);
    public virtual void RemoveAt(int index);
    public virtual BsonValue[] ToArray();
    public virtual List`1<BsonValue> ToList();
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual IEnumerable`1<BsonValue> Materialize();
    protected abstract virtual void MaterializeCompleted();
    protected void ThrowIfDisposed();
    private void EnsureIsMaterialized();
}
[DefaultMemberAttribute("Item")]
[BsonSerializerAttribute("MongoDB.Bson.MaterializedOnDemandBsonDocumentSerializer")]
public abstract class MongoDB.Bson.MaterializedOnDemandBsonDocument : BsonDocument {
    private bool _disposed;
    private bool _isMaterialized;
    public int ElementCount { get; }
    public IEnumerable`1<BsonElement> Elements { get; }
    public bool IsDisposed { get; }
    public bool IsMaterialized { get; }
    public IEnumerable`1<string> Names { get; }
    [ObsoleteAttribute("Use Values instead.")]
public IEnumerable`1<object> RawValues { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public BsonValue Item { get; public set; }
    [ObsoleteAttribute("Use GetValue(string name, BsonValue defaultValue) instead.")]
public BsonValue Item { get; }
    public BsonValue Item { get; public set; }
    public virtual int get_ElementCount();
    public virtual IEnumerable`1<BsonElement> get_Elements();
    public bool get_IsDisposed();
    public bool get_IsMaterialized();
    public virtual IEnumerable`1<string> get_Names();
    public virtual IEnumerable`1<object> get_RawValues();
    public virtual IEnumerable`1<BsonValue> get_Values();
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public virtual BsonValue get_Item(string name, BsonValue defaultValue);
    public virtual BsonValue get_Item(string name);
    public virtual void set_Item(string name, BsonValue value);
    public virtual BsonDocument Add(BsonElement element);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IDictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IDictionary dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(IDictionary dictionary, IEnumerable keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(BsonElement[] elements);
    public virtual BsonDocument Add(string name, BsonValue value);
    public virtual BsonDocument Add(string name, BsonValue value, bool condition);
    public virtual BsonDocument Add(string name, Func`1<BsonValue> valueFactory, bool condition);
    public virtual BsonDocument AddRange(Dictionary`2<string, object> dictionary);
    public virtual BsonDocument AddRange(IDictionary dictionary);
    public virtual BsonDocument AddRange(IEnumerable`1<BsonElement> elements);
    public virtual BsonDocument AddRange(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    public virtual void Clear();
    public virtual BsonValue Clone();
    public virtual int CompareTo(BsonDocument other);
    public virtual int CompareTo(BsonValue other);
    public virtual bool Contains(string name);
    public virtual bool ContainsValue(BsonValue value);
    public virtual BsonValue DeepClone();
    public sealed virtual void Dispose();
    public virtual bool Equals(object obj);
    public virtual BsonElement GetElement(int index);
    public virtual BsonElement GetElement(string name);
    public virtual IEnumerator`1<BsonElement> GetEnumerator();
    public virtual int GetHashCode();
    public virtual BsonValue GetValue(int index);
    public virtual BsonValue GetValue(string name);
    public virtual BsonValue GetValue(string name, BsonValue defaultValue);
    public virtual void InsertAt(int index, BsonElement element);
    public virtual BsonDocument Merge(BsonDocument document);
    public virtual BsonDocument Merge(BsonDocument document, bool overwriteExistingElements);
    public virtual void Remove(string name);
    public virtual void RemoveAt(int index);
    public virtual void RemoveElement(BsonElement element);
    public virtual BsonDocument Set(int index, BsonValue value);
    public virtual BsonDocument Set(string name, BsonValue value);
    public virtual BsonDocument SetElement(BsonElement element);
    public virtual BsonDocument SetElement(int index, BsonElement element);
    public virtual bool TryGetElement(string name, BsonElement& value);
    public virtual bool TryGetValue(string name, BsonValue& value);
    protected virtual void Dispose(bool disposing);
    protected abstract virtual IEnumerable`1<BsonElement> Materialize();
    protected abstract virtual void MaterializeCompleted();
    protected void ThrowIfDisposed();
    private void EnsureIsMaterialized();
}
internal class MongoDB.Bson.MaterializedOnDemandBsonDocumentSerializer : AbstractClassSerializer`1<MaterializedOnDemandBsonDocument> {
}
public class MongoDB.Bson.ObjectId : ValueType {
    private static ObjectId __emptyInstance;
    private static long __random;
    private static int __staticIncrement;
    private int _a;
    private int _b;
    private int _c;
    public static ObjectId Empty { get; }
    public int Timestamp { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int Machine { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public short Pid { get; }
    [ObsoleteAttribute("This property will be removed in a later release.")]
public int Increment { get; }
    public DateTime CreationTime { get; }
    public ObjectId(Byte[] bytes);
    internal ObjectId(Byte[] bytes, int index);
    [ObsoleteAttribute("This constructor will be removed in a later release.")]
public ObjectId(DateTime timestamp, int machine, short pid, int increment);
    [ObsoleteAttribute("This constructor will be removed in a later release.")]
public ObjectId(int timestamp, int machine, short pid, int increment);
    public ObjectId(string value);
    private ObjectId(int a, int b, int c);
    private static ObjectId();
    public static ObjectId get_Empty();
    public int get_Timestamp();
    public int get_Machine();
    public short get_Pid();
    public int get_Increment();
    public DateTime get_CreationTime();
    public static bool op_LessThan(ObjectId lhs, ObjectId rhs);
    public static bool op_LessThanOrEqual(ObjectId lhs, ObjectId rhs);
    public static bool op_Equality(ObjectId lhs, ObjectId rhs);
    public static bool op_Inequality(ObjectId lhs, ObjectId rhs);
    public static bool op_GreaterThanOrEqual(ObjectId lhs, ObjectId rhs);
    public static bool op_GreaterThan(ObjectId lhs, ObjectId rhs);
    public static ObjectId GenerateNewId();
    public static ObjectId GenerateNewId(DateTime timestamp);
    public static ObjectId GenerateNewId(int timestamp);
    [ObsoleteAttribute("This method will be removed in a later release.")]
public static Byte[] Pack(int timestamp, int machine, short pid, int increment);
    public static ObjectId Parse(string s);
    public static bool TryParse(string s, ObjectId& objectId);
    [ObsoleteAttribute("This method will be removed in a later release.")]
public static void Unpack(Byte[] bytes, Int32& timestamp, Int32& machine, Int16& pid, Int32& increment);
    internal static long CalculateRandomValue();
    private static ObjectId Create(int timestamp, long random, int increment);
    private static int GetCurrentProcessId();
    private static int GetMachineHash();
    private static string GetMachineName();
    private static short GetPid();
    private static int GetTimestampFromDateTime(DateTime timestamp);
    private static void FromByteArray(Byte[] bytes, int offset, Int32& a, Int32& b, Int32& c);
    public sealed virtual int CompareTo(ObjectId other);
    public sealed virtual bool Equals(ObjectId rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Byte[] ToByteArray();
    public void ToByteArray(Byte[] destination, int offset);
    public virtual string ToString();
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
}
internal static class MongoDB.Bson.PowerOf2 : object {
    public static bool IsPowerOf2(int n);
    public static int RoundUpToPowerOf2(int n);
}
[AttributeUsageAttribute("32767")]
[EditorBrowsableAttribute("1")]
public class MongoDB.Bson.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
}
[DefaultMemberAttribute("Item")]
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.RawBsonArraySerializer")]
public class MongoDB.Bson.RawBsonArray : BsonArray {
    private bool _disposed;
    private IByteBuffer _slice;
    private List`1<IDisposable> _disposableItems;
    private BsonBinaryReaderSettings _readerSettings;
    public int Capacity { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [ObsoleteAttribute("Use ToArray to ToList instead.")]
public IEnumerable`1<object> RawValues { get; }
    public IByteBuffer Slice { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public BsonValue Item { get; public set; }
    public RawBsonArray(IByteBuffer slice);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonArray/<get_RawValues>d__13")]
public virtual IEnumerable`1<object> get_RawValues();
    public IByteBuffer get_Slice();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonArray/<get_Values>d__17")]
public virtual IEnumerable`1<BsonValue> get_Values();
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public virtual BsonArray Add(BsonValue value);
    public virtual BsonArray AddRange(IEnumerable`1<bool> values);
    public virtual BsonArray AddRange(IEnumerable`1<BsonValue> values);
    public virtual BsonArray AddRange(IEnumerable`1<DateTime> values);
    public virtual BsonArray AddRange(IEnumerable`1<double> values);
    public virtual BsonArray AddRange(IEnumerable`1<int> values);
    public virtual BsonArray AddRange(IEnumerable`1<long> values);
    public virtual BsonArray AddRange(IEnumerable`1<ObjectId> values);
    public virtual BsonArray AddRange(IEnumerable`1<string> values);
    public virtual BsonArray AddRange(IEnumerable values);
    public virtual BsonValue Clone();
    public virtual void Clear();
    public virtual bool Contains(BsonValue value);
    public virtual void CopyTo(BsonValue[] array, int arrayIndex);
    [ObsoleteAttribute("Use ToArray or ToList instead.")]
public virtual void CopyTo(Object[] array, int arrayIndex);
    public virtual BsonValue DeepClone();
    public sealed virtual void Dispose();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonArray/<GetEnumerator>d__38")]
public virtual IEnumerator`1<BsonValue> GetEnumerator();
    public virtual int IndexOf(BsonValue value);
    public virtual int IndexOf(BsonValue value, int index);
    public virtual int IndexOf(BsonValue value, int index, int count);
    public virtual void Insert(int index, BsonValue value);
    public BsonArray Materialize(BsonBinaryReaderSettings binaryReaderSettings);
    public virtual bool Remove(BsonValue value);
    public virtual void RemoveAt(int index);
    public virtual BsonValue[] ToArray();
    public virtual List`1<BsonValue> ToList();
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    protected void ThrowIfDisposed();
    private IByteBuffer CloneSlice();
    private RawBsonArray DeserializeRawBsonArray(IBsonReader bsonReader);
    private RawBsonDocument DeserializeRawBsonDocument(IBsonReader bsonReader);
    private BsonValue DeserializeBsonValue(BsonDeserializationContext context);
}
[DefaultMemberAttribute("Item")]
[BsonSerializerAttribute("MongoDB.Bson.Serialization.Serializers.RawBsonDocumentSerializer")]
public class MongoDB.Bson.RawBsonDocument : BsonDocument {
    private bool _disposed;
    private IByteBuffer _slice;
    private List`1<IDisposable> _disposableItems;
    private BsonBinaryReaderSettings _readerSettings;
    public int ElementCount { get; }
    public IEnumerable`1<BsonElement> Elements { get; }
    public IEnumerable`1<string> Names { get; }
    [ObsoleteAttribute("Use Values instead.")]
public IEnumerable`1<object> RawValues { get; }
    public IByteBuffer Slice { get; }
    public IEnumerable`1<BsonValue> Values { get; }
    public BsonValue Item { get; public set; }
    [ObsoleteAttribute("Use GetValue(string name, BsonValue defaultValue) instead.")]
public BsonValue Item { get; }
    public BsonValue Item { get; public set; }
    public RawBsonDocument(IByteBuffer slice);
    public RawBsonDocument(Byte[] bytes);
    public virtual int get_ElementCount();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonDocument/<get_Elements>d__9")]
public virtual IEnumerable`1<BsonElement> get_Elements();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonDocument/<get_Names>d__11")]
public virtual IEnumerable`1<string> get_Names();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonDocument/<get_RawValues>d__13")]
public virtual IEnumerable`1<object> get_RawValues();
    public IByteBuffer get_Slice();
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonDocument/<get_Values>d__17")]
public virtual IEnumerable`1<BsonValue> get_Values();
    public virtual BsonValue get_Item(int index);
    public virtual void set_Item(int index, BsonValue value);
    public virtual BsonValue get_Item(string name, BsonValue defaultValue);
    public virtual BsonValue get_Item(string name);
    public virtual void set_Item(string name, BsonValue value);
    public virtual BsonDocument Add(BsonElement element);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(Dictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(Dictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IDictionary`2<string, object> dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(IDictionary`2<string, object> dictionary, IEnumerable`1<string> keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IDictionary dictionary);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(IDictionary dictionary, IEnumerable keys);
    [ObsoleteAttribute("Use AddRange instead.")]
public virtual BsonDocument Add(IEnumerable`1<BsonElement> elements);
    [ObsoleteAttribute("Use AddRange(IEnumerable<BsonElement> elements) instead.")]
public virtual BsonDocument Add(BsonElement[] elements);
    public virtual BsonDocument Add(string name, BsonValue value);
    public virtual BsonDocument Add(string name, BsonValue value, bool condition);
    public virtual BsonDocument AddRange(Dictionary`2<string, object> dictionary);
    public virtual BsonDocument AddRange(IDictionary dictionary);
    public virtual BsonDocument AddRange(IEnumerable`1<BsonElement> elements);
    public virtual BsonDocument AddRange(IEnumerable`1<KeyValuePair`2<string, object>> dictionary);
    public virtual void Clear();
    public virtual BsonValue Clone();
    public virtual bool Contains(string name);
    public virtual bool ContainsValue(BsonValue value);
    public virtual BsonValue DeepClone();
    public sealed virtual void Dispose();
    public virtual BsonElement GetElement(int index);
    public virtual BsonElement GetElement(string name);
    [IteratorStateMachineAttribute("MongoDB.Bson.RawBsonDocument/<GetEnumerator>d__49")]
public virtual IEnumerator`1<BsonElement> GetEnumerator();
    public virtual BsonValue GetValue(int index);
    public virtual BsonValue GetValue(string name);
    public virtual BsonValue GetValue(string name, BsonValue defaultValue);
    public virtual void InsertAt(int index, BsonElement element);
    public BsonDocument Materialize(BsonBinaryReaderSettings binaryReaderSettings);
    public virtual BsonDocument Merge(BsonDocument document);
    public virtual BsonDocument Merge(BsonDocument document, bool overwriteExistingElements);
    public virtual void Remove(string name);
    public virtual void RemoveAt(int index);
    public virtual void RemoveElement(BsonElement element);
    public virtual BsonDocument Set(int index, BsonValue value);
    public virtual BsonDocument Set(string name, BsonValue value);
    public virtual BsonDocument SetElement(BsonElement element);
    public virtual BsonDocument SetElement(int index, BsonElement element);
    public virtual bool TryGetElement(string name, BsonElement& element);
    public virtual bool TryGetValue(string name, BsonValue& value);
    protected virtual void Dispose(bool disposing);
    protected void ThrowIfDisposed();
    private IByteBuffer CloneSlice();
    private RawBsonArray DeserializeRawBsonArray(IBsonReader bsonReader);
    private RawBsonDocument DeserializeRawBsonDocument(IBsonReader bsonReader);
    private BsonValue DeserializeBsonValue(BsonDeserializationContext context);
}
public class MongoDB.Bson.Serialization.AttributedSerializationProvider : BsonSerializationProviderBase {
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
[AttributeUsageAttribute("32")]
public class MongoDB.Bson.Serialization.Attributes.BsonConstructorAttribute : Attribute {
    private String[] _argumentNames;
    public String[] ArgumentNames { get; }
    public BsonConstructorAttribute(String[] argumentNames);
    public String[] get_ArgumentNames();
    public sealed virtual void Apply(BsonCreatorMap creatorMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonDateTimeOptionsAttribute : BsonSerializationOptionsAttribute {
    private bool _dateOnly;
    private DateTimeKind _kind;
    private BsonType _representation;
    public bool DateOnly { get; public set; }
    public DateTimeKind Kind { get; public set; }
    public BsonType Representation { get; public set; }
    public bool get_DateOnly();
    public void set_DateOnly(bool value);
    public DateTimeKind get_Kind();
    public void set_Kind(DateTimeKind value);
    public BsonType get_Representation();
    public void set_Representation(BsonType value);
    protected virtual IBsonSerializer Apply(IBsonSerializer serializer);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonDefaultValueAttribute : Attribute {
    private object _defaultValue;
    private bool _serializeDefaultValue;
    private bool _serializeDefaultValueWasSet;
    public object DefaultValue { get; }
    [ObsoleteAttribute("Use BsonIgnoreIfDefaultAttribute instead.")]
public bool SerializeDefaultValue { get; public set; }
    public BsonDefaultValueAttribute(object defaultValue);
    public object get_DefaultValue();
    public bool get_SerializeDefaultValue();
    public void set_SerializeDefaultValue(bool value);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonDictionaryOptionsAttribute : BsonSerializationOptionsAttribute {
    private DictionaryRepresentation _representation;
    public DictionaryRepresentation Representation { get; public set; }
    public BsonDictionaryOptionsAttribute(DictionaryRepresentation representation);
    public DictionaryRepresentation get_Representation();
    public void set_Representation(DictionaryRepresentation value);
    protected virtual IBsonSerializer Apply(IBsonSerializer serializer);
}
[AttributeUsageAttribute("12")]
public class MongoDB.Bson.Serialization.Attributes.BsonDiscriminatorAttribute : Attribute {
    private string _discriminator;
    private bool _required;
    private bool _rootClass;
    public string Discriminator { get; }
    public bool Required { get; public set; }
    public bool RootClass { get; public set; }
    public BsonDiscriminatorAttribute(string discriminator);
    public string get_Discriminator();
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_RootClass();
    public void set_RootClass(bool value);
    public sealed virtual void Apply(BsonClassMap classMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonElementAttribute : Attribute {
    private string _elementName;
    private int _order;
    public string ElementName { get; }
    public int Order { get; public set; }
    public BsonElementAttribute(string elementName);
    public string get_ElementName();
    public int get_Order();
    public void set_Order(int value);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("384")]
[BsonMemberMapAttributeUsageAttribute]
public class MongoDB.Bson.Serialization.Attributes.BsonExtraElementsAttribute : Attribute {
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("64")]
public class MongoDB.Bson.Serialization.Attributes.BsonFactoryMethodAttribute : Attribute {
    private String[] _argumentNames;
    public String[] ArgumentNames { get; }
    public BsonFactoryMethodAttribute(String[] argumentNames);
    public String[] get_ArgumentNames();
    public sealed virtual void Apply(BsonCreatorMap creatorMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonGuidRepresentationAttribute : Attribute {
    private GuidRepresentation _guidRepresentation;
    public GuidRepresentation GuidRepresentation { get; }
    public BsonGuidRepresentationAttribute(GuidRepresentation guidRepresentation);
    public GuidRepresentation get_GuidRepresentation();
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("384")]
[BsonMemberMapAttributeUsageAttribute]
public class MongoDB.Bson.Serialization.Attributes.BsonIdAttribute : Attribute {
    private Type _idGenerator;
    private int _order;
    public Type IdGenerator { get; public set; }
    public int Order { get; public set; }
    public Type get_IdGenerator();
    public void set_IdGenerator(Type value);
    public int get_Order();
    public void set_Order(int value);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("12")]
public class MongoDB.Bson.Serialization.Attributes.BsonIgnoreExtraElementsAttribute : Attribute {
    private bool _ignoreExtraElements;
    private bool _inherited;
    public bool IgnoreExtraElements { get; }
    public bool Inherited { get; public set; }
    public BsonIgnoreExtraElementsAttribute(bool ignoreExtraElements);
    public bool get_IgnoreExtraElements();
    public bool get_Inherited();
    public void set_Inherited(bool value);
    public sealed virtual void Apply(BsonClassMap classMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfDefaultAttribute : Attribute {
    private bool _value;
    public bool Value { get; }
    public BsonIgnoreIfDefaultAttribute(bool value);
    public bool get_Value();
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonIgnoreIfNullAttribute : Attribute {
    private bool _value;
    public bool Value { get; }
    public BsonIgnoreIfNullAttribute(bool value);
    public bool get_Value();
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
[AttributeUsageAttribute("12")]
public class MongoDB.Bson.Serialization.Attributes.BsonKnownTypesAttribute : Attribute {
    private Type[] _knownTypes;
    public Type[] KnownTypes { get; }
    public BsonKnownTypesAttribute(Type[] knownTypes);
    public BsonKnownTypesAttribute(Type knownType);
    public Type[] get_KnownTypes();
    public sealed virtual void Apply(BsonClassMap classMap);
}
[AttributeUsageAttribute("12")]
public class MongoDB.Bson.Serialization.Attributes.BsonNoIdAttribute : Attribute {
    public sealed virtual void PostProcess(BsonClassMap classMap);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute : BsonSerializationOptionsAttribute {
    private BsonType _representation;
    private bool _allowOverflow;
    private bool _allowTruncation;
    public BsonType Representation { get; }
    public bool AllowOverflow { get; public set; }
    public bool AllowTruncation { get; public set; }
    public BsonRepresentationAttribute(BsonType representation);
    public BsonType get_Representation();
    public bool get_AllowOverflow();
    public void set_AllowOverflow(bool value);
    public bool get_AllowTruncation();
    public void set_AllowTruncation(bool value);
    protected virtual IBsonSerializer Apply(IBsonSerializer serializer);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonRequiredAttribute : Attribute {
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public abstract class MongoDB.Bson.Serialization.Attributes.BsonSerializationOptionsAttribute : Attribute {
    public virtual void Apply(BsonMemberMap memberMap);
    protected virtual IBsonSerializer Apply(IBsonSerializer serializer);
}
[AttributeUsageAttribute("1420")]
public class MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute : Attribute {
    private Type _serializerType;
    public Type SerializerType { get; public set; }
    public BsonSerializerAttribute(Type serializerType);
    public Type get_SerializerType();
    public void set_SerializerType(Type value);
    public sealed virtual void Apply(BsonMemberMap memberMap);
    internal IBsonSerializer CreateSerializer(Type type);
}
[AttributeUsageAttribute("384")]
public class MongoDB.Bson.Serialization.Attributes.BsonTimeSpanOptionsAttribute : BsonSerializationOptionsAttribute {
    private BsonType _representation;
    private TimeSpanUnits _units;
    public BsonType Representation { get; }
    public TimeSpanUnits Units { get; public set; }
    public BsonTimeSpanOptionsAttribute(BsonType representation);
    public BsonTimeSpanOptionsAttribute(BsonType representation, TimeSpanUnits units);
    public BsonType get_Representation();
    public TimeSpanUnits get_Units();
    public void set_Units(TimeSpanUnits value);
    protected virtual IBsonSerializer Apply(IBsonSerializer serializer);
}
public class MongoDB.Bson.Serialization.BsonClassMap : object {
    private static Dictionary`2<Type, BsonClassMap> __classMaps;
    private static Queue`1<Type> __knownTypesQueue;
    private static int __freezeNestingLevel;
    private Type _classType;
    private List`1<BsonCreatorMap> _creatorMaps;
    private IConventionPack _conventionPack;
    private bool _isAnonymous;
    private List`1<BsonMemberMap> _allMemberMaps;
    private ReadOnlyCollection`1<BsonMemberMap> _allMemberMapsReadonly;
    private List`1<BsonMemberMap> _declaredMemberMaps;
    private BsonTrie`1<int> _elementTrie;
    private bool _frozen;
    private BsonClassMap _baseClassMap;
    private IDiscriminatorConvention modreq(System.Runtime.CompilerServices.IsVolatile) _discriminatorConvention;
    private Func`1<object> _creator;
    private string _discriminator;
    private bool _discriminatorIsRequired;
    private bool _hasRootClass;
    private bool _isRootClass;
    private BsonMemberMap _idMemberMap;
    private bool _ignoreExtraElements;
    private bool _ignoreExtraElementsIsInherited;
    private BsonMemberMap _extraElementsMemberMap;
    private int _extraElementsMemberIndex;
    private List`1<Type> _knownTypes;
    public ReadOnlyCollection`1<BsonMemberMap> AllMemberMaps { get; }
    public BsonClassMap BaseClassMap { get; }
    public Type ClassType { get; }
    public IEnumerable`1<BsonCreatorMap> CreatorMaps { get; }
    public IConventionPack ConventionPack { get; }
    public IEnumerable`1<BsonMemberMap> DeclaredMemberMaps { get; }
    public string Discriminator { get; }
    public bool DiscriminatorIsRequired { get; }
    public BsonMemberMap ExtraElementsMemberMap { get; }
    public bool HasCreatorMaps { get; }
    public bool HasRootClass { get; }
    public BsonMemberMap IdMemberMap { get; }
    public bool IgnoreExtraElements { get; }
    public bool IgnoreExtraElementsIsInherited { get; }
    public bool IsAnonymous { get; }
    public bool IsFrozen { get; }
    public bool IsRootClass { get; }
    public IEnumerable`1<Type> KnownTypes { get; }
    internal BsonTrie`1<int> ElementTrie { get; }
    internal int ExtraElementsMemberMapIndex { get; }
    public BsonClassMap(Type classType);
    public BsonClassMap(Type classType, BsonClassMap baseClassMap);
    private static BsonClassMap();
    public ReadOnlyCollection`1<BsonMemberMap> get_AllMemberMaps();
    public BsonClassMap get_BaseClassMap();
    public Type get_ClassType();
    public IEnumerable`1<BsonCreatorMap> get_CreatorMaps();
    public IConventionPack get_ConventionPack();
    public IEnumerable`1<BsonMemberMap> get_DeclaredMemberMaps();
    public string get_Discriminator();
    public bool get_DiscriminatorIsRequired();
    public BsonMemberMap get_ExtraElementsMemberMap();
    public bool get_HasCreatorMaps();
    public bool get_HasRootClass();
    public BsonMemberMap get_IdMemberMap();
    public bool get_IgnoreExtraElements();
    public bool get_IgnoreExtraElementsIsInherited();
    public bool get_IsAnonymous();
    public bool get_IsFrozen();
    public bool get_IsRootClass();
    public IEnumerable`1<Type> get_KnownTypes();
    internal BsonTrie`1<int> get_ElementTrie();
    internal int get_ExtraElementsMemberMapIndex();
    public static Type GetMemberInfoType(MemberInfo memberInfo);
    public static IEnumerable`1<BsonClassMap> GetRegisteredClassMaps();
    public static bool IsClassMapRegistered(Type type);
    public static BsonClassMap LookupClassMap(Type classType);
    public static BsonClassMap`1<TClass> RegisterClassMap();
    public static BsonClassMap`1<TClass> RegisterClassMap(Action`1<BsonClassMap`1<TClass>> classMapInitializer);
    public static void RegisterClassMap(BsonClassMap classMap);
    public static bool TryRegisterClassMap();
    public static bool TryRegisterClassMap(BsonClassMap`1<TClass> classMap);
    public static bool TryRegisterClassMap(Action`1<BsonClassMap`1<TClass>> classMapInitializer);
    public static bool TryRegisterClassMap(Func`1<BsonClassMap`1<TClass>> classMapFactory);
    public void AutoMap();
    public object CreateInstance();
    public BsonClassMap Freeze();
    public BsonMemberMap GetMemberMap(string memberName);
    public BsonMemberMap GetMemberMapForElement(string elementName);
    public BsonCreatorMap MapConstructor(ConstructorInfo constructorInfo);
    public BsonCreatorMap MapConstructor(ConstructorInfo constructorInfo, String[] argumentNames);
    public BsonCreatorMap MapCreator(Delegate delegate);
    public BsonCreatorMap MapCreator(Delegate delegate, String[] argumentNames);
    public BsonMemberMap MapExtraElementsField(string fieldName);
    public BsonMemberMap MapExtraElementsMember(MemberInfo memberInfo);
    public BsonMemberMap MapExtraElementsProperty(string propertyName);
    public BsonCreatorMap MapFactoryMethod(MethodInfo methodInfo);
    public BsonCreatorMap MapFactoryMethod(MethodInfo methodInfo, String[] argumentNames);
    public BsonMemberMap MapField(string fieldName);
    public BsonMemberMap MapIdField(string fieldName);
    public BsonMemberMap MapIdMember(MemberInfo memberInfo);
    public BsonMemberMap MapIdProperty(string propertyName);
    public BsonMemberMap MapMember(MemberInfo memberInfo);
    public BsonMemberMap MapProperty(string propertyName);
    public void Reset();
    public BsonClassMap SetCreator(Func`1<object> creator);
    public void SetDiscriminator(string discriminator);
    public void SetDiscriminatorIsRequired(bool discriminatorIsRequired);
    public void SetExtraElementsMember(BsonMemberMap memberMap);
    public void AddKnownType(Type type);
    public void SetIdMember(BsonMemberMap memberMap);
    public void SetIgnoreExtraElements(bool ignoreExtraElements);
    public void SetIgnoreExtraElementsIsInherited(bool ignoreExtraElementsIsInherited);
    public void SetIsRootClass(bool isRootClass);
    public void UnmapConstructor(ConstructorInfo constructorInfo);
    public void UnmapFactoryMethod(MethodInfo methodInfo);
    public void UnmapField(string fieldName);
    public void UnmapMember(MemberInfo memberInfo);
    public void UnmapProperty(string propertyName);
    internal IDiscriminatorConvention GetDiscriminatorConvention();
    private void AutoMapClass();
    private void TryFindShouldSerializeMethod(BsonMemberMap memberMap);
    private void EnsureMemberInfoIsForThisClass(MemberInfo memberInfo);
    private void EnsureMemberMapIsForThisClass(BsonMemberMap memberMap);
    private Func`1<object> GetCreator();
    private Func`2<object, bool> GetShouldSerializeMethod(MemberInfo memberInfo);
    private void ThrowFrozenException();
    private void ThrowNotFrozenException();
    [CompilerGeneratedAttribute]
internal static BsonClassMap`1<TClass> <TryRegisterClassMap>g__ClassMapFactory|74_0();
    [CompilerGeneratedAttribute]
private object <GetCreator>b__118_2();
}
public class MongoDB.Bson.Serialization.BsonClassMap`1 : BsonClassMap {
    public BsonClassMap`1(Action`1<BsonClassMap`1<TClass>> classMapInitializer);
    public BsonClassMap`1(BsonClassMap baseClassMap);
    public TClass CreateInstance();
    public BsonMemberMap GetMemberMap(Expression`1<Func`2<TClass, TMember>> memberLambda);
    public BsonCreatorMap MapCreator(Expression`1<Func`2<TClass, TClass>> creatorLambda);
    public BsonMemberMap MapExtraElementsField(Expression`1<Func`2<TClass, TMember>> fieldLambda);
    public BsonMemberMap MapExtraElementsMember(Expression`1<Func`2<TClass, TMember>> memberLambda);
    public BsonMemberMap MapExtraElementsProperty(Expression`1<Func`2<TClass, TMember>> propertyLambda);
    public BsonMemberMap MapField(Expression`1<Func`2<TClass, TMember>> fieldLambda);
    public BsonMemberMap MapIdField(Expression`1<Func`2<TClass, TMember>> fieldLambda);
    public BsonMemberMap MapIdMember(Expression`1<Func`2<TClass, TMember>> memberLambda);
    public BsonMemberMap MapIdProperty(Expression`1<Func`2<TClass, TMember>> propertyLambda);
    public BsonMemberMap MapMember(Expression`1<Func`2<TClass, TMember>> memberLambda);
    public BsonMemberMap MapProperty(Expression`1<Func`2<TClass, TMember>> propertyLambda);
    public void UnmapField(Expression`1<Func`2<TClass, TMember>> fieldLambda);
    public void UnmapMember(Expression`1<Func`2<TClass, TMember>> memberLambda);
    public void UnmapProperty(Expression`1<Func`2<TClass, TMember>> propertyLambda);
    private static MethodInfo[] GetPropertyAccessors(PropertyInfo propertyInfo);
    private static MemberInfo GetMemberInfoFromLambda(Expression`1<Func`2<TClass, TMember>> memberLambda);
    private static string GetMemberNameFromLambda(Expression`1<Func`2<TClass, TMember>> memberLambda);
    private static PropertyInfo FindPropertyImplementation(PropertyInfo interfacePropertyInfo, Type actualType);
}
internal class MongoDB.Bson.Serialization.BsonClassMapSerializationProvider : BsonSerializationProviderBase {
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Bson.Serialization.BsonClassMapSerializer`1 : SerializerBase`1<TClass> {
    private BsonClassMap _classMap;
    public bool IsDiscriminatorCompatibleWithObjectSerializer { get; }
    public BsonClassMapSerializer`1(BsonClassMap classMap);
    public sealed virtual bool get_IsDiscriminatorCompatibleWithObjectSerializer();
    public virtual TClass Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public TClass DeserializeClass(BsonDeserializationContext context);
    public sealed virtual bool GetDocumentId(object document, Object& id, Type& idNominalType, IIdGenerator& idGenerator);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TClass value);
    public sealed virtual void SetDocumentId(object document, object id);
    private BsonCreatorMap ChooseBestCreator(Dictionary`2<string, object> values);
    private TClass CreateInstanceUsingCreator(Dictionary`2<string, object> values);
    private void DeserializeExtraElementMember(BsonDeserializationContext context, object obj, string elementName, BsonMemberMap extraElementsMemberMap);
    private void DeserializeExtraElementValue(BsonDeserializationContext context, Dictionary`2<string, object> values, string elementName, BsonMemberMap extraElementsMemberMap);
    private object DeserializeMemberValue(BsonDeserializationContext context, BsonMemberMap memberMap);
    private void SerializeClass(BsonSerializationContext context, BsonSerializationArgs args, TClass document);
    private void SerializeExtraElements(BsonSerializationContext context, object obj, BsonMemberMap extraElementsMemberMap);
    private void SerializeDiscriminator(BsonSerializationContext context, Type nominalType, object obj);
    private void SerializeMember(BsonSerializationContext context, object obj, BsonMemberMap memberMap);
    private void SerializeNormalMember(BsonSerializationContext context, object obj, BsonMemberMap memberMap);
    private bool ShouldSerializeDiscriminator(Type nominalType);
}
public class MongoDB.Bson.Serialization.BsonCreatorMap : object {
    private BsonClassMap _classMap;
    private MemberInfo _memberInfo;
    private Delegate _delegate;
    private bool _isFrozen;
    private List`1<MemberInfo> _arguments;
    private List`1<string> _elementNames;
    private Dictionary`2<string, object> _defaultValues;
    public IEnumerable`1<MemberInfo> Arguments { get; }
    public BsonClassMap ClassMap { get; }
    public Delegate Delegate { get; }
    public IEnumerable`1<string> ElementNames { get; }
    public MemberInfo MemberInfo { get; }
    public BsonCreatorMap(BsonClassMap classMap, MemberInfo memberInfo, Delegate delegate);
    public IEnumerable`1<MemberInfo> get_Arguments();
    public BsonClassMap get_ClassMap();
    public Delegate get_Delegate();
    public IEnumerable`1<string> get_ElementNames();
    public MemberInfo get_MemberInfo();
    public void Freeze();
    public bool HasDefaultValue(string elementName);
    public BsonCreatorMap SetArguments(IEnumerable`1<MemberInfo> arguments);
    public BsonCreatorMap SetArguments(IEnumerable`1<string> argumentNames);
    internal object CreateInstance(Dictionary`2<string, object> values);
    private int GetExpectedArgumentsCount();
    private bool IsSameMember(MemberInfo a, MemberInfo b);
    private void ThrowFrozenException();
    private void ThrowNotFrozenException();
}
public class MongoDB.Bson.Serialization.BsonDeserializationArgs : ValueType {
    private Type _nominalType;
    public Type NominalType { get; public set; }
    private BsonDeserializationArgs(Type nominalType);
    public Type get_NominalType();
    public void set_NominalType(Type value);
}
public class MongoDB.Bson.Serialization.BsonDeserializationContext : object {
    private bool _allowDuplicateElementNames;
    private IBsonSerializer _dynamicArraySerializer;
    private IBsonSerializer _dynamicDocumentSerializer;
    private IBsonReader _reader;
    public bool AllowDuplicateElementNames { get; }
    public IBsonSerializer DynamicArraySerializer { get; }
    public IBsonSerializer DynamicDocumentSerializer { get; }
    public IBsonReader Reader { get; }
    private BsonDeserializationContext(IBsonReader reader, bool allowDuplicateElementNames, IBsonSerializer dynamicArraySerializer, IBsonSerializer dynamicDocumentSerializer);
    public bool get_AllowDuplicateElementNames();
    public IBsonSerializer get_DynamicArraySerializer();
    public IBsonSerializer get_DynamicDocumentSerializer();
    public IBsonReader get_Reader();
    public static BsonDeserializationContext CreateRoot(IBsonReader reader, Action`1<Builder> configurator);
    public BsonDeserializationContext With(Action`1<Builder> configurator);
}
public abstract class MongoDB.Bson.Serialization.BsonDocumentBackedClass : object {
    private BsonDocument _backingDocument;
    private IBsonDocumentSerializer _serializer;
    protected internal BsonDocument BackingDocument { get; }
    protected BsonDocumentBackedClass(IBsonDocumentSerializer serializer);
    protected BsonDocumentBackedClass(BsonDocument backingDocument, IBsonDocumentSerializer serializer);
    protected internal BsonDocument get_BackingDocument();
    protected T GetValue(string memberName);
    protected T GetValue(string memberName, T defaultValue);
    protected void SetValue(string memberName, object value);
}
public abstract class MongoDB.Bson.Serialization.BsonDocumentBackedClassSerializer`1 : ClassSerializerBase`1<TClass> {
    private Dictionary`2<string, BsonSerializationInfo> _memberSerializationInfo;
    public virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    protected virtual TClass DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected void RegisterMember(string memberName, string elementName, IBsonSerializer serializer);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TClass value);
    protected abstract virtual TClass CreateInstance(BsonDocument backingDocument);
}
public class MongoDB.Bson.Serialization.BsonMemberMap : object {
    private BsonClassMap _classMap;
    private MemberInfo _memberInfo;
    private Type _memberType;
    private bool _memberTypeIsBsonValue;
    private string _elementName;
    private bool _frozen;
    private int _order;
    private Func`2<object, object> _getter;
    private Action`2<object, object> _setter;
    private IBsonSerializer modreq(System.Runtime.CompilerServices.IsVolatile) _serializer;
    private IIdGenerator _idGenerator;
    private bool _isRequired;
    private Func`2<object, bool> _shouldSerializeMethod;
    private bool _ignoreIfDefault;
    private bool _ignoreIfNull;
    private object _defaultValue;
    private Func`1<object> _defaultValueCreator;
    private bool _defaultValueSpecified;
    public BsonClassMap ClassMap { get; }
    public string MemberName { get; }
    public Type MemberType { get; }
    public bool MemberTypeIsBsonValue { get; }
    public string ElementName { get; }
    public int Order { get; }
    public MemberInfo MemberInfo { get; }
    public Func`2<object, object> Getter { get; }
    public Action`2<object, object> Setter { get; }
    public IIdGenerator IdGenerator { get; }
    public bool IsDefaultValueSpecified { get; }
    public bool IsRequired { get; }
    public Func`2<object, bool> ShouldSerializeMethod { get; }
    public bool IgnoreIfDefault { get; }
    public bool IgnoreIfNull { get; }
    public object DefaultValue { get; }
    public bool IsReadOnly { get; }
    public BsonMemberMap(BsonClassMap classMap, MemberInfo memberInfo);
    public BsonClassMap get_ClassMap();
    public string get_MemberName();
    public Type get_MemberType();
    public bool get_MemberTypeIsBsonValue();
    public string get_ElementName();
    public int get_Order();
    public MemberInfo get_MemberInfo();
    public Func`2<object, object> get_Getter();
    public Action`2<object, object> get_Setter();
    public IIdGenerator get_IdGenerator();
    public bool get_IsDefaultValueSpecified();
    public bool get_IsRequired();
    public Func`2<object, bool> get_ShouldSerializeMethod();
    public bool get_IgnoreIfDefault();
    public bool get_IgnoreIfNull();
    public object get_DefaultValue();
    public bool get_IsReadOnly();
    public void ApplyDefaultValue(object obj);
    public void Freeze();
    public IBsonSerializer GetSerializer();
    public BsonMemberMap Reset();
    public BsonMemberMap SetDefaultValue(Func`1<object> defaultValueCreator);
    public BsonMemberMap SetDefaultValue(object defaultValue);
    public BsonMemberMap SetElementName(string elementName);
    public BsonMemberMap SetIdGenerator(IIdGenerator idGenerator);
    public BsonMemberMap SetIgnoreIfDefault(bool ignoreIfDefault);
    public BsonMemberMap SetIgnoreIfNull(bool ignoreIfNull);
    public BsonMemberMap SetIsRequired(bool isRequired);
    public BsonMemberMap SetOrder(int order);
    public BsonMemberMap SetSerializer(IBsonSerializer serializer);
    public BsonMemberMap SetShouldSerializeMethod(Func`2<object, bool> shouldSerializeMethod);
    public bool ShouldSerialize(object obj, object value);
    private static object GetDefaultValue(Type type);
    private Action`2<object, object> GetFieldSetter();
    private Func`2<object, object> GetGetter();
    private Action`2<object, object> GetPropertySetter();
    private void ThrowFrozenException();
}
[AttributeUsageAttribute("4")]
public class MongoDB.Bson.Serialization.BsonMemberMapAttributeUsageAttribute : Attribute {
    private bool _allowMultipleMembers;
    public bool AllowMultipleMembers { get; public set; }
    public bool get_AllowMultipleMembers();
    public void set_AllowMultipleMembers(bool value);
}
public class MongoDB.Bson.Serialization.BsonObjectModelSerializationProvider : BsonSerializationProviderBase {
    private static Dictionary`2<Type, IBsonSerializer> __serializers;
    private static BsonObjectModelSerializationProvider();
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Bson.Serialization.BsonSerializationArgs : ValueType {
    private Type _nominalType;
    private bool _serializeAsNominalType;
    private bool _serializeIdFirst;
    public Type NominalType { get; public set; }
    public bool SerializeAsNominalType { get; public set; }
    public bool SerializeIdFirst { get; public set; }
    public BsonSerializationArgs(Type nominalType, bool serializeAsNominalType, bool serializeIdFirst);
    public Type get_NominalType();
    public void set_NominalType(Type value);
    public bool get_SerializeAsNominalType();
    public void set_SerializeAsNominalType(bool value);
    public bool get_SerializeIdFirst();
    public void set_SerializeIdFirst(bool value);
    internal void SetOrValidateNominalType(Type nominalType, string nominalTypeSource);
}
public class MongoDB.Bson.Serialization.BsonSerializationContext : object {
    private Func`2<Type, bool> _isDynamicType;
    private IBsonWriter _writer;
    public Func`2<Type, bool> IsDynamicType { get; }
    public IBsonWriter Writer { get; }
    private BsonSerializationContext(IBsonWriter writer, Func`2<Type, bool> isDynamicType);
    public Func`2<Type, bool> get_IsDynamicType();
    public IBsonWriter get_Writer();
    public static BsonSerializationContext CreateRoot(IBsonWriter writer, Action`1<Builder> configurator);
    public BsonSerializationContext With(Action`1<Builder> configurator);
}
public class MongoDB.Bson.Serialization.BsonSerializationInfo : object {
    private string _elementName;
    private IReadOnlyList`1<string> _elementPath;
    private IBsonSerializer _serializer;
    private Type _nominalType;
    public string ElementName { get; }
    public IReadOnlyList`1<string> ElementPath { get; }
    public IBsonSerializer Serializer { get; }
    public Type NominalType { get; }
    public BsonSerializationInfo(string elementName, IBsonSerializer serializer, Type nominalType);
    private BsonSerializationInfo(IReadOnlyList`1<string> elementPath, IBsonSerializer serializer, Type nominalType);
    public static BsonSerializationInfo CreateWithPath(IEnumerable`1<string> elementPath, IBsonSerializer serializer, Type nominalType);
    public string get_ElementName();
    public IReadOnlyList`1<string> get_ElementPath();
    public IBsonSerializer get_Serializer();
    public Type get_NominalType();
    public object DeserializeValue(BsonValue value);
    [ObsoleteAttribute("This method is no longer relevant because field names are now allowed to contain dots.")]
public BsonSerializationInfo Merge(BsonSerializationInfo newSerializationInfo);
    public BsonValue SerializeValue(object value);
    public BsonArray SerializeValues(IEnumerable values);
    public BsonSerializationInfo WithNewName(string elementName);
}
public abstract class MongoDB.Bson.Serialization.BsonSerializationProviderBase : object {
    public virtual IBsonSerializer GetSerializer(Type type);
    public abstract virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
    protected virtual IBsonSerializer CreateGenericSerializer(Type serializerTypeDefinition, Type[] typeArguments);
    protected virtual IBsonSerializer CreateGenericSerializer(Type serializerTypeDefinition, Type[] typeArguments, IBsonSerializerRegistry serializerRegistry);
    protected virtual IBsonSerializer CreateSerializer(Type serializerType);
    protected virtual IBsonSerializer CreateSerializer(Type serializerType, IBsonSerializerRegistry serializerRegistry);
}
public static class MongoDB.Bson.Serialization.BsonSerializer : object {
    private static ReaderWriterLockSlim __configLock;
    private static Dictionary`2<Type, IIdGenerator> __idGenerators;
    private static Dictionary`2<Type, IDiscriminatorConvention> __discriminatorConventions;
    private static Dictionary`2<BsonValue, HashSet`1<Type>> __discriminators;
    private static HashSet`1<Type> __discriminatedTypes;
    private static BsonSerializerRegistry __serializerRegistry;
    private static TypeMappingSerializationProvider __typeMappingSerializationProvider;
    private static ConcurrentDictionary`2<Type, object> __typesWithRegisteredKnownTypes;
    private static bool __useNullIdChecker;
    private static bool __useZeroIdChecker;
    public static IBsonSerializerRegistry SerializerRegistry { get; }
    public static bool UseNullIdChecker { get; public set; }
    public static bool UseZeroIdChecker { get; public set; }
    internal static ReaderWriterLockSlim ConfigLock { get; }
    private static BsonSerializer();
    public static IBsonSerializerRegistry get_SerializerRegistry();
    public static bool get_UseNullIdChecker();
    public static void set_UseNullIdChecker(bool value);
    public static bool get_UseZeroIdChecker();
    public static void set_UseZeroIdChecker(bool value);
    internal static ReaderWriterLockSlim get_ConfigLock();
    public static TNominalType Deserialize(BsonDocument document, Action`1<Builder> configurator);
    public static TNominalType Deserialize(IBsonReader bsonReader, Action`1<Builder> configurator);
    public static TNominalType Deserialize(Byte[] bytes, Action`1<Builder> configurator);
    public static TNominalType Deserialize(Stream stream, Action`1<Builder> configurator);
    public static TNominalType Deserialize(string json, Action`1<Builder> configurator);
    public static TNominalType Deserialize(TextReader textReader, Action`1<Builder> configurator);
    public static object Deserialize(BsonDocument document, Type nominalType, Action`1<Builder> configurator);
    public static object Deserialize(IBsonReader bsonReader, Type nominalType, Action`1<Builder> configurator);
    public static object Deserialize(Byte[] bytes, Type nominalType, Action`1<Builder> configurator);
    public static object Deserialize(Stream stream, Type nominalType, Action`1<Builder> configurator);
    public static object Deserialize(string json, Type nominalType, Action`1<Builder> configurator);
    public static object Deserialize(TextReader textReader, Type nominalType, Action`1<Builder> configurator);
    public static bool IsTypeDiscriminated(Type type);
    public static Type LookupActualType(Type nominalType, BsonValue discriminator);
    public static IDiscriminatorConvention LookupDiscriminatorConvention(Type type);
    public static IIdGenerator LookupIdGenerator(Type type);
    public static IBsonSerializer`1<T> LookupSerializer();
    public static IBsonSerializer LookupSerializer(Type type);
    public static void RegisterDiscriminator(Type type, BsonValue discriminator);
    public static void RegisterDiscriminatorConvention(Type type, IDiscriminatorConvention convention);
    public static void RegisterGenericSerializerDefinition(Type genericTypeDefinition, Type genericSerializerDefinition);
    public static void RegisterIdGenerator(Type type, IIdGenerator idGenerator);
    public static void RegisterSerializationProvider(IBsonSerializationProvider provider);
    public static void RegisterSerializer(IBsonSerializer`1<T> serializer);
    public static void RegisterSerializer(Type type, IBsonSerializer serializer);
    public static void Serialize(IBsonWriter bsonWriter, TNominalType value, Action`1<Builder> configurator, BsonSerializationArgs args);
    public static void Serialize(IBsonWriter bsonWriter, Type nominalType, object value, Action`1<Builder> configurator, BsonSerializationArgs args);
    public static bool TryRegisterSerializer(Type type, IBsonSerializer serializer);
    public static bool TryRegisterSerializer(IBsonSerializer`1<T> serializer);
    internal static void EnsureKnownTypesAreRegistered(Type nominalType);
    private static void CreateSerializerRegistry();
    private static void RegisterIdGenerators();
}
public class MongoDB.Bson.Serialization.BsonSerializerRegistry : object {
    private ConcurrentDictionary`2<Type, IBsonSerializer> _cache;
    private ConcurrentStack`1<IBsonSerializationProvider> _serializationProviders;
    private Func`2<Type, IBsonSerializer> _createSerializer;
    public sealed virtual IBsonSerializer GetSerializer(Type type);
    public sealed virtual IBsonSerializer`1<T> GetSerializer();
    public void RegisterSerializer(Type type, IBsonSerializer serializer);
    public void RegisterSerializationProvider(IBsonSerializationProvider serializationProvider);
    public bool TryRegisterSerializer(Type type, IBsonSerializer serializer);
    private IBsonSerializer CreateSerializer(Type type);
    private void EnsureRegisteringASerializerForThisTypeIsAllowed(Type type);
}
public class MongoDB.Bson.Serialization.CollectionsSerializationProvider : BsonSerializationProviderBase {
    private static Dictionary`2<Type, Type> __serializerTypes;
    private static CollectionsSerializationProvider();
    private static bool IsOrIsChildOf(Type type, Type parent);
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
    private IBsonSerializer GetCollectionSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
    private List`1<Type> GetImplementedInterfaces(Type type);
    private IBsonSerializer GetReadOnlyDictionarySerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Bson.Serialization.Conventions.AttributeConventionPack : object {
    private static AttributeConventionPack __attributeConventionPack;
    private AttributeConvention _attributeConvention;
    public static IConventionPack Instance { get; }
    public IEnumerable`1<IConvention> Conventions { get; }
    private static AttributeConventionPack();
    public static IConventionPack get_Instance();
    [IteratorStateMachineAttribute("MongoDB.Bson.Serialization.Conventions.AttributeConventionPack/<get_Conventions>d__6")]
public sealed virtual IEnumerable`1<IConvention> get_Conventions();
}
public class MongoDB.Bson.Serialization.Conventions.CamelCaseElementNameConvention : ConventionBase {
    public sealed virtual void Apply(BsonMemberMap memberMap);
    private string GetElementName(string memberName);
}
public abstract class MongoDB.Bson.Serialization.Conventions.ConventionBase : object {
    private string _name;
    public string Name { get; }
    protected ConventionBase(string name);
    public sealed virtual string get_Name();
    private static string GetName(Type type);
}
public class MongoDB.Bson.Serialization.Conventions.ConventionPack : object {
    private List`1<IConvention> _conventions;
    public IEnumerable`1<IConvention> Conventions { get; }
    public sealed virtual IEnumerable`1<IConvention> get_Conventions();
    public void Add(IConvention convention);
    public void AddClassMapConvention(string name, Action`1<BsonClassMap> action);
    public void AddMemberMapConvention(string name, Action`1<BsonMemberMap> action);
    public void AddPostProcessingConvention(string name, Action`1<BsonClassMap> action);
    public void AddRange(IEnumerable`1<IConvention> conventions);
    public void Append(IConventionPack other);
    public sealed virtual IEnumerator`1<IConvention> GetEnumerator();
    public void InsertAfter(string name, IConvention convention);
    public void InsertBefore(string name, IConvention convention);
    public void Remove(string name);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class MongoDB.Bson.Serialization.Conventions.ConventionRegistry : object {
    private static List`1<ConventionPackContainer> __conventionPacks;
    private static object __lock;
    private static ConventionRegistry();
    public static IConventionPack Lookup(Type type);
    public static void Register(string name, IConventionPack conventions, Func`2<Type, bool> filter);
    public static void Remove(string name);
}
public class MongoDB.Bson.Serialization.Conventions.ConventionRunner : object {
    private IEnumerable`1<IConvention> _conventions;
    public ConventionRunner(IConventionPack conventions);
    public void Apply(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.DefaultConventionPack : object {
    private static IConventionPack __defaultConventionPack;
    private IEnumerable`1<IConvention> _conventions;
    public static IConventionPack Instance { get; }
    public IEnumerable`1<IConvention> Conventions { get; }
    private static DefaultConventionPack();
    public static IConventionPack get_Instance();
    public sealed virtual IEnumerable`1<IConvention> get_Conventions();
}
public class MongoDB.Bson.Serialization.Conventions.DelegateClassMapConvention : ConventionBase {
    private Action`1<BsonClassMap> _action;
    public DelegateClassMapConvention(string name, Action`1<BsonClassMap> action);
    public sealed virtual void Apply(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.DelegateMemberMapConvention : ConventionBase {
    private Action`1<BsonMemberMap> _action;
    public DelegateMemberMapConvention(string name, Action`1<BsonMemberMap> action);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.DelegatePostProcessingConvention : ConventionBase {
    private Action`1<BsonClassMap> _action;
    public DelegatePostProcessingConvention(string name, Action`1<BsonClassMap> action);
    public sealed virtual void PostProcess(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.EnumRepresentationConvention : ConventionBase {
    private BsonType _representation;
    public BsonType Representation { get; }
    public EnumRepresentationConvention(BsonType representation);
    public BsonType get_Representation();
    public sealed virtual void Apply(BsonMemberMap memberMap);
    private bool IsNullableEnum(Type type);
    private void EnsureRepresentationIsValidForEnums(BsonType representation);
}
public class MongoDB.Bson.Serialization.Conventions.HierarchicalDiscriminatorConvention : StandardDiscriminatorConvention {
    public HierarchicalDiscriminatorConvention(string elementName);
    public virtual BsonValue GetDiscriminator(Type nominalType, Type actualType);
}
public interface MongoDB.Bson.Serialization.Conventions.IClassMapConvention {
    public abstract virtual void Apply(BsonClassMap classMap);
}
public interface MongoDB.Bson.Serialization.Conventions.IConvention {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface MongoDB.Bson.Serialization.Conventions.IConventionPack {
    public IEnumerable`1<IConvention> Conventions { get; }
    public abstract virtual IEnumerable`1<IConvention> get_Conventions();
}
public interface MongoDB.Bson.Serialization.Conventions.ICreatorMapConvention {
    public abstract virtual void Apply(BsonCreatorMap creatorMap);
}
public interface MongoDB.Bson.Serialization.Conventions.IDiscriminatorConvention {
    public string ElementName { get; }
    public abstract virtual string get_ElementName();
    public abstract virtual Type GetActualType(IBsonReader bsonReader, Type nominalType);
    public abstract virtual BsonValue GetDiscriminator(Type nominalType, Type actualType);
}
public class MongoDB.Bson.Serialization.Conventions.IgnoreExtraElementsConvention : ConventionBase {
    private bool _ignoreExtraElements;
    public IgnoreExtraElementsConvention(bool ignoreExtraElements);
    public sealed virtual void Apply(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.IgnoreIfDefaultConvention : ConventionBase {
    private bool _ignoreIfDefault;
    public IgnoreIfDefaultConvention(bool ignoreIfDefault);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.IgnoreIfNullConvention : ConventionBase {
    private bool _ignoreIfNull;
    public IgnoreIfNullConvention(bool ignoreIfNull);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public interface MongoDB.Bson.Serialization.Conventions.IMemberMapConvention {
    public abstract virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.ImmutableTypeClassMapConvention : ConventionBase {
    public sealed virtual void Apply(BsonClassMap classMap);
    private bool CanWrite(PropertyInfo propertyInfo);
    private ConstructorInfo[] GetUsableConstructors(TypeInfo typeInfo);
    private bool PropertyMatchesSomeCreatorParameter(BsonClassMap classMap, PropertyInfo propertyInfo);
    [CompilerGeneratedAttribute]
internal static bool <PropertyMatchesSomeCreatorParameter>g__PropertyMatchesSomeConstructorParameter|3_0(ConstructorInfo constructorInfo, <>c__DisplayClass3_0& );
}
public interface MongoDB.Bson.Serialization.Conventions.IPostProcessingConvention {
    public abstract virtual void PostProcess(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.LookupIdGeneratorConvention : ConventionBase {
    public sealed virtual void PostProcess(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.MemberDefaultValueConvention : ConventionBase {
    private Type _type;
    private object _defaultValue;
    public MemberDefaultValueConvention(Type type, object defaultValue);
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.MemberNameElementNameConvention : ConventionBase {
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.NamedExtraElementsMemberConvention : ConventionBase {
    private IEnumerable`1<string> _names;
    private MemberTypes _memberTypes;
    private BindingFlags _bindingFlags;
    public NamedExtraElementsMemberConvention(string name);
    public NamedExtraElementsMemberConvention(IEnumerable`1<string> names);
    public NamedExtraElementsMemberConvention(IEnumerable`1<string> names, MemberTypes memberTypes);
    public NamedExtraElementsMemberConvention(IEnumerable`1<string> names, BindingFlags bindingFlags);
    public NamedExtraElementsMemberConvention(IEnumerable`1<string> names, MemberTypes memberTypes, BindingFlags bindingFlags);
    public sealed virtual void Apply(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.NamedIdMemberConvention : ConventionBase {
    private IEnumerable`1<string> _names;
    private MemberTypes _memberTypes;
    private BindingFlags _bindingFlags;
    public NamedIdMemberConvention(String[] names);
    public NamedIdMemberConvention(IEnumerable`1<string> names);
    public NamedIdMemberConvention(IEnumerable`1<string> names, MemberTypes memberTypes);
    public NamedIdMemberConvention(IEnumerable`1<string> names, BindingFlags bindingFlags);
    public NamedIdMemberConvention(IEnumerable`1<string> names, MemberTypes memberTypes, BindingFlags bindingFlags);
    public sealed virtual void Apply(BsonClassMap classMap);
    private bool IsValidIdMember(BsonClassMap classMap, MemberInfo member);
}
public class MongoDB.Bson.Serialization.Conventions.NamedParameterCreatorMapConvention : ConventionBase {
    public sealed virtual void Apply(BsonCreatorMap creatorMap);
    private MemberInfo FindMatchingArgument(Type classType, ParameterInfo parameter);
    private Type GetMemberType(MemberInfo memberInfo);
    private IEnumerable`1<ParameterInfo> GetParameters(MemberInfo memberInfo);
    private MemberInfo Match(Type classType, MemberTypes memberType, BindingFlags visibility, ParameterInfo parameter);
}
public class MongoDB.Bson.Serialization.Conventions.NoIdMemberConvention : ConventionBase {
    public sealed virtual void PostProcess(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.ObjectDiscriminatorConvention : object {
    private static ObjectDiscriminatorConvention __instance;
    private string _elementName;
    public static ObjectDiscriminatorConvention Instance { get; }
    public string ElementName { get; }
    public ObjectDiscriminatorConvention(string elementName);
    private static ObjectDiscriminatorConvention();
    public static ObjectDiscriminatorConvention get_Instance();
    public sealed virtual string get_ElementName();
    public sealed virtual Type GetActualType(IBsonReader bsonReader, Type nominalType);
    public sealed virtual BsonValue GetDiscriminator(Type nominalType, Type actualType);
}
public class MongoDB.Bson.Serialization.Conventions.ReadWriteMemberFinderConvention : ConventionBase {
    private BindingFlags _bindingFlags;
    private MemberTypes _memberTypes;
    public ReadWriteMemberFinderConvention(MemberTypes memberTypes);
    public ReadWriteMemberFinderConvention(BindingFlags bindingFlags);
    public ReadWriteMemberFinderConvention(MemberTypes memberTypes, BindingFlags bindingFlags);
    public sealed virtual void Apply(BsonClassMap classMap);
    private void MapField(BsonClassMap classMap, FieldInfo fieldInfo);
    private void MapProperty(BsonClassMap classMap, PropertyInfo propertyInfo);
}
public class MongoDB.Bson.Serialization.Conventions.ResetClassMapConvention : ConventionBase {
    public sealed virtual void Apply(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.Conventions.ResetMemberMapsConvention : ConventionBase {
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.ScalarDiscriminatorConvention : StandardDiscriminatorConvention {
    public ScalarDiscriminatorConvention(string elementName);
    public virtual BsonValue GetDiscriminator(Type nominalType, Type actualType);
}
public abstract class MongoDB.Bson.Serialization.Conventions.StandardDiscriminatorConvention : object {
    private static ScalarDiscriminatorConvention __scalar;
    private static HierarchicalDiscriminatorConvention __hierarchical;
    private string _elementName;
    public static ScalarDiscriminatorConvention Scalar { get; }
    public static HierarchicalDiscriminatorConvention Hierarchical { get; }
    public string ElementName { get; }
    protected StandardDiscriminatorConvention(string elementName);
    private static StandardDiscriminatorConvention();
    public static ScalarDiscriminatorConvention get_Scalar();
    public static HierarchicalDiscriminatorConvention get_Hierarchical();
    public sealed virtual string get_ElementName();
    public sealed virtual Type GetActualType(IBsonReader bsonReader, Type nominalType);
    public abstract virtual BsonValue GetDiscriminator(Type nominalType, Type actualType);
}
public class MongoDB.Bson.Serialization.Conventions.StringIdStoredAsObjectIdConvention : ConventionBase {
    public sealed virtual void Apply(BsonMemberMap memberMap);
}
public class MongoDB.Bson.Serialization.Conventions.StringObjectIdIdGeneratorConvention : ConventionBase {
    public sealed virtual void PostProcess(BsonClassMap classMap);
}
public class MongoDB.Bson.Serialization.CreatorMapDelegateCompiler : ExpressionVisitor {
    private ParameterExpression _prototypeParameter;
    private Dictionary`2<MemberInfo, ParameterExpression> _parameters;
    public Delegate CompileConstructorDelegate(ConstructorInfo constructorInfo);
    public Delegate CompileCreatorDelegate(Expression`1<Func`2<TClass, TClass>> creatorLambda, IEnumerable`1& arguments);
    public Delegate CompileFactoryMethodDelegate(MethodInfo methodInfo);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
}
public class MongoDB.Bson.Serialization.DiscriminatedInterfaceSerializationProvider : BsonSerializationProviderBase {
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
public abstract class MongoDB.Bson.Serialization.ExpressionVisitor : object {
    protected virtual Expression Visit(Expression node);
    protected ReadOnlyCollection`1<Expression> Visit(ReadOnlyCollection`1<Expression> nodes);
    protected virtual Expression VisitBinary(BinaryExpression node);
    protected virtual Expression VisitConditional(ConditionalExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
    protected virtual ElementInit VisitElementInit(ElementInit node);
    protected virtual IEnumerable`1<ElementInit> VisitElementInitList(ReadOnlyCollection`1<ElementInit> nodes);
    protected virtual Expression VisitInvocation(InvocationExpression node);
    protected virtual Expression VisitLambda(LambdaExpression node);
    protected virtual Expression VisitListInit(ListInitExpression node);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node);
    protected virtual MemberBinding VisitMemberBinding(MemberBinding node);
    protected virtual IEnumerable`1<MemberBinding> VisitMemberBindingList(ReadOnlyCollection`1<MemberBinding> nodes);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node);
    protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node);
    protected virtual Expression VisitMethodCall(MethodCallExpression node);
    protected virtual NewExpression VisitNew(NewExpression node);
    protected virtual Expression VisitNewArray(NewArrayExpression node);
    protected virtual Expression VisitParameter(ParameterExpression node);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression node);
    protected virtual Expression VisitUnary(UnaryExpression node);
}
public interface MongoDB.Bson.Serialization.IBsonArraySerializer {
    public abstract virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
}
public interface MongoDB.Bson.Serialization.IBsonClassMapAttribute {
    public abstract virtual void Apply(BsonClassMap classMap);
}
public interface MongoDB.Bson.Serialization.IBsonCreatorMapAttribute {
    public abstract virtual void Apply(BsonCreatorMap creatorMap);
}
public interface MongoDB.Bson.Serialization.IBsonDictionarySerializer {
    public DictionaryRepresentation DictionaryRepresentation { get; }
    public IBsonSerializer KeySerializer { get; }
    public IBsonSerializer ValueSerializer { get; }
    public abstract virtual DictionaryRepresentation get_DictionaryRepresentation();
    public abstract virtual IBsonSerializer get_KeySerializer();
    public abstract virtual IBsonSerializer get_ValueSerializer();
}
public interface MongoDB.Bson.Serialization.IBsonDocumentSerializer {
    public abstract virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public interface MongoDB.Bson.Serialization.IBsonIdProvider {
    public abstract virtual bool GetDocumentId(object document, Object& id, Type& idNominalType, IIdGenerator& idGenerator);
    public abstract virtual void SetDocumentId(object document, object id);
}
public interface MongoDB.Bson.Serialization.IBsonMemberMapAttribute {
    public abstract virtual void Apply(BsonMemberMap memberMap);
}
public interface MongoDB.Bson.Serialization.IBsonPolymorphicSerializer {
    public bool IsDiscriminatorCompatibleWithObjectSerializer { get; }
    public abstract virtual bool get_IsDiscriminatorCompatibleWithObjectSerializer();
}
public interface MongoDB.Bson.Serialization.IBsonPostProcessingAttribute {
    public abstract virtual void PostProcess(BsonClassMap classMap);
}
public interface MongoDB.Bson.Serialization.IBsonSerializationProvider {
    public abstract virtual IBsonSerializer GetSerializer(Type type);
}
public interface MongoDB.Bson.Serialization.IBsonSerializer {
    public Type ValueType { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual object Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public abstract virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value);
}
public interface MongoDB.Bson.Serialization.IBsonSerializer`1 {
    public abstract virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public abstract virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
}
[ExtensionAttribute]
public static class MongoDB.Bson.Serialization.IBsonSerializerExtensions : object {
    [ExtensionAttribute]
public static object Deserialize(IBsonSerializer serializer, BsonDeserializationContext context);
    [ExtensionAttribute]
public static TValue Deserialize(IBsonSerializer`1<TValue> serializer, BsonDeserializationContext context);
    [ExtensionAttribute]
public static void Serialize(IBsonSerializer serializer, BsonSerializationContext context, object value);
    [ExtensionAttribute]
public static void Serialize(IBsonSerializer`1<TValue> serializer, BsonSerializationContext context, TValue value);
    [ExtensionAttribute]
public static BsonValue ToBsonValue(IBsonSerializer serializer, object value);
    [ExtensionAttribute]
public static BsonValue ToBsonValue(IBsonSerializer`1<TValue> serializer, TValue value);
}
public interface MongoDB.Bson.Serialization.IBsonSerializerRegistry {
    public abstract virtual IBsonSerializer GetSerializer(Type type);
    public abstract virtual IBsonSerializer`1<T> GetSerializer();
}
public interface MongoDB.Bson.Serialization.IChildSerializerConfigurable {
    public IBsonSerializer ChildSerializer { get; }
    public abstract virtual IBsonSerializer get_ChildSerializer();
    public abstract virtual IBsonSerializer WithChildSerializer(IBsonSerializer childSerializer);
}
internal interface MongoDB.Bson.Serialization.ICreatorSelector {
    public abstract virtual BsonCreatorMap SelectCreator(BsonClassMap classMap, Dictionary`2<string, object> values);
}
public class MongoDB.Bson.Serialization.IdGenerators.AscendingGuidGenerator : object {
    private static AscendingGuidGenerator __instance;
    private static Byte[] __random;
    private static int __increment;
    public static AscendingGuidGenerator Instance { get; }
    private static AscendingGuidGenerator();
    public static AscendingGuidGenerator get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public object GenerateId(long tickCount, Byte[] machineProcessId, int increment);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.BsonBinaryDataGuidGenerator : object {
    private static BsonBinaryDataGuidGenerator __csharpLegacyInstance;
    private static BsonBinaryDataGuidGenerator __javaLegacyInstance;
    private static BsonBinaryDataGuidGenerator __pythonLegacyInstance;
    private static BsonBinaryDataGuidGenerator __standardInstance;
    private static BsonBinaryDataGuidGenerator __unspecifiedInstance;
    private static Byte[] __emptyGuidBytes;
    private GuidRepresentation _guidRepresentation;
    public static BsonBinaryDataGuidGenerator CSharpLegacyInstance { get; }
    public static BsonBinaryDataGuidGenerator JavaLegacyInstance { get; }
    public static BsonBinaryDataGuidGenerator PythonLegacyInstance { get; }
    public static BsonBinaryDataGuidGenerator StandardInstance { get; }
    public static BsonBinaryDataGuidGenerator UnspecifedInstance { get; }
    public GuidRepresentation GuidRepresentation { get; }
    public BsonBinaryDataGuidGenerator(GuidRepresentation guidRepresentation);
    private static BsonBinaryDataGuidGenerator();
    public static BsonBinaryDataGuidGenerator get_CSharpLegacyInstance();
    public static BsonBinaryDataGuidGenerator get_JavaLegacyInstance();
    public static BsonBinaryDataGuidGenerator get_PythonLegacyInstance();
    public static BsonBinaryDataGuidGenerator get_StandardInstance();
    public static BsonBinaryDataGuidGenerator get_UnspecifedInstance();
    public GuidRepresentation get_GuidRepresentation();
    public static BsonBinaryDataGuidGenerator GetInstance(GuidRepresentation guidRepresentation);
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.BsonObjectIdGenerator : object {
    private static BsonObjectIdGenerator __instance;
    public static BsonObjectIdGenerator Instance { get; }
    private static BsonObjectIdGenerator();
    public static BsonObjectIdGenerator get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.CombGuidGenerator : object {
    private static CombGuidGenerator __instance;
    public static CombGuidGenerator Instance { get; }
    private static CombGuidGenerator();
    public static CombGuidGenerator get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
    public Guid NewCombGuid(Guid guid, DateTime timestamp);
}
public class MongoDB.Bson.Serialization.IdGenerators.GuidGenerator : object {
    private static GuidGenerator __instance;
    public static GuidGenerator Instance { get; }
    private static GuidGenerator();
    public static GuidGenerator get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.NullIdChecker : object {
    private static NullIdChecker __instance;
    public static NullIdChecker Instance { get; }
    private static NullIdChecker();
    public static NullIdChecker get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.ObjectIdGenerator : object {
    private static ObjectIdGenerator __instance;
    public static ObjectIdGenerator Instance { get; }
    private static ObjectIdGenerator();
    public static ObjectIdGenerator get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.StringObjectIdGenerator : object {
    private static StringObjectIdGenerator __instance;
    public static StringObjectIdGenerator Instance { get; }
    private static StringObjectIdGenerator();
    public static StringObjectIdGenerator get_Instance();
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public class MongoDB.Bson.Serialization.IdGenerators.ZeroIdChecker`1 : object {
    public sealed virtual object GenerateId(object container, object document);
    public sealed virtual bool IsEmpty(object id);
}
public interface MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable {
    public DictionaryRepresentation DictionaryRepresentation { get; }
    public abstract virtual DictionaryRepresentation get_DictionaryRepresentation();
    public abstract virtual IBsonSerializer WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
}
public interface MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable`1 {
    public abstract virtual TSerializer WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
}
public interface MongoDB.Bson.Serialization.IHasRepresentationSerializer {
    public BsonType Representation { get; }
    public abstract virtual BsonType get_Representation();
}
public interface MongoDB.Bson.Serialization.IIdGenerator {
    public abstract virtual object GenerateId(object container, object document);
    public abstract virtual bool IsEmpty(object id);
}
public interface MongoDB.Bson.Serialization.IRegistryAwareBsonSerializationProvider {
    public abstract virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
public interface MongoDB.Bson.Serialization.IRepresentationConfigurable {
    public abstract virtual IBsonSerializer WithRepresentation(BsonType representation);
}
public interface MongoDB.Bson.Serialization.IRepresentationConfigurable`1 {
    public abstract virtual TSerializer WithRepresentation(BsonType representation);
}
public interface MongoDB.Bson.Serialization.IRepresentationConverterConfigurable {
    public RepresentationConverter Converter { get; }
    public abstract virtual RepresentationConverter get_Converter();
    public abstract virtual IBsonSerializer WithConverter(RepresentationConverter converter);
}
public interface MongoDB.Bson.Serialization.IRepresentationConverterConfigurable`1 {
    public abstract virtual TSerializer WithConverter(RepresentationConverter converter);
}
internal class MongoDB.Bson.Serialization.MostArgumentsCreatorSelector : object {
    public sealed virtual BsonCreatorMap SelectCreator(BsonClassMap classMap, Dictionary`2<string, object> values);
    private bool IsBetterMatch(MatchData lhs, MatchData rhs);
    private MatchData Match(BsonCreatorMap creatorMap, Dictionary`2<string, object> values);
}
public enum MongoDB.Bson.Serialization.Options.DictionaryRepresentation : Enum {
    public int value__;
    public static DictionaryRepresentation Document;
    public static DictionaryRepresentation ArrayOfArrays;
    public static DictionaryRepresentation ArrayOfDocuments;
}
public class MongoDB.Bson.Serialization.Options.RepresentationConverter : object {
    private bool _allowOverflow;
    private bool _allowTruncation;
    public bool AllowOverflow { get; }
    public bool AllowTruncation { get; }
    public RepresentationConverter(bool allowOverflow, bool allowTruncation);
    public bool get_AllowOverflow();
    public bool get_AllowTruncation();
    public decimal ToDecimal(Decimal128 value);
    public decimal ToDecimal(double value);
    public decimal ToDecimal(int value);
    public decimal ToDecimal(long value);
    public Decimal128 ToDecimal128(decimal value);
    public Decimal128 ToDecimal128(double value);
    public Decimal128 ToDecimal128(int value);
    public Decimal128 ToDecimal128(long value);
    [CLSCompliantAttribute("False")]
public Decimal128 ToDecimal128(ulong value);
    public double ToDouble(decimal value);
    public double ToDouble(Decimal128 value);
    public double ToDouble(double value);
    public double ToDouble(float value);
    public double ToDouble(int value);
    public double ToDouble(long value);
    public double ToDouble(short value);
    [CLSCompliantAttribute("False")]
public double ToDouble(UInt32 value);
    [CLSCompliantAttribute("False")]
public double ToDouble(ulong value);
    [CLSCompliantAttribute("False")]
public double ToDouble(ushort value);
    public short ToInt16(Decimal128 value);
    public short ToInt16(double value);
    public short ToInt16(int value);
    public short ToInt16(long value);
    public int ToInt32(decimal value);
    public int ToInt32(Decimal128 value);
    public int ToInt32(double value);
    public int ToInt32(float value);
    public int ToInt32(int value);
    public int ToInt32(long value);
    public int ToInt32(short value);
    [CLSCompliantAttribute("False")]
public int ToInt32(UInt32 value);
    [CLSCompliantAttribute("False")]
public int ToInt32(ulong value);
    [CLSCompliantAttribute("False")]
public int ToInt32(ushort value);
    public long ToInt64(decimal value);
    public long ToInt64(Decimal128 value);
    public long ToInt64(double value);
    public long ToInt64(float value);
    public long ToInt64(int value);
    public long ToInt64(long value);
    public long ToInt64(short value);
    [CLSCompliantAttribute("False")]
public long ToInt64(UInt32 value);
    [CLSCompliantAttribute("False")]
public long ToInt64(ulong value);
    [CLSCompliantAttribute("False")]
public long ToInt64(ushort value);
    public float ToSingle(Decimal128 value);
    public float ToSingle(double value);
    public float ToSingle(int value);
    public float ToSingle(long value);
    [CLSCompliantAttribute("False")]
public ushort ToUInt16(Decimal128 value);
    [CLSCompliantAttribute("False")]
public ushort ToUInt16(double value);
    [CLSCompliantAttribute("False")]
public ushort ToUInt16(int value);
    [CLSCompliantAttribute("False")]
public ushort ToUInt16(long value);
    [CLSCompliantAttribute("False")]
public UInt32 ToUInt32(Decimal128 value);
    [CLSCompliantAttribute("False")]
public UInt32 ToUInt32(double value);
    [CLSCompliantAttribute("False")]
public UInt32 ToUInt32(int value);
    [CLSCompliantAttribute("False")]
public UInt32 ToUInt32(long value);
    [CLSCompliantAttribute("False")]
public ulong ToUInt64(Decimal128 value);
    [CLSCompliantAttribute("False")]
public ulong ToUInt64(double value);
    [CLSCompliantAttribute("False")]
public ulong ToUInt64(int value);
    [CLSCompliantAttribute("False")]
public ulong ToUInt64(long value);
}
public enum MongoDB.Bson.Serialization.Options.TimeSpanUnits : Enum {
    public int value__;
    public static TimeSpanUnits Ticks;
    public static TimeSpanUnits Days;
    public static TimeSpanUnits Hours;
    public static TimeSpanUnits Minutes;
    public static TimeSpanUnits Seconds;
    public static TimeSpanUnits Milliseconds;
    public static TimeSpanUnits Microseconds;
    public static TimeSpanUnits Nanoseconds;
}
public class MongoDB.Bson.Serialization.PrimitiveSerializationProvider : BsonSerializationProviderBase {
    private static Dictionary`2<Type, Type> __serializersTypes;
    private static PrimitiveSerializationProvider();
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
}
public class MongoDB.Bson.Serialization.Serializers.AbstractClassSerializer`1 : ClassSerializerBase`1<TClass> {
}
public class MongoDB.Bson.Serialization.Serializers.ArraySerializer`1 : EnumerableSerializerBase`2<TItem[], TItem> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public ArraySerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    public ArraySerializer`1(IBsonSerializerRegistry serializerRegistry);
    public ArraySerializer`1<TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual void AddItem(object accumulator, TItem item);
    protected virtual object CreateAccumulator();
    protected virtual IEnumerable`1<TItem> EnumerateItemsInSerializationOrder(TItem[] value);
    protected virtual TItem[] FinalizeResult(object accumulator);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.BitArraySerializer : SealedClassSerializerBase`1<BitArray> {
    private SerializerHelper _helper;
    private Int32Serializer _int32Serializer;
    private BsonType _representation;
    public BsonType Representation { get; }
    public BitArraySerializer(BsonType representation);
    public sealed virtual BsonType get_Representation();
    protected virtual BitArray DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BitArray value);
    public sealed virtual BitArraySerializer WithRepresentation(BsonType representation);
    private Byte[] GetBytes(BitArray bitArray);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.BooleanSerializer : StructSerializerBase`1<bool> {
    private static BooleanSerializer __instance;
    private BsonType _representation;
    public static BooleanSerializer Instance { get; }
    public BsonType Representation { get; }
    public BooleanSerializer(BsonType representation);
    private static BooleanSerializer();
    public static BooleanSerializer get_Instance();
    public sealed virtual BsonType get_Representation();
    public virtual bool Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, bool value);
    public sealed virtual BooleanSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.BsonArraySerializer : BsonValueSerializerBase`1<BsonArray> {
    private static BsonArraySerializer __instance;
    public static BsonArraySerializer Instance { get; }
    private static BsonArraySerializer();
    public static BsonArraySerializer get_Instance();
    protected virtual BsonArray DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonArray value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonBinaryDataSerializer : BsonValueSerializerBase`1<BsonBinaryData> {
    private static BsonBinaryDataSerializer __instance;
    public static BsonBinaryDataSerializer Instance { get; }
    private static BsonBinaryDataSerializer();
    public static BsonBinaryDataSerializer get_Instance();
    protected virtual BsonBinaryData DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonBinaryData value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonBooleanSerializer : BsonValueSerializerBase`1<BsonBoolean> {
    private static BsonBooleanSerializer __instance;
    public static BsonBooleanSerializer Instance { get; }
    private static BsonBooleanSerializer();
    public static BsonBooleanSerializer get_Instance();
    protected virtual BsonBoolean DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonBoolean value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonDateTimeSerializer : BsonValueSerializerBase`1<BsonDateTime> {
    private static BsonDateTimeSerializer __instance;
    public static BsonDateTimeSerializer Instance { get; }
    private static BsonDateTimeSerializer();
    public static BsonDateTimeSerializer get_Instance();
    protected virtual BsonDateTime DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonDateTime value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonDecimal128Serializer : BsonValueSerializerBase`1<BsonDecimal128> {
    private static BsonDecimal128Serializer __instance;
    public static BsonDecimal128Serializer Instance { get; }
    private static BsonDecimal128Serializer();
    public static BsonDecimal128Serializer get_Instance();
    protected virtual BsonDecimal128 DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonDecimal128 value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonDocumentSerializer : BsonValueSerializerBase`1<BsonDocument> {
    private static BsonDocumentSerializer __instance;
    public static BsonDocumentSerializer Instance { get; }
    private static BsonDocumentSerializer();
    public static BsonDocumentSerializer get_Instance();
    protected virtual BsonDocument DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool GetDocumentId(object document, Object& id, Type& idNominalType, IIdGenerator& idGenerator);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonDocument value);
    public sealed virtual void SetDocumentId(object document, object id);
}
public class MongoDB.Bson.Serialization.Serializers.BsonDocumentWrapperSerializer : BsonValueSerializerBase`1<BsonDocumentWrapper> {
    private static BsonDocumentWrapperSerializer __instance;
    public static BsonDocumentWrapperSerializer Instance { get; }
    private static BsonDocumentWrapperSerializer();
    public static BsonDocumentWrapperSerializer get_Instance();
    public virtual BsonDocumentWrapper Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual BsonDocumentWrapper DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonDocumentWrapper value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonDoubleSerializer : BsonValueSerializerBase`1<BsonDouble> {
    private static BsonDoubleSerializer __instance;
    public static BsonDoubleSerializer Instance { get; }
    private static BsonDoubleSerializer();
    public static BsonDoubleSerializer get_Instance();
    protected virtual BsonDouble DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonDouble value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonInt32Serializer : BsonValueSerializerBase`1<BsonInt32> {
    private static BsonInt32Serializer __instance;
    public static BsonInt32Serializer Instance { get; }
    private static BsonInt32Serializer();
    public static BsonInt32Serializer get_Instance();
    protected virtual BsonInt32 DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonInt32 value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonInt64Serializer : BsonValueSerializerBase`1<BsonInt64> {
    private static BsonInt64Serializer __instance;
    public static BsonInt64Serializer Instance { get; }
    private static BsonInt64Serializer();
    public static BsonInt64Serializer get_Instance();
    protected virtual BsonInt64 DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonInt64 value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonJavaScriptSerializer : BsonValueSerializerBase`1<BsonJavaScript> {
    private static BsonJavaScriptSerializer __instance;
    public static BsonJavaScriptSerializer Instance { get; }
    private static BsonJavaScriptSerializer();
    public static BsonJavaScriptSerializer get_Instance();
    protected virtual BsonJavaScript DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonJavaScript value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonJavaScriptWithScopeSerializer : BsonValueSerializerBase`1<BsonJavaScriptWithScope> {
    private static BsonJavaScriptWithScopeSerializer __instance;
    public static BsonJavaScriptWithScopeSerializer Instance { get; }
    private static BsonJavaScriptWithScopeSerializer();
    public static BsonJavaScriptWithScopeSerializer get_Instance();
    protected virtual BsonJavaScriptWithScope DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonJavaScriptWithScope value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonMaxKeySerializer : BsonValueSerializerBase`1<BsonMaxKey> {
    private static BsonMaxKeySerializer __instance;
    public static BsonMaxKeySerializer Instance { get; }
    private static BsonMaxKeySerializer();
    public static BsonMaxKeySerializer get_Instance();
    protected virtual BsonMaxKey DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonMaxKey value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonMinKeySerializer : BsonValueSerializerBase`1<BsonMinKey> {
    private static BsonMinKeySerializer __instance;
    public static BsonMinKeySerializer Instance { get; }
    private static BsonMinKeySerializer();
    public static BsonMinKeySerializer get_Instance();
    protected virtual BsonMinKey DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonMinKey value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonNullSerializer : BsonValueSerializerBase`1<BsonNull> {
    private static BsonNullSerializer __instance;
    public static BsonNullSerializer Instance { get; }
    private static BsonNullSerializer();
    public static BsonNullSerializer get_Instance();
    protected virtual BsonNull DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonNull value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonObjectIdSerializer : BsonValueSerializerBase`1<BsonObjectId> {
    private static BsonObjectIdSerializer __instance;
    public static BsonObjectIdSerializer Instance { get; }
    private static BsonObjectIdSerializer();
    public static BsonObjectIdSerializer get_Instance();
    protected virtual BsonObjectId DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonObjectId value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonRegularExpressionSerializer : BsonValueSerializerBase`1<BsonRegularExpression> {
    private static BsonRegularExpressionSerializer __instance;
    public static BsonRegularExpressionSerializer Instance { get; }
    private static BsonRegularExpressionSerializer();
    public static BsonRegularExpressionSerializer get_Instance();
    protected virtual BsonRegularExpression DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonRegularExpression value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonStringSerializer : BsonValueSerializerBase`1<BsonString> {
    private static BsonStringSerializer __instance;
    public static BsonStringSerializer Instance { get; }
    private static BsonStringSerializer();
    public static BsonStringSerializer get_Instance();
    protected virtual BsonString DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonString value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonSymbolSerializer : BsonValueSerializerBase`1<BsonSymbol> {
    private static BsonSymbolSerializer __instance;
    public static BsonSymbolSerializer Instance { get; }
    private static BsonSymbolSerializer();
    public static BsonSymbolSerializer get_Instance();
    protected virtual BsonSymbol DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonSymbol value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonTimestampSerializer : BsonValueSerializerBase`1<BsonTimestamp> {
    private static BsonTimestampSerializer __instance;
    public static BsonTimestampSerializer Instance { get; }
    private static BsonTimestampSerializer();
    public static BsonTimestampSerializer get_Instance();
    protected virtual BsonTimestamp DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonTimestamp value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonUndefinedSerializer : BsonValueSerializerBase`1<BsonUndefined> {
    private static BsonUndefinedSerializer __instance;
    public static BsonUndefinedSerializer Instance { get; }
    private static BsonUndefinedSerializer();
    public static BsonUndefinedSerializer get_Instance();
    protected virtual BsonUndefined DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonUndefined value);
}
public class MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullArrayAndDocumentSerializer`1 : BsonValueCSharpNullSerializer`1<TBsonValue> {
    public BsonValueCSharpNullArrayAndDocumentSerializer`1(IBsonSerializer`1<TBsonValue> wrappedSerializer);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullArraySerializer`1 : BsonValueCSharpNullSerializer`1<TBsonValue> {
    public BsonValueCSharpNullArraySerializer`1(IBsonSerializer`1<TBsonValue> wrappedSerializer);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullDocumentSerializer`1 : BsonValueCSharpNullSerializer`1<TBsonValue> {
    public BsonValueCSharpNullDocumentSerializer`1(IBsonSerializer`1<TBsonValue> wrappedSerializer);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Bson.Serialization.Serializers.BsonValueCSharpNullSerializer`1 : SerializerBase`1<TBsonValue> {
    private IBsonSerializer`1<TBsonValue> _wrappedSerializer;
    public BsonValueCSharpNullSerializer`1(IBsonSerializer`1<TBsonValue> wrappedSerializer);
    public virtual TBsonValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TBsonValue value);
    private bool IsCSharpNullRepresentation(IBsonReader bsonReader);
}
public class MongoDB.Bson.Serialization.Serializers.BsonValueSerializer : BsonValueSerializerBase`1<BsonValue> {
    private static BsonValueSerializer __instance;
    public static BsonValueSerializer Instance { get; }
    private static BsonValueSerializer();
    public static BsonValueSerializer get_Instance();
    protected virtual BsonValue DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, BsonValue value);
}
public abstract class MongoDB.Bson.Serialization.Serializers.BsonValueSerializerBase`1 : SerializerBase`1<TBsonValue> {
    private Nullable`1<BsonType> _bsonType;
    protected BsonValueSerializerBase`1(Nullable`1<BsonType> bsonType);
    public virtual TBsonValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TBsonValue value);
    protected abstract virtual TBsonValue DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected abstract virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TBsonValue value);
}
public class MongoDB.Bson.Serialization.Serializers.ByteArraySerializer : SealedClassSerializerBase`1<Byte[]> {
    private static ByteArraySerializer __instance;
    private BsonType _representation;
    public static ByteArraySerializer Instance { get; }
    public BsonType Representation { get; }
    public ByteArraySerializer(BsonType representation);
    private static ByteArraySerializer();
    public static ByteArraySerializer get_Instance();
    public sealed virtual BsonType get_Representation();
    protected virtual Byte[] DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Byte[] value);
    public sealed virtual ByteArraySerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.ByteSerializer : StructSerializerBase`1<byte> {
    private BsonType _representation;
    public BsonType Representation { get; }
    public ByteSerializer(BsonType representation);
    public sealed virtual BsonType get_Representation();
    public virtual byte Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, byte value);
    public sealed virtual ByteSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.CharSerializer : StructSerializerBase`1<char> {
    private BsonType _representation;
    public BsonType Representation { get; }
    public CharSerializer(BsonType representation);
    public sealed virtual BsonType get_Representation();
    public virtual char Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, char value);
    public sealed virtual CharSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public abstract class MongoDB.Bson.Serialization.Serializers.ClassSerializerBase`1 : SerializerBase`1<TValue> {
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    protected virtual TValue DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual Type GetActualType(BsonDeserializationContext context);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
}
public class MongoDB.Bson.Serialization.Serializers.CultureInfoSerializer : ClassSerializerBase`1<CultureInfo> {
    private BooleanSerializer _booleanSerializer;
    private SerializerHelper _helper;
    protected virtual CultureInfo DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, CultureInfo value);
}
public class MongoDB.Bson.Serialization.Serializers.DateTimeOffsetSerializer : StructSerializerBase`1<DateTimeOffset> {
    private SerializerHelper _helper;
    private Int32Serializer _int32Serializer;
    private Int64Serializer _int64Serializer;
    private BsonType _representation;
    public BsonType Representation { get; }
    public DateTimeOffsetSerializer(BsonType representation);
    public sealed virtual BsonType get_Representation();
    public virtual DateTimeOffset Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, DateTimeOffset value);
    public sealed virtual DateTimeOffsetSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.DateTimeSerializer : StructSerializerBase`1<DateTime> {
    private static DateTimeSerializer __instance;
    private static DateTimeSerializer __dateOnlyInstance;
    private static DateTimeSerializer __localInstance;
    private static DateTimeSerializer __utcInstance;
    private bool _dateOnly;
    private SerializerHelper _helper;
    private Int64Serializer _int64Serializer;
    private DateTimeKind _kind;
    private BsonType _representation;
    public static DateTimeSerializer Instance { get; }
    public static DateTimeSerializer DateOnlyInstance { get; }
    public static DateTimeSerializer LocalInstance { get; }
    public static DateTimeSerializer UtcInstance { get; }
    public bool DateOnly { get; }
    public DateTimeKind Kind { get; }
    public BsonType Representation { get; }
    public DateTimeSerializer(bool dateOnly);
    public DateTimeSerializer(bool dateOnly, BsonType representation);
    public DateTimeSerializer(BsonType representation);
    public DateTimeSerializer(DateTimeKind kind);
    public DateTimeSerializer(DateTimeKind kind, BsonType representation);
    private DateTimeSerializer(bool dateOnly, DateTimeKind kind, BsonType representation);
    private static DateTimeSerializer();
    public static DateTimeSerializer get_Instance();
    public static DateTimeSerializer get_DateOnlyInstance();
    public static DateTimeSerializer get_LocalInstance();
    public static DateTimeSerializer get_UtcInstance();
    public bool get_DateOnly();
    public DateTimeKind get_Kind();
    public sealed virtual BsonType get_Representation();
    public virtual DateTime Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, DateTime value);
    public DateTimeSerializer WithDateOnly(bool dateOnly);
    public DateTimeSerializer WithDateOnly(bool dateOnly, BsonType representation);
    public DateTimeSerializer WithKind(DateTimeKind kind);
    public DateTimeSerializer WithKind(DateTimeKind kind, BsonType representation);
    public sealed virtual DateTimeSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.Decimal128Serializer : StructSerializerBase`1<Decimal128> {
    private static Decimal128Serializer __decimal128Instance;
    private BsonType _representation;
    private RepresentationConverter _converter;
    public static Decimal128Serializer Decimal128Instance { get; }
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public Decimal128Serializer(BsonType representation);
    public Decimal128Serializer(BsonType representation, RepresentationConverter converter);
    private static Decimal128Serializer();
    public static Decimal128Serializer get_Decimal128Instance();
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual Decimal128 Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, Decimal128 value);
    public sealed virtual Decimal128Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual Decimal128Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.DecimalSerializer : StructSerializerBase`1<decimal> {
    private static DecimalSerializer __decimal128Instance;
    private BsonType _representation;
    private RepresentationConverter _converter;
    public static DecimalSerializer Decimal128Instance { get; }
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public DecimalSerializer(BsonType representation);
    public DecimalSerializer(BsonType representation, RepresentationConverter converter);
    private static DecimalSerializer();
    public static DecimalSerializer get_Decimal128Instance();
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual decimal Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, decimal value);
    public sealed virtual DecimalSerializer WithConverter(RepresentationConverter converter);
    public sealed virtual DecimalSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.DictionaryInterfaceImplementerSerializer`1 : DictionarySerializerBase`1<TDictionary> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public DictionaryInterfaceImplementerSerializer`1(DictionaryRepresentation dictionaryRepresentation);
    public DictionaryInterfaceImplementerSerializer`1(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer keySerializer, IBsonSerializer valueSerializer);
    public DictionaryInterfaceImplementerSerializer`1<TDictionary> WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
    public DictionaryInterfaceImplementerSerializer`1<TDictionary> WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer keySerializer, IBsonSerializer valueSerializer);
    public DictionaryInterfaceImplementerSerializer`1<TDictionary> WithKeySerializer(IBsonSerializer keySerializer);
    public DictionaryInterfaceImplementerSerializer`1<TDictionary> WithValueSerializer(IBsonSerializer valueSerializer);
    protected virtual TDictionary CreateInstance();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable.WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
}
public class MongoDB.Bson.Serialization.Serializers.DictionaryInterfaceImplementerSerializer`3 : DictionarySerializerBase`3<TDictionary, TKey, TValue> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public DictionaryInterfaceImplementerSerializer`3(DictionaryRepresentation dictionaryRepresentation);
    public DictionaryInterfaceImplementerSerializer`3(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TValue> valueSerializer);
    public sealed virtual DictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
    public DictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TValue> valueSerializer);
    public DictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithKeySerializer(IBsonSerializer`1<TKey> keySerializer);
    public DictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithValueSerializer(IBsonSerializer`1<TValue> valueSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable.WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
    protected virtual ICollection`1<KeyValuePair`2<TKey, TValue>> CreateAccumulator();
}
public abstract class MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase`1 : ClassSerializerBase`1<TDictionary> {
    private DictionaryRepresentation _dictionaryRepresentation;
    private SerializerHelper _helper;
    private IBsonSerializer _keySerializer;
    private IBsonSerializer _valueSerializer;
    public DictionaryRepresentation DictionaryRepresentation { get; }
    public IBsonSerializer KeySerializer { get; }
    public IBsonSerializer ValueSerializer { get; }
    public DictionarySerializerBase`1(DictionaryRepresentation dictionaryRepresentation);
    public DictionarySerializerBase`1(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer keySerializer, IBsonSerializer valueSerializer);
    public sealed virtual DictionaryRepresentation get_DictionaryRepresentation();
    public sealed virtual IBsonSerializer get_KeySerializer();
    public sealed virtual IBsonSerializer get_ValueSerializer();
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    protected virtual TDictionary DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TDictionary value);
    protected abstract virtual TDictionary CreateInstance();
    private TDictionary DeserializeArrayRepresentation(BsonDeserializationContext context);
    private TDictionary DeserializeDocumentRepresentation(BsonDeserializationContext context);
    private object DeserializeKeyString(string keyString);
    private void SerializeArrayOfArraysRepresentation(BsonSerializationContext context, TDictionary value);
    private void SerializeArrayOfDocumentsRepresentation(BsonSerializationContext context, TDictionary value);
    private void SerializeDocumentRepresentation(BsonSerializationContext context, TDictionary value);
    private string SerializeKeyString(object key);
}
public abstract class MongoDB.Bson.Serialization.Serializers.DictionarySerializerBase`3 : ClassSerializerBase`1<TDictionary> {
    private DictionaryRepresentation _dictionaryRepresentation;
    private SerializerHelper _helper;
    private Lazy`1<IBsonSerializer`1<TKey>> _lazyKeySerializer;
    private Lazy`1<IBsonSerializer`1<TValue>> _lazyValueSerializer;
    public DictionaryRepresentation DictionaryRepresentation { get; }
    public IBsonSerializer`1<TKey> KeySerializer { get; }
    public IBsonSerializer`1<TValue> ValueSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IBsonDictionarySerializer.KeySerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IBsonDictionarySerializer.ValueSerializer { get; }
    public DictionarySerializerBase`3(DictionaryRepresentation dictionaryRepresentation);
    public DictionarySerializerBase`3(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TValue> valueSerializer);
    public DictionarySerializerBase`3(DictionaryRepresentation dictionaryRepresentation, IBsonSerializerRegistry serializerRegistry);
    private DictionarySerializerBase`3(DictionaryRepresentation dictionaryRepresentation, Lazy`1<IBsonSerializer`1<TKey>> lazyKeySerializer, Lazy`1<IBsonSerializer`1<TValue>> lazyValueSerializer);
    public sealed virtual DictionaryRepresentation get_DictionaryRepresentation();
    public IBsonSerializer`1<TKey> get_KeySerializer();
    public IBsonSerializer`1<TValue> get_ValueSerializer();
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    protected virtual TDictionary DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TDictionary value);
    protected virtual ICollection`1<KeyValuePair`2<TKey, TValue>> CreateAccumulator();
    [ObsoleteAttribute("CreateInstance is deprecated. Please use CreateAccumulator instead.")]
protected virtual TDictionary CreateInstance();
    protected virtual TDictionary FinalizeAccumulator(ICollection`1<KeyValuePair`2<TKey, TValue>> accumulator);
    private TDictionary DeserializeArrayRepresentation(BsonDeserializationContext context);
    private TDictionary DeserializeDocumentRepresentation(BsonDeserializationContext context);
    private TKey DeserializeKeyString(string keyString);
    private void SerializeArrayOfArraysRepresentation(BsonSerializationContext context, TDictionary value);
    private void SerializeArrayOfDocumentsRepresentation(BsonSerializationContext context, TDictionary value);
    private void SerializeDocumentRepresentation(BsonSerializationContext context, TDictionary value);
    private string SerializeKeyString(TKey key);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IBsonDictionarySerializer.get_KeySerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IBsonDictionarySerializer.get_ValueSerializer();
}
public class MongoDB.Bson.Serialization.Serializers.DiscriminatedInterfaceSerializer`1 : SerializerBase`1<TInterface> {
    private Type _interfaceType;
    private IDiscriminatorConvention _discriminatorConvention;
    private IBsonSerializer`1<TInterface> _interfaceSerializer;
    private IBsonSerializer`1<object> _objectSerializer;
    public IBsonSerializer`1<TInterface> InterfaceSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.Serializers.IDiscriminatedInterfaceSerializer.InterfaceSerializer { get; }
    public DiscriminatedInterfaceSerializer`1(IDiscriminatorConvention discriminatorConvention);
    public DiscriminatedInterfaceSerializer`1(IDiscriminatorConvention discriminatorConvention, IBsonSerializer`1<TInterface> interfaceSerializer);
    private static IBsonSerializer`1<TInterface> CreateInterfaceSerializer();
    public IBsonSerializer`1<TInterface> get_InterfaceSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.Serializers.IDiscriminatedInterfaceSerializer.get_InterfaceSerializer();
    public virtual TInterface Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TInterface value);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Bson.Serialization.Serializers.DiscriminatedWrapperSerializer`1 : SerializerBase`1<TValue> {
    private IDiscriminatorConvention _discriminatorConvention;
    private SerializerHelper _helper;
    private SerializerHelper _isPositionedHelper;
    private IBsonSerializer`1<TValue> _wrappedSerializer;
    public DiscriminatedWrapperSerializer`1(IDiscriminatorConvention discriminatorConvention, IBsonSerializer`1<TValue> wrappedSerializer);
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public bool IsPositionedAtDiscriminatedWrapper(BsonDeserializationContext context);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
}
public class MongoDB.Bson.Serialization.Serializers.DoubleSerializer : StructSerializerBase`1<double> {
    private static DoubleSerializer __instance;
    private BsonType _representation;
    private RepresentationConverter _converter;
    public static DoubleSerializer Instance { get; }
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public DoubleSerializer(BsonType representation);
    public DoubleSerializer(BsonType representation, RepresentationConverter converter);
    private static DoubleSerializer();
    public static DoubleSerializer get_Instance();
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual double Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, double value);
    public sealed virtual DoubleSerializer WithConverter(RepresentationConverter converter);
    public sealed virtual DoubleSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public static class MongoDB.Bson.Serialization.Serializers.DowncastingSerializer : object {
    public static IBsonSerializer Create(Type baseType, Type derivedType, IBsonSerializer derivedTypeSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.DowncastingSerializer`2 : SerializerBase`1<TBase> {
    private IBsonSerializer`1<TDerived> _derivedSerializer;
    public Type BaseType { get; }
    public IBsonSerializer`1<TDerived> DerivedSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.Serializers.IDowncastingSerializer.DerivedSerializer { get; }
    public Type DerivedType { get; }
    public DowncastingSerializer`2(IBsonSerializer`1<TDerived> derivedSerializer);
    public sealed virtual Type get_BaseType();
    public IBsonSerializer`1<TDerived> get_DerivedSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.Serializers.IDowncastingSerializer.get_DerivedSerializer();
    public sealed virtual Type get_DerivedType();
    public virtual TBase Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TBase value);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public abstract class MongoDB.Bson.Serialization.Serializers.DynamicDocumentBaseSerializer`1 : SerializerBase`1<T> {
    private static IBsonSerializer`1<object> _objectSerializer;
    private static DynamicDocumentBaseSerializer`1();
    public virtual T Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, T value);
    protected abstract virtual void ConfigureDeserializationContext(Builder builder);
    protected abstract virtual void ConfigureSerializationContext(Builder builder);
    protected abstract virtual T CreateDocument();
    protected abstract virtual void SetValueForMember(T document, string memberName, object value);
    protected abstract virtual bool TryGetValueForMember(T document, string memberName, Object& value);
}
public class MongoDB.Bson.Serialization.Serializers.ElementAppendingSerializer`1 : object {
    private IBsonSerializer`1<TDocument> _documentSerializer;
    private List`1<BsonElement> _elements;
    private Action`1<BsonWriterSettings> _writerSettingsConfigurator;
    public Type ValueType { get; }
    public ElementAppendingSerializer`1(IBsonSerializer`1<TDocument> documentSerializer, IEnumerable`1<BsonElement> elements, Action`1<BsonWriterSettings> writerSettingsConfigurator);
    public sealed virtual Type get_ValueType();
    public sealed virtual TDocument Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    private sealed virtual override object MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TDocument value);
    private sealed virtual override void MongoDB.Bson.Serialization.IBsonSerializer.Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value);
    private void ConfigureElementAppendingContext(Builder builder, BsonSerializationContext originalContext);
}
public class MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializer`1 : EnumerableInterfaceImplementerSerializerBase`1<TValue> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public EnumerableInterfaceImplementerSerializer`1(IBsonSerializer itemSerializer);
    public EnumerableInterfaceImplementerSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public EnumerableInterfaceImplementerSerializer`1<TValue> WithItemSerializer(IBsonSerializer itemSerializer);
    protected virtual object CreateAccumulator();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializer`2 : EnumerableInterfaceImplementerSerializerBase`2<TValue, TItem> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public EnumerableInterfaceImplementerSerializer`2(IBsonSerializer`1<TItem> itemSerializer);
    public EnumerableInterfaceImplementerSerializer`2(IBsonSerializerRegistry serializerRegistry);
    public EnumerableInterfaceImplementerSerializer`2<TValue, TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual object CreateAccumulator();
    protected virtual TValue FinalizeResult(object accumulator);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public abstract class MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase`1 : EnumerableSerializerBase`1<TValue> {
    protected EnumerableInterfaceImplementerSerializerBase`1(IBsonSerializer itemSerializer);
    protected EnumerableInterfaceImplementerSerializerBase`1(IBsonSerializerRegistry serializerRegistry);
    protected virtual void AddItem(object accumulator, object item);
    protected virtual IEnumerable EnumerateItemsInSerializationOrder(TValue value);
    protected virtual TValue FinalizeResult(object accumulator);
}
public abstract class MongoDB.Bson.Serialization.Serializers.EnumerableInterfaceImplementerSerializerBase`2 : EnumerableSerializerBase`2<TValue, TItem> {
    public EnumerableInterfaceImplementerSerializerBase`2(IBsonSerializer`1<TItem> itemSerializer);
    public EnumerableInterfaceImplementerSerializerBase`2(IBsonSerializerRegistry serializerRegistry);
    protected virtual void AddItem(object accumulator, TItem item);
    protected virtual IEnumerable`1<TItem> EnumerateItemsInSerializationOrder(TValue value);
    protected virtual TValue FinalizeResult(object accumulator);
}
public abstract class MongoDB.Bson.Serialization.Serializers.EnumerableSerializerBase`1 : SerializerBase`1<TValue> {
    private IDiscriminatorConvention _discriminatorConvention;
    private Lazy`1<IBsonSerializer> _lazyItemSerializer;
    public IBsonSerializer ItemSerializer { get; }
    protected EnumerableSerializerBase`1(IBsonSerializer itemSerializer);
    protected EnumerableSerializerBase`1(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer get_ItemSerializer();
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    protected abstract virtual void AddItem(object accumulator, object item);
    protected abstract virtual object CreateAccumulator();
    protected abstract virtual IEnumerable EnumerateItemsInSerializationOrder(TValue value);
    protected abstract virtual TValue FinalizeResult(object accumulator);
}
public abstract class MongoDB.Bson.Serialization.Serializers.EnumerableSerializerBase`2 : SerializerBase`1<TValue> {
    private IDiscriminatorConvention _discriminatorConvention;
    private Lazy`1<IBsonSerializer`1<TItem>> _lazyItemSerializer;
    public IBsonSerializer`1<TItem> ItemSerializer { get; }
    protected EnumerableSerializerBase`2(IBsonSerializer`1<TItem> itemSerializer);
    protected EnumerableSerializerBase`2(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<TItem> get_ItemSerializer();
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    protected abstract virtual void AddItem(object accumulator, TItem item);
    protected abstract virtual object CreateAccumulator();
    protected abstract virtual IEnumerable`1<TItem> EnumerateItemsInSerializationOrder(TValue value);
    protected abstract virtual TValue FinalizeResult(object accumulator);
}
public static class MongoDB.Bson.Serialization.Serializers.EnumSerializer : object {
    public static IBsonSerializer Create(Type valueType);
}
public class MongoDB.Bson.Serialization.Serializers.EnumSerializer`1 : StructSerializerBase`1<TEnum> {
    private BsonType _representation;
    private TypeCode _underlyingTypeCode;
    public BsonType Representation { get; }
    public EnumSerializer`1(BsonType representation);
    public sealed virtual BsonType get_Representation();
    public virtual TEnum Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TEnum value);
    public sealed virtual EnumSerializer`1<TEnum> WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
    private TEnum ConvertDoubleToEnum(double value);
    private int ConvertEnumToInt32(TEnum value);
    private long ConvertEnumToInt64(TEnum value);
    private string ConvertEnumToString(TEnum value);
    private TEnum ConvertInt32ToEnum(int value);
    private TEnum ConvertInt64ToEnum(long value);
    private BsonType GetRepresentationForUnderlyingType();
    private TEnum ConvertStringToEnum(string value);
}
public class MongoDB.Bson.Serialization.Serializers.ExpandoObjectSerializer : DynamicDocumentBaseSerializer`1<ExpandoObject> {
    private IBsonSerializer`1<List`1<object>> _listSerializer;
    protected virtual void ConfigureDeserializationContext(Builder builder);
    protected virtual void ConfigureSerializationContext(Builder builder);
    protected virtual ExpandoObject CreateDocument();
    protected virtual void SetValueForMember(ExpandoObject document, string memberName, object value);
    protected virtual bool TryGetValueForMember(ExpandoObject value, string memberName, Object& memberValue);
}
public class MongoDB.Bson.Serialization.Serializers.GuidSerializer : StructSerializerBase`1<Guid> {
    private static GuidSerializer __standardInstance;
    private GuidRepresentation _guidRepresentation;
    private BsonType _representation;
    public static GuidSerializer StandardInstance { get; }
    public GuidRepresentation GuidRepresentation { get; }
    public BsonType Representation { get; }
    public GuidSerializer(BsonType representation);
    public GuidSerializer(GuidRepresentation guidRepresentation);
    private static GuidSerializer();
    public static GuidSerializer get_StandardInstance();
    public GuidRepresentation get_GuidRepresentation();
    public sealed virtual BsonType get_Representation();
    public virtual Guid Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, Guid value);
    public GuidSerializer WithGuidRepresentation(GuidRepresentation guidRepresentation);
    public sealed virtual GuidSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public interface MongoDB.Bson.Serialization.Serializers.IBsonTupleSerializer {
    public abstract virtual IBsonSerializer GetItemSerializer(int itemNumber);
}
public interface MongoDB.Bson.Serialization.Serializers.IDiscriminatedInterfaceSerializer {
    public IBsonSerializer InterfaceSerializer { get; }
    public abstract virtual IBsonSerializer get_InterfaceSerializer();
}
public interface MongoDB.Bson.Serialization.Serializers.IDowncastingSerializer {
    public Type BaseType { get; }
    public IBsonSerializer DerivedSerializer { get; }
    public Type DerivedType { get; }
    public abstract virtual Type get_BaseType();
    public abstract virtual IBsonSerializer get_DerivedSerializer();
    public abstract virtual Type get_DerivedType();
}
public class MongoDB.Bson.Serialization.Serializers.IEnumerableDeserializingAsCollectionSerializer`3 : SerializerBase`1<TIEnumerable> {
    private Lazy`1<IBsonSerializer`1<TItem>> _lazyItemSerializer;
    public IBsonSerializer`1<TItem> ItemSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public IEnumerableDeserializingAsCollectionSerializer`3(IBsonSerializer`1<TItem> itemSerializer);
    public IEnumerableDeserializingAsCollectionSerializer`3(IBsonSerializerRegistry serializerRegistry);
    private static void EnsureTIEnumerableIsAnInterface();
    public IBsonSerializer`1<TItem> get_ItemSerializer();
    public virtual TIEnumerable Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TIEnumerable value);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public IEnumerableDeserializingAsCollectionSerializer`3<TIEnumerable, TItem, TCollection> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public interface MongoDB.Bson.Serialization.Serializers.IImpliedImplementationInterfaceSerializer {
    public IBsonSerializer ImplementationSerializer { get; }
    public abstract virtual IBsonSerializer get_ImplementationSerializer();
}
public interface MongoDB.Bson.Serialization.Serializers.IKeyValuePairSerializer {
    public BsonType Representation { get; }
    public abstract virtual BsonType get_Representation();
}
public class MongoDB.Bson.Serialization.Serializers.ImpliedImplementationInterfaceSerializer`2 : SerializerBase`1<TInterface> {
    private Lazy`1<IBsonSerializer`1<TImplementation>> _lazyImplementationSerializer;
    public DictionaryRepresentation DictionaryRepresentation { get; }
    public IBsonSerializer KeySerializer { get; }
    public IBsonSerializer`1<TImplementation> ImplementationSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.Serializers.IImpliedImplementationInterfaceSerializer.ImplementationSerializer { get; }
    public IBsonSerializer ValueSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public ImpliedImplementationInterfaceSerializer`2(IBsonSerializer`1<TImplementation> implementationSerializer);
    public ImpliedImplementationInterfaceSerializer`2(IBsonSerializerRegistry serializerRegistry);
    private ImpliedImplementationInterfaceSerializer`2(Lazy`1<IBsonSerializer`1<TImplementation>> lazyImplementationSerializer);
    public sealed virtual DictionaryRepresentation get_DictionaryRepresentation();
    public sealed virtual IBsonSerializer get_KeySerializer();
    public IBsonSerializer`1<TImplementation> get_ImplementationSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.Serializers.IImpliedImplementationInterfaceSerializer.get_ImplementationSerializer();
    public sealed virtual IBsonSerializer get_ValueSerializer();
    public virtual TInterface Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TInterface value);
    public ImpliedImplementationInterfaceSerializer`2<TInterface, TImplementation> WithImplementationSerializer(IBsonSerializer`1<TImplementation> implementationSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.Int16Serializer : StructSerializerBase`1<short> {
    private BsonType _representation;
    private RepresentationConverter _converter;
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public Int16Serializer(BsonType representation);
    public Int16Serializer(BsonType representation, RepresentationConverter converter);
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual short Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, short value);
    public sealed virtual Int16Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual Int16Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.Int32Serializer : StructSerializerBase`1<int> {
    private static Int32Serializer __instance;
    private BsonType _representation;
    private RepresentationConverter _converter;
    public static Int32Serializer Instance { get; }
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public Int32Serializer(BsonType representation);
    public Int32Serializer(BsonType representation, RepresentationConverter converter);
    private static Int32Serializer();
    public static Int32Serializer get_Instance();
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual int Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, int value);
    public sealed virtual Int32Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual Int32Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.Int64Serializer : StructSerializerBase`1<long> {
    private static Int64Serializer __instance;
    private BsonType _representation;
    private RepresentationConverter _converter;
    public static Int64Serializer Instance { get; }
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public Int64Serializer(BsonType representation);
    public Int64Serializer(BsonType representation, RepresentationConverter converter);
    private static Int64Serializer();
    public static Int64Serializer get_Instance();
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual long Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, long value);
    public sealed virtual Int64Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual Int64Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public interface MongoDB.Bson.Serialization.Serializers.INullableSerializer {
    public IBsonSerializer ValueSerializer { get; }
    public abstract virtual IBsonSerializer get_ValueSerializer();
}
public static class MongoDB.Bson.Serialization.Serializers.IOrderedEnumerableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer itemSerializer, string thenByExceptionMessage);
}
public class MongoDB.Bson.Serialization.Serializers.IOrderedEnumerableSerializer`1 : SerializerBase`1<IOrderedEnumerable`1<TItem>> {
    private IBsonSerializer`1<TItem> _itemSerializer;
    private string _thenByExceptionMessage;
    public IOrderedEnumerableSerializer`1(IBsonSerializer`1<TItem> itemSerializer, string thenByExceptionMessage);
    public virtual IOrderedEnumerable`1<TItem> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, IOrderedEnumerable`1<TItem> value);
    public sealed virtual bool TryGetItemSerializationInfo(BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Bson.Serialization.Serializers.IPAddressSerializer : ClassSerializerBase`1<IPAddress> {
    protected virtual IPAddress DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, IPAddress value);
}
public class MongoDB.Bson.Serialization.Serializers.IPEndPointSerializer : ClassSerializerBase`1<IPEndPoint> {
    protected virtual IPEndPoint DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, IPEndPoint value);
}
public class MongoDB.Bson.Serialization.Serializers.KeyValuePairSerializer`2 : StructSerializerBase`1<KeyValuePair`2<TKey, TValue>> {
    private SerializerHelper _helper;
    private Lazy`1<IBsonSerializer`1<TKey>> _lazyKeySerializer;
    private BsonType _representation;
    private Lazy`1<IBsonSerializer`1<TValue>> _lazyValueSerializer;
    public IBsonSerializer`1<TKey> KeySerializer { get; }
    public BsonType Representation { get; }
    public IBsonSerializer`1<TValue> ValueSerializer { get; }
    public KeyValuePairSerializer`2(BsonType representation);
    public KeyValuePairSerializer`2(BsonType representation, IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TValue> valueSerializer);
    public KeyValuePairSerializer`2(BsonType representation, IBsonSerializerRegistry serializerRegistry);
    private KeyValuePairSerializer`2(BsonType representation, Lazy`1<IBsonSerializer`1<TKey>> lazyKeySerializer, Lazy`1<IBsonSerializer`1<TValue>> lazyValueSerializer);
    public IBsonSerializer`1<TKey> get_KeySerializer();
    public sealed virtual BsonType get_Representation();
    public IBsonSerializer`1<TValue> get_ValueSerializer();
    public virtual KeyValuePair`2<TKey, TValue> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, KeyValuePair`2<TKey, TValue> value);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
    private KeyValuePair`2<TKey, TValue> DeserializeArrayRepresentation(BsonDeserializationContext context);
    private KeyValuePair`2<TKey, TValue> DeserializeDocumentRepresentation(BsonDeserializationContext context);
    private void SerializeArrayRepresentation(BsonSerializationContext context, KeyValuePair`2<TKey, TValue> value);
    private void SerializeDocumentRepresentation(BsonSerializationContext context, KeyValuePair`2<TKey, TValue> value);
}
public class MongoDB.Bson.Serialization.Serializers.LazyBsonArraySerializer : BsonValueSerializerBase`1<LazyBsonArray> {
    protected virtual LazyBsonArray DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, LazyBsonArray value);
}
public class MongoDB.Bson.Serialization.Serializers.LazyBsonDocumentSerializer : BsonValueSerializerBase`1<LazyBsonDocument> {
    protected virtual LazyBsonDocument DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, LazyBsonDocument value);
}
public static class MongoDB.Bson.Serialization.Serializers.NullableSerializer : object {
    public static IBsonSerializer Create(IBsonSerializer valueSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.NullableSerializer`1 : SerializerBase`1<Nullable`1<T>> {
    private Lazy`1<IBsonSerializer`1<T>> _lazySerializer;
    public IBsonSerializer`1<T> ValueSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.Serializers.INullableSerializer.ValueSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public NullableSerializer`1(IBsonSerializer`1<T> serializer);
    public NullableSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T> get_ValueSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.Serializers.INullableSerializer.get_ValueSerializer();
    public virtual Nullable`1<T> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, Nullable`1<T> value);
    public NullableSerializer`1<T> WithSerializer(IBsonSerializer`1<T> serializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.ObjectIdSerializer : StructSerializerBase`1<ObjectId> {
    private static ObjectIdSerializer __instance;
    private BsonType _representation;
    public static ObjectIdSerializer Instance { get; }
    public BsonType Representation { get; }
    public ObjectIdSerializer(BsonType representation);
    private static ObjectIdSerializer();
    public static ObjectIdSerializer get_Instance();
    public sealed virtual BsonType get_Representation();
    public virtual ObjectId Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ObjectId value);
    public sealed virtual ObjectIdSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.ObjectSerializer : ClassSerializerBase`1<object> {
    private static Func`2<Type, bool> __allAllowedTypes;
    private static ObjectSerializer __instance;
    private static Func`2<Type, bool> __noAllowedTypes;
    private Func`2<Type, bool> _allowedDeserializationTypes;
    private Func`2<Type, bool> _allowedSerializationTypes;
    private IDiscriminatorConvention _discriminatorConvention;
    private GuidRepresentation _guidRepresentation;
    private GuidSerializer _guidSerializer;
    public static Func`2<Type, bool> AllAllowedTypes { get; }
    public static Func`2<Type, bool> DefaultAllowedTypes { get; }
    public static ObjectSerializer Instance { get; }
    public static Func`2<Type, bool> NoAllowedTypes { get; }
    public Func`2<Type, bool> AllowedDeserializationTypes { get; }
    public Func`2<Type, bool> AllowedSerializationTypes { get; }
    public IDiscriminatorConvention DiscriminatorConvention { get; }
    public GuidRepresentation GuidRepresentation { get; }
    public ObjectSerializer(IDiscriminatorConvention discriminatorConvention);
    public ObjectSerializer(IDiscriminatorConvention discriminatorConvention, GuidRepresentation guidRepresentation);
    public ObjectSerializer(Func`2<Type, bool> allowedTypes);
    public ObjectSerializer(IDiscriminatorConvention discriminatorConvention, Func`2<Type, bool> allowedTypes);
    public ObjectSerializer(IDiscriminatorConvention discriminatorConvention, GuidRepresentation guidRepresentation, Func`2<Type, bool> allowedTypes);
    public ObjectSerializer(IDiscriminatorConvention discriminatorConvention, GuidRepresentation guidRepresentation, Func`2<Type, bool> allowedDeserializationTypes, Func`2<Type, bool> allowedSerializationTypes);
    private static ObjectSerializer();
    public static Func`2<Type, bool> get_AllAllowedTypes();
    public static Func`2<Type, bool> get_DefaultAllowedTypes();
    public static ObjectSerializer get_Instance();
    public static Func`2<Type, bool> get_NoAllowedTypes();
    public Func`2<Type, bool> get_AllowedDeserializationTypes();
    public Func`2<Type, bool> get_AllowedSerializationTypes();
    public IDiscriminatorConvention get_DiscriminatorConvention();
    public GuidRepresentation get_GuidRepresentation();
    public virtual object Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value);
    public ObjectSerializer WithDiscriminatorConvention(IDiscriminatorConvention discriminatorConvention);
    private object DeserializeDiscriminatedValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    private void SerializeDiscriminatedValue(BsonSerializationContext context, BsonSerializationArgs args, object value, Type actualType);
}
internal class MongoDB.Bson.Serialization.Serializers.OrderedEnumerableListWrapper`1 : object {
    private List`1<T> _list;
    private string _thenByExceptionMessage;
    public OrderedEnumerableListWrapper`1(List`1<T> list, string thenByExceptionMessage);
    public sealed virtual IOrderedEnumerable`1<T> CreateOrderedEnumerable(Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class MongoDB.Bson.Serialization.Serializers.PartiallyRawBsonDocumentSerializer : SerializerBase`1<BsonDocument> {
    private string _name;
    private IBsonSerializer _rawSerializer;
    public PartiallyRawBsonDocumentSerializer(string name, IBsonSerializer rawSerializer);
    public virtual BsonDocument Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    private IBsonSerializer ChooseSerializer(string name);
}
public class MongoDB.Bson.Serialization.Serializers.ProjectingDeserializer`2 : SerializerBase`1<TTo> {
    private IBsonSerializer`1<TFrom> _fromSerializer;
    private Func`2<TFrom, TTo> _projector;
    public ProjectingDeserializer`2(IBsonSerializer`1<TFrom> fromSerializer, Func`2<TFrom, TTo> projector);
    public virtual TTo Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
}
public class MongoDB.Bson.Serialization.Serializers.QueueSerializer : EnumerableSerializerBase`1<Queue> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public QueueSerializer(IBsonSerializer itemSerializer);
    public QueueSerializer(IBsonSerializerRegistry serializerRegistry);
    public QueueSerializer WithItemSerializer(IBsonSerializer itemSerializer);
    protected virtual void AddItem(object accumulator, object item);
    protected virtual object CreateAccumulator();
    protected virtual IEnumerable EnumerateItemsInSerializationOrder(Queue value);
    protected virtual Queue FinalizeResult(object accumulator);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.QueueSerializer`1 : EnumerableSerializerBase`2<Queue`1<TItem>, TItem> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public QueueSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    public QueueSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public QueueSerializer`1<TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual void AddItem(object accumulator, TItem item);
    protected virtual object CreateAccumulator();
    protected virtual IEnumerable`1<TItem> EnumerateItemsInSerializationOrder(Queue`1<TItem> value);
    protected virtual Queue`1<TItem> FinalizeResult(object accumulator);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.RawBsonArraySerializer : BsonValueSerializerBase`1<RawBsonArray> {
    protected virtual RawBsonArray DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, RawBsonArray value);
}
public class MongoDB.Bson.Serialization.Serializers.RawBsonDocumentSerializer : BsonValueSerializerBase`1<RawBsonDocument> {
    private static RawBsonDocumentSerializer __instance;
    public static RawBsonDocumentSerializer Instance { get; }
    private static RawBsonDocumentSerializer();
    public static RawBsonDocumentSerializer get_Instance();
    protected virtual RawBsonDocument DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, RawBsonDocument value);
    public sealed virtual bool TryGetMemberSerializationInfo(string memberName, BsonSerializationInfo& serializationInfo);
}
public class MongoDB.Bson.Serialization.Serializers.ReadOnlyCollectionSerializer`1 : EnumerableInterfaceImplementerSerializerBase`2<ReadOnlyCollection`1<TItem>, TItem> {
    public ReadOnlyCollectionSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    public ReadOnlyCollectionSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public ReadOnlyCollectionSerializer`1<TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual object CreateAccumulator();
    protected virtual ReadOnlyCollection`1<TItem> FinalizeResult(object accumulator);
}
public class MongoDB.Bson.Serialization.Serializers.ReadOnlyCollectionSubclassSerializer`2 : EnumerableInterfaceImplementerSerializerBase`2<TValue, TItem> {
    public ReadOnlyCollectionSubclassSerializer`2(IBsonSerializer`1<TItem> itemSerializer);
    public ReadOnlyCollectionSubclassSerializer`2(IBsonSerializerRegistry serializerRegistry);
    protected virtual object CreateAccumulator();
    protected virtual TValue FinalizeResult(object accumulator);
}
public class MongoDB.Bson.Serialization.Serializers.ReadOnlyDictionaryInterfaceImplementerSerializer`3 : DictionarySerializerBase`3<TDictionary, TKey, TValue> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public ReadOnlyDictionaryInterfaceImplementerSerializer`3(DictionaryRepresentation dictionaryRepresentation);
    public ReadOnlyDictionaryInterfaceImplementerSerializer`3(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TValue> valueSerializer);
    public sealed virtual ReadOnlyDictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
    public ReadOnlyDictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation, IBsonSerializer`1<TKey> keySerializer, IBsonSerializer`1<TValue> valueSerializer);
    public ReadOnlyDictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithKeySerializer(IBsonSerializer`1<TKey> keySerializer);
    public ReadOnlyDictionaryInterfaceImplementerSerializer`3<TDictionary, TKey, TValue> WithValueSerializer(IBsonSerializer`1<TValue> valueSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IDictionaryRepresentationConfigurable.WithDictionaryRepresentation(DictionaryRepresentation dictionaryRepresentation);
    protected virtual ICollection`1<KeyValuePair`2<TKey, TValue>> CreateAccumulator();
    protected virtual TDictionary FinalizeAccumulator(ICollection`1<KeyValuePair`2<TKey, TValue>> accumulator);
}
public class MongoDB.Bson.Serialization.Serializers.RegexSerializer : SealedClassSerializerBase`1<Regex> {
    private static RegexSerializer __regularExpressionInstance;
    private BsonType _representation;
    public static RegexSerializer RegularExpressionInstance { get; }
    public BsonType Representation { get; }
    public RegexSerializer(BsonType representation);
    private static RegexSerializer();
    public static RegexSerializer get_RegularExpressionInstance();
    public sealed virtual BsonType get_Representation();
    public virtual Regex Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, Regex value);
    public sealed virtual RegexSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
[CLSCompliantAttribute("False")]
public class MongoDB.Bson.Serialization.Serializers.SByteSerializer : StructSerializerBase`1<sbyte> {
    private BsonType _representation;
    public BsonType Representation { get; }
    public SByteSerializer(BsonType representation);
    public sealed virtual BsonType get_Representation();
    public virtual sbyte Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, sbyte value);
    public sealed virtual SByteSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public abstract class MongoDB.Bson.Serialization.Serializers.SealedClassSerializerBase`1 : SerializerBase`1<TValue> {
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    protected virtual TValue DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
}
public class MongoDB.Bson.Serialization.Serializers.SerializeAsNominalTypeSerializer`2 : SerializerBase`1<TActualType> {
    private Lazy`1<IBsonSerializer`1<TNominalType>> _lazyNominalTypeSerializer;
    public SerializeAsNominalTypeSerializer`2(IBsonSerializer`1<TNominalType> nominalTypeSerializer);
    public SerializeAsNominalTypeSerializer`2(IBsonSerializerRegistry serializerRegistry);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TActualType value);
}
public abstract class MongoDB.Bson.Serialization.Serializers.SerializerBase`1 : object {
    public Type ValueType { get; }
    public sealed virtual Type get_ValueType();
    public virtual TValue Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
    protected Exception CreateCannotBeDeserializedException();
    protected Exception CreateCannotBeSerializedException();
    protected Exception CreateCannotDeserializeFromBsonTypeException(BsonType bsonType);
    protected void EnsureBsonTypeEquals(IBsonReader reader, BsonType bsonType);
    private sealed virtual override object MongoDB.Bson.Serialization.IBsonSerializer.Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    private sealed virtual override void MongoDB.Bson.Serialization.IBsonSerializer.Serialize(BsonSerializationContext context, BsonSerializationArgs args, object value);
}
public class MongoDB.Bson.Serialization.Serializers.SerializerHelper : object {
    private long _allMemberFlags;
    private long _extraMemberFlag;
    private Member[] _members;
    private long _requiredMemberFlags;
    private BsonTrie`1<long> _trie;
    public SerializerHelper(Member[] members);
    public long DeserializeMembers(BsonDeserializationContext context, Action`2<string, long> memberHandler);
    private Member FindFirstMissingRequiredMember(long missingRequiredMemberFlags);
}
public class MongoDB.Bson.Serialization.Serializers.SingleSerializer : StructSerializerBase`1<float> {
    private BsonType _representation;
    private RepresentationConverter _converter;
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public SingleSerializer(BsonType representation);
    public SingleSerializer(BsonType representation, RepresentationConverter converter);
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual float Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, float value);
    public sealed virtual SingleSerializer WithConverter(RepresentationConverter converter);
    public sealed virtual SingleSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.StackSerializer : EnumerableSerializerBase`1<Stack> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public StackSerializer(IBsonSerializer itemSerializer);
    public StackSerializer(IBsonSerializerRegistry serializerRegistry);
    public StackSerializer WithItemSerializer(IBsonSerializer itemSerializer);
    protected virtual void AddItem(object accumulator, object item);
    protected virtual object CreateAccumulator();
    protected virtual IEnumerable EnumerateItemsInSerializationOrder(Stack value);
    protected virtual Stack FinalizeResult(object accumulator);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.StackSerializer`1 : EnumerableSerializerBase`2<Stack`1<TItem>, TItem> {
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public StackSerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    public StackSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public StackSerializer`1<TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    protected virtual void AddItem(object accumulator, TItem item);
    protected virtual object CreateAccumulator();
    protected virtual IEnumerable`1<TItem> EnumerateItemsInSerializationOrder(Stack`1<TItem> value);
    protected virtual Stack`1<TItem> FinalizeResult(object accumulator);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.StringSerializer : SealedClassSerializerBase`1<string> {
    private static StringSerializer __instance;
    private BsonType _representation;
    public static StringSerializer Instance { get; }
    public BsonType Representation { get; }
    public StringSerializer(BsonType representation);
    private static StringSerializer();
    public static StringSerializer get_Instance();
    public sealed virtual BsonType get_Representation();
    protected virtual string DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, string value);
    public sealed virtual StringSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public abstract class MongoDB.Bson.Serialization.Serializers.StructSerializerBase`1 : SerializerBase`1<TValue> {
}
public class MongoDB.Bson.Serialization.Serializers.ThreeDimensionalArraySerializer`1 : SealedClassSerializerBase`1<TItem[0...,0...,0...]> {
    private Lazy`1<IBsonSerializer`1<TItem>> _lazyItemSerializer;
    public IBsonSerializer`1<TItem> ItemSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public ThreeDimensionalArraySerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    public ThreeDimensionalArraySerializer`1(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<TItem> get_ItemSerializer();
    protected virtual TItem[0...,0...,0...] DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TItem[0...,0...,0...] value);
    public ThreeDimensionalArraySerializer`1<TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
public class MongoDB.Bson.Serialization.Serializers.TimeSpanSerializer : StructSerializerBase`1<TimeSpan> {
    private BsonType _representation;
    private TimeSpanUnits _units;
    public BsonType Representation { get; }
    public TimeSpanUnits Units { get; }
    public TimeSpanSerializer(BsonType representation);
    public TimeSpanSerializer(BsonType representation, TimeSpanUnits units);
    public sealed virtual BsonType get_Representation();
    public TimeSpanUnits get_Units();
    public virtual TimeSpan Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TimeSpan value);
    public sealed virtual TimeSpanSerializer WithRepresentation(BsonType representation);
    public TimeSpanSerializer WithRepresentation(BsonType representation, TimeSpanUnits units);
    private TimeSpan FromDouble(double value, TimeSpanUnits units);
    private TimeSpan FromInt32(int value, TimeSpanUnits units);
    private TimeSpan FromInt64(long value, TimeSpanUnits units);
    private long TicksPerUnit(TimeSpanUnits units);
    private double ToDouble(TimeSpan timeSpan, TimeSpanUnits units);
    private int ToInt32(TimeSpan timeSpan, TimeSpanUnits units);
    private long ToInt64(TimeSpan timeSpan, TimeSpanUnits units);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public static class MongoDB.Bson.Serialization.Serializers.TupleSerializer : object {
    public static IBsonSerializer Create(IEnumerable`1<IBsonSerializer> itemSerializers);
    public static bool TryParseItemName(string itemName, Int32& itemNumber);
    [CompilerGeneratedAttribute]
internal static Type <Create>g__CreateTupleSerializerType|0_0(IBsonSerializer[] itemSerializersArray);
    [CompilerGeneratedAttribute]
internal static Type <Create>g__CreateTupleSerializerTypeDefinition|0_1(int itemCount);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`1 : SealedClassSerializerBase`1<Tuple`1<T1>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public TupleSerializer`1(IBsonSerializer`1<T1> item1Serializer);
    public TupleSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    protected virtual Tuple`1<T1> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`1<T1> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`2 : SealedClassSerializerBase`1<Tuple`2<T1, T2>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public TupleSerializer`2(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer);
    public TupleSerializer`2(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    protected virtual Tuple`2<T1, T2> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`2<T1, T2> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`3 : SealedClassSerializerBase`1<Tuple`3<T1, T2, T3>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public TupleSerializer`3(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer);
    public TupleSerializer`3(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    protected virtual Tuple`3<T1, T2, T3> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`3<T1, T2, T3> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`4 : SealedClassSerializerBase`1<Tuple`4<T1, T2, T3, T4>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public TupleSerializer`4(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer);
    public TupleSerializer`4(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    protected virtual Tuple`4<T1, T2, T3, T4> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`4<T1, T2, T3, T4> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`5 : SealedClassSerializerBase`1<Tuple`5<T1, T2, T3, T4, T5>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public TupleSerializer`5(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer);
    public TupleSerializer`5(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    protected virtual Tuple`5<T1, T2, T3, T4, T5> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`5<T1, T2, T3, T4, T5> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`6 : SealedClassSerializerBase`1<Tuple`6<T1, T2, T3, T4, T5, T6>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    private Lazy`1<IBsonSerializer`1<T6>> _lazyItem6Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public IBsonSerializer`1<T6> Item6Serializer { get; }
    public TupleSerializer`6(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer, IBsonSerializer`1<T6> item6Serializer);
    public TupleSerializer`6(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public IBsonSerializer`1<T6> get_Item6Serializer();
    protected virtual Tuple`6<T1, T2, T3, T4, T5, T6> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`6<T1, T2, T3, T4, T5, T6> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`7 : SealedClassSerializerBase`1<Tuple`7<T1, T2, T3, T4, T5, T6, T7>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    private Lazy`1<IBsonSerializer`1<T6>> _lazyItem6Serializer;
    private Lazy`1<IBsonSerializer`1<T7>> _lazyItem7Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public IBsonSerializer`1<T6> Item6Serializer { get; }
    public IBsonSerializer`1<T7> Item7Serializer { get; }
    public TupleSerializer`7(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer, IBsonSerializer`1<T6> item6Serializer, IBsonSerializer`1<T7> item7Serializer);
    public TupleSerializer`7(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public IBsonSerializer`1<T6> get_Item6Serializer();
    public IBsonSerializer`1<T7> get_Item7Serializer();
    protected virtual Tuple`7<T1, T2, T3, T4, T5, T6, T7> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`7<T1, T2, T3, T4, T5, T6, T7> value);
}
public class MongoDB.Bson.Serialization.Serializers.TupleSerializer`8 : SealedClassSerializerBase`1<Tuple`8<T1, T2, T3, T4, T5, T6, T7, TRest>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    private Lazy`1<IBsonSerializer`1<T6>> _lazyItem6Serializer;
    private Lazy`1<IBsonSerializer`1<T7>> _lazyItem7Serializer;
    private Lazy`1<IBsonSerializer`1<TRest>> _lazyRestSerializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public IBsonSerializer`1<T6> Item6Serializer { get; }
    public IBsonSerializer`1<T7> Item7Serializer { get; }
    public IBsonSerializer`1<TRest> RestSerializer { get; }
    public TupleSerializer`8(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer, IBsonSerializer`1<T6> item6Serializer, IBsonSerializer`1<T7> item7Serializer, IBsonSerializer`1<TRest> restSerializer);
    public TupleSerializer`8(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public IBsonSerializer`1<T6> get_Item6Serializer();
    public IBsonSerializer`1<T7> get_Item7Serializer();
    public IBsonSerializer`1<TRest> get_RestSerializer();
    protected virtual Tuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Tuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> value);
}
public class MongoDB.Bson.Serialization.Serializers.TwoDimensionalArraySerializer`1 : SealedClassSerializerBase`1<TItem[0...,0...]> {
    private Lazy`1<IBsonSerializer`1<TItem>> _lazyItemSerializer;
    public IBsonSerializer`1<TItem> ItemSerializer { get; }
    private IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.ChildSerializer { get; }
    public TwoDimensionalArraySerializer`1(IBsonSerializer`1<TItem> itemSerializer);
    public TwoDimensionalArraySerializer`1(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<TItem> get_ItemSerializer();
    protected virtual TItem[0...,0...] DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, TItem[0...,0...] value);
    public TwoDimensionalArraySerializer`1<TItem> WithItemSerializer(IBsonSerializer`1<TItem> itemSerializer);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.get_ChildSerializer();
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IChildSerializerConfigurable.WithChildSerializer(IBsonSerializer childSerializer);
}
[CLSCompliantAttribute("False")]
public class MongoDB.Bson.Serialization.Serializers.UInt16Serializer : StructSerializerBase`1<ushort> {
    private BsonType _representation;
    private RepresentationConverter _converter;
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public UInt16Serializer(BsonType representation);
    public UInt16Serializer(BsonType representation, RepresentationConverter converter);
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual ushort Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ushort value);
    public sealed virtual UInt16Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual UInt16Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
[CLSCompliantAttribute("False")]
public class MongoDB.Bson.Serialization.Serializers.UInt32Serializer : StructSerializerBase`1<UInt32> {
    private BsonType _representation;
    private RepresentationConverter _converter;
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public UInt32Serializer(BsonType representation);
    public UInt32Serializer(BsonType representation, RepresentationConverter converter);
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual UInt32 Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, UInt32 value);
    public sealed virtual UInt32Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual UInt32Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
[CLSCompliantAttribute("False")]
public class MongoDB.Bson.Serialization.Serializers.UInt64Serializer : StructSerializerBase`1<ulong> {
    private BsonType _representation;
    private RepresentationConverter _converter;
    public RepresentationConverter Converter { get; }
    public BsonType Representation { get; }
    public UInt64Serializer(BsonType representation);
    public UInt64Serializer(BsonType representation, RepresentationConverter converter);
    public sealed virtual RepresentationConverter get_Converter();
    public sealed virtual BsonType get_Representation();
    public virtual ulong Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ulong value);
    public sealed virtual UInt64Serializer WithConverter(RepresentationConverter converter);
    public sealed virtual UInt64Serializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConverterConfigurable.WithConverter(RepresentationConverter converter);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
public class MongoDB.Bson.Serialization.Serializers.UndiscriminatedActualTypeSerializer`1 : SerializerBase`1<TValue> {
    private static UndiscriminatedActualTypeSerializer`1<TValue> __instance;
    public static UndiscriminatedActualTypeSerializer`1<TValue> Instance { get; }
    private static UndiscriminatedActualTypeSerializer`1();
    public static UndiscriminatedActualTypeSerializer`1<TValue> get_Instance();
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, TValue value);
}
public class MongoDB.Bson.Serialization.Serializers.UriSerializer : ClassSerializerBase`1<Uri> {
    protected virtual Uri DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Uri value);
}
public static class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer : object {
    public static IBsonSerializer Create(IEnumerable`1<IBsonSerializer> itemSerializers);
    [CompilerGeneratedAttribute]
internal static Type <Create>g__CreateValueTupleSerializerType|0_0(IBsonSerializer[] itemSerializersArray);
    [CompilerGeneratedAttribute]
internal static Type <Create>g__CreateValueTupleSerializerTypeDefinition|0_1(int itemCount);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`1 : StructSerializerBase`1<ValueTuple`1<T1>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public ValueTupleSerializer`1(IBsonSerializer`1<T1> item1Serializer);
    public ValueTupleSerializer`1(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public virtual ValueTuple`1<T1> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`1<T1> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`2 : StructSerializerBase`1<ValueTuple`2<T1, T2>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public ValueTupleSerializer`2(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer);
    public ValueTupleSerializer`2(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public virtual ValueTuple`2<T1, T2> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`2<T1, T2> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`3 : StructSerializerBase`1<ValueTuple`3<T1, T2, T3>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public ValueTupleSerializer`3(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer);
    public ValueTupleSerializer`3(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public virtual ValueTuple`3<T1, T2, T3> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`3<T1, T2, T3> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`4 : StructSerializerBase`1<ValueTuple`4<T1, T2, T3, T4>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public ValueTupleSerializer`4(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer);
    public ValueTupleSerializer`4(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public virtual ValueTuple`4<T1, T2, T3, T4> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`4<T1, T2, T3, T4> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`5 : StructSerializerBase`1<ValueTuple`5<T1, T2, T3, T4, T5>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public ValueTupleSerializer`5(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer);
    public ValueTupleSerializer`5(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public virtual ValueTuple`5<T1, T2, T3, T4, T5> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`5<T1, T2, T3, T4, T5> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`6 : StructSerializerBase`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    private Lazy`1<IBsonSerializer`1<T6>> _lazyItem6Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public IBsonSerializer`1<T6> Item6Serializer { get; }
    public ValueTupleSerializer`6(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer, IBsonSerializer`1<T6> item6Serializer);
    public ValueTupleSerializer`6(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public IBsonSerializer`1<T6> get_Item6Serializer();
    public virtual ValueTuple`6<T1, T2, T3, T4, T5, T6> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`6<T1, T2, T3, T4, T5, T6> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`7 : StructSerializerBase`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    private Lazy`1<IBsonSerializer`1<T6>> _lazyItem6Serializer;
    private Lazy`1<IBsonSerializer`1<T7>> _lazyItem7Serializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public IBsonSerializer`1<T6> Item6Serializer { get; }
    public IBsonSerializer`1<T7> Item7Serializer { get; }
    public ValueTupleSerializer`7(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer, IBsonSerializer`1<T6> item6Serializer, IBsonSerializer`1<T7> item7Serializer);
    public ValueTupleSerializer`7(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public IBsonSerializer`1<T6> get_Item6Serializer();
    public IBsonSerializer`1<T7> get_Item7Serializer();
    public virtual ValueTuple`7<T1, T2, T3, T4, T5, T6, T7> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`7<T1, T2, T3, T4, T5, T6, T7> value);
}
public class MongoDB.Bson.Serialization.Serializers.ValueTupleSerializer`8 : StructSerializerBase`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, TRest>> {
    private Lazy`1<IBsonSerializer`1<T1>> _lazyItem1Serializer;
    private Lazy`1<IBsonSerializer`1<T2>> _lazyItem2Serializer;
    private Lazy`1<IBsonSerializer`1<T3>> _lazyItem3Serializer;
    private Lazy`1<IBsonSerializer`1<T4>> _lazyItem4Serializer;
    private Lazy`1<IBsonSerializer`1<T5>> _lazyItem5Serializer;
    private Lazy`1<IBsonSerializer`1<T6>> _lazyItem6Serializer;
    private Lazy`1<IBsonSerializer`1<T7>> _lazyItem7Serializer;
    private Lazy`1<IBsonSerializer`1<TRest>> _lazyRestSerializer;
    public IBsonSerializer`1<T1> Item1Serializer { get; }
    public IBsonSerializer`1<T2> Item2Serializer { get; }
    public IBsonSerializer`1<T3> Item3Serializer { get; }
    public IBsonSerializer`1<T4> Item4Serializer { get; }
    public IBsonSerializer`1<T5> Item5Serializer { get; }
    public IBsonSerializer`1<T6> Item6Serializer { get; }
    public IBsonSerializer`1<T7> Item7Serializer { get; }
    public IBsonSerializer`1<TRest> RestSerializer { get; }
    public ValueTupleSerializer`8(IBsonSerializer`1<T1> item1Serializer, IBsonSerializer`1<T2> item2Serializer, IBsonSerializer`1<T3> item3Serializer, IBsonSerializer`1<T4> item4Serializer, IBsonSerializer`1<T5> item5Serializer, IBsonSerializer`1<T6> item6Serializer, IBsonSerializer`1<T7> item7Serializer, IBsonSerializer`1<TRest> restSerializer);
    public ValueTupleSerializer`8(IBsonSerializerRegistry serializerRegistry);
    public IBsonSerializer`1<T1> get_Item1Serializer();
    public IBsonSerializer`1<T2> get_Item2Serializer();
    public IBsonSerializer`1<T3> get_Item3Serializer();
    public IBsonSerializer`1<T4> get_Item4Serializer();
    public IBsonSerializer`1<T5> get_Item5Serializer();
    public IBsonSerializer`1<T6> get_Item6Serializer();
    public IBsonSerializer`1<T7> get_Item7Serializer();
    public IBsonSerializer`1<TRest> get_RestSerializer();
    public virtual ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> Deserialize(BsonDeserializationContext context, BsonDeserializationArgs args);
    public sealed virtual IBsonSerializer GetItemSerializer(int itemNumber);
    public virtual void Serialize(BsonSerializationContext context, BsonSerializationArgs args, ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, TRest> value);
}
public class MongoDB.Bson.Serialization.Serializers.VersionSerializer : SealedClassSerializerBase`1<Version> {
    private SerializerHelper _helper;
    private Int32Serializer _int32Serializer;
    private BsonType _representation;
    public BsonType Representation { get; }
    public VersionSerializer(BsonType representation);
    public sealed virtual BsonType get_Representation();
    protected virtual Version DeserializeValue(BsonDeserializationContext context, BsonDeserializationArgs args);
    protected virtual void SerializeValue(BsonSerializationContext context, BsonSerializationArgs args, Version value);
    public sealed virtual VersionSerializer WithRepresentation(BsonType representation);
    private sealed virtual override IBsonSerializer MongoDB.Bson.Serialization.IRepresentationConfigurable.WithRepresentation(BsonType representation);
}
[ExtensionAttribute]
internal static class MongoDB.Bson.Serialization.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
}
public class MongoDB.Bson.Serialization.TypeMappingSerializationProvider : BsonSerializationProviderBase {
    private ConcurrentDictionary`2<Type, Type> _serializerTypes;
    public virtual IBsonSerializer GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry);
    public void RegisterMapping(Type type, Type serializerType);
}
public static class MongoDB.Bson.Serialization.TypeNameDiscriminator : object {
    private static HashSet`1<Assembly> __wellKnownAssemblies;
    private static TypeNameDiscriminator();
    public static Type GetActualType(string typeName);
    public static string GetDiscriminator(Type type);
    private static bool TryParseGenericTypeName(string typeName, String& genericTypeDefinitionName, String[]& typeArgumentNames);
}
internal static class MongoDB.Bson.TargetFramework : object {
    public static string Moniker { get; }
    public static string get_Moniker();
}
public class MongoDB.Bson.TruncationException : BsonException {
    public TruncationException(string message);
    public TruncationException(string message, Exception innerException);
    public TruncationException(SerializationInfo info, StreamingContext context);
}
internal class MongoDB.Bson.UInt128 : ValueType {
    private ulong _high;
    private ulong _low;
    public static UInt128 Zero { get; }
    public ulong High { get; }
    public ulong Low { get; }
    public UInt128(ulong low);
    public UInt128(ulong high, ulong low);
    public static UInt128 get_Zero();
    public static UInt128 Add(UInt128 x, UInt128 y);
    public static int Compare(UInt128 x, UInt128 y);
    public static UInt128 Divide(UInt128 x, UInt32 divisor, UInt32& remainder);
    public static bool Equals(UInt128 x, UInt128 y);
    public static UInt128 Multiply(UInt128 x, UInt32 y);
    public static UInt128 Multiply(ulong x, ulong y);
    public static UInt128 Parse(string s);
    public static bool TryParse(string s, UInt128& value);
    public ulong get_High();
    public ulong get_Low();
    public sealed virtual int CompareTo(UInt128 other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UInt128 other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class MongoDB.Shared.Hasher : object {
    private int _hashCode;
    public Hasher(int seed);
    public static int GetHashCode(T obj);
    public virtual int GetHashCode();
    public Hasher Hash(bool obj);
    public Hasher Hash(int obj);
    public Hasher Hash(long obj);
    public Hasher Hash(Nullable`1<T> obj);
    public Hasher Hash(object obj);
    public Hasher HashElements(IEnumerable`1<T> sequence);
    public Hasher HashStructElements(IEnumerable`1<T> sequence);
}
internal static class MongoDB.Shared.HexUtils : object {
    public static bool IsValidHexDigit(char c);
    public static bool IsValidHexString(string s);
    public static int ParseInt32(string value);
}
