public class MongoDB.Libmongocrypt.Binary : object {
    private static Byte[] __empty;
    private BinarySafeHandle _handle;
    public IntPtr Data { get; }
    public UInt32 Length { get; }
    internal BinarySafeHandle Handle { get; }
    internal Binary(BinarySafeHandle handle);
    private static Binary();
    public IntPtr get_Data();
    public UInt32 get_Length();
    internal BinarySafeHandle get_Handle();
    public Byte[] ToArray();
    public void WriteBytes(Byte[] bytes);
    public virtual string ToString();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class MongoDB.Libmongocrypt.BinarySafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    private BinarySafeHandle(IntPtr ptr);
    public static BinarySafeHandle FromIntPtr(IntPtr ptr);
    public virtual bool get_IsInvalid();
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
internal abstract class MongoDB.Libmongocrypt.CheckableSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    public abstract virtual void Check(Status status, bool success);
    [ReliabilityContractAttribute("3", "1")]
protected abstract virtual bool ReleaseHandle();
}
internal static class MongoDB.Libmongocrypt.CipherCallbacks : object {
    public static bool EncryptCbc(IntPtr ctx, IntPtr key, IntPtr iv, IntPtr in, IntPtr out, UInt32& bytes_written, IntPtr statusPtr);
    public static bool DecryptCbc(IntPtr ctx, IntPtr key, IntPtr iv, IntPtr in, IntPtr out, UInt32& bytes_written, IntPtr statusPtr);
    public static bool EncryptEcb(IntPtr ctx, IntPtr key, IntPtr iv, IntPtr in, IntPtr out, UInt32& bytes_written, IntPtr statusPtr);
    public static Byte[] AesCrypt(Byte[] keyBytes, Byte[] ivBytes, Byte[] inputBytes, CryptMode cryptMode, CipherMode cipherMode);
    [CompilerGeneratedAttribute]
internal static ICryptoTransform <AesCrypt>g__CreateCryptoTransform|3_0(RijndaelManaged rijndaelManaged, <>c__DisplayClass3_0& );
}
internal class MongoDB.Libmongocrypt.ContextSafeHandle : CheckableSafeHandle {
    public virtual void Check(Status status, bool success);
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
public class MongoDB.Libmongocrypt.CryptClient : object {
    private MongoCryptSafeHandle _handle;
    private Status _status;
    public string CryptSharedLibraryVersion { get; }
    internal CryptClient(MongoCryptSafeHandle handle, Status status);
    public string get_CryptSharedLibraryVersion();
    public CryptContext StartCreateDataKeyContext(KmsKeyId keyId);
    public CryptContext StartEncryptionContext(string db, Byte[] command);
    public CryptContext StartExplicitEncryptionContext(Byte[] keyId, Byte[] keyAltName, string queryType, Nullable`1<long> contentionFactor, string encryptionAlgorithm, Byte[] message, Byte[] rangeOptions, bool isExpressionMode);
    public CryptContext StartDecryptionContext(Byte[] buffer);
    public CryptContext StartExplicitDecryptionContext(Byte[] buffer);
    public CryptContext StartRewrapMultipleDataKeysContext(KmsKeyId kmsKey, Byte[] filter);
    private sealed virtual override void MongoDB.Libmongocrypt.IStatus.Check(Status status);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void Check(bool success);
}
public class MongoDB.Libmongocrypt.CryptClientFactory : object {
    private static CryptoCallback __cryptoAes256EcbEncryptCallback;
    private static CryptoCallback __cryptoAes256CbcDecryptCallback;
    private static CryptoCallback __cryptoAes256CbcEncryptCallback;
    private static HashCallback __cryptoHashCallback;
    private static CryptoHmacCallback __cryptoHmacSha256Callback;
    private static CryptoHmacCallback __cryptoHmacSha512Callback;
    private static RandomCallback __randomCallback;
    private static CryptoHmacCallback __signRsaesPkcs1HmacCallback;
    private static CryptClientFactory();
    public static CryptClient Create(CryptOptions options);
}
public class MongoDB.Libmongocrypt.CryptContext : object {
    private ContextSafeHandle _handle;
    private Status _status;
    public StateCode State { get; }
    public bool IsDone { get; }
    internal CryptContext(ContextSafeHandle handle);
    public StateCode get_State();
    public bool get_IsDone();
    public Binary GetOperation();
    public void Feed(Byte[] buffer);
    public void MarkDone();
    public Binary FinalizeForEncryption();
    public KmsRequestCollection GetKmsMessageRequests();
    public void SetCredentials(Byte[] credentials);
    private sealed virtual override void MongoDB.Libmongocrypt.IStatus.Check(Status status);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void MarkKmsDone();
    private void Check(bool success);
}
public class MongoDB.Libmongocrypt.CryptException : Exception {
    private UInt32 _code;
    private StatusType _statusType;
    internal CryptException(StatusType statusType, UInt32 code, string message);
}
internal enum MongoDB.Libmongocrypt.CryptMode : Enum {
    public int value__;
    public static CryptMode Encrypt;
    public static CryptMode Decrypt;
}
public class MongoDB.Libmongocrypt.CryptOptions : object {
    [CompilerGeneratedAttribute]
private bool <BypassQueryAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CryptSharedLibPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CryptSharedLibSearchPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncryptedFieldsMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCryptSharedLibRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<KmsCredentials> <KmsCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Schema>k__BackingField;
    public bool BypassQueryAnalysis { get; }
    public string CryptSharedLibPath { get; }
    public string CryptSharedLibSearchPath { get; }
    public Byte[] EncryptedFieldsMap { get; }
    public bool IsCryptSharedLibRequired { get; }
    public IReadOnlyList`1<KmsCredentials> KmsCredentials { get; }
    public Byte[] Schema { get; }
    public CryptOptions(IEnumerable`1<KmsCredentials> credentials);
    public CryptOptions(IEnumerable`1<KmsCredentials> credentials, Byte[] schema);
    public CryptOptions(IEnumerable`1<KmsCredentials> credentials, Byte[] encryptedFieldsMap, Byte[] schema, bool bypassQueryAnalysis, string cryptSharedLibPath, string cryptSharedLibSearchPath, bool isCryptSharedLibRequired);
    [CompilerGeneratedAttribute]
public bool get_BypassQueryAnalysis();
    [CompilerGeneratedAttribute]
public string get_CryptSharedLibPath();
    [CompilerGeneratedAttribute]
public string get_CryptSharedLibSearchPath();
    [CompilerGeneratedAttribute]
public Byte[] get_EncryptedFieldsMap();
    [CompilerGeneratedAttribute]
public bool get_IsCryptSharedLibRequired();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<KmsCredentials> get_KmsCredentials();
    [CompilerGeneratedAttribute]
public Byte[] get_Schema();
}
internal static class MongoDB.Libmongocrypt.HashCallback : object {
    public static bool Hash(IntPtr ctx, IntPtr in, IntPtr out, IntPtr statusPtr);
    public static Byte[] CalculateHash(Byte[] inputBytes);
}
internal static class MongoDB.Libmongocrypt.HmacShaCallbacks : object {
    public static bool HmacSha512(IntPtr ctx, IntPtr key, IntPtr in, IntPtr out, IntPtr statusPtr);
    public static bool HmacSha256(IntPtr ctx, IntPtr key, IntPtr in, IntPtr out, IntPtr statusPtr);
    public static Byte[] CalculateHash(Byte[] keyBytes, Byte[] inputBytes, int bitness);
    private static HMAC GetHmacByBitness(int bitness, Byte[] keyBytes);
    private static bool Hmac(IntPtr key, IntPtr in, IntPtr out, IntPtr statusPtr, int bitness);
}
internal interface MongoDB.Libmongocrypt.IStatus {
    public abstract virtual void Check(Status status);
}
public class MongoDB.Libmongocrypt.KmsCredentials : object {
    private Byte[] _credentialsBytes;
    public KmsCredentials(Byte[] credentialsBytes);
    internal void SetCredentials(MongoCryptSafeHandle handle, Status status);
}
public class MongoDB.Libmongocrypt.KmsKeyId : object {
    private IReadOnlyList`1<Byte[]> _alternateKeyNameBytes;
    private Byte[] _dataKeyOptionsBytes;
    private Byte[] _keyMaterialBytes;
    public IReadOnlyList`1<Byte[]> AlternateKeyNameBytes { get; }
    public Byte[] DataKeyOptionsBytes { get; }
    public Byte[] KeyMaterialBytes { get; }
    public KmsKeyId(Byte[] dataKeyOptionsBytes, IEnumerable`1<Byte[]> alternateKeyNameBytes, Byte[] keyMaterialBytes);
    public IReadOnlyList`1<Byte[]> get_AlternateKeyNameBytes();
    public Byte[] get_DataKeyOptionsBytes();
    public Byte[] get_KeyMaterialBytes();
    internal void SetCredentials(ContextSafeHandle context, Status status);
    private void SetAlternateKeyNamesIfConfigured(ContextSafeHandle context, Status status);
    private void SetKeyMaterialIfConfigured(ContextSafeHandle context, Status status);
}
public class MongoDB.Libmongocrypt.KmsRequest : object {
    private Status _status;
    private IntPtr _id;
    public UInt32 BytesNeeded { get; }
    public string Endpoint { get; }
    public string KmsProvider { get; }
    public Binary Message { get; }
    internal KmsRequest(IntPtr id);
    public UInt32 get_BytesNeeded();
    public string get_Endpoint();
    public string get_KmsProvider();
    public Binary get_Message();
    public void Feed(Byte[] buffer);
    private sealed virtual override void MongoDB.Libmongocrypt.IStatus.Check(Status status);
    private void Check(bool success);
}
public class MongoDB.Libmongocrypt.KmsRequestCollection : object {
    private List`1<KmsRequest> _requests;
    private CryptContext _parent;
    private int System.Collections.Generic.IReadOnlyCollection<MongoDB.Libmongocrypt.KmsRequest>.Count { get; }
    internal KmsRequestCollection(List`1<KmsRequest> requests, CryptContext parent);
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<MongoDB.Libmongocrypt.KmsRequest>.get_Count();
    private sealed virtual override IEnumerator`1<KmsRequest> System.Collections.Generic.IEnumerable<MongoDB.Libmongocrypt.KmsRequest>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void MarkDone();
}
public class MongoDB.Libmongocrypt.Library : object {
    private static Lazy`1<LibraryLoader> __loader;
    private static Lazy`1<mongocrypt_version> _mongocrypt_version;
    private static Lazy`1<mongocrypt_new> _mongocrypt_new;
    private static Lazy`1<mongocrypt_setopt_log_handler> _mongocrypt_setopt_log_handler;
    private static Lazy`1<mongocrypt_setopt_kms_providers> _mongocrypt_setopt_kms_providers;
    private static Lazy`1<mongocrypt_ctx_setopt_key_encryption_key> _mongocrypt_ctx_setopt_key_encryption_key;
    private static Lazy`1<mongocrypt_setopt_aes_256_ecb> _mongocrypt_setopt_aes_256_ecb;
    private static Lazy`1<mongocrypt_setopt_bypass_query_analysis> _mongocrypt_setopt_bypass_query_analysis;
    private static Lazy`1<mongocrypt_setopt_crypto_hooks> _mongocrypt_setopt_crypto_hooks;
    private static Lazy`1<mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5> _mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5;
    private static Lazy`1<mongocrypt_setopt_encrypted_field_config_map> _mongocrypt_setopt_encrypted_field_config_map;
    private static Lazy`1<mongocrypt_setopt_schema_map> _mongocrypt_setopt_schema_map;
    private static Lazy`1<mongocrypt_setopt_append_crypt_shared_lib_search_path> _mongocrypt_setopt_append_crypt_shared_lib_search_path;
    private static Lazy`1<mongocrypt_setopt_set_crypt_shared_lib_path_override> _mongocrypt_setopt_set_crypt_shared_lib_path_override;
    private static Lazy`1<mongocrypt_setopt_use_need_kms_credentials_state> _mongocrypt_setopt_use_need_kms_credentials_state;
    private static Lazy`1<mongocrypt_crypt_shared_lib_version_string> _mongocrypt_crypt_shared_lib_version_string;
    private static Lazy`1<mongocrypt_crypt_shared_lib_version> _mongocrypt_crypt_shared_lib_version;
    private static Lazy`1<mongocrypt_init> _mongocrypt_init;
    private static Lazy`1<mongocrypt_destroy> _mongocrypt_destroy;
    private static Lazy`1<mongocrypt_status> _mongocrypt_status;
    private static Lazy`1<mongocrypt_status_new> _mongocrypt_status_new;
    private static Lazy`1<mongocrypt_status_destroy> _mongocrypt_status_destroy;
    private static Lazy`1<mongocrypt_status_type> _mongocrypt_status_type;
    private static Lazy`1<mongocrypt_status_code> _mongocrypt_status_code;
    private static Lazy`1<mongocrypt_status_message> _mongocrypt_status_message;
    private static Lazy`1<mongocrypt_status_ok> _mongocrypt_status_ok;
    private static Lazy`1<mongocrypt_status_set> _mongocrypt_status_set;
    private static Lazy`1<mongocrypt_binary_new> _mongocrypt_binary_new;
    private static Lazy`1<mongocrypt_binary_destroy> _mongocrypt_binary_destroy;
    private static Lazy`1<mongocrypt_binary_new_from_data> _mongocrypt_binary_new_from_data;
    private static Lazy`1<mongocrypt_binary_data> _mongocrypt_binary_data;
    private static Lazy`1<mongocrypt_binary_len> _mongocrypt_binary_len;
    private static Lazy`1<mongocrypt_ctx_new> _mongocrypt_ctx_new;
    private static Lazy`1<mongocrypt_ctx_setopt_key_material> _mongocrypt_ctx_setopt_key_material;
    private static Lazy`1<mongocrypt_ctx_setopt_masterkey_aws> _mongocrypt_ctx_setopt_masterkey_aws;
    private static Lazy`1<mongocrypt_ctx_setopt_masterkey_aws_endpoint> _mongocrypt_ctx_setopt_masterkey_aws_endpoint;
    private static Lazy`1<mongocrypt_ctx_status> _mongocrypt_ctx_status;
    private static Lazy`1<mongocrypt_ctx_encrypt_init> _mongocrypt_ctx_encrypt_init;
    private static Lazy`1<mongocrypt_ctx_decrypt_init> _mongocrypt_ctx_decrypt_init;
    private static Lazy`1<mongocrypt_ctx_explicit_encrypt_init> _mongocrypt_ctx_explicit_encrypt_init;
    private static Lazy`1<mongocrypt_ctx_explicit_encrypt_expression_init> _mongocrypt_ctx_explicit_encrypt_expression_init;
    private static Lazy`1<mongocrypt_ctx_explicit_decrypt_init> _mongocrypt_ctx_explicit_decrypt_init;
    private static Lazy`1<mongocrypt_ctx_datakey_init> _mongocrypt_ctx_datakey_init;
    private static Lazy`1<mongocrypt_ctx_provide_kms_providers> _mongocrypt_ctx_provide_kms_providers;
    private static Lazy`1<mongocrypt_ctx_setopt_masterkey_local> _mongocrypt_ctx_setopt_masterkey_local;
    private static Lazy`1<mongocrypt_ctx_setopt_key_id> _mongocrypt_ctx_setopt_key_id;
    private static Lazy`1<mongocrypt_ctx_setopt_key_alt_name> _mongocrypt_ctx_setopt_key_alt_name;
    private static Lazy`1<mongocrypt_ctx_setopt_algorithm> _mongocrypt_ctx_setopt_algorithm;
    private static Lazy`1<mongocrypt_ctx_setopt_algorithm_range> _mongocrypt_ctx_setopt_algorithm_range;
    private static Lazy`1<mongocrypt_ctx_setopt_contention_factor> _mongocrypt_ctx_setopt_contention_factor;
    private static Lazy`1<mongocrypt_ctx_setopt_query_type> _mongocrypt_ctx_setopt_query_type;
    private static Lazy`1<mongocrypt_ctx_state> _mongocrypt_ctx_state;
    private static Lazy`1<mongocrypt_ctx_mongo_op> _mongocrypt_ctx_mongo_op;
    private static Lazy`1<mongocrypt_ctx_mongo_feed> _mongocrypt_ctx_mongo_feed;
    private static Lazy`1<mongocrypt_ctx_mongo_done> _mongocrypt_ctx_mongo_done;
    private static Lazy`1<mongocrypt_ctx_next_kms_ctx> _mongocrypt_ctx_next_kms_ctx;
    private static Lazy`1<mongocrypt_ctx_rewrap_many_datakey_init> _mongocrypt_ctx_rewrap_many_datakey_init;
    private static Lazy`1<mongocrypt_kms_ctx_endpoint> _mongocrypt_kms_ctx_endpoint;
    private static Lazy`1<mongocrypt_kms_ctx_message> _mongocrypt_kms_ctx_message;
    private static Lazy`1<mongocrypt_kms_ctx_bytes_needed> _mongocrypt_kms_ctx_bytes_needed;
    private static Lazy`1<mongocrypt_kms_ctx_feed> _mongocrypt_kms_ctx_feed;
    private static Lazy`1<mongocrypt_kms_ctx_status> _mongocrypt_kms_ctx_status;
    private static Lazy`1<mongocrypt_ctx_kms_done> _mongocrypt_ctx_kms_done;
    private static Lazy`1<mongocrypt_ctx_finalize> _mongocrypt_ctx_finalize;
    private static Lazy`1<mongocrypt_ctx_destroy> _mongocrypt_ctx_destroy;
    private static Lazy`1<mongocrypt_kms_ctx_get_kms_provider> _mongocrypt_kms_ctx_get_kms_provider;
    public static string Version { get; }
    internal static mongocrypt_version mongocrypt_version { get; }
    internal static mongocrypt_new mongocrypt_new { get; }
    internal static mongocrypt_setopt_log_handler mongocrypt_setopt_log_handler { get; }
    internal static mongocrypt_setopt_kms_providers mongocrypt_setopt_kms_providers { get; }
    internal static mongocrypt_ctx_setopt_key_encryption_key mongocrypt_ctx_setopt_key_encryption_key { get; }
    internal static mongocrypt_setopt_aes_256_ecb mongocrypt_setopt_aes_256_ecb { get; }
    internal static mongocrypt_setopt_bypass_query_analysis mongocrypt_setopt_bypass_query_analysis { get; }
    internal static mongocrypt_setopt_crypto_hooks mongocrypt_setopt_crypto_hooks { get; }
    internal static mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5 mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5 { get; }
    internal static mongocrypt_setopt_encrypted_field_config_map mongocrypt_setopt_encrypted_field_config_map { get; }
    internal static mongocrypt_setopt_schema_map mongocrypt_setopt_schema_map { get; }
    internal static mongocrypt_setopt_append_crypt_shared_lib_search_path mongocrypt_setopt_append_crypt_shared_lib_search_path { get; }
    internal static mongocrypt_setopt_set_crypt_shared_lib_path_override mongocrypt_setopt_set_crypt_shared_lib_path_override { get; }
    internal static mongocrypt_setopt_use_need_kms_credentials_state mongocrypt_setopt_use_need_kms_credentials_state { get; }
    internal static mongocrypt_crypt_shared_lib_version_string mongocrypt_crypt_shared_lib_version_string { get; }
    internal static mongocrypt_crypt_shared_lib_version mongocrypt_crypt_shared_lib_version { get; }
    internal static mongocrypt_init mongocrypt_init { get; }
    internal static mongocrypt_destroy mongocrypt_destroy { get; }
    internal static mongocrypt_status mongocrypt_status { get; }
    internal static mongocrypt_status_new mongocrypt_status_new { get; }
    internal static mongocrypt_status_destroy mongocrypt_status_destroy { get; }
    internal static mongocrypt_status_type mongocrypt_status_type { get; }
    internal static mongocrypt_status_code mongocrypt_status_code { get; }
    internal static mongocrypt_status_message mongocrypt_status_message { get; }
    internal static mongocrypt_status_ok mongocrypt_status_ok { get; }
    internal static mongocrypt_status_set mongocrypt_status_set { get; }
    internal static mongocrypt_binary_new mongocrypt_binary_new { get; }
    internal static mongocrypt_binary_destroy mongocrypt_binary_destroy { get; }
    internal static mongocrypt_binary_new_from_data mongocrypt_binary_new_from_data { get; }
    internal static mongocrypt_binary_data mongocrypt_binary_data { get; }
    internal static mongocrypt_binary_len mongocrypt_binary_len { get; }
    internal static mongocrypt_ctx_new mongocrypt_ctx_new { get; }
    internal static mongocrypt_ctx_setopt_key_material mongocrypt_ctx_setopt_key_material { get; }
    internal static mongocrypt_ctx_setopt_masterkey_aws mongocrypt_ctx_setopt_masterkey_aws { get; }
    internal static mongocrypt_ctx_setopt_masterkey_aws_endpoint mongocrypt_ctx_setopt_masterkey_aws_endpoint { get; }
    internal static mongocrypt_ctx_status mongocrypt_ctx_status { get; }
    internal static mongocrypt_ctx_encrypt_init mongocrypt_ctx_encrypt_init { get; }
    internal static mongocrypt_ctx_decrypt_init mongocrypt_ctx_decrypt_init { get; }
    internal static mongocrypt_ctx_explicit_encrypt_init mongocrypt_ctx_explicit_encrypt_init { get; }
    internal static mongocrypt_ctx_explicit_encrypt_expression_init mongocrypt_ctx_explicit_encrypt_expression_init { get; }
    internal static mongocrypt_ctx_explicit_decrypt_init mongocrypt_ctx_explicit_decrypt_init { get; }
    internal static mongocrypt_ctx_datakey_init mongocrypt_ctx_datakey_init { get; }
    internal static mongocrypt_ctx_provide_kms_providers mongocrypt_ctx_provide_kms_providers { get; }
    internal static mongocrypt_ctx_setopt_masterkey_local mongocrypt_ctx_setopt_masterkey_local { get; }
    internal static mongocrypt_ctx_setopt_key_id mongocrypt_ctx_setopt_key_id { get; }
    internal static mongocrypt_ctx_setopt_key_alt_name mongocrypt_ctx_setopt_key_alt_name { get; }
    internal static mongocrypt_ctx_setopt_algorithm mongocrypt_ctx_setopt_algorithm { get; }
    internal static mongocrypt_ctx_setopt_algorithm_range mongocrypt_ctx_setopt_algorithm_range { get; }
    internal static mongocrypt_ctx_setopt_contention_factor mongocrypt_ctx_setopt_contention_factor { get; }
    internal static mongocrypt_ctx_setopt_query_type mongocrypt_ctx_setopt_query_type { get; }
    internal static mongocrypt_ctx_state mongocrypt_ctx_state { get; }
    internal static mongocrypt_ctx_mongo_op mongocrypt_ctx_mongo_op { get; }
    internal static mongocrypt_ctx_mongo_feed mongocrypt_ctx_mongo_feed { get; }
    internal static mongocrypt_ctx_mongo_done mongocrypt_ctx_mongo_done { get; }
    internal static mongocrypt_ctx_next_kms_ctx mongocrypt_ctx_next_kms_ctx { get; }
    internal static mongocrypt_ctx_rewrap_many_datakey_init mongocrypt_ctx_rewrap_many_datakey_init { get; }
    internal static mongocrypt_kms_ctx_endpoint mongocrypt_kms_ctx_endpoint { get; }
    internal static mongocrypt_kms_ctx_message mongocrypt_kms_ctx_message { get; }
    internal static mongocrypt_kms_ctx_bytes_needed mongocrypt_kms_ctx_bytes_needed { get; }
    internal static mongocrypt_kms_ctx_feed mongocrypt_kms_ctx_feed { get; }
    internal static mongocrypt_kms_ctx_status mongocrypt_kms_ctx_status { get; }
    internal static mongocrypt_ctx_kms_done mongocrypt_ctx_kms_done { get; }
    internal static mongocrypt_ctx_finalize mongocrypt_ctx_finalize { get; }
    internal static mongocrypt_ctx_destroy mongocrypt_ctx_destroy { get; }
    internal static mongocrypt_kms_ctx_get_kms_provider mongocrypt_kms_ctx_get_kms_provider { get; }
    private static Library();
    public static string get_Version();
    internal static mongocrypt_version get_mongocrypt_version();
    internal static mongocrypt_new get_mongocrypt_new();
    internal static mongocrypt_setopt_log_handler get_mongocrypt_setopt_log_handler();
    internal static mongocrypt_setopt_kms_providers get_mongocrypt_setopt_kms_providers();
    internal static mongocrypt_ctx_setopt_key_encryption_key get_mongocrypt_ctx_setopt_key_encryption_key();
    internal static mongocrypt_setopt_aes_256_ecb get_mongocrypt_setopt_aes_256_ecb();
    internal static mongocrypt_setopt_bypass_query_analysis get_mongocrypt_setopt_bypass_query_analysis();
    internal static mongocrypt_setopt_crypto_hooks get_mongocrypt_setopt_crypto_hooks();
    internal static mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5 get_mongocrypt_setopt_crypto_hook_sign_rsaes_pkcs1_v1_5();
    internal static mongocrypt_setopt_encrypted_field_config_map get_mongocrypt_setopt_encrypted_field_config_map();
    internal static mongocrypt_setopt_schema_map get_mongocrypt_setopt_schema_map();
    internal static mongocrypt_setopt_append_crypt_shared_lib_search_path get_mongocrypt_setopt_append_crypt_shared_lib_search_path();
    internal static mongocrypt_setopt_set_crypt_shared_lib_path_override get_mongocrypt_setopt_set_crypt_shared_lib_path_override();
    internal static mongocrypt_setopt_use_need_kms_credentials_state get_mongocrypt_setopt_use_need_kms_credentials_state();
    internal static mongocrypt_crypt_shared_lib_version_string get_mongocrypt_crypt_shared_lib_version_string();
    internal static mongocrypt_crypt_shared_lib_version get_mongocrypt_crypt_shared_lib_version();
    internal static mongocrypt_init get_mongocrypt_init();
    internal static mongocrypt_destroy get_mongocrypt_destroy();
    internal static mongocrypt_status get_mongocrypt_status();
    internal static mongocrypt_status_new get_mongocrypt_status_new();
    internal static mongocrypt_status_destroy get_mongocrypt_status_destroy();
    internal static mongocrypt_status_type get_mongocrypt_status_type();
    internal static mongocrypt_status_code get_mongocrypt_status_code();
    internal static mongocrypt_status_message get_mongocrypt_status_message();
    internal static mongocrypt_status_ok get_mongocrypt_status_ok();
    internal static mongocrypt_status_set get_mongocrypt_status_set();
    internal static mongocrypt_binary_new get_mongocrypt_binary_new();
    internal static mongocrypt_binary_destroy get_mongocrypt_binary_destroy();
    internal static mongocrypt_binary_new_from_data get_mongocrypt_binary_new_from_data();
    internal static mongocrypt_binary_data get_mongocrypt_binary_data();
    internal static mongocrypt_binary_len get_mongocrypt_binary_len();
    internal static mongocrypt_ctx_new get_mongocrypt_ctx_new();
    internal static mongocrypt_ctx_setopt_key_material get_mongocrypt_ctx_setopt_key_material();
    internal static mongocrypt_ctx_setopt_masterkey_aws get_mongocrypt_ctx_setopt_masterkey_aws();
    internal static mongocrypt_ctx_setopt_masterkey_aws_endpoint get_mongocrypt_ctx_setopt_masterkey_aws_endpoint();
    internal static mongocrypt_ctx_status get_mongocrypt_ctx_status();
    internal static mongocrypt_ctx_encrypt_init get_mongocrypt_ctx_encrypt_init();
    internal static mongocrypt_ctx_decrypt_init get_mongocrypt_ctx_decrypt_init();
    internal static mongocrypt_ctx_explicit_encrypt_init get_mongocrypt_ctx_explicit_encrypt_init();
    internal static mongocrypt_ctx_explicit_encrypt_expression_init get_mongocrypt_ctx_explicit_encrypt_expression_init();
    internal static mongocrypt_ctx_explicit_decrypt_init get_mongocrypt_ctx_explicit_decrypt_init();
    internal static mongocrypt_ctx_datakey_init get_mongocrypt_ctx_datakey_init();
    internal static mongocrypt_ctx_provide_kms_providers get_mongocrypt_ctx_provide_kms_providers();
    internal static mongocrypt_ctx_setopt_masterkey_local get_mongocrypt_ctx_setopt_masterkey_local();
    internal static mongocrypt_ctx_setopt_key_id get_mongocrypt_ctx_setopt_key_id();
    internal static mongocrypt_ctx_setopt_key_alt_name get_mongocrypt_ctx_setopt_key_alt_name();
    internal static mongocrypt_ctx_setopt_algorithm get_mongocrypt_ctx_setopt_algorithm();
    internal static mongocrypt_ctx_setopt_algorithm_range get_mongocrypt_ctx_setopt_algorithm_range();
    internal static mongocrypt_ctx_setopt_contention_factor get_mongocrypt_ctx_setopt_contention_factor();
    internal static mongocrypt_ctx_setopt_query_type get_mongocrypt_ctx_setopt_query_type();
    internal static mongocrypt_ctx_state get_mongocrypt_ctx_state();
    internal static mongocrypt_ctx_mongo_op get_mongocrypt_ctx_mongo_op();
    internal static mongocrypt_ctx_mongo_feed get_mongocrypt_ctx_mongo_feed();
    internal static mongocrypt_ctx_mongo_done get_mongocrypt_ctx_mongo_done();
    internal static mongocrypt_ctx_next_kms_ctx get_mongocrypt_ctx_next_kms_ctx();
    internal static mongocrypt_ctx_rewrap_many_datakey_init get_mongocrypt_ctx_rewrap_many_datakey_init();
    internal static mongocrypt_kms_ctx_endpoint get_mongocrypt_kms_ctx_endpoint();
    internal static mongocrypt_kms_ctx_message get_mongocrypt_kms_ctx_message();
    internal static mongocrypt_kms_ctx_bytes_needed get_mongocrypt_kms_ctx_bytes_needed();
    internal static mongocrypt_kms_ctx_feed get_mongocrypt_kms_ctx_feed();
    internal static mongocrypt_kms_ctx_status get_mongocrypt_kms_ctx_status();
    internal static mongocrypt_ctx_kms_done get_mongocrypt_ctx_kms_done();
    internal static mongocrypt_ctx_finalize get_mongocrypt_ctx_finalize();
    internal static mongocrypt_ctx_destroy get_mongocrypt_ctx_destroy();
    internal static mongocrypt_kms_ctx_get_kms_provider get_mongocrypt_kms_ctx_get_kms_provider();
}
internal class MongoDB.Libmongocrypt.LibraryLoader : object {
    private ISharedLibraryLoader _loader;
    private string FindLibrary(IList`1<string> basePaths, String[] suffixPaths, string library);
    public T GetFunction(string name);
}
public class MongoDB.Libmongocrypt.LibraryLoadingException : Exception {
    public LibraryLoadingException(string message);
}
public enum MongoDB.Libmongocrypt.LogLevel : Enum {
    public int value__;
    public static LogLevel MONGOCRYPT_LOG_LEVEL_FATAL;
    public static LogLevel MONGOCRYPT_LOG_LEVEL_ERROR;
    public static LogLevel MONGOCRYPT_LOG_LEVEL_WARNING;
    public static LogLevel MONGOCRYPT_LOG_LEVEL_INFO;
    public static LogLevel MONGOCRYPT_LOG_LEVEL_TRACE;
}
internal class MongoDB.Libmongocrypt.MongoCryptSafeHandle : CheckableSafeHandle {
    public virtual void Check(Status status, bool success);
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
internal static class MongoDB.Libmongocrypt.OperatingSystemHelper : object {
    public static OperatingSystemPlatform CurrentOperatingSystem { get; }
    public static OperatingSystemPlatform get_CurrentOperatingSystem();
}
internal enum MongoDB.Libmongocrypt.OperatingSystemPlatform : Enum {
    public int value__;
    public static OperatingSystemPlatform Windows;
    public static OperatingSystemPlatform Linux;
    public static OperatingSystemPlatform MacOS;
}
internal class MongoDB.Libmongocrypt.PinnedBinary : Binary {
    internal PinnedBinary(IntPtr ptr, UInt32 len);
    internal static void RunAsPinnedBinary(THandle handle, Byte[] bytes, Status status, Func`3<THandle, BinarySafeHandle, bool> handleFunc);
}
internal static class MongoDB.Libmongocrypt.SecureRandomCallback : object {
    public static bool GenerateRandom(IntPtr ctx, IntPtr out, UInt32 count, IntPtr statusPtr);
}
internal static class MongoDB.Libmongocrypt.SigningRSAESPKCSCallback : object {
    public static bool RsaSign(IntPtr ctx, IntPtr key, IntPtr inData, IntPtr outData, IntPtr statusPtr);
    public static Byte[] HashAndSignBytes(Byte[] dataToSign, Byte[] key);
}
internal class MongoDB.Libmongocrypt.Status : object {
    private StatusSafeHandle _handle;
    internal StatusSafeHandle Handle { get; }
    public Status(StatusSafeHandle handle);
    public void Check(IStatus status);
    public void SetStatus(UInt32 code, string msg);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal StatusSafeHandle get_Handle();
    internal void ThrowExceptionIfNeeded();
}
internal class MongoDB.Libmongocrypt.StatusSafeHandle : SafeHandle {
    public bool IsInvalid { get; }
    private StatusSafeHandle(IntPtr ptr);
    public static StatusSafeHandle FromIntPtr(IntPtr ptr);
    public virtual bool get_IsInvalid();
    [ReliabilityContractAttribute("3", "1")]
protected virtual bool ReleaseHandle();
}
