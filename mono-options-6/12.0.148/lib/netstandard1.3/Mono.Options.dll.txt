public abstract class Mono.Options.ArgumentSource : object {
    public string Description { get; }
    public abstract virtual String[] GetNames();
    public abstract virtual string get_Description();
    public abstract virtual bool GetArguments(string value, IEnumerable`1& replacement);
    public static IEnumerable`1<string> GetArgumentsFromFile(string file);
    public static IEnumerable`1<string> GetArguments(TextReader reader);
    [IteratorStateMachineAttribute("Mono.Options.ArgumentSource/<GetArguments>d__7")]
private static IEnumerable`1<string> GetArguments(TextReader reader, bool close);
}
public class Mono.Options.Command : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionSet <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<string>> <Run>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandSet <CommandSet>k__BackingField;
    public string Name { get; }
    public string Help { get; }
    public OptionSet Options { get; public set; }
    public Action`1<IEnumerable`1<string>> Run { get; public set; }
    public CommandSet CommandSet { get; internal set; }
    public Command(string name, string help);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Help();
    [CompilerGeneratedAttribute]
public OptionSet get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(OptionSet value);
    [CompilerGeneratedAttribute]
public Action`1<IEnumerable`1<string>> get_Run();
    [CompilerGeneratedAttribute]
public void set_Run(Action`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public CommandSet get_CommandSet();
    [CompilerGeneratedAttribute]
internal void set_CommandSet(CommandSet value);
    private static string NormalizeCommandName(string name);
    public virtual int Invoke(IEnumerable`1<string> arguments);
}
internal class Mono.Options.CommandOption : Option {
    [CompilerGeneratedAttribute]
private Command <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    public Command Command { get; }
    public string CommandName { get; }
    public CommandOption(Command command, string commandName, bool hidden);
    [CompilerGeneratedAttribute]
public Command get_Command();
    [CompilerGeneratedAttribute]
public string get_CommandName();
    protected virtual void OnParseComplete(OptionContext c);
}
internal class Mono.Options.CommandOptionSet : OptionSet {
    private CommandSet commands;
    public CommandOptionSet(CommandSet commands, Func`2<string, string> localizer);
    protected virtual void SetItem(int index, Option item);
    private bool ShouldWrapOption(Option item);
    protected virtual void InsertItem(int index, Option item);
}
public class Mono.Options.CommandSet : KeyedCollection`2<string, Command> {
    private string suite;
    private OptionSet options;
    private TextWriter outWriter;
    private TextWriter errorWriter;
    internal List`1<CommandSet> NestedCommandSets;
    internal HelpCommand help;
    internal bool showHelp;
    internal OptionSet Options { get; }
    public string Suite { get; }
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public Func`2<string, string> MessageLocalizer { get; }
    public CommandSet(string suite, Func`2<string, string> localizer);
    public CommandSet(string suite, TextWriter output, TextWriter error, Func`2<string, string> localizer);
    internal OptionSet get_Options();
    public string get_Suite();
    public TextWriter get_Out();
    public TextWriter get_Error();
    public Func`2<string, string> get_MessageLocalizer();
    protected virtual string GetKeyForItem(Command item);
    public CommandSet Add(Command value);
    private void AddCommand(Command value);
    public CommandSet Add(string header);
    public CommandSet Add(Option option);
    public CommandSet Add(string prototype, Action`1<string> action);
    public CommandSet Add(string prototype, string description, Action`1<string> action);
    public CommandSet Add(string prototype, string description, Action`1<string> action, bool hidden);
    public CommandSet Add(string prototype, OptionAction`2<string, string> action);
    public CommandSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public CommandSet Add(string prototype, string description, OptionAction`2<string, string> action, bool hidden);
    public CommandSet Add(string prototype, Action`1<T> action);
    public CommandSet Add(string prototype, string description, Action`1<T> action);
    public CommandSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public CommandSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    public CommandSet Add(ArgumentSource source);
    public CommandSet Add(CommandSet nestedCommands);
    private bool AlreadyAdded(CommandSet value);
    [IteratorStateMachineAttribute("Mono.Options.CommandSet/<GetCompletions>d__37")]
public IEnumerable`1<string> GetCompletions(string prefix);
    private static void ExtractToken(String& input, String& rest);
    public int Run(IEnumerable`1<string> arguments);
    internal Command GetCommand(List`1<string> extra);
    private Command TryGetLocalCommand(List`1<string> extra);
    private Command TryGetNestedCommand(List`1<string> extra);
    [CompilerGeneratedAttribute]
private void <Run>b__39_0(string v);
}
public class Mono.Options.HelpCommand : Command {
    public virtual int Invoke(IEnumerable`1<string> arguments);
    private List`1<KeyValuePair`2<string, Command>> GetCommands();
    private void AddNestedCommands(List`1<KeyValuePair`2<string, Command>> commands, string outer, CommandSet value);
    internal void WriteUnknownCommand(string unknownCommand);
}
internal class Mono.Options.HelpOption : Option {
    private Option option;
    private CommandSet commands;
    public HelpOption(CommandSet commands, Option d);
    protected virtual void OnParseComplete(OptionContext c);
}
public abstract class Mono.Options.Option : object {
    private string prototype;
    private string description;
    private String[] names;
    private OptionValueType type;
    private int count;
    private String[] separators;
    private bool hidden;
    private static Char[] NameTerminator;
    public string Prototype { get; }
    public string Description { get; }
    public OptionValueType OptionValueType { get; }
    public int MaxValueCount { get; }
    public bool Hidden { get; }
    internal String[] Names { get; }
    internal String[] ValueSeparators { get; }
    protected Option(string prototype, string description);
    protected Option(string prototype, string description, int maxValueCount);
    protected Option(string prototype, string description, int maxValueCount, bool hidden);
    private static Option();
    public string get_Prototype();
    public string get_Description();
    public OptionValueType get_OptionValueType();
    public int get_MaxValueCount();
    public bool get_Hidden();
    public String[] GetNames();
    public String[] GetValueSeparators();
    protected static T Parse(string value, OptionContext c);
    internal String[] get_Names();
    internal String[] get_ValueSeparators();
    private OptionValueType ParsePrototype();
    private static void AddSeparators(string name, int end, ICollection`1<string> seps);
    public void Invoke(OptionContext c);
    protected abstract virtual void OnParseComplete(OptionContext c);
    internal void InvokeOnParseComplete(OptionContext c);
    public virtual string ToString();
}
public class Mono.Options.OptionAction`2 : MulticastDelegate {
    public OptionAction`2(object object, IntPtr method);
    public virtual void Invoke(TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Mono.Options.OptionContext : object {
    private Option option;
    private string name;
    private int index;
    private OptionSet set;
    private OptionValueCollection c;
    public Option Option { get; public set; }
    public string OptionName { get; public set; }
    public int OptionIndex { get; public set; }
    public OptionSet OptionSet { get; }
    public OptionValueCollection OptionValues { get; }
    public OptionContext(OptionSet set);
    public Option get_Option();
    public void set_Option(Option value);
    public string get_OptionName();
    public void set_OptionName(string value);
    public int get_OptionIndex();
    public void set_OptionIndex(int value);
    public OptionSet get_OptionSet();
    public OptionValueCollection get_OptionValues();
}
public class Mono.Options.OptionException : Exception {
    private string option;
    public string OptionName { get; }
    public OptionException(string message, string optionName);
    public OptionException(string message, string optionName, Exception innerException);
    public string get_OptionName();
}
public class Mono.Options.OptionSet : KeyedCollection`2<string, Option> {
    private Func`2<string, string> localizer;
    private List`1<ArgumentSource> sources;
    private ReadOnlyCollection`1<ArgumentSource> roSources;
    private Regex ValueOption;
    private static int OptionWidth;
    private static int Description_FirstWidth;
    private static int Description_RemWidth;
    private static string CommandHelpIndentStart;
    private static string CommandHelpIndentRemaining;
    public Func`2<string, string> MessageLocalizer { get; internal set; }
    public ReadOnlyCollection`1<ArgumentSource> ArgumentSources { get; }
    public OptionSet(Func`2<string, string> localizer);
    private static OptionSet();
    public Func`2<string, string> get_MessageLocalizer();
    internal void set_MessageLocalizer(Func`2<string, string> value);
    public ReadOnlyCollection`1<ArgumentSource> get_ArgumentSources();
    protected virtual string GetKeyForItem(Option item);
    [ObsoleteAttribute("Use KeyedCollection.this[string]")]
protected Option GetOptionForName(string option);
    protected virtual void InsertItem(int index, Option item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Option item);
    private void AddImpl(Option option);
    public OptionSet Add(string header);
    public OptionSet Add(Option option);
    public OptionSet Add(string prototype, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action, bool hidden);
    public OptionSet Add(string prototype, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action, bool hidden);
    public OptionSet Add(string prototype, Action`1<T> action);
    public OptionSet Add(string prototype, string description, Action`1<T> action);
    public OptionSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(ArgumentSource source);
    protected virtual OptionContext CreateOptionContext();
    public List`1<string> Parse(IEnumerable`1<string> arguments);
    private bool AddSource(ArgumentEnumerator ae, string argument);
    private static bool Unprocessed(ICollection`1<string> extra, Option def, OptionContext c, string argument);
    protected bool GetOptionParts(string argument, String& flag, String& name, String& sep, String& value);
    protected virtual bool Parse(string argument, OptionContext c);
    private void ParseValue(string option, OptionContext c);
    private bool ParseBool(string option, string n, OptionContext c);
    private bool ParseBundledValue(string f, string n, OptionContext c);
    private static void Invoke(OptionContext c, string name, string value, Option option);
    public void WriteOptionDescriptions(TextWriter o);
    internal void WriteCommandDescription(TextWriter o, Command c, string commandName);
    private void WriteDescription(TextWriter o, string value, string prefix, int firstWidth, int remWidth);
    private bool WriteOptionPrototype(TextWriter o, Option p, Int32& written);
    private static int GetNextOptionIndex(String[] names, int i);
    private static void Write(TextWriter o, Int32& n, string s);
    private static string GetArgumentName(int index, int maxIndex, string description);
    private static string GetDescription(string description);
    private static IEnumerable`1<string> GetLines(string description, int firstWidth, int remWidth);
}
[DefaultMemberAttribute("Item")]
public class Mono.Options.OptionValueCollection : object {
    private List`1<string> values;
    private OptionContext c;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string Item { get; public set; }
    internal OptionValueCollection(OptionContext c);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    private void AssertValid(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public List`1<string> ToList();
    public String[] ToArray();
    public virtual string ToString();
}
public enum Mono.Options.OptionValueType : Enum {
    public int value__;
    public static OptionValueType None;
    public static OptionValueType Optional;
    public static OptionValueType Required;
}
public class Mono.Options.ResponseFileSource : ArgumentSource {
    public string Description { get; }
    public virtual String[] GetNames();
    public virtual string get_Description();
    public virtual bool GetArguments(string value, IEnumerable`1& replacement);
}
internal static class Mono.Options.StringCoda : object {
    public static IEnumerable`1<string> WrappedLines(string self, Int32[] widths);
    public static IEnumerable`1<string> WrappedLines(string self, IEnumerable`1<int> widths);
    [IteratorStateMachineAttribute("Mono.Options.StringCoda/<CreateWrappedLinesIterator>d__2")]
private static IEnumerable`1<string> CreateWrappedLinesIterator(string self, IEnumerable`1<int> widths);
    private static int GetNextWidth(IEnumerator`1<int> ewidths, int curWidth, Nullable`1& eValid);
    private static bool IsEolChar(char c);
    private static int GetLineEnd(int start, int length, string description);
}
