[ExtensionAttribute]
public static class Mono.Reflection.BackingFieldResolver : object {
    private static ILPattern GetterPattern;
    private static ILPattern SetterPattern;
    private static BackingFieldResolver();
    private static ILPattern Field(OpCode opcode);
    private static FieldInfo GetBackingField(MethodInfo method, ILPattern pattern);
    [ExtensionAttribute]
public static FieldInfo GetBackingField(PropertyInfo self);
}
internal class Mono.Reflection.ByteBuffer : object {
    internal Byte[] buffer;
    internal int position;
    public ByteBuffer(Byte[] buffer);
    public byte ReadByte();
    public Byte[] ReadBytes(int length);
    public short ReadInt16();
    public int ReadInt32();
    public long ReadInt64();
    public float ReadSingle();
    public double ReadDouble();
    private void CheckCanRead(int count);
}
[ExtensionAttribute]
public static class Mono.Reflection.Disassembler : object {
    [ExtensionAttribute]
public static IList`1<Instruction> GetInstructions(MethodBase self);
}
public abstract class Mono.Reflection.ILPattern : object {
    public static ILPattern Optional(OpCode opcode);
    public static ILPattern Optional(OpCode[] opcodes);
    public static ILPattern Optional(ILPattern pattern);
    public static ILPattern Sequence(ILPattern[] patterns);
    public static ILPattern OpCode(OpCode opcode);
    public static ILPattern Either(ILPattern a, ILPattern b);
    public abstract virtual void Match(MatchContext context);
    protected static Instruction GetLastMatchingInstruction(MatchContext context);
    public bool TryMatch(MatchContext context);
    public static MatchContext Match(MethodBase method, ILPattern pattern);
}
public class Mono.Reflection.Image : object {
    private long position;
    private Stream stream;
    private Image(Stream stream);
    private bool Advance(int length);
    private bool MoveTo(UInt32 position);
    private sealed virtual override void System.IDisposable.Dispose();
    private ushort ReadUInt16();
    private UInt32 ReadUInt32();
    private bool IsManagedAssembly();
    public static bool IsAssembly(string file);
    public static bool IsAssembly(Stream stream);
}
public class Mono.Reflection.Instruction : object {
    private int offset;
    private OpCode opcode;
    private object operand;
    private Instruction previous;
    private Instruction next;
    public int Offset { get; }
    public OpCode OpCode { get; }
    public object Operand { get; internal set; }
    public Instruction Previous { get; internal set; }
    public Instruction Next { get; internal set; }
    public int Size { get; }
    internal Instruction(int offset, OpCode opcode);
    public int get_Offset();
    public OpCode get_OpCode();
    public object get_Operand();
    internal void set_Operand(object value);
    public Instruction get_Previous();
    internal void set_Previous(Instruction value);
    public Instruction get_Next();
    internal void set_Next(Instruction value);
    public int get_Size();
    public virtual string ToString();
    private static void AppendLabel(StringBuilder builder, Instruction instruction);
}
public class Mono.Reflection.MatchContext : object {
    internal Instruction instruction;
    internal bool success;
    private Dictionary`2<object, object> data;
    public bool IsMatch { get; public set; }
    internal MatchContext(Instruction instruction);
    public bool get_IsMatch();
    public void set_IsMatch(bool value);
    public bool TryGetData(object key, Object& value);
    public void AddData(object key, object value);
    internal void Reset(Instruction instruction);
    internal void Advance();
}
internal class Mono.Reflection.MethodBodyReader : object {
    private static OpCode[] one_byte_opcodes;
    private static OpCode[] two_bytes_opcodes;
    private MethodBase method;
    private MethodBody body;
    private Module module;
    private Type[] type_arguments;
    private Type[] method_arguments;
    private ByteBuffer il;
    private ParameterInfo this_parameter;
    private ParameterInfo[] parameters;
    private IList`1<LocalVariableInfo> locals;
    private List`1<Instruction> instructions;
    private static MethodBodyReader();
    private MethodBodyReader(MethodBase method);
    private void ReadInstructions();
    private void ReadOperand(Instruction instruction);
    private void ResolveBranches();
    private static Instruction GetInstruction(List`1<Instruction> instructions, int offset);
    private object GetVariable(Instruction instruction, int index);
    private static bool TargetsLocalVariable(OpCode opcode);
    private LocalVariableInfo GetLocalVariable(int index);
    private ParameterInfo GetParameter(int index);
    private OpCode ReadOpCode();
    public static List`1<Instruction> GetInstructions(MethodBase method);
}
