public interface Moq.Contrib.HttpClient.IHttpMessageHandler {
    public abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class Moq.Contrib.HttpClient.MockHttpMessageHandlerExtensions : object {
    [ExtensionAttribute]
public static HttpClient CreateClient(Mock`1<HttpMessageHandler> handler);
    [ExtensionAttribute]
public static IHttpClientFactory CreateClientFactory(Mock`1<HttpMessageHandler> handler);
    [ExtensionAttribute]
private static ISetup`2<HttpMessageHandler, TResult> Setup(Mock`1<HttpMessageHandler> handler, Expression`1<Func`2<IHttpMessageHandler, TResult>> expression);
    [ExtensionAttribute]
private static ISetupSequentialResult`1<TResult> SetupSequence(Mock`1<HttpMessageHandler> handler, Expression`1<Func`2<IHttpMessageHandler, TResult>> expression);
    [ExtensionAttribute]
private static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> Setup(ISetupConditionResult`1<HttpMessageHandler> handler, Expression`1<Func`2<IHttpMessageHandler, Task`1<HttpResponseMessage>>> expression);
    [ExtensionAttribute]
private static void Verify(Mock`1<HttpMessageHandler> handler, Expression`1<Func`2<IHttpMessageHandler, TResult>> expression, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupAnyRequest(Mock`1<HttpMessageHandler> handler);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, Uri requestUri);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, string requestUrl);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, string requestUrl, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupAnyRequestSequence(Mock`1<HttpMessageHandler> handler);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, Uri requestUri);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, string requestUrl);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, string requestUrl, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> SetupRequestSequence(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupAnyRequest(ISetupConditionResult`1<HttpMessageHandler> handler);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, Uri requestUri);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, string requestUrl);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, string requestUrl, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate`1<HttpRequestMessage> match);
    [ExtensionAttribute]
public static ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> SetupRequest(ISetupConditionResult`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    [ExtensionAttribute]
public static void VerifyAnyRequest(Mock`1<HttpMessageHandler> handler, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, Predicate`1<HttpRequestMessage> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, Func`2<HttpRequestMessage, Task`1<bool>> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, Uri requestUri, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, string requestUrl, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, Uri requestUri, Predicate`1<HttpRequestMessage> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, string requestUrl, Predicate`1<HttpRequestMessage> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Predicate`1<HttpRequestMessage> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Func`2<HttpRequestMessage, Task`1<bool>> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate`1<HttpRequestMessage> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate`1<HttpRequestMessage> match, Nullable`1<Times> times, string failMessage);
    [ExtensionAttribute]
public static void VerifyRequest(Mock`1<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match, Nullable`1<Times> times, string failMessage);
    private static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, HttpContent content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, HttpContent content, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, HttpContent content, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, string content, string mediaType, Encoding encoding, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, string content, string mediaType, Encoding encoding, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, string content, string mediaType, Encoding encoding, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, string content, string mediaType, Encoding encoding, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsJsonResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, T value, JsonSerializerOptions options, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsJsonResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, T value, JsonSerializerOptions options, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsJsonResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, T value, JsonSerializerOptions options, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsJsonResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, T value, JsonSerializerOptions options, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, Byte[] content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, Byte[] content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, Byte[] content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, Byte[] content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, Stream content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, HttpStatusCode statusCode, Stream content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static IReturnsResult`1<HttpMessageHandler> ReturnsResponse(ISetup`2<HttpMessageHandler, Task`1<HttpResponseMessage>> setup, Stream content, string mediaType, Action`1<HttpResponseMessage> configure);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<Task`1<HttpResponseMessage>> ReturnsResponse(ISetupSequentialResult`1<Task`1<HttpResponseMessage>> setup, Stream content, string mediaType, Action`1<HttpResponseMessage> configure);
    private static StreamContent CreateStreamContent(Stream content);
}
public static class Moq.Contrib.HttpClient.RequestMatcher : object {
    public static HttpRequestMessage Is(Predicate`1<HttpRequestMessage> match);
    public static HttpRequestMessage Is(Func`2<HttpRequestMessage, Task`1<bool>> match);
    public static HttpRequestMessage Is(Uri requestUri);
    public static HttpRequestMessage Is(string requestUrl);
    public static HttpRequestMessage Is(Uri requestUri, Predicate`1<HttpRequestMessage> match);
    public static HttpRequestMessage Is(Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    public static HttpRequestMessage Is(string requestUrl, Predicate`1<HttpRequestMessage> match);
    public static HttpRequestMessage Is(string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
    public static HttpRequestMessage Is(HttpMethod method, Predicate`1<HttpRequestMessage> match);
    public static HttpRequestMessage Is(HttpMethod method, Func`2<HttpRequestMessage, Task`1<bool>> match);
    public static HttpRequestMessage Is(HttpMethod method, Uri requestUri);
    public static HttpRequestMessage Is(HttpMethod method, string requestUrl);
    public static HttpRequestMessage Is(HttpMethod method, Uri requestUri, Predicate`1<HttpRequestMessage> match);
    public static HttpRequestMessage Is(HttpMethod method, Uri requestUri, Func`2<HttpRequestMessage, Task`1<bool>> match);
    public static HttpRequestMessage Is(HttpMethod method, string requestUrl, Predicate`1<HttpRequestMessage> match);
    public static HttpRequestMessage Is(HttpMethod method, string requestUrl, Func`2<HttpRequestMessage, Task`1<bool>> match);
}
internal class Moq.Contrib.HttpClient.RequestPredicate : object {
    private Func`2<HttpRequestMessage, Task`1<bool>> match;
    private ConditionalWeakTable`2<HttpRequestMessage, Task`1<bool>> memoizedResults;
    public RequestPredicate(Func`2<HttpRequestMessage, Task`1<bool>> match);
    public RequestPredicate(Predicate`1<HttpRequestMessage> match);
    public Task`1<bool> MatchesAsync(HttpRequestMessage request);
    public bool Matches(HttpRequestMessage request);
}
internal class Moq.Contrib.HttpClient.ResponseStream : Stream {
    private Stream inner;
    private long position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ResponseStream(Stream stream);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
