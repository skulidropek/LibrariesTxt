[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Moq.Dapper.DataTableExtensions : object {
    [ExtensionAttribute]
internal static DataTableReader ToDataTableReader(DataTable dataTable);
}
public static class Moq.Dapper.DbCommandSetup : object {
    internal static ISetup`2<TConnection, Task`1<TResult>> SetupCommandAsync(Mock`1<TConnection> mock, Action`2<Mock`1<DbCommand>, Func`1<TResult>> mockResult);
}
[ExtensionAttribute]
public static class Moq.Dapper.DbConnectionInterfaceMockExtensions : object {
    [ExtensionAttribute]
public static ISetup`2<IDbConnection, TResult> SetupDapper(Mock`1<IDbConnection> mock, Expression`1<Func`2<IDbConnection, TResult>> expression);
    [ExtensionAttribute]
public static ISetup`2<IDbConnection, Task`1<TResult>> SetupDapperAsync(Mock`1<IDbConnection> mock, Expression`1<Func`2<IDbConnection, Task`1<TResult>>> expression);
    public static ISetup`2<IDbConnection, Task`1<int>> SetupExecuteAsync(Mock`1<IDbConnection> mock);
    private static ISetup`2<IDbConnection, Task`1<TResult>> SetupQueryAsync(Mock`1<IDbConnection> mock);
    private static ISetup`2<IDbConnection, TResult> SetupQuery(Mock`1<IDbConnection> mock);
    private static ISetup`2<IDbConnection, TResult> SetupCommand(Mock`1<IDbConnection> mock, Action`2<Mock`1<IDbCommand>, Func`1<TResult>> mockResult);
    private static ISetup`2<IDbConnection, TResult> SetupExecuteScalar(Mock`1<IDbConnection> mock);
    private static ISetup`2<IDbConnection, int> SetupExecute(Mock`1<IDbConnection> mock);
}
[ExtensionAttribute]
public static class Moq.Dapper.DbConnectionMockExtensions : object {
    [ExtensionAttribute]
public static ISetup`2<DbConnection, Task`1<TResult>> SetupDapperAsync(Mock`1<DbConnection> mock, Expression`1<Func`2<DbConnection, Task`1<TResult>>> expression);
    private static ISetup`2<DbConnection, Task`1<TResult>> SetupQueryAsync(Mock`1<DbConnection> mock);
    private static ISetup`2<DbConnection, Task`1<int>> SetupExecuteAsync(Mock`1<DbConnection> mock);
    private static ISetup`2<DbConnection, Task`1<int>> SetupNonQueryCommandAsync(Mock`1<DbConnection> mock, Action`2<Mock`1<DbCommand>, Func`1<int>> mockResult);
    private static ISetup`2<DbConnection, Task`1<TResult>> SetupExecuteScalarCommandAsync(Mock`1<DbConnection> mock, Action`2<Mock`1<DbCommand>, Func`1<object>> mockResult);
    private static ISetup`2<DbConnection, Task`1<TResult>> SetupExecuteScalarAsync(Mock`1<DbConnection> mock);
}
[ExtensionAttribute]
public static class Moq.Dapper.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static DataTable ToDataTable(IEnumerable results, Type tableType);
    [CompilerGeneratedAttribute]
internal static bool <ToDataTable>g__IsNullable|0_0(Type t);
    [CompilerGeneratedAttribute]
internal static Type <ToDataTable>g__GetDataColumnType|0_1(Type source);
    [CompilerGeneratedAttribute]
internal static bool <ToDataTable>g__IsMatchingType|0_2(Type t);
}
[ExtensionAttribute]
internal static class Moq.Dapper.ObjectExtensions : object {
    [ExtensionAttribute]
internal static DataTable ToDataTable(object result, Type resultType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
