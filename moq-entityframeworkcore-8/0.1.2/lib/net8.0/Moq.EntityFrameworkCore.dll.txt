public class Moq.EntityFrameworkCore.DbAsyncQueryProvider.InMemoryAsyncEnumerable`1 : EnumerableQuery`1<T> {
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public InMemoryAsyncEnumerable`1(IEnumerable`1<T> enumerable);
    public InMemoryAsyncEnumerable`1(Expression expression);
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    public sealed virtual IAsyncEnumerator`1<T> GetAsyncEnumerator(CancellationToken cancellationToken);
    public IAsyncEnumerator`1<T> GetEnumerator();
}
public class Moq.EntityFrameworkCore.DbAsyncQueryProvider.InMemoryAsyncQueryProvider`1 : object {
    private IQueryProvider innerQueryProvider;
    public InMemoryAsyncQueryProvider`1(IQueryProvider innerQueryProvider);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
    public Task`1<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Moq.EntityFrameworkCore.DbAsyncQueryProvider.InMemoryDbAsyncEnumerator`1 : object {
    private IEnumerator`1<T> innerEnumerator;
    private bool disposed;
    public T Current { get; }
    public InMemoryDbAsyncEnumerator`1(IEnumerator`1<T> enumerator);
    public void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    public Task`1<bool> MoveNext(CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual T get_Current();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Moq.EntityFrameworkCore.MoqExtensions : object {
    [ExtensionAttribute]
public static IReturnsResult`1<T> ReturnsDbSet(ISetupGetter`2<T, DbSet`1<TEntity>> setupResult, IEnumerable`1<TEntity> entities, Mock`1<DbSet`1<TEntity>> dbSetMock);
    [ExtensionAttribute]
public static IReturnsResult`1<T> ReturnsDbSet(ISetup`2<T, DbSet`1<TEntity>> setupResult, IEnumerable`1<TEntity> entities, Mock`1<DbSet`1<TEntity>> dbSetMock);
    [ExtensionAttribute]
public static ISetupSequentialResult`1<DbSet`1<TEntity>> ReturnsDbSet(ISetupSequentialResult`1<DbSet`1<TEntity>> setupResult, IEnumerable`1<TEntity> entities, Mock`1<DbSet`1<TEntity>> dbSetMock);
    private static void ConfigureMock(Mock dbSetMock, IEnumerable`1<TEntity> entities);
}
