[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Moq.AutoMock.AutoMocker : object {
    [CompilerGeneratedAttribute]
private MockBehavior <MockBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultValue <DefaultValue>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DefaultValueProvider <DefaultValueProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CallBase>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IMockResolver> <Resolvers>k__BackingField;
    public MockBehavior MockBehavior { get; }
    public DefaultValue DefaultValue { get; }
    [NullableAttribute("2")]
public DefaultValueProvider DefaultValueProvider { get; }
    public bool CallBase { get; }
    public IList`1<IMockResolver> Resolvers { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<Type, object> ResolvedObjects { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, IInstance> TypeMap { get; }
    public AutoMocker(MockBehavior mockBehavior);
    public AutoMocker(MockBehavior mockBehavior, DefaultValue defaultValue);
    public AutoMocker(MockBehavior mockBehavior, DefaultValue defaultValue, bool callBase);
    [NullableContextAttribute("2")]
public AutoMocker(MockBehavior mockBehavior, DefaultValue defaultValue, DefaultValueProvider defaultValueProvider, bool callBase);
    [CompilerGeneratedAttribute]
public MockBehavior get_MockBehavior();
    [CompilerGeneratedAttribute]
public DefaultValue get_DefaultValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DefaultValueProvider get_DefaultValueProvider();
    [CompilerGeneratedAttribute]
public bool get_CallBase();
    [CompilerGeneratedAttribute]
public IList`1<IMockResolver> get_Resolvers();
    public IReadOnlyDictionary`2<Type, object> get_ResolvedObjects();
    private ConcurrentDictionary`2<Type, IInstance> get_TypeMap();
    private bool TryResolve(Type serviceType, ObjectGraphContext resolutionContext, IInstance& instance, Boolean& noCache);
    public T CreateInstance();
    public T CreateInstance(bool enablePrivate);
    public object CreateInstance(Type type);
    public object CreateInstance(Type type, bool enablePrivate);
    internal object CreateInstanceInternal(Type type, ObjectGraphContext context);
    public T CreateSelfMock();
    public T CreateSelfMock(bool enablePrivate);
    public T CreateSelfMock(bool enablePrivate, Nullable`1<MockBehavior> mockBehavior, Nullable`1<DefaultValue> defaultValue, DefaultValueProvider defaultValueProvider, Nullable`1<bool> callBase);
    public Mock`1<TService> WithSelfMock(bool enablePrivate, Nullable`1<MockBehavior> mockBehavior, Nullable`1<DefaultValue> defaultValue, DefaultValueProvider defaultValueProvider, Nullable`1<bool> callBase);
    public T WithSelfMock(bool enablePrivate, Nullable`1<MockBehavior> mockBehavior, Nullable`1<DefaultValue> defaultValue, DefaultValueProvider defaultValueProvider, Nullable`1<bool> callBase);
    public object WithSelfMock(Type serviceType, Type implementationType, bool enablePrivate, Nullable`1<MockBehavior> mockBehavior, Nullable`1<DefaultValue> defaultValue, DefaultValueProvider defaultValueProvider, Nullable`1<bool> callBase);
    public object WithSelfMock(Type implementationType, bool enablePrivate, Nullable`1<MockBehavior> mockBehavior, Nullable`1<DefaultValue> defaultValue, DefaultValueProvider defaultValueProvider, Nullable`1<bool> callBase);
    private Mock`1<T> BuildSelfMock(bool enablePrivate, MockBehavior mockBehavior, DefaultValue defaultValue, DefaultValueProvider defaultValueProvider, bool callBase);
    private Mock BuildSelfMock(Type serviceType, bool enablePrivate, MockBehavior mockBehavior, DefaultValue defaultValue, DefaultValueProvider defaultValueProvider, bool callBase);
    [NullableContextAttribute("2")]
public AutoMocker Use(TService service);
    public AutoMocker Use(Type type, object service);
    public AutoMocker Use(Mock`1<TService> mockedService);
    public AutoMocker Use(Expression`1<Func`2<TService, bool>> setup);
    public TImplementation With();
    public TImplementation With();
    public object With(Type serviceType, Type implementationType);
    public object With(Type implementationType);
    public TService Get();
    public TService Get(bool enablePrivate);
    public object Get(Type serviceType);
    public object Get(Type serviceType, bool enablePrivate);
    private object Get(Type serviceType, ObjectGraphContext context);
    internal bool TryGet(Type serviceType, ObjectGraphContext context, IInstance& service, Boolean& noCache);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public Mock`1<TService> GetMock();
    public Mock`1<TService> GetMock(bool enablePrivate);
    public Mock GetMock(Type serviceType);
    public Mock GetMock(Type serviceType, bool enablePrivate);
    private Mock GetMockImplementation(Type serviceType, bool enablePrivate);
    public ISetup`1<TService> Setup(Expression`1<Action`1<TService>> setup);
    public ISetup`2<TService, TReturn> Setup(Expression`1<Func`2<TService, TReturn>> setup);
    public ISetup`1<TService> SetupWithAny(string methodName);
    public ISetup`2<TService, TReturn> SetupWithAny(string methodName);
    private TReturn Setup(Func`2<Mock`1<TService>, TReturn> returnValue);
    public Mock`1<TService> SetupAllProperties();
    public ISetupSequentialResult`1<TReturn> SetupSequence(Expression`1<Func`2<TService, TReturn>> setup);
    public void Combine(Type type, Type[] forwardTo);
    public void VerifyAll(bool ignoreMissingSetups);
    public void Verify();
    public void Verify(Expression`1<Func`2<T, TResult>> expression);
    public void Verify(Expression`1<Func`2<T, TResult>> expression, Times times);
    public void Verify(Expression`1<Func`2<T, TResult>> expression, Func`1<Times> times);
    public void Verify(Expression`1<Func`2<T, TResult>> expression, string failMessage);
    public void Verify(Expression`1<Func`2<T, TResult>> expression, Times times, string failMessage);
    public IDisposable AsDisposable();
    internal Mock CreateMock(Type serviceType, MockBehavior mockBehavior, DefaultValue defaultValue, DefaultValueProvider defaultValueProvider, bool callBase, ObjectGraphContext objectGraphContext);
    internal bool TryGetConstructorInvocation(Type type, ObjectGraphContext context, ConstructorInfo& constructor, IInstance[]& arguments);
    private void EnsureCached(Type type, IInstance instance);
    private Mock GetOrMakeMockFor(Type type);
    private void WithTypeMap(Action`1<ConcurrentDictionary`2<Type, IInstance>> onTypeMap);
    public void Verify(Expression`1<Action`1<T>> expression);
    public void Verify(Expression`1<Action`1<T>> expression, Times times);
    public void Verify(Expression`1<Action`1<T>> expression, Func`1<Times> times);
    public void Verify(Expression`1<Action`1<T>> expression, string failMessage);
    public void Verify(Expression`1<Action`1<T>> expression, Times times, string failMessage);
    public void Verify(Expression`1<Action`1<T>> expression, Func`1<Times> times, string failMessage);
    public void Verify(Expression`1<Func`2<T, object>> expression);
    public void Verify(Expression`1<Func`2<T, object>> expression, Times times);
    public void Verify(Expression`1<Func`2<T, object>> expression, Func`1<Times> times);
    public void Verify(Expression`1<Func`2<T, object>> expression, string failMessage);
    public void Verify(Expression`1<Func`2<T, object>> expression, Times times, string failMessage);
    public void Verify();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [NullableContextAttribute("2")]
public void Combine();
    [CompilerGeneratedAttribute]
internal static Mock <Combine>g__As|66_0(Mock mock, Type forInterface);
    [CompilerGeneratedAttribute]
internal static ConstructorInfo <TryGetConstructorInvocation>g__Empty|76_2(Type type);
    [CompilerGeneratedAttribute]
private bool <TryGetConstructorInvocation>g__TryCreateArguments|76_3(ConstructorInfo constructor, ObjectGraphContext context, IInstance[]& arguments);
    [CompilerGeneratedAttribute]
internal static string <TryGetConstructorInvocation>g__GetConstructorDisplayString|76_4(ConstructorInfo constructor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Moq.AutoMock.AutoMockerDisposable : object {
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private AutoMocker <Mocker>k__BackingField;
    private AutoMocker Mocker { get; }
    public AutoMockerDisposable(AutoMocker mocker);
    [CompilerGeneratedAttribute]
private AutoMocker get_Mocker();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal static class Moq.AutoMock.CastChecker : object {
    [NullableContextAttribute("1")]
public static bool DoesReturnPrimitive(Expression`1<Func`2<TService, object>> expression);
}
[ExtensionAttribute]
internal static class Moq.AutoMock.ConstructorSelector : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ConstructorInfo SelectCtor(Type type, Type[] existingTypes, BindingFlags bindingFlags);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static ConstructorInfo <SelectCtor>g__Empty|0_2(Type type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Moq.AutoMock.ConstructorTestsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private TestGenerationBehavior <Behavior>k__BackingField;
    public Type TargetType { get; public set; }
    public TestGenerationBehavior Behavior { get; public set; }
    [NullableContextAttribute("1")]
public ConstructorTestsAttribute(Type targetType);
    [NullableContextAttribute("1")]
public ConstructorTestsAttribute(Type targetType, TestGenerationBehavior behavior);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public TestGenerationBehavior get_Behavior();
    [CompilerGeneratedAttribute]
public void set_Behavior(TestGenerationBehavior value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Moq.AutoMock.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool TryCompileGetter(AutoMocker autoMocker, Type funcType, Delegate& delegate);
    [ExtensionAttribute]
public static bool IsDelegateType(Type type);
    [ExtensionAttribute]
public static bool IsMockable(Type type);
}
internal interface Moq.AutoMock.IAutoMockerDisposable {
}
[NullableContextAttribute("2")]
internal interface Moq.AutoMock.IInstance {
    public object Value { get; }
    public bool IsMock { get; }
    public abstract virtual object get_Value();
    public abstract virtual bool get_IsMock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Moq.AutoMock.MockArrayInstance : object {
    private Type _type;
    private List`1<IInstance> _mocks;
    public object Value { get; }
    public bool IsMock { get; }
    public MockArrayInstance(Type type);
    public sealed virtual object get_Value();
    public sealed virtual bool get_IsMock();
    public void Add(IInstance instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Moq.AutoMock.MockExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Lazy`1<MethodInfo> <AsMethod>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<MethodInfo> AsMethod { get; }
    private static MockExtensions();
    [ExtensionAttribute]
public static ISetup`1<T> SetupWithAny(Mock`1<T> mock, string methodName);
    [ExtensionAttribute]
public static ISetup`2<T, TResult> SetupWithAny(Mock`1<T> mock, string methodName);
    private static LambdaExpression GetExpression(string methodName);
    [CompilerGeneratedAttribute]
private static Lazy`1<MethodInfo> get_AsMethod();
    [ExtensionAttribute]
internal static Mock As(Mock mock, Type interfaceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Moq.AutoMock.MockInstance : object {
    [CompilerGeneratedAttribute]
private Mock <Mock>k__BackingField;
    [NullableAttribute("2")]
public object Value { get; }
    public Mock Mock { get; }
    public bool IsMock { get; }
    public MockInstance(Mock value);
    [NullableContextAttribute("2")]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public Mock get_Mock();
    public sealed virtual bool get_IsMock();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Moq.AutoMock.ObjectCreationException : Exception {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <DiagnosticMessages>k__BackingField;
    public IReadOnlyList`1<string> DiagnosticMessages { get; }
    public ObjectCreationException(IReadOnlyList`1<string> diagnosticMessages);
    public ObjectCreationException(string message, IReadOnlyList`1<string> diagnosticMessages);
    public ObjectCreationException(string message, Exception innerException, IReadOnlyList`1<string> diagnosticMessages);
    protected ObjectCreationException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_DiagnosticMessages();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Moq.AutoMock.ObjectGraphContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _diagnostics;
    [CompilerGeneratedAttribute]
private BindingFlags <BindingFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <VisitedTypes>k__BackingField;
    public BindingFlags BindingFlags { get; }
    public HashSet`1<Type> VisitedTypes { get; }
    public IReadOnlyList`1<string> DiagnosticMessages { get; }
    public ObjectGraphContext(bool enablePrivate);
    public ObjectGraphContext(ObjectGraphContext context);
    [CompilerGeneratedAttribute]
public BindingFlags get_BindingFlags();
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_VisitedTypes();
    public IReadOnlyList`1<string> get_DiagnosticMessages();
    public void AddDiagnosticMessage(string message);
    private static BindingFlags GetBindingFlags(bool enablePrivate);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Moq.AutoMock.RealInstance : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    public bool IsMock { get; }
    public RealInstance(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    public sealed virtual bool get_IsMock();
}
public class Moq.AutoMock.Resolvers.ArrayResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.AutoMockerDisposableResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Moq.AutoMock.Resolvers.CacheResolver : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, IInstance> <TypeMap>k__BackingField;
    internal ConcurrentDictionary`2<Type, IInstance> TypeMap { get; }
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<Type, IInstance> get_TypeMap();
    public sealed virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.CancellationTokenResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.EnumerableResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.FuncResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
[NullableContextAttribute("1")]
public interface Moq.AutoMock.Resolvers.IMockResolver {
    public abstract virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.InstanceResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.LazyResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Moq.AutoMock.Resolvers.MockResolutionContext : object {
    [NullableAttribute("2")]
private object _value;
    [CompilerGeneratedAttribute]
private AutoMocker <AutoMocker>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectGraphContext <ObjectGraphContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueProvided>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCache>k__BackingField;
    public AutoMocker AutoMocker { get; }
    public Type RequestType { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public ObjectGraphContext ObjectGraphContext { get; }
    internal bool ValueProvided { get; private set; }
    public bool NoCache { get; public set; }
    public MockResolutionContext(AutoMocker autoMocker, Type requestType, ObjectGraphContext objectGraphContext);
    [CompilerGeneratedAttribute]
public AutoMocker get_AutoMocker();
    [CompilerGeneratedAttribute]
public Type get_RequestType();
    [NullableContextAttribute("2")]
public object get_Value();
    [NullableContextAttribute("2")]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public ObjectGraphContext get_ObjectGraphContext();
    [CompilerGeneratedAttribute]
internal bool get_ValueProvided();
    [CompilerGeneratedAttribute]
private void set_ValueProvided(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCache();
    [CompilerGeneratedAttribute]
public void set_NoCache(bool value);
    public void Deconstruct(AutoMocker& autoMocker, Type& type, Object& value);
}
public class Moq.AutoMock.Resolvers.MockResolver : object {
    private MockBehavior _mockBehavior;
    private DefaultValue _defaultValue;
    [NullableAttribute("2")]
private DefaultValueProvider _defaultValueProvider;
    private bool _callBase;
    public MockResolver(MockBehavior mockBehavior, DefaultValue defaultValue, bool callBase);
    [NullableContextAttribute("2")]
public MockResolver(MockBehavior mockBehavior, DefaultValue defaultValue, DefaultValueProvider defaultValueProvider, bool callBase);
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
public class Moq.AutoMock.Resolvers.SelfResolver : object {
    [NullableContextAttribute("1")]
public sealed virtual void Resolve(MockResolutionContext context);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Moq.AutoMock.Resources.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string VerifyWithValueReturn { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_VerifyWithValueReturn();
}
public enum Moq.AutoMock.TestGenerationBehavior : Enum {
    public int value__;
    public static TestGenerationBehavior Default;
    public static TestGenerationBehavior IgnoreNullableParameters;
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    public bool get_ParameterValue();
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    public bool get_ReturnValue();
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    public string get_ParameterName();
}
[ExcludeFromCodeCoverageAttribute]
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
