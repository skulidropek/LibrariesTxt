[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Delegating.Delegate : object {
    public static IDisposable Disposable(Action delegatee);
    public static IObserver`1<T> Observer(Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
}
internal class Delegating.DelegatingDisposable : object {
    [NullableAttribute("2")]
private Action delegatee;
    [NullableContextAttribute("1")]
public DelegatingDisposable(Action delegatee);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Delegating.DelegatingObserver`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Exception> <onError>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action <onCompleted>P;
    private Action`1<T> onNext;
    public DelegatingObserver`1(Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(T value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class MoreLinq.<ToDataTable>F0E354D6776C3F6045DBE9B1E62FD3ECCDC9336F7DE2E5CB2A38666E1232F3627__Diagnostics : object {
    public static DynamicallyAccessedMemberTypes DynamicallyAccessedPublicPropertiesOrFields;
    [NullableAttribute("1")]
public static string RequiresUnreferencedCodeMessage;
}
internal static class MoreLinq.Assume : object {
    [NullableContextAttribute("1")]
public static T NotNull(T obj);
}
[ExtensionAttribute]
internal static class MoreLinq.CollectionLike : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Nullable`1<CollectionLike`1<T>> TryAsCollectionLike(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MoreLinq.CollectionLike`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ICollection`1<T> rw;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<T> ro;
    public int Count { get; }
    public CollectionLike`1(ICollection`1<T> collection);
    public CollectionLike`1(IReadOnlyCollection`1<T> collection);
    public int get_Count();
    public IEnumerator`1<T> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class MoreLinq.Collections.Dictionary`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`1<TKey>, TValue> dict;
    public TValue Item { get; public set; }
    public Dictionary`2(IEqualityComparer`1<TKey> comparer);
    public TValue get_Item(TKey key);
    public void set_Item(TKey key, TValue value);
    public bool TryGetValue(TKey key, TValue& value);
}
internal static class MoreLinq.Debug : object {
    [NullableContextAttribute("2")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
}
internal static class MoreLinq.Disposable : object {
    [NullableAttribute("1")]
public static IDisposable Nop;
    private static Disposable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MoreLinq.Experimental.AwaitQueryOptions : object {
    public static AwaitQueryOptions Default;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskScheduler <Scheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveOrder>k__BackingField;
    public Nullable`1<int> MaxConcurrency { get; }
    public TaskScheduler Scheduler { get; }
    public bool PreserveOrder { get; }
    private AwaitQueryOptions(Nullable`1<int> maxConcurrency, TaskScheduler scheduler, bool preserveOrder);
    private static AwaitQueryOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrency();
    [CompilerGeneratedAttribute]
public TaskScheduler get_Scheduler();
    [CompilerGeneratedAttribute]
public bool get_PreserveOrder();
    public AwaitQueryOptions WithMaxConcurrency(Nullable`1<int> value);
    public AwaitQueryOptions WithScheduler(TaskScheduler value);
    public AwaitQueryOptions WithPreserveOrder(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MoreLinq.Experimental.ExperimentalEnumerable : object {
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`3<TResult1, TResult2, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`2<IObservable`1<T>, IObservable`1<TResult3>> accumulator3, Func`4<TResult1, TResult2, TResult3, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`2<IObservable`1<T>, IObservable`1<TResult3>> accumulator3, Func`2<IObservable`1<T>, IObservable`1<TResult4>> accumulator4, Func`5<TResult1, TResult2, TResult3, TResult4, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`2<IObservable`1<T>, IObservable`1<TResult3>> accumulator3, Func`2<IObservable`1<T>, IObservable`1<TResult4>> accumulator4, Func`2<IObservable`1<T>, IObservable`1<TResult5>> accumulator5, Func`6<TResult1, TResult2, TResult3, TResult4, TResult5, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`2<IObservable`1<T>, IObservable`1<TResult3>> accumulator3, Func`2<IObservable`1<T>, IObservable`1<TResult4>> accumulator4, Func`2<IObservable`1<T>, IObservable`1<TResult5>> accumulator5, Func`2<IObservable`1<T>, IObservable`1<TResult6>> accumulator6, Func`7<TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`2<IObservable`1<T>, IObservable`1<TResult3>> accumulator3, Func`2<IObservable`1<T>, IObservable`1<TResult4>> accumulator4, Func`2<IObservable`1<T>, IObservable`1<TResult5>> accumulator5, Func`2<IObservable`1<T>, IObservable`1<TResult6>> accumulator6, Func`2<IObservable`1<T>, IObservable`1<TResult7>> accumulator7, Func`8<TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, Func`2<IObservable`1<T>, IObservable`1<TResult1>> accumulator1, Func`2<IObservable`1<T>, IObservable`1<TResult2>> accumulator2, Func`2<IObservable`1<T>, IObservable`1<TResult3>> accumulator3, Func`2<IObservable`1<T>, IObservable`1<TResult4>> accumulator4, Func`2<IObservable`1<T>, IObservable`1<TResult5>> accumulator5, Func`2<IObservable`1<T>, IObservable`1<TResult6>> accumulator6, Func`2<IObservable`1<T>, IObservable`1<TResult7>> accumulator7, Func`2<IObservable`1<T>, IObservable`1<TResult8>> accumulator8, Func`9<TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7, TResult8, TResult> resultSelector);
    private static IDisposable SubscribeSingle(Func`2<IObservable`1<T>, IObservable`1<TResult>> aggregatorSelector, IObservable`1<T> subject, ValueTuple`2[] r, string paramName);
    private static T GetAggregateResult(ValueTuple`2<bool, T> result, string paramName);
    [ExtensionAttribute]
public static IEnumerable`1<T> AsSequential(IAwaitQuery`1<T> source);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> MaxConcurrency(IAwaitQuery`1<T> source, int value);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> UnboundedConcurrency(IAwaitQuery`1<T> source);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> Scheduler(IAwaitQuery`1<T> source, TaskScheduler value);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> AsOrdered(IAwaitQuery`1<T> source);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> AsUnordered(IAwaitQuery`1<T> source);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> PreserveOrder(IAwaitQuery`1<T> source, bool value);
    [ExtensionAttribute]
public static IAwaitQuery`1<T> Await(IEnumerable`1<Task`1<T>> source);
    [ExtensionAttribute]
public static IAwaitQuery`1<TResult> Await(IEnumerable`1<T> source, Func`3<T, CancellationToken, Task`1<TResult>> evaluator);
    [ExtensionAttribute]
public static IAwaitQuery`1<TResult> AwaitCompletion(IEnumerable`1<T> source, Func`3<T, CancellationToken, Task`1<TTaskResult>> evaluator, Func`3<T, Task`1<TTaskResult>, TResult> resultSelector);
    [AsyncStateMachineAttribute("MoreLinq.Experimental.ExperimentalEnumerable/<StartAsync>d__20`2")]
[ExtensionAttribute]
private static Task StartAsync(IEnumerator`1<T> enumerator, Func`2<T, Task`1<TResult>> starter, Action`2<T, Task`1<TResult>> onTaskCompletion, Action onEnd, Nullable`1<int> maxConcurrency, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IEnumerable`1<T> Memoize(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static ValueTuple`2<TCardinality, T> TrySingle(IEnumerable`1<T> source, TCardinality zero, TCardinality one, TCardinality many);
    [ExtensionAttribute]
public static TResult TrySingle(IEnumerable`1<T> source, TCardinality zero, TCardinality one, TCardinality many, Func`3<TCardinality, T, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.Experimental.ExperimentalEnumerable/<<AwaitCompletion>g__Impl|18_1>d`3")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <AwaitCompletion>g__Impl|18_1(IEnumerable`1<T> source, Func`3<T, CancellationToken, Task`1<TTaskResult>> evaluator, Func`3<T, Task`1<TTaskResult>, TResult> resultSelector, Nullable`1<int> maxConcurrency, TaskScheduler scheduler, bool ordered);
}
[NullableContextAttribute("1")]
public interface MoreLinq.Experimental.IAwaitQuery`1 {
    public AwaitQueryOptions Options { get; }
    public abstract virtual AwaitQueryOptions get_Options();
    public abstract virtual IAwaitQuery`1<T> WithOptions(AwaitQueryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MoreLinq.Experimental.MemoizedEnumerable`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<T> cache;
    private object locker;
    private IEnumerable`1<T> source;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerator`1<T> sourceEnumerator;
    private Nullable`1<int> errorIndex;
    [NullableAttribute("2")]
private ExceptionDispatchInfo error;
    public MemoizedEnumerable`1(IEnumerable`1<T> sequence);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
    [IteratorStateMachineAttribute("MoreLinq.Experimental.MemoizedEnumerable`1/<<GetEnumerator>g___|7_0>d")]
[CompilerGeneratedAttribute]
private IEnumerator`1<T> <GetEnumerator>g___|7_0();
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AcquireExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TSource[] Acquire(IEnumerable`1<TSource> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AggregateExtension : object {
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, Func`3<TAccumulate1, TAccumulate2, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, Func`4<TAccumulate1, TAccumulate2, TAccumulate3, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, Func`5<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, Func`6<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, TAccumulate6 seed6, Func`3<TAccumulate6, T, TAccumulate6> accumulator6, Func`7<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, TAccumulate6 seed6, Func`3<TAccumulate6, T, TAccumulate6> accumulator6, TAccumulate7 seed7, Func`3<TAccumulate7, T, TAccumulate7> accumulator7, Func`8<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, TAccumulate6 seed6, Func`3<TAccumulate6, T, TAccumulate6> accumulator6, TAccumulate7 seed7, Func`3<TAccumulate7, T, TAccumulate7> accumulator7, TAccumulate8 seed8, Func`3<TAccumulate8, T, TAccumulate8> accumulator8, Func`9<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TAccumulate8, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AggregateRightExtension : object {
    [ExtensionAttribute]
public static TSource AggregateRight(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
public static TAccumulate AggregateRight(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TSource, TAccumulate, TAccumulate> func);
    [ExtensionAttribute]
public static TResult AggregateRight(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TSource, TAccumulate, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AppendExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Append(IEnumerable`1<T> head, T tail);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AssertCountExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> AssertCount(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> AssertCount(IEnumerable`1<TSource> source, int count, Func`3<int, int, Exception> errorSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AssertExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Assert(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Assert(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Func`2<TSource, Exception> errorSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AtLeastExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool AtLeast(IEnumerable`1<T> source, int count);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.AtMostExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool AtMost(IEnumerable`1<T> source, int count);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.BacksertExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Backsert(IEnumerable`1<T> first, IEnumerable`1<T> second, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.BatchExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource[]> Batch(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Batch(IEnumerable`1<TSource> source, int size, Func`2<TSource[], TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.CartesianExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, Func`3<T1, T2, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, IEnumerable`1<T7> seventh, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, IEnumerable`1<T7> seventh, IEnumerable`1<T8> eighth, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ChooseExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TResult> Choose(IEnumerable`1<T> source, Func`2<T, ValueTuple`2<bool, TResult>> chooser);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.CompareCountExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int CompareCount(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ConsumeExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Consume(IEnumerable`1<T> source);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.CountBetweenExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool CountBetween(IEnumerable`1<T> source, int min, int max);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.CountByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.CountDownExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TResult> CountDown(IEnumerable`1<T> source, int count, Func`3<T, Nullable`1<int>, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.DistinctByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.DuplicatesExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Duplicates(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Duplicates(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.EndsWithExtension : object {
    [ExtensionAttribute]
public static bool EndsWith(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static bool EndsWith(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.EquiZipExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> EquiZip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> EquiZip(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> EquiZip(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.EvaluateExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Evaluate(IEnumerable`1<Func`1<T>> functions);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ExactlyExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Exactly(IEnumerable`1<T> source, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ExceptByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ExcludeExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Exclude(IEnumerable`1<T> sequence, int startIndex, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FallbackIfEmptyExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, IEnumerable`1<T> fallback);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T[] fallback);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback1, T fallback2);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback1, T fallback2, T fallback3);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback1, T fallback2, T fallback3, T fallback4);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FillBackwardExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> FillBackward(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillBackward(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillBackward(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<T, T, T> fillSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FillForwardExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> FillForward(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillForward(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillForward(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<T, T, T> fillSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FirstExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T First(IExtremaEnumerable`1<T> source);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FirstOrDefaultExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FirstOrDefault(IExtremaEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FlattenExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<object> Flatten(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable`1<object> Flatten(IEnumerable source, Func`2<IEnumerable, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<object> Flatten(IEnumerable source, Func`2<object, IEnumerable> selector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FoldExtension : object {
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`2<T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`3<T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`4<T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`5<T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`6<T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`7<T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`8<T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`9<T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`10<T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`11<T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`12<T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`13<T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`14<T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`15<T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`16<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`17<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ForEachExtension : object {
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`2<T, int> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FullGroupJoinExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`3<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>>> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`3<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>>> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`4<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`4<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.FullJoinExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.GroupAdjacentExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.IndexByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> IndexBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> IndexBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.IndexExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> Index(IEnumerable`1<TSource> source, int startIndex);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.InsertExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Insert(IEnumerable`1<T> first, IEnumerable`1<T> second, int index);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.InterleaveExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Interleave(IEnumerable`1<T> sequence, IEnumerable`1[] otherSequences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.LagExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lag(IEnumerable`1<TSource> source, int offset, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lag(IEnumerable`1<TSource> source, int offset, TSource defaultLagValue, Func`3<TSource, TSource, TResult> resultSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.LastExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T Last(IExtremaEnumerable`1<T> source);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.LastOrDefaultExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T LastOrDefault(IExtremaEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.LeadExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lead(IEnumerable`1<TSource> source, int offset, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lead(IEnumerable`1<TSource> source, int offset, TSource defaultLeadValue, Func`3<TSource, TSource, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.LeftJoinExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`3<TSource, TSource, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`3<TSource, TSource, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.MaxByExtension : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use Maxima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Maxima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.MaximaExtension : object {
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Maxima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Maxima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.MinByExtension : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use Minima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Minima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.MinimaExtension : object {
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Minima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Minima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.MoveExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Move(IEnumerable`1<T> source, int fromIndex, int count, int toIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.OrderByExtension : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Func`2<T, TKey> keySelector, OrderByDirection direction);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, OrderByDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.OrderedMergeExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, TKey> keySelector, Func`2<T, TResult> firstSelector, Func`2<T, TResult> secondSelector, Func`3<T, T, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, TKey> keySelector, Func`2<T, TResult> firstSelector, Func`2<T, TResult> secondSelector, Func`3<T, T, TResult> bothSelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PadExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Pad(IEnumerable`1<TSource> source, int width);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Pad(IEnumerable`1<TSource> source, int width, TSource padding);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Pad(IEnumerable`1<TSource> source, int width, Func`2<int, TSource> paddingSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PadStartExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PadStart(IEnumerable`1<TSource> source, int width);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PadStart(IEnumerable`1<TSource> source, int width, TSource padding);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PadStart(IEnumerable`1<TSource> source, int width, Func`2<int, TSource> paddingSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PairwiseExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TResult> Pairwise(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PartialSortByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, OrderByDirection direction);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer, OrderByDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PartialSortExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count, OrderByDirection direction);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count, IComparer`1<T> comparer, OrderByDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PartitionExtension : object {
    [ExtensionAttribute]
public static ValueTuple`2<IEnumerable`1<T>, IEnumerable`1<T>> Partition(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<bool, T>> source, Func`3<IEnumerable`1<T>, IEnumerable`1<T>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<Nullable`1<bool>, T>> source, Func`4<IEnumerable`1<T>, IEnumerable`1<T>, IEnumerable`1<T>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<IEnumerable`1<T>, IEnumerable`1<T>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key, Func`3<IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, Func`4<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key, IEqualityComparer`1<TKey> comparer, Func`3<IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, TKey key3, Func`5<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, IEqualityComparer`1<TKey> comparer, Func`4<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, TKey key3, IEqualityComparer`1<TKey> comparer, Func`5<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PermutationsExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Permutations(IEnumerable`1<T> sequence);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PipeExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Pipe(IEnumerable`1<T> source, Action`1<T> action);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PrependExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource value);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.PreScanExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> PreScan(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> transformation, TSource identity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.RandomSubsetExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> RandomSubset(IEnumerable`1<T> source, int subsetSize);
    [ExtensionAttribute]
public static IEnumerable`1<T> RandomSubset(IEnumerable`1<T> source, int subsetSize, Random rand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.RankByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<int> RankBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<int> RankBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.RankExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<int> Rank(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<int> Rank(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.RepeatExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Repeat(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
public static IEnumerable`1<T> Repeat(IEnumerable`1<T> sequence, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.RightJoinExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.RunLengthEncodeExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<T, int>> RunLengthEncode(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<T, int>> RunLengthEncode(IEnumerable`1<T> sequence, IEqualityComparer`1<T> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ScanByExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TState>> ScanBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TState> seedSelector, Func`4<TState, TKey, TSource, TState> accumulator);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TState>> ScanBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TState> seedSelector, Func`4<TState, TKey, TSource, TState> accumulator, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ScanExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Scan(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> transformation);
    [ExtensionAttribute]
public static IEnumerable`1<TState> Scan(IEnumerable`1<TSource> source, TState seed, Func`3<TState, TSource, TState> transformation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ScanRightExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ScanRight(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
public static IEnumerable`1<TAccumulate> ScanRight(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TSource, TAccumulate, TAccumulate> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SegmentExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Segment(IEnumerable`1<T> source, Func`2<T, bool> newSegmentPredicate);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Segment(IEnumerable`1<T> source, Func`3<T, int, bool> newSegmentPredicate);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Segment(IEnumerable`1<T> source, Func`4<T, T, int, bool> newSegmentPredicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ShuffleExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Shuffle(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> Shuffle(IEnumerable`1<T> source, Random rand);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SingleExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T Single(IExtremaEnumerable`1<T> source);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SingleOrDefaultExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T SingleOrDefault(IExtremaEnumerable`1<T> source);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SkipLastExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> SkipLast(IEnumerable`1<T> source, int count);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SkipUntilExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> SkipUntil(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SliceExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Slice(IEnumerable`1<T> sequence, int startIndex, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SortedMergeExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SortedMerge(IEnumerable`1<TSource> source, OrderByDirection direction, IEnumerable`1[] otherSequences);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SortedMerge(IEnumerable`1<TSource> source, OrderByDirection direction, IComparer`1<TSource> comparer, IEnumerable`1[] otherSequences);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SplitExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator, int count);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, int count);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.StartsWithExtension : object {
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.SubsetsExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Subsets(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Subsets(IEnumerable`1<T> sequence, int subsetSize);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.TagFirstLastExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TResult> TagFirstLast(IEnumerable`1<TSource> source, Func`4<TSource, bool, bool, TResult> resultSelector);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.TakeEveryExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> TakeEvery(IEnumerable`1<TSource> source, int step);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.TakeLastExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> TakeLast(IEnumerable`1<TSource> source, int count);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.TakeUntilExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> TakeUntil(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ThenByExtension : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> ThenBy(IOrderedEnumerable`1<T> source, Func`2<T, TKey> keySelector, OrderByDirection direction);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> ThenBy(IOrderedEnumerable`1<T> source, Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, OrderByDirection direction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ToArrayByIndexExtension : object {
    [ExtensionAttribute]
public static T[] ToArrayByIndex(IEnumerable`1<T> source, Func`2<T, int> indexSelector);
    [ExtensionAttribute]
public static T[] ToArrayByIndex(IEnumerable`1<T> source, int length, Func`2<T, int> indexSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, Func`2<T, int> indexSelector, Func`2<T, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, Func`2<T, int> indexSelector, Func`3<T, int, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, int length, Func`2<T, int> indexSelector, Func`2<T, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, int length, Func`2<T, int> indexSelector, Func`3<T, int, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ToDataTableExtension : object {
    internal static DynamicallyAccessedMemberTypes DynamicallyAccessedPublicPropertiesOrFields;
    internal static string RequiresUnreferencedCodeMessage;
    [ExtensionAttribute]
public static DataTable ToDataTable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static DataTable ToDataTable(IEnumerable`1<T> source, Expression`1[] expressions);
    [ExtensionAttribute]
public static TTable ToDataTable(IEnumerable`1<T> source, TTable table);
    [ExtensionAttribute]
public static TTable ToDataTable(IEnumerable`1<T> source, TTable table, Expression`1[] expressions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ToDelimitedStringExtension : object {
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<bool> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<byte> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<char> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<decimal> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<double> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<float> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<int> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<long> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<sbyte> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<short> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<string> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<UInt32> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<ulong> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<ushort> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<TSource> source, string delimiter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ToDictionaryExtension : object {
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<ValueTuple`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ToHashSetExtension : object {
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ToLookupExtension : object {
    [ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<ValueTuple`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.TraceExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Trace(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Trace(IEnumerable`1<TSource> source, string format);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Trace(IEnumerable`1<TSource> source, Func`2<TSource, string> formatter);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.TransposeExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Transpose(IEnumerable`1<IEnumerable`1<T>> source);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.WindowExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> Window(IEnumerable`1<TSource> source, int size);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.WindowLeftExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> WindowLeft(IEnumerable`1<TSource> source, int size);
}
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.WindowRightExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> WindowRight(IEnumerable`1<TSource> source, int size);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ZipLongestExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipLongest(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipLongest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipLongest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[GeneratedCodeAttribute("MoreLinq.ExtensionsGenerator", "1.0.0.0")]
public static class MoreLinq.Extensions.ZipShortestExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipShortest(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipShortest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipShortest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MoreLinq.ExtremaMembers : object {
    public static string Minima;
    public static string Maxima;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Key = {Key}")]
internal class MoreLinq.Grouping`2 : object {
    internal TKey _key;
    internal int _hashCode;
    internal TElement[] _elements;
    internal int _count;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Grouping`2<TKey, TElement> _hashNext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Grouping`2<TKey, TElement> _next;
    public TKey Key { get; }
    private int System.Collections.Generic.ICollection<TElement>.Count { get; }
    private bool System.Collections.Generic.ICollection<TElement>.IsReadOnly { get; }
    private TElement System.Collections.Generic.IList<TElement>.Item { get; private set; }
    internal Grouping`2(TKey key, int hashCode);
    internal void Add(TElement element);
    internal void Trim();
    [IteratorStateMachineAttribute("MoreLinq.Grouping`2/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual TKey get_Key();
    private sealed virtual override int System.Collections.Generic.ICollection<TElement>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.Contains(TElement item);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.IList<TElement>.IndexOf(TElement item);
    private sealed virtual override TElement System.Collections.Generic.IList<TElement>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.set_Item(int index, TElement value);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.Add(TElement item);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.Remove(TElement item);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.Insert(int index, TElement item);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.RemoveAt(int index);
    [DoesNotReturnAttribute]
private static void ThrowModificationNotSupportedException();
}
[NullableContextAttribute("1")]
public interface MoreLinq.IExtremaEnumerable`1 {
    public abstract virtual IEnumerable`1<T> Take(int count);
    public abstract virtual IEnumerable`1<T> TakeLast(int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MoreLinq.ListLike : object {
    [ExtensionAttribute]
public static ListLike`1<T> AsListLike(List`1<T> list);
    [ExtensionAttribute]
public static ListLike`1<T> ToListLike(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static Nullable`1<ListLike`1<T>> TryAsListLike(IEnumerable`1<T> source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class MoreLinq.ListLike`1 : ValueType {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<T> rw;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<T> ro;
    public int Count { get; }
    public T Item { get; }
    public ListLike`1(IList`1<T> list);
    public ListLike`1(IReadOnlyList`1<T> list);
    public int get_Count();
    public T get_Item(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
internal class MoreLinq.Lookup`2 : object {
    private IEqualityComparer`1<TKey> _comparer;
    private Grouping`2[] _groupings;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Grouping`2<TKey, TElement> _lastGrouping;
    private int _count;
    public int Count { get; }
    public IEnumerable`1<TElement> Item { get; }
    private Lookup`2(IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> Create(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> Create(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> CreateForJoin(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<TElement> get_Item(TKey key);
    public sealed virtual bool Contains(TKey key);
    [IteratorStateMachineAttribute("MoreLinq.Lookup`2/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private int InternalGetHashCode(TKey key);
    internal Grouping`2<TKey, TElement> GetGrouping(TKey key, bool create);
    private void Resize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MoreLinq.MoreEnumerable : object {
    private static String[] OrdinalNumbers;
    private static MoreEnumerable();
    [ExtensionAttribute]
public static TSource[] Acquire(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, Func`3<TAccumulate1, TAccumulate2, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, Func`4<TAccumulate1, TAccumulate2, TAccumulate3, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, Func`5<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, Func`6<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, TAccumulate6 seed6, Func`3<TAccumulate6, T, TAccumulate6> accumulator6, Func`7<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, TAccumulate6 seed6, Func`3<TAccumulate6, T, TAccumulate6> accumulator6, TAccumulate7 seed7, Func`3<TAccumulate7, T, TAccumulate7> accumulator7, Func`8<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<T> source, TAccumulate1 seed1, Func`3<TAccumulate1, T, TAccumulate1> accumulator1, TAccumulate2 seed2, Func`3<TAccumulate2, T, TAccumulate2> accumulator2, TAccumulate3 seed3, Func`3<TAccumulate3, T, TAccumulate3> accumulator3, TAccumulate4 seed4, Func`3<TAccumulate4, T, TAccumulate4> accumulator4, TAccumulate5 seed5, Func`3<TAccumulate5, T, TAccumulate5> accumulator5, TAccumulate6 seed6, Func`3<TAccumulate6, T, TAccumulate6> accumulator6, TAccumulate7 seed7, Func`3<TAccumulate7, T, TAccumulate7> accumulator7, TAccumulate8 seed8, Func`3<TAccumulate8, T, TAccumulate8> accumulator8, Func`9<TAccumulate1, TAccumulate2, TAccumulate3, TAccumulate4, TAccumulate5, TAccumulate6, TAccumulate7, TAccumulate8, TResult> resultSelector);
    [ExtensionAttribute]
public static TSource AggregateRight(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
public static TAccumulate AggregateRight(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TSource, TAccumulate, TAccumulate> func);
    [ExtensionAttribute]
public static TResult AggregateRight(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TSource, TAccumulate, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector);
    private static TResult AggregateRightImpl(ListLike`1<TSource> list, TResult accumulator, Func`3<TSource, TResult, TResult> func, int i);
    public static IEnumerable`1<T> Append(IEnumerable`1<T> head, T tail);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Assert(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Assert(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Func`2<TSource, Exception> errorSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> AssertCount(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> AssertCount(IEnumerable`1<TSource> source, int count, Func`3<int, int, Exception> errorSelector);
    internal static string FormatSequenceLengthErrorMessage(int cmp, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> Backsert(IEnumerable`1<T> first, IEnumerable`1<T> second, int index);
    [ExtensionAttribute]
public static IEnumerable`1<TSource[]> Batch(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Batch(IEnumerable`1<TSource> source, int size, Func`2<TSource[], TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, Func`3<T1, T2, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, IEnumerable`1<T7> seventh, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cartesian(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, IEnumerable`1<T7> seventh, IEnumerable`1<T8> eighth, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Choose(IEnumerable`1<T> source, Func`2<T, ValueTuple`2<bool, TResult>> chooser);
    [ExtensionAttribute]
public static void Consume(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> CountDown(IEnumerable`1<T> source, int count, Func`3<T, Nullable`1<int>, TResult> resultSelector);
    [ExtensionAttribute]
public static bool AtLeast(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static bool AtMost(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static bool Exactly(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static bool CountBetween(IEnumerable`1<T> source, int min, int max);
    private static bool QuantityIterator(IEnumerable`1<T> source, int limit, int min, int max);
    [ExtensionAttribute]
public static int CompareCount(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Duplicates(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Duplicates(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool EndsWith(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static bool EndsWith(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> EquiZip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> EquiZip(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> EquiZip(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [NullableContextAttribute("2")]
private static IEnumerable`1<TResult> EquiZipImpl(IEnumerable`1<T1> s1, IEnumerable`1<T2> s2, IEnumerable`1<T3> s3, IEnumerable`1<T4> s4, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Evaluate(IEnumerable`1<Func`1<T>> functions);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> Exclude(IEnumerable`1<T> sequence, int startIndex, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback1, T fallback2);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback1, T fallback2, T fallback3);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T fallback1, T fallback2, T fallback3, T fallback4);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, T[] fallback);
    [ExtensionAttribute]
public static IEnumerable`1<T> FallbackIfEmpty(IEnumerable`1<T> source, IEnumerable`1<T> fallback);
    [NullableContextAttribute("2")]
private static IEnumerable`1<T> FallbackIfEmptyImpl(IEnumerable`1<T> source, Nullable`1<int> count, T fallback1, T fallback2, T fallback3, T fallback4, IEnumerable`1<T> fallback);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillBackward(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillBackward(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillBackward(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<T, T, T> fillSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<FillBackwardImpl>d__64`1")]
private static IEnumerable`1<T> FillBackwardImpl(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<T, T, T> fillSelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillForward(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillForward(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> FillForward(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<T, T, T> fillSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<FillForwardImpl>d__68`1")]
private static IEnumerable`1<T> FillForwardImpl(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<T, T, T> fillSelector);
    [ExtensionAttribute]
public static IEnumerable`1<object> Flatten(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable`1<object> Flatten(IEnumerable source, Func`2<IEnumerable, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<object> Flatten(IEnumerable source, Func`2<object, IEnumerable> selector);
    [ExtensionAttribute]
private static T[] Fold(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`2<T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`3<T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`4<T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`5<T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`6<T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`7<T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`8<T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`9<T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`10<T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`11<T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`12<T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`13<T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`14<T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`15<T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`16<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static TResult Fold(IEnumerable`1<T> source, Func`17<T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, TResult> folder);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static void ForEach(IEnumerable`1<T> source, Action`2<T, int> action);
    public static IEnumerable`1<T> From(Func`1<T> function);
    public static IEnumerable`1<T> From(Func`1<T> function1, Func`1<T> function2);
    public static IEnumerable`1<T> From(Func`1<T> function1, Func`1<T> function2, Func`1<T> function3);
    public static IEnumerable`1<T> From(Func`1[] functions);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`3<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>>> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`3<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>>> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`4<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullGroupJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`4<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FullJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    public static IEnumerable`1<TResult> Generate(TResult initial, Func`2<TResult, TResult> generator);
    public static IEnumerable`1<TResult> GenerateByIndex(Func`2<int, TResult> generator);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupAdjacent(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<GroupAdjacentImpl>d__112`4")]
[ExtensionAttribute]
private static IEnumerable`1<TResult> GroupAdjacentImpl(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IList`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    private static Grouping`2<TKey, TElement> CreateGroupAdjacentGrouping(TKey key, IList`1<TElement> members);
    private static T IdFn(T x);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> Index(IEnumerable`1<TSource> source, int startIndex);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> IndexBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<int, TSource>> IndexBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> Insert(IEnumerable`1<T> first, IEnumerable`1<T> second, int index);
    [ExtensionAttribute]
public static IEnumerable`1<T> Interleave(IEnumerable`1<T> sequence, IEnumerable`1[] otherSequences);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lag(IEnumerable`1<TSource> source, int offset, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lag(IEnumerable`1<TSource> source, int offset, TSource defaultLagValue, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lead(IEnumerable`1<TSource> source, int offset, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Lead(IEnumerable`1<TSource> source, int offset, TSource defaultLeadValue, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`3<TSource, TSource, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> firstSelector, Func`3<TSource, TSource, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> LeftJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Maxima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Maxima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static T First(IExtremaEnumerable`1<T> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FirstOrDefault(IExtremaEnumerable`1<T> source);
    [ExtensionAttribute]
public static T Last(IExtremaEnumerable`1<T> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T LastOrDefault(IExtremaEnumerable`1<T> source);
    [ExtensionAttribute]
public static T Single(IExtremaEnumerable`1<T> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T SingleOrDefault(IExtremaEnumerable`1<T> source);
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Maxima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Maxima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<ExtremaBy>d__142`3")]
[ExtensionAttribute]
private static IEnumerable`1<TSource> ExtremaBy(IEnumerable`1<TSource> source, Extrema`2<TStore, TSource> extrema, Nullable`1<int> limit, Func`2<TSource, TKey> selector, Func`3<TKey, TKey, int> comparer);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Minima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
[ObsoleteAttribute("Use Minima instead.")]
[ExcludeFromCodeCoverageAttribute]
public static IExtremaEnumerable`1<TSource> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Minima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector);
    [ExtensionAttribute]
public static IExtremaEnumerable`1<TSource> Minima(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
private static int CountUpTo(IEnumerable`1<T> source, int max);
    private static ValueTuple`2<bool, T> Some(T value);
    [ExtensionAttribute]
public static IEnumerable`1<T> Move(IEnumerable`1<T> source, int fromIndex, int count, int toIndex);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Func`2<T, TKey> keySelector, OrderByDirection direction);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, OrderByDirection direction);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> ThenBy(IOrderedEnumerable`1<T> source, Func`2<T, TKey> keySelector, OrderByDirection direction);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> ThenBy(IOrderedEnumerable`1<T> source, Func`2<T, TKey> keySelector, IComparer`1<TKey> comparer, OrderByDirection direction);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, TKey> keySelector, Func`2<T, TResult> firstSelector, Func`2<T, TResult> secondSelector, Func`3<T, T, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<T> first, IEnumerable`1<T> second, Func`2<T, TKey> keySelector, Func`2<T, TResult> firstSelector, Func`2<T, TResult> secondSelector, Func`3<T, T, TResult> bothSelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OrderedMerge(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Pad(IEnumerable`1<TSource> source, int width);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Pad(IEnumerable`1<TSource> source, int width, TSource padding);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Pad(IEnumerable`1<TSource> source, int width, Func`2<int, TSource> paddingSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<PadImpl>d__165`1")]
private static IEnumerable`1<T> PadImpl(IEnumerable`1<T> source, int width, T padding, Func`2<int, T> paddingSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PadStart(IEnumerable`1<TSource> source, int width);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PadStart(IEnumerable`1<TSource> source, int width, TSource padding);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PadStart(IEnumerable`1<TSource> source, int width, Func`2<int, TSource> paddingSelector);
    private static IEnumerable`1<T> PadStartImpl(IEnumerable`1<T> source, int width, T padding, Func`2<int, T> paddingSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Pairwise(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count, OrderByDirection direction);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> PartialSort(IEnumerable`1<T> source, int count, IComparer`1<T> comparer, OrderByDirection direction);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, OrderByDirection direction);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PartialSortBy(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer, OrderByDirection direction);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<PartialSortByImpl>d__179`2")]
private static IEnumerable`1<TSource> PartialSortByImpl(IEnumerable`1<TSource> source, int count, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> keyComparer, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static ValueTuple`2<IEnumerable`1<T>, IEnumerable`1<T>> Partition(IEnumerable`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<T> source, Func`2<T, bool> predicate, Func`3<IEnumerable`1<T>, IEnumerable`1<T>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<bool, T>> source, Func`3<IEnumerable`1<T>, IEnumerable`1<T>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<Nullable`1<bool>, T>> source, Func`4<IEnumerable`1<T>, IEnumerable`1<T>, IEnumerable`1<T>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key, Func`3<IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key, IEqualityComparer`1<TKey> comparer, Func`3<IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, Func`4<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, IEqualityComparer`1<TKey> comparer, Func`4<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, TKey key3, Func`5<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult Partition(IEnumerable`1<IGrouping`2<TKey, TElement>> source, TKey key1, TKey key2, TKey key3, IEqualityComparer`1<TKey> comparer, Func`5<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [NullableContextAttribute("2")]
private static TResult PartitionImpl(IEnumerable`1<IGrouping`2<TKey, TElement>> source, int count, TKey key1, TKey key2, TKey key3, IEqualityComparer`1<TKey> comparer, Func`5<IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<TElement>, IEnumerable`1<IGrouping`2<TKey, TElement>>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Permutations(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
public static IEnumerable`1<T> Pipe(IEnumerable`1<T> source, Action`1<T> action);
    public static IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> PreScan(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> transformation, TSource identity);
    public static IEnumerable`1<int> Random();
    public static IEnumerable`1<int> Random(Random rand);
    public static IEnumerable`1<int> Random(int maxValue);
    public static IEnumerable`1<int> Random(Random rand, int maxValue);
    public static IEnumerable`1<int> Random(int minValue, int maxValue);
    public static IEnumerable`1<int> Random(Random rand, int minValue, int maxValue);
    public static IEnumerable`1<double> RandomDouble();
    public static IEnumerable`1<double> RandomDouble(Random rand);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<RandomImpl>d__203`1")]
private static IEnumerable`1<T> RandomImpl(Random rand, Func`2<Random, T> nextValue);
    [ExtensionAttribute]
public static IEnumerable`1<T> RandomSubset(IEnumerable`1<T> source, int subsetSize);
    [ExtensionAttribute]
public static IEnumerable`1<T> RandomSubset(IEnumerable`1<T> source, int subsetSize, Random rand);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<RandomSubsetImpl>d__206`1")]
private static IEnumerable`1<T> RandomSubsetImpl(IEnumerable`1<T> source, Random rand, Nullable`1<int> subsetSize);
    [ExtensionAttribute]
public static IEnumerable`1<int> Rank(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<int> Rank(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<int> RankBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<int> RankBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> Repeat(IEnumerable`1<T> sequence, int count);
    [ExtensionAttribute]
public static IEnumerable`1<T> Repeat(IEnumerable`1<T> sequence);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<RepeatImpl>d__213`1")]
private static IEnumerable`1<T> RepeatImpl(IEnumerable`1<T> sequence, Nullable`1<int> count);
    public static IEnumerable`1<T> Return(T item);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, Func`2<TSource, TResult> secondSelector, Func`3<TSource, TSource, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> RightJoin(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<T, int>> RunLengthEncode(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<T, int>> RunLengthEncode(IEnumerable`1<T> sequence, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Scan(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> transformation);
    [ExtensionAttribute]
public static IEnumerable`1<TState> Scan(IEnumerable`1<TSource> source, TState seed, Func`3<TState, TSource, TState> transformation);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<ScanImpl>d__224`2")]
private static IEnumerable`1<TState> ScanImpl(IEnumerable`1<TSource> source, Func`3<TState, TSource, TState> transformation, Func`2<IEnumerator`1<TSource>, ValueTuple`2<bool, TState>> seeder);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TState>> ScanBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TState> seedSelector, Func`4<TState, TKey, TSource, TState> accumulator);
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<TKey, TState>> ScanBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TState> seedSelector, Func`4<TState, TKey, TSource, TState> accumulator, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ScanRight(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
public static IEnumerable`1<TAccumulate> ScanRight(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TSource, TAccumulate, TAccumulate> func);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<ScanRightImpl>d__229`2")]
private static IEnumerable`1<TResult> ScanRightImpl(IEnumerable`1<TSource> source, Func`3<TSource, TResult, TResult> func, Func`2<ListLike`1<TSource>, Nullable`1<ValueTuple`2<TResult, int>>> seeder);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Segment(IEnumerable`1<T> source, Func`2<T, bool> newSegmentPredicate);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Segment(IEnumerable`1<T> source, Func`3<T, int, bool> newSegmentPredicate);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Segment(IEnumerable`1<T> source, Func`4<T, T, int, bool> newSegmentPredicate);
    public static IEnumerable`1<int> Sequence(int start, int stop);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<Sequence>d__234")]
public static IEnumerable`1<int> Sequence(int start, int stop, int step);
    [ExtensionAttribute]
public static IEnumerable`1<T> Shuffle(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> Shuffle(IEnumerable`1<T> source, Random rand);
    [ExtensionAttribute]
public static IEnumerable`1<T> SkipLast(IEnumerable`1<T> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipUntil(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> Slice(IEnumerable`1<T> sequence, int startIndex, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SortedMerge(IEnumerable`1<TSource> source, OrderByDirection direction, IEnumerable`1[] otherSequences);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SortedMerge(IEnumerable`1<TSource> source, OrderByDirection direction, IComparer`1<TSource> comparer, IEnumerable`1[] otherSequences);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, TSource separator, IEqualityComparer`1<TSource> comparer, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<TSource>> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Split(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<T> first, IEnumerable`1<T> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<T> first, IEnumerable`1<T> second, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Subsets(IEnumerable`1<T> sequence);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Subsets(IEnumerable`1<T> sequence, int subsetSize);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<Subsets>d__259`1")]
private static IEnumerable`1<IList`1<T>> Subsets(List`1<T> set, int subsetSize);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> TagFirstLast(IEnumerable`1<TSource> source, Func`4<TSource, bool, bool, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeEvery(IEnumerable`1<TSource> source, int step);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeLast(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeUntil(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static T[] ToArrayByIndex(IEnumerable`1<T> source, Func`2<T, int> indexSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, Func`2<T, int> indexSelector, Func`2<T, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, Func`2<T, int> indexSelector, Func`3<T, int, TResult> resultSelector);
    [ExtensionAttribute]
public static T[] ToArrayByIndex(IEnumerable`1<T> source, int length, Func`2<T, int> indexSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, int length, Func`2<T, int> indexSelector, Func`2<T, TResult> resultSelector);
    [ExtensionAttribute]
public static TResult[] ToArrayByIndex(IEnumerable`1<T> source, int length, Func`2<T, int> indexSelector, Func`3<T, int, TResult> resultSelector);
    [ExtensionAttribute]
public static DataTable ToDataTable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static TTable ToDataTable(IEnumerable`1<T> source, TTable table);
    [ExtensionAttribute]
public static DataTable ToDataTable(IEnumerable`1<T> source, Expression`1[] expressions);
    [ExtensionAttribute]
public static TTable ToDataTable(IEnumerable`1<T> source, TTable table, Expression`1[] expressions);
    private static TTable ToDataTable(IEnumerable`1<T> source, TTable table, MemberInfo[] members);
    private static MemberInfo[] PrepareMemberInfos(ICollection`1<Expression`1<Func`2<T, object>>> expressions);
    private static MemberInfo[] BuildOrBindSchema(DataTable table, MemberInfo[] members);
    [NullableContextAttribute("2")]
private static Func`2<T, Object[]> CreateShredder(MemberInfo[] members);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<TSource> source, string delimiter);
    private static string ToDelimitedStringImpl(IEnumerable`1<T> source, string delimiter, Func`3<StringBuilder, T, StringBuilder> append);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<bool> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<byte> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<char> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<decimal> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<double> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<float> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<int> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<long> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<sbyte> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<short> source, string delimiter);
    [ExtensionAttribute]
public static string ToDelimitedString(IEnumerable`1<string> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<UInt32> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<ulong> source, string delimiter);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static string ToDelimitedString(IEnumerable`1<ushort> source, string delimiter);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<ValueTuple`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<ValueTuple`2<TKey, TValue>> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ILookup`2<TKey, TValue> ToLookup(IEnumerable`1<ValueTuple`2<TKey, TValue>> source, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Trace(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Trace(IEnumerable`1<TSource> source, string format);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Trace(IEnumerable`1<TSource> source, Func`2<TSource, string> formatter);
    private static IEnumerable`1<TSource> TraceImpl(IEnumerable`1<TSource> source, Func`2<TSource, string> formatter);
    [ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Transpose(IEnumerable`1<IEnumerable`1<T>> source);
    public static IEnumerable`1<T> TraverseBreadthFirst(T root, Func`2<T, IEnumerable`1<T>> childrenSelector);
    public static IEnumerable`1<T> TraverseDepthFirst(T root, Func`2<T, IEnumerable`1<T>> childrenSelector);
    public static IEnumerable`1<TResult> Unfold(TState state, Func`2<TState, T> generator, Func`2<T, bool> predicate, Func`2<T, TState> stateSelector, Func`2<T, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> Window(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> WindowLeft(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> WindowRight(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
private static IEnumerable`1<IList`1<TSource>> WindowRightWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [NullableContextAttribute("2")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<ZipImpl>d__317`5")]
private static IEnumerable`1<TResult> ZipImpl(IEnumerable`1<T1> s1, IEnumerable`1<T2> s2, IEnumerable`1<T3> s3, IEnumerable`1<T4> s4, Func`5<T1, T2, T3, T4, TResult> resultSelector, int limit, Folder`2<IEnumerator, Exception> errorSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipLongest(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipLongest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipLongest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipShortest(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipShortest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> ZipShortest(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [NullableContextAttribute("2")]
private static IEnumerable`1<TResult> ZipImpl(IEnumerable`1<T1> s1, IEnumerable`1<T2> s2, IEnumerable`1<T3> s3, IEnumerable`1<T4> s4, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Assert>g___|14_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <Assert>g___|14_0(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Func`2<TSource, Exception> errorSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<AssertCount>g___|16_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <AssertCount>g___|16_0(IEnumerable`1<TSource> source, int count, Func`3<int, int, Exception> errorSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Backsert>g___|18_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Backsert>g___|18_0(IEnumerable`1<T> first, IEnumerable`1<T> second, int index);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Batch>g___|20_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Batch>g___|20_0(IEnumerable`1<TSource> source, int size, Func`2<TSource[], TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|21_0>d`3")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|21_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, Func`3<T1, T2, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|22_0>d`4")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|22_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, Func`4<T1, T2, T3, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|23_0>d`5")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|23_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, Func`5<T1, T2, T3, T4, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|24_0>d`6")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|24_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, Func`6<T1, T2, T3, T4, T5, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|25_0>d`7")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|25_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, Func`7<T1, T2, T3, T4, T5, T6, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|26_0>d`8")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|26_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, IEnumerable`1<T7> seventh, Func`8<T1, T2, T3, T4, T5, T6, T7, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Cartesian>g___|27_0>d`9")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Cartesian>g___|27_0(IEnumerable`1<T1> first, IEnumerable`1<T2> second, IEnumerable`1<T3> third, IEnumerable`1<T4> fourth, IEnumerable`1<T5> fifth, IEnumerable`1<T6> sixth, IEnumerable`1<T7> seventh, IEnumerable`1<T8> eighth, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Choose>g___|28_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Choose>g___|28_0(IEnumerable`1<T> source, Func`2<T, ValueTuple`2<bool, TResult>> chooser);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<CountBy>g___|31_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<TKey, int>> <CountBy>g___|31_0(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <CountBy>g__Loop|31_1(IEqualityComparer`1<TKey> cmp, <>c__DisplayClass31_0`2& );
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<CountDown>g__IterateList|32_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <CountDown>g__IterateList|32_0(ListLike`1<T> list, int count, Func`3<T, Nullable`1<int>, TResult> resultSelector);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<CountDown>g__IterateCollection|32_1>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <CountDown>g__IterateCollection|32_1(CollectionLike`1<T> collection, int count, Func`3<T, Nullable`1<int>, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<CountDown>g__IterateSequence|32_2>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <CountDown>g__IterateSequence|32_2(IEnumerable`1<T> source, int count, Func`3<T, Nullable`1<int>, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<DistinctBy>g___|40_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <DistinctBy>g___|40_0(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [CompilerGeneratedAttribute]
internal static bool <EndsWith>g__Impl|44_0(IEnumerable`1<T> first, IEnumerable`1<T> second, int count, IEqualityComparer`1<T> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<ExceptBy>g__Impl|52_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <ExceptBy>g__Impl|52_0(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Exclude>g___|53_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Exclude>g___|53_0(IEnumerable`1<T> sequence, int startIndex, int count);
    [NullableContextAttribute("2")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<FallbackIfEmptyImpl>g___|60_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <FallbackIfEmptyImpl>g___|60_0(IEnumerable`1<T> source, Nullable`1<int> count, T fallback1, T fallback2, T fallback3, T fallback4, IEnumerable`1<T> fallback);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Flatten>g___|71_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<object> <Flatten>g___|71_0(IEnumerable source, Func`2<object, IEnumerable> selector);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static InvalidOperationException <Fold>g__LengthError|72_0(int cmp, <>c__DisplayClass72_0`1& );
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<From>g___|91_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <From>g___|91_0(Func`1<T> function);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<From>g___|92_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <From>g___|92_0(Func`1<T> function1, Func`1<T> function2);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<From>g___|93_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <From>g___|93_0(Func`1<T> function1, Func`1<T> function2, Func`1<T> function3);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<FullGroupJoin>g___|98_0>d`4")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <FullGroupJoin>g___|98_0(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`4<TKey, IEnumerable`1<TFirst>, IEnumerable`1<TSecond>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<FullJoin>g__Impl|102_0>d`4")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <FullJoin>g__Impl|102_0(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IEqualityComparer`1<TKey> comparer);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Generate>g___|103_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Generate>g___|103_0(TResult initial, Func`2<TResult, TResult> generator);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Insert>g___|121_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Insert>g___|121_0(IEnumerable`1<T> first, IEnumerable`1<T> second, int index);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Interleave>g__Impl|122_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Interleave>g__Impl|122_0(IEnumerable`1<IEnumerable`1<T>> sequences);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Lag>g___|124_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Lag>g___|124_0(IEnumerable`1<TSource> source, int offset, TSource defaultLagValue, Func`3<TSource, TSource, TResult> resultSelector);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Lead>g___|126_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Lead>g___|126_0(IEnumerable`1<TSource> source, int offset, TSource defaultLeadValue, Func`3<TSource, TSource, TResult> resultSelector);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <ExtremaBy>g__Extrema|142_0(IEnumerable`1<TSource> source, Extrema`2<TStore, TSource> extrema, Nullable`1<int> limit, Func`2<TSource, TKey> selector, Func`3<TKey, TKey, int> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Move>g___|150_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Move>g___|150_0(IEnumerable`1<T> source, int bufferStartIndex, int bufferSize, int bufferYieldIndex);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <Move>g__MoveNext|150_1(IEnumerator`1<T> e, <>c__DisplayClass150_0`1& );
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<OrderedMerge>g___|161_0>d`4")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <OrderedMerge>g___|161_0(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`2<TFirst, TKey> firstKeySelector, Func`2<TSecond, TKey> secondKeySelector, Func`2<TFirst, TResult> firstSelector, Func`2<TSecond, TResult> secondSelector, Func`3<TFirst, TSecond, TResult> bothSelector, IComparer`1<TKey> comparer);
    [NullableContextAttribute("2")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<PadStartImpl>g___|169_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <PadStartImpl>g___|169_0(IEnumerable`1<T> source, int width, T padding, Func`2<int, T> paddingSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Pairwise>g___|170_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Pairwise>g___|170_0(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TResult> resultSelector);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static Nullable`1<int> <PartialSortByImpl>g__Insert|179_0(List`1<T> list, T item, IComparer`1<T> comparer, <>c__DisplayClass179_0`2& );
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Permutations>g___|191_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IList`1<T>> <Permutations>g___|191_0(IEnumerable`1<T> sequence);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Pipe>g___|192_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Pipe>g___|192_0(IEnumerable`1<T> source, Action`1<T> action);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<PreScan>g___|194_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <PreScan>g___|194_0(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> transformation, TSource identity);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<RankBy>g___|210_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<int> <RankBy>g___|210_0(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<RunLengthEncode>g___|221_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<T, int>> <RunLengthEncode>g___|221_0(IEnumerable`1<T> sequence, IEqualityComparer`1<T> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<ScanBy>g___|226_0>d`3")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<TKey, TState>> <ScanBy>g___|226_0(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TState> seedSelector, Func`4<TState, TKey, TSource, TState> accumulator, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Segment>g___|232_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IEnumerable`1<T>> <Segment>g___|232_0(IEnumerable`1<T> source, Func`4<T, T, int, bool> newSegmentPredicate);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<SkipUntil>g___|238_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <SkipUntil>g___|238_0(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Slice>g__SliceList|239_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <Slice>g__SliceList|239_0(int startIndex, int count, int listCount, Func`2<int, T> indexer);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<SortedMerge>g__Impl|241_2>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <SortedMerge>g__Impl|241_2(IEnumerable`1<IEnumerable`1<TSource>> sequences, Func`3<TSource, TSource, bool> precedenceFunc);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Split>g___|254_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Split>g___|254_0(IEnumerable`1<TSource> source, Func`2<TSource, bool> separatorFunc, int count, Func`2<IEnumerable`1<TSource>, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Subsets>g___|257_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IList`1<T>> <Subsets>g___|257_0(IEnumerable`1<T> sequence);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Subsets>g___|258_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IList`1<T>> <Subsets>g___|258_0(IEnumerable`1<T> sequence, int subsetSize);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<TagFirstLast>g___|260_0>d`2")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <TagFirstLast>g___|260_0(IEnumerable`1<TSource> source, Func`4<TSource, bool, bool, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<TakeUntil>g___|263_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TSource> <TakeUntil>g___|263_0(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [CompilerGeneratedAttribute]
internal static MemberInfo <PrepareMemberInfos>g__GetAccessedMember|275_1(LambdaExpression lambda);
    [CompilerGeneratedAttribute]
internal static Type <BuildOrBindSchema>g__GetElementaryTypeOfPropertyOrField|276_0(MemberInfo member);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Transpose>g___|308_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IEnumerable`1<T>> <Transpose>g___|308_0(IEnumerable`1<IEnumerable`1<T>> source);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<TraverseBreadthFirst>g___|309_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <TraverseBreadthFirst>g___|309_0(T root, Func`2<T, IEnumerable`1<T>> childrenSelector);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<TraverseDepthFirst>g___|310_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <TraverseDepthFirst>g___|310_0(T root, Func`2<T, IEnumerable`1<T>> childrenSelector);
    [NullableContextAttribute("0")]
[IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Unfold>g___|311_0>d`3")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<TResult> <Unfold>g___|311_0(TState initialState, Func`2<TState, T> generator, Func`2<T, bool> predicate, Func`2<T, TState> stateSelector, Func`2<T, TResult> resultSelector);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<Window>g___|312_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IList`1<TSource>> <Window>g___|312_0(IEnumerable`1<TSource> source, int size);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<WindowLeft>g___|313_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IList`1<TSource>> <WindowLeft>g___|313_0(IEnumerable`1<TSource> source, int size);
    [IteratorStateMachineAttribute("MoreLinq.MoreEnumerable/<<WindowRightWhile>g___|315_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<IList`1<TSource>> <WindowRightWhile>g___|315_0(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static T <ZipImpl>g__Read|317_0(IEnumerator`1& e, int n, <>c__DisplayClass317_0`5& );
}
public enum MoreLinq.OrderByDirection : Enum {
    public int value__;
    public static OrderByDirection Ascending;
    public static OrderByDirection Descending;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class MoreLinq.PendNode`1 : object {
    public static PendNode`1<T> WithSource(IEnumerable`1<T> source);
    public PendNode`1<T> Prepend(T item);
    public PendNode`1<T> Concat(T item);
    [IteratorStateMachineAttribute("MoreLinq.PendNode`1/<GetEnumerator>d__5")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class MoreLinq.Reactive.Observable : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDisposable Subscribe(IObservable`1<T> source, Action`1<T> onNext, Action`1<Exception> onError, Action onCompleted);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MoreLinq.Reactive.Subject`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IObserver`1<T>> observers;
    private bool completed;
    [NullableAttribute("2")]
private Exception error;
    private bool shouldDeleteObserver;
    private bool HasObservers { get; }
    private List`1<IObserver`1<T>> Observers { get; }
    private bool IsMuted { get; }
    private bool get_HasObservers();
    private List`1<IObserver`1<T>> get_Observers();
    private bool get_IsMuted();
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
    public sealed virtual void OnNext(T value);
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnCompleted();
    private void OnFinality(TState& state, TState value, Action`2<IObserver`1<T>, TState> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MoreLinq.ReverseComparer`1 : object {
    private IComparer`1<T> underlying;
    public ReverseComparer`1(IComparer`1<T> underlying);
    public sealed virtual int Compare(T x, T y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MoreLinq.SequenceException : Exception {
    private static string DefaultMessage;
    [NullableContextAttribute("2")]
public SequenceException(string message);
    [NullableContextAttribute("2")]
public SequenceException(string message, Exception innerException);
    protected SequenceException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class MoreLinq.UnreachableException : Exception {
    public UnreachableException(string message);
    public UnreachableException(string message, Exception innerException);
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresUnreferencedCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
[ExcludeFromCodeCoverageAttribute]
[ConditionalAttribute("MULTI_TARGETING_SUPPORT_ATTRIBUTES")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[IsReadOnlyAttribute]
[ExcludeFromCodeCoverageAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private string ToStringFromEnd();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
