public class Curiosity.Metadata.Models.Company : object {
    [DebuggerBrowsableAttribute]
private int <size>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <id>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <domain>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <founded>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <size_range>k__BackingField;
    [DebuggerBrowsableAttribute]
private Location <location>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <industry>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <facebook_url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <twitter_url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <crunchbase_url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <linkedin_url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <linkedin_id>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <email_domains>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <profiles>k__BackingField;
    public int size { get; public set; }
    public string id { get; public set; }
    public string domain { get; public set; }
    public string name { get; public set; }
    public string founded { get; public set; }
    public string size_range { get; public set; }
    public Location location { get; public set; }
    public string industry { get; public set; }
    public string facebook_url { get; public set; }
    public string twitter_url { get; public set; }
    public string crunchbase_url { get; public set; }
    public string linkedin_url { get; public set; }
    public string linkedin_id { get; public set; }
    public String[] email_domains { get; public set; }
    public String[] profiles { get; public set; }
    public int get_size();
    public void set_size(int value);
    public string get_id();
    public void set_id(string value);
    public string get_domain();
    public void set_domain(string value);
    public string get_name();
    public void set_name(string value);
    public string get_founded();
    public void set_founded(string value);
    public string get_size_range();
    public void set_size_range(string value);
    public Location get_location();
    public void set_location(Location value);
    public string get_industry();
    public void set_industry(string value);
    public string get_facebook_url();
    public void set_facebook_url(string value);
    public string get_twitter_url();
    public void set_twitter_url(string value);
    public string get_crunchbase_url();
    public void set_crunchbase_url(string value);
    public string get_linkedin_url();
    public void set_linkedin_url(string value);
    public string get_linkedin_id();
    public void set_linkedin_id(string value);
    public String[] get_email_domains();
    public void set_email_domains(String[] value);
    public String[] get_profiles();
    public void set_profiles(String[] value);
}
public class MessagePack.IgnoreMemberAttribute : Attribute {
}
public class MessagePack.KeyAttribute : Attribute {
    public KeyAttribute(int key);
}
public class MessagePack.MessagePackObjectAttribute : Attribute {
    public MessagePackObjectAttribute(bool keyAsPropertyName);
}
public class MessagePack.SerializationConstructorAttribute : Attribute {
}
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Mosaik.Colors : object {
    private static String[] Normal;
    private static String[] Dark;
    private static String[] Light;
    private static Colors();
    public static string LighterFor(string text);
    public static string DarkerFor(string text);
    public static string For(string text);
    private static String[] InitializeFrom(String[] normal, bool isDark);
    public static string GetTextColorFor(string color);
    public static string GrayFor(string text);
}
public static class Mosaik.Components.Alert : object {
    public static void Error(string title, string message);
    public static void Info(string title, string message);
    public static void Success(string title, string message);
    public static void Warning(string title, string message);
    private static void Show(AlertType type, string title, string message);
}
public interface Mosaik.Components.NLP.IPattern {
    public abstract virtual bool IsEmpty();
}
public interface Mosaik.Components.NLP.IPatternParent {
    public abstract virtual void Add(IPattern pattern);
    public abstract virtual void Remove(IPattern pattern);
}
public class Mosaik.Components.NLP.MatchingPatternPrototype : object {
    public List`1<PatternUnitPrototype[]> Patterns;
    public string Name;
}
public class Mosaik.Components.NLP.PatternGroup : object {
    public List`1<PatternUnitPrototype> Patterns;
    private HTMLDivElement RenderedElement;
    private bool AllowEdit;
    private Action`2<IPattern, IPatternParent> OnEditClick;
    private Action`2<IPattern, IPatternParent> OnDeleteClick;
    private IPatternParent Parent;
    public sealed virtual void Add(IPattern pattern);
    public PatternGroup Clone();
    public sealed virtual void Remove(IPattern pattern);
    public sealed virtual bool IsEmpty();
    public HTMLElement Render(bool allowEdit, Action`2<IPattern, IPatternParent> onEditClick, Action`2<IPattern, IPatternParent> onDeleteClick, IPatternParent parent);
    private void RefreshRender();
    private void <RefreshRender>b__11_0(HTMLElement el);
    private void <RefreshRender>b__11_4(MouseEvent e);
    private void <RefreshRender>b__11_1(HTMLElement el);
    private void <RefreshRender>b__11_5(MouseEvent e);
}
public class Mosaik.Components.NLP.PatternSpotter.ObservableMatchingPattern : object {
    [DebuggerBrowsableAttribute]
private ObservableList`1<ObservableList`1<PatternUnit>> <Patterns>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    public ObservableList`1<ObservableList`1<PatternUnit>> Patterns { get; public set; }
    public string Name { get; public set; }
    public ObservableList`1<ObservableList`1<PatternUnit>> get_Patterns();
    public void set_Patterns(ObservableList`1<ObservableList`1<PatternUnit>> value);
    public string get_Name();
    public void set_Name(string value);
    public static ObservableMatchingPattern FromResponse(SerializableMatchingPattern plain);
    public SerializableMatchingPattern ToResponse();
}
public class Mosaik.Components.NLP.PatternSpotter.PatternUnit : object {
    public PatternMatchingMode Mode;
    public bool Optional;
    public bool CaseSensitive;
    public PatternUnitType Type;
    public PartOfSpeech[] POS;
    public string Suffix;
    public string Prefix;
    public string Shape;
    public string Token;
    public String[] Set;
    public string EntityType;
    public PatternUnit LeftSide;
    public PatternUnit RightSide;
    public Char[] ValidChars;
    public int MinLength;
    public int MaxLength;
    public int MaxMatches;
    public PatternUnit Clone();
    public sealed virtual bool Equals(PatternUnit other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Mosaik.Components.NLP.PatternSpotter.SerializableMatchingPattern : object {
    public List`1<PatternUnit[]> Patterns;
    public string Name;
    public sealed virtual bool Equals(SerializableMatchingPattern other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Mosaik.Components.NLP.PatternUnitPrototype : object {
    public PatternMatchingMode Mode;
    public bool Optional;
    public bool CaseSensitive;
    public PatternUnitType Type;
    public PartOfSpeech[] POS;
    public string Suffix;
    public string Prefix;
    public string Shape;
    public string Token;
    public String[] Set;
    public string EntityType;
    public PatternUnitPrototype LeftSide;
    public PatternUnitPrototype RightSide;
    public Char[] ValidChars;
    public int MinLength;
    public int MaxLength;
    private HTMLDivElement RenderedElement;
    internal IPatternParent Parent;
    private bool AllowEdit;
    private Action`2<IPattern, IPatternParent> OnEditClick;
    private Action`2<IPattern, IPatternParent> OnDeleteClick;
    public sealed virtual bool IsEmpty();
    public sealed virtual void Add(IPattern pattern);
    public sealed virtual void Remove(IPattern pattern);
    public HTMLElement Render(bool allowEdit, Action`2<IPattern, IPatternParent> onEditClick, Action`2<IPattern, IPatternParent> onDeleteClick, IPatternParent parent);
    private void RefreshRender();
    private void AppendMatchType(PatternUnitType targetType, HTMLElement div, Func`1<HTMLElement> child);
    public void UpdateFrom(PatternUnitPrototype source);
    public PatternUnitPrototype Clone();
    private void <RefreshRender>b__25_0(MouseEvent e);
    private void <RefreshRender>b__25_26(MouseEvent e);
    private void <RefreshRender>b__25_27(MouseEvent e);
    private HTMLElement <RefreshRender>b__25_1();
    private HTMLElement <RefreshRender>b__25_2();
    private HTMLElement <RefreshRender>b__25_3();
    private HTMLElement <RefreshRender>b__25_4();
    private HTMLElement <RefreshRender>b__25_5();
    private HTMLElement <RefreshRender>b__25_6();
    private HTMLElement <RefreshRender>b__25_7();
    private HTMLElement <RefreshRender>b__25_8();
    private HTMLElement <RefreshRender>b__25_9();
    private HTMLElement <RefreshRender>b__25_10();
    private HTMLElement <RefreshRender>b__25_25();
}
[MessagePackObjectAttribute("False")]
public class Mosaik.Components.NodeRendering.FooterCommands : object {
    [DebuggerBrowsableAttribute]
private IFooterCommandBarItem[] <AdditionalCommands>k__BackingField;
    [KeyAttribute("4")]
public IFooterCommandBarItem[] AdditionalCommands { get; public set; }
    public IFooterCommandBarItem[] get_AdditionalCommands();
    public void set_AdditionalCommands(IFooterCommandBarItem[] value);
    public FooterCommands Clone();
}
public interface Mosaik.Components.NodeRendering.ICompactViewItem {
}
public interface Mosaik.Components.NodeRendering.IFooterCommandBarItem {
    public abstract virtual IFooterCommandBarItem Clone();
}
public interface Mosaik.Components.NodeRendering.IFooterItem {
    public abstract virtual IFooterItem Clone();
}
public interface Mosaik.Components.NodeRendering.IHeaderItem {
    public abstract virtual IHeaderItem Clone();
}
public interface Mosaik.Components.NodeRendering.IHeaderLabelItem {
}
public interface Mosaik.Components.NodeRendering.ILabelItem {
}
public interface Mosaik.Components.NodeRendering.INodeRendererItem {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual INodeRendererItem Clone();
    public abstract virtual IComponent Render(Node node, RenderingLocationOption renderingOn, Action`2<INodeRendererItem, IComponent> onCustomise);
    public abstract virtual IEnumerable`1<ValueTuple`2<Type, Func`1<INodeRendererItem>>> GetWrapperOptions();
    public abstract virtual bool CanContainChildContent(Type type, RenderingLocationOption renderingOn);
}
[MessagePackObjectAttribute("False")]
public class Mosaik.Components.NodeRendering.NodeRendererDefinition : object {
    [DebuggerBrowsableAttribute]
private IHeaderItem[] <Header>k__BackingField;
    [DebuggerBrowsableAttribute]
private INodeRendererItem <ContentCard>k__BackingField;
    [DebuggerBrowsableAttribute]
private INodeRendererItem <ContentView>k__BackingField;
    [DebuggerBrowsableAttribute]
private IFooterItem[] <Footer>k__BackingField;
    [DebuggerBrowsableAttribute]
private FooterCommands <FooterCommands>k__BackingField;
    [DebuggerBrowsableAttribute]
private NodeRendererSettings <NodeRendererSettings>k__BackingField;
    public static JsonSerializerSettings JsonSettings;
    [KeyAttribute("0")]
public IHeaderItem[] Header { get; public set; }
    [KeyAttribute("1")]
public INodeRendererItem ContentCard { get; public set; }
    [KeyAttribute("2")]
public INodeRendererItem ContentView { get; public set; }
    [KeyAttribute("3")]
public IFooterItem[] Footer { get; public set; }
    [KeyAttribute("4")]
public FooterCommands FooterCommands { get; public set; }
    [KeyAttribute("5")]
public NodeRendererSettings NodeRendererSettings { get; public set; }
    [SerializationConstructorAttribute]
public NodeRendererDefinition(IHeaderItem[] header, INodeRendererItem contentCard, INodeRendererItem contentView, IFooterItem[] footer, FooterCommands footerCommands, NodeRendererSettings nodeRendererSettings);
    private static NodeRendererDefinition();
    public static NodeRendererDefinition GetEmpty();
    public IHeaderItem[] get_Header();
    public void set_Header(IHeaderItem[] value);
    public INodeRendererItem get_ContentCard();
    public void set_ContentCard(INodeRendererItem value);
    public INodeRendererItem get_ContentView();
    public void set_ContentView(INodeRendererItem value);
    public IFooterItem[] get_Footer();
    public void set_Footer(IFooterItem[] value);
    public FooterCommands get_FooterCommands();
    public void set_FooterCommands(FooterCommands value);
    public NodeRendererSettings get_NodeRendererSettings();
    public void set_NodeRendererSettings(NodeRendererSettings value);
    internal NodeRendererDefinition Clone();
    public string ToJson();
    public static NodeRendererDefinition FromJson(string json);
    public static Dictionary`2<string, NodeRendererDefinition> DictionaryFromJson(string json);
}
[MessagePackObjectAttribute("False")]
public class Mosaik.Components.NodeRendering.NodeRendererSettings : object {
    [DebuggerBrowsableAttribute]
private bool <IsLargePreview>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <UserSuggestionsForFields>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <UserSuggestionsForAliases>k__BackingField;
    [KeyAttribute("0")]
public bool IsLargePreview { get; public set; }
    [KeyAttribute("1")]
public String[] UserSuggestionsForFields { get; public set; }
    [KeyAttribute("2")]
public bool UserSuggestionsForAliases { get; public set; }
    [SerializationConstructorAttribute]
public NodeRendererSettings(bool isLargePreview, String[] userSuggestionsForFields, bool userSuggestionsForAliases);
    public bool get_IsLargePreview();
    public void set_IsLargePreview(bool value);
    public String[] get_UserSuggestionsForFields();
    public void set_UserSuggestionsForFields(String[] value);
    public bool get_UserSuggestionsForAliases();
    public void set_UserSuggestionsForAliases(bool value);
    internal NodeRendererSettings Clone();
}
public enum Mosaik.Components.NodeRendering.RenderingLocationOption : Enum {
    public int value__;
    public static RenderingLocationOption Header;
    public static RenderingLocationOption Footer;
    public static RenderingLocationOption CompactView;
    public static RenderingLocationOption FullView;
}
public class Mosaik.Core.Shared.AIQueueStatus : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FieldName>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <IndexedSinceStarted>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeSpan <IndexingSince>k__BackingField;
    [DebuggerBrowsableAttribute]
private Double[] <Counts>k__BackingField;
    public string NodeType { get; public set; }
    public string FieldName { get; public set; }
    public int IndexedSinceStarted { get; public set; }
    public TimeSpan IndexingSince { get; public set; }
    public Double[] Counts { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public int get_IndexedSinceStarted();
    public void set_IndexedSinceStarted(int value);
    public TimeSpan get_IndexingSince();
    public void set_IndexingSince(TimeSpan value);
    public Double[] get_Counts();
    public void set_Counts(Double[] value);
}
public class Mosaik.Core.Shared.AISearchStatus : object {
    [DebuggerBrowsableAttribute]
private long <MemoryUsage>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <VectorsCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <ProcessingCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIQueueStatus[] <StatusPerType>k__BackingField;
    public long MemoryUsage { get; public set; }
    public long VectorsCount { get; public set; }
    public long ProcessingCount { get; public set; }
    public AIQueueStatus[] StatusPerType { get; public set; }
    public long get_MemoryUsage();
    public void set_MemoryUsage(long value);
    public long get_VectorsCount();
    public void set_VectorsCount(long value);
    public long get_ProcessingCount();
    public void set_ProcessingCount(long value);
    public AIQueueStatus[] get_StatusPerType();
    public void set_StatusPerType(AIQueueStatus[] value);
}
public class Mosaik.Core.Shared.Debouncer : object {
    private double timeoutId;
    private static object timeouts;
    private static Debouncer();
    public void Debounce(Action debouncedAction, double timeoutMilliseconds);
    public void Debounce(Func`1<Task> debouncedAction, double timeoutMilliseconds);
    public static void Debounce(string id, Action debouncedAction, double timeoutMilliseconds);
    public static void Debounce(string id, Func`1<Task> debouncedAction, double timeoutMilliseconds);
}
public class Mosaik.Core.Shared.DesktopExtractorStatus : object {
    [DebuggerBrowsableAttribute]
private CurrentExtractingStatus <CurrentExtractingStatus>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ExtractingStatusReason>k__BackingField;
    [DebuggerBrowsableAttribute]
private ExtractionPauseType <ExtractionPauseType>k__BackingField;
    public CurrentExtractingStatus CurrentExtractingStatus { get; public set; }
    public string ExtractingStatusReason { get; public set; }
    public ExtractionPauseType ExtractionPauseType { get; public set; }
    public CurrentExtractingStatus get_CurrentExtractingStatus();
    public void set_CurrentExtractingStatus(CurrentExtractingStatus value);
    public string get_ExtractingStatusReason();
    public void set_ExtractingStatusReason(string value);
    public ExtractionPauseType get_ExtractionPauseType();
    public void set_ExtractionPauseType(ExtractionPauseType value);
}
public class Mosaik.Core.Shared.DownloadStatus : object {
    [DebuggerBrowsableAttribute]
private string <Error>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Progress>k__BackingField;
    public string Error { get; public set; }
    public string Message { get; public set; }
    public float Progress { get; public set; }
    public string get_Error();
    public void set_Error(string value);
    public string get_Message();
    public void set_Message(string value);
    public float get_Progress();
    public void set_Progress(float value);
}
public class Mosaik.Core.Shared.ExtractionStatus : object {
    [DebuggerBrowsableAttribute]
private ExtractorStatus[] <ExtractorsStatus>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, FileQueueStatus> <FileQueueStatus>k__BackingField;
    public ExtractorStatus[] ExtractorsStatus { get; public set; }
    public Dictionary`2<string, FileQueueStatus> FileQueueStatus { get; public set; }
    public ExtractorStatus[] get_ExtractorsStatus();
    public void set_ExtractorsStatus(ExtractorStatus[] value);
    public Dictionary`2<string, FileQueueStatus> get_FileQueueStatus();
    public void set_FileQueueStatus(Dictionary`2<string, FileQueueStatus> value);
}
public class Mosaik.Core.Shared.ExtractorStatus : object {
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <RequestID>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <FileSizeInMb>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <MemoryUsageInMb>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <CpuUsagePercent>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <ExtractorStarted>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <TimeReceived>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FileUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Progress>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <LastProgressUpdate>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <ProcessId>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <ExtractedFiles>k__BackingField;
    public Nullable`1<int> RequestID { get; public set; }
    public float FileSizeInMb { get; public set; }
    public float MemoryUsageInMb { get; public set; }
    public float CpuUsagePercent { get; public set; }
    public Nullable`1<DateTimeOffset> ExtractorStarted { get; public set; }
    public Nullable`1<DateTimeOffset> TimeReceived { get; public set; }
    public string FileUID { get; public set; }
    public string Message { get; public set; }
    public float Progress { get; public set; }
    public DateTimeOffset LastProgressUpdate { get; public set; }
    public int ProcessId { get; public set; }
    public int ExtractedFiles { get; public set; }
    public TimeSpan Elapsed { get; }
    public UID128 FileUIDAsUID { get; }
    public Nullable`1<int> get_RequestID();
    public void set_RequestID(Nullable`1<int> value);
    public float get_FileSizeInMb();
    public void set_FileSizeInMb(float value);
    public float get_MemoryUsageInMb();
    public void set_MemoryUsageInMb(float value);
    public float get_CpuUsagePercent();
    public void set_CpuUsagePercent(float value);
    public Nullable`1<DateTimeOffset> get_ExtractorStarted();
    public void set_ExtractorStarted(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_TimeReceived();
    public void set_TimeReceived(Nullable`1<DateTimeOffset> value);
    public string get_FileUID();
    public void set_FileUID(string value);
    public string get_Message();
    public void set_Message(string value);
    public float get_Progress();
    public void set_Progress(float value);
    public DateTimeOffset get_LastProgressUpdate();
    public void set_LastProgressUpdate(DateTimeOffset value);
    public int get_ProcessId();
    public void set_ProcessId(int value);
    public int get_ExtractedFiles();
    public void set_ExtractedFiles(int value);
    public TimeSpan get_Elapsed();
    public UID128 get_FileUIDAsUID();
    public ExtractorStatus Clone();
}
public class Mosaik.Core.Shared.FileQueueStatus : object {
    [DebuggerBrowsableAttribute]
private Double[] <Counts>k__BackingField;
    [DebuggerBrowsableAttribute]
private Double[] <SizesInMB>k__BackingField;
    public Double[] Counts { get; public set; }
    public Double[] SizesInMB { get; public set; }
    public Double[] get_Counts();
    public void set_Counts(Double[] value);
    public Double[] get_SizesInMB();
    public void set_SizesInMB(Double[] value);
}
public class Mosaik.Core.Shared.SourceFileExtractionStatus : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<FilesType, FileQueueStatus> <FileQueueStatus>k__BackingField;
    public Dictionary`2<FilesType, FileQueueStatus> FileQueueStatus { get; public set; }
    public Dictionary`2<FilesType, FileQueueStatus> get_FileQueueStatus();
    public void set_FileQueueStatus(Dictionary`2<FilesType, FileQueueStatus> value);
}
public static class Mosaik.CurrentUser : object {
    [DebuggerBrowsableAttribute]
private static bool <IsAdmin>k__BackingField;
    [DebuggerBrowsableAttribute]
private static bool <IsOnlyReadOnlyAdmin>k__BackingField;
    [DebuggerBrowsableAttribute]
private static bool <IsGuest>k__BackingField;
    [DebuggerBrowsableAttribute]
private static HashSet`1<UserRole> <Roles>k__BackingField;
    [DebuggerBrowsableAttribute]
private static HashSet`1<UID128> <AccessGroups>k__BackingField;
    [DebuggerBrowsableAttribute]
private static UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <UserName>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <FirstName>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <LastName>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <Email>k__BackingField;
    private static string authToken;
    [DebuggerBrowsableAttribute]
private static string <BearerToken>k__BackingField;
    [DebuggerBrowsableAttribute]
private static EventHandler`1<UID128> onLogout;
    [DebuggerBrowsableAttribute]
private static EventHandler`1<UID128> onLogin;
    public static bool IsCuriosityInternal { get; }
    public static bool IsAdmin { get; private set; }
    public static bool IsOnlyReadOnlyAdmin { get; private set; }
    public static bool IsGuest { get; private set; }
    public static HashSet`1<UserRole> Roles { get; private set; }
    public static HashSet`1<UID128> AccessGroups { get; private set; }
    public static UID128 UID { get; private set; }
    public static string UserName { get; private set; }
    public static string FirstName { get; public set; }
    public static string LastName { get; public set; }
    public static string FullName { get; }
    public static string Email { get; public set; }
    public static string AuthToken { get; private set; }
    public static string BearerToken { get; private set; }
    public static bool get_IsCuriosityInternal();
    public static bool get_IsAdmin();
    private static void set_IsAdmin(bool value);
    public static bool get_IsOnlyReadOnlyAdmin();
    private static void set_IsOnlyReadOnlyAdmin(bool value);
    public static bool get_IsGuest();
    private static void set_IsGuest(bool value);
    public static HashSet`1<UserRole> get_Roles();
    private static void set_Roles(HashSet`1<UserRole> value);
    public static HashSet`1<UID128> get_AccessGroups();
    private static void set_AccessGroups(HashSet`1<UID128> value);
    public static UID128 get_UID();
    private static void set_UID(UID128 value);
    public static string get_UserName();
    private static void set_UserName(string value);
    public static string get_FirstName();
    public static void set_FirstName(string value);
    public static string get_LastName();
    public static void set_LastName(string value);
    public static string get_FullName();
    public static string get_Email();
    public static void set_Email(string value);
    public static string get_AuthToken();
    private static void set_AuthToken(string value);
    public static string get_BearerToken();
    private static void set_BearerToken(string value);
    public static bool IsAdminOrHas(UserRole[] roles);
    public static void Clear();
    public static void Set(string token, UID128 uid, string userName, string firstName, string lastName, string email, bool isAdmin, HashSet`1<UserRole> roles, HashSet`1<UID128> accessGroups, string deployment, string licensedTo, bool isDesktopApp, bool activateSupport);
    public static void add_onLogout(EventHandler`1<UID128> value);
    public static void remove_onLogout(EventHandler`1<UID128> value);
    public static void add_onLogin(EventHandler`1<UID128> value);
    public static void remove_onLogin(EventHandler`1<UID128> value);
    public static void Logout();
}
public static class Mosaik.Entities : object {
    [DebuggerBrowsableAttribute]
private static Dictionary`2<string, EntityDefinition> <Definitions>k__BackingField;
    [DebuggerBrowsableAttribute]
private static Action`1<EntityDefinition> <Modifier>k__BackingField;
    private static HTMLStyleElement _previous;
    private static SingleSemaphoreSlim _singleLoad;
    public static Dictionary`2<string, EntityDefinition> Definitions { get; private set; }
    private static Action`1<EntityDefinition> Modifier { get; public set; }
    private static Entities();
    public static bool IsHidden(string entityType);
    public static Dictionary`2<string, EntityDefinition> get_Definitions();
    private static void set_Definitions(Dictionary`2<string, EntityDefinition> value);
    private static Action`1<EntityDefinition> get_Modifier();
    public static void set_Modifier(Action`1<EntityDefinition> value);
    private static void RecreateStyles();
    private static string CreateEntityStyle(EntityDefinition ed);
    public static void UpdateEntityStylesFromServer(Action onLoaded, bool force);
    internal static string <CreateEntityStyle>g__MakeSafeName|12_0(string name);
    internal static void <UpdateEntityStylesFromServer>g__RegisterEntity|13_1(string entityType, Color color, bool hidden, string friendlyName);
}
[ObjectLiteralAttribute]
public class Mosaik.FileMimeType : object {
    [DebuggerBrowsableAttribute]
private FilesType <fileType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <mimeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <prioForMimeType>k__BackingField;
    public FilesType fileType { get; public set; }
    public string mimeType { get; public set; }
    public int prioForMimeType { get; public set; }
    public FileMimeType(FilesType fileType, string mimeType, int prioForMimeType);
    public FilesType get_fileType();
    public void set_fileType(FilesType value);
    public string get_mimeType();
    public void set_mimeType(string value);
    public int get_prioForMimeType();
    public void set_prioForMimeType(int value);
}
public enum Mosaik.FilesType : Enum {
    public ushort value__;
    public static FilesType Slides;
    public static FilesType PDFs;
    public static FilesType Documents;
    public static FilesType Emails;
    public static FilesType Archives;
    public static FilesType Image;
    public static FilesType Text;
    public static FilesType Webpage;
    public static FilesType Sheets;
    public static FilesType Drawings;
    public static FilesType Videos;
    public static FilesType Unknown;
    public static FilesType Markdown;
    public static FilesType Audio;
    public static FilesType Books;
    public static FilesType Calendar;
    public static FilesType Database;
    public static FilesType Code;
}
public class Mosaik.FilesTypeHelper : object {
    public static int FILES_TYPE_COUNT;
}
public static class Mosaik.FrontEnd.Analytics : object {
    private static bool _isActivated;
    public static string LicensedTo;
    private static string _fullName;
    private static string _email;
    [DebuggerBrowsableAttribute]
private static bool <IsTrial>k__BackingField;
    [DebuggerBrowsableAttribute]
private static bool <IsDesktopApp>k__BackingField;
    public static bool IsTrial { get; public set; }
    public static bool IsDesktopApp { get; public set; }
    public static bool get_IsTrial();
    public static void set_IsTrial(bool value);
    public static bool get_IsDesktopApp();
    public static void set_IsDesktopApp(bool value);
    public static bool TryActivate();
    public static void Register(string fullName, string email);
    public static void Track(EventType type);
    public static void Track(EventType type, object parameters);
    private static string ToEventIdentifier(string str);
}
public static class Mosaik.FrontEnd.Core.External.Gravatar : object {
    public static string GetUrlFor(string email, int sizePixels);
}
[ExtensionAttribute]
public static class Mosaik.FrontEnd.Core.JsObjectExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> Entries(object jsObject);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToDictionary(object jsObject);
}
public static class Mosaik.FrontEnd.Core.SupportChat : object {
    private static bool _activated;
    private static bool _open;
    private static bool _loaded;
    [DebuggerBrowsableAttribute]
private static bool <Disable>k__BackingField;
    private static MutationObserver _observer;
    [DebuggerBrowsableAttribute]
private static Action _onActivated;
    [DebuggerBrowsableAttribute]
private static Action`1<HTMLIFrameElement> OnIFrameCreated;
    [DebuggerBrowsableAttribute]
private static Action`1<HTMLAnchorElement> OnAnchorCreated;
    public static bool Disable { get; public set; }
    public static bool IsActive { get; }
    public static bool IsOpen { get; }
    public static bool get_Disable();
    public static void set_Disable(bool value);
    public static void Activate(string fullName, string email, string deployment, string licensedTo, Nullable`1<bool> isAdmin, Nullable`1<bool> isDesktopApp, Nullable`1<PlanType> planType);
    public static bool get_IsActive();
    public static bool get_IsOpen();
    public static void add__onActivated(Action value);
    public static void remove__onActivated(Action value);
    private static void Register(string fullName, string email, string deployment, string licensedTo, Nullable`1<bool> isAdmin, Nullable`1<bool> isDesktopApp, Nullable`1<PlanType> planType);
    public static void AddPlanType(PlanType planType);
    public static void add_OnIFrameCreated(Action`1<HTMLIFrameElement> value);
    public static void remove_OnIFrameCreated(Action`1<HTMLIFrameElement> value);
    public static void add_OnAnchorCreated(Action`1<HTMLAnchorElement> value);
    public static void remove_OnAnchorCreated(Action`1<HTMLAnchorElement> value);
    private static void MonitorIFrameCreation();
    public static void OpenChat();
    public static void CloseChat();
    public static void ToggleChat();
    public static void ShowChat();
    public static void HideChat();
    public static void OpenDoc(string id, string locale);
    public static void OpenDocsSearch();
    public static void SearchDocs(string text);
    public static void SendMessageAsVisitor(string message);
    public static void StartThread(string threadId);
    public static void EndThread(string threadId);
    public static void ShowMessageAsOperator(string message);
    public static void MarkAllAsRead();
    public static void Trigger(string triggerId);
    internal static void <MonitorIFrameCreation>g__CheckMounted|24_1(MutationRecord[] mutationRecords);
    internal static void <MonitorIFrameCreation>g__CheckElement|24_2(HTMLElement element);
}
public static class Mosaik.FrontEnd.DocsLinks : object {
    [DebuggerBrowsableAttribute]
private static string <UsingSearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <Feedback>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <TermsOfService>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <PrivacyPolicy>k__BackingField;
    [DebuggerBrowsableAttribute]
private static string <Changelog>k__BackingField;
    public static string JoinSlack;
    public static string DownloadCuriosityApp;
    public static string AIAssistantInfoPage;
    public static string DeployWorkspaceInfoPage;
    public static string UsingSearch { get; public set; }
    public static string Feedback { get; public set; }
    public static string TermsOfService { get; public set; }
    public static string PrivacyPolicy { get; public set; }
    public static string Changelog { get; public set; }
    private static DocsLinks();
    public static string get_UsingSearch();
    public static void set_UsingSearch(string value);
    public static string get_Feedback();
    public static void set_Feedback(string value);
    public static string get_TermsOfService();
    public static void set_TermsOfService(string value);
    public static string get_PrivacyPolicy();
    public static void set_PrivacyPolicy(string value);
    public static string get_Changelog();
    public static void set_Changelog(string value);
}
public static class Mosaik.FrontEnd.DOMPurify : object {
    private static bool _loaded;
    [DebuggerStepThroughAttribute]
public static Task`1<string> Sanitize(string html);
}
public static class Mosaik.FrontEnd.Helpers.Code.LevenshteinDistance : object {
    public static int Between(string userTyped, string fullEntry, bool forAutocomplete);
}
public class Mosaik.FrontEnd.Helpers.CSV.ChunkStreamer : object {
    private ParserHandle _handle;
    private bool _paused;
    protected bool _finished;
    protected Stream _inputFile;
    protected Uri _inputUrl;
    private int _baseIndex;
    private string _partialLine;
    protected int _rowCount;
    protected long _start;
    private bool isFirstChunk;
    private Result _completeResults;
    protected Config _config;
    public ChunkStreamer(Config config);
    public Result parseChunk(string chunk);
    protected virtual Result _nextChunk();
    protected void _sendError(Error error);
    private void replaceConfig(Config config);
}
public class Mosaik.FrontEnd.Helpers.CSV.Config : object {
    public string delimiter;
    public string newline;
    public char quoteChar;
    public bool header;
    public bool dynamicTyping;
    public int preview;
    public Encoding encoding;
    public bool worker;
    public string comments;
    public Action`2<Result, ParserHandle> step;
    public Action`1<Result> complete;
    public Action`1<Error> error;
    public bool skipEmptyLines;
    public Action`2<Result, ParserHandle> chunk;
    public Nullable`1<bool> fastMode;
    public Func`2<string, string> beforeFirstChunk;
    public int chunkSize;
}
public class Mosaik.FrontEnd.Helpers.CSV.Error : object {
    public string type;
    public string code;
    public string message;
    public Nullable`1<int> row;
    public Nullable`1<int> index;
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Mosaik.FrontEnd.Helpers.CSV.Meta : object {
    public string delimiter;
    public string linebreak;
    public bool aborted;
    public List`1<string> fields;
    public bool truncated;
    public int cursor;
    public bool paused;
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Mosaik.FrontEnd.Helpers.CSV.Papa : object {
    public static bool IS_WORKER;
    public static string RECORD_SEP;
    public static string UNIT_SEP;
    public static string BYTE_ORDER_MARK;
    public static String[] BAD_DELIMITERS;
    public static int LocalChunkSize;
    public static int RemoteChunkSize;
    public static string DefaultDelimiter;
    private static Papa();
    public static void parseFile(File file, Action`1<Result> onResult, Config config);
    public static Task`1<Result> parseFileAsync(File file, Config config);
    public static Result parse(string input, Config config);
    private static Result parse(MemoryStream file, Config config);
    public static Config copy(Config obj);
    public static bool isFunction(Delegate func);
    [ExtensionAttribute]
public static string Substring(string input, int startIndex, int endIndex);
    [ExtensionAttribute]
public static string Substring(string input, int startIndex);
    [ExtensionAttribute]
public static string Substr(string input, int startIndex, int length);
    [ExtensionAttribute]
public static string Substr(string input, int startIndex);
}
public class Mosaik.FrontEnd.Helpers.CSV.Parser : object {
    private string delim;
    private string newline;
    private char quoteChar;
    private string comments;
    private Action`2<Result, ParserHandle> step;
    private int preview;
    private Nullable`1<bool> fastMode;
    private int cursor;
    private bool aborted;
    private List`1<List`1<string>> data;
    private List`1<Error> errors;
    private List`1<string> row;
    private int lastCursor;
    public Parser(Config config);
    public Result parse(string input, int baseIndex, bool ignoreLastRow);
    public void abort();
    public int getCharIndex();
}
public class Mosaik.FrontEnd.Helpers.CSV.ParserHandle : object {
    private int _stepCounter;
    private string _input;
    private Parser _parser;
    private bool _paused;
    private bool _aborted;
    private bool _delimiterError;
    private List`1<string> _fields;
    private Result _results;
    private Config _config;
    public ChunkStreamer streamer;
    public ParserHandle(Config config);
    public Result parse(string input, int baseIndex, bool ignoreLastRow);
    public bool paused();
    public void pause();
    public void resume();
    public bool aborted();
    public void abort();
    private DelimiterResult guessDelimiter(string input);
    private string guessLineEndings(string input);
    private void addError(string type, string code, string msg, Nullable`1<int> row);
}
public class Mosaik.FrontEnd.Helpers.CSV.Result : object {
    public List`1<List`1<string>> data;
    public List`1<Dictionary`2<string, string>> dataWithHeader;
    public List`1<Error> errors;
    public Meta meta;
}
public class Mosaik.FrontEnd.Helpers.CSV.StringStreamer : ChunkStreamer {
    private string input;
    private string remaining;
    public StringStreamer(Config config);
    private static Config setupConfig(Config config);
    public Result stream(string s);
    protected virtual Result _nextChunk();
}
public class Mosaik.GraphDB.AssemblyNameIgnoringSerializationBinder : object {
    private static Dictionary`2<string, Type> _typeNameToTypeCache;
    [DebuggerBrowsableAttribute]
private static AssemblyNameIgnoringSerializationBinder <Instance>k__BackingField;
    public static AssemblyNameIgnoringSerializationBinder Instance { get; }
    private static AssemblyNameIgnoringSerializationBinder();
    public static AssemblyNameIgnoringSerializationBinder get_Instance();
    public sealed virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
    public sealed virtual Type BindToType(string assemblyName, string typeName);
    private static string RemoveAssemblyNamesFromGenericTypeParams(string typeName);
    private static string ReadToEndOfBracketedContent(string value);
    private static string RemoveSingleAssemblyName(string typeName);
}
public class Mosaik.GraphDB.Training.ModelScores`1 : object {
    [DebuggerBrowsableAttribute]
private Overlap<TLabel> <LabelsOverlap>k__BackingField;
    [DebuggerBrowsableAttribute]
private F1<TLabel> <MacroF1>k__BackingField;
    [DebuggerBrowsableAttribute]
private PR<TLabel> <MacroPR>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<TLabel, F1<TLabel>> <F1perLabel>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<TLabel, PR<TLabel>> <PRperLabel>k__BackingField;
    public Overlap<TLabel> LabelsOverlap { get; public set; }
    public F1<TLabel> MacroF1 { get; public set; }
    public PR<TLabel> MacroPR { get; public set; }
    public Dictionary`2<TLabel, F1<TLabel>> F1perLabel { get; public set; }
    public Dictionary`2<TLabel, PR<TLabel>> PRperLabel { get; public set; }
    public Overlap<TLabel> get_LabelsOverlap();
    public void set_LabelsOverlap(Overlap<TLabel> value);
    public F1<TLabel> get_MacroF1();
    public void set_MacroF1(F1<TLabel> value);
    public PR<TLabel> get_MacroPR();
    public void set_MacroPR(PR<TLabel> value);
    public Dictionary`2<TLabel, F1<TLabel>> get_F1perLabel();
    public void set_F1perLabel(Dictionary`2<TLabel, F1<TLabel>> value);
    public Dictionary`2<TLabel, PR<TLabel>> get_PRperLabel();
    public void set_PRperLabel(Dictionary`2<TLabel, PR<TLabel>> value);
}
public class Mosaik.GraphDB.Training.TrainTestScores`1 : object {
    [DebuggerBrowsableAttribute]
private ModelScores`1<TLabel> <Train>k__BackingField;
    [DebuggerBrowsableAttribute]
private ModelScores`1<TLabel> <Test>k__BackingField;
    public ModelScores`1<TLabel> Train { get; public set; }
    public ModelScores`1<TLabel> Test { get; public set; }
    public ModelScores`1<TLabel> get_Train();
    public void set_Train(ModelScores`1<TLabel> value);
    public ModelScores`1<TLabel> get_Test();
    public void set_Test(ModelScores`1<TLabel> value);
}
public class Mosaik.Helpers.CodeViewer : object {
    private HTMLElement _editorDiv;
    private object _monaco;
    private string _text;
    private string _language;
    private bool _autoresizeToDisableVerticalScrolling;
    public string Text { get; public set; }
    public CodeViewer(bool autoresizeToDisableVerticalScrolling);
    public string get_Text();
    public void set_Text(string value);
    public CodeViewer SetText(string text);
    public CodeViewer SetLanguageByExtension(string extension);
    public CodeViewer SetLanguage(string lang);
    public void SetDisabled(bool disabled);
    public IComponent Build(Action`1<CodeViewer> onRendered, string width, string height, Action`1<object> options);
    public void Refresh();
    private void Init(Action`1<CodeViewer> onRendered, Action`1<object> options);
}
public static class Mosaik.Helpers.DocumentHelper : object {
    public static TokensDatum[] GetTokenized(Document doc, int tokensLimit);
    [DebuggerStepThroughAttribute]
public static Task`1<Document> GetDocumentForFieldAsync(UID128 uid, string field);
    [DebuggerStepThroughAttribute]
public static Task`1<Document> GetDocument(UID128 uid);
    [DebuggerStepThroughAttribute]
public static Task`1<HTMLElement> ForFieldFullAsync(UID128 uid, string field, Action`1<EntityClickEvent> onClick, Func`2<string, bool> isEntityHidden);
    [DebuggerStepThroughAttribute]
public static Task`1<HTMLElement> ForFieldSimpleAsync(UID128 uid, string field, Action`1<EntityClickEvent> onClick, Func`2<string, bool> isEntityHidden);
    public static HTMLElement FastEmailRender(Document document);
}
public static class Mosaik.Helpers.Documents : object {
    private static int _CONTEXT_WINDOW_;
    private static bool _initializedStyles;
    private static Char[] WhiteSpaces;
    private static Documents();
    public static HTMLDivElement FastRender(Document doc, Action`1<EntityClickEvent> onClick, bool collapseNearHighlighted, int tokensLimit, bool needStyles, Func`2<string, bool> isEntityHidden);
    private static string GetTextWithElipsis(string v, bool hasElipsis);
    private static bool IsFollowedByLineBreak(string value, int v);
    public static IComponent RenderWithToggle(Document doc, SettableObservable`1<bool> showTokensProminentObservable, Action`1<EntityClickEvent> onClick, int tokensLimit);
    public static HTMLDivElement Render(Document doc, int tokensLimit, bool showTokensProminent, Action`1<EntityClickEvent> onClick, Func`2<string, bool> isEntityHidden);
    private static void OnSelected(Document doc, HTMLElement divDoc, UIEvent e, Action`1<EntityClickEvent> onClick);
    private static Int32[] IdToBounds(string tokenID);
    private static string TokenToID(TokensDatum token);
    internal static bool <OnSelected>g__IsInDocument|8_0(Element element, HTMLElement& parent);
}
public class Mosaik.Helpers.EntityClickEvent : object {
    [DebuggerBrowsableAttribute]
private string <EntityType>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    private HTMLCollection _nodes;
    private ReadOnlyArray`1<HTMLElement> _elementsFromSelection;
    [DebuggerBrowsableAttribute]
private bool <HasEntitiesInText>k__BackingField;
    public bool IsNewEntity { get; }
    public string EntityType { get; }
    public UID128 UID { get; }
    public ReadOnlyArray`1<HTMLElement> Elements { get; }
    public bool HasEntitiesInText { get; }
    public EntityClickEvent(HTMLCollection nodes, string entityType, UID128 nodeUID);
    public EntityClickEvent(HTMLElement[] elementsFromSelection, bool hasEntitiesInText);
    public bool get_IsNewEntity();
    public string get_EntityType();
    public UID128 get_UID();
    public ReadOnlyArray`1<HTMLElement> get_Elements();
    public bool get_HasEntitiesInText();
    public void DoneHandlingSelection();
}
[ExtensionAttribute]
public static class Mosaik.Helpers.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IList`1<T>> Split(IEnumerable`1<T> source, int chunkSize);
    public static string GraphTimeToString(string dateFromGraph, string format);
    public static string TrimToSize(string input, int targetLength, string ellipsisText);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> source);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> source, IEnumerable`1<TSource> other);
}
public static class Mosaik.Helpers.ExternalLibraries : object {
    public static Task Load2DForceGraphAsync();
    public static Task LoadD3Async();
    public static Task LoadThreeAsync();
    public static Task LoadLeaderLineAsync();
    public static Task LoadZipAsync();
    public static Task LoadTreemapAsync();
    public static Task LoadMessagePackAsync();
    public static Task LoadMarkdownRenderer();
    public static Task LoadPurify();
    public static Task LoadShowdown();
    public static Task LoadSquire();
    public static Task LoadFullCalendarAsync();
    [DebuggerStepThroughAttribute]
public static Task LoadPlotlyAsync();
    [DebuggerStepThroughAttribute]
public static Task LoadPdfAsync();
}
public static class Mosaik.Helpers.FileExtensions : object {
    public static Dictionary`2<string, FileMimeType> SupportedExtensionsByType;
    public static HashSet`1<string> SupportedExtensionsSet;
    public static string SupportedExtensions;
    private static Dictionary`2<string, FilesType> _mimeTypeToFileType;
    private static Dictionary`2<string, String[]> _mimeTypeToExtension;
    public static string DefaultFileIcon;
    private static FileExtensions();
    public static FilesType MimeTypeToFileType(string mimeType);
    public static String[] MimeTypeToExtensions(string mimeType);
    public static String[] FileTypeToContentType(FilesType type);
    public static String[] FileTypeToExtensions(FilesType type);
    public static bool IsSupportedExtension(string fileName);
    public static string GetMimeType(string fileName);
    public static string GetExtension(string fileName);
    public static string GetFileIcon(string fileName);
    public static UIcons GetFileUIcon(string fileName);
    public static FilesType GetFileType(string fileName);
    public static string GetFileIcon(FilesType fileType);
    public static string GetFileIconColor(string fileName, string color);
    public static string GetFileIconColor(FilesType fileType);
}
public class Mosaik.Helpers.JS.ForceGraph.ForceGraph3D`2 : object {
    private HTMLElement Container;
    private ResizeObserver Observer;
    private object _graph;
    public float Width { get; public set; }
    public float Height { get; public set; }
    public string BackgroundColor { get; public set; }
    public bool ShowNavInfo { get; public set; }
    public bool EnablePointerInteraction { get; public set; }
    public bool LinkHoverPrecision { get; public set; }
    public bool EnableNodeDrag { get; public set; }
    public bool EnableNavigationControls { get; public set; }
    public float NodeRelSize { get; public set; }
    public float NodeOpacity { get; public set; }
    public float NodeResolution { get; public set; }
    public float LinkOpacity { get; public set; }
    public float LinkResolution { get; public set; }
    public float LinkDirectionalArrowResolution { get; public set; }
    private ForceGraph3D`2(HTMLElement container, ControlType controlType, bool antiAlias, bool alpha);
    [DebuggerStepThroughAttribute]
public static Task`1<ForceGraph3D`2<TNode, TLink>> NewAsync(HTMLElement container, ControlType controlType, bool antiAlias, bool alpha);
    public float get_Width();
    public void set_Width(float value);
    public float get_Height();
    public void set_Height(float value);
    public string get_BackgroundColor();
    public void set_BackgroundColor(string value);
    public bool get_ShowNavInfo();
    public void set_ShowNavInfo(bool value);
    public bool get_EnablePointerInteraction();
    public void set_EnablePointerInteraction(bool value);
    public bool get_LinkHoverPrecision();
    public void set_LinkHoverPrecision(bool value);
    public bool get_EnableNodeDrag();
    public void set_EnableNodeDrag(bool value);
    public bool get_EnableNavigationControls();
    public void set_EnableNavigationControls(bool value);
    public float get_NodeRelSize();
    public void set_NodeRelSize(float value);
    public float get_NodeOpacity();
    public void set_NodeOpacity(float value);
    public float get_NodeResolution();
    public void set_NodeResolution(float value);
    public float get_LinkOpacity();
    public void set_LinkOpacity(float value);
    public float get_LinkResolution();
    public void set_LinkResolution(float value);
    public float get_LinkDirectionalArrowResolution();
    public void set_LinkDirectionalArrowResolution(float value);
    public ForceGraph3D`2<TNode, TLink> SetData(ReadOnlyArray`1<TNode> nodes, ReadOnlyArray`1<TLink> links);
    public ForceGraph3D`2<TNode, TLink> DisableSimulation();
    public ForceGraph3D`2<TNode, TLink> PauseAnimation();
    public ForceGraph3D`2<TNode, TLink> ResumeAnimation();
    public ForceGraph3D`2<TNode, TLink> Refresh();
    public ForceGraph3D`2<TNode, TLink> D3AlphaDecay(float decay);
    public ForceGraph3D`2<TNode, TLink> D3VelocityDecay(float decay);
    public ForceGraph3D`2<TNode, TLink> WarmupTicks(float decay);
    public ForceGraph3D`2<TNode, TLink> CooldownTicks(float decay);
    public ForceGraph3D`2<TNode, TLink> CooldownTime(float decay);
    public ForceGraph3D`2<TNode, TLink> CameraPosition(float x, float y, float z, float lx, float ly, float lz, float duration);
    public ForceGraph3D`2<TNode, TLink> OnNodeClick(Action`1<TNode> action);
    public ForceGraph3D`2<TNode, TLink> OnNodeRightClick(Action`1<TNode> action);
    public ForceGraph3D`2<TNode, TLink> OnNodeHover(Hovering<TNode, TLink> action);
    public ForceGraph3D`2<TNode, TLink> OnNodeDrag(Action`1<TNode> action);
    public ForceGraph3D`2<TNode, TLink> OnNodeDragEnd(Action`1<TNode> action);
    public ForceGraph3D`2<TNode, TLink> OnLinkClick(Action`1<TLink> action);
    public ForceGraph3D`2<TNode, TLink> OnLinkRightClick(Action`1<TLink> action);
    public ForceGraph3D`2<TNode, TLink> OnLinkHover(Action`1<TLink> action);
    public ForceGraph3D`2<TNode, TLink> OnEngineTick(Action action);
    public ForceGraph3D`2<TNode, TLink> OnEngineStop(Action action);
    public ForceGraph3D`2<TNode, TLink> NodeLabel(Func`2<TNode, HTMLElement> f);
    public ForceGraph3D`2<TNode, TLink> NodeLabel(Func`2<TNode, string> f);
    public ForceGraph3D`2<TNode, TLink> NodeSize(Func`2<TNode, float> f);
    public ForceGraph3D`2<TNode, TLink> NodeVisibility(Func`2<TNode, bool> f);
    public ForceGraph3D`2<TNode, TLink> NodeColor(Func`2<TNode, string> f);
    public ForceGraph3D`2<TNode, TLink> NodeAutoColorBy(Func`2<TNode, string> f);
    public ForceGraph3D`2<TNode, TLink> NodeThreeObject(Func`2<TNode, Object3D> f);
    public ForceGraph3D`2<TNode, TLink> NodeThreeObjectExtend(Func`2<TNode, bool> f);
    public ForceGraph3D`2<TNode, TLink> LinkWidth(Func`2<TLink, float> f);
    public ForceGraph3D`2<TNode, TLink> LinkLabel(Func`2<TLink, string> f);
    public ForceGraph3D`2<TNode, TLink> LinkVisibility(Func`2<TLink, bool> f);
    public ForceGraph3D`2<TNode, TLink> LinkColor(Func`2<TLink, string> f);
    public ForceGraph3D`2<TNode, TLink> LinkAutoColorBy(Func`2<TLink, string> f);
    public ForceGraph3D`2<TNode, TLink> LinkThreeObject(Func`2<TLink, Object3D> f);
    public ForceGraph3D`2<TNode, TLink> LinkThreeObjectExtend(Func`2<TLink, bool> f);
    public ForceGraph3D`2<TNode, TLink> LinkPositionUpdate(Action`3<Object3D, StartEnd, TLink> f);
    public ForceGraph3D`2<TNode, TLink> LinkMaterial(Func`2<TLink, Material3D> f);
    public ForceGraph3D`2<TNode, TLink> LinkDistance(Func`2<TLink, float> f);
    public ForceGraph3D`2<TNode, TLink> LinkCurvature(Func`2<TLink, float> f);
    public ForceGraph3D`2<TNode, TLink> LinkCurveRotation(Func`2<TLink, float> f);
    public ForceGraph3D`2<TNode, TLink> LinkDirectionalArrowLength(Func`2<TLink, float> f);
    public ForceGraph3D`2<TNode, TLink> LinkDirectionalArrowColor(Func`2<TLink, string> f);
    public ForceGraph3D`2<TNode, TLink> LinkDirectionalArrowRelPos(Func`2<TLink, float> f);
    public ForceGraph3D`2<TNode, TLink> UpdateGeometries();
    private void <.ctor>b__4_0();
}
public static class Mosaik.Helpers.JS.ForceGraph.Graph2D : object {
}
public static class Mosaik.Helpers.JS.ForceGraph.Graph3D : object {
}
public class Mosaik.Helpers.JS.ImagePreview : Layer`1<ImagePreview> {
    private HTMLDivElement _modalOverlay;
    private HTMLElement _popup;
    private Action OnRight;
    private Action OnLeft;
    public ImagePreview(HTMLImageElement image, Action onLeft, Action onRight);
    private void OnKeyUp(KeyboardEvent ev);
    protected HTMLElement CreateImageModal(HTMLElement img);
    private void <.ctor>b__4_0(object _);
    private void <.ctor>b__4_1();
    private void <.ctor>b__4_2();
    private void <CreateImageModal>b__6_0(MouseEvent e);
    private void <CreateImageModal>b__6_1(MouseEvent e);
}
public class Mosaik.Helpers.JS.LazyLoader : object {
    private HTMLElement container;
    private List`1<HTMLImageElement> unloadedImages;
    private ResizeObserver resizeObserver;
    public LazyLoader(HTMLElement container);
    private void InitResizeObserver();
    public void LoadImages();
    public void AddImage(HTMLImageElement img);
    [DebuggerStepThroughAttribute]
private Task LoadPreviewsInner();
    public static bool IsOnView(ClientRect rect, ClientRect containerRect);
    private void <.ctor>b__3_0();
}
public class Mosaik.Helpers.JS.LeaderLine : object {
    private object _line;
    public LeaderLine(IComponent from, IComponent to, Options options);
    public LeaderLine(HTMLElement from, IComponent to, Options options);
    public LeaderLine(IComponent from, HTMLElement to, Options options);
    public static HTMLElement MouseHoverAnchor(IComponent element, ShowEffect effect);
    public static CaptionLabel CreateCaptionLabel(CaptionLabelOptions options);
    public static PathLabel CreatePathLabel(PathLabelOptions options);
    public static HTMLElement CreatePointAnchor(IComponent element, AnchorOptions options);
    public static HTMLElement CreatePointAnchor(HTMLElement element, AnchorOptions options);
    public void Show(ShowEffect effect);
    public void Hide(ShowEffect effect);
    public void Remove();
}
public static class Mosaik.Helpers.JS.MsgPack : object {
    [DebuggerStepThroughAttribute]
public static Task`1<T> DecodeAsync(ArrayBuffer data);
}
public static class Mosaik.Helpers.JS.NProgress : object {
    public static int ActiveRequests;
    private static bool Running;
    public static void Start();
    public static void Done();
    public static void DoneAll();
}
public static class Mosaik.Helpers.Labels : object {
    public static Func`2<string, string> DisplayNameGetter;
    public static string Get(Node node, string labelFields);
    public static string ShrinkText(string text, int maxLen, int trailingLen);
    public static Stack TinyNodeLabel(Node node, INodeStyle nodeStyle);
}
public static class Mosaik.Helpers.LocalStorage : object {
    private static int _MaxRuns;
    public static string TOKEN;
    public static string AppName;
    private static string GetKey(string key);
    public static string Get(string key);
    public static T Get(string key);
    public static bool TryGet(string key, T& value);
    public static void Set(string key, string value);
    public static void Set(string key, T value);
    public static string GetWithExpiration(string key, TimeSpan expirationIfNotSetYet);
    public static void SetWithExpiration(string key, string value, TimeSpan expiration);
    public static bool GetBool(string key);
    public static void SetBool(string key, bool value);
    public static void Clear(string key);
    public static void ClearStartingWith(string key);
    public static bool WillRunNTimes(string name, int max);
    public static void Delay(string name, TimeSpan timeSpan);
    public static void RunNTimes(string name, int max, Action action);
    public static void InhibitRun(string name);
}
public static class Mosaik.Helpers.PopoverRemovalList : object {
    private static List`1<Action> _popoverTidyUpCallbacks;
    private static PopoverRemovalList();
    public static void RegisterPopoverTidyup(Action callback);
    public static void DestroyAll();
}
public class Mosaik.Helpers.REQ : object {
    private Dictionary`2<string, string> _headers;
    private string _body;
    private string _url;
    private string _parameter;
    private Nullable`1<CancellationToken> _customCancellationToken;
    private CancellationTokenSource _unmountCancellationTokenSource;
    private bool _objectLiteralReturn;
    private bool _includeToken;
    private FormData _formData;
    private int _retries;
    private UID128 _cacheKey;
    private Action`1<float> _onBytesSent;
    private bool _redirectToLoginIfFail;
    private bool _forbidMeansUnauthorized;
    private bool _showProgressBar;
    [DebuggerBrowsableAttribute]
private static bool <DisableAllProgressBars>k__BackingField;
    private bool _shouldTriggerCheckIfServerIsReady;
    private Action`1<string> _longRunningStatusUpdate;
    public static string ServerURL;
    public static Action TriggerLogin;
    public static Action TriggerCheckIfServerIsReady;
    public static bool DisableAllProgressBars { get; public set; }
    public static bool get_DisableAllProgressBars();
    public static void set_DisableAllProgressBars(bool value);
    public static REQ FromURL(string path);
    public static REQ New(String[] path);
    public REQ AppendPath(String[] path);
    public REQ WithParameter(string name, string value);
    public REQ WithParameterIfNotEmpty(string name, string value);
    public REQ WithParameterIfNotEmpty(string name, UID128 value);
    public REQ WithHeaders(Dictionary`2<string, string> headers);
    public REQ WithHeader(string key, string value);
    public REQ Skip(long numberOfItemsToSkipOver);
    public REQ Limit(long maximumNumberOfItemsToReturn);
    public REQ WithStringBody(string body);
    public REQ WithBody(string stringBody);
    public REQ WithBody(T obj);
    public REQ WithObjectLiteralBody(T obj);
    public REQ WithBlob(Blob blob, string name);
    public REQ WithCancellationToken(CancellationToken token);
    public REQ CancelIfUnmount(HTMLElement element);
    public REQ CancelIfUnmount(IComponent component);
    public REQ WithObjectLiteralResponse();
    public REQ WithoutBearerToken();
    public REQ WithoutAutoLogin();
    public REQ ForbidMeansUnauthorized();
    public REQ WithSentBytesProgress(Action`1<float> onBytesSent);
    public REQ DoNotTriggerCheckServer();
    public REQ LongRunningStatus(Action`1<string> statusUpdateReceived);
    public REQ WithoutProgressBar();
    public string GetURL();
    [DebuggerStepThroughAttribute]
public Task`1<T> GetAsync();
    [DebuggerStepThroughAttribute]
public Task`1<T> PostAsync();
    [DebuggerStepThroughAttribute]
public Task`1<T> PutAsync();
    [DebuggerStepThroughAttribute]
public Task`1<T> DeleteAsync();
    [DebuggerStepThroughAttribute]
public Task`1<string> GetAsync();
    [DebuggerStepThroughAttribute]
public Task`1<string> PostAsync();
    [DebuggerStepThroughAttribute]
public Task`1<string> PutAsync();
    [DebuggerStepThroughAttribute]
public Task`1<string> DeleteAsync();
    public Task`1<ArrayBuffer> GetReceiveBinaryAsync();
    public Task`1<ArrayBuffer> PostReceiveBinaryAsync();
    public Task`1<ArrayBuffer> PutReceiveBinaryAsync();
    public static Task`1<Node> GetNodeAsync(UID128 nodeUID);
    public static Task`1<Node> GetNodeAsync(string nodeType, string key);
    [DebuggerStepThroughAttribute]
public static Task`1<Document> GetDocumentForField(UID128 uid, string field);
    [DebuggerStepThroughAttribute]
public static Task`1<Document> GetDocument(UID128 uid);
    public Task`1<Blob> GetBlobAsync();
    public Task`1<Blob> PostBlobAsync();
    public Task`1<Blob> PutBlobAsync();
    public Task`1<ValueTuple`2<Blob, string>> GetBlobFileAsync();
    public Task`1<ValueTuple`2<Blob, string>> PostBlobFileAsync();
    [DebuggerStepThroughAttribute]
public Task`1<bool> TryToDownloadFileViaGetAsync();
    [DebuggerStepThroughAttribute]
public Task`1<bool> TryToDownloadFileViaGetAsync(string filename);
    [DebuggerStepThroughAttribute]
public Task`1<bool> TryToDownloadViaPostAsync(string optionalFileName);
    [DebuggerStepThroughAttribute]
public Task`1<bool> TryToDownloadFileViaPostAsync(string filename);
    private T Deserialize(string json);
    private Task`1<string> TryDoStringReturningRequestAsync(string type);
    private Task`1<ArrayBuffer> TryDoArrayBufferReturningRequestAsync(string type);
    private Task`1<Blob> TryDoBlobReturningRequestAsync(string type);
    private Task`1<ValueTuple`2<Blob, string>> TryDoBlobAndFileNameReturningRequestAsync(string type);
    private static string TryToGetFileName(string header);
    [DebuggerStepThroughAttribute]
private Task`1<T> TryDoRequestAsync(string type, string acceptResponse, XMLHttpRequestResponseType responseType, Func`2<XMLHttpRequest, T> responseRetriever);
    private void ShowSlowMessage();
    private bool HasCancellationBeenRequested();
    private Task`1<T> DoRequestAsync(string type, string acceptResponse, XMLHttpRequestResponseType responseType, Func`2<XMLHttpRequest, T> responseRetriever);
    private static string TryToReadResponseText(XMLHttpRequest xmlHttp);
    private static void NetworkFailedError(string url);
    public static bool TryDownloadFromBlob(Blob blob, string filename);
    public void StreamServerSideEvents(Action`1<string> onData, Action onConnect, Action onDone, Action`1<object> onError, AbortController abortController);
    private void <CancelIfUnmount>b__41_0();
}
[ObjectLiteralAttribute]
public class Mosaik.Helpers.SearchHitsPage : object {
    public int TotalCount;
    public int ProCount;
    public ReadOnlyArray`1<SearchHit> Results;
}
public static class Mosaik.Helpers.SessionStorage : object {
    public static string AppName;
    private static string GetKey(string key);
    public static bool TryGet(string key, String& value);
    public static void Set(string key, string value);
    public static void Delete(string key);
}
[ExtensionAttribute]
public static class Mosaik.Helpers.StringHelpers : object {
    internal static int UNICODE_PLANE00_END;
    internal static int UNICODE_PLANE01_START;
    internal static int UNICODE_PLANE16_END;
    internal static int HIGH_SURROGATE_START;
    internal static int LOW_SURROGATE_END;
    internal static int LOW_SURROGATE_START;
    internal static char CHAR_HIGH_SURROGATE_START;
    internal static char CHAR_HIGH_SURROGATE_END;
    internal static char CHAR_LOW_SURROGATE_START;
    internal static char CHAR_LOW_SURROGATE_END;
    [ExtensionAttribute]
public static string Wrap(string text, int lineLength, int maxLines);
    [ExtensionAttribute]
public static string ReadToEnd(TextReader reader, int lineLength, int maxLines);
    [ExtensionAttribute]
public static IEnumerable`1<string> ReadLines(TextReader reader, int lineLength);
    [ExtensionAttribute]
public static IEnumerable`1<string> ReadWords(TextReader reader);
    [ExtensionAttribute]
private static bool IsBreak(TextReader reader);
    [ExtensionAttribute]
private static bool IsWhiteSpace(TextReader reader);
    [ExtensionAttribute]
private static string Text(TextReader reader);
    [ExtensionAttribute]
private static bool IsEof(TextReader reader);
    public static string ConvertFromUtf32(int utf32);
    [ExtensionAttribute]
public static string InsertSpaceBeforeUpperCase(string str);
    [ExtensionAttribute]
public static string ForCsv(string source);
}
public class Mosaik.Helpers.TimeFacetsControl : object {
    private static int _selectorCircleRadius;
    private double _startUnixTime;
    private double _endUnixTime;
    private bool _hasChanged;
    private Action`2<DateTime, DateTime> _onRangeChanged;
    private bool _currentlyDraggingLower;
    private DateTime _startDate;
    private DateTime _endDate;
    private Dictionary`2<DateTime, int> _simplifiedValues;
    private HTMLElement _resultDiv;
    private HTMLElement _barsDiv;
    private HTMLElement _dragCircleLeft;
    private HTMLElement _dragCircleRight;
    private HTMLElement _leftText;
    private HTMLElement _rightText;
    private HTMLElement _activeRangeLine;
    private Nullable`1<DateTime> _prerenderStartValue;
    private Nullable`1<DateTime> _prerenderEndValue;
    [DebuggerBrowsableAttribute]
private TimeFacetsRenderMode <Mode>k__BackingField;
    private Dictionary`2<DateTime, int> _rawValues;
    private double StartUnixTime { get; private set; }
    private double EndUnixTime { get; private set; }
    public TimeFacetsRenderMode Mode { get; public set; }
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public TimeFacetsControl(Dictionary`2<DateTime, int> values, Action`2<DateTime, DateTime> rangeChanged);
    private double get_StartUnixTime();
    private void set_StartUnixTime(double value);
    private double get_EndUnixTime();
    private void set_EndUnixTime(double value);
    public TimeFacetsRenderMode get_Mode();
    public void set_Mode(TimeFacetsRenderMode value);
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public DateTime get_End();
    public void set_End(DateTime value);
    public sealed virtual HTMLElement Render();
    private DateTime ToDate(double val);
    private double FromDate(DateTime val);
    private double Len();
    private HTMLElement CreateHistogram();
    private HTMLElement CreateRange();
    private string DateToString(DateTime date);
    private string DateToStringPrecise(DateTime date);
    private void RecalculateRange();
    private void DisableSelect(Event e);
    private void OnMouseUp(Event e);
    private void OnMouseMove(Event e);
    private void <CreateHistogram>b__40_1();
    private void <CreateRange>b__41_0(MouseEvent e);
    private void <CreateRange>b__41_1(MouseEvent e);
}
public enum Mosaik.Helpers.TimeFacetsRenderMode : Enum {
    public int value__;
    public static TimeFacetsRenderMode BarsYear;
    public static TimeFacetsRenderMode BarsMonth;
    public static TimeFacetsRenderMode BarsDays;
    public static TimeFacetsRenderMode BarsHours;
    public static TimeFacetsRenderMode BarsMinutes;
}
public static class Mosaik.Helpers.UserStorage : object {
    private static Dictionary`2<string, string> _cachedData;
    public static string SEARCH_BOX_EMPTY_ENTRIES;
    public static string SEARCH_BOX_EMPTY_AI_ASSISTANT;
    public static string HIDE_SUGGESTIONS_KEY;
    public static string SIDEBAR_WIDTH_KEY;
    public static string POST_UPGRADE_ACTION_KEY;
    public static string DELAY_TIPS_KEY;
    public static string LAST_INTERACTED_SPACES;
    public static string HIDDEN_FACETS;
    public static string FACET_ORDER;
    private static List`1<TaskCompletionSource`1<bool>> _updatesTCS;
    private static List`1<UserDataUpdate> _updatesList;
    private static UserStorage();
    private static Task UpdateAsync(string key, string value);
    private static void Update(string key, string value);
    private static void UpdateDebounce(UserDataUpdate update, TaskCompletionSource`1<bool> tcs);
    private static void Delete(string key);
    [DebuggerStepThroughAttribute]
public static Task InitializeAsync();
    public static string Get(string key);
    public static T Get(string key);
    public static bool TryGet(string key, T& value);
    public static void Set(string key, string value);
    public static Task SetAsync(string key, string value);
    public static void Set(string key, T value);
    public static string GetWithExpiration(string key, TimeSpan expirationIfNotSetYet);
    public static void SetWithExpiration(string key, string value, TimeSpan expiration);
    public static bool GetBool(string key, bool defaultValue);
    public static void SetBool(string key, bool value);
    public static Task SetBoolAsync(string key, bool value);
    public static void Clear(string key);
    public static void ReceivedRemove(string updateKey);
    public static void ReceivedUpdate(string updateKey, string updateValue);
}
public class Mosaik.Helpers.WordCloud : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<object> _onClick;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<object> _onHover;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<object> _onUnHover;
    private HTMLElement _container;
    private WordCloudItem[] _data;
    private string _Color;
    [DynamicAttribute]
private object svg;
    [DynamicAttribute]
private object layout;
    [DebuggerStepThroughAttribute]
public static Task`1<WordCloud> CreateAsync();
    public WordCloud Color(string color);
    public WordCloud SetData(WordCloudItem[] data);
    public WordCloud OnClick(Action`1<object> dataPoint);
    public WordCloud OnHover(Action`1<object> dataPoint);
    public WordCloud OnUnHover(Action`1<object> dataPoint);
    public void Redraw();
    private object DrawWords(object words);
    public sealed virtual HTMLElement Render();
    private void <.ctor>b__8_0();
    private <>f__AnonymousType2`4<string, double, string, int> <Redraw>b__15_0(WordCloudItem x, int index);
    private object <DrawWords>b__16_3(object d);
    private object <DrawWords>b__16_4(object d);
    private object <DrawWords>b__16_5(object d);
}
public class Mosaik.Helpers.WordCloudItem : object {
    [DebuggerBrowsableAttribute]
private double <Size>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Word>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Color>k__BackingField;
    public double Size { get; public set; }
    public string Word { get; public set; }
    public string Color { get; public set; }
    public WordCloudItem(double size, string word, string color);
    public double get_Size();
    public void set_Size(double value);
    public string get_Word();
    public void set_Word(string value);
    public string get_Color();
    public void set_Color(string value);
}
public static class Mosaik.HotkeyVerifier : object {
    private static Char[] _punctuations;
    public static string DefaultOpenShortcut;
    public static string DefaultSearchShortcut;
    public static string DefaultAIAssistantShortcut;
    private static HotkeyVerifier();
    public static bool IsValid(string hotkeyString);
    public static bool IsModifier(string modString);
    public static bool IsKey(string keyString);
}
public interface Mosaik.INodeCustomStyle {
    public abstract virtual string GetColor(Node node);
    public abstract virtual UIcons GetIcon(Node node);
    public abstract virtual string GetDisplayName(Node node);
    public abstract virtual string GetLabel(Node node);
}
public interface Mosaik.INodeImageStyle {
    public abstract virtual string GetImage(Node node);
}
public interface Mosaik.INodeStyle {
    public string NodeType { get; }
    public string DisplayName { get; }
    public string LabelField { get; }
    public string Color { get; }
    public UIcons Icon { get; }
    public abstract virtual string get_NodeType();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_LabelField();
    public abstract virtual string get_Color();
    public abstract virtual UIcons get_Icon();
}
public interface Mosaik.INodeStyleWithChat {
    public String[] ChatFields { get; }
    public abstract virtual String[] get_ChatFields();
}
public interface Mosaik.INodeStyleWithShortcuts {
    public String[] Shortcuts { get; }
    public abstract virtual String[] get_Shortcuts();
}
public enum Mosaik.Language : Enum {
    public int value__;
    public static Language Abkhazian;
    public static Language Afar;
    public static Language Afrikaans;
    public static Language Albanian;
    public static Language Amharic;
    public static Language Arabic;
    public static Language Aragonese;
    public static Language Armenian;
    public static Language Assamese;
    public static Language Avestan;
    public static Language Aymara;
    public static Language Azerbaijani;
    public static Language Bashkir;
    public static Language Basque;
    public static Language Belarusian;
    public static Language Bengali;
    public static Language Bihari;
    public static Language Bislama;
    public static Language Bosnian;
    public static Language Breton;
    public static Language Bulgarian;
    public static Language Burmese;
    public static Language Catalan;
    public static Language Chamorro;
    public static Language Chechen;
    public static Language Chinese;
    public static Language Church_Slavic_Slavonic_Old_Bulgarian;
    public static Language Chuvash;
    public static Language Cornish;
    public static Language Corsican;
    public static Language Croatian;
    public static Language Czech;
    public static Language Danish;
    public static Language Divehi_Dhivehi_Maldivian;
    public static Language Dutch;
    public static Language Dzongkha;
    public static Language English;
    public static Language Esperanto;
    public static Language Estonian;
    public static Language Faroese;
    public static Language Fijian;
    public static Language Finnish;
    public static Language French;
    public static Language Gaelic_Scottish_Gaelic;
    public static Language Galician;
    public static Language Georgian;
    public static Language German;
    public static Language Greek_Modern;
    public static Language Guarani;
    public static Language Gujarati;
    public static Language Haitian_Haitian_Creole;
    public static Language Hausa;
    public static Language Hebrew;
    public static Language Herero;
    public static Language Hindi;
    public static Language Hiri_Motu;
    public static Language Hungarian;
    public static Language Icelandic;
    public static Language Ido;
    public static Language Indonesian;
    public static Language Interlingua;
    public static Language Interlingue;
    public static Language Inuktitut;
    public static Language Inupiaq;
    public static Language Irish;
    public static Language Italian;
    public static Language Japanese;
    public static Language Javanese;
    public static Language Kalaallisut;
    public static Language Kannada;
    public static Language Kashmiri;
    public static Language Kazakh;
    public static Language Khmer;
    public static Language Kikuyu_Gikuyu;
    public static Language Kinyarwanda;
    public static Language Kirghiz;
    public static Language Komi;
    public static Language Korean;
    public static Language Kuanyama_Kwanyama;
    public static Language Kurdish;
    public static Language Lao;
    public static Language Latin;
    public static Language Latvian;
    public static Language Limburgan_Limburger_Limburgish;
    public static Language Lingala;
    public static Language Lithuanian;
    public static Language Luxembourgish_Letzeburgesch;
    public static Language Macedonian;
    public static Language Malagasy;
    public static Language Malay;
    public static Language Malayalam;
    public static Language Maltese;
    public static Language Manx;
    public static Language Maori;
    public static Language Marathi;
    public static Language Marshallese;
    public static Language Moldavian;
    public static Language Mongolian;
    public static Language Nauru;
    public static Language Navaho_Navajo;
    public static Language Ndebele_North;
    public static Language Ndebele_South;
    public static Language Ndonga;
    public static Language Nepali;
    public static Language Northern_Sami;
    public static Language Norwegian;
    public static Language Norwegian_Bokmal;
    public static Language Norwegian_Nynorsk;
    public static Language Nyanja_Chichewa_Chewa;
    public static Language Occitan_Provencal;
    public static Language Oriya;
    public static Language Oromo;
    public static Language Ossetian_Ossetic;
    public static Language Pali;
    public static Language Panjabi;
    public static Language Persian;
    public static Language Polish;
    public static Language Portuguese;
    public static Language Pushto;
    public static Language Quechua;
    public static Language Raeto_Romance;
    public static Language Romanian;
    public static Language Rundi;
    public static Language Russian;
    public static Language Samoan;
    public static Language Sango;
    public static Language Sanskrit;
    public static Language Sardinian;
    public static Language Serbian;
    public static Language Shona;
    public static Language Sichuan_Yi;
    public static Language Sindhi;
    public static Language Sinhala_Sinhalese;
    public static Language Slovak;
    public static Language Slovenian;
    public static Language Somali;
    public static Language Sotho_Southern;
    public static Language Spanish;
    public static Language Sundanese;
    public static Language Swahili;
    public static Language Swati;
    public static Language Swedish;
    public static Language Tagalog;
    public static Language Tahitian;
    public static Language Tajik;
    public static Language Tamil;
    public static Language Tatar;
    public static Language Telugu;
    public static Language Thai;
    public static Language Tibetan;
    public static Language Tigrinya;
    public static Language Tonga;
    public static Language Tsonga;
    public static Language Tswana;
    public static Language Turkish;
    public static Language Turkmen;
    public static Language Twi;
    public static Language Uighur;
    public static Language Ukrainian;
    public static Language Urdu;
    public static Language Uzbek;
    public static Language Vietnamese;
    public static Language Volapuk;
    public static Language Walloon;
    public static Language Welsh;
    public static Language Western_Frisian;
    public static Language Wolof;
    public static Language Xhosa;
    public static Language Yiddish;
    public static Language Yoruba;
    public static Language Zhuang_Chuang;
    public static Language Zulu;
    public static Language Unknown;
    public static Language Any;
}
public static class Mosaik.Languages : object {
    public static ReadOnlyArray`1<Language> SupportedLanguages;
    public static ReadOnlyArray`1<Language> SupportedModelLanguages;
    private static HashSet`1<Language> _supportedLanguage;
    private static Languages();
    public static string GetDisplayName(Language language);
    public static HTMLElement GetFlagAndLabel(Language language, bool squaredOff);
    public static HTMLElement GetFlag(Language language, bool squaredOff);
    public static bool IsSupportedLanguages(Language language);
    public static string TryToGetCountryCodeToDisplayFlagForLanguage(Language language);
    public static IComponent GetFlagAndLabelComponent(Language language);
    public static IComponent GetFlagComponent(Language language);
    public static Language CodeToEnum(string input);
    public static string NameToCode(string name);
    public static string EnumToCode(Language input);
    internal static HTMLElement <GetFlag>g__GetFontFallback|2_0(string title, UIcons icon, <>c__DisplayClass2_0& );
}
public class Mosaik.Lazy`1 : object {
    private bool HasValue;
    private T _value;
    private Func`1<T> Generator;
    public T Value { get; }
    public Lazy`1(Func`1<T> generator);
    public T get_Value();
}
[ExtensionAttribute]
public static class Mosaik.NetCoreCompatabilityEnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> Prepend(IEnumerable`1<T> source, T newItem);
    [ExtensionAttribute]
public static IEnumerable`1<T> Append(IEnumerable`1<T> source, T newItem);
    [ExtensionAttribute]
public static HashSet`1<T> ToHashSet(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static TValue GetOrAdd(Dictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> valueFactory);
    [ExtensionAttribute]
public static TValue AddOrUpdate(Dictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> valueFactory, Func`3<TKey, TValue, TValue> updateFactory);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExceptBy(IEnumerable`1<T> source, IEnumerable`1<T> other, Func`2<T, TIdentity> identitySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> DistinctBy(IEnumerable`1<T> source, Func`2<T, TIdentity> identitySelector);
    public static IEqualityComparer`1<TSource> CompareBy(Func`2<TSource, TIdentity> identitySelector);
    [ExtensionAttribute]
public static bool TryGetFirst(IEnumerable`1<T> source, T& firstElement);
    [ExtensionAttribute]
public static bool TryGetFirst(IEnumerable`1<T> source, Func`2<T, bool> identitySelector, T& firstElement);
}
public class Mosaik.Schema.AccessExplained : object {
    [DebuggerBrowsableAttribute]
private UserAccess <TypeOfAccess>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Direct>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <ViaAccessGroup>k__BackingField;
    [DebuggerBrowsableAttribute]
private GroupAccess <ViaAccessGroupMemberType>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <ViaViaAccessGroup>k__BackingField;
    [DebuggerBrowsableAttribute]
private GroupAccess <ViaViaAccessGroupMemberType>k__BackingField;
    public UserAccess TypeOfAccess { get; public set; }
    public bool Direct { get; public set; }
    public UID128 ViaAccessGroup { get; public set; }
    public GroupAccess ViaAccessGroupMemberType { get; public set; }
    public UID128 ViaViaAccessGroup { get; public set; }
    public GroupAccess ViaViaAccessGroupMemberType { get; public set; }
    public UserAccess get_TypeOfAccess();
    public void set_TypeOfAccess(UserAccess value);
    public bool get_Direct();
    public void set_Direct(bool value);
    public UID128 get_ViaAccessGroup();
    public void set_ViaAccessGroup(UID128 value);
    public GroupAccess get_ViaAccessGroupMemberType();
    public void set_ViaAccessGroupMemberType(GroupAccess value);
    public UID128 get_ViaViaAccessGroup();
    public void set_ViaViaAccessGroup(UID128 value);
    public GroupAccess get_ViaViaAccessGroupMemberType();
    public void set_ViaViaAccessGroupMemberType(GroupAccess value);
}
public class Mosaik.Schema.AccessGroupsResult : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<GroupNode> <AccessGroups>k__BackingField;
    public ReadOnlyArray`1<GroupNode> AccessGroups { get; public set; }
    public ReadOnlyArray`1<GroupNode> get_AccessGroups();
    public void set_AccessGroups(ReadOnlyArray`1<GroupNode> value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.AccessListResponse : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<Node> <Members>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <Admins>k__BackingField;
    public ReadOnlyArray`1<Node> Members { get; public set; }
    public ReadOnlyArray`1<UID128> Admins { get; public set; }
    public ReadOnlyArray`1<Node> get_Members();
    public void set_Members(ReadOnlyArray`1<Node> value);
    public ReadOnlyArray`1<UID128> get_Admins();
    public void set_Admins(ReadOnlyArray`1<UID128> value);
}
public class Mosaik.Schema.AddAliasesRequest : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<AliasesForKey> <Aliases>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreInvalid>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreCase>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DeletePreviousAliases>k__BackingField;
    public string NodeType { get; public set; }
    public ReadOnlyArray`1<AliasesForKey> Aliases { get; public set; }
    public LanguageDTO Language { get; public set; }
    public bool IgnoreInvalid { get; public set; }
    public bool IgnoreCase { get; public set; }
    public bool DeletePreviousAliases { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public ReadOnlyArray`1<AliasesForKey> get_Aliases();
    public void set_Aliases(ReadOnlyArray`1<AliasesForKey> value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public bool get_IgnoreInvalid();
    public void set_IgnoreInvalid(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_DeletePreviousAliases();
    public void set_DeletePreviousAliases(bool value);
}
public class Mosaik.Schema.AddEdgesRequest : object {
    [DebuggerBrowsableAttribute]
private string <FromNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <OutwardEdgeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ToNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ReturnEdgeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<Connection> <Connections>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreInvalid>k__BackingField;
    public string FromNodeType { get; public set; }
    public string OutwardEdgeType { get; public set; }
    public string ToNodeType { get; public set; }
    public string ReturnEdgeType { get; public set; }
    public ReadOnlyArray`1<Connection> Connections { get; public set; }
    public bool IgnoreInvalid { get; public set; }
    public string get_FromNodeType();
    public void set_FromNodeType(string value);
    public string get_OutwardEdgeType();
    public void set_OutwardEdgeType(string value);
    public string get_ToNodeType();
    public void set_ToNodeType(string value);
    public string get_ReturnEdgeType();
    public void set_ReturnEdgeType(string value);
    public ReadOnlyArray`1<Connection> get_Connections();
    public void set_Connections(ReadOnlyArray`1<Connection> value);
    public bool get_IgnoreInvalid();
    public void set_IgnoreInvalid(bool value);
}
public class Mosaik.Schema.AddSpaceAccessRequest : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <UserUIDs>k__BackingField;
    public ReadOnlyArray`1<UID128> UserUIDs { get; public set; }
    public ReadOnlyArray`1<UID128> get_UserUIDs();
    public void set_UserUIDs(ReadOnlyArray`1<UID128> value);
}
public class Mosaik.Schema.AdminAccessGroupsResult : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<GroupNode> <AdminAccessGroups>k__BackingField;
    public ReadOnlyArray`1<GroupNode> AdminAccessGroups { get; public set; }
    public ReadOnlyArray`1<GroupNode> get_AdminAccessGroups();
    public void set_AdminAccessGroups(ReadOnlyArray`1<GroupNode> value);
}
public enum Mosaik.Schema.AIAssistantTemperature : Enum {
    public int value__;
    public static AIAssistantTemperature Precise;
    public static AIAssistantTemperature Balanced;
    public static AIAssistantTemperature Creative;
}
public class Mosaik.Schema.AIAssistantTemplate : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <PromptChat>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <PromptQA>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIAssistantTemperature <Temperature>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <CommandUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UserAccess <Access>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasKnowledgeSources>k__BackingField;
    public static string DefaultAIAssistantCommand;
    public static string DefaultAssistantImage;
    public static string DefaultName;
    public static string DefaultChatPromptTemplate;
    public static string DefaultQAPromptTemplate;
    public UID128 UID { get; public set; }
    public string Name { get; public set; }
    public string PromptChat { get; public set; }
    public string PromptQA { get; public set; }
    public AIAssistantTemperature Temperature { get; public set; }
    public UID128 CommandUID { get; public set; }
    public UserAccess Access { get; public set; }
    public bool HasKnowledgeSources { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Name();
    public void set_Name(string value);
    public string get_PromptChat();
    public void set_PromptChat(string value);
    public string get_PromptQA();
    public void set_PromptQA(string value);
    public AIAssistantTemperature get_Temperature();
    public void set_Temperature(AIAssistantTemperature value);
    public UID128 get_CommandUID();
    public void set_CommandUID(UID128 value);
    public UserAccess get_Access();
    public void set_Access(UserAccess value);
    public bool get_HasKnowledgeSources();
    public void set_HasKnowledgeSources(bool value);
}
public static class Mosaik.Schema.AIChatProviderSources : object {
    public static string AWSBedrock;
    public static string Anthropic;
    public static string MistralAI;
    public static string Llama;
    public static string ChatGPT;
    public static string Custom;
}
public enum Mosaik.Schema.AIModelRunnerState : Enum {
    public int value__;
    public static AIModelRunnerState NotAvailable;
    public static AIModelRunnerState ServerNotConnected;
    public static AIModelRunnerState ServerInvalidKey;
    public static AIModelRunnerState ModelNotDownloaded;
    public static AIModelRunnerState Available;
    public static AIModelRunnerState Checking;
    public static AIModelRunnerState Downloading;
    public static AIModelRunnerState ConnectedAndAvailable;
    public static AIModelRunnerState DownloadedAndAvailable;
}
public class Mosaik.Schema.AIModelState : object {
    [DebuggerBrowsableAttribute]
private AIModelRunnerState <State>k__BackingField;
    public AIModelRunnerState State { get; public set; }
    public AIModelRunnerState get_State();
    public void set_State(AIModelRunnerState value);
}
public enum Mosaik.Schema.AIProvider : Enum {
    public int value__;
    public static AIProvider OpenAI;
    public static AIProvider LocalLLama;
    public static AIProvider LLamaServer;
    public static AIProvider AWSBedrock;
    public static AIProvider AnthropicTask;
    public static AIProvider MistralAITask;
    public static AIProvider Custom;
}
public class Mosaik.Schema.AIProviderInfo : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIProvider <AIChatProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsDefault>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public AIProvider AIChatProvider { get; public set; }
    public string DisplayName { get; public set; }
    public bool IsDefault { get; public set; }
    public UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public AIProvider get_AIChatProvider();
    public void set_AIChatProvider(AIProvider value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
}
public class Mosaik.Schema.AIProviderSettings : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIProvider <AIChatProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private List`1<Setting> <Settings>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsDefault>k__BackingField;
    private SettingsHolder _settingsHolder;
    public UID128 TaskUID { get; public set; }
    public AIProvider AIChatProvider { get; public set; }
    public List`1<Setting> Settings { get; public set; }
    public bool IsDefault { get; public set; }
    public SettingsHolder SettingsHolder { get; public set; }
    public UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public AIProvider get_AIChatProvider();
    public void set_AIChatProvider(AIProvider value);
    public List`1<Setting> get_Settings();
    public void set_Settings(List`1<Setting> value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
    public SettingsHolder get_SettingsHolder();
    public void set_SettingsHolder(SettingsHolder value);
}
public enum Mosaik.Schema.AISearchAgeCutoff : Enum {
    public int value__;
    public static AISearchAgeCutoff OneMonth;
    public static AISearchAgeCutoff ThreeMonths;
    public static AISearchAgeCutoff SixMonths;
    public static AISearchAgeCutoff OneYear;
    public static AISearchAgeCutoff Unrestricted;
}
public class Mosaik.Schema.AISearchPreferences : object {
    [DebuggerBrowsableAttribute]
private bool <Enabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private FilesType[] <FileTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<AISearchAgeCutoff> <FileAgeCutoff>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <SourcesToIndex>k__BackingField;
    public bool Enabled { get; public set; }
    public FilesType[] FileTypes { get; public set; }
    public Nullable`1<AISearchAgeCutoff> FileAgeCutoff { get; public set; }
    public String[] SourcesToIndex { get; public set; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public FilesType[] get_FileTypes();
    public void set_FileTypes(FilesType[] value);
    public Nullable`1<AISearchAgeCutoff> get_FileAgeCutoff();
    public void set_FileAgeCutoff(Nullable`1<AISearchAgeCutoff> value);
    public String[] get_SourcesToIndex();
    public void set_SourcesToIndex(String[] value);
}
public class Mosaik.Schema.Alias : object {
    [DebuggerBrowsableAttribute]
private string <Value>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreCase>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    public string Value { get; public set; }
    public string Language { get; public set; }
    public bool IgnoreCase { get; public set; }
    public UID128 UID { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public string get_Language();
    public void set_Language(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
}
public class Mosaik.Schema.AliasesList : object {
    [DebuggerBrowsableAttribute]
private Alias[] <Aliases>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Count>k__BackingField;
    public Alias[] Aliases { get; public set; }
    public int Count { get; public set; }
    public Alias[] get_Aliases();
    public void set_Aliases(Alias[] value);
    public int get_Count();
    public void set_Count(int value);
}
public class Mosaik.Schema.AnthropicModelInfo : object {
    [DebuggerBrowsableAttribute]
private string <ModelId>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ModelName>k__BackingField;
    [DebuggerBrowsableAttribute]
private UInt32 <MaxInputContext>k__BackingField;
    [DebuggerBrowsableAttribute]
private UInt32 <MaxOutputContext>k__BackingField;
    public string ModelId { get; public set; }
    public string ModelName { get; public set; }
    public UInt32 MaxInputContext { get; public set; }
    public UInt32 MaxOutputContext { get; public set; }
    public string get_ModelId();
    public void set_ModelId(string value);
    public string get_ModelName();
    public void set_ModelName(string value);
    public UInt32 get_MaxInputContext();
    public void set_MaxInputContext(UInt32 value);
    public UInt32 get_MaxOutputContext();
    public void set_MaxOutputContext(UInt32 value);
}
public class Mosaik.Schema.AppPreferences : object {
    [DebuggerBrowsableAttribute]
private bool <OpenAtLogin>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HideSplashscreen>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <OpenAsHidden>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableTransparency>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HideFromDock>k__BackingField;
    [DebuggerBrowsableAttribute]
private CommandShowPosition <CommandBarPosition>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScreenToShow <CommandBarScreen>k__BackingField;
    public bool OpenAtLogin { get; public set; }
    public bool HideSplashscreen { get; public set; }
    public bool OpenAsHidden { get; public set; }
    public bool DisableTransparency { get; public set; }
    public bool HideFromDock { get; public set; }
    public CommandShowPosition CommandBarPosition { get; public set; }
    public ScreenToShow CommandBarScreen { get; public set; }
    public bool get_OpenAtLogin();
    public void set_OpenAtLogin(bool value);
    public bool get_HideSplashscreen();
    public void set_HideSplashscreen(bool value);
    public bool get_OpenAsHidden();
    public void set_OpenAsHidden(bool value);
    public bool get_DisableTransparency();
    public void set_DisableTransparency(bool value);
    public bool get_HideFromDock();
    public void set_HideFromDock(bool value);
    public CommandShowPosition get_CommandBarPosition();
    public void set_CommandBarPosition(CommandShowPosition value);
    public ScreenToShow get_CommandBarScreen();
    public void set_CommandBarScreen(ScreenToShow value);
}
public class Mosaik.Schema.AudioTranscript : object {
    [DebuggerBrowsableAttribute]
private Excerpt[] <Excerpts>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <DurationMs>k__BackingField;
    public Excerpt[] Excerpts { get; public set; }
    public LanguageDTO Language { get; public set; }
    public float DurationMs { get; public set; }
    public Excerpt[] get_Excerpts();
    public void set_Excerpts(Excerpt[] value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public float get_DurationMs();
    public void set_DurationMs(float value);
}
public class Mosaik.Schema.AuditActivity : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UserUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TargetUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private AuditType <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Details>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public UID128 UID { get; public set; }
    public UID128 UserUID { get; public set; }
    public UID128 TargetUID { get; public set; }
    public AuditType Type { get; public set; }
    public string Details { get; public set; }
    public DateTimeOffset Timestamp { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public UID128 get_UserUID();
    public void set_UserUID(UID128 value);
    public UID128 get_TargetUID();
    public void set_TargetUID(UID128 value);
    public AuditType get_Type();
    public void set_Type(AuditType value);
    public string get_Details();
    public void set_Details(string value);
    public DateTimeOffset get_Timestamp();
    public void set_Timestamp(DateTimeOffset value);
}
public class Mosaik.Schema.AuditActivityRequest : object {
    [DebuggerBrowsableAttribute]
private UID128[] <UserUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <TargetUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private AuditType[] <Types>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <From>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <To>k__BackingField;
    public UID128[] UserUIDs { get; public set; }
    public UID128[] TargetUIDs { get; public set; }
    public AuditType[] Types { get; public set; }
    public Nullable`1<DateTimeOffset> From { get; public set; }
    public Nullable`1<DateTimeOffset> To { get; public set; }
    public UID128[] get_UserUIDs();
    public void set_UserUIDs(UID128[] value);
    public UID128[] get_TargetUIDs();
    public void set_TargetUIDs(UID128[] value);
    public AuditType[] get_Types();
    public void set_Types(AuditType[] value);
    public Nullable`1<DateTimeOffset> get_From();
    public void set_From(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_To();
    public void set_To(Nullable`1<DateTimeOffset> value);
}
public enum Mosaik.Schema.AuditLogRetention : Enum {
    public int value__;
    public static AuditLogRetention Forever;
    public static AuditLogRetention OneWeek;
    public static AuditLogRetention OneMonth;
    public static AuditLogRetention ThreeMonths;
    public static AuditLogRetention SixMonths;
    public static AuditLogRetention OneYear;
    public static AuditLogRetention FiveYears;
    public static AuditLogRetention TenYears;
}
public class Mosaik.Schema.AuditLogRetentionResponse : object {
    [DebuggerBrowsableAttribute]
private AuditLogRetention <AuditLogRetention>k__BackingField;
    public AuditLogRetention AuditLogRetention { get; public set; }
    public AuditLogRetention get_AuditLogRetention();
    public void set_AuditLogRetention(AuditLogRetention value);
}
public enum Mosaik.Schema.AuthState : Enum {
    public int value__;
    public static AuthState Authorized;
    public static AuthState Expired;
    public static AuthState NotYetAuthorized;
    public static AuthState Error;
    public static AuthState BeingCurrentlyDeleted;
    public static AuthState Unavailable;
}
public class Mosaik.Schema.AutocompleteSuggestion : object {
    public string value;
    public string uid;
    public string type;
    public float count;
}
public class Mosaik.Schema.AWSBedrockModelInfo : object {
    [DebuggerBrowsableAttribute]
private string <ModelId>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ModelName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ProviderName>k__BackingField;
    public string ModelId { get; public set; }
    public string ModelName { get; public set; }
    public string ProviderName { get; public set; }
    public string get_ModelId();
    public void set_ModelId(string value);
    public string get_ModelName();
    public void set_ModelName(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
}
public class Mosaik.Schema.AWSRegionEndpoint : object {
    [DebuggerBrowsableAttribute]
private string <SystemName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    public string SystemName { get; public set; }
    public string DisplayName { get; public set; }
    public string get_SystemName();
    public void set_SystemName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
}
public class Mosaik.Schema.BackupInfo : object {
    [DebuggerBrowsableAttribute]
private int <Index>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Tag>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    public int Index { get; public set; }
    public string Tag { get; public set; }
    public DateTimeOffset Timestamp { get; public set; }
    public int get_Index();
    public void set_Index(int value);
    public string get_Tag();
    public void set_Tag(string value);
    public DateTimeOffset get_Timestamp();
    public void set_Timestamp(DateTimeOffset value);
}
public class Mosaik.Schema.CalendarData : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DescriptionHTML>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DefaultTimeZone>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Location>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Source>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Color>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TextColor>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Hidden>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <UserCanAdd>k__BackingField;
    public UID128 UID { get; public set; }
    public string Identifier { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string DescriptionHTML { get; public set; }
    public string DefaultTimeZone { get; public set; }
    public string Location { get; public set; }
    public string Source { get; public set; }
    public string Color { get; public set; }
    public string TextColor { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public bool Hidden { get; public set; }
    public UID128 TaskUID { get; public set; }
    public bool UserCanAdd { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Identifier();
    public void set_Identifier(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_DescriptionHTML();
    public void set_DescriptionHTML(string value);
    public string get_DefaultTimeZone();
    public void set_DefaultTimeZone(string value);
    public string get_Location();
    public void set_Location(string value);
    public string get_Source();
    public void set_Source(string value);
    public string get_Color();
    public void set_Color(string value);
    public string get_TextColor();
    public void set_TextColor(string value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public bool get_UserCanAdd();
    public void set_UserCanAdd(bool value);
}
public class Mosaik.Schema.CalendarDateRange : object {
    [DebuggerBrowsableAttribute]
private CalendarDateTime <Start>k__BackingField;
    [DebuggerBrowsableAttribute]
private CalendarDateTime <End>k__BackingField;
    public CalendarDateTime Start { get; public set; }
    public CalendarDateTime End { get; public set; }
    public CalendarDateTime get_Start();
    public void set_Start(CalendarDateTime value);
    public CalendarDateTime get_End();
    public void set_End(CalendarDateTime value);
}
public class Mosaik.Schema.CalendarDateTime : ValueType {
    [DebuggerBrowsableAttribute]
private int <YearUTC>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MonthUTC>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <DayUTC>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <HourUTC>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MinuteUTC>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <SecondUTC>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TimeZoneIANA>k__BackingField;
    public int YearUTC { get; public set; }
    public int MonthUTC { get; public set; }
    public int DayUTC { get; public set; }
    public int HourUTC { get; public set; }
    public int MinuteUTC { get; public set; }
    public int SecondUTC { get; public set; }
    public string TimeZoneIANA { get; public set; }
    public int get_YearUTC();
    public void set_YearUTC(int value);
    public int get_MonthUTC();
    public void set_MonthUTC(int value);
    public int get_DayUTC();
    public void set_DayUTC(int value);
    public int get_HourUTC();
    public void set_HourUTC(int value);
    public int get_MinuteUTC();
    public void set_MinuteUTC(int value);
    public int get_SecondUTC();
    public void set_SecondUTC(int value);
    public string get_TimeZoneIANA();
    public void set_TimeZoneIANA(string value);
    public virtual string ToString();
}
public class Mosaik.Schema.CalendarEvent : object {
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DescriptionHTML>k__BackingField;
    [DebuggerBrowsableAttribute]
private EventLocation[] <Locations>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Status>k__BackingField;
    [DebuggerBrowsableAttribute]
private CalendarDateTime <Start>k__BackingField;
    [DebuggerBrowsableAttribute]
private CalendarDateTime <End>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsAllDay>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private CalendarEventAttendee[] <Attendees>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ConferenceUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ColorId>k__BackingField;
    [DebuggerBrowsableAttribute]
private EventShowAs <ShowAs>k__BackingField;
    [DebuggerBrowsableAttribute]
private RecurrencePattern <Recurrence>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string DescriptionHTML { get; public set; }
    public EventLocation[] Locations { get; public set; }
    public string Status { get; public set; }
    public CalendarDateTime Start { get; public set; }
    public CalendarDateTime End { get; public set; }
    public bool IsAllDay { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public CalendarEventAttendee[] Attendees { get; public set; }
    public string Url { get; public set; }
    public string ConferenceUrl { get; public set; }
    public string ColorId { get; public set; }
    public EventShowAs ShowAs { get; public set; }
    public RecurrencePattern Recurrence { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_DescriptionHTML();
    public void set_DescriptionHTML(string value);
    public EventLocation[] get_Locations();
    public void set_Locations(EventLocation[] value);
    public string get_Status();
    public void set_Status(string value);
    public CalendarDateTime get_Start();
    public void set_Start(CalendarDateTime value);
    public CalendarDateTime get_End();
    public void set_End(CalendarDateTime value);
    public bool get_IsAllDay();
    public void set_IsAllDay(bool value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public CalendarEventAttendee[] get_Attendees();
    public void set_Attendees(CalendarEventAttendee[] value);
    public string get_Url();
    public void set_Url(string value);
    public string get_ConferenceUrl();
    public void set_ConferenceUrl(string value);
    public string get_ColorId();
    public void set_ColorId(string value);
    public EventShowAs get_ShowAs();
    public void set_ShowAs(EventShowAs value);
    public RecurrencePattern get_Recurrence();
    public void set_Recurrence(RecurrencePattern value);
}
public enum Mosaik.Schema.CalendarEventAttendanceTypes : Enum {
    public int value__;
    public static CalendarEventAttendanceTypes Yes;
    public static CalendarEventAttendanceTypes Maybe;
    public static CalendarEventAttendanceTypes No;
}
public class Mosaik.Schema.CalendarEventAttendee : object {
    [DebuggerBrowsableAttribute]
private string <FullName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Email>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <ContactUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<AttendeeType> <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<AttendeeStatus> <State>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsOrganizer>k__BackingField;
    public string FullName { get; public set; }
    public string Email { get; public set; }
    public UID128 ContactUID { get; public set; }
    public Nullable`1<AttendeeType> Type { get; public set; }
    public Nullable`1<AttendeeStatus> State { get; public set; }
    public bool IsOrganizer { get; public set; }
    public string get_FullName();
    public void set_FullName(string value);
    public string get_Email();
    public void set_Email(string value);
    public UID128 get_ContactUID();
    public void set_ContactUID(UID128 value);
    public Nullable`1<AttendeeType> get_Type();
    public void set_Type(Nullable`1<AttendeeType> value);
    public Nullable`1<AttendeeStatus> get_State();
    public void set_State(Nullable`1<AttendeeStatus> value);
    public bool get_IsOrganizer();
    public void set_IsOrganizer(bool value);
}
public class Mosaik.Schema.CalendarEventImported : CalendarEvent {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <Attachments>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <CalendarUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasAttendees>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsRecurrent>k__BackingField;
    public UID128 UID { get; public set; }
    public string Identifier { get; public set; }
    public UID128[] Attachments { get; public set; }
    public UID128 CalendarUID { get; public set; }
    public bool HasAttendees { get; public set; }
    public bool IsRecurrent { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Identifier();
    public void set_Identifier(string value);
    public UID128[] get_Attachments();
    public void set_Attachments(UID128[] value);
    public UID128 get_CalendarUID();
    public void set_CalendarUID(UID128 value);
    public bool get_HasAttendees();
    public void set_HasAttendees(bool value);
    public bool get_IsRecurrent();
    public void set_IsRecurrent(bool value);
}
public enum Mosaik.Schema.CalendarEventRecurrentEventEditType : Enum {
    public int value__;
    public static CalendarEventRecurrentEventEditType SingleEvent;
    public static CalendarEventRecurrentEventEditType SingleEventInSeries;
    public static CalendarEventRecurrentEventEditType FromThisEventInSeries;
    public static CalendarEventRecurrentEventEditType AllEventsInSeries;
}
public class Mosaik.Schema.CalendarEventUpdateData : object {
    [DebuggerBrowsableAttribute]
private CalendarEventImported <UpdatedEvent>k__BackingField;
    [DebuggerBrowsableAttribute]
private TargetCalendarData <TargetCalenderData>k__BackingField;
    public CalendarEventImported UpdatedEvent { get; public set; }
    public TargetCalendarData TargetCalenderData { get; public set; }
    public CalendarEventImported get_UpdatedEvent();
    public void set_UpdatedEvent(CalendarEventImported value);
    public TargetCalendarData get_TargetCalenderData();
    public void set_TargetCalenderData(TargetCalendarData value);
}
public class Mosaik.Schema.CalendarPreferences : object {
    [DebuggerBrowsableAttribute]
private bool <CalendarEnabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableReminders>k__BackingField;
    [DebuggerBrowsableAttribute]
private DayOfWeek <FirstDayOfWeek>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID128, UID128> <DefaultCalendar>k__BackingField;
    public bool CalendarEnabled { get; public set; }
    public bool EnableReminders { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public Dictionary`2<UID128, UID128> DefaultCalendar { get; public set; }
    public bool get_CalendarEnabled();
    public void set_CalendarEnabled(bool value);
    public bool get_EnableReminders();
    public void set_EnableReminders(bool value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public Dictionary`2<UID128, UID128> get_DefaultCalendar();
    public void set_DefaultCalendar(Dictionary`2<UID128, UID128> value);
}
public class Mosaik.Schema.ChangeBoost : object {
    [DebuggerBrowsableAttribute]
private UID128 <IncreaseFor>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <DecreaseFor>k__BackingField;
    public UID128 IncreaseFor { get; public set; }
    public UID128[] DecreaseFor { get; public set; }
    public UID128 get_IncreaseFor();
    public void set_IncreaseFor(UID128 value);
    public UID128[] get_DecreaseFor();
    public void set_DecreaseFor(UID128[] value);
}
public class Mosaik.Schema.ChatAI_Message : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <ChatUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <Author>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Text>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Time>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <ChattingAbout>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<int, ChatAI_Reference> <References>k__BackingField;
    public UID128 UID { get; public set; }
    public UID128 ChatUID { get; public set; }
    public UID128 Author { get; public set; }
    public string Text { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public UID128 ChattingAbout { get; public set; }
    public Dictionary`2<int, ChatAI_Reference> References { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public UID128 get_ChatUID();
    public void set_ChatUID(UID128 value);
    public UID128 get_Author();
    public void set_Author(UID128 value);
    public string get_Text();
    public void set_Text(string value);
    public DateTimeOffset get_Time();
    public void set_Time(DateTimeOffset value);
    public UID128 get_ChattingAbout();
    public void set_ChattingAbout(UID128 value);
    public Dictionary`2<int, ChatAI_Reference> get_References();
    public void set_References(Dictionary`2<int, ChatAI_Reference> value);
}
public class Mosaik.Schema.ChatAI_Process : object {
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Progress>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Id>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Done>k__BackingField;
    public string Name { get; public set; }
    public string Image { get; public set; }
    public float Progress { get; public set; }
    public int Id { get; public set; }
    public bool Done { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Image();
    public void set_Image(string value);
    public float get_Progress();
    public void set_Progress(float value);
    public int get_Id();
    public void set_Id(int value);
    public bool get_Done();
    public void set_Done(bool value);
}
public class Mosaik.Schema.ChatAI_Reference : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Page>k__BackingField;
    public UID128 UID { get; public set; }
    public int Page { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public int get_Page();
    public void set_Page(int value);
    public virtual string ToString();
}
public class Mosaik.Schema.ChatAIDraftEmailRequest : object {
    [DebuggerBrowsableAttribute]
private string <Text>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Subject>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <To>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Cc>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Style>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Draft>k__BackingField;
    public string Text { get; public set; }
    public string Subject { get; public set; }
    public String[] To { get; public set; }
    public String[] Cc { get; public set; }
    public string Style { get; public set; }
    public string Draft { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public String[] get_To();
    public void set_To(String[] value);
    public String[] get_Cc();
    public void set_Cc(String[] value);
    public string get_Style();
    public void set_Style(string value);
    public string get_Draft();
    public void set_Draft(string value);
}
public enum Mosaik.Schema.ChatAIMessagesRetention : Enum {
    public int value__;
    public static ChatAIMessagesRetention OneDay;
    public static ChatAIMessagesRetention OneWeek;
    public static ChatAIMessagesRetention TwoWeeks;
    public static ChatAIMessagesRetention OneMonth;
    public static ChatAIMessagesRetention SixMonths;
    public static ChatAIMessagesRetention OneYear;
    public static ChatAIMessagesRetention Forever;
}
public class Mosaik.Schema.ChatAISettings : object {
    [DebuggerBrowsableAttribute]
private ChatAIMessagesRetention <AIChatRetention>k__BackingField;
    public ChatAIMessagesRetention AIChatRetention { get; public set; }
    public ChatAIMessagesRetention get_AIChatRetention();
    public void set_AIChatRetention(ChatAIMessagesRetention value);
}
public static class Mosaik.Schema.ChatCompletionTypes : object {
    public static string DONE;
    public static string FAIL;
    public static string CANCELED;
    public static string PROC;
}
public enum Mosaik.Schema.ChatGPTModel : Enum {
    public int value__;
    public static ChatGPTModel GPT35;
    public static ChatGPTModel GPT4;
    public static ChatGPTModel GPT4_Mini;
}
public class Mosaik.Schema.ChatMessageData : object {
    [DebuggerBrowsableAttribute]
private UID128 <SenderUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <HTML>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Text>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Source>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ExternalLink>k__BackingField;
    public UID128 SenderUID { get; public set; }
    public UID128 UID { get; public set; }
    public string HTML { get; public set; }
    public string Text { get; public set; }
    public string Source { get; public set; }
    public DateTimeOffset Timestamp { get; public set; }
    public string ExternalLink { get; public set; }
    public UID128 get_SenderUID();
    public void set_SenderUID(UID128 value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_HTML();
    public void set_HTML(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Source();
    public void set_Source(string value);
    public DateTimeOffset get_Timestamp();
    public void set_Timestamp(DateTimeOffset value);
    public string get_ExternalLink();
    public void set_ExternalLink(string value);
}
public class Mosaik.Schema.ChatMetadata : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Time>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIAssistantTemplate <AIAssistantTemplate>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIProviderInfo <ChatAIProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <ChattingAbout>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <ExamplePrompts>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsPinned>k__BackingField;
    public UID128 UID { get; public set; }
    public string Name { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public AIAssistantTemplate AIAssistantTemplate { get; public set; }
    public AIProviderInfo ChatAIProvider { get; public set; }
    public UID128[] ChattingAbout { get; public set; }
    public String[] ExamplePrompts { get; public set; }
    public bool IsPinned { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Name();
    public void set_Name(string value);
    public DateTimeOffset get_Time();
    public void set_Time(DateTimeOffset value);
    public AIAssistantTemplate get_AIAssistantTemplate();
    public void set_AIAssistantTemplate(AIAssistantTemplate value);
    public AIProviderInfo get_ChatAIProvider();
    public void set_ChatAIProvider(AIProviderInfo value);
    public UID128[] get_ChattingAbout();
    public void set_ChattingAbout(UID128[] value);
    public String[] get_ExamplePrompts();
    public void set_ExamplePrompts(String[] value);
    public bool get_IsPinned();
    public void set_IsPinned(bool value);
}
public class Mosaik.Schema.ClipboardContentTypes : object {
    public static string plainText;
    public static string rtfText;
    public static string htmlText;
    public static string image;
    public static string uriList;
    public static string csv;
    public static string css;
    public static string xhml;
    public static string imgjpg;
    public static string imgjpeg;
    public static string imgGif;
    public static string imgSvg;
    public static string appXml;
    public static string textXml;
    public static string js;
    public static string json;
    public static string data;
}
public class Mosaik.Schema.ClipboardOptions : object {
    [DebuggerBrowsableAttribute]
private bool <Enabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<ClipboardRetention> <Retention>k__BackingField;
    public bool Enabled { get; public set; }
    public Nullable`1<ClipboardRetention> Retention { get; public set; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public Nullable`1<ClipboardRetention> get_Retention();
    public void set_Retention(Nullable`1<ClipboardRetention> value);
}
public enum Mosaik.Schema.ClipboardRetention : Enum {
    public int value__;
    public static ClipboardRetention OneDay;
    public static ClipboardRetention OneWeek;
    public static ClipboardRetention TwoWeeks;
    public static ClipboardRetention OneMonth;
    public static ClipboardRetention SixMonths;
    public static ClipboardRetention OneYear;
    public static ClipboardRetention Forever;
}
public class Mosaik.Schema.ClrThreadInfo : object {
    [DebuggerBrowsableAttribute]
private string <GCMode>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsFinalizer>k__BackingField;
    [DebuggerBrowsableAttribute]
private ulong <Address>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsAlive>k__BackingField;
    [DebuggerBrowsableAttribute]
private UInt32 <OSThreadId>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <ManagedThreadId>k__BackingField;
    [DebuggerBrowsableAttribute]
private UInt32 <LockCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private ulong <StackBase>k__BackingField;
    [DebuggerBrowsableAttribute]
private ulong <StackLimit>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <StackTrace>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <CurrentException>k__BackingField;
    public string GCMode { get; public set; }
    public bool IsFinalizer { get; public set; }
    public ulong Address { get; public set; }
    public bool IsAlive { get; public set; }
    public UInt32 OSThreadId { get; public set; }
    public int ManagedThreadId { get; public set; }
    public UInt32 LockCount { get; public set; }
    public ulong StackBase { get; public set; }
    public ulong StackLimit { get; public set; }
    public string StackTrace { get; public set; }
    public string CurrentException { get; public set; }
    public string get_GCMode();
    public void set_GCMode(string value);
    public bool get_IsFinalizer();
    public void set_IsFinalizer(bool value);
    public ulong get_Address();
    public void set_Address(ulong value);
    public bool get_IsAlive();
    public void set_IsAlive(bool value);
    public UInt32 get_OSThreadId();
    public void set_OSThreadId(UInt32 value);
    public int get_ManagedThreadId();
    public void set_ManagedThreadId(int value);
    public UInt32 get_LockCount();
    public void set_LockCount(UInt32 value);
    public ulong get_StackBase();
    public void set_StackBase(ulong value);
    public ulong get_StackLimit();
    public void set_StackLimit(ulong value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public string get_CurrentException();
    public void set_CurrentException(string value);
}
public class Mosaik.Schema.CodeEndpoint : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <EndpointPath>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Code>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <AdminOnly>k__BackingField;
    [DebuggerBrowsableAttribute]
private UInt32 <CacheDurationInSeconds>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <SuccessfullyPrecompiled>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <UseSimpleInterface>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <AllowUnauthenticatedAccess>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <RunSyncWithRequest>k__BackingField;
    public UID128 UID { get; public set; }
    public string EndpointPath { get; public set; }
    public String[] Code { get; public set; }
    public bool AdminOnly { get; public set; }
    public UInt32 CacheDurationInSeconds { get; public set; }
    public bool SuccessfullyPrecompiled { get; public set; }
    public bool UseSimpleInterface { get; public set; }
    public bool AllowUnauthenticatedAccess { get; public set; }
    public bool RunSyncWithRequest { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_EndpointPath();
    public void set_EndpointPath(string value);
    public String[] get_Code();
    public void set_Code(String[] value);
    public bool get_AdminOnly();
    public void set_AdminOnly(bool value);
    public UInt32 get_CacheDurationInSeconds();
    public void set_CacheDurationInSeconds(UInt32 value);
    public bool get_SuccessfullyPrecompiled();
    public void set_SuccessfullyPrecompiled(bool value);
    public bool get_UseSimpleInterface();
    public void set_UseSimpleInterface(bool value);
    public bool get_AllowUnauthenticatedAccess();
    public void set_AllowUnauthenticatedAccess(bool value);
    public bool get_RunSyncWithRequest();
    public void set_RunSyncWithRequest(bool value);
}
public class Mosaik.Schema.CodeEndpointCreateResult : object {
    [DebuggerBrowsableAttribute]
private bool <Success>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<CompileError> <Errors>k__BackingField;
    public bool Success { get; public set; }
    public UID128 UID { get; public set; }
    public ReadOnlyArray`1<CompileError> Errors { get; public set; }
    public bool get_Success();
    public void set_Success(bool value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public ReadOnlyArray`1<CompileError> get_Errors();
    public void set_Errors(ReadOnlyArray`1<CompileError> value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.CodeExecutionResult : object {
    [DebuggerBrowsableAttribute]
private bool <Success>k__BackingField;
    [DebuggerBrowsableAttribute]
private object <Result>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<CompileError> <Errors>k__BackingField;
    public bool Success { get; public set; }
    public object Result { get; public set; }
    public ReadOnlyArray`1<CompileError> Errors { get; public set; }
    public bool get_Success();
    public void set_Success(bool value);
    public object get_Result();
    public void set_Result(object value);
    public ReadOnlyArray`1<CompileError> get_Errors();
    public void set_Errors(ReadOnlyArray`1<CompileError> value);
}
public enum Mosaik.Schema.CommandShowPosition : Enum {
    public int value__;
    public static CommandShowPosition Center;
    public static CommandShowPosition BottomCenter;
    public static CommandShowPosition BottomRight;
}
public class Mosaik.Schema.CompareBy`2 : object {
    private Func`2<T, TVal> _getter;
    public CompareBy`2(Func`2<T, TVal> getter);
    public sealed virtual bool Equals(T first, T second);
    public sealed virtual int GetHashCode(T value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.CompileError : object {
    [DebuggerBrowsableAttribute]
private string <ID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private ErrorLocationDetails <Location>k__BackingField;
    public string ID { get; public set; }
    public string Message { get; public set; }
    public ErrorLocationDetails Location { get; public set; }
    public string get_ID();
    public void set_ID(string value);
    public string get_Message();
    public void set_Message(string value);
    public ErrorLocationDetails get_Location();
    public void set_Location(ErrorLocationDetails value);
}
public class Mosaik.Schema.ConfirmAccountRequest : object {
    [DebuggerBrowsableAttribute]
private string <OTP>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Email>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FirstName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DesktopToken>k__BackingField;
    public string OTP { get; public set; }
    public string Email { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string DesktopToken { get; public set; }
    public ConfirmAccountRequest(string otp, string email, string firstName, string lastName, string desktopToken);
    public string get_OTP();
    public void set_OTP(string value);
    public string get_Email();
    public void set_Email(string value);
    public string get_FirstName();
    public void set_FirstName(string value);
    public string get_LastName();
    public void set_LastName(string value);
    public string get_DesktopToken();
    public void set_DesktopToken(string value);
}
public class Mosaik.Schema.ConnectWorkspaceResponse : object {
    [DebuggerBrowsableAttribute]
private bool <Success>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <WorkspaceID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ErrorMessage>k__BackingField;
    public bool Success { get; public set; }
    public string WorkspaceID { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool get_Success();
    public void set_Success(bool value);
    public string get_WorkspaceID();
    public void set_WorkspaceID(string value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
}
public class Mosaik.Schema.ContactData : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Email>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FirstName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <CanonicalName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <JobTitle>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Phones>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <OtherEmails>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <ExternalLinks>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Sources>k__BackingField;
    public UID128 UID { get; public set; }
    public string Email { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string CanonicalName { get; public set; }
    public string DisplayName { get; public set; }
    public string JobTitle { get; public set; }
    public String[] Phones { get; public set; }
    public String[] OtherEmails { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public String[] ExternalLinks { get; public set; }
    public string FullName { get; }
    public String[] Sources { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Email();
    public void set_Email(string value);
    public string get_FirstName();
    public void set_FirstName(string value);
    public string get_LastName();
    public void set_LastName(string value);
    public string get_CanonicalName();
    public void set_CanonicalName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_JobTitle();
    public void set_JobTitle(string value);
    public String[] get_Phones();
    public void set_Phones(String[] value);
    public String[] get_OtherEmails();
    public void set_OtherEmails(String[] value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public String[] get_ExternalLinks();
    public void set_ExternalLinks(String[] value);
    public string get_FullName();
    public String[] get_Sources();
    public void set_Sources(String[] value);
    public Node AsLabelNode();
}
public class Mosaik.Schema.ContactEvents : object {
    [DebuggerBrowsableAttribute]
private CalendarEventImported[] <UpcommingEvents>k__BackingField;
    [DebuggerBrowsableAttribute]
private CalendarEventImported[] <RecentEvents>k__BackingField;
    public CalendarEventImported[] UpcommingEvents { get; public set; }
    public CalendarEventImported[] RecentEvents { get; public set; }
    public CalendarEventImported[] get_UpcommingEvents();
    public void set_UpcommingEvents(CalendarEventImported[] value);
    public CalendarEventImported[] get_RecentEvents();
    public void set_RecentEvents(CalendarEventImported[] value);
}
public class Mosaik.Schema.ContactsPreferences : object {
    [DebuggerBrowsableAttribute]
private bool <ContactsEnabled>k__BackingField;
    public bool ContactsEnabled { get; public set; }
    public bool get_ContactsEnabled();
    public void set_ContactsEnabled(bool value);
}
public class Mosaik.Schema.CoOccurrenceRequest : object {
    [DebuggerBrowsableAttribute]
private string <FromNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ToNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private List`1<UID128> <FromUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private List`1<UID128> <ToUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitFrom>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <CoOccurrenceThreshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <FromDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <ToDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <IncludeNodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <ExcludeNodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <EdgeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <AssumeBidirectionalEdges>k__BackingField;
    public string FromNodeType { get; public set; }
    public string ToNodeType { get; public set; }
    public List`1<UID128> FromUIDs { get; public set; }
    public List`1<UID128> ToUIDs { get; public set; }
    public int LimitFrom { get; public set; }
    public int LimitTo { get; public set; }
    public int CoOccurrenceThreshold { get; public set; }
    public DateTime FromDate { get; public set; }
    public DateTime ToDate { get; public set; }
    public String[] IncludeNodeTypes { get; public set; }
    public String[] ExcludeNodeTypes { get; public set; }
    public String[] EdgeTypes { get; public set; }
    public bool AssumeBidirectionalEdges { get; public set; }
    public string get_FromNodeType();
    public void set_FromNodeType(string value);
    public string get_ToNodeType();
    public void set_ToNodeType(string value);
    public List`1<UID128> get_FromUIDs();
    public void set_FromUIDs(List`1<UID128> value);
    public List`1<UID128> get_ToUIDs();
    public void set_ToUIDs(List`1<UID128> value);
    public int get_LimitFrom();
    public void set_LimitFrom(int value);
    public int get_LimitTo();
    public void set_LimitTo(int value);
    public int get_CoOccurrenceThreshold();
    public void set_CoOccurrenceThreshold(int value);
    public DateTime get_FromDate();
    public void set_FromDate(DateTime value);
    public DateTime get_ToDate();
    public void set_ToDate(DateTime value);
    public String[] get_IncludeNodeTypes();
    public void set_IncludeNodeTypes(String[] value);
    public String[] get_ExcludeNodeTypes();
    public void set_ExcludeNodeTypes(String[] value);
    public String[] get_EdgeTypes();
    public void set_EdgeTypes(String[] value);
    public bool get_AssumeBidirectionalEdges();
    public void set_AssumeBidirectionalEdges(bool value);
}
public class Mosaik.Schema.CoOccurrenceResult : object {
    [DebuggerBrowsableAttribute]
private List`1<UID128> <FromUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private List`1<UID128> <ToUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private Int32[][] <Counts>k__BackingField;
    public List`1<UID128> FromUIDs { get; public set; }
    public List`1<UID128> ToUIDs { get; public set; }
    public Int32[][] Counts { get; public set; }
    public List`1<UID128> get_FromUIDs();
    public void set_FromUIDs(List`1<UID128> value);
    public List`1<UID128> get_ToUIDs();
    public void set_ToUIDs(List`1<UID128> value);
    public Int32[][] get_Counts();
    public void set_Counts(Int32[][] value);
}
public class Mosaik.Schema.CouponResponse : object {
    [DebuggerBrowsableAttribute]
private bool <IsValid>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <EmailHash>k__BackingField;
    public bool IsValid { get; public set; }
    public string Message { get; public set; }
    public string EmailHash { get; public set; }
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public string get_Message();
    public void set_Message(string value);
    public string get_EmailHash();
    public void set_EmailHash(string value);
}
public class Mosaik.Schema.CreateAccountRequest : object {
    [DebuggerBrowsableAttribute]
private string <FirstName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Email>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DesktopToken>k__BackingField;
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Email { get; public set; }
    public string DesktopToken { get; public set; }
    public CreateAccountRequest(string firstName, string lastName, string email, string desktopToken);
    public string get_FirstName();
    public void set_FirstName(string value);
    public string get_LastName();
    public void set_LastName(string value);
    public string get_Email();
    public void set_Email(string value);
    public string get_DesktopToken();
    public void set_DesktopToken(string value);
}
public class Mosaik.Schema.CreateSuggestionRequest : object {
    [DebuggerBrowsableAttribute]
private string <JsonContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <Timestamp>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Reason>k__BackingField;
    public string JsonContent { get; public set; }
    public Nullable`1<DateTimeOffset> Timestamp { get; public set; }
    public string Reason { get; public set; }
    public string get_JsonContent();
    public void set_JsonContent(string value);
    public Nullable`1<DateTimeOffset> get_Timestamp();
    public void set_Timestamp(Nullable`1<DateTimeOffset> value);
    public string get_Reason();
    public void set_Reason(string value);
}
public enum Mosaik.Schema.CurrentExtractingStatus : Enum {
    public int value__;
    public static CurrentExtractingStatus Idle;
    public static CurrentExtractingStatus Resuming;
    public static CurrentExtractingStatus Extracting;
    public static CurrentExtractingStatus Finishing;
    public static CurrentExtractingStatus Pausing;
    public static CurrentExtractingStatus Paused;
}
public class Mosaik.Schema.CustomChatAIProvider : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private SettingsHolder <SettingsHolder>k__BackingField;
    public UID128 UID { get; public set; }
    public SettingsHolder SettingsHolder { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public SettingsHolder get_SettingsHolder();
    public void set_SettingsHolder(SettingsHolder value);
}
public class Mosaik.Schema.CustomChatWithNode : object {
    [DebuggerBrowsableAttribute]
private string <Prompt>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <UIDs>k__BackingField;
    public string Prompt { get; public set; }
    public UID128[] UIDs { get; public set; }
    public string get_Prompt();
    public void set_Prompt(string value);
    public UID128[] get_UIDs();
    public void set_UIDs(UID128[] value);
}
public class Mosaik.Schema.DataConnectorTask : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TaskType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<bool> <AuthorizedForUser>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastStartTimeUtc>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastFinishTimeUtc>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Status>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCompleted>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCanceled>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsRunning>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCreated>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsFailed>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsEnabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsSkipped>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Schedule>k__BackingField;
    public UID128 UID { get; public set; }
    public string TaskType { get; public set; }
    public string Name { get; public set; }
    public Nullable`1<bool> AuthorizedForUser { get; public set; }
    public Nullable`1<DateTimeOffset> LastStartTimeUtc { get; public set; }
    public Nullable`1<DateTimeOffset> LastFinishTimeUtc { get; public set; }
    public string Status { get; public set; }
    public bool IsCompleted { get; public set; }
    public bool IsCanceled { get; public set; }
    public bool IsRunning { get; public set; }
    public bool IsCreated { get; public set; }
    public bool IsFailed { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsSkipped { get; public set; }
    public string Schedule { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_TaskType();
    public void set_TaskType(string value);
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<bool> get_AuthorizedForUser();
    public void set_AuthorizedForUser(Nullable`1<bool> value);
    public Nullable`1<DateTimeOffset> get_LastStartTimeUtc();
    public void set_LastStartTimeUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastFinishTimeUtc();
    public void set_LastFinishTimeUtc(Nullable`1<DateTimeOffset> value);
    public string get_Status();
    public void set_Status(string value);
    public bool get_IsCompleted();
    public void set_IsCompleted(bool value);
    public bool get_IsCanceled();
    public void set_IsCanceled(bool value);
    public bool get_IsRunning();
    public void set_IsRunning(bool value);
    public bool get_IsCreated();
    public void set_IsCreated(bool value);
    public bool get_IsFailed();
    public void set_IsFailed(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsSkipped();
    public void set_IsSkipped(bool value);
    public string get_Schedule();
    public void set_Schedule(string value);
}
public class Mosaik.Schema.DataImport.ImportEdgeResponse : object {
    [DebuggerBrowsableAttribute]
private int <NumberOfConnectionsSuccessfullyProcessed>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <Errors>k__BackingField;
    public int NumberOfConnectionsSuccessfullyProcessed { get; public set; }
    public ReadOnlyArray`1<string> Errors { get; public set; }
    public int get_NumberOfConnectionsSuccessfullyProcessed();
    public void set_NumberOfConnectionsSuccessfullyProcessed(int value);
    public ReadOnlyArray`1<string> get_Errors();
    public void set_Errors(ReadOnlyArray`1<string> value);
}
public class Mosaik.Schema.DataImport.ImportResponse : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <UIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <Errors>k__BackingField;
    public ReadOnlyArray`1<UID128> UIDs { get; public set; }
    public ReadOnlyArray`1<string> Errors { get; public set; }
    public ReadOnlyArray`1<UID128> get_UIDs();
    public void set_UIDs(ReadOnlyArray`1<UID128> value);
    public ReadOnlyArray`1<string> get_Errors();
    public void set_Errors(ReadOnlyArray`1<string> value);
}
public class Mosaik.Schema.DataImport.NodesData : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2[] <Nodes>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreInvalid>k__BackingField;
    public string NodeType { get; public set; }
    public Dictionary`2[] Nodes { get; public set; }
    public bool IgnoreInvalid { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public Dictionary`2[] get_Nodes();
    public void set_Nodes(Dictionary`2[] value);
    public bool get_IgnoreInvalid();
    public void set_IgnoreInvalid(bool value);
}
public class Mosaik.Schema.DataTaskInfo : object {
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <UserCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScheduledTaskType <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Source>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsEnabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ScheduleCronExpression>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCurrentlyRemovingAllUsers>k__BackingField;
    public string DisplayName { get; public set; }
    public UID128 UID { get; public set; }
    public int UserCount { get; public set; }
    public ScheduledTaskType Type { get; public set; }
    public string Source { get; public set; }
    public bool IsEnabled { get; public set; }
    public string ScheduleCronExpression { get; public set; }
    public bool IsCurrentlyRemovingAllUsers { get; public set; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public int get_UserCount();
    public void set_UserCount(int value);
    public ScheduledTaskType get_Type();
    public void set_Type(ScheduledTaskType value);
    public string get_Source();
    public void set_Source(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public string get_ScheduleCronExpression();
    public void set_ScheduleCronExpression(string value);
    public bool get_IsCurrentlyRemovingAllUsers();
    public void set_IsCurrentlyRemovingAllUsers(bool value);
}
public class Mosaik.Schema.DataTaskObjectCount : object {
    [DebuggerBrowsableAttribute]
private bool <HasCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <ObjectCount>k__BackingField;
    public bool HasCount { get; public set; }
    public long ObjectCount { get; public set; }
    public bool get_HasCount();
    public void set_HasCount(bool value);
    public long get_ObjectCount();
    public void set_ObjectCount(long value);
}
[ExtensionAttribute]
public static class Mosaik.Schema.DateTimeExtensions : object {
    [ExtensionAttribute]
public static DateTime ToDate(string time);
    [ExtensionAttribute]
public static string Humanize(DateTimeOffset date);
    [ExtensionAttribute]
public static string Humanize(TimeSpan delta);
    [ExtensionAttribute]
public static string HumanizeLowRes(DateTimeOffset date);
    [ExtensionAttribute]
public static string HumanizeLowRes(DateTime date);
    [ExtensionAttribute]
public static string Humanize(DateTime date);
}
public static class Mosaik.Schema.DefaultQueryLimits : object {
    public static int DefaultQueryLimitForNodes;
    public static int DefaultQueryLimitForUIDs;
}
public class Mosaik.Schema.DisconnectUserBody : object {
    [DebuggerBrowsableAttribute]
private bool <RemoveUser>k__BackingField;
    public bool RemoveUser { get; public set; }
    public bool get_RemoveUser();
    public void set_RemoveUser(bool value);
}
public class Mosaik.Schema.DiscountSeats : object {
    [DebuggerBrowsableAttribute]
private int <Seats>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Discount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <NextSeats>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <NextDiscount>k__BackingField;
    public int Seats { get; public set; }
    public float Discount { get; public set; }
    public int NextSeats { get; public set; }
    public float NextDiscount { get; public set; }
    public int get_Seats();
    public void set_Seats(int value);
    public float get_Discount();
    public void set_Discount(float value);
    public int get_NextSeats();
    public void set_NextSeats(int value);
    public float get_NextDiscount();
    public void set_NextDiscount(float value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.Document : object {
    public string Language;
    public string Value;
    public ReadOnlyArray`1<ReadOnlyArray`1<TokensDatum>> TokensData;
    public int Length;
    public Parameters Metadata;
}
public class Mosaik.Schema.DraftEmail : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Subject>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <SourceEmail>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <DraftMessageUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <From>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <FromUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <ToUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <TO>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <CcUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <CC>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <BccUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <BCC>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <HTMLBody>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TextBody>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <Sent>k__BackingField;
    [DebuggerBrowsableAttribute]
private EmailAction <Action>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Attachments>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <CalendarEvent>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public string Subject { get; public set; }
    public UID128 SourceEmail { get; public set; }
    public UID128 DraftMessageUID { get; public set; }
    public String[] From { get; public set; }
    public String[] FromUIDs { get; public set; }
    public UID128[] ToUIDs { get; public set; }
    public String[] TO { get; public set; }
    public UID128[] CcUIDs { get; public set; }
    public String[] CC { get; public set; }
    public UID128[] BccUIDs { get; public set; }
    public String[] BCC { get; public set; }
    public string HTMLBody { get; public set; }
    public string TextBody { get; public set; }
    public Nullable`1<DateTimeOffset> Sent { get; public set; }
    public EmailAction Action { get; public set; }
    public String[] Attachments { get; public set; }
    public UID128 CalendarEvent { get; public set; }
    public UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public string get_Subject();
    public void set_Subject(string value);
    public UID128 get_SourceEmail();
    public void set_SourceEmail(UID128 value);
    public UID128 get_DraftMessageUID();
    public void set_DraftMessageUID(UID128 value);
    public String[] get_From();
    public void set_From(String[] value);
    public String[] get_FromUIDs();
    public void set_FromUIDs(String[] value);
    public UID128[] get_ToUIDs();
    public void set_ToUIDs(UID128[] value);
    public String[] get_TO();
    public void set_TO(String[] value);
    public UID128[] get_CcUIDs();
    public void set_CcUIDs(UID128[] value);
    public String[] get_CC();
    public void set_CC(String[] value);
    public UID128[] get_BccUIDs();
    public void set_BccUIDs(UID128[] value);
    public String[] get_BCC();
    public void set_BCC(String[] value);
    public string get_HTMLBody();
    public void set_HTMLBody(string value);
    public string get_TextBody();
    public void set_TextBody(string value);
    public Nullable`1<DateTimeOffset> get_Sent();
    public void set_Sent(Nullable`1<DateTimeOffset> value);
    public EmailAction get_Action();
    public void set_Action(EmailAction value);
    public String[] get_Attachments();
    public void set_Attachments(String[] value);
    public UID128 get_CalendarEvent();
    public void set_CalendarEvent(UID128 value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.Edge : NodeOrEdge {
    [DebuggerBrowsableAttribute]
private UID128 <To>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ToType>k__BackingField;
    public UID128 To { get; }
    public string ToType { get; }
    public UID128 get_To();
    public string get_ToType();
}
public class Mosaik.Schema.EdgeEstimates : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, int> <Counts>k__BackingField;
    public Dictionary`2<string, int> Counts { get; public set; }
    public Dictionary`2<string, int> get_Counts();
    public void set_Counts(Dictionary`2<string, int> value);
}
public class Mosaik.Schema.EdgeInferencingRule : object {
    public string EdgeType;
    public string SecondEdgeType;
    public string ResultingEdgeType;
    public bool Recursive;
}
public enum Mosaik.Schema.ElectronIPCMsgType : Enum {
    public int value__;
    public static ElectronIPCMsgType REDIRECT;
    public static ElectronIPCMsgType NOTIFY;
}
public enum Mosaik.Schema.EmailAction : Enum {
    public int value__;
    public static EmailAction NewEmail;
    public static EmailAction Reply;
    public static EmailAction ReplyAll;
    public static EmailAction Forward;
}
public class Mosaik.Schema.EmailArchiveSpaceMetadata : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <RootFolderUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FullPath>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Source>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskHash>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastStartTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastFinishTime>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public UID128 RootFolderUID { get; public set; }
    public string DisplayName { get; public set; }
    public string FullPath { get; public set; }
    public string Icon { get; }
    public string Image { get; }
    public string Source { get; public set; }
    public UID128 TaskHash { get; public set; }
    public Nullable`1<DateTimeOffset> LastStartTime { get; public set; }
    public Nullable`1<DateTimeOffset> LastFinishTime { get; public set; }
    public sealed virtual UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public UID128 get_RootFolderUID();
    public void set_RootFolderUID(UID128 value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_FullPath();
    public void set_FullPath(string value);
    public sealed virtual string get_Icon();
    public sealed virtual string get_Image();
    public string get_Source();
    public void set_Source(string value);
    public sealed virtual UID128 get_TaskHash();
    public void set_TaskHash(UID128 value);
    public Nullable`1<DateTimeOffset> get_LastStartTime();
    public void set_LastStartTime(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastFinishTime();
    public void set_LastFinishTime(Nullable`1<DateTimeOffset> value);
}
public class Mosaik.Schema.EmbeddingsProjectionRequest : EmbeddingsRequest {
    [DebuggerBrowsableAttribute]
private int <Dimensions>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MaximumNumberOfPoints>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <NumberOfEpochsOverride>k__BackingField;
    public int Dimensions { get; public set; }
    public int MaximumNumberOfPoints { get; public set; }
    public Nullable`1<int> NumberOfEpochsOverride { get; public set; }
    public int get_Dimensions();
    public void set_Dimensions(int value);
    public int get_MaximumNumberOfPoints();
    public void set_MaximumNumberOfPoints(int value);
    public Nullable`1<int> get_NumberOfEpochsOverride();
    public void set_NumberOfEpochsOverride(Nullable`1<int> value);
}
public class Mosaik.Schema.EmbeddingsRequest : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <UIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID64 <IndexUID>k__BackingField;
    public ReadOnlyArray`1<UID128> UIDs { get; public set; }
    public string NodeType { get; public set; }
    public UID64 IndexUID { get; public set; }
    public ReadOnlyArray`1<UID128> get_UIDs();
    public void set_UIDs(ReadOnlyArray`1<UID128> value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public UID64 get_IndexUID();
    public void set_IndexUID(UID64 value);
}
public class Mosaik.Schema.EnabledSsoProviders : object {
    [DebuggerBrowsableAttribute]
private bool <Auth0>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Google>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Microsoft>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Okta>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <NoEmail>k__BackingField;
    public bool Auth0 { get; public set; }
    public bool Google { get; public set; }
    public bool Microsoft { get; public set; }
    public bool Okta { get; public set; }
    public bool NoEmail { get; public set; }
    public bool get_Auth0();
    public void set_Auth0(bool value);
    public bool get_Google();
    public void set_Google(bool value);
    public bool get_Microsoft();
    public void set_Microsoft(bool value);
    public bool get_Okta();
    public void set_Okta(bool value);
    public bool get_NoEmail();
    public void set_NoEmail(bool value);
}
public class Mosaik.Schema.EndpointsResponse : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<CodeEndpoint> <Endpoints>k__BackingField;
    public ReadOnlyArray`1<CodeEndpoint> Endpoints { get; public set; }
    public ReadOnlyArray`1<CodeEndpoint> get_Endpoints();
    public void set_Endpoints(ReadOnlyArray`1<CodeEndpoint> value);
}
public class Mosaik.Schema.EntityDefinition : object {
    [DebuggerBrowsableAttribute]
private Color <Color>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LightColor>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DarkColor>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Hidden>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    public Color Color { get; public set; }
    public string LightColor { get; public set; }
    public string DarkColor { get; public set; }
    public bool Hidden { get; public set; }
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public Color get_Color();
    public void set_Color(Color value);
    public string get_LightColor();
    public void set_LightColor(string value);
    public string get_DarkColor();
    public void set_DarkColor(string value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public void RefreshDarkLightColors();
}
public class Mosaik.Schema.EntityInfo : object {
    [DebuggerBrowsableAttribute]
private UID128 <ModelUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Color>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    public UID128 ModelUID { get; public set; }
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Color { get; public set; }
    public string Icon { get; public set; }
    public sealed virtual UID128 get_ModelUID();
    public void set_ModelUID(UID128 value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Color();
    public void set_Color(string value);
    public sealed virtual string get_Icon();
    public void set_Icon(string value);
}
public static class Mosaik.Schema.EntityTagHelper : object {
    public static bool IsBegin(string et);
    public static bool IsInside(string et);
    public static bool IsEnd(string et);
    public static bool IsOutside(string et);
    public static bool IsSingle(string et);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.EntityType : object {
    public string Type;
    public string Tag;
    [DynamicAttribute]
public object Metadata;
    public UID128 TargetUID;
}
public class Mosaik.Schema.EventLocation : object {
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Address>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <LongitudeDegrees>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <LatitudeDegrees>k__BackingField;
    public string DisplayName { get; public set; }
    public string Url { get; public set; }
    public string Address { get; public set; }
    public float LongitudeDegrees { get; public set; }
    public float LatitudeDegrees { get; public set; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Url();
    public void set_Url(string value);
    public string get_Address();
    public void set_Address(string value);
    public float get_LongitudeDegrees();
    public void set_LongitudeDegrees(float value);
    public float get_LatitudeDegrees();
    public void set_LatitudeDegrees(float value);
    public static IEnumerable`1<string> EventLocationToString(EventLocation location);
}
public enum Mosaik.Schema.EventShowAs : Enum {
    public int value__;
    public static EventShowAs Unknown;
    public static EventShowAs Free;
    public static EventShowAs Tentative;
    public static EventShowAs Busy;
    public static EventShowAs OutOfOffice;
    public static EventShowAs WorkingElsewhere;
}
public class Mosaik.Schema.ExpandRelated : object {
    [DebuggerBrowsableAttribute]
private string <TargetNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ViaEdgeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<float> <Modifier>k__BackingField;
    public string TargetNodeType { get; public set; }
    public string ViaEdgeType { get; public set; }
    public Nullable`1<float> Modifier { get; public set; }
    public string get_TargetNodeType();
    public void set_TargetNodeType(string value);
    public string get_ViaEdgeType();
    public void set_ViaEdgeType(string value);
    public Nullable`1<float> get_Modifier();
    public void set_Modifier(Nullable`1<float> value);
}
public class Mosaik.Schema.ExpandRequest : object {
    [DebuggerBrowsableAttribute]
private UID128[] <UIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <VisibleUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, String[]> <Filter>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Skip>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Limit>k__BackingField;
    public UID128[] UIDs { get; public set; }
    public UID128[] VisibleUIDs { get; public set; }
    public Dictionary`2<string, String[]> Filter { get; public set; }
    public int Skip { get; public set; }
    public int Limit { get; public set; }
    public UID128[] get_UIDs();
    public void set_UIDs(UID128[] value);
    public UID128[] get_VisibleUIDs();
    public void set_VisibleUIDs(UID128[] value);
    public Dictionary`2<string, String[]> get_Filter();
    public void set_Filter(Dictionary`2<string, String[]> value);
    public int get_Skip();
    public void set_Skip(int value);
    public int get_Limit();
    public void set_Limit(int value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.ExpandResponse : object {
    public ReadOnlyArray`1<Node> From;
    public ReadOnlyArray`1<Node> To;
}
public class Mosaik.Schema.ExpandResponseWithEdges : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <NodesUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<EdgeInfo> <Edges>k__BackingField;
    public ReadOnlyArray`1<UID128> NodesUIDs { get; public set; }
    public ReadOnlyArray`1<EdgeInfo> Edges { get; public set; }
    public ReadOnlyArray`1<UID128> get_NodesUIDs();
    public void set_NodesUIDs(ReadOnlyArray`1<UID128> value);
    public ReadOnlyArray`1<EdgeInfo> get_Edges();
    public void set_Edges(ReadOnlyArray`1<EdgeInfo> value);
}
public class Mosaik.Schema.ExpandWithEdgesRequest : object {
    [DebuggerBrowsableAttribute]
private UID128[] <UIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <VisibleUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <FilterNodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <FilterEdgeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Skip>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Limit>k__BackingField;
    public UID128[] UIDs { get; public set; }
    public UID128[] VisibleUIDs { get; public set; }
    public String[] FilterNodeTypes { get; public set; }
    public String[] FilterEdgeTypes { get; public set; }
    public int Skip { get; public set; }
    public int Limit { get; public set; }
    public UID128[] get_UIDs();
    public void set_UIDs(UID128[] value);
    public UID128[] get_VisibleUIDs();
    public void set_VisibleUIDs(UID128[] value);
    public String[] get_FilterNodeTypes();
    public void set_FilterNodeTypes(String[] value);
    public String[] get_FilterEdgeTypes();
    public void set_FilterEdgeTypes(String[] value);
    public int get_Skip();
    public void set_Skip(int value);
    public int get_Limit();
    public void set_Limit(int value);
}
public class Mosaik.Schema.ExternalConnectorInfo : object {
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <LastStart>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <LastFinished>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <RunCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Success>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastMessages>k__BackingField;
    public string Name { get; public set; }
    public DateTime LastStart { get; public set; }
    public DateTime LastFinished { get; public set; }
    public int RunCount { get; public set; }
    public bool Success { get; public set; }
    public string LastMessages { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public DateTime get_LastStart();
    public void set_LastStart(DateTime value);
    public DateTime get_LastFinished();
    public void set_LastFinished(DateTime value);
    public int get_RunCount();
    public void set_RunCount(int value);
    public bool get_Success();
    public void set_Success(bool value);
    public string get_LastMessages();
    public void set_LastMessages(string value);
}
public class Mosaik.Schema.ExternalLicenseInfo : object {
    [DebuggerBrowsableAttribute]
private string <PackageName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <PackageUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LicenseUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LicenseType>k__BackingField;
    public string PackageName { get; public set; }
    public string PackageUrl { get; public set; }
    public string Description { get; public set; }
    public string LicenseUrl { get; public set; }
    public string LicenseType { get; public set; }
    public string get_PackageName();
    public void set_PackageName(string value);
    public string get_PackageUrl();
    public void set_PackageUrl(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_LicenseUrl();
    public void set_LicenseUrl(string value);
    public string get_LicenseType();
    public void set_LicenseType(string value);
}
public enum Mosaik.Schema.ExtractionPauseType : Enum {
    public int value__;
    public static ExtractionPauseType None;
    public static ExtractionPauseType Schedule;
    public static ExtractionPauseType Battery;
    public static ExtractionPauseType Disk;
    public static ExtractionPauseType MissingFeature;
    public static ExtractionPauseType UserPause;
    public static ExtractionPauseType AppPause;
}
public enum Mosaik.Schema.FacetDisplayOptions : Enum {
    public int value__;
    public static FacetDisplayOptions None;
    public static FacetDisplayOptions Visible;
}
public class Mosaik.Schema.FacetGroup : object {
    [DebuggerBrowsableAttribute]
private string <Field>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private IFacetItem[] <Facets>k__BackingField;
    public string Field { get; public set; }
    public string Type { get; public set; }
    public IFacetItem[] Facets { get; public set; }
    public string get_Field();
    public void set_Field(string value);
    public string get_Type();
    public void set_Type(string value);
    public IFacetItem[] get_Facets();
    public void set_Facets(IFacetItem[] value);
    public static FacetGroup Empty(string type, IFacetItem[] itemsFromSentFacet);
}
public class Mosaik.Schema.FacetsResult : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, FacetGroup> <Facets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, FacetGroup> <ActiveFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private SearchStats <Stats>k__BackingField;
    public Dictionary`2<string, FacetGroup> Facets { get; public set; }
    public Dictionary`2<string, FacetGroup> ActiveFacets { get; public set; }
    public SearchStats Stats { get; public set; }
    public Dictionary`2<string, FacetGroup> get_Facets();
    public void set_Facets(Dictionary`2<string, FacetGroup> value);
    public Dictionary`2<string, FacetGroup> get_ActiveFacets();
    public void set_ActiveFacets(Dictionary`2<string, FacetGroup> value);
    public SearchStats get_Stats();
    public void set_Stats(SearchStats value);
}
public class Mosaik.Schema.FacetsSettings : object {
    [DebuggerBrowsableAttribute]
private String[] <DefaultIgnoreTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <SaveViewsOf>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <DefaultRelatedFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <ExcludedFromTimestamp>k__BackingField;
    public String[] DefaultIgnoreTypes { get; public set; }
    public String[] SaveViewsOf { get; public set; }
    public String[] DefaultRelatedFacets { get; public set; }
    public String[] ExcludedFromTimestamp { get; public set; }
    public String[] get_DefaultIgnoreTypes();
    public void set_DefaultIgnoreTypes(String[] value);
    public String[] get_SaveViewsOf();
    public void set_SaveViewsOf(String[] value);
    public String[] get_DefaultRelatedFacets();
    public void set_DefaultRelatedFacets(String[] value);
    public String[] get_ExcludedFromTimestamp();
    public void set_ExcludedFromTimestamp(String[] value);
}
public class Mosaik.Schema.FeatureFlags : object {
    [DebuggerBrowsableAttribute]
private string <SSO>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Auditing>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <CustomFrontEnd>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <CustomAPI>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Similarity>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Classification>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ExternalEmbeddings>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <FileContentExtraction>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <OCR>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <STT>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScheduledTaskType[] <AvailableTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsTrial>k__BackingField;
    public string SSO { get; public set; }
    public bool Auditing { get; public set; }
    public bool CustomFrontEnd { get; public set; }
    public bool CustomAPI { get; public set; }
    public bool Similarity { get; public set; }
    public bool Classification { get; public set; }
    public bool ExternalEmbeddings { get; public set; }
    public bool FileContentExtraction { get; public set; }
    public bool OCR { get; public set; }
    public bool STT { get; public set; }
    public ScheduledTaskType[] AvailableTasks { get; public set; }
    public bool IsTrial { get; public set; }
    public string get_SSO();
    public void set_SSO(string value);
    public bool get_Auditing();
    public void set_Auditing(bool value);
    public bool get_CustomFrontEnd();
    public void set_CustomFrontEnd(bool value);
    public bool get_CustomAPI();
    public void set_CustomAPI(bool value);
    public bool get_Similarity();
    public void set_Similarity(bool value);
    public bool get_Classification();
    public void set_Classification(bool value);
    public bool get_ExternalEmbeddings();
    public void set_ExternalEmbeddings(bool value);
    public bool get_FileContentExtraction();
    public void set_FileContentExtraction(bool value);
    public bool get_OCR();
    public void set_OCR(bool value);
    public bool get_STT();
    public void set_STT(bool value);
    public ScheduledTaskType[] get_AvailableTasks();
    public void set_AvailableTasks(ScheduledTaskType[] value);
    public bool get_IsTrial();
    public void set_IsTrial(bool value);
    public bool FeatureEnabled(string settingFeatureFlagName);
}
public class Mosaik.Schema.FieldDefinition : object {
    [DebuggerBrowsableAttribute]
private string <SchemaType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Hidden>k__BackingField;
    public string SchemaType { get; }
    public string Name { get; }
    public string Type { get; }
    public bool Hidden { get; }
    public FieldDefinition(string schemaType, string name, string type, bool hidden);
    public string get_SchemaType();
    public string get_Name();
    public string get_Type();
    public bool get_Hidden();
    public FieldSchemaType GetSchemaType();
}
[EnumAttribute]
public enum Mosaik.Schema.FieldSchemaType : Enum {
    public int value__;
    public static FieldSchemaType Field;
    public static FieldSchemaType ListField;
    public static FieldSchemaType TableField;
    public static FieldSchemaType DictionaryField;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.Figure : object {
    public UID128 UID;
    public UID128 OriginalBlob;
    public UID128 ThumbnailBlob;
}
public class Mosaik.Schema.FileContentPreferences : object {
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <LocalFilesType>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <LocalFileTypesToSync>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <LocalFileExtensionsToSync>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <LocalFileExtensionsToSkip>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <CloudFilesType>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <OCR_Enabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private WhisperModelType <WhisperModel>k__BackingField;
    [DebuggerBrowsableAttribute]
private IndexingSpeed[][] <Schedule>k__BackingField;
    [DebuggerBrowsableAttribute]
private MaxAgeFileExtraction <MaxAgeFileExtraction>k__BackingField;
    [DebuggerBrowsableAttribute]
private MaxAgeSizeInMBExtraction <MaxFileSizeExtraction>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <BackgroundMaxExtractorCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <ExpressMaxExtractorCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private byte <StopIndexingAtBatteryLevel>k__BackingField;
    public HashSet`1<string> LocalFilesType { get; public set; }
    public HashSet`1<string> LocalFileTypesToSync { get; public set; }
    public HashSet`1<string> LocalFileExtensionsToSync { get; public set; }
    public HashSet`1<string> LocalFileExtensionsToSkip { get; public set; }
    public HashSet`1<string> CloudFilesType { get; public set; }
    public bool OCR_Enabled { get; public set; }
    public WhisperModelType WhisperModel { get; public set; }
    public IndexingSpeed[][] Schedule { get; public set; }
    public MaxAgeFileExtraction MaxAgeFileExtraction { get; public set; }
    public MaxAgeSizeInMBExtraction MaxFileSizeExtraction { get; public set; }
    public int BackgroundMaxExtractorCount { get; public set; }
    public int ExpressMaxExtractorCount { get; public set; }
    public byte StopIndexingAtBatteryLevel { get; public set; }
    public HashSet`1<string> get_LocalFilesType();
    public void set_LocalFilesType(HashSet`1<string> value);
    public HashSet`1<string> get_LocalFileTypesToSync();
    public void set_LocalFileTypesToSync(HashSet`1<string> value);
    public HashSet`1<string> get_LocalFileExtensionsToSync();
    public void set_LocalFileExtensionsToSync(HashSet`1<string> value);
    public HashSet`1<string> get_LocalFileExtensionsToSkip();
    public void set_LocalFileExtensionsToSkip(HashSet`1<string> value);
    public HashSet`1<string> get_CloudFilesType();
    public void set_CloudFilesType(HashSet`1<string> value);
    public bool get_OCR_Enabled();
    public void set_OCR_Enabled(bool value);
    public WhisperModelType get_WhisperModel();
    public void set_WhisperModel(WhisperModelType value);
    public IndexingSpeed[][] get_Schedule();
    public void set_Schedule(IndexingSpeed[][] value);
    public MaxAgeFileExtraction get_MaxAgeFileExtraction();
    public void set_MaxAgeFileExtraction(MaxAgeFileExtraction value);
    public MaxAgeSizeInMBExtraction get_MaxFileSizeExtraction();
    public void set_MaxFileSizeExtraction(MaxAgeSizeInMBExtraction value);
    public int get_BackgroundMaxExtractorCount();
    public void set_BackgroundMaxExtractorCount(int value);
    public int get_ExpressMaxExtractorCount();
    public void set_ExpressMaxExtractorCount(int value);
    public byte get_StopIndexingAtBatteryLevel();
    public void set_StopIndexingAtBatteryLevel(byte value);
}
public class Mosaik.Schema.FileInfo : object {
    public UID128 UID;
    public string Identifier;
    public string OriginalName;
    public string ContentType;
    public string Timestamp;
    public long Size;
    public bool Released;
    public bool Indexed;
    public string Source;
    public Dictionary`2<string, string> Metadata;
    public HasPreview HasPreview;
}
public class Mosaik.Schema.FilePagesResponse : object {
    public int Pages;
    public bool HasPDFRender;
}
public class Mosaik.Schema.FileResult : object {
    public UID128 UID;
    public string Type;
    public DateTime Timestamp;
    public string OriginalName;
    public string ContentType;
    public int Size;
    public bool Released;
}
public enum Mosaik.Schema.FileSelectorType : Enum {
    public int value__;
    public static FileSelectorType PST;
    public static FileSelectorType LOCALFOLDER;
    public static FileSelectorType IMGFOREMAIL;
    public static FileSelectorType MOVESTORAGE;
    public static FileSelectorType MAILATTACHMENT;
    public static FileSelectorType AIMODEL;
}
public class Mosaik.Schema.FilesResult : object {
    public FileResult[] Files;
    public FileResult[] Unreleased;
}
public enum Mosaik.Schema.FilesSortBy : Enum {
    public int value__;
    public static FilesSortBy NameInc;
    public static FilesSortBy NameDec;
    public static FilesSortBy DateInc;
    public static FilesSortBy DateDec;
    public static FilesSortBy SizeInc;
    public static FilesSortBy SizeDec;
}
public class Mosaik.Schema.Folder : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <ToRoot>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private Folder[] <Subfolders>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasSubfolders>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<FolderType> <FolderType>k__BackingField;
    public UID128 UID { get; public set; }
    public UID128[] ToRoot { get; public set; }
    public string DisplayName { get; public set; }
    public Folder[] Subfolders { get; public set; }
    public bool HasSubfolders { get; public set; }
    public Nullable`1<FolderType> FolderType { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public UID128[] get_ToRoot();
    public void set_ToRoot(UID128[] value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Folder[] get_Subfolders();
    public void set_Subfolders(Folder[] value);
    public bool get_HasSubfolders();
    public void set_HasSubfolders(bool value);
    public Nullable`1<FolderType> get_FolderType();
    public void set_FolderType(Nullable`1<FolderType> value);
}
public class Mosaik.Schema.FolderInfo : object {
    [DebuggerBrowsableAttribute]
private UID128 <RootFolderUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private FolderType <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FullPath>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Source>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ExternalLink>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <FilesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <SizeMB>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <IndexableFilesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <OwnerUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsPublic>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <InPlace>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <LastRun>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskHash>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastStartTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastFinishTime>k__BackingField;
    public UID128 RootFolderUID { get; public set; }
    public FolderType Type { get; public set; }
    public string FullPath { get; public set; }
    public string DisplayName { get; public set; }
    public string Icon { get; public set; }
    public string Image { get; public set; }
    public string Source { get; public set; }
    public string ExternalLink { get; public set; }
    public int FilesCount { get; public set; }
    public int SizeMB { get; public set; }
    public int IndexableFilesCount { get; public set; }
    public UID128 OwnerUID { get; public set; }
    public bool IsPublic { get; public set; }
    public bool InPlace { get; public set; }
    public DateTime LastRun { get; public set; }
    public UID128 TaskUID { get; public set; }
    public UID128 TaskHash { get; public set; }
    public Nullable`1<DateTimeOffset> LastStartTime { get; public set; }
    public Nullable`1<DateTimeOffset> LastFinishTime { get; public set; }
    public Nullable`1<UIcons> UIcon { get; }
    public UID128 get_RootFolderUID();
    public void set_RootFolderUID(UID128 value);
    public FolderType get_Type();
    public void set_Type(FolderType value);
    public string get_FullPath();
    public void set_FullPath(string value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Icon();
    public void set_Icon(string value);
    public sealed virtual string get_Image();
    public void set_Image(string value);
    public string get_Source();
    public void set_Source(string value);
    public string get_ExternalLink();
    public void set_ExternalLink(string value);
    public int get_FilesCount();
    public void set_FilesCount(int value);
    public int get_SizeMB();
    public void set_SizeMB(int value);
    public int get_IndexableFilesCount();
    public void set_IndexableFilesCount(int value);
    public UID128 get_OwnerUID();
    public void set_OwnerUID(UID128 value);
    public bool get_IsPublic();
    public void set_IsPublic(bool value);
    public bool get_InPlace();
    public void set_InPlace(bool value);
    public DateTime get_LastRun();
    public void set_LastRun(DateTime value);
    public sealed virtual UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public sealed virtual UID128 get_TaskHash();
    public void set_TaskHash(UID128 value);
    public Nullable`1<DateTimeOffset> get_LastStartTime();
    public void set_LastStartTime(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastFinishTime();
    public void set_LastFinishTime(Nullable`1<DateTimeOffset> value);
    public Nullable`1<UIcons> get_UIcon();
    public sealed virtual bool Equals(FolderInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Mosaik.Schema.FolderRenderMetadata : object {
    [DebuggerBrowsableAttribute]
private string <FolderType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FolderImageUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FolderEmoji>k__BackingField;
    public string FolderType { get; public set; }
    public string Image { get; public set; }
    public string FolderImageUrl { get; public set; }
    public string FolderEmoji { get; public set; }
    public string get_FolderType();
    public void set_FolderType(string value);
    public string get_Image();
    public void set_Image(string value);
    public string get_FolderImageUrl();
    public void set_FolderImageUrl(string value);
    public string get_FolderEmoji();
    public void set_FolderEmoji(string value);
}
public class Mosaik.Schema.FoldersResponse : object {
    [DebuggerBrowsableAttribute]
private UID128[] <Path>k__BackingField;
    [DebuggerBrowsableAttribute]
private Folder <Folder>k__BackingField;
    public UID128[] Path { get; public set; }
    public Folder Folder { get; public set; }
    public UID128[] get_Path();
    public void set_Path(UID128[] value);
    public Folder get_Folder();
    public void set_Folder(Folder value);
}
public enum Mosaik.Schema.FolderType : Enum {
    public int value__;
    public static FolderType LocalDrive;
    public static FolderType Network;
    public static FolderType Removable;
    public static FolderType Folder;
    public static FolderType TeamFolder;
    public static FolderType PersonalFolder;
    public static FolderType MessageChannel;
    public static FolderType RestrictedMessageChannel;
    public static FolderType PersonalMessageChannel;
    public static FolderType SelfMessageChannel;
    public static FolderType LocalDocumentsFolder;
    public static FolderType LocalDownloadsFolder;
    public static FolderType LocalDesktopFolder;
    public static FolderType GitRepository;
    public static FolderType Mail_Drafts;
    public static FolderType Mail_Inbox;
    public static FolderType Mail_DeletedItems;
    public static FolderType Mail_SendItems;
    public static FolderType Mail_Archive;
    public static FolderType Mail_Spam;
    public static FolderType Mail_Clutter;
    public static FolderType Mail_Conflicts;
    public static FolderType Mail_ConversationHistory;
    public static FolderType Mail_LocalFailures;
    public static FolderType Mail_MsgFolderRoot;
    public static FolderType Mail_Outbox;
    public static FolderType Mail_RecoverableItemsDeletions;
    public static FolderType Mail_Scheduled;
    public static FolderType Mail_SearchFolders;
    public static FolderType Mail_ServerFailures;
    public static FolderType Mail_SyncIssues;
    public static FolderType Mail_All;
    public static FolderType Mail_Flagged;
    public static FolderType Mail_Unread;
    public static FolderType Mail_Label_Starred;
    public static FolderType Mail_Label_Important;
    public static FolderType Mail_Label_Personal;
    public static FolderType Mail_Label_Social;
    public static FolderType Mail_Label_Promotions;
    public static FolderType Mail_Label_Updates;
    public static FolderType Mail_Label_Forums;
    public static FolderType Mail_GMail_Chat;
    public static FolderType Mail_Imap_PersonalNamespace;
    public static FolderType Mail_Imap_SharedNamespace;
    public static FolderType Mail_Imap_OtherNamespace;
    public static FolderType Mail_Normal_Folder;
    public static FolderType Mail_Label;
    public static FolderType App_GoogleDrive;
    public static FolderType App_Dropbox;
    public static FolderType App_MicrosoftOneDrive;
    public static FolderType App_MicrosoftSharePoint;
    public static FolderType App_Slack;
    public static FolderType App_Gmail;
    public static FolderType App_MicrosoftOutlook;
    public static FolderType App_MicrosoftOutlookArchive;
    public static FolderType App_Email;
    public static FolderType App_MicrosoftTeams;
    public static FolderType App_GitHub;
    public static FolderType App_AmazonS3;
    public static FolderType App_MicrosoftAzureStoreage;
    public static FolderType App_Ftp;
    public static FolderType App_WebCrawler;
    public static FolderType App_XKCD;
    public static FolderType App_ZenDesk;
    public static FolderType App_Zapier;
    public static FolderType App_Bookmarks;
    public static FolderType App_History;
    public static FolderType App_Folder;
    public static FolderType App_Confluence;
    public static FolderType App_Jira;
    public static FolderType Issues_Project;
    public static FolderType App_NotionNoIcon;
    public static FolderType App_HackerNewsAsk;
    public static FolderType App_HackerNewsShow;
    public static FolderType App_HackerNewsStories;
    public static FolderType App_HackerNewsJobs;
    public static FolderType App_Salesforce;
    public static FolderType App_OneNote_Notebook;
    public static FolderType App_OneNote_Section;
    public static FolderType App_PCloud;
    public static FolderType Archive;
    public static FolderType App_Evernote;
    public static FolderType App_HubSpot;
    public static FolderType App_Box;
    public static FolderType App_MicrosoftSharePoint_PagesFolder;
}
public class Mosaik.Schema.ForcedSearchReplacement : object {
    [DebuggerBrowsableAttribute]
private bool <IsRegexPattern>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCaseInsensitive>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Pattern>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Replacement>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <UID>k__BackingField;
    public bool IsRegexPattern { get; public set; }
    public bool IsCaseInsensitive { get; public set; }
    public string Pattern { get; public set; }
    public string Replacement { get; public set; }
    public LanguageDTO Language { get; public set; }
    public string UID { get; public set; }
    public bool get_IsRegexPattern();
    public void set_IsRegexPattern(bool value);
    public bool get_IsCaseInsensitive();
    public void set_IsCaseInsensitive(bool value);
    public string get_Pattern();
    public void set_Pattern(string value);
    public string get_Replacement();
    public void set_Replacement(string value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public string get_UID();
    public void set_UID(string value);
    public ForcedSearchReplacement Clone();
}
[MessagePackObjectAttribute("True")]
public class Mosaik.Schema.FrontEndSettings : object {
    [DebuggerBrowsableAttribute]
private string <UserGuideLink>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableGraph>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableComments>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableTeams>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableApps>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableSharing>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableContacts>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableInbox>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableCalendar>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableNotes>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableClipboard>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <RequestAccessURL>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableGuestAccount>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <AutoSignInGuest>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableSelfSignUp>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableTroubleshooting>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableObsolete>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableUploads>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableEmailLogin>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableDownloads>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableHide>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableSpaces>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableUserFuzzySearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableCommandsOverlay>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableAIIntegration>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableAISearchByDefault>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisablePublicSpacesAllowByDefault>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableAboutPageForUsers>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableAccountPreferences>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableLanguagePreferences>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScheduledTaskType[] <AppsAllowList>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, SourceDisplaySetting> <WorkspaceSourcesDisplaySettings>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <AICopyWarningMessage>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasMultipleSources>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <AvailableSources>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasIssues>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasContacts>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasOrganizations>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasTickets>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasMessages>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID128, string> <EmailTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID128, UID128> <EmailInboxes>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<UID128> <EmailSenderTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID128, string> <CalendarTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private FeatureFlags <Features>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ServerVersion>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScheduledTaskType[] <AvailableDesktopApps>k__BackingField;
    [DebuggerBrowsableAttribute]
private PreferredTheme <PreferredTheme>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ThemeName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <UserLanguage>k__BackingField;
    [DebuggerBrowsableAttribute]
private FacetsSettings <FacetsSettings>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <AuditedNodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasWord>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasPowerPoint>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasExcel>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasNotion>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasEvernote>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasSchemas>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasClipboard>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasVectorSearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableAISearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableFuzzySearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIAssistantTemplate <SelectedAIAssistantTemplate>k__BackingField;
    [DebuggerBrowsableAttribute]
private AIProviderInfo <ChatAIProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <DaysSinceInstall>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferOfficeDesktopApps>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferNotionDesktopApp>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferEvernoteDesktopApp>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferQuickLook>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DisableTransparency>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScaleFactor <ScaleFactor>k__BackingField;
    [DebuggerBrowsableAttribute]
private SidebarMode <SidebarMode>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, String[]> <SidebarOrder>k__BackingField;
    [DebuggerBrowsableAttribute]
private RecentHomeViewElement[] <RecentHomeViewPreferences>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, SourceDisplaySetting> <UserSourceDisplaySettings>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UserContactUID>k__BackingField;
    public string UserGuideLink { get; public set; }
    public bool EnableGraph { get; public set; }
    public bool EnableComments { get; public set; }
    public bool EnableTeams { get; public set; }
    public bool EnableApps { get; public set; }
    public bool EnableSharing { get; public set; }
    public bool EnableContacts { get; public set; }
    public bool EnableInbox { get; public set; }
    public bool EnableCalendar { get; public set; }
    public bool EnableNotes { get; public set; }
    public bool EnableClipboard { get; public set; }
    public string RequestAccessURL { get; public set; }
    public bool EnableGuestAccount { get; public set; }
    public bool AutoSignInGuest { get; public set; }
    public bool EnableSelfSignUp { get; public set; }
    public bool EnableTroubleshooting { get; public set; }
    public bool EnableObsolete { get; public set; }
    public bool DisableUploads { get; public set; }
    public bool DisableEmailLogin { get; public set; }
    public bool DisableDownloads { get; public set; }
    public bool DisableHide { get; public set; }
    public bool DisableSpaces { get; public set; }
    public bool DisableUserFuzzySearch { get; public set; }
    public bool DisableCommandsOverlay { get; public set; }
    public bool DisableAIIntegration { get; public set; }
    public bool DisableAISearchByDefault { get; public set; }
    public bool DisablePublicSpacesAllowByDefault { get; public set; }
    public bool DisableAboutPageForUsers { get; public set; }
    public bool DisableAccountPreferences { get; public set; }
    public bool DisableLanguagePreferences { get; public set; }
    public ScheduledTaskType[] AppsAllowList { get; public set; }
    public Dictionary`2<string, SourceDisplaySetting> WorkspaceSourcesDisplaySettings { get; public set; }
    public string AICopyWarningMessage { get; public set; }
    [IgnoreMemberAttribute]
public bool HasMultipleSources { get; public set; }
    [IgnoreMemberAttribute]
public String[] AvailableSources { get; public set; }
    [IgnoreMemberAttribute]
public bool HasIssues { get; public set; }
    [IgnoreMemberAttribute]
public bool HasContacts { get; public set; }
    [IgnoreMemberAttribute]
public bool HasOrganizations { get; public set; }
    [IgnoreMemberAttribute]
public bool HasTickets { get; public set; }
    [IgnoreMemberAttribute]
public bool HasMessages { get; public set; }
    [IgnoreMemberAttribute]
public Dictionary`2<UID128, string> EmailTasks { get; public set; }
    [IgnoreMemberAttribute]
public Dictionary`2<UID128, UID128> EmailInboxes { get; public set; }
    [IgnoreMemberAttribute]
public HashSet`1<UID128> EmailSenderTasks { get; public set; }
    [IgnoreMemberAttribute]
public Dictionary`2<UID128, string> CalendarTasks { get; public set; }
    [IgnoreMemberAttribute]
public FeatureFlags Features { get; public set; }
    [IgnoreMemberAttribute]
public string ServerVersion { get; public set; }
    [IgnoreMemberAttribute]
public ScheduledTaskType[] AvailableDesktopApps { get; public set; }
    [IgnoreMemberAttribute]
public PreferredTheme PreferredTheme { get; public set; }
    [IgnoreMemberAttribute]
public string ThemeName { get; public set; }
    [IgnoreMemberAttribute]
public string UserLanguage { get; public set; }
    [IgnoreMemberAttribute]
public FacetsSettings FacetsSettings { get; public set; }
    [IgnoreMemberAttribute]
public String[] AuditedNodeTypes { get; public set; }
    [IgnoreMemberAttribute]
public bool HasWord { get; public set; }
    [IgnoreMemberAttribute]
public bool HasPowerPoint { get; public set; }
    [IgnoreMemberAttribute]
public bool HasExcel { get; public set; }
    [IgnoreMemberAttribute]
public bool HasNotion { get; public set; }
    [IgnoreMemberAttribute]
public bool HasEvernote { get; public set; }
    [IgnoreMemberAttribute]
public bool HasSchemas { get; public set; }
    [IgnoreMemberAttribute]
public bool HasClipboard { get; public set; }
    [IgnoreMemberAttribute]
public bool HasVectorSearch { get; public set; }
    [IgnoreMemberAttribute]
public bool DisableAISearch { get; public set; }
    [IgnoreMemberAttribute]
public bool DisableFuzzySearch { get; public set; }
    [IgnoreMemberAttribute]
public AIAssistantTemplate SelectedAIAssistantTemplate { get; public set; }
    [IgnoreMemberAttribute]
public AIProviderInfo ChatAIProvider { get; public set; }
    [IgnoreMemberAttribute]
public int DaysSinceInstall { get; public set; }
    [IgnoreMemberAttribute]
public bool PreferOfficeDesktopApps { get; public set; }
    [IgnoreMemberAttribute]
public bool PreferNotionDesktopApp { get; public set; }
    [IgnoreMemberAttribute]
public bool PreferEvernoteDesktopApp { get; public set; }
    [IgnoreMemberAttribute]
public bool PreferQuickLook { get; public set; }
    [IgnoreMemberAttribute]
public bool DisableTransparency { get; public set; }
    [IgnoreMemberAttribute]
public ScaleFactor ScaleFactor { get; public set; }
    [IgnoreMemberAttribute]
public SidebarMode SidebarMode { get; public set; }
    [IgnoreMemberAttribute]
public Dictionary`2<string, String[]> SidebarOrder { get; public set; }
    [IgnoreMemberAttribute]
public RecentHomeViewElement[] RecentHomeViewPreferences { get; public set; }
    [IgnoreMemberAttribute]
public Dictionary`2<string, SourceDisplaySetting> UserSourceDisplaySettings { get; public set; }
    [IgnoreMemberAttribute]
public UID128 UserContactUID { get; public set; }
    [IgnoreMemberAttribute]
public bool HasChatAI { get; }
    public string get_UserGuideLink();
    public void set_UserGuideLink(string value);
    public bool get_EnableGraph();
    public void set_EnableGraph(bool value);
    public bool get_EnableComments();
    public void set_EnableComments(bool value);
    public bool get_EnableTeams();
    public void set_EnableTeams(bool value);
    public bool get_EnableApps();
    public void set_EnableApps(bool value);
    public bool get_EnableSharing();
    public void set_EnableSharing(bool value);
    public bool get_EnableContacts();
    public void set_EnableContacts(bool value);
    public bool get_EnableInbox();
    public void set_EnableInbox(bool value);
    public bool get_EnableCalendar();
    public void set_EnableCalendar(bool value);
    public bool get_EnableNotes();
    public void set_EnableNotes(bool value);
    public bool get_EnableClipboard();
    public void set_EnableClipboard(bool value);
    public string get_RequestAccessURL();
    public void set_RequestAccessURL(string value);
    public bool get_EnableGuestAccount();
    public void set_EnableGuestAccount(bool value);
    public bool get_AutoSignInGuest();
    public void set_AutoSignInGuest(bool value);
    public bool get_EnableSelfSignUp();
    public void set_EnableSelfSignUp(bool value);
    public bool get_EnableTroubleshooting();
    public void set_EnableTroubleshooting(bool value);
    public bool get_EnableObsolete();
    public void set_EnableObsolete(bool value);
    public bool get_DisableUploads();
    public void set_DisableUploads(bool value);
    public bool get_DisableEmailLogin();
    public void set_DisableEmailLogin(bool value);
    public bool get_DisableDownloads();
    public void set_DisableDownloads(bool value);
    public bool get_DisableHide();
    public void set_DisableHide(bool value);
    public bool get_DisableSpaces();
    public void set_DisableSpaces(bool value);
    public bool get_DisableUserFuzzySearch();
    public void set_DisableUserFuzzySearch(bool value);
    public bool get_DisableCommandsOverlay();
    public void set_DisableCommandsOverlay(bool value);
    public bool get_DisableAIIntegration();
    public void set_DisableAIIntegration(bool value);
    public bool get_DisableAISearchByDefault();
    public void set_DisableAISearchByDefault(bool value);
    public bool get_DisablePublicSpacesAllowByDefault();
    public void set_DisablePublicSpacesAllowByDefault(bool value);
    public bool get_DisableAboutPageForUsers();
    public void set_DisableAboutPageForUsers(bool value);
    public bool get_DisableAccountPreferences();
    public void set_DisableAccountPreferences(bool value);
    public bool get_DisableLanguagePreferences();
    public void set_DisableLanguagePreferences(bool value);
    public ScheduledTaskType[] get_AppsAllowList();
    public void set_AppsAllowList(ScheduledTaskType[] value);
    public Dictionary`2<string, SourceDisplaySetting> get_WorkspaceSourcesDisplaySettings();
    public void set_WorkspaceSourcesDisplaySettings(Dictionary`2<string, SourceDisplaySetting> value);
    public string get_AICopyWarningMessage();
    public void set_AICopyWarningMessage(string value);
    public bool get_HasMultipleSources();
    public void set_HasMultipleSources(bool value);
    public String[] get_AvailableSources();
    public void set_AvailableSources(String[] value);
    public bool get_HasIssues();
    public void set_HasIssues(bool value);
    public bool get_HasContacts();
    public void set_HasContacts(bool value);
    public bool get_HasOrganizations();
    public void set_HasOrganizations(bool value);
    public bool get_HasTickets();
    public void set_HasTickets(bool value);
    public bool get_HasMessages();
    public void set_HasMessages(bool value);
    public Dictionary`2<UID128, string> get_EmailTasks();
    public void set_EmailTasks(Dictionary`2<UID128, string> value);
    public Dictionary`2<UID128, UID128> get_EmailInboxes();
    public void set_EmailInboxes(Dictionary`2<UID128, UID128> value);
    public HashSet`1<UID128> get_EmailSenderTasks();
    public void set_EmailSenderTasks(HashSet`1<UID128> value);
    public Dictionary`2<UID128, string> get_CalendarTasks();
    public void set_CalendarTasks(Dictionary`2<UID128, string> value);
    public FeatureFlags get_Features();
    public void set_Features(FeatureFlags value);
    public string get_ServerVersion();
    public void set_ServerVersion(string value);
    public ScheduledTaskType[] get_AvailableDesktopApps();
    public void set_AvailableDesktopApps(ScheduledTaskType[] value);
    public PreferredTheme get_PreferredTheme();
    public void set_PreferredTheme(PreferredTheme value);
    public string get_ThemeName();
    public void set_ThemeName(string value);
    public string get_UserLanguage();
    public void set_UserLanguage(string value);
    public FacetsSettings get_FacetsSettings();
    public void set_FacetsSettings(FacetsSettings value);
    public String[] get_AuditedNodeTypes();
    public void set_AuditedNodeTypes(String[] value);
    public bool get_HasWord();
    public void set_HasWord(bool value);
    public bool get_HasPowerPoint();
    public void set_HasPowerPoint(bool value);
    public bool get_HasExcel();
    public void set_HasExcel(bool value);
    public bool get_HasNotion();
    public void set_HasNotion(bool value);
    public bool get_HasEvernote();
    public void set_HasEvernote(bool value);
    public bool get_HasSchemas();
    public void set_HasSchemas(bool value);
    public bool get_HasClipboard();
    public void set_HasClipboard(bool value);
    public bool get_HasVectorSearch();
    public void set_HasVectorSearch(bool value);
    public bool get_DisableAISearch();
    public void set_DisableAISearch(bool value);
    public bool get_DisableFuzzySearch();
    public void set_DisableFuzzySearch(bool value);
    public AIAssistantTemplate get_SelectedAIAssistantTemplate();
    public void set_SelectedAIAssistantTemplate(AIAssistantTemplate value);
    public AIProviderInfo get_ChatAIProvider();
    public void set_ChatAIProvider(AIProviderInfo value);
    public int get_DaysSinceInstall();
    public void set_DaysSinceInstall(int value);
    public bool get_PreferOfficeDesktopApps();
    public void set_PreferOfficeDesktopApps(bool value);
    public bool get_PreferNotionDesktopApp();
    public void set_PreferNotionDesktopApp(bool value);
    public bool get_PreferEvernoteDesktopApp();
    public void set_PreferEvernoteDesktopApp(bool value);
    public bool get_PreferQuickLook();
    public void set_PreferQuickLook(bool value);
    public bool get_DisableTransparency();
    public void set_DisableTransparency(bool value);
    public ScaleFactor get_ScaleFactor();
    public void set_ScaleFactor(ScaleFactor value);
    public SidebarMode get_SidebarMode();
    public void set_SidebarMode(SidebarMode value);
    public Dictionary`2<string, String[]> get_SidebarOrder();
    public void set_SidebarOrder(Dictionary`2<string, String[]> value);
    public RecentHomeViewElement[] get_RecentHomeViewPreferences();
    public void set_RecentHomeViewPreferences(RecentHomeViewElement[] value);
    public Dictionary`2<string, SourceDisplaySetting> get_UserSourceDisplaySettings();
    public void set_UserSourceDisplaySettings(Dictionary`2<string, SourceDisplaySetting> value);
    public UID128 get_UserContactUID();
    public void set_UserContactUID(UID128 value);
    public bool get_HasChatAI();
    [IgnoreMemberAttribute]
public KeyValuePair`2[] GetEmailTasksForSending();
    private bool <GetEmailTasksForSending>b__307_0(KeyValuePair`2<UID128, string> kv);
    private bool <GetEmailTasksForSending>b__307_1(KeyValuePair`2<UID128, string> kv);
}
public class Mosaik.Schema.GeoPoint : object {
    public double LatitudeDegrees;
    public double LongitudeDegrees;
}
public static class Mosaik.Schema.GeoPointHelper : object {
    private static float seg2deg;
    public static GeoPoint Parse(string isoCoordinate);
    public static string GetLatLongDegrees(GeoPoint gp);
}
public class Mosaik.Schema.GetAliasesForNodeTypeRequest : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IncludeAliasesAsWellAsKeys>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <LanguageForAliases>k__BackingField;
    public string NodeType { get; public set; }
    public bool IncludeAliasesAsWellAsKeys { get; public set; }
    public LanguageDTO LanguageForAliases { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public bool get_IncludeAliasesAsWellAsKeys();
    public void set_IncludeAliasesAsWellAsKeys(bool value);
    public LanguageDTO get_LanguageForAliases();
    public void set_LanguageForAliases(LanguageDTO value);
}
public class Mosaik.Schema.GraphCounters : object {
    [DebuggerBrowsableAttribute]
private bool <IsSubscriptionWorkspace>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <ApproximateNodesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <ApproximateEdgesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Users>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Storage>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Documents>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastSaveTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <CacheCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MutableBareNodesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <DataSources>k__BackingField;
    public bool IsSubscriptionWorkspace { get; public set; }
    public long ApproximateNodesCount { get; public set; }
    public long ApproximateEdgesCount { get; public set; }
    public int Users { get; public set; }
    public float Storage { get; public set; }
    public int Documents { get; public set; }
    public string LastSaveTime { get; public set; }
    public int CacheCount { get; public set; }
    public int MutableBareNodesCount { get; public set; }
    public int DataSources { get; public set; }
    public bool get_IsSubscriptionWorkspace();
    public void set_IsSubscriptionWorkspace(bool value);
    public long get_ApproximateNodesCount();
    public void set_ApproximateNodesCount(long value);
    public long get_ApproximateEdgesCount();
    public void set_ApproximateEdgesCount(long value);
    public int get_Users();
    public void set_Users(int value);
    public float get_Storage();
    public void set_Storage(float value);
    public int get_Documents();
    public void set_Documents(int value);
    public string get_LastSaveTime();
    public void set_LastSaveTime(string value);
    public int get_CacheCount();
    public void set_CacheCount(int value);
    public int get_MutableBareNodesCount();
    public void set_MutableBareNodesCount(int value);
    public int get_DataSources();
    public void set_DataSources(int value);
}
public enum Mosaik.Schema.GroupAccess : Enum {
    public int value__;
    public static GroupAccess Admin;
    public static GroupAccess Member;
}
public class Mosaik.Schema.GroupDefinition : object {
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<bool> <Hidden>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public Nullable`1<bool> get_Hidden();
    public void set_Hidden(Nullable`1<bool> value);
}
public class Mosaik.Schema.GroupNode : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Timestamp>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <EdgeCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Hidden>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    public UID128 UID { get; public set; }
    public string Type { get; public set; }
    public string Timestamp { get; public set; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public int EdgeCount { get; public set; }
    public bool Hidden { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Timestamp();
    public void set_Timestamp(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_EdgeCount();
    public void set_EdgeCount(int value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
}
public enum Mosaik.Schema.HasPreview : Enum {
    public int value__;
    public static HasPreview No;
    public static HasPreview PDF;
    public static HasPreview HTML;
}
public enum Mosaik.Schema.HomeViewElementType : Enum {
    public int value__;
    public static HomeViewElementType Inbox;
    public static HomeViewElementType RecentFiles;
    public static HomeViewElementType Feeds;
    public static HomeViewElementType Calendar;
}
public class Mosaik.Schema.HotKeys : object {
    [DebuggerBrowsableAttribute]
private string <Search>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Open>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <AIAssitant>k__BackingField;
    public string Search { get; public set; }
    public string Open { get; public set; }
    public string AIAssitant { get; public set; }
    public string get_Search();
    public void set_Search(string value);
    public string get_Open();
    public void set_Open(string value);
    public string get_AIAssitant();
    public void set_AIAssitant(string value);
}
public static class Mosaik.Schema.HotKeysHelper : object {
    public static string Format(string keyExpression, bool isMacOs);
}
public class Mosaik.Schema.HotkeyStatus : object {
    [DebuggerBrowsableAttribute]
private HotKeys <HotKeys>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <errorMessage>k__BackingField;
    public HotKeys HotKeys { get; public set; }
    public string errorMessage { get; public set; }
    public HotKeys get_HotKeys();
    public void set_HotKeys(HotKeys value);
    public string get_errorMessage();
    public void set_errorMessage(string value);
}
public class Mosaik.Schema.IFacetItem : object {
    public int Count;
    public string Value;
    public string LowerBound;
    public string UpperBound;
    public UID128 UID;
    public string Type;
}
public static class Mosaik.Schema.ImageRenderHelpers : object {
    public static string BackgroundColorBorderRadius;
    public static ValueTuple`2<string, string> ParseImgUrl(string url);
    public static string CreateImgUrlDefaultBackground(string imgUrl);
    public static string CreateImgUrl(string imgUrl, string backgroundColor);
}
[ExtensionAttribute]
public static class Mosaik.Schema.IndexesExt : object {
    [ExtensionAttribute]
public static UIcons GetIndexIcon(IndexTypes indexType);
    [ExtensionAttribute]
public static string GetIndexName(IndexTypes indexType);
}
public class Mosaik.Schema.IndexesStatus : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, double> <Pauses>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID64, IndexInfo> <Indexes>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID64, IndexStatus> <Status>k__BackingField;
    public Dictionary`2<string, double> Pauses { get; public set; }
    public Dictionary`2<UID64, IndexInfo> Indexes { get; public set; }
    public Dictionary`2<UID64, IndexStatus> Status { get; public set; }
    public Dictionary`2<string, double> get_Pauses();
    public void set_Pauses(Dictionary`2<string, double> value);
    public Dictionary`2<UID64, IndexInfo> get_Indexes();
    public void set_Indexes(Dictionary`2<UID64, IndexInfo> value);
    public Dictionary`2<UID64, IndexStatus> get_Status();
    public void set_Status(Dictionary`2<UID64, IndexStatus> value);
}
public class Mosaik.Schema.IndexInfo : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <SecondaryNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID64 <IndexUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Tag>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Version>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private IndexTypes <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FieldName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Code>k__BackingField;
    public string NodeType { get; public set; }
    public string SecondaryNodeType { get; public set; }
    public UID64 IndexUID { get; public set; }
    public string Tag { get; public set; }
    public int Version { get; public set; }
    public LanguageDTO Language { get; public set; }
    public IndexTypes Type { get; public set; }
    public string FieldName { get; public set; }
    public string Code { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_SecondaryNodeType();
    public void set_SecondaryNodeType(string value);
    public UID64 get_IndexUID();
    public void set_IndexUID(UID64 value);
    public string get_Tag();
    public void set_Tag(string value);
    public int get_Version();
    public void set_Version(int value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public IndexTypes get_Type();
    public void set_Type(IndexTypes value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public string get_Code();
    public void set_Code(string value);
    public virtual bool Equals(object o);
}
public enum Mosaik.Schema.IndexingSpeed : Enum {
    public byte value__;
    public static IndexingSpeed Paused;
    public static IndexingSpeed Background;
    public static IndexingSpeed Express;
}
public enum Mosaik.Schema.IndexInMonthOrYear : Enum {
    public byte value__;
    public static IndexInMonthOrYear First;
    public static IndexInMonthOrYear Second;
    public static IndexInMonthOrYear Third;
    public static IndexInMonthOrYear Fourth;
    public static IndexInMonthOrYear Last;
}
public class Mosaik.Schema.IndexStatus : object {
    [DebuggerBrowsableAttribute]
private int <QueueSize>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID64 <IndexUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Running>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <CurrentlyIndexing>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <IndexingSince>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Values>k__BackingField;
    public int QueueSize { get; public set; }
    public UID64 IndexUID { get; public set; }
    public bool Running { get; public set; }
    public int CurrentlyIndexing { get; public set; }
    public int IndexingSince { get; public set; }
    public Dictionary`2<string, string> Values { get; public set; }
    public int get_QueueSize();
    public void set_QueueSize(int value);
    public UID64 get_IndexUID();
    public void set_IndexUID(UID64 value);
    public bool get_Running();
    public void set_Running(bool value);
    public int get_CurrentlyIndexing();
    public void set_CurrentlyIndexing(int value);
    public int get_IndexingSince();
    public void set_IndexingSince(int value);
    public Dictionary`2<string, string> get_Values();
    public void set_Values(Dictionary`2<string, string> value);
}
public enum Mosaik.Schema.IndexTypes : Enum {
    public int value__;
    public static IndexTypes AbbreviationCapturerTrainerIndex;
    public static IndexTypes DocumentToGraphIndex;
    public static IndexTypes FieldToDocumentIndex;
    public static IndexTypes FileContentIndex;
    public static IndexTypes GeoIndex;
    public static IndexTypes GraphTaskExecutorIndex;
    [ObsoleteAttribute("has been deprecated")]
public static IndexTypes ModelIndex;
    [ObsoleteAttribute("has been deprecated")]
public static IndexTypes NodeTypeIndex;
    public static IndexTypes NumericIndex;
    public static IndexTypes PageRankIndex;
    [ObsoleteAttribute("has been deprecated")]
public static IndexTypes PathIndex;
    public static IndexTypes SenseTrainerIndex;
    public static IndexTypes SimpleTextIndex;
    public static IndexTypes TimeIndex;
    public static IndexTypes AutocompleteIndex;
    public static IndexTypes CustomCodeIndex;
    public static IndexTypes FastTextTokenEmbeddingsIndex;
    [ObsoleteAttribute("has been deprecated")]
public static IndexTypes FastTextDocumentEmbeddingsIndex;
    [ObsoleteAttribute("has been deprecated")]
public static IndexTypes FastTextGraphEmbeddingsIndex;
    public static IndexTypes PageSpaceEmbeddingsIndex;
    public static IndexTypes RawEmbeddingsIndex;
    public static IndexTypes SubscriptionIndex;
    public static IndexTypes FastTextDocumentClassifierEmbeddingsIndex;
    [ObsoleteAttribute("has been deprecated")]
public static IndexTypes StarSpacePageSpaceEmbeddingsIndex;
    public static IndexTypes ScheduledTaskExecutorIndex;
    public static IndexTypes ISimilarityIndex;
    public static IndexTypes IDocumentSimilarityIndex;
    public static IndexTypes ITrainableIndex;
    public static IndexTypes IClassificationIndex;
    public static IndexTypes LuceneTextIndex;
    public static IndexTypes LuceneIndex;
    public static IndexTypes CommandScoreIndex;
    public static IndexTypes AppWindowIndex;
    public static IndexTypes SentenceEmbeddingsIndex;
}
public interface Mosaik.Schema.IQueryStartingPoint {
}
public interface Mosaik.Schema.IReadOnlyEntityInfo {
    public UID128 ModelUID { get; }
    public string Name { get; }
    public string DisplayName { get; }
    public string Color { get; }
    public string Icon { get; }
    public abstract virtual UID128 get_ModelUID();
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Color();
    public abstract virtual string get_Icon();
}
public interface Mosaik.Schema.IReadOnlyPipelineInfo {
    public LanguageDTO Language { get; }
    public UID128 PipelineUID { get; }
    public string Name { get; }
    public bool UsedForFiles { get; }
    public bool UsedForSearch { get; }
    public NodeTypeAndField[] UsedForNodes { get; }
    public ReadOnlyArray`1<ModelInfo> Models { get; }
    public abstract virtual LanguageDTO get_Language();
    public abstract virtual UID128 get_PipelineUID();
    public abstract virtual string get_Name();
    public abstract virtual bool get_UsedForFiles();
    public abstract virtual bool get_UsedForSearch();
    public abstract virtual NodeTypeAndField[] get_UsedForNodes();
    public abstract virtual ReadOnlyArray`1<ModelInfo> get_Models();
}
public interface Mosaik.Schema.ISpaceMetadata {
    public UID128 TaskUID { get; }
    public string DisplayName { get; }
    public string Icon { get; }
    public string Image { get; }
    public UID128 TaskHash { get; }
    public abstract virtual UID128 get_TaskUID();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Icon();
    public abstract virtual string get_Image();
    public abstract virtual UID128 get_TaskHash();
}
public class Mosaik.Schema.JsonValue`1 : object {
    [DebuggerBrowsableAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    public JsonValue`1(T value);
    public T get_Value();
    public void set_Value(T value);
}
[ConstructorAttribute("Mosaik.Schema.LanguageDTO.GetDefaultTypeConstructor()")]
public class Mosaik.Schema.LanguageDTO : ValueType {
    private Language Value { get; }
    [TemplateAttribute("Mosaik.Schema.LanguageDTO.ThrowIfInvalid({value})")]
public LanguageDTO(string value);
    [TemplateAttribute("Mosaik.Schema.LanguageDTO.GetLanguageValue({this})")]
private Language get_Value();
    public static LanguageDTO op_Implicit(Language value);
    public static Language op_Implicit(LanguageDTO value);
    public static LanguageDTO op_Explicit(string languageCode);
    public static bool op_Equality(LanguageDTO x, LanguageDTO y);
    public static bool op_Inequality(LanguageDTO x, LanguageDTO y);
    public sealed virtual bool Equals(LanguageDTO other);
    [TemplateAttribute("{this} === {o}")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    private static string ThrowIfInvalid(string languageCode);
    private static object GetDefaultTypeConstructor();
    private static Language GetLanguageValue(LanguageDTO value);
}
public class Mosaik.Schema.LanguageRequest : object {
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    public LanguageDTO Language { get; public set; }
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
}
public class Mosaik.Schema.LicenseData : object {
    [DebuggerBrowsableAttribute]
private string <LicensedTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LicenseToken>k__BackingField;
    public string LicensedTo { get; public set; }
    public string LicenseToken { get; public set; }
    public string get_LicensedTo();
    public void set_LicensedTo(string value);
    public string get_LicenseToken();
    public void set_LicenseToken(string value);
}
public class Mosaik.Schema.LicenseInfo : object {
    [DebuggerBrowsableAttribute]
private bool <TrialLicense>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitMemoryGBit>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitCores>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitDocuments>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitStorage>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitUsers>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitDataSources>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LicensedTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <OnlineLicenseProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <OnlineLicenseManageUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private FeatureFlags <Features>k__BackingField;
    public bool TrialLicense { get; public set; }
    public int LimitMemoryGBit { get; public set; }
    public int LimitCores { get; public set; }
    public int LimitDocuments { get; public set; }
    public int LimitStorage { get; public set; }
    public int LimitUsers { get; public set; }
    public int LimitDataSources { get; public set; }
    public string LicensedTo { get; public set; }
    public string OnlineLicenseProvider { get; public set; }
    public string OnlineLicenseManageUrl { get; public set; }
    public FeatureFlags Features { get; public set; }
    public bool get_TrialLicense();
    public void set_TrialLicense(bool value);
    public int get_LimitMemoryGBit();
    public void set_LimitMemoryGBit(int value);
    public int get_LimitCores();
    public void set_LimitCores(int value);
    public int get_LimitDocuments();
    public void set_LimitDocuments(int value);
    public int get_LimitStorage();
    public void set_LimitStorage(int value);
    public int get_LimitUsers();
    public void set_LimitUsers(int value);
    public int get_LimitDataSources();
    public void set_LimitDataSources(int value);
    public string get_LicensedTo();
    public void set_LicensedTo(string value);
    public string get_OnlineLicenseProvider();
    public void set_OnlineLicenseProvider(string value);
    public string get_OnlineLicenseManageUrl();
    public void set_OnlineLicenseManageUrl(string value);
    public FeatureFlags get_Features();
    public void set_Features(FeatureFlags value);
}
public class Mosaik.Schema.LinkingIndexesInfo : object {
    [DebuggerBrowsableAttribute]
private UID64 <IndexUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FieldName>k__BackingField;
    public UID64 IndexUID { get; public set; }
    public string NodeType { get; public set; }
    public string FieldName { get; public set; }
    public UID64 get_IndexUID();
    public void set_IndexUID(UID64 value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
}
public class Mosaik.Schema.LinkingInfo : object {
    [DebuggerBrowsableAttribute]
private UID64 <IndexUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <EntityType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <EdgeTypeToEntity>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <EdgeTypeToNode>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <AddIfNotFound>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreCase>k__BackingField;
    [DebuggerBrowsableAttribute]
private NodeTypeAndField <IndexOf>k__BackingField;
    public UID64 IndexUID { get; public set; }
    public string EntityType { get; public set; }
    public string NodeType { get; public set; }
    public string EdgeTypeToEntity { get; public set; }
    public string EdgeTypeToNode { get; public set; }
    public bool AddIfNotFound { get; public set; }
    public bool IgnoreCase { get; public set; }
    public NodeTypeAndField IndexOf { get; public set; }
    public UID64 get_IndexUID();
    public void set_IndexUID(UID64 value);
    public string get_EntityType();
    public void set_EntityType(string value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_EdgeTypeToEntity();
    public void set_EdgeTypeToEntity(string value);
    public string get_EdgeTypeToNode();
    public void set_EdgeTypeToNode(string value);
    public bool get_AddIfNotFound();
    public void set_AddIfNotFound(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public NodeTypeAndField get_IndexOf();
    public void set_IndexOf(NodeTypeAndField value);
}
public enum Mosaik.Schema.LlamaModel : Enum {
    public int value__;
    public static LlamaModel Custom;
    public static LlamaModel OBSOLETE_GPT35;
    public static LlamaModel OBSOLETE_GPT4;
    public static LlamaModel Llama2_7b;
    public static LlamaModel Llama2_13b;
    public static LlamaModel Llama2_70b;
    public static LlamaModel Mistral_7b;
    public static LlamaModel MistralLite_7b;
    public static LlamaModel OBSOLETE_LlamaServer;
    public static LlamaModel Mixtral8_7b;
    public static LlamaModel Phi_2b;
    public static LlamaModel Llama3_8b;
    public static LlamaModel Llama3_70b;
}
public static class Mosaik.Schema.LlamaModelHelper : object {
    public static LlamaModel LlamaModelFromPath(string modelPath);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.LocalFile : object {
    [DebuggerBrowsableAttribute]
private string <ContentType>k__BackingField;
    [DebuggerBrowsableAttribute]
private FilesType <FilesType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FullPath>k__BackingField;
    public string ContentType { get; public set; }
    public FilesType FilesType { get; public set; }
    public string DisplayName { get; public set; }
    public string FullPath { get; public set; }
    public string get_ContentType();
    public void set_ContentType(string value);
    public FilesType get_FilesType();
    public void set_FilesType(FilesType value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_FullPath();
    public void set_FullPath(string value);
}
public class Mosaik.Schema.LocalInstallRequest : object {
    [DebuggerBrowsableAttribute]
private LanguageDTO[] <Languages>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <OCR>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <STT>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DesktopToken>k__BackingField;
    public LanguageDTO[] Languages { get; public set; }
    public bool OCR { get; public set; }
    public bool STT { get; public set; }
    public string DesktopToken { get; public set; }
    public LanguageDTO[] get_Languages();
    public void set_Languages(LanguageDTO[] value);
    public bool get_OCR();
    public void set_OCR(bool value);
    public bool get_STT();
    public void set_STT(bool value);
    public string get_DesktopToken();
    public void set_DesktopToken(string value);
}
public enum Mosaik.Schema.MaxAgeFileExtraction : Enum {
    public byte value__;
    public static MaxAgeFileExtraction AnyAge;
    public static MaxAgeFileExtraction LastMonth;
    public static MaxAgeFileExtraction LastYear;
}
public enum Mosaik.Schema.MaxAgeSizeInMBExtraction : Enum {
    public int value__;
    public static MaxAgeSizeInMBExtraction Limit50MB;
    public static MaxAgeSizeInMBExtraction Limit100MB;
    public static MaxAgeSizeInMBExtraction Limit250MB;
    public static MaxAgeSizeInMBExtraction Limit500MB;
    public static MaxAgeSizeInMBExtraction Limit1GB;
    public static MaxAgeSizeInMBExtraction Limit2GB;
}
public class Mosaik.Schema.MergeNodesRequest : object {
    [DebuggerBrowsableAttribute]
private UID128 <ToKeep>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <LabelFields>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <ToMergeAndDelete>k__BackingField;
    public UID128 ToKeep { get; public set; }
    public ReadOnlyArray`1<string> LabelFields { get; public set; }
    public ReadOnlyArray`1<UID128> ToMergeAndDelete { get; public set; }
    public UID128 get_ToKeep();
    public void set_ToKeep(UID128 value);
    public ReadOnlyArray`1<string> get_LabelFields();
    public void set_LabelFields(ReadOnlyArray`1<string> value);
    public ReadOnlyArray`1<UID128> get_ToMergeAndDelete();
    public void set_ToMergeAndDelete(ReadOnlyArray`1<UID128> value);
}
public class Mosaik.Schema.MergeRelated : object {
    [DebuggerBrowsableAttribute]
private string <TargetNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ViaEdgeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<float> <Modifier>k__BackingField;
    public string TargetNodeType { get; public set; }
    public string ViaEdgeType { get; public set; }
    public Nullable`1<float> Modifier { get; public set; }
    public string get_TargetNodeType();
    public void set_TargetNodeType(string value);
    public string get_ViaEdgeType();
    public void set_ViaEdgeType(string value);
    public Nullable`1<float> get_Modifier();
    public void set_Modifier(Nullable`1<float> value);
}
public class Mosaik.Schema.MessageContext : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<ChatMessageData> <PreviousMessages>k__BackingField;
    [DebuggerBrowsableAttribute]
private ChatMessageData <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<ChatMessageData> <NextMessages>k__BackingField;
    public ReadOnlyArray`1<ChatMessageData> PreviousMessages { get; public set; }
    public ChatMessageData Message { get; public set; }
    public ReadOnlyArray`1<ChatMessageData> NextMessages { get; public set; }
    public ReadOnlyArray`1<ChatMessageData> get_PreviousMessages();
    public void set_PreviousMessages(ReadOnlyArray`1<ChatMessageData> value);
    public ChatMessageData get_Message();
    public void set_Message(ChatMessageData value);
    public ReadOnlyArray`1<ChatMessageData> get_NextMessages();
    public void set_NextMessages(ReadOnlyArray`1<ChatMessageData> value);
}
[ExtensionAttribute]
public static class Mosaik.Schema.MetricNumeralExtensions : object {
    private static double BigLimit;
    private static double SmallLimit;
    private static String[][] Symbols;
    private static Dictionary`2<char, UnitPrefix> UnitPrefixes;
    private static MetricNumeralExtensions();
    [ExtensionAttribute]
public static string ToMetric(int input, Nullable`1<int> decimals);
    [ExtensionAttribute]
public static string ToMetric(double input, Nullable`1<int> decimals);
    private static double BuildMetricNumber(string input, string last);
    private static string BuildRepresentation(double input, Nullable`1<int> decimals);
    private static string BuildMetricRepresentation(double input, int exponent, Nullable`1<int> decimals);
    [ExtensionAttribute]
private static bool IsOutOfRange(double input);
    [ExtensionAttribute]
private static bool IsInvalidMetricNumeral(string input);
    internal static double <BuildMetricNumber>g__getExponent|7_0(String[] symbols, <>c__DisplayClass7_0& );
    internal static bool <IsOutOfRange>g__outside|10_0(double min, double max, <>c__DisplayClass10_0& );
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.MicrosoftLoginConfiguration : object {
    [DebuggerBrowsableAttribute]
private string <TenantID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ClientID>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ServerHasClientSecret>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ConnectSharepointOnLogin>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <SelectedOptionalScopes>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <CustomTenantName>k__BackingField;
    public string TenantID { get; public set; }
    public string ClientID { get; public set; }
    public bool ServerHasClientSecret { get; public set; }
    public bool ConnectSharepointOnLogin { get; public set; }
    public String[] SelectedOptionalScopes { get; public set; }
    public string CustomTenantName { get; public set; }
    public string get_TenantID();
    public void set_TenantID(string value);
    public string get_ClientID();
    public void set_ClientID(string value);
    public bool get_ServerHasClientSecret();
    public void set_ServerHasClientSecret(bool value);
    public bool get_ConnectSharepointOnLogin();
    public void set_ConnectSharepointOnLogin(bool value);
    public String[] get_SelectedOptionalScopes();
    public void set_SelectedOptionalScopes(String[] value);
    public string get_CustomTenantName();
    public void set_CustomTenantName(string value);
}
public static class Mosaik.Schema.MicrosoftScopes : object {
    public static String[] MaxMicrosoftSharePointScopes;
    public static String[] MinMicrosoftSharePointScopes;
    private static MicrosoftScopes();
}
public class Mosaik.Schema.MistralAIModelInfo : object {
    [DebuggerBrowsableAttribute]
private string <ModelId>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ProviderName>k__BackingField;
    public string ModelId { get; public set; }
    public string ProviderName { get; public set; }
    public string get_ModelId();
    public void set_ModelId(string value);
    public string get_ProviderName();
    public void set_ProviderName(string value);
}
public enum Mosaik.Schema.ModelCategory : Enum {
    public int value__;
    public static ModelCategory Normalizer;
    public static ModelCategory Tagger;
    public static ModelCategory Tokenizer;
    public static ModelCategory SentenceDetector;
    public static ModelCategory Spotter;
    public static ModelCategory LinkedSpotter;
    public static ModelCategory PatternSpotter;
    public static ModelCategory Other;
}
public class Mosaik.Schema.ModelInfo : object {
    [DebuggerBrowsableAttribute]
private UID128 <ModelUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ModelType>k__BackingField;
    [DebuggerBrowsableAttribute]
private ModelCategory <ModelCategory>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <EntityType>k__BackingField;
    public UID128 ModelUID { get; public set; }
    public string ModelType { get; public set; }
    public ModelCategory ModelCategory { get; public set; }
    public LanguageDTO Language { get; public set; }
    public string Name { get; public set; }
    public string EntityType { get; public set; }
    public UID128 get_ModelUID();
    public void set_ModelUID(UID128 value);
    public string get_ModelType();
    public void set_ModelType(string value);
    public ModelCategory get_ModelCategory();
    public void set_ModelCategory(ModelCategory value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public string get_Name();
    public void set_Name(string value);
    public string get_EntityType();
    public void set_EntityType(string value);
}
public class Mosaik.Schema.ModelTrainingInfo : object {
    public UID128 UID;
    public string Type;
    public string Tag;
    public string Language;
    public UID128 CreatedBy;
    public string Created;
    public ObjectLiteralMetadata Metadata;
}
public class Mosaik.Schema.ModelTrainingTestOutput : object {
    [DebuggerBrowsableAttribute]
private float <ElapsedTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, ReadOnlyArray`1<UID128>> <Entities>k__BackingField;
    public float ElapsedTime { get; public set; }
    public Dictionary`2<string, ReadOnlyArray`1<UID128>> Entities { get; public set; }
    public float get_ElapsedTime();
    public void set_ElapsedTime(float value);
    public Dictionary`2<string, ReadOnlyArray`1<UID128>> get_Entities();
    public void set_Entities(Dictionary`2<string, ReadOnlyArray`1<UID128>> value);
}
public class Mosaik.Schema.ModelTrainingTestSummary : object {
    [DebuggerBrowsableAttribute]
private float <ElapsedTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, int> <Entities>k__BackingField;
    public float ElapsedTime { get; public set; }
    public Dictionary`2<string, int> Entities { get; public set; }
    public float get_ElapsedTime();
    public void set_ElapsedTime(float value);
    public Dictionary`2<string, int> get_Entities();
    public void set_Entities(Dictionary`2<string, int> value);
}
public class Mosaik.Schema.MoveEmailTargets : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, EmailTarget> <TargetMap>k__BackingField;
    public Dictionary`2<string, EmailTarget> TargetMap { get; public set; }
    public Dictionary`2<string, EmailTarget> get_TargetMap();
    public void set_TargetMap(Dictionary`2<string, EmailTarget> value);
}
public class Mosaik.Schema.NeighborsRequest : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<OutInfo> <Requests>k__BackingField;
    public ReadOnlyArray`1<OutInfo> Requests { get; public set; }
    public ReadOnlyArray`1<OutInfo> get_Requests();
    public void set_Requests(ReadOnlyArray`1<OutInfo> value);
}
public class Mosaik.Schema.NeighborsSummaryResults : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, Dictionary`2<string, int>> <NodeEdges>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Count>k__BackingField;
    public Dictionary`2<string, Dictionary`2<string, int>> NodeEdges { get; }
    public int Count { get; }
    public NeighborsSummaryResults(Dictionary`2<string, Dictionary`2<string, int>> nodeEdges, int count);
    public Dictionary`2<string, Dictionary`2<string, int>> get_NodeEdges();
    public int get_Count();
}
public enum Mosaik.Schema.NLP.PartOfSpeech : Enum {
    public int value__;
    public static PartOfSpeech NONE;
    public static PartOfSpeech ADJ;
    public static PartOfSpeech ADP;
    public static PartOfSpeech ADV;
    public static PartOfSpeech AUX;
    public static PartOfSpeech CCONJ;
    public static PartOfSpeech DET;
    public static PartOfSpeech INTJ;
    public static PartOfSpeech NOUN;
    public static PartOfSpeech NUM;
    public static PartOfSpeech PART;
    public static PartOfSpeech PRON;
    public static PartOfSpeech PROPN;
    public static PartOfSpeech PUNCT;
    public static PartOfSpeech SCONJ;
    public static PartOfSpeech SYM;
    public static PartOfSpeech VERB;
    public static PartOfSpeech X;
}
public enum Mosaik.Schema.NLP.PatternMatchingMode : Enum {
    public int value__;
    public static PatternMatchingMode ShouldNotMatch;
    public static PatternMatchingMode Single;
    public static PatternMatchingMode Multiple;
    public static PatternMatchingMode And;
    public static PatternMatchingMode Or;
}
[FlagsAttribute]
public enum Mosaik.Schema.NLP.PatternUnitType : Enum {
    public int value__;
    public static PatternUnitType Token;
    public static PatternUnitType Shape;
    public static PatternUnitType Script;
    public static PatternUnitType POS;
    public static PatternUnitType MultiplePOS;
    public static PatternUnitType Suffix;
    public static PatternUnitType Prefix;
    public static PatternUnitType Set;
    public static PatternUnitType Entity;
    public static PatternUnitType IsDigit;
    public static PatternUnitType IsNumeric;
    public static PatternUnitType IsAlpha;
    public static PatternUnitType IsLetterOrDigit;
    public static PatternUnitType IsLatin;
    public static PatternUnitType IsEmoji;
    public static PatternUnitType IsPunctuation;
    public static PatternUnitType IsLowerCase;
    public static PatternUnitType IsUpperCase;
    public static PatternUnitType IsTitleCase;
    public static PatternUnitType LikeURL;
    public static PatternUnitType LikeEmail;
    public static PatternUnitType IsOpeningParenthesis;
    public static PatternUnitType IsClosingParenthesis;
    public static PatternUnitType NotEntity;
    public static PatternUnitType HasNumeric;
    public static PatternUnitType WithChars;
    public static PatternUnitType Length;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.Node : NodeOrEdge {
    [DebuggerBrowsableAttribute]
private int <EdgeCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<Edge> <Edges>k__BackingField;
    public int EdgeCount { get; }
    public ReadOnlyArray`1<Edge> Edges { get; }
    public int get_EdgeCount();
    public ReadOnlyArray`1<Edge> get_Edges();
    public bool TryGetSource(String& source);
    public bool TryGetMetadataDictionary(Dictionary`2& metadata);
}
public class Mosaik.Schema.NodeAndField : object {
    public string NodeType;
    public string FieldName;
}
public class Mosaik.Schema.NodeNeighborsSummary : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, Dictionary`2<string, int>> <Summary>k__BackingField;
    public Dictionary`2<string, Dictionary`2<string, int>> Summary { get; public set; }
    public Dictionary`2<string, Dictionary`2<string, int>> get_Summary();
    public void set_Summary(Dictionary`2<string, Dictionary`2<string, int>> value);
    public Dictionary`2<string, Dictionary`2<string, int>> Transpose();
    public void Add(NodeNeighborsSummary other);
}
[ObjectLiteralAttribute]
public abstract class Mosaik.Schema.NodeOrEdge : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    public UID128 UID { get; }
    public string Type { get; }
    public DateTime Timestamp { get; }
    public UID128 get_UID();
    public string get_Type();
    [TemplateAttribute("System.DateTime.parse({this}.Timestamp)")]
public DateTime get_Timestamp();
    public T UnsafeGetAs(string name);
    public bool UnsafeTryGetAs(string name, T& value);
    public string GetString(string key);
    public char GetChar(string key);
    public bool GetBool(string key);
    public byte GetByte(string key);
    public decimal GetDecimal(string key);
    public double GetDouble(string key);
    public int GetInt(string key);
    public long GetLong(string key);
    public sbyte GetSbyte(string key);
    public float GetFloat(string key);
    public UInt32 GetUint(string key);
    public UID64 GetUID64(string key);
    public DateTime GetTime(string key);
    public UID128 GetUID128(string key);
    public GeoPoint GetGeoPoint(string key);
    private string GetS(string key);
    private object GetD(string name);
    private bool TryGetD(string name, Object& value);
}
public class Mosaik.Schema.NodeOwners : object {
    [DebuggerBrowsableAttribute]
private bool <IsPublicAccessNodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <Owners>k__BackingField;
    public bool IsPublicAccessNodeType { get; public set; }
    public ReadOnlyArray`1<UID128> Owners { get; public set; }
    public bool get_IsPublicAccessNodeType();
    public void set_IsPublicAccessNodeType(bool value);
    public ReadOnlyArray`1<UID128> get_Owners();
    public void set_Owners(ReadOnlyArray`1<UID128> value);
}
public class Mosaik.Schema.NodesAggregatedRequest : object {
    [DebuggerBrowsableAttribute]
private UID128[] <Nodes>k__BackingField;
    public UID128[] Nodes { get; public set; }
    public UID128[] get_Nodes();
    public void set_Nodes(UID128[] value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.NodesResponse : object {
    [DebuggerBrowsableAttribute]
private NodesResponseInner <Result>k__BackingField;
    public NodesResponseInner Result { get; public set; }
    public NodesResponseInner get_Result();
    public void set_Result(NodesResponseInner value);
}
public class Mosaik.Schema.NodeTypeAndField : ValueType {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FieldName>k__BackingField;
    public string NodeType { get; public set; }
    public string FieldName { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
}
public class Mosaik.Schema.NoteData : object {
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <HTML>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    public string Title { get; public set; }
    public string HTML { get; public set; }
    public string Icon { get; public set; }
    public UID128 UID { get; public set; }
    public string get_Title();
    public void set_Title(string value);
    public string get_HTML();
    public void set_HTML(string value);
    public string get_Icon();
    public void set_Icon(string value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
}
public class Mosaik.Schema.NotesPreferences : object {
    [DebuggerBrowsableAttribute]
private bool <NotesEnabled>k__BackingField;
    public bool NotesEnabled { get; public set; }
    public bool get_NotesEnabled();
    public void set_NotesEnabled(bool value);
}
public class Mosaik.Schema.Notification : object {
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <HtmlContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <JsonContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private NotificationAccess <Access>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <ExpiresAtUtc>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<UID128> <UsersToRestrictTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<UID128> <GroupsToRestrictTo>k__BackingField;
    public string Title { get; public set; }
    public string HtmlContent { get; public set; }
    public string JsonContent { get; public set; }
    public NotificationAccess Access { get; public set; }
    public Nullable`1<DateTimeOffset> ExpiresAtUtc { get; public set; }
    public HashSet`1<UID128> UsersToRestrictTo { get; public set; }
    public HashSet`1<UID128> GroupsToRestrictTo { get; public set; }
    public string get_Title();
    public void set_Title(string value);
    public string get_HtmlContent();
    public void set_HtmlContent(string value);
    public string get_JsonContent();
    public void set_JsonContent(string value);
    public NotificationAccess get_Access();
    public void set_Access(NotificationAccess value);
    public Nullable`1<DateTimeOffset> get_ExpiresAtUtc();
    public void set_ExpiresAtUtc(Nullable`1<DateTimeOffset> value);
    public HashSet`1<UID128> get_UsersToRestrictTo();
    public void set_UsersToRestrictTo(HashSet`1<UID128> value);
    public HashSet`1<UID128> get_GroupsToRestrictTo();
    public void set_GroupsToRestrictTo(HashSet`1<UID128> value);
}
public enum Mosaik.Schema.NotificationAccess : Enum {
    public int value__;
    public static NotificationAccess Everyone;
    public static NotificationAccess Admins;
    public static NotificationAccess Users;
    public static NotificationAccess Teams;
}
public class Mosaik.Schema.NotificationDetails : object {
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <HtmlContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <JsonContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    public string Title { get; }
    public string HtmlContent { get; }
    public string JsonContent { get; }
    public DateTimeOffset Timestamp { get; }
    public UID128 UID { get; }
    public NotificationDetails(string title, string htmlContent, string jsonContent, DateTimeOffset timestamp, UID128 uid);
    public string get_Title();
    public string get_HtmlContent();
    public string get_JsonContent();
    public DateTimeOffset get_Timestamp();
    public UID128 get_UID();
}
public class Mosaik.Schema.NotificationList : object {
    [DebuggerBrowsableAttribute]
private NotificationDetails[] <MostRecent>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasPriorityNotification>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Count>k__BackingField;
    public NotificationDetails[] MostRecent { get; public set; }
    public bool HasPriorityNotification { get; public set; }
    public int Count { get; public set; }
    public NotificationList(NotificationDetails[] notifications, bool hasPriorityNotification, int count);
    public NotificationDetails[] get_MostRecent();
    public void set_MostRecent(NotificationDetails[] value);
    public bool get_HasPriorityNotification();
    public void set_HasPriorityNotification(bool value);
    public int get_Count();
    public void set_Count(int value);
}
public class Mosaik.Schema.NumericFacet : object {
    public float From;
    public float To;
    public bool Include;
    public bool ApplyBefore;
}
[DefaultMemberAttribute("Item")]
[ObjectLiteralAttribute]
public class Mosaik.Schema.ObjectLiteralMetadata : object {
    public ReadOnlyArray`1<string> Keys { get; }
    public string Item { get; }
    [TemplateAttribute("Object.getOwnPropertyNames({this})")]
public ReadOnlyArray`1<string> get_Keys();
    [TemplateAttribute("Mosaik.Schema.OLMH.GetValue({this}, {key})")]
public string get_Item(string key);
}
[ExtensionAttribute]
public static class Mosaik.Schema.ObjectLiteralMetadataExtensions : object {
    [ExtensionAttribute]
public static bool TryGetValue(ObjectLiteralMetadata source, string key, String& value);
}
internal static class Mosaik.Schema.OLMH : object {
    public static string GetValue(object source, string name);
}
public class Mosaik.Schema.OOBEStatus : object {
    [DebuggerBrowsableAttribute]
private bool <ChangedAdminPassword>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ChooseLanguage>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ChangedBranding>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <SetLicense>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ReviewTermsOfService>k__BackingField;
    public bool ChangedAdminPassword { get; public set; }
    public bool ChooseLanguage { get; public set; }
    public bool ChangedBranding { get; public set; }
    public bool SetLicense { get; public set; }
    public bool ReviewTermsOfService { get; public set; }
    public bool get_ChangedAdminPassword();
    public void set_ChangedAdminPassword(bool value);
    public bool get_ChooseLanguage();
    public void set_ChooseLanguage(bool value);
    public bool get_ChangedBranding();
    public void set_ChangedBranding(bool value);
    public bool get_SetLicense();
    public void set_SetLicense(bool value);
    public bool get_ReviewTermsOfService();
    public void set_ReviewTermsOfService(bool value);
}
public class Mosaik.Schema.Optional`1 : ValueType {
    [DebuggerBrowsableAttribute]
private T <Value>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HasValue>k__BackingField;
    public T Value { get; public set; }
    public bool HasValue { get; public set; }
    public Optional`1(T value, bool hasValue);
    public T get_Value();
    public void set_Value(T value);
    public bool get_HasValue();
    public void set_HasValue(bool value);
    public T GetValueOrDefault(T ifNoValue);
    public static Optional`1<T> op_Implicit(T value);
    public static Optional`1<T> op_Implicit(NoValue<T> noValue);
    public virtual string ToString();
    public static Optional`1<T> Some(T value);
    public static Optional`1<T> None();
}
public class Mosaik.Schema.OrganizationData : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Domain>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MembersCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <TopMembers>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Sources>k__BackingField;
    public UID128 UID { get; public set; }
    public string Domain { get; public set; }
    public string Name { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public int MembersCount { get; public set; }
    public UID128[] TopMembers { get; public set; }
    public String[] Sources { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_Name();
    public void set_Name(string value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public int get_MembersCount();
    public void set_MembersCount(int value);
    public UID128[] get_TopMembers();
    public void set_TopMembers(UID128[] value);
    public String[] get_Sources();
    public void set_Sources(String[] value);
}
public class Mosaik.Schema.OwnerResult : object {
    public UID128 UID;
    public string Name;
    public string Type;
}
public class Mosaik.Schema.OwnersResult : object {
    public OwnerResult[] Owners;
}
public class Mosaik.Schema.ParentSpacesResponse : object {
    [DebuggerBrowsableAttribute]
private UserDefinedSpaceMetadata[] <SpacesMetadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, UID128[]> <SpacesBySource>k__BackingField;
    public UserDefinedSpaceMetadata[] SpacesMetadata { get; public set; }
    public Dictionary`2<string, UID128[]> SpacesBySource { get; public set; }
    public UserDefinedSpaceMetadata[] get_SpacesMetadata();
    public void set_SpacesMetadata(UserDefinedSpaceMetadata[] value);
    public Dictionary`2<string, UID128[]> get_SpacesBySource();
    public void set_SpacesBySource(Dictionary`2<string, UID128[]> value);
}
public static class Mosaik.Schema.PasswordHelper : object {
    public static int MinimumPasswordLength;
    public static bool ComplicatedPasswordRequired;
    private static string _symbols;
    public static string PasswordValidator(string password);
    public static bool IsValidPassword(string password);
    public static IComponent PasswordValidatorInfo(string password);
    private static void GetPasswordComplexity(string password, Boolean& containsDigit, Boolean& containsSymbol, Boolean& containsUpper, Boolean& containsLower, Int32& charDiversity);
    internal static IComponent <PasswordValidatorInfo>g__Check|5_0(string text, bool isChecked);
}
public class Mosaik.Schema.PathBetweenRequest : object {
    [DebuggerBrowsableAttribute]
private UID128 <From>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <To>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MaxLevels>k__BackingField;
    public UID128 From { get; public set; }
    public UID128 To { get; public set; }
    public int MaxLevels { get; public set; }
    public UID128 get_From();
    public void set_From(UID128 value);
    public UID128 get_To();
    public void set_To(UID128 value);
    public int get_MaxLevels();
    public void set_MaxLevels(int value);
}
public class Mosaik.Schema.PermissionsSetting : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <UsersAndAccessGroupsToRestrictTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <NeedsResync>k__BackingField;
    public ReadOnlyArray`1<UID128> UsersAndAccessGroupsToRestrictTo { get; public set; }
    public bool NeedsResync { get; public set; }
    public ReadOnlyArray`1<UID128> get_UsersAndAccessGroupsToRestrictTo();
    public void set_UsersAndAccessGroupsToRestrictTo(ReadOnlyArray`1<UID128> value);
    public bool get_NeedsResync();
    public void set_NeedsResync(bool value);
}
public class Mosaik.Schema.PipelineInfo : object {
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <PipelineUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <UsedForFiles>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <UsedForSearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private NodeTypeAndField[] <UsedForNodes>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<ModelInfo> <Models>k__BackingField;
    public LanguageDTO Language { get; public set; }
    public UID128 PipelineUID { get; public set; }
    public string Name { get; public set; }
    public bool UsedForFiles { get; public set; }
    public bool UsedForSearch { get; public set; }
    public NodeTypeAndField[] UsedForNodes { get; public set; }
    public ReadOnlyArray`1<ModelInfo> Models { get; public set; }
    public sealed virtual LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public sealed virtual UID128 get_PipelineUID();
    public void set_PipelineUID(UID128 value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    public sealed virtual bool get_UsedForFiles();
    public void set_UsedForFiles(bool value);
    public sealed virtual bool get_UsedForSearch();
    public void set_UsedForSearch(bool value);
    public sealed virtual NodeTypeAndField[] get_UsedForNodes();
    public void set_UsedForNodes(NodeTypeAndField[] value);
    public sealed virtual ReadOnlyArray`1<ModelInfo> get_Models();
    public void set_Models(ReadOnlyArray`1<ModelInfo> value);
}
public class Mosaik.Schema.PlanInformation : object {
    [DebuggerBrowsableAttribute]
private bool <Active>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsTrial>k__BackingField;
    [DebuggerBrowsableAttribute]
private PlanType <PlanType>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <RenewsOn>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ManageUrl>k__BackingField;
    public bool Active { get; public set; }
    public bool IsTrial { get; public set; }
    public PlanType PlanType { get; public set; }
    public Nullable`1<DateTimeOffset> RenewsOn { get; public set; }
    public string ManageUrl { get; public set; }
    public bool get_Active();
    public void set_Active(bool value);
    public bool get_IsTrial();
    public void set_IsTrial(bool value);
    public PlanType get_PlanType();
    public void set_PlanType(PlanType value);
    public Nullable`1<DateTimeOffset> get_RenewsOn();
    public void set_RenewsOn(Nullable`1<DateTimeOffset> value);
    public string get_ManageUrl();
    public void set_ManageUrl(string value);
}
public enum Mosaik.Schema.PlanType : Enum {
    public int value__;
    public static PlanType Free;
    public static PlanType ProMonthly;
    public static PlanType ProYearly;
    public static PlanType ProLifetime;
    public static PlanType ProManaged;
    public static PlanType ProWorkspace;
    public static PlanType ProSetapp;
}
public class Mosaik.Schema.PopularityRequest : object {
    [DebuggerBrowsableAttribute]
private SearchRequest <SearchRequest>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Depth>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MaxWords>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <FromDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <ToDate>k__BackingField;
    public SearchRequest SearchRequest { get; public set; }
    public int Depth { get; public set; }
    public int MaxWords { get; public set; }
    public string NodeType { get; public set; }
    public DateTime FromDate { get; public set; }
    public DateTime ToDate { get; public set; }
    public SearchRequest get_SearchRequest();
    public void set_SearchRequest(SearchRequest value);
    public int get_Depth();
    public void set_Depth(int value);
    public int get_MaxWords();
    public void set_MaxWords(int value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public DateTime get_FromDate();
    public void set_FromDate(DateTime value);
    public DateTime get_ToDate();
    public void set_ToDate(DateTime value);
}
public class Mosaik.Schema.PredictionResults : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID128, Dictionary`2<UID64, Dictionary`2<UID128, float>>> <Predictions>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Count>k__BackingField;
    public Dictionary`2<UID128, Dictionary`2<UID64, Dictionary`2<UID128, float>>> Predictions { get; }
    public int Count { get; }
    public PredictionResults(Dictionary`2<UID128, Dictionary`2<UID64, Dictionary`2<UID128, float>>> predictions, int count);
    public Dictionary`2<UID128, Dictionary`2<UID64, Dictionary`2<UID128, float>>> get_Predictions();
    public int get_Count();
}
public enum Mosaik.Schema.PreferredTheme : Enum {
    public int value__;
    public static PreferredTheme Light;
    public static PreferredTheme Dark;
    public static PreferredTheme System;
}
public enum Mosaik.Schema.PreviewReadPath : Enum {
    public int value__;
    public static PreviewReadPath FAIL;
    public static PreviewReadPath EXPIRED;
}
public enum Mosaik.Schema.PreviewType : Enum {
    public int value__;
    public static PreviewType None;
    public static PreviewType PDF;
    public static PreviewType HTML;
}
public class Mosaik.Schema.PriceInformation : object {
    [DebuggerBrowsableAttribute]
private string <Currency>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Price>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IncludeTaxes>k__BackingField;
    public string Currency { get; public set; }
    public float Price { get; public set; }
    public bool IncludeTaxes { get; public set; }
    public string get_Currency();
    public void set_Currency(string value);
    public float get_Price();
    public void set_Price(float value);
    public bool get_IncludeTaxes();
    public void set_IncludeTaxes(bool value);
}
public class Mosaik.Schema.PricePlans : object {
    [DebuggerBrowsableAttribute]
private PriceInformation <Monthly>k__BackingField;
    [DebuggerBrowsableAttribute]
private PriceInformation <MonthlyOffer>k__BackingField;
    [DebuggerBrowsableAttribute]
private PriceInformation <Yearly>k__BackingField;
    [DebuggerBrowsableAttribute]
private PriceInformation <YearlyOffer>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsStudent>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsOfferAvailable>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsHidden>k__BackingField;
    public PriceInformation Monthly { get; public set; }
    public PriceInformation MonthlyOffer { get; public set; }
    public PriceInformation Yearly { get; public set; }
    public PriceInformation YearlyOffer { get; public set; }
    public bool IsStudent { get; public set; }
    public bool IsOfferAvailable { get; public set; }
    public bool IsHidden { get; public set; }
    public PriceInformation get_Monthly();
    public void set_Monthly(PriceInformation value);
    public PriceInformation get_MonthlyOffer();
    public void set_MonthlyOffer(PriceInformation value);
    public PriceInformation get_Yearly();
    public void set_Yearly(PriceInformation value);
    public PriceInformation get_YearlyOffer();
    public void set_YearlyOffer(PriceInformation value);
    public bool get_IsStudent();
    public void set_IsStudent(bool value);
    public bool get_IsOfferAvailable();
    public void set_IsOfferAvailable(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
}
public enum Mosaik.Schema.PriceType : Enum {
    public int value__;
    public static PriceType Student;
    public static PriceType Personal;
    public static PriceType Professional;
    public static PriceType Teams;
    public static PriceType Base;
}
public enum Mosaik.Schema.ProgressMessages : Enum {
    public int value__;
    public static ProgressMessages LoadingAI;
    public static ProgressMessages EmbeddingFile;
    public static ProgressMessages GeneratingSummary;
    public static ProgressMessages ExplainingKeyTopics;
    public static ProgressMessages DownloadingLlama;
    public static ProgressMessages DownloadingLanguage;
    public static ProgressMessages DownloadingUpdate;
    public static ProgressMessages EmbeddingSpace;
    public static ProgressMessages DownloadingWhisper;
    public static ProgressMessages PST_ArchiveFound;
}
[ExtensionAttribute]
public static class Mosaik.Schema.ProgressMessageToText : object {
    [ExtensionAttribute]
public static string GetText(ProgressMessages pm);
}
public enum Mosaik.Schema.PromptTemplate : Enum {
    public int value__;
    public static PromptTemplate Alpaca;
    public static PromptTemplate AlpacaWithContext;
    public static PromptTemplate ChatML;
    public static PromptTemplate Zephyr;
    public static PromptTemplate AmazonMistral;
    public static PromptTemplate DefaultInstruct;
    public static PromptTemplate Llama2Instruct;
    public static PromptTemplate MistralInstruct;
    public static PromptTemplate Llama3;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.ProtectedPassword : object {
    public string NewPassword;
}
public class Mosaik.Schema.QueryStartingPoint : object {
}
public abstract class Mosaik.Schema.QueryStartingPoint`1 : object {
    [DebuggerBrowsableAttribute]
private UID128[] <StartAtUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private NodeTypeAndKeys <StartAt>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <StartAtTargetQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private OutboundConnection[] <Out>k__BackingField;
    [DebuggerBrowsableAttribute]
private T[] <Union>k__BackingField;
    public UID128[] StartAtUID { get; public set; }
    public NodeTypeAndKeys StartAt { get; public set; }
    public bool StartAtTargetQuery { get; public set; }
    public OutboundConnection[] Out { get; public set; }
    public T[] Union { get; public set; }
    public UID128[] get_StartAtUID();
    public void set_StartAtUID(UID128[] value);
    public NodeTypeAndKeys get_StartAt();
    public void set_StartAt(NodeTypeAndKeys value);
    public bool get_StartAtTargetQuery();
    public void set_StartAtTargetQuery(bool value);
    public OutboundConnection[] get_Out();
    public void set_Out(OutboundConnection[] value);
    public T[] get_Union();
    public void set_Union(T[] value);
}
public class Mosaik.Schema.QueryStats : object {
    [DebuggerBrowsableAttribute]
private ulong <QueryCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private ulong <QueryClicks>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <LoggedUsers>k__BackingField;
    public ulong QueryCount { get; public set; }
    public ulong QueryClicks { get; public set; }
    public ReadOnlyArray`1<UID128> LoggedUsers { get; public set; }
    public ulong get_QueryCount();
    public void set_QueryCount(ulong value);
    public ulong get_QueryClicks();
    public void set_QueryClicks(ulong value);
    public ReadOnlyArray`1<UID128> get_LoggedUsers();
    public void set_LoggedUsers(ReadOnlyArray`1<UID128> value);
}
public class Mosaik.Schema.QuerySynonyms : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<UID128, String[]> <Aliases>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<SimilarToken>> <Synonyms>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<SimilarToken>> <Alternates>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<string>> <Added>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<string>> <Removed>k__BackingField;
    public Dictionary`2<UID128, String[]> Aliases { get; public set; }
    public Dictionary`2<string, List`1<SimilarToken>> Synonyms { get; public set; }
    public Dictionary`2<string, List`1<SimilarToken>> Alternates { get; public set; }
    public Dictionary`2<string, List`1<string>> Added { get; public set; }
    public Dictionary`2<string, List`1<string>> Removed { get; public set; }
    public Dictionary`2<UID128, String[]> get_Aliases();
    public void set_Aliases(Dictionary`2<UID128, String[]> value);
    public Dictionary`2<string, List`1<SimilarToken>> get_Synonyms();
    public void set_Synonyms(Dictionary`2<string, List`1<SimilarToken>> value);
    public Dictionary`2<string, List`1<SimilarToken>> get_Alternates();
    public void set_Alternates(Dictionary`2<string, List`1<SimilarToken>> value);
    public Dictionary`2<string, List`1<string>> get_Added();
    public void set_Added(Dictionary`2<string, List`1<string>> value);
    public Dictionary`2<string, List`1<string>> get_Removed();
    public void set_Removed(Dictionary`2<string, List`1<string>> value);
}
[ExtensionAttribute]
public static class Mosaik.Schema.QuerySynonymsExt : object {
    [ExtensionAttribute]
public static void AddSynonym(QuerySynonyms qs, string word, SimilarToken synonym);
    [ExtensionAttribute]
public static void AddAlternate(QuerySynonyms qs, string word, SimilarToken alternate);
    [ExtensionAttribute]
public static void AddAdded(QuerySynonyms qs, string word, string added);
    [ExtensionAttribute]
public static void AddRemoved(QuerySynonyms qs, string word, string removed);
    [ExtensionAttribute]
public static bool TryGetSynonymsFor(QuerySynonyms qs, QueryToken token, SimilarToken[]& synonyms);
    public static string TrimQuotesAndSpaces(string word);
}
public class Mosaik.Schema.QueryToken : object {
    public QueryTokenType ParsedAs;
    public string Text;
    public string Original;
    public string Metadata;
    public UID128 ParsedAsUID;
    public string ParsedAsNodeType;
    public bool IsQuoted;
    public bool IsPartial;
    public bool Ignore;
    public bool NoSpaceAfter;
    public ReadOnlyArray`1<QueryToken> Alternatives;
}
public enum Mosaik.Schema.QueryTokenType : Enum {
    public int value__;
    public static QueryTokenType Token;
    public static QueryTokenType Node;
    public static QueryTokenType Null;
    public static QueryTokenType OpenParenthesis;
    public static QueryTokenType CloseParenthesis;
    public static QueryTokenType And;
    public static QueryTokenType Or;
    public static QueryTokenType Not;
    public static QueryTokenType Time;
    public static QueryTokenType Shortcut;
    public static QueryTokenType NotOrToken;
}
public class Mosaik.Schema.QueryTracker : object {
    [DebuggerBrowsableAttribute]
private long <TouchedNodes>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <TouchedEdges>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <SimilarNodes>k__BackingField;
    [DebuggerBrowsableAttribute]
private long <Queries>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Elapsed>k__BackingField;
    public long TouchedNodes { get; public set; }
    public long TouchedEdges { get; public set; }
    public long SimilarNodes { get; public set; }
    public long Queries { get; public set; }
    public float Elapsed { get; public set; }
    public TimeSpan ElapsedTime { get; }
    public long get_TouchedNodes();
    public void set_TouchedNodes(long value);
    public long get_TouchedEdges();
    public void set_TouchedEdges(long value);
    public long get_SimilarNodes();
    public void set_SimilarNodes(long value);
    public long get_Queries();
    public void set_Queries(long value);
    public float get_Elapsed();
    public void set_Elapsed(float value);
    public TimeSpan get_ElapsedTime();
}
public class Mosaik.Schema.RecentHomeViewElement : object {
    [DebuggerBrowsableAttribute]
private HomeViewElementType <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Hidden>k__BackingField;
    [DebuggerBrowsableAttribute]
private UnitSizeShared <Width>k__BackingField;
    public HomeViewElementType Type { get; public set; }
    public bool Hidden { get; public set; }
    public UnitSizeShared Width { get; public set; }
    public HomeViewElementType get_Type();
    public void set_Type(HomeViewElementType value);
    public bool get_Hidden();
    public void set_Hidden(bool value);
    public UnitSizeShared get_Width();
    public void set_Width(UnitSizeShared value);
}
public enum Mosaik.Schema.RecurrenceEndType : Enum {
    public int value__;
    public static RecurrenceEndType NoEnd;
    public static RecurrenceEndType EndDate;
    public static RecurrenceEndType OccurrencesCount;
}
public class Mosaik.Schema.RecurrencePattern : object {
    [DebuggerBrowsableAttribute]
private DateTime <Start>k__BackingField;
    [DebuggerBrowsableAttribute]
private Boolean[] <WeekDays>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <RepeatInterval>k__BackingField;
    [DebuggerBrowsableAttribute]
private RecurrencePatternType <PatternType>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <End>k__BackingField;
    [DebuggerBrowsableAttribute]
private RecurrenceEndType <EndType>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <EndOccurrencesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Relative>k__BackingField;
    [DebuggerBrowsableAttribute]
private DayOfWeek <FirstDayOfWeek>k__BackingField;
    public DateTime Start { get; public set; }
    public Boolean[] WeekDays { get; public set; }
    public int RepeatInterval { get; public set; }
    public RecurrencePatternType PatternType { get; public set; }
    public DateTime End { get; public set; }
    public RecurrenceEndType EndType { get; public set; }
    public int EndOccurrencesCount { get; public set; }
    public bool Relative { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public Boolean[] get_WeekDays();
    public void set_WeekDays(Boolean[] value);
    public int get_RepeatInterval();
    public void set_RepeatInterval(int value);
    public RecurrencePatternType get_PatternType();
    public void set_PatternType(RecurrencePatternType value);
    public DateTime get_End();
    public void set_End(DateTime value);
    public RecurrenceEndType get_EndType();
    public void set_EndType(RecurrenceEndType value);
    public int get_EndOccurrencesCount();
    public void set_EndOccurrencesCount(int value);
    public bool get_Relative();
    public void set_Relative(bool value);
    public DayOfWeek get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(DayOfWeek value);
    public static IndexInMonthOrYear DayOfWeekInMonth(DateTime dto);
    public IEnumerable`1<DayOfWeek> GetDaysOfWeek();
}
public enum Mosaik.Schema.RecurrencePatternType : Enum {
    public int value__;
    public static RecurrencePatternType Daily;
    public static RecurrencePatternType Weekly;
    public static RecurrencePatternType Monthly;
    public static RecurrencePatternType Yearly;
}
public class Mosaik.Schema.RelatedFacet : object {
    public UID128 UID;
    public bool InvertedBehaviour;
    public bool KeepOtherTypes;
    public bool ApplyBefore;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.Results : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<Node> <Nodes>k__BackingField;
    public ReadOnlyArray`1<Node> Nodes { get; }
    public int Count { get; }
    public ReadOnlyArray`1<Node> get_Nodes();
    [TemplateAttribute("parseInt({this}.Count, 10)")]
public int get_Count();
}
public class Mosaik.Schema.RssFeedConfig : object {
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Url>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<SyncFrequency> <SyncFrequency>k__BackingField;
    public string DisplayName { get; public set; }
    public string Icon { get; public set; }
    public string Url { get; public set; }
    public Nullable`1<SyncFrequency> SyncFrequency { get; public set; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Icon();
    public void set_Icon(string value);
    public string get_Url();
    public void set_Url(string value);
    public Nullable`1<SyncFrequency> get_SyncFrequency();
    public void set_SyncFrequency(Nullable`1<SyncFrequency> value);
}
public class Mosaik.Schema.SavedFacet : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Json>k__BackingField;
    public UID128 UID { get; public set; }
    public string Name { get; public set; }
    public string Json { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Json();
    public void set_Json(string value);
}
public class Mosaik.Schema.SavedFacets : object {
    [DebuggerBrowsableAttribute]
private String[] <TypeFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, RelatedFacet[]> <RelatedFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, ValueFacet[]> <ValueFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, NumericFacet[]> <NumericFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, TimeFacet> <TimeFacets>k__BackingField;
    public String[] TypeFacets { get; public set; }
    public Dictionary`2<string, RelatedFacet[]> RelatedFacets { get; public set; }
    public Dictionary`2<string, ValueFacet[]> ValueFacets { get; public set; }
    public Dictionary`2<string, NumericFacet[]> NumericFacets { get; public set; }
    public Dictionary`2<string, TimeFacet> TimeFacets { get; public set; }
    public String[] get_TypeFacets();
    public void set_TypeFacets(String[] value);
    public Dictionary`2<string, RelatedFacet[]> get_RelatedFacets();
    public void set_RelatedFacets(Dictionary`2<string, RelatedFacet[]> value);
    public Dictionary`2<string, ValueFacet[]> get_ValueFacets();
    public void set_ValueFacets(Dictionary`2<string, ValueFacet[]> value);
    public Dictionary`2<string, NumericFacet[]> get_NumericFacets();
    public void set_NumericFacets(Dictionary`2<string, NumericFacet[]> value);
    public Dictionary`2<string, TimeFacet> get_TimeFacets();
    public void set_TimeFacets(Dictionary`2<string, TimeFacet> value);
}
public class Mosaik.Schema.SavedSearchSpaceMetadata : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private UserAccess <Access>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsSharedSpace>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <SavedSearchRequest>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <NewItemsCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastSeenDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastUpdateDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskHash>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsPinnedToSidebar>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public string DisplayName { get; public set; }
    public string Icon { get; public set; }
    public string Image { get; public set; }
    public string Description { get; public set; }
    public UserAccess Access { get; public set; }
    public bool IsSharedSpace { get; public set; }
    public string SavedSearchRequest { get; public set; }
    public int NewItemsCount { get; public set; }
    public Nullable`1<DateTimeOffset> LastSeenDate { get; public set; }
    public Nullable`1<DateTimeOffset> LastUpdateDate { get; public set; }
    public UID128 TaskHash { get; public set; }
    public bool IsPinnedToSidebar { get; public set; }
    public UIcons UIcon { get; }
    public sealed virtual UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Icon();
    public void set_Icon(string value);
    public sealed virtual string get_Image();
    public void set_Image(string value);
    public string get_Description();
    public void set_Description(string value);
    public UserAccess get_Access();
    public void set_Access(UserAccess value);
    public bool get_IsSharedSpace();
    public void set_IsSharedSpace(bool value);
    public string get_SavedSearchRequest();
    public void set_SavedSearchRequest(string value);
    public int get_NewItemsCount();
    public void set_NewItemsCount(int value);
    public Nullable`1<DateTimeOffset> get_LastSeenDate();
    public void set_LastSeenDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastUpdateDate();
    public void set_LastUpdateDate(Nullable`1<DateTimeOffset> value);
    public sealed virtual UID128 get_TaskHash();
    public void set_TaskHash(UID128 value);
    public bool get_IsPinnedToSidebar();
    public void set_IsPinnedToSidebar(bool value);
    public UIcons get_UIcon();
}
public enum Mosaik.Schema.ScaleFactor : Enum {
    public int value__;
    public static ScaleFactor Normal;
    public static ScaleFactor Tiny;
    public static ScaleFactor Smaller;
    public static ScaleFactor Small;
    public static ScaleFactor Large;
    public static ScaleFactor Larger;
}
public class Mosaik.Schema.ScheduledTaskRunningProgress : object {
    [DebuggerBrowsableAttribute]
private bool <IsEnabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsRunning>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsSkipped>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCompleted>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCanceled>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCreated>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsFailed>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastStartTimeUtc>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastFinishTimeUtc>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <NextRunAfter>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ProgressMessage>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastErrorMessage>k__BackingField;
    public bool IsEnabled { get; public set; }
    public bool IsRunning { get; public set; }
    public bool IsSkipped { get; public set; }
    public bool IsCompleted { get; public set; }
    public bool IsCanceled { get; public set; }
    public bool IsCreated { get; public set; }
    public bool IsFailed { get; public set; }
    public Nullable`1<DateTimeOffset> LastStartTimeUtc { get; public set; }
    public Nullable`1<DateTimeOffset> LastFinishTimeUtc { get; public set; }
    public Nullable`1<DateTimeOffset> NextRunAfter { get; public set; }
    public string ProgressMessage { get; public set; }
    public string LastErrorMessage { get; public set; }
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsRunning();
    public void set_IsRunning(bool value);
    public bool get_IsSkipped();
    public void set_IsSkipped(bool value);
    public bool get_IsCompleted();
    public void set_IsCompleted(bool value);
    public bool get_IsCanceled();
    public void set_IsCanceled(bool value);
    public bool get_IsCreated();
    public void set_IsCreated(bool value);
    public bool get_IsFailed();
    public void set_IsFailed(bool value);
    public Nullable`1<DateTimeOffset> get_LastStartTimeUtc();
    public void set_LastStartTimeUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastFinishTimeUtc();
    public void set_LastFinishTimeUtc(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_NextRunAfter();
    public void set_NextRunAfter(Nullable`1<DateTimeOffset> value);
    public string get_ProgressMessage();
    public void set_ProgressMessage(string value);
    public string get_LastErrorMessage();
    public void set_LastErrorMessage(string value);
}
public class Mosaik.Schema.ScheduledTaskSimpleProgress : object {
    [DebuggerBrowsableAttribute]
private float <Progress>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <Time>k__BackingField;
    public float Progress { get; public set; }
    public string Message { get; public set; }
    public DateTimeOffset Time { get; public set; }
    public float get_Progress();
    public void set_Progress(float value);
    public string get_Message();
    public void set_Message(string value);
    public DateTimeOffset get_Time();
    public void set_Time(DateTimeOffset value);
}
public enum Mosaik.Schema.ScheduledTaskType : Enum {
    public int value__;
    public static ScheduledTaskType BackupTask;
    public static ScheduledTaskType StoreGraphTask;
    public static ScheduledTaskType ChangeIndexingThreadsTask;
    public static ScheduledTaskType CustomCodeScheduledTask;
    public static ScheduledTaskType RetrainModelTask;
    [ObsoleteAttribute("Topics have been deprecated")]
public static ScheduledTaskType TopicAnalysisTask;
    public static ScheduledTaskType WebCrawlerTask;
    public static ScheduledTaskType RssTask;
    public static ScheduledTaskType FtpTask;
    public static ScheduledTaskType S3Task;
    public static ScheduledTaskType AzureStorageTask;
    public static ScheduledTaskType FolderTask;
    public static ScheduledTaskType DropboxBusinessTask;
    public static ScheduledTaskType DropboxPersonalTask;
    public static ScheduledTaskType GoogleDriveTask;
    public static ScheduledTaskType GmailTask;
    public static ScheduledTaskType MicrosoftOneDriveTask;
    public static ScheduledTaskType MicrosoftSharePointTask;
    public static ScheduledTaskType MicrosoftTeamsTask;
    public static ScheduledTaskType MicrosoftOutlookTask;
    public static ScheduledTaskType MicrosoftOutlookCalendarTask;
    public static ScheduledTaskType GitHubTask;
    public static ScheduledTaskType ConfluenceTask;
    public static ScheduledTaskType JiraTask;
    public static ScheduledTaskType Pop3Task;
    public static ScheduledTaskType ImapTask;
    public static ScheduledTaskType ZenDeskTask;
    public static ScheduledTaskType SlackTask;
    public static ScheduledTaskType AirtableTask;
    public static ScheduledTaskType XKCDTask;
    public static ScheduledTaskType PSTTask;
    public static ScheduledTaskType GoogleCalendarTask;
    public static ScheduledTaskType GoogleSearchProviderTask;
    public static ScheduledTaskType GoogleMapsSearchProviderTask;
    public static ScheduledTaskType BingSearchProviderTask;
    public static ScheduledTaskType BingMapsSearchProviderTask;
    public static ScheduledTaskType HereMapsSearchProviderTask;
    public static ScheduledTaskType YahooSearchProviderTask;
    public static ScheduledTaskType DuckDuckGoSearchProviderTask;
    public static ScheduledTaskType StackOverflowSearchProviderTask;
    public static ScheduledTaskType LinkedInSearchProviderTask;
    [ObsoleteAttribute("Twitter is considered obsolete now")]
public static ScheduledTaskType TwitterSearchProviderTask;
    public static ScheduledTaskType YouTubeSearchProviderTask;
    public static ScheduledTaskType WikipediaSearchProviderTask;
    public static ScheduledTaskType PubMedSearchProviderTask;
    public static ScheduledTaskType MicrosoftAcademicSearchProviderTask;
    public static ScheduledTaskType SemanticScholarSearchProviderTask;
    public static ScheduledTaskType GoogleScholarSearchProviderTask;
    public static ScheduledTaskType arXivSearchProviderTask;
    public static ScheduledTaskType WolframAlphaSearchProviderTask;
    public static ScheduledTaskType EdgeBrowserProviderTask;
    public static ScheduledTaskType EdgeBetaBrowserProviderTask;
    public static ScheduledTaskType EdgeDevBrowserProviderTask;
    public static ScheduledTaskType ChromeBrowserProviderTask;
    public static ScheduledTaskType ChromeBetaBrowserProviderTask;
    public static ScheduledTaskType OperaBrowserProviderTask;
    public static ScheduledTaskType VivaldiBrowserProviderTask;
    public static ScheduledTaskType BraveBrowserProviderTask;
    public static ScheduledTaskType FirefoxBrowserProviderTask;
    public static ScheduledTaskType SafariBrowserProviderTask;
    public static ScheduledTaskType NotionTask;
    public static ScheduledTaskType ClipboardTask;
    public static ScheduledTaskType HackerNewsTask;
    [ObsoleteAttribute("TwitterTask is deprecated because owner is insane")]
public static ScheduledTaskType TwitterTask;
    public static ScheduledTaskType GiphySearchProviderTask;
    public static ScheduledTaskType UnsplashSearchProviderTask;
    public static ScheduledTaskType IconfinderSearchProviderTask;
    public static ScheduledTaskType GrepAppSearchProviderTask;
    public static ScheduledTaskType SalesforceTask;
    public static ScheduledTaskType PCloudPersonalTask;
    [ObsoleteAttribute("NotesTask have been deprecated")]
public static ScheduledTaskType NotesTask;
    public static ScheduledTaskType OutlookDesktopTask;
    public static ScheduledTaskType EvernoteTask;
    public static ScheduledTaskType ChatGPTTask;
    public static ScheduledTaskType EmojiSearchProviderTask;
    public static ScheduledTaskType HubSpotTask;
    public static ScheduledTaskType LlamaTask;
    public static ScheduledTaskType UserTipsTask;
    public static ScheduledTaskType YahooImapTask;
    public static ScheduledTaskType LlamaServerTask;
    public static ScheduledTaskType BoxTask;
    public static ScheduledTaskType AWSBedrockTask;
    public static ScheduledTaskType AnthropicTask;
    public static ScheduledTaskType MistralAITask;
}
public class Mosaik.Schema.SchemaChanges : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<FieldDefinition> <AddedFields>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <DeletedFields>k__BackingField;
    public ReadOnlyArray`1<FieldDefinition> AddedFields { get; public set; }
    public ReadOnlyArray`1<string> DeletedFields { get; public set; }
    public ReadOnlyArray`1<FieldDefinition> get_AddedFields();
    public void set_AddedFields(ReadOnlyArray`1<FieldDefinition> value);
    public ReadOnlyArray`1<string> get_DeletedFields();
    public void set_DeletedFields(ReadOnlyArray`1<string> value);
}
public class Mosaik.Schema.SchemaDefinition : object {
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Key>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <HideOnDataHub>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<FieldDefinition> <Fields>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <DeletedFieldNames>k__BackingField;
    public string Name { get; }
    public string Type { get; }
    public string Key { get; }
    public bool HideOnDataHub { get; private set; }
    public ReadOnlyArray`1<FieldDefinition> Fields { get; }
    public ReadOnlyArray`1<string> DeletedFieldNames { get; }
    public bool IsInternal { get; }
    public SchemaDefinition(string name, string type);
    public SchemaDefinition(string name, string type, ReadOnlyArray`1<FieldDefinition> fields);
    public SchemaDefinition(string name, string type, string key, ReadOnlyArray`1<FieldDefinition> fields);
    [JsonConstructorAttribute]
public SchemaDefinition(string name, string type, string key, ReadOnlyArray`1<FieldDefinition> fields, ReadOnlyArray`1<string> deletedFieldNames);
    public static SchemaDefinition GetEmpty(string type);
    public SchemaDefinition HiddenOnDataHub();
    public string get_Name();
    public string get_Type();
    public string get_Key();
    public bool get_HideOnDataHub();
    private void set_HideOnDataHub(bool value);
    public ReadOnlyArray`1<FieldDefinition> get_Fields();
    public ReadOnlyArray`1<string> get_DeletedFieldNames();
    public bool get_IsInternal();
}
public class Mosaik.Schema.SchemaStyleInfo : object {
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Color>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LabelField>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Shortcuts>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <ChatFields>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string Color { get; public set; }
    public string Icon { get; public set; }
    public string LabelField { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public String[] Shortcuts { get; public set; }
    public String[] ChatFields { get; public set; }
    public Nullable`1<UIcons> UIcon { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Color();
    public void set_Color(string value);
    public string get_Icon();
    public void set_Icon(string value);
    public string get_LabelField();
    public void set_LabelField(string value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public String[] get_Shortcuts();
    public void set_Shortcuts(String[] value);
    public String[] get_ChatFields();
    public void set_ChatFields(String[] value);
    public Nullable`1<UIcons> get_UIcon();
}
public enum Mosaik.Schema.ScreenToShow : Enum {
    public int value__;
    public static ScreenToShow CursorMonitor;
    public static ScreenToShow PrimaryMonitor;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.SearchHit : object {
    public float Score;
    public bool Pinned;
    public bool FromVectorSearch;
    public Node Node;
    public TextAndUID[] Highlights;
}
public class Mosaik.Schema.SearchLinkingInfo : object {
    [DebuggerBrowsableAttribute]
private string <EntityType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreCase>k__BackingField;
    public string EntityType { get; public set; }
    public string NodeType { get; public set; }
    public bool IgnoreCase { get; public set; }
    public string get_EntityType();
    public void set_EntityType(string value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
}
public class Mosaik.Schema.SearchQuery : object {
    [DebuggerBrowsableAttribute]
private string <Value>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Simple>k__BackingField;
    [DebuggerBrowsableAttribute]
private List`1<QueryToken> <Tokens>k__BackingField;
    [DebuggerBrowsableAttribute]
private QuerySynonyms <Synonyms>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <ParsedAsLanguage>k__BackingField;
    public string Value { get; public set; }
    public bool Simple { get; public set; }
    public List`1<QueryToken> Tokens { get; public set; }
    public QuerySynonyms Synonyms { get; public set; }
    public LanguageDTO ParsedAsLanguage { get; public set; }
    public string get_Value();
    public void set_Value(string value);
    public bool get_Simple();
    public void set_Simple(bool value);
    public List`1<QueryToken> get_Tokens();
    public void set_Tokens(List`1<QueryToken> value);
    public QuerySynonyms get_Synonyms();
    public void set_Synonyms(QuerySynonyms value);
    public LanguageDTO get_ParsedAsLanguage();
    public void set_ParsedAsLanguage(LanguageDTO value);
    internal SearchQuery Clone();
}
public class Mosaik.Schema.SearchRequest : object {
    [DebuggerBrowsableAttribute]
private bool <Lazy>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ShowSaveIfEmpty>k__BackingField;
    [DebuggerBrowsableAttribute]
private SortModeEnum <SortMode>k__BackingField;
    [DebuggerBrowsableAttribute]
private SearchQuery <Query>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <IgnoreNodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <TargetUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <ExcludeUIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <TargetQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <ExcludeQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <SortQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<UID128> <Filters>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <TypesFacet>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<string> <BeforeTypesFacet>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<RelatedFacet>> <RelatedFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<NumericFacet>> <NumericFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, TimeFacet> <TimeFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, List`1<ValueFacet>> <ValueFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, MergeRelated> <MergeRelated>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, ExpandRelated> <ExpandRelated>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly[] <PreMergeTargetQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <FacetTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private static String[] <FacetsTypesDefault>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimilarityRanking <SimilarityRanking>k__BackingField;
    [DebuggerBrowsableAttribute]
private static List`1<string> <KnownNodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private static String[] <DefaultIgnoreTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsMarkedAsNoResults>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeDecay <TimeDecay>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Tag>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <VectorSearchTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private VectorSearchMode <VectorSearchMode>k__BackingField;
    [DebuggerBrowsableAttribute]
private HashSet`1<UID128> <VectorSearchResults>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <Fuzziness>k__BackingField;
    [DebuggerBrowsableAttribute]
private QueryTracker <Tracker>k__BackingField;
    public bool Lazy { get; public set; }
    public bool ShowSaveIfEmpty { get; public set; }
    public SortModeEnum SortMode { get; public set; }
    public SearchQuery Query { get; public set; }
    public HashSet`1<string> IgnoreNodeTypes { get; public set; }
    public ReadOnlyArray`1<UID128> TargetUIDs { get; public set; }
    public ReadOnlyArray`1<UID128> ExcludeUIDs { get; public set; }
    public SimpleQueryForUIDsOnly TargetQuery { get; public set; }
    public SimpleQueryForUIDsOnly ExcludeQuery { get; public set; }
    public SimpleQueryForUIDsOnly SortQuery { get; public set; }
    public HashSet`1<UID128> Filters { get; public set; }
    public HashSet`1<string> TypesFacet { get; public set; }
    public HashSet`1<string> BeforeTypesFacet { get; public set; }
    public Dictionary`2<string, List`1<RelatedFacet>> RelatedFacets { get; public set; }
    public Dictionary`2<string, List`1<NumericFacet>> NumericFacets { get; public set; }
    public Dictionary`2<string, TimeFacet> TimeFacets { get; public set; }
    public Dictionary`2<string, List`1<ValueFacet>> ValueFacets { get; public set; }
    public Dictionary`2<string, MergeRelated> MergeRelated { get; public set; }
    public Dictionary`2<string, ExpandRelated> ExpandRelated { get; public set; }
    public SimpleQueryForUIDsOnly[] PreMergeTargetQuery { get; public set; }
    public String[] FacetTypes { get; public set; }
    public static String[] FacetsTypesDefault { get; public set; }
    public SimilarityRanking SimilarityRanking { get; public set; }
    public static List`1<string> KnownNodeTypes { get; public set; }
    public static String[] DefaultIgnoreTypes { get; public set; }
    public bool IsMarkedAsNoResults { get; private set; }
    public TimeDecay TimeDecay { get; private set; }
    public string Tag { get; public set; }
    public String[] VectorSearchTypes { get; public set; }
    public VectorSearchMode VectorSearchMode { get; public set; }
    public HashSet`1<UID128> VectorSearchResults { get; public set; }
    public Nullable`1<int> Fuzziness { get; public set; }
    public QueryTracker Tracker { get; public set; }
    public SearchRequest(string value);
    private static SearchRequest();
    public bool get_Lazy();
    public void set_Lazy(bool value);
    public bool get_ShowSaveIfEmpty();
    public void set_ShowSaveIfEmpty(bool value);
    public SortModeEnum get_SortMode();
    public void set_SortMode(SortModeEnum value);
    public SearchQuery get_Query();
    public void set_Query(SearchQuery value);
    public HashSet`1<string> get_IgnoreNodeTypes();
    public void set_IgnoreNodeTypes(HashSet`1<string> value);
    public ReadOnlyArray`1<UID128> get_TargetUIDs();
    public void set_TargetUIDs(ReadOnlyArray`1<UID128> value);
    public ReadOnlyArray`1<UID128> get_ExcludeUIDs();
    public void set_ExcludeUIDs(ReadOnlyArray`1<UID128> value);
    public SimpleQueryForUIDsOnly get_TargetQuery();
    public void set_TargetQuery(SimpleQueryForUIDsOnly value);
    public SimpleQueryForUIDsOnly get_ExcludeQuery();
    public void set_ExcludeQuery(SimpleQueryForUIDsOnly value);
    public SimpleQueryForUIDsOnly get_SortQuery();
    public void set_SortQuery(SimpleQueryForUIDsOnly value);
    public HashSet`1<UID128> get_Filters();
    public void set_Filters(HashSet`1<UID128> value);
    public HashSet`1<string> get_TypesFacet();
    public void set_TypesFacet(HashSet`1<string> value);
    public HashSet`1<string> get_BeforeTypesFacet();
    public void set_BeforeTypesFacet(HashSet`1<string> value);
    public Dictionary`2<string, List`1<RelatedFacet>> get_RelatedFacets();
    public void set_RelatedFacets(Dictionary`2<string, List`1<RelatedFacet>> value);
    public Dictionary`2<string, List`1<NumericFacet>> get_NumericFacets();
    public void set_NumericFacets(Dictionary`2<string, List`1<NumericFacet>> value);
    public Dictionary`2<string, TimeFacet> get_TimeFacets();
    public void set_TimeFacets(Dictionary`2<string, TimeFacet> value);
    public Dictionary`2<string, List`1<ValueFacet>> get_ValueFacets();
    public void set_ValueFacets(Dictionary`2<string, List`1<ValueFacet>> value);
    public Dictionary`2<string, MergeRelated> get_MergeRelated();
    public void set_MergeRelated(Dictionary`2<string, MergeRelated> value);
    public Dictionary`2<string, ExpandRelated> get_ExpandRelated();
    public void set_ExpandRelated(Dictionary`2<string, ExpandRelated> value);
    public SimpleQueryForUIDsOnly[] get_PreMergeTargetQuery();
    public void set_PreMergeTargetQuery(SimpleQueryForUIDsOnly[] value);
    public String[] get_FacetTypes();
    public void set_FacetTypes(String[] value);
    public static String[] get_FacetsTypesDefault();
    public static void set_FacetsTypesDefault(String[] value);
    public SimilarityRanking get_SimilarityRanking();
    public void set_SimilarityRanking(SimilarityRanking value);
    public static List`1<string> get_KnownNodeTypes();
    public static void set_KnownNodeTypes(List`1<string> value);
    public static String[] get_DefaultIgnoreTypes();
    public static void set_DefaultIgnoreTypes(String[] value);
    public bool get_IsMarkedAsNoResults();
    private void set_IsMarkedAsNoResults(bool value);
    public TimeDecay get_TimeDecay();
    private void set_TimeDecay(TimeDecay value);
    public string get_Tag();
    public void set_Tag(string value);
    public String[] get_VectorSearchTypes();
    public void set_VectorSearchTypes(String[] value);
    public VectorSearchMode get_VectorSearchMode();
    public void set_VectorSearchMode(VectorSearchMode value);
    public HashSet`1<UID128> get_VectorSearchResults();
    public void set_VectorSearchResults(HashSet`1<UID128> value);
    public Nullable`1<int> get_Fuzziness();
    public void set_Fuzziness(Nullable`1<int> value);
    public QueryTracker get_Tracker();
    public void set_Tracker(QueryTracker value);
    public SearchRequest MarkAsNoResults();
    public SearchRequest MarkAsNoResultsIf(bool condition);
    public SearchRequest WithQuery(SearchQuery query);
    public SearchRequest WithQuery(string query, bool simple);
    public SearchRequest WithTag(string tag);
    public SearchRequest WithTargetUIDs(ReadOnlyArray`1<UID128> uids);
    public SearchRequest WithExcludeUIDs(ReadOnlyArray`1<UID128> uids);
    public SearchRequest WithTimeDecay(float decayFactor, float scaleDays, float offsetDays, int numberOfHitsToApply);
    public SearchRequest WithoutTimeDecay();
    public SearchRequest WithFilters(UID128[] filters);
    public SearchRequest WithTargetQuery(SimpleQueryBuilder query);
    public SearchRequest WithSortQuery(SimpleQueryBuilder query);
    public SearchRequest WithExcludeQuery(SimpleQueryBuilder query);
    public SearchRequest SetTimestampFacet(DateTimeOffset from, DateTimeOffset to, bool applyBefore);
    public SearchRequest SetTimeFacet(string key, DateTimeOffset from, DateTimeOffset to, bool applyBefore);
    public SearchRequest SetValueFacet(string key, bool keepOtherTypes, bool invertedBehaviour, bool applyBefore, String[] values);
    public void ClearHiddenFacets(HashSet`1<string> hiddenFacets);
    public SearchRequest SetTypesFacet(String[] types);
    public SearchRequest SetBeforeTypesFacet(String[] types);
    public SearchRequest RemoveTypesFacet(String[] types);
    public SearchRequest ResetIgnoreNodeTypes();
    public SearchRequest SetIgnoreNodeTypes(String[] types);
    public SearchRequest SetOnlyTypes(String[] types);
    public SearchRequest SetRelatedFacet(string type, UID128 uid, bool invertedBehaviour, bool applyBefore);
    public SearchRequest SetRelatedFacet(string type, IEnumerable`1<UID128> uids, bool invertedBehaviour, bool applyBefore);
    public SearchRequest MergeResultsToRelated(string fromNodeType, string toNodeType, string viaEdgeType, Nullable`1<float> modifier);
    public SearchRequest ExpandResultsToRelated(string fromNodeType, string toNodeType, string viaEdgeType, Nullable`1<float> modifier);
    public SearchRequest WithPreMergeTargetQuery(SimpleQueryBuilder[] queries);
    public SearchRequest WithSortMode(SortModeEnum mode);
    public SearchRequest WithSimilarityRanking(SimilarityRanking similarityRanking);
    public bool HasSameFacetsAs(SearchRequest other);
    public bool HasSameUIDs(SearchRequest other);
    public bool Equals(SearchRequest other);
    public SearchRequest Clone();
    public static SearchRequest FromParameters(Parameters parameters);
    public string ToURIQuery();
    public SearchRequest StoreOnRoute();
    public Parameters StoreOn(Parameters p);
    private string EncodeMergeRelated(string key, MergeRelated value);
    private string EncodeExpandRelated(string key, ExpandRelated value);
    private static string EncodeSimilarityRanking(SimilarityRanking similarityRanking);
    private static string EncodeUIDs(ReadOnlyArray`1<UID128> uids);
    private string EncodeSortMode(SortModeEnum sortMode);
    private string EncodeTypesFacet(HashSet`1<string> typesFacet, bool isIgnore);
    private static string EncodeTimeFacet(string key, TimeFacet value);
    private static string EncodeRelatedFacet(string key, List`1<RelatedFacet> value);
    private static string EncodeNumericFacet(string key, List`1<NumericFacet> value);
    private static string EncodeValueFacet(string key, List`1<ValueFacet> value);
    private static HashSet`1<string> DecodeTypesFacet(string v);
    private static HashSet`1<UID128> DecodeFilters(string v);
    private static SortModeEnum DecodeSortMode(string v);
    private static Dictionary`2<string, TimeFacet> DecodeTimeFacets(string par);
    private static Dictionary`2<string, MergeRelated> DecodeMergeRelated(string par);
    private static Dictionary`2<string, ExpandRelated> DecodeExpandRelated(string par);
    private static Dictionary`2<string, List`1<RelatedFacet>> DecodeRelatedFacets(string par);
    private static Dictionary`2<string, List`1<NumericFacet>> DecodeNumericFacet(string par);
    private static Dictionary`2<string, List`1<ValueFacet>> DecodeValueFacet(string par);
    private static UID128[] DecodeUIDs(string v);
    private static SimilarityRanking DecodeSimilarityRanking(string v);
    public void MergeFromSaved(SearchRequest savedSearchRequest);
    internal static string <FromParameters>g__tryGet|167_0(string key, <>c__DisplayClass167_0& );
    private Parameters <StoreOnRoute>b__169_0(Parameters par);
}
public class Mosaik.Schema.SearchResult : object {
    public SearchRequest Request;
    public UID128 QueryCache;
    public UID128 SearchQueryUID;
    public string Count;
    public SearchStats Stats;
    public ReadOnlyArray`1<SearchHit> Results;
    public ReadOnlyArray`1<UID128> ResultUIDs;
    public string TotalElapsedMilliseconds;
    public string Highlight;
    public bool Incomplete;
    public bool StillIndexing;
    public string ProCount;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.SearchStats : object {
    public float ElapsedMilliseconds;
    public int TouchedNodes;
    public int TouchedEdges;
    public bool RestrictedNodesFilteredOut;
}
[MessagePackObjectAttribute("False")]
public class Mosaik.Schema.SearchTrigger : object {
    [DebuggerBrowsableAttribute]
private String[] <NodeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <RelatedFacet>k__BackingField;
    [DebuggerBrowsableAttribute]
private ValueFacetTrigger[] <ValueFacets>k__BackingField;
    [DebuggerBrowsableAttribute]
private FacetDisplayOptions <FacetDisplayType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Query>k__BackingField;
    [KeyAttribute("0")]
public String[] NodeTypes { get; public set; }
    [KeyAttribute("1")]
public UID128[] RelatedFacet { get; public set; }
    [KeyAttribute("2")]
public ValueFacetTrigger[] ValueFacets { get; public set; }
    [KeyAttribute("3")]
public FacetDisplayOptions FacetDisplayType { get; public set; }
    [KeyAttribute("4")]
public string Query { get; public set; }
    public String[] get_NodeTypes();
    public void set_NodeTypes(String[] value);
    public UID128[] get_RelatedFacet();
    public void set_RelatedFacet(UID128[] value);
    public ValueFacetTrigger[] get_ValueFacets();
    public void set_ValueFacets(ValueFacetTrigger[] value);
    public FacetDisplayOptions get_FacetDisplayType();
    public void set_FacetDisplayType(FacetDisplayOptions value);
    public string get_Query();
    public void set_Query(string value);
    public SearchTrigger Clone();
}
public enum Mosaik.Schema.ServiceCallbackResponseErrorType : Enum {
    public int value__;
    public static ServiceCallbackResponseErrorType NotDropboxBusinessAccount;
    public static ServiceCallbackResponseErrorType NotDropboxPersonalAccount;
    public static ServiceCallbackResponseErrorType UserCanceledFlow;
}
public class Mosaik.Schema.Setting : object {
    private string _value;
    [DebuggerBrowsableAttribute]
private bool <HasChanged>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <TrackChanges>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Default>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <ValidValues>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsReadOnly>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <HelpMessage>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FeatureFlagName>k__BackingField;
    public bool HasChanged { get; private set; }
    public bool TrackChanges { get; public set; }
    public string Name { get; public set; }
    public string Type { get; public set; }
    public string Default { get; public set; }
    public string Value { get; public set; }
    public String[] ValidValues { get; public set; }
    public bool IsReadOnly { get; public set; }
    public string HelpMessage { get; public set; }
    public string FeatureFlagName { get; public set; }
    public Setting(string name, string type, bool isReadOnly, string helpMessage);
    public Setting(string name, string type, string default, bool isReadOnly, string helpMessage);
    public Setting(string name, string type, string default, String[] validValues, bool isReadOnly, string helpMessage);
    public bool get_HasChanged();
    private void set_HasChanged(bool value);
    public bool get_TrackChanges();
    public void set_TrackChanges(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Default();
    public void set_Default(string value);
    public string get_Value();
    public void set_Value(string value);
    public String[] get_ValidValues();
    public void set_ValidValues(String[] value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public string get_HelpMessage();
    public void set_HelpMessage(string value);
    public string get_FeatureFlagName();
    public void set_FeatureFlagName(string value);
    public sealed virtual bool Equals(Setting other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Setting Clone();
}
public class Mosaik.Schema.SettingsHolder : object {
    private List`1<Setting> _settings;
    public SettingsHolder(Setting[] settings);
    public bool HasChanged();
    public void TrackChanges();
    public SettingsHolder AddProperty(string name, string value, string type);
    public bool TryGet(string name, Setting& setting);
    public Setting Get(string name);
    public bool GetBoolValueOrDefault(string name, Nullable`1<bool> defaultValue);
    public Nullable`1<bool> GetBoolValue(string name);
    public int GetIntValueOrDefault(string name, Nullable`1<int> defaultValue);
    public Nullable`1<int> GetIntValue(string name);
    public sealed virtual bool Equals(SettingsHolder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual IEnumerator`1<Setting> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.ShapeAndExamples : object {
    [DebuggerBrowsableAttribute]
private string <Shape>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <CompactShape>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <Examples>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Frequency>k__BackingField;
    public string Shape { get; public set; }
    public string CompactShape { get; public set; }
    public ReadOnlyArray`1<string> Examples { get; public set; }
    public float Frequency { get; public set; }
    public string get_Shape();
    public void set_Shape(string value);
    public string get_CompactShape();
    public void set_CompactShape(string value);
    public ReadOnlyArray`1<string> get_Examples();
    public void set_Examples(ReadOnlyArray`1<string> value);
    public float get_Frequency();
    public void set_Frequency(float value);
}
public static class Mosaik.Schema.SharedChars : object {
    public static char SSE_MSG_SPLIT_CHAR;
    public static char SOCKET_MSG_SPLIT_CHAR;
    public static char HIDDEN_FIELD_SPLIT_CHAR;
    public static char VISIBLE_FIELD_SPLIT_CHAR;
}
public static class Mosaik.Schema.SharedConst : object {
    public static string EXAMPLE_PROMPT_KEY;
    public static string PINNED_SPACE_KEY;
}
public enum Mosaik.Schema.SidebarMode : Enum {
    public int value__;
    public static SidebarMode RememberLast;
    public static SidebarMode AlwaysOpen;
    public static SidebarMode AlwaysClosed;
}
public enum Mosaik.Schema.Signals : Enum {
    public int value__;
    public static Signals Workspace_1;
    public static Signals Workspace_2;
    public static Signals Workspace_3;
    public static Signals Workspace_4;
    public static Signals Workspace_5;
    public static Signals Workspace_6;
    public static Signals Workspace_7;
    public static Signals Workspace_8;
    public static Signals Workspace_9;
    public static Signals Workspace_10;
    public static Signals Workspace_11;
    public static Signals Workspace_12;
    public static Signals Workspace_13;
    public static Signals Workspace_14;
    public static Signals Workspace_15;
    public static Signals Workspace_16;
    public static Signals Workspace_17;
    public static Signals Workspace_18;
    public static Signals Workspace_19;
    public static Signals Workspace_20;
    public static Signals Workspace_21;
    public static Signals Workspace_22;
    public static Signals Workspace_23;
    public static Signals Workspace_24;
    public static Signals Workspace_25;
    public static Signals Workspace_26;
    public static Signals Workspace_27;
    public static Signals Workspace_28;
    public static Signals Workspace_29;
    public static Signals Workspace_30;
    public static Signals Workspace_31;
    public static Signals Workspace_32;
    public static Signals Workspace_33;
    public static Signals Workspace_34;
    public static Signals Workspace_35;
    public static Signals Workspace_36;
    public static Signals Workspace_37;
    public static Signals Workspace_38;
    public static Signals Workspace_39;
    public static Signals Workspace_40;
    public static Signals Workspace_41;
    public static Signals Workspace_42;
    public static Signals Workspace_43;
    public static Signals Workspace_44;
    public static Signals Workspace_45;
    public static Signals Workspace_46;
    public static Signals Workspace_47;
    public static Signals Workspace_48;
    public static Signals Workspace_49;
    public static Signals Workspace_50;
    public static Signals Workspace_51;
    public static Signals Workspace_52;
    public static Signals Workspace_53;
    public static Signals Workspace_54;
    public static Signals Workspace_55;
    public static Signals Workspace_56;
    public static Signals Workspace_57;
    public static Signals Workspace_58;
    public static Signals Workspace_59;
    public static Signals Workspace_60;
    public static Signals Workspace_61;
    public static Signals Workspace_62;
    public static Signals Workspace_63;
    public static Signals Workspace_64;
    public static Signals Workspace_65;
    public static Signals Workspace_66;
    public static Signals Workspace_67;
    public static Signals Workspace_68;
    public static Signals Workspace_69;
    public static Signals Workspace_70;
    public static Signals Workspace_71;
    public static Signals Workspace_72;
    public static Signals Workspace_73;
    public static Signals Workspace_74;
    public static Signals Workspace_75;
    public static Signals Workspace_76;
    public static Signals Workspace_77;
    public static Signals Workspace_78;
    public static Signals Workspace_79;
    public static Signals Workspace_80;
    public static Signals Workspace_81;
    public static Signals Workspace_82;
    public static Signals Workspace_83;
    public static Signals Workspace_84;
    public static Signals Workspace_85;
    public static Signals Workspace_86;
    public static Signals Workspace_87;
    public static Signals Workspace_88;
    public static Signals Workspace_89;
    public static Signals Workspace_90;
    public static Signals Workspace_91;
    public static Signals Workspace_92;
    public static Signals Workspace_93;
    public static Signals Workspace_94;
    public static Signals Workspace_95;
    public static Signals Workspace_96;
    public static Signals Workspace_97;
    public static Signals Workspace_98;
    public static Signals Workspace_99;
    public static Signals Workspace_100;
    public static Signals Search;
    public static Signals OpenResult;
    public static Signals UsedInbox;
    public static Signals UsedCalendar;
    public static Signals UsedAI;
    public static Signals UsedCommandBar;
    public static Signals CreatedSpace;
    public static Signals AppConnected_Mail;
    public static Signals AppConnected_Calendar;
    public static Signals AppConnected_Computer;
    public static Signals AppConnected_Clipboard;
    public static Signals AppConnected_Feeds;
    public static Signals AppConnected_OtherApps;
    public static Signals AppConnected_AI_Assistant;
}
public class Mosaik.Schema.SimilarityIndexInfo : object {
    [DebuggerBrowsableAttribute]
private UID64 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    public UID64 UID { get; public set; }
    public string Description { get; public set; }
    public UID64 get_UID();
    public void set_UID(UID64 value);
    public string get_Description();
    public void set_Description(string value);
}
public class Mosaik.Schema.SimilarityRanking : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <SimilarTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <NotSimilarTo>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <SimilarQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <NotSimilarQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID64> <IndexUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <SimilarScoreThreshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ReverseSorting>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <KeepSimilarToOnResponse>k__BackingField;
    public ReadOnlyArray`1<UID128> SimilarTo { get; public set; }
    public ReadOnlyArray`1<UID128> NotSimilarTo { get; public set; }
    public SimpleQueryForUIDsOnly SimilarQuery { get; public set; }
    public SimpleQueryForUIDsOnly NotSimilarQuery { get; public set; }
    public ReadOnlyArray`1<UID64> IndexUID { get; public set; }
    public float SimilarScoreThreshold { get; public set; }
    public bool ReverseSorting { get; public set; }
    public bool KeepSimilarToOnResponse { get; public set; }
    public ReadOnlyArray`1<UID128> get_SimilarTo();
    public void set_SimilarTo(ReadOnlyArray`1<UID128> value);
    public ReadOnlyArray`1<UID128> get_NotSimilarTo();
    public void set_NotSimilarTo(ReadOnlyArray`1<UID128> value);
    public SimpleQueryForUIDsOnly get_SimilarQuery();
    public void set_SimilarQuery(SimpleQueryForUIDsOnly value);
    public SimpleQueryForUIDsOnly get_NotSimilarQuery();
    public void set_NotSimilarQuery(SimpleQueryForUIDsOnly value);
    public ReadOnlyArray`1<UID64> get_IndexUID();
    public void set_IndexUID(ReadOnlyArray`1<UID64> value);
    public float get_SimilarScoreThreshold();
    public void set_SimilarScoreThreshold(float value);
    public bool get_ReverseSorting();
    public void set_ReverseSorting(bool value);
    public bool get_KeepSimilarToOnResponse();
    public void set_KeepSimilarToOnResponse(bool value);
    public SimilarityRanking WithSimilarTo(ReadOnlyArray`1<UID128> uids);
    public SimilarityRanking WithNotSimilarTo(ReadOnlyArray`1<UID128> uids);
    public SimilarityRanking WithSimilarTo(UID128[] uids);
    public SimilarityRanking WithNotSimilarTo(UID128[] uids);
    public SimilarityRanking WithIndex(UID64[] index);
    public SimilarityRanking WithSimilarTo(SimpleQueryBuilder query);
    public SimilarityRanking WithNotSimilarTo(SimpleQueryBuilder query);
}
public class Mosaik.Schema.SimilarToken : object {
    [DebuggerBrowsableAttribute]
private string <Value>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Score>k__BackingField;
    public string Value { get; public set; }
    public float Score { get; public set; }
    public SimilarToken(string value, float score);
    public string get_Value();
    public void set_Value(string value);
    public float get_Score();
    public void set_Score(float value);
}
internal class Mosaik.Schema.SimilarTokenComparer : object {
    public sealed virtual bool Equals(SimilarToken x, SimilarToken y);
    public sealed virtual int GetHashCode(SimilarToken obj);
}
public class Mosaik.Schema.SimpleQueryBuilder : object {
    private SimpleQueryForClients _query;
    private Nullable`1<int> _skip;
    private Nullable`1<int> _limit;
    public SimpleQueryBuilder(UID128[] uids);
    public SimpleQueryBuilder(string nodeType, String[] keys);
    public Task`1<TResult> GetAsync(QueryOutputFormat format, bool deserializeAsLiteral);
    public SimpleQueryForUIDsOnly ToSimpleQueryForUIDsOnly();
    private SimpleQueryForUIDsOnly ToSimpleQueryForUIDsOnly(SimpleQueryForClients simpleQuery);
    public SimpleQueryBuilder Out(String[] nodeTypes, String[] edgeTypes, String[] excludeNodeTypes);
    public SimpleQueryBuilder Union(SimpleQueryBuilder otherQuery);
    public SimpleQueryBuilder Out(string nodeType, string edgeType);
    public SimpleQueryBuilder Out();
    public SimpleQueryBuilder OutWhere(String[] nodeTypes, String[] edgeTypes, String[] excludeNodeTypes, Nullable`1<DateTimeOffset> from, Nullable`1<DateTimeOffset> to);
    public SimpleQueryBuilder Skip(int skip);
    public SimpleQueryBuilder Take(int count);
    public SimpleQueryBuilder TakeAll();
    public SimpleQueryBuilder SetPredict(EmitPredictions predictionDetails);
    public SimpleQueryBuilder StartAtTargetQuery();
    private SimpleQueryForUIDsOnly <ToSimpleQueryForUIDsOnly>b__7_0(SimpleQueryForClients sq);
    private SimpleQueryForUIDsOnly <ToSimpleQueryForUIDsOnly>b__8_0(SimpleQueryForClients sq);
}
public class Mosaik.Schema.SimpleQueryForClients : QueryStartingPoint`1<SimpleQueryForClients> {
    [DebuggerBrowsableAttribute]
private EmitPredictions <Predict>k__BackingField;
    [DebuggerBrowsableAttribute]
private QueryOutputFormat <Output>k__BackingField;
    public EmitPredictions Predict { get; public set; }
    public QueryOutputFormat Output { get; public set; }
    public EmitPredictions get_Predict();
    public void set_Predict(EmitPredictions value);
    public QueryOutputFormat get_Output();
    public void set_Output(QueryOutputFormat value);
}
public class Mosaik.Schema.SimpleQueryForUIDsOnly : QueryStartingPoint`1<SimpleQueryForUIDsOnly> {
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <Limit>k__BackingField;
    public Nullable`1<int> Skip { get; public set; }
    public Nullable`1<int> Limit { get; public set; }
    public Nullable`1<int> get_Skip();
    public void set_Skip(Nullable`1<int> value);
    public Nullable`1<int> get_Limit();
    public void set_Limit(Nullable`1<int> value);
}
public class Mosaik.Schema.SimpleSearchResult : object {
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Subtitle>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Excerpt>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Url>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FullSizeUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <PreviewVideo>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <PreviewImage>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <PreviewHtml>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <PreviewHeight>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <RegularSizeUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TrackUrl>k__BackingField;
    public string Title { get; public set; }
    public string Subtitle { get; public set; }
    public string Excerpt { get; public set; }
    public string Url { get; public set; }
    public string FullSizeUrl { get; public set; }
    public string PreviewVideo { get; public set; }
    public string PreviewImage { get; public set; }
    public string PreviewHtml { get; public set; }
    public int PreviewHeight { get; public set; }
    public string RegularSizeUrl { get; public set; }
    public string TrackUrl { get; public set; }
    public string get_Title();
    public void set_Title(string value);
    public string get_Subtitle();
    public void set_Subtitle(string value);
    public string get_Excerpt();
    public void set_Excerpt(string value);
    public string get_Url();
    public void set_Url(string value);
    public string get_FullSizeUrl();
    public void set_FullSizeUrl(string value);
    public string get_PreviewVideo();
    public void set_PreviewVideo(string value);
    public string get_PreviewImage();
    public void set_PreviewImage(string value);
    public string get_PreviewHtml();
    public void set_PreviewHtml(string value);
    public int get_PreviewHeight();
    public void set_PreviewHeight(int value);
    public string get_RegularSizeUrl();
    public void set_RegularSizeUrl(string value);
    public string get_TrackUrl();
    public void set_TrackUrl(string value);
}
public enum Mosaik.Schema.SocketMsgType : Enum {
    public int value__;
    public static SocketMsgType TOAST;
    public static SocketMsgType UPGRADE;
    public static SocketMsgType TASKSTATUS;
    public static SocketMsgType NAVIGATE;
    public static SocketMsgType SPACES_UPDATE;
    public static SocketMsgType UPDATE_INFO;
    public static SocketMsgType METRICS;
    public static SocketMsgType NEED_FULL_DISK_ACCESS;
    public static SocketMsgType NODE_UPDATED;
    public static SocketMsgType CLIPBOARD_CHANGED;
    public static SocketMsgType FOUND_APP;
    public static SocketMsgType RECREATED_FILTERS;
    public static SocketMsgType RECREATED_COMMANDS;
    public static SocketMsgType QUEUED_MISSING_PREVIEWS;
    public static SocketMsgType MIGRATING_INDEXES;
    public static SocketMsgType CUSTOM;
    public static SocketMsgType CHAT_COMPLETION;
    public static SocketMsgType TASK_FINISHED_RUN;
    public static SocketMsgType MAIL_ATTACHMENT;
    public static SocketMsgType CALENDAR_UPDATED;
    public static SocketMsgType QUEUED_FAILED_FILES;
    public static SocketMsgType PREVIEW_READY;
    public static SocketMsgType PREVIEW_STATUS;
    public static SocketMsgType DISMISSABLE_PROGRESS;
    public static SocketMsgType UPDATED_TIPS;
    public static SocketMsgType BACKUP_FINISHED;
    public static SocketMsgType SETAPP_AUTH;
    public static SocketMsgType USER_STORAGE_UPDATE;
    public static SocketMsgType AIMODEL_SELECTED;
}
[EnumAttribute]
public enum Mosaik.Schema.SortModeEnum : Enum {
    public int value__;
    public static SortModeEnum Relevance;
    public static SortModeEnum RecentFirst;
    public static SortModeEnum RecentLast;
    public static SortModeEnum Similarity;
    public static SortModeEnum TargetQueryOrder;
    public static SortModeEnum NoSorting;
    public static SortModeEnum BoostValue;
    public static SortModeEnum Connectivity;
    public static SortModeEnum TargetSortOrder;
}
public class Mosaik.Schema.SourceCustomization : object {
    [DebuggerBrowsableAttribute]
private string <OriginalSourceName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <ImageBlobUID>k__BackingField;
    public string OriginalSourceName { get; public set; }
    public string DisplayName { get; public set; }
    public UID128 ImageBlobUID { get; public set; }
    public string get_OriginalSourceName();
    public void set_OriginalSourceName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public UID128 get_ImageBlobUID();
    public void set_ImageBlobUID(UID128 value);
}
[MessagePackObjectAttribute("True")]
public class Mosaik.Schema.SourceDisplaySetting : object {
    [DebuggerBrowsableAttribute]
private string <SourceName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ImageUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    public string SourceName { get; public set; }
    public string ImageUrl { get; public set; }
    public string DisplayName { get; public set; }
    public SourceDisplaySetting Clone();
    public string get_SourceName();
    public void set_SourceName(string value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
}
public class Mosaik.Schema.SpaceContent : object {
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    public string Type { get; public set; }
    public UID128 UID { get; public set; }
    public string DisplayName { get; public set; }
    public string get_Type();
    public void set_Type(string value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
}
public class Mosaik.Schema.SpacesMetadata : object {
    [DebuggerBrowsableAttribute]
private UserDataConnectorTask[] <DataConnectorTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private UserDefinedSpaceMetadata[] <UserDefinedSpacesTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private SavedSearchSpaceMetadata[] <SavedSearchSpaces>k__BackingField;
    [DebuggerBrowsableAttribute]
private FolderInfo[] <LocalFolderSpacesTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private EmailArchiveSpaceMetadata[] <EmailArchiveSpacesTasks>k__BackingField;
    public UserDataConnectorTask[] DataConnectorTasks { get; public set; }
    public UserDefinedSpaceMetadata[] UserDefinedSpacesTasks { get; public set; }
    public SavedSearchSpaceMetadata[] SavedSearchSpaces { get; public set; }
    public FolderInfo[] LocalFolderSpacesTasks { get; public set; }
    public EmailArchiveSpaceMetadata[] EmailArchiveSpacesTasks { get; public set; }
    public UserDataConnectorTask[] get_DataConnectorTasks();
    public void set_DataConnectorTasks(UserDataConnectorTask[] value);
    public UserDefinedSpaceMetadata[] get_UserDefinedSpacesTasks();
    public void set_UserDefinedSpacesTasks(UserDefinedSpaceMetadata[] value);
    public SavedSearchSpaceMetadata[] get_SavedSearchSpaces();
    public void set_SavedSearchSpaces(SavedSearchSpaceMetadata[] value);
    public FolderInfo[] get_LocalFolderSpacesTasks();
    public void set_LocalFolderSpacesTasks(FolderInfo[] value);
    public EmailArchiveSpaceMetadata[] get_EmailArchiveSpacesTasks();
    public void set_EmailArchiveSpacesTasks(EmailArchiveSpaceMetadata[] value);
}
public class Mosaik.Schema.SpaceUpdate : object {
    private static JsonSerializerSettings _jsonSettings;
    [DebuggerBrowsableAttribute]
private ISpaceMetadata <Content>k__BackingField;
    public ISpaceMetadata Content { get; public set; }
    private static SpaceUpdate();
    public string ToJson();
    public static SpaceUpdate FromJson(string json);
    public ISpaceMetadata get_Content();
    public void set_Content(ISpaceMetadata value);
}
public class Mosaik.Schema.SpotterFromGraphInfo : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FieldName>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IncludeAlias>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreCase>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreNumbers>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MinimumLength>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <Exceptions>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <RefreshIfNodeChanged>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ParallelizeBuild>k__BackingField;
    public string NodeType { get; public set; }
    public string FieldName { get; public set; }
    public LanguageDTO Language { get; public set; }
    public bool IncludeAlias { get; public set; }
    public bool IgnoreCase { get; public set; }
    public bool IgnoreNumbers { get; public set; }
    public int MinimumLength { get; public set; }
    public UID128[] Exceptions { get; public set; }
    public bool RefreshIfNodeChanged { get; public set; }
    public bool ParallelizeBuild { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public bool get_IncludeAlias();
    public void set_IncludeAlias(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_IgnoreNumbers();
    public void set_IgnoreNumbers(bool value);
    public int get_MinimumLength();
    public void set_MinimumLength(int value);
    public UID128[] get_Exceptions();
    public void set_Exceptions(UID128[] value);
    public bool get_RefreshIfNodeChanged();
    public void set_RefreshIfNodeChanged(bool value);
    public bool get_ParallelizeBuild();
    public void set_ParallelizeBuild(bool value);
}
public class Mosaik.Schema.StorageInformation : object {
    [DebuggerBrowsableAttribute]
private int <FilesCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <EmailsCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <ContactsCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <StorageSizeGB>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <FreeSpaceGB>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <StoragePath>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LogsPath>k__BackingField;
    public int FilesCount { get; public set; }
    public int EmailsCount { get; public set; }
    public int ContactsCount { get; public set; }
    public float StorageSizeGB { get; public set; }
    public float FreeSpaceGB { get; public set; }
    public string StoragePath { get; public set; }
    public string LogsPath { get; public set; }
    public int get_FilesCount();
    public void set_FilesCount(int value);
    public int get_EmailsCount();
    public void set_EmailsCount(int value);
    public int get_ContactsCount();
    public void set_ContactsCount(int value);
    public float get_StorageSizeGB();
    public void set_StorageSizeGB(float value);
    public float get_FreeSpaceGB();
    public void set_FreeSpaceGB(float value);
    public string get_StoragePath();
    public void set_StoragePath(string value);
    public string get_LogsPath();
    public void set_LogsPath(string value);
}
[ExtensionAttribute]
public static class Mosaik.Schema.StringBuilderExt : object {
    [ExtensionAttribute]
public static string ToTitleCase(string str);
}
public class Mosaik.Schema.SuggestGraphTopicsOptions : SuggestTopicsOptions {
    [DebuggerBrowsableAttribute]
private String[] <NodeTypesToFollow>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <EdgeTypesToFollow>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <EdgesThreeshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <UseSimilarityForTokens>k__BackingField;
    public String[] NodeTypesToFollow { get; public set; }
    public String[] EdgeTypesToFollow { get; public set; }
    public int EdgesThreeshold { get; public set; }
    public bool UseSimilarityForTokens { get; public set; }
    public String[] get_NodeTypesToFollow();
    public void set_NodeTypesToFollow(String[] value);
    public String[] get_EdgeTypesToFollow();
    public void set_EdgeTypesToFollow(String[] value);
    public int get_EdgesThreeshold();
    public void set_EdgesThreeshold(int value);
    public bool get_UseSimilarityForTokens();
    public void set_UseSimilarityForTokens(bool value);
}
public class Mosaik.Schema.Suggestion : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <JsonContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <ByUsers>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Reasons>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <Timestamp>k__BackingField;
    public UID128 UID { get; public set; }
    public string JsonContent { get; public set; }
    public UID128[] ByUsers { get; public set; }
    public String[] Reasons { get; public set; }
    public Nullable`1<DateTimeOffset> Timestamp { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_JsonContent();
    public void set_JsonContent(string value);
    public UID128[] get_ByUsers();
    public void set_ByUsers(UID128[] value);
    public String[] get_Reasons();
    public void set_Reasons(String[] value);
    public Nullable`1<DateTimeOffset> get_Timestamp();
    public void set_Timestamp(Nullable`1<DateTimeOffset> value);
}
public class Mosaik.Schema.SuggestionData : object {
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Text>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Positive>k__BackingField;
    public string Title { get; public set; }
    public string Text { get; public set; }
    public bool Positive { get; public set; }
    public string get_Title();
    public void set_Title(string value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Positive();
    public void set_Positive(bool value);
}
public class Mosaik.Schema.SuggestionReason : object {
    [DebuggerBrowsableAttribute]
private string <Reason>k__BackingField;
    public string Reason { get; public set; }
    public string get_Reason();
    public void set_Reason(string value);
}
public class Mosaik.Schema.SuggestTopicsOptions : object {
    [DebuggerBrowsableAttribute]
private UID128 <ParentAnalysisOrTopic>k__BackingField;
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FieldName>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <NumberOfTopics>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <WordsSummarySize>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <CutoffValue>k__BackingField;
    public UID128 ParentAnalysisOrTopic { get; public set; }
    public LanguageDTO Language { get; public set; }
    public string NodeType { get; public set; }
    public string FieldName { get; public set; }
    public int NumberOfTopics { get; public set; }
    public int WordsSummarySize { get; public set; }
    public float CutoffValue { get; public set; }
    public UID128 get_ParentAnalysisOrTopic();
    public void set_ParentAnalysisOrTopic(UID128 value);
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public string get_FieldName();
    public void set_FieldName(string value);
    public int get_NumberOfTopics();
    public void set_NumberOfTopics(int value);
    public int get_WordsSummarySize();
    public void set_WordsSummarySize(int value);
    public float get_CutoffValue();
    public void set_CutoffValue(float value);
}
public class Mosaik.Schema.SummaryResults : object {
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, int> <Nodes>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Count>k__BackingField;
    public Dictionary`2<string, int> Nodes { get; }
    public int Count { get; }
    public SummaryResults(Dictionary`2<string, int> nodes, int count);
    public Dictionary`2<string, int> get_Nodes();
    public int get_Count();
}
public enum Mosaik.Schema.SyncFrequency : Enum {
    public int value__;
    public static SyncFrequency _05_Minutes;
    public static SyncFrequency _15_Minutes;
    public static SyncFrequency _30_Minutes;
    public static SyncFrequency _01_Hour;
}
public class Mosaik.Schema.SyncFrequencyBody : object {
    [DebuggerBrowsableAttribute]
private Nullable`1<SyncFrequency> <SyncFrequency>k__BackingField;
    public Nullable`1<SyncFrequency> SyncFrequency { get; public set; }
    public Nullable`1<SyncFrequency> get_SyncFrequency();
    public void set_SyncFrequency(Nullable`1<SyncFrequency> value);
}
public enum Mosaik.Schema.SyncState : Enum {
    public int value__;
    public static SyncState NotSynced;
    public static SyncState Syncing;
    public static SyncState Synced;
}
public class Mosaik.Schema.SynonymsPage : object {
    public int TotalCount;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyArray`1<ValueTuple`2<string, string>> Results;
}
public class Mosaik.Schema.SynonymsResponse : object {
    public int TotalCount;
    public ReadOnlyArray`1<String[]> Results;
}
public class Mosaik.Schema.SynonymsSettingsSerializable : object {
    [DebuggerBrowsableAttribute]
private String[] <Synonyms>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Alternates>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Blocked>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Linked>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, int> <UsersAlternates>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, int> <UsersBlocked>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimilarToken[] <Possible>k__BackingField;
    public String[] Synonyms { get; public set; }
    public String[] Alternates { get; public set; }
    public String[] Blocked { get; public set; }
    public String[] Linked { get; public set; }
    public Dictionary`2<string, int> UsersAlternates { get; public set; }
    public Dictionary`2<string, int> UsersBlocked { get; public set; }
    public SimilarToken[] Possible { get; public set; }
    public String[] get_Synonyms();
    public void set_Synonyms(String[] value);
    public String[] get_Alternates();
    public void set_Alternates(String[] value);
    public String[] get_Blocked();
    public void set_Blocked(String[] value);
    public String[] get_Linked();
    public void set_Linked(String[] value);
    public Dictionary`2<string, int> get_UsersAlternates();
    public void set_UsersAlternates(Dictionary`2<string, int> value);
    public Dictionary`2<string, int> get_UsersBlocked();
    public void set_UsersBlocked(Dictionary`2<string, int> value);
    public SimilarToken[] get_Possible();
    public void set_Possible(SimilarToken[] value);
}
public class Mosaik.Schema.TargetCalendarData : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public string Identifier { get; public set; }
    public UID128 UID { get; public set; }
    public UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public string get_Identifier();
    public void set_Identifier(string value);
    public UID128 get_UID();
    public void set_UID(UID128 value);
}
public class Mosaik.Schema.TemporaryModel : object {
    [DebuggerBrowsableAttribute]
private TemporarySpotterModel <SpotterModel>k__BackingField;
    [DebuggerBrowsableAttribute]
private SerializableMatchingPattern[] <PatternSpotterPatterns>k__BackingField;
    public TemporarySpotterModel SpotterModel { get; public set; }
    public SerializableMatchingPattern[] PatternSpotterPatterns { get; public set; }
    public TemporarySpotterModel get_SpotterModel();
    public void set_SpotterModel(TemporarySpotterModel value);
    public SerializableMatchingPattern[] get_PatternSpotterPatterns();
    public void set_PatternSpotterPatterns(SerializableMatchingPattern[] value);
}
public class Mosaik.Schema.TemporaryModelTestRequest : object {
    [DebuggerBrowsableAttribute]
private LanguageDTO <Language>k__BackingField;
    [DebuggerBrowsableAttribute]
private TemporaryModel <Model>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Data>k__BackingField;
    public LanguageDTO Language { get; public set; }
    public TemporaryModel Model { get; public set; }
    public string Data { get; public set; }
    public LanguageDTO get_Language();
    public void set_Language(LanguageDTO value);
    public TemporaryModel get_Model();
    public void set_Model(TemporaryModel value);
    public string get_Data();
    public void set_Data(string value);
}
public class Mosaik.Schema.TemporarySpotterModel : object {
    [DebuggerBrowsableAttribute]
private String[] <Values>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IgnoreCase>k__BackingField;
    public String[] Values { get; public set; }
    public bool IgnoreCase { get; public set; }
    public String[] get_Values();
    public void set_Values(String[] value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
}
public class Mosaik.Schema.TextAndUID : object {
    public UID128 UID;
    public string Source;
    public string Highlight;
}
public class Mosaik.Schema.TimeDecay : object {
    [DebuggerBrowsableAttribute]
private bool <Enabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Factor>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Offset>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Scale>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <NumberOfHitsToApply>k__BackingField;
    public bool Enabled { get; public set; }
    public float Factor { get; public set; }
    public float Offset { get; public set; }
    public float Scale { get; public set; }
    public int NumberOfHitsToApply { get; public set; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public float get_Factor();
    public void set_Factor(float value);
    public float get_Offset();
    public void set_Offset(float value);
    public float get_Scale();
    public void set_Scale(float value);
    public int get_NumberOfHitsToApply();
    public void set_NumberOfHitsToApply(int value);
}
public class Mosaik.Schema.TimeFacet : object {
    public string From;
    public string To;
    public bool Include;
    public bool ApplyBefore;
}
public class Mosaik.Schema.TimeFacetRequest : object {
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <TargetQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private SimpleQueryForUIDsOnly <ExcludeQuery>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <FromDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <ToDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeQuantizationStrategy <TimeQuantization>k__BackingField;
    public SimpleQueryForUIDsOnly TargetQuery { get; public set; }
    public SimpleQueryForUIDsOnly ExcludeQuery { get; public set; }
    public Nullable`1<DateTimeOffset> FromDate { get; public set; }
    public Nullable`1<DateTimeOffset> ToDate { get; public set; }
    public TimeQuantizationStrategy TimeQuantization { get; public set; }
    public SimpleQueryForUIDsOnly get_TargetQuery();
    public void set_TargetQuery(SimpleQueryForUIDsOnly value);
    public SimpleQueryForUIDsOnly get_ExcludeQuery();
    public void set_ExcludeQuery(SimpleQueryForUIDsOnly value);
    public Nullable`1<DateTimeOffset> get_FromDate();
    public void set_FromDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_ToDate();
    public void set_ToDate(Nullable`1<DateTimeOffset> value);
    public TimeQuantizationStrategy get_TimeQuantization();
    public void set_TimeQuantization(TimeQuantizationStrategy value);
}
public class Mosaik.Schema.TimeFacetResult : object {
    [DebuggerBrowsableAttribute]
private Int32[] <Counts>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset[] <Dates>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<DateTimeOffset, UID128[]> <Results>k__BackingField;
    public Int32[] Counts { get; public set; }
    public DateTimeOffset[] Dates { get; public set; }
    public Dictionary`2<DateTimeOffset, UID128[]> Results { get; public set; }
    public Int32[] get_Counts();
    public void set_Counts(Int32[] value);
    public DateTimeOffset[] get_Dates();
    public void set_Dates(DateTimeOffset[] value);
    public Dictionary`2<DateTimeOffset, UID128[]> get_Results();
    public void set_Results(Dictionary`2<DateTimeOffset, UID128[]> value);
}
public enum Mosaik.Schema.TimeQuantizationStrategy : Enum {
    public int value__;
    public static TimeQuantizationStrategy Minute;
    public static TimeQuantizationStrategy Hour;
    public static TimeQuantizationStrategy Day;
    public static TimeQuantizationStrategy Month;
    public static TimeQuantizationStrategy Year;
    public static TimeQuantizationStrategy Week;
}
public class Mosaik.Schema.TimeZoneInfoData : object {
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <IANATimeZoneIdentifier>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeSpan <UTCOffset>k__BackingField;
    public string DisplayName { get; public set; }
    public string IANATimeZoneIdentifier { get; public set; }
    public TimeSpan UTCOffset { get; public set; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_IANATimeZoneIdentifier();
    public void set_IANATimeZoneIdentifier(string value);
    public TimeSpan get_UTCOffset();
    public void set_UTCOffset(TimeSpan value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.TokensDatum : object {
    public Int32[] Bounds;
    public string Tag;
    public EntityType[] EntityType;
    public int Head;
    public float Frequency;
    public bool ShouldHighlight;
    [DynamicAttribute]
public object Metadata;
}
public class Mosaik.Schema.TokenSummary : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Purpose>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <ValidUntilUtc>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <CreatedBy>k__BackingField;
    public UID128 UID { get; }
    public string Purpose { get; }
    public Nullable`1<DateTimeOffset> ValidUntilUtc { get; }
    public string CreatedBy { get; }
    public TokenSummary(UID128 uid, string purpose, Nullable`1<DateTimeOffset> validUntilUtc, string createdBy);
    public UID128 get_UID();
    public string get_Purpose();
    public Nullable`1<DateTimeOffset> get_ValidUntilUtc();
    public string get_CreatedBy();
}
public class Mosaik.Schema.TrainingHistory : object {
    [DebuggerBrowsableAttribute]
private List`1<TrainingUpdate> <History>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    public List`1<TrainingUpdate> History { get; public set; }
    public TimeSpan ElapsedTime { get; public set; }
    public List`1<TrainingUpdate> get_History();
    public void set_History(List`1<TrainingUpdate> value);
    public TimeSpan get_ElapsedTime();
    public void set_ElapsedTime(TimeSpan value);
    public void Append(TrainingUpdate update);
}
public class Mosaik.Schema.TrainingUpdate : object {
    [DebuggerBrowsableAttribute]
private float <Progress>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Epoch>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <Loss>k__BackingField;
    [DebuggerBrowsableAttribute]
private float <ItemsPerSecond>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    public float Progress { get; public set; }
    public float Epoch { get; public set; }
    public float Loss { get; public set; }
    public float ItemsPerSecond { get; public set; }
    public TimeSpan ElapsedTime { get; public set; }
    public float get_Progress();
    public void set_Progress(float value);
    public float get_Epoch();
    public void set_Epoch(float value);
    public float get_Loss();
    public void set_Loss(float value);
    public float get_ItemsPerSecond();
    public void set_ItemsPerSecond(float value);
    public TimeSpan get_ElapsedTime();
    public void set_ElapsedTime(TimeSpan value);
}
public class Mosaik.Schema.TrendsRequest : object {
    [DebuggerBrowsableAttribute]
private string <NodeType>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128[] <UIDs>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <FromDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <ToDate>k__BackingField;
    [DebuggerBrowsableAttribute]
private TimeQuantizationStrategy <TimeQuantization>k__BackingField;
    public string NodeType { get; public set; }
    public UID128[] UIDs { get; public set; }
    public DateTime FromDate { get; public set; }
    public DateTime ToDate { get; public set; }
    public TimeQuantizationStrategy TimeQuantization { get; public set; }
    public string get_NodeType();
    public void set_NodeType(string value);
    public UID128[] get_UIDs();
    public void set_UIDs(UID128[] value);
    public DateTime get_FromDate();
    public void set_FromDate(DateTime value);
    public DateTime get_ToDate();
    public void set_ToDate(DateTime value);
    public TimeQuantizationStrategy get_TimeQuantization();
    public void set_TimeQuantization(TimeQuantizationStrategy value);
}
public class Mosaik.Schema.TrendsResult : object {
    [DebuggerBrowsableAttribute]
private Int32[] <Counts>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime[] <Dates>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<DateTime, UID128[]> <Results>k__BackingField;
    public Int32[] Counts { get; public set; }
    public DateTime[] Dates { get; public set; }
    public Dictionary`2<DateTime, UID128[]> Results { get; public set; }
    public Int32[] get_Counts();
    public void set_Counts(Int32[] value);
    public DateTime[] get_Dates();
    public void set_Dates(DateTime[] value);
    public Dictionary`2<DateTime, UID128[]> get_Results();
    public void set_Results(Dictionary`2<DateTime, UID128[]> value);
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.UIDResults : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UID128> <UIDs>k__BackingField;
    public ReadOnlyArray`1<UID128> UIDs { get; private set; }
    public int Count { get; }
    public static UIDResults FromResults(ReadOnlyArray`1<UID128> uids);
    public ReadOnlyArray`1<UID128> get_UIDs();
    private void set_UIDs(ReadOnlyArray`1<UID128> value);
    [TemplateAttribute("parseInt({this}.Count, 10)")]
public int get_Count();
}
public class Mosaik.Schema.UnitSizeShared : object {
    [DebuggerBrowsableAttribute]
private float <Size>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Unit>k__BackingField;
    public float Size { get; public set; }
    public string Unit { get; public set; }
    public float get_Size();
    public void set_Size(float value);
    public string get_Unit();
    public void set_Unit(string value);
    public UnitSize ToUnitSize();
}
public class Mosaik.Schema.UnknownEntity : object {
    public string Value;
    public string Language;
    public string EntityType;
    public UID128 UID;
}
public class Mosaik.Schema.UnknownEntityList : object {
    public UnknownEntity[] UnknownEntities;
    public string Count;
}
public class Mosaik.Schema.UpdateInformation : object {
    [DebuggerBrowsableAttribute]
private float <Progress>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Message>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsAvailable>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsFinished>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Version>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsManualCheck>k__BackingField;
    public float Progress { get; public set; }
    public string Message { get; public set; }
    public bool IsAvailable { get; public set; }
    public bool IsFinished { get; public set; }
    public string Version { get; public set; }
    public bool IsManualCheck { get; public set; }
    public float get_Progress();
    public void set_Progress(float value);
    public string get_Message();
    public void set_Message(string value);
    public bool get_IsAvailable();
    public void set_IsAvailable(bool value);
    public bool get_IsFinished();
    public void set_IsFinished(bool value);
    public string get_Version();
    public void set_Version(string value);
    public bool get_IsManualCheck();
    public void set_IsManualCheck(bool value);
}
public enum Mosaik.Schema.UserAccess : Enum {
    public int value__;
    public static UserAccess Editor;
    public static UserAccess Viewer;
    public static UserAccess PublicViwer;
}
[ObjectLiteralAttribute]
public class Mosaik.Schema.UserAndToken : object {
    public UID128 UID;
    public string ConfirmationKey;
    public string ConfirmationToken;
}
public class Mosaik.Schema.UserData : object {
    [DebuggerBrowsableAttribute]
private string <UserName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FirstName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Email>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <Roles>k__BackingField;
    public string UserName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string Email { get; public set; }
    public String[] Roles { get; public set; }
    public string get_UserName();
    public void set_UserName(string value);
    public string get_FirstName();
    public void set_FirstName(string value);
    public string get_LastName();
    public void set_LastName(string value);
    public string get_Email();
    public void set_Email(string value);
    public String[] get_Roles();
    public void set_Roles(String[] value);
}
public class Mosaik.Schema.UserDataConnectorTask : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TaskTypeName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsCuriosityAuth>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <RootFolderUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private String[] <MimeTypes>k__BackingField;
    [DebuggerBrowsableAttribute]
private FolderInfo[] <Folders>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<SyncFrequency> <SyncFrequency>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastStartTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTimeOffset> <LastFinishTime>k__BackingField;
    [DebuggerBrowsableAttribute]
private SettingsHolder <Settings>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <NoSpace>k__BackingField;
    [DebuggerBrowsableAttribute]
private AuthState <AuthState>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskHash>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public string TaskTypeName { get; public set; }
    public string DisplayName { get; public set; }
    public string Icon { get; }
    public string Image { get; public set; }
    public bool IsCuriosityAuth { get; public set; }
    public UID128 RootFolderUID { get; public set; }
    public String[] MimeTypes { get; public set; }
    public FolderInfo[] Folders { get; public set; }
    public Nullable`1<SyncFrequency> SyncFrequency { get; public set; }
    public Nullable`1<DateTimeOffset> LastStartTime { get; public set; }
    public Nullable`1<DateTimeOffset> LastFinishTime { get; public set; }
    public SettingsHolder Settings { get; public set; }
    public bool NoSpace { get; public set; }
    public AuthState AuthState { get; public set; }
    public UID128 TaskHash { get; public set; }
    public sealed virtual UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public string get_TaskTypeName();
    public void set_TaskTypeName(string value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Icon();
    public sealed virtual string get_Image();
    public void set_Image(string value);
    public bool get_IsCuriosityAuth();
    public void set_IsCuriosityAuth(bool value);
    public UID128 get_RootFolderUID();
    public void set_RootFolderUID(UID128 value);
    public String[] get_MimeTypes();
    public void set_MimeTypes(String[] value);
    public FolderInfo[] get_Folders();
    public void set_Folders(FolderInfo[] value);
    public Nullable`1<SyncFrequency> get_SyncFrequency();
    public void set_SyncFrequency(Nullable`1<SyncFrequency> value);
    public Nullable`1<DateTimeOffset> get_LastStartTime();
    public void set_LastStartTime(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastFinishTime();
    public void set_LastFinishTime(Nullable`1<DateTimeOffset> value);
    public SettingsHolder get_Settings();
    public void set_Settings(SettingsHolder value);
    public bool get_NoSpace();
    public void set_NoSpace(bool value);
    public AuthState get_AuthState();
    public void set_AuthState(AuthState value);
    public sealed virtual UID128 get_TaskHash();
    public void set_TaskHash(UID128 value);
    public static Nullable`1<ScheduledTaskType> MaybeGetTaskType(string taskTypeName);
    public static bool TryGetTaskType(string taskTypeName, ScheduledTaskType& taskType);
    public bool CanSendEmail();
    public bool IsTaskWithAutoMarkAsRead();
}
public class Mosaik.Schema.UserDataUpdate : object {
    [DebuggerBrowsableAttribute]
private string <Key>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute("K")]
public string Key { get; public set; }
    [JsonPropertyAttribute("V")]
public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Mosaik.Schema.UserDefinedSpaceMetadata : object {
    [DebuggerBrowsableAttribute]
private UID128 <TaskUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DisplayName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <TaskHash>k__BackingField;
    [DebuggerBrowsableAttribute]
private UserAccess <Access>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsSharedSpace>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsPinnedToSidebar>k__BackingField;
    public UID128 TaskUID { get; public set; }
    public string DisplayName { get; public set; }
    public string Icon { get; public set; }
    public string Image { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<UIcons> IconOrEmoji { get; }
    unknown UIcons UIcon {public set; }
    unknown Emoji Emoji {public set; }
    public UID128 TaskHash { get; public set; }
    public UserAccess Access { get; public set; }
    public bool IsSharedSpace { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public bool IsPinnedToSidebar { get; public set; }
    public sealed virtual UID128 get_TaskUID();
    public void set_TaskUID(UID128 value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Icon();
    public void set_Icon(string value);
    public sealed virtual string get_Image();
    public void set_Image(string value);
    public string get_Description();
    public void set_Description(string value);
    public Nullable`1<UIcons> get_IconOrEmoji();
    public void set_UIcon(UIcons value);
    public void set_Emoji(Emoji value);
    public sealed virtual UID128 get_TaskHash();
    public void set_TaskHash(UID128 value);
    public UserAccess get_Access();
    public void set_Access(UserAccess value);
    public bool get_IsSharedSpace();
    public void set_IsSharedSpace(bool value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public bool get_IsPinnedToSidebar();
    public void set_IsPinnedToSidebar(bool value);
}
public class Mosaik.Schema.UserPreferencesShared : object {
    [DebuggerBrowsableAttribute]
private bool <AutoMarkEmailAsRead>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <FirstDayOfWeek>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTimeOffset <LastSeenChangelog>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferOfficeDesktopApps>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferNotionDesktopApp>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferEvernoteDesktopApp>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PreferQuickLook>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ShowEmptyContactsAndOrganizations>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ThemeName>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScaleFactor <ScaleFactor>k__BackingField;
    [DebuggerBrowsableAttribute]
private RecentHomeViewElement[] <RecentHomeViewPreferences>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ReminderNotificationsEnabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, SourceDisplaySetting> <SourceDisplaySettings>k__BackingField;
    [DebuggerBrowsableAttribute]
private SidebarMode <SidebarMode>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, String[]> <SidebarOrder>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <DefaultAIAssistantTemplate>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <DefaultAIAssistantChatProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<bool> <DisableAISearch>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<bool> <DisableFuzzySearch>k__BackingField;
    public bool AutoMarkEmailAsRead { get; public set; }
    public int FirstDayOfWeek { get; public set; }
    public DateTimeOffset LastSeenChangelog { get; public set; }
    public bool PreferOfficeDesktopApps { get; public set; }
    public bool PreferNotionDesktopApp { get; public set; }
    public bool PreferEvernoteDesktopApp { get; public set; }
    public bool PreferQuickLook { get; public set; }
    public bool ShowEmptyContactsAndOrganizations { get; public set; }
    public string ThemeName { get; public set; }
    public ScaleFactor ScaleFactor { get; public set; }
    public RecentHomeViewElement[] RecentHomeViewPreferences { get; public set; }
    public bool ReminderNotificationsEnabled { get; public set; }
    public Dictionary`2<string, SourceDisplaySetting> SourceDisplaySettings { get; public set; }
    public SidebarMode SidebarMode { get; public set; }
    public Dictionary`2<string, String[]> SidebarOrder { get; public set; }
    public UID128 DefaultAIAssistantTemplate { get; public set; }
    public UID128 DefaultAIAssistantChatProvider { get; public set; }
    public Nullable`1<bool> DisableAISearch { get; public set; }
    public Nullable`1<bool> DisableFuzzySearch { get; public set; }
    public bool get_AutoMarkEmailAsRead();
    public void set_AutoMarkEmailAsRead(bool value);
    public int get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(int value);
    public DateTimeOffset get_LastSeenChangelog();
    public void set_LastSeenChangelog(DateTimeOffset value);
    public bool get_PreferOfficeDesktopApps();
    public void set_PreferOfficeDesktopApps(bool value);
    public bool get_PreferNotionDesktopApp();
    public void set_PreferNotionDesktopApp(bool value);
    public bool get_PreferEvernoteDesktopApp();
    public void set_PreferEvernoteDesktopApp(bool value);
    public bool get_PreferQuickLook();
    public void set_PreferQuickLook(bool value);
    public bool get_ShowEmptyContactsAndOrganizations();
    public void set_ShowEmptyContactsAndOrganizations(bool value);
    public string get_ThemeName();
    public void set_ThemeName(string value);
    public ScaleFactor get_ScaleFactor();
    public void set_ScaleFactor(ScaleFactor value);
    public RecentHomeViewElement[] get_RecentHomeViewPreferences();
    public void set_RecentHomeViewPreferences(RecentHomeViewElement[] value);
    public bool get_ReminderNotificationsEnabled();
    public void set_ReminderNotificationsEnabled(bool value);
    public Dictionary`2<string, SourceDisplaySetting> get_SourceDisplaySettings();
    public void set_SourceDisplaySettings(Dictionary`2<string, SourceDisplaySetting> value);
    public SidebarMode get_SidebarMode();
    public void set_SidebarMode(SidebarMode value);
    public Dictionary`2<string, String[]> get_SidebarOrder();
    public void set_SidebarOrder(Dictionary`2<string, String[]> value);
    public UID128 get_DefaultAIAssistantTemplate();
    public void set_DefaultAIAssistantTemplate(UID128 value);
    public UID128 get_DefaultAIAssistantChatProvider();
    public void set_DefaultAIAssistantChatProvider(UID128 value);
    public Nullable`1<bool> get_DisableAISearch();
    public void set_DisableAISearch(Nullable`1<bool> value);
    public Nullable`1<bool> get_DisableFuzzySearch();
    public void set_DisableFuzzySearch(Nullable`1<bool> value);
}
public class Mosaik.Schema.UserResult : object {
    [DebuggerBrowsableAttribute]
private UID128 <UID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Timestamp>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <UserName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FirstName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <LastName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <FullName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Email>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <SystemAdmin>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Active>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Confirmed>k__BackingField;
    [DebuggerBrowsableAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<string> <Roles>k__BackingField;
    public UID128 UID { get; public set; }
    public string Type { get; public set; }
    public string Timestamp { get; public set; }
    public string UserName { get; public set; }
    public string FirstName { get; public set; }
    public string LastName { get; public set; }
    public string FullName { get; public set; }
    public string Email { get; public set; }
    public bool SystemAdmin { get; public set; }
    public bool Active { get; public set; }
    public bool Confirmed { get; public set; }
    public Dictionary`2<string, string> Metadata { get; public set; }
    public ReadOnlyArray`1<string> Roles { get; public set; }
    public UID128 get_UID();
    public void set_UID(UID128 value);
    public string get_Type();
    public void set_Type(string value);
    public string get_Timestamp();
    public void set_Timestamp(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_FirstName();
    public void set_FirstName(string value);
    public string get_LastName();
    public void set_LastName(string value);
    public string get_FullName();
    public void set_FullName(string value);
    public string get_Email();
    public void set_Email(string value);
    public bool get_SystemAdmin();
    public void set_SystemAdmin(bool value);
    public bool get_Active();
    public void set_Active(bool value);
    public bool get_Confirmed();
    public void set_Confirmed(bool value);
    public Dictionary`2<string, string> get_Metadata();
    public void set_Metadata(Dictionary`2<string, string> value);
    public ReadOnlyArray`1<string> get_Roles();
    public void set_Roles(ReadOnlyArray`1<string> value);
}
public enum Mosaik.Schema.UserRole : Enum {
    public int value__;
    public static UserRole SystemAdmin;
    public static UserRole CanManageUsers;
    public static UserRole CanManageNotifications;
    public static UserRole CanManageSuggestions;
    public static UserRole CanManageSynonyms;
    public static UserRole CanRunQueries;
    public static UserRole CanManageModelsAndPipelines;
    public static UserRole CanCreateTrainings;
    public static UserRole CanPublishTrainings;
    public static UserRole CanManageAbbreviations;
    public static UserRole ReadOnlySystemAdmin;
    public static UserRole GuestUser;
    public static UserRole DesktopAppUser;
    public static UserRole CanCreatePublicSpaces;
}
public class Mosaik.Schema.UsersResult : object {
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UserResult> <Users>k__BackingField;
    [DebuggerBrowsableAttribute]
private ReadOnlyArray`1<UserResult> <Admins>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Count>k__BackingField;
    public ReadOnlyArray`1<UserResult> Users { get; public set; }
    public ReadOnlyArray`1<UserResult> Admins { get; public set; }
    public int Count { get; public set; }
    public ReadOnlyArray`1<UserResult> get_Users();
    public void set_Users(ReadOnlyArray`1<UserResult> value);
    public ReadOnlyArray`1<UserResult> get_Admins();
    public void set_Admins(ReadOnlyArray`1<UserResult> value);
    public int get_Count();
    public void set_Count(int value);
}
public enum Mosaik.Schema.UserTips : Enum {
    public int value__;
    public static UserTips Workspace_1;
    public static UserTips Workspace_2;
    public static UserTips Workspace_3;
    public static UserTips Workspace_4;
    public static UserTips Workspace_5;
    public static UserTips Workspace_6;
    public static UserTips Workspace_7;
    public static UserTips Workspace_8;
    public static UserTips Workspace_9;
    public static UserTips Workspace_10;
    public static UserTips Workspace_11;
    public static UserTips Workspace_12;
    public static UserTips Workspace_13;
    public static UserTips Workspace_14;
    public static UserTips Workspace_15;
    public static UserTips Workspace_16;
    public static UserTips Workspace_17;
    public static UserTips Workspace_18;
    public static UserTips Workspace_19;
    public static UserTips Workspace_20;
    public static UserTips Workspace_21;
    public static UserTips Workspace_22;
    public static UserTips Workspace_23;
    public static UserTips Workspace_24;
    public static UserTips Workspace_25;
    public static UserTips Workspace_26;
    public static UserTips Workspace_27;
    public static UserTips Workspace_28;
    public static UserTips Workspace_29;
    public static UserTips Workspace_30;
    public static UserTips Workspace_31;
    public static UserTips Workspace_32;
    public static UserTips Workspace_33;
    public static UserTips Workspace_34;
    public static UserTips Workspace_35;
    public static UserTips Workspace_36;
    public static UserTips Workspace_37;
    public static UserTips Workspace_38;
    public static UserTips Workspace_39;
    public static UserTips Workspace_40;
    public static UserTips Workspace_41;
    public static UserTips Workspace_42;
    public static UserTips Workspace_43;
    public static UserTips Workspace_44;
    public static UserTips Workspace_45;
    public static UserTips Workspace_46;
    public static UserTips Workspace_47;
    public static UserTips Workspace_48;
    public static UserTips Workspace_49;
    public static UserTips Workspace_50;
    public static UserTips Workspace_51;
    public static UserTips Workspace_52;
    public static UserTips Workspace_53;
    public static UserTips Workspace_54;
    public static UserTips Workspace_55;
    public static UserTips Workspace_56;
    public static UserTips Workspace_57;
    public static UserTips Workspace_58;
    public static UserTips Workspace_59;
    public static UserTips Workspace_60;
    public static UserTips Workspace_61;
    public static UserTips Workspace_62;
    public static UserTips Workspace_63;
    public static UserTips Workspace_64;
    public static UserTips Workspace_65;
    public static UserTips Workspace_66;
    public static UserTips Workspace_67;
    public static UserTips Workspace_68;
    public static UserTips Workspace_69;
    public static UserTips Workspace_70;
    public static UserTips Workspace_71;
    public static UserTips Workspace_72;
    public static UserTips Workspace_73;
    public static UserTips Workspace_74;
    public static UserTips Workspace_75;
    public static UserTips Workspace_76;
    public static UserTips Workspace_77;
    public static UserTips Workspace_78;
    public static UserTips Workspace_79;
    public static UserTips Workspace_80;
    public static UserTips Workspace_81;
    public static UserTips Workspace_82;
    public static UserTips Workspace_83;
    public static UserTips Workspace_84;
    public static UserTips Workspace_85;
    public static UserTips Workspace_86;
    public static UserTips Workspace_87;
    public static UserTips Workspace_88;
    public static UserTips Workspace_89;
    public static UserTips Workspace_90;
    public static UserTips Workspace_91;
    public static UserTips Workspace_92;
    public static UserTips Workspace_93;
    public static UserTips Workspace_94;
    public static UserTips Workspace_95;
    public static UserTips Workspace_96;
    public static UserTips Workspace_97;
    public static UserTips Workspace_98;
    public static UserTips Workspace_99;
    public static UserTips Workspace_100;
    public static UserTips Sidebar_ConnectMoreApps;
    public static UserTips Sidebar_ConnectMoreApps2;
    public static UserTips Sidebar_Notes;
    public static UserTips Sidebar_AddLocalFiles;
    public static UserTips Sidebar_Contacts;
    public static UserTips Sidebar_Preferences;
    public static UserTips Sidebar_Help;
    public static UserTips Sidebar_Changelog;
    public static UserTips Sidebar_Navigation;
    public static UserTips Sidebar_OpenClose;
    public static UserTips Sidebar_Spaces;
    public static UserTips ConnectedFirstTime_Mail;
    public static UserTips ConnectedFirstTime_Calendar;
    public static UserTips ConnectedFirstTime_Computer;
    public static UserTips ConnectedFirstTime_Clipboard;
    public static UserTips ConnectedFirstTime_OtherApps;
    public static UserTips ConnectedFirstTime_Feeds;
    public static UserTips ConnectedFirstTime_AiAssistant;
    public static UserTips HomeViewConfig;
    public static UserTips DragResultsToSpaces;
    public static UserTips Keyboard_QuickNavigation;
    public static UserTips Keyboard_NewEmail;
    public static UserTips Inbox_NewEmail;
    public static UserTips Inbox_Sync;
    public static UserTips Inbox_OnlyAttachments;
    public static UserTips Search_Filters;
    public static UserTips Search_Ranking;
    public static UserTips Search_RightClickForMenu;
    public static UserTips Search_SelectResult;
    public static UserTips Search_ConfigureFilters;
    public static UserTips Calendar_FilterCalendars;
    public static UserTips Calendar_Sync;
    public static UserTips Calendar_Configure;
    public static UserTips Calendar_NewEvent;
    public static UserTips Calendar_ChangeViews;
    public static UserTips Calendar_EditEvent;
    public static UserTips Contacts_ViewAllOrgs;
    public static UserTips Contacts_ViewAllContacts;
    public static UserTips Computer_Sync;
    public static UserTips Computer_AddFolders;
    public static UserTips Computer_OpenFolder;
    public static UserTips EmailComposer_ShowCcBcc;
    public static UserTips EmailComposer_DraftWithAI;
    public static UserTips EmailComposer_AddAttachments;
    public static UserTips Preferences_ChangeThemes;
    public static UserTips Preferences_EnableAI_Assistant;
    public static UserTips Preferences_EnableAI_Search;
    public static UserTips Preferences_ConfigureScheduling;
    public static UserTips Preferences_ConfigureSchedulingGrid;
    public static UserTips Preferences_ConfigureSchedulingLegendPaused;
    public static UserTips Preferences_ConfigureSchedulingLegendBalanced;
    public static UserTips Preferences_ConfigureSchedulingLegendPerformance;
    public static UserTips Preferences_ConfigureSchedulingPauseOnBattery;
    public static UserTips NodePreview_BackButton;
}
public class Mosaik.Schema.ValueFacet : object {
    public string Value;
    public bool InvertedBehaviour;
    public bool KeepOtherTypes;
    public bool ApplyBefore;
}
public enum Mosaik.Schema.VectorSearchMode : Enum {
    public int value__;
    public static VectorSearchMode Enabled;
    public static VectorSearchMode Disabled;
    public static VectorSearchMode Only;
}
public class Mosaik.Schema.WebsiteChangelog : object {
    [DebuggerBrowsableAttribute]
private WebsiteChangelogEntry[] <Present>k__BackingField;
    [DebuggerBrowsableAttribute]
private WebsiteChangelogEntry[] <Future>k__BackingField;
    public WebsiteChangelogEntry[] Present { get; public set; }
    public WebsiteChangelogEntry[] Future { get; public set; }
    public WebsiteChangelogEntry[] get_Present();
    public void set_Present(WebsiteChangelogEntry[] value);
    public WebsiteChangelogEntry[] get_Future();
    public void set_Future(WebsiteChangelogEntry[] value);
}
public class Mosaik.Schema.WebsiteChangelogEntry : object {
    [DebuggerBrowsableAttribute]
private Nullable`1<DateTime> <Date>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Body>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Link>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Image>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Tag>k__BackingField;
    public Nullable`1<DateTime> Date { get; public set; }
    public string Title { get; public set; }
    public string Body { get; public set; }
    public string Link { get; public set; }
    public string Image { get; public set; }
    public string Tag { get; public set; }
    public Nullable`1<DateTime> get_Date();
    public void set_Date(Nullable`1<DateTime> value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Body();
    public void set_Body(string value);
    public string get_Link();
    public void set_Link(string value);
    public string get_Image();
    public void set_Image(string value);
    public string get_Tag();
    public void set_Tag(string value);
}
public enum Mosaik.Schema.WhisperModelType : Enum {
    public int value__;
    public static WhisperModelType Disabled;
    public static WhisperModelType TinyMultilingual;
    public static WhisperModelType BaseMultilingual;
    public static WhisperModelType SmallMultilingual;
    public static WhisperModelType MediumMultilingual;
    public static WhisperModelType LargeMultilingual;
    public static WhisperModelType TinyEnglishOnly;
    public static WhisperModelType BaseEnglishOnly;
    public static WhisperModelType SmallEnglishOnly;
    public static WhisperModelType MediumEnglishOnly;
}
public static class Mosaik.SchemaManager : object {
    private static SchemasResponse _allSchemas;
    private static ReadOnlyArray`1<SchemaStyleInfo> _nodeStyles;
    [DebuggerBrowsableAttribute]
private static Dictionary`2<string, SchemaDefinition> <Nodes>k__BackingField;
    [DebuggerBrowsableAttribute]
private static Dictionary`2<string, SchemaDefinition> <Edges>k__BackingField;
    [DebuggerBrowsableAttribute]
private static Dictionary`2<string, NodeRendererDefinition> <CustomNodeRenderers>k__BackingField;
    [DebuggerBrowsableAttribute]
private static Dictionary`2<string, NodeRendererDefinition> <OverrideCustomNodeRenderers>k__BackingField;
    public static String[] allowedTypes;
    public static String[] allowedSchemaTypes;
    public static Dictionary`2<string, SchemaDefinition> Nodes { get; private set; }
    public static Dictionary`2<string, SchemaDefinition> Edges { get; private set; }
    public static Dictionary`2<string, NodeRendererDefinition> CustomNodeRenderers { get; private set; }
    public static Dictionary`2<string, NodeRendererDefinition> OverrideCustomNodeRenderers { get; private set; }
    private static SchemaManager();
    public static Dictionary`2<string, SchemaDefinition> get_Nodes();
    private static void set_Nodes(Dictionary`2<string, SchemaDefinition> value);
    public static Dictionary`2<string, SchemaDefinition> get_Edges();
    private static void set_Edges(Dictionary`2<string, SchemaDefinition> value);
    public static Dictionary`2<string, NodeRendererDefinition> get_CustomNodeRenderers();
    private static void set_CustomNodeRenderers(Dictionary`2<string, NodeRendererDefinition> value);
    public static Dictionary`2<string, NodeRendererDefinition> get_OverrideCustomNodeRenderers();
    private static void set_OverrideCustomNodeRenderers(Dictionary`2<string, NodeRendererDefinition> value);
    public static Task RefreshSchemasAsync();
    [DebuggerStepThroughAttribute]
public static Task`1<SchemasResponse> GetAllSchemasAsync(bool force);
    public static void OverrideCustomRenderer(string nodeType, NodeRendererDefinition nodeRendererDefinition);
    private static void ApplyOverrides();
    private static IEnumerable`1<SchemaDefinition> GetInternalEdgeSchemas();
    private static IEnumerable`1<SchemaDefinition> GetInternalNodeSchemas();
    [DebuggerStepThroughAttribute]
private static Task`1<ReadOnlyArray`1<SchemaStyleInfo>> GetNodeStylesAsync(bool force);
    [DebuggerStepThroughAttribute]
private static Task`1<Dictionary`2<string, NodeRendererDefinition>> GetCustomRenderers(bool force);
    public static bool TryGetNodeStyle(string name, SchemaStyleInfo& styleInfo);
    [DebuggerStepThroughAttribute]
public static Task SetNodeStylesAsync(SchemaStyleInfo style);
    public static bool TryGetNodeSchema(string nodeType, SchemaDefinition& schema);
    public static ReadOnlyArray`1<ValueTuple`2<string, string>> GetNodeTypesAndStringFields(bool allowInternalNodeTypes, bool allowArrays);
    public static ReadOnlyArray`1<ValueTuple`2<string, string>> GetNodeTypesAndFieldsOfType(String[] fieldTypes);
    public static ReadOnlyArray`1<ValueTuple`2<string, string>> GetNodeTypesAndFieldsOfType(bool allowInternalNodeTypes, bool allowArrays, String[] fieldTypes);
    public static ReadOnlyArray`1<string> GetStringFields(string nodeType);
    public static ReadOnlyArray`1<string> GetFieldsOfType(string nodeType, String[] fieldTypes);
}
public class Mosaik.Server.Controllers.FeaturesRequest : object {
    [DebuggerBrowsableAttribute]
private string <LicenseOwnerID>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitMemoryGBit>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitCores>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <TrialLicense>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitDocuments>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitUsers>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitDataSources>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitDays>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <OnlineLicenseProvider>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <OnlineLicenseMetadata>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DeploymentUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <SSO>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Auditing>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Topics>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <CustomFrontEnd>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Branding>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <CustomAPI>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Similarity>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Classification>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ExternalEmbeddings>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <FileContentExtraction>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <OCR>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <STT>k__BackingField;
    [DebuggerBrowsableAttribute]
private ScheduledTaskType[] <AvailableTasks>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <Backup>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <CustomDomain>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <LimitStorage>k__BackingField;
    public string LicenseOwnerID { get; public set; }
    public int LimitMemoryGBit { get; public set; }
    public int LimitCores { get; public set; }
    public bool TrialLicense { get; public set; }
    public int LimitDocuments { get; public set; }
    public int LimitUsers { get; public set; }
    public int LimitDataSources { get; public set; }
    public int LimitDays { get; public set; }
    public string OnlineLicenseProvider { get; public set; }
    public string OnlineLicenseMetadata { get; public set; }
    public string DeploymentUID { get; public set; }
    public string SSO { get; public set; }
    public bool Auditing { get; public set; }
    [ObsoleteAttribute]
public bool Topics { get; public set; }
    public bool CustomFrontEnd { get; public set; }
    public bool Branding { get; public set; }
    public bool CustomAPI { get; public set; }
    public bool Similarity { get; public set; }
    public bool Classification { get; public set; }
    public bool ExternalEmbeddings { get; public set; }
    public bool FileContentExtraction { get; public set; }
    public bool OCR { get; public set; }
    public bool STT { get; public set; }
    public ScheduledTaskType[] AvailableTasks { get; public set; }
    public bool Backup { get; public set; }
    public bool CustomDomain { get; public set; }
    public int LimitStorage { get; public set; }
    public string get_LicenseOwnerID();
    public void set_LicenseOwnerID(string value);
    public int get_LimitMemoryGBit();
    public void set_LimitMemoryGBit(int value);
    public int get_LimitCores();
    public void set_LimitCores(int value);
    public bool get_TrialLicense();
    public void set_TrialLicense(bool value);
    public int get_LimitDocuments();
    public void set_LimitDocuments(int value);
    public int get_LimitUsers();
    public void set_LimitUsers(int value);
    public int get_LimitDataSources();
    public void set_LimitDataSources(int value);
    public int get_LimitDays();
    public void set_LimitDays(int value);
    public string get_OnlineLicenseProvider();
    public void set_OnlineLicenseProvider(string value);
    public string get_OnlineLicenseMetadata();
    public void set_OnlineLicenseMetadata(string value);
    public string get_DeploymentUID();
    public void set_DeploymentUID(string value);
    public string get_SSO();
    public void set_SSO(string value);
    public bool get_Auditing();
    public void set_Auditing(bool value);
    public bool get_Topics();
    public void set_Topics(bool value);
    public bool get_CustomFrontEnd();
    public void set_CustomFrontEnd(bool value);
    public bool get_Branding();
    public void set_Branding(bool value);
    public bool get_CustomAPI();
    public void set_CustomAPI(bool value);
    public bool get_Similarity();
    public void set_Similarity(bool value);
    public bool get_Classification();
    public void set_Classification(bool value);
    public bool get_ExternalEmbeddings();
    public void set_ExternalEmbeddings(bool value);
    public bool get_FileContentExtraction();
    public void set_FileContentExtraction(bool value);
    public bool get_OCR();
    public void set_OCR(bool value);
    public bool get_STT();
    public void set_STT(bool value);
    public ScheduledTaskType[] get_AvailableTasks();
    public void set_AvailableTasks(ScheduledTaskType[] value);
    public bool get_Backup();
    public void set_Backup(bool value);
    public bool get_CustomDomain();
    public void set_CustomDomain(bool value);
    public int get_LimitStorage();
    public void set_LimitStorage(int value);
    internal bool SameAs(FeaturesRequest other);
}
public class Mosaik.Server.Controllers.SubscriptionPlan : object {
    [DebuggerBrowsableAttribute]
private string <Id>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Name>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <InvoiceName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Description>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <Price>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <Period>k__BackingField;
    [DebuggerBrowsableAttribute]
private PeriodEnum <PeriodUnit>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <TrialPeriod>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<PeriodEnum> <TrialPeriodUnit>k__BackingField;
    [DebuggerBrowsableAttribute]
private PricingModelEnum <PricingModel>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <SetupCost>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <CurrencyCode>k__BackingField;
    [DebuggerBrowsableAttribute]
private FeaturesRequest <Features>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MinimumUnits>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <MaximumUnits>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <UnitsStep>k__BackingField;
    [DebuggerBrowsableAttribute]
private Tier[] <Tiers>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public string InvoiceName { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<int> Price { get; public set; }
    public int Period { get; public set; }
    public PeriodEnum PeriodUnit { get; public set; }
    public Nullable`1<int> TrialPeriod { get; public set; }
    public Nullable`1<PeriodEnum> TrialPeriodUnit { get; public set; }
    public PricingModelEnum PricingModel { get; public set; }
    public Nullable`1<int> SetupCost { get; public set; }
    public string CurrencyCode { get; public set; }
    public FeaturesRequest Features { get; public set; }
    public int MinimumUnits { get; public set; }
    public int MaximumUnits { get; public set; }
    public int UnitsStep { get; public set; }
    public Tier[] Tiers { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_InvoiceName();
    public void set_InvoiceName(string value);
    public string get_Description();
    public void set_Description(string value);
    public Nullable`1<int> get_Price();
    public void set_Price(Nullable`1<int> value);
    public int get_Period();
    public void set_Period(int value);
    public PeriodEnum get_PeriodUnit();
    public void set_PeriodUnit(PeriodEnum value);
    public Nullable`1<int> get_TrialPeriod();
    public void set_TrialPeriod(Nullable`1<int> value);
    public Nullable`1<PeriodEnum> get_TrialPeriodUnit();
    public void set_TrialPeriodUnit(Nullable`1<PeriodEnum> value);
    public PricingModelEnum get_PricingModel();
    public void set_PricingModel(PricingModelEnum value);
    public Nullable`1<int> get_SetupCost();
    public void set_SetupCost(Nullable`1<int> value);
    public string get_CurrencyCode();
    public void set_CurrencyCode(string value);
    public FeaturesRequest get_Features();
    public void set_Features(FeaturesRequest value);
    public int get_MinimumUnits();
    public void set_MinimumUnits(int value);
    public int get_MaximumUnits();
    public void set_MaximumUnits(int value);
    public int get_UnitsStep();
    public void set_UnitsStep(int value);
    public Tier[] get_Tiers();
    public void set_Tiers(Tier[] value);
}
public class Mosaik.Settings.SearchRequestFilter : object {
    public string Name;
    public string Icon;
    public string Color;
    public string Placeholder;
    public Func`2<SearchRequest, bool> Action;
    public SearchRequestFilter(string name, string icon, string color, string placeholder, Func`2<SearchRequest, bool> action);
}
public enum Mosaik.Shared.AuditType : Enum {
    public int value__;
    public static AuditType Node;
    public static AuditType Search;
    public static AuditType Access;
    public static AuditType Viewed;
    public static AuditType Download;
    public static AuditType Changed;
    public static AuditType Deleted;
    public static AuditType RunShellCode;
    public static AuditType ChangedScheduledTask;
    public static AuditType CreatedSchema;
    public static AuditType DeletedSchema;
    public static AuditType ChangedSchema;
    public static AuditType ChangedSettings;
    public static AuditType Login;
    public static AuditType Code;
    public static AuditType Query;
    public static AuditType NewToken;
    public static AuditType ChatAI;
}
public class Mosaik.Shared.CommentsFeed : object {
    [DebuggerBrowsableAttribute]
private IEnumerable`1<CommentDetails> <Comments>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <MoreCommentsAvailable>k__BackingField;
    public IEnumerable`1<CommentDetails> Comments { get; }
    public bool MoreCommentsAvailable { get; }
    public CommentsFeed(IEnumerable`1<CommentDetails> comments, bool moreCommentsAvailable);
    public IEnumerable`1<CommentDetails> get_Comments();
    public bool get_MoreCommentsAvailable();
}
public enum Mosaik.Shared.CommentType : Enum {
    public int value__;
    public static CommentType Comment;
    public static CommentType Obsoleted;
    public static CommentType RemovedObsolete;
}
public class Mosaik.Shared.DocsQuotaReachedNotification : object {
}
public interface Mosaik.Shared.IJsonComment {
}
public interface Mosaik.Shared.IJsonNotification {
}
public class Mosaik.Shared.JsonComment : object {
    [DebuggerBrowsableAttribute]
private IJsonComment <Content>k__BackingField;
    private static JsonSerializerSettings _jsonSettings;
    public IJsonComment Content { get; public set; }
    private static JsonComment();
    public IJsonComment get_Content();
    public void set_Content(IJsonComment value);
    public string ToJson();
    public static JsonComment FromJson(string json);
}
public class Mosaik.Shared.JsonNotification : object {
    [DebuggerBrowsableAttribute]
private IJsonNotification <Content>k__BackingField;
    private static JsonSerializerSettings _jsonSettings;
    public IJsonNotification Content { get; public set; }
    private static JsonNotification();
    public IJsonNotification get_Content();
    public void set_Content(IJsonNotification value);
    public string ToJson();
    public static JsonNotification FromJson(string json);
}
public class Mosaik.Shared.NewCommentDetails : object {
    [DebuggerBrowsableAttribute]
private UID128 <For>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <TextContent>k__BackingField;
    [DebuggerBrowsableAttribute]
private CommentType <CommentType>k__BackingField;
    public UID128 For { get; public set; }
    public string TextContent { get; public set; }
    public CommentType CommentType { get; public set; }
    public UID128 get_For();
    public void set_For(UID128 value);
    public string get_TextContent();
    public void set_TextContent(string value);
    public CommentType get_CommentType();
    public void set_CommentType(CommentType value);
}
public class Mosaik.Shared.NotObsoleteComment : object {
    [DebuggerBrowsableAttribute]
private UID128 <ExplanationNode>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ExplanationUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ActualComment>k__BackingField;
    public UID128 ExplanationNode { get; public set; }
    public string ExplanationUrl { get; public set; }
    public string ActualComment { get; public set; }
    public UID128 get_ExplanationNode();
    public void set_ExplanationNode(UID128 value);
    public string get_ExplanationUrl();
    public void set_ExplanationUrl(string value);
    public string get_ActualComment();
    public void set_ActualComment(string value);
}
public class Mosaik.Shared.ObsoleteComment : object {
    [DebuggerBrowsableAttribute]
private UID128 <SupersededByNode>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <SupersededByUrl>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ActualComment>k__BackingField;
    public UID128 SupersededByNode { get; public set; }
    public string SupersededByUrl { get; public set; }
    public string ActualComment { get; public set; }
    public UID128 get_SupersededByNode();
    public void set_SupersededByNode(UID128 value);
    public string get_SupersededByUrl();
    public void set_SupersededByUrl(string value);
    public string get_ActualComment();
    public void set_ActualComment(string value);
}
public class Mosaik.Shared.RawCommentsFeed : object {
    [DebuggerBrowsableAttribute]
private CommentDetails[] <Comments>k__BackingField;
    [DebuggerBrowsableAttribute]
private AuthorDetails[] <Authors>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <MoreCommentsAvailable>k__BackingField;
    public CommentDetails[] Comments { get; public set; }
    public AuthorDetails[] Authors { get; public set; }
    public bool MoreCommentsAvailable { get; public set; }
    public CommentDetails[] get_Comments();
    public void set_Comments(CommentDetails[] value);
    public AuthorDetails[] get_Authors();
    public void set_Authors(AuthorDetails[] value);
    public bool get_MoreCommentsAvailable();
    public void set_MoreCommentsAvailable(bool value);
}
public class Mosaik.Shared.RunningOutOfDocsNotification : object {
}
public class Mosaik.Shared.SpaceUpdate : object {
    [DebuggerBrowsableAttribute]
private UID128 <CollectionUID>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <AddedCount>k__BackingField;
    [DebuggerBrowsableAttribute]
private DateTime <Since>k__BackingField;
    public UID128 CollectionUID { get; public set; }
    public int AddedCount { get; public set; }
    public DateTime Since { get; public set; }
    public UID128 get_CollectionUID();
    public void set_CollectionUID(UID128 value);
    public int get_AddedCount();
    public void set_AddedCount(int value);
    public DateTime get_Since();
    public void set_Since(DateTime value);
}
public class Mosaik.Shared.UserCommentedAt : object {
    [DebuggerBrowsableAttribute]
private UID128 <User>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <Target>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <Comment>k__BackingField;
    [DebuggerBrowsableAttribute]
private CommentType <CommentType>k__BackingField;
    public UID128 User { get; public set; }
    public UID128 Target { get; public set; }
    public UID128 Comment { get; public set; }
    public CommentType CommentType { get; public set; }
    public UID128 get_User();
    public void set_User(UID128 value);
    public UID128 get_Target();
    public void set_Target(UID128 value);
    public UID128 get_Comment();
    public void set_Comment(UID128 value);
    public CommentType get_CommentType();
    public void set_CommentType(CommentType value);
}
public class Mosaik.Shared.UserRequestJoinTeam : object {
    [DebuggerBrowsableAttribute]
private UID128 <User>k__BackingField;
    [DebuggerBrowsableAttribute]
private UID128 <Team>k__BackingField;
    public UID128 User { get; public set; }
    public UID128 Team { get; public set; }
    public UID128 get_User();
    public void set_User(UID128 value);
    public UID128 get_Team();
    public void set_Team(UID128 value);
}
public static class Mosaik.Translation : object {
    [DebuggerStepThroughAttribute]
public static Task SetLanguage(Language language);
}
[ExtensionAttribute]
public static class Mosaik.Views.INodeStyleExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyArray`1<string> GetLabelFields(INodeStyle source);
    public static ReadOnlyArray`1<string> SplitLabelField(string field);
}
[ScopeAttribute]
[GlobalMethodsAttribute]
public static class Retyped.zip_js : object {
}
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
public class UID.UID128 : object {
    [DebuggerBrowsableAttribute]
private static UID128 <Empty>k__BackingField;
    private static int DIGITS_LENGTH;
    public static UID128 Empty { get; }
    public string Value { get; }
    [TemplateAttribute("UID.UID128.ThrowIfInvalid({value})")]
public UID128(string value);
    private static UID128();
    public static UID128 get_Empty();
    public static bool IsNull(UID128 uid);
    public static bool IsNull(string val);
    public static bool IsNotNull(UID128 uid);
    public static bool IsNotNull(string val);
    private static string ThrowIfInvalid(string value);
    [TemplateAttribute("{this}")]
public string get_Value();
    public static UID128 op_Explicit(string value);
    public static string op_Implicit(UID128 value);
    [TemplateAttribute("H5.getHashCode({this})")]
public virtual int GetHashCode();
    [TemplateAttribute("H5.equals({this}, {o})")]
public virtual bool Equals(object o);
    public static UID128 FromDynamic(object value);
    public static bool LooksValid(string value);
    public static bool IsValid(string value);
    private static bool TryDecode(string input);
    private static int DIGITS_IndexOf(char c);
    [TemplateAttribute("H5.equals({this}, {o})")]
public sealed virtual bool Equals(UID128 o);
}
public class UID.UID64 : object {
    public string Value { get; }
    [TemplateAttribute("UID.UID64.ThrowIfInvalid({value})")]
public UID64(string value);
    private static string ThrowIfInvalid(string value);
    [TemplateAttribute("{this}")]
public string get_Value();
    public static UID64 op_Explicit(string value);
    public static string op_Implicit(UID64 value);
    [TemplateAttribute("H5.getHashCode({this})")]
public virtual int GetHashCode();
    [TemplateAttribute("H5.equals({this}, {o})")]
public virtual bool Equals(object o);
    public static UID64 FromDynamic(object value);
    public static bool LooksValid(string value);
}
