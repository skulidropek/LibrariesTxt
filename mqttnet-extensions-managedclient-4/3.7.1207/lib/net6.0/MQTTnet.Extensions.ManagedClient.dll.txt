[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class MQTTnet.Extensions.ManagedClient.ApplicationMessageProcessedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ManagedMqttApplicationMessage <ApplicationMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public ManagedMqttApplicationMessage ApplicationMessage { get; }
    public Exception Exception { get; }
    public ApplicationMessageProcessedEventArgs(ManagedMqttApplicationMessage applicationMessage, Exception exception);
    [CompilerGeneratedAttribute]
public ManagedMqttApplicationMessage get_ApplicationMessage();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class MQTTnet.Extensions.ManagedClient.ApplicationMessageSkippedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ManagedMqttApplicationMessage <ApplicationMessage>k__BackingField;
    public ManagedMqttApplicationMessage ApplicationMessage { get; }
    public ApplicationMessageSkippedEventArgs(ManagedMqttApplicationMessage applicationMessage);
    [CompilerGeneratedAttribute]
public ManagedMqttApplicationMessage get_ApplicationMessage();
}
public class MQTTnet.Extensions.ManagedClient.ConnectingFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MqttClientConnectResult <ConnectResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public MqttClientConnectResult ConnectResult { get; }
    public Exception Exception { get; }
    public ConnectingFailedEventArgs(MqttClientConnectResult connectResult, Exception exception);
    [CompilerGeneratedAttribute]
public MqttClientConnectResult get_ConnectResult();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public interface MQTTnet.Extensions.ManagedClient.IManagedMqttClient {
    public IMqttClient InternalClient { get; }
    public bool IsConnected { get; }
    public bool IsStarted { get; }
    public ManagedMqttClientOptions Options { get; }
    public int PendingApplicationMessagesCount { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ApplicationMessageProcessedAsync(Func`2<ApplicationMessageProcessedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ApplicationMessageProcessedAsync(Func`2<ApplicationMessageProcessedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ApplicationMessageSkippedAsync(Func`2<ApplicationMessageSkippedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ApplicationMessageSkippedAsync(Func`2<ApplicationMessageSkippedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectingFailedAsync(Func`2<ConnectingFailedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectingFailedAsync(Func`2<ConnectingFailedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectionStateChangedAsync(Func`2<EventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectionStateChangedAsync(Func`2<EventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SynchronizingSubscriptionsFailedAsync(Func`2<ManagedProcessFailedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SynchronizingSubscriptionsFailedAsync(Func`2<ManagedProcessFailedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SubscriptionsChangedAsync(Func`2<SubscriptionsChangedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SubscriptionsChangedAsync(Func`2<SubscriptionsChangedEventArgs, Task> value);
    public abstract virtual IMqttClient get_InternalClient();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsStarted();
    public abstract virtual ManagedMqttClientOptions get_Options();
    public abstract virtual int get_PendingApplicationMessagesCount();
    public abstract virtual Task EnqueueAsync(MqttApplicationMessage applicationMessage);
    public abstract virtual Task EnqueueAsync(ManagedMqttApplicationMessage applicationMessage);
    public abstract virtual Task PingAsync(CancellationToken cancellationToken);
    public abstract virtual Task StartAsync(ManagedMqttClientOptions options);
    public abstract virtual Task StopAsync(bool cleanDisconnect);
    public abstract virtual Task SubscribeAsync(IEnumerable`1<MqttTopicFilter> topicFilters);
    public abstract virtual Task UnsubscribeAsync(IEnumerable`1<string> topics);
}
public interface MQTTnet.Extensions.ManagedClient.IManagedMqttClientStorage {
    public abstract virtual Task SaveQueuedMessagesAsync(IList`1<ManagedMqttApplicationMessage> messages);
    public abstract virtual Task`1<IList`1<ManagedMqttApplicationMessage>> LoadQueuedMessagesAsync();
}
public class MQTTnet.Extensions.ManagedClient.InterceptingPublishMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ManagedMqttApplicationMessage <ApplicationMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AcceptPublish>k__BackingField;
    public ManagedMqttApplicationMessage ApplicationMessage { get; }
    public bool AcceptPublish { get; public set; }
    public InterceptingPublishMessageEventArgs(ManagedMqttApplicationMessage applicationMessage);
    [CompilerGeneratedAttribute]
public ManagedMqttApplicationMessage get_ApplicationMessage();
    [CompilerGeneratedAttribute]
public bool get_AcceptPublish();
    [CompilerGeneratedAttribute]
public void set_AcceptPublish(bool value);
}
public class MQTTnet.Extensions.ManagedClient.ManagedMqttApplicationMessage : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttApplicationMessage <ApplicationMessage>k__BackingField;
    public Guid Id { get; public set; }
    public MqttApplicationMessage ApplicationMessage { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public MqttApplicationMessage get_ApplicationMessage();
    [CompilerGeneratedAttribute]
public void set_ApplicationMessage(MqttApplicationMessage value);
}
public class MQTTnet.Extensions.ManagedClient.ManagedMqttApplicationMessageBuilder : object {
    private Guid _id;
    private MqttApplicationMessage _applicationMessage;
    public ManagedMqttApplicationMessageBuilder WithId(Guid id);
    public ManagedMqttApplicationMessageBuilder WithApplicationMessage(MqttApplicationMessage applicationMessage);
    public ManagedMqttApplicationMessageBuilder WithApplicationMessage(Action`1<MqttApplicationMessageBuilder> builder);
    public ManagedMqttApplicationMessage Build();
}
public class MQTTnet.Extensions.ManagedClient.ManagedMqttClient : Disposable {
    private MqttNetSourceLogger _logger;
    private AsyncEvent`1<InterceptingPublishMessageEventArgs> _interceptingPublishMessageEvent;
    private AsyncEvent`1<ApplicationMessageProcessedEventArgs> _applicationMessageProcessedEvent;
    private AsyncEvent`1<ApplicationMessageSkippedEventArgs> _applicationMessageSkippedEvent;
    private AsyncEvent`1<ConnectingFailedEventArgs> _connectingFailedEvent;
    private AsyncEvent`1<EventArgs> _connectionStateChangedEvent;
    private AsyncEvent`1<ManagedProcessFailedEventArgs> _synchronizingSubscriptionsFailedEvent;
    private AsyncEvent`1<SubscriptionsChangedEventArgs> _subscriptionsChangedEvent;
    private BlockingQueue`1<ManagedMqttApplicationMessage> _messageQueue;
    private AsyncLock _messageQueueLock;
    private Dictionary`2<string, MqttTopicFilter> _reconnectSubscriptions;
    private Dictionary`2<string, MqttTopicFilter> _subscriptions;
    private SemaphoreSlim _subscriptionsQueuedSignal;
    private HashSet`1<string> _unsubscriptions;
    private CancellationTokenSource _connectionCancellationToken;
    private Task _maintainConnectionTask;
    private CancellationTokenSource _publishingCancellationToken;
    private ManagedMqttClientStorageManager _storageManager;
    private bool _isCleanDisconnect;
    [CompilerGeneratedAttribute]
private IMqttClient <InternalClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedMqttClientOptions <Options>k__BackingField;
    public IMqttClient InternalClient { get; }
    public bool IsConnected { get; }
    public bool IsStarted { get; }
    public ManagedMqttClientOptions Options { get; private set; }
    public int PendingApplicationMessagesCount { get; }
    public ManagedMqttClient(IMqttClient mqttClient, IMqttNetLogger logger);
    public sealed virtual void add_ApplicationMessageSkippedAsync(Func`2<ApplicationMessageSkippedEventArgs, Task> value);
    public sealed virtual void remove_ApplicationMessageSkippedAsync(Func`2<ApplicationMessageSkippedEventArgs, Task> value);
    public sealed virtual void add_ApplicationMessageProcessedAsync(Func`2<ApplicationMessageProcessedEventArgs, Task> value);
    public sealed virtual void remove_ApplicationMessageProcessedAsync(Func`2<ApplicationMessageProcessedEventArgs, Task> value);
    public void add_InterceptPublishMessageAsync(Func`2<InterceptingPublishMessageEventArgs, Task> value);
    public void remove_InterceptPublishMessageAsync(Func`2<InterceptingPublishMessageEventArgs, Task> value);
    public sealed virtual void add_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    public sealed virtual void remove_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    public sealed virtual void add_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    public sealed virtual void remove_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    public sealed virtual void add_ConnectingFailedAsync(Func`2<ConnectingFailedEventArgs, Task> value);
    public sealed virtual void remove_ConnectingFailedAsync(Func`2<ConnectingFailedEventArgs, Task> value);
    public sealed virtual void add_ConnectionStateChangedAsync(Func`2<EventArgs, Task> value);
    public sealed virtual void remove_ConnectionStateChangedAsync(Func`2<EventArgs, Task> value);
    public sealed virtual void add_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    public sealed virtual void remove_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    public sealed virtual void add_SynchronizingSubscriptionsFailedAsync(Func`2<ManagedProcessFailedEventArgs, Task> value);
    public sealed virtual void remove_SynchronizingSubscriptionsFailedAsync(Func`2<ManagedProcessFailedEventArgs, Task> value);
    public sealed virtual void add_SubscriptionsChangedAsync(Func`2<SubscriptionsChangedEventArgs, Task> value);
    public sealed virtual void remove_SubscriptionsChangedAsync(Func`2<SubscriptionsChangedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual IMqttClient get_InternalClient();
    public sealed virtual bool get_IsConnected();
    public sealed virtual bool get_IsStarted();
    [CompilerGeneratedAttribute]
public sealed virtual ManagedMqttClientOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(ManagedMqttClientOptions value);
    public sealed virtual int get_PendingApplicationMessagesCount();
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<EnqueueAsync>d__63")]
public sealed virtual Task EnqueueAsync(MqttApplicationMessage applicationMessage);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<EnqueueAsync>d__64")]
public sealed virtual Task EnqueueAsync(ManagedMqttApplicationMessage applicationMessage);
    public sealed virtual Task PingAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<StartAsync>d__66")]
public sealed virtual Task StartAsync(ManagedMqttClientOptions options);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<StopAsync>d__67")]
public sealed virtual Task StopAsync(bool cleanDisconnect);
    public sealed virtual Task SubscribeAsync(IEnumerable`1<MqttTopicFilter> topicFilters);
    public sealed virtual Task UnsubscribeAsync(IEnumerable`1<string> topics);
    protected virtual void Dispose(bool disposing);
    private static TimeSpan GetRemainingTime(DateTime endTime);
    private CancellationTokenSource NewTimeoutToken(CancellationToken linkedToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<HandleSubscriptionExceptionAsync>d__73")]
private Task HandleSubscriptionExceptionAsync(Exception exception, List`1<MqttTopicFilter> addedSubscriptions, List`1<string> removedSubscriptions);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<HandleSubscriptionsResultAsync>d__74")]
private Task HandleSubscriptionsResultAsync(SendSubscribeUnsubscribeResult subscribeUnsubscribeResult);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<MaintainConnectionAsync>d__75")]
private Task MaintainConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<PublishQueuedMessagesAsync>d__76")]
private Task PublishQueuedMessagesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<PublishReconnectSubscriptionsAsync>d__77")]
private Task PublishReconnectSubscriptionsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<PublishSubscriptionsAsync>d__78")]
private Task PublishSubscriptionsAsync(TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<ReconnectIfRequiredAsync>d__79")]
private Task`1<ReconnectionResult> ReconnectIfRequiredAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<SendSubscribeUnsubscribe>d__80")]
private Task`1<SendSubscribeUnsubscribeResult> SendSubscribeUnsubscribe(List`1<MqttTopicFilter> addedSubscriptions, List`1<string> removedSubscriptions, CancellationToken cancellationToken);
    private void StartPublishing();
    private void StopMaintainingConnection();
    private void StopPublishing();
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<TryMaintainConnectionAsync>d__84")]
private Task TryMaintainConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClient/<TryPublishQueuedMessageAsync>d__85")]
private Task TryPublishQueuedMessageAsync(ManagedMqttApplicationMessage message, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class MQTTnet.Extensions.ManagedClient.ManagedMqttClientExtensions : object {
    [ExtensionAttribute]
public static Task EnqueueAsync(IManagedMqttClient managedMqttClient, string topic, string payload, MqttQualityOfServiceLevel qualityOfServiceLevel, bool retain);
    [ExtensionAttribute]
public static Task SubscribeAsync(IManagedMqttClient managedMqttClient, string topic, MqttQualityOfServiceLevel qualityOfServiceLevel);
    [ExtensionAttribute]
public static Task UnsubscribeAsync(IManagedMqttClient managedMqttClient, string topic);
}
public class MQTTnet.Extensions.ManagedClient.ManagedMqttClientOptions : object {
    [CompilerGeneratedAttribute]
private MqttClientOptions <ClientOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AutoReconnectDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionCheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IManagedMqttClientStorage <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPendingMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPendingMessagesOverflowStrategy <PendingMessagesOverflowStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxTopicFiltersInSubscribeUnsubscribePackets>k__BackingField;
    public MqttClientOptions ClientOptions { get; public set; }
    public TimeSpan AutoReconnectDelay { get; public set; }
    public TimeSpan ConnectionCheckInterval { get; public set; }
    public IManagedMqttClientStorage Storage { get; public set; }
    public int MaxPendingMessages { get; public set; }
    public MqttPendingMessagesOverflowStrategy PendingMessagesOverflowStrategy { get; public set; }
    public int MaxTopicFiltersInSubscribeUnsubscribePackets { get; public set; }
    [CompilerGeneratedAttribute]
public MqttClientOptions get_ClientOptions();
    [CompilerGeneratedAttribute]
public void set_ClientOptions(MqttClientOptions value);
    [CompilerGeneratedAttribute]
public TimeSpan get_AutoReconnectDelay();
    [CompilerGeneratedAttribute]
public void set_AutoReconnectDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectionCheckInterval();
    [CompilerGeneratedAttribute]
public void set_ConnectionCheckInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public IManagedMqttClientStorage get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(IManagedMqttClientStorage value);
    [CompilerGeneratedAttribute]
public int get_MaxPendingMessages();
    [CompilerGeneratedAttribute]
public void set_MaxPendingMessages(int value);
    [CompilerGeneratedAttribute]
public MqttPendingMessagesOverflowStrategy get_PendingMessagesOverflowStrategy();
    [CompilerGeneratedAttribute]
public void set_PendingMessagesOverflowStrategy(MqttPendingMessagesOverflowStrategy value);
    [CompilerGeneratedAttribute]
public int get_MaxTopicFiltersInSubscribeUnsubscribePackets();
    [CompilerGeneratedAttribute]
public void set_MaxTopicFiltersInSubscribeUnsubscribePackets(int value);
}
public class MQTTnet.Extensions.ManagedClient.ManagedMqttClientOptionsBuilder : object {
    private ManagedMqttClientOptions _options;
    private MqttClientOptionsBuilder _clientOptionsBuilder;
    public ManagedMqttClientOptionsBuilder WithMaxPendingMessages(int value);
    public ManagedMqttClientOptionsBuilder WithPendingMessagesOverflowStrategy(MqttPendingMessagesOverflowStrategy value);
    public ManagedMqttClientOptionsBuilder WithAutoReconnectDelay(TimeSpan value);
    public ManagedMqttClientOptionsBuilder WithStorage(IManagedMqttClientStorage value);
    public ManagedMqttClientOptionsBuilder WithClientOptions(MqttClientOptions value);
    public ManagedMqttClientOptionsBuilder WithClientOptions(MqttClientOptionsBuilder builder);
    public ManagedMqttClientOptionsBuilder WithClientOptions(Action`1<MqttClientOptionsBuilder> options);
    public ManagedMqttClientOptionsBuilder WithMaxTopicFiltersInSubscribeUnsubscribePackets(int value);
    public ManagedMqttClientOptions Build();
}
public class MQTTnet.Extensions.ManagedClient.ManagedMqttClientStorageManager : object {
    private List`1<ManagedMqttApplicationMessage> _messages;
    private AsyncLock _messagesLock;
    private IManagedMqttClientStorage _storage;
    public ManagedMqttClientStorageManager(IManagedMqttClientStorage storage);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClientStorageManager/<LoadQueuedMessagesAsync>d__4")]
public Task`1<List`1<ManagedMqttApplicationMessage>> LoadQueuedMessagesAsync();
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClientStorageManager/<AddAsync>d__5")]
public Task AddAsync(ManagedMqttApplicationMessage applicationMessage);
    [AsyncStateMachineAttribute("MQTTnet.Extensions.ManagedClient.ManagedMqttClientStorageManager/<RemoveAsync>d__6")]
public Task RemoveAsync(ManagedMqttApplicationMessage applicationMessage);
    private Task SaveAsync();
}
public class MQTTnet.Extensions.ManagedClient.ManagedProcessFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AddedSubscriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RemovedSubscriptions>k__BackingField;
    public Exception Exception { get; }
    public List`1<string> AddedSubscriptions { get; }
    public List`1<string> RemovedSubscriptions { get; }
    public ManagedProcessFailedEventArgs(Exception exception, List`1<MqttTopicFilter> addedSubscriptions, List`1<string> removedSubscriptions);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public List`1<string> get_AddedSubscriptions();
    [CompilerGeneratedAttribute]
public List`1<string> get_RemovedSubscriptions();
}
[ExtensionAttribute]
public static class MQTTnet.Extensions.ManagedClient.MqttFactoryExtensions : object {
    [ExtensionAttribute]
public static IManagedMqttClient CreateManagedMqttClient(MqttFactory factory, IMqttClient mqttClient);
    [ExtensionAttribute]
public static IManagedMqttClient CreateManagedMqttClient(MqttFactory factory, IMqttNetLogger logger);
    [ExtensionAttribute]
public static ManagedMqttClientOptionsBuilder CreateManagedMqttClientOptionsBuilder(MqttFactory _);
}
public enum MQTTnet.Extensions.ManagedClient.ReconnectionResult : Enum {
    public int value__;
    public static ReconnectionResult StillConnected;
    public static ReconnectionResult Reconnected;
    public static ReconnectionResult Recovered;
    public static ReconnectionResult NotConnected;
}
public class MQTTnet.Extensions.ManagedClient.SendSubscribeUnsubscribeResult : object {
    [CompilerGeneratedAttribute]
private List`1<MqttClientSubscribeResult> <SubscribeResults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttClientUnsubscribeResult> <UnsubscribeResults>k__BackingField;
    public List`1<MqttClientSubscribeResult> SubscribeResults { get; private set; }
    public List`1<MqttClientUnsubscribeResult> UnsubscribeResults { get; private set; }
    public SendSubscribeUnsubscribeResult(List`1<MqttClientSubscribeResult> subscribeResults, List`1<MqttClientUnsubscribeResult> unsubscribeResults);
    [CompilerGeneratedAttribute]
public List`1<MqttClientSubscribeResult> get_SubscribeResults();
    [CompilerGeneratedAttribute]
private void set_SubscribeResults(List`1<MqttClientSubscribeResult> value);
    [CompilerGeneratedAttribute]
public List`1<MqttClientUnsubscribeResult> get_UnsubscribeResults();
    [CompilerGeneratedAttribute]
private void set_UnsubscribeResults(List`1<MqttClientUnsubscribeResult> value);
}
public class MQTTnet.Extensions.ManagedClient.SubscriptionsChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private List`1<MqttClientSubscribeResult> <SubscribeResult>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttClientUnsubscribeResult> <UnsubscribeResult>k__BackingField;
    public List`1<MqttClientSubscribeResult> SubscribeResult { get; }
    public List`1<MqttClientUnsubscribeResult> UnsubscribeResult { get; }
    public SubscriptionsChangedEventArgs(List`1<MqttClientSubscribeResult> subscribeResult, List`1<MqttClientUnsubscribeResult> unsubscribeResult);
    [CompilerGeneratedAttribute]
public List`1<MqttClientSubscribeResult> get_SubscribeResult();
    [CompilerGeneratedAttribute]
public List`1<MqttClientUnsubscribeResult> get_UnsubscribeResult();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
