public interface MQTTnet.Adapter.IMqttChannelAdapter {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public X509Certificate2 ClientCertificate { get; }
    public string Endpoint { get; }
    public bool IsSecureConnection { get; }
    public MqttPacketFormatterAdapter PacketFormatterAdapter { get; }
    public abstract virtual long get_BytesReceived();
    public abstract virtual long get_BytesSent();
    public abstract virtual X509Certificate2 get_ClientCertificate();
    public abstract virtual string get_Endpoint();
    public abstract virtual bool get_IsSecureConnection();
    public abstract virtual MqttPacketFormatterAdapter get_PacketFormatterAdapter();
    public abstract virtual Task ConnectAsync(CancellationToken cancellationToken);
    public abstract virtual Task DisconnectAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<MqttPacket> ReceivePacketAsync(CancellationToken cancellationToken);
    public abstract virtual void ResetStatistics();
    public abstract virtual Task SendPacketAsync(MqttPacket packet, CancellationToken cancellationToken);
}
public interface MQTTnet.Adapter.IMqttClientAdapterFactory {
    public abstract virtual IMqttChannelAdapter CreateClientAdapter(MqttClientOptions options, MqttPacketInspector packetInspector, IMqttNetLogger logger);
}
public class MQTTnet.Adapter.MqttChannelAdapter : Disposable {
    private static UInt32 ErrorOperationAborted;
    private static int ReadBufferSize;
    private IMqttChannel _channel;
    private Byte[] _fixedHeaderBuffer;
    private MqttNetSourceLogger _logger;
    private Byte[] _singleByteBuffer;
    private AsyncLock _syncRoot;
    private Statistics _statistics;
    [CompilerGeneratedAttribute]
private bool <AllowPacketFragmentation>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPacketFormatterAdapter <PacketFormatterAdapter>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPacketInspector <PacketInspector>k__BackingField;
    public bool AllowPacketFragmentation { get; public set; }
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public X509Certificate2 ClientCertificate { get; }
    public string Endpoint { get; }
    public bool IsSecureConnection { get; }
    public MqttPacketFormatterAdapter PacketFormatterAdapter { get; }
    public MqttPacketInspector PacketInspector { get; public set; }
    public MqttChannelAdapter(IMqttChannel channel, MqttPacketFormatterAdapter packetFormatterAdapter, IMqttNetLogger logger);
    [CompilerGeneratedAttribute]
public bool get_AllowPacketFragmentation();
    [CompilerGeneratedAttribute]
public void set_AllowPacketFragmentation(bool value);
    public sealed virtual long get_BytesReceived();
    public sealed virtual long get_BytesSent();
    public sealed virtual X509Certificate2 get_ClientCertificate();
    public sealed virtual string get_Endpoint();
    public sealed virtual bool get_IsSecureConnection();
    [CompilerGeneratedAttribute]
public sealed virtual MqttPacketFormatterAdapter get_PacketFormatterAdapter();
    [CompilerGeneratedAttribute]
public MqttPacketInspector get_PacketInspector();
    [CompilerGeneratedAttribute]
public void set_PacketInspector(MqttPacketInspector value);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<ConnectAsync>d__30")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<DisconnectAsync>d__31")]
public sealed virtual Task DisconnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<ReceivePacketAsync>d__32")]
public sealed virtual Task`1<MqttPacket> ReceivePacketAsync(CancellationToken cancellationToken);
    public sealed virtual void ResetStatistics();
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<SendPacketAsync>d__34")]
public sealed virtual Task SendPacketAsync(MqttPacket packet, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<ReadBodyLengthAsync>d__36")]
private Task`1<int> ReadBodyLengthAsync(byte initialEncodedByte, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<ReadFixedHeaderAsync>d__37")]
private Task`1<ReadFixedHeaderResult> ReadFixedHeaderAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttChannelAdapter/<ReceiveAsync>d__38")]
private Task`1<ReceivedMqttPacket> ReceiveAsync(CancellationToken cancellationToken);
    private static bool WrapAndThrowException(Exception exception);
}
public class MQTTnet.Adapter.MqttConnectingFailedException : MqttCommunicationException {
    public MqttConnectingFailedException(string message, Exception innerException);
}
public class MQTTnet.Adapter.MqttPacketInspector : object {
    private AsyncEvent`1<InspectMqttPacketEventArgs> _asyncEvent;
    private MqttNetSourceLogger _logger;
    private MemoryStream _receivedPacketBuffer;
    public MqttPacketInspector(AsyncEvent`1<InspectMqttPacketEventArgs> asyncEvent, IMqttNetLogger logger);
    public void BeginReceivePacket();
    public Task BeginSendPacket(MqttPacketBuffer buffer);
    public Task EndReceivePacket();
    public void FillReceiveBuffer(Byte[] buffer);
    [AsyncStateMachineAttribute("MQTTnet.Adapter.MqttPacketInspector/<InspectPacket>d__8")]
private Task InspectPacket(Byte[] buffer, MqttPacketFlowDirection direction);
}
[IsReadOnlyAttribute]
public class MQTTnet.Adapter.ReceivedMqttPacket : ValueType {
    public static ReceivedMqttPacket Empty;
    [CompilerGeneratedAttribute]
private byte <FixedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalLength>k__BackingField;
    public byte FixedHeader { get; }
    public ArraySegment`1<byte> Body { get; }
    public int TotalLength { get; }
    public ReceivedMqttPacket(byte fixedHeader, ArraySegment`1<byte> body, int totalLength);
    private static ReceivedMqttPacket();
    [CompilerGeneratedAttribute]
public byte get_FixedHeader();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Body();
    [CompilerGeneratedAttribute]
public int get_TotalLength();
}
public class MQTTnet.Certificates.BlobCertificateProvider : object {
    [CompilerGeneratedAttribute]
private Byte[] <Blob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public Byte[] Blob { get; }
    public string Password { get; public set; }
    public BlobCertificateProvider(Byte[] blob);
    [CompilerGeneratedAttribute]
public Byte[] get_Blob();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public sealed virtual X509Certificate2 GetCertificate();
}
public interface MQTTnet.Certificates.ICertificateProvider {
    public abstract virtual X509Certificate2 GetCertificate();
}
public class MQTTnet.Certificates.X509CertificateProvider : object {
    private X509Certificate2 _certificate;
    public X509CertificateProvider(X509Certificate2 certificate);
    public sealed virtual X509Certificate2 GetCertificate();
}
public interface MQTTnet.Channel.IMqttChannel {
    public X509Certificate2 ClientCertificate { get; }
    public string Endpoint { get; }
    public bool IsSecureConnection { get; }
    public abstract virtual X509Certificate2 get_ClientCertificate();
    public abstract virtual string get_Endpoint();
    public abstract virtual bool get_IsSecureConnection();
    public abstract virtual Task ConnectAsync(CancellationToken cancellationToken);
    public abstract virtual Task DisconnectAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(ReadOnlySequence`1<byte> buffer, bool isEndOfPacket, CancellationToken cancellationToken);
}
public class MQTTnet.DefaultMqttCertificatesProvider : object {
    private X509Certificate2Collection _certificates;
    public DefaultMqttCertificatesProvider(X509Certificate2Collection certificates);
    public DefaultMqttCertificatesProvider(IEnumerable`1<X509Certificate> certificates);
    public sealed virtual X509CertificateCollection GetCertificates();
}
public interface MQTTnet.Diagnostics.Logger.IMqttNetLogger {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual void Publish(MqttNetLogLevel logLevel, string source, string message, Object[] parameters, Exception exception);
}
public class MQTTnet.Diagnostics.Logger.MqttNetEventLogger : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<MqttNetLogMessagePublishedEventArgs> LogMessagePublished;
    [CompilerGeneratedAttribute]
private string <LogId>k__BackingField;
    public bool IsEnabled { get; }
    public string LogId { get; }
    public MqttNetEventLogger(string logId);
    [CompilerGeneratedAttribute]
public void add_LogMessagePublished(EventHandler`1<MqttNetLogMessagePublishedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LogMessagePublished(EventHandler`1<MqttNetLogMessagePublishedEventArgs> value);
    public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public string get_LogId();
    public sealed virtual void Publish(MqttNetLogLevel level, string source, string message, Object[] parameters, Exception exception);
}
public enum MQTTnet.Diagnostics.Logger.MqttNetLogLevel : Enum {
    public int value__;
    public static MqttNetLogLevel Verbose;
    public static MqttNetLogLevel Info;
    public static MqttNetLogLevel Warning;
    public static MqttNetLogLevel Error;
}
public class MQTTnet.Diagnostics.Logger.MqttNetLogMessage : object {
    [CompilerGeneratedAttribute]
private string <LogId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttNetLogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string LogId { get; public set; }
    public DateTime Timestamp { get; public set; }
    public int ThreadId { get; public set; }
    public string Source { get; public set; }
    public MqttNetLogLevel Level { get; public set; }
    public string Message { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogId();
    [CompilerGeneratedAttribute]
public void set_LogId(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public MqttNetLogLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(MqttNetLogLevel value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public virtual string ToString();
}
public class MQTTnet.Diagnostics.Logger.MqttNetLogMessagePublishedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MqttNetLogMessage <LogMessage>k__BackingField;
    public MqttNetLogMessage LogMessage { get; }
    public MqttNetLogMessagePublishedEventArgs(MqttNetLogMessage logMessage);
    [CompilerGeneratedAttribute]
public MqttNetLogMessage get_LogMessage();
}
public class MQTTnet.Diagnostics.Logger.MqttNetNullLogger : object {
    [CompilerGeneratedAttribute]
private static MqttNetNullLogger <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public static MqttNetNullLogger Instance { get; }
    public bool IsEnabled { get; }
    private static MqttNetNullLogger();
    [CompilerGeneratedAttribute]
public static MqttNetNullLogger get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    public sealed virtual void Publish(MqttNetLogLevel logLevel, string source, string message, Object[] parameters, Exception exception);
}
public class MQTTnet.Diagnostics.Logger.MqttNetSourceLogger : object {
    private IMqttNetLogger _logger;
    private string _source;
    public bool IsEnabled { get; }
    public MqttNetSourceLogger(IMqttNetLogger logger, string source);
    public bool get_IsEnabled();
    public void Publish(MqttNetLogLevel logLevel, string message, Object[] parameters, Exception exception);
}
[ExtensionAttribute]
public static class MQTTnet.Diagnostics.Logger.MqttNetSourceLoggerExtensions : object {
    [ExtensionAttribute]
public static void Error(MqttNetSourceLogger logger, Exception exception, string message, TParameter1 parameter1);
    [ExtensionAttribute]
public static void Error(MqttNetSourceLogger logger, Exception exception, string message, TParameter1 parameter1, TParameter2 parameter2);
    [ExtensionAttribute]
public static void Error(MqttNetSourceLogger logger, Exception exception, string message);
    [ExtensionAttribute]
public static void Error(MqttNetSourceLogger logger, string message);
    [ExtensionAttribute]
public static void Info(MqttNetSourceLogger logger, string message, TParameter1 parameter1);
    [ExtensionAttribute]
public static void Info(MqttNetSourceLogger logger, string message, TParameter1 parameter1, TParameter2 parameter2);
    [ExtensionAttribute]
public static void Info(MqttNetSourceLogger logger, string message);
    [ExtensionAttribute]
public static void Publish(MqttNetSourceLogger logger, MqttNetLogLevel logLevel, Exception exception, string message, TParameter1 parameter1);
    [ExtensionAttribute]
public static void Publish(MqttNetSourceLogger logger, MqttNetLogLevel logLevel, Exception exception, string message, TParameter1 parameter1, TParameter2 parameter2);
    [ExtensionAttribute]
public static void Verbose(MqttNetSourceLogger logger, string message, TParameter1 parameter1);
    [ExtensionAttribute]
public static void Verbose(MqttNetSourceLogger logger, string message, TParameter1 parameter1, TParameter2 parameter2);
    [ExtensionAttribute]
public static void Verbose(MqttNetSourceLogger logger, string message, TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3);
    [ExtensionAttribute]
public static void Verbose(MqttNetSourceLogger logger, string message);
    [ExtensionAttribute]
public static void Warning(MqttNetSourceLogger logger, Exception exception, string message, TParameter1 parameter1);
    [ExtensionAttribute]
public static void Warning(MqttNetSourceLogger logger, Exception exception, string message, TParameter1 parameter1, TParameter2 parameter2);
    [ExtensionAttribute]
public static void Warning(MqttNetSourceLogger logger, Exception exception, string message);
    [ExtensionAttribute]
public static void Warning(MqttNetSourceLogger logger, string message, TParameter1 parameter1);
    [ExtensionAttribute]
public static void Warning(MqttNetSourceLogger logger, string message, TParameter1 parameter1, TParameter2 parameter2);
    [ExtensionAttribute]
public static void Warning(MqttNetSourceLogger logger, string message);
    [ExtensionAttribute]
public static MqttNetSourceLogger WithSource(IMqttNetLogger logger, string source);
}
public class MQTTnet.Diagnostics.PacketInspection.InspectMqttPacketEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPacketFlowDirection <Direction>k__BackingField;
    public Byte[] Buffer { get; }
    public MqttPacketFlowDirection Direction { get; }
    public InspectMqttPacketEventArgs(MqttPacketFlowDirection direction, Byte[] buffer);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public MqttPacketFlowDirection get_Direction();
}
public enum MQTTnet.Diagnostics.PacketInspection.MqttPacketFlowDirection : Enum {
    public int value__;
    public static MqttPacketFlowDirection Inbound;
    public static MqttPacketFlowDirection Outbound;
}
public class MQTTnet.Exceptions.MqttClientDisconnectedException : MqttCommunicationException {
    public MqttClientDisconnectedException(Exception innerException);
}
public class MQTTnet.Exceptions.MqttClientNotConnectedException : MqttCommunicationException {
    public MqttClientNotConnectedException(Exception innerException);
}
public class MQTTnet.Exceptions.MqttClientUnexpectedDisconnectReceivedException : MqttCommunicationException {
    [CompilerGeneratedAttribute]
private Nullable`1<MqttDisconnectReasonCode> <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public Nullable`1<MqttDisconnectReasonCode> ReasonCode { get; }
    public string ReasonString { get; }
    public string ServerReference { get; }
    public Nullable`1<UInt32> SessionExpiryInterval { get; }
    public List`1<MqttUserProperty> UserProperties { get; }
    public MqttClientUnexpectedDisconnectReceivedException(MqttDisconnectPacket disconnectPacket, Exception innerExcpetion);
    [CompilerGeneratedAttribute]
public Nullable`1<MqttDisconnectReasonCode> get_ReasonCode();
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public string get_ServerReference();
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
}
public class MQTTnet.Exceptions.MqttCommunicationException : Exception {
    public MqttCommunicationException(Exception innerException);
    public MqttCommunicationException(string message, Exception innerException);
}
public class MQTTnet.Exceptions.MqttCommunicationTimedOutException : MqttCommunicationException {
    public MqttCommunicationTimedOutException(Exception innerException);
}
public class MQTTnet.Exceptions.MqttConfigurationException : Exception {
    public MqttConfigurationException(Exception innerException);
    public MqttConfigurationException(string message);
}
public class MQTTnet.Exceptions.MqttProtocolViolationException : Exception {
    public MqttProtocolViolationException(string message);
}
public interface MQTTnet.Formatter.IMqttPacketFormatter {
    public abstract virtual MqttPacket Decode(ReceivedMqttPacket receivedMqttPacket);
    public abstract virtual MqttPacketBuffer Encode(MqttPacket mqttPacket);
}
public static class MQTTnet.Formatter.MqttApplicationMessageFactory : object {
    public static MqttApplicationMessage Create(MqttPublishPacket publishPacket);
}
public class MQTTnet.Formatter.MqttBufferReader : object {
    private Byte[] _buffer;
    private int _maxPosition;
    private int _offset;
    private int _position;
    public int BytesLeft { get; }
    public bool EndOfStream { get; }
    public int Position { get; }
    public int get_BytesLeft();
    public bool get_EndOfStream();
    public int get_Position();
    public Byte[] ReadBinaryData();
    public byte ReadByte();
    public UInt32 ReadFourByteInteger();
    public Byte[] ReadRemainingData();
    public string ReadString();
    public ushort ReadTwoByteInteger();
    public UInt32 ReadVariableByteInteger();
    public void Seek(int position);
    public void SetBuffer(ArraySegment`1<byte> buffer);
    public void SetBuffer(Byte[] buffer, int offset, int length);
    private void ValidateReceiveBuffer(int length);
}
public class MQTTnet.Formatter.MqttBufferWriter : object {
    private static UInt32 VariableByteIntegerMaxValue;
    private static int EncodedStringMaxLength;
    private int _maxBufferSize;
    private Byte[] _buffer;
    private int _position;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; private set; }
    public MqttBufferWriter(int bufferSize, int maxBufferSize);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public static byte BuildFixedHeader(MqttControlPacketType packetType, byte flags);
    public void Cleanup();
    public Byte[] GetBuffer();
    public static int GetVariableByteIntegerSize(UInt32 value);
    public void Reset(int length);
    public void Seek(int position);
    public void Write(MqttBufferWriter propertyWriter);
    public void WriteBinary(Byte[] value);
    public void WriteBinary(Byte[] buffer, int offset, int count);
    public void WriteByte(byte byte);
    public void WriteString(string value);
    public void WriteTwoByteInteger(ushort value);
    public void WriteVariableByteInteger(UInt32 value);
    private void EnsureAdditionalCapacity(int additionalCapacity);
    private void EnsureCapacity(int capacity);
    private void IncreasePosition(int length);
}
public static class MQTTnet.Formatter.MqttConnectPacketFactory : object {
    public static MqttConnectPacket Create(MqttClientOptions clientOptions);
}
public static class MQTTnet.Formatter.MqttConnectReasonCodeConverter : object {
    public static MqttConnectReturnCode ToConnectReturnCode(MqttConnectReasonCode reasonCode);
}
public static class MQTTnet.Formatter.MqttDisconnectPacketFactory : object {
    private static MqttDisconnectPacket DefaultNormalDisconnection;
    private static MqttDisconnectPacketFactory();
    public static MqttDisconnectPacket Create(MqttClientDisconnectOptions clientDisconnectOptions);
}
public class MQTTnet.Formatter.MqttFixedHeader : ValueType {
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemainingLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalLength>k__BackingField;
    public byte Flags { get; }
    public int RemainingLength { get; }
    public int TotalLength { get; }
    public MqttFixedHeader(byte flags, int remainingLength, int totalLength);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Flags();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_RemainingLength();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_TotalLength();
}
[IsReadOnlyAttribute]
public class MQTTnet.Formatter.MqttPacketBuffer : ValueType {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Packet>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<byte> <Payload>k__BackingField;
    public int Length { get; }
    public ArraySegment`1<byte> Packet { get; }
    public ReadOnlySequence`1<byte> Payload { get; }
    public MqttPacketBuffer(ArraySegment`1<byte> packet, ReadOnlySequence`1<byte> payload);
    public MqttPacketBuffer(ArraySegment`1<byte> packet);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Packet();
    [CompilerGeneratedAttribute]
public ReadOnlySequence`1<byte> get_Payload();
    public Byte[] ToArray();
    public ArraySegment`1<byte> Join();
}
public class MQTTnet.Formatter.MqttPacketFormatterAdapter : object {
    private MqttBufferReader _bufferReader;
    private MqttBufferWriter _bufferWriter;
    private IMqttPacketFormatter _formatter;
    [CompilerGeneratedAttribute]
private MqttProtocolVersion <ProtocolVersion>k__BackingField;
    public MqttProtocolVersion ProtocolVersion { get; private set; }
    public MqttPacketFormatterAdapter(MqttBufferWriter mqttBufferWriter);
    public MqttPacketFormatterAdapter(MqttProtocolVersion protocolVersion, MqttBufferWriter bufferWriter);
    [CompilerGeneratedAttribute]
public MqttProtocolVersion get_ProtocolVersion();
    [CompilerGeneratedAttribute]
private void set_ProtocolVersion(MqttProtocolVersion value);
    public void Cleanup();
    public MqttPacket Decode(ReceivedMqttPacket receivedMqttPacket);
    public void DetectProtocolVersion(ReceivedMqttPacket receivedMqttPacket);
    public MqttPacketBuffer Encode(MqttPacket packet);
    public static IMqttPacketFormatter GetMqttPacketFormatter(MqttProtocolVersion protocolVersion, MqttBufferWriter bufferWriter);
    private MqttProtocolVersion ParseProtocolVersion(ReceivedMqttPacket receivedMqttPacket);
    private void ThrowIfFormatterNotSet();
    private void UseProtocolVersion(MqttProtocolVersion protocolVersion);
}
public enum MQTTnet.Formatter.MqttProtocolVersion : Enum {
    public int value__;
    public static MqttProtocolVersion Unknown;
    public static MqttProtocolVersion V310;
    public static MqttProtocolVersion V311;
    public static MqttProtocolVersion V500;
}
public static class MQTTnet.Formatter.MqttPubAckPacketFactory : object {
    public static MqttPubAckPacket Create(MqttApplicationMessageReceivedEventArgs applicationMessageReceivedEventArgs);
}
public static class MQTTnet.Formatter.MqttPubCompPacketFactory : object {
    public static MqttPubCompPacket Create(MqttPubRelPacket pubRelPacket, MqttApplicationMessageReceivedReasonCode reasonCode);
}
public static class MQTTnet.Formatter.MqttPublishPacketFactory : object {
    public static MqttPublishPacket Create(MqttApplicationMessage applicationMessage);
}
public static class MQTTnet.Formatter.MqttPubRecPacketFactory : object {
    public static MqttPubRecPacket Create(MqttApplicationMessageReceivedEventArgs applicationMessageReceivedEventArgs);
    private static MqttPubRecPacket Create(MqttPublishPacket publishPacket, MqttApplicationMessageReceivedReasonCode applicationMessageReceivedReasonCode);
}
public static class MQTTnet.Formatter.MqttPubRelPacketFactory : object {
    public static MqttPubRelPacket Create(MqttPubRecPacket pubRecPacket, MqttApplicationMessageReceivedReasonCode reasonCode);
}
public static class MQTTnet.Formatter.MqttSubscribePacketFactory : object {
    public static MqttSubscribePacket Create(MqttClientSubscribeOptions clientSubscribeOptions);
}
public static class MQTTnet.Formatter.MqttUnsubscribePacketFactory : object {
    public static MqttUnsubscribePacket Create(MqttClientUnsubscribeOptions clientUnsubscribeOptions);
}
public class MQTTnet.Formatter.ReadFixedHeaderResult : ValueType {
    [CompilerGeneratedAttribute]
private static ReadFixedHeaderResult <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private static ReadFixedHeaderResult <ConnectionClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnectionClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttFixedHeader <FixedHeader>k__BackingField;
    public static ReadFixedHeaderResult Canceled { get; }
    public static ReadFixedHeaderResult ConnectionClosed { get; }
    public bool IsCanceled { get; public set; }
    public bool IsConnectionClosed { get; public set; }
    public MqttFixedHeader FixedHeader { get; public set; }
    private static ReadFixedHeaderResult();
    [CompilerGeneratedAttribute]
public static ReadFixedHeaderResult get_Canceled();
    [CompilerGeneratedAttribute]
public static ReadFixedHeaderResult get_ConnectionClosed();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
public void set_IsCanceled(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsConnectionClosed();
    [CompilerGeneratedAttribute]
public void set_IsConnectionClosed(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MqttFixedHeader get_FixedHeader();
    [CompilerGeneratedAttribute]
public void set_FixedHeader(MqttFixedHeader value);
}
public class MQTTnet.Formatter.V3.MqttV3PacketFormatter : object {
    private static int FixedHeaderSize;
    private static MqttDisconnectPacket DisconnectPacket;
    private MqttBufferReader _bufferReader;
    private MqttBufferWriter _bufferWriter;
    private MqttProtocolVersion _mqttProtocolVersion;
    public MqttV3PacketFormatter(MqttBufferWriter bufferWriter, MqttProtocolVersion mqttProtocolVersion);
    private static MqttV3PacketFormatter();
    public sealed virtual MqttPacket Decode(ReceivedMqttPacket receivedMqttPacket);
    public sealed virtual MqttPacketBuffer Encode(MqttPacket packet);
    private MqttPacket DecodeConnAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeConnAckPacketV311(ArraySegment`1<byte> body);
    private MqttPacket DecodeConnectPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePubAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePubCompPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePublishPacket(ReceivedMqttPacket receivedMqttPacket);
    private MqttPacket DecodePubRecPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePubRelPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeSubAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeSubscribePacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeUnsubAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeUnsubscribePacket(ArraySegment`1<byte> body);
    private byte EncodeConnAckPacket(MqttConnAckPacket packet, MqttBufferWriter bufferWriter);
    private byte EncodeConnAckPacketV311(MqttConnAckPacket packet, MqttBufferWriter bufferWriter);
    private byte EncodeConnectPacket(MqttConnectPacket packet, MqttBufferWriter bufferWriter);
    private byte EncodeConnectPacketV311(MqttConnectPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodeEmptyPacket(MqttControlPacketType type);
    private byte EncodePacket(MqttPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodePubAckPacket(MqttPubAckPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodePubCompPacket(MqttPubCompPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodePublishPacket(MqttPublishPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodePubRecPacket(MqttPubRecPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodePubRelPacket(MqttPubRelPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodeSubAckPacket(MqttSubAckPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodeSubscribePacket(MqttSubscribePacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodeUnsubAckPacket(MqttUnsubAckPacket packet, MqttBufferWriter bufferWriter);
    private static byte EncodeUnsubscribePacket(MqttUnsubscribePacket packet, MqttBufferWriter bufferWriter);
    private static void ThrowIfBodyIsEmpty(ArraySegment`1<byte> body);
    private void ValidateConnectPacket(MqttConnectPacket packet);
    private static void ValidatePublishPacket(MqttPublishPacket packet);
}
public class MQTTnet.Formatter.V5.MqttV5PacketDecoder : object {
    private MqttBufferReader _bufferReader;
    public MqttPacket Decode(ReceivedMqttPacket receivedMqttPacket);
    private MqttPacket DecodeAuthPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeConnAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeConnectPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeDisconnectPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePubAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePubCompPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePublishPacket(byte header, ArraySegment`1<byte> body);
    private MqttPacket DecodePubRecPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodePubRelPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeSubAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeSubscribePacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeUnsubAckPacket(ArraySegment`1<byte> body);
    private MqttPacket DecodeUnsubscribePacket(ArraySegment`1<byte> body);
    private static void ThrowIfBodyIsEmpty(ArraySegment`1<byte> body);
}
public class MQTTnet.Formatter.V5.MqttV5PacketEncoder : object {
    private static int FixedHeaderSize;
    private MqttBufferWriter _bufferWriter;
    private MqttV5PropertiesWriter _propertiesWriter;
    public MqttV5PacketEncoder(MqttBufferWriter bufferWriter);
    public MqttPacketBuffer Encode(MqttPacket packet);
    private byte EncodeAuthPacket(MqttAuthPacket packet);
    private byte EncodeConnAckPacket(MqttConnAckPacket packet);
    private byte EncodeConnectPacket(MqttConnectPacket packet);
    private byte EncodeDisconnectPacket(MqttDisconnectPacket packet);
    private byte EncodePacket(MqttPacket packet);
    private static byte EncodePingReqPacket();
    private static byte EncodePingRespPacket();
    private byte EncodePubAckPacket(MqttPubAckPacket packet);
    private byte EncodePubCompPacket(MqttPubCompPacket packet);
    private byte EncodePublishPacket(MqttPublishPacket packet);
    private byte EncodePubRecPacket(MqttPubRecPacket packet);
    private byte EncodePubRelPacket(MqttPubRelPacket packet);
    private byte EncodeSubAckPacket(MqttSubAckPacket packet);
    private byte EncodeSubscribePacket(MqttSubscribePacket packet);
    private byte EncodeUnsubAckPacket(MqttUnsubAckPacket packet);
    private byte EncodeUnsubscribePacket(MqttUnsubscribePacket packet);
    private static void ThrowIfPacketIdentifierIsInvalid(ushort packetIdentifier, MqttPacket packet);
}
public class MQTTnet.Formatter.V5.MqttV5PacketFormatter : object {
    private MqttV5PacketDecoder _decoder;
    private MqttV5PacketEncoder _encoder;
    public MqttV5PacketFormatter(MqttBufferWriter bufferWriter);
    public sealed virtual MqttPacket Decode(ReceivedMqttPacket receivedMqttPacket);
    public sealed virtual MqttPacketBuffer Encode(MqttPacket mqttPacket);
}
public class MQTTnet.Formatter.V5.MqttV5PropertiesReader : ValueType {
    private MqttBufferReader _body;
    private int _length;
    private int _targetOffset;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <CollectedUserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPropertyId <CurrentPropertyId>k__BackingField;
    public List`1<MqttUserProperty> CollectedUserProperties { get; private set; }
    public MqttPropertyId CurrentPropertyId { get; private set; }
    public MqttV5PropertiesReader(MqttBufferReader body);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_CollectedUserProperties();
    [CompilerGeneratedAttribute]
private void set_CollectedUserProperties(List`1<MqttUserProperty> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public MqttPropertyId get_CurrentPropertyId();
    [CompilerGeneratedAttribute]
private void set_CurrentPropertyId(MqttPropertyId value);
    public bool MoveNext();
    public string ReadAssignedClientIdentifier();
    public Byte[] ReadAuthenticationData();
    public string ReadAuthenticationMethod();
    public string ReadContentType();
    public Byte[] ReadCorrelationData();
    public UInt32 ReadMaximumPacketSize();
    public MqttQualityOfServiceLevel ReadMaximumQoS();
    public UInt32 ReadMessageExpiryInterval();
    public MqttPayloadFormatIndicator ReadPayloadFormatIndicator();
    public string ReadReasonString();
    public ushort ReadReceiveMaximum();
    public string ReadResponseInformation();
    public string ReadResponseTopic();
    public bool ReadRetainAvailable();
    public ushort ReadServerKeepAlive();
    public string ReadServerReference();
    public UInt32 ReadSessionExpiryInterval();
    public bool ReadSharedSubscriptionAvailable();
    public UInt32 ReadSubscriptionIdentifier();
    public bool ReadSubscriptionIdentifiersAvailable();
    public ushort ReadTopicAlias();
    public ushort ReadTopicAliasMaximum();
    public bool ReadWildcardSubscriptionAvailable();
    public UInt32 ReadWillDelayInterval();
    public bool RequestProblemInformation();
    public bool RequestResponseInformation();
    public void ThrowInvalidPropertyIdException(Type type);
}
public class MQTTnet.Formatter.V5.MqttV5PropertiesWriter : object {
    private MqttBufferWriter _bufferWriter;
    public int Length { get; }
    public MqttV5PropertiesWriter(MqttBufferWriter bufferWriter);
    public int get_Length();
    public void Reset();
    public void WriteAssignedClientIdentifier(string value);
    public void WriteAuthenticationData(Byte[] value);
    public void WriteAuthenticationMethod(string value);
    public void WriteContentType(string value);
    public void WriteCorrelationData(Byte[] value);
    public void WriteMaximumPacketSize(UInt32 value);
    public void WriteMaximumQoS(MqttQualityOfServiceLevel value);
    public void WriteMessageExpiryInterval(UInt32 value);
    public void WritePayloadFormatIndicator(MqttPayloadFormatIndicator value);
    public void WriteReasonString(string value);
    public void WriteReceiveMaximum(ushort value);
    public void WriteRequestProblemInformation(bool value);
    public void WriteRequestResponseInformation(bool value);
    public void WriteResponseInformation(string value);
    public void WriteResponseTopic(string value);
    public void WriteRetainAvailable(bool value);
    public void WriteServerKeepAlive(ushort value);
    public void WriteServerReference(string value);
    public void WriteSessionExpiryInterval(UInt32 value);
    public void WriteSharedSubscriptionAvailable(bool value);
    public void WriteSubscriptionIdentifier(UInt32 value);
    public void WriteSubscriptionIdentifiers(ICollection`1<UInt32> value);
    public void WriteSubscriptionIdentifiersAvailable(bool value);
    public void WriteTo(MqttBufferWriter target);
    public void WriteTopicAlias(ushort value);
    public void WriteTopicAliasMaximum(ushort value);
    public void WriteUserProperties(List`1<MqttUserProperty> userProperties);
    public void WriteWildcardSubscriptionAvailable(bool value);
    public void WriteWillDelayInterval(UInt32 value);
    private void Write(MqttPropertyId id, bool value);
    private void Write(MqttPropertyId id, byte value);
    private void Write(MqttPropertyId id, ushort value);
    private void Write(MqttPropertyId id, string value);
    private void Write(MqttPropertyId id, Byte[] value);
    private void WriteAsFourByteInteger(MqttPropertyId id, UInt32 value);
    private void WriteAsVariableByteInteger(MqttPropertyId id, UInt32 value);
}
public class MQTTnet.Implementations.CrossPlatformSocket : object {
    private Socket _socket;
    private NetworkStream _networkStream;
    public bool DualMode { get; public set; }
    public bool IsConnected { get; }
    public bool KeepAlive { get; public set; }
    public LingerOption LingerState { get; public set; }
    public EndPoint LocalEndPoint { get; }
    public bool NoDelay { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public EndPoint RemoteEndPoint { get; }
    public bool ReuseAddress { get; public set; }
    public int SendBufferSize { get; public set; }
    public int SendTimeout { get; public set; }
    public int TcpKeepAliveInterval { get; public set; }
    public int TcpKeepAliveRetryCount { get; public set; }
    public int TcpKeepAliveTime { get; public set; }
    public CrossPlatformSocket(AddressFamily addressFamily, ProtocolType protocolType);
    public CrossPlatformSocket(ProtocolType protocolType);
    private CrossPlatformSocket(Socket socket);
    public bool get_DualMode();
    public void set_DualMode(bool value);
    public bool get_IsConnected();
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public LingerOption get_LingerState();
    public void set_LingerState(LingerOption value);
    public EndPoint get_LocalEndPoint();
    public bool get_NoDelay();
    public void set_NoDelay(bool value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public EndPoint get_RemoteEndPoint();
    public bool get_ReuseAddress();
    public void set_ReuseAddress(bool value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public int get_TcpKeepAliveInterval();
    public void set_TcpKeepAliveInterval(int value);
    public int get_TcpKeepAliveRetryCount();
    public void set_TcpKeepAliveRetryCount(int value);
    public int get_TcpKeepAliveTime();
    public void set_TcpKeepAliveTime(int value);
    [AsyncStateMachineAttribute("MQTTnet.Implementations.CrossPlatformSocket/<AcceptAsync>d__44")]
public Task`1<CrossPlatformSocket> AcceptAsync(CancellationToken cancellationToken);
    public void Bind(EndPoint localEndPoint);
    [AsyncStateMachineAttribute("MQTTnet.Implementations.CrossPlatformSocket/<ConnectAsync>d__46")]
public Task ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public NetworkStream GetStream();
    public void Listen(int connectionBacklog);
    public Task`1<int> ReceiveAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    public Task SendAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags);
}
public class MQTTnet.Implementations.MqttClientAdapterFactory : object {
    public sealed virtual IMqttChannelAdapter CreateClientAdapter(MqttClientOptions options, MqttPacketInspector packetInspector, IMqttNetLogger logger);
}
public class MQTTnet.Implementations.MqttTcpChannel : object {
    private MqttClientOptions _clientOptions;
    private MqttClientTcpOptions _tcpOptions;
    private Stream _stream;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSecureConnection>k__BackingField;
    public X509Certificate2 ClientCertificate { get; }
    public string Endpoint { get; private set; }
    public bool IsSecureConnection { get; }
    public MqttTcpChannel(MqttClientOptions clientOptions);
    public MqttTcpChannel(Stream stream, string endpoint, X509Certificate2 clientCertificate);
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Endpoint();
    [CompilerGeneratedAttribute]
private void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSecureConnection();
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttTcpChannel/<ConnectAsync>d__16")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    public sealed virtual Task DisconnectAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttTcpChannel/<ReadAsync>d__19")]
public sealed virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttTcpChannel/<WriteAsync>d__20")]
public sealed virtual Task WriteAsync(ReadOnlySequence`1<byte> buffer, bool isEndOfPacket, CancellationToken cancellationToken);
    private X509Certificate InternalUserCertificateSelectionCallback(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers);
    private bool InternalUserCertificateValidationCallback(object sender, X509Certificate x509Certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private X509CertificateCollection LoadCertificates();
}
public class MQTTnet.Implementations.MqttWebSocketChannel : object {
    private MqttClientWebSocketOptions _options;
    private AsyncLock _sendLock;
    private WebSocket _webSocket;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSecureConnection>k__BackingField;
    public X509Certificate2 ClientCertificate { get; }
    public string Endpoint { get; }
    public bool IsSecureConnection { get; private set; }
    public MqttWebSocketChannel(MqttClientWebSocketOptions options);
    public MqttWebSocketChannel(WebSocket webSocket, string endpoint, bool isSecureConnection, X509Certificate2 clientCertificate);
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Endpoint();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSecureConnection();
    [CompilerGeneratedAttribute]
private void set_IsSecureConnection(bool value);
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttWebSocketChannel/<ConnectAsync>d__15")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttWebSocketChannel/<DisconnectAsync>d__16")]
public sealed virtual Task DisconnectAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttWebSocketChannel/<ReadAsync>d__18")]
public sealed virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.Implementations.MqttWebSocketChannel/<WriteAsync>d__19")]
public sealed virtual Task WriteAsync(ReadOnlySequence`1<byte> buffer, bool isEndOfPacket, CancellationToken cancellationToken);
    private void Cleanup();
    private IWebProxy CreateProxy();
    private void SetupClientWebSocket(ClientWebSocket clientWebSocket);
}
public interface MQTTnet.IMqttClient {
    public bool IsConnected { get; }
    public MqttClientOptions Options { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectingAsync(Func`2<MqttClientConnectingEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectingAsync(Func`2<MqttClientConnectingEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    public abstract virtual bool get_IsConnected();
    public abstract virtual MqttClientOptions get_Options();
    public abstract virtual Task`1<MqttClientConnectResult> ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DisconnectAsync(MqttClientDisconnectOptions options, CancellationToken cancellationToken);
    public abstract virtual Task PingAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<MqttClientPublishResult> PublishAsync(MqttApplicationMessage applicationMessage, CancellationToken cancellationToken);
    public abstract virtual Task SendExtendedAuthenticationExchangeDataAsync(MqttExtendedAuthenticationExchangeData data, CancellationToken cancellationToken);
    public abstract virtual Task`1<MqttClientSubscribeResult> SubscribeAsync(MqttClientSubscribeOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<MqttClientUnsubscribeResult> UnsubscribeAsync(MqttClientUnsubscribeOptions options, CancellationToken cancellationToken);
}
public interface MQTTnet.IMqttClientCertificatesProvider {
    public abstract virtual X509CertificateCollection GetCertificates();
}
public interface MQTTnet.IMqttClientChannelOptions {
    public MqttClientTlsOptions TlsOptions { get; }
    public abstract virtual MqttClientTlsOptions get_TlsOptions();
}
public interface MQTTnet.IMqttClientCredentialsProvider {
    public abstract virtual Byte[] GetPassword(MqttClientOptions clientOptions);
    public abstract virtual string GetUserName(MqttClientOptions clientOptions);
}
public interface MQTTnet.IMqttExtendedAuthenticationExchangeHandler {
    public abstract virtual Task HandleRequestAsync(MqttExtendedAuthenticationExchangeContext context);
}
public class MQTTnet.Internal.AsyncEvent`1 : object {
    private List`1<AsyncEventInvocator`1<TEventArgs>> _handlers;
    private ICollection`1<AsyncEventInvocator`1<TEventArgs>> _handlersForInvoke;
    [CompilerGeneratedAttribute]
private bool <HasHandlers>k__BackingField;
    public bool HasHandlers { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_HasHandlers();
    [CompilerGeneratedAttribute]
private void set_HasHandlers(bool value);
    public void AddHandler(Func`2<TEventArgs, Task> handler);
    public void AddHandler(Action`1<TEventArgs> handler);
    [AsyncStateMachineAttribute("MQTTnet.Internal.AsyncEvent`1/<InvokeAsync>d__9")]
public Task InvokeAsync(TEventArgs eventArgs);
    public void RemoveHandler(Func`2<TEventArgs, Task> handler);
    public void RemoveHandler(Action`1<TEventArgs> handler);
    [AsyncStateMachineAttribute("MQTTnet.Internal.AsyncEvent`1/<TryInvokeAsync>d__12")]
public Task TryInvokeAsync(TEventArgs eventArgs, MqttNetSourceLogger logger);
}
[IsReadOnlyAttribute]
public class MQTTnet.Internal.AsyncEventInvocator`1 : ValueType {
    private Action`1<TEventArgs> _handler;
    private Func`2<TEventArgs, Task> _asyncHandler;
    public AsyncEventInvocator`1(Action`1<TEventArgs> handler, Func`2<TEventArgs, Task> asyncHandler);
    public bool WrapsHandler(Action`1<TEventArgs> handler);
    public bool WrapsHandler(Func`2<TEventArgs, Task> handler);
    public Task InvokeAsync(TEventArgs eventArgs);
}
public class MQTTnet.Internal.AsyncLock : object {
    private Task`1<IDisposable> _completedTask;
    private IDisposable _releaser;
    private object _syncRoot;
    private Queue`1<AsyncLockWaiter> _waiters;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    private bool _isLocked;
    public sealed virtual void Dispose();
    public Task`1<IDisposable> EnterAsync(CancellationToken cancellationToken);
    private void Release();
}
public class MQTTnet.Internal.AsyncQueue`1 : object {
    private AsyncSignal _signal;
    private object _syncRoot;
    private ConcurrentQueue`1<TItem> _queue;
    private bool _isDisposed;
    public int Count { get; }
    public int get_Count();
    public void Clear();
    public sealed virtual void Dispose();
    public void Enqueue(TItem item);
    public AsyncQueueDequeueResult`1<TItem> TryDequeue();
    [AsyncStateMachineAttribute("MQTTnet.Internal.AsyncQueue`1/<TryDequeueAsync>d__10")]
public Task`1<AsyncQueueDequeueResult`1<TItem>> TryDequeueAsync(CancellationToken cancellationToken);
}
public class MQTTnet.Internal.AsyncQueueDequeueResult`1 : object {
    public static AsyncQueueDequeueResult`1<TItem> NonSuccess;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    public bool IsSuccess { get; }
    public TItem Item { get; }
    public AsyncQueueDequeueResult`1(bool isSuccess, TItem item);
    private static AsyncQueueDequeueResult`1();
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public TItem get_Item();
    public static AsyncQueueDequeueResult`1<TItem> Success(TItem item);
}
public class MQTTnet.Internal.AsyncSignal : object {
    private object _syncRoot;
    private bool _isDisposed;
    private bool _isSignaled;
    private AsyncSignalWaiter _waiter;
    public sealed virtual void Dispose();
    public void Set();
    public Task WaitAsync(CancellationToken cancellationToken);
    private void Cleanup();
    private void ThrowIfDisposed();
}
public class MQTTnet.Internal.AsyncTaskCompletionSource`1 : object {
    private TaskCompletionSource`1<TResult> _taskCompletionSource;
    public Task`1<TResult> Task { get; }
    public Task`1<TResult> get_Task();
    public void TrySetCanceled();
    public void TrySetException(Exception exception);
    public bool TrySetResult(TResult result);
}
public class MQTTnet.Internal.BlockingQueue`1 : object {
    private object _syncRoot;
    private LinkedList`1<TItem> _items;
    private ManualResetEventSlim _gate;
    public int Count { get; }
    public int get_Count();
    public void Enqueue(TItem item);
    public TItem Dequeue(CancellationToken cancellationToken);
    public TItem PeekAndWait(CancellationToken cancellationToken);
    public void RemoveFirst(Predicate`1<TItem> match);
    public TItem RemoveFirst();
    public void Clear();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class MQTTnet.Internal.CancellationTokenSourceExtensions : object {
    [ExtensionAttribute]
public static bool TryCancel(CancellationTokenSource cancellationTokenSource, bool throwOnFirstException);
}
public static class MQTTnet.Internal.CompletedTask : object {
    public static Task Instance;
    private static CompletedTask();
}
public abstract class MQTTnet.Internal.Disposable : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected bool IsDisposed { get; private set; }
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    protected void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public static class MQTTnet.Internal.EmptyBuffer : object {
    public static Byte[] Array;
    public static ArraySegment`1<byte> ArraySegment;
    public static ReadOnlySequence`1<byte> ReadOnlySequence;
    private static EmptyBuffer();
}
public class MQTTnet.Internal.MqttClientEvents : object {
    [CompilerGeneratedAttribute]
private AsyncEvent`1<MqttApplicationMessageReceivedEventArgs> <ApplicationMessageReceivedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncEvent`1<MqttClientConnectedEventArgs> <ConnectedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncEvent`1<MqttClientConnectingEventArgs> <ConnectingEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncEvent`1<MqttClientDisconnectedEventArgs> <DisconnectedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncEvent`1<InspectMqttPacketEventArgs> <InspectPacketEvent>k__BackingField;
    public AsyncEvent`1<MqttApplicationMessageReceivedEventArgs> ApplicationMessageReceivedEvent { get; }
    public AsyncEvent`1<MqttClientConnectedEventArgs> ConnectedEvent { get; }
    public AsyncEvent`1<MqttClientConnectingEventArgs> ConnectingEvent { get; }
    public AsyncEvent`1<MqttClientDisconnectedEventArgs> DisconnectedEvent { get; }
    public AsyncEvent`1<InspectMqttPacketEventArgs> InspectPacketEvent { get; }
    [CompilerGeneratedAttribute]
public AsyncEvent`1<MqttApplicationMessageReceivedEventArgs> get_ApplicationMessageReceivedEvent();
    [CompilerGeneratedAttribute]
public AsyncEvent`1<MqttClientConnectedEventArgs> get_ConnectedEvent();
    [CompilerGeneratedAttribute]
public AsyncEvent`1<MqttClientConnectingEventArgs> get_ConnectingEvent();
    [CompilerGeneratedAttribute]
public AsyncEvent`1<MqttClientDisconnectedEventArgs> get_DisconnectedEvent();
    [CompilerGeneratedAttribute]
public AsyncEvent`1<InspectMqttPacketEventArgs> get_InspectPacketEvent();
}
public static class MQTTnet.Internal.MqttClientResultFactory : object {
    public static MqttClientConnectResultFactory ConnectResult;
    public static MqttClientPublishResultFactory PublishResult;
    public static MqttClientSubscribeResultFactory SubscribeResult;
    public static MqttClientUnsubscribeResultFactory UnsubscribeResult;
    private static MqttClientResultFactory();
}
public static class MQTTnet.Internal.MqttMemoryHelper : object {
    public static void Copy(Byte[] source, int sourceIndex, Byte[] destination, int destinationIndex, int length);
    public static void Copy(ReadOnlySequence`1<byte> sequence, int sourceIndex, Byte[] destination, int destinationIndex, int length);
    public static bool SequenceEqual(ArraySegment`1<byte> source, ArraySegment`1<byte> target);
    public static bool SequenceEqual(ReadOnlySequence`1<byte> source, ReadOnlySequence`1<byte> target);
}
public class MQTTnet.Internal.MqttPacketBus : object {
    private LinkedList`1[] _partitions;
    private AsyncSignal _signal;
    private object _syncRoot;
    private int _activePartition;
    public int TotalItemsCount { get; }
    public int get_TotalItemsCount();
    public void Clear();
    [AsyncStateMachineAttribute("MQTTnet.Internal.MqttPacketBus/<DequeueItemAsync>d__7")]
public Task`1<MqttPacketBusItem> DequeueItemAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public MqttPacketBusItem DropFirstItem(MqttPacketBusPartition partition);
    public void EnqueueItem(MqttPacketBusItem item, MqttPacketBusPartition partition);
    public List`1<MqttPacket> ExportPackets(MqttPacketBusPartition partition);
    public int ItemsCount(MqttPacketBusPartition partition);
    public int PartitionItemsCount(MqttPacketBusPartition partition);
    private void MoveActivePartition();
}
public class MQTTnet.Internal.MqttPacketBusItem : object {
    private AsyncTaskCompletionSource`1<bool> _promise;
    [CompilerGeneratedAttribute]
private EventHandler Completed;
    [CompilerGeneratedAttribute]
private MqttPacket <Packet>k__BackingField;
    public MqttPacket Packet { get; }
    public MqttPacketBusItem(MqttPacket packet);
    [CompilerGeneratedAttribute]
public void add_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(EventHandler value);
    [CompilerGeneratedAttribute]
public MqttPacket get_Packet();
    public void Cancel();
    public void Complete();
    public void Fail(Exception exception);
    public Task WaitAsync();
}
public enum MQTTnet.Internal.MqttPacketBusPartition : Enum {
    public int value__;
    public static MqttPacketBusPartition Data;
    public static MqttPacketBusPartition Control;
    public static MqttPacketBusPartition Health;
}
[ExtensionAttribute]
public static class MQTTnet.Internal.TaskExtensions : object {
    [ExtensionAttribute]
public static void RunInBackground(Task task, MqttNetSourceLogger logger);
    [AsyncStateMachineAttribute("MQTTnet.Internal.TaskExtensions/<WaitAsync>d__1")]
[ExtensionAttribute]
public static Task WaitAsync(Task task, Task sender, MqttNetSourceLogger logger);
}
public interface MQTTnet.LowLevelClient.ILowLevelMqttClient {
    public bool IsConnected { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    public abstract virtual bool get_IsConnected();
    public abstract virtual Task ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken);
    public abstract virtual Task DisconnectAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<MqttPacket> ReceiveAsync(CancellationToken cancellationToken);
    public abstract virtual Task SendAsync(MqttPacket packet, CancellationToken cancellationToken);
}
public class MQTTnet.LowLevelClient.LowLevelMqttClient : object {
    private IMqttClientAdapterFactory _clientAdapterFactory;
    private AsyncEvent`1<InspectMqttPacketEventArgs> _inspectPacketEvent;
    private MqttNetSourceLogger _logger;
    private IMqttNetLogger _rootLogger;
    private IMqttChannelAdapter _adapter;
    public bool IsConnected { get; }
    public LowLevelMqttClient(IMqttClientAdapterFactory clientAdapterFactory, IMqttNetLogger logger);
    public sealed virtual void add_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    public sealed virtual void remove_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    public sealed virtual bool get_IsConnected();
    [AsyncStateMachineAttribute("MQTTnet.LowLevelClient.LowLevelMqttClient/<ConnectAsync>d__11")]
public sealed virtual Task ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.LowLevelClient.LowLevelMqttClient/<DisconnectAsync>d__12")]
public sealed virtual Task DisconnectAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MQTTnet.LowLevelClient.LowLevelMqttClient/<ReceiveAsync>d__14")]
public sealed virtual Task`1<MqttPacket> ReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.LowLevelClient.LowLevelMqttClient/<SendAsync>d__15")]
public sealed virtual Task SendAsync(MqttPacket packet, CancellationToken cancellationToken);
}
public class MQTTnet.MqttApplicationMessage : object {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CorrelationData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dup>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MessageExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<byte> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPayloadFormatIndicator <PayloadFormatIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <QualityOfServiceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Retain>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <SubscriptionIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TopicAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public string ContentType { get; public set; }
    public Byte[] CorrelationData { get; public set; }
    public bool Dup { get; public set; }
    public UInt32 MessageExpiryInterval { get; public set; }
    unknown ArraySegment`1<byte> PayloadSegment {public set; }
    public ReadOnlySequence`1<byte> Payload { get; public set; }
    public MqttPayloadFormatIndicator PayloadFormatIndicator { get; public set; }
    public MqttQualityOfServiceLevel QualityOfServiceLevel { get; public set; }
    public string ResponseTopic { get; public set; }
    public bool Retain { get; public set; }
    public List`1<UInt32> SubscriptionIdentifiers { get; public set; }
    public string Topic { get; public set; }
    public ushort TopicAlias { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_CorrelationData();
    [CompilerGeneratedAttribute]
public void set_CorrelationData(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_Dup();
    [CompilerGeneratedAttribute]
public void set_Dup(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_MessageExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_MessageExpiryInterval(UInt32 value);
    public void set_PayloadSegment(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public ReadOnlySequence`1<byte> get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(ReadOnlySequence`1<byte> value);
    [CompilerGeneratedAttribute]
public MqttPayloadFormatIndicator get_PayloadFormatIndicator();
    [CompilerGeneratedAttribute]
public void set_PayloadFormatIndicator(MqttPayloadFormatIndicator value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_QualityOfServiceLevel();
    [CompilerGeneratedAttribute]
public void set_QualityOfServiceLevel(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public string get_ResponseTopic();
    [CompilerGeneratedAttribute]
public void set_ResponseTopic(string value);
    [CompilerGeneratedAttribute]
public bool get_Retain();
    [CompilerGeneratedAttribute]
public void set_Retain(bool value);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_SubscriptionIdentifiers();
    [CompilerGeneratedAttribute]
public void set_SubscriptionIdentifiers(List`1<UInt32> value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    [CompilerGeneratedAttribute]
public ushort get_TopicAlias();
    [CompilerGeneratedAttribute]
public void set_TopicAlias(ushort value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
}
public class MQTTnet.MqttApplicationMessageBuilder : object {
    private string _contentType;
    private Byte[] _correlationData;
    private UInt32 _messageExpiryInterval;
    private MqttPayloadFormatIndicator _payloadFormatIndicator;
    private ReadOnlySequence`1<byte> _payload;
    private MqttQualityOfServiceLevel _qualityOfServiceLevel;
    private string _responseTopic;
    private bool _retain;
    private List`1<UInt32> _subscriptionIdentifiers;
    private string _topic;
    private ushort _topicAlias;
    private List`1<MqttUserProperty> _userProperties;
    public MqttApplicationMessage Build();
    public MqttApplicationMessageBuilder WithContentType(string contentType);
    public MqttApplicationMessageBuilder WithCorrelationData(Byte[] correlationData);
    public MqttApplicationMessageBuilder WithMessageExpiryInterval(UInt32 messageExpiryInterval);
    public MqttApplicationMessageBuilder WithPayload(Byte[] payload);
    public MqttApplicationMessageBuilder WithPayload(ArraySegment`1<byte> payloadSegment);
    public MqttApplicationMessageBuilder WithPayload(IEnumerable`1<byte> payload);
    public MqttApplicationMessageBuilder WithPayload(Stream payload);
    public MqttApplicationMessageBuilder WithPayload(Stream payload, long length);
    public MqttApplicationMessageBuilder WithPayload(string payload);
    public MqttApplicationMessageBuilder WithPayload(ReadOnlySequence`1<byte> payload);
    public MqttApplicationMessageBuilder WithPayloadFormatIndicator(MqttPayloadFormatIndicator payloadFormatIndicator);
    public MqttApplicationMessageBuilder WithPayloadSegment(ArraySegment`1<byte> payloadSegment);
    public MqttApplicationMessageBuilder WithPayloadSegment(ReadOnlyMemory`1<byte> payloadSegment);
    public MqttApplicationMessageBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qualityOfServiceLevel);
    public MqttApplicationMessageBuilder WithResponseTopic(string responseTopic);
    public MqttApplicationMessageBuilder WithRetainFlag(bool value);
    public MqttApplicationMessageBuilder WithSubscriptionIdentifier(UInt32 subscriptionIdentifier);
    public MqttApplicationMessageBuilder WithTopic(string topic);
    public MqttApplicationMessageBuilder WithTopicAlias(ushort topicAlias);
    public MqttApplicationMessageBuilder WithUserProperty(string name, string value);
}
[ExtensionAttribute]
public static class MQTTnet.MqttApplicationMessageExtensions : object {
    [ExtensionAttribute]
public static string ConvertPayloadToString(MqttApplicationMessage applicationMessage);
}
public class MQTTnet.MqttApplicationMessageReceivedEventArgs : EventArgs {
    private Func`3<MqttApplicationMessageReceivedEventArgs, CancellationToken, Task> _acknowledgeHandler;
    private int _isAcknowledged;
    [CompilerGeneratedAttribute]
private MqttApplicationMessage <ApplicationMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoAcknowledge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHandled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessingFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttApplicationMessageReceivedReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <ResponseUserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPublishPacket <PublishPacket>k__BackingField;
    public MqttApplicationMessage ApplicationMessage { get; }
    public bool AutoAcknowledge { get; public set; }
    public string ClientId { get; }
    public bool IsHandled { get; public set; }
    public ushort PacketIdentifier { get; }
    public bool ProcessingFailed { get; public set; }
    public MqttApplicationMessageReceivedReasonCode ReasonCode { get; public set; }
    public string ResponseReasonString { get; public set; }
    public List`1<MqttUserProperty> ResponseUserProperties { get; }
    public object Tag { get; public set; }
    internal MqttPublishPacket PublishPacket { get; internal set; }
    public MqttApplicationMessageReceivedEventArgs(string clientId, MqttApplicationMessage applicationMessage, MqttPublishPacket publishPacket, Func`3<MqttApplicationMessageReceivedEventArgs, CancellationToken, Task> acknowledgeHandler);
    [CompilerGeneratedAttribute]
public MqttApplicationMessage get_ApplicationMessage();
    [CompilerGeneratedAttribute]
public bool get_AutoAcknowledge();
    [CompilerGeneratedAttribute]
public void set_AutoAcknowledge(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public bool get_IsHandled();
    [CompilerGeneratedAttribute]
public void set_IsHandled(bool value);
    public ushort get_PacketIdentifier();
    [CompilerGeneratedAttribute]
public bool get_ProcessingFailed();
    [CompilerGeneratedAttribute]
public void set_ProcessingFailed(bool value);
    [CompilerGeneratedAttribute]
public MqttApplicationMessageReceivedReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttApplicationMessageReceivedReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ResponseReasonString();
    [CompilerGeneratedAttribute]
public void set_ResponseReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_ResponseUserProperties();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(object value);
    [CompilerGeneratedAttribute]
internal MqttPublishPacket get_PublishPacket();
    [CompilerGeneratedAttribute]
internal void set_PublishPacket(MqttPublishPacket value);
    public Task AcknowledgeAsync(CancellationToken cancellationToken);
}
public enum MQTTnet.MqttApplicationMessageReceivedReasonCode : Enum {
    public int value__;
    public static MqttApplicationMessageReceivedReasonCode Success;
    public static MqttApplicationMessageReceivedReasonCode NoMatchingSubscribers;
    public static MqttApplicationMessageReceivedReasonCode UnspecifiedError;
    public static MqttApplicationMessageReceivedReasonCode ImplementationSpecificError;
    public static MqttApplicationMessageReceivedReasonCode NotAuthorized;
    public static MqttApplicationMessageReceivedReasonCode TopicNameInvalid;
    public static MqttApplicationMessageReceivedReasonCode PacketIdentifierInUse;
    public static MqttApplicationMessageReceivedReasonCode PacketIdentifierNotFound;
    public static MqttApplicationMessageReceivedReasonCode QuotaExceeded;
    public static MqttApplicationMessageReceivedReasonCode PayloadFormatInvalid;
}
public static class MQTTnet.MqttApplicationMessageValidator : object {
    public static void ThrowIfNotSupported(MqttApplicationMessage applicationMessage, MqttProtocolVersion protocolVersion);
    private static void Throw(string featureName);
}
public class MQTTnet.MqttClient : Disposable {
    private IMqttClientAdapterFactory _adapterFactory;
    private object _disconnectLock;
    private MqttClientEvents _events;
    private MqttNetSourceLogger _logger;
    private MqttPacketIdentifierProvider _packetIdentifierProvider;
    private IMqttNetLogger _rootLogger;
    private IMqttChannelAdapter _adapter;
    private bool _cleanDisconnectInitiated;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _connectionStatus;
    private int _disconnectReason;
    private string _disconnectReasonString;
    private List`1<MqttUserProperty> _disconnectUserProperties;
    private Task _keepAlivePacketsSenderTask;
    private DateTime _lastPacketSentTimestamp;
    private CancellationTokenSource _mqttClientAlive;
    private MqttPacketDispatcher _packetDispatcher;
    private Task _packetReceiverTask;
    private AsyncQueue`1<MqttPublishPacket> _publishPacketReceiverQueue;
    private Task _publishPacketReceiverTask;
    private MqttDisconnectPacket _unexpectedDisconnectPacket;
    [CompilerGeneratedAttribute]
private MqttClientOptions <Options>k__BackingField;
    public bool IsConnected { get; }
    public MqttClientOptions Options { get; private set; }
    public MqttClient(IMqttClientAdapterFactory channelFactory, IMqttNetLogger logger);
    public sealed virtual void add_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    public sealed virtual void remove_ApplicationMessageReceivedAsync(Func`2<MqttApplicationMessageReceivedEventArgs, Task> value);
    public sealed virtual void add_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    public sealed virtual void remove_ConnectedAsync(Func`2<MqttClientConnectedEventArgs, Task> value);
    public sealed virtual void add_ConnectingAsync(Func`2<MqttClientConnectingEventArgs, Task> value);
    public sealed virtual void remove_ConnectingAsync(Func`2<MqttClientConnectingEventArgs, Task> value);
    public sealed virtual void add_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    public sealed virtual void remove_DisconnectedAsync(Func`2<MqttClientDisconnectedEventArgs, Task> value);
    public sealed virtual void add_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    public sealed virtual void remove_InspectPacketAsync(Func`2<InspectMqttPacketEventArgs, Task> value);
    public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public sealed virtual MqttClientOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(MqttClientOptions value);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<ConnectAsync>d__42")]
public sealed virtual Task`1<MqttClientConnectResult> ConnectAsync(MqttClientOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<DisconnectAsync>d__43")]
public sealed virtual Task DisconnectAsync(MqttClientDisconnectOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<PingAsync>d__44")]
public sealed virtual Task PingAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<MqttClientPublishResult> PublishAsync(MqttApplicationMessage applicationMessage, CancellationToken cancellationToken);
    public sealed virtual Task SendExtendedAuthenticationExchangeDataAsync(MqttExtendedAuthenticationExchangeData data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<SubscribeAsync>d__47")]
public sealed virtual Task`1<MqttClientSubscribeResult> SubscribeAsync(MqttClientSubscribeOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<UnsubscribeAsync>d__48")]
public sealed virtual Task`1<MqttClientUnsubscribeResult> UnsubscribeAsync(MqttClientUnsubscribeOptions options, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    private Task AcknowledgeReceivedPublishPacket(MqttApplicationMessageReceivedEventArgs eventArgs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<Authenticate>d__51")]
private Task`1<MqttClientConnectResult> Authenticate(IMqttChannelAdapter channelAdapter, MqttClientOptions options, CancellationToken cancellationToken);
    private void Cleanup();
    private MqttClientConnectionStatus CompareExchangeConnectionStatus(MqttClientConnectionStatus value, MqttClientConnectionStatus comparand);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<ConnectInternal>d__54")]
private Task`1<MqttClientConnectResult> ConnectInternal(IMqttChannelAdapter channelAdapter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<DisconnectCore>d__55")]
private Task DisconnectCore(Task sender, Exception exception, MqttClientConnectResult connectResult, bool clientWasConnected);
    private Task DisconnectInternal(Task sender, Exception exception, MqttClientConnectResult connectResult);
    private bool DisconnectIsPendingOrFinished();
    private void EnqueueReceivedPublishPacket(MqttPublishPacket publishPacket);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<HandleReceivedApplicationMessage>d__59")]
private Task`1<MqttApplicationMessageReceivedEventArgs> HandleReceivedApplicationMessage(MqttPublishPacket publishPacket);
    private Task OnConnected(MqttClientConnectResult connectResult);
    private Task ProcessReceivedAuthPacket(MqttAuthPacket authPacket);
    private Task ProcessReceivedDisconnectPacket(MqttDisconnectPacket disconnectPacket);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<ProcessReceivedPublishPackets>d__63")]
private Task ProcessReceivedPublishPackets(CancellationToken cancellationToken);
    private Task ProcessReceivedPubRecPacket(MqttPubRecPacket pubRecPacket, CancellationToken cancellationToken);
    private Task ProcessReceivedPubRelPacket(MqttPubRelPacket pubRelPacket, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<PublishAtLeastOnce>d__66")]
private Task`1<MqttClientPublishResult> PublishAtLeastOnce(MqttPublishPacket publishPacket, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<PublishAtMostOnce>d__67")]
private Task`1<MqttClientPublishResult> PublishAtMostOnce(MqttPublishPacket publishPacket, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<PublishExactlyOnce>d__68")]
private Task`1<MqttClientPublishResult> PublishExactlyOnce(MqttPublishPacket publishPacket, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<Receive>d__69")]
private Task`1<MqttPacket> Receive(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<ReceivePacketsLoop>d__70")]
private Task ReceivePacketsLoop(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<Request>d__71`1")]
private Task`1<TResponsePacket> Request(MqttPacket requestPacket, CancellationToken cancellationToken);
    private Task Send(MqttPacket packet, CancellationToken cancellationToken);
    private void ThrowIfConnected(string message);
    private void ThrowIfNotConnected();
    private static void ThrowIfOptionsInvalid(MqttClientOptions options);
    private static void ThrowNotConnected();
    private void TryInitiateDisconnect();
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<TryProcessReceivedPacket>d__78")]
private Task TryProcessReceivedPacket(MqttPacket packet, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClient/<TrySendKeepAliveMessages>d__79")]
private Task TrySendKeepAliveMessages(CancellationToken cancellationToken);
}
public class MQTTnet.MqttClientCertificateSelectionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private String[] <AcceptableIssuers>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <LocalCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <RemoveCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHost>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientTcpOptions <TcpOptions>k__BackingField;
    public String[] AcceptableIssuers { get; }
    public X509CertificateCollection LocalCertificates { get; }
    public X509Certificate RemoveCertificate { get; }
    public string TargetHost { get; }
    public MqttClientTcpOptions TcpOptions { get; }
    public MqttClientCertificateSelectionEventArgs(string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers, MqttClientTcpOptions tcpOptions);
    [CompilerGeneratedAttribute]
public String[] get_AcceptableIssuers();
    [CompilerGeneratedAttribute]
public X509CertificateCollection get_LocalCertificates();
    [CompilerGeneratedAttribute]
public X509Certificate get_RemoveCertificate();
    [CompilerGeneratedAttribute]
public string get_TargetHost();
    [CompilerGeneratedAttribute]
public MqttClientTcpOptions get_TcpOptions();
}
public class MQTTnet.MqttClientCertificateValidationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private X509Certificate <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Chain <Chain>k__BackingField;
    [CompilerGeneratedAttribute]
private IMqttClientChannelOptions <ClientOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private SslPolicyErrors <SslPolicyErrors>k__BackingField;
    public X509Certificate Certificate { get; }
    public X509Chain Chain { get; }
    public IMqttClientChannelOptions ClientOptions { get; }
    public SslPolicyErrors SslPolicyErrors { get; }
    public MqttClientCertificateValidationEventArgs(X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, IMqttClientChannelOptions clientOptions);
    [CompilerGeneratedAttribute]
public X509Certificate get_Certificate();
    [CompilerGeneratedAttribute]
public X509Chain get_Chain();
    [CompilerGeneratedAttribute]
public IMqttClientChannelOptions get_ClientOptions();
    [CompilerGeneratedAttribute]
public SslPolicyErrors get_SslPolicyErrors();
}
public class MQTTnet.MqttClientConnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MqttClientConnectResult <ConnectResult>k__BackingField;
    public MqttClientConnectResult ConnectResult { get; }
    public MqttClientConnectedEventArgs(MqttClientConnectResult connectResult);
    [CompilerGeneratedAttribute]
public MqttClientConnectResult get_ConnectResult();
}
public class MQTTnet.MqttClientConnectingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MqttClientOptions <ClientOptions>k__BackingField;
    public MqttClientOptions ClientOptions { get; }
    public MqttClientConnectingEventArgs(MqttClientOptions clientOptions);
    [CompilerGeneratedAttribute]
public MqttClientOptions get_ClientOptions();
}
public enum MQTTnet.MqttClientConnectionStatus : Enum {
    public int value__;
    public static MqttClientConnectionStatus Disconnected;
    public static MqttClientConnectionStatus Disconnecting;
    public static MqttClientConnectionStatus Connected;
    public static MqttClientConnectionStatus Connecting;
}
public class MQTTnet.MqttClientConnectResult : object {
    [CompilerGeneratedAttribute]
private string <AssignedClientIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSessionPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <MaximumPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <MaximumQoS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <ReceiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientConnectResultCode <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetainAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ServerKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<UInt32> <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SharedSubscriptionAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubscriptionIdentifiersAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TopicAliasMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WildcardSubscriptionAvailable>k__BackingField;
    public string AssignedClientIdentifier { get; internal set; }
    public Byte[] AuthenticationData { get; internal set; }
    public string AuthenticationMethod { get; internal set; }
    public bool IsSessionPresent { get; internal set; }
    public Nullable`1<UInt32> MaximumPacketSize { get; internal set; }
    public MqttQualityOfServiceLevel MaximumQoS { get; internal set; }
    public string ReasonString { get; internal set; }
    public Nullable`1<ushort> ReceiveMaximum { get; internal set; }
    public string ResponseInformation { get; internal set; }
    public MqttClientConnectResultCode ResultCode { get; internal set; }
    public bool RetainAvailable { get; internal set; }
    public ushort ServerKeepAlive { get; internal set; }
    public string ServerReference { get; internal set; }
    public Nullable`1<UInt32> SessionExpiryInterval { get; internal set; }
    public bool SharedSubscriptionAvailable { get; internal set; }
    public bool SubscriptionIdentifiersAvailable { get; internal set; }
    public ushort TopicAliasMaximum { get; internal set; }
    public List`1<MqttUserProperty> UserProperties { get; internal set; }
    public bool WildcardSubscriptionAvailable { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_AssignedClientIdentifier();
    [CompilerGeneratedAttribute]
internal void set_AssignedClientIdentifier(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSessionPresent();
    [CompilerGeneratedAttribute]
internal void set_IsSessionPresent(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_MaximumPacketSize();
    [CompilerGeneratedAttribute]
internal void set_MaximumPacketSize(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_MaximumQoS();
    [CompilerGeneratedAttribute]
internal void set_MaximumQoS(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
internal void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_ReceiveMaximum();
    [CompilerGeneratedAttribute]
internal void set_ReceiveMaximum(Nullable`1<ushort> value);
    [CompilerGeneratedAttribute]
public string get_ResponseInformation();
    [CompilerGeneratedAttribute]
internal void set_ResponseInformation(string value);
    [CompilerGeneratedAttribute]
public MqttClientConnectResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
internal void set_ResultCode(MqttClientConnectResultCode value);
    [CompilerGeneratedAttribute]
public bool get_RetainAvailable();
    [CompilerGeneratedAttribute]
internal void set_RetainAvailable(bool value);
    [CompilerGeneratedAttribute]
public ushort get_ServerKeepAlive();
    [CompilerGeneratedAttribute]
internal void set_ServerKeepAlive(ushort value);
    [CompilerGeneratedAttribute]
public string get_ServerReference();
    [CompilerGeneratedAttribute]
internal void set_ServerReference(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<UInt32> get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
internal void set_SessionExpiryInterval(Nullable`1<UInt32> value);
    [CompilerGeneratedAttribute]
public bool get_SharedSubscriptionAvailable();
    [CompilerGeneratedAttribute]
internal void set_SharedSubscriptionAvailable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SubscriptionIdentifiersAvailable();
    [CompilerGeneratedAttribute]
internal void set_SubscriptionIdentifiersAvailable(bool value);
    [CompilerGeneratedAttribute]
public ushort get_TopicAliasMaximum();
    [CompilerGeneratedAttribute]
internal void set_TopicAliasMaximum(ushort value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
internal void set_UserProperties(List`1<MqttUserProperty> value);
    [CompilerGeneratedAttribute]
public bool get_WildcardSubscriptionAvailable();
    [CompilerGeneratedAttribute]
internal void set_WildcardSubscriptionAvailable(bool value);
}
public enum MQTTnet.MqttClientConnectResultCode : Enum {
    public int value__;
    public static MqttClientConnectResultCode Success;
    public static MqttClientConnectResultCode UnspecifiedError;
    public static MqttClientConnectResultCode MalformedPacket;
    public static MqttClientConnectResultCode ProtocolError;
    public static MqttClientConnectResultCode ImplementationSpecificError;
    public static MqttClientConnectResultCode UnsupportedProtocolVersion;
    public static MqttClientConnectResultCode ClientIdentifierNotValid;
    public static MqttClientConnectResultCode BadUserNameOrPassword;
    public static MqttClientConnectResultCode NotAuthorized;
    public static MqttClientConnectResultCode ServerUnavailable;
    public static MqttClientConnectResultCode ServerBusy;
    public static MqttClientConnectResultCode Banned;
    public static MqttClientConnectResultCode BadAuthenticationMethod;
    public static MqttClientConnectResultCode TopicNameInvalid;
    public static MqttClientConnectResultCode PacketTooLarge;
    public static MqttClientConnectResultCode QuotaExceeded;
    public static MqttClientConnectResultCode PayloadFormatInvalid;
    public static MqttClientConnectResultCode RetainNotSupported;
    public static MqttClientConnectResultCode QoSNotSupported;
    public static MqttClientConnectResultCode UseAnotherServer;
    public static MqttClientConnectResultCode ServerMoved;
    public static MqttClientConnectResultCode ConnectionRateExceeded;
}
public class MQTTnet.MqttClientConnectResultFactory : object {
    public MqttClientConnectResult Create(MqttConnAckPacket connAckPacket, MqttProtocolVersion protocolVersion);
    private static MqttClientConnectResultCode ConvertReturnCodeToResultCode(MqttConnectReturnCode connectReturnCode);
    private static MqttClientConnectResult CreateForMqtt311(MqttConnAckPacket connAckPacket);
    private static MqttClientConnectResult CreateForMqtt500(MqttConnAckPacket connAckPacket);
}
public class MQTTnet.MqttClientCredentials : object {
    private Byte[] _password;
    private string _userName;
    public MqttClientCredentials(string userName, Byte[] password);
    public sealed virtual Byte[] GetPassword(MqttClientOptions clientOptions);
    public sealed virtual string GetUserName(MqttClientOptions clientOptions);
}
public class MQTTnet.MqttClientDefaultCertificateValidationHandler : object {
    public static bool Handle(MqttClientCertificateValidationEventArgs eventArgs);
}
public class MQTTnet.MqttClientDisconnectedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ClientWasConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientConnectResult <ConnectResult>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientDisconnectReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public bool ClientWasConnected { get; }
    public MqttClientConnectResult ConnectResult { get; }
    public Exception Exception { get; }
    public MqttClientDisconnectReason Reason { get; }
    public string ReasonString { get; }
    public List`1<MqttUserProperty> UserProperties { get; }
    public MqttClientDisconnectedEventArgs(bool clientWasConnected, MqttClientConnectResult connectResult, MqttClientDisconnectReason reason, string reasonString, List`1<MqttUserProperty> userProperties, Exception exception);
    [CompilerGeneratedAttribute]
public bool get_ClientWasConnected();
    [CompilerGeneratedAttribute]
public MqttClientConnectResult get_ConnectResult();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public MqttClientDisconnectReason get_Reason();
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
}
public class MQTTnet.MqttClientDisconnectOptions : object {
    [CompilerGeneratedAttribute]
private MqttClientDisconnectOptionsReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public MqttClientDisconnectOptionsReason Reason { get; public set; }
    public string ReasonString { get; public set; }
    public UInt32 SessionExpiryInterval { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public MqttClientDisconnectOptionsReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(MqttClientDisconnectOptionsReason value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_SessionExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
}
public class MQTTnet.MqttClientDisconnectOptionsBuilder : object {
    private MqttClientDisconnectOptionsReason _reason;
    private string _reasonString;
    private UInt32 _sessionExpiryInterval;
    private List`1<MqttUserProperty> _userProperties;
    public MqttClientDisconnectOptions Build();
    public MqttClientDisconnectOptionsBuilder WithReason(MqttClientDisconnectOptionsReason value);
    public MqttClientDisconnectOptionsBuilder WithReasonString(string value);
    public MqttClientDisconnectOptionsBuilder WithSessionExpiryInterval(UInt32 value);
    public MqttClientDisconnectOptionsBuilder WithUserProperties(List`1<MqttUserProperty> userProperties);
    public MqttClientDisconnectOptionsBuilder WithUserProperty(string name, string value);
}
public enum MQTTnet.MqttClientDisconnectOptionsReason : Enum {
    public int value__;
    public static MqttClientDisconnectOptionsReason NormalDisconnection;
    public static MqttClientDisconnectOptionsReason DisconnectWithWillMessage;
    public static MqttClientDisconnectOptionsReason UnspecifiedError;
    public static MqttClientDisconnectOptionsReason MalformedPacket;
    public static MqttClientDisconnectOptionsReason ProtocolError;
    public static MqttClientDisconnectOptionsReason ImplementationSpecificError;
    public static MqttClientDisconnectOptionsReason TopicNameInvalid;
    public static MqttClientDisconnectOptionsReason ReceiveMaximumExceeded;
    public static MqttClientDisconnectOptionsReason TopicAliasInvalid;
    public static MqttClientDisconnectOptionsReason PacketTooLarge;
    public static MqttClientDisconnectOptionsReason MessageRateTooHigh;
    public static MqttClientDisconnectOptionsReason QuotaExceeded;
    public static MqttClientDisconnectOptionsReason AdministrativeAction;
    public static MqttClientDisconnectOptionsReason PayloadFormatInvalid;
}
public static class MQTTnet.MqttClientDisconnectOptionsValidator : object {
    public static void ThrowIfNotSupported(MqttClientDisconnectOptions options, MqttProtocolVersion protocolVersion);
    private static void Throw(string featureName);
}
public enum MQTTnet.MqttClientDisconnectReason : Enum {
    public int value__;
    public static MqttClientDisconnectReason NormalDisconnection;
    public static MqttClientDisconnectReason DisconnectWithWillMessage;
    public static MqttClientDisconnectReason UnspecifiedError;
    public static MqttClientDisconnectReason MalformedPacket;
    public static MqttClientDisconnectReason ProtocolError;
    public static MqttClientDisconnectReason ImplementationSpecificError;
    public static MqttClientDisconnectReason NotAuthorized;
    public static MqttClientDisconnectReason ServerBusy;
    public static MqttClientDisconnectReason ServerShuttingDown;
    public static MqttClientDisconnectReason BadAuthenticationMethod;
    public static MqttClientDisconnectReason KeepAliveTimeout;
    public static MqttClientDisconnectReason SessionTakenOver;
    public static MqttClientDisconnectReason TopicFilterInvalid;
    public static MqttClientDisconnectReason TopicNameInvalid;
    public static MqttClientDisconnectReason ReceiveMaximumExceeded;
    public static MqttClientDisconnectReason TopicAliasInvalid;
    public static MqttClientDisconnectReason PacketTooLarge;
    public static MqttClientDisconnectReason MessageRateTooHigh;
    public static MqttClientDisconnectReason QuotaExceeded;
    public static MqttClientDisconnectReason AdministrativeAction;
    public static MqttClientDisconnectReason PayloadFormatInvalid;
    public static MqttClientDisconnectReason RetainNotSupported;
    public static MqttClientDisconnectReason QosNotSupported;
    public static MqttClientDisconnectReason UseAnotherServer;
    public static MqttClientDisconnectReason ServerMoved;
    public static MqttClientDisconnectReason SharedSubscriptionsNotSupported;
    public static MqttClientDisconnectReason ConnectionRateExceeded;
    public static MqttClientDisconnectReason MaximumConnectTime;
    public static MqttClientDisconnectReason SubscriptionIdentifiersNotSupported;
    public static MqttClientDisconnectReason WildcardSubscriptionsNotSupported;
}
[ExtensionAttribute]
public static class MQTTnet.MqttClientExtensions : object {
    [ExtensionAttribute]
public static Task DisconnectAsync(IMqttClient client, MqttClientDisconnectOptionsReason reason, string reasonString, UInt32 sessionExpiryInterval, List`1<MqttUserProperty> userProperties, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<MqttClientPublishResult> PublishBinaryAsync(IMqttClient mqttClient, string topic, IEnumerable`1<byte> payload, MqttQualityOfServiceLevel qualityOfServiceLevel, bool retain, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<MqttClientPublishResult> PublishSequenceAsync(IMqttClient mqttClient, string topic, ReadOnlySequence`1<byte> payload, MqttQualityOfServiceLevel qualityOfServiceLevel, bool retain, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<MqttClientPublishResult> PublishStringAsync(IMqttClient mqttClient, string topic, string payload, MqttQualityOfServiceLevel qualityOfServiceLevel, bool retain, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ReconnectAsync(IMqttClient client, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task SendExtendedAuthenticationExchangeDataAsync(IMqttClient client, MqttExtendedAuthenticationExchangeData data);
    [ExtensionAttribute]
public static Task`1<MqttClientSubscribeResult> SubscribeAsync(IMqttClient mqttClient, MqttTopicFilter topicFilter, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<MqttClientSubscribeResult> SubscribeAsync(IMqttClient mqttClient, string topic, MqttQualityOfServiceLevel qualityOfServiceLevel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MQTTnet.MqttClientExtensions/<TryDisconnectAsync>d__8")]
[ExtensionAttribute]
public static Task`1<bool> TryDisconnectAsync(IMqttClient client, MqttClientDisconnectOptionsReason reason, string reasonString);
    [AsyncStateMachineAttribute("MQTTnet.MqttClientExtensions/<TryPingAsync>d__9")]
[ExtensionAttribute]
public static Task`1<bool> TryPingAsync(IMqttClient client, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<MqttClientUnsubscribeResult> UnsubscribeAsync(IMqttClient mqttClient, string topic, CancellationToken cancellationToken);
}
public class MQTTnet.MqttClientFactory : object {
    private IMqttClientAdapterFactory _clientAdapterFactory;
    [CompilerGeneratedAttribute]
private IMqttNetLogger <DefaultLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public IMqttNetLogger DefaultLogger { get; }
    public IDictionary`2<object, object> Properties { get; }
    public MqttClientFactory(IMqttNetLogger logger);
    [CompilerGeneratedAttribute]
public IMqttNetLogger get_DefaultLogger();
    [CompilerGeneratedAttribute]
public IDictionary`2<object, object> get_Properties();
    public MqttApplicationMessageBuilder CreateApplicationMessageBuilder();
    public MqttClientDisconnectOptionsBuilder CreateClientDisconnectOptionsBuilder();
    public MqttClientOptionsBuilder CreateClientOptionsBuilder();
    public ILowLevelMqttClient CreateLowLevelMqttClient();
    public ILowLevelMqttClient CreateLowLevelMqttClient(IMqttNetLogger logger);
    public ILowLevelMqttClient CreateLowLevelMqttClient(IMqttClientAdapterFactory clientAdapterFactory);
    public ILowLevelMqttClient CreateLowLevelMqttClient(IMqttNetLogger logger, IMqttClientAdapterFactory clientAdapterFactory);
    public IMqttClient CreateMqttClient();
    public IMqttClient CreateMqttClient(IMqttNetLogger logger);
    public IMqttClient CreateMqttClient(IMqttClientAdapterFactory clientAdapterFactory);
    public IMqttClient CreateMqttClient(IMqttNetLogger logger, IMqttClientAdapterFactory clientAdapterFactory);
    public MqttClientSubscribeOptionsBuilder CreateSubscribeOptionsBuilder();
    public MqttTopicFilterBuilder CreateTopicFilterBuilder();
    public MqttClientUnsubscribeOptionsBuilder CreateUnsubscribeOptionsBuilder();
    public MqttClientFactory UseClientAdapterFactory(IMqttClientAdapterFactory clientAdapterFactory);
}
public class MQTTnet.MqttClientOptions : object {
    [CompilerGeneratedAttribute]
private bool <AllowPacketFragmentation>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IMqttClientChannelOptions <ChannelOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanSession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private IMqttClientCredentialsProvider <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IMqttExtendedAuthenticationExchangeHandler <ExtendedAuthenticationExchangeHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <KeepAlivePeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttProtocolVersion <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ReceiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestProblemInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestResponseInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TopicAliasMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WillContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WillCorrelationData>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <WillDelayInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <WillMessageExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WillPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPayloadFormatIndicator <WillPayloadFormatIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <WillQualityOfServiceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WillResponseTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WillRetain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WillTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <WillUserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriterBufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriterBufferSizeMax>k__BackingField;
    public bool AllowPacketFragmentation { get; public set; }
    public Byte[] AuthenticationData { get; public set; }
    public string AuthenticationMethod { get; public set; }
    public IMqttClientChannelOptions ChannelOptions { get; public set; }
    public bool CleanSession { get; public set; }
    public string ClientId { get; public set; }
    public IMqttClientCredentialsProvider Credentials { get; public set; }
    public IMqttExtendedAuthenticationExchangeHandler ExtendedAuthenticationExchangeHandler { get; public set; }
    public TimeSpan KeepAlivePeriod { get; public set; }
    public UInt32 MaximumPacketSize { get; public set; }
    public MqttProtocolVersion ProtocolVersion { get; public set; }
    public ushort ReceiveMaximum { get; public set; }
    public bool RequestProblemInformation { get; public set; }
    public bool RequestResponseInformation { get; public set; }
    public UInt32 SessionExpiryInterval { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public ushort TopicAliasMaximum { get; public set; }
    public bool TryPrivate { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    public bool ValidateFeatures { get; public set; }
    public string WillContentType { get; public set; }
    public Byte[] WillCorrelationData { get; public set; }
    public UInt32 WillDelayInterval { get; public set; }
    public UInt32 WillMessageExpiryInterval { get; public set; }
    public Byte[] WillPayload { get; public set; }
    public MqttPayloadFormatIndicator WillPayloadFormatIndicator { get; public set; }
    public MqttQualityOfServiceLevel WillQualityOfServiceLevel { get; public set; }
    public string WillResponseTopic { get; public set; }
    public bool WillRetain { get; public set; }
    public string WillTopic { get; public set; }
    public List`1<MqttUserProperty> WillUserProperties { get; public set; }
    public int WriterBufferSize { get; public set; }
    public int WriterBufferSizeMax { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowPacketFragmentation();
    [CompilerGeneratedAttribute]
public void set_AllowPacketFragmentation(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
public void set_AuthenticationData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public IMqttClientChannelOptions get_ChannelOptions();
    [CompilerGeneratedAttribute]
public void set_ChannelOptions(IMqttClientChannelOptions value);
    [CompilerGeneratedAttribute]
public bool get_CleanSession();
    [CompilerGeneratedAttribute]
public void set_CleanSession(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public IMqttClientCredentialsProvider get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(IMqttClientCredentialsProvider value);
    [CompilerGeneratedAttribute]
public IMqttExtendedAuthenticationExchangeHandler get_ExtendedAuthenticationExchangeHandler();
    [CompilerGeneratedAttribute]
public void set_ExtendedAuthenticationExchangeHandler(IMqttExtendedAuthenticationExchangeHandler value);
    [CompilerGeneratedAttribute]
public TimeSpan get_KeepAlivePeriod();
    [CompilerGeneratedAttribute]
public void set_KeepAlivePeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumPacketSize();
    [CompilerGeneratedAttribute]
public void set_MaximumPacketSize(UInt32 value);
    [CompilerGeneratedAttribute]
public MqttProtocolVersion get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public void set_ProtocolVersion(MqttProtocolVersion value);
    [CompilerGeneratedAttribute]
public ushort get_ReceiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ReceiveMaximum(ushort value);
    [CompilerGeneratedAttribute]
public bool get_RequestProblemInformation();
    [CompilerGeneratedAttribute]
public void set_RequestProblemInformation(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequestResponseInformation();
    [CompilerGeneratedAttribute]
public void set_RequestResponseInformation(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_SessionExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public ushort get_TopicAliasMaximum();
    [CompilerGeneratedAttribute]
public void set_TopicAliasMaximum(ushort value);
    [CompilerGeneratedAttribute]
public bool get_TryPrivate();
    [CompilerGeneratedAttribute]
public void set_TryPrivate(bool value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    [CompilerGeneratedAttribute]
public bool get_ValidateFeatures();
    [CompilerGeneratedAttribute]
public void set_ValidateFeatures(bool value);
    [CompilerGeneratedAttribute]
public string get_WillContentType();
    [CompilerGeneratedAttribute]
public void set_WillContentType(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WillCorrelationData();
    [CompilerGeneratedAttribute]
public void set_WillCorrelationData(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_WillDelayInterval();
    [CompilerGeneratedAttribute]
public void set_WillDelayInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_WillMessageExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_WillMessageExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_WillPayload();
    [CompilerGeneratedAttribute]
public void set_WillPayload(Byte[] value);
    [CompilerGeneratedAttribute]
public MqttPayloadFormatIndicator get_WillPayloadFormatIndicator();
    [CompilerGeneratedAttribute]
public void set_WillPayloadFormatIndicator(MqttPayloadFormatIndicator value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_WillQualityOfServiceLevel();
    [CompilerGeneratedAttribute]
public void set_WillQualityOfServiceLevel(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public string get_WillResponseTopic();
    [CompilerGeneratedAttribute]
public void set_WillResponseTopic(string value);
    [CompilerGeneratedAttribute]
public bool get_WillRetain();
    [CompilerGeneratedAttribute]
public void set_WillRetain(bool value);
    [CompilerGeneratedAttribute]
public string get_WillTopic();
    [CompilerGeneratedAttribute]
public void set_WillTopic(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_WillUserProperties();
    [CompilerGeneratedAttribute]
public void set_WillUserProperties(List`1<MqttUserProperty> value);
    [CompilerGeneratedAttribute]
public int get_WriterBufferSize();
    [CompilerGeneratedAttribute]
public void set_WriterBufferSize(int value);
    [CompilerGeneratedAttribute]
public int get_WriterBufferSizeMax();
    [CompilerGeneratedAttribute]
public void set_WriterBufferSizeMax(int value);
}
public class MQTTnet.MqttClientOptionsBuilder : object {
    private MqttClientOptions _options;
    private Nullable`1<int> _port;
    private EndPoint _remoteEndPoint;
    private MqttClientTcpOptions _tcpOptions;
    private MqttClientTlsOptions _tlsOptions;
    private MqttClientWebSocketOptions _webSocketOptions;
    public MqttClientOptions Build();
    public MqttClientOptionsBuilder WithAddressFamily(AddressFamily addressFamily);
    public MqttClientOptionsBuilder WithAuthentication(string method, Byte[] data);
    public MqttClientOptionsBuilder WithCleanSession(bool value);
    public MqttClientOptionsBuilder WithCleanStart(bool value);
    public MqttClientOptionsBuilder WithClientId(string value);
    public MqttClientOptionsBuilder WithConnectionUri(Uri uri);
    public MqttClientOptionsBuilder WithConnectionUri(string uri);
    public MqttClientOptionsBuilder WithCredentials(string username, string password);
    public MqttClientOptionsBuilder WithCredentials(string username, Byte[] password);
    public MqttClientOptionsBuilder WithCredentials(IMqttClientCredentialsProvider credentials);
    public MqttClientOptionsBuilder WithEndPoint(EndPoint endPoint);
    public MqttClientOptionsBuilder WithExtendedAuthenticationExchangeHandler(IMqttExtendedAuthenticationExchangeHandler handler);
    public MqttClientOptionsBuilder WithKeepAlivePeriod(TimeSpan value);
    public MqttClientOptionsBuilder WithMaximumPacketSize(UInt32 maximumPacketSize);
    public MqttClientOptionsBuilder WithNoKeepAlive();
    public MqttClientOptionsBuilder WithoutPacketFragmentation();
    public MqttClientOptionsBuilder WithProtocolType(ProtocolType protocolType);
    public MqttClientOptionsBuilder WithProtocolVersion(MqttProtocolVersion value);
    public MqttClientOptionsBuilder WithReceiveMaximum(ushort receiveMaximum);
    public MqttClientOptionsBuilder WithRequestProblemInformation(bool requestProblemInformation);
    public MqttClientOptionsBuilder WithRequestResponseInformation(bool requestResponseInformation);
    public MqttClientOptionsBuilder WithSessionExpiryInterval(UInt32 sessionExpiryInterval);
    public MqttClientOptionsBuilder WithTcpServer(string host, Nullable`1<int> port, AddressFamily addressFamily);
    public MqttClientOptionsBuilder WithTcpServer(Action`1<MqttClientTcpOptions> optionsBuilder);
    public MqttClientOptionsBuilder WithTimeout(TimeSpan value);
    public MqttClientOptionsBuilder WithTlsOptions(MqttClientTlsOptions tlsOptions);
    public MqttClientOptionsBuilder WithTlsOptions(Action`1<MqttClientTlsOptionsBuilder> configure);
    public MqttClientOptionsBuilder WithTopicAliasMaximum(ushort topicAliasMaximum);
    public MqttClientOptionsBuilder WithTryPrivate(bool tryPrivate);
    public MqttClientOptionsBuilder WithUserProperty(string name, string value);
    public MqttClientOptionsBuilder WithWebSocketServer(Action`1<MqttClientWebSocketOptionsBuilder> configure);
    public MqttClientOptionsBuilder WithWillContentType(string willContentType);
    public MqttClientOptionsBuilder WithWillCorrelationData(Byte[] willCorrelationData);
    public MqttClientOptionsBuilder WithWillDelayInterval(UInt32 willDelayInterval);
    public MqttClientOptionsBuilder WithWillMessageExpiryInterval(UInt32 willMessageExpiryInterval);
    public MqttClientOptionsBuilder WithWillPayload(Byte[] willPayload);
    public MqttClientOptionsBuilder WithWillPayload(ArraySegment`1<byte> willPayload);
    public MqttClientOptionsBuilder WithWillPayload(string willPayload);
    public MqttClientOptionsBuilder WithWillPayloadFormatIndicator(MqttPayloadFormatIndicator willPayloadFormatIndicator);
    public MqttClientOptionsBuilder WithWillQualityOfServiceLevel(MqttQualityOfServiceLevel willQualityOfServiceLevel);
    public MqttClientOptionsBuilder WithWillResponseTopic(string willResponseTopic);
    public MqttClientOptionsBuilder WithWillRetain(bool willRetain);
    public MqttClientOptionsBuilder WithWillTopic(string willTopic);
    public MqttClientOptionsBuilder WithWillUserProperty(string name, string value);
}
public static class MQTTnet.MqttClientOptionsValidator : object {
    public static void ThrowIfNotSupported(MqttClientOptions options);
    private static void Throw(string featureName);
}
public enum MQTTnet.MqttClientPublishReasonCode : Enum {
    public int value__;
    public static MqttClientPublishReasonCode Success;
    public static MqttClientPublishReasonCode NoMatchingSubscribers;
    public static MqttClientPublishReasonCode UnspecifiedError;
    public static MqttClientPublishReasonCode ImplementationSpecificError;
    public static MqttClientPublishReasonCode NotAuthorized;
    public static MqttClientPublishReasonCode TopicNameInvalid;
    public static MqttClientPublishReasonCode PacketIdentifierInUse;
    public static MqttClientPublishReasonCode QuotaExceeded;
    public static MqttClientPublishReasonCode PayloadFormatInvalid;
}
public class MQTTnet.MqttClientPublishResult : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ushort> <PacketIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientPublishReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MqttUserProperty> <UserProperties>k__BackingField;
    public bool IsSuccess { get; }
    public Nullable`1<ushort> PacketIdentifier { get; }
    public MqttClientPublishReasonCode ReasonCode { get; }
    public string ReasonString { get; }
    public IReadOnlyCollection`1<MqttUserProperty> UserProperties { get; }
    public MqttClientPublishResult(Nullable`1<ushort> packetIdentifier, MqttClientPublishReasonCode reasonCode, string reasonString, IReadOnlyCollection`1<MqttUserProperty> userProperties);
    public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public Nullable`1<ushort> get_PacketIdentifier();
    [CompilerGeneratedAttribute]
public MqttClientPublishReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MqttUserProperty> get_UserProperties();
}
public class MQTTnet.MqttClientPublishResultFactory : object {
    private static IReadOnlyCollection`1<MqttUserProperty> EmptyUserProperties;
    private static MqttClientPublishResult AtMostOnceSuccessResult;
    private static MqttClientPublishResultFactory();
    public MqttClientPublishResult Create(MqttPubAckPacket pubAckPacket);
    public MqttClientPublishResult Create(MqttPubRecPacket pubRecPacket, MqttPubCompPacket pubCompPacket);
}
public class MQTTnet.MqttClientSubscribeOptions : object {
    [CompilerGeneratedAttribute]
private UInt32 <SubscriptionIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttTopicFilter> <TopicFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public UInt32 SubscriptionIdentifier { get; public set; }
    public List`1<MqttTopicFilter> TopicFilters { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SubscriptionIdentifier();
    [CompilerGeneratedAttribute]
public void set_SubscriptionIdentifier(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<MqttTopicFilter> get_TopicFilters();
    [CompilerGeneratedAttribute]
public void set_TopicFilters(List`1<MqttTopicFilter> value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
}
public class MQTTnet.MqttClientSubscribeOptionsBuilder : object {
    private MqttClientSubscribeOptions _subscribeOptions;
    public MqttClientSubscribeOptions Build();
    public MqttClientSubscribeOptionsBuilder WithSubscriptionIdentifier(UInt32 subscriptionIdentifier);
    public MqttClientSubscribeOptionsBuilder WithTopicFilter(string topic, MqttQualityOfServiceLevel qualityOfServiceLevel, bool noLocal, bool retainAsPublished, MqttRetainHandling retainHandling);
    public MqttClientSubscribeOptionsBuilder WithTopicFilter(Action`1<MqttTopicFilterBuilder> topicFilterBuilder);
    public MqttClientSubscribeOptionsBuilder WithTopicFilter(MqttTopicFilterBuilder topicFilterBuilder);
    public MqttClientSubscribeOptionsBuilder WithTopicFilter(MqttTopicFilter topicFilter);
    public MqttClientSubscribeOptionsBuilder WithUserProperty(string name, string value);
}
public static class MQTTnet.MqttClientSubscribeOptionsValidator : object {
    public static void ThrowIfNotSupported(MqttClientSubscribeOptions options, MqttProtocolVersion protocolVersion);
    private static void Throw(string featureName);
}
public class MQTTnet.MqttClientSubscribeResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MqttClientSubscribeResultItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PacketIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MqttUserProperty> <UserProperties>k__BackingField;
    public IReadOnlyCollection`1<MqttClientSubscribeResultItem> Items { get; }
    public ushort PacketIdentifier { get; }
    public string ReasonString { get; }
    public IReadOnlyCollection`1<MqttUserProperty> UserProperties { get; }
    public MqttClientSubscribeResult(ushort packetIdentifier, IReadOnlyCollection`1<MqttClientSubscribeResultItem> items, string reasonString, IReadOnlyCollection`1<MqttUserProperty> userProperties);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MqttClientSubscribeResultItem> get_Items();
    [CompilerGeneratedAttribute]
public ushort get_PacketIdentifier();
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MqttUserProperty> get_UserProperties();
}
public enum MQTTnet.MqttClientSubscribeResultCode : Enum {
    public int value__;
    public static MqttClientSubscribeResultCode GrantedQoS0;
    public static MqttClientSubscribeResultCode GrantedQoS1;
    public static MqttClientSubscribeResultCode GrantedQoS2;
    public static MqttClientSubscribeResultCode UnspecifiedError;
    public static MqttClientSubscribeResultCode ImplementationSpecificError;
    public static MqttClientSubscribeResultCode NotAuthorized;
    public static MqttClientSubscribeResultCode TopicFilterInvalid;
    public static MqttClientSubscribeResultCode PacketIdentifierInUse;
    public static MqttClientSubscribeResultCode QuotaExceeded;
    public static MqttClientSubscribeResultCode SharedSubscriptionsNotSupported;
    public static MqttClientSubscribeResultCode SubscriptionIdentifiersNotSupported;
    public static MqttClientSubscribeResultCode WildcardSubscriptionsNotSupported;
}
public class MQTTnet.MqttClientSubscribeResultFactory : object {
    private static IReadOnlyCollection`1<MqttUserProperty> EmptyUserProperties;
    private static MqttClientSubscribeResultFactory();
    public MqttClientSubscribeResult Create(MqttSubscribePacket subscribePacket, MqttSubAckPacket subAckPacket);
    private static MqttClientSubscribeResultItem CreateSubscribeResultItem(int index, MqttSubscribePacket subscribePacket, MqttSubAckPacket subAckPacket);
}
public class MQTTnet.MqttClientSubscribeResultItem : object {
    [CompilerGeneratedAttribute]
private MqttClientSubscribeResultCode <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttTopicFilter <TopicFilter>k__BackingField;
    public MqttClientSubscribeResultCode ResultCode { get; }
    public MqttTopicFilter TopicFilter { get; }
    public MqttClientSubscribeResultItem(MqttTopicFilter topicFilter, MqttClientSubscribeResultCode resultCode);
    [CompilerGeneratedAttribute]
public MqttClientSubscribeResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
public MqttTopicFilter get_TopicFilter();
}
public class MQTTnet.MqttClientTcpOptions : object {
    [CompilerGeneratedAttribute]
private AddressFamily <AddressFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BufferSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DualMode>k__BackingField;
    [CompilerGeneratedAttribute]
private LingerOption <LingerState>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <LocalEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private ProtocolType <ProtocolType>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientTlsOptions <TlsOptions>k__BackingField;
    public AddressFamily AddressFamily { get; public set; }
    public int BufferSize { get; public set; }
    public Nullable`1<bool> DualMode { get; public set; }
    public LingerOption LingerState { get; public set; }
    public EndPoint LocalEndpoint { get; public set; }
    public bool NoDelay { get; public set; }
    public ProtocolType ProtocolType { get; public set; }
    public EndPoint RemoteEndpoint { get; public set; }
    public MqttClientTlsOptions TlsOptions { get; public set; }
    [CompilerGeneratedAttribute]
public AddressFamily get_AddressFamily();
    [CompilerGeneratedAttribute]
public void set_AddressFamily(AddressFamily value);
    [CompilerGeneratedAttribute]
public int get_BufferSize();
    [CompilerGeneratedAttribute]
public void set_BufferSize(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DualMode();
    [CompilerGeneratedAttribute]
public void set_DualMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public LingerOption get_LingerState();
    [CompilerGeneratedAttribute]
public void set_LingerState(LingerOption value);
    [CompilerGeneratedAttribute]
public EndPoint get_LocalEndpoint();
    [CompilerGeneratedAttribute]
public void set_LocalEndpoint(EndPoint value);
    [CompilerGeneratedAttribute]
public bool get_NoDelay();
    [CompilerGeneratedAttribute]
public void set_NoDelay(bool value);
    [CompilerGeneratedAttribute]
public ProtocolType get_ProtocolType();
    [CompilerGeneratedAttribute]
public void set_ProtocolType(ProtocolType value);
    [CompilerGeneratedAttribute]
public EndPoint get_RemoteEndpoint();
    [CompilerGeneratedAttribute]
public void set_RemoteEndpoint(EndPoint value);
    [CompilerGeneratedAttribute]
public sealed virtual MqttClientTlsOptions get_TlsOptions();
    [CompilerGeneratedAttribute]
public void set_TlsOptions(MqttClientTlsOptions value);
    public virtual string ToString();
}
public class MQTTnet.MqttClientTlsOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<MqttClientCertificateValidationEventArgs, bool> <CertificateValidationHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<MqttClientCertificateSelectionEventArgs, X509Certificate> <CertificateSelectionHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTls>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCertificateRevocationErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCertificateChainErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUntrustedCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private X509RevocationMode <RevocationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IMqttClientCertificatesProvider <ClientCertificatesProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SslApplicationProtocol> <ApplicationProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherSuitesPolicy <CipherSuitesPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionPolicy <EncryptionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRenegotiation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHost>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <SslProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <TrustChain>k__BackingField;
    public Func`2<MqttClientCertificateValidationEventArgs, bool> CertificateValidationHandler { get; public set; }
    public Func`2<MqttClientCertificateSelectionEventArgs, X509Certificate> CertificateSelectionHandler { get; public set; }
    public bool UseTls { get; public set; }
    public bool IgnoreCertificateRevocationErrors { get; public set; }
    public bool IgnoreCertificateChainErrors { get; public set; }
    public bool AllowUntrustedCertificates { get; public set; }
    public X509RevocationMode RevocationMode { get; public set; }
    public IMqttClientCertificatesProvider ClientCertificatesProvider { get; public set; }
    public List`1<SslApplicationProtocol> ApplicationProtocols { get; public set; }
    public CipherSuitesPolicy CipherSuitesPolicy { get; public set; }
    public EncryptionPolicy EncryptionPolicy { get; public set; }
    public bool AllowRenegotiation { get; public set; }
    public string TargetHost { get; public set; }
    public SslProtocols SslProtocol { get; public set; }
    public X509Certificate2Collection TrustChain { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<MqttClientCertificateValidationEventArgs, bool> get_CertificateValidationHandler();
    [CompilerGeneratedAttribute]
public void set_CertificateValidationHandler(Func`2<MqttClientCertificateValidationEventArgs, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<MqttClientCertificateSelectionEventArgs, X509Certificate> get_CertificateSelectionHandler();
    [CompilerGeneratedAttribute]
public void set_CertificateSelectionHandler(Func`2<MqttClientCertificateSelectionEventArgs, X509Certificate> value);
    [CompilerGeneratedAttribute]
public bool get_UseTls();
    [CompilerGeneratedAttribute]
public void set_UseTls(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCertificateRevocationErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreCertificateRevocationErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCertificateChainErrors();
    [CompilerGeneratedAttribute]
public void set_IgnoreCertificateChainErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowUntrustedCertificates();
    [CompilerGeneratedAttribute]
public void set_AllowUntrustedCertificates(bool value);
    [CompilerGeneratedAttribute]
public X509RevocationMode get_RevocationMode();
    [CompilerGeneratedAttribute]
public void set_RevocationMode(X509RevocationMode value);
    [CompilerGeneratedAttribute]
public IMqttClientCertificatesProvider get_ClientCertificatesProvider();
    [CompilerGeneratedAttribute]
public void set_ClientCertificatesProvider(IMqttClientCertificatesProvider value);
    [CompilerGeneratedAttribute]
public List`1<SslApplicationProtocol> get_ApplicationProtocols();
    [CompilerGeneratedAttribute]
public void set_ApplicationProtocols(List`1<SslApplicationProtocol> value);
    [CompilerGeneratedAttribute]
public CipherSuitesPolicy get_CipherSuitesPolicy();
    [CompilerGeneratedAttribute]
public void set_CipherSuitesPolicy(CipherSuitesPolicy value);
    [CompilerGeneratedAttribute]
public EncryptionPolicy get_EncryptionPolicy();
    [CompilerGeneratedAttribute]
public void set_EncryptionPolicy(EncryptionPolicy value);
    [CompilerGeneratedAttribute]
public bool get_AllowRenegotiation();
    [CompilerGeneratedAttribute]
public void set_AllowRenegotiation(bool value);
    [CompilerGeneratedAttribute]
public string get_TargetHost();
    [CompilerGeneratedAttribute]
public void set_TargetHost(string value);
    [CompilerGeneratedAttribute]
public SslProtocols get_SslProtocol();
    [CompilerGeneratedAttribute]
public void set_SslProtocol(SslProtocols value);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_TrustChain();
    [CompilerGeneratedAttribute]
public void set_TrustChain(X509Certificate2Collection value);
}
public class MQTTnet.MqttClientTlsOptionsBuilder : object {
    private MqttClientTlsOptions _tlsOptions;
    public MqttClientTlsOptions Build();
    public MqttClientTlsOptionsBuilder UseTls(bool useTls);
    public MqttClientTlsOptionsBuilder WithAllowUntrustedCertificates(bool allowUntrustedCertificates);
    public MqttClientTlsOptionsBuilder WithCertificateValidationHandler(Func`2<MqttClientCertificateValidationEventArgs, bool> certificateValidationHandler);
    public MqttClientTlsOptionsBuilder WithCertificateSelectionHandler(Func`2<MqttClientCertificateSelectionEventArgs, X509Certificate> certificateSelectionHandler);
    public MqttClientTlsOptionsBuilder WithClientCertificates(IEnumerable`1<X509Certificate2> certificates);
    public MqttClientTlsOptionsBuilder WithClientCertificates(X509Certificate2Collection certificates);
    public MqttClientTlsOptionsBuilder WithClientCertificatesProvider(IMqttClientCertificatesProvider clientCertificatesProvider);
    public MqttClientTlsOptionsBuilder WithIgnoreCertificateChainErrors(bool ignoreCertificateChainErrors);
    public MqttClientTlsOptionsBuilder WithIgnoreCertificateRevocationErrors(bool ignoreCertificateRevocationErrors);
    public MqttClientTlsOptionsBuilder WithRevocationMode(X509RevocationMode revocationMode);
    public MqttClientTlsOptionsBuilder WithSslProtocols(SslProtocols sslProtocols);
    public MqttClientTlsOptionsBuilder WithTargetHost(string targetHost);
    public MqttClientTlsOptionsBuilder WithAllowRenegotiation(bool allowRenegotiation);
    public MqttClientTlsOptionsBuilder WithApplicationProtocols(List`1<SslApplicationProtocol> applicationProtocols);
    public MqttClientTlsOptionsBuilder WithCipherSuitesPolicy(CipherSuitesPolicy cipherSuitePolicy);
    public MqttClientTlsOptionsBuilder WithCipherSuitesPolicy(EncryptionPolicy encryptionPolicy);
    public MqttClientTlsOptionsBuilder WithTrustChain(X509Certificate2Collection chain);
}
public class MQTTnet.MqttClientUnsubscribeOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <TopicFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public List`1<string> TopicFilters { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_TopicFilters();
    [CompilerGeneratedAttribute]
public void set_TopicFilters(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
}
public class MQTTnet.MqttClientUnsubscribeOptionsBuilder : object {
    private MqttClientUnsubscribeOptions _unsubscribeOptions;
    public MqttClientUnsubscribeOptions Build();
    public MqttClientUnsubscribeOptionsBuilder WithTopicFilter(string topic);
    public MqttClientUnsubscribeOptionsBuilder WithTopicFilter(MqttTopicFilter topicFilter);
    public MqttClientUnsubscribeOptionsBuilder WithUserProperty(string name, string value);
    public MqttClientUnsubscribeOptionsBuilder WithUserProperty(MqttUserProperty userProperty);
}
public static class MQTTnet.MqttClientUnsubscribeOptionsValidator : object {
    public static void ThrowIfNotSupported(MqttClientUnsubscribeOptions options, MqttProtocolVersion protocolVersion);
    private static void Throw(string featureName);
}
public class MQTTnet.MqttClientUnsubscribeResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MqttClientUnsubscribeResultItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <PacketIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<MqttUserProperty> <UserProperties>k__BackingField;
    public IReadOnlyCollection`1<MqttClientUnsubscribeResultItem> Items { get; }
    public ushort PacketIdentifier { get; }
    public string ReasonString { get; }
    public IReadOnlyCollection`1<MqttUserProperty> UserProperties { get; public set; }
    public MqttClientUnsubscribeResult(ushort packetIdentifier, IReadOnlyCollection`1<MqttClientUnsubscribeResultItem> items, string reasonString, IReadOnlyCollection`1<MqttUserProperty> userProperties);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MqttClientUnsubscribeResultItem> get_Items();
    [CompilerGeneratedAttribute]
public ushort get_PacketIdentifier();
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(IReadOnlyCollection`1<MqttUserProperty> value);
}
public enum MQTTnet.MqttClientUnsubscribeResultCode : Enum {
    public int value__;
    public static MqttClientUnsubscribeResultCode Success;
    public static MqttClientUnsubscribeResultCode NoSubscriptionExisted;
    public static MqttClientUnsubscribeResultCode UnspecifiedError;
    public static MqttClientUnsubscribeResultCode ImplementationSpecificError;
    public static MqttClientUnsubscribeResultCode NotAuthorized;
    public static MqttClientUnsubscribeResultCode TopicFilterInvalid;
    public static MqttClientUnsubscribeResultCode PacketIdentifierInUse;
}
public class MQTTnet.MqttClientUnsubscribeResultFactory : object {
    private static IReadOnlyCollection`1<MqttUserProperty> EmptyUserProperties;
    private static MqttClientUnsubscribeResultFactory();
    public MqttClientUnsubscribeResult Create(MqttUnsubscribePacket unsubscribePacket, MqttUnsubAckPacket unsubAckPacket);
    private static MqttClientUnsubscribeResultItem CreateUnsubscribeResultItem(int index, MqttUnsubscribePacket unsubscribePacket, MqttUnsubAckPacket unsubAckPacket);
}
public class MQTTnet.MqttClientUnsubscribeResultItem : object {
    [CompilerGeneratedAttribute]
private MqttClientUnsubscribeResultCode <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicFilter>k__BackingField;
    public MqttClientUnsubscribeResultCode ResultCode { get; }
    public string TopicFilter { get; }
    public MqttClientUnsubscribeResultItem(string topicFilter, MqttClientUnsubscribeResultCode resultCode);
    [CompilerGeneratedAttribute]
public MqttClientUnsubscribeResultCode get_ResultCode();
    [CompilerGeneratedAttribute]
public string get_TopicFilter();
}
public class MQTTnet.MqttClientWebSocketOptions : object {
    [CompilerGeneratedAttribute]
private CookieContainer <CookieContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <KeepAliveInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientWebSocketProxyOptions <ProxyOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <RequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <SubProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClientTlsOptions <TlsOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public MqttClientWebSocketProxyOptions ProxyOptions { get; public set; }
    public IDictionary`2<string, string> RequestHeaders { get; public set; }
    public ICollection`1<string> SubProtocols { get; public set; }
    public MqttClientTlsOptions TlsOptions { get; public set; }
    public string Uri { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    [CompilerGeneratedAttribute]
public CookieContainer get_CookieContainer();
    [CompilerGeneratedAttribute]
public void set_CookieContainer(CookieContainer value);
    [CompilerGeneratedAttribute]
public ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(ICredentials value);
    [CompilerGeneratedAttribute]
public TimeSpan get_KeepAliveInterval();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public MqttClientWebSocketProxyOptions get_ProxyOptions();
    [CompilerGeneratedAttribute]
public void set_ProxyOptions(MqttClientWebSocketProxyOptions value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_RequestHeaders();
    [CompilerGeneratedAttribute]
public void set_RequestHeaders(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_SubProtocols();
    [CompilerGeneratedAttribute]
public void set_SubProtocols(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual MqttClientTlsOptions get_TlsOptions();
    [CompilerGeneratedAttribute]
public void set_TlsOptions(MqttClientTlsOptions value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
    public virtual string ToString();
}
public class MQTTnet.MqttClientWebSocketOptionsBuilder : object {
    private MqttClientWebSocketOptions _webSocketOptions;
    public MqttClientWebSocketOptions Build();
    public MqttClientWebSocketOptionsBuilder WithCookieContainer(CookieContainer cookieContainer);
    public MqttClientWebSocketOptionsBuilder WithCookieContainer(ICredentials credentials);
    public MqttClientWebSocketOptionsBuilder WithKeepAliveInterval(TimeSpan keepAliveInterval);
    public MqttClientWebSocketOptionsBuilder WithProxyOptions(MqttClientWebSocketProxyOptions proxyOptions);
    public MqttClientWebSocketOptionsBuilder WithProxyOptions(Action`1<MqttClientWebSocketProxyOptionsBuilder> configure);
    public MqttClientWebSocketOptionsBuilder WithRequestHeaders(IDictionary`2<string, string> requestHeaders);
    public MqttClientWebSocketOptionsBuilder WithSubProtocols(ICollection`1<string> subProtocols);
    public MqttClientWebSocketOptionsBuilder WithUri(string uri);
    public MqttClientWebSocketOptionsBuilder WithUseDefaultCredentials(bool useDefaultCredentials);
}
public class MQTTnet.MqttClientWebSocketProxyOptions : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BypassList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BypassOnLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public string Address { get; public set; }
    public String[] BypassList { get; public set; }
    public bool BypassOnLocal { get; public set; }
    public string Domain { get; public set; }
    public string Password { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string Username { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public String[] get_BypassList();
    [CompilerGeneratedAttribute]
public void set_BypassList(String[] value);
    [CompilerGeneratedAttribute]
public bool get_BypassOnLocal();
    [CompilerGeneratedAttribute]
public void set_BypassOnLocal(bool value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
}
public class MQTTnet.MqttClientWebSocketProxyOptionsBuilder : object {
    private MqttClientWebSocketProxyOptions _proxyOptions;
    public MqttClientWebSocketProxyOptions Build();
    public MqttClientWebSocketProxyOptionsBuilder WithAddress(string address);
    public MqttClientWebSocketProxyOptionsBuilder WithBypassList(String[] bypassList);
    public MqttClientWebSocketProxyOptionsBuilder WithBypassList(IEnumerable`1<string> bypassList);
    public MqttClientWebSocketProxyOptionsBuilder WithBypassOnLocal(bool bypassOnLocal);
    public MqttClientWebSocketProxyOptionsBuilder WithDomain(string domain);
    public MqttClientWebSocketProxyOptionsBuilder WithPassword(string password);
    public MqttClientWebSocketProxyOptionsBuilder WithUseDefaultCredentials(bool useDefaultCredentials);
    public MqttClientWebSocketProxyOptionsBuilder WithUsername(string username);
}
public class MQTTnet.MqttExtendedAuthenticationExchangeContext : object {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttAuthenticateReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public Byte[] AuthenticationData { get; }
    public string AuthenticationMethod { get; }
    public MqttClient Client { get; }
    public MqttAuthenticateReasonCode ReasonCode { get; }
    public string ReasonString { get; }
    public List`1<MqttUserProperty> UserProperties { get; }
    public MqttExtendedAuthenticationExchangeContext(MqttAuthPacket authPacket, MqttClient client);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public MqttClient get_Client();
    [CompilerGeneratedAttribute]
public MqttAuthenticateReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
}
public class MQTTnet.MqttExtendedAuthenticationExchangeData : object {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttAuthenticateReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public Byte[] AuthenticationData { get; public set; }
    public MqttAuthenticateReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; }
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
public void set_AuthenticationData(Byte[] value);
    [CompilerGeneratedAttribute]
public MqttAuthenticateReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttAuthenticateReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
}
public class MQTTnet.MqttPacketIdentifierProvider : object {
    private object _syncRoot;
    private ushort _value;
    public ushort GetNextPacketIdentifier();
    public void Reset();
}
public class MQTTnet.MqttTopicFilterBuilder : object {
    private MqttQualityOfServiceLevel _qualityOfServiceLevel;
    private string _topic;
    private bool _noLocal;
    private bool _retainAsPublished;
    private MqttRetainHandling _retainHandling;
    public MqttTopicFilterBuilder WithTopic(string topic);
    public MqttTopicFilterBuilder WithQualityOfServiceLevel(MqttQualityOfServiceLevel qualityOfServiceLevel);
    public MqttTopicFilterBuilder WithAtLeastOnceQoS();
    public MqttTopicFilterBuilder WithAtMostOnceQoS();
    public MqttTopicFilterBuilder WithExactlyOnceQoS();
    public MqttTopicFilterBuilder WithNoLocal(bool value);
    public MqttTopicFilterBuilder WithRetainAsPublished(bool value);
    public MqttTopicFilterBuilder WithRetainHandling(MqttRetainHandling value);
    public MqttTopicFilter Build();
}
public static class MQTTnet.MqttTopicFilterComparer : object {
    public static char LevelSeparator;
    public static char MultiLevelWildcard;
    public static char SingleLevelWildcard;
    public static char ReservedTopicPrefix;
    public static MqttTopicFilterCompareResult Compare(string topic, string filter);
}
public enum MQTTnet.MqttTopicFilterCompareResult : Enum {
    public int value__;
    public static MqttTopicFilterCompareResult NoMatch;
    public static MqttTopicFilterCompareResult IsMatch;
    public static MqttTopicFilterCompareResult FilterInvalid;
    public static MqttTopicFilterCompareResult TopicInvalid;
}
public interface MQTTnet.PacketDispatcher.IMqttPacketAwaitable {
    public MqttPacketAwaitableFilter Filter { get; }
    public abstract virtual MqttPacketAwaitableFilter get_Filter();
    public abstract virtual void Complete(MqttPacket packet);
    public abstract virtual void Fail(Exception exception);
    public abstract virtual void Cancel();
}
public class MQTTnet.PacketDispatcher.MqttPacketAwaitable`1 : object {
    private AsyncTaskCompletionSource`1<MqttPacket> _promise;
    private MqttPacketDispatcher _owningPacketDispatcher;
    [CompilerGeneratedAttribute]
private MqttPacketAwaitableFilter <Filter>k__BackingField;
    public MqttPacketAwaitableFilter Filter { get; }
    public MqttPacketAwaitable`1(ushort packetIdentifier, MqttPacketDispatcher owningPacketDispatcher);
    [CompilerGeneratedAttribute]
public sealed virtual MqttPacketAwaitableFilter get_Filter();
    [AsyncStateMachineAttribute("MQTTnet.PacketDispatcher.MqttPacketAwaitable`1/<WaitOneAsync>d__6")]
public Task`1<TPacket> WaitOneAsync(CancellationToken cancellationToken);
    public sealed virtual void Complete(MqttPacket packet);
    public sealed virtual void Fail(Exception exception);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <WaitOneAsync>b__6_0();
}
public class MQTTnet.PacketDispatcher.MqttPacketAwaitableFilter : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Identifier>k__BackingField;
    public Type Type { get; public set; }
    public ushort Identifier { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public ushort get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(ushort value);
}
public class MQTTnet.PacketDispatcher.MqttPacketDispatcher : object {
    private List`1<IMqttPacketAwaitable> _waiters;
    private bool _isDisposed;
    public MqttPacketAwaitable`1<TResponsePacket> AddAwaitable(ushort packetIdentifier);
    public void CancelAll();
    public sealed virtual void Dispose();
    public void Dispose(Exception exception);
    public void FailAll(Exception exception);
    public void RemoveAwaitable(IMqttPacketAwaitable awaitable);
    public bool TryDispatch(MqttPacket packet);
    private void ThrowIfDisposed();
}
public class MQTTnet.Packets.MqttAuthPacket : MqttPacket {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttAuthenticateReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public Byte[] AuthenticationData { get; public set; }
    public string AuthenticationMethod { get; public set; }
    public MqttAuthenticateReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
public void set_AuthenticationData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public MqttAuthenticateReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttAuthenticateReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
}
public class MQTTnet.Packets.MqttConnAckPacket : MqttPacket {
    [CompilerGeneratedAttribute]
private string <AssignedClientIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSessionPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <MaximumQoS>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttConnectReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ReceiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetainAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttConnectReturnCode <ReturnCode>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ServerKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerReference>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SharedSubscriptionAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubscriptionIdentifiersAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TopicAliasMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WildcardSubscriptionAvailable>k__BackingField;
    public string AssignedClientIdentifier { get; public set; }
    public Byte[] AuthenticationData { get; public set; }
    public string AuthenticationMethod { get; public set; }
    public bool IsSessionPresent { get; public set; }
    public UInt32 MaximumPacketSize { get; public set; }
    public MqttQualityOfServiceLevel MaximumQoS { get; public set; }
    public MqttConnectReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public ushort ReceiveMaximum { get; public set; }
    public string ResponseInformation { get; public set; }
    public bool RetainAvailable { get; public set; }
    public MqttConnectReturnCode ReturnCode { get; public set; }
    public ushort ServerKeepAlive { get; public set; }
    public string ServerReference { get; public set; }
    public UInt32 SessionExpiryInterval { get; public set; }
    public bool SharedSubscriptionAvailable { get; public set; }
    public bool SubscriptionIdentifiersAvailable { get; public set; }
    public ushort TopicAliasMaximum { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    public bool WildcardSubscriptionAvailable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssignedClientIdentifier();
    [CompilerGeneratedAttribute]
public void set_AssignedClientIdentifier(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
public void set_AuthenticationData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSessionPresent();
    [CompilerGeneratedAttribute]
public void set_IsSessionPresent(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumPacketSize();
    [CompilerGeneratedAttribute]
public void set_MaximumPacketSize(UInt32 value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_MaximumQoS();
    [CompilerGeneratedAttribute]
public void set_MaximumQoS(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public MqttConnectReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttConnectReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public ushort get_ReceiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ReceiveMaximum(ushort value);
    [CompilerGeneratedAttribute]
public string get_ResponseInformation();
    [CompilerGeneratedAttribute]
public void set_ResponseInformation(string value);
    [CompilerGeneratedAttribute]
public bool get_RetainAvailable();
    [CompilerGeneratedAttribute]
public void set_RetainAvailable(bool value);
    [CompilerGeneratedAttribute]
public MqttConnectReturnCode get_ReturnCode();
    [CompilerGeneratedAttribute]
public void set_ReturnCode(MqttConnectReturnCode value);
    [CompilerGeneratedAttribute]
public ushort get_ServerKeepAlive();
    [CompilerGeneratedAttribute]
public void set_ServerKeepAlive(ushort value);
    [CompilerGeneratedAttribute]
public string get_ServerReference();
    [CompilerGeneratedAttribute]
public void set_ServerReference(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_SessionExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_SharedSubscriptionAvailable();
    [CompilerGeneratedAttribute]
public void set_SharedSubscriptionAvailable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SubscriptionIdentifiersAvailable();
    [CompilerGeneratedAttribute]
public void set_SubscriptionIdentifiersAvailable(bool value);
    [CompilerGeneratedAttribute]
public ushort get_TopicAliasMaximum();
    [CompilerGeneratedAttribute]
public void set_TopicAliasMaximum(ushort value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    [CompilerGeneratedAttribute]
public bool get_WildcardSubscriptionAvailable();
    [CompilerGeneratedAttribute]
public void set_WildcardSubscriptionAvailable(bool value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttConnectPacket : MqttPacket {
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanSession>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WillCorrelationData>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <KeepAlivePeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaximumPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <ReceiveMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestProblemInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestResponseInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WillResponseTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TopicAliasMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WillContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <WillDelayInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WillFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WillMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <WillMessageExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPayloadFormatIndicator <WillPayloadFormatIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <WillQoS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WillRetain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WillTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <WillUserProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryPrivate>k__BackingField;
    public Byte[] AuthenticationData { get; public set; }
    public string AuthenticationMethod { get; public set; }
    public bool CleanSession { get; public set; }
    public string ClientId { get; public set; }
    public Byte[] WillCorrelationData { get; public set; }
    public ushort KeepAlivePeriod { get; public set; }
    public UInt32 MaximumPacketSize { get; public set; }
    public Byte[] Password { get; public set; }
    public ushort ReceiveMaximum { get; public set; }
    public bool RequestProblemInformation { get; public set; }
    public bool RequestResponseInformation { get; public set; }
    public string WillResponseTopic { get; public set; }
    public UInt32 SessionExpiryInterval { get; public set; }
    public ushort TopicAliasMaximum { get; public set; }
    public string Username { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    public string WillContentType { get; public set; }
    public UInt32 WillDelayInterval { get; public set; }
    public bool WillFlag { get; public set; }
    public Byte[] WillMessage { get; public set; }
    public UInt32 WillMessageExpiryInterval { get; public set; }
    public MqttPayloadFormatIndicator WillPayloadFormatIndicator { get; public set; }
    public MqttQualityOfServiceLevel WillQoS { get; public set; }
    public bool WillRetain { get; public set; }
    public string WillTopic { get; public set; }
    public List`1<MqttUserProperty> WillUserProperties { get; public set; }
    public bool TryPrivate { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationData();
    [CompilerGeneratedAttribute]
public void set_AuthenticationData(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public bool get_CleanSession();
    [CompilerGeneratedAttribute]
public void set_CleanSession(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WillCorrelationData();
    [CompilerGeneratedAttribute]
public void set_WillCorrelationData(Byte[] value);
    [CompilerGeneratedAttribute]
public ushort get_KeepAlivePeriod();
    [CompilerGeneratedAttribute]
public void set_KeepAlivePeriod(ushort value);
    [CompilerGeneratedAttribute]
public UInt32 get_MaximumPacketSize();
    [CompilerGeneratedAttribute]
public void set_MaximumPacketSize(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(Byte[] value);
    [CompilerGeneratedAttribute]
public ushort get_ReceiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ReceiveMaximum(ushort value);
    [CompilerGeneratedAttribute]
public bool get_RequestProblemInformation();
    [CompilerGeneratedAttribute]
public void set_RequestProblemInformation(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequestResponseInformation();
    [CompilerGeneratedAttribute]
public void set_RequestResponseInformation(bool value);
    [CompilerGeneratedAttribute]
public string get_WillResponseTopic();
    [CompilerGeneratedAttribute]
public void set_WillResponseTopic(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_SessionExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public ushort get_TopicAliasMaximum();
    [CompilerGeneratedAttribute]
public void set_TopicAliasMaximum(ushort value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    [CompilerGeneratedAttribute]
public string get_WillContentType();
    [CompilerGeneratedAttribute]
public void set_WillContentType(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_WillDelayInterval();
    [CompilerGeneratedAttribute]
public void set_WillDelayInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_WillFlag();
    [CompilerGeneratedAttribute]
public void set_WillFlag(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_WillMessage();
    [CompilerGeneratedAttribute]
public void set_WillMessage(Byte[] value);
    [CompilerGeneratedAttribute]
public UInt32 get_WillMessageExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_WillMessageExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public MqttPayloadFormatIndicator get_WillPayloadFormatIndicator();
    [CompilerGeneratedAttribute]
public void set_WillPayloadFormatIndicator(MqttPayloadFormatIndicator value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_WillQoS();
    [CompilerGeneratedAttribute]
public void set_WillQoS(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public bool get_WillRetain();
    [CompilerGeneratedAttribute]
public void set_WillRetain(bool value);
    [CompilerGeneratedAttribute]
public string get_WillTopic();
    [CompilerGeneratedAttribute]
public void set_WillTopic(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_WillUserProperties();
    [CompilerGeneratedAttribute]
public void set_WillUserProperties(List`1<MqttUserProperty> value);
    [CompilerGeneratedAttribute]
public bool get_TryPrivate();
    [CompilerGeneratedAttribute]
public void set_TryPrivate(bool value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttDisconnectPacket : MqttPacket {
    [CompilerGeneratedAttribute]
private MqttDisconnectReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerReference>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SessionExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public MqttDisconnectReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public string ServerReference { get; public set; }
    public UInt32 SessionExpiryInterval { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public MqttDisconnectReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttDisconnectReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public string get_ServerReference();
    [CompilerGeneratedAttribute]
public void set_ServerReference(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_SessionExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_SessionExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public abstract class MQTTnet.Packets.MqttPacket : object {
}
[ExtensionAttribute]
public static class MQTTnet.Packets.MqttPacketExtensions : object {
    [ExtensionAttribute]
public static string GetRfcName(MqttPacket packet);
}
public abstract class MQTTnet.Packets.MqttPacketWithIdentifier : MqttPacket {
    [CompilerGeneratedAttribute]
private ushort <PacketIdentifier>k__BackingField;
    public ushort PacketIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public ushort get_PacketIdentifier();
    [CompilerGeneratedAttribute]
public void set_PacketIdentifier(ushort value);
}
public class MQTTnet.Packets.MqttPingReqPacket : MqttPacket {
    public static MqttPingReqPacket Instance;
    private static MqttPingReqPacket();
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttPingRespPacket : MqttPacket {
    public static MqttPingRespPacket Instance;
    private static MqttPingRespPacket();
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttPubAckPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private MqttPubAckReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public MqttPubAckReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public MqttPubAckReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttPubAckReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttPubCompPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private MqttPubCompReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public MqttPubCompReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public MqttPubCompReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttPubCompReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttPublishPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CorrelationData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dup>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MessageExpiryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttPayloadFormatIndicator <PayloadFormatIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<byte> <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <QualityOfServiceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseTopic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Retain>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UInt32> <SubscriptionIdentifiers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <TopicAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public string ContentType { get; public set; }
    public Byte[] CorrelationData { get; public set; }
    public bool Dup { get; public set; }
    public UInt32 MessageExpiryInterval { get; public set; }
    public MqttPayloadFormatIndicator PayloadFormatIndicator { get; public set; }
    unknown ArraySegment`1<byte> PayloadSegment {public set; }
    public ReadOnlySequence`1<byte> Payload { get; public set; }
    public MqttQualityOfServiceLevel QualityOfServiceLevel { get; public set; }
    public string ResponseTopic { get; public set; }
    public bool Retain { get; public set; }
    public List`1<UInt32> SubscriptionIdentifiers { get; public set; }
    public string Topic { get; public set; }
    public ushort TopicAlias { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_CorrelationData();
    [CompilerGeneratedAttribute]
public void set_CorrelationData(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_Dup();
    [CompilerGeneratedAttribute]
public void set_Dup(bool value);
    [CompilerGeneratedAttribute]
public UInt32 get_MessageExpiryInterval();
    [CompilerGeneratedAttribute]
public void set_MessageExpiryInterval(UInt32 value);
    [CompilerGeneratedAttribute]
public MqttPayloadFormatIndicator get_PayloadFormatIndicator();
    [CompilerGeneratedAttribute]
public void set_PayloadFormatIndicator(MqttPayloadFormatIndicator value);
    public void set_PayloadSegment(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public ReadOnlySequence`1<byte> get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(ReadOnlySequence`1<byte> value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_QualityOfServiceLevel();
    [CompilerGeneratedAttribute]
public void set_QualityOfServiceLevel(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public string get_ResponseTopic();
    [CompilerGeneratedAttribute]
public void set_ResponseTopic(string value);
    [CompilerGeneratedAttribute]
public bool get_Retain();
    [CompilerGeneratedAttribute]
public void set_Retain(bool value);
    [CompilerGeneratedAttribute]
public List`1<UInt32> get_SubscriptionIdentifiers();
    [CompilerGeneratedAttribute]
public void set_SubscriptionIdentifiers(List`1<UInt32> value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    [CompilerGeneratedAttribute]
public ushort get_TopicAlias();
    [CompilerGeneratedAttribute]
public void set_TopicAlias(ushort value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttPubRecPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private MqttPubRecReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public MqttPubRecReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public MqttPubRecReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttPubRecReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttPubRelPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private MqttPubRelReasonCode <ReasonCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public MqttPubRelReasonCode ReasonCode { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public MqttPubRelReasonCode get_ReasonCode();
    [CompilerGeneratedAttribute]
public void set_ReasonCode(MqttPubRelReasonCode value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttSubAckPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private List`1<MqttSubscribeReasonCode> <ReasonCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public List`1<MqttSubscribeReasonCode> ReasonCodes { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<MqttSubscribeReasonCode> get_ReasonCodes();
    [CompilerGeneratedAttribute]
public void set_ReasonCodes(List`1<MqttSubscribeReasonCode> value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttSubscribePacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private UInt32 <SubscriptionIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttTopicFilter> <TopicFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public UInt32 SubscriptionIdentifier { get; public set; }
    public List`1<MqttTopicFilter> TopicFilters { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_SubscriptionIdentifier();
    [CompilerGeneratedAttribute]
public void set_SubscriptionIdentifier(UInt32 value);
    [CompilerGeneratedAttribute]
public List`1<MqttTopicFilter> get_TopicFilters();
    [CompilerGeneratedAttribute]
public void set_TopicFilters(List`1<MqttTopicFilter> value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttTopicFilter : object {
    [CompilerGeneratedAttribute]
private bool <NoLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttQualityOfServiceLevel <QualityOfServiceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetainAsPublished>k__BackingField;
    [CompilerGeneratedAttribute]
private MqttRetainHandling <RetainHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    public bool NoLocal { get; public set; }
    public MqttQualityOfServiceLevel QualityOfServiceLevel { get; public set; }
    public bool RetainAsPublished { get; public set; }
    public MqttRetainHandling RetainHandling { get; public set; }
    public string Topic { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NoLocal();
    [CompilerGeneratedAttribute]
public void set_NoLocal(bool value);
    [CompilerGeneratedAttribute]
public MqttQualityOfServiceLevel get_QualityOfServiceLevel();
    [CompilerGeneratedAttribute]
public void set_QualityOfServiceLevel(MqttQualityOfServiceLevel value);
    [CompilerGeneratedAttribute]
public bool get_RetainAsPublished();
    [CompilerGeneratedAttribute]
public void set_RetainAsPublished(bool value);
    [CompilerGeneratedAttribute]
public MqttRetainHandling get_RetainHandling();
    [CompilerGeneratedAttribute]
public void set_RetainHandling(MqttRetainHandling value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttUnsubAckPacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private List`1<MqttUnsubscribeReasonCode> <ReasonCodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonString>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public List`1<MqttUnsubscribeReasonCode> ReasonCodes { get; public set; }
    public string ReasonString { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<MqttUnsubscribeReasonCode> get_ReasonCodes();
    [CompilerGeneratedAttribute]
public void set_ReasonCodes(List`1<MqttUnsubscribeReasonCode> value);
    [CompilerGeneratedAttribute]
public string get_ReasonString();
    [CompilerGeneratedAttribute]
public void set_ReasonString(string value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttUnsubscribePacket : MqttPacketWithIdentifier {
    [CompilerGeneratedAttribute]
private List`1<string> <TopicFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MqttUserProperty> <UserProperties>k__BackingField;
    public List`1<string> TopicFilters { get; public set; }
    public List`1<MqttUserProperty> UserProperties { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_TopicFilters();
    [CompilerGeneratedAttribute]
public void set_TopicFilters(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<MqttUserProperty> get_UserProperties();
    [CompilerGeneratedAttribute]
public void set_UserProperties(List`1<MqttUserProperty> value);
    public virtual string ToString();
}
public class MQTTnet.Packets.MqttUserProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public MqttUserProperty(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual bool Equals(object other);
    public bool Equals(MqttUserProperty other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum MQTTnet.Protocol.MqttAuthenticateReasonCode : Enum {
    public int value__;
    public static MqttAuthenticateReasonCode Success;
    public static MqttAuthenticateReasonCode ContinueAuthentication;
    public static MqttAuthenticateReasonCode ReAuthenticate;
}
public enum MQTTnet.Protocol.MqttConnectReasonCode : Enum {
    public int value__;
    public static MqttConnectReasonCode Success;
    public static MqttConnectReasonCode UnspecifiedError;
    public static MqttConnectReasonCode MalformedPacket;
    public static MqttConnectReasonCode ProtocolError;
    public static MqttConnectReasonCode ImplementationSpecificError;
    public static MqttConnectReasonCode UnsupportedProtocolVersion;
    public static MqttConnectReasonCode ClientIdentifierNotValid;
    public static MqttConnectReasonCode BadUserNameOrPassword;
    public static MqttConnectReasonCode NotAuthorized;
    public static MqttConnectReasonCode ServerUnavailable;
    public static MqttConnectReasonCode ServerBusy;
    public static MqttConnectReasonCode Banned;
    public static MqttConnectReasonCode BadAuthenticationMethod;
    public static MqttConnectReasonCode TopicNameInvalid;
    public static MqttConnectReasonCode PacketTooLarge;
    public static MqttConnectReasonCode QuotaExceeded;
    public static MqttConnectReasonCode PayloadFormatInvalid;
    public static MqttConnectReasonCode RetainNotSupported;
    public static MqttConnectReasonCode QoSNotSupported;
    public static MqttConnectReasonCode UseAnotherServer;
    public static MqttConnectReasonCode ServerMoved;
    public static MqttConnectReasonCode ConnectionRateExceeded;
}
public enum MQTTnet.Protocol.MqttConnectReturnCode : Enum {
    public int value__;
    public static MqttConnectReturnCode ConnectionAccepted;
    public static MqttConnectReturnCode ConnectionRefusedUnacceptableProtocolVersion;
    public static MqttConnectReturnCode ConnectionRefusedIdentifierRejected;
    public static MqttConnectReturnCode ConnectionRefusedServerUnavailable;
    public static MqttConnectReturnCode ConnectionRefusedBadUsernameOrPassword;
    public static MqttConnectReturnCode ConnectionRefusedNotAuthorized;
}
public enum MQTTnet.Protocol.MqttControlPacketType : Enum {
    public int value__;
    public static MqttControlPacketType Connect;
    public static MqttControlPacketType ConnAck;
    public static MqttControlPacketType Publish;
    public static MqttControlPacketType PubAck;
    public static MqttControlPacketType PubRec;
    public static MqttControlPacketType PubRel;
    public static MqttControlPacketType PubComp;
    public static MqttControlPacketType Subscribe;
    public static MqttControlPacketType SubAck;
    public static MqttControlPacketType Unsubscribe;
    public static MqttControlPacketType UnsubAck;
    public static MqttControlPacketType PingReq;
    public static MqttControlPacketType PingResp;
    public static MqttControlPacketType Disconnect;
    public static MqttControlPacketType Auth;
}
public enum MQTTnet.Protocol.MqttDisconnectReasonCode : Enum {
    public int value__;
    public static MqttDisconnectReasonCode NormalDisconnection;
    public static MqttDisconnectReasonCode DisconnectWithWillMessage;
    public static MqttDisconnectReasonCode UnspecifiedError;
    public static MqttDisconnectReasonCode MalformedPacket;
    public static MqttDisconnectReasonCode ProtocolError;
    public static MqttDisconnectReasonCode ImplementationSpecificError;
    public static MqttDisconnectReasonCode NotAuthorized;
    public static MqttDisconnectReasonCode ServerBusy;
    public static MqttDisconnectReasonCode ServerShuttingDown;
    public static MqttDisconnectReasonCode KeepAliveTimeout;
    public static MqttDisconnectReasonCode SessionTakenOver;
    public static MqttDisconnectReasonCode TopicFilterInvalid;
    public static MqttDisconnectReasonCode TopicNameInvalid;
    public static MqttDisconnectReasonCode ReceiveMaximumExceeded;
    public static MqttDisconnectReasonCode TopicAliasInvalid;
    public static MqttDisconnectReasonCode PacketTooLarge;
    public static MqttDisconnectReasonCode MessageRateTooHigh;
    public static MqttDisconnectReasonCode QuotaExceeded;
    public static MqttDisconnectReasonCode AdministrativeAction;
    public static MqttDisconnectReasonCode PayloadFormatInvalid;
    public static MqttDisconnectReasonCode RetainNotSupported;
    public static MqttDisconnectReasonCode QoSNotSupported;
    public static MqttDisconnectReasonCode UseAnotherServer;
    public static MqttDisconnectReasonCode ServerMoved;
    public static MqttDisconnectReasonCode SharedSubscriptionsNotSupported;
    public static MqttDisconnectReasonCode ConnectionRateExceeded;
    public static MqttDisconnectReasonCode MaximumConnectTime;
    public static MqttDisconnectReasonCode SubscriptionIdentifiersNotSupported;
    public static MqttDisconnectReasonCode WildcardSubscriptionsNotSupported;
}
public enum MQTTnet.Protocol.MqttPayloadFormatIndicator : Enum {
    public int value__;
    public static MqttPayloadFormatIndicator Unspecified;
    public static MqttPayloadFormatIndicator CharacterData;
}
public static class MQTTnet.Protocol.MqttPorts : object {
    public static int Default;
    public static int Secure;
}
public enum MQTTnet.Protocol.MqttPropertyId : Enum {
    public int value__;
    public static MqttPropertyId None;
    public static MqttPropertyId PayloadFormatIndicator;
    public static MqttPropertyId MessageExpiryInterval;
    public static MqttPropertyId ContentType;
    public static MqttPropertyId ResponseTopic;
    public static MqttPropertyId CorrelationData;
    public static MqttPropertyId SubscriptionIdentifier;
    public static MqttPropertyId SessionExpiryInterval;
    public static MqttPropertyId AssignedClientIdentifier;
    public static MqttPropertyId ServerKeepAlive;
    public static MqttPropertyId AuthenticationMethod;
    public static MqttPropertyId AuthenticationData;
    public static MqttPropertyId RequestProblemInformation;
    public static MqttPropertyId WillDelayInterval;
    public static MqttPropertyId RequestResponseInformation;
    public static MqttPropertyId ResponseInformation;
    public static MqttPropertyId ServerReference;
    public static MqttPropertyId ReasonString;
    public static MqttPropertyId ReceiveMaximum;
    public static MqttPropertyId TopicAliasMaximum;
    public static MqttPropertyId TopicAlias;
    public static MqttPropertyId MaximumQoS;
    public static MqttPropertyId RetainAvailable;
    public static MqttPropertyId UserProperty;
    public static MqttPropertyId MaximumPacketSize;
    public static MqttPropertyId WildcardSubscriptionAvailable;
    public static MqttPropertyId SubscriptionIdentifiersAvailable;
    public static MqttPropertyId SharedSubscriptionAvailable;
}
public enum MQTTnet.Protocol.MqttPubAckReasonCode : Enum {
    public int value__;
    public static MqttPubAckReasonCode Success;
    public static MqttPubAckReasonCode NoMatchingSubscribers;
    public static MqttPubAckReasonCode UnspecifiedError;
    public static MqttPubAckReasonCode ImplementationSpecificError;
    public static MqttPubAckReasonCode NotAuthorized;
    public static MqttPubAckReasonCode TopicNameInvalid;
    public static MqttPubAckReasonCode PacketIdentifierInUse;
    public static MqttPubAckReasonCode QuotaExceeded;
    public static MqttPubAckReasonCode PayloadFormatInvalid;
}
public enum MQTTnet.Protocol.MqttPubCompReasonCode : Enum {
    public int value__;
    public static MqttPubCompReasonCode Success;
    public static MqttPubCompReasonCode PacketIdentifierNotFound;
}
public enum MQTTnet.Protocol.MqttPubRecReasonCode : Enum {
    public int value__;
    public static MqttPubRecReasonCode Success;
    public static MqttPubRecReasonCode NoMatchingSubscribers;
    public static MqttPubRecReasonCode UnspecifiedError;
    public static MqttPubRecReasonCode ImplementationSpecificError;
    public static MqttPubRecReasonCode NotAuthorized;
    public static MqttPubRecReasonCode TopicNameInvalid;
    public static MqttPubRecReasonCode PacketIdentifierInUse;
    public static MqttPubRecReasonCode QuotaExceeded;
    public static MqttPubRecReasonCode PayloadFormatInvalid;
}
public enum MQTTnet.Protocol.MqttPubRelReasonCode : Enum {
    public int value__;
    public static MqttPubRelReasonCode Success;
    public static MqttPubRelReasonCode PacketIdentifierNotFound;
}
public enum MQTTnet.Protocol.MqttQualityOfServiceLevel : Enum {
    public int value__;
    public static MqttQualityOfServiceLevel AtMostOnce;
    public static MqttQualityOfServiceLevel AtLeastOnce;
    public static MqttQualityOfServiceLevel ExactlyOnce;
}
public enum MQTTnet.Protocol.MqttRetainHandling : Enum {
    public int value__;
    public static MqttRetainHandling SendAtSubscribe;
    public static MqttRetainHandling SendAtSubscribeIfNewSubscriptionOnly;
    public static MqttRetainHandling DoNotSendOnSubscribe;
}
public enum MQTTnet.Protocol.MqttSubscribeReasonCode : Enum {
    public int value__;
    public static MqttSubscribeReasonCode GrantedQoS0;
    public static MqttSubscribeReasonCode GrantedQoS1;
    public static MqttSubscribeReasonCode GrantedQoS2;
    public static MqttSubscribeReasonCode UnspecifiedError;
    public static MqttSubscribeReasonCode ImplementationSpecificError;
    public static MqttSubscribeReasonCode NotAuthorized;
    public static MqttSubscribeReasonCode TopicFilterInvalid;
    public static MqttSubscribeReasonCode PacketIdentifierInUse;
    public static MqttSubscribeReasonCode QuotaExceeded;
    public static MqttSubscribeReasonCode SharedSubscriptionsNotSupported;
    public static MqttSubscribeReasonCode SubscriptionIdentifiersNotSupported;
    public static MqttSubscribeReasonCode WildcardSubscriptionsNotSupported;
}
public enum MQTTnet.Protocol.MqttSubscribeReturnCode : Enum {
    public int value__;
    public static MqttSubscribeReturnCode SuccessMaximumQoS0;
    public static MqttSubscribeReturnCode SuccessMaximumQoS1;
    public static MqttSubscribeReturnCode SuccessMaximumQoS2;
    public static MqttSubscribeReturnCode Failure;
}
public static class MQTTnet.Protocol.MqttTopicValidator : object {
    public static void ThrowIfInvalid(MqttApplicationMessage applicationMessage);
    public static void ThrowIfInvalid(string topic);
    public static void ThrowIfInvalidSubscribe(string topic);
}
public enum MQTTnet.Protocol.MqttUnsubscribeReasonCode : Enum {
    public int value__;
    public static MqttUnsubscribeReasonCode Success;
    public static MqttUnsubscribeReasonCode NoSubscriptionExisted;
    public static MqttUnsubscribeReasonCode UnspecifiedError;
    public static MqttUnsubscribeReasonCode ImplementationSpecificError;
    public static MqttUnsubscribeReasonCode NotAuthorized;
    public static MqttUnsubscribeReasonCode TopicFilterInvalid;
    public static MqttUnsubscribeReasonCode PacketIdentifierInUse;
}
