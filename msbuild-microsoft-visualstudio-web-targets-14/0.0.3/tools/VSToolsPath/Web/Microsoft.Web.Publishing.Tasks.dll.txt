public class Microsoft.VisualStudio.Web.CommonCode.FileSkipData : object {
    [CompilerGeneratedAttribute]
private string <sourceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sourceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <destinationProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <destinationFilePath>k__BackingField;
    public string sourceProvider { get; public set; }
    public string sourceFilePath { get; public set; }
    public string destinationProvider { get; public set; }
    public string destinationFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_sourceProvider();
    [CompilerGeneratedAttribute]
public void set_sourceProvider(string value);
    [CompilerGeneratedAttribute]
public string get_sourceFilePath();
    [CompilerGeneratedAttribute]
public void set_sourceFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_destinationProvider();
    [CompilerGeneratedAttribute]
public void set_destinationProvider(string value);
    [CompilerGeneratedAttribute]
public string get_destinationFilePath();
    [CompilerGeneratedAttribute]
public void set_destinationFilePath(string value);
}
internal class Microsoft.VisualStudio.Web.CommonCode.MsDeployCustomEventAnalyzer : object {
    public static string DBSQLPacakgeProviderTraceEvent;
    public static string ERROR_SUBCATEGORY;
    private static string VSMSDEPLOY_TASKNAME;
    private static string CERT_UI_EVENT_NAME;
    public string EVENT_SENDER_NAME { get; }
    private static MsDeployCustomEventAnalyzer();
    public string get_EVENT_SENDER_NAME();
    public static bool IsSQLTraceEvent(string argType);
    public bool TryExtractFileChangeEvents(CustomBuildEventArgs e, String& operationType, String& path, String& providerName);
    public bool TryExtractDeployErrorCode(BuildErrorEventArgs e, String& errCode);
    public bool TryFormatCustomMessage(CustomBuildEventArgs e, String& formattedMsDeployMsg);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.EmaConstants : object {
    public static string EmaBaseRequest;
    public static string EmaNuGetV2RequestUri;
    public static string MetadataFolder;
    public static string DeploymentTemplates;
    public static string ApiAppJsonFile;
    public static string MicrosoftNamespace;
    public static string GatewayPreviewVersion;
    public static string deploymentTemplateJsonFile;
    public static string ApiDefinitionFile;
    public static string SwaggerEndpointResource;
    internal static string SwashbucklePackageName;
    internal static string SwashbucklePackageVersion;
    internal static string ApiAppServicesPackageName;
    internal static string ApiAppServicesPackageVersion;
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.ApiAppDefinition : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Dependencies> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private Endpoints <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private License <License>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Links> <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Authentication> <Authentication>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Brandcolor>k__BackingField;
    public string SchemaVersion { get; }
    public string Id { get; public set; }
    public string Domain { get; public set; }
    public string Version { get; public set; }
    public string Title { get; public set; }
    public string Summary { get; public set; }
    public string Description { get; public set; }
    public string Author { get; public set; }
    public string Homepage { get; public set; }
    public List`1<Dependencies> Dependencies { get; public set; }
    public Endpoints Endpoints { get; public set; }
    public String[] Categories { get; public set; }
    public License License { get; public set; }
    public bool RequireLicenseAcceptance { get; public set; }
    public List`1<Links> Links { get; public set; }
    public List`1<Authentication> Authentication { get; public set; }
    public string Copyright { get; public set; }
    public string Brandcolor { get; public set; }
    public string get_SchemaVersion();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public void set_Summary(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public List`1<Dependencies> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(List`1<Dependencies> value);
    [CompilerGeneratedAttribute]
public Endpoints get_Endpoints();
    [CompilerGeneratedAttribute]
public void set_Endpoints(Endpoints value);
    [CompilerGeneratedAttribute]
public String[] get_Categories();
    [CompilerGeneratedAttribute]
public void set_Categories(String[] value);
    [CompilerGeneratedAttribute]
public License get_License();
    [CompilerGeneratedAttribute]
public void set_License(License value);
    [CompilerGeneratedAttribute]
public bool get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_RequireLicenseAcceptance(bool value);
    [CompilerGeneratedAttribute]
public List`1<Links> get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(List`1<Links> value);
    [CompilerGeneratedAttribute]
public List`1<Authentication> get_Authentication();
    [CompilerGeneratedAttribute]
public void set_Authentication(List`1<Authentication> value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Brandcolor();
    [CompilerGeneratedAttribute]
public void set_Brandcolor(string value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.ApiAppDefinitionExtensions : object {
    [ExtensionAttribute]
public static Microservice CloneToMicroservice(ApiAppDefinition apiApp);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.Authentication : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationUri>k__BackingField;
    public string Type { get; public set; }
    public String[] Scopes { get; public set; }
    public string Name { get; public set; }
    public string AuthenticationUri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationUri();
    [CompilerGeneratedAttribute]
public void set_AuthenticationUri(string value);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.Dependencies : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Id { get; public set; }
    public string Domain { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.Endpoints : object {
    [CompilerGeneratedAttribute]
private string <ApiDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    public string ApiDefinition { get; public set; }
    public string Status { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApiDefinition();
    [CompilerGeneratedAttribute]
public void set_ApiDefinition(string value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
}
public enum Microsoft.VisualStudio.Web.Publish.EMA.NuGet.ExecutionMode : Enum {
    public int value__;
    public static ExecutionMode Site;
    public static ExecutionMode Continuous;
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.HttpRequestManager : object {
    public string GetRequest(string requestUri);
    public bool PutRequest(string requestUri, string packagePath, string nuGetApiKey);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.License : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Type { get; public set; }
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.Links : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Text { get; public set; }
    public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.Microservice : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private License <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Homepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Icons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLicenseAcceptance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReleaseNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Copyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionMode <Execution>k__BackingField;
    [CompilerGeneratedAttribute]
private Endpoints <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityTokenName>k__BackingField;
    public string SchemaVersion { get; }
    public string Id { get; public set; }
    public string Version { get; public set; }
    public string Name { get; public set; }
    public string Authors { get; public set; }
    public string Description { get; public set; }
    public License License { get; public set; }
    public string Homepage { get; public set; }
    public Dictionary`2<string, string> Icons { get; public set; }
    public bool RequireLicenseAcceptance { get; public set; }
    public string ReleaseNotes { get; public set; }
    public string Copyright { get; public set; }
    public string Language { get; public set; }
    public String[] Tags { get; public set; }
    public ExecutionMode Execution { get; public set; }
    public Endpoints Endpoints { get; public set; }
    public Dictionary`2<string, string> Dependencies { get; public set; }
    public string SecurityTokenName { get; public set; }
    public string get_SchemaVersion();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Authors();
    [CompilerGeneratedAttribute]
public void set_Authors(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public License get_License();
    [CompilerGeneratedAttribute]
public void set_License(License value);
    [CompilerGeneratedAttribute]
public string get_Homepage();
    [CompilerGeneratedAttribute]
public void set_Homepage(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Icons();
    [CompilerGeneratedAttribute]
public void set_Icons(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_RequireLicenseAcceptance();
    [CompilerGeneratedAttribute]
public void set_RequireLicenseAcceptance(bool value);
    [CompilerGeneratedAttribute]
public string get_ReleaseNotes();
    [CompilerGeneratedAttribute]
public void set_ReleaseNotes(string value);
    [CompilerGeneratedAttribute]
public string get_Copyright();
    [CompilerGeneratedAttribute]
public void set_Copyright(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public String[] get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(String[] value);
    [CompilerGeneratedAttribute]
public ExecutionMode get_Execution();
    [CompilerGeneratedAttribute]
public void set_Execution(ExecutionMode value);
    [CompilerGeneratedAttribute]
public Endpoints get_Endpoints();
    [CompilerGeneratedAttribute]
public void set_Endpoints(Endpoints value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Dependencies();
    [CompilerGeneratedAttribute]
public void set_Dependencies(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_SecurityTokenName();
    [CompilerGeneratedAttribute]
public void set_SecurityTokenName(string value);
}
public class Microsoft.VisualStudio.Web.Publish.EMA.NuGet.NuGetPackageBuilder : object {
    internal string CreateNuGetPackage(ApiAppDefinition microservice, string outputPath, string projectPath);
    private static void CopyDirectory(string sourcePath, string destPath);
    private static void CopyMetadata(string metadataPath, string destPath);
    private static void CopyApiAppJson(string apiAppjsonPath, string destPath);
    private static void CopyMicroserviceJson(string apiAppJsonPath, string destinationPath);
    private static XDocument CreateNuspec(ApiAppDefinition manifest);
    private static void PopulateNupkgContent(string outputDirectory, ApiAppDefinition manifest);
    private static void PopulateExtensions(string directory, HashSet`1<string> extensions);
    public static void ZipDirectory(string directoryPath, string archiveFileName);
}
internal class Microsoft.VisualStudio.Web.Publish.PublishToolsVersionInfo : object {
    public static string MSBuildPropertyName;
    [CompilerGeneratedAttribute]
private Version <_current>k__BackingField;
    private Version _current { get; private set; }
    public PublishToolsVersionInfo(Version current);
    private static PublishToolsVersionInfo();
    [CompilerGeneratedAttribute]
private Version get__current();
    [CompilerGeneratedAttribute]
private void set__current(Version value);
    public bool ToolsVersionOK(string versionWantedByProfile);
}
internal class Microsoft.VisualStudio.Web.Publish.VSMsDeployTaskHostObject : object {
    private List`1<TaskItem> _items;
    public static string CredentailItemSpecName;
    public static string UserMetaDataName;
    public static string PasswordMetaDataName;
    public static string SkipFileItemSpecName;
    public static string SourceDeployObject;
    public static string DestinationDeployObject;
    public static string SkipApplyMetadataName;
    public static string DestinationUrlItemSpecName;
    public static string SiteMetadataName;
    public static string SubscriptionCredentialItemSpecName;
    public static string SubscriptionIdMetadataName;
    public static string CertificateMetadataName;
    public static string TokenMetadataName;
    private static VSMsDeployTaskHostObject();
    public void AddCredentialTaskItemIfExists(string userName, string password);
    public void AddSubscriptionCredentialInfo(string subscriptionId, X509Certificate2 managementCertificate);
    public void AddSubscriptionCredentialInfo(string subscriptionId, string token);
    public void AddDestinationUrlInfo(string siteName);
    public void AddFileSkips(List`1<FileSkipData> fileSkipInfos, string rootFolderOfFileToPublish);
    public sealed virtual IEnumerator`1<ITaskItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface Microsoft.Web.Publishing.IVSMSDeployHost {
    public abstract virtual void PopulateOptions(object options);
    public abstract virtual void UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    public abstract virtual void ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
}
internal interface Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost {
    public string TaskName { get; }
    public TaskLoggingHelper Log { get; }
    public IBuildEngine BuildEngine { get; }
    public abstract virtual string get_TaskName();
    public abstract virtual TaskLoggingHelper get_Log();
    public abstract virtual IBuildEngine get_BuildEngine();
    public abstract virtual object GetProperty(string propertyName);
}
internal class Microsoft.Web.Publishing.Tasks.ADSIIISResolver : object {
    private string m_strIISDirectoryServiceString;
    private int m_IisMajorVersion;
    private DirectoryEntry m_iISWebDirectoryEntry;
    private string m_strIISWebNumber;
    private string m_strIISWebServerComment;
    [CompilerGeneratedAttribute]
private string <AppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPoolName>k__BackingField;
    private UriWrapper m_uri;
    [CompilerGeneratedAttribute]
private bool <UseLocalhost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    public string AppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public int MatchScore { get; public set; }
    public bool IsRunning { get; public set; }
    public string AppPoolName { get; public set; }
    public bool UseLocalhost { get; public set; }
    internal DirectoryEntry IISWebDirectoryEntry { get; }
    internal string IisDirectoryServiceString { get; }
    public int IisMajorVersion { get; }
    private bool Initialized { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_AppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MatchScore();
    [CompilerGeneratedAttribute]
public void set_MatchScore(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
public void set_IsRunning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppPoolName();
    [CompilerGeneratedAttribute]
public void set_AppPoolName(string value);
    [CompilerGeneratedAttribute]
public bool get_UseLocalhost();
    [CompilerGeneratedAttribute]
public void set_UseLocalhost(bool value);
    internal DirectoryEntry get_IISWebDirectoryEntry();
    internal string get_IisDirectoryServiceString();
    public static string GetWebNumberForServer(int iisVersion, DirectoryEntry iISWebDirectoryEntry, Uri uri, string severName, IPAddress[] iPAddresses, bool bServerNameMatchesMachine, Boolean& isRunning, Int32& matchScore);
    internal static string GetIPAddressString(IPAddress iPAddress);
    internal static int GetScore(ServiceBindingMatchScore serviceBindingMatchScore);
    internal static ServiceBindingMatchScore ServerBindingMatch(int iisVersion, DirectoryEntry websiteDirectoryEntry, Uri uri, string severName, IPAddress[] iPAddresses, bool fServerNameMatchesMachine);
    internal static String[] ParseBinding(string binding);
    public sealed virtual int get_IisMajorVersion();
    [CompilerGeneratedAttribute]
private bool get_Initialized();
    [CompilerGeneratedAttribute]
private void set_Initialized(bool value);
    public sealed virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    public sealed virtual string GetSiteNumber();
    private DirectoryEntry GetClosestVirtualDirectory(DirectoryEntry entry, string webpath, Int32& currentMax);
    public sealed virtual string GetIisWebsiteFriendlyName();
    public void Cleanup();
    public sealed virtual void Dispose();
}
public class Microsoft.Web.Publishing.Tasks.AspNetMerge : ToolTask {
    private string _applicationPath;
    private string _keyFile;
    private bool _delaySign;
    private string _prefix;
    private string _singleAssemblyName;
    private bool _debug;
    private bool _nologo;
    private string _contentAssemblyName;
    private bool _errorStack;
    private string _exePath;
    private bool _removeCompiledFiles;
    private bool _mergeXmlDocs;
    private string _logErrorFile;
    private bool _copyAttributes;
    private string _assemblyInfo;
    [RequiredAttribute]
public string ExePath { get; public set; }
    [RequiredAttribute]
public string ApplicationPath { get; public set; }
    public string KeyFile { get; public set; }
    public bool DelaySign { get; public set; }
    public string Prefix { get; public set; }
    public string SingleAssemblyName { get; public set; }
    public bool Debug { get; public set; }
    public bool NoLogo { get; public set; }
    public string ContentAssemblyName { get; public set; }
    public bool ErrorStack { get; public set; }
    public bool RemoveCompiledFiles { get; public set; }
    public bool CopyAttributes { get; public set; }
    public bool MergeXmlDocs { get; public set; }
    public string ErrorLogFile { get; public set; }
    public string AssemblyInfo { get; public set; }
    protected string ToolName { get; }
    public virtual bool Execute();
    public string get_ExePath();
    public void set_ExePath(string value);
    public string get_ApplicationPath();
    public void set_ApplicationPath(string value);
    public string get_KeyFile();
    public void set_KeyFile(string value);
    public bool get_DelaySign();
    public void set_DelaySign(bool value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_SingleAssemblyName();
    public void set_SingleAssemblyName(string value);
    public bool get_Debug();
    public void set_Debug(bool value);
    public bool get_NoLogo();
    public void set_NoLogo(bool value);
    public string get_ContentAssemblyName();
    public void set_ContentAssemblyName(string value);
    public bool get_ErrorStack();
    public void set_ErrorStack(bool value);
    public bool get_RemoveCompiledFiles();
    public void set_RemoveCompiledFiles(bool value);
    public bool get_CopyAttributes();
    public void set_CopyAttributes(bool value);
    public bool get_MergeXmlDocs();
    public void set_MergeXmlDocs(bool value);
    public string get_ErrorLogFile();
    public void set_ErrorLogFile(string value);
    public string get_AssemblyInfo();
    public void set_AssemblyInfo(string value);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual bool ValidateParameters();
}
internal abstract class Microsoft.Web.Publishing.Tasks.BaseMSDeployDriver : object {
    protected VSMSDeployObject _dest;
    protected VSMSDeployObject _src;
    protected IVSMSDeployHost _host;
    [DynamicAttribute]
protected object _option;
    protected bool _isCancelOperation;
    protected string _cancelMessage;
    [CompilerGeneratedAttribute]
private string <HighImportanceEventTypes>k__BackingField;
    private Dictionary`2<string, MessageImportance> _highImportanceEventTypes;
    public string TaskName { get; }
    public string HighImportanceEventTypes { get; public set; }
    public bool IsCancelOperation { get; public set; }
    public string CancelMessage { get; public set; }
    protected BaseMSDeployDriver(VSMSDeployObject src, VSMSDeployObject dest, IVSMSDeployHost host);
    public string get_TaskName();
    [CompilerGeneratedAttribute]
public string get_HighImportanceEventTypes();
    [CompilerGeneratedAttribute]
public void set_HighImportanceEventTypes(string value);
    public bool get_IsCancelOperation();
    public void set_IsCancelOperation(bool value);
    public string get_CancelMessage();
    public void set_CancelMessage(string value);
    private bool CancelCallback();
    protected object CreateOptionIfNeeded();
    private Dictionary`2<string, MessageImportance> GetHighImportanceEventTypes();
    private void TraceEventHandlerDynamic(object sender, object e);
    protected void InvokeMSdeploySync();
    public void SyncThruMSDeploy();
    protected abstract virtual void BeforeSync();
    protected abstract virtual void StartSync();
    protected abstract virtual void WaitForDone();
    protected abstract virtual void LogTrace(object e, IDictionary`2<string, MessageImportance> customTypeLoging);
    protected abstract virtual void AfterSync();
    public static BaseMSDeployDriver CreateBaseMSDeployDriver(VSMSDeployObject src, VSMSDeployObject dest, IVSMSDeployHost host);
}
public class Microsoft.Web.Publishing.Tasks.CheckALinkIncluded : Task {
    private string m_linkName;
    private string m_links;
    private bool m_result;
    [RequiredAttribute]
public string LinkName { get; public set; }
    public string Links { get; public set; }
    [OutputAttribute]
public bool Result { get; }
    public string get_LinkName();
    public void set_LinkName(string value);
    public string get_Links();
    public void set_Links(string value);
    public bool get_Result();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CheckItemsCount : Task {
    private ITaskItem[] m_items;
    private int m_count;
    [RequiredAttribute]
public ITaskItem[] Items { get; public set; }
    [OutputAttribute]
public int Count { get; }
    public ITaskItem[] get_Items();
    public void set_Items(ITaskItem[] value);
    public int get_Count();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CheckItemsForDuplication : Task {
    private ITaskItem[] m_items;
    private string m_metaDataToVerify;
    private bool m_hasDuplicate;
    private TraceLevel m_traceLevel;
    public string MetadataToVerify { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Items { get; public set; }
    [OutputAttribute]
public bool HasDuplicate { get; }
    public string TraceLevel { get; public set; }
    public string get_MetadataToVerify();
    public void set_MetadataToVerify(string value);
    public ITaskItem[] get_Items();
    public void set_Items(ITaskItem[] value);
    public bool get_HasDuplicate();
    public string get_TraceLevel();
    public void set_TraceLevel(string value);
    private void LogDuplicate(ITaskItem existingItem, ITaskItem newItem);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CheckPathAttributes : Task {
    private string m_path;
    private bool m_isFolder;
    private bool m_isRooted;
    private bool m_isExists;
    [RequiredAttribute]
public string Path { get; public set; }
    [OutputAttribute]
public bool IsFolder { get; }
    [OutputAttribute]
public bool IsRooted { get; }
    [OutputAttribute]
public bool IsExists { get; }
    public string get_Path();
    public void set_Path(string value);
    public bool get_IsFolder();
    public bool get_IsRooted();
    public bool get_IsExists();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CollectFilesinFolder : Task {
    private ITaskItem[] m_fullPathMatchs;
    private ITaskItem[] m_relativePathMatchs;
    private ITaskItem[] m_excludeFullPathMatchs;
    private ITaskItem[] m_excludeRelativePathMatchs;
    private List`1<ITaskItem> m_resultITaskItem;
    private string m_rootPath;
    private bool m_recursive;
    [CompilerGeneratedAttribute]
private bool <SkipHiddenItems>k__BackingField;
    [RequiredAttribute]
public string RootPath { get; public set; }
    public ITaskItem[] FullPathMatchs { get; public set; }
    public ITaskItem[] RelativePathMatchs { get; public set; }
    public ITaskItem[] ExcludeFullPathMatchs { get; public set; }
    public ITaskItem[] ExcludeRelativePathMatchs { get; public set; }
    public bool Recursive { get; public set; }
    public bool SkipHiddenItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; }
    private bool IncludeAll { get; }
    public string get_RootPath();
    public void set_RootPath(string value);
    public ITaskItem[] get_FullPathMatchs();
    public void set_FullPathMatchs(ITaskItem[] value);
    public ITaskItem[] get_RelativePathMatchs();
    public void set_RelativePathMatchs(ITaskItem[] value);
    public ITaskItem[] get_ExcludeFullPathMatchs();
    public void set_ExcludeFullPathMatchs(ITaskItem[] value);
    public ITaskItem[] get_ExcludeRelativePathMatchs();
    public void set_ExcludeRelativePathMatchs(ITaskItem[] value);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipHiddenItems();
    [CompilerGeneratedAttribute]
public void set_SkipHiddenItems(bool value);
    public ITaskItem[] get_Result();
    private bool get_IncludeAll();
    private static bool ShouldPathAdded(string fullPath, string relativePath, bool defaultInclude, Regex[] fullPathMatchs, Regex[] relativePathMatchs, Regex[] excludeFullPathMatchs, Regex[] excludeRelativePathMatchs);
    private void CollectAllFiles(string rootPath, DirectoryInfo dirinfo, bool recursive, List`1<ITaskItem> result, bool defaultInclude, Regex[] fullPathMatchs, Regex[] relativePathMatchs, Regex[] excludeFullPathMatchs, Regex[] excludeRelativePathMatchs);
    private static Regex[] CreateRegexs(ITaskItem[] items);
    public virtual bool Execute();
    [CompilerGeneratedAttribute]
private bool <CollectAllFiles>b__34_1(FileInfo f);
    [CompilerGeneratedAttribute]
private bool <CollectAllFiles>b__34_3(DirectoryInfo f);
}
internal enum Microsoft.Web.Publishing.Tasks.Common.DeclareParameterMetadata : Enum {
    public int value__;
    public static DeclareParameterMetadata Kind;
    public static DeclareParameterMetadata Scope;
    public static DeclareParameterMetadata Match;
    public static DeclareParameterMetadata Description;
    public static DeclareParameterMetadata DefaultValue;
    public static DeclareParameterMetadata Tags;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ExistingDeclareParameterMetadata : Enum {
    public int value__;
    public static ExistingDeclareParameterMetadata Kind;
    public static ExistingDeclareParameterMetadata Scope;
    public static ExistingDeclareParameterMetadata Match;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ExistingParameterValiationMetadata : Enum {
    public int value__;
    public static ExistingParameterValiationMetadata Element;
    public static ExistingParameterValiationMetadata Kind;
    public static ExistingParameterValiationMetadata ValidationString;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ExistingSyncParameterMetadata : Enum {
    public int value__;
    public static ExistingSyncParameterMetadata Kind;
    public static ExistingSyncParameterMetadata Scope;
    public static ExistingSyncParameterMetadata Match;
    public static ExistingSyncParameterMetadata Value;
}
internal static class Microsoft.Web.Publishing.Tasks.Common.ItemFilter : object {
    public static bool ItemFilterPipelineMetadata(ITaskItem item, string metadataName, string metadataValue, bool fIgnoreCase);
    public static bool ItemFilterExcludeTrue(ITaskItem iTaskItem);
}
internal class Microsoft.Web.Publishing.Tasks.Common.ParameterInfo : object {
    public string Name;
    public string Value;
    public ParameterInfo(string parameterName, string parameterStringValue);
}
internal class Microsoft.Web.Publishing.Tasks.Common.ParameterInfoWithEntry : ParameterInfo {
    public string Kind;
    public string Scope;
    public string Match;
    public string Description;
    public string DefaultValue;
    public string Tags;
    public string Element;
    public string ValidationString;
    public ParameterInfoWithEntry(string name, string value, string kind, string scope, string matchRegularExpression, string description, string defaultValue, string tags, string element, string validationString);
}
internal enum Microsoft.Web.Publishing.Tasks.Common.PipelineMetadata : Enum {
    public int value__;
    public static PipelineMetadata DestinationRelativePath;
    public static PipelineMetadata Exclude;
    public static PipelineMetadata FromTarget;
    public static PipelineMetadata Category;
}
internal class Microsoft.Web.Publishing.Tasks.Common.ProviderOption : ParameterInfo {
    public string FactoryName;
    public ProviderOption(string factorName, string parameterName, string parameterStringValue);
}
internal enum Microsoft.Web.Publishing.Tasks.Common.ReplaceRuleMetadata : Enum {
    public int value__;
    public static ReplaceRuleMetadata ObjectName;
    public static ReplaceRuleMetadata ScopeAttributeName;
    public static ReplaceRuleMetadata ScopeAttributeValue;
    public static ReplaceRuleMetadata TargetAttributeName;
    public static ReplaceRuleMetadata Match;
    public static ReplaceRuleMetadata Replace;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SimpleSyncParameterMetadata : Enum {
    public int value__;
    public static SimpleSyncParameterMetadata Value;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SkipRuleMetadata : Enum {
    public int value__;
    public static SkipRuleMetadata SkipAction;
    public static SkipRuleMetadata ObjectName;
    public static SkipRuleMetadata AbsolutePath;
    public static SkipRuleMetadata XPath;
    public static SkipRuleMetadata KeyAttribute;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SqlCommandVariableMetaData : Enum {
    public int value__;
    public static SqlCommandVariableMetaData Value;
    public static SqlCommandVariableMetaData IsDeclared;
    public static SqlCommandVariableMetaData SourcePath;
    public static SqlCommandVariableMetaData SourcePath_RegExExcaped;
    public static SqlCommandVariableMetaData DestinationGroup;
}
internal enum Microsoft.Web.Publishing.Tasks.Common.SyncParameterMetadata : Enum {
    public int value__;
    public static SyncParameterMetadata Kind;
    public static SyncParameterMetadata Scope;
    public static SyncParameterMetadata Match;
    public static SyncParameterMetadata Value;
    public static SyncParameterMetadata Description;
    public static SyncParameterMetadata DefaultValue;
    public static SyncParameterMetadata Tags;
}
internal static class Microsoft.Web.Publishing.Tasks.Common.Utility : object {
    private static Dictionary`2<string, string> m_wellKnownNamesDict;
    private static Dictionary`2<string, string> m_wellKnownNamesMsdeployDict;
    private static StringBuilder m_stringBuilder;
    private static bool _isMSDeployInstalled;
    private static string _strErrorMessage;
    private static string s_strMinimumVersion;
    public static Char[] s_specialCharactersForCmd;
    private static PriorityIndexComparer s_PriorityIndexComparer;
    private static string strMsdeployFwlink1;
    private static string strMsdeployFwlink2;
    private static string strMsdeployFwlink3;
    private static string strMsdeployFwlink4;
    private static string strMsdeployFwlink5;
    internal static string strMsdeployInstallationFwdLink;
    private static String[] strMsdeployFwlinks;
    private static StringBuilder StringBuilder { get; }
    public static StringBuilder CleanStringBuilder { get; }
    public static bool IsMSDeployInstalled { get; }
    internal static PriorityIndexComparer ParameterTaskComparer { get; }
    private static Utility();
    public static bool IsInternalMsdeployWellKnownItemMetadata(string name);
    public static bool IsMSBuildWellKnownItemMetadata(string name);
    public static bool IsMsDeployWellKnownLocationInfo(string name);
    private static StringBuilder get_StringBuilder();
    public static StringBuilder get_CleanStringBuilder();
    public static UInt32 GetInstalledMajorIisVersion();
    public static bool IsIis6(string verFromTarget);
    public static bool get_IsMSDeployInstalled();
    public static bool CheckMSDeploymentVersion(TaskLoggingHelper log, String& errorMessage);
    private static bool CheckMSDeploymentVersion();
    public static string GetNodeFromProjectFile(XmlDocument doc, XmlNamespaceManager xmlnsManager, string xmlPath, string defaultNamespace);
    internal static void BuildArgumentsBaseOnEnumTypeName(ITaskItem item, List`1<string> arguments, Type enumType, string valueQuote);
    internal static string AlternativeQuote(string valueQuote);
    internal static string PutValueInQuote(string value, string quote);
    public static bool IsOneof(string source, String[] listOfItems, StringComparison comparsion);
    public static void MsDeployExeEndOfExecuteMessage(bool bSuccess, string destType, string destRoot, TaskLoggingHelper Log);
    public static void MsDeployEndOfExecuteMessage(bool bSuccess, string destType, string destRoot, TaskLoggingHelper Log);
    public static string ConvertAbsPhysicalPathToAbsUriPath(string physicalPath);
    public static void AddReplaceRulesToOptions(object syncConfigRules, ITaskItem[] replaceRuleItems);
    internal static void AdjsutSkipDirectives(object baseOptions, List`1<string> stringList, bool enabled, TaskLoggingHelper log);
    public static void AddSkipDirectiveToBaseOptions(object baseOptions, ITaskItem[] skipRuleItems, List`1<string> enableSkipDirectiveList, List`1<string> disableSkipDirectiveList, TaskLoggingHelper log);
    public static void AddDeclarParameterToOptions(object vSMSDeploySyncOption, ITaskItem item);
    public static void SetDynamicProperty(object thisObj, string propertyName, object value);
    public static void AddDeclareParametersToOptions(object vSMSDeploySyncOption, ITaskItem[] originalItems, bool fOptimisticPickNextDefaultValue);
    public static void AddImportDeclareParametersFileOptions(object vSMSDeploySyncOption, ITaskItem[] items);
    public static void AddSetParametersFilesToObject(object deploymentObject, IList`1<string> filenames, IVSMSDeployHost host);
    public static void AddSimpleSetParametersVsMsDeployObject(VSMSDeployObject srcVsMsDeployobject, ITaskItem[] originalItems, bool fOptimisticPickNextDefaultValue);
    public static void AddProviderOptions(object deploymentProviderOptions, IList`1<ProviderOption> providerOptions, IVSMSDeployHost host);
    public static void AddSimpleSetParametersToObject(object deploymentObject, IList`1<ParameterInfo> parameters, IVSMSDeployHost host);
    public static void AddSetParametersToObject(object deploymentObject, IList`1<ParameterInfoWithEntry> parameters, IVSMSDeployHost host);
    public static void AddSetParametersVsMsDeployObject(VSMSDeployObject srcVsMsDeployobject, ITaskItem[] originalItems, bool fOptimisticPickNextDefaultValue);
    public static void AddSetParametersFilesVsMsDeployObject(VSMSDeployObject srcVsMsDeployobject, ITaskItem[] items);
    public static string DumpITeaskItem(ITaskItem iTaskItem);
    public static bool IsDeploymentWellKnownProvider(string strProvider);
    internal static void RemoveAllEmptyDirectories(string dirPath, TaskLoggingHelper Log);
    internal static void RemoveAllEmptyDirectories(DirectoryInfo dirinfo, TaskLoggingHelper log);
    internal static PriorityIndexComparer get_ParameterTaskComparer();
    public static IList`1<ITaskItem> SortParametersTaskItems(ITaskItem[] taskItems, bool fOptimisticPickNextNonNullDefaultValue, string PropertyName);
    private static int ContainMsdeployFwlink(string errorMessage, String& provider);
    internal static bool IsType(Type type, Type checkType);
    internal static string EnsureTrailingSlash(string str);
    internal static string EnsureTrailingBackSlash(string str);
    internal static void LogVsMsDeployException(TaskLoggingHelper Log, Exception e);
    public static IList`1<ITaskItem> SortTaskItemsByPriority(ITaskItem[] taskItems);
    public static string StripOffTrailingSlashes(string str);
    public static string EnsureTrailingSlashes(string rootPath, char slash);
    public static string GetFilePathResolution(string source, string sourceRootPath);
    internal static string GetIPAddressString(IPAddress iPAddress);
    internal static bool MatchOneOfIPAddress(string IISBindingIPString, IPAddress[] iPAddresses);
    internal static void SetupMSWebDeployDynamicAssemblies(string strVersionsToTry, Task task);
    public static string EscapeTextForMSBuildVariable(string text);
    public static string GetFullUserAgentString(string userAgent);
}
public class Microsoft.Web.Publishing.Tasks.ConcatFullServiceUrlWithSiteName : Task {
    private string m_serviceUrl;
    private string m_siteAppName;
    private string m_resultUrl;
    [RequiredAttribute]
public string ServiceUrl { get; public set; }
    [RequiredAttribute]
public string SiteAppName { get; public set; }
    [OutputAttribute]
public string ResultUrl { get; }
    public string get_ServiceUrl();
    public void set_ServiceUrl(string value);
    public string get_SiteAppName();
    public void set_SiteAppName(string value);
    public string get_ResultUrl();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CopyPipelineFiles : Task {
    private ITaskItem[] m_pipeLineItemsITaskItem;
    private List`1<ITaskItem> m_updateItemsITaskItem;
    private bool m_updateItemSpec;
    private bool m_skipMetadataExcludeTrueItems;
    private bool m_deleteItemsMarkAsExcludeTrue;
    private int m_maxRetries;
    private int m_retryDelay;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceDirectory>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] PipelineItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResultPipelineItems { get; }
    [OutputAttribute]
public ITaskItem[] UpdatedPipelineItems { get; }
    [RequiredAttribute]
public string TargetDirectory { get; public set; }
    [RequiredAttribute]
public string SourceDirectory { get; public set; }
    public bool SkipMetadataExcludeTrueItems { get; public set; }
    public bool DeleteItemsMarkAsExcludeTrue { get; public set; }
    public int MaxRetries { get; public set; }
    public int RetryDelay { get; public set; }
    public bool UpdateItemSpec { get; public set; }
    public ITaskItem[] get_PipelineItems();
    public void set_PipelineItems(ITaskItem[] value);
    public ITaskItem[] get_ResultPipelineItems();
    public ITaskItem[] get_UpdatedPipelineItems();
    [CompilerGeneratedAttribute]
public string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_SourceDirectory();
    [CompilerGeneratedAttribute]
public void set_SourceDirectory(string value);
    public bool get_SkipMetadataExcludeTrueItems();
    public void set_SkipMetadataExcludeTrueItems(bool value);
    public bool get_DeleteItemsMarkAsExcludeTrue();
    public void set_DeleteItemsMarkAsExcludeTrue(bool value);
    public int get_MaxRetries();
    public void set_MaxRetries(int value);
    public int get_RetryDelay();
    public void set_RetryDelay(int value);
    public bool get_UpdateItemSpec();
    public void set_UpdateItemSpec(bool value);
    public virtual bool Execute();
    internal static bool CopyPipelineFilesToFolder(TaskLoggingHelper log, ITaskItem[] allpipeLineItems, string sourceFolderName, string targetFolderName, ItemMetadataFilter itemMetadataSkipFilter, bool fUpdateItemSpec, bool deleteItemsMarkAsExcludeTrue, List`1<ITaskItem> updatedPipeLineItems, List`1<ITaskItem> failedPipeLineItems);
    internal static bool CreateDirectoryInNeeded(TaskLoggingHelper log, string folderName);
}
public class Microsoft.Web.Publishing.Tasks.CreateAppHostXDTFile : Task {
    [CompilerGeneratedAttribute]
private string <DestinationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageId>k__BackingField;
    [RequiredAttribute]
public string DestinationPath { get; public set; }
    [RequiredAttribute]
public string PackageId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DestinationPath();
    [CompilerGeneratedAttribute]
public void set_DestinationPath(string value);
    [CompilerGeneratedAttribute]
public string get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(string value);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.CreateDacPac : Task {
    private string _Source;
    private string m_resultRegularExpression;
    [CompilerGeneratedAttribute]
private string <OutputDacPacPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalSourceFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMSDeployExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreviewMSDeployCommandLineOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDBVersionToUseForSqlExpress>k__BackingField;
    [RequiredAttribute]
public string Source { get; public set; }
    [RequiredAttribute]
public string OutputDacPacPath { get; public set; }
    public string RelativeRootPath { get; public set; }
    [OutputAttribute]
public string Result { get; }
    public ITaskItem[] AdditionalSourceFlags { get; public set; }
    public string TaskName { get; }
    public bool UseMSDeployExe { get; public set; }
    public string MSDeployExePath { get; public set; }
    public bool PreviewMSDeployCommandLineOnly { get; public set; }
    public string MSDeployVersionsToTry { get; public set; }
    public string LocalDBVersionToUseForSqlExpress { get; public set; }
    public string get_Source();
    public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDacPacPath();
    [CompilerGeneratedAttribute]
public void set_OutputDacPacPath(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeRootPath();
    [CompilerGeneratedAttribute]
public void set_RelativeRootPath(string value);
    public string get_Result();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalSourceFlags();
    [CompilerGeneratedAttribute]
public void set_AdditionalSourceFlags(ITaskItem[] value);
    protected bool IsExtensionDacPac(string path);
    protected bool IsDacPacFile(string connectionSource);
    internal virtual void SetupMSWebDeployDynamicAssemblies();
    internal virtual void CreateDirectoryForOutputDacPacPath(string outputDacPacPath);
    internal virtual void InvokeVSMSDeploy(string sourcePath, ITaskItem[] additionalSourceFlags, string outputDacPacPath);
    public virtual void LogErrorFromException(Exception ex);
    public virtual bool HasLoggedErrors();
    public virtual bool Execute();
    public sealed virtual string get_TaskName();
    [CompilerGeneratedAttribute]
public bool get_UseMSDeployExe();
    [CompilerGeneratedAttribute]
public void set_UseMSDeployExe(bool value);
    [CompilerGeneratedAttribute]
public string get_MSDeployExePath();
    [CompilerGeneratedAttribute]
public void set_MSDeployExePath(string value);
    [CompilerGeneratedAttribute]
public bool get_PreviewMSDeployCommandLineOnly();
    [CompilerGeneratedAttribute]
public void set_PreviewMSDeployCommandLineOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    [CompilerGeneratedAttribute]
public string get_LocalDBVersionToUseForSqlExpress();
    [CompilerGeneratedAttribute]
public void set_LocalDBVersionToUseForSqlExpress(string value);
    public sealed virtual object GetProperty(string propertyName);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.PopulateOptions(object options);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override TaskLoggingHelper Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_Log();
}
public class Microsoft.Web.Publishing.Tasks.CreateProviderList : Task {
    private static string TypeAttribute;
    private static string PathAttribute;
    private static string NameAttribute;
    private static string OrderAttribute;
    private static string DescriptionAttribute;
    private static string EnabledAttribute;
    private static string PreSource;
    private static string SourceManifestTag;
    private static string DestinationManifestTag;
    private static string ObjectGroupTag;
    private static string ObjectTag;
    private static string UpdateFromTag;
    private static string IncludeTag;
    private static string ProjectTag;
    private static string ConfigurationTag;
    private static string PlatformTag;
    private static string PublishDatabaseSettingsTag;
    private static string EnableWebPublishProfileFileTag;
    private static bool s_NotFireAssert;
    private ITaskItem _providersFile;
    private ITaskItem[] _list;
    private ITaskItem[] _sourceManifest;
    private string _providersXml;
    private bool importInSyncCheck;
    private string m_projectFileFullPath;
    [CompilerGeneratedAttribute]
private bool <UseMSDeployExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployExePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreviewMSDeployCommandLineOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalDBVersionToUseForSqlExpress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    private static string s_Connection_AttachDbFilename;
    private static string s_Connection_DataSourcee;
    private static string s_Connection_UserInstance;
    private static string s_Connection_DataDirectory;
    private static string s_Connection_SDFExtension;
    private static string s_Connection_LocalDBPrefix;
    private static string s_unlockDatabaseSql;
    private static string s_preUnlockDatabaseSql;
    public ITaskItem ProvidersFile { get; public set; }
    public string ProvidersXml { get; public set; }
    public bool UseMSDeployExe { get; public set; }
    public string MSDeployExePath { get; public set; }
    public bool PreviewMSDeployCommandLineOnly { get; public set; }
    public string LocalDBVersionToUseForSqlExpress { get; public set; }
    public string ProjectFileFullPath { get; public set; }
    public bool ImportInSyncCheck { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] List { get; }
    [OutputAttribute]
public ITaskItem[] SourceManifest { get; }
    public string MSDeployVersionsToTry { get; public set; }
    private string Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.TaskName { get; }
    private TaskLoggingHelper Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.Log { get; }
    private IBuildEngine Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.BuildEngine { get; }
    private static CreateProviderList();
    public ITaskItem get_ProvidersFile();
    public void set_ProvidersFile(ITaskItem value);
    public string get_ProvidersXml();
    public void set_ProvidersXml(string value);
    [CompilerGeneratedAttribute]
public bool get_UseMSDeployExe();
    [CompilerGeneratedAttribute]
public void set_UseMSDeployExe(bool value);
    [CompilerGeneratedAttribute]
public string get_MSDeployExePath();
    [CompilerGeneratedAttribute]
public void set_MSDeployExePath(string value);
    [CompilerGeneratedAttribute]
public bool get_PreviewMSDeployCommandLineOnly();
    [CompilerGeneratedAttribute]
public void set_PreviewMSDeployCommandLineOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_LocalDBVersionToUseForSqlExpress();
    [CompilerGeneratedAttribute]
public void set_LocalDBVersionToUseForSqlExpress(string value);
    public string get_ProjectFileFullPath();
    public void set_ProjectFileFullPath(string value);
    public bool get_ImportInSyncCheck();
    public void set_ImportInSyncCheck(bool value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    public ITaskItem[] get_List();
    public ITaskItem[] get_SourceManifest();
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    internal static bool IsSet(ResolveConnectionStringFlag setting, ResolveConnectionStringFlag checkflag);
    private static string ResolveConnectionString(string connectionString, IVsPublishMsBuildTaskHost host, ResolveConnectionStringFlag& flags);
    internal static string ResolvePath(string path, IVsPublishMsBuildTaskHost host);
    internal static string ResolvePathWithRoot(string path, string projectRoot);
    internal static VSMSDeployObject CreateVSMSDeployObject(ManifestData manifest, bool preserveProviderOptions);
    internal static ITaskItem[] CreateMSDeployObject(ManifestData manifest, bool preserveProviderOptions);
    internal static void ExecuteVSMSDeployProcessing(IVSMSDeployHost vsmsdeployHost, ManifestData PreSource, ManifestData Source);
    private sealed virtual override string Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_TaskName();
    private sealed virtual override TaskLoggingHelper Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_Log();
    private sealed virtual override IBuildEngine Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_BuildEngine();
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.PopulateOptions(object options);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    public sealed virtual object GetProperty(string propertyName);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Publishing.Tasks.CustomBuildWithPropertiesEventArgs : CustomBuildEventArgs {
    private HybridDictionary m_hybridDictionary;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public CustomBuildWithPropertiesEventArgs(string msg, string keyword, string senderName);
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection get_Keys();
    public sealed virtual void Remove(object key);
    public sealed virtual ICollection get_Values();
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Web.Publishing.Tasks.DeploymentErrorCode : object {
    public static string ERROR_PROVIDER_NOT_FOUND;
    public static string ERROR_API_NOT_SUPPORTED;
}
internal class Microsoft.Web.Publishing.Tasks.DeploymentErrorLogger : object {
    public Exception DeploymentException;
    private string _errCode;
    private string _errMsg;
    private DynamicAssembly _assembly;
    public string ErrorMessage { get; public set; }
    public string ErrorCode { get; public set; }
    public DeploymentErrorLogger(Exception ex, DynamicAssembly assembly);
    public DeploymentErrorLogger(DynamicAssembly assembly);
    public bool CanLogABetterError();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public string get_ErrorCode();
    public void set_ErrorCode(string value);
    private void ExtractErrorCodeFromException();
    private bool IsProviderNotFound(string providerName);
}
internal enum Microsoft.Web.Publishing.Tasks.DeployStatus : Enum {
    public int value__;
    public static DeployStatus ReadyToDeploy;
    public static DeployStatus Deploying;
    public static DeployStatus DeployFinished;
    public static DeployStatus DeployAbandoned;
    public static DeployStatus DeployFailed;
}
public class Microsoft.Web.Publishing.Tasks.DetectRemoteProvider : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProviderPathes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <SetupRemoteCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskDependentObjectFactory <Factory>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Source { get; public set; }
    [RequiredAttribute]
public string ProviderName { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProviderPathes { get; public set; }
    public string MSDeployVersionsToTry { get; public set; }
    public Action SetupRemoteCertificateValidationCallback { get; public set; }
    internal ITaskDependentObjectFactory Factory { get; internal set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProviderPathes();
    [CompilerGeneratedAttribute]
public void set_ProviderPathes(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    [CompilerGeneratedAttribute]
public Action get_SetupRemoteCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_SetupRemoteCertificateValidationCallback(Action value);
    [CompilerGeneratedAttribute]
internal ITaskDependentObjectFactory get_Factory();
    [CompilerGeneratedAttribute]
internal void set_Factory(ITaskDependentObjectFactory value);
    public virtual bool Execute();
    internal virtual void LogDetectionError(string errorMessage);
    private bool AllowUntrustedCertCallback(object sp, X509Certificate cert, X509Chain chain, SslPolicyErrors problem);
}
internal class Microsoft.Web.Publishing.Tasks.DynamicAssembly : object {
    [CompilerGeneratedAttribute]
private string <AssemblyFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    public string AssemblyFullName { get; public set; }
    public Version Version { get; public set; }
    public Assembly Assembly { get; public set; }
    public DynamicAssembly(string assemblyName, Version verToLoad, string publicKeyToken);
    [CompilerGeneratedAttribute]
public string get_AssemblyFullName();
    [CompilerGeneratedAttribute]
public void set_AssemblyFullName(string value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public void set_Assembly(Assembly value);
    public Type GetType(string typeName);
    public virtual Type TryGetType(string typeName);
    public object GetEnumValue(string enumName, string enumValue);
    public object GetEnumValueIgnoreCase(string enumName, string enumValue);
    public bool TryGetEnumValue(string enumTypeName, string enumStrValue, Object& retValue);
    public object CreateObject(string typeName);
    public object CreateObject(string typeName, Object[] arguments);
    public object CallStaticMethod(string typeName, string methodName, Object[] arguments);
    internal static Delegate CreateEventHandlerDelegate(EventInfo evt, TDelegate d);
    public static Delegate AddEventDeferHandler(object obj, string eventName, Delegate deferEventHandler);
    public static void AddEventHandler(object obj, string eventName, Delegate eventHandler);
    public static void RemoveEventHandler(object obj, string eventName, Delegate eventHandler);
}
public class Microsoft.Web.Publishing.Tasks.EMA.PublishNuGetPackage : Task {
    [CompilerGeneratedAttribute]
private string <ManifestFileFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFileFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfileUserFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiKey>k__BackingField;
    [RequiredAttribute]
public string ManifestFileFullPath { get; public set; }
    [RequiredAttribute]
public string ProjectFileFullPath { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [RequiredAttribute]
public string ProfileUserFile { get; public set; }
    public string ApiKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ManifestFileFullPath();
    [CompilerGeneratedAttribute]
public void set_ManifestFileFullPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFileFullPath();
    [CompilerGeneratedAttribute]
public void set_ProjectFileFullPath(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProfileUserFile();
    [CompilerGeneratedAttribute]
public void set_ProfileUserFile(string value);
    [CompilerGeneratedAttribute]
public string get_ApiKey();
    [CompilerGeneratedAttribute]
public void set_ApiKey(string value);
    public virtual bool Execute();
    public string GetMicroserviceApiKey();
    public string CryptUnProtectPassword(Byte[] cryptedPassword);
}
public class Microsoft.Web.Publishing.Tasks.EscapeTextForRegularExpressions : Task {
    private string m_text;
    private string m_resultRegularExpression;
    [RequiredAttribute]
public string Text { get; public set; }
    [OutputAttribute]
public string Result { get; }
    public string get_Text();
    public void set_Text(string value);
    public string get_Result();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.EscapeXMLString : Task {
    private string m_Path;
    private string m_resultPath;
    [RequiredAttribute]
public string Source { get; public set; }
    [OutputAttribute]
public string Result { get; }
    public string get_Source();
    public void set_Source(string value);
    public string get_Result();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.ExportManifestFile : Task {
    private ITaskItem[] m_manifests;
    private string m_manifestFile;
    private bool m_generateFileEvenIfEmpty;
    [RequiredAttribute]
public ITaskItem[] Manifests { get; public set; }
    [RequiredAttribute]
public string ManifestFile { get; public set; }
    public bool GenerateFileEvenIfEmpty { get; public set; }
    public ITaskItem[] get_Manifests();
    public void set_Manifests(ITaskItem[] value);
    public string get_ManifestFile();
    public void set_ManifestFile(string value);
    public bool get_GenerateFileEvenIfEmpty();
    public void set_GenerateFileEvenIfEmpty(bool value);
    private static void SaveDocument(XmlDocument document, string outputFileName, Encoding encode);
    private static void WriteManifestsToFile(TaskLoggingHelper loggingHelper, ITaskItem[] items, string outputFileName);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.ExportParametersFile : Task {
    private ITaskItem[] m_parameters;
    private string m_declareParametersFile;
    private string m_declareSetParametersFile;
    private string m_setParametersFile;
    private bool m_generateFileEvenIfEmpty;
    private bool m_includeDefaultValue;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    private static String[] s_parameterAttributes;
    private static String[] s_setParameterAttributes;
    private static String[] s_parameterEntryIdentities;
    private static String[] s_parameterValidationIdentities;
    [RequiredAttribute]
public ITaskItem[] Parameters { get; public set; }
    public string DeclareParameterFile { get; public set; }
    public string DeclareSetParameterFile { get; public set; }
    public string SetParameterFile { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public bool GenerateFileEvenIfEmpty { get; public set; }
    public bool IncludeDefaultValue { get; public set; }
    private static ExportParametersFile();
    public ITaskItem[] get_Parameters();
    public void set_Parameters(ITaskItem[] value);
    public string get_DeclareParameterFile();
    public void set_DeclareParameterFile(string value);
    public string get_DeclareSetParameterFile();
    public void set_DeclareSetParameterFile(string value);
    public string get_SetParameterFile();
    public void set_SetParameterFile(string value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    public bool get_GenerateFileEvenIfEmpty();
    public void set_GenerateFileEvenIfEmpty(bool value);
    public bool get_IncludeDefaultValue();
    public void set_IncludeDefaultValue(bool value);
    private static void SaveDocument(XmlDocument document, string outputFileName, Encoding encode);
    private static void WriteDeclareParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, string outputFileName, bool foptimisticParameterDefaultValue);
    private static void WriteDeclareSetParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, string outputFileName, bool foptimisticParameterDefaultValue);
    private static void WriteDeclareParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, String[] parameterAttributes, string outputFileName, bool foptimisticParameterDefaultValue, string optimisticParameterMetadata);
    private static void WriteSetParametersToFile(TaskLoggingHelper loggingHelper, ITaskItem[] parameters, string outputFileName, bool foptimisticParameterDefaultValue);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.FilterByItems : Task {
    private ITaskItem[] m_pipeLineItemsITaskItem;
    private ITaskItem[] m_filterITaskItem;
    private List`1<ITaskItem> m_inFilterITaskItem;
    private List`1<ITaskItem> m_outFilterITaskItem;
    private string m_metadataName;
    private string m_filterMetadataName;
    [CompilerGeneratedAttribute]
private string <FilterRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterBaseOnRelativePath>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] PipelineItems { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Filter { get; public set; }
    public string FilterRootFolder { get; public set; }
    public bool FilterBaseOnRelativePath { get; public set; }
    public string SourceMetadataName { get; public set; }
    public string FilterMetadataName { get; public set; }
    [OutputAttribute]
public ITaskItem[] InFilter { get; }
    [OutputAttribute]
public ITaskItem[] OutFilter { get; }
    public ITaskItem[] get_PipelineItems();
    public void set_PipelineItems(ITaskItem[] value);
    public ITaskItem[] get_Filter();
    public void set_Filter(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_FilterRootFolder();
    [CompilerGeneratedAttribute]
public void set_FilterRootFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_FilterBaseOnRelativePath();
    [CompilerGeneratedAttribute]
public void set_FilterBaseOnRelativePath(bool value);
    public string get_SourceMetadataName();
    public void set_SourceMetadataName(string value);
    public string get_FilterMetadataName();
    public void set_FilterMetadataName(string value);
    public ITaskItem[] get_InFilter();
    public ITaskItem[] get_OutFilter();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GatherLinkExtensionsToBeExposedInVS : Task {
    private string m_linkInfoFilePath;
    private string m_linksHiddenFromVS;
    private string m_linksDisabledByVS;
    [RequiredAttribute]
public string LinkInfoFilePath { get; public set; }
    public string LinksHiddenFromVS { get; public set; }
    public string LinksDisabledByVS { get; public set; }
    public string get_LinkInfoFilePath();
    public void set_LinkInfoFilePath(string value);
    public string get_LinksHiddenFromVS();
    public void set_LinksHiddenFromVS(string value);
    public string get_LinksDisabledByVS();
    public void set_LinksDisabledByVS(string value);
    private XmlElement SaveToXml(XmlElement xmlNodeRoot, object extension);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GenerateAssemblyInfo : Task {
    private ITaskItem[] _assemblyAttributes;
    private string _outputDir;
    [CompilerGeneratedAttribute]
private bool <Regenerated>k__BackingField;
    [OutputAttribute]
public bool Regenerated { get; private set; }
    [RequiredAttribute]
public ITaskItem[] AssemblyAttributes { get; public set; }
    [RequiredAttribute]
public string OutputDir { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Regenerated();
    [CompilerGeneratedAttribute]
private void set_Regenerated(bool value);
    public virtual bool Execute();
    public ITaskItem[] get_AssemblyAttributes();
    public void set_AssemblyAttributes(ITaskItem[] value);
    public string get_OutputDir();
    public void set_OutputDir(string value);
    private void GenerateAssemblyInfoFile();
    private string GetValue(ITaskItem assemblyAttribute);
}
public class Microsoft.Web.Publishing.Tasks.GetAllPublishProperties : Task {
    [CompilerGeneratedAttribute]
private string <PublishProfilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AllPublishProperties>k__BackingField;
    [RequiredAttribute]
public string PublishProfilePath { get; public set; }
    [OutputAttribute]
public String[] AllPublishProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PublishProfilePath();
    [CompilerGeneratedAttribute]
public void set_PublishProfilePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AllPublishProperties();
    [CompilerGeneratedAttribute]
public void set_AllPublishProperties(String[] value);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetDeployManagedRuntimeVersion : Task {
    private string m_targetFrameworkVersion;
    private string m_version;
    [RequiredAttribute]
public string TargetFrameworkVersion { get; public set; }
    [OutputAttribute]
public string Result { get; }
    [OutputAttribute]
public string Version { get; }
    public string get_TargetFrameworkVersion();
    public void set_TargetFrameworkVersion(string value);
    public string get_Result();
    public string get_Version();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetFileSkips : Task {
    private ITaskItem[] m_destSkipItems;
    private ITaskItem[] m_srcSkipItems;
    [OutputAttribute]
public ITaskItem[] SourceSkipItems { get; }
    [OutputAttribute]
public ITaskItem[] DestinationSkipItems { get; }
    public ITaskItem[] get_SourceSkipItems();
    public ITaskItem[] get_DestinationSkipItems();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetLocalMachineRegistrySubKeyNames : Task {
    private string m_Key;
    private List`1<ITaskItem> m_resultITaskItem;
    [RequiredAttribute]
public string Key { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; }
    public string get_Key();
    public void set_Key(string value);
    public ITaskItem[] get_Result();
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetPipelineDestinationFileNameMatch : Task {
    private ITaskItem[] m_pipeLineItemsITaskItem;
    private LinkedList`1<ITaskItem> m_retPipelineItemsITaskItem;
    private string m_fileSpec;
    private string m_startingDestinationPath;
    private bool m_isRecursive;
    private bool m_ignoreCase;
    private string m_metadatToMatch;
    private Regex m_regex;
    [RequiredAttribute]
public ITaskItem[] PipelineItems { get; public set; }
    [OutputAttribute]
public ITaskItem[] ResultPipelineItems { get; }
    [RequiredAttribute]
public string DestinationFileSpec { get; public set; }
    public string StartingDestinationPath { get; public set; }
    public bool IsRecursive { get; public set; }
    public bool IgnoreCase { get; public set; }
    private Regex Regex { get; }
    public ITaskItem[] get_PipelineItems();
    public void set_PipelineItems(ITaskItem[] value);
    public ITaskItem[] get_ResultPipelineItems();
    public string get_DestinationFileSpec();
    public void set_DestinationFileSpec(string value);
    public string get_StartingDestinationPath();
    public void set_StartingDestinationPath(string value);
    public bool get_IsRecursive();
    public void set_IsRecursive(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    private Regex get_Regex();
    public virtual bool Execute();
    private static bool IsMatchItemSpec(ITaskItem iTaskItem, string startingPath, string fileSpec, Regex fileSpecRegex, bool isRecursive);
}
public class Microsoft.Web.Publishing.Tasks.GetProjectProperties : Task {
    private string m_projectFileFullPath;
    private bool m_useIis;
    private string m_IisUrl;
    private ITaskItem[] m_propertiesITaskItem;
    private List`1<ITaskItem> m_ResultList;
    [RequiredAttribute]
public string ProjectFileFullPath { get; public set; }
    [OutputAttribute]
public bool UseIis { get; }
    [OutputAttribute]
public string IisUrl { get; }
    [OutputAttribute]
public ITaskItem[] ResultProperties { get; }
    unknown ITaskItem[] ProjectExtensionsProperties {public set; }
    public string get_ProjectFileFullPath();
    public void set_ProjectFileFullPath(string value);
    public bool get_UseIis();
    public string get_IisUrl();
    public ITaskItem[] get_ResultProperties();
    public void set_ProjectExtensionsProperties(ITaskItem[] value);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.GetPublishingLocalizedString : Task {
    private string m_strResult;
    private MessageImportance m_importance;
    private PublishingLocalizedStringLogType m_publishingLocalizedStringLogType;
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ArgumentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogMessage>k__BackingField;
    [RequiredAttribute]
public string ID { get; public set; }
    public int ArgumentCount { get; public set; }
    public ITaskItem[] Arguments { get; public set; }
    public bool LogMessage { get; public set; }
    public string LogType { get; public set; }
    public string Importance { get; public set; }
    [OutputAttribute]
public string Result { get; }
    [CompilerGeneratedAttribute]
public string get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(string value);
    [CompilerGeneratedAttribute]
public int get_ArgumentCount();
    [CompilerGeneratedAttribute]
public void set_ArgumentCount(int value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_LogMessage();
    [CompilerGeneratedAttribute]
public void set_LogMessage(bool value);
    public string get_LogType();
    public void set_LogType(string value);
    public string get_Importance();
    public void set_Importance(string value);
    public string get_Result();
    public virtual bool Execute();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("15BDF676-788F-4D82-88F3-FDB3ADAB3D3A")]
internal interface Microsoft.Web.Publishing.Tasks.IIISUserData {
    [DispIdAttribute("1610678272")]
public string IISDirectory { get; }
    public abstract virtual string get_IISDirectory();
    public abstract virtual void SetupIISDirectory(int fOverride);
    public abstract virtual void ClearIISDirectory();
}
[GuidAttribute("1B036F99-B240-4116-A6A0-B54EC5B2438E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Publishing.Tasks.IIISVersion {
    public abstract virtual object GetPropertyValue(string bstrName);
    public abstract virtual object CreateObjectFromProgId(string bstrObjectName);
    public abstract virtual object CreateObjectFromCLSID(Guid clsidObject);
    public abstract virtual void ApplyIISEnvironmentVariables();
    public abstract virtual void ClearIISEnvironmentVariables();
    public abstract virtual void ApplyManifestContext();
    public abstract virtual void ClearManifestContext();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("9CDA0717-2EB5-42b3-B5B0-16F4941B2029")]
internal interface Microsoft.Web.Publishing.Tasks.IIISVersionManager {
    public abstract virtual IIISVersion GetVersionObject(string bstrVersion, int productType);
    public abstract virtual IIISVersion[] GetAllVersionObjects();
}
internal class Microsoft.Web.Publishing.Tasks.Iis7WebServer : object {
    protected int m_IisMajorVersion;
    protected string m_strIISWebNumber;
    protected string m_strIISWebServerComment;
    [CompilerGeneratedAttribute]
private string <AppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPoolName>k__BackingField;
    protected UriWrapper m_uri;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLocalhost>k__BackingField;
    public string AppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public int MatchScore { get; public set; }
    public bool IsRunning { get; public set; }
    public string AppPoolName { get; public set; }
    protected bool Initialized { get; protected set; }
    protected bool UseLocalhost { get; protected set; }
    public int IisMajorVersion { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_AppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MatchScore();
    [CompilerGeneratedAttribute]
public void set_MatchScore(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsRunning();
    [CompilerGeneratedAttribute]
public void set_IsRunning(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppPoolName();
    [CompilerGeneratedAttribute]
public void set_AppPoolName(string value);
    [CompilerGeneratedAttribute]
protected bool get_Initialized();
    [CompilerGeneratedAttribute]
protected void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
protected bool get_UseLocalhost();
    [CompilerGeneratedAttribute]
protected void set_UseLocalhost(bool value);
    protected virtual Assembly GetWebAdministrationAssembly();
    protected virtual object GetServerManager();
    public virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    public sealed virtual string GetSiteNumber();
    public sealed virtual string GetIisWebsiteFriendlyName();
    public sealed virtual int get_IisMajorVersion();
    public sealed virtual void Dispose();
    public object GetSiteForServer(object serverManager, Uri uri, string severName, IPAddress[] iPAddresses, bool bServerNameMatchesMachine, Boolean& isRunning, Int32& matchScore);
    protected virtual object GetSiteState(object site);
    internal static int GetScore(ServiceBindingMatchScore serviceBindingMatchScore);
    internal ServiceBindingMatchScore ServerBindingMatch(object site, Uri uri, string severName, IPAddress[] iPAddresses, bool fServerNameMatchesMachine);
}
internal class Microsoft.Web.Publishing.Tasks.IisExpressWebServer : Iis7WebServer {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IISExpressInstallPath>k__BackingField;
    protected string Version { get; protected set; }
    protected string IISExpressInstallPath { get; protected set; }
    public IisExpressWebServer(string version);
    [CompilerGeneratedAttribute]
protected string get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(string value);
    internal static bool IsExpressInstalled(string version);
    internal static bool IsExpressInstalled(string version, String& installPath);
    [CompilerGeneratedAttribute]
protected string get_IISExpressInstallPath();
    [CompilerGeneratedAttribute]
protected void set_IISExpressInstallPath(string value);
    protected virtual Assembly GetWebAdministrationAssembly();
    public virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    protected virtual object GetSiteState(object site);
    private sealed virtual override void System.IDisposable.Dispose();
}
internal enum Microsoft.Web.Publishing.Tasks.IisProductType : Enum {
    public int value__;
    public static IisProductType OsService;
    public static IisProductType Deprecated;
    public static IisProductType Express;
}
public class Microsoft.Web.Publishing.Tasks.ImportParametersFile : Task {
    private ITaskItem[] m_sourceFiles;
    private List`1<ITaskItem> m_parametersList;
    [CompilerGeneratedAttribute]
private bool <DisableEscapeMSBuildVariable>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; }
    public bool DisableEscapeMSBuildVariable { get; public set; }
    public ITaskItem[] get_Files();
    public void set_Files(ITaskItem[] value);
    public ITaskItem[] get_Result();
    [CompilerGeneratedAttribute]
public bool get_DisableEscapeMSBuildVariable();
    [CompilerGeneratedAttribute]
public void set_DisableEscapeMSBuildVariable(bool value);
    private void ReadParametersElement(XmlElement element);
    private void ReadParameterElement(XmlElement element);
    private TaskItem ReadParameterEntryElement(XmlElement element, TaskItem parentItem);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.InvokePowerShell : Task {
    private bool _isSuccess;
    private ITaskItem[] m_skipRuleItemsITaskItem;
    internal static string PasswordProperty;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishProfilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PublishPropertiesOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Script>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    private VSHostObject _hostObject;
    [RequiredAttribute]
public string ProjectPath { get; public set; }
    [RequiredAttribute]
public string PublishProfilePath { get; public set; }
    public ITaskItem[] PublishPropertiesOverride { get; public set; }
    [RequiredAttribute]
public string PackOutput { get; public set; }
    [RequiredAttribute]
public string Script { get; public set; }
    public string MSDeployPath { get; public set; }
    public string Password { get; public set; }
    internal VSHostObject VSHostObject { get; }
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_PublishProfilePath();
    [CompilerGeneratedAttribute]
public void set_PublishProfilePath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PublishPropertiesOverride();
    [CompilerGeneratedAttribute]
public void set_PublishPropertiesOverride(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PackOutput();
    [CompilerGeneratedAttribute]
public void set_PackOutput(string value);
    [CompilerGeneratedAttribute]
public string get_Script();
    [CompilerGeneratedAttribute]
public void set_Script(string value);
    [CompilerGeneratedAttribute]
public string get_MSDeployPath();
    [CompilerGeneratedAttribute]
public void set_MSDeployPath(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    internal VSHostObject get_VSHostObject();
    public virtual bool Execute();
    private void outputCollection_DataAdded(object sender, DataAddedEventArgs e);
    private void Verbose_DataAdded(object sender, DataAddedEventArgs e);
    private void Debug_DataAdded(object sender, DataAddedEventArgs e);
    private void Warning_DataAdded(object sender, DataAddedEventArgs e);
    private void Error_DataAdded(object sender, DataAddedEventArgs e);
    internal string GetPassword();
    internal List`1<Dictionary`2<string, string>> GetFileSkips();
    internal Dictionary`2<string, string> GetFileSkipMetadata(ITaskItem item, Type enumType);
    internal IDictionary`2<string, object> GetPublishProperties();
    private string GetAbsolutePath(string path);
    private bool IsAbsoluteUrl(string url);
    public string GetMSDeployPath();
}
public class Microsoft.Web.Publishing.Tasks.IsCleanMSDeployPackageNeeded : Task {
    private bool m_isCleanMsDeployPackageNeeded;
    private bool m_packageAsSingleFile;
    private string m_packageLocation;
    private string m_currentSourceManifestPath;
    private string Provider_Key_Attribute;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    [RequiredAttribute]
public string PackageLocation { get; public set; }
    [RequiredAttribute]
public bool PackageAsSingleFile { get; public set; }
    [RequiredAttribute]
public string CurrentSourceManifestPath { get; public set; }
    [OutputAttribute]
public bool Result { get; }
    public string MSDeployVersionsToTry { get; public set; }
    public string get_PackageLocation();
    public void set_PackageLocation(string value);
    public bool get_PackageAsSingleFile();
    public void set_PackageAsSingleFile(bool value);
    public string get_CurrentSourceManifestPath();
    public void set_CurrentSourceManifestPath(string value);
    public bool get_Result();
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    private Dictionary`2<string, ProviderOption[]> RetrieveOptionsFromSrcManifest(XPathNavigator xPathNavigator, string provider);
    private bool CheckExist(string path, bool fFile);
    private int CheckXPathNavigatorContainIisSetting(XPathNavigator xPathNavigator, String& iisMSDeployProviderName);
    private int CheckMSDeployDumpContainIisSetting(object deploymentObject, String& iisMSDeployProviderName);
    private bool IsIisRelatedProvider(string providerName);
    private bool VerifyProviderOptionValuesInSync(string provider, object deploymentObject, Dictionary`2<string, ProviderOption[]> optionsFromSrcManifest);
    private Dictionary`2<string, ProviderOption[]> RetrieveProviderOptionsFromExistingDeployPackage(object deploymentObject, string provider, Dictionary`2<string, ProviderOption[]> optionsToLoadFromPackage);
}
internal interface Microsoft.Web.Publishing.Tasks.ITaskDependentObjectFactory {
    public abstract virtual DeploymentBaseOptions GetDeploymentBaseOptions();
    public abstract virtual DeploymentManager GetDeploymentManager();
    public abstract virtual DeploymentErrorLogger GetErrorLogger();
}
internal interface Microsoft.Web.Publishing.Tasks.IxIisWebServer {
    public int IisMajorVersion { get; }
    public int MatchScore { get; }
    public bool IsRunning { get; }
    public string AppHostConfigDirectory { get; }
    public string WebServerDirectory { get; }
    public string WebServerManifest { get; }
    public string AppPoolName { get; }
    public abstract virtual bool Initialize(UriWrapper uri, bool useLocalHost);
    public abstract virtual string GetSiteNumber();
    public abstract virtual string GetIisWebsiteFriendlyName();
    public abstract virtual int get_IisMajorVersion();
    public abstract virtual int get_MatchScore();
    public abstract virtual bool get_IsRunning();
    public abstract virtual string get_AppHostConfigDirectory();
    public abstract virtual string get_WebServerDirectory();
    public abstract virtual string get_WebServerManifest();
    public abstract virtual string get_AppPoolName();
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Web.Publishing.Tasks.Kudu.KuduConnectionInfo : object {
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SiteName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationUrl>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string SiteName { get; public set; }
    public string DestinationUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_SiteName();
    [CompilerGeneratedAttribute]
public void set_SiteName(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationUrl();
    [CompilerGeneratedAttribute]
public void set_DestinationUrl(string value);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Web.Publishing.Tasks.Kudu.KuduDeploy : Task {
    [CompilerGeneratedAttribute]
private string <DeployOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublishTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishDestinationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishSiteName>k__BackingField;
    private VSHostObject _hostObject;
    [RequiredAttribute]
public string DeployOutputPath { get; public set; }
    [RequiredAttribute]
public int PublishTimeout { get; public set; }
    [RequiredAttribute]
public string PublishDestinationUrl { get; public set; }
    public string PublishUserName { get; public set; }
    public string PublishPassword { get; public set; }
    public string PublishSiteName { get; public set; }
    internal VSHostObject VSHostObject { get; }
    [CompilerGeneratedAttribute]
public string get_DeployOutputPath();
    [CompilerGeneratedAttribute]
public void set_DeployOutputPath(string value);
    [CompilerGeneratedAttribute]
public int get_PublishTimeout();
    [CompilerGeneratedAttribute]
public void set_PublishTimeout(int value);
    [CompilerGeneratedAttribute]
public string get_PublishDestinationUrl();
    [CompilerGeneratedAttribute]
public void set_PublishDestinationUrl(string value);
    [CompilerGeneratedAttribute]
public string get_PublishUserName();
    [CompilerGeneratedAttribute]
public void set_PublishUserName(string value);
    [CompilerGeneratedAttribute]
public string get_PublishPassword();
    [CompilerGeneratedAttribute]
public void set_PublishPassword(string value);
    [CompilerGeneratedAttribute]
public string get_PublishSiteName();
    [CompilerGeneratedAttribute]
public void set_PublishSiteName(string value);
    internal VSHostObject get_VSHostObject();
    internal KuduConnectionInfo GetConnectionInfo();
    public virtual bool Execute();
    internal bool DeployFiles(KuduConnectionInfo connectionInfo);
    internal bool DeployZipFile(KuduConnectionInfo connectionInfo);
    internal string CreateZipFile(string sourcePath);
    internal Task DeleteTempZipFile(string tempFilePath);
}
[ExcludeFromCodeCoverageAttribute]
public abstract class Microsoft.Web.Publishing.Tasks.Kudu.KuduFileDeploy : object {
    private KuduConnectionInfo _connectionInfo;
    private object _syncObject;
    public string DestinationUrl { get; }
    protected KuduConnectionInfo ConnectionInfo { get; }
    protected string AuthorizationInfo { get; }
    internal KuduFileDeploy(KuduConnectionInfo connectionInfo, TaskLoggingHelper logger);
    public abstract virtual string get_DestinationUrl();
    protected KuduConnectionInfo get_ConnectionInfo();
    protected string get_AuthorizationInfo();
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Web.Publishing.Tasks.Kudu.KuduVfsDeploy : KuduFileDeploy {
    private object _syncObject;
    private TaskLoggingHelper _logger;
    private List`1<Task> _postTasks;
    public static string PackagesFolder;
    public static string WebRootFolder;
    public string DestinationUrl { get; }
    public KuduVfsDeploy(KuduConnectionInfo connectionInfo, TaskLoggingHelper logger);
    public virtual string get_DestinationUrl();
    public Task DeployAsync(string sourcePath, IEnumerable`1<string> excludeDirectories);
    [AsyncStateMachineAttribute("Microsoft.Web.Publishing.Tasks.Kudu.KuduVfsDeploy/<IsFirstTimePublish>d__9")]
internal Task`1<bool> IsFirstTimePublish();
    [AsyncStateMachineAttribute("Microsoft.Web.Publishing.Tasks.Kudu.KuduVfsDeploy/<GetExistingPackages>d__10")]
internal Task`1<IEnumerable`1<string>> GetExistingPackages();
    private Task PostFilesAsync(string file, string sourcePath);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Web.Publishing.Tasks.Kudu.KuduZipDeploy : KuduFileDeploy {
    private object _syncObject;
    private TaskLoggingHelper _logger;
    public string DestinationUrl { get; }
    public KuduZipDeploy(KuduConnectionInfo connectionInfo, TaskLoggingHelper logger);
    public virtual string get_DestinationUrl();
    [AsyncStateMachineAttribute("Microsoft.Web.Publishing.Tasks.Kudu.KuduZipDeploy/<DeployAsync>d__5")]
public Task`1<bool> DeployAsync(string zipFileFullPath);
    [AsyncStateMachineAttribute("Microsoft.Web.Publishing.Tasks.Kudu.KuduZipDeploy/<PostZipAsync>d__6")]
private Task`1<bool> PostZipAsync(string zipFilePath);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Web.Publishing.Tasks.Kudu.VfsStatEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <MTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Name { get; public set; }
    public long Size { get; public set; }
    public DateTimeOffset MTime { get; public set; }
    public string Mime { get; public set; }
    public string Href { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_MTime();
    [CompilerGeneratedAttribute]
public void set_MTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Mime();
    [CompilerGeneratedAttribute]
public void set_Mime(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class Microsoft.Web.Publishing.Tasks.MapUriToIisWebServer : Task {
    private string m_projectIisURL;
    private bool m_fUseLocalhost;
    private UriWrapper m_uri;
    [CompilerGeneratedAttribute]
private string <IisWebsiteId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IisWebsiteFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerAppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationPoolName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MatchScore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseIisExpressHintFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IisMajorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalIisVersionString>k__BackingField;
    [RequiredAttribute]
public string ProjectIisUrl { get; public set; }
    public bool UseLocalhost { get; public set; }
    [OutputAttribute]
public string IisWebsiteId { get; public set; }
    [OutputAttribute]
public string IisWebsiteFriendlyName { get; public set; }
    [OutputAttribute]
public string WebServerAppHostConfigDirectory { get; public set; }
    [OutputAttribute]
public string WebServerDirectory { get; public set; }
    [OutputAttribute]
public string WebServerManifest { get; public set; }
    [OutputAttribute]
public string ApplicationPoolName { get; public set; }
    [OutputAttribute]
public int MatchScore { get; public set; }
    [OutputAttribute]
public bool IsRunning { get; public set; }
    [OutputAttribute]
public string MetakeyPath { get; }
    [OutputAttribute]
public string MetakeyPathUsingSiteName { get; }
    [OutputAttribute]
public string AppHostConfigPath { get; }
    [OutputAttribute]
public string SiteRelativePath { get; }
    [OutputAttribute]
public bool IsLocalMachine { get; }
    public bool UseIisExpressHintFlag { get; public set; }
    [OutputAttribute]
public int IisMajorVersion { get; public set; }
    public string LocalIisVersionString { get; public set; }
    public string get_ProjectIisUrl();
    public void set_ProjectIisUrl(string value);
    public bool get_UseLocalhost();
    public void set_UseLocalhost(bool value);
    [CompilerGeneratedAttribute]
public string get_IisWebsiteId();
    [CompilerGeneratedAttribute]
public void set_IisWebsiteId(string value);
    [CompilerGeneratedAttribute]
public string get_IisWebsiteFriendlyName();
    [CompilerGeneratedAttribute]
public void set_IisWebsiteFriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerAppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerAppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationPoolName();
    [CompilerGeneratedAttribute]
public void set_ApplicationPoolName(string value);
    [CompilerGeneratedAttribute]
public int get_MatchScore();
    [CompilerGeneratedAttribute]
public void set_MatchScore(int value);
    [CompilerGeneratedAttribute]
public bool get_IsRunning();
    [CompilerGeneratedAttribute]
public void set_IsRunning(bool value);
    public string get_MetakeyPath();
    public string get_MetakeyPathUsingSiteName();
    public string get_AppHostConfigPath();
    public string get_SiteRelativePath();
    public bool get_IsLocalMachine();
    [CompilerGeneratedAttribute]
public bool get_UseIisExpressHintFlag();
    [CompilerGeneratedAttribute]
public void set_UseIisExpressHintFlag(bool value);
    [CompilerGeneratedAttribute]
public int get_IisMajorVersion();
    [CompilerGeneratedAttribute]
public void set_IisMajorVersion(int value);
    [CompilerGeneratedAttribute]
public string get_LocalIisVersionString();
    [CompilerGeneratedAttribute]
public void set_LocalIisVersionString(string value);
    private bool DetectingInIISExpress(Exception& eLastError);
    private bool DetectingInIIS7(bool isAdmin, Exception& eLastError);
    private bool DetectingUsingADSI(bool isAdmin, Exception& eLastError);
    private bool UpdateInfoBaseOnWebServer(IxIisWebServer iisWebServer);
    public virtual bool Execute();
    public void Cleanup();
    public sealed virtual void Dispose();
}
public class Microsoft.Web.Publishing.Tasks.MSDeploy : ToolTask {
    private string m_exePath;
    private string m_disableRule;
    private string m_verb;
    private string m_failureLevel;
    private string m_xpath;
    private string m_enableRule;
    private string m_replace;
    private string m_skip;
    private string m_disableLink;
    private string m_enableLink;
    private string m_disableSkipDirective;
    private string m_enableSkipDirective;
    private string m_lastCommandLine;
    private bool m_xml;
    private bool m_whatif;
    private bool m_useChecksum;
    private bool m_verbose;
    private bool m_allowUntrusted;
    private bool m_enableTransaction;
    private int m_retryAttempts;
    private int m_retryInterval;
    private bool m_useDoubleQuoteForValue;
    private string m_strValueQuote;
    [CompilerGeneratedAttribute]
private string <WebServerAppHostConfigDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebServerManifest>k__BackingField;
    private ITaskItem[] m_sourceITaskItem;
    private ITaskItem[] m_destITaskItem;
    private ITaskItem[] m_replaceRuleItemsITaskItem;
    private ITaskItem[] m_skipRuleItemsITaskItem;
    private ITaskItem[] m_declareParameterItems;
    private ITaskItem[] m_importDeclareParametersItems;
    private ITaskItem[] m_simpleSetParamterItems;
    private ITaskItem[] m_importSetParametersItems;
    private ITaskItem[] m_setParamterItems;
    private bool m_previewOnly;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalDestinationProviderOptions>k__BackingField;
    private string _userAgent;
    public string WebServerAppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public string ExePath { get; public set; }
    public string DisableRule { get; public set; }
    [RequiredAttribute]
public string Verb { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Source { get; public set; }
    public ITaskItem[] Destination { get; public set; }
    public bool WhatIf { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public bool UseChecksum { get; public set; }
    public bool AllowUntrusted { get; public set; }
    public bool Verbose { get; public set; }
    public string FailureLevel { get; public set; }
    public bool Xml { get; public set; }
    public string XPath { get; public set; }
    public string EnableRule { get; public set; }
    public string Replace { get; public set; }
    public string Skip { get; public set; }
    public string DisableLink { get; public set; }
    public string EnableLink { get; public set; }
    public bool EnableTransaction { get; public set; }
    public int RetryAttempts { get; public set; }
    public int RetryInterval { get; public set; }
    public bool UseDoubleQuoteForValue { get; public set; }
    public ITaskItem[] ReplaceRuleItems { get; public set; }
    public ITaskItem[] SkipRuleItems { get; public set; }
    public string DisableSkipDirective { get; public set; }
    public string EnableSkipDirective { get; public set; }
    public ITaskItem[] DeclareParameterItems { get; public set; }
    public ITaskItem[] ImportDeclareParametersItems { get; public set; }
    public ITaskItem[] ImportSetParametersItems { get; public set; }
    public ITaskItem[] SimpleSetParameterItems { get; public set; }
    public ITaskItem[] SetParameterItems { get; public set; }
    public ITaskItem[] AdditionalDestinationProviderOptions { get; public set; }
    public string UserAgent { get; public set; }
    [OutputAttribute]
public string CommandLine { get; }
    [OutputAttribute]
public string CommandLineArguments { get; }
    [OutputAttribute]
public string MSDeployToolPath { get; }
    public bool PreviewCommandLineOnly { get; public set; }
    protected MessageImportance StandardOutputLoggingImportance { get; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public string get_WebServerAppHostConfigDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerAppHostConfigDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerDirectory();
    [CompilerGeneratedAttribute]
public void set_WebServerDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_WebServerManifest();
    [CompilerGeneratedAttribute]
public void set_WebServerManifest(string value);
    public string get_ExePath();
    public void set_ExePath(string value);
    public string get_DisableRule();
    public void set_DisableRule(string value);
    public string get_Verb();
    public void set_Verb(string value);
    public ITaskItem[] get_Source();
    public void set_Source(ITaskItem[] value);
    public ITaskItem[] get_Destination();
    public void set_Destination(ITaskItem[] value);
    public bool get_WhatIf();
    public void set_WhatIf(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    public bool get_UseChecksum();
    public void set_UseChecksum(bool value);
    public bool get_AllowUntrusted();
    public void set_AllowUntrusted(bool value);
    public bool get_Verbose();
    public void set_Verbose(bool value);
    public string get_FailureLevel();
    public void set_FailureLevel(string value);
    public bool get_Xml();
    public void set_Xml(bool value);
    public string get_XPath();
    public void set_XPath(string value);
    public string get_EnableRule();
    public void set_EnableRule(string value);
    public string get_Replace();
    public void set_Replace(string value);
    public string get_Skip();
    public void set_Skip(string value);
    public string get_DisableLink();
    public void set_DisableLink(string value);
    public string get_EnableLink();
    public void set_EnableLink(string value);
    public bool get_EnableTransaction();
    public void set_EnableTransaction(bool value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    public bool get_UseDoubleQuoteForValue();
    public void set_UseDoubleQuoteForValue(bool value);
    public ITaskItem[] get_ReplaceRuleItems();
    public void set_ReplaceRuleItems(ITaskItem[] value);
    public ITaskItem[] get_SkipRuleItems();
    public void set_SkipRuleItems(ITaskItem[] value);
    public string get_DisableSkipDirective();
    public void set_DisableSkipDirective(string value);
    public string get_EnableSkipDirective();
    public void set_EnableSkipDirective(string value);
    public ITaskItem[] get_DeclareParameterItems();
    public void set_DeclareParameterItems(ITaskItem[] value);
    public ITaskItem[] get_ImportDeclareParametersItems();
    public void set_ImportDeclareParametersItems(ITaskItem[] value);
    public ITaskItem[] get_ImportSetParametersItems();
    public void set_ImportSetParametersItems(ITaskItem[] value);
    public ITaskItem[] get_SimpleSetParameterItems();
    public void set_SimpleSetParameterItems(ITaskItem[] value);
    public ITaskItem[] get_SetParameterItems();
    public void set_SetParameterItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalDestinationProviderOptions();
    [CompilerGeneratedAttribute]
public void set_AdditionalDestinationProviderOptions(ITaskItem[] value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public string get_CommandLine();
    public string get_CommandLineArguments();
    public string get_MSDeployToolPath();
    public bool get_PreviewCommandLineOnly();
    public void set_PreviewCommandLineOnly(bool value);
    protected virtual bool SkipTaskExecution();
    protected virtual MessageImportance get_StandardOutputLoggingImportance();
    public virtual bool Execute();
    public static void AddReplaceRulesToOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] replaceRuleItems, string valueQuoteChar);
    internal static void IncorporateSettingsFromHostObject(ITaskItem[]& skipRuleItems, ITaskItem[] destProviderSetting, IEnumerable`1<ITaskItem> hostObject);
    public static void AddSkipDirectiveToBaseOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] skipRuleItems, string valueQuoteChar);
    public static void AddDeclareParameterToCommandArgument(List`1<string> arguments, ITaskItem item, string valueQuote, Dictionary`2<string, string> lookupDictionary);
    public static void AddDeclareParametersOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] originalItems, string valueQuote, bool foptimisticParameterDefaultValue);
    public static void AddImportDeclareParametersFilesOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] items);
    public static void AddImportSetParametersFilesOptions(CommandLineBuilder commandLineBuilder, ITaskItem[] items);
    internal static void AddImportParametersFilesOptions(CommandLineBuilder commandLineBuilder, string parameterFlag, ITaskItem[] items);
    public static void AddSimpleSetParametersToObject(CommandLineBuilder commandLineBuilder, ITaskItem[] originalItems, string valueQuoteChar, bool foptimisticParameterDefaultValue);
    public static void AddSetParametersToObject(CommandLineBuilder commandLineBuilder, ITaskItem[] originalItems, string valueQuote, bool foptimisticParameterDefaultValue);
    public static void AddDestinationProviderSettingToObject(CommandLineBuilder commandLineBuilder, string dest, ITaskItem[] items, string valueQuoteChar, ITaskItem[] additionalProviderItems, MSDeploy msdeploy);
    private static void GenerateSwitchPerItem(CommandLineBuilder commandLine, string strSwitch, string args);
    protected virtual string GenerateCommandLineCommands();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual bool ValidateParameters();
}
internal static class Microsoft.Web.Publishing.Tasks.MSDeployUtility : object {
    public static object CreateBaseOptions(VSMSDeployObject vSMSDeployObject);
    internal static List`1<string> ConvertStringIntoList(string linkExtensionsString);
    internal static bool LinkContainedInTheCollection(string link, List`1<string> linkCollection);
    public static void ChangeLinkExtensionEnableStatue(object baseOptions, string listOfLinkExtensions, bool enable);
    public static void ChangeLinkExtensionEnableStatue(object baseOptions, List`1<string> linkExtensions, bool enable);
}
internal class Microsoft.Web.Publishing.Tasks.MSDeployWrapper.DeploymentBaseOptions : object {
    [CompilerGeneratedAttribute]
[DynamicAttribute]
private object <WebDeployBaseOptionObject>k__BackingField;
    [DynamicAttribute]
public object WebDeployBaseOptionObject { get; public set; }
    unknown string ComputerName {public set; }
    unknown string UserName {public set; }
    unknown string Password {public set; }
    unknown string AuthenticationType {public set; }
    public DeploymentBaseOptions(object webDeployBaseOptionObject);
    [CompilerGeneratedAttribute]
public object get_WebDeployBaseOptionObject();
    [CompilerGeneratedAttribute]
public void set_WebDeployBaseOptionObject(object value);
    public virtual void set_ComputerName(string value);
    public virtual void set_UserName(string value);
    public virtual void set_Password(string value);
    public virtual void set_AuthenticationType(string value);
}
internal class Microsoft.Web.Publishing.Tasks.MSDeployWrapper.DeploymentDetailedException : object {
    private Exception _deploymentException;
    private string _errCode;
    private DynamicAssembly _assembly;
    public string ErrorMessage { get; }
    public string ErrorCode { get; }
    public DeploymentDetailedException(Exception ex, DynamicAssembly assembly);
    public string get_ErrorMessage();
    public string get_ErrorCode();
    private void ExtractErrorCodeFromException();
}
internal class Microsoft.Web.Publishing.Tasks.MSDeployWrapper.DeploymentManager : object {
    private DynamicAssembly _msdeployAssembly;
    public DeploymentManager(DynamicAssembly msdeployAssembly);
    public virtual bool ProviderExists(DeploymentBaseOptions option, string providerName, string providerPath);
}
internal class Microsoft.Web.Publishing.Tasks.MSWebDelegationAssembly : DynamicAssembly {
    [CompilerGeneratedAttribute]
private static MSWebDelegationAssembly <DynamicAssembly>k__BackingField;
    public static string AssemblyName { get; }
    public static MSWebDelegationAssembly DynamicAssembly { get; public set; }
    public MSWebDelegationAssembly(Version verToLoad);
    public static string get_AssemblyName();
    [CompilerGeneratedAttribute]
public static MSWebDelegationAssembly get_DynamicAssembly();
    [CompilerGeneratedAttribute]
public static void set_DynamicAssembly(MSWebDelegationAssembly value);
    public static void SetVersion(Version version);
}
internal class Microsoft.Web.Publishing.Tasks.MSWebDeploymentAssembly : DynamicAssembly {
    [CompilerGeneratedAttribute]
private static MSWebDeploymentAssembly <DynamicAssembly>k__BackingField;
    public static string AssemblyName { get; }
    public static MSWebDeploymentAssembly DynamicAssembly { get; public set; }
    public MSWebDeploymentAssembly(Version verToLoad);
    public static string get_AssemblyName();
    [CompilerGeneratedAttribute]
public static MSWebDeploymentAssembly get_DynamicAssembly();
    [CompilerGeneratedAttribute]
public static void set_DynamicAssembly(MSWebDeploymentAssembly value);
    public static void SetVersion(Version version);
    public static bool DeploymentTryGetValueForEach(object deploymentCollection, string name, Object& foundObject);
    public static bool DeploymentTryGetValueContains(object deploymentCollection, string name, Object& foundObject);
}
public class Microsoft.Web.Publishing.Tasks.NormalizeServiceUrl : Task {
    private string _serviceUrl;
    private string _resultUrl;
    private bool _useWMSVC;
    private bool _useRemoteAgent;
    [RequiredAttribute]
public string ServiceUrl { get; public set; }
    [RequiredAttribute]
public bool UseWMSVC { get; public set; }
    [RequiredAttribute]
public bool UseRemoteAgent { get; public set; }
    [OutputAttribute]
public string ResultUrl { get; }
    public string get_ServiceUrl();
    public void set_ServiceUrl(string value);
    public bool get_UseWMSVC();
    public void set_UseWMSVC(bool value);
    public bool get_UseRemoteAgent();
    public void set_UseRemoteAgent(bool value);
    public string get_ResultUrl();
    public virtual bool Execute();
    private string ConstructServiceUrlForDeployThruWMSVC(string serviceUrl);
    private string ConstructServiceUrlForDeployThruAgentService(string serviceUrl);
}
public class Microsoft.Web.Publishing.Tasks.ParameterizeTransformXml : Task {
    private string _sourceFile;
    private string _transformFile;
    private string _destinationFile;
    private string resultXml;
    private bool sourceIsFile;
    private bool transformIsFile;
    private bool destinationIsFile;
    private bool _useXpathToFormParameter;
    private SetTokenizedAttributeStorage storageDictionary;
    private List`1<ITaskItem> retParameters;
    private string strParameterNamePrefix;
    private string strScope;
    private string strTokenFormat;
    private string _sourceRootPath;
    private string _transformRootPath;
    private bool stackTrace;
    [RequiredAttribute]
public string Source { get; public set; }
    public string SourceRootPath { get; public set; }
    public bool IsSourceAFile { get; public set; }
    [RequiredAttribute]
public string Transform { get; public set; }
    public string TransformRootPath { get; public set; }
    public bool UseXpathToFormParameter { get; public set; }
    public bool IsTransformAFile { get; public set; }
    public string Destination { get; public set; }
    public bool IsDestinationAFile { get; public set; }
    public bool StackTrace { get; public set; }
    [OutputAttribute]
public string DestinationXml { get; }
    [OutputAttribute]
public ITaskItem[] DeclareParameters { get; }
    public bool EnableTokenizeParameters { get; public set; }
    public string ParameterNamePrefix { get; public set; }
    public string Scope { get; public set; }
    public string TokenFormat { get; public set; }
    protected SetTokenizedAttributeStorage Storage { get; }
    public string get_Source();
    public void set_Source(string value);
    public string get_SourceRootPath();
    public void set_SourceRootPath(string value);
    public bool get_IsSourceAFile();
    public void set_IsSourceAFile(bool value);
    public string get_Transform();
    public void set_Transform(string value);
    public string get_TransformRootPath();
    public void set_TransformRootPath(string value);
    public bool get_UseXpathToFormParameter();
    public void set_UseXpathToFormParameter(bool value);
    public bool get_IsTransformAFile();
    public void set_IsTransformAFile(bool value);
    public string get_Destination();
    public void set_Destination(string value);
    public bool get_IsDestinationAFile();
    public void set_IsDestinationAFile(bool value);
    public bool get_StackTrace();
    public void set_StackTrace(bool value);
    public string get_DestinationXml();
    public ITaskItem[] get_DeclareParameters();
    public bool get_EnableTokenizeParameters();
    public void set_EnableTokenizeParameters(bool value);
    public string get_ParameterNamePrefix();
    public void set_ParameterNamePrefix(string value);
    public string get_Scope();
    public void set_Scope(string value);
    public string get_TokenFormat();
    public void set_TokenFormat(string value);
    protected SetTokenizedAttributeStorage get_Storage();
    public virtual bool Execute();
    private static string SaveTransformedFile(XmlTransformableDocument document, string destination, bool isDestinationAFile);
    private static XmlTransformableDocument OpenSourceFile(string sourceFile, bool isSourceFile);
    private static XmlTransformation OpenTransformFile(string transformFile, bool isTranformAFile, IXmlTransformationLogger logger);
}
public enum Microsoft.Web.Publishing.Tasks.PublishingLocalizedStringLogType : Enum {
    public int value__;
    public static PublishingLocalizedStringLogType None;
    public static PublishingLocalizedStringLogType Message;
    public static PublishingLocalizedStringLogType Warning;
    public static PublishingLocalizedStringLogType Error;
}
public class Microsoft.Web.Publishing.Tasks.PublishToolsVersionCheck : Task {
    [CompilerGeneratedAttribute]
private string <VersionInPublishProfile>k__BackingField;
    public string VersionInPublishProfile { get; public set; }
    [CompilerGeneratedAttribute]
public string get_VersionInPublishProfile();
    [CompilerGeneratedAttribute]
public void set_VersionInPublishProfile(string value);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.RemoveEmptyDirectories : Task {
    private ITaskItem[] m_directoryITaskItem;
    private int m_maxRetries;
    private int m_retryDelay;
    private bool m_LogErrorAsWarning;
    [RequiredAttribute]
public ITaskItem[] Directories { get; public set; }
    public int MaxRetries { get; public set; }
    public int RetryDelay { get; public set; }
    public bool LogErrorAsWarning { get; public set; }
    public ITaskItem[] get_Directories();
    public void set_Directories(ITaskItem[] value);
    public int get_MaxRetries();
    public void set_MaxRetries(int value);
    public int get_RetryDelay();
    public void set_RetryDelay(int value);
    public bool get_LogErrorAsWarning();
    public void set_LogErrorAsWarning(bool value);
    private bool RemoveAllEmptyDirectories(ITaskItem[] items, List`1<ITaskItem> failedPipeLineItems);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.RemoveTrailingSlash : Task {
    private string m_Path;
    private string m_resultPath;
    [RequiredAttribute]
public string Path { get; public set; }
    [OutputAttribute]
public string Result { get; }
    public string get_Path();
    public void set_Path(string value);
    public string get_Result();
    public virtual bool Execute();
}
internal enum Microsoft.Web.Publishing.Tasks.ServiceBindingMatchScore : Enum {
    public int value__;
    public static ServiceBindingMatchScore None;
    public static ServiceBindingMatchScore Port;
    public static ServiceBindingMatchScore HostHeader_IIS5;
    public static ServiceBindingMatchScore IPAddress_IIS5;
    public static ServiceBindingMatchScore IPAddress;
    public static ServiceBindingMatchScore HostHeader;
    public static ServiceBindingMatchScore All;
}
public class Microsoft.Web.Publishing.Tasks.SortParametrsByPriority : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptimisticParameterMetadataName>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Parameters { get; public set; }
    [OutputAttribute]
public ITaskItem[] Result { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public string OptimisticParameterMetadataName { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public string get_OptimisticParameterMetadataName();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterMetadataName(string value);
    public virtual bool Execute();
}
internal class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlBatchSourceFile : object {
    private string m_fileName;
    private StreamReader m_streamReader;
    private static string s_newLine;
    private string m_strDelimiter;
    private StringBuilder m_strBuilder;
    private bool m_stopParserNextRun;
    private static int maxBufferSize;
    private static string c_strSetVar;
    private static string c_strCmdVarPrefix;
    private static Regex s_keywordRegex;
    private Regex KeywordRegex { get; }
    public bool EndOfFile { get; }
    public SqlBatchSourceFile(string fileName, string strDelimitor);
    private static SqlBatchSourceFile();
    private Regex get_KeywordRegex();
    public bool get_EndOfFile();
    public ParserAction GetMoreData(String& str);
    public sealed virtual void Dispose();
    private sealed virtual override ParserAction ManagedBatchParser.IBatchSource.GetMoreData(String& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) str);
}
internal class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlCommandExecuter : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <UnsupportedKeywordsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveIncludes>k__BackingField;
    private List`1<SqlBatchSourceFile> m_sqlSourceFiles;
    private string m_batchDelimiter;
    private String[] m_strnsupportedKeywords;
    private Dictionary`2<string, bool> UnsupportedKeywordsDictionary;
    public Dictionary`2<string, int> UnsupportedKeywordsCount { get; public set; }
    public bool ResolveIncludes { get; public set; }
    public SqlCommandExecuter(string batchDelimiter, String[] unsupportedKeywords);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_UnsupportedKeywordsCount();
    [CompilerGeneratedAttribute]
public void set_UnsupportedKeywordsCount(Dictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public bool get_ResolveIncludes();
    [CompilerGeneratedAttribute]
public void set_ResolveIncludes(bool value);
    private void AddKeywordCount(string keyword);
    public ParserAction Ed(string batch, IBatchSource& pIBatchSource);
    public sealed virtual ParserAction Help();
    public sealed virtual ParserAction Quit();
    public sealed virtual ParserAction ProcessBatch(string str, int num);
    public sealed virtual ParserAction Exit(string batch, string exitBatch);
    public ParserAction IncludeFileName(string fileName, IBatchSource& ppIBatchSource);
    public sealed virtual ParserAction Connect(int timeout, string server, string user, string password);
    public sealed virtual ParserAction Error(OutputDestination od, string fileName);
    public sealed virtual ParserAction ExecuteShellCommand(string command);
    public sealed virtual ParserAction List(string batch);
    public sealed virtual ParserAction ListVar(string varList);
    public sealed virtual ParserAction OnError(ErrorAction ea);
    public sealed virtual ParserAction Out(OutputDestination od, string fileName);
    public sealed virtual ParserAction PerfTrace(OutputDestination od, string fileName);
    public sealed virtual ParserAction Reset();
    public sealed virtual ParserAction ServerList();
    public sealed virtual ParserAction Xml(XmlStatus xs);
    public sealed virtual void Dispose();
    private sealed virtual override ParserAction ManagedBatchParser.ICommandExecuter.Ed(string batch, IBatchSource& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) pIBatchSource);
    private sealed virtual override ParserAction ManagedBatchParser.ICommandExecuter.IncludeFileName(string fileName, IBatchSource& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) ppIBatchSource);
}
public class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlScriptPreprocessSqlVariables : Task {
    private Dictionary`2<string, KeyValuePair`2<string, bool>> m_setVariables;
    private Dictionary`2<string, string> m_existingVariables;
    private ITaskItem[] _list;
    [CompilerGeneratedAttribute]
private string <SqlScriptFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResolveIncludes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchDelimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParseResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckForUnsupportCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreadSqlScriptUnsupportedCommandsAsWarning>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, int> <UnsupportedCommandsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <UnsupportedKeywords>k__BackingField;
    [RequiredAttribute]
public string SqlScriptFile { get; public set; }
    public string DestinationGroup { get; public set; }
    public bool ResolveIncludes { get; public set; }
    public string BatchDelimiter { get; public set; }
    public bool ParseResult { get; public set; }
    public bool CheckForUnsupportCommands { get; public set; }
    public bool TreadSqlScriptUnsupportedCommandsAsWarning { get; public set; }
    public Dictionary`2<string, int> UnsupportedCommandsCount { get; public set; }
    public ITaskItem[] ExistingVariables { get; public set; }
    public ITaskItem[] UnsupportedKeywords { get; public set; }
    [OutputAttribute]
public ITaskItem[] List { get; }
    [CompilerGeneratedAttribute]
public string get_SqlScriptFile();
    [CompilerGeneratedAttribute]
public void set_SqlScriptFile(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationGroup();
    [CompilerGeneratedAttribute]
public void set_DestinationGroup(string value);
    [CompilerGeneratedAttribute]
public bool get_ResolveIncludes();
    [CompilerGeneratedAttribute]
public void set_ResolveIncludes(bool value);
    [CompilerGeneratedAttribute]
public string get_BatchDelimiter();
    [CompilerGeneratedAttribute]
public void set_BatchDelimiter(string value);
    [CompilerGeneratedAttribute]
public bool get_ParseResult();
    [CompilerGeneratedAttribute]
public void set_ParseResult(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckForUnsupportCommands();
    [CompilerGeneratedAttribute]
public void set_CheckForUnsupportCommands(bool value);
    [CompilerGeneratedAttribute]
public bool get_TreadSqlScriptUnsupportedCommandsAsWarning();
    [CompilerGeneratedAttribute]
public void set_TreadSqlScriptUnsupportedCommandsAsWarning(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, int> get_UnsupportedCommandsCount();
    [CompilerGeneratedAttribute]
public void set_UnsupportedCommandsCount(Dictionary`2<string, int> value);
    public ITaskItem[] get_ExistingVariables();
    public void set_ExistingVariables(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UnsupportedKeywords();
    [CompilerGeneratedAttribute]
public void set_UnsupportedKeywords(ITaskItem[] value);
    public ITaskItem[] get_List();
    public virtual bool Execute();
}
internal class Microsoft.Web.Publishing.Tasks.SqlScriptPreprocessor.SqlVariableResoler : object {
    private Dictionary`2<string, KeyValuePair`2<string, bool>> m_setVariables;
    private Dictionary`2<string, bool> m_deletedVariables;
    private Dictionary`2<string, string> m_existingVariables;
    public Dictionary`2<string, KeyValuePair`2<string, bool>> Variables { get; }
    public SqlVariableResoler(IEnumerable`1<KeyValuePair`2<string, string>> existingVariables);
    private bool TryGetValue(string name, String& value);
    private void SetValue(string name, string value);
    private void SetValue(string name, string value, bool isDeclared);
    public Dictionary`2<string, KeyValuePair`2<string, bool>> get_Variables();
    public sealed virtual ParserAction DeleteVariable(string varName);
    public ParserAction ResolveVariable(string varName, String& varValue);
    public ParserAction ResolveVariableOwnership(string varName, string varValue, Boolean& bTakeOwmership);
    private sealed virtual override ParserAction ManagedBatchParser.IVariableResolver.ResolveVariable(string varName, String& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) varValue);
    private sealed virtual override ParserAction ManagedBatchParser.IVariableResolver.ResolveVariableOwnership(string varName, string varValue, Boolean& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced) bTakeOwmership);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Web.Publishing.Tasks.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BUILDTASK_ColectFilesInFolder_RootIsNotValid { get; }
    internal static string BUILDTASK_CopyFilesToFolders_CopyFailed { get; }
    internal static string BUILDTASK_CopyFilesToFolders_Copying { get; }
    internal static string BUILDTASK_CopyFilesToFolders_DeleteFailed { get; }
    internal static string BUILDTASK_CopyFilesToFolders_Deleting { get; }
    internal static string BUILDTASK_CopyFilesToFolders_RetryDelayOutOfRange { get; }
    internal static string BUILDTASK_CopyFilesToFolders_UpToDate { get; }
    internal static string BUILDTASK_CreateFolder_Failed { get; }
    internal static string BUILDTASK_DetectAntaresCLR45Error { get; }
    internal static string BUILDTASK_FailedToLoadThisVersionMsDeployTryingTheNext { get; }
    internal static string BUILDTASK_IISSetting_RequireWebAdminDLL { get; }
    internal static string BUILDTASK_IsCleanMSDeployPackageNeeded_PackageByDifferentVersion { get; }
    internal static string BUILDTASK_ManifestFile_IISSettingNotInFirst { get; }
    internal static string BUILDTASK_MapProjectURLToIisWeb_InvalidProjectURL { get; }
    internal static string BUILDTASK_MapProjectURLToIisWeb_UnsupportedProjectURL { get; }
    internal static string BUILDTASK_MapURIToIisWebServer_AdminRequired { get; }
    internal static string BUILDTASK_RemoveEmptyDirectories_Deleting { get; }
    internal static string BUILDTASK_SqlScriptPreprocessFile { get; }
    internal static string BUILDTASK_SqlScriptPreprocessFileDone { get; }
    internal static string BUILDTASK_SqlScriptPreprocessFileFailed { get; }
    internal static string BUILDTASK_SqlScriptPreprocessFoundMsDeployUnsupportedCommands { get; }
    internal static string BUILDTASK_SqlScriptPreprocessInvalidSqlScript { get; }
    internal static string BUILDTASK_TransformXml_DestinationWriteFailed { get; }
    internal static string BUILDTASK_TransformXml_SourceLoadFailed { get; }
    internal static string BUILDTASK_TransformXml_TransformationApply { get; }
    internal static string BUILDTASK_TransformXml_TransformationFailed { get; }
    internal static string BUILDTASK_TransformXml_TransformationNoChange { get; }
    internal static string BUILDTASK_TransformXml_TransformationStart { get; }
    internal static string BUILDTASK_TransformXml_TransformationSucceeded { get; }
    internal static string BUILDTASK_TransformXml_TransformLoadFailed { get; }
    internal static string BUILDTASK_TransformXml_TransformOutput { get; }
    internal static string CREATEPROVIDERLIST_FailToCopyFile { get; }
    internal static string CREATEPROVIDERLIST_ImportPublishDatabaseSettingNotFound { get; }
    internal static string CREATEPROVIDERLIST_ImportValidationSourceNotFound { get; }
    internal static string CREATEPROVIDERLIST_InvalidMSBuildFormat { get; }
    internal static string CREATEPROVIDERLIST_InvalidPublishDatabaseSetting { get; }
    internal static string CREATEPROVIDERLIST_MustProviderProvidersXMLorProvidersFile { get; }
    internal static string CREATEPROVIDERLIST_NotExpectingAdditionalParameter { get; }
    internal static string CREATEPROVIDERLIST_NotSupportBothProvidersXMLAndProvidersFile { get; }
    internal static string CREATEPROVIDERLIST_OutofSyncWithSourcePublishDatabaseSetting { get; }
    internal static string CREATEPROVIDERLIST_SqlExpressPublishRequireLocalDB { get; }
    internal static string DeploymentError_MissingDbDacFx { get; }
    internal static string KUDUDEPLOY_AddingFile { get; }
    internal static string KUDUDEPLOY_AddingFileFailed { get; }
    internal static string KUDUDEPLOY_AzurePublishErrorReason { get; }
    internal static string KUDUDEPLOY_ConnectionInfoMissing { get; }
    internal static string KUDUDEPLOY_CopyingToTempLocation { get; }
    internal static string KUDUDEPLOY_CopyingToTempLocationCompleted { get; }
    internal static string KUDUDEPLOY_DeployOutputPathEmpty { get; }
    internal static string KUDUDEPLOY_OperationTimeout { get; }
    internal static string KUDUDEPLOY_PublishAzure { get; }
    internal static string KUDUDEPLOY_PublishFailed { get; }
    internal static string KUDUDEPLOY_PublishSucceeded { get; }
    internal static string KUDUDEPLOY_PublishZipFailedReason { get; }
    internal static string MSDEPLOY_EXE_Failed { get; }
    internal static string MSDEPLOY_EXE_PreviewOnly { get; }
    internal static string MSDEPLOY_EXE_Start { get; }
    internal static string MSDEPLOY_EXE_Succeeded { get; }
    internal static string MSDEPLOY_InvalidDestinationCount { get; }
    internal static string MSDEPLOY_InvalidSourceCount { get; }
    internal static string MSDEPLOY_InvalidVerbForTheInput { get; }
    internal static string POWERSHELL_PublishProfileParsingError { get; }
    internal static string Publich_InvalidPublishToolsVersion_Error { get; }
    internal static string PublishArgumentError_InvalidRemoteServiceUrl { get; }
    internal static string PublishArgumentError_InvalidSiteAppName { get; }
    internal static string PublishLocalizedString_AutoConnectionStringTransformConfigToTransformOutputFile { get; }
    internal static string PublishLocalizedString_CheckingForValidMsBuildPropertyValue { get; }
    internal static string PublishLocalizedString_DatabaseConnectionStringParameterDescription { get; }
    internal static string PublishLocalizedString_DefaultExcludeFileExtentionOutMessage { get; }
    internal static string PublishLocalizedString_DefaultExcludeIntermediateOutputFolderMessage { get; }
    internal static string PublishLocalizedString_DefaultExcludeSourceControlItems { get; }
    internal static string PublishLocalizedString_EFCodeFirstConnectionStringParameterDescription { get; }
    internal static string PublishLocalizedString_ErrorCannotDeployFromIIS7AboveToLowerIIS { get; }
    internal static string PublishLocalizedString_ErrorInvalidMSBuildItemCollectionCount { get; }
    internal static string PublishLocalizedString_ErrorInvalidPropertyWhenSettingPropertyIsTrue { get; }
    internal static string PublishLocalizedString_ErrorPackageAsFilePointToAnExistingFolder { get; }
    internal static string PublishLocalizedString_ErrorPackageAsFolderPointToAnExistingFile { get; }
    internal static string PublishLocalizedString_ErrorUseIisIsTrueButIisUrlIsEmpty { get; }
    internal static string PublishLocalizedString_ErrorUseWPP_CopyWebApplicationAndPipelineDependsOnBuildBothTrue { get; }
    internal static string PublishLocalizedString_ExcludeAllDebugSymbols { get; }
    internal static string PublishLocalizedString_ExcludeAllFilesUnderFolder { get; }
    internal static string PublishLocalizedString_FinishGenerateSampleMsDeployBatchScript { get; }
    internal static string PublishLocalizedString_FoundApplicationConfigForTransformation { get; }
    internal static string PublishLocalizedString_GatherAllFilesInProjectFolderExceptExclusion { get; }
    internal static string PublishLocalizedString_GatherSpecificItemsFromProject { get; }
    internal static string PublishLocalizedString_GatherSpecificItemsFromProjectNoDetail { get; }
    internal static string PublishLocalizedString_GatherSpecificOutputsFromProject { get; }
    internal static string PublishLocalizedString_GenerateMsdeploySourceManifestFile { get; }
    internal static string PublishLocalizedString_GenerateSampleMsdeployBatchScript { get; }
    internal static string PublishLocalizedString_IISAppParameterDescription { get; }
    internal static string PublishLocalizedString_IISAppPhysicalPathDescription { get; }
    internal static string PublishLocalizedString_InsertAdditionalConnectionStringTransformConfigToTransformOutputFile { get; }
    internal static string PublishLocalizedString_InsertEFCodeFirstDeployContextTransformConfigToTransformOutputFile { get; }
    internal static string PublishLocalizedString_InvalidArgument { get; }
    internal static string PublishLocalizedString_MsBuildPropertySettingValue { get; }
    internal static string PublishLocalizedString_MSBuildTargetFailed { get; }
    internal static string PublishLocalizedString_PackagingIntoLocation { get; }
    internal static string PublishLocalizedString_SampleScriptHelpEnviroment { get; }
    internal static string PublishLocalizedString_SampleScriptHelpEnviromentExplained { get; }
    internal static string PublishLocalizedString_SampleScriptHelpMoreInfo { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptional { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedAdditionalFlags { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagA { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagG { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagL { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagM { get; }
    internal static string PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagUP { get; }
    internal static string PublishLocalizedString_SampleScriptHelpPrerequisites { get; }
    internal static string PublishLocalizedString_SampleScriptHelpRequired { get; }
    internal static string PublishLocalizedString_SampleScriptHelpRequiredExplainedFlagT { get; }
    internal static string PublishLocalizedString_SampleScriptHelpRequiredExplainedFlagY { get; }
    internal static string PublishLocalizedString_SampleScriptHelpSection1 { get; }
    internal static string PublishLocalizedString_SqlCommandVariableParameterDescription { get; }
    internal static string PublishLocalizedString_StartMsDeployPublishToRemote { get; }
    internal static string PublishLocalizedString_TestDeployPackageOnCurrentMachine { get; }
    internal static string PublishLocalizedString_TransformConfigUsingTransformFileToTransformOutputFile { get; }
    internal static string PublishLocalizedString_ValidateErrorMsDeployPublishSetting { get; }
    internal static string PublishLocalizedString_ValidatingMsDeployPublishSettings { get; }
    internal static string PublishLocalizedString_WarningOnSettingBothIncludeIisSettingsOnPublishAndDeployAsIisApp { get; }
    internal static string PublishLocalizedString_WarningOnSettingRemoteSitePhysicalPathWhenIISSettingIsNotInclude { get; }
    internal static string PublishLocalizedString_WebConfigConnectionStringParameterDescription { get; }
    internal static string PublishLocalizedString_WebPublishInvalidatePublishProfileSettings { get; }
    internal static string PublishLocalizedString_WebPublishMethodIsNotSupportedInCmdLine { get; }
    internal static string PublishLocalizedString_WebPublishPipelineCollectFilesPhase { get; }
    internal static string PublishLocalizedString_WebPublishPipelineCopyWebApplication { get; }
    internal static string PublishLocalizedString_WebPublishPipelineDeployPhase { get; }
    internal static string PublishLocalizedString_WebPublishPipelineDeployPhaseStage1 { get; }
    internal static string PublishLocalizedString_WebPublishPipelineMaterializeAllFilesToTempDir { get; }
    internal static string PublishLocalizedString_WebPublishPipelineMSDeploySettings { get; }
    internal static string PublishLocalizedString_WebPublishPipelinePhase { get; }
    internal static string PublishLocalizedString_WebPublishPipelineTransformPhase { get; }
    internal static string PublishLocalizedString_WebPublishProfileInvalidPropertyValue { get; }
    internal static string PublishLocalizedString_WebPublishValidatePublishProfileSettings { get; }
    internal static string ValidateParameter_ArgumentNullError { get; }
    internal static string VSMSDEPLOY_AddParameterIntoObject { get; }
    internal static string VSMSDEPLOY_Canceled { get; }
    internal static string VSMSDEPLOY_DuplicateItemMetadata { get; }
    internal static string VSMSDEPLOY_EncryptionExceptionMessage { get; }
    internal static string VSMSDEPLOY_FailedDeploy { get; }
    internal static string VSMSDEPLOY_FailedPackage { get; }
    internal static string VSMSDEPLOY_FailedWithException { get; }
    internal static string VSMSDEPLOY_FailedWithExceptionWithDetail { get; }
    internal static string VSMSDEPLOY_InvalidOperation { get; }
    internal static string VSMSDEPLOY_InvalidProviderName { get; }
    internal static string VSMSDEPLOY_InvalidProviderOption { get; }
    internal static string VSMSDEPLOY_LoadVSCertUIFailed { get; }
    internal static string VSMSDEPLOY_MSDEPLOY32bit { get; }
    internal static string VSMSDEPLOY_MSDEPLOY64bit { get; }
    internal static string VSMSDEPLOY_MSDEPLOYASSEMBLYLOAD_FAIL { get; }
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink1Message { get; }
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink1SiteMessage { get; }
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink1SQLMessage { get; }
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink2Message { get; }
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink3Message { get; }
    internal static string VSMSDEPLOY_MsDeployExceptionFwlink4Message { get; }
    internal static string VSMSDEPLOY_MSDEPLOYLOADFAIL { get; }
    internal static string VSMSDEPLOY_MSDEPLOYMinVersion { get; }
    internal static string VSMSDEPLOY_MSDEPLOYVERSIONLOAD { get; }
    internal static string VSMSDEPLOY_ObjectIdentity { get; }
    internal static string VSMSDEPLOY_SkipDirectiveSetEnable { get; }
    internal static string VSMSDEPLOY_SQLCEMigrationNeedLatestMSDeploy { get; }
    internal static string VSMSDEPLOY_Start { get; }
    internal static string VSMSDEPLOY_SucceedArchiveDir { get; }
    internal static string VSMSDEPLOY_SucceedDeploy { get; }
    internal static string VSMSDEPLOY_Succeeded { get; }
    internal static string VSMSDEPLOY_SucceedPackage { get; }
    internal static string VSMSDEPLOY_UnknownParameter { get; }
    internal static string VSMSDEPLOY_UnknownSkipDirective { get; }
    internal static string VSMSDEPLOY_WebException401Message { get; }
    internal static string VSMSDEPLOY_WebException404Message { get; }
    internal static string VSMSDEPLOY_WebException502Message { get; }
    internal static string VSMSDEPLOY_WebException550Message { get; }
    internal static string VSMSDEPLOY_WebException551Message { get; }
    internal static string VSMSDEPLOY_WebExceptionConnectFailureMessage { get; }
    internal static string VSMSDEPLOY_WebPackageHelpLink { get; }
    internal static string VSMSDEPLOY_WebPackageHelpLinkMessage { get; }
    internal static string WEBDEPLOY_AssemblyInfo_Attribute { get; }
    internal static string WEBDEPLOY_AssemblyInfo_Failed { get; }
    internal static string WEBDEPLOY_AssemblyInfo_Start { get; }
    internal static string WEBDEPLOY_AssemblyInfo_Succeeded { get; }
    internal static string WEBDEPLOY_MERGE_ApplicationPath { get; }
    internal static string WEBDEPLOY_MERGE_ContentAssemblyName { get; }
    internal static string WEBDEPLOY_MERGE_Failed { get; }
    internal static string WEBDEPLOY_MERGE_SingleAssemblyName { get; }
    internal static string WEBDEPLOY_MERGE_Start { get; }
    internal static string WEBDEPLOY_MERGE_Succeeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BUILDTASK_ColectFilesInFolder_RootIsNotValid();
    internal static string get_BUILDTASK_CopyFilesToFolders_CopyFailed();
    internal static string get_BUILDTASK_CopyFilesToFolders_Copying();
    internal static string get_BUILDTASK_CopyFilesToFolders_DeleteFailed();
    internal static string get_BUILDTASK_CopyFilesToFolders_Deleting();
    internal static string get_BUILDTASK_CopyFilesToFolders_RetryDelayOutOfRange();
    internal static string get_BUILDTASK_CopyFilesToFolders_UpToDate();
    internal static string get_BUILDTASK_CreateFolder_Failed();
    internal static string get_BUILDTASK_DetectAntaresCLR45Error();
    internal static string get_BUILDTASK_FailedToLoadThisVersionMsDeployTryingTheNext();
    internal static string get_BUILDTASK_IISSetting_RequireWebAdminDLL();
    internal static string get_BUILDTASK_IsCleanMSDeployPackageNeeded_PackageByDifferentVersion();
    internal static string get_BUILDTASK_ManifestFile_IISSettingNotInFirst();
    internal static string get_BUILDTASK_MapProjectURLToIisWeb_InvalidProjectURL();
    internal static string get_BUILDTASK_MapProjectURLToIisWeb_UnsupportedProjectURL();
    internal static string get_BUILDTASK_MapURIToIisWebServer_AdminRequired();
    internal static string get_BUILDTASK_RemoveEmptyDirectories_Deleting();
    internal static string get_BUILDTASK_SqlScriptPreprocessFile();
    internal static string get_BUILDTASK_SqlScriptPreprocessFileDone();
    internal static string get_BUILDTASK_SqlScriptPreprocessFileFailed();
    internal static string get_BUILDTASK_SqlScriptPreprocessFoundMsDeployUnsupportedCommands();
    internal static string get_BUILDTASK_SqlScriptPreprocessInvalidSqlScript();
    internal static string get_BUILDTASK_TransformXml_DestinationWriteFailed();
    internal static string get_BUILDTASK_TransformXml_SourceLoadFailed();
    internal static string get_BUILDTASK_TransformXml_TransformationApply();
    internal static string get_BUILDTASK_TransformXml_TransformationFailed();
    internal static string get_BUILDTASK_TransformXml_TransformationNoChange();
    internal static string get_BUILDTASK_TransformXml_TransformationStart();
    internal static string get_BUILDTASK_TransformXml_TransformationSucceeded();
    internal static string get_BUILDTASK_TransformXml_TransformLoadFailed();
    internal static string get_BUILDTASK_TransformXml_TransformOutput();
    internal static string get_CREATEPROVIDERLIST_FailToCopyFile();
    internal static string get_CREATEPROVIDERLIST_ImportPublishDatabaseSettingNotFound();
    internal static string get_CREATEPROVIDERLIST_ImportValidationSourceNotFound();
    internal static string get_CREATEPROVIDERLIST_InvalidMSBuildFormat();
    internal static string get_CREATEPROVIDERLIST_InvalidPublishDatabaseSetting();
    internal static string get_CREATEPROVIDERLIST_MustProviderProvidersXMLorProvidersFile();
    internal static string get_CREATEPROVIDERLIST_NotExpectingAdditionalParameter();
    internal static string get_CREATEPROVIDERLIST_NotSupportBothProvidersXMLAndProvidersFile();
    internal static string get_CREATEPROVIDERLIST_OutofSyncWithSourcePublishDatabaseSetting();
    internal static string get_CREATEPROVIDERLIST_SqlExpressPublishRequireLocalDB();
    internal static string get_DeploymentError_MissingDbDacFx();
    internal static string get_KUDUDEPLOY_AddingFile();
    internal static string get_KUDUDEPLOY_AddingFileFailed();
    internal static string get_KUDUDEPLOY_AzurePublishErrorReason();
    internal static string get_KUDUDEPLOY_ConnectionInfoMissing();
    internal static string get_KUDUDEPLOY_CopyingToTempLocation();
    internal static string get_KUDUDEPLOY_CopyingToTempLocationCompleted();
    internal static string get_KUDUDEPLOY_DeployOutputPathEmpty();
    internal static string get_KUDUDEPLOY_OperationTimeout();
    internal static string get_KUDUDEPLOY_PublishAzure();
    internal static string get_KUDUDEPLOY_PublishFailed();
    internal static string get_KUDUDEPLOY_PublishSucceeded();
    internal static string get_KUDUDEPLOY_PublishZipFailedReason();
    internal static string get_MSDEPLOY_EXE_Failed();
    internal static string get_MSDEPLOY_EXE_PreviewOnly();
    internal static string get_MSDEPLOY_EXE_Start();
    internal static string get_MSDEPLOY_EXE_Succeeded();
    internal static string get_MSDEPLOY_InvalidDestinationCount();
    internal static string get_MSDEPLOY_InvalidSourceCount();
    internal static string get_MSDEPLOY_InvalidVerbForTheInput();
    internal static string get_POWERSHELL_PublishProfileParsingError();
    internal static string get_Publich_InvalidPublishToolsVersion_Error();
    internal static string get_PublishArgumentError_InvalidRemoteServiceUrl();
    internal static string get_PublishArgumentError_InvalidSiteAppName();
    internal static string get_PublishLocalizedString_AutoConnectionStringTransformConfigToTransformOutputFile();
    internal static string get_PublishLocalizedString_CheckingForValidMsBuildPropertyValue();
    internal static string get_PublishLocalizedString_DatabaseConnectionStringParameterDescription();
    internal static string get_PublishLocalizedString_DefaultExcludeFileExtentionOutMessage();
    internal static string get_PublishLocalizedString_DefaultExcludeIntermediateOutputFolderMessage();
    internal static string get_PublishLocalizedString_DefaultExcludeSourceControlItems();
    internal static string get_PublishLocalizedString_EFCodeFirstConnectionStringParameterDescription();
    internal static string get_PublishLocalizedString_ErrorCannotDeployFromIIS7AboveToLowerIIS();
    internal static string get_PublishLocalizedString_ErrorInvalidMSBuildItemCollectionCount();
    internal static string get_PublishLocalizedString_ErrorInvalidPropertyWhenSettingPropertyIsTrue();
    internal static string get_PublishLocalizedString_ErrorPackageAsFilePointToAnExistingFolder();
    internal static string get_PublishLocalizedString_ErrorPackageAsFolderPointToAnExistingFile();
    internal static string get_PublishLocalizedString_ErrorUseIisIsTrueButIisUrlIsEmpty();
    internal static string get_PublishLocalizedString_ErrorUseWPP_CopyWebApplicationAndPipelineDependsOnBuildBothTrue();
    internal static string get_PublishLocalizedString_ExcludeAllDebugSymbols();
    internal static string get_PublishLocalizedString_ExcludeAllFilesUnderFolder();
    internal static string get_PublishLocalizedString_FinishGenerateSampleMsDeployBatchScript();
    internal static string get_PublishLocalizedString_FoundApplicationConfigForTransformation();
    internal static string get_PublishLocalizedString_GatherAllFilesInProjectFolderExceptExclusion();
    internal static string get_PublishLocalizedString_GatherSpecificItemsFromProject();
    internal static string get_PublishLocalizedString_GatherSpecificItemsFromProjectNoDetail();
    internal static string get_PublishLocalizedString_GatherSpecificOutputsFromProject();
    internal static string get_PublishLocalizedString_GenerateMsdeploySourceManifestFile();
    internal static string get_PublishLocalizedString_GenerateSampleMsdeployBatchScript();
    internal static string get_PublishLocalizedString_IISAppParameterDescription();
    internal static string get_PublishLocalizedString_IISAppPhysicalPathDescription();
    internal static string get_PublishLocalizedString_InsertAdditionalConnectionStringTransformConfigToTransformOutputFile();
    internal static string get_PublishLocalizedString_InsertEFCodeFirstDeployContextTransformConfigToTransformOutputFile();
    internal static string get_PublishLocalizedString_InvalidArgument();
    internal static string get_PublishLocalizedString_MsBuildPropertySettingValue();
    internal static string get_PublishLocalizedString_MSBuildTargetFailed();
    internal static string get_PublishLocalizedString_PackagingIntoLocation();
    internal static string get_PublishLocalizedString_SampleScriptHelpEnviroment();
    internal static string get_PublishLocalizedString_SampleScriptHelpEnviromentExplained();
    internal static string get_PublishLocalizedString_SampleScriptHelpMoreInfo();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptional();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptionalExplainedAdditionalFlags();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagA();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagG();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagL();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagM();
    internal static string get_PublishLocalizedString_SampleScriptHelpOptionalExplainedFlagUP();
    internal static string get_PublishLocalizedString_SampleScriptHelpPrerequisites();
    internal static string get_PublishLocalizedString_SampleScriptHelpRequired();
    internal static string get_PublishLocalizedString_SampleScriptHelpRequiredExplainedFlagT();
    internal static string get_PublishLocalizedString_SampleScriptHelpRequiredExplainedFlagY();
    internal static string get_PublishLocalizedString_SampleScriptHelpSection1();
    internal static string get_PublishLocalizedString_SqlCommandVariableParameterDescription();
    internal static string get_PublishLocalizedString_StartMsDeployPublishToRemote();
    internal static string get_PublishLocalizedString_TestDeployPackageOnCurrentMachine();
    internal static string get_PublishLocalizedString_TransformConfigUsingTransformFileToTransformOutputFile();
    internal static string get_PublishLocalizedString_ValidateErrorMsDeployPublishSetting();
    internal static string get_PublishLocalizedString_ValidatingMsDeployPublishSettings();
    internal static string get_PublishLocalizedString_WarningOnSettingBothIncludeIisSettingsOnPublishAndDeployAsIisApp();
    internal static string get_PublishLocalizedString_WarningOnSettingRemoteSitePhysicalPathWhenIISSettingIsNotInclude();
    internal static string get_PublishLocalizedString_WebConfigConnectionStringParameterDescription();
    internal static string get_PublishLocalizedString_WebPublishInvalidatePublishProfileSettings();
    internal static string get_PublishLocalizedString_WebPublishMethodIsNotSupportedInCmdLine();
    internal static string get_PublishLocalizedString_WebPublishPipelineCollectFilesPhase();
    internal static string get_PublishLocalizedString_WebPublishPipelineCopyWebApplication();
    internal static string get_PublishLocalizedString_WebPublishPipelineDeployPhase();
    internal static string get_PublishLocalizedString_WebPublishPipelineDeployPhaseStage1();
    internal static string get_PublishLocalizedString_WebPublishPipelineMaterializeAllFilesToTempDir();
    internal static string get_PublishLocalizedString_WebPublishPipelineMSDeploySettings();
    internal static string get_PublishLocalizedString_WebPublishPipelinePhase();
    internal static string get_PublishLocalizedString_WebPublishPipelineTransformPhase();
    internal static string get_PublishLocalizedString_WebPublishProfileInvalidPropertyValue();
    internal static string get_PublishLocalizedString_WebPublishValidatePublishProfileSettings();
    internal static string get_ValidateParameter_ArgumentNullError();
    internal static string get_VSMSDEPLOY_AddParameterIntoObject();
    internal static string get_VSMSDEPLOY_Canceled();
    internal static string get_VSMSDEPLOY_DuplicateItemMetadata();
    internal static string get_VSMSDEPLOY_EncryptionExceptionMessage();
    internal static string get_VSMSDEPLOY_FailedDeploy();
    internal static string get_VSMSDEPLOY_FailedPackage();
    internal static string get_VSMSDEPLOY_FailedWithException();
    internal static string get_VSMSDEPLOY_FailedWithExceptionWithDetail();
    internal static string get_VSMSDEPLOY_InvalidOperation();
    internal static string get_VSMSDEPLOY_InvalidProviderName();
    internal static string get_VSMSDEPLOY_InvalidProviderOption();
    internal static string get_VSMSDEPLOY_LoadVSCertUIFailed();
    internal static string get_VSMSDEPLOY_MSDEPLOY32bit();
    internal static string get_VSMSDEPLOY_MSDEPLOY64bit();
    internal static string get_VSMSDEPLOY_MSDEPLOYASSEMBLYLOAD_FAIL();
    internal static string get_VSMSDEPLOY_MsDeployExceptionFwlink1Message();
    internal static string get_VSMSDEPLOY_MsDeployExceptionFwlink1SiteMessage();
    internal static string get_VSMSDEPLOY_MsDeployExceptionFwlink1SQLMessage();
    internal static string get_VSMSDEPLOY_MsDeployExceptionFwlink2Message();
    internal static string get_VSMSDEPLOY_MsDeployExceptionFwlink3Message();
    internal static string get_VSMSDEPLOY_MsDeployExceptionFwlink4Message();
    internal static string get_VSMSDEPLOY_MSDEPLOYLOADFAIL();
    internal static string get_VSMSDEPLOY_MSDEPLOYMinVersion();
    internal static string get_VSMSDEPLOY_MSDEPLOYVERSIONLOAD();
    internal static string get_VSMSDEPLOY_ObjectIdentity();
    internal static string get_VSMSDEPLOY_SkipDirectiveSetEnable();
    internal static string get_VSMSDEPLOY_SQLCEMigrationNeedLatestMSDeploy();
    internal static string get_VSMSDEPLOY_Start();
    internal static string get_VSMSDEPLOY_SucceedArchiveDir();
    internal static string get_VSMSDEPLOY_SucceedDeploy();
    internal static string get_VSMSDEPLOY_Succeeded();
    internal static string get_VSMSDEPLOY_SucceedPackage();
    internal static string get_VSMSDEPLOY_UnknownParameter();
    internal static string get_VSMSDEPLOY_UnknownSkipDirective();
    internal static string get_VSMSDEPLOY_WebException401Message();
    internal static string get_VSMSDEPLOY_WebException404Message();
    internal static string get_VSMSDEPLOY_WebException502Message();
    internal static string get_VSMSDEPLOY_WebException550Message();
    internal static string get_VSMSDEPLOY_WebException551Message();
    internal static string get_VSMSDEPLOY_WebExceptionConnectFailureMessage();
    internal static string get_VSMSDEPLOY_WebPackageHelpLink();
    internal static string get_VSMSDEPLOY_WebPackageHelpLinkMessage();
    internal static string get_WEBDEPLOY_AssemblyInfo_Attribute();
    internal static string get_WEBDEPLOY_AssemblyInfo_Failed();
    internal static string get_WEBDEPLOY_AssemblyInfo_Start();
    internal static string get_WEBDEPLOY_AssemblyInfo_Succeeded();
    internal static string get_WEBDEPLOY_MERGE_ApplicationPath();
    internal static string get_WEBDEPLOY_MERGE_ContentAssemblyName();
    internal static string get_WEBDEPLOY_MERGE_Failed();
    internal static string get_WEBDEPLOY_MERGE_SingleAssemblyName();
    internal static string get_WEBDEPLOY_MERGE_Start();
    internal static string get_WEBDEPLOY_MERGE_Succeeded();
}
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Web.Publishing.Tasks.TaskDependentObjectFactory : object {
    private DeploymentBaseOptions _baseOptions;
    private DeploymentManager _deployMgr;
    private DeploymentErrorLogger _errorLogger;
    public TaskDependentObjectFactory(string msDeployVersionsToTry, Task task);
    public sealed virtual DeploymentBaseOptions GetDeploymentBaseOptions();
    public sealed virtual DeploymentManager GetDeploymentManager();
    public sealed virtual DeploymentErrorLogger GetErrorLogger();
}
internal class Microsoft.Web.Publishing.Tasks.TaskTransformationLogger : object {
    private TaskLoggingHelper loggingHelper;
    private int indentLevel;
    private string indentStringPiece;
    private string indentString;
    private bool stackTrace;
    private string IndentString { get; }
    private int IndentLevel { get; private set; }
    public TaskTransformationLogger(TaskLoggingHelper loggingHelper);
    public TaskTransformationLogger(TaskLoggingHelper loggingHelper, bool stackTrace);
    private string get_IndentString();
    private int get_IndentLevel();
    private void set_IndentLevel(int value);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogMessage(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogMessage(MessageType type, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogWarning(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogWarning(string file, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogError(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogError(string file, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogErrorFromException(Exception ex);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogErrorFromException(Exception ex, string file);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.StartSection(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.StartSection(MessageType type, string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.EndSection(string message, Object[] messageArgs);
    private sealed virtual override void Microsoft.Web.XmlTransform.IXmlTransformationLogger.EndSection(MessageType type, string message, Object[] messageArgs);
}
public class Microsoft.Web.Publishing.Tasks.TransformXml : Task {
    private string _sourceFile;
    private string _transformFile;
    private string _destinationFile;
    private string _sourceRootPath;
    private string _transformRootPath;
    private bool stackTrace;
    [RequiredAttribute]
public string Source { get; public set; }
    public string SourceRootPath { get; public set; }
    [RequiredAttribute]
public string Transform { get; public set; }
    public string TransformRootPath { get; public set; }
    [RequiredAttribute]
public string Destination { get; public set; }
    public bool StackTrace { get; public set; }
    public string get_Source();
    public void set_Source(string value);
    public string get_SourceRootPath();
    public void set_SourceRootPath(string value);
    public string get_Transform();
    public void set_Transform(string value);
    public string get_TransformRootPath();
    public void set_TransformRootPath(string value);
    public string get_Destination();
    public void set_Destination(string value);
    public bool get_StackTrace();
    public void set_StackTrace(bool value);
    public virtual bool Execute();
    private void SaveTransformedFile(XmlTransformableDocument document, string destinationFile);
    private XmlTransformableDocument OpenSourceFile(string sourceFile);
    private XmlTransformation OpenTransformFile(string transformFile, IXmlTransformationLogger logger);
}
internal class Microsoft.Web.Publishing.Tasks.UriWrapper : object {
    private string m_projectIisURL;
    private Uri m_uri;
    private IPAddress[] m_iPAddresses;
    private IPHostEntry m_iPHostEntry;
    private bool m_isLocalMachine;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    public Uri Uri { get; }
    public IPAddress[] IPAddresses { get; }
    public IPHostEntry IPHostEntry { get; }
    public bool IsLocalMachine { get; }
    public bool Initialized { get; public set; }
    public UriWrapper(string projectIIsUrl);
    public Uri get_Uri();
    public IPAddress[] get_IPAddresses();
    public IPHostEntry get_IPHostEntry();
    public bool get_IsLocalMachine();
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
public void set_Initialized(bool value);
    public bool Initialize(String& errorString);
    private bool InitUri(String& errorString);
}
public class Microsoft.Web.Publishing.Tasks.ValidateParameter : Task {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterValue>k__BackingField;
    [RequiredAttribute]
public string ParameterName { get; public set; }
    public string ParameterValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterValue();
    [CompilerGeneratedAttribute]
public void set_ParameterValue(string value);
    public virtual bool Execute();
}
public class Microsoft.Web.Publishing.Tasks.VerifyAzureNet46Support : Task {
    [CompilerGeneratedAttribute]
private string <ServiceUrl>k__BackingField;
    [RequiredAttribute]
public string ServiceUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceUrl();
    [CompilerGeneratedAttribute]
public void set_ServiceUrl(string value);
    public virtual bool Execute();
    internal virtual HttpStatusCode RequestFwlinkForAzureCLRSupport();
    internal virtual void LogDetectionError(string errorMessage);
    private string GetDomainName(string serviceUrl);
}
internal class Microsoft.Web.Publishing.Tasks.VSHostObject : object {
    private IEnumerable`1<ITaskItem> _hostObject;
    public VSHostObject(IEnumerable`1<ITaskItem> hostObject);
    public bool ExtractCredentials(String& username, String& password);
    public void GetFileSkips(ITaskItem[]& srcSkips, ITaskItem[]& destSkips);
    public bool ExtractDestinationUrlInfo(String& siteName);
    public bool ExtractSubscriptionCredentials(String& subscriptionId, String& managementCertificate, String& token);
}
public class Microsoft.Web.Publishing.Tasks.VSMSDeploy : Task {
    private string _disableLink;
    private string _enableLink;
    private string _disableSkipDirective;
    private string _enableSkipDirective;
    private bool _result;
    private bool _whatIf;
    private string _deploymentTraceLevel;
    private bool _useCheckSum;
    private int m_retryAttempts;
    private int m_retryInterval;
    private bool _invokedByPublish;
    private bool _allowUntrustedCert;
    private bool _skipExtraFilesOnServer;
    private bool _regIISUntrustedCertCallback;
    private ITaskItem[] m_sourceITaskItem;
    private ITaskItem[] m_destITaskItem;
    private ITaskItem[] m_replaceRuleItemsITaskItem;
    private ITaskItem[] m_skipRuleItemsITaskItem;
    private ITaskItem[] m_declareParameterItems;
    private ITaskItem[] m_importDeclareParametersItems;
    private ITaskItem[] m_simpleSetParamterItems;
    private ITaskItem[] m_importSetParametersItems;
    private ITaskItem[] m_setParamterItems;
    private BaseMSDeployDriver m_msdeployDriver;
    [CompilerGeneratedAttribute]
private string <HighImportanceEventTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimisticParameterDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMSDeployBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMSDeployAppOffline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMSDeployWebConfigEncryptRule>k__BackingField;
    private string _userAgent;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalDestinationProviderOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildingInsideVisualStudio>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSDeployVersionsToTry>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Source { get; public set; }
    public string HighImportanceEventTypes { get; public set; }
    public ITaskItem[] Destination { get; public set; }
    public bool AllowUntrustedCertificate { get; public set; }
    public bool SkipExtraFilesOnServer { get; public set; }
    public bool InvokedByPublish { get; public set; }
    public bool WhatIf { get; public set; }
    public string DeploymentTraceLevel { get; public set; }
    public bool UseChecksum { get; public set; }
    [OutputAttribute]
public bool Result { get; public set; }
    public string DisableLink { get; public set; }
    public string EnableLink { get; public set; }
    public string DisableSkipDirective { get; public set; }
    public string EnableSkipDirective { get; public set; }
    public int RetryAttempts { get; public set; }
    public int RetryInterval { get; public set; }
    public ITaskItem[] ReplaceRuleItems { get; public set; }
    public ITaskItem[] SkipRuleItems { get; public set; }
    public ITaskItem[] DeclareParameterItems { get; public set; }
    public bool OptimisticParameterDefaultValue { get; public set; }
    public ITaskItem[] ImportDeclareParametersItems { get; public set; }
    public ITaskItem[] SimpleSetParameterItems { get; public set; }
    public ITaskItem[] ImportSetParametersItems { get; public set; }
    public ITaskItem[] SetParameterItems { get; public set; }
    public bool EnableMSDeployBackup { get; public set; }
    public bool EnableMSDeployAppOffline { get; public set; }
    public bool EnableMSDeployWebConfigEncryptRule { get; public set; }
    public string UserAgent { get; public set; }
    public ITaskItem[] AdditionalDestinationProviderOptions { get; public set; }
    public bool BuildingInsideVisualStudio { get; public set; }
    public string MSDeployVersionsToTry { get; public set; }
    private string Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.TaskName { get; }
    private TaskLoggingHelper Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.Log { get; }
    private IBuildEngine Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.BuildEngine { get; }
    public ITaskItem[] get_Source();
    public void set_Source(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_HighImportanceEventTypes();
    [CompilerGeneratedAttribute]
public void set_HighImportanceEventTypes(string value);
    public ITaskItem[] get_Destination();
    public void set_Destination(ITaskItem[] value);
    public bool get_AllowUntrustedCertificate();
    public void set_AllowUntrustedCertificate(bool value);
    public bool get_SkipExtraFilesOnServer();
    public void set_SkipExtraFilesOnServer(bool value);
    public bool get_InvokedByPublish();
    public void set_InvokedByPublish(bool value);
    public bool get_WhatIf();
    public void set_WhatIf(bool value);
    public string get_DeploymentTraceLevel();
    public void set_DeploymentTraceLevel(string value);
    public bool get_UseChecksum();
    public void set_UseChecksum(bool value);
    public bool get_Result();
    public void set_Result(bool value);
    public string get_DisableLink();
    public void set_DisableLink(string value);
    public string get_EnableLink();
    public void set_EnableLink(string value);
    public string get_DisableSkipDirective();
    public void set_DisableSkipDirective(string value);
    public string get_EnableSkipDirective();
    public void set_EnableSkipDirective(string value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    public ITaskItem[] get_ReplaceRuleItems();
    public void set_ReplaceRuleItems(ITaskItem[] value);
    public ITaskItem[] get_SkipRuleItems();
    public void set_SkipRuleItems(ITaskItem[] value);
    public ITaskItem[] get_DeclareParameterItems();
    public void set_DeclareParameterItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_OptimisticParameterDefaultValue();
    [CompilerGeneratedAttribute]
public void set_OptimisticParameterDefaultValue(bool value);
    public ITaskItem[] get_ImportDeclareParametersItems();
    public void set_ImportDeclareParametersItems(ITaskItem[] value);
    public ITaskItem[] get_SimpleSetParameterItems();
    public void set_SimpleSetParameterItems(ITaskItem[] value);
    public ITaskItem[] get_ImportSetParametersItems();
    public void set_ImportSetParametersItems(ITaskItem[] value);
    public ITaskItem[] get_SetParameterItems();
    public void set_SetParameterItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_EnableMSDeployBackup();
    [CompilerGeneratedAttribute]
public void set_EnableMSDeployBackup(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMSDeployAppOffline();
    [CompilerGeneratedAttribute]
public void set_EnableMSDeployAppOffline(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMSDeployWebConfigEncryptRule();
    [CompilerGeneratedAttribute]
public void set_EnableMSDeployWebConfigEncryptRule(bool value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalDestinationProviderOptions();
    [CompilerGeneratedAttribute]
public void set_AdditionalDestinationProviderOptions(ITaskItem[] value);
    private bool AllowUntrustedCertCallback(object sp, X509Certificate cert, X509Chain chain, SslPolicyErrors problem);
    private void SetupPublishRelatedProperties(VSMSDeployObject& dest);
    [CompilerGeneratedAttribute]
public bool get_BuildingInsideVisualStudio();
    [CompilerGeneratedAttribute]
public void set_BuildingInsideVisualStudio(bool value);
    [CompilerGeneratedAttribute]
public string get_MSDeployVersionsToTry();
    [CompilerGeneratedAttribute]
public void set_MSDeployVersionsToTry(string value);
    public virtual bool Execute();
    private sealed virtual override string Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_TaskName();
    private sealed virtual override TaskLoggingHelper Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_Log();
    private sealed virtual override IBuildEngine Microsoft.Web.Publishing.IVsPublishMsBuildTaskHost.get_BuildEngine();
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.UpdateDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private void AddAdditionalProviderOptions(VSMSDeployObject destVsMsDeployobject);
    private void GetCustomAndAppDataSkips(ITaskItem[]& srcSkips, ITaskItem[]& destSkips);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.ClearDeploymentBaseOptions(VSMSDeployObject srcVsMsDeployobject, VSMSDeployObject destVsMsDeployobject);
    private sealed virtual override void Microsoft.Web.Publishing.IVSMSDeployHost.PopulateOptions(object option);
    public sealed virtual void Cancel();
    public sealed virtual object GetProperty(string propertyName);
    public void AddOptionRule(object option, string ruleName, string handlerType);
}
internal class Microsoft.Web.Publishing.Tasks.VSMSDeployDriverInCmd : BaseMSDeployDriver {
    internal VSMSDeployDriverInCmd(VSMSDeployObject src, VSMSDeployObject dest, IVSMSDeployHost host);
    protected virtual void BeforeSync();
    private static void AddAllPropertiesToCustomBuildWithPropertyEventArgs(CustomBuildWithPropertiesEventArgs cbpEventArg, object obj);
    protected virtual void LogTrace(object args, IDictionary`2<string, MessageImportance> customTypeLoging);
    protected virtual void StartSync();
    protected virtual void WaitForDone();
    protected virtual void AfterSync();
}
internal class Microsoft.Web.Publishing.Tasks.VSMSDeployObject : object {
    protected string m_root;
    protected string m_disableLinks;
    protected string m_enableLinks;
    protected string m_provider;
    protected bool m_fNoDisplayRoot;
    protected int m_retryInterval;
    protected int m_retryAttempts;
    private IList`1<ParameterInfo> m_iListParameter;
    private IList`1<ProviderOption> m_iListProviderOption;
    private IList`1<ParameterInfoWithEntry> m_iListParameterWithEntry;
    private IList`1<string> m_iListSetParametersFiles;
    private Dictionary`2<string, string> m_NameValueDictionary;
    [DynamicAttribute]
protected object m_deploymentBaseOptions;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    public string Root { get; public set; }
    public string Provider { get; public set; }
    public bool IsLocal { get; }
    public bool UseSeparatedCredential { get; }
    public string DisableLinks { get; public set; }
    public string EnableLinks { get; public set; }
    public string ComputerName { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public string MSDeployServiceUrl { get; public set; }
    public string AuthenticationType { get; public set; }
    public string EncryptPassword { get; public set; }
    public bool IncludeAcls { get; public set; }
    public bool PrefetchPayload { get; public set; }
    public string WebServerAppHostConfigDirectory { get; public set; }
    public string WebServerDirectory { get; public set; }
    public string WebServerManifest { get; public set; }
    public int RetryAttempts { get; public set; }
    public int RetryInterval { get; public set; }
    public string UserAgent { get; public set; }
    public IList`1<ParameterInfo> Parameters { get; }
    public IList`1<ProviderOption> ProviderOptions { get; }
    public IList`1<ParameterInfoWithEntry> EntryParameters { get; }
    public IList`1<string> SetParametersFiles { get; }
    [DynamicAttribute]
public object BaseOptions { get; }
    public VSMSDeployObject(string provider, string root);
    public VSMSDeployObject(ITaskItem taskItem);
    public VSMSDeployObject(ITaskItem taskItem, bool fNoDisplayRoot);
    private string GetDictionaryValue(string name);
    private void SetDictionaryValue(string name, string value);
    public virtual string ToString();
    public virtual string get_Root();
    public virtual void set_Root(string value);
    public virtual string get_Provider();
    public virtual void set_Provider(string value);
    public virtual bool get_IsLocal();
    public virtual bool get_UseSeparatedCredential();
    public virtual string get_DisableLinks();
    public virtual void set_DisableLinks(string value);
    public virtual string get_EnableLinks();
    public virtual void set_EnableLinks(string value);
    public virtual string get_ComputerName();
    public virtual void set_ComputerName(string value);
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public virtual string get_Password();
    public virtual void set_Password(string value);
    public string get_MSDeployServiceUrl();
    public void set_MSDeployServiceUrl(string value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_EncryptPassword();
    public void set_EncryptPassword(string value);
    public bool get_IncludeAcls();
    public void set_IncludeAcls(bool value);
    public bool get_PrefetchPayload();
    public void set_PrefetchPayload(bool value);
    public string get_WebServerAppHostConfigDirectory();
    public void set_WebServerAppHostConfigDirectory(string value);
    public string get_WebServerDirectory();
    public void set_WebServerDirectory(string value);
    public string get_WebServerManifest();
    public void set_WebServerManifest(string value);
    public int get_RetryAttempts();
    public void set_RetryAttempts(int value);
    public int get_RetryInterval();
    public void set_RetryInterval(int value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    public IList`1<ParameterInfo> get_Parameters();
    public IList`1<ProviderOption> get_ProviderOptions();
    public void SetProviderOption(string factoryName, string parameterName, string parameterStringValue);
    public void SyncParameter(string parameterName, string parameterStringValue);
    public IList`1<ParameterInfoWithEntry> get_EntryParameters();
    public IList`1<string> get_SetParametersFiles();
    public void SyncParameter(string name, string value, string type, string scope, string matchRegularExpression, string description, string defaultValue, string tags, string element, string validationString);
    public void SyncParameterFile(string filename);
    public void ResetBaseOptions();
    public object get_BaseOptions();
    public void SyncTo(VSMSDeployObject destObject, object syncOptions, IVSMSDeployHost _host);
}
internal static class Microsoft.Web.Publishing.Tasks.VSMSDeployObjectFactory : object {
    public static VSMSDeployObject CreateVSMSDeployObject(ITaskItem taskItem);
    public static VSMSDeployObject CreateVSMSDeployObject(string provider, string path);
}
