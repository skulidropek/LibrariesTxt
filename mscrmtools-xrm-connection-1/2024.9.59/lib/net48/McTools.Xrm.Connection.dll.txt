internal class McTools.Xrm.Connection.AppCode.HighlightingExpandConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destType);
}
public class McTools.Xrm.Connection.AppCode.ImpersonationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public Guid UserId { get; }
    public string UserName { get; }
    public ImpersonationEventArgs(Guid userId, string username);
    [CompilerGeneratedAttribute]
public Guid get_UserId();
    [CompilerGeneratedAttribute]
public string get_UserName();
}
public enum McTools.Xrm.Connection.BrowserEnum : Enum {
    public int value__;
    public static BrowserEnum Edge;
    public static BrowserEnum Chrome;
    public static BrowserEnum Firefox;
    public static BrowserEnum None;
}
public class McTools.Xrm.Connection.CertificateInfo : object {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thumbprint>k__BackingField;
    public string Issuer { get; public set; }
    public string Name { get; public set; }
    public string Thumbprint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Thumbprint();
    [CompilerGeneratedAttribute]
public void set_Thumbprint(string value);
}
[XmlIncludeAttribute("McTools.Xrm.Connection.CertificateInfo")]
[XmlIncludeAttribute("McTools.Xrm.Connection.EnvironmentHighlighting")]
[TypeConverterAttribute("OrderedPropertyGrid.PropertySorter")]
public class McTools.Xrm.Connection.ConnectionDetail : object {
    private Nullable`1<bool> canImpersonate;
    private string clientSecret;
    private Guid impersonatedUserId;
    private string impersonatedUserName;
    private string userPassword;
    private MetadataCache _metadataCache;
    [XmlIgnoreAttribute]
private CrmServiceClient crmSvc;
    [CompilerGeneratedAttribute]
private bool <AllowPasswordSharing>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationProviderType <AuthType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AzureAdAppId>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserEnum <BrowserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanImpersonate>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateInfo <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <EnvironmentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private EnvironmentHighlighting <EnvironmentHighlightingInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <EnvironmentTextColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HomeRealmUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCustomAuth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromSdkLoginCtrl>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUsedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<MetadataCache> <MetadataCacheLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationType <NewAuthType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationDataServiceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationServiceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationUrlName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionFile <ParentConnectionFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefreshToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplyUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SavePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ServerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseIfd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMfa>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebApplicationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ImpersonationEventArgs> OnImpersonate;
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool AllowPasswordSharing { get; public set; }
    [BrowsableAttribute("False")]
public AuthenticationProviderType AuthType { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Application Id")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("7")]
public Guid AzureAdAppId { get; public set; }
    [CategoryAttribute("Browser")]
[DisplayNameAttribute("Browser")]
[ReadOnlyAttribute("True")]
public BrowserEnum BrowserName { get; public set; }
    [CategoryAttribute("Browser")]
[DisplayNameAttribute("Profile")]
[ReadOnlyAttribute("True")]
public string BrowserProfile { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool CanImpersonate { get; private set; }
    [XmlElementAttribute("CertificateInfo")]
[BrowsableAttribute("False")]
public CertificateInfo Certificate { get; public set; }
    [XmlElementAttribute("ClientSecret")]
[BrowsableAttribute("False")]
public string ClientSecretEncrypted { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool ClientSecretIsEmpty { get; }
    [CategoryAttribute("	General")]
[DisplayNameAttribute("Connection Id")]
[PropertyOrderAttribute("2")]
[ReadOnlyAttribute("True")]
public Nullable`1<Guid> ConnectionId { get; public set; }
    [CategoryAttribute("	General")]
[DisplayNameAttribute("Connection Name")]
[PropertyOrderAttribute("1")]
[ReadOnlyAttribute("True")]
public string ConnectionName { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Connection string")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("12")]
public string ConnectionString { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Nullable`1<Color> EnvironmentColor { get; public set; }
    [CategoryAttribute("Highlighting")]
[DisplayNameAttribute("Highlighting Info")]
[ReadOnlyAttribute("True")]
[TypeConverterAttribute("McTools.Xrm.Connection.AppCode.HighlightingExpandConverter")]
[PropertyOrderAttribute("21")]
public EnvironmentHighlighting EnvironmentHighlightingInfo { get; public set; }
    [CategoryAttribute("Environment")]
[DisplayNameAttribute("Environment Id")]
[ReadOnlyAttribute("True")]
public string EnvironmentId { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public string EnvironmentText { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Nullable`1<Color> EnvironmentTextColor { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Home realm url")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("9")]
public string HomeRealmUrl { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Guid ImpersonatedUserId { get; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public string ImpersonatedUserName { get; }
    [BrowsableAttribute("False")]
public bool IsCustomAuth { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool IsEnvironmentHighlightSet { get; }
    [BrowsableAttribute("False")]
public bool IsFromSdkLoginCtrl { get; public set; }
    [XmlIgnoreAttribute]
[CategoryAttribute("	General")]
[DisplayNameAttribute("Last used on")]
[PropertyOrderAttribute("3")]
[ReadOnlyAttribute("True")]
public DateTime LastUsedOn { get; public set; }
    [XmlElementAttribute("LastUsedOn")]
[BrowsableAttribute("False")]
public string LastUsedOnString { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public EntityMetadata[] MetadataCache { get; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Task`1<MetadataCache> MetadataCacheLoader { get; private set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Authentication type")]
[ReadOnlyAttribute("True")]
public AuthenticationType NewAuthType { get; public set; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("Unique name")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("31")]
public string Organization { get; public set; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("URL - Organization data")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("36")]
public string OrganizationDataServiceUrl { get; public set; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("Friendly nalme")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("30")]
public string OrganizationFriendlyName { get; public set; }
    [BrowsableAttribute("False")]
public int OrganizationMajorVersion { get; }
    [BrowsableAttribute("False")]
public int OrganizationMinorVersion { get; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("URL - Organization service")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("35")]
public string OrganizationServiceUrl { get; public set; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("Organization URL name")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("32")]
public string OrganizationUrlName { get; public set; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("Version")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("33")]
public string OrganizationVersion { get; public set; }
    [BrowsableAttribute("False")]
public string OriginalUrl { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public ConnectionFile ParentConnectionFile { get; public set; }
    [BrowsableAttribute("False")]
public bool PasswordIsEmpty { get; }
    [BrowsableAttribute("False")]
public string RefreshToken { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Reply Url")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("8")]
public string ReplyUrl { get; public set; }
    [BrowsableAttribute("False")]
public string S2SClientSecret { get; public set; }
    [BrowsableAttribute("False")]
public bool SavePassword { get; public set; }
    [BrowsableAttribute("False")]
public string ServerName { get; public set; }
    [DefaultValueAttribute("80")]
[XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Nullable`1<int> ServerPort { get; public set; }
    [XmlElementAttribute("ServerPort")]
[BrowsableAttribute("False")]
public string ServerPortString { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public CrmServiceClient ServiceClient { get; public set; }
    [CategoryAttribute("Environment")]
[DisplayNameAttribute("Tenant Id")]
[ReadOnlyAttribute("True")]
public Guid TenantId { get; public set; }
    [CategoryAttribute("	General")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("4")]
public TimeSpan Timeout { get; public set; }
    [BrowsableAttribute("False")]
public long TimeoutTicks { get; public set; }
    [XmlIgnoreAttribute]
[CategoryAttribute("Authentication")]
[DisplayNameAttribute("Use connection string")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("11")]
public bool UseConnectionString { get; }
    [BrowsableAttribute("False")]
public bool UseIfd { get; public set; }
    [BrowsableAttribute("False")]
public bool UseMfa { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool UseOnline { get; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("User domain")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("5")]
public string UserDomain { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("User name")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("6")]
public string UserName { get; public set; }
    [XmlElementAttribute("UserPassword")]
[BrowsableAttribute("False")]
public string UserPasswordEncrypted { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public bool UseSsl { get; }
    [CategoryAttribute("Organization")]
[DisplayNameAttribute("URL - Web application")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("34")]
public string WebApplicationUrl { get; public set; }
    private static ConnectionDetail();
    public ConnectionDetail(bool createNewId);
    [CompilerGeneratedAttribute]
public bool get_AllowPasswordSharing();
    [CompilerGeneratedAttribute]
public void set_AllowPasswordSharing(bool value);
    [CompilerGeneratedAttribute]
public AuthenticationProviderType get_AuthType();
    [CompilerGeneratedAttribute]
public void set_AuthType(AuthenticationProviderType value);
    [CompilerGeneratedAttribute]
public Guid get_AzureAdAppId();
    [CompilerGeneratedAttribute]
public void set_AzureAdAppId(Guid value);
    [CompilerGeneratedAttribute]
public BrowserEnum get_BrowserName();
    [CompilerGeneratedAttribute]
public void set_BrowserName(BrowserEnum value);
    [CompilerGeneratedAttribute]
public string get_BrowserProfile();
    [CompilerGeneratedAttribute]
public void set_BrowserProfile(string value);
    [CompilerGeneratedAttribute]
public bool get_CanImpersonate();
    [CompilerGeneratedAttribute]
private void set_CanImpersonate(bool value);
    [CompilerGeneratedAttribute]
public CertificateInfo get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(CertificateInfo value);
    public string get_ClientSecretEncrypted();
    public void set_ClientSecretEncrypted(string value);
    public bool get_ClientSecretIsEmpty();
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public void set_ConnectionName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_EnvironmentColor();
    [CompilerGeneratedAttribute]
public void set_EnvironmentColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public EnvironmentHighlighting get_EnvironmentHighlightingInfo();
    [CompilerGeneratedAttribute]
public void set_EnvironmentHighlightingInfo(EnvironmentHighlighting value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentId();
    [CompilerGeneratedAttribute]
public void set_EnvironmentId(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentText();
    [CompilerGeneratedAttribute]
public void set_EnvironmentText(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_EnvironmentTextColor();
    [CompilerGeneratedAttribute]
public void set_EnvironmentTextColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public string get_HomeRealmUrl();
    [CompilerGeneratedAttribute]
public void set_HomeRealmUrl(string value);
    public Guid get_ImpersonatedUserId();
    public string get_ImpersonatedUserName();
    [CompilerGeneratedAttribute]
public bool get_IsCustomAuth();
    [CompilerGeneratedAttribute]
public void set_IsCustomAuth(bool value);
    public bool get_IsEnvironmentHighlightSet();
    [CompilerGeneratedAttribute]
public bool get_IsFromSdkLoginCtrl();
    [CompilerGeneratedAttribute]
public void set_IsFromSdkLoginCtrl(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUsedOn();
    [CompilerGeneratedAttribute]
public void set_LastUsedOn(DateTime value);
    public string get_LastUsedOnString();
    public void set_LastUsedOnString(string value);
    public EntityMetadata[] get_MetadataCache();
    [CompilerGeneratedAttribute]
public Task`1<MetadataCache> get_MetadataCacheLoader();
    [CompilerGeneratedAttribute]
private void set_MetadataCacheLoader(Task`1<MetadataCache> value);
    [CompilerGeneratedAttribute]
public AuthenticationType get_NewAuthType();
    [CompilerGeneratedAttribute]
public void set_NewAuthType(AuthenticationType value);
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
public void set_Organization(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationDataServiceUrl();
    [CompilerGeneratedAttribute]
public void set_OrganizationDataServiceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationFriendlyName();
    [CompilerGeneratedAttribute]
public void set_OrganizationFriendlyName(string value);
    public int get_OrganizationMajorVersion();
    public int get_OrganizationMinorVersion();
    [CompilerGeneratedAttribute]
public string get_OrganizationServiceUrl();
    [CompilerGeneratedAttribute]
public void set_OrganizationServiceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationUrlName();
    [CompilerGeneratedAttribute]
public void set_OrganizationUrlName(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationVersion();
    [CompilerGeneratedAttribute]
public void set_OrganizationVersion(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalUrl();
    [CompilerGeneratedAttribute]
public void set_OriginalUrl(string value);
    [CompilerGeneratedAttribute]
public ConnectionFile get_ParentConnectionFile();
    [CompilerGeneratedAttribute]
public void set_ParentConnectionFile(ConnectionFile value);
    public bool get_PasswordIsEmpty();
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_ReplyUrl();
    [CompilerGeneratedAttribute]
public void set_ReplyUrl(string value);
    public string get_S2SClientSecret();
    public void set_S2SClientSecret(string value);
    [CompilerGeneratedAttribute]
public bool get_SavePassword();
    [CompilerGeneratedAttribute]
public void set_SavePassword(bool value);
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public void set_ServerName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ServerPort();
    [CompilerGeneratedAttribute]
public void set_ServerPort(Nullable`1<int> value);
    public string get_ServerPortString();
    public void set_ServerPortString(string value);
    public CrmServiceClient get_ServiceClient();
    public void set_ServiceClient(CrmServiceClient value);
    [CompilerGeneratedAttribute]
public Guid get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(Guid value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public long get_TimeoutTicks();
    public void set_TimeoutTicks(long value);
    public bool get_UseConnectionString();
    [CompilerGeneratedAttribute]
public bool get_UseIfd();
    [CompilerGeneratedAttribute]
public void set_UseIfd(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMfa();
    [CompilerGeneratedAttribute]
public void set_UseMfa(bool value);
    public bool get_UseOnline();
    [CompilerGeneratedAttribute]
public string get_UserDomain();
    [CompilerGeneratedAttribute]
public void set_UserDomain(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    public string get_UserPasswordEncrypted();
    public void set_UserPasswordEncrypted(string value);
    public bool get_UseSsl();
    [CompilerGeneratedAttribute]
public string get_WebApplicationUrl();
    [CompilerGeneratedAttribute]
public void set_WebApplicationUrl(string value);
    public void ErasePassword();
    public virtual CrmServiceClient GetCrmServiceClient(bool forceNewService);
    public virtual void SetClientSecret(string secret, bool isEncrypted);
    public virtual void SetConnectionString(string connectionString);
    public virtual void SetPassword(string password, bool isEncrypted);
    public virtual string ToString();
    public virtual bool TryRequestClientSecret(Control parent, string secretUsageDescription, String& secret, SensitiveDataNotFoundReason& notFoundReason);
    public virtual bool TryRequestPassword(Control parent, string passwordUsageDescription, String& password, SensitiveDataNotFoundReason& notFoundReason);
    public virtual void UpdateAfterEdit(ConnectionDetail editedConnection);
    private void ConnectIfd();
    private void ConnectOAuth();
    private void ConnectOnline();
    private void ConnectOnprem();
    private string HandleConnectionString(string connectionString);
    private void SetImpersonationCapability();
    public virtual object Clone();
    public void CopyClientSecretTo(ConnectionDetail detail);
    public void CopyPasswordTo(ConnectionDetail detail);
    public string GetConnectionString();
    public bool IsConnectionBrokenWithUpdatedData(ConnectionDetail originalDetail);
    public bool PasswordIsDifferent(string password);
    public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public void add_OnImpersonate(EventHandler`1<ImpersonationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnImpersonate(EventHandler`1<ImpersonationEventArgs> value);
    public void Impersonate(Guid userId, string username);
    public void RemoveImpersonation();
    public Task UpdateMetadataCache(bool flush);
}
[ExtensionAttribute]
public static class McTools.Xrm.Connection.ConnectionDetailExtensions : object {
    [ExtensionAttribute]
public static void OpenUrlWithBrowserProfile(ConnectionDetail detail, Uri uri);
}
public class McTools.Xrm.Connection.ConnectionFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ConnectionDetail <ConnectionDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureReason>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfConnectionsRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    public ConnectionDetail ConnectionDetail { get; public set; }
    public string FailureReason { get; public set; }
    public int NumberOfConnectionsRequested { get; public set; }
    public object Parameter { get; public set; }
    [CompilerGeneratedAttribute]
public ConnectionDetail get_ConnectionDetail();
    [CompilerGeneratedAttribute]
public void set_ConnectionDetail(ConnectionDetail value);
    [CompilerGeneratedAttribute]
public string get_FailureReason();
    [CompilerGeneratedAttribute]
public void set_FailureReason(string value);
    [CompilerGeneratedAttribute]
public int get_NumberOfConnectionsRequested();
    [CompilerGeneratedAttribute]
public void set_NumberOfConnectionsRequested(int value);
    [CompilerGeneratedAttribute]
public object get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(object value);
}
public class McTools.Xrm.Connection.ConnectionFile : object {
    private CrmConnections _connections;
    [CompilerGeneratedAttribute]
private DateTime <LastUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Base64Image { get; }
    [XmlIgnoreAttribute]
public CrmConnections Connections { get; public set; }
    public DateTime LastUsed { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public ConnectionFile(string name);
    public ConnectionFile(CrmConnections connections);
    public string get_Base64Image();
    public CrmConnections get_Connections();
    public void set_Connections(CrmConnections value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUsed();
    [CompilerGeneratedAttribute]
public void set_LastUsed(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public void ApplyLinkWithConnectionDetails();
    public void Reload();
    public void Save();
    public virtual string ToString();
}
public class McTools.Xrm.Connection.ConnectionManager : object {
    [CompilerGeneratedAttribute]
private ConnectionFailedEventHandler ConnectionFailed;
    [CompilerGeneratedAttribute]
private ConnectionListUpdatedEventHandler ConnectionListUpdated;
    [CompilerGeneratedAttribute]
private ConnectionSucceedEventHandler ConnectionSucceed;
    [CompilerGeneratedAttribute]
private RequestPasswordEventHandler RequestPassword;
    [CompilerGeneratedAttribute]
private StepChangedEventHandler StepChanged;
    [CompilerGeneratedAttribute]
private UseProxyEventHandler UseProxy;
    internal static string CryptoHashAlgorythm;
    internal static string CryptoInitVector;
    internal static int CryptoKeySize;
    internal static string CryptoPassPhrase;
    internal static int CryptoPasswordIterations;
    internal static string CryptoSaltValue;
    private static string DefaultConfigFileName;
    private static string configfile;
    private static Lazy`1<ConnectionManager> instance;
    private Dictionary`2<Guid, CrmServiceClient> crmServices;
    private FileSystemWatcher fsw;
    [CompilerGeneratedAttribute]
private ConnectionsList <ConnectionsFilesList>k__BackingField;
    [CompilerGeneratedAttribute]
private CrmConnections <ConnectionsList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromXrmToolBox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReuseConnections>k__BackingField;
    public static string ConfigurationFile { get; public set; }
    public static ConnectionManager Instance { get; }
    public ConnectionsList ConnectionsFilesList { get; public set; }
    public CrmConnections ConnectionsList { get; public set; }
    public bool FromXrmToolBox { get; public set; }
    public bool ReuseConnections { get; public set; }
    private static ConnectionManager();
    [CompilerGeneratedAttribute]
public void add_ConnectionFailed(ConnectionFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionFailed(ConnectionFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConnectionListUpdated(ConnectionListUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionListUpdated(ConnectionListUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ConnectionSucceed(ConnectionSucceedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionSucceed(ConnectionSucceedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RequestPassword(RequestPasswordEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RequestPassword(RequestPasswordEventHandler value);
    [CompilerGeneratedAttribute]
public void add_StepChanged(StepChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StepChanged(StepChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_UseProxy(UseProxyEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UseProxy(UseProxyEventHandler value);
    private static bool ValidateRemoteCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors policyErrors);
    private void fsw_Changed(object sender, FileSystemEventArgs e);
    private void SetupFileSystemWatcher();
    public static string get_ConfigurationFile();
    public static void set_ConfigurationFile(string value);
    public static ConnectionManager get_Instance();
    [CompilerGeneratedAttribute]
public ConnectionsList get_ConnectionsFilesList();
    [CompilerGeneratedAttribute]
public void set_ConnectionsFilesList(ConnectionsList value);
    [CompilerGeneratedAttribute]
public CrmConnections get_ConnectionsList();
    [CompilerGeneratedAttribute]
public void set_ConnectionsList(CrmConnections value);
    [CompilerGeneratedAttribute]
public bool get_FromXrmToolBox();
    [CompilerGeneratedAttribute]
public void set_FromXrmToolBox(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReuseConnections();
    [CompilerGeneratedAttribute]
public void set_ReuseConnections(bool value);
    private ConnectionsList LoadConnectionsFilesList();
    public static bool FileExists(string path);
    public void ConnectToServer(List`1<ConnectionDetail> details, object connectionParameter);
    public void ConnectToServer(List`1<ConnectionDetail> details);
    public CrmConnections LoadConnectionsList();
    public void SaveConnectionsFile();
    public void TestConnection(IOrganizationService service);
    private object Connect(List`1<object> parameters);
    private void UpdateMetadataCache(ConnectionDetail detail);
    private void WorkerDoWork(object sender, DoWorkEventArgs e);
    private void WorkerRunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e);
    private void SendFailureMessage(List`1<object> parameters, string failureReason);
    private void SendStepChange(string step);
    private void SendSuccessMessage(IOrganizationService service, List`1<object> parameters);
    public void ConnectToServerWithSdkLoginCtrl(ConnectionDetail detail, CrmServiceClient crmSvc, object connectionParameter);
    [CompilerGeneratedAttribute]
private void <UpdateMetadataCache>b__68_0(Task t);
}
public class McTools.Xrm.Connection.ConnectionsList : object {
    private static ConnectionsList _instance;
    [CompilerGeneratedAttribute]
private static string <ConnectionsListFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConnectionFile> <Files>k__BackingField;
    public static string ConnectionsListFilePath { get; public set; }
    public static ConnectionsList Instance { get; }
    public List`1<ConnectionFile> Files { get; public set; }
    private static ConnectionsList();
    [CompilerGeneratedAttribute]
public static string get_ConnectionsListFilePath();
    [CompilerGeneratedAttribute]
public static void set_ConnectionsListFilePath(string value);
    public static ConnectionsList get_Instance();
    [CompilerGeneratedAttribute]
public List`1<ConnectionFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<ConnectionFile> value);
    public void Save();
}
public class McTools.Xrm.Connection.ConnectionSucceedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ConnectionDetail <ConnectionDetail>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfConnectionsRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationService <OrganizationService>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Parameter>k__BackingField;
    public ConnectionDetail ConnectionDetail { get; public set; }
    public int NumberOfConnectionsRequested { get; public set; }
    public IOrganizationService OrganizationService { get; public set; }
    public object Parameter { get; public set; }
    [CompilerGeneratedAttribute]
public ConnectionDetail get_ConnectionDetail();
    [CompilerGeneratedAttribute]
public void set_ConnectionDetail(ConnectionDetail value);
    [CompilerGeneratedAttribute]
public int get_NumberOfConnectionsRequested();
    [CompilerGeneratedAttribute]
public void set_NumberOfConnectionsRequested(int value);
    [CompilerGeneratedAttribute]
public IOrganizationService get_OrganizationService();
    [CompilerGeneratedAttribute]
public void set_OrganizationService(IOrganizationService value);
    [CompilerGeneratedAttribute]
public object get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(object value);
}
public class McTools.Xrm.Connection.CrmConnections : object {
    private static object _fileAccess;
    [CompilerGeneratedAttribute]
private string <Base64Image>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ByPassProxyOnLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ConnectionDetail> <Connections>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProxyAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCustomProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDetailsView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInternetExplorerProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMruDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public string Base64Image { get; public set; }
    public bool ByPassProxyOnLocal { get; public set; }
    public List`1<ConnectionDetail> Connections { get; public set; }
    public bool IsReadOnly { get; public set; }
    public string Name { get; public set; }
    public string Password { get; public set; }
    public string ProxyAddress { get; public set; }
    public bool UseCustomProxy { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public bool UseDetailsView { get; public set; }
    public bool UseInternetExplorerProxy { get; public set; }
    public bool UseMruDisplay { get; public set; }
    public string UserName { get; public set; }
    public CrmConnections(string name);
    private static CrmConnections();
    [CompilerGeneratedAttribute]
public string get_Base64Image();
    [CompilerGeneratedAttribute]
public void set_Base64Image(string value);
    [CompilerGeneratedAttribute]
public bool get_ByPassProxyOnLocal();
    [CompilerGeneratedAttribute]
public void set_ByPassProxyOnLocal(bool value);
    [CompilerGeneratedAttribute]
public List`1<ConnectionDetail> get_Connections();
    [CompilerGeneratedAttribute]
public void set_Connections(List`1<ConnectionDetail> value);
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_ProxyAddress();
    [CompilerGeneratedAttribute]
public void set_ProxyAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCustomProxy();
    [CompilerGeneratedAttribute]
public void set_UseCustomProxy(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultCredentials();
    [CompilerGeneratedAttribute]
public void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDetailsView();
    [CompilerGeneratedAttribute]
public void set_UseDetailsView(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseInternetExplorerProxy();
    [CompilerGeneratedAttribute]
public void set_UseInternetExplorerProxy(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMruDisplay();
    [CompilerGeneratedAttribute]
public void set_UseMruDisplay(bool value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    public static CrmConnections LoadFromFile(string filePath);
    public ConnectionDetail CloneConnection(ConnectionDetail detail);
    public virtual void SerializeToFile(string filePath);
    public virtual string ToString();
    private static Stream OpenStream(string filePath);
}
public class McTools.Xrm.Connection.CrmExceptionHelper : object {
    public static string GetErrorMessage(Exception error, bool returnWithStackTrace);
}
internal class McTools.Xrm.Connection.CryptoManager : object {
    public static string Decrypt(string cipherText, string passPhrase, string saltValue, string hashAlgorithm, int passwordIterations, string initVector, int keySize);
    public static string Encrypt(string plainText, string passPhrase, string saltValue, string hashAlgorithm, int passwordIterations, string initVector, int keySize);
}
public class McTools.Xrm.Connection.DeleteConnectionEventArgs : EventArgs {
}
public class McTools.Xrm.Connection.EditConnectEventArgs : EventArgs {
}
[TypeConverterAttribute("McTools.Xrm.Connection.AppCode.HighlightingExpandConverter")]
public class McTools.Xrm.Connection.EnvironmentHighlighting : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <TextColor>k__BackingField;
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Nullable`1<Color> Color { get; public set; }
    [XmlElementAttribute("Color")]
[DisplayNameAttribute("Background color")]
[PropertyOrderAttribute("20")]
[ReadOnlyAttribute("True")]
public string ColorString { get; public set; }
    [DisplayNameAttribute("Label")]
[ReadOnlyAttribute("True")]
[PropertyOrderAttribute("22")]
public string Text { get; public set; }
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public Nullable`1<Color> TextColor { get; public set; }
    [XmlElementAttribute("TextColor")]
[DisplayNameAttribute("Label color")]
[PropertyOrderAttribute("21")]
[ReadOnlyAttribute("True")]
public string TextColorString { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Nullable`1<Color> value);
    public string get_ColorString();
    public void set_ColorString(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_TextColor();
    [CompilerGeneratedAttribute]
public void set_TextColor(Nullable`1<Color> value);
    public string get_TextColorString();
    public void set_TextColorString(string value);
}
public class McTools.Xrm.Connection.Forms.PasswordRequestDialog : Form {
    private ConnectionDetail _detail;
    [CompilerGeneratedAttribute]
private bool <Accepted>k__BackingField;
    private IContainer components;
    private Panel pnlHeader;
    private Label label2;
    private Label lblHeaderTitle;
    private Panel pnlFooter;
    private Panel pnlMain;
    private Panel pnlReason;
    private Label lblReason;
    private Panel pnlDecision;
    private RadioButton rdbThisSession;
    private RadioButton rdbThisTimeOnly;
    private RadioButton rdbDoNotAllow;
    private Button bCancel;
    private Button bValidate;
    public bool Accepted { get; private set; }
    public PasswordRequestDialog(string passwordUsageDescription, ConnectionDetail detail, string item);
    [CompilerGeneratedAttribute]
public bool get_Accepted();
    [CompilerGeneratedAttribute]
private void set_Accepted(bool value);
    private void bValidate_Click(object sender, EventArgs e);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
public interface McTools.Xrm.Connection.ICrmConnectionsProvider {
    public abstract virtual CrmConnections LoadCrmConnections();
}
[DataContractAttribute]
public class McTools.Xrm.Connection.MetadataCache : object {
    [CompilerGeneratedAttribute]
private int <MetadataQueryVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientVersionStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityMetadata[] <EntityMetadata>k__BackingField;
    [DataMemberAttribute]
public int MetadataQueryVersion { get; public set; }
    [DataMemberAttribute]
public string ClientVersionStamp { get; public set; }
    [DataMemberAttribute]
public EntityMetadata[] EntityMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MetadataQueryVersion();
    [CompilerGeneratedAttribute]
public void set_MetadataQueryVersion(int value);
    [CompilerGeneratedAttribute]
public string get_ClientVersionStamp();
    [CompilerGeneratedAttribute]
public void set_ClientVersionStamp(string value);
    [CompilerGeneratedAttribute]
public EntityMetadata[] get_EntityMetadata();
    [CompilerGeneratedAttribute]
public void set_EntityMetadata(EntityMetadata[] value);
}
internal class McTools.Xrm.Connection.MetadataCacheContractResolver : DefaultContractResolver {
    public static MetadataCacheContractResolver Instance;
    private static MetadataCacheContractResolver();
    protected virtual JsonContract CreateContract(Type objectType);
    public void PreloadContracts(Type type);
    private void PreloadContracts(Type type, HashSet`1<Type> contracts);
}
public class McTools.Xrm.Connection.RequestPasswordEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ConnectionDetail <ConnectionDetail>k__BackingField;
    public ConnectionDetail ConnectionDetail { get; public set; }
    public RequestPasswordEventArgs(ConnectionDetail connectionDetail);
    [CompilerGeneratedAttribute]
public ConnectionDetail get_ConnectionDetail();
    [CompilerGeneratedAttribute]
public void set_ConnectionDetail(ConnectionDetail value);
}
public enum McTools.Xrm.Connection.SensitiveDataNotFoundReason : Enum {
    public int value__;
    public static SensitiveDataNotFoundReason NotAllowedByUser;
    public static SensitiveDataNotFoundReason NotAccessible;
    public static SensitiveDataNotFoundReason None;
}
public class McTools.Xrm.Connection.StepChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <CurrentStep>k__BackingField;
    public string CurrentStep { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CurrentStep();
    [CompilerGeneratedAttribute]
public void set_CurrentStep(string value);
}
public class McTools.Xrm.Connection.UseProxyEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    public IWebProxy Proxy { get; public set; }
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
}
public class McTools.Xrm.Connection.Utils.AutoRefreshSecurityToken`2 : object {
    private ClientCredentials _deviceCredentials;
    private TProxy _proxy;
    public AutoRefreshSecurityToken`2(TProxy proxy);
    public void PrepareCredentials();
    public void RenewTokenIfRequired();
}
internal class McTools.Xrm.Connection.Utils.ManagedTokenDiscoveryServiceProxy : DiscoveryServiceProxy {
    private AutoRefreshSecurityToken`2<DiscoveryServiceProxy, IDiscoveryService> _proxyManager;
    public ManagedTokenDiscoveryServiceProxy(Uri serviceUri, ClientCredentials userCredentials);
    public ManagedTokenDiscoveryServiceProxy(IServiceManagement`1<IDiscoveryService> serviceManagement, SecurityTokenResponse securityTokenRes);
    public ManagedTokenDiscoveryServiceProxy(IServiceManagement`1<IDiscoveryService> serviceManagement, ClientCredentials userCredentials);
    protected virtual void AuthenticateCore();
    protected virtual SecurityTokenResponse AuthenticateDeviceCore();
    protected virtual void ValidateAuthentication();
}
internal class McTools.Xrm.Connection.Utils.RefreshTokenAuthOverride : object {
    private ConnectionDetail _connection;
    private IDictionary`2<string, Token> _accessTokens;
    public RefreshTokenAuthOverride(ConnectionDetail connection);
    public sealed virtual string GetAuthToken(Uri connectedUri);
    private Token GetAccessTokenFromAzureAD(Uri orgUrl);
}
public class McTools.Xrm.Connection.XmlSerializerHelper : object {
    public static object Deserialize(string xmlContent, Type objectType);
    public static object Deserialize(Stream stream, Type objectType, Type[] types);
    public static string Serialize(object o);
    public static string Serialize(object o, Type[] type);
    public static void SerializeToFile(object o, string path);
    public static void SerializeToFile(object o, string path, Type[] type);
}
[AttributeUsageAttribute("128")]
public class OrderedPropertyGrid.PropertyOrderAttribute : Attribute {
    private int _order;
    public int Order { get; }
    public PropertyOrderAttribute(int order);
    public int get_Order();
}
public class OrderedPropertyGrid.PropertyOrderPair : object {
    private int _order;
    private string _name;
    public string Name { get; }
    public PropertyOrderPair(string name, int order);
    public string get_Name();
    public sealed virtual int CompareTo(object obj);
}
public class OrderedPropertyGrid.PropertySorter : ExpandableObjectConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
