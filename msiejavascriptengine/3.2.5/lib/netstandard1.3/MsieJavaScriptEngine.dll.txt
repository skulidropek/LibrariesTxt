[GuidAttribute("51973C32-CB0C-11d0-B5C9-00A0244A0E7A")]
[InterfaceTypeAttribute("1")]
internal interface MsieJavaScriptEngine.ActiveScript.Debugging.IDebugApplication32 {
}
[GuidAttribute("4dedc754-04c7-4f10-9e60-16a390fe6e62")]
[InterfaceTypeAttribute("1")]
internal interface MsieJavaScriptEngine.ActiveScript.Debugging.IDebugApplication64 {
}
[GuidAttribute("51973C26-CB0C-11d0-B5C9-00A0244A0E7A")]
[InterfaceTypeAttribute("1")]
internal interface MsieJavaScriptEngine.ActiveScript.Debugging.IDebugDocumentHelper32 {
}
[GuidAttribute("c4c7363c-20fd-47f9-bd82-4855e0150871")]
[InterfaceTypeAttribute("1")]
internal interface MsieJavaScriptEngine.ActiveScript.Debugging.IDebugDocumentHelper64 {
}
[GuidAttribute("51973C2f-CB0C-11d0-B5C9-00A0244A0E7A")]
[InterfaceTypeAttribute("1")]
internal interface MsieJavaScriptEngine.ActiveScript.Debugging.IProcessDebugManager32 {
    public abstract virtual void CreateApplication(IDebugApplication32& debugApplication);
    public abstract virtual void GetDefaultApplication(IDebugApplication32& debugApplication);
    public abstract virtual UInt32 AddApplication(IDebugApplication32 debugApplication, UInt32& cookie);
    public abstract virtual void RemoveApplication(UInt32 cookie);
    public abstract virtual void CreateDebugDocumentHelper(object outerUnknown, IDebugDocumentHelper32& helper);
}
[GuidAttribute("56b9fC1C-63A9-4CC1-AC21-087D69A17FAB")]
[InterfaceTypeAttribute("1")]
internal interface MsieJavaScriptEngine.ActiveScript.Debugging.IProcessDebugManager64 {
    public abstract virtual void CreateApplication(IDebugApplication64& debugApplication);
    public abstract virtual void GetDefaultApplication(IDebugApplication64& debugApplication);
    public abstract virtual UInt32 AddApplication(IDebugApplication64 debugApplication, UInt32& cookie);
    public abstract virtual void RemoveApplication(UInt32 cookie);
    public abstract virtual void CreateDebugDocumentHelper(object outerUnknown, IDebugDocumentHelper64& helper);
}
[GuidAttribute("78A51822-51F4-11D0-8F20-00805F2CD064")]
internal class MsieJavaScriptEngine.ActiveScript.Debugging.ProcessDebugManager : object {
}
internal static class MsieJavaScriptEngine.Constants.DllName : object {
    public static string JScript;
    public static string JScript9;
    public static string Chakra;
}
internal static class MsieJavaScriptEngine.Constants.JsErrorCategory : object {
    public static string Unknown;
    public static string Compilation;
    public static string Runtime;
    public static string Interrupted;
    public static string Usage;
    public static string Engine;
    public static string EngineLoad;
    public static string Fatal;
}
internal static class MsieJavaScriptEngine.Constants.JsErrorType : object {
    public static string Common;
    public static string Eval;
    public static string Internal;
    public static string Range;
    public static string Reference;
    public static string RegExp;
    public static string Syntax;
    public static string Type;
    public static string URI;
}
[ExtensionAttribute]
internal static class MsieJavaScriptEngine.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool ContainsQuotedValue(string source, string value);
    [ExtensionAttribute]
public static string TrimStart(string source, string trimString);
    [ExtensionAttribute]
public static String[] SplitToLines(string source);
    [ExtensionAttribute]
public static bool TryGetChar(string source, int index, Char& result);
}
[ExtensionAttribute]
internal static class MsieJavaScriptEngine.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type source);
}
internal class MsieJavaScriptEngine.Helpers.CallStackItem : object {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    public string FunctionName { get; public set; }
    public string DocumentName { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentName();
    [CompilerGeneratedAttribute]
public void set_DocumentName(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
public void set_ColumnNumber(int value);
}
internal static class MsieJavaScriptEngine.Helpers.CommonRegExps : object {
    public static string JsNamePattern;
    public static string JsFullNamePattern;
    public static string DocumentNamePattern;
}
internal static class MsieJavaScriptEngine.Helpers.JsEngineModeHelpers : object {
    public static string GetModeName(JsEngineMode mode);
}
public static class MsieJavaScriptEngine.Helpers.JsErrorHelpers : object {
    private static Regex _callStackLineRegex;
    private static JsErrorHelpers();
    internal static CallStackItem[] ParseCallStack(string callStack);
    internal static string StringifyCallStackItems(CallStackItem[] callStackItems);
    internal static string GenerateEngineLoadErrorMessage(string description, string engineModeName, bool quoteDescription);
    internal static string GenerateScriptErrorMessage(string type, string description, string documentName, int lineNumber, int columnNumber, string sourceFragment);
    internal static string GenerateScriptErrorMessage(string type, string description, string callStack);
    internal static string GenerateScriptErrorMessage(string type, string description, string documentName, int lineNumber, int columnNumber, string sourceFragment, string callStack);
    public static string GenerateErrorDetails(JsException jsException, bool omitMessage);
    public static string GenerateErrorDetails(JsScriptException jsScriptException, bool omitMessage);
    public static string GenerateErrorDetails(JsRuntimeException jsRuntimeException, bool omitMessage);
    private static void WriteCommonErrorDetails(StringBuilder buffer, JsException jsException, bool omitMessage);
    private static void WriteScriptErrorDetails(StringBuilder buffer, JsScriptException jsScriptException);
    private static void WriteRuntimeErrorDetails(StringBuilder buffer, JsRuntimeException jsRuntimeException);
    public static JsEngineLoadException WrapEngineLoadException(Exception exception, string engineModeName, bool quoteDescription);
    internal static void WriteErrorLocationLine(StringBuilder buffer, string functionName, string documentName, int lineNumber, int columnNumber, string sourceFragment);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(JsException jsException);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(JsScriptException jsScriptException);
    [ObsoleteAttribute("Use a `GenerateErrorDetails` method")]
public static string Format(JsRuntimeException jsRuntimeException);
}
internal static class MsieJavaScriptEngine.Helpers.NumericHelpers : object {
    private static double MAX_INTEGER_IN_DOUBLE;
    public static object CastDoubleValueToCorrectType(double value);
    internal static int UnsignedAsSigned(UInt32 value);
    internal static UInt32 SignedAsUnsigned(int value);
}
internal static class MsieJavaScriptEngine.Helpers.ReflectionHelpers : object {
    private static PropertyInfo[] _disallowedProperties;
    private static MethodInfo[] _disallowedMethods;
    private static ReflectionHelpers();
    public static BindingFlags GetDefaultBindingFlags(bool instance);
    public static bool IsAllowedProperty(PropertyInfo property);
    public static bool IsAllowedMethod(MethodInfo method);
    public static bool IsFullyFledgedMethod(MethodInfo method);
    public static void FixFieldValueType(Object& value, FieldInfo field);
    public static void FixPropertyValueType(Object& value, PropertyInfo property);
    public static void FixArgumentTypes(Object[]& argValues, ParameterInfo[] parameters);
    public static MethodBase GetBestFitMethod(MethodBase[] methods, Object[] argValues);
    private static bool CompareParameterTypes(Object[] argValues, Type[] argTypes, Type[] parameterTypes, UInt16& compatibilityScore);
}
internal static class MsieJavaScriptEngine.Helpers.TextHelpers : object {
    private static Char[] _nextLineBreakChars;
    private static TextHelpers();
    internal static string GetTextFragmentFromLine(string textLine, int columnNumber, int maxFragmentLength);
    internal static void FindNextLineBreak(string sourceText, int startPosition, int length, Int32& lineBreakPosition, Int32& lineBreakLength);
}
public static class MsieJavaScriptEngine.Helpers.ValidationHelpers : object {
    private static Type[] _supportedTypes;
    private static Regex _jsNameRegex;
    private static Regex _documentNameRegex;
    private static ValidationHelpers();
    public static bool IsSupportedType(Type type);
    public static bool IsPrimitiveType(Type type);
    public static bool CheckNameFormat(string name);
    public static bool CheckDocumentNameFormat(string name);
}
internal interface MsieJavaScriptEngine.IInnerJsEngine {
    public string Mode { get; }
    public bool SupportsScriptPrecompilation { get; }
    public abstract virtual string get_Mode();
    public abstract virtual bool get_SupportsScriptPrecompilation();
    public abstract virtual PrecompiledScript Precompile(string code, string documentName);
    public abstract virtual object Evaluate(string expression, string documentName);
    public abstract virtual void Execute(string code, string documentName);
    public abstract virtual void Execute(PrecompiledScript precompiledScript);
    public abstract virtual object CallFunction(string functionName, Object[] args);
    public abstract virtual bool HasVariable(string variableName);
    public abstract virtual object GetVariableValue(string variableName);
    public abstract virtual void SetVariableValue(string variableName, object value);
    public abstract virtual void RemoveVariable(string variableName);
    public abstract virtual void EmbedHostObject(string itemName, object value);
    public abstract virtual void EmbedHostType(string itemName, Type type);
    public abstract virtual void Interrupt();
    public abstract virtual void CollectGarbage();
}
internal abstract class MsieJavaScriptEngine.InnerJsEngineBase : object {
    protected JsEngineSettings _settings;
    protected string _engineModeName;
    protected StatedFlag _disposedFlag;
    public string Mode { get; }
    public bool SupportsScriptPrecompilation { get; }
    protected InnerJsEngineBase(JsEngineSettings settings);
    public sealed virtual string get_Mode();
    public abstract virtual bool get_SupportsScriptPrecompilation();
    public abstract virtual PrecompiledScript Precompile(string code, string documentName);
    public abstract virtual object Evaluate(string expression, string documentName);
    public abstract virtual void Execute(string code, string documentName);
    public abstract virtual void Execute(PrecompiledScript precompiledScript);
    public abstract virtual object CallFunction(string functionName, Object[] args);
    public abstract virtual bool HasVariable(string variableName);
    public abstract virtual object GetVariableValue(string variableName);
    public abstract virtual void SetVariableValue(string variableName, object value);
    public abstract virtual void RemoveVariable(string variableName);
    public abstract virtual void EmbedHostObject(string itemName, object value);
    public abstract virtual void EmbedHostType(string itemName, Type type);
    public abstract virtual void Interrupt();
    public abstract virtual void CollectGarbage();
    public abstract virtual void Dispose();
}
public class MsieJavaScriptEngine.JsCompilationException : JsScriptException {
    public JsCompilationException(string message);
    public JsCompilationException(string message, Exception innerException);
    public JsCompilationException(string message, string engineMode);
    public JsCompilationException(string message, string engineMode, Exception innerException);
}
public class MsieJavaScriptEngine.JsEngineException : JsException {
    public JsEngineException(string message);
    public JsEngineException(string message, Exception innerException);
    public JsEngineException(string message, string engineMode);
    public JsEngineException(string message, string engineMode, Exception innerException);
}
public class MsieJavaScriptEngine.JsEngineLoadException : JsEngineException {
    public JsEngineLoadException(string message);
    public JsEngineLoadException(string message, Exception innerException);
    public JsEngineLoadException(string message, string engineMode);
    public JsEngineLoadException(string message, string engineMode, Exception innerException);
}
public enum MsieJavaScriptEngine.JsEngineMode : Enum {
    public int value__;
    public static JsEngineMode Auto;
    public static JsEngineMode Classic;
    public static JsEngineMode ChakraActiveScript;
    public static JsEngineMode ChakraIeJsRt;
    public static JsEngineMode ChakraEdgeJsRt;
}
public class MsieJavaScriptEngine.JsEngineSettings : object {
    [CompilerGeneratedAttribute]
private bool <AllowReflection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private JsEngineMode <EngineMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEcmaScript5Polyfill>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseJson2Library>k__BackingField;
    public bool AllowReflection { get; public set; }
    public bool EnableDebugging { get; public set; }
    public JsEngineMode EngineMode { get; public set; }
    public bool UseEcmaScript5Polyfill { get; public set; }
    public bool UseJson2Library { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowReflection();
    [CompilerGeneratedAttribute]
public void set_AllowReflection(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDebugging();
    [CompilerGeneratedAttribute]
public void set_EnableDebugging(bool value);
    [CompilerGeneratedAttribute]
public JsEngineMode get_EngineMode();
    [CompilerGeneratedAttribute]
public void set_EngineMode(JsEngineMode value);
    [CompilerGeneratedAttribute]
public bool get_UseEcmaScript5Polyfill();
    [CompilerGeneratedAttribute]
public void set_UseEcmaScript5Polyfill(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseJson2Library();
    [CompilerGeneratedAttribute]
public void set_UseJson2Library(bool value);
    public JsEngineSettings Clone();
}
public class MsieJavaScriptEngine.JsException : Exception {
    private string _engineMode;
    private string _category;
    private string _description;
    public string EngineMode { get; }
    public string Category { get; public set; }
    public string Description { get; public set; }
    public JsException(string message);
    public JsException(string message, Exception innerException);
    public JsException(string message, string engineMode);
    public JsException(string message, string engineMode, Exception innerException);
    public string get_EngineMode();
    public string get_Category();
    public void set_Category(string value);
    public string get_Description();
    public void set_Description(string value);
    public virtual string ToString();
}
public class MsieJavaScriptEngine.JsFatalException : JsException {
    public JsFatalException(string message);
    public JsFatalException(string message, Exception innerException);
    public JsFatalException(string message, string engineMode);
    public JsFatalException(string message, string engineMode, Exception innerException);
}
public class MsieJavaScriptEngine.JsInterruptedException : JsRuntimeException {
    public JsInterruptedException(string message);
    public JsInterruptedException(string message, Exception innerException);
    public JsInterruptedException(string message, string engineMode);
    public JsInterruptedException(string message, string engineMode, Exception innerException);
}
internal abstract class MsieJavaScriptEngine.JsRt.ChakraJsRtJsEngineBase : InnerJsEngineBase {
    protected JsSourceContext _jsSourceContext;
    protected ScriptDispatcher _dispatcher;
    protected ChakraJsRtJsEngineBase(JsEngineSettings settings);
}
internal class MsieJavaScriptEngine.JsRt.Edge.ChakraEdgeJsRtJsEngine : ChakraJsRtJsEngineBase {
    private EdgeJsRuntime _jsRuntime;
    private EdgeJsContext _jsContext;
    private EdgeTypeMapper _typeMapper;
    private static Nullable`1<bool> _isSupported;
    private static object _supportSynchronizer;
    public bool SupportsScriptPrecompilation { get; }
    public ChakraEdgeJsRtJsEngine(JsEngineSettings settings);
    private static ChakraEdgeJsRtJsEngine();
    protected virtual override void Finalize();
    private static EdgeJsRuntime CreateJsRuntime();
    public static bool IsSupported();
    private static void AddReferenceToValue(EdgeJsValue value);
    private static void RemoveReferenceToValue(EdgeJsValue value);
    private static bool CanHaveReferences(EdgeJsValue value);
    private JsException WrapJsException(JsException originalException, string defaultDocumentName);
    private JsEngineLoadException WrapDllNotFoundException(DllNotFoundException originalDllNotFoundException);
    public virtual bool get_SupportsScriptPrecompilation();
    public virtual PrecompiledScript Precompile(string code, string documentName);
    public virtual object Evaluate(string expression, string documentName);
    public virtual void Execute(string code, string documentName);
    public virtual void Execute(PrecompiledScript precompiledScript);
    public virtual object CallFunction(string functionName, Object[] args);
    public virtual bool HasVariable(string variableName);
    public virtual object GetVariableValue(string variableName);
    public virtual void SetVariableValue(string variableName, object value);
    public virtual void RemoveVariable(string variableName);
    public virtual void EmbedHostObject(string itemName, object value);
    public virtual void EmbedHostType(string itemName, Type type);
    public virtual void Interrupt();
    public virtual void CollectGarbage();
    public virtual void Dispose();
    private void Dispose(bool disposing);
    private void DisposeUnmanagedResources();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeJsContext : ValueType {
    private IntPtr _reference;
    public static EdgeJsContext Invalid { get; }
    public static EdgeJsContext Current { get; public set; }
    public static bool HasException { get; }
    public EdgeJsRuntime Runtime { get; }
    public bool IsValid { get; }
    internal EdgeJsContext(IntPtr reference);
    public static EdgeJsContext get_Invalid();
    public static EdgeJsContext get_Current();
    public static void set_Current(EdgeJsContext value);
    public static bool get_HasException();
    public EdgeJsRuntime get_Runtime();
    public bool get_IsValid();
    public static UInt32 Idle();
    public static EdgeJsValue ParseScript(string script, JsSourceContext sourceContext, string sourceName);
    public static EdgeJsValue ParseSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceName);
    public static EdgeJsValue RunScript(string script, JsSourceContext sourceContext, string sourceName);
    public static EdgeJsValue RunSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceName);
    public static Byte[] SerializeScript(string script);
    public static EdgeJsValue GetAndClearException();
    public static void SetException(EdgeJsValue exception);
    public static void StartDebugging();
    public UInt32 AddRef();
    public UInt32 Release();
}
internal static class MsieJavaScriptEngine.JsRt.Edge.EdgeJsErrorHelpers : object {
    public static void ThrowIfError(JsErrorCode errorCode);
    public static EdgeJsValue CreateError(string message);
    public static EdgeJsValue CreateRangeError(string message);
    public static EdgeJsValue CreateReferenceError(string message);
    public static EdgeJsValue CreateSyntaxError(string message);
    public static EdgeJsValue CreateTypeError(string message);
    public static EdgeJsValue CreateUriError(string message);
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeJsNativeFunction : MulticastDelegate {
    public EdgeJsNativeFunction(object object, IntPtr method);
    public virtual EdgeJsValue Invoke(EdgeJsValue callee, bool isConstructCall, EdgeJsValue[] arguments, ushort argumentCount, IntPtr callbackData);
    public virtual IAsyncResult BeginInvoke(EdgeJsValue callee, bool isConstructCall, EdgeJsValue[] arguments, ushort argumentCount, IntPtr callbackData, AsyncCallback callback, object object);
    public virtual EdgeJsValue EndInvoke(IAsyncResult result);
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeJsPropertyId : ValueType {
    private IntPtr _id;
    public static EdgeJsPropertyId Invalid { get; }
    public string Name { get; }
    internal EdgeJsPropertyId(IntPtr id);
    public static EdgeJsPropertyId get_Invalid();
    public string get_Name();
    public static EdgeJsPropertyId FromString(string name);
    public static bool op_Equality(EdgeJsPropertyId left, EdgeJsPropertyId right);
    public static bool op_Inequality(EdgeJsPropertyId left, EdgeJsPropertyId right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(EdgeJsPropertyId other);
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeJsRuntime : ValueType {
    private IntPtr _handle;
    public bool IsValid { get; }
    public UIntPtr MemoryUsage { get; }
    public UIntPtr MemoryLimit { get; public set; }
    public bool Disabled { get; public set; }
    public bool get_IsValid();
    public UIntPtr get_MemoryUsage();
    public UIntPtr get_MemoryLimit();
    public void set_MemoryLimit(UIntPtr value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    public static EdgeJsRuntime Create();
    public static EdgeJsRuntime Create(JsRuntimeAttributes attributes);
    public static EdgeJsRuntime Create(JsRuntimeAttributes attributes, JsThreadServiceCallback threadServiceCallback);
    public void CollectGarbage();
    public void SetMemoryAllocationCallback(IntPtr callbackState, JsMemoryAllocationCallback allocationCallback);
    public void SetBeforeCollectCallback(IntPtr callbackState, JsBeforeCollectCallback beforeCollectCallback);
    public EdgeJsContext CreateContext();
    public sealed virtual void Dispose();
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeJsScope : ValueType {
    private EdgeJsContext _previousContext;
    private bool _disposed;
    public EdgeJsScope(EdgeJsContext context);
    public sealed virtual void Dispose();
}
public class MsieJavaScriptEngine.JsRt.Edge.EdgeJsScriptException : JsException {
    private EdgeJsValue _error;
    internal EdgeJsValue Error { get; }
    public EdgeJsScriptException(JsErrorCode errorCode);
    public EdgeJsScriptException(JsErrorCode errorCode, string message);
    internal EdgeJsScriptException(JsErrorCode errorCode, EdgeJsValue error, string message);
    internal EdgeJsValue get_Error();
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeJsValue : ValueType {
    private IntPtr _reference;
    public static EdgeJsValue Invalid { get; }
    public static EdgeJsValue Undefined { get; }
    public static EdgeJsValue Null { get; }
    public static EdgeJsValue True { get; }
    public static EdgeJsValue False { get; }
    public static EdgeJsValue GlobalObject { get; }
    public bool IsValid { get; }
    public JsValueType ValueType { get; }
    public int StringLength { get; }
    public EdgeJsValue Prototype { get; public set; }
    public bool IsExtensionAllowed { get; }
    public bool HasExternalData { get; }
    public IntPtr ExternalData { get; public set; }
    private EdgeJsValue(IntPtr reference);
    public static EdgeJsValue get_Invalid();
    public static EdgeJsValue get_Undefined();
    public static EdgeJsValue get_Null();
    public static EdgeJsValue get_True();
    public static EdgeJsValue get_False();
    public static EdgeJsValue get_GlobalObject();
    public bool get_IsValid();
    public JsValueType get_ValueType();
    public int get_StringLength();
    public EdgeJsValue get_Prototype();
    public void set_Prototype(EdgeJsValue value);
    public bool get_IsExtensionAllowed();
    public bool get_HasExternalData();
    public IntPtr get_ExternalData();
    public void set_ExternalData(IntPtr value);
    public static EdgeJsValue FromBoolean(bool value);
    public static EdgeJsValue FromDouble(double value);
    public static EdgeJsValue FromInt32(int value);
    public static EdgeJsValue FromString(string value);
    public static EdgeJsValue CreateObject();
    public static EdgeJsValue CreateExternalObject(IntPtr data, JsFinalizeCallback finalizer);
    public static EdgeJsValue CreateFunction(EdgeJsNativeFunction function);
    public static EdgeJsValue CreateFunction(EdgeJsNativeFunction function, IntPtr callbackData);
    public static EdgeJsValue CreateArray(UInt32 length);
    public static EdgeJsValue CreateError(EdgeJsValue message);
    public static EdgeJsValue CreateRangeError(EdgeJsValue message);
    public static EdgeJsValue CreateReferenceError(EdgeJsValue message);
    public static EdgeJsValue CreateSyntaxError(EdgeJsValue message);
    public static EdgeJsValue CreateTypeError(EdgeJsValue message);
    public static EdgeJsValue CreateUriError(EdgeJsValue message);
    public UInt32 AddRef();
    public UInt32 Release();
    public bool ToBoolean();
    public double ToDouble();
    public int ToInt32();
    public string ToString();
    public EdgeJsValue ConvertToBoolean();
    public EdgeJsValue ConvertToNumber();
    public EdgeJsValue ConvertToString();
    public EdgeJsValue ConvertToObject();
    public void PreventExtension();
    public EdgeJsValue GetOwnPropertyDescriptor(EdgeJsPropertyId propertyId);
    public EdgeJsValue GetOwnPropertyNames();
    public bool HasProperty(EdgeJsPropertyId propertyId);
    public EdgeJsValue GetProperty(EdgeJsPropertyId id);
    public void SetProperty(EdgeJsPropertyId id, EdgeJsValue value, bool useStrictRules);
    public EdgeJsValue DeleteProperty(EdgeJsPropertyId propertyId, bool useStrictRules);
    public bool DefineProperty(EdgeJsPropertyId propertyId, EdgeJsValue propertyDescriptor);
    public bool HasIndexedProperty(EdgeJsValue index);
    public EdgeJsValue GetIndexedProperty(EdgeJsValue index);
    public void SetIndexedProperty(EdgeJsValue index, EdgeJsValue value);
    public void DeleteIndexedProperty(EdgeJsValue index);
    public bool Equals(EdgeJsValue other);
    public bool StrictEquals(EdgeJsValue other);
    public EdgeJsValue CallFunction(EdgeJsValue[] arguments);
    public EdgeJsValue ConstructObject(EdgeJsValue[] arguments);
}
[ExtensionAttribute]
internal static class MsieJavaScriptEngine.JsRt.Edge.EdgeJsValueExtensions : object {
    [ExtensionAttribute]
public static EdgeJsValue GetOwnPropertyDescriptor(EdgeJsValue source, string propertyName);
    [ExtensionAttribute]
public static bool HasProperty(EdgeJsValue source, string propertyName);
    [ExtensionAttribute]
public static EdgeJsValue GetProperty(EdgeJsValue source, string name);
    [ExtensionAttribute]
public static void SetProperty(EdgeJsValue source, string name, EdgeJsValue value, bool useStrictRules);
    [ExtensionAttribute]
public static EdgeJsValue DeleteProperty(EdgeJsValue source, string propertyName, bool useStrictRules);
    [ExtensionAttribute]
public static bool DefineProperty(EdgeJsValue source, string propertyName, EdgeJsValue propertyDescriptor);
}
internal static class MsieJavaScriptEngine.JsRt.Edge.EdgeNativeMethods : object {
    internal static JsErrorCode JsParseScript(string script, JsSourceContext sourceContext, string sourceUrl, EdgeJsValue& result);
    internal static JsErrorCode JsRunScript(string script, JsSourceContext sourceContext, string sourceUrl, EdgeJsValue& result);
    internal static JsErrorCode JsSerializeScript(string script, Byte[] buffer, UInt32& bufferSize);
    internal static JsErrorCode JsParseSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceUrl, EdgeJsValue& result);
    internal static JsErrorCode JsRunSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceUrl, EdgeJsValue& result);
    internal static JsErrorCode JsGetPropertyIdFromName(string name, EdgeJsPropertyId& propertyId);
    internal static JsErrorCode JsGetPropertyNameFromId(EdgeJsPropertyId propertyId, IntPtr& buffer);
    internal static JsErrorCode JsPointerToString(string value, UIntPtr stringLength, EdgeJsValue& stringValue);
    internal static JsErrorCode JsStringToPointer(EdgeJsValue value, IntPtr& stringValue, UIntPtr& stringLength);
    internal static JsErrorCode JsCreateRuntime(JsRuntimeAttributes attributes, JsThreadServiceCallback threadService, EdgeJsRuntime& runtime);
    internal static JsErrorCode JsCollectGarbage(EdgeJsRuntime handle);
    internal static JsErrorCode JsDisposeRuntime(EdgeJsRuntime handle);
    internal static JsErrorCode JsGetRuntimeMemoryUsage(EdgeJsRuntime runtime, UIntPtr& memoryUsage);
    internal static JsErrorCode JsGetRuntimeMemoryLimit(EdgeJsRuntime runtime, UIntPtr& memoryLimit);
    internal static JsErrorCode JsSetRuntimeMemoryLimit(EdgeJsRuntime runtime, UIntPtr memoryLimit);
    internal static JsErrorCode JsSetRuntimeMemoryAllocationCallback(EdgeJsRuntime runtime, IntPtr callbackState, JsMemoryAllocationCallback allocationCallback);
    internal static JsErrorCode JsSetRuntimeBeforeCollectCallback(EdgeJsRuntime runtime, IntPtr callbackState, JsBeforeCollectCallback beforeCollectCallback);
    internal static JsErrorCode JsContextAddRef(EdgeJsContext reference, UInt32& count);
    internal static JsErrorCode JsAddRef(EdgeJsValue reference, UInt32& count);
    internal static JsErrorCode JsContextRelease(EdgeJsContext reference, UInt32& count);
    internal static JsErrorCode JsRelease(EdgeJsValue reference, UInt32& count);
    internal static JsErrorCode JsCreateContext(EdgeJsRuntime runtime, EdgeJsContext& newContext);
    internal static JsErrorCode JsGetCurrentContext(EdgeJsContext& currentContext);
    internal static JsErrorCode JsSetCurrentContext(EdgeJsContext context);
    internal static JsErrorCode JsGetRuntime(EdgeJsContext context, EdgeJsRuntime& runtime);
    internal static JsErrorCode JsStartDebugging();
    internal static JsErrorCode JsIdle(UInt32& nextIdleTick);
    internal static JsErrorCode JsGetUndefinedValue(EdgeJsValue& undefinedValue);
    internal static JsErrorCode JsGetNullValue(EdgeJsValue& nullValue);
    internal static JsErrorCode JsGetTrueValue(EdgeJsValue& trueValue);
    internal static JsErrorCode JsGetFalseValue(EdgeJsValue& falseValue);
    internal static JsErrorCode JsBoolToBoolean(bool value, EdgeJsValue& booleanValue);
    internal static JsErrorCode JsBooleanToBool(EdgeJsValue booleanValue, Boolean& boolValue);
    internal static JsErrorCode JsConvertValueToBoolean(EdgeJsValue value, EdgeJsValue& booleanValue);
    internal static JsErrorCode JsGetValueType(EdgeJsValue value, JsValueType& type);
    internal static JsErrorCode JsDoubleToNumber(double doubleValue, EdgeJsValue& value);
    internal static JsErrorCode JsIntToNumber(int intValue, EdgeJsValue& value);
    internal static JsErrorCode JsNumberToDouble(EdgeJsValue value, Double& doubleValue);
    internal static JsErrorCode JsNumberToInt(EdgeJsValue value, Int32& intValue);
    internal static JsErrorCode JsConvertValueToNumber(EdgeJsValue value, EdgeJsValue& numberValue);
    internal static JsErrorCode JsGetStringLength(EdgeJsValue sringValue, Int32& length);
    internal static JsErrorCode JsConvertValueToString(EdgeJsValue value, EdgeJsValue& stringValue);
    internal static JsErrorCode JsGetGlobalObject(EdgeJsValue& globalObject);
    internal static JsErrorCode JsCreateObject(EdgeJsValue& obj);
    internal static JsErrorCode JsCreateExternalObject(IntPtr data, JsFinalizeCallback finalizeCallback, EdgeJsValue& obj);
    internal static JsErrorCode JsConvertValueToObject(EdgeJsValue value, EdgeJsValue& obj);
    internal static JsErrorCode JsGetPrototype(EdgeJsValue obj, EdgeJsValue& prototypeObject);
    internal static JsErrorCode JsSetPrototype(EdgeJsValue obj, EdgeJsValue prototypeObject);
    internal static JsErrorCode JsGetExtensionAllowed(EdgeJsValue obj, Boolean& value);
    internal static JsErrorCode JsPreventExtension(EdgeJsValue obj);
    internal static JsErrorCode JsGetProperty(EdgeJsValue obj, EdgeJsPropertyId propertyId, EdgeJsValue& value);
    internal static JsErrorCode JsGetOwnPropertyDescriptor(EdgeJsValue obj, EdgeJsPropertyId propertyId, EdgeJsValue& propertyDescriptor);
    internal static JsErrorCode JsGetOwnPropertyNames(EdgeJsValue obj, EdgeJsValue& propertyNames);
    internal static JsErrorCode JsSetProperty(EdgeJsValue obj, EdgeJsPropertyId propertyId, EdgeJsValue value, bool useStrictRules);
    internal static JsErrorCode JsHasProperty(EdgeJsValue obj, EdgeJsPropertyId propertyId, Boolean& hasProperty);
    internal static JsErrorCode JsDeleteProperty(EdgeJsValue obj, EdgeJsPropertyId propertyId, bool useStrictRules, EdgeJsValue& result);
    internal static JsErrorCode JsDefineProperty(EdgeJsValue obj, EdgeJsPropertyId propertyId, EdgeJsValue propertyDescriptor, Boolean& result);
    internal static JsErrorCode JsHasIndexedProperty(EdgeJsValue obj, EdgeJsValue index, Boolean& result);
    internal static JsErrorCode JsGetIndexedProperty(EdgeJsValue obj, EdgeJsValue index, EdgeJsValue& result);
    internal static JsErrorCode JsSetIndexedProperty(EdgeJsValue obj, EdgeJsValue index, EdgeJsValue value);
    internal static JsErrorCode JsDeleteIndexedProperty(EdgeJsValue obj, EdgeJsValue index);
    internal static JsErrorCode JsEquals(EdgeJsValue obj1, EdgeJsValue obj2, Boolean& result);
    internal static JsErrorCode JsStrictEquals(EdgeJsValue obj1, EdgeJsValue obj2, Boolean& result);
    internal static JsErrorCode JsHasExternalData(EdgeJsValue obj, Boolean& value);
    internal static JsErrorCode JsGetExternalData(EdgeJsValue obj, IntPtr& externalData);
    internal static JsErrorCode JsSetExternalData(EdgeJsValue obj, IntPtr externalData);
    internal static JsErrorCode JsCreateArray(UInt32 length, EdgeJsValue& result);
    internal static JsErrorCode JsCallFunction(EdgeJsValue function, EdgeJsValue[] arguments, ushort argumentCount, EdgeJsValue& result);
    internal static JsErrorCode JsConstructObject(EdgeJsValue function, EdgeJsValue[] arguments, ushort argumentCount, EdgeJsValue& result);
    internal static JsErrorCode JsCreateFunction(EdgeJsNativeFunction nativeFunction, IntPtr externalData, EdgeJsValue& function);
    internal static JsErrorCode JsCreateError(EdgeJsValue message, EdgeJsValue& error);
    internal static JsErrorCode JsCreateRangeError(EdgeJsValue message, EdgeJsValue& error);
    internal static JsErrorCode JsCreateReferenceError(EdgeJsValue message, EdgeJsValue& error);
    internal static JsErrorCode JsCreateSyntaxError(EdgeJsValue message, EdgeJsValue& error);
    internal static JsErrorCode JsCreateTypeError(EdgeJsValue message, EdgeJsValue& error);
    internal static JsErrorCode JsCreateURIError(EdgeJsValue message, EdgeJsValue& error);
    internal static JsErrorCode JsHasException(Boolean& hasException);
    internal static JsErrorCode JsGetAndClearException(EdgeJsValue& exception);
    internal static JsErrorCode JsSetException(EdgeJsValue exception);
    internal static JsErrorCode JsDisableRuntimeExecution(EdgeJsRuntime runtime);
    internal static JsErrorCode JsEnableRuntimeExecution(EdgeJsRuntime runtime);
    internal static JsErrorCode JsIsRuntimeExecutionDisabled(EdgeJsRuntime runtime, Boolean& isDisabled);
}
internal class MsieJavaScriptEngine.JsRt.Edge.EdgeTypeMapper : TypeMapper`2<EdgeJsValue, EdgeJsNativeFunction> {
    public EdgeTypeMapper(bool allowReflection);
    public virtual EdgeJsValue MapToScriptType(object value);
    public virtual object MapToHostType(EdgeJsValue value);
    protected virtual EmbeddedObject`2<EdgeJsValue, EdgeJsNativeFunction> CreateEmbeddedObjectOrFunction(object obj);
    private EmbeddedObject`2<EdgeJsValue, EdgeJsNativeFunction> CreateEmbeddedObject(object obj);
    private EmbeddedObject`2<EdgeJsValue, EdgeJsNativeFunction> CreateEmbeddedFunction(Delegate del);
    protected virtual EmbeddedType`2<EdgeJsValue, EdgeJsNativeFunction> CreateEmbeddedType(Type type);
    private void ProjectFields(EmbeddedItem`2<EdgeJsValue, EdgeJsNativeFunction> externalItem);
    private void ProjectProperties(EmbeddedItem`2<EdgeJsValue, EdgeJsNativeFunction> externalItem);
    private void ProjectMethods(EmbeddedItem`2<EdgeJsValue, EdgeJsNativeFunction> externalItem);
    private static void FreezeObject(EdgeJsValue objValue);
    private static void SetNonEnumerableProperty(EdgeJsValue objValue, string name, EdgeJsValue value);
    private static void CreateAndSetError(string message);
    private static void CreateAndSetReferenceError(string message);
    private static void CreateAndSetTypeError(string message);
    private static EdgeJsValue CreateErrorFromWrapperException(JsException exception);
}
internal abstract class MsieJavaScriptEngine.JsRt.Embedding.EmbeddedItem`2 : object {
    private Type _hostType;
    private object _hostObject;
    private TValue _scriptValue;
    private IList`1<TFunction> _nativeFunctions;
    private InterlockedStatedFlag _disposedFlag;
    public Type HostType { get; }
    public object HostObject { get; }
    public TValue ScriptValue { get; }
    public IList`1<TFunction> NativeFunctions { get; }
    public bool IsInstance { get; }
    protected EmbeddedItem`2(Type hostType, object hostObject, TValue scriptValue, IList`1<TFunction> nativeFunctions);
    public Type get_HostType();
    public object get_HostObject();
    public TValue get_ScriptValue();
    public IList`1<TFunction> get_NativeFunctions();
    public abstract virtual bool get_IsInstance();
    public sealed virtual void Dispose();
}
internal class MsieJavaScriptEngine.JsRt.Embedding.EmbeddedObject`2 : EmbeddedItem`2<TValue, TFunction> {
    public bool IsInstance { get; }
    public EmbeddedObject`2(object hostObject, TValue scriptValue);
    public EmbeddedObject`2(object hostObject, TValue scriptValue, IList`1<TFunction> nativeFunctions);
    public virtual bool get_IsInstance();
}
internal class MsieJavaScriptEngine.JsRt.Embedding.EmbeddedObjectKey : ValueType {
    public string HostTypeName;
    public object HostObject;
    public EmbeddedObjectKey(object hostObject);
    private static int CombineHashCodes(int h1, int h2);
    public sealed virtual bool Equals(EmbeddedObjectKey other);
    private sealed virtual override bool System.Collections.IStructuralEquatable.Equals(object other, IEqualityComparer comparer);
    private sealed virtual override int System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer comparer);
    private sealed virtual override int System.IComparable.CompareTo(object other);
    public sealed virtual int CompareTo(EmbeddedObjectKey other);
    private sealed virtual override int System.Collections.IStructuralComparable.CompareTo(object other, IComparer comparer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class MsieJavaScriptEngine.JsRt.Embedding.EmbeddedType`2 : EmbeddedItem`2<TValue, TFunction> {
    public bool IsInstance { get; }
    public EmbeddedType`2(Type hostType, TValue scriptValue);
    public EmbeddedType`2(Type hostType, TValue scriptValue, IList`1<TFunction> nativeFunctions);
    public virtual bool get_IsInstance();
}
internal class MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine : ChakraJsRtJsEngineBase {
    private static string LOWER_IE_VERSION;
    private IeJsRuntime _jsRuntime;
    private IeJsContext _jsContext;
    private IeTypeMapper _typeMapper;
    private static Nullable`1<bool> _isSupported;
    private static object _supportSynchronizer;
    public bool SupportsScriptPrecompilation { get; }
    public ChakraIeJsRtJsEngine(JsEngineSettings settings);
    private static ChakraIeJsRtJsEngine();
    protected virtual override void Finalize();
    private static IeJsRuntime CreateJsRuntime();
    public static bool IsSupported();
    private static void AddReferenceToValue(IeJsValue value);
    private static void RemoveReferenceToValue(IeJsValue value);
    private static bool CanHaveReferences(IeJsValue value);
    private JsException WrapJsException(JsException originalException, string defaultDocumentName);
    private static void FixCallStackItems(CallStackItem[] callStackItems);
    private JsEngineLoadException WrapTypeLoadException(TypeLoadException originalTypeLoadException);
    public virtual bool get_SupportsScriptPrecompilation();
    public virtual PrecompiledScript Precompile(string code, string documentName);
    public virtual object Evaluate(string expression, string documentName);
    public virtual void Execute(string code, string documentName);
    public virtual void Execute(PrecompiledScript precompiledScript);
    public virtual object CallFunction(string functionName, Object[] args);
    public virtual bool HasVariable(string variableName);
    public virtual object GetVariableValue(string variableName);
    public virtual void SetVariableValue(string variableName, object value);
    public virtual void RemoveVariable(string variableName);
    public virtual void EmbedHostObject(string itemName, object value);
    public virtual void EmbedHostType(string itemName, Type type);
    public virtual void Interrupt();
    public virtual void CollectGarbage();
    public virtual void Dispose();
    private void Dispose(bool disposing);
    private void DisposeUnmanagedResources();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0();
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeJsContext : ValueType {
    private IntPtr _reference;
    public static IeJsContext Invalid { get; }
    public static IeJsContext Current { get; public set; }
    public static bool HasException { get; }
    public IeJsRuntime Runtime { get; }
    public bool IsValid { get; }
    internal IeJsContext(IntPtr reference);
    public static IeJsContext get_Invalid();
    public static IeJsContext get_Current();
    public static void set_Current(IeJsContext value);
    public static bool get_HasException();
    public IeJsRuntime get_Runtime();
    public bool get_IsValid();
    public static UInt32 Idle();
    public static IeJsValue ParseScript(string script, JsSourceContext sourceContext, string sourceName);
    public static IeJsValue ParseSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceName);
    public static IeJsValue RunScript(string script, JsSourceContext sourceContext, string sourceName);
    public static IeJsValue RunSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceName);
    public static Byte[] SerializeScript(string script);
    public static IeJsValue GetAndClearException();
    public static void SetException(IeJsValue exception);
    public static void StartDebugging(IDebugApplication64 debugApplication);
    public static void StartDebugging(IDebugApplication32 debugApplication);
    public static void StartDebugging();
    public UInt32 AddRef();
    public UInt32 Release();
}
internal static class MsieJavaScriptEngine.JsRt.Ie.IeJsErrorHelpers : object {
    public static void ThrowIfError(JsErrorCode errorCode);
    public static IeJsValue CreateError(string message);
    public static IeJsValue CreateRangeError(string message);
    public static IeJsValue CreateReferenceError(string message);
    public static IeJsValue CreateSyntaxError(string message);
    public static IeJsValue CreateTypeError(string message);
    public static IeJsValue CreateUriError(string message);
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeJsNativeFunction : MulticastDelegate {
    public IeJsNativeFunction(object object, IntPtr method);
    public virtual IeJsValue Invoke(IeJsValue callee, bool isConstructCall, IeJsValue[] arguments, ushort argumentCount, IntPtr callbackData);
    public virtual IAsyncResult BeginInvoke(IeJsValue callee, bool isConstructCall, IeJsValue[] arguments, ushort argumentCount, IntPtr callbackData, AsyncCallback callback, object object);
    public virtual IeJsValue EndInvoke(IAsyncResult result);
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeJsPropertyId : ValueType {
    private IntPtr _id;
    public static IeJsPropertyId Invalid { get; }
    public string Name { get; }
    internal IeJsPropertyId(IntPtr id);
    public static IeJsPropertyId get_Invalid();
    public string get_Name();
    public static IeJsPropertyId FromString(string name);
    public static bool op_Equality(IeJsPropertyId left, IeJsPropertyId right);
    public static bool op_Inequality(IeJsPropertyId left, IeJsPropertyId right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(IeJsPropertyId other);
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeJsRuntime : ValueType {
    private IntPtr _handle;
    public bool IsValid { get; }
    public UIntPtr MemoryUsage { get; }
    public UIntPtr MemoryLimit { get; public set; }
    public bool Disabled { get; public set; }
    public bool get_IsValid();
    public UIntPtr get_MemoryUsage();
    public UIntPtr get_MemoryLimit();
    public void set_MemoryLimit(UIntPtr value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    public static IeJsRuntime Create();
    public static IeJsRuntime Create(JsRuntimeAttributes attributes, JsRuntimeVersion version);
    public static IeJsRuntime Create(JsRuntimeAttributes attributes, JsRuntimeVersion version, JsThreadServiceCallback threadServiceCallback);
    public void CollectGarbage();
    public void SetMemoryAllocationCallback(IntPtr callbackState, JsMemoryAllocationCallback allocationCallback);
    public void SetBeforeCollectCallback(IntPtr callbackState, JsBeforeCollectCallback beforeCollectCallback);
    public IeJsContext CreateContext(IDebugApplication64 debugApplication);
    public IeJsContext CreateContext(IDebugApplication32 debugApplication);
    public IeJsContext CreateContext();
    public sealed virtual void Dispose();
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeJsScope : ValueType {
    private IeJsContext _previousContext;
    private bool _disposed;
    public IeJsScope(IeJsContext context);
    public sealed virtual void Dispose();
}
public class MsieJavaScriptEngine.JsRt.Ie.IeJsScriptException : JsException {
    private IeJsValue _error;
    internal IeJsValue Error { get; }
    public IeJsScriptException(JsErrorCode errorCode);
    public IeJsScriptException(JsErrorCode errorCode, string message);
    internal IeJsScriptException(JsErrorCode errorCode, IeJsValue error, string message);
    internal IeJsValue get_Error();
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeJsValue : ValueType {
    private IntPtr _reference;
    public static IeJsValue Invalid { get; }
    public static IeJsValue Undefined { get; }
    public static IeJsValue Null { get; }
    public static IeJsValue True { get; }
    public static IeJsValue False { get; }
    public static IeJsValue GlobalObject { get; }
    public bool IsValid { get; }
    public JsValueType ValueType { get; }
    public int StringLength { get; }
    public IeJsValue Prototype { get; public set; }
    public bool IsExtensionAllowed { get; }
    public bool HasExternalData { get; }
    public IntPtr ExternalData { get; public set; }
    private IeJsValue(IntPtr reference);
    public static IeJsValue get_Invalid();
    public static IeJsValue get_Undefined();
    public static IeJsValue get_Null();
    public static IeJsValue get_True();
    public static IeJsValue get_False();
    public static IeJsValue get_GlobalObject();
    public bool get_IsValid();
    public JsValueType get_ValueType();
    public int get_StringLength();
    public IeJsValue get_Prototype();
    public void set_Prototype(IeJsValue value);
    public bool get_IsExtensionAllowed();
    public bool get_HasExternalData();
    public IntPtr get_ExternalData();
    public void set_ExternalData(IntPtr value);
    public static IeJsValue FromBoolean(bool value);
    public static IeJsValue FromDouble(double value);
    public static IeJsValue FromInt32(int value);
    public static IeJsValue FromString(string value);
    public static IeJsValue CreateObject();
    public static IeJsValue CreateExternalObject(IntPtr data, JsFinalizeCallback finalizer);
    public static IeJsValue CreateFunction(IeJsNativeFunction function);
    public static IeJsValue CreateFunction(IeJsNativeFunction function, IntPtr callbackData);
    public static IeJsValue CreateArray(UInt32 length);
    public static IeJsValue CreateError(IeJsValue message);
    public static IeJsValue CreateRangeError(IeJsValue message);
    public static IeJsValue CreateReferenceError(IeJsValue message);
    public static IeJsValue CreateSyntaxError(IeJsValue message);
    public static IeJsValue CreateTypeError(IeJsValue message);
    public static IeJsValue CreateUriError(IeJsValue message);
    public UInt32 AddRef();
    public UInt32 Release();
    public bool ToBoolean();
    public double ToDouble();
    public int ToInt32();
    public string ToString();
    public IeJsValue ConvertToBoolean();
    public IeJsValue ConvertToNumber();
    public IeJsValue ConvertToString();
    public IeJsValue ConvertToObject();
    public void PreventExtension();
    public IeJsValue GetOwnPropertyDescriptor(IeJsPropertyId propertyId);
    public IeJsValue GetOwnPropertyNames();
    public bool HasProperty(IeJsPropertyId propertyId);
    public IeJsValue GetProperty(IeJsPropertyId id);
    public void SetProperty(IeJsPropertyId id, IeJsValue value, bool useStrictRules);
    public IeJsValue DeleteProperty(IeJsPropertyId propertyId, bool useStrictRules);
    public bool DefineProperty(IeJsPropertyId propertyId, IeJsValue propertyDescriptor);
    public bool HasIndexedProperty(IeJsValue index);
    public IeJsValue GetIndexedProperty(IeJsValue index);
    public void SetIndexedProperty(IeJsValue index, IeJsValue value);
    public void DeleteIndexedProperty(IeJsValue index);
    public bool Equals(IeJsValue other);
    public bool StrictEquals(IeJsValue other);
    public IeJsValue CallFunction(IeJsValue[] arguments);
    public IeJsValue ConstructObject(IeJsValue[] arguments);
}
[ExtensionAttribute]
internal static class MsieJavaScriptEngine.JsRt.Ie.IeJsValueExtensions : object {
    [ExtensionAttribute]
public static IeJsValue GetOwnPropertyDescriptor(IeJsValue source, string propertyName);
    [ExtensionAttribute]
public static bool HasProperty(IeJsValue source, string propertyName);
    [ExtensionAttribute]
public static IeJsValue GetProperty(IeJsValue source, string name);
    [ExtensionAttribute]
public static void SetProperty(IeJsValue source, string name, IeJsValue value, bool useStrictRules);
    [ExtensionAttribute]
public static IeJsValue DeleteProperty(IeJsValue source, string propertyName, bool useStrictRules);
    [ExtensionAttribute]
public static bool DefineProperty(IeJsValue source, string propertyName, IeJsValue propertyDescriptor);
}
internal static class MsieJavaScriptEngine.JsRt.Ie.IeNativeMethods : object {
    internal static JsErrorCode JsParseScript(string script, JsSourceContext sourceContext, string sourceUrl, IeJsValue& result);
    internal static JsErrorCode JsRunScript(string script, JsSourceContext sourceContext, string sourceUrl, IeJsValue& result);
    internal static JsErrorCode JsSerializeScript(string script, Byte[] buffer, UInt32& bufferSize);
    internal static JsErrorCode JsParseSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceUrl, IeJsValue& result);
    internal static JsErrorCode JsRunSerializedScript(string script, Byte[] buffer, JsSourceContext sourceContext, string sourceUrl, IeJsValue& result);
    internal static JsErrorCode JsGetPropertyIdFromName(string name, IeJsPropertyId& propertyId);
    internal static JsErrorCode JsGetPropertyNameFromId(IeJsPropertyId propertyId, IntPtr& buffer);
    internal static JsErrorCode JsPointerToString(string value, UIntPtr stringLength, IeJsValue& stringValue);
    internal static JsErrorCode JsStringToPointer(IeJsValue value, IntPtr& stringValue, UIntPtr& stringLength);
    internal static JsErrorCode JsCreateRuntime(JsRuntimeAttributes attributes, JsRuntimeVersion runtimeVersion, JsThreadServiceCallback threadService, IeJsRuntime& runtime);
    internal static JsErrorCode JsCollectGarbage(IeJsRuntime handle);
    internal static JsErrorCode JsDisposeRuntime(IeJsRuntime handle);
    internal static JsErrorCode JsGetRuntimeMemoryUsage(IeJsRuntime runtime, UIntPtr& memoryUsage);
    internal static JsErrorCode JsGetRuntimeMemoryLimit(IeJsRuntime runtime, UIntPtr& memoryLimit);
    internal static JsErrorCode JsSetRuntimeMemoryLimit(IeJsRuntime runtime, UIntPtr memoryLimit);
    internal static JsErrorCode JsSetRuntimeMemoryAllocationCallback(IeJsRuntime runtime, IntPtr callbackState, JsMemoryAllocationCallback allocationCallback);
    internal static JsErrorCode JsSetRuntimeBeforeCollectCallback(IeJsRuntime runtime, IntPtr callbackState, JsBeforeCollectCallback beforeCollectCallback);
    internal static JsErrorCode JsContextAddRef(IeJsContext reference, UInt32& count);
    internal static JsErrorCode JsAddRef(IeJsValue reference, UInt32& count);
    internal static JsErrorCode JsContextRelease(IeJsContext reference, UInt32& count);
    internal static JsErrorCode JsRelease(IeJsValue reference, UInt32& count);
    internal static JsErrorCode JsCreateContext(IeJsRuntime runtime, IDebugApplication64 debugSite, IeJsContext& newContext);
    internal static JsErrorCode JsCreateContext(IeJsRuntime runtime, IDebugApplication32 debugSite, IeJsContext& newContext);
    internal static JsErrorCode JsGetCurrentContext(IeJsContext& currentContext);
    internal static JsErrorCode JsSetCurrentContext(IeJsContext context);
    internal static JsErrorCode JsGetRuntime(IeJsContext context, IeJsRuntime& runtime);
    internal static JsErrorCode JsStartDebugging(IDebugApplication64 debugApplication);
    internal static JsErrorCode JsStartDebugging(IDebugApplication32 debugApplication);
    internal static JsErrorCode JsIdle(UInt32& nextIdleTick);
    internal static JsErrorCode JsGetUndefinedValue(IeJsValue& undefinedValue);
    internal static JsErrorCode JsGetNullValue(IeJsValue& nullValue);
    internal static JsErrorCode JsGetTrueValue(IeJsValue& trueValue);
    internal static JsErrorCode JsGetFalseValue(IeJsValue& falseValue);
    internal static JsErrorCode JsBoolToBoolean(bool value, IeJsValue& booleanValue);
    internal static JsErrorCode JsBooleanToBool(IeJsValue booleanValue, Boolean& boolValue);
    internal static JsErrorCode JsConvertValueToBoolean(IeJsValue value, IeJsValue& booleanValue);
    internal static JsErrorCode JsGetValueType(IeJsValue value, JsValueType& type);
    internal static JsErrorCode JsDoubleToNumber(double doubleValue, IeJsValue& value);
    internal static JsErrorCode JsIntToNumber(int intValue, IeJsValue& value);
    internal static JsErrorCode JsNumberToDouble(IeJsValue value, Double& doubleValue);
    internal static JsErrorCode JsConvertValueToNumber(IeJsValue value, IeJsValue& numberValue);
    internal static JsErrorCode JsGetStringLength(IeJsValue sringValue, Int32& length);
    internal static JsErrorCode JsConvertValueToString(IeJsValue value, IeJsValue& stringValue);
    internal static JsErrorCode JsGetGlobalObject(IeJsValue& globalObject);
    internal static JsErrorCode JsCreateObject(IeJsValue& obj);
    internal static JsErrorCode JsCreateExternalObject(IntPtr data, JsFinalizeCallback finalizeCallback, IeJsValue& obj);
    internal static JsErrorCode JsConvertValueToObject(IeJsValue value, IeJsValue& obj);
    internal static JsErrorCode JsGetPrototype(IeJsValue obj, IeJsValue& prototypeObject);
    internal static JsErrorCode JsSetPrototype(IeJsValue obj, IeJsValue prototypeObject);
    internal static JsErrorCode JsGetExtensionAllowed(IeJsValue obj, Boolean& value);
    internal static JsErrorCode JsPreventExtension(IeJsValue obj);
    internal static JsErrorCode JsGetProperty(IeJsValue obj, IeJsPropertyId propertyId, IeJsValue& value);
    internal static JsErrorCode JsGetOwnPropertyDescriptor(IeJsValue obj, IeJsPropertyId propertyId, IeJsValue& propertyDescriptor);
    internal static JsErrorCode JsGetOwnPropertyNames(IeJsValue obj, IeJsValue& propertyNames);
    internal static JsErrorCode JsSetProperty(IeJsValue obj, IeJsPropertyId propertyId, IeJsValue value, bool useStrictRules);
    internal static JsErrorCode JsHasProperty(IeJsValue obj, IeJsPropertyId propertyId, Boolean& hasProperty);
    internal static JsErrorCode JsDeleteProperty(IeJsValue obj, IeJsPropertyId propertyId, bool useStrictRules, IeJsValue& result);
    internal static JsErrorCode JsDefineProperty(IeJsValue obj, IeJsPropertyId propertyId, IeJsValue propertyDescriptor, Boolean& result);
    internal static JsErrorCode JsHasIndexedProperty(IeJsValue obj, IeJsValue index, Boolean& result);
    internal static JsErrorCode JsGetIndexedProperty(IeJsValue obj, IeJsValue index, IeJsValue& result);
    internal static JsErrorCode JsSetIndexedProperty(IeJsValue obj, IeJsValue index, IeJsValue value);
    internal static JsErrorCode JsDeleteIndexedProperty(IeJsValue obj, IeJsValue index);
    internal static JsErrorCode JsEquals(IeJsValue obj1, IeJsValue obj2, Boolean& result);
    internal static JsErrorCode JsStrictEquals(IeJsValue obj1, IeJsValue obj2, Boolean& result);
    internal static JsErrorCode JsHasExternalData(IeJsValue obj, Boolean& value);
    internal static JsErrorCode JsGetExternalData(IeJsValue obj, IntPtr& externalData);
    internal static JsErrorCode JsSetExternalData(IeJsValue obj, IntPtr externalData);
    internal static JsErrorCode JsCreateArray(UInt32 length, IeJsValue& result);
    internal static JsErrorCode JsCallFunction(IeJsValue function, IeJsValue[] arguments, ushort argumentCount, IeJsValue& result);
    internal static JsErrorCode JsConstructObject(IeJsValue function, IeJsValue[] arguments, ushort argumentCount, IeJsValue& result);
    internal static JsErrorCode JsCreateFunction(IeJsNativeFunction nativeFunction, IntPtr externalData, IeJsValue& function);
    internal static JsErrorCode JsCreateError(IeJsValue message, IeJsValue& error);
    internal static JsErrorCode JsCreateRangeError(IeJsValue message, IeJsValue& error);
    internal static JsErrorCode JsCreateReferenceError(IeJsValue message, IeJsValue& error);
    internal static JsErrorCode JsCreateSyntaxError(IeJsValue message, IeJsValue& error);
    internal static JsErrorCode JsCreateTypeError(IeJsValue message, IeJsValue& error);
    internal static JsErrorCode JsCreateURIError(IeJsValue message, IeJsValue& error);
    internal static JsErrorCode JsHasException(Boolean& hasException);
    internal static JsErrorCode JsGetAndClearException(IeJsValue& exception);
    internal static JsErrorCode JsSetException(IeJsValue exception);
    internal static JsErrorCode JsDisableRuntimeExecution(IeJsRuntime runtime);
    internal static JsErrorCode JsEnableRuntimeExecution(IeJsRuntime runtime);
    internal static JsErrorCode JsIsRuntimeExecutionDisabled(IeJsRuntime runtime, Boolean& isDisabled);
}
internal class MsieJavaScriptEngine.JsRt.Ie.IeTypeMapper : TypeMapper`2<IeJsValue, IeJsNativeFunction> {
    public IeTypeMapper(bool allowReflection);
    public virtual IeJsValue MapToScriptType(object value);
    public virtual object MapToHostType(IeJsValue value);
    protected virtual EmbeddedObject`2<IeJsValue, IeJsNativeFunction> CreateEmbeddedObjectOrFunction(object obj);
    private EmbeddedObject`2<IeJsValue, IeJsNativeFunction> CreateEmbeddedObject(object obj);
    private EmbeddedObject`2<IeJsValue, IeJsNativeFunction> CreateEmbeddedFunction(Delegate del);
    protected virtual EmbeddedType`2<IeJsValue, IeJsNativeFunction> CreateEmbeddedType(Type type);
    private void ProjectFields(EmbeddedItem`2<IeJsValue, IeJsNativeFunction> externalItem);
    private void ProjectProperties(EmbeddedItem`2<IeJsValue, IeJsNativeFunction> externalItem);
    private void ProjectMethods(EmbeddedItem`2<IeJsValue, IeJsNativeFunction> externalItem);
    private static void FreezeObject(IeJsValue objValue);
    private static void SetNonEnumerableProperty(IeJsValue objValue, string name, IeJsValue value);
    private static void CreateAndSetError(string message);
    private static void CreateAndSetReferenceError(string message);
    private static void CreateAndSetTypeError(string message);
    private static IeJsValue CreateErrorFromWrapperException(JsException exception);
}
internal class MsieJavaScriptEngine.JsRt.JsBackgroundWorkItemCallback : MulticastDelegate {
    public JsBackgroundWorkItemCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr callbackData);
    public virtual IAsyncResult BeginInvoke(IntPtr callbackData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class MsieJavaScriptEngine.JsRt.JsBeforeCollectCallback : MulticastDelegate {
    public JsBeforeCollectCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr callbackState);
    public virtual IAsyncResult BeginInvoke(IntPtr callbackState, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MsieJavaScriptEngine.JsRt.JsEngineException : JsException {
    public JsEngineException(JsErrorCode errorCode);
    public JsEngineException(JsErrorCode errorCode, string message);
}
public enum MsieJavaScriptEngine.JsRt.JsErrorCode : Enum {
    public UInt32 value__;
    public static JsErrorCode NoError;
    public static JsErrorCode CategoryUsage;
    public static JsErrorCode InvalidArgument;
    public static JsErrorCode NullArgument;
    public static JsErrorCode NoCurrentContext;
    public static JsErrorCode InExceptionState;
    public static JsErrorCode NotImplemented;
    public static JsErrorCode WrongThread;
    public static JsErrorCode RuntimeInUse;
    public static JsErrorCode BadSerializedScript;
    public static JsErrorCode InDisabledState;
    public static JsErrorCode CannotDisableExecution;
    public static JsErrorCode HeapEnumInProgress;
    public static JsErrorCode ArgumentNotObject;
    public static JsErrorCode InProfileCallback;
    public static JsErrorCode InThreadServiceCallback;
    public static JsErrorCode CannotSerializeDebugScript;
    public static JsErrorCode AlreadyDebuggingContext;
    public static JsErrorCode AlreadyProfilingContext;
    public static JsErrorCode IdleNotEnabled;
    public static JsErrorCode CategoryEngine;
    public static JsErrorCode OutOfMemory;
    public static JsErrorCode CategoryScript;
    public static JsErrorCode ScriptException;
    public static JsErrorCode ScriptCompile;
    public static JsErrorCode ScriptTerminated;
    public static JsErrorCode ScriptEvalDisabled;
    public static JsErrorCode CategoryFatal;
    public static JsErrorCode Fatal;
}
public class MsieJavaScriptEngine.JsRt.JsException : Exception {
    private JsErrorCode _errorCode;
    public JsErrorCode ErrorCode { get; }
    public JsException(JsErrorCode errorCode);
    public JsException(JsErrorCode errorCode, string message);
    public JsErrorCode get_ErrorCode();
}
public class MsieJavaScriptEngine.JsRt.JsFatalException : JsException {
    public JsFatalException(JsErrorCode errorCode);
    public JsFatalException(JsErrorCode errorCode, string message);
}
internal class MsieJavaScriptEngine.JsRt.JsFinalizeCallback : MulticastDelegate {
    public JsFinalizeCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr data);
    public virtual IAsyncResult BeginInvoke(IntPtr data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class MsieJavaScriptEngine.JsRt.JsMemoryAllocationCallback : MulticastDelegate {
    public JsMemoryAllocationCallback(object object, IntPtr method);
    public virtual bool Invoke(IntPtr callbackState, JsMemoryEventType allocationEvent, UIntPtr allocationSize);
    public virtual IAsyncResult BeginInvoke(IntPtr callbackState, JsMemoryEventType allocationEvent, UIntPtr allocationSize, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal enum MsieJavaScriptEngine.JsRt.JsMemoryEventType : Enum {
    public int value__;
    public static JsMemoryEventType Allocate;
    public static JsMemoryEventType Free;
    public static JsMemoryEventType Failure;
}
[FlagsAttribute]
internal enum MsieJavaScriptEngine.JsRt.JsRuntimeAttributes : Enum {
    public int value__;
    public static JsRuntimeAttributes None;
    public static JsRuntimeAttributes DisableBackgroundWork;
    public static JsRuntimeAttributes AllowScriptInterrupt;
    public static JsRuntimeAttributes EnableIdleProcessing;
    public static JsRuntimeAttributes DisableNativeCodeGeneration;
    public static JsRuntimeAttributes DisableEval;
}
internal enum MsieJavaScriptEngine.JsRt.JsRuntimeVersion : Enum {
    public int value__;
    public static JsRuntimeVersion Version10;
    public static JsRuntimeVersion Version11;
    public static JsRuntimeVersion VersionEdge;
}
internal class MsieJavaScriptEngine.JsRt.JsSourceContext : ValueType {
    private IntPtr _context;
    public static JsSourceContext None { get; }
    private JsSourceContext(IntPtr context);
    public static JsSourceContext get_None();
    public static bool op_Equality(JsSourceContext left, JsSourceContext right);
    public static bool op_Inequality(JsSourceContext left, JsSourceContext right);
    public static JsSourceContext op_Subtraction(JsSourceContext context, int offset);
    public static JsSourceContext Subtract(JsSourceContext left, int right);
    public static JsSourceContext op_Decrement(JsSourceContext context);
    public static JsSourceContext Decrement(JsSourceContext left);
    public static JsSourceContext op_Addition(JsSourceContext context, int offset);
    public static JsSourceContext Add(JsSourceContext left, int right);
    public static JsSourceContext op_Increment(JsSourceContext context);
    public static JsSourceContext Increment(JsSourceContext left);
    public static JsSourceContext FromIntPtr(IntPtr cookie);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JsSourceContext other);
}
internal class MsieJavaScriptEngine.JsRt.JsThreadServiceCallback : MulticastDelegate {
    public JsThreadServiceCallback(object object, IntPtr method);
    public virtual bool Invoke(JsBackgroundWorkItemCallback callbackFunction, IntPtr callbackData);
    public virtual IAsyncResult BeginInvoke(JsBackgroundWorkItemCallback callbackFunction, IntPtr callbackData, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class MsieJavaScriptEngine.JsRt.JsUsageException : JsException {
    public JsUsageException(JsErrorCode errorCode);
    public JsUsageException(JsErrorCode errorCode, string message);
}
internal enum MsieJavaScriptEngine.JsRt.JsValueType : Enum {
    public int value__;
    public static JsValueType Undefined;
    public static JsValueType Null;
    public static JsValueType Number;
    public static JsValueType String;
    public static JsValueType Boolean;
    public static JsValueType Object;
    public static JsValueType Function;
    public static JsValueType Error;
    public static JsValueType Array;
}
internal abstract class MsieJavaScriptEngine.JsRt.TypeMapper`2 : object {
    protected static string ExternalObjectPropertyName;
    protected bool _allowReflection;
    private ConcurrentDictionary`2<EmbeddedObjectKey, Lazy`1<EmbeddedObject`2<TValue, TFunction>>> _lazyEmbeddedObjects;
    protected JsFinalizeCallback _embeddedObjectFinalizeCallback;
    private object _embeddedObjectStorageInitializationSynchronizer;
    private bool _embeddedObjectStorageInitialized;
    private ConcurrentDictionary`2<string, Lazy`1<EmbeddedType`2<TValue, TFunction>>> _lazyEmbeddedTypes;
    protected JsFinalizeCallback _embeddedTypeFinalizeCallback;
    private object _embeddedTypeStorageInitializationSynchronizer;
    private bool _embeddedTypeStorageInitialized;
    private InterlockedStatedFlag _disposedFlag;
    protected TypeMapper`2(bool allowReflection);
    public virtual TValue GetOrCreateScriptObject(object obj);
    public virtual TValue GetOrCreateScriptType(Type type);
    public abstract virtual TValue MapToScriptType(object value);
    public abstract virtual object MapToHostType(TValue value);
    protected abstract virtual EmbeddedObject`2<TValue, TFunction> CreateEmbeddedObjectOrFunction(object obj);
    private void EmbeddedObjectFinalizeCallback(IntPtr ptr);
    protected abstract virtual EmbeddedType`2<TValue, TFunction> CreateEmbeddedType(Type type);
    private void EmbeddedTypeFinalizeCallback(IntPtr ptr);
    protected bool IsAvailableProperty(PropertyInfo property);
    protected Dictionary`2<string, List`1<MethodInfo>> GetAvailableMethodGroups(MethodInfo[] methods);
    protected Object[] GetHostItemMemberArguments(TValue[] args, int maxArgCount);
    protected static Exception UnwrapException(Exception exception);
    public virtual void Dispose();
}
public class MsieJavaScriptEngine.JsRuntimeException : JsScriptException {
    private string _callStack;
    public string CallStack { get; public set; }
    public JsRuntimeException(string message);
    public JsRuntimeException(string message, Exception innerException);
    public JsRuntimeException(string message, string engineMode);
    public JsRuntimeException(string message, string engineMode, Exception innerException);
    public string get_CallStack();
    public void set_CallStack(string value);
}
public class MsieJavaScriptEngine.JsScriptException : JsException {
    private string _type;
    private string _documentName;
    private int _lineNumber;
    private int _columnNumber;
    private string _sourceFragment;
    public string Type { get; public set; }
    public string DocumentName { get; public set; }
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceFragment { get; public set; }
    public JsScriptException(string message);
    public JsScriptException(string message, Exception innerException);
    public JsScriptException(string message, string engineMode);
    public JsScriptException(string message, string engineMode, Exception innerException);
    public string get_Type();
    public void set_Type(string value);
    public string get_DocumentName();
    public void set_DocumentName(string value);
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public string get_SourceFragment();
    public void set_SourceFragment(string value);
}
public class MsieJavaScriptEngine.JsUsageException : JsException {
    public JsUsageException(string message);
    public JsUsageException(string message, Exception innerException);
    public JsUsageException(string message, string engineMode);
    public JsUsageException(string message, string engineMode, Exception innerException);
}
public class MsieJavaScriptEngine.MsieJsEngine : object {
    private IInnerJsEngine _jsEngine;
    private static JsEngineMode _currentMode;
    private static object _creationSynchronizer;
    private UniqueDocumentNameManager _documentNameManager;
    private InterlockedStatedFlag _disposedFlag;
    public string Mode { get; }
    public bool SupportsScriptPrecompilation { get; }
    public MsieJsEngine(JsEngineSettings settings);
    private static MsieJsEngine();
    public string get_Mode();
    public bool get_SupportsScriptPrecompilation();
    private void VerifyNotDisposed();
    public PrecompiledScript Precompile(string code);
    public PrecompiledScript Precompile(string code, string documentName);
    public PrecompiledScript PrecompileFile(string path, Encoding encoding);
    public PrecompiledScript PrecompileResource(string resourceName, Type type);
    public PrecompiledScript PrecompileResource(string resourceName, Assembly assembly);
    public object Evaluate(string expression);
    public object Evaluate(string expression, string documentName);
    public T Evaluate(string expression);
    public T Evaluate(string expression, string documentName);
    public void Execute(string code);
    public void Execute(string code, string documentName);
    public void Execute(PrecompiledScript precompiledScript);
    public void ExecuteFile(string path, Encoding encoding);
    public void ExecuteResource(string resourceName, Type type);
    public void ExecuteResource(string resourceName, Assembly assembly);
    public object CallFunction(string functionName, Object[] args);
    public T CallFunction(string functionName, Object[] args);
    public bool HasVariable(string variableName);
    public object GetVariableValue(string variableName);
    public T GetVariableValue(string variableName);
    public void SetVariableValue(string variableName, object value);
    public void RemoveVariable(string variableName);
    public void EmbedHostObject(string itemName, object value);
    public void EmbedHostType(string itemName, Type type);
    public void Interrupt();
    public void CollectGarbage();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class MsieJavaScriptEngine.Polyfills.System.Reflection.TypeInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsInstanceOfType(TypeInfo source, object o);
}
public class MsieJavaScriptEngine.PrecompiledScript : object {
    [CompilerGeneratedAttribute]
private string <EngineMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CachedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentName>k__BackingField;
    public string EngineMode { get; private set; }
    internal string Code { get; private set; }
    internal Byte[] CachedBytes { get; private set; }
    internal string DocumentName { get; private set; }
    internal PrecompiledScript(string engineMode, string code, Byte[] cachedBytes, string documentName);
    [CompilerGeneratedAttribute]
public string get_EngineMode();
    [CompilerGeneratedAttribute]
private void set_EngineMode(string value);
    [CompilerGeneratedAttribute]
internal string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
internal Byte[] get_CachedBytes();
    [CompilerGeneratedAttribute]
private void set_CachedBytes(Byte[] value);
    [CompilerGeneratedAttribute]
internal string get_DocumentName();
    [CompilerGeneratedAttribute]
private void set_DocumentName(string value);
}
internal class MsieJavaScriptEngine.Resources.CommonStrings : object {
    private static Lazy`1<ResourceManager> _resourceManager;
    private static CultureInfo _resourceCulture;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Common_ArgumentHasIncorrectType { get; }
    internal static string Common_ArgumentIsEmpty { get; }
    internal static string Common_ArgumentIsNull { get; }
    internal static string Common_CannotConvertObjectToType { get; }
    internal static string Common_FileNotExist { get; }
    internal static string Common_ResourceIsNull { get; }
    internal static string Common_SeeOriginalErrorMessage { get; }
    internal static string Common_ValueTypeCannotBeNull { get; }
    internal static string Engine_AssemblyNotRegistered { get; }
    internal static string Engine_EdgeInstallationRequired { get; }
    internal static string Engine_IeInstallationRequired { get; }
    internal static string Engine_JsEngineNotLoaded { get; }
    internal static string Engine_MaxStackSizeMustBeNonNegative { get; }
    internal static string ErrorDetails_CallStack { get; }
    internal static string ErrorDetails_Category { get; }
    internal static string ErrorDetails_ColumnNumber { get; }
    internal static string ErrorDetails_Description { get; }
    internal static string ErrorDetails_DocumentName { get; }
    internal static string ErrorDetails_EngineMode { get; }
    internal static string ErrorDetails_LineNumber { get; }
    internal static string ErrorDetails_Message { get; }
    internal static string ErrorDetails_SourceFragment { get; }
    internal static string ErrorDetails_Type { get; }
    internal static string Runtime_FunctionNotExist { get; }
    internal static string Runtime_HostDelegateInvocationFailed { get; }
    internal static string Runtime_HostObjectFieldGettingFailed { get; }
    internal static string Runtime_HostObjectFieldSettingFailed { get; }
    internal static string Runtime_HostObjectMethodInvocationFailed { get; }
    internal static string Runtime_HostObjectPropertyGettingFailed { get; }
    internal static string Runtime_HostObjectPropertySettingFailed { get; }
    internal static string Runtime_HostTypeConstructorInvocationFailed { get; }
    internal static string Runtime_HostTypeConstructorNotFound { get; }
    internal static string Runtime_HostTypeFieldGettingFailed { get; }
    internal static string Runtime_HostTypeFieldSettingFailed { get; }
    internal static string Runtime_HostTypeMethodInvocationFailed { get; }
    internal static string Runtime_HostTypePropertyGettingFailed { get; }
    internal static string Runtime_HostTypePropertySettingFailed { get; }
    internal static string Runtime_InvalidCallStackLineFormat { get; }
    internal static string Runtime_InvalidThisContextForHostObjectField { get; }
    internal static string Runtime_InvalidThisContextForHostObjectMethod { get; }
    internal static string Runtime_InvalidThisContextForHostObjectProperty { get; }
    internal static string Runtime_ScriptInterrupted { get; }
    internal static string Runtime_SuitableConstructorOfHostTypeNotFound { get; }
    internal static string Runtime_SuitableMethodOfHostObjectNotFound { get; }
    internal static string Usage_CannotExecuteEmptyFile { get; }
    internal static string Usage_CannotExecuteEmptyResource { get; }
    internal static string Usage_CannotExecutePrecompiledScriptForAnotherJsEngineMode { get; }
    internal static string Usage_CannotPrecompileEmptyFile { get; }
    internal static string Usage_CannotPrecompileEmptyResource { get; }
    internal static string Usage_EmbeddedHostObjectTypeNotSupported { get; }
    internal static string Usage_EmbeddedHostTypeNotSupported { get; }
    internal static string Usage_FunctionParameterTypeNotSupported { get; }
    internal static string Usage_InvalidDocumentNameFormat { get; }
    internal static string Usage_InvalidFileNameFormat { get; }
    internal static string Usage_InvalidFunctionNameFormat { get; }
    internal static string Usage_InvalidResourceNameFormat { get; }
    internal static string Usage_InvalidScriptItemNameFormat { get; }
    internal static string Usage_InvalidVariableNameFormat { get; }
    internal static string Usage_JsEngineModeNotSupported { get; }
    internal static string Usage_JsEnginesConflictInProcess { get; }
    internal static string Usage_ReturnValueTypeNotSupported { get; }
    internal static string Usage_VariableTypeNotSupported { get; }
    private static CommonStrings();
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Common_ArgumentHasIncorrectType();
    internal static string get_Common_ArgumentIsEmpty();
    internal static string get_Common_ArgumentIsNull();
    internal static string get_Common_CannotConvertObjectToType();
    internal static string get_Common_FileNotExist();
    internal static string get_Common_ResourceIsNull();
    internal static string get_Common_SeeOriginalErrorMessage();
    internal static string get_Common_ValueTypeCannotBeNull();
    internal static string get_Engine_AssemblyNotRegistered();
    internal static string get_Engine_EdgeInstallationRequired();
    internal static string get_Engine_IeInstallationRequired();
    internal static string get_Engine_JsEngineNotLoaded();
    internal static string get_Engine_MaxStackSizeMustBeNonNegative();
    internal static string get_ErrorDetails_CallStack();
    internal static string get_ErrorDetails_Category();
    internal static string get_ErrorDetails_ColumnNumber();
    internal static string get_ErrorDetails_Description();
    internal static string get_ErrorDetails_DocumentName();
    internal static string get_ErrorDetails_EngineMode();
    internal static string get_ErrorDetails_LineNumber();
    internal static string get_ErrorDetails_Message();
    internal static string get_ErrorDetails_SourceFragment();
    internal static string get_ErrorDetails_Type();
    internal static string get_Runtime_FunctionNotExist();
    internal static string get_Runtime_HostDelegateInvocationFailed();
    internal static string get_Runtime_HostObjectFieldGettingFailed();
    internal static string get_Runtime_HostObjectFieldSettingFailed();
    internal static string get_Runtime_HostObjectMethodInvocationFailed();
    internal static string get_Runtime_HostObjectPropertyGettingFailed();
    internal static string get_Runtime_HostObjectPropertySettingFailed();
    internal static string get_Runtime_HostTypeConstructorInvocationFailed();
    internal static string get_Runtime_HostTypeConstructorNotFound();
    internal static string get_Runtime_HostTypeFieldGettingFailed();
    internal static string get_Runtime_HostTypeFieldSettingFailed();
    internal static string get_Runtime_HostTypeMethodInvocationFailed();
    internal static string get_Runtime_HostTypePropertyGettingFailed();
    internal static string get_Runtime_HostTypePropertySettingFailed();
    internal static string get_Runtime_InvalidCallStackLineFormat();
    internal static string get_Runtime_InvalidThisContextForHostObjectField();
    internal static string get_Runtime_InvalidThisContextForHostObjectMethod();
    internal static string get_Runtime_InvalidThisContextForHostObjectProperty();
    internal static string get_Runtime_ScriptInterrupted();
    internal static string get_Runtime_SuitableConstructorOfHostTypeNotFound();
    internal static string get_Runtime_SuitableMethodOfHostObjectNotFound();
    internal static string get_Usage_CannotExecuteEmptyFile();
    internal static string get_Usage_CannotExecuteEmptyResource();
    internal static string get_Usage_CannotExecutePrecompiledScriptForAnotherJsEngineMode();
    internal static string get_Usage_CannotPrecompileEmptyFile();
    internal static string get_Usage_CannotPrecompileEmptyResource();
    internal static string get_Usage_EmbeddedHostObjectTypeNotSupported();
    internal static string get_Usage_EmbeddedHostTypeNotSupported();
    internal static string get_Usage_FunctionParameterTypeNotSupported();
    internal static string get_Usage_InvalidDocumentNameFormat();
    internal static string get_Usage_InvalidFileNameFormat();
    internal static string get_Usage_InvalidFunctionNameFormat();
    internal static string get_Usage_InvalidResourceNameFormat();
    internal static string get_Usage_InvalidScriptItemNameFormat();
    internal static string get_Usage_InvalidVariableNameFormat();
    internal static string get_Usage_JsEngineModeNotSupported();
    internal static string get_Usage_JsEnginesConflictInProcess();
    internal static string get_Usage_ReturnValueTypeNotSupported();
    internal static string get_Usage_VariableTypeNotSupported();
    private static string GetString(string name);
}
internal class MsieJavaScriptEngine.Resources.NetCoreStrings : object {
    private static Lazy`1<ResourceManager> _resourceManager;
    private static CultureInfo _resourceCulture;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Engine_JsEnginesNotFound { get; }
    internal static string Usage_JsEngineModeNotCompatibleWithNetCore { get; }
    private static NetCoreStrings();
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Engine_JsEnginesNotFound();
    internal static string get_Usage_JsEngineModeNotCompatibleWithNetCore();
    private static string GetString(string name);
}
internal class MsieJavaScriptEngine.ScriptDispatcher : object {
    private Thread _thread;
    private AutoResetEvent _waitHandle;
    private Queue`1<ScriptTask> _taskQueue;
    private object _taskQueueSynchronizer;
    private InterlockedStatedFlag _disposedFlag;
    private void VerifyNotDisposed();
    private void StartThread();
    private void EnqueueTask(ScriptTask task);
    private void ExecuteTask(ScriptTask task);
    public T Invoke(Func`1<T> func);
    public void Invoke(Action action);
    public sealed virtual void Dispose();
}
public class MsieJavaScriptEngine.Undefined : object {
    public static Undefined Value;
    private static Undefined();
    public virtual string ToString();
}
internal class MsieJavaScriptEngine.Utilities.InterlockedStatedFlag : ValueType {
    private int _counter;
    public bool IsSet();
    public bool Set();
}
internal class MsieJavaScriptEngine.Utilities.StatedFlag : ValueType {
    private bool _isSet;
    public bool IsSet();
    public bool Set();
}
public static class MsieJavaScriptEngine.Utilities.TypeConverter : object {
    private static TypeCode[] _primitiveTypeCodes;
    private static TypeConverter();
    public static T ConvertToType(object value);
    public static object ConvertToType(object value, Type targetType);
    public static bool TryConvertToType(object value, T& convertedValue);
    public static bool TryConvertToType(object value, Type targetType, Object& convertedValue);
    internal static bool IsPrimitiveType(Type type);
    internal static bool IsPrimitiveType(TypeCode typeCode);
    private static bool ConvertObjectToType(object obj, Type type, bool throwOnError, Object& convertedObject);
    private static bool InnerConvertObjectToType(object obj, Type type, bool throwOnError, Object& convertedObject);
    private static bool IsNonNullableValueType(Type type);
}
internal class MsieJavaScriptEngine.Utilities.UniqueDocumentNameManager : object {
    private string _defaultName;
    private Dictionary`2<string, UInt32> _storage;
    private object _storageSynchronizer;
    public UniqueDocumentNameManager(string defaultName);
    public string GetUniqueName(string name);
}
internal static class MsieJavaScriptEngine.Utilities.Utils : object {
    public static bool Is64BitProcess();
    public static string GetResourceAsString(string resourceName, Assembly assembly);
    public static string GetFileTextContent(string path, Encoding encoding);
}
