internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Constants : object {
    internal static string ExecutorUriString;
    internal static string TestRunParametersName;
    internal static Uri ExecutorUri;
    internal static TestProperty DescriptionProperty;
    internal static TestProperty WorkItemIdsProperty;
    internal static TestProperty CssIterationProperty;
    internal static TestProperty CssProjectStructureProperty;
    internal static TestProperty TestClassNameProperty;
    internal static TestProperty DeclaringClassNameProperty;
    internal static TestProperty AsyncTestProperty;
    internal static TestProperty TestCategoryProperty;
    internal static TestProperty PriorityProperty;
    internal static TestProperty DeploymentItemsProperty;
    internal static TestProperty DoNotParallelizeProperty;
    internal static TestProperty ExecutionIdProperty;
    internal static TestProperty ParentExecIdProperty;
    internal static TestProperty InnerResultsCountProperty;
    internal static TestProperty TestRunIdProperty;
    internal static TestProperty TestPlanIdProperty;
    internal static TestProperty TestCaseIdProperty;
    internal static TestProperty TestPointIdProperty;
    internal static TestProperty TestConfigurationIdProperty;
    internal static TestProperty TestConfigurationNameProperty;
    internal static TestProperty IsInLabEnvironmentProperty;
    internal static TestProperty BuildConfigurationIdProperty;
    internal static TestProperty BuildDirectoryProperty;
    internal static TestProperty BuildFlavorProperty;
    internal static TestProperty BuildNumberProperty;
    internal static TestProperty BuildPlatformProperty;
    internal static TestProperty BuildUriProperty;
    internal static TestProperty TfsServerCollectionUrlProperty;
    internal static TestProperty TfsTeamProjectProperty;
    private static string TestClassNameLabel;
    private static string DeclaringClassNameLabel;
    private static string IsAsyncLabel;
    private static string TestCategoryLabel;
    private static string PriorityLabel;
    private static string DeploymentItemsLabel;
    private static string DoNotParallelizeLabel;
    private static string ExecutionIdLabel;
    private static string ParentExecIdLabel;
    private static string InnerResultsCountLabel;
    private static string DescriptionLabel;
    private static string CssIterationLabel;
    private static string CssProjectStructureLabel;
    private static string WorkItemIdsLabel;
    private static string TestRunId;
    private static string TestPlanId;
    private static string TestCaseId;
    private static string TestPointId;
    private static string TestConfigurationId;
    private static string TestConfigurationName;
    private static string IsInLabEnvironment;
    private static string BuildConfigurationId;
    private static string BuildDirectory;
    private static string BuildFlavor;
    private static string BuildNumber;
    private static string BuildPlatform;
    private static string BuildUri;
    private static string TfsServerCollectionUrl;
    private static string TfsTeamProject;
    private static Constants();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Discovery.AssemblyEnumerator : MarshalByRefObject {
    public AssemblyEnumerator(MSTestSettings settings);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    internal ICollection`1<UnitTestElement> EnumerateAssembly(string assemblyFileName, ICollection`1& warnings);
    internal Type[] GetTypes(Assembly assembly, string assemblyFileName, ICollection`1<string> warningMessages);
    internal string GetLoadExceptionDetails(ReflectionTypeLoadException ex);
    internal virtual TypeEnumerator GetTypeEnumerator(Type type, string assemblyFileName);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Discovery.AssemblyEnumeratorWrapper : object {
    private static AssemblyName UnitTestFrameworkAssemblyName;
    private static AssemblyEnumeratorWrapper();
    internal ICollection`1<UnitTestElement> GetTests(string assemblyFileName, IRunSettings runSettings, ICollection`1& warnings);
    private ICollection`1<UnitTestElement> GetTestsInIsolation(string fullFilePath, IRunSettings runSettings, ICollection`1& warnings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Discovery.TestMethodValidator : object {
    private ReflectHelper reflectHelper;
    internal TestMethodValidator(ReflectHelper reflectHelper);
    internal virtual bool IsValidTestMethod(MethodInfo testMethodInfo, Type type, ICollection`1<string> warnings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Discovery.TypeEnumerator : object {
    private Type type;
    private string assemblyName;
    private TypeValidator typeValidator;
    private TestMethodValidator testMethodValidator;
    private ReflectHelper reflectHelper;
    internal TypeEnumerator(Type type, string assemblyName, ReflectHelper reflectHelper, TypeValidator typeValidator, TestMethodValidator testMethodValidator);
    internal virtual ICollection`1<UnitTestElement> Enumerate(ICollection`1& warnings);
    internal Collection`1<UnitTestElement> GetTests(ICollection`1<string> warnings);
    internal UnitTestElement GetTestFromMethod(MethodInfo method, bool isDeclaredInTestTypeAssembly, ICollection`1<string> warnings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Discovery.TypeValidator : object {
    private static string TestContextFullName;
    private ReflectHelper reflectHelper;
    internal TypeValidator(ReflectHelper reflectHelper);
    internal virtual bool IsValidTestClass(Type type, ICollection`1<string> warnings);
    internal bool HasCorrectTestContextSignature(Type type);
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.LogMessageListener : object {
    private static LogMessageListener activeRedirector;
    private LogMessageListener previousRedirector;
    private TextWriter redirectLoggerOut;
    private TextWriter redirectStdErr;
    private bool captureDebugTraces;
    private ITraceListener traceListener;
    private ITraceListenerManager traceListenerManager;
    public string StandardOutput { get; }
    public string StandardError { get; }
    public string DebugTrace { get; }
    public LogMessageListener(bool captureDebugTraces);
    protected virtual override void Finalize();
    public string get_StandardOutput();
    public string get_StandardError();
    public string get_DebugTrace();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.RunCleanupResult : object {
    [CompilerGeneratedAttribute]
private string <StandardOut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Warnings>k__BackingField;
    internal string StandardOut { get; internal set; }
    internal string StandardError { get; internal set; }
    internal string DebugTrace { get; internal set; }
    internal IList`1<string> Warnings { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_StandardOut();
    [CompilerGeneratedAttribute]
internal void set_StandardOut(string value);
    [CompilerGeneratedAttribute]
internal string get_StandardError();
    [CompilerGeneratedAttribute]
internal void set_StandardError(string value);
    [CompilerGeneratedAttribute]
internal string get_DebugTrace();
    [CompilerGeneratedAttribute]
internal void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_Warnings();
    [CompilerGeneratedAttribute]
internal void set_Warnings(IList`1<string> value);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.StackTraceHelper : object {
    private static List`1<string> typesToBeExcluded;
    private static List`1<string> TypeToBeExcluded { get; }
    private static List`1<string> get_TypeToBeExcluded();
    internal static StackTraceInformation GetStackTraceInformation(Exception ex);
    internal static string TrimStackTrace(string stackTrace);
    internal static string GetExceptionMessage(Exception ex);
    internal static StackTraceInformation CreateStackTraceInformation(Exception ex, bool checkInnerExceptions, string stackTraceString);
    internal static bool HasReferenceToUTF(string stackFrame);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TcmTestPropertiesProvider : object {
    public static IDictionary`2<TestProperty, object> GetTcmProperties(TestCase testCase);
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestAssemblyInfo : object {
    private MethodInfo assemblyCleanupMethod;
    private MethodInfo assemblyInitializeMethod;
    private object assemblyInfoExecuteSyncObject;
    [CompilerGeneratedAttribute]
private bool <IsAssemblyInitializeExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <AssemblyInitializationException>k__BackingField;
    public MethodInfo AssemblyInitializeMethod { get; internal set; }
    public MethodInfo AssemblyCleanupMethod { get; internal set; }
    public bool IsAssemblyInitializeExecuted { get; internal set; }
    public Exception AssemblyInitializationException { get; internal set; }
    public bool HasExecutableCleanupMethod { get; }
    public MethodInfo get_AssemblyInitializeMethod();
    internal void set_AssemblyInitializeMethod(MethodInfo value);
    public MethodInfo get_AssemblyCleanupMethod();
    internal void set_AssemblyCleanupMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsAssemblyInitializeExecuted();
    [CompilerGeneratedAttribute]
internal void set_IsAssemblyInitializeExecuted(bool value);
    [CompilerGeneratedAttribute]
public Exception get_AssemblyInitializationException();
    [CompilerGeneratedAttribute]
internal void set_AssemblyInitializationException(Exception value);
    public bool get_HasExecutableCleanupMethod();
    public void RunAssemblyInitialize(TestContext testContext);
    public string RunAssemblyCleanup();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestAssemblySettingsProvider : MarshalByRefObject {
    private ReflectHelper reflectHelper;
    internal TestAssemblySettingsProvider(ReflectHelper reflectHelper);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    internal TestAssemblySettings GetSettings(string source);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestCaseDiscoverySink : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TestCase> <Tests>k__BackingField;
    public ICollection`1<TestCase> Tests { get; private set; }
    [CompilerGeneratedAttribute]
public ICollection`1<TestCase> get_Tests();
    [CompilerGeneratedAttribute]
private void set_Tests(ICollection`1<TestCase> value);
    public sealed virtual void SendTestCase(TestCase discoveredTest);
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestClassInfo : object {
    private MethodInfo classCleanupMethod;
    private MethodInfo classInitializeMethod;
    private MethodInfo testCleanupMethod;
    private MethodInfo testInitializeMethod;
    private object testClassExecuteSyncObject;
    [CompilerGeneratedAttribute]
private TestClassAttribute <ClassAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClassType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfo <Constructor>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <TestContextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private TestAssemblyInfo <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClassInitializeExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<MethodInfo> <BaseClassCleanupMethodsStack>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ClassInitializationException>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<Tuple`2<MethodInfo, MethodInfo>> <BaseClassInitAndCleanupMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<MethodInfo> <BaseTestInitializeMethodsQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<MethodInfo> <BaseTestCleanupMethodsQueue>k__BackingField;
    public TestClassAttribute ClassAttribute { get; private set; }
    public Type ClassType { get; private set; }
    public ConstructorInfo Constructor { get; private set; }
    public PropertyInfo TestContextProperty { get; private set; }
    public TestAssemblyInfo Parent { get; private set; }
    public MethodInfo ClassInitializeMethod { get; internal set; }
    public bool IsClassInitializeExecuted { get; internal set; }
    public Stack`1<MethodInfo> BaseClassCleanupMethodsStack { get; internal set; }
    public Exception ClassInitializationException { get; internal set; }
    public MethodInfo ClassCleanupMethod { get; internal set; }
    public bool HasExecutableCleanupMethod { get; }
    public Queue`1<Tuple`2<MethodInfo, MethodInfo>> BaseClassInitAndCleanupMethods { get; private set; }
    public MethodInfo TestInitializeMethod { get; internal set; }
    public MethodInfo TestCleanupMethod { get; internal set; }
    public Queue`1<MethodInfo> BaseTestInitializeMethodsQueue { get; private set; }
    public Queue`1<MethodInfo> BaseTestCleanupMethodsQueue { get; private set; }
    internal TestClassInfo(Type type, ConstructorInfo constructor, PropertyInfo testContextProperty, TestClassAttribute classAttribute, TestAssemblyInfo parent);
    [CompilerGeneratedAttribute]
public TestClassAttribute get_ClassAttribute();
    [CompilerGeneratedAttribute]
private void set_ClassAttribute(TestClassAttribute value);
    [CompilerGeneratedAttribute]
public Type get_ClassType();
    [CompilerGeneratedAttribute]
private void set_ClassType(Type value);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_Constructor();
    [CompilerGeneratedAttribute]
private void set_Constructor(ConstructorInfo value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_TestContextProperty();
    [CompilerGeneratedAttribute]
private void set_TestContextProperty(PropertyInfo value);
    [CompilerGeneratedAttribute]
public TestAssemblyInfo get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TestAssemblyInfo value);
    public MethodInfo get_ClassInitializeMethod();
    internal void set_ClassInitializeMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsClassInitializeExecuted();
    [CompilerGeneratedAttribute]
internal void set_IsClassInitializeExecuted(bool value);
    [CompilerGeneratedAttribute]
public Stack`1<MethodInfo> get_BaseClassCleanupMethodsStack();
    [CompilerGeneratedAttribute]
internal void set_BaseClassCleanupMethodsStack(Stack`1<MethodInfo> value);
    [CompilerGeneratedAttribute]
public Exception get_ClassInitializationException();
    [CompilerGeneratedAttribute]
internal void set_ClassInitializationException(Exception value);
    public MethodInfo get_ClassCleanupMethod();
    internal void set_ClassCleanupMethod(MethodInfo value);
    public bool get_HasExecutableCleanupMethod();
    [CompilerGeneratedAttribute]
public Queue`1<Tuple`2<MethodInfo, MethodInfo>> get_BaseClassInitAndCleanupMethods();
    [CompilerGeneratedAttribute]
private void set_BaseClassInitAndCleanupMethods(Queue`1<Tuple`2<MethodInfo, MethodInfo>> value);
    public MethodInfo get_TestInitializeMethod();
    internal void set_TestInitializeMethod(MethodInfo value);
    public MethodInfo get_TestCleanupMethod();
    internal void set_TestCleanupMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public Queue`1<MethodInfo> get_BaseTestInitializeMethodsQueue();
    [CompilerGeneratedAttribute]
private void set_BaseTestInitializeMethodsQueue(Queue`1<MethodInfo> value);
    [CompilerGeneratedAttribute]
public Queue`1<MethodInfo> get_BaseTestCleanupMethodsQueue();
    [CompilerGeneratedAttribute]
private void set_BaseTestCleanupMethodsQueue(Queue`1<MethodInfo> value);
    public void RunClassInitialize(TestContext testContext);
    public string RunClassCleanup();
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestExecutionManager : object {
    private TestRunCancellationToken cancellationToken;
    private IDictionary`2<string, object> sessionParameters;
    [CompilerGeneratedAttribute]
private TestMethodFilter <TestMethodFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAnyTestFailed>k__BackingField;
    private TestMethodFilter TestMethodFilter { get; private set; }
    private bool HasAnyTestFailed { get; private set; }
    [CompilerGeneratedAttribute]
private TestMethodFilter get_TestMethodFilter();
    [CompilerGeneratedAttribute]
private void set_TestMethodFilter(TestMethodFilter value);
    [CompilerGeneratedAttribute]
private bool get_HasAnyTestFailed();
    [CompilerGeneratedAttribute]
private void set_HasAnyTestFailed(bool value);
    public void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken runCancellationToken);
    public void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    internal virtual void ExecuteTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, bool isDeploymentDone);
    internal virtual UnitTestDiscoverer GetUnitTestDiscoverer();
    internal void SendTestResults(TestCase test, UnitTestResult[] unitTestResults, DateTimeOffset startTime, DateTimeOffset endTime, ITestExecutionRecorder testExecutionRecorder);
    private static bool MatchTestFilter(ITestCaseFilterExpression filterExpression, TestCase test, TestMethodFilter testMethodFilter);
    private void ExecuteTestsInSource(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, string source, bool isDeploymentDone);
    private void ExecuteTestsWithTestRunner(IEnumerable`1<TestCase> tests, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, string source, IDictionary`2<string, object> sourceLevelParameters, UnitTestRunner testRunner);
    private IDictionary`2<string, object> GetTestContextProperties(IDictionary`2<TestProperty, object> tcmProperties, IDictionary`2<string, object> sourceLevelParameters);
    private void RunCleanup(ITestExecutionRecorder testExecutionRecorder, UnitTestRunner testRunner);
    private void CacheSessionParameters(IRunContext runContext, ITestExecutionRecorder testExecutionRecorder);
    private void LogWarnings(ITestExecutionRecorder testExecutionRecorder, IEnumerable`1<string> warnings);
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestMethodInfo : object {
    public static int TimeoutWhenNotSet;
    private Object[] arguments;
    [CompilerGeneratedAttribute]
private string <NotRunnableReason>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private TestClassInfo <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private TestMethodOptions <TestMethodOptions>k__BackingField;
    public bool IsTimeoutSet { get; }
    public string NotRunnableReason { get; internal set; }
    public bool IsRunnable { get; }
    public ParameterInfo[] ParameterTypes { get; }
    public Type ReturnType { get; }
    public string TestClassName { get; }
    public string TestMethodName { get; }
    public MethodInfo MethodInfo { get; }
    public Object[] Arguments { get; }
    internal MethodInfo TestMethod { get; private set; }
    internal TestClassInfo Parent { get; private set; }
    internal TestMethodOptions TestMethodOptions { get; private set; }
    internal TestMethodInfo(MethodInfo testMethod, TestClassInfo parent, TestMethodOptions testmethodOptions);
    public bool get_IsTimeoutSet();
    [CompilerGeneratedAttribute]
public string get_NotRunnableReason();
    [CompilerGeneratedAttribute]
internal void set_NotRunnableReason(string value);
    public bool get_IsRunnable();
    public sealed virtual ParameterInfo[] get_ParameterTypes();
    public sealed virtual Type get_ReturnType();
    public sealed virtual string get_TestClassName();
    public sealed virtual string get_TestMethodName();
    public sealed virtual MethodInfo get_MethodInfo();
    public sealed virtual Object[] get_Arguments();
    [CompilerGeneratedAttribute]
internal MethodInfo get_TestMethod();
    [CompilerGeneratedAttribute]
private void set_TestMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
internal TestClassInfo get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TestClassInfo value);
    [CompilerGeneratedAttribute]
internal TestMethodOptions get_TestMethodOptions();
    [CompilerGeneratedAttribute]
private void set_TestMethodOptions(TestMethodOptions value);
    public sealed virtual Attribute[] GetAllAttributes(bool inherit);
    public sealed virtual TAttributeType[] GetAttributes(bool inherit);
    public virtual TestResult Invoke(Object[] arguments);
    internal void SetArguments(Object[] arguments);
    internal Object[] ResolveArguments(Object[] arguments);
    private TestResult ExecuteInternal(Object[] arguments);
    private bool IsExpectedException(Exception ex, TestResult result);
    private Exception GetRealException(Exception ex);
    private Exception HandleMethodException(Exception ex, string className, string methodName);
    private void RunTestCleanupMethod(object classInstance, TestResult result);
    private string GetTestCleanUpExceptionMessage(MethodInfo testCleanupMethod, Exception exception);
    private bool RunTestInitializeMethod(object classInstance, TestResult result);
    private bool SetTestContext(object classInstance, TestResult result);
    private object CreateTestClassInstance(TestResult result);
    private TestResult ExecuteInternalWithTimeout(Object[] arguments);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TestMethodRunner : object {
    private ITestContext testContext;
    private TestMethod test;
    private TestMethodInfo testMethodInfo;
    private bool captureDebugTraces;
    private ReflectHelper reflectHelper;
    public TestMethodRunner(TestMethodInfo testMethodInfo, TestMethod testMethod, ITestContext testContext, bool captureDebugTraces);
    public TestMethodRunner(TestMethodInfo testMethodInfo, TestMethod testMethod, ITestContext testContext, bool captureDebugTraces, ReflectHelper reflectHelper);
    internal UnitTestResult[] Execute();
    internal UnitTestResult[] RunTestMethod();
    private UnitTestOutcome GetAggregateOutcome(List`1<TestResult> results);
    private List`1<TestResult> UpdateResultsWithParentInfo(List`1<TestResult> results, TestResult parentResult);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.ThreadSafeStringWriter : StringWriter {
    private object lockObject;
    public ThreadSafeStringWriter(IFormatProvider formatProvider);
    public virtual string ToString();
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void Write(Char[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    private static void InvokeBaseClass(Action action);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(char value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(string value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__2(Char[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__3(bool disposing);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.TypeCache : MarshalByRefObject {
    private static string TestContextPropertyName;
    private static String[] PredefinedNames;
    private ReflectHelper reflectionHelper;
    private Dictionary`2<Assembly, TestAssemblyInfo> testAssemblyInfoCache;
    private Dictionary`2<string, TestClassInfo> classInfoCache;
    private object assemblyInfoSyncObject;
    private object classInfoSyncObject;
    public IEnumerable`1<TestClassInfo> ClassInfoListWithExecutableCleanupMethods { get; }
    public IEnumerable`1<TestAssemblyInfo> AssemblyInfoListWithExecutableCleanupMethods { get; }
    public IEnumerable`1<TestAssemblyInfo> AssemblyInfoCache { get; }
    public IEnumerable`1<TestClassInfo> ClassInfoCache { get; }
    internal TypeCache(ReflectHelper reflectionHelper);
    private static TypeCache();
    public IEnumerable`1<TestClassInfo> get_ClassInfoListWithExecutableCleanupMethods();
    public IEnumerable`1<TestAssemblyInfo> get_AssemblyInfoListWithExecutableCleanupMethods();
    public IEnumerable`1<TestAssemblyInfo> get_AssemblyInfoCache();
    public IEnumerable`1<TestClassInfo> get_ClassInfoCache();
    public TestMethodInfo GetTestMethodInfo(TestMethod testMethod, ITestContext testContext, bool captureDebugTraces);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    private TestClassInfo GetClassInfo(TestMethod testMethod);
    private Type LoadType(string typeName, string assemblyName);
    private TestClassInfo CreateClassInfo(Type classType, TestMethod testMethod);
    private PropertyInfo ResolveTestContext(Type classType);
    private TestAssemblyInfo GetAssemblyInfo(Type type);
    private bool IsAssemblyOrClassInitializeMethod(MethodInfo methodInfo, Type initializeAttributeType);
    private bool IsAssemblyOrClassCleanupMethod(MethodInfo methodInfo, Type cleanupAttributeType);
    private void UpdateInfoWithInitializeAndCleanupMethods(TestClassInfo classInfo, MethodInfo[]& initAndCleanupMethods);
    private void UpdateInfoIfClassInitializeOrCleanupMethod(TestClassInfo classInfo, MethodInfo methodInfo, bool isBase, MethodInfo[]& initAndCleanupMethods, Type classInitializeAttributeType, Type classCleanupAttributeType);
    private void UpdateInfoIfTestInitializeOrCleanupMethod(TestClassInfo classInfo, MethodInfo methodInfo, bool isBase, Dictionary`2<string, string> instanceMethods, Type testInitializeAttributeType, Type testCleanupAttributeType);
    private TestMethodInfo ResolveTestMethod(TestMethod testMethod, TestClassInfo testClassInfo, ITestContext testContext, bool captureDebugTraces);
    private TestMethodAttribute GetTestMethodAttribute(MethodInfo methodInfo, TestClassInfo testClassInfo);
    private MethodInfo GetMethodInfoForTestMethod(TestMethod testMethod, TestClassInfo testClassInfo);
    private int GetTestTimeout(MethodInfo methodInfo, TestMethod testMethod);
    private void SetCustomProperties(TestMethodInfo testMethodInfo, ITestContext testContext);
    private bool ValidateAndAssignTestProperty(TestMethodInfo testMethodInfo, ITestContext testContext, string propertyName, string propertyValue);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Execution.UnitTestRunner : MarshalByRefObject {
    private TypeCache typeCache;
    public UnitTestRunner(MSTestSettings settings);
    internal UnitTestRunner(MSTestSettings settings, ReflectHelper reflectHelper);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    internal UnitTestResult[] RunSingleTest(TestMethod testMethod, IDictionary`2<string, object> testContextProperties);
    internal RunCleanupResult RunCleanup();
    private void RunAssemblyCleanup(IEnumerable`1<TestAssemblyInfo> assemblyInfoCache, IList`1<string> warnings);
    private void RunClassCleanupMethods(IEnumerable`1<TestClassInfo> classInfoCache, IList`1<string> warnings);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Extensions.ExceptionExtensions : object {
    [ExtensionAttribute]
internal static Exception GetInnerExceptionOrDefault(Exception exception);
    [ExtensionAttribute]
internal static string TryGetMessage(Exception exception);
    [ExtensionAttribute]
internal static StackTraceInformation TryGetStackTraceInformation(Exception exception);
    [ExtensionAttribute]
internal static bool TryGetUnitTestAssertException(Exception exception, UnitTestOutcome& outcome, String& exceptionMessage, StackTraceInformation& exceptionStackTrace);
    [ExtensionAttribute]
internal static bool TryGetUnitTestAssertException(Exception exception, UnitTestOutcome& outcome, String& exceptionMessage, StackTraceInformation& exceptionStackTrace);
    [ExtensionAttribute]
internal static void TryGetTestFailureExceptionMessageAndStackTrace(TestFailedException testFailureException, StringBuilder message, StringBuilder stackTrace);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Extensions.MethodInfoExtensions : object {
    [ExtensionAttribute]
internal static bool HasCorrectClassOrAssemblyInitializeSignature(MethodInfo method);
    [ExtensionAttribute]
internal static bool HasCorrectClassOrAssemblyCleanupSignature(MethodInfo method);
    [ExtensionAttribute]
internal static bool HasCorrectTestInitializeOrCleanupSignature(MethodInfo method);
    [ExtensionAttribute]
internal static bool HasCorrectTestMethodSignature(MethodInfo method, bool ignoreParameterLength);
    [ExtensionAttribute]
internal static bool HasCorrectTimeout(MethodInfo method);
    [ExtensionAttribute]
internal static bool IsVoidOrTaskReturnType(MethodInfo method);
    [ExtensionAttribute]
internal static string GetAsyncTypeName(MethodInfo method);
    [ExtensionAttribute]
internal static void InvokeAsSynchronousTask(MethodInfo methodInfo, object classInstance, Object[] parameters);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Extensions.TestCaseExtensions : object {
    [ExtensionAttribute]
internal static UnitTestElement ToUnitTestElement(TestCase testCase, string source);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Extensions.TestContextExtensions : object {
    [ExtensionAttribute]
internal static string GetAndClearDiagnosticMessages(ITestContext testContext);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Extensions.TestResultExtensions : object {
    [ExtensionAttribute]
public static UnitTestResult[] ToUnitTestResults(TestResult[] testResults);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Extensions.UnitTestOutcomeExtensions : object {
    [ExtensionAttribute]
public static UnitTestOutcome ToUnitTestOutcome(UnitTestOutcome frameworkTestOutcome);
    [ExtensionAttribute]
internal static UnitTestOutcome GetMoreImportantOutcome(UnitTestOutcome outcome1, UnitTestOutcome outcome2);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Helpers.ReflectHelper : MarshalByRefObject {
    private Dictionary`2<MemberInfo, Dictionary`2<string, object>> attributeCache;
    public virtual bool IsAttributeDefined(MemberInfo memberInfo, Type attributeType, bool inherit);
    public virtual bool IsAttributeDefined(Type type, Type attributeType, bool inherit);
    public virtual bool HasAttributeDerivedFrom(Type type, Type baseAttributeType, bool inherit);
    public bool HasAttributeDerivedFrom(MemberInfo memberInfo, Type baseAttributeType, bool inherit);
    public virtual ExpectedExceptionBaseAttribute ResolveExpectedExceptionHelper(MethodInfo methodInfo, TestMethod testMethod);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    internal static bool MatchReturnType(MethodInfo method, Type returnType);
    internal static Attribute[] GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    internal static Object[] GetCustomAttributes(MemberInfo memberInfo, bool inherit);
    internal AttributeType GetAttribute(MethodInfo method);
    internal Attribute GetAttribute(Type attributeType, MethodInfo method);
    internal virtual bool IsMethodDeclaredInSameAssemblyAsType(MethodInfo method, Type type);
    internal virtual String[] GetCategories(MemberInfo categoryAttributeProvider, Type owningType);
    internal ParallelizeAttribute GetParallelizeAttribute(Assembly assembly);
    internal bool IsDoNotParallelizeSet(MemberInfo testMethod, Type owningType);
    internal bool IsDoNotParallelizeSet(Assembly assembly);
    internal IEnumerable`1<object> GetCustomAttributesRecursively(MemberInfo attributeProvider, Type owningType, Type type);
    internal virtual Attribute[] GetCustomAttributeForAssembly(MemberInfo memberInfo, Type type);
    internal virtual Attribute[] GetCustomAttributes(MemberInfo attributeProvider, Type type);
    internal virtual Attribute GetCustomAttribute(MemberInfo attributeProvider, Type type);
    internal virtual Trait GetTestOwnerAsTraits(MemberInfo ownerAttributeProvider);
    internal virtual Trait GetTestPriorityAsTraits(Nullable`1<int> testPriority);
    internal virtual Nullable`1<int> GetPriority(MemberInfo priorityAttributeProvider);
    internal virtual string GetIgnoreMessage(MemberInfo ignoreAttributeProvider);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Helpers.ReflectHelper/<GetTestPropertiesAsTraits>d__25")]
internal virtual IEnumerable`1<Trait> GetTestPropertiesAsTraits(MemberInfo testPropertyProvider);
    internal AttributeType GetDerivedAttribute(MemberInfo memberInfo, bool inherit);
    internal AttributeType GetDerivedAttribute(Type type, bool inherit);
    private string GetOwner(MemberInfo ownerAttributeProvider);
    private IEnumerable`1<Attribute> GetTestPropertyAttributes(MemberInfo propertyAttributeProvider);
    private Dictionary`2<string, object> GetAttributes(MemberInfo memberInfo, bool inherit);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Helpers.RunSettingsUtilities : object {
    internal static XmlReaderSettings ReaderSettings { get; }
    internal static XmlReaderSettings get_ReaderSettings();
    internal static Dictionary`2<string, object> GetTestRunParameters(string settingsXml);
    internal static void ThrowOnHasAttributes(XmlReader reader);
    private static T GetNodeValue(string settingsXml, string nodeName, Func`2<XmlReader, T> nodeParser);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Helpers.TestRunParameters : object {
    internal static Dictionary`2<string, object> FromXml(XmlReader reader);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Helpers.UnitTestOutcomeHelper : object {
    internal static TestOutcome ToTestOutcome(UnitTestOutcome unitTestOutcome, MSTestSettings currentSettings);
}
internal interface Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.IPlatformServiceProvider {
    public ITestSource TestSource { get; }
    public ITestDataSource TestDataSource { get; }
    public IFileOperations FileOperations { get; }
    public IAdapterTraceLogger AdapterTraceLogger { get; }
    public ITestDeployment TestDeployment { get; }
    public ISettingsProvider SettingsProvider { get; }
    public IThreadOperations ThreadOperations { get; }
    public IReflectionOperations ReflectionOperations { get; }
    public abstract virtual ITestSource get_TestSource();
    public abstract virtual ITestDataSource get_TestDataSource();
    public abstract virtual IFileOperations get_FileOperations();
    public abstract virtual IAdapterTraceLogger get_AdapterTraceLogger();
    public abstract virtual ITestDeployment get_TestDeployment();
    public abstract virtual ISettingsProvider get_SettingsProvider();
    public abstract virtual IThreadOperations get_ThreadOperations();
    public abstract virtual IReflectionOperations get_ReflectionOperations();
    public abstract virtual ITestSourceHost CreateTestSourceHost(string source, IRunSettings runSettings, IFrameworkHandle frameworkHandle);
    public abstract virtual ITraceListener GetTraceListener(TextWriter textWriter);
    public abstract virtual ITraceListenerManager GetTraceListenerManager(TextWriter outputWriter, TextWriter errorWriter);
    public abstract virtual ITestContext GetTestContext(ITestMethod testMethod, StringWriter writer, IDictionary`2<string, object> properties);
}
[DefaultExecutorUriAttribute("executor://MSTestAdapter/v2")]
[FileExtensionAttribute(".xap")]
[FileExtensionAttribute(".appx")]
[FileExtensionAttribute(".dll")]
[FileExtensionAttribute(".exe")]
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.MSTestDiscoverer : object {
    [SecurityCriticalAttribute]
public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
    internal bool AreValidSources(IEnumerable`1<string> sources);
}
[ExtensionUriAttribute("executor://MSTestAdapter/v2")]
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.MSTestExecutor : object {
    private TestRunCancellationToken cancellationToken;
    [CompilerGeneratedAttribute]
private TestExecutionManager <TestExecutionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private MSTestDiscoverer <MSTestDiscoverer>k__BackingField;
    public TestExecutionManager TestExecutionManager { get; protected set; }
    private MSTestDiscoverer MSTestDiscoverer { get; }
    [CompilerGeneratedAttribute]
public TestExecutionManager get_TestExecutionManager();
    [CompilerGeneratedAttribute]
protected void set_TestExecutionManager(TestExecutionManager value);
    [CompilerGeneratedAttribute]
private MSTestDiscoverer get_MSTestDiscoverer();
    public sealed virtual void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void Cancel();
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.MSTestSettings : object {
    public static string SettingsName;
    public static string SettingsNameAlias;
    private static string ParallelizeSettingsName;
    private static MSTestSettings currentSettings;
    private static RunConfigurationSettings runConfigurationSettings;
    [CompilerGeneratedAttribute]
private bool <CaptureDebugTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcedLegacyMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestSettingsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MapInconclusiveToFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MapNotRunnableToFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableBaseClassTestMethodsFromOtherAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ParallelizationWorkers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ExecutionScope> <ParallelizationScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelization>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestTimeout>k__BackingField;
    public static MSTestSettings CurrentSettings { get; private set; }
    public static RunConfigurationSettings RunConfigurationSettings { get; private set; }
    public bool CaptureDebugTraces { get; private set; }
    public bool ForcedLegacyMode { get; private set; }
    public string TestSettingsFile { get; private set; }
    public bool MapInconclusiveToFailed { get; private set; }
    public bool MapNotRunnableToFailed { get; private set; }
    public bool EnableBaseClassTestMethodsFromOtherAssemblies { get; private set; }
    public Nullable`1<int> ParallelizationWorkers { get; private set; }
    public Nullable`1<ExecutionScope> ParallelizationScope { get; private set; }
    public bool DisableParallelization { get; private set; }
    public int TestTimeout { get; private set; }
    public static MSTestSettings get_CurrentSettings();
    private static void set_CurrentSettings(MSTestSettings value);
    public static RunConfigurationSettings get_RunConfigurationSettings();
    private static void set_RunConfigurationSettings(RunConfigurationSettings value);
    [CompilerGeneratedAttribute]
public bool get_CaptureDebugTraces();
    [CompilerGeneratedAttribute]
private void set_CaptureDebugTraces(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcedLegacyMode();
    [CompilerGeneratedAttribute]
private void set_ForcedLegacyMode(bool value);
    [CompilerGeneratedAttribute]
public string get_TestSettingsFile();
    [CompilerGeneratedAttribute]
private void set_TestSettingsFile(string value);
    [CompilerGeneratedAttribute]
public bool get_MapInconclusiveToFailed();
    [CompilerGeneratedAttribute]
private void set_MapInconclusiveToFailed(bool value);
    [CompilerGeneratedAttribute]
public bool get_MapNotRunnableToFailed();
    [CompilerGeneratedAttribute]
private void set_MapNotRunnableToFailed(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableBaseClassTestMethodsFromOtherAssemblies();
    [CompilerGeneratedAttribute]
private void set_EnableBaseClassTestMethodsFromOtherAssemblies(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ParallelizationWorkers();
    [CompilerGeneratedAttribute]
private void set_ParallelizationWorkers(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ExecutionScope> get_ParallelizationScope();
    [CompilerGeneratedAttribute]
private void set_ParallelizationScope(Nullable`1<ExecutionScope> value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelization();
    [CompilerGeneratedAttribute]
private void set_DisableParallelization(bool value);
    [CompilerGeneratedAttribute]
public int get_TestTimeout();
    [CompilerGeneratedAttribute]
private void set_TestTimeout(int value);
    public static void PopulateSettings(MSTestSettings settings);
    public static void PopulateSettings(IDiscoveryContext context);
    public static bool IsLegacyScenario(IMessageLogger logger);
    internal static MSTestSettings GetSettings(string runsettingsXml, string settingName);
    internal static void Reset();
    private static MSTestSettings ToSettings(XmlReader reader);
    private static void SetParallelSettings(XmlReader reader, MSTestSettings settings);
    private static void SetGlobalSettings(string runsettingsXml, MSTestSettings settings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.AdapterSettingsException : Exception {
    internal AdapterSettingsException(string message);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.StackTraceInformation : object {
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorColumnNumber>k__BackingField;
    public string ErrorStackTrace { get; private set; }
    public string ErrorFilePath { get; private set; }
    public int ErrorLineNumber { get; private set; }
    public int ErrorColumnNumber { get; private set; }
    public StackTraceInformation(string stackTrace);
    public StackTraceInformation(string stackTrace, string filePath, int lineNumber, int columnNumber);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
private void set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorFilePath();
    [CompilerGeneratedAttribute]
private void set_ErrorFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorLineNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorColumnNumber(int value);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.TestAssemblySettings : object {
    [CompilerGeneratedAttribute]
private int <Workers>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanParallelizeAssembly>k__BackingField;
    internal int Workers { get; internal set; }
    internal ExecutionScope Scope { get; internal set; }
    internal bool CanParallelizeAssembly { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Workers();
    [CompilerGeneratedAttribute]
internal void set_Workers(int value);
    [CompilerGeneratedAttribute]
internal ExecutionScope get_Scope();
    [CompilerGeneratedAttribute]
internal void set_Scope(ExecutionScope value);
    [CompilerGeneratedAttribute]
internal bool get_CanParallelizeAssembly();
    [CompilerGeneratedAttribute]
internal void set_CanParallelizeAssembly(bool value);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.TestFailedException : Exception {
    [CompilerGeneratedAttribute]
private StackTraceInformation <StackTraceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestOutcome <Outcome>k__BackingField;
    public StackTraceInformation StackTraceInformation { get; private set; }
    public UnitTestOutcome Outcome { get; private set; }
    public TestFailedException(UnitTestOutcome outcome, string errorMessage);
    public TestFailedException(UnitTestOutcome outcome, string errorMessage, StackTraceInformation stackTraceInformation);
    public TestFailedException(UnitTestOutcome outcome, string errorMessage, Exception realException);
    public TestFailedException(UnitTestOutcome outcome, string errorMessage, StackTraceInformation stackTraceInformation, Exception realException);
    [CompilerGeneratedAttribute]
public StackTraceInformation get_StackTraceInformation();
    [CompilerGeneratedAttribute]
private void set_StackTraceInformation(StackTraceInformation value);
    [CompilerGeneratedAttribute]
public UnitTestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
private void set_Outcome(UnitTestOutcome value);
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.TestMethod : object {
    private string declaringClassFullName;
    private string declaringAssemblyName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public string Name { get; private set; }
    public string FullClassName { get; private set; }
    public string DeclaringAssemblyName { get; public set; }
    public string DeclaringClassFullName { get; public set; }
    public string AssemblyName { get; private set; }
    public bool IsAsync { get; private set; }
    public TestMethod(string name, string fullClassName, string assemblyName, bool isAsync);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FullClassName();
    [CompilerGeneratedAttribute]
private void set_FullClassName(string value);
    public string get_DeclaringAssemblyName();
    public void set_DeclaringAssemblyName(string value);
    public sealed virtual string get_DeclaringClassFullName();
    public void set_DeclaringClassFullName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
private void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
private void set_IsAsync(bool value);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.TestMethodOptions : object {
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpectedExceptionBaseAttribute <ExpectedException>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestContext <TestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureDebugTraces>k__BackingField;
    [CompilerGeneratedAttribute]
private TestMethodAttribute <Executor>k__BackingField;
    internal int Timeout { get; internal set; }
    internal ExpectedExceptionBaseAttribute ExpectedException { get; internal set; }
    internal ITestContext TestContext { get; internal set; }
    internal bool CaptureDebugTraces { get; internal set; }
    internal TestMethodAttribute Executor { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Timeout();
    [CompilerGeneratedAttribute]
internal void set_Timeout(int value);
    [CompilerGeneratedAttribute]
internal ExpectedExceptionBaseAttribute get_ExpectedException();
    [CompilerGeneratedAttribute]
internal void set_ExpectedException(ExpectedExceptionBaseAttribute value);
    [CompilerGeneratedAttribute]
internal ITestContext get_TestContext();
    [CompilerGeneratedAttribute]
internal void set_TestContext(ITestContext value);
    [CompilerGeneratedAttribute]
internal bool get_CaptureDebugTraces();
    [CompilerGeneratedAttribute]
internal void set_CaptureDebugTraces(bool value);
    [CompilerGeneratedAttribute]
internal TestMethodAttribute get_Executor();
    [CompilerGeneratedAttribute]
internal void set_Executor(TestMethodAttribute value);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.TypeInspectionException : Exception {
    public TypeInspectionException(string message);
    public TypeInspectionException(string message, Exception innerException);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.UnitTestElement : object {
    [CompilerGeneratedAttribute]
private TestMethod <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TestCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private Trait[] <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotParallelize>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <DeploymentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AsyncTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssIteration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CssProjectStructure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <WorkItemIds>k__BackingField;
    public TestMethod TestMethod { get; private set; }
    public bool Ignored { get; public set; }
    public bool IsAsync { get; public set; }
    public String[] TestCategory { get; public set; }
    public Trait[] Traits { get; public set; }
    public Nullable`1<int> Priority { get; public set; }
    public bool DoNotParallelize { get; public set; }
    public KeyValuePair`2[] DeploymentItems { get; public set; }
    public string DisplayName { get; public set; }
    internal string AsyncTypeName { get; internal set; }
    internal string CssIteration { get; internal set; }
    internal string CssProjectStructure { get; internal set; }
    internal string Description { get; internal set; }
    internal String[] WorkItemIds { get; internal set; }
    public UnitTestElement(TestMethod testMethod);
    [CompilerGeneratedAttribute]
public TestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
private void set_TestMethod(TestMethod value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public String[] get_TestCategory();
    [CompilerGeneratedAttribute]
public void set_TestCategory(String[] value);
    [CompilerGeneratedAttribute]
public Trait[] get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(Trait[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DoNotParallelize();
    [CompilerGeneratedAttribute]
public void set_DoNotParallelize(bool value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2[] get_DeploymentItems();
    [CompilerGeneratedAttribute]
public void set_DeploymentItems(KeyValuePair`2[] value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
internal string get_AsyncTypeName();
    [CompilerGeneratedAttribute]
internal void set_AsyncTypeName(string value);
    [CompilerGeneratedAttribute]
internal string get_CssIteration();
    [CompilerGeneratedAttribute]
internal void set_CssIteration(string value);
    [CompilerGeneratedAttribute]
internal string get_CssProjectStructure();
    [CompilerGeneratedAttribute]
internal void set_CssProjectStructure(string value);
    [CompilerGeneratedAttribute]
internal string get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(string value);
    [CompilerGeneratedAttribute]
internal String[] get_WorkItemIds();
    [CompilerGeneratedAttribute]
internal void set_WorkItemIds(String[] value);
    internal TestCase ToTestCase();
}
public enum Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.UnitTestOutcome : Enum {
    public int value__;
    public static UnitTestOutcome Error;
    public static UnitTestOutcome Failed;
    public static UnitTestOutcome Timeout;
    public static UnitTestOutcome Inconclusive;
    public static UnitTestOutcome Ignored;
    public static UnitTestOutcome NotRunnable;
    public static UnitTestOutcome Passed;
    public static UnitTestOutcome NotFound;
    public static UnitTestOutcome InProgress;
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.ObjectModel.UnitTestResult : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentExecId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InnerResultsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardOut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestContextMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatarowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResultFiles>k__BackingField;
    public string DisplayName { get; internal set; }
    public UnitTestOutcome Outcome { get; internal set; }
    public string ErrorMessage { get; internal set; }
    public string ErrorStackTrace { get; internal set; }
    public Guid ExecutionId { get; internal set; }
    public Guid ParentExecId { get; internal set; }
    public int InnerResultsCount { get; internal set; }
    public TimeSpan Duration { get; internal set; }
    public string StandardOut { get; internal set; }
    public string StandardError { get; internal set; }
    public string DebugTrace { get; internal set; }
    public string TestContextMessages { get; internal set; }
    public string ErrorFilePath { get; internal set; }
    public int ErrorLineNumber { get; private set; }
    public int ErrorColumnNumber { get; private set; }
    public int DatarowIndex { get; internal set; }
    public IList`1<string> ResultFiles { get; internal set; }
    internal UnitTestResult(TestFailedException testFailedException);
    internal UnitTestResult(UnitTestOutcome outcome, string errorMessage);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
internal void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public UnitTestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
internal void set_Outcome(UnitTestOutcome value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
internal void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
internal void set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
internal void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentExecId();
    [CompilerGeneratedAttribute]
internal void set_ParentExecId(Guid value);
    [CompilerGeneratedAttribute]
public int get_InnerResultsCount();
    [CompilerGeneratedAttribute]
internal void set_InnerResultsCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
internal void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_StandardOut();
    [CompilerGeneratedAttribute]
internal void set_StandardOut(string value);
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
internal void set_StandardError(string value);
    [CompilerGeneratedAttribute]
public string get_DebugTrace();
    [CompilerGeneratedAttribute]
internal void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
public string get_TestContextMessages();
    [CompilerGeneratedAttribute]
internal void set_TestContextMessages(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorFilePath();
    [CompilerGeneratedAttribute]
internal void set_ErrorFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorLineNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorColumnNumber(int value);
    [CompilerGeneratedAttribute]
public int get_DatarowIndex();
    [CompilerGeneratedAttribute]
internal void set_DatarowIndex(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ResultFiles();
    [CompilerGeneratedAttribute]
internal void set_ResultFiles(IList`1<string> value);
    internal TestResult ToTestResult(TestCase testCase, DateTimeOffset startTime, DateTimeOffset endTime, MSTestSettings currentSettings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.PlatformServiceProvider : object {
    private static IPlatformServiceProvider instance;
    private ITestSource testSource;
    private IFileOperations fileOperations;
    private IAdapterTraceLogger traceLogger;
    private ITestDeployment testDeployment;
    private ISettingsProvider settingsProvider;
    private ITestDataSource testDataSource;
    private IThreadOperations threadOperations;
    private IReflectionOperations reflectionOperations;
    public ITestSource TestSource { get; }
    public ITestDataSource TestDataSource { get; }
    public IFileOperations FileOperations { get; }
    public IAdapterTraceLogger AdapterTraceLogger { get; }
    public ITestDeployment TestDeployment { get; }
    public ISettingsProvider SettingsProvider { get; }
    public IThreadOperations ThreadOperations { get; }
    public IReflectionOperations ReflectionOperations { get; }
    internal static IPlatformServiceProvider Instance { get; internal set; }
    public sealed virtual ITestSource get_TestSource();
    public sealed virtual ITestDataSource get_TestDataSource();
    public sealed virtual IFileOperations get_FileOperations();
    public sealed virtual IAdapterTraceLogger get_AdapterTraceLogger();
    public sealed virtual ITestDeployment get_TestDeployment();
    public sealed virtual ISettingsProvider get_SettingsProvider();
    public sealed virtual IThreadOperations get_ThreadOperations();
    public sealed virtual IReflectionOperations get_ReflectionOperations();
    internal static IPlatformServiceProvider get_Instance();
    internal static void set_Instance(IPlatformServiceProvider value);
    public sealed virtual ITestSourceHost CreateTestSourceHost(string source, IRunSettings runSettings, IFrameworkHandle frameworkHandle);
    public sealed virtual ITraceListener GetTraceListener(TextWriter textWriter);
    public sealed virtual ITraceListenerManager GetTraceListenerManager(TextWriter outputWriter, TextWriter errorWriter);
    public sealed virtual ITestContext GetTestContext(ITestMethod testMethod, StringWriter writer, IDictionary`2<string, object> properties);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AttachmentSetDisplayName { get; }
    internal static string Common_CannotBeNullOrEmpty { get; }
    internal static string Common_MustBeGreaterThanZero { get; }
    internal static string CouldNotInspectTypeDuringDiscovery { get; }
    internal static string CouldNotInspectTypeDuringDiscovery1 { get; }
    internal static string DataDrivenResultDisplayName { get; }
    internal static string DebugTraceBanner { get; }
    internal static string DiscoveryWarning { get; }
    internal static string EnumeratorLoadTypeErrorFormat { get; }
    internal static string Execution_Test_Cancelled { get; }
    internal static string Execution_Test_Timeout { get; }
    internal static string InvalidParallelScopeValue { get; }
    internal static string InvalidParallelWorkersValue { get; }
    internal static string InvalidSettingsXmlAttribute { get; }
    internal static string InvalidSettingsXmlElement { get; }
    internal static string LegacyScenariosNotSupportedWarning { get; }
    internal static string SourcesNotSupported { get; }
    internal static string TestAssembly_AssemblyDiscoveryFailure { get; }
    internal static string TestAssembly_FileDoesNotExist { get; }
    internal static string TestContextIsNull { get; }
    internal static string TestContextMessageBanner { get; }
    internal static string TestNotFound { get; }
    internal static string TestParallelizationBanner { get; }
    internal static string TypeLoadFailed { get; }
    internal static string UTA_AssemblyCleanupMethodWasUnsuccesful { get; }
    internal static string UTA_AssemblyInitMethodThrows { get; }
    internal static string UTA_ClassCleanupMethodWasUnsuccesful { get; }
    internal static string UTA_ClassInitMethodThrows { get; }
    internal static string UTA_ClassOrAssemblyCleanupMethodHasWrongSignature { get; }
    internal static string UTA_ClassOrAssemblyInitializeMethodHasWrongSignature { get; }
    internal static string UTA_CleanupMethodThrows { get; }
    internal static string UTA_CleanupMethodThrowsGeneralError { get; }
    internal static string UTA_CleanupStackTrace { get; }
    internal static string UTA_EndOfInnerExceptionTrace { get; }
    internal static string UTA_ErrorGenericTestMethod { get; }
    internal static string UTA_ErrorIncorrectTestMethodSignature { get; }
    internal static string UTA_ErrorInValidTestContextSignature { get; }
    internal static string UTA_ErrorInvalidTimeout { get; }
    internal static string UTA_ErrorMultiAssemblyClean { get; }
    internal static string UTA_ErrorMultiAssemblyInit { get; }
    internal static string UTA_ErrorMultiClassClean { get; }
    internal static string UTA_ErrorMultiClassInit { get; }
    internal static string UTA_ErrorMultiClean { get; }
    internal static string UTA_ErrorMultiInit { get; }
    internal static string UTA_ErrorNonPublicTestClass { get; }
    internal static string UTA_ErrorPredefinedTestProperty { get; }
    internal static string UTA_ErrorTestPropertyAlreadyDefined { get; }
    internal static string UTA_ErrorTestPropertyNullOrEmpty { get; }
    internal static string UTA_ExecuteThrewException { get; }
    internal static string UTA_ExpectedExceptionAttributeConstructionException { get; }
    internal static string UTA_FailedToGetTestMethodException { get; }
    internal static string UTA_InitMethodThrows { get; }
    internal static string UTA_InstanceCreationError { get; }
    internal static string UTA_MethodDoesNotExists { get; }
    internal static string UTA_MultipleExpectedExceptionsOnTestMethod { get; }
    internal static string UTA_NoDefaultConstructor { get; }
    internal static string UTA_NoTestResult { get; }
    internal static string UTA_TestContextLoadError { get; }
    internal static string UTA_TestContextSetError { get; }
    internal static string UTA_TestContextTypeMismatchLoadError { get; }
    internal static string UTA_TestInitializeAndCleanupMethodHasWrongSignature { get; }
    internal static string UTA_TestMethodExpectedParameters { get; }
    internal static string UTA_TestMethodThrows { get; }
    internal static string UTA_TypeLoadError { get; }
    internal static string UTA_WrongThread { get; }
    internal static string UTF_FailedToGetExceptionMessage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AttachmentSetDisplayName();
    internal static string get_Common_CannotBeNullOrEmpty();
    internal static string get_Common_MustBeGreaterThanZero();
    internal static string get_CouldNotInspectTypeDuringDiscovery();
    internal static string get_CouldNotInspectTypeDuringDiscovery1();
    internal static string get_DataDrivenResultDisplayName();
    internal static string get_DebugTraceBanner();
    internal static string get_DiscoveryWarning();
    internal static string get_EnumeratorLoadTypeErrorFormat();
    internal static string get_Execution_Test_Cancelled();
    internal static string get_Execution_Test_Timeout();
    internal static string get_InvalidParallelScopeValue();
    internal static string get_InvalidParallelWorkersValue();
    internal static string get_InvalidSettingsXmlAttribute();
    internal static string get_InvalidSettingsXmlElement();
    internal static string get_LegacyScenariosNotSupportedWarning();
    internal static string get_SourcesNotSupported();
    internal static string get_TestAssembly_AssemblyDiscoveryFailure();
    internal static string get_TestAssembly_FileDoesNotExist();
    internal static string get_TestContextIsNull();
    internal static string get_TestContextMessageBanner();
    internal static string get_TestNotFound();
    internal static string get_TestParallelizationBanner();
    internal static string get_TypeLoadFailed();
    internal static string get_UTA_AssemblyCleanupMethodWasUnsuccesful();
    internal static string get_UTA_AssemblyInitMethodThrows();
    internal static string get_UTA_ClassCleanupMethodWasUnsuccesful();
    internal static string get_UTA_ClassInitMethodThrows();
    internal static string get_UTA_ClassOrAssemblyCleanupMethodHasWrongSignature();
    internal static string get_UTA_ClassOrAssemblyInitializeMethodHasWrongSignature();
    internal static string get_UTA_CleanupMethodThrows();
    internal static string get_UTA_CleanupMethodThrowsGeneralError();
    internal static string get_UTA_CleanupStackTrace();
    internal static string get_UTA_EndOfInnerExceptionTrace();
    internal static string get_UTA_ErrorGenericTestMethod();
    internal static string get_UTA_ErrorIncorrectTestMethodSignature();
    internal static string get_UTA_ErrorInValidTestContextSignature();
    internal static string get_UTA_ErrorInvalidTimeout();
    internal static string get_UTA_ErrorMultiAssemblyClean();
    internal static string get_UTA_ErrorMultiAssemblyInit();
    internal static string get_UTA_ErrorMultiClassClean();
    internal static string get_UTA_ErrorMultiClassInit();
    internal static string get_UTA_ErrorMultiClean();
    internal static string get_UTA_ErrorMultiInit();
    internal static string get_UTA_ErrorNonPublicTestClass();
    internal static string get_UTA_ErrorPredefinedTestProperty();
    internal static string get_UTA_ErrorTestPropertyAlreadyDefined();
    internal static string get_UTA_ErrorTestPropertyNullOrEmpty();
    internal static string get_UTA_ExecuteThrewException();
    internal static string get_UTA_ExpectedExceptionAttributeConstructionException();
    internal static string get_UTA_FailedToGetTestMethodException();
    internal static string get_UTA_InitMethodThrows();
    internal static string get_UTA_InstanceCreationError();
    internal static string get_UTA_MethodDoesNotExists();
    internal static string get_UTA_MultipleExpectedExceptionsOnTestMethod();
    internal static string get_UTA_NoDefaultConstructor();
    internal static string get_UTA_NoTestResult();
    internal static string get_UTA_TestContextLoadError();
    internal static string get_UTA_TestContextSetError();
    internal static string get_UTA_TestContextTypeMismatchLoadError();
    internal static string get_UTA_TestInitializeAndCleanupMethodHasWrongSignature();
    internal static string get_UTA_TestMethodExpectedParameters();
    internal static string get_UTA_TestMethodThrows();
    internal static string get_UTA_TypeLoadError();
    internal static string get_UTA_WrongThread();
    internal static string get_UTF_FailedToGetExceptionMessage();
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.RunConfigurationSettings : object {
    public static string SettingsName;
    [CompilerGeneratedAttribute]
private bool <CollectSourceInformation>k__BackingField;
    public bool CollectSourceInformation { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_CollectSourceInformation();
    [CompilerGeneratedAttribute]
private void set_CollectSourceInformation(bool value);
    public static RunConfigurationSettings PopulateSettings(IDiscoveryContext context);
    internal static RunConfigurationSettings GetSettings(string runsettingsXml, string settingName);
    private static RunConfigurationSettings ToSettings(XmlReader reader);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.TestMethodFilter : object {
    private Dictionary`2<string, TestProperty> supportedProperties;
    internal ITestCaseFilterExpression GetFilterExpression(IDiscoveryContext context, IMessageLogger logger, Boolean& filterHasError);
    internal TestProperty PropertyProvider(string propertyName);
    internal object PropertyValueProvider(TestCase currentTest, string propertyName);
    private ITestCaseFilterExpression GetTestCaseFilterFromRunContext(IRunContext context);
    private ITestCaseFilterExpression GetTestCaseFilterFromDiscoveryContext(IDiscoveryContext context, IMessageLogger logger);
}
public class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.TestRunCancellationToken : object {
    private bool canceled;
    private Action registeredCallback;
    public bool Canceled { get; private set; }
    public bool get_Canceled();
    private void set_Canceled(bool value);
    public void Cancel();
    public void Register(Action callback);
    public void Unregister();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTest.TestAdapter.UnitTestDiscoverer : object {
    private AssemblyEnumeratorWrapper assemblyEnumeratorWrapper;
    [CompilerGeneratedAttribute]
private TestMethodFilter <TestMethodFilter>k__BackingField;
    private TestMethodFilter TestMethodFilter { get; private set; }
    [CompilerGeneratedAttribute]
private TestMethodFilter get_TestMethodFilter();
    [CompilerGeneratedAttribute]
private void set_TestMethodFilter(TestMethodFilter value);
    internal void DiscoverTests(IEnumerable`1<string> sources, IMessageLogger logger, ITestCaseDiscoverySink discoverySink, IDiscoveryContext discoveryContext);
    internal virtual void DiscoverTestsInSource(string source, IMessageLogger logger, ITestCaseDiscoverySink discoverySink, IDiscoveryContext discoveryContext);
    internal void SendTestCases(string source, IEnumerable`1<UnitTestElement> testElements, ITestCaseDiscoverySink discoverySink, IDiscoveryContext discoveryContext, IMessageLogger logger);
}
