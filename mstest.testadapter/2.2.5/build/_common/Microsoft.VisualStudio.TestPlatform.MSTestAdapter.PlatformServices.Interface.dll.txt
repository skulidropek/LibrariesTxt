public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IAdapterTraceLogger {
    public abstract virtual void LogError(string format, Object[] args);
    public abstract virtual void LogWarning(string format, Object[] args);
    public abstract virtual void LogInfo(string format, Object[] args);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IFileOperations {
    public abstract virtual Assembly LoadAssembly(string assemblyName, bool isReflectionOnly);
    public abstract virtual string GetAssemblyPath(Assembly assembly);
    public abstract virtual bool DoesFileExist(string assemblyFileName);
    public abstract virtual object CreateNavigationSession(string source);
    public abstract virtual void GetNavigationData(object navigationSession, string className, string methodName, Int32& minLineNumber, String& fileName);
    public abstract virtual void DisposeNavigationSession(object navigationSession);
    public abstract virtual string GetFullFilePath(string assemblyFileName);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IReflectionOperations {
    public abstract virtual Object[] GetCustomAttributes(MemberInfo memberInfo, bool inherit);
    public abstract virtual Object[] GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    public abstract virtual Object[] GetCustomAttributes(Assembly assembly, Type type);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ISettingsProvider {
    public abstract virtual void Load(XmlReader reader);
    public abstract virtual IDictionary`2<string, object> GetProperties(string source);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestContext {
    public TestContext Context { get; }
    public abstract virtual TestContext get_Context();
    public abstract virtual bool TryGetPropertyValue(string propertyName, Object& propertyValue);
    public abstract virtual void AddProperty(string propertyName, string propertyValue);
    public abstract virtual void SetOutcome(UnitTestOutcome outcome);
    public abstract virtual void SetDataRow(object dataRow);
    public abstract virtual void SetDataConnection(object dbConnection);
    public abstract virtual IList`1<string> GetResultFiles();
    public abstract virtual string GetDiagnosticMessages();
    public abstract virtual void ClearDiagnosticMessages();
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestDataSource {
    public abstract virtual IEnumerable`1<object> GetData(ITestMethod testMethodInfo, ITestContext testContext);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestDeployment {
    public abstract virtual bool Deploy(IEnumerable`1<TestCase> testCases, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public abstract virtual KeyValuePair`2[] GetDeploymentItems(MethodInfo method, Type type, ICollection`1<string> warnings);
    public abstract virtual void Cleanup();
    public abstract virtual string GetDeploymentDirectory();
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestSource {
    public IEnumerable`1<string> ValidSourceExtensions { get; }
    public abstract virtual IEnumerable`1<string> get_ValidSourceExtensions();
    public abstract virtual bool IsAssemblyReferenced(AssemblyName assemblyName, string source);
    public abstract virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestSourceHost {
    public abstract virtual void SetupHost();
    public abstract virtual object CreateInstanceForType(Type type, Object[] args);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.IThreadOperations {
    public abstract virtual bool Execute(Action action, int timeout, CancellationToken cancelToken);
    public abstract virtual void ExecuteWithAbortSafety(Action action);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITraceListener {
    public abstract virtual TextWriter GetWriter();
    public abstract virtual void Dispose();
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITraceListenerManager {
    public abstract virtual void Add(ITraceListener traceListener);
    public abstract virtual void Remove(ITraceListener traceListener);
    public abstract virtual void Dispose(ITraceListener traceListener);
}
public interface Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ObjectModel.ITestMethod {
    public string Name { get; }
    public string FullClassName { get; }
    public string DeclaringClassFullName { get; }
    public string AssemblyName { get; }
    public bool IsAsync { get; }
    public string ManagedTypeName { get; }
    public string ManagedMethodName { get; }
    public bool HasManagedMethodAndTypeProperties { get; }
    public IReadOnlyCollection`1<string> Hierarchy { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_FullClassName();
    public abstract virtual string get_DeclaringClassFullName();
    public abstract virtual string get_AssemblyName();
    public abstract virtual bool get_IsAsync();
    public abstract virtual string get_ManagedTypeName();
    public abstract virtual string get_ManagedMethodName();
    public abstract virtual bool get_HasManagedMethodAndTypeProperties();
    public abstract virtual IReadOnlyCollection`1<string> get_Hierarchy();
}
