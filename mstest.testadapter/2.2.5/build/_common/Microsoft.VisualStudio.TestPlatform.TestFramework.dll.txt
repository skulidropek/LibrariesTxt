[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.Assert : object {
    private static Assert that;
    public static Assert That { get; }
    public static Assert get_That();
    public static void IsTrue(bool condition);
    public static void IsTrue(Nullable`1<bool> condition);
    public static void IsTrue(bool condition, string message);
    public static void IsTrue(Nullable`1<bool> condition, string message);
    public static void IsTrue(bool condition, string message, Object[] parameters);
    public static void IsTrue(Nullable`1<bool> condition, string message, Object[] parameters);
    public static void IsFalse(bool condition);
    public static void IsFalse(Nullable`1<bool> condition);
    public static void IsFalse(bool condition, string message);
    public static void IsFalse(Nullable`1<bool> condition, string message);
    public static void IsFalse(bool condition, string message, Object[] parameters);
    public static void IsFalse(Nullable`1<bool> condition, string message, Object[] parameters);
    public static void IsNull(object value);
    public static void IsNull(object value, string message);
    public static void IsNull(object value, string message, Object[] parameters);
    public static void IsNotNull(object value);
    public static void IsNotNull(object value, string message);
    public static void IsNotNull(object value, string message, Object[] parameters);
    public static void AreSame(object expected, object actual);
    public static void AreSame(object expected, object actual, string message);
    public static void AreSame(object expected, object actual, string message, Object[] parameters);
    public static void AreNotSame(object notExpected, object actual);
    public static void AreNotSame(object notExpected, object actual, string message);
    public static void AreNotSame(object notExpected, object actual, string message, Object[] parameters);
    public static void AreEqual(T expected, T actual);
    public static void AreEqual(T expected, T actual, string message);
    public static void AreEqual(T expected, T actual, string message, Object[] parameters);
    public static void AreNotEqual(T notExpected, T actual);
    public static void AreNotEqual(T notExpected, T actual, string message);
    public static void AreNotEqual(T notExpected, T actual, string message, Object[] parameters);
    public static void AreEqual(object expected, object actual);
    public static void AreEqual(object expected, object actual, string message);
    public static void AreEqual(object expected, object actual, string message, Object[] parameters);
    public static void AreNotEqual(object notExpected, object actual);
    public static void AreNotEqual(object notExpected, object actual, string message);
    public static void AreNotEqual(object notExpected, object actual, string message, Object[] parameters);
    public static void AreEqual(float expected, float actual, float delta);
    public static void AreEqual(float expected, float actual, float delta, string message);
    public static void AreEqual(float expected, float actual, float delta, string message, Object[] parameters);
    public static void AreNotEqual(float notExpected, float actual, float delta);
    public static void AreNotEqual(float notExpected, float actual, float delta, string message);
    public static void AreNotEqual(float notExpected, float actual, float delta, string message, Object[] parameters);
    public static void AreEqual(double expected, double actual, double delta);
    public static void AreEqual(double expected, double actual, double delta, string message);
    public static void AreEqual(double expected, double actual, double delta, string message, Object[] parameters);
    public static void AreNotEqual(double notExpected, double actual, double delta);
    public static void AreNotEqual(double notExpected, double actual, double delta, string message);
    public static void AreNotEqual(double notExpected, double actual, double delta, string message, Object[] parameters);
    public static void AreEqual(string expected, string actual, bool ignoreCase);
    public static void AreEqual(string expected, string actual, bool ignoreCase, string message);
    public static void AreEqual(string expected, string actual, bool ignoreCase, string message, Object[] parameters);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture, string message);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture, string message, Object[] parameters);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, string message);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, string message, Object[] parameters);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture, string message);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture, string message, Object[] parameters);
    public static void IsInstanceOfType(object value, Type expectedType);
    public static void IsInstanceOfType(object value, Type expectedType, string message);
    public static void IsInstanceOfType(object value, Type expectedType, string message, Object[] parameters);
    public static void IsNotInstanceOfType(object value, Type wrongType);
    public static void IsNotInstanceOfType(object value, Type wrongType, string message);
    public static void IsNotInstanceOfType(object value, Type wrongType, string message, Object[] parameters);
    public static void Fail();
    public static void Fail(string message);
    public static void Fail(string message, Object[] parameters);
    public static void Inconclusive();
    public static void Inconclusive(string message);
    public static void Inconclusive(string message, Object[] parameters);
    public static bool Equals(object objA, object objB);
    public static T ThrowsException(Action action);
    public static T ThrowsException(Action action, string message);
    public static T ThrowsException(Func`1<object> action);
    public static T ThrowsException(Func`1<object> action, string message);
    public static T ThrowsException(Func`1<object> action, string message, Object[] parameters);
    public static T ThrowsException(Action action, string message, Object[] parameters);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestTools.UnitTesting.Assert/<ThrowsExceptionAsync>d__83`1")]
public static Task`1<T> ThrowsExceptionAsync(Func`1<Task> action);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestTools.UnitTesting.Assert/<ThrowsExceptionAsync>d__84`1")]
public static Task`1<T> ThrowsExceptionAsync(Func`1<Task> action, string message);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestTools.UnitTesting.Assert/<ThrowsExceptionAsync>d__85`1")]
public static Task`1<T> ThrowsExceptionAsync(Func`1<Task> action, string message, Object[] parameters);
    public static string ReplaceNullChars(string input);
    internal static void HandleFail(string assertionName, string message, Object[] parameters);
    internal static void CheckParameterNotNull(object param, string assertionName, string parameterName, string message, Object[] parameters);
    internal static string ReplaceNulls(object input);
    private static int CompareInternal(string expected, string actual, bool ignoreCase, CultureInfo culture);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException : UnitTestAssertException {
    public AssertFailedException(string msg, Exception ex);
    public AssertFailedException(string msg);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException : UnitTestAssertException {
    public AssertInconclusiveException(string msg, Exception ex);
    public AssertInconclusiveException(string msg);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private InheritanceBehavior <InheritanceBehavior>k__BackingField;
    public InheritanceBehavior InheritanceBehavior { get; private set; }
    public ClassCleanupAttribute(InheritanceBehavior inheritanceBehavior);
    [CompilerGeneratedAttribute]
public InheritanceBehavior get_InheritanceBehavior();
    [CompilerGeneratedAttribute]
private void set_InheritanceBehavior(InheritanceBehavior value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private InheritanceBehavior <InheritanceBehavior>k__BackingField;
    public InheritanceBehavior InheritanceBehavior { get; private set; }
    public ClassInitializeAttribute(InheritanceBehavior inheritanceBehavior);
    [CompilerGeneratedAttribute]
public InheritanceBehavior get_InheritanceBehavior();
    [CompilerGeneratedAttribute]
private void set_InheritanceBehavior(InheritanceBehavior value);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert : object {
    private static CollectionAssert that;
    public static CollectionAssert That { get; }
    public static CollectionAssert get_That();
    public static void Contains(ICollection collection, object element);
    public static void Contains(ICollection collection, object element, string message);
    public static void Contains(ICollection collection, object element, string message, Object[] parameters);
    public static void DoesNotContain(ICollection collection, object element);
    public static void DoesNotContain(ICollection collection, object element, string message);
    public static void DoesNotContain(ICollection collection, object element, string message, Object[] parameters);
    public static void AllItemsAreNotNull(ICollection collection);
    public static void AllItemsAreNotNull(ICollection collection, string message);
    public static void AllItemsAreNotNull(ICollection collection, string message, Object[] parameters);
    public static void AllItemsAreUnique(ICollection collection);
    public static void AllItemsAreUnique(ICollection collection, string message);
    public static void AllItemsAreUnique(ICollection collection, string message, Object[] parameters);
    public static void IsSubsetOf(ICollection subset, ICollection superset);
    public static void IsSubsetOf(ICollection subset, ICollection superset, string message);
    public static void IsSubsetOf(ICollection subset, ICollection superset, string message, Object[] parameters);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset, string message);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset, string message, Object[] parameters);
    public static void AreEquivalent(ICollection expected, ICollection actual);
    public static void AreEquivalent(ICollection expected, ICollection actual, string message);
    public static void AreEquivalent(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AreNotEquivalent(ICollection expected, ICollection actual);
    public static void AreNotEquivalent(ICollection expected, ICollection actual, string message);
    public static void AreNotEquivalent(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType, string message);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType, string message, Object[] parameters);
    public static void AreEqual(ICollection expected, ICollection actual);
    public static void AreEqual(ICollection expected, ICollection actual, string message);
    public static void AreEqual(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AreNotEqual(ICollection notExpected, ICollection actual);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, string message);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, string message, Object[] parameters);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer, string message);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer, string message, Object[] parameters);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer, string message);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer, string message, Object[] parameters);
    internal static bool IsSubsetOfHelper(ICollection subset, ICollection superset);
    private static Dictionary`2<object, int> GetElementCounts(ICollection collection, Int32& nullCount);
    private static bool FindMismatchedElement(ICollection expected, ICollection actual, Int32& expectedCount, Int32& actualCount, Object& mismatchedElement);
    private static bool AreCollectionsEqual(ICollection expected, ICollection actual, IComparer comparer, String& reason);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CssIteration>k__BackingField;
    public string CssIteration { get; private set; }
    public CssIterationAttribute(string cssIteration);
    [CompilerGeneratedAttribute]
public string get_CssIteration();
    [CompilerGeneratedAttribute]
private void set_CssIteration(string value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CssProjectStructure>k__BackingField;
    public string CssProjectStructure { get; private set; }
    public CssProjectStructureAttribute(string cssProjectStructure);
    [CompilerGeneratedAttribute]
public string get_CssProjectStructure();
    [CompilerGeneratedAttribute]
private void set_CssProjectStructure(string value);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod : Enum {
    public int value__;
    public static DataAccessMethod Sequential;
    public static DataAccessMethod Random;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Object[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public Object[] Data { get; private set; }
    public string DisplayName { get; public set; }
    public DataRowAttribute(object data1);
    public DataRowAttribute(object data1, Object[] moreData);
    [CompilerGeneratedAttribute]
public Object[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Object[] value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    public sealed virtual IEnumerable`1<Object[]> GetData(MethodInfo methodInfo);
    public sealed virtual string GetDisplayName(MethodInfo methodInfo, Object[] data);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute : Attribute {
    public static string DefaultProviderName;
    public static DataAccessMethod DefaultDataAccessMethod;
    [CompilerGeneratedAttribute]
private string <ProviderInvariantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private DataAccessMethod <DataAccessMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSourceSettingName>k__BackingField;
    public string ProviderInvariantName { get; }
    public string ConnectionString { get; }
    public string TableName { get; }
    public DataAccessMethod DataAccessMethod { get; }
    public string DataSourceSettingName { get; }
    public DataSourceAttribute(string providerInvariantName, string connectionString, string tableName, DataAccessMethod dataAccessMethod);
    public DataSourceAttribute(string connectionString, string tableName);
    public DataSourceAttribute(string dataSourceSettingName);
    private static DataSourceAttribute();
    [CompilerGeneratedAttribute]
public string get_ProviderInvariantName();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public DataAccessMethod get_DataAccessMethod();
    [CompilerGeneratedAttribute]
public string get_DataSourceSettingName();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataTestMethodAttribute : TestMethodAttribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; private set; }
    public DescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
}
[AttributeUsageAttribute("69")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DoNotParallelizeAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataAttribute : Attribute {
    private string dynamicDataSourceName;
    private Type dynamicDataDeclaringType;
    private DynamicDataSourceType dynamicDataSourceType;
    [CompilerGeneratedAttribute]
private string <DynamicDataDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DynamicDataDisplayNameDeclaringType>k__BackingField;
    public string DynamicDataDisplayName { get; public set; }
    public Type DynamicDataDisplayNameDeclaringType { get; public set; }
    public DynamicDataAttribute(string dynamicDataSourceName, DynamicDataSourceType dynamicDataSourceType);
    public DynamicDataAttribute(string dynamicDataSourceName, Type dynamicDataDeclaringType, DynamicDataSourceType dynamicDataSourceType);
    [CompilerGeneratedAttribute]
public string get_DynamicDataDisplayName();
    [CompilerGeneratedAttribute]
public void set_DynamicDataDisplayName(string value);
    [CompilerGeneratedAttribute]
public Type get_DynamicDataDisplayNameDeclaringType();
    [CompilerGeneratedAttribute]
public void set_DynamicDataDisplayNameDeclaringType(Type value);
    public sealed virtual IEnumerable`1<Object[]> GetData(MethodInfo methodInfo);
    public sealed virtual string GetDisplayName(MethodInfo methodInfo, Object[] data);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.DynamicDataSourceType : Enum {
    public int value__;
    public static DynamicDataSourceType Property;
    public static DynamicDataSourceType Method;
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope : Enum {
    public int value__;
    public static ExecutionScope ClassLevel;
    public static ExecutionScope MethodLevel;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute : ExpectedExceptionBaseAttribute {
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDerivedTypes>k__BackingField;
    public Type ExceptionType { get; private set; }
    public bool AllowDerivedTypes { get; public set; }
    protected internal string NoExceptionMessage { get; }
    public ExpectedExceptionAttribute(Type exceptionType);
    public ExpectedExceptionAttribute(Type exceptionType, string noExceptionMessage);
    [CompilerGeneratedAttribute]
public Type get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(Type value);
    [CompilerGeneratedAttribute]
public bool get_AllowDerivedTypes();
    [CompilerGeneratedAttribute]
public void set_AllowDerivedTypes(bool value);
    protected internal virtual string get_NoExceptionMessage();
    protected internal virtual void Verify(Exception exception);
}
[AttributeUsageAttribute("64")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SpecifiedNoExceptionMessage>k__BackingField;
    protected internal string NoExceptionMessage { get; }
    protected string SpecifiedNoExceptionMessage { get; private set; }
    protected ExpectedExceptionBaseAttribute(string noExceptionMessage);
    protected internal virtual string get_NoExceptionMessage();
    [CompilerGeneratedAttribute]
protected string get_SpecifiedNoExceptionMessage();
    [CompilerGeneratedAttribute]
private void set_SpecifiedNoExceptionMessage(string value);
    internal static string GetDefaultNoExceptionMessage(string expectedExceptionAttributeTypeName);
    protected internal abstract virtual void Verify(Exception exception);
    protected void RethrowIfAssertException(Exception exception);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UnitTesting.FrameworkMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessStringInvalidSyntax { get; }
    internal static string ActualHasMismatchedElements { get; }
    internal static string AllItemsAreUniqueFailMsg { get; }
    internal static string AreEqualCaseFailMsg { get; }
    internal static string AreEqualDeltaFailMsg { get; }
    internal static string AreEqualDifferentTypesFailMsg { get; }
    internal static string AreEqualFailMsg { get; }
    internal static string AreNotEqualDeltaFailMsg { get; }
    internal static string AreNotEqualFailMsg { get; }
    internal static string AreSameGivenValues { get; }
    internal static string AssertionFailed { get; }
    internal static string AsyncUITestMethodNotSupported { get; }
    internal static string AsyncUITestMethodWithNoDispatcherQueue { get; }
    internal static string BothCollectionsEmpty { get; }
    internal static string BothCollectionsSameElements { get; }
    internal static string BothCollectionsSameReference { get; }
    internal static string BothSameElements { get; }
    internal static string CollectionEqualReason { get; }
    internal static string Common_NullInMessages { get; }
    internal static string Common_ObjectString { get; }
    internal static string ContainsFail { get; }
    internal static string DataDrivenResultDisplayName { get; }
    internal static string DoNotUseAssertEquals { get; }
    internal static string DynamicDataDisplayName { get; }
    internal static string DynamicDataIEnumerableEmpty { get; }
    internal static string DynamicDataIEnumerableNull { get; }
    internal static string DynamicDataValueNull { get; }
    internal static string ElementNumbersDontMatch { get; }
    internal static string ElementsAtIndexDontMatch { get; }
    internal static string ElementTypesAtIndexDontMatch { get; }
    internal static string ElementTypesAtIndexDontMatch2 { get; }
    internal static string EndsWithFail { get; }
    internal static string EqualsTesterInvalidArgs { get; }
    internal static string ErrorInvalidCast { get; }
    internal static string InternalObjectNotValid { get; }
    internal static string InvalidParameterToAssert { get; }
    internal static string InvalidPropertyType { get; }
    internal static string IsInstanceOfFailMsg { get; }
    internal static string IsMatchFail { get; }
    internal static string IsNotInstanceOfFailMsg { get; }
    internal static string IsNotMatchFail { get; }
    internal static string NoDataRow { get; }
    internal static string NoExceptionThrown { get; }
    internal static string NullParameterToAssert { get; }
    internal static string NumberOfElementsDiff { get; }
    internal static string PrivateAccessorConstructorNotFound { get; }
    internal static string PrivateAccessorMemberNotFound { get; }
    internal static string StartsWithFail { get; }
    internal static string UTF_ExpectedExceptionTypeMustDeriveFromException { get; }
    internal static string UTF_FailedToGetExceptionMessage { get; }
    internal static string UTF_TestMethodNoException { get; }
    internal static string UTF_TestMethodNoExceptionDefault { get; }
    internal static string UTF_TestMethodWrongException { get; }
    internal static string UTF_TestMethodWrongExceptionDerivedAllowed { get; }
    internal static string WrongExceptionThrown { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessStringInvalidSyntax();
    internal static string get_ActualHasMismatchedElements();
    internal static string get_AllItemsAreUniqueFailMsg();
    internal static string get_AreEqualCaseFailMsg();
    internal static string get_AreEqualDeltaFailMsg();
    internal static string get_AreEqualDifferentTypesFailMsg();
    internal static string get_AreEqualFailMsg();
    internal static string get_AreNotEqualDeltaFailMsg();
    internal static string get_AreNotEqualFailMsg();
    internal static string get_AreSameGivenValues();
    internal static string get_AssertionFailed();
    internal static string get_AsyncUITestMethodNotSupported();
    internal static string get_AsyncUITestMethodWithNoDispatcherQueue();
    internal static string get_BothCollectionsEmpty();
    internal static string get_BothCollectionsSameElements();
    internal static string get_BothCollectionsSameReference();
    internal static string get_BothSameElements();
    internal static string get_CollectionEqualReason();
    internal static string get_Common_NullInMessages();
    internal static string get_Common_ObjectString();
    internal static string get_ContainsFail();
    internal static string get_DataDrivenResultDisplayName();
    internal static string get_DoNotUseAssertEquals();
    internal static string get_DynamicDataDisplayName();
    internal static string get_DynamicDataIEnumerableEmpty();
    internal static string get_DynamicDataIEnumerableNull();
    internal static string get_DynamicDataValueNull();
    internal static string get_ElementNumbersDontMatch();
    internal static string get_ElementsAtIndexDontMatch();
    internal static string get_ElementTypesAtIndexDontMatch();
    internal static string get_ElementTypesAtIndexDontMatch2();
    internal static string get_EndsWithFail();
    internal static string get_EqualsTesterInvalidArgs();
    internal static string get_ErrorInvalidCast();
    internal static string get_InternalObjectNotValid();
    internal static string get_InvalidParameterToAssert();
    internal static string get_InvalidPropertyType();
    internal static string get_IsInstanceOfFailMsg();
    internal static string get_IsMatchFail();
    internal static string get_IsNotInstanceOfFailMsg();
    internal static string get_IsNotMatchFail();
    internal static string get_NoDataRow();
    internal static string get_NoExceptionThrown();
    internal static string get_NullParameterToAssert();
    internal static string get_NumberOfElementsDiff();
    internal static string get_PrivateAccessorConstructorNotFound();
    internal static string get_PrivateAccessorMemberNotFound();
    internal static string get_StartsWithFail();
    internal static string get_UTF_ExpectedExceptionTypeMustDeriveFromException();
    internal static string get_UTF_FailedToGetExceptionMessage();
    internal static string get_UTF_TestMethodNoException();
    internal static string get_UTF_TestMethodNoExceptionDefault();
    internal static string get_UTF_TestMethodWrongException();
    internal static string get_UTF_TestMethodWrongExceptionDerivedAllowed();
    internal static string get_WrongExceptionThrown();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper : object {
    private static Random Randomizer;
    private int data;
    private IList ienumerableStore;
    public int Data { get; public set; }
    public GenericParameterHelper(int data);
    private static GenericParameterHelper();
    public int get_Data();
    public void set_Data(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual IEnumerator GetEnumerator();
    public object Clone();
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.Helper : object {
    internal static void CheckParameterNotNull(object param, string parameterName, string message);
    internal static void CheckParameterNotNullOrEmpty(string param, string parameterName, string message);
}
[AttributeUsageAttribute("68")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <IgnoreMessage>k__BackingField;
    public string IgnoreMessage { get; private set; }
    public IgnoreAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_IgnoreMessage();
    [CompilerGeneratedAttribute]
private void set_IgnoreMessage(string value);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.InheritanceBehavior : Enum {
    public int value__;
    public static InheritanceBehavior None;
    public static InheritanceBehavior BeforeEachDerivedClass;
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException : UnitTestAssertException {
    public InternalTestFailureException(string msg, Exception ex);
    public InternalTestFailureException(string msg);
}
public interface Microsoft.VisualStudio.TestTools.UnitTesting.ITestDataSource {
    public abstract virtual IEnumerable`1<Object[]> GetData(MethodInfo methodInfo);
    public abstract virtual string GetDisplayName(MethodInfo methodInfo, Object[] data);
}
public interface Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethod {
    public string TestMethodName { get; }
    public string TestClassName { get; }
    public Type ReturnType { get; }
    public Object[] Arguments { get; }
    public ParameterInfo[] ParameterTypes { get; }
    public MethodInfo MethodInfo { get; }
    public abstract virtual string get_TestMethodName();
    public abstract virtual string get_TestClassName();
    public abstract virtual Type get_ReturnType();
    public abstract virtual Object[] get_Arguments();
    public abstract virtual ParameterInfo[] get_ParameterTypes();
    public abstract virtual MethodInfo get_MethodInfo();
    public abstract virtual TestResult Invoke(Object[] arguments);
    public abstract virtual Attribute[] GetAllAttributes(bool inherit);
    public abstract virtual AttributeType[] GetAttributes(bool inherit);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.Logging.Logger : object {
    [CompilerGeneratedAttribute]
private static LogMessageHandler OnLogMessage;
    [CompilerGeneratedAttribute]
public static void add_OnLogMessage(LogMessageHandler value);
    [CompilerGeneratedAttribute]
public static void remove_OnLogMessage(LogMessageHandler value);
    public static void LogMessage(string format, Object[] args);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    public string Owner { get; }
    public OwnerAttribute(string owner);
    [CompilerGeneratedAttribute]
public string get_Owner();
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute : Attribute {
    private static int DefaultParallelWorkers;
    private static ExecutionScope DefaultExecutionScope;
    [CompilerGeneratedAttribute]
private int <Workers>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionScope <Scope>k__BackingField;
    public int Workers { get; public set; }
    public ExecutionScope Scope { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Workers();
    [CompilerGeneratedAttribute]
public void set_Workers(int value);
    [CompilerGeneratedAttribute]
public ExecutionScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ExecutionScope value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; }
    public PriorityAttribute(int priority);
    [CompilerGeneratedAttribute]
public int get_Priority();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert : object {
    private static Object[] Empty;
    private static StringAssert that;
    public static StringAssert That { get; }
    private static StringAssert();
    public static StringAssert get_That();
    public static void Contains(string value, string substring);
    public static void Contains(string value, string substring, StringComparison comparisonType);
    public static void Contains(string value, string substring, string message);
    public static void Contains(string value, string substring, string message, StringComparison comparisonType);
    public static void Contains(string value, string substring, string message, Object[] parameters);
    public static void Contains(string value, string substring, string message, StringComparison comparisonType, Object[] parameters);
    public static void StartsWith(string value, string substring);
    public static void StartsWith(string value, string substring, StringComparison comparisonType);
    public static void StartsWith(string value, string substring, string message);
    public static void StartsWith(string value, string substring, string message, Object[] parameters);
    public static void StartsWith(string value, string substring, string message, StringComparison comparisonType);
    public static void StartsWith(string value, string substring, string message, StringComparison comparisonType, Object[] parameters);
    public static void EndsWith(string value, string substring);
    public static void EndsWith(string value, string substring, StringComparison comparisonType);
    public static void EndsWith(string value, string substring, string message);
    public static void EndsWith(string value, string substring, string message, Object[] parameters);
    public static void EndsWith(string value, string substring, string message, StringComparison comparisonType);
    public static void EndsWith(string value, string substring, string message, StringComparison comparisonType, Object[] parameters);
    public static void Matches(string value, Regex pattern);
    public static void Matches(string value, Regex pattern, string message);
    public static void Matches(string value, Regex pattern, string message, Object[] parameters);
    public static void DoesNotMatch(string value, Regex pattern);
    public static void DoesNotMatch(string value, Regex pattern, string message);
    public static void DoesNotMatch(string value, Regex pattern, string message, Object[] parameters);
}
[AttributeUsageAttribute("69")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute : TestCategoryBaseAttribute {
    private IList`1<string> testCategories;
    public IList`1<string> TestCategories { get; }
    public TestCategoryAttribute(string testCategory);
    public virtual IList`1<string> get_TestCategories();
}
[AttributeUsageAttribute("69")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute : Attribute {
    public IList`1<string> TestCategories { get; }
    public abstract virtual IList`1<string> get_TestCategories();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute : Attribute {
    public virtual TestMethodAttribute GetTestMethodAttribute(TestMethodAttribute testMethodAttribute);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public string DisplayName { get; private set; }
    public TestMethodAttribute(string displayName);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    public virtual TestResult[] Execute(ITestMethod testMethod);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; }
    public string Value { get; }
    public TestPropertyAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestResult : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <TestFailureException>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestContextMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentExecId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InnerResultsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatarowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResultFiles>k__BackingField;
    public string DisplayName { get; public set; }
    public UnitTestOutcome Outcome { get; public set; }
    public Exception TestFailureException { get; public set; }
    public string LogOutput { get; public set; }
    public string LogError { get; public set; }
    public string DebugTrace { get; public set; }
    public string TestContextMessages { get; public set; }
    public Guid ExecutionId { get; public set; }
    public Guid ParentExecId { get; public set; }
    public int InnerResultsCount { get; public set; }
    public TimeSpan Duration { get; public set; }
    public int DatarowIndex { get; public set; }
    public object ReturnValue { get; public set; }
    public IList`1<string> ResultFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public UnitTestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(UnitTestOutcome value);
    [CompilerGeneratedAttribute]
public Exception get_TestFailureException();
    [CompilerGeneratedAttribute]
public void set_TestFailureException(Exception value);
    [CompilerGeneratedAttribute]
public string get_LogOutput();
    [CompilerGeneratedAttribute]
public void set_LogOutput(string value);
    [CompilerGeneratedAttribute]
public string get_LogError();
    [CompilerGeneratedAttribute]
public void set_LogError(string value);
    [CompilerGeneratedAttribute]
public string get_DebugTrace();
    [CompilerGeneratedAttribute]
public void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
public string get_TestContextMessages();
    [CompilerGeneratedAttribute]
public void set_TestContextMessages(string value);
    [CompilerGeneratedAttribute]
public Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentExecId();
    [CompilerGeneratedAttribute]
public void set_ParentExecId(Guid value);
    [CompilerGeneratedAttribute]
public int get_InnerResultsCount();
    [CompilerGeneratedAttribute]
public void set_InnerResultsCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_DatarowIndex();
    [CompilerGeneratedAttribute]
public void set_DatarowIndex(int value);
    [CompilerGeneratedAttribute]
public object get_ReturnValue();
    [CompilerGeneratedAttribute]
public void set_ReturnValue(object value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ResultFiles();
    [CompilerGeneratedAttribute]
public void set_ResultFiles(IList`1<string> value);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout : Enum {
    public int value__;
    public static TestTimeout Infinite;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    public int Timeout { get; }
    public TimeoutAttribute(int timeout);
    public TimeoutAttribute(TestTimeout timeout);
    [CompilerGeneratedAttribute]
public int get_Timeout();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException : Exception {
    protected UnitTestAssertException(string msg, Exception ex);
    protected UnitTestAssertException(string msg);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome : Enum {
    public int value__;
    public static UnitTestOutcome Failed;
    public static UnitTestOutcome Inconclusive;
    public static UnitTestOutcome Passed;
    public static UnitTestOutcome InProgress;
    public static UnitTestOutcome Error;
    public static UnitTestOutcome Timeout;
    public static UnitTestOutcome Aborted;
    public static UnitTestOutcome Unknown;
    public static UnitTestOutcome NotRunnable;
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper : object {
    internal static string GetExceptionMsg(Exception ex);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; private set; }
    public WorkItemAttribute(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
