public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.AdapterTraceLogger : object {
    public sealed virtual void LogError(string format, Object[] args);
    public sealed virtual void LogWarning(string format, Object[] args);
    public sealed virtual void LogInfo(string format, Object[] args);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Constants : object {
    public static TestProperty DeploymentItemsProperty;
    internal static string DllExtension;
    internal static string ExeExtension;
    internal static string AppxPackageExtension;
    private static string DeploymentItemsLabel;
    private static Constants();
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.DiaSessionOperations : object {
    private static MethodInfo methodGetNavigationData;
    private static PropertyInfo propertyFileName;
    private static PropertyInfo propertyMinLineNumber;
    private static Type typeDiaSession;
    private static Type typeDiaNavigationData;
    private static DiaSessionOperations();
    internal static object CreateNavigationSession(string source);
    internal static void GetNavigationData(object navigationSession, string className, string methodName, Int32& minLineNumber, String& fileName);
    internal static void DisposeNavigationSession(object navigationSession);
    internal static void Initialize(string diaSession, string diaNavigationData);
    private static object SafeInvoke(Func`1<T> action, string messageFormatOnException);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.FileOperations : object {
    public sealed virtual Assembly LoadAssembly(string assemblyName, bool isReflectionOnly);
    public sealed virtual string GetAssemblyPath(Assembly assembly);
    public sealed virtual bool DoesFileExist(string assemblyFileName);
    public sealed virtual object CreateNavigationSession(string source);
    public sealed virtual void GetNavigationData(object navigationSession, string className, string methodName, Int32& minLineNumber, String& fileName);
    public sealed virtual void DisposeNavigationSession(object navigationSession);
    public sealed virtual string GetFullFilePath(string assemblyFileName);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.MSTestSettingsProvider : object {
    public sealed virtual void Load(XmlReader reader);
    public sealed virtual IDictionary`2<string, object> GetProperties(string source);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.ReflectionOperations : object {
    public sealed virtual Object[] GetCustomAttributes(MemberInfo memberInfo, bool inherit);
    public sealed virtual Object[] GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    public sealed virtual Object[] GetCustomAttributes(Assembly assembly, Type type);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestContextImplementation : TestContext {
    private static string FullyQualifiedTestClassNameLabel;
    private static string ManagedTypeLabel;
    private static string ManagedMethodLabel;
    private static string TestNameLabel;
    private IDictionary`2<string, object> properties;
    private UnitTestOutcome outcome;
    private ITestMethod testMethod;
    private StringWriter stringWriter;
    private bool stringWriterDisposed;
    public UnitTestOutcome CurrentTestOutcome { get; }
    public string FullyQualifiedTestClassName { get; }
    public string TestName { get; }
    public IDictionary Properties { get; }
    public TestContext Context { get; }
    public TestContextImplementation(ITestMethod testMethod, StringWriter writer, IDictionary`2<string, object> properties);
    private static TestContextImplementation();
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public virtual string get_FullyQualifiedTestClassName();
    public virtual string get_TestName();
    public virtual IDictionary get_Properties();
    public sealed virtual TestContext get_Context();
    public virtual void AddResultFile(string fileName);
    public sealed virtual void SetOutcome(UnitTestOutcome outcome);
    public sealed virtual bool TryGetPropertyValue(string propertyName, Object& propertyValue);
    public sealed virtual void AddProperty(string propertyName, string propertyValue);
    public virtual void Write(string message);
    public virtual void Write(string format, Object[] args);
    public virtual void WriteLine(string message);
    public virtual void WriteLine(string format, Object[] args);
    public sealed virtual IList`1<string> GetResultFiles();
    public sealed virtual string GetDiagnosticMessages();
    public sealed virtual void ClearDiagnosticMessages();
    public sealed virtual void SetDataRow(object dataRow);
    public sealed virtual void SetDataConnection(object dbConnection);
    private object GetPropertyValue(string propertyName);
    private void InitializeProperties();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestDataSource : object {
    private sealed virtual override IEnumerable`1<object> Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.ITestDataSource.GetData(ITestMethod testMethodInfo, ITestContext testContext);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestDeployment : object {
    public sealed virtual bool Deploy(IEnumerable`1<TestCase> testCases, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual KeyValuePair`2[] GetDeploymentItems(MethodInfo method, Type type, ICollection`1<string> warnings);
    public sealed virtual void Cleanup();
    public sealed virtual string GetDeploymentDirectory();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestSource : object {
    private static string SystemAssembliesPrefix;
    private static IEnumerable`1<string> executableExtensions;
    private static HashSet`1<string> systemAssemblies;
    private static HashSet`1<string> platformAssemblies;
    public IEnumerable`1<string> ValidSourceExtensions { get; }
    private static TestSource();
    public sealed virtual IEnumerable`1<string> get_ValidSourceExtensions();
    public sealed virtual bool IsAssemblyReferenced(AssemblyName assemblyName, string source);
    public sealed virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
    private bool ContainsAppxSource(IEnumerable`1<string> sources);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TestSourceHost : object {
    public TestSourceHost(string sourceFileName, IRunSettings runSettings, IFrameworkHandle frameworkHandle);
    public sealed virtual void SetupHost();
    public sealed virtual object CreateInstanceForType(Type type, Object[] args);
    public sealed virtual void Dispose();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.ThreadOperations : object {
    public sealed virtual bool Execute(Action action, int timeout, CancellationToken cancelToken);
    public sealed virtual void ExecuteWithAbortSafety(Action action);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TraceListenerManager : object {
    public TraceListenerManager(TextWriter outputWriter, TextWriter errorWriter);
    public sealed virtual void Add(ITraceListener traceListener);
    public void Close(ITraceListener traceListener);
    public sealed virtual void Dispose(ITraceListener traceListener);
    public sealed virtual void Remove(ITraceListener traceListener);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.TraceListenerWrapper : object {
    public TraceListenerWrapper(TextWriter textWriter);
    public void Close();
    public sealed virtual void Dispose();
    public sealed virtual TextWriter GetWriter();
}
[ComVisibleAttribute("True")]
public abstract class System.MarshalByRefObject : object {
    [SecurityCriticalAttribute]
public abstract virtual object InitializeLifetimeService();
}
[AttributeUsageAttribute("4124")]
[ComVisibleAttribute("True")]
public class System.SerializableAttribute : Attribute {
}
