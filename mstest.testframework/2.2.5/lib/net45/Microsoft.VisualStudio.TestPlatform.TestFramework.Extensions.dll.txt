internal static class Microsoft.VisualStudio.TestTools.UnitTesting.ConfigurationNames : object {
    internal static string SectionName;
    internal static string Beta2SectionName;
    internal static string DataSourcesSectionName;
    internal static string NameAttributeName;
    internal static string ConnectionStringAttributeName;
    internal static string DataAccessMethodAttributeName;
    internal static string DataTableAttributeName;
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement : ConfigurationElement {
    private static ConfigurationProperty NameValue;
    private static ConfigurationProperty ConnectionStringValue;
    private static ConfigurationProperty DataTableNameValue;
    private static ConfigurationProperty DataAccessMethodValue;
    private static ConfigurationPropertyCollection properties;
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("connectionString")]
public string ConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("dataTableName")]
public string DataTableName { get; public set; }
    [ConfigurationPropertyAttribute("dataAccessMethod")]
public string DataAccessMethod { get; public set; }
    internal string Key { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    private static DataSourceElement();
    public string get_Name();
    public void set_Name(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public string get_DataTableName();
    public void set_DataTableName(string value);
    public string get_DataAccessMethod();
    public void set_DataAccessMethod(string value);
    internal string get_Key();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection : ConfigurationElementCollection {
    public DataSourceElement Item { get; }
    public DataSourceElement Item { get; public set; }
    public DataSourceElement get_Item(string name);
    public DataSourceElement get_Item(int index);
    public void set_Item(int index, DataSourceElement value);
    public void Add(DataSourceElement element);
    public void Remove(DataSourceElement element);
    public void Remove(string name);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual void BaseAdd(ConfigurationElement element);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
}
[AttributeUsageAttribute("68")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    public string Path { get; }
    public string OutputDirectory { get; }
    public DeploymentItemAttribute(string path);
    public DeploymentItemAttribute(string path, string outputDirectory);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject : object {
    private static BindingFlags BindToEveryThing;
    private static BindingFlags constructorFlags;
    private object target;
    private Type originalType;
    private Dictionary`2<string, LinkedList`1<MethodInfo>> methodCache;
    public object Target { get; public set; }
    public Type RealType { get; }
    private Dictionary`2<string, LinkedList`1<MethodInfo>> GenericMethodCache { get; }
    public PrivateObject(object obj, string memberToAccess);
    public PrivateObject(string assemblyName, string typeName, Object[] args);
    public PrivateObject(string assemblyName, string typeName, Type[] parameterTypes, Object[] args);
    public PrivateObject(Type type, Object[] args);
    public PrivateObject(Type type, Type[] parameterTypes, Object[] args);
    public PrivateObject(object obj);
    public PrivateObject(object obj, PrivateType type);
    private static PrivateObject();
    public object get_Target();
    public void set_Target(object value);
    public Type get_RealType();
    private Dictionary`2<string, LinkedList`1<MethodInfo>> get_GenericMethodCache();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public object Invoke(string name, Object[] args);
    public object Invoke(string name, Type[] parameterTypes, Object[] args);
    public object Invoke(string name, Type[] parameterTypes, Object[] args, Type[] typeArguments);
    public object Invoke(string name, Object[] args, CultureInfo culture);
    public object Invoke(string name, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object Invoke(string name, BindingFlags bindingFlags, Object[] args);
    public object Invoke(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public object Invoke(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    public object Invoke(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object Invoke(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture, Type[] typeArguments);
    public object GetArrayElement(string name, Int32[] indices);
    public void SetArrayElement(string name, object value, Int32[] indices);
    public object GetArrayElement(string name, BindingFlags bindingFlags, Int32[] indices);
    public void SetArrayElement(string name, BindingFlags bindingFlags, object value, Int32[] indices);
    public object GetField(string name);
    public void SetField(string name, object value);
    public object GetField(string name, BindingFlags bindingFlags);
    public void SetField(string name, BindingFlags bindingFlags, object value);
    public object GetFieldOrProperty(string name);
    public void SetFieldOrProperty(string name, object value);
    public object GetFieldOrProperty(string name, BindingFlags bindingFlags);
    public void SetFieldOrProperty(string name, BindingFlags bindingFlags, object value);
    public object GetProperty(string name, Object[] args);
    public object GetProperty(string name, Type[] parameterTypes, Object[] args);
    public void SetProperty(string name, object value, Object[] args);
    public void SetProperty(string name, Type[] parameterTypes, object value, Object[] args);
    public object GetProperty(string name, BindingFlags bindingFlags, Object[] args);
    public object GetProperty(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public void SetProperty(string name, BindingFlags bindingFlags, object value, Object[] args);
    public void SetProperty(string name, BindingFlags bindingFlags, object value, Type[] parameterTypes, Object[] args);
    private static void ValidateAccessString(string access);
    private object InvokeHelper(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    private void ConstructFrom(object obj);
    private void BuildGenericMethodCacheForType(Type t);
    private MethodInfo GetGenericMethodFromCache(string methodName, Type[] parameterTypes, Type[] typeArguments, BindingFlags bindingFlags, ParameterModifier[] modifiers);
    private LinkedList`1<MethodInfo> GetMethodCandidates(string methodName, Type[] parameterTypes, Type[] typeArguments, BindingFlags bindingFlags, ParameterModifier[] modifiers);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType : object {
    private static BindingFlags BindToEveryThing;
    private Type type;
    public Type ReferencedType { get; }
    public PrivateType(string assemblyName, string typeName);
    public PrivateType(Type type);
    public Type get_ReferencedType();
    public object InvokeStatic(string name, Object[] args);
    public object InvokeStatic(string name, Type[] parameterTypes, Object[] args);
    public object InvokeStatic(string name, Type[] parameterTypes, Object[] args, Type[] typeArguments);
    public object InvokeStatic(string name, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Object[] args);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture, Type[] typeArguments);
    public object GetStaticArrayElement(string name, Int32[] indices);
    public void SetStaticArrayElement(string name, object value, Int32[] indices);
    public object GetStaticArrayElement(string name, BindingFlags bindingFlags, Int32[] indices);
    public void SetStaticArrayElement(string name, BindingFlags bindingFlags, object value, Int32[] indices);
    public object GetStaticField(string name);
    public void SetStaticField(string name, object value);
    public object GetStaticField(string name, BindingFlags bindingFlags);
    public void SetStaticField(string name, BindingFlags bindingFlags, object value);
    public object GetStaticFieldOrProperty(string name);
    public void SetStaticFieldOrProperty(string name, object value);
    public object GetStaticFieldOrProperty(string name, BindingFlags bindingFlags);
    public void SetStaticFieldOrProperty(string name, BindingFlags bindingFlags, object value);
    public object GetStaticProperty(string name, Object[] args);
    public void SetStaticProperty(string name, object value, Object[] args);
    public void SetStaticProperty(string name, object value, Type[] parameterTypes, Object[] args);
    public object GetStaticProperty(string name, BindingFlags bindingFlags, Object[] args);
    public object GetStaticProperty(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public void SetStaticProperty(string name, BindingFlags bindingFlags, object value, Object[] args);
    public void SetStaticProperty(string name, BindingFlags bindingFlags, object value, Type[] parameterTypes, Object[] args);
    private object InvokeHelperStatic(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TestTools.UnitTesting.RuntimeTypeHelper : object {
    internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2);
    internal static int GetHierarchyDepth(Type t);
    internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches);
    internal static MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
    internal static int FindMostSpecificMethod(MethodBase m1, Int32[] paramOrder1, Type paramArrayType1, MethodBase m2, Int32[] paramOrder2, Type paramArrayType2, Type[] types, Object[] args);
    internal static int FindMostSpecific(ParameterInfo[] p1, Int32[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, Int32[] paramOrder2, Type paramArrayType2, Type[] types, Object[] args);
    internal static int FindMostSpecificType(Type c1, Type c2, Type t);
}
public static class Microsoft.VisualStudio.TestTools.UnitTesting.TestConfiguration : object {
    private static TestConfigurationSection configurationSection;
    public static TestConfigurationSection ConfigurationSection { get; }
    private static TestConfiguration();
    public static TestConfigurationSection get_ConfigurationSection();
    private static TestConfigurationSection LoadConfiguration();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection : ConfigurationSection {
    private static ConfigurationProperty DataSourcesValue;
    private static ConfigurationPropertyCollection properties;
    [ConfigurationPropertyAttribute("dataSources")]
public DataSourceElementCollection DataSources { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    private static TestConfigurationSection();
    public DataSourceElementCollection get_DataSources();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestContext : object {
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    public IDictionary Properties { get; }
    public CancellationTokenSource CancellationTokenSource { get; protected set; }
    public DataRow DataRow { get; }
    public DbConnection DataConnection { get; }
    public string TestRunDirectory { get; }
    public string DeploymentDirectory { get; }
    public string ResultsDirectory { get; }
    public string TestRunResultsDirectory { get; }
    public string TestResultsDirectory { get; }
    public string TestDir { get; }
    public string TestDeploymentDir { get; }
    public string TestLogsDir { get; }
    public string FullyQualifiedTestClassName { get; }
    public string ManagedType { get; }
    public string ManagedMethod { get; }
    public string TestName { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    public abstract virtual IDictionary get_Properties();
    [CompilerGeneratedAttribute]
public virtual CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected virtual void set_CancellationTokenSource(CancellationTokenSource value);
    public abstract virtual DataRow get_DataRow();
    public abstract virtual DbConnection get_DataConnection();
    public virtual string get_TestRunDirectory();
    public virtual string get_DeploymentDirectory();
    public virtual string get_ResultsDirectory();
    public virtual string get_TestRunResultsDirectory();
    public virtual string get_TestResultsDirectory();
    public virtual string get_TestDir();
    public virtual string get_TestDeploymentDir();
    public virtual string get_TestLogsDir();
    public virtual string get_FullyQualifiedTestClassName();
    public virtual string get_ManagedType();
    public virtual string get_ManagedMethod();
    public virtual string get_TestName();
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public abstract virtual void Write(string message);
    public abstract virtual void Write(string format, Object[] args);
    public abstract virtual void WriteLine(string message);
    public abstract virtual void WriteLine(string format, Object[] args);
    public abstract virtual void AddResultFile(string fileName);
    public abstract virtual void BeginTimer(string timerName);
    public abstract virtual void EndTimer(string timerName);
    private T GetProperty(string name);
}
