public class Microsoft.VisualStudio.TestTools.UnitTesting.AppContainer.UITestMethodAttribute : TestMethodAttribute {
    [CompilerGeneratedAttribute]
private static DispatcherQueue <DispatcherQueue>k__BackingField;
    public static DispatcherQueue DispatcherQueue { get; public set; }
    [CompilerGeneratedAttribute]
public static DispatcherQueue get_DispatcherQueue();
    [CompilerGeneratedAttribute]
public static void set_DispatcherQueue(DispatcherQueue value);
    public virtual TestResult[] Execute(ITestMethod testMethod);
}
[AttributeUsageAttribute("68")]
internal class Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    public string Path { get; }
    public string OutputDirectory { get; }
    public DeploymentItemAttribute(string path);
    public DeploymentItemAttribute(string path, string outputDirectory);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestContext : object {
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    public IDictionary Properties { get; }
    public CancellationTokenSource CancellationTokenSource { get; protected set; }
    public string FullyQualifiedTestClassName { get; }
    public string ManagedType { get; }
    public string ManagedMethod { get; }
    public string TestName { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    public abstract virtual IDictionary get_Properties();
    [CompilerGeneratedAttribute]
public virtual CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
protected virtual void set_CancellationTokenSource(CancellationTokenSource value);
    public virtual string get_FullyQualifiedTestClassName();
    public virtual string get_ManagedType();
    public virtual string get_ManagedMethod();
    public virtual string get_TestName();
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public abstract virtual void Write(string message);
    public abstract virtual void Write(string format, Object[] args);
    public abstract virtual void WriteLine(string message);
    public abstract virtual void WriteLine(string format, Object[] args);
    private T GetProperty(string name);
}
