[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum MudBlazor.Analyzers.AllowedAttributePattern : Enum {
    public int value__;
    public static AllowedAttributePattern Any;
    public static AllowedAttributePattern LowerCase;
    public static AllowedAttributePattern DataAndAria;
    public static AllowedAttributePattern None;
}
public enum MudBlazor.Analyzers.IllegalParameters : Enum {
    public int value__;
    public static IllegalParameters Disabled;
    public static IllegalParameters V7CaseSensitive;
    public static IllegalParameters V7IgnoreCase;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Analyzers.IllegalParameterSet : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<INamedTypeSymbol, String[]> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private StringComparer <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IllegalParameters <IllegalParameters>k__BackingField;
    private Compilation _compilation;
    internal Dictionary`2<INamedTypeSymbol, String[]> Parameters { get; internal set; }
    internal StringComparer Comparer { get; internal set; }
    internal IllegalParameters IllegalParameters { get; internal set; }
    internal IllegalParameterSet(Compilation compilation, IllegalParameters illegalParameters);
    [CompilerGeneratedAttribute]
internal Dictionary`2<INamedTypeSymbol, String[]> get_Parameters();
    [CompilerGeneratedAttribute]
internal void set_Parameters(Dictionary`2<INamedTypeSymbol, String[]> value);
    [CompilerGeneratedAttribute]
internal StringComparer get_Comparer();
    [CompilerGeneratedAttribute]
internal void set_Comparer(StringComparer value);
    [CompilerGeneratedAttribute]
internal IllegalParameters get_IllegalParameters();
    [CompilerGeneratedAttribute]
internal void set_IllegalParameters(IllegalParameters value);
    private void AddIllegalParameterSet(string typeName, String[] parameterSet);
}
[AttributeUsageAttribute("2432")]
internal class MudBlazor.Analyzers.Internal.AllowNullAttribute : Attribute {
}
[ExtensionAttribute]
internal static class MudBlazor.Analyzers.Internal.CompilationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Analyzers.Internal.ComponentDescriptor : object {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Parameters>k__BackingField;
    internal string TagName { get; internal set; }
    internal HashSet`1<string> Parameters { get; }
    [CompilerGeneratedAttribute]
internal string get_TagName();
    [CompilerGeneratedAttribute]
internal void set_TagName(string value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_Parameters();
    internal static ComponentDescriptor GetComponentDescriptor(ITypeSymbol typeSymbol, INamedTypeSymbol parameterSymbol);
}
[AttributeUsageAttribute("2432")]
internal class MudBlazor.Analyzers.Internal.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class MudBlazor.Analyzers.Internal.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class MudBlazor.Analyzers.Internal.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class MudBlazor.Analyzers.Internal.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class MudBlazor.Analyzers.Internal.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class MudBlazor.Analyzers.Internal.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class MudBlazor.Analyzers.Internal.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MudBlazor.Analyzers.Internal.MetadataSymbolComparer : object {
    public sealed virtual bool Equals(ISymbol x, ISymbol y);
    public sealed virtual int GetHashCode(ISymbol obj);
}
[AttributeUsageAttribute("10624")]
internal class MudBlazor.Analyzers.Internal.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class MudBlazor.Analyzers.Internal.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class MudBlazor.Analyzers.Internal.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MudBlazor.Analyzers.Internal.OperationExtensions : object {
    [ExtensionAttribute]
internal static INamedTypeSymbol GetClassSymbol(IOperation operation, OperationAnalysisContext context);
    [ExtensionAttribute]
internal static string GetClassName(IOperation invocation, OperationAnalysisContext context);
    [ExtensionAttribute]
internal static string GetRazorFilePath(IOperation invocation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MudBlazor.Analyzers.Internal.SymbolExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualTo(ISymbol symbol, ISymbol expectedType);
    [ExtensionAttribute]
public static bool IsEqualTo(ISymbol symbol, ISymbol expectedType, IEqualityComparer`1<ISymbol> comparer);
}
[ExtensionAttribute]
internal static class MudBlazor.Analyzers.Internal.SyntaxNodeExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ClassDeclarationSyntax FindClass(SyntaxNode node);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MudBlazor.Analyzers.Internal.TypeSymbolExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IList`1<INamedTypeSymbol> GetAllInterfacesIncludingThis(ITypeSymbol type);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool InheritsFrom(ITypeSymbol classSymbol, ITypeSymbol baseClassType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool InheritsFrom(ITypeSymbol classSymbol, ITypeSymbol baseClassType, IEqualityComparer`1<ISymbol> comparer);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool Implements(ITypeSymbol classSymbol, ITypeSymbol interfaceType);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrImplements(ITypeSymbol symbol, ITypeSymbol interfaceType);
    [ExtensionAttribute]
public static AttributeData GetAttribute(ISymbol symbol, ITypeSymbol attributeType, bool inherits);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool HasAttribute(ISymbol symbol, ITypeSymbol attributeType, bool inherits);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrInheritFrom(ITypeSymbol symbol, ITypeSymbol expectedType, IEqualityComparer`1<ISymbol> comparer);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrInheritFrom(ITypeSymbol symbol, ITypeSymbol expectedType);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol[] expectedTypes);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1, ITypeSymbol expectedType2);
    [ExtensionAttribute]
public static bool IsEqualToAny(ITypeSymbol symbol, ITypeSymbol expectedType1, ITypeSymbol expectedType2, ITypeSymbol expectedType3);
    [ExtensionAttribute]
public static bool IsObject(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsString(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsChar(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsInt32(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsBoolean(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsDateTime(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsEnumeration(ITypeSymbol symbol);
    [ExtensionAttribute]
public static INamedTypeSymbol GetEnumerationType(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsNumberType(ITypeSymbol symbol);
    [ExtensionAttribute]
public static ITypeSymbol GetUnderlyingNullableTypeOrSelf(ITypeSymbol typeSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.Analyzers.MudComponentUnknownParametersAnalyzer : DiagnosticAnalyzer {
    public static string DiagnosticId1;
    public static string DiagnosticId2;
    public static string ClassNamePropertyKey;
    private static LocalizableString _title;
    private static LocalizableString _parameterMessageFormat;
    private static LocalizableString _attributeMessageFormat;
    private static LocalizableString _description;
    private static LocalizableResourceString _url;
    private static string Category;
    public static string DebugAnalyzerProperty;
    public static string AllowedAttributePatternProperty;
    public static string IllegalParametersProperty;
    public static DiagnosticDescriptor ParameterDescriptor;
    public static DiagnosticDescriptor AttributeDescriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticDescriptor> _supportedDiagnostics;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MudComponentUnknownParametersAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MudBlazor.Analyzers.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MUD0001Description { get; }
    internal static string MUD0001MessageFormat { get; }
    internal static string MUD0001Title { get; }
    internal static string MUD0001Url { get; }
    internal static string MUD0002MessageFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MUD0001Description();
    internal static string get_MUD0001MessageFormat();
    internal static string get_MUD0001Title();
    internal static string get_MUD0001Url();
    internal static string get_MUD0002MessageFormat();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
