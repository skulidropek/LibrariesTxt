internal static class __Blazor.MudBlazor.Charts.Legend.TypeInference : object {
    public static void CreateMudCheckBox_0(RenderTreeBuilder __builder, int seq, int __seq0, T __arg0, int __seq1, EventCallback`1<T> __arg1);
}
internal static class __Blazor.MudBlazor.MudAutocomplete.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateMudInput_1(RenderTreeBuilder __builder, int seq, int __seq0, InputType __arg0, int __seq1, string __arg1, int __seq2, Margin __arg2, int __seq3, Variant __arg3, int __seq4, Typo __arg4, int __seq5, string __arg5, int __seq6, bool __arg6, int __seq7, T __arg7, int __seq8, bool __arg8, int __seq9, bool __arg9, int __seq10, bool __arg10, int __seq11, bool __arg11, int __seq12, string __arg12, int __seq13, string __arg13, int __seq14, string __arg14, int __seq15, EventCallback`1<MouseEventArgs> __arg15, int __seq16, string __arg16, int __seq17, Adornment __arg17, int __seq18, Color __arg18, int __seq19, Size __arg19, int __seq20, string __arg20, int __seq21, string __arg21, int __seq22, bool __arg22, int __seq23, EventCallback`1<MouseEventArgs> __arg23, int __seq24, string __arg24, int __seq25, int __arg25, int __seq26, object __arg26, int __seq27, IEnumerable`1<KeyValuePair`2<string, object>> __arg27, int __seq28, EventCallback`1<string> __arg28, int __seq29, object __arg29, int __seq30, object __arg30, int __seq31, EventCallback`1<FocusEventArgs> __arg31, int __seq32, EventCallback`1<KeyboardEventArgs> __arg32, int __seq33, EventCallback`1<KeyboardEventArgs> __arg33, int __seq34, bool __arg34, int __seq35, string __arg35, int __seq36, bool __arg36, int __seq37, InputMode __arg37, int __seq38, string __arg38, int __seq39, bool __arg39, int __seq40, bool __arg40, int __seq41, string __arg41, int __seq42, object __arg42, int __seq43, Action`1<MudInput`1<T>> __arg43);
}
internal static class __Blazor.MudBlazor.MudAvatarGroup.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudBaseDatePicker.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudBreadcrumbs.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudBreakpointProvider.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudCarousel.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudChart.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudChipSet.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, TValue __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudColorPicker.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudDataGrid.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, TValue __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, TValue __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_2(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, bool __arg1, int __seq2, TValue __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateMudTextField_3(RenderTreeBuilder __builder, int seq, int __seq0, double __arg0, int __seq1, EventCallback`1<string> __arg1, int __seq2, Adornment __arg2, int __seq3, string __arg3, int __seq4, Margin __arg4, int __seq5, bool __arg5, int __seq6, T __arg6, int __seq7, EventCallback`1<T> __arg7);
    public static void CreateMudVirtualize_4(RenderTreeBuilder __builder, int seq, int __seq0, ItemsProviderDelegate`1<T> __arg0, int __seq1, bool __arg1, int __seq2, ICollection`1<T> __arg2, int __seq3, int __arg3, int __seq4, float __arg4, int __seq5, RenderFragment __arg5, int __seq6, RenderFragment`1<T> __arg6, int __seq7, Action`1<MudVirtualize`1<T>> __arg7);
    public static void CreateCascadingValue_5(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateMudVirtualize_6(RenderTreeBuilder __builder, int seq, int __seq0, ItemsProviderDelegate`1<T> __arg0, int __seq1, bool __arg1, int __seq2, ICollection`1<T> __arg2, int __seq3, int __arg3, int __seq4, float __arg4, int __seq5, RenderFragment __arg5, int __seq6, RenderFragment`1<T> __arg6, int __seq7, Action`1<MudVirtualize`1<T>> __arg7);
    public static void CreateCascadingValue_7(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_8(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, string __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateMudSelect_9(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, string __arg1, int __seq2, bool __arg2, int __seq3, Margin __arg3, int __seq4, string __arg4, int __seq5, T __arg5, int __seq6, EventCallback`1<T> __arg6, int __seq7, RenderFragment __arg7);
    public static void CreateMudSelectItem_10(RenderTreeBuilder __builder, int seq, int __seq0, T __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateMudSelect_11(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, bool __arg1, int __seq2, Margin __arg2, int __seq3, string __arg3, int __seq4, T __arg4, int __seq5, EventCallback`1<T> __arg5, int __seq6, RenderFragment __arg6);
    public static void CreateMudSelectItem_12(RenderTreeBuilder __builder, int seq, int __seq0, T __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudDateRangePicker.TypeInference : object {
    public static void CreateMudRangeInput_0(RenderTreeBuilder __builder, int seq, int __seq0, IEnumerable`1<KeyValuePair`2<string, object>> __arg0, int __seq1, InputType __arg1, int __seq2, string __arg2, int __seq3, string __arg3, int __seq4, Variant __arg4, int __seq5, bool __arg5, int __seq6, string __arg6, int __seq7, bool __arg7, int __seq8, Adornment __arg8, int __seq9, string __arg9, int __seq10, Color __arg10, int __seq11, Size __arg11, int __seq12, EventCallback`1<MouseEventArgs> __arg12, int __seq13, bool __arg13, int __seq14, string __arg14, int __seq15, bool __arg15, int __seq16, string __arg16, int __seq17, Margin __arg17, int __seq18, string __arg18, int __seq19, string __arg19, int __seq20, string __arg20, int __seq21, string __arg21, int __seq22, bool __arg22, int __seq23, bool __arg23, int __seq24, Range`1<T> __arg24, int __seq25, EventCallback`1<Range`1<T>> __arg25, int __seq26, Action`1<MudRangeInput`1<T>> __arg26);
}
internal static class __Blazor.MudBlazor.MudDialog.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, string __arg2, int __seq3, RenderFragment __arg3);
}
internal static class __Blazor.MudBlazor.MudDialogInstance.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudDialogProvider.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudDrawer.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudDrawerContainer.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudDropContainer.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudExpansionPanels.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudFileUpload.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudForm.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, string __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_2(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, string __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudGrid.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudLayout.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, TValue __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudList.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudMenu.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudMessageBox.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateCascadingValue_2(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudNavGroup.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudNavMenu.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudNumericField.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
}
internal static class __Blazor.MudBlazor.MudPicker.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
}
internal static class __Blazor.MudBlazor.MudRadioGroup.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudRating.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudRTLProvider.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, string __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudSelect.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateMudInput_1(RenderTreeBuilder __builder, int seq, int __seq0, InputType __arg0, int __seq1, string __arg1, int __seq2, Margin __arg2, int __seq3, string __arg3, int __seq4, string __arg4, int __seq5, Variant __arg5, int __seq6, Typo __arg6, int __seq7, bool __arg7, int __seq8, T __arg8, int __seq9, bool __arg9, int __seq10, bool __arg10, int __seq11, bool __arg11, int __seq12, bool __arg12, int __seq13, string __arg13, int __seq14, string __arg14, int __seq15, string __arg15, int __seq16, string __arg16, int __seq17, string __arg17, int __seq18, Adornment __arg18, int __seq19, Color __arg19, int __seq20, Size __arg20, int __seq21, string __arg21, int __seq22, EventCallback`1<MouseEventArgs> __arg22, int __seq23, bool __arg23, int __seq24, string __arg24, int __seq25, EventCallback`1<MouseEventArgs> __arg25, int __seq26, IEnumerable`1<KeyValuePair`2<string, object>> __arg26, int __seq27, EventCallback`1<FocusEventArgs> __arg27, int __seq28, bool __arg28, int __seq29, string __arg29, int __seq30, bool __arg30, int __seq31, RenderFragment __arg31, int __seq32, Action`1<MudInput`1<T>> __arg32);
    public static void CreateCascadingValue_2(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateMudListItem_3(RenderTreeBuilder __builder, int seq, int __seq0, T __arg0, int __seq1, string __arg1, int __seq2, string __arg2, int __seq3, EventCallback`1<MouseEventArgs> __arg3, int __seq4, bool __arg4, int __seq5, Nullable`1<bool> __arg5, int __seq6, string __arg6);
    public static void CreateCascadingValue_4(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_5(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudSelectItem.TypeInference : object {
    public static void CreateMudListItem_0(RenderTreeBuilder __builder, int seq, int __seq0, IEnumerable`1<KeyValuePair`2<string, object>> __arg0, int __seq1, T __arg1, int __seq2, object __arg2, int __seq3, EventCallback`1<MouseEventArgs> __arg3, int __seq4, bool __arg4, int __seq5, string __arg5, int __seq6, bool __arg6, int __seq7, string __arg7, int __seq8, string __arg8, int __seq9, RenderFragment __arg9);
}
internal static class __Blazor.MudBlazor.MudTable.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateMudSelectItem_2(RenderTreeBuilder __builder, int seq, int __seq0, T __arg0, int __seq1, RenderFragment __arg1);
    public static void CreateMudVirtualize_3(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, ICollection`1<T> __arg1, int __seq2, int __arg2, int __seq3, float __arg3, int __seq4, RenderFragment`1<T> __arg4);
    public static void CreateCascadingValue_4(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateMudVirtualize_5(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, ICollection`1<T> __arg1, int __seq2, int __arg2, int __seq3, float __arg3, int __seq4, RenderFragment`1<T> __arg4);
    public static void CreateCascadingValue_6(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudTablePager.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
}
internal static class __Blazor.MudBlazor.MudTabs.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudTextField.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, string __arg0, int __seq1, TValue __arg1, int __seq2, bool __arg2, int __seq3, RenderFragment __arg3);
}
internal static class __Blazor.MudBlazor.MudTFootRow.TypeInference : object {
    public static void CreateMudCheckBox_0(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, bool __arg1, int __seq2, string __arg2, int __seq3, T __arg3, int __seq4, EventCallback`1<T> __arg4);
}
internal static class __Blazor.MudBlazor.MudTHeadRow.TypeInference : object {
    public static void CreateMudCheckBox_0(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, bool __arg1, int __seq2, string __arg2, int __seq3, T __arg3, int __seq4, EventCallback`1<T> __arg4);
}
internal static class __Blazor.MudBlazor.MudTimeline.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, RenderFragment __arg1);
}
internal static class __Blazor.MudBlazor.MudTimePicker.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudTimeSeriesChart.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudToggleGroup.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudTr.TypeInference : object {
    public static void CreateMudCheckBox_0(RenderTreeBuilder __builder, int seq, int __seq0, bool __arg0, int __seq1, bool __arg1, int __seq2, bool __arg2, int __seq3, string __arg3, int __seq4, T __arg4, int __seq5, EventCallback`1<T> __arg5);
}
internal static class __Blazor.MudBlazor.MudTreeView.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
}
internal static class __Blazor.MudBlazor.MudTreeViewItem.TypeInference : object {
    public static void CreateCascadingValue_0(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateCascadingValue_1(RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, bool __arg1, int __seq2, RenderFragment __arg2);
    public static void CreateMudTreeView_2(RenderTreeBuilder __builder, int seq, int __seq0, IReadOnlyCollection`1<TreeItemData`1<T>> __arg0, int __seq1, RenderFragment`1<TreeItemData`1<T>> __arg1, int __seq2, string __arg2, int __seq3, RenderFragment __arg3);
    public static void CreateMudTreeView_2_CaptureParameters(IReadOnlyCollection`1<TreeItemData`1<T>> __arg0, IReadOnlyCollection`1& __arg0_out, RenderFragment`1<TreeItemData`1<T>> __arg1, RenderFragment`1& __arg1_out, string __arg2, String& __arg2_out);
}
internal static class __Blazor.MudBlazor.MudVirtualize.TypeInference : object {
    public static void CreateVirtualize_0(RenderTreeBuilder __builder, int seq, int __seq0, ItemsProviderDelegate`1<TItem> __arg0, int __seq1, int __arg1, int __seq2, float __arg2, int __seq3, string __arg3, int __seq4, RenderFragment`1<TItem> __arg4, int __seq5, RenderFragment`1<PlaceholderContext> __arg5, int __seq6, Action`1<Virtualize`1<TItem>> __arg6);
    public static void CreateVirtualize_1(RenderTreeBuilder __builder, int seq, int __seq0, ICollection`1<TItem> __arg0, int __seq1, int __arg1, int __seq2, float __arg2, int __seq3, string __arg3, int __seq4, RenderFragment`1<TItem> __arg4, int __seq5, RenderFragment`1<PlaceholderContext> __arg5, int __seq6, Action`1<Virtualize`1<TItem>> __arg6);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class MudBlazor._Imports : ComponentBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MudBlazor.AbstractLocalizationInterceptor : object {
    [CompilerGeneratedAttribute]
private IStringLocalizer <Localizer>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MudLocalizer <MudLocalizer>k__BackingField;
    protected internal IStringLocalizer Localizer { get; }
    [NullableAttribute("2")]
protected internal MudLocalizer MudLocalizer { get; }
    protected AbstractLocalizationInterceptor(ILoggerFactory loggerFactory, MudLocalizer mudLocalizer);
    protected AbstractLocalizationInterceptor(IStringLocalizer localizer, MudLocalizer mudLocalizer);
    [CompilerGeneratedAttribute]
protected internal IStringLocalizer get_Localizer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected internal MudLocalizer get_MudLocalizer();
    public abstract virtual LocalizedString Handle(string key, Object[] arguments);
    internal static IStringLocalizer DefaultLanguageResourceReader(ILoggerFactory loggerFactory);
}
public class MudBlazor.ActivatableCallback : object {
    [CompilerGeneratedAttribute]
private Action`2<object, MouseEventArgs> <ActivateCallback>k__BackingField;
    public Action`2<object, MouseEventArgs> ActivateCallback { get; public set; }
    [CompilerGeneratedAttribute]
public Action`2<object, MouseEventArgs> get_ActivateCallback();
    [CompilerGeneratedAttribute]
public void set_ActivateCallback(Action`2<object, MouseEventArgs> value);
    public sealed virtual void Activate(object sender, MouseEventArgs args);
}
public enum MudBlazor.Adornment : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static Adornment None;
    [DescriptionAttribute("start")]
public static Adornment Start;
    [DescriptionAttribute("end")]
public static Adornment End;
}
[ExtensionAttribute]
public static class MudBlazor.AdornmentSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Adornment mudEnum);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.AggregateDefinition`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AggregateDefinitionExpressionCache<T> _expressionCache;
    [CompilerGeneratedAttribute]
private AggregateType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumberFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <DisplayFormat>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<T>, string> <CustomAggregate>k__BackingField;
    public AggregateType Type { get; public set; }
    public string NumberFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    [NullableAttribute("1")]
public string DisplayFormat { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IEnumerable`1<T>, string> CustomAggregate { get; public set; }
    [CompilerGeneratedAttribute]
public AggregateType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(AggregateType value);
    [CompilerGeneratedAttribute]
public string get_NumberFormat();
    [CompilerGeneratedAttribute]
public void set_NumberFormat(string value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_DisplayFormat();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_DisplayFormat(string value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<T>, string> get_CustomAggregate();
    [CompilerGeneratedAttribute]
public void set_CustomAggregate(Func`2<IEnumerable`1<T>, string> value);
    [NullableContextAttribute("1")]
public string GetValue(LambdaExpression propertyExpression, IEnumerable`1<T> items);
    [NullableContextAttribute("1")]
public static AggregateDefinition`1<T> SimpleAvg();
    public static AggregateDefinition`1<T> SimpleAvg(string numberFormat, CultureInfo culture);
    [NullableContextAttribute("1")]
public static AggregateDefinition`1<T> SimpleCount();
    public static AggregateDefinition`1<T> SimpleCount(string numberFormat, CultureInfo culture);
    [NullableContextAttribute("1")]
public static AggregateDefinition`1<T> SimpleMax();
    public static AggregateDefinition`1<T> SimpleMax(string numberFormat, CultureInfo culture);
    [NullableContextAttribute("1")]
public static AggregateDefinition`1<T> SimpleMin();
    public static AggregateDefinition`1<T> SimpleMin(string numberFormat, CultureInfo culture);
    [NullableContextAttribute("1")]
public static AggregateDefinition`1<T> SimpleSum();
    public static AggregateDefinition`1<T> SimpleSum(string numberFormat, CultureInfo culture);
}
public enum MudBlazor.AggregateType : Enum {
    public int value__;
    public static AggregateType Avg;
    public static AggregateType Count;
    public static AggregateType Custom;
    public static AggregateType Max;
    public static AggregateType Min;
    public static AggregateType Sum;
}
public enum MudBlazor.Align : Enum {
    public int value__;
    [DescriptionAttribute("inherit")]
public static Align Inherit;
    [DescriptionAttribute("left")]
public static Align Left;
    [DescriptionAttribute("center")]
public static Align Center;
    [DescriptionAttribute("right")]
public static Align Right;
    [DescriptionAttribute("justify")]
public static Align Justify;
    [DescriptionAttribute("start")]
public static Align Start;
    [DescriptionAttribute("end")]
public static Align End;
}
public enum MudBlazor.AlignItems : Enum {
    public int value__;
    [DescriptionAttribute("baseline")]
public static AlignItems Baseline;
    [DescriptionAttribute("center")]
public static AlignItems Center;
    [DescriptionAttribute("start")]
public static AlignItems Start;
    [DescriptionAttribute("end")]
public static AlignItems End;
    [DescriptionAttribute("stretch")]
public static AlignItems Stretch;
}
[ExtensionAttribute]
public static class MudBlazor.AlignItemsSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(AlignItems mudEnum);
}
[ExtensionAttribute]
public static class MudBlazor.AlignSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Align mudEnum);
}
public enum MudBlazor.Anchor : Enum {
    public int value__;
    [DescriptionAttribute("left")]
public static Anchor Left;
    [DescriptionAttribute("right")]
public static Anchor Right;
    [DescriptionAttribute("start")]
public static Anchor Start;
    [DescriptionAttribute("end")]
public static Anchor End;
    [DescriptionAttribute("top")]
public static Anchor Top;
    [DescriptionAttribute("bottom")]
public static Anchor Bottom;
}
[ExtensionAttribute]
public static class MudBlazor.AnchorSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Anchor mudEnum);
}
public enum MudBlazor.Animation : Enum {
    public int value__;
    [DescriptionAttribute("false")]
public static Animation False;
    [DescriptionAttribute("pulse")]
public static Animation Pulse;
    [DescriptionAttribute("wave")]
public static Animation Wave;
}
[ExtensionAttribute]
public static class MudBlazor.AnimationSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Animation mudEnum);
}
public abstract class MudBlazor.BaseMask : object {
    protected bool _initialized;
    protected Dictionary`2<char, MaskChar> _maskDict;
    protected MaskChar[] _maskChars;
    protected HashSet`1<char> _delimiters;
    [CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CaretPos>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ValueTuple`2<int, int>> <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowOnlyDelimiters>k__BackingField;
    public string Mask { get; protected set; }
    public string Text { get; protected set; }
    public int CaretPos { get; public set; }
    public Nullable`1<ValueTuple`2<int, int>> Selection { get; public set; }
    public bool AllowOnlyDelimiters { get; public set; }
    public MaskChar[] MaskChars { get; public set; }
    protected void Init();
    protected virtual void InitInternals();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Mask();
    [CompilerGeneratedAttribute]
protected void set_Mask(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Text();
    [CompilerGeneratedAttribute]
protected void set_Text(string value);
    public virtual string GetCleanText();
    [CompilerGeneratedAttribute]
public sealed virtual int get_CaretPos();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CaretPos(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<ValueTuple`2<int, int>> get_Selection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Selection(Nullable`1<ValueTuple`2<int, int>> value);
    [CompilerGeneratedAttribute]
public bool get_AllowOnlyDelimiters();
    [CompilerGeneratedAttribute]
public void set_AllowOnlyDelimiters(bool value);
    public MaskChar[] get_MaskChars();
    public void set_MaskChars(MaskChar[] value);
    public abstract virtual void Insert(string input);
    public abstract virtual void Delete();
    public abstract virtual void Backspace();
    public sealed virtual void Clear();
    public sealed virtual void SetText(string text);
    protected virtual void UpdateText(string text);
    protected abstract virtual void DeleteSelection(bool align);
    protected virtual bool IsDelimiter(char maskChar);
    public virtual void UpdateFrom(IMask o);
    protected virtual void Refresh();
    internal static ValueTuple`2<string, string> SplitAt(string text, int pos);
    protected static int ConsolidateCaret(string text, int caretPos);
    protected void ConsolidateSelection();
    internal static ValueTuple`3<string, string, string> SplitSelection(string text, ValueTuple`2<int, int> selection);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <InitInternals>b__5_1(char c);
    [CompilerGeneratedAttribute]
private bool <UpdateText>b__35_0(char c);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.BaseTypography : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <FontFamily>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FontWeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LetterSpacing>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TextTransform>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] FontFamily { get; public set; }
    public int FontWeight { get; public set; }
    public string FontSize { get; public set; }
    public double LineHeight { get; public set; }
    public string LetterSpacing { get; public set; }
    [NullableAttribute("1")]
public string TextTransform { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_FontFamily();
    [CompilerGeneratedAttribute]
public void set_FontFamily(String[] value);
    [CompilerGeneratedAttribute]
public int get_FontWeight();
    [CompilerGeneratedAttribute]
public void set_FontWeight(int value);
    [CompilerGeneratedAttribute]
public string get_FontSize();
    [CompilerGeneratedAttribute]
public void set_FontSize(string value);
    [CompilerGeneratedAttribute]
public double get_LineHeight();
    [CompilerGeneratedAttribute]
public void set_LineHeight(double value);
    [CompilerGeneratedAttribute]
public string get_LetterSpacing();
    [CompilerGeneratedAttribute]
public void set_LetterSpacing(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_TextTransform();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TextTransform(string value);
}
internal class MudBlazor.BinaryReplacer : ExpressionVisitor {
    private ExpressionType _from;
    private ExpressionType _to;
    public BinaryReplacer(ExpressionType from, ExpressionType to);
    [NullableContextAttribute("1")]
protected virtual Expression VisitBinary(BinaryExpression node);
}
public class MudBlazor.Block : ValueType {
    [CompilerGeneratedAttribute]
private char <MaskChar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    public char MaskChar { get; public set; }
    public int Min { get; public set; }
    public int Max { get; public set; }
    public Block(char MaskChar, int Min, int Max);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_MaskChar();
    [CompilerGeneratedAttribute]
public void set_MaskChar(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(Block left, Block right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(Block left, Block right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(Block other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Char& MaskChar, Int32& Min, Int32& Max);
}
public class MudBlazor.BlockMask : RegexMask {
    [CompilerGeneratedAttribute]
private Block[] <Blocks>k__BackingField;
    public Block[] Blocks { get; protected set; }
    public BlockMask(Block[] blocks);
    public BlockMask(string delimiters, Block[] blocks);
    [CompilerGeneratedAttribute]
public Block[] get_Blocks();
    [CompilerGeneratedAttribute]
protected void set_Blocks(Block[] value);
    protected virtual void InitInternals();
    protected virtual void InitRegex();
    protected virtual string BuildRegex(Block[] blocks);
    private void AddRequiredCharacters(StringBuilder regexBuilder, Block block, Int32& openParenthesisCount);
    private void AddOptionalCharacters(StringBuilder regexBuilder, Block block, Int32& openParenthesisCount);
    private void AddDelimiter(StringBuilder regexBuilder, int index, Block[] blocks, Int32& openParenthesisCount);
    private static void CloseOpenParentheses(StringBuilder regexBuilder, int openParenthesisCount);
    public virtual void UpdateFrom(IMask other);
}
public class MudBlazor.Body1 : BaseTypography {
}
public class MudBlazor.Body2 : BaseTypography {
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.BoolConverter`1 : Converter`2<T, Nullable`1<bool>> {
    private T OnGet(Nullable`1<bool> value);
    private Nullable`1<bool> OnSet(T arg);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Text={Text}, Href={Href}, Disabled={Disabled}")]
public class MudBlazor.BreadcrumbItem : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [NullableAttribute("1")]
public string Text { get; }
    public string Href { get; }
    public bool Disabled { get; }
    public string Icon { get; }
    public BreadcrumbItem(string text, string href, bool disabled, string icon);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public string get_Icon();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.BreadcrumbLink : ComponentBase {
    [CompilerGeneratedAttribute]
private BreadcrumbItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private MudBreadcrumbs <Parent>k__BackingField;
    [ParameterAttribute]
public BreadcrumbItem Item { get; public set; }
    [CascadingParameterAttribute]
public MudBreadcrumbs Parent { get; public set; }
    [NullableAttribute("1")]
private string Classname { get; }
    [CompilerGeneratedAttribute]
public BreadcrumbItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(BreadcrumbItem value);
    [CompilerGeneratedAttribute]
public MudBreadcrumbs get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(MudBreadcrumbs value);
    [NullableContextAttribute("1")]
private string get_Classname();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.BreadcrumbSeparator : ComponentBase {
    [CompilerGeneratedAttribute]
private MudBreadcrumbs <Parent>k__BackingField;
    [CascadingParameterAttribute]
public MudBreadcrumbs Parent { get; public set; }
    [CompilerGeneratedAttribute]
public MudBreadcrumbs get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(MudBreadcrumbs value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public enum MudBlazor.Breakpoint : Enum {
    public int value__;
    [DescriptionAttribute("xs")]
public static Breakpoint Xs;
    [DescriptionAttribute("sm")]
public static Breakpoint Sm;
    [DescriptionAttribute("md")]
public static Breakpoint Md;
    [DescriptionAttribute("lg")]
public static Breakpoint Lg;
    [DescriptionAttribute("xl")]
public static Breakpoint Xl;
    [DescriptionAttribute("xxl")]
public static Breakpoint Xxl;
    [DescriptionAttribute("smanddown")]
public static Breakpoint SmAndDown;
    [DescriptionAttribute("mdanddown")]
public static Breakpoint MdAndDown;
    [DescriptionAttribute("lganddown")]
public static Breakpoint LgAndDown;
    [DescriptionAttribute("xlanddown")]
public static Breakpoint XlAndDown;
    [DescriptionAttribute("smandup")]
public static Breakpoint SmAndUp;
    [DescriptionAttribute("mdandup")]
public static Breakpoint MdAndUp;
    [DescriptionAttribute("lgandup")]
public static Breakpoint LgAndUp;
    [DescriptionAttribute("xlandup")]
public static Breakpoint XlAndUp;
    [DescriptionAttribute("none")]
public static Breakpoint None;
    [DescriptionAttribute("always")]
public static Breakpoint Always;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.BreakpointGlobalOptions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<Breakpoint, int> <DefaultBreakpointDefinitions>k__BackingField;
    internal static Dictionary`2<Breakpoint, int> DefaultBreakpointDefinitions { get; internal set; }
    private static BreakpointGlobalOptions();
    [CompilerGeneratedAttribute]
internal static Dictionary`2<Breakpoint, int> get_DefaultBreakpointDefinitions();
    [CompilerGeneratedAttribute]
internal static void set_DefaultBreakpointDefinitions(Dictionary`2<Breakpoint, int> value);
    internal static Dictionary`2<Breakpoint, int> GetDefaultOrUserDefinedBreakpointDefinition(ResizeOptions options, ResizeOptions globalOptions);
    private static Dictionary`2<Breakpoint, int> CopyBreakpoints(Dictionary`2<Breakpoint, int> originalDictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.Breakpoints : object {
    [CompilerGeneratedAttribute]
private string <xs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <md>k__BackingField;
    [CompilerGeneratedAttribute]
private string <lg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <xl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <xxl>k__BackingField;
    public string xs { get; public set; }
    public string sm { get; public set; }
    public string md { get; public set; }
    public string lg { get; public set; }
    public string xl { get; public set; }
    public string xxl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_xs();
    [CompilerGeneratedAttribute]
public void set_xs(string value);
    [CompilerGeneratedAttribute]
public string get_sm();
    [CompilerGeneratedAttribute]
public void set_sm(string value);
    [CompilerGeneratedAttribute]
public string get_md();
    [CompilerGeneratedAttribute]
public void set_md(string value);
    [CompilerGeneratedAttribute]
public string get_lg();
    [CompilerGeneratedAttribute]
public void set_lg(string value);
    [CompilerGeneratedAttribute]
public string get_xl();
    [CompilerGeneratedAttribute]
public void set_xl(string value);
    [CompilerGeneratedAttribute]
public string get_xxl();
    [CompilerGeneratedAttribute]
public void set_xxl(string value);
}
[ExtensionAttribute]
public static class MudBlazor.BreakpointSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Breakpoint mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.BrowserViewportEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Guid <JavaScriptListenerId>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserWindowSize <BrowserWindowSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Breakpoint <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImmediate>k__BackingField;
    public Guid JavaScriptListenerId { get; }
    public BrowserWindowSize BrowserWindowSize { get; }
    public Breakpoint Breakpoint { get; }
    public bool IsImmediate { get; }
    public BrowserViewportEventArgs(Guid javaScriptListenerId, BrowserWindowSize browserWindowSize, Breakpoint breakpoint, bool isImmediate);
    [CompilerGeneratedAttribute]
public Guid get_JavaScriptListenerId();
    [CompilerGeneratedAttribute]
public BrowserWindowSize get_BrowserWindowSize();
    [CompilerGeneratedAttribute]
public Breakpoint get_Breakpoint();
    [CompilerGeneratedAttribute]
public bool get_IsImmediate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.BrowserViewportLambdaObserver : object {
    private Action`1<BrowserViewportEventArgs> _lambda;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResizeOptions <ResizeOptions>k__BackingField;
    public Guid Id { get; }
    [NullableAttribute("2")]
public ResizeOptions ResizeOptions { get; }
    public BrowserViewportLambdaObserver(Guid id, Action`1<BrowserViewportEventArgs> lambda, ResizeOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ResizeOptions get_ResizeOptions();
    public sealed virtual Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.BrowserViewportLambdaTaskObserver : object {
    private Func`2<BrowserViewportEventArgs, Task> _lambda;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ResizeOptions <ResizeOptions>k__BackingField;
    public Guid Id { get; }
    [NullableAttribute("2")]
public ResizeOptions ResizeOptions { get; }
    public BrowserViewportLambdaTaskObserver(Guid id, Func`2<BrowserViewportEventArgs, Task> lambda, ResizeOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ResizeOptions get_ResizeOptions();
    public sealed virtual Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.BrowserViewportService : object {
    private bool _disposed;
    private SemaphoreSlim _semaphore;
    private ResizeListenerInterop _resizeListenerInterop;
    private Lazy`1<DotNetObjectReference`1<BrowserViewportService>> _dotNetReferenceLazy;
    private ObserverManager`2<BrowserViewportSubscription, IBrowserViewportObserver> _observerManager;
    [NullableAttribute("2")]
private BrowserWindowSize _latestWindowSize;
    private Breakpoint _latestBreakpoint;
    [CompilerGeneratedAttribute]
private ResizeOptions <ResizeOptions>k__BackingField;
    public ResizeOptions ResizeOptions { get; }
    internal int ObserversCount { get; }
    [DynamicDependencyAttribute("RaiseOnResized")]
[DynamicDependencyAttribute("-1", "MudBlazor.Services.ResizeOptions")]
public BrowserViewportService(ILogger`1<BrowserViewportService> logger, IJSRuntime jsRuntime, IOptions`1<ResizeOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual ResizeOptions get_ResizeOptions();
    internal int get_ObserversCount();
    [JSInvokableAttribute]
public Task RaiseOnResized(BrowserWindowSize browserWindowSize, Breakpoint breakpoint, Guid javaScriptListenerId);
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<SubscribeAsync>d__14")]
public sealed virtual Task SubscribeAsync(IBrowserViewportObserver observer, bool fireImmediately);
    public sealed virtual Task SubscribeAsync(Guid observerId, Action`1<BrowserViewportEventArgs> lambda, ResizeOptions options, bool fireImmediately);
    public sealed virtual Task SubscribeAsync(Guid observerId, Func`2<BrowserViewportEventArgs, Task> lambda, ResizeOptions options, bool fireImmediately);
    public sealed virtual Task UnsubscribeAsync(IBrowserViewportObserver observer);
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<UnsubscribeAsync>d__18")]
public sealed virtual Task UnsubscribeAsync(Guid observerId);
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<IsMediaQueryMatchAsync>d__19")]
public sealed virtual Task`1<bool> IsMediaQueryMatchAsync(string mediaQuery);
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<IsBreakpointWithinWindowSizeAsync>d__20")]
public sealed virtual Task`1<bool> IsBreakpointWithinWindowSizeAsync(Breakpoint breakpoint);
    public sealed virtual Task`1<bool> IsBreakpointWithinReferenceSizeAsync(Breakpoint breakpoint, Breakpoint referenceBreakpoint);
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<GetCurrentBreakpointAsync>d__22")]
public sealed virtual Task`1<Breakpoint> GetCurrentBreakpointAsync();
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<GetCurrentBrowserWindowSizeAsync>d__23")]
public sealed virtual Task`1<BrowserWindowSize> GetCurrentBrowserWindowSizeAsync();
    public sealed virtual ValueTask DisposeAsync();
    private ValueTask DisposeAsyncCore(bool disposing);
    internal BrowserViewportSubscription GetInternalSubscription(IBrowserViewportObserver observer);
    [NullableContextAttribute("2")]
internal BrowserViewportSubscription GetInternalSubscription(Guid observerId);
    private DotNetObjectReference`1<BrowserViewportService> CreateDotNetObjectReference();
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<CreateJavaScriptListener>d__29")]
private Task`1<BrowserViewportSubscription> CreateJavaScriptListener(ResizeOptions clonedOptions, Guid observerId);
    [AsyncStateMachineAttribute("MudBlazor.BrowserViewportService/<RemoveJavaScriptListener>d__30")]
private Task`1<BrowserViewportSubscription> RemoveJavaScriptListener(Guid observerId);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
internal class MudBlazor.BrowserViewportSubscription : object {
    [CompilerGeneratedAttribute]
private Guid <JavaScriptListenerId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ObserverId>k__BackingField;
    [CompilerGeneratedAttribute]
private ResizeOptions <Options>k__BackingField;
    public Guid JavaScriptListenerId { get; }
    public Guid ObserverId { get; }
    public ResizeOptions Options { get; }
    public BrowserViewportSubscription(Guid javaScriptListenerId, Guid observerId);
    public BrowserViewportSubscription(Guid javaScriptListenerId, Guid observerId, ResizeOptions resizeOptions);
    [CompilerGeneratedAttribute]
public Guid get_JavaScriptListenerId();
    [CompilerGeneratedAttribute]
public Guid get_ObserverId();
    [CompilerGeneratedAttribute]
public ResizeOptions get_Options();
    public sealed virtual bool Equals(BrowserViewportSubscription other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
private string DebuggerToString();
}
public class MudBlazor.Button : BaseTypography {
}
public enum MudBlazor.ButtonType : Enum {
    public int value__;
    [DescriptionAttribute("button")]
public static ButtonType Button;
    [DescriptionAttribute("submit")]
public static ButtonType Submit;
    [DescriptionAttribute("reset")]
public static ButtonType Reset;
}
[ExtensionAttribute]
public static class MudBlazor.ButtonTypeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(ButtonType mudEnum);
}
public class MudBlazor.Caption : BaseTypography {
}
[AttributeUsageAttribute("128")]
public class MudBlazor.CategoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static Dictionary`2<string, int> categoryOrder;
    public string Name { get; }
    public int Order { get; }
    public CategoryAttribute(string name);
    private static CategoryAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    public int get_Order();
}
public static class MudBlazor.CategoryTypes : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Cell`1 : object {
    private MudDataGrid`1<T> _dataGrid;
    private Column`1<T> _column;
    internal T _item;
    [NullableAttribute("2")]
internal string _valueString;
    internal Nullable`1<double> _valueNumber;
    internal bool _editing;
    internal CellContext`1<T> _cellContext;
    [NullableAttribute("2")]
internal object ComputedValue { get; }
    internal string computedClass { get; }
    internal string computedStyle { get; }
    public Cell`1(MudDataGrid`1<T> dataGrid, Column`1<T> column, T item);
    [NullableContextAttribute("2")]
internal object get_ComputedValue();
    internal string get_computedClass();
    internal string get_computedStyle();
    [AsyncStateMachineAttribute("MudBlazor.Cell`1/<StringValueChangedAsync>d__14")]
public Task StringValueChangedAsync(string value);
    [AsyncStateMachineAttribute("MudBlazor.Cell`1/<NumberValueChangedAsync>d__15")]
public Task NumberValueChangedAsync(Nullable`1<double> value);
    private void OnStartedEditingItem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.CellContext`1 : object {
    private HashSet`1<T> _selection;
    [CompilerGeneratedAttribute]
private HashSet`1<T> <OpenHierarchies>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private CellActions<T> <Actions>k__BackingField;
    internal HashSet`1<T> OpenHierarchies { get; }
    public T Item { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CellActions<T> Actions { get; }
    public bool Selected { get; }
    public bool Open { get; }
    public CellContext`1(MudDataGrid`1<T> dataGrid, T item);
    [CompilerGeneratedAttribute]
internal HashSet`1<T> get_OpenHierarchies();
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(T value);
    [CompilerGeneratedAttribute]
public CellActions<T> get_Actions();
    public bool get_Selected();
    public bool get_Open();
}
public class MudBlazor.ChartOptions : object {
    [CompilerGeneratedAttribute]
private int <YAxisTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxNumYAxisTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YAxisFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <YAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XAxisLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <YAxisRequireZeroPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLegend>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ChartPalette>k__BackingField;
    [CompilerGeneratedAttribute]
private InterpolationOption <InterpolationOption>k__BackingField;
    [CompilerGeneratedAttribute]
private double <LineStrokeWidth>k__BackingField;
    public int YAxisTicks { get; public set; }
    public int MaxNumYAxisTicks { get; public set; }
    public string YAxisFormat { get; public set; }
    public bool YAxisLines { get; public set; }
    public bool XAxisLines { get; public set; }
    public bool YAxisRequireZeroPoint { get; public set; }
    public bool ShowLegend { get; public set; }
    public String[] ChartPalette { get; public set; }
    public InterpolationOption InterpolationOption { get; public set; }
    public double LineStrokeWidth { get; public set; }
    [CompilerGeneratedAttribute]
public int get_YAxisTicks();
    [CompilerGeneratedAttribute]
public void set_YAxisTicks(int value);
    [CompilerGeneratedAttribute]
public int get_MaxNumYAxisTicks();
    [CompilerGeneratedAttribute]
public void set_MaxNumYAxisTicks(int value);
    [CompilerGeneratedAttribute]
public string get_YAxisFormat();
    [CompilerGeneratedAttribute]
public void set_YAxisFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_YAxisLines();
    [CompilerGeneratedAttribute]
public void set_YAxisLines(bool value);
    [CompilerGeneratedAttribute]
public bool get_XAxisLines();
    [CompilerGeneratedAttribute]
public void set_XAxisLines(bool value);
    [CompilerGeneratedAttribute]
public bool get_YAxisRequireZeroPoint();
    [CompilerGeneratedAttribute]
public void set_YAxisRequireZeroPoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLegend();
    [CompilerGeneratedAttribute]
public void set_ShowLegend(bool value);
    [CompilerGeneratedAttribute]
public String[] get_ChartPalette();
    [CompilerGeneratedAttribute]
public void set_ChartPalette(String[] value);
    [CompilerGeneratedAttribute]
public InterpolationOption get_InterpolationOption();
    [CompilerGeneratedAttribute]
public void set_InterpolationOption(InterpolationOption value);
    [CompilerGeneratedAttribute]
public double get_LineStrokeWidth();
    [CompilerGeneratedAttribute]
public void set_LineStrokeWidth(double value);
}
public class MudBlazor.Charts.Bar : MudCategoryChartBase {
    private static double BoundWidth;
    private static double BoundHeight;
    private static double HorizontalStartSpace;
    private static double HorizontalEndSpace;
    private static double VerticalStartSpace;
    private static double VerticalEndSpace;
    [CompilerGeneratedAttribute]
private MudChart <MudChartParent>k__BackingField;
    private List`1<SvgPath> _horizontalLines;
    private List`1<SvgText> _horizontalValues;
    private List`1<SvgPath> _verticalLines;
    private List`1<SvgText> _verticalValues;
    private List`1<SvgLegend> _legends;
    private List`1<ChartSeries> _series;
    private List`1<SvgPath> _bars;
    [CascadingParameterAttribute]
public MudChart MudChartParent { get; public set; }
    [CompilerGeneratedAttribute]
public MudChart get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudChart value);
    protected virtual void OnParametersSet();
    private void ComputeUnitsAndNumberOfLines(Double& gridXUnits, Double& gridYUnits, Int32& numHorizontalLines, Int32& lowestHorizontalLine, Int32& numVerticalLines);
    private void GenerateHorizontalGridLines(int numHorizontalLines, int lowestHorizontalLine, double gridYUnits, double verticalSpace);
    private void GenerateVerticalGridLines(int numVerticalLines, double gridXUnits, double horizontalSpace);
    private void GenerateBars(int lowestHorizontalLine, double gridYUnits, double horizontalSpace, double verticalSpace);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.Charts.Donut : MudCategoryChartBase {
    [CompilerGeneratedAttribute]
private MudChart <MudChartParent>k__BackingField;
    private List`1<SvgCircle> _circles;
    private List`1<SvgLegend> _legends;
    [CascadingParameterAttribute]
public MudChart MudChartParent { get; public set; }
    protected string ParentWidth { get; }
    protected string ParentHeight { get; }
    [CompilerGeneratedAttribute]
public MudChart get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudChart value);
    protected string get_ParentWidth();
    protected string get_ParentHeight();
    protected virtual void OnParametersSet();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.Charts.Filters : ComponentBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.Charts.Legend : MudChartBase {
    [CompilerGeneratedAttribute]
private MudChartBase <MudChartParent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SvgLegend> <Data>k__BackingField;
    [CascadingParameterAttribute]
public MudChartBase MudChartParent { get; public set; }
    [ParameterAttribute]
public List`1<SvgLegend> Data { get; public set; }
    [CompilerGeneratedAttribute]
public MudChartBase get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudChartBase value);
    [CompilerGeneratedAttribute]
public List`1<SvgLegend> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(List`1<SvgLegend> value);
    private string GetCheckBoxStyle(int index);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.Charts.Line : MudCategoryChartBase {
    private static double BoundWidth;
    private static double BoundHeight;
    private static double HorizontalStartSpace;
    private static double HorizontalEndSpace;
    private static double VerticalStartSpace;
    private static double VerticalEndSpace;
    [CompilerGeneratedAttribute]
private MudChart <MudChartParent>k__BackingField;
    private List`1<SvgPath> _horizontalLines;
    private List`1<SvgText> _horizontalValues;
    private List`1<SvgPath> _verticalLines;
    private List`1<SvgText> _verticalValues;
    private List`1<SvgLegend> _legends;
    private List`1<ChartSeries> _series;
    private List`1<SvgPath> _chartLines;
    [CascadingParameterAttribute]
public MudChart MudChartParent { get; public set; }
    [CompilerGeneratedAttribute]
public MudChart get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudChart value);
    protected virtual void OnParametersSet();
    private void RebuildChart();
    private void ComputeUnitsAndNumberOfLines(Double& gridXUnits, Double& gridYUnits, Int32& numHorizontalLines, Int32& lowestHorizontalLine, Int32& numVerticalLines);
    private void GenerateHorizontalGridLines(int numHorizontalLines, int lowestHorizontalLine, double gridYUnits, double verticalSpace);
    private void GenerateVerticalGridLines(int numVerticalLines, double gridXUnits, double horizontalSpace);
    private void GenerateChartLines(int lowestHorizontalLine, double gridYUnits, double horizontalSpace, double verticalSpace);
    private void HandleLegendVisibilityChanged(SvgLegend legend);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<double, double> <GenerateChartLines>g__GetXYForDataPoint|22_0(int index, <>c__DisplayClass22_0& , <>c__DisplayClass22_1& );
}
public class MudBlazor.Charts.Pie : MudCategoryChartBase {
    [CompilerGeneratedAttribute]
private MudChart <MudChartParent>k__BackingField;
    private List`1<SvgPath> _paths;
    private List`1<SvgLegend> _legends;
    [CascadingParameterAttribute]
public MudChart MudChartParent { get; public set; }
    [CompilerGeneratedAttribute]
public MudChart get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudChart value);
    protected virtual void OnParametersSet();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.Charts.StackedBar : MudCategoryChartBase {
    [CompilerGeneratedAttribute]
private MudChart <MudChartParent>k__BackingField;
    private List`1<SvgPath> _horizontalLines;
    private List`1<SvgText> _horizontalValues;
    private List`1<SvgPath> _verticalLines;
    private List`1<SvgText> _verticalValues;
    private List`1<SvgLegend> _legends;
    private List`1<ChartSeries> _series;
    private List`1<SvgPath> _bars;
    [CascadingParameterAttribute]
public MudChart MudChartParent { get; public set; }
    [CompilerGeneratedAttribute]
public MudChart get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudChart value);
    protected virtual void OnParametersSet();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[DebuggerDisplayAttribute("{Index} = {CX},{CY}, R={Radius}")]
public class MudBlazor.Charts.SVG.Models.SvgCircle : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <CY>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StrokeDashArray>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeDashOffset>k__BackingField;
    public int Index { get; public set; }
    public double CX { get; public set; }
    public double CY { get; public set; }
    public double Radius { get; public set; }
    public string StrokeDashArray { get; public set; }
    public double StrokeDashOffset { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public double get_CX();
    [CompilerGeneratedAttribute]
public void set_CX(double value);
    [CompilerGeneratedAttribute]
public double get_CY();
    [CompilerGeneratedAttribute]
public void set_CY(double value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
    [CompilerGeneratedAttribute]
public string get_StrokeDashArray();
    [CompilerGeneratedAttribute]
public void set_StrokeDashArray(string value);
    [CompilerGeneratedAttribute]
public double get_StrokeDashOffset();
    [CompilerGeneratedAttribute]
public void set_StrokeDashOffset(double value);
}
[DebuggerDisplayAttribute("{Index} = {Labels}")]
public class MudBlazor.Charts.SVG.Models.SvgLegend : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<SvgLegend> <OnVisibilityChanged>k__BackingField;
    public int Index { get; public set; }
    public string Labels { get; public set; }
    public string Data { get; public set; }
    public bool Visible { get; public set; }
    public EventCallback`1<SvgLegend> OnVisibilityChanged { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SvgLegend> get_OnVisibilityChanged();
    [CompilerGeneratedAttribute]
public void set_OnVisibilityChanged(EventCallback`1<SvgLegend> value);
    [AsyncStateMachineAttribute("MudBlazor.Charts.SVG.Models.SvgLegend/<HandleCheckboxChangeAsync>d__20")]
public Task HandleCheckboxChangeAsync();
}
public class MudBlazor.Charts.SVG.Models.SvgPath : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public int Index { get; public set; }
    public string Data { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
}
[DebuggerDisplayAttribute("X={X}, Y={Y}, Value={Value}")]
public class MudBlazor.Charts.SVG.Models.SvgText : object {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public double X { get; public set; }
    public double Y { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class MudBlazor.Charts.TimeSeries : MudTimeSeriesChartBase {
    private static double BoundWidth;
    private static double BoundHeight;
    private static double HorizontalStartSpace;
    private static double HorizontalEndSpace;
    private static double VerticalStartSpace;
    private static double VerticalEndSpace;
    [CompilerGeneratedAttribute]
private MudTimeSeriesChartBase <MudChartParent>k__BackingField;
    private List`1<SvgPath> _horizontalLines;
    private List`1<SvgText> _horizontalValues;
    private List`1<SvgPath> _verticalLines;
    private List`1<SvgText> _verticalValues;
    private List`1<SvgLegend> _legends;
    private List`1<TimeSeriesChartSeries> _series;
    private List`1<SvgPath> _chartLines;
    private Dictionary`2<int, SvgPath> _chartAreas;
    [CascadingParameterAttribute]
public MudTimeSeriesChartBase MudChartParent { get; public set; }
    [CompilerGeneratedAttribute]
public MudTimeSeriesChartBase get_MudChartParent();
    [CompilerGeneratedAttribute]
public void set_MudChartParent(MudTimeSeriesChartBase value);
    protected virtual void OnParametersSet();
    private void RebuildChart();
    private void ComputeUnitsAndNumberOfLines(Double& gridXUnits, Double& gridYUnits, Int32& numHorizontalLines, Int32& lowestHorizontalLine, Int32& numVerticalLines);
    private void GenerateHorizontalGridLines(int numHorizontalLines, int lowestHorizontalLine, double gridYUnits, double verticalSpace);
    private void GenerateVerticalGridLines(int numVerticalLines, double gridXUnits, double horizontalSpace);
    private void GenerateChartLines(int lowestHorizontalLine, double gridYUnits, double horizontalSpace, double verticalSpace);
    private void HandleLegendVisibilityChanged(SvgLegend legend);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<double, double> <GenerateChartLines>g__GetXYForDataPoint|23_6(int index, <>c__DisplayClass23_0& , <>c__DisplayClass23_1& );
    [CompilerGeneratedAttribute]
internal static double <GenerateChartLines>g__GetYForZeroPoint|23_7(<>c__DisplayClass23_0& );
}
[DebuggerDisplayAttribute("{Index} = {Name} (Visible={IsVisible})")]
public class MudBlazor.ChartSeries : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public string Name { get; public set; }
    public Double[] Data { get; public set; }
    public bool Visible { get; public set; }
    public int Index { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Double[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Double[] value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
}
public enum MudBlazor.ChartType : Enum {
    public int value__;
    public static ChartType Donut;
    public static ChartType Line;
    public static ChartType Pie;
    public static ChartType Bar;
    public static ChartType StackedBar;
    public static ChartType Timeseries;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.CollectionComparer`1 : object {
    private IEqualityComparer`1<T> _comparer;
    public static CollectionComparer`1<T> Default;
    public CollectionComparer`1(IEqualityComparer`1<T> comparer);
    private static CollectionComparer`1();
    public sealed virtual bool Equals(IReadOnlyCollection`1<T> x, IReadOnlyCollection`1<T> y);
    public sealed virtual int GetHashCode(IReadOnlyCollection`1<T> obj);
    public static int CombineHashCodes(IEnumerable`1<int> hashCodes);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private int <GetHashCode>b__4_0(T x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MudBlazor.CollectionExtensions : object {
    [ExtensionAttribute]
internal static bool Any(T[] array, Predicate`1<T> predicate);
    [ExtensionAttribute]
internal static bool Any(T[] array);
    [ExtensionAttribute]
internal static bool Contains(T[] array, T element);
    [ExtensionAttribute]
internal static T FirstOrDefault(T[] array, Predicate`1<T> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static T FirstOrDefault(T[] array);
    [ExtensionAttribute]
internal static bool Any(List`1<T> list, Predicate`1<T> predicate);
    [ExtensionAttribute]
internal static bool Any(List`1<T> list);
    [ExtensionAttribute]
internal static T FirstOrDefault(List`1<T> list, Predicate`1<T> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static T FirstOrDefault(List`1<T> list);
}
public enum MudBlazor.Color : Enum {
    public int value__;
    [DescriptionAttribute("default")]
public static Color Default;
    [DescriptionAttribute("primary")]
public static Color Primary;
    [DescriptionAttribute("secondary")]
public static Color Secondary;
    [DescriptionAttribute("tertiary")]
public static Color Tertiary;
    [DescriptionAttribute("info")]
public static Color Info;
    [DescriptionAttribute("success")]
public static Color Success;
    [DescriptionAttribute("warning")]
public static Color Warning;
    [DescriptionAttribute("error")]
public static Color Error;
    [DescriptionAttribute("dark")]
public static Color Dark;
    [DescriptionAttribute("transparent")]
public static Color Transparent;
    [DescriptionAttribute("inherit")]
public static Color Inherit;
    [DescriptionAttribute("surface")]
public static Color Surface;
}
public enum MudBlazor.ColorPickerMode : Enum {
    public int value__;
    public static ColorPickerMode RGB;
    public static ColorPickerMode HSL;
    public static ColorPickerMode HEX;
}
public enum MudBlazor.ColorPickerView : Enum {
    public int value__;
    public static ColorPickerView Spectrum;
    public static ColorPickerView Palette;
    public static ColorPickerView Grid;
    public static ColorPickerView GridCompact;
}
[ExcludeFromCodeCoverageAttribute]
public static class MudBlazor.Colors : object {
}
[ExtensionAttribute]
public static class MudBlazor.ColorSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Color mudEnum);
}
public abstract class MudBlazor.Column`1 : MudComponentBase {
    private static RenderFragment`1<CellContext`1<T>> EmptyChildContent;
    [CompilerGeneratedAttribute]
private ParameterState`1<bool> <HiddenState>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterState`1<bool> <GroupingState>k__BackingField;
    [CompilerGeneratedAttribute]
private MudDataGrid`1<T> <DataGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideSmall>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FooterColSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HeaderColSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<HeaderContext`1<T>> <HeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<CellContext`1<T>> <CellTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<FooterContext`1<T>> <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<GroupDefinition`1<T>> <GroupTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, object> <GroupBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<T>, string> <HeaderClassFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<T>, string> <HeaderStyleFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Sortable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DragAndDropEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Filterable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowFilterIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hideable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <HiddenChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowColumnOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <InitialDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Groupable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <GroupingChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StickyLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StickyRight>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<FilterContext`1<T>> <FilterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    private CultureInfo _culture;
    [CompilerGeneratedAttribute]
private string <CellClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, string> <CellClassFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CellStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, string> <CellStyleFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<CellContext`1<T>> <EditTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<T>, string> <FooterClassFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IEnumerable`1<T>, string> <FooterStyleFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableFooterSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private AggregateDefinition`1<T> <AggregateDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <ColumnStateHasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private HeaderCell`1<T> <HeaderCell>k__BackingField;
    private IComparer`1<object> _comparer;
    private Func`2<T, object> _sortBy;
    internal Func`2<T, object> groupBy;
    internal HeaderContext`1<T> headerContext;
    private FilterContext`1<T> filterContext;
    internal FooterContext`1<T> footerContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private LambdaExpression <PropertyExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ContentFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    internal ParameterState`1<bool> HiddenState { get; }
    internal ParameterState`1<bool> GroupingState { get; }
    [CascadingParameterAttribute]
public MudDataGrid`1<T> DataGrid { get; public set; }
    [ParameterAttribute]
public T Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    [ParameterAttribute]
public string Title { get; public set; }
    [ParameterAttribute]
public bool HideSmall { get; public set; }
    [ParameterAttribute]
public int FooterColSpan { get; public set; }
    [ParameterAttribute]
public int HeaderColSpan { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<HeaderContext`1<T>> HeaderTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<CellContext`1<T>> CellTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<FooterContext`1<T>> FooterTemplate { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<GroupDefinition`1<T>> GroupTemplate { get; public set; }
    [ParameterAttribute]
public Func`2<T, object> GroupBy { get; public set; }
    [ParameterAttribute]
public bool Required { get; public set; }
    [ParameterAttribute]
public string HeaderClass { get; public set; }
    [ParameterAttribute]
public Func`2<IEnumerable`1<T>, string> HeaderClassFunc { get; public set; }
    [ParameterAttribute]
public string HeaderStyle { get; public set; }
    [ParameterAttribute]
public Func`2<IEnumerable`1<T>, string> HeaderStyleFunc { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Sortable { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Resizable { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> DragAndDropEnabled { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Filterable { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> ShowFilterIcon { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Hideable { get; public set; }
    [ParameterAttribute]
public bool Hidden { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> HiddenChanged { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> ShowColumnOptions { get; public set; }
    [ParameterAttribute]
public IComparer`1<object> Comparer { get; public set; }
    [ParameterAttribute]
public Func`2<T, object> SortBy { get; public set; }
    [ParameterAttribute]
public SortDirection InitialDirection { get; public set; }
    [ParameterAttribute]
public string SortIcon { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Groupable { get; public set; }
    [ParameterAttribute]
public bool Grouping { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> GroupingChanged { get; public set; }
    [ParameterAttribute]
public bool StickyLeft { get; public set; }
    [ParameterAttribute]
public bool StickyRight { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<FilterContext`1<T>> FilterTemplate { get; public set; }
    public string Identifier { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public CultureInfo Culture { get; public set; }
    [ParameterAttribute]
public string CellClass { get; public set; }
    [ParameterAttribute]
public Func`2<T, string> CellClassFunc { get; public set; }
    [ParameterAttribute]
public string CellStyle { get; public set; }
    [ParameterAttribute]
public Func`2<T, string> CellStyleFunc { get; public set; }
    [ParameterAttribute]
public bool Editable { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<CellContext`1<T>> EditTemplate { get; public set; }
    [ParameterAttribute]
public string FooterClass { get; public set; }
    [ParameterAttribute]
public Func`2<IEnumerable`1<T>, string> FooterClassFunc { get; public set; }
    [ParameterAttribute]
public string FooterStyle { get; public set; }
    [ParameterAttribute]
public Func`2<IEnumerable`1<T>, string> FooterStyleFunc { get; public set; }
    [ParameterAttribute]
public bool EnableFooterSelection { get; public set; }
    [ParameterAttribute]
public AggregateDefinition`1<T> AggregateDefinition { get; public set; }
    public Action ColumnStateHasChanged { get; public set; }
    internal string headerClassname { get; }
    internal string footerClassname { get; }
    internal Type dataType { get; }
    internal bool isNumber { get; }
    internal bool hideable { get; }
    internal bool sortable { get; }
    internal bool groupable { get; }
    internal bool filterable { get; }
    internal int SortIndex { get; internal set; }
    internal HeaderCell`1<T> HeaderCell { get; internal set; }
    public FilterContext`1<T> FilterContext { get; }
    [NullableAttribute("2")]
protected internal LambdaExpression PropertyExpression { get; }
    public string PropertyName { get; }
    [NullableAttribute("2")]
protected internal string ContentFormat { get; }
    protected internal Type PropertyType { get; }
    private static Column`1();
    [CompilerGeneratedAttribute]
internal ParameterState`1<bool> get_HiddenState();
    [CompilerGeneratedAttribute]
internal ParameterState`1<bool> get_GroupingState();
    [CompilerGeneratedAttribute]
public MudDataGrid`1<T> get_DataGrid();
    [CompilerGeneratedAttribute]
public void set_DataGrid(MudDataGrid`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public bool get_HideSmall();
    [CompilerGeneratedAttribute]
public void set_HideSmall(bool value);
    [CompilerGeneratedAttribute]
public int get_FooterColSpan();
    [CompilerGeneratedAttribute]
public void set_FooterColSpan(int value);
    [CompilerGeneratedAttribute]
public int get_HeaderColSpan();
    [CompilerGeneratedAttribute]
public void set_HeaderColSpan(int value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<HeaderContext`1<T>> get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment`1<HeaderContext`1<T>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<CellContext`1<T>> get_CellTemplate();
    [CompilerGeneratedAttribute]
public void set_CellTemplate(RenderFragment`1<CellContext`1<T>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<FooterContext`1<T>> get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment`1<FooterContext`1<T>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<GroupDefinition`1<T>> get_GroupTemplate();
    [CompilerGeneratedAttribute]
public void set_GroupTemplate(RenderFragment`1<GroupDefinition`1<T>> value);
    [CompilerGeneratedAttribute]
public Func`2<T, object> get_GroupBy();
    [CompilerGeneratedAttribute]
public void set_GroupBy(Func`2<T, object> value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderClass();
    [CompilerGeneratedAttribute]
public void set_HeaderClass(string value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<T>, string> get_HeaderClassFunc();
    [CompilerGeneratedAttribute]
public void set_HeaderClassFunc(Func`2<IEnumerable`1<T>, string> value);
    [CompilerGeneratedAttribute]
public string get_HeaderStyle();
    [CompilerGeneratedAttribute]
public void set_HeaderStyle(string value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<T>, string> get_HeaderStyleFunc();
    [CompilerGeneratedAttribute]
public void set_HeaderStyleFunc(Func`2<IEnumerable`1<T>, string> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Sortable();
    [CompilerGeneratedAttribute]
public virtual void set_Sortable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Resizable();
    [CompilerGeneratedAttribute]
public virtual void set_Resizable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_DragAndDropEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_DragAndDropEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Filterable();
    [CompilerGeneratedAttribute]
public virtual void set_Filterable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ShowFilterIcon();
    [CompilerGeneratedAttribute]
public void set_ShowFilterIcon(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hideable();
    [CompilerGeneratedAttribute]
public void set_Hideable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_HiddenChanged();
    [CompilerGeneratedAttribute]
public void set_HiddenChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ShowColumnOptions();
    [CompilerGeneratedAttribute]
public virtual void set_ShowColumnOptions(Nullable`1<bool> value);
    public IComparer`1<object> get_Comparer();
    public void set_Comparer(IComparer`1<object> value);
    public Func`2<T, object> get_SortBy();
    public void set_SortBy(Func`2<T, object> value);
    [CompilerGeneratedAttribute]
public SortDirection get_InitialDirection();
    [CompilerGeneratedAttribute]
public void set_InitialDirection(SortDirection value);
    [CompilerGeneratedAttribute]
public string get_SortIcon();
    [CompilerGeneratedAttribute]
public void set_SortIcon(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Groupable();
    [CompilerGeneratedAttribute]
public void set_Groupable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Grouping();
    [CompilerGeneratedAttribute]
public void set_Grouping(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_GroupingChanged();
    [CompilerGeneratedAttribute]
public void set_GroupingChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_StickyLeft();
    [CompilerGeneratedAttribute]
public void set_StickyLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_StickyRight();
    [CompilerGeneratedAttribute]
public void set_StickyRight(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<FilterContext`1<T>> get_FilterTemplate();
    [CompilerGeneratedAttribute]
public void set_FilterTemplate(RenderFragment`1<FilterContext`1<T>> value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public string get_CellClass();
    [CompilerGeneratedAttribute]
public void set_CellClass(string value);
    [CompilerGeneratedAttribute]
public Func`2<T, string> get_CellClassFunc();
    [CompilerGeneratedAttribute]
public void set_CellClassFunc(Func`2<T, string> value);
    [CompilerGeneratedAttribute]
public string get_CellStyle();
    [CompilerGeneratedAttribute]
public void set_CellStyle(string value);
    [CompilerGeneratedAttribute]
public Func`2<T, string> get_CellStyleFunc();
    [CompilerGeneratedAttribute]
public void set_CellStyleFunc(Func`2<T, string> value);
    [CompilerGeneratedAttribute]
public bool get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<CellContext`1<T>> get_EditTemplate();
    [CompilerGeneratedAttribute]
public void set_EditTemplate(RenderFragment`1<CellContext`1<T>> value);
    [CompilerGeneratedAttribute]
public string get_FooterClass();
    [CompilerGeneratedAttribute]
public void set_FooterClass(string value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<T>, string> get_FooterClassFunc();
    [CompilerGeneratedAttribute]
public void set_FooterClassFunc(Func`2<IEnumerable`1<T>, string> value);
    [CompilerGeneratedAttribute]
public string get_FooterStyle();
    [CompilerGeneratedAttribute]
public void set_FooterStyle(string value);
    [CompilerGeneratedAttribute]
public Func`2<IEnumerable`1<T>, string> get_FooterStyleFunc();
    [CompilerGeneratedAttribute]
public void set_FooterStyleFunc(Func`2<IEnumerable`1<T>, string> value);
    [CompilerGeneratedAttribute]
public bool get_EnableFooterSelection();
    [CompilerGeneratedAttribute]
public void set_EnableFooterSelection(bool value);
    [CompilerGeneratedAttribute]
public AggregateDefinition`1<T> get_AggregateDefinition();
    [CompilerGeneratedAttribute]
public void set_AggregateDefinition(AggregateDefinition`1<T> value);
    [CompilerGeneratedAttribute]
public Action get_ColumnStateHasChanged();
    [CompilerGeneratedAttribute]
public void set_ColumnStateHasChanged(Action value);
    internal string get_headerClassname();
    internal string get_footerClassname();
    internal Type get_dataType();
    internal bool get_isNumber();
    internal bool get_hideable();
    internal bool get_sortable();
    internal bool get_groupable();
    internal bool get_filterable();
    [CompilerGeneratedAttribute]
internal int get_SortIndex();
    [CompilerGeneratedAttribute]
internal void set_SortIndex(int value);
    [CompilerGeneratedAttribute]
internal HeaderCell`1<T> get_HeaderCell();
    [CompilerGeneratedAttribute]
internal void set_HeaderCell(HeaderCell`1<T> value);
    public FilterContext`1<T> get_FilterContext();
    [AsyncStateMachineAttribute("MudBlazor.Column`1/<OnGroupingParameterChangedAsync>d__242")]
private Task OnGroupingParameterChangedAsync();
    protected virtual void OnInitialized();
    internal Func`2<T, object> GetLocalSortFunc();
    internal void CompileGroupBy();
    [AsyncStateMachineAttribute("MudBlazor.Column`1/<SetGroupingAsync>d__246")]
internal Task SetGroupingAsync(bool group);
    [AsyncStateMachineAttribute("MudBlazor.Column`1/<RemoveGrouping>d__247")]
internal Task RemoveGrouping();
    public Task HideAsync();
    public Task ShowAsync();
    [AsyncStateMachineAttribute("MudBlazor.Column`1/<ToggleAsync>d__250")]
public Task ToggleAsync();
    public virtual void Dispose();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected internal virtual LambdaExpression get_PropertyExpression();
    protected internal virtual Func`2<T, bool> GetFilterExpression();
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected internal virtual string get_ContentFormat();
    protected internal abstract virtual object CellContent(T item);
    protected internal abstract virtual object PropertyFunc(T item);
    [CompilerGeneratedAttribute]
protected internal virtual Type get_PropertyType();
    protected internal abstract virtual void SetProperty(object item, object value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__241_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__241_1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__241_2();
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__241_3();
    [CompilerGeneratedAttribute]
private object <CompileGroupBy>b__245_0(T x);
}
public abstract class MudBlazor.CommonSnackbarOptions : object {
    [CompilerGeneratedAttribute]
private int <MaximumOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShowTransitionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VisibleStateDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HideTransitionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireInteraction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BackgroundBlurred>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <SnackbarVariant>k__BackingField;
    public int MaximumOpacity { get; public set; }
    public int ShowTransitionDuration { get; public set; }
    public int VisibleStateDuration { get; public set; }
    public int HideTransitionDuration { get; public set; }
    public bool ShowCloseIcon { get; public set; }
    public bool RequireInteraction { get; public set; }
    public bool BackgroundBlurred { get; public set; }
    public Variant SnackbarVariant { get; public set; }
    [NullableContextAttribute("1")]
protected CommonSnackbarOptions(CommonSnackbarOptions options);
    [CompilerGeneratedAttribute]
public int get_MaximumOpacity();
    [CompilerGeneratedAttribute]
public void set_MaximumOpacity(int value);
    [CompilerGeneratedAttribute]
public int get_ShowTransitionDuration();
    [CompilerGeneratedAttribute]
public void set_ShowTransitionDuration(int value);
    [CompilerGeneratedAttribute]
public int get_VisibleStateDuration();
    [CompilerGeneratedAttribute]
public void set_VisibleStateDuration(int value);
    [CompilerGeneratedAttribute]
public int get_HideTransitionDuration();
    [CompilerGeneratedAttribute]
public void set_HideTransitionDuration(int value);
    [CompilerGeneratedAttribute]
public bool get_ShowCloseIcon();
    [CompilerGeneratedAttribute]
public void set_ShowCloseIcon(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireInteraction();
    [CompilerGeneratedAttribute]
public void set_RequireInteraction(bool value);
    [CompilerGeneratedAttribute]
public bool get_BackgroundBlurred();
    [CompilerGeneratedAttribute]
public void set_BackgroundBlurred(bool value);
    [CompilerGeneratedAttribute]
public Variant get_SnackbarVariant();
    [CompilerGeneratedAttribute]
public void set_SnackbarVariant(Variant value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.ComponentBaseWithState : ComponentBase {
    internal ParameterContainer ParameterContainer;
    protected virtual void OnInitialized();
    public virtual Task SetParametersAsync(ParameterView parameters);
    protected virtual void OnParametersSet();
    protected IParameterRegistrationBuilderScope CreateRegisterScope();
}
public class MudBlazor.Components.Chart.EndSlopeSpline : SplineInterpolator {
    public EndSlopeSpline(Double[] xs, Double[] ys, int resolution, double firstSlopeDegrees, double lastSlopeDegrees);
    public void CalcParameters(double alpha, double beta);
}
public interface MudBlazor.Components.Chart.Interpolation.ILineInterpolator {
    public Double[] GivenYs { get; public set; }
    public Double[] GivenXs { get; public set; }
    public Double[] InterpolatedXs { get; public set; }
    public Double[] InterpolatedYs { get; public set; }
    public abstract virtual Double[] get_GivenYs();
    public abstract virtual void set_GivenYs(Double[] value);
    public abstract virtual Double[] get_GivenXs();
    public abstract virtual void set_GivenXs(Double[] value);
    public abstract virtual Double[] get_InterpolatedXs();
    public abstract virtual void set_InterpolatedXs(Double[] value);
    public abstract virtual Double[] get_InterpolatedYs();
    public abstract virtual void set_InterpolatedYs(Double[] value);
}
public class MudBlazor.Components.Chart.Interpolation.NaturalSpline : SplineInterpolator {
    public NaturalSpline(Double[] xs, Double[] ys, int resolution);
    public void CalcParameters();
}
public class MudBlazor.Components.Chart.Matrix : object {
    public Double[0...,0...] a;
    public Double[] y;
    public Double[] x;
    public Matrix(int size);
}
public class MudBlazor.Components.Chart.MatrixSolver : object {
    public Matrix m;
    public int maxOrder;
    public bool calcError;
    public MatrixSolver(int size, Matrix mi);
    private void SwitchRows(int n);
    public bool Eliminate();
    public void Solve();
}
public class MudBlazor.Components.Chart.Models.TimeSeriesChartSeries : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TimeValue> <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSeriesDiplayType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FillOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <StrokeOpacity>k__BackingField;
    public string Name { get; public set; }
    public List`1<TimeValue> Data { get; public set; }
    public bool IsVisible { get; public set; }
    public int Index { get; public set; }
    public TimeSeriesDiplayType Type { get; public set; }
    public double FillOpacity { get; public set; }
    public double StrokeOpacity { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public List`1<TimeValue> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(List`1<TimeValue> value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public TimeSeriesDiplayType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TimeSeriesDiplayType value);
    [CompilerGeneratedAttribute]
public double get_FillOpacity();
    [CompilerGeneratedAttribute]
public void set_FillOpacity(double value);
    [CompilerGeneratedAttribute]
public double get_StrokeOpacity();
    [CompilerGeneratedAttribute]
public void set_StrokeOpacity(double value);
}
public enum MudBlazor.Components.Chart.Models.TimeSeriesDiplayType : Enum {
    public int value__;
    public static TimeSeriesDiplayType Line;
    public static TimeSeriesDiplayType Area;
}
public class MudBlazor.Components.Chart.PeriodicSpline : SplineInterpolator {
    public PeriodicSpline(Double[] xs, Double[] ys, int resolution);
    public void CalcParameters();
}
public abstract class MudBlazor.Components.Chart.SplineInterpolator : object {
    protected Matrix m;
    protected MatrixSolver gauss;
    protected int n;
    protected Double[] a;
    protected Double[] b;
    protected Double[] c;
    protected Double[] d;
    protected Double[] h;
    [CompilerGeneratedAttribute]
private Double[] <GivenYs>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <GivenXs>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <InterpolatedXs>k__BackingField;
    [CompilerGeneratedAttribute]
private Double[] <InterpolatedYs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InterpolationRequired>k__BackingField;
    public Double[] GivenYs { get; public set; }
    public Double[] GivenXs { get; public set; }
    public Double[] InterpolatedXs { get; public set; }
    public Double[] InterpolatedYs { get; public set; }
    public bool InterpolationRequired { get; public set; }
    public SplineInterpolator(Double[] xs, Double[] ys, int resolution);
    [CompilerGeneratedAttribute]
public sealed virtual Double[] get_GivenYs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GivenYs(Double[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Double[] get_GivenXs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_GivenXs(Double[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Double[] get_InterpolatedXs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InterpolatedXs(Double[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Double[] get_InterpolatedYs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_InterpolatedYs(Double[] value);
    [CompilerGeneratedAttribute]
public bool get_InterpolationRequired();
    [CompilerGeneratedAttribute]
public void set_InterpolationRequired(bool value);
    public void Interpolate();
    public double Integrate();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class MudBlazor.Components.Highlighter.Splitter : object {
    [NullableAttribute("1")]
private static string NextBoundary;
    private static StringBuilder s_stringBuilderCached;
    public static Memory`1<string> GetFragments(string text, string highlightedText, IEnumerable`1<string> highlightedTexts, String& regex, bool caseSensitive, bool untilNextBoundary);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <GetFragments>g__AppendPattern|2_0(string value, <>c__DisplayClass2_0& );
}
public class MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageMarkupString : ComponentBase {
    [CompilerGeneratedAttribute]
private MarkupString <Message>k__BackingField;
    [ParameterAttribute]
public MarkupString Message { get; public set; }
    [CompilerGeneratedAttribute]
public MarkupString get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(MarkupString value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageRenderFragment : ComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <Message>k__BackingField;
    [ParameterAttribute]
public RenderFragment Message { get; public set; }
    [CompilerGeneratedAttribute]
public RenderFragment get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageText : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [ParameterAttribute]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MudBlazor.Components.Snackbar.SnackbarMessage : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type <ComponentType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ComponentParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [NullableAttribute("1")]
internal Type ComponentType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, object> ComponentParameters { get; }
    internal string Key { get; }
    internal string Text { get; internal set; }
    [NullableContextAttribute("1")]
internal SnackbarMessage(Type componentType, Dictionary`2<string, object> componentParameters, string key);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal Type get_ComponentType();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_ComponentParameters();
    [CompilerGeneratedAttribute]
internal string get_Key();
    [CompilerGeneratedAttribute]
internal string get_Text();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Text(string value);
}
public enum MudBlazor.ContentNavigationExpandBehaviour : Enum {
    public int value__;
    public static ContentNavigationExpandBehaviour Always;
    public static ContentNavigationExpandBehaviour WhenSectionIsActive;
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.Converter`1 : Converter`2<T, string> {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    public string Format { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.Converter`2 : object {
    [CompilerGeneratedAttribute]
private Func`2<T, U> <SetFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<U, T> <GetFunc>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> <OnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GetError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SetErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GetErrorMessage>k__BackingField;
    public Func`2<T, U> SetFunc { get; public set; }
    public Func`2<U, T> GetFunc { get; public set; }
    [NullableAttribute("1")]
public CultureInfo Culture { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> OnError { get; public set; }
    [MemberNotNullWhenAttribute("True", "SetErrorMessage")]
public bool SetError { get; public set; }
    [MemberNotNullWhenAttribute("True", "GetErrorMessage")]
public bool GetError { get; public set; }
    public string SetErrorMessage { get; public set; }
    public string GetErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<T, U> get_SetFunc();
    [CompilerGeneratedAttribute]
public void set_SetFunc(Func`2<T, U> value);
    [CompilerGeneratedAttribute]
public Func`2<U, T> get_GetFunc();
    [CompilerGeneratedAttribute]
public void set_GetFunc(Func`2<U, T> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_OnError();
    [CompilerGeneratedAttribute]
public void set_OnError(Action`1<string> value);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "SetErrorMessage")]
public bool get_SetError();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "SetErrorMessage")]
public void set_SetError(bool value);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "GetErrorMessage")]
public bool get_GetError();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "GetErrorMessage")]
public void set_GetError(bool value);
    [CompilerGeneratedAttribute]
public string get_SetErrorMessage();
    [CompilerGeneratedAttribute]
public void set_SetErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_GetErrorMessage();
    [CompilerGeneratedAttribute]
public void set_GetErrorMessage(string value);
    public U Set(T value);
    public T Get(U value);
    [NullableContextAttribute("1")]
protected void UpdateSetError(string msg);
    [NullableContextAttribute("1")]
protected void UpdateGetError(string msg);
}
public static class MudBlazor.Converters : object {
    public static CultureInfo DefaultCulture { get; }
    public static Converter`1<DateTime> IsoDate { get; }
    public static Converter`1<Nullable`1<DateTime>> NullableIsoDate { get; }
    public static CultureInfo get_DefaultCulture();
    public static Converter`1<DateTime> get_IsoDate();
    private static DateTime GetIsoDate(string value);
    private static string SetIsoDate(DateTime value);
    public static Converter`1<Nullable`1<DateTime>> get_NullableIsoDate();
    private static Nullable`1<DateTime> GetNullableIsoDate(string value);
    private static string SetNullableIsoDate(Nullable`1<DateTime> value);
    public static DateConverter DateFormat(string format);
    public static DateConverter DateFormat(string format, CultureInfo culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.DataGridColumnResizeService`1 : object {
    private static string EventPointerMove;
    private static string EventPointerUp;
    private MudDataGrid`1<T> _dataGrid;
    private IEventListener _eventListener;
    private ResizeMode _resizeMode;
    private double _currentX;
    private double _startWidth;
    private double _nextStartWidth;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Column`1<T> _startColumn;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Column`1<T> _nextColumn;
    private Guid _pointerMoveSubscriptionId;
    private Guid _pointerUpSubscriptionId;
    public DataGridColumnResizeService`1(MudDataGrid`1<T> dataGrid, IEventListener eventListener);
    [AsyncStateMachineAttribute("MudBlazor.DataGridColumnResizeService`1/<StartResizeColumn>d__13")]
internal Task`1<bool> StartResizeColumn(HeaderCell`1<T> headerCell, double clientX, IList`1<Column`1<T>> columns, ResizeMode columnResizeMode, bool rightToLeft);
    [AsyncStateMachineAttribute("MudBlazor.DataGridColumnResizeService`1/<OnApplicationPointerMove>d__14")]
private Task OnApplicationPointerMove(object eventArgs, bool isRtl);
    [AsyncStateMachineAttribute("MudBlazor.DataGridColumnResizeService`1/<OnApplicationPointerUp>d__15")]
private Task OnApplicationPointerUp(object eventArgs, bool isRtl);
    [AsyncStateMachineAttribute("MudBlazor.DataGridColumnResizeService`1/<UnsubscribeApplicationEvents>d__16")]
private Task UnsubscribeApplicationEvents();
    [AsyncStateMachineAttribute("MudBlazor.DataGridColumnResizeService`1/<ResizeColumn>d__17")]
private Task ResizeColumn(object eventArgs, bool finish, bool isRtl);
    [AsyncStateMachineAttribute("MudBlazor.DataGridColumnResizeService`1/<ResizeColumns>d__18")]
private static Task ResizeColumns(Column`1<T> columnToShrink, Column`1<T> columnToEnlarge, double shrinkedWidth, double enlargedWidth, double gridHeight, bool finish);
}
public enum MudBlazor.DataGridEditMode : Enum {
    public int value__;
    public static DataGridEditMode Cell;
    public static DataGridEditMode Form;
}
public enum MudBlazor.DataGridEditTrigger : Enum {
    public int value__;
    public static DataGridEditTrigger OnRowClick;
    public static DataGridEditTrigger Manual;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.DataGridExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderBySortDefinitions(IEnumerable`1<T> source, GridState`1<T> state);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderBySortDefinitions(IEnumerable`1<T> source, ICollection`1<SortDefinition`1<T>> sortDefinitions);
    [ExtensionAttribute]
public static Column`1<T> GetColumnByPropertyName(MudDataGrid`1<T> dataGrid, string propertyName);
}
public enum MudBlazor.DataGridFilterCaseSensitivity : Enum {
    public int value__;
    public static DataGridFilterCaseSensitivity Default;
    public static DataGridFilterCaseSensitivity CaseInsensitive;
    public static DataGridFilterCaseSensitivity Ignore;
}
public enum MudBlazor.DataGridFilterMode : Enum {
    public int value__;
    public static DataGridFilterMode Simple;
    public static DataGridFilterMode ColumnFilterMenu;
    public static DataGridFilterMode ColumnFilterRow;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.DataGridRowClickEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private MouseEventArgs <MouseEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    public MouseEventArgs MouseEventArgs { get; }
    public T Item { get; }
    public int RowIndex { get; }
    public DataGridRowClickEventArgs`1(MouseEventArgs mouseEventArgs, T item, int rowIndex);
    [CompilerGeneratedAttribute]
public MouseEventArgs get_MouseEventArgs();
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public int get_RowIndex();
}
public class MudBlazor.DataGridRowValidator : object {
    protected HashSet`1<string> _errors;
    protected HashSet`1<IFormComponent> _formControls;
    public bool IsValid { get; }
    public String[] Errors { get; }
    [NullableAttribute("2")]
[ExcludeFromCodeCoverageAttribute]
public object Model { get; public set; }
    public sealed virtual bool get_IsValid();
    public sealed virtual String[] get_Errors();
    [NullableContextAttribute("2")]
public virtual object get_Model();
    [NullableContextAttribute("2")]
public virtual void set_Model(object value);
    private sealed virtual override void MudBlazor.Interfaces.IForm.FieldChanged(IFormComponent formControl, object newValue);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Add(IFormComponent formControl);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Remove(IFormComponent formControl);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Update(IFormComponent formControl);
    [ExcludeFromCodeCoverageAttribute]
public void Validate();
}
public class MudBlazor.DateConverter : Converter`1<DateTime> {
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    public string DateFormat { get; public set; }
    public DateConverter(string format);
    [CompilerGeneratedAttribute]
public string get_DateFormat();
    [CompilerGeneratedAttribute]
public void set_DateFormat(string value);
    private DateTime OnGet(string arg);
    private string OnSet(DateTime arg);
}
public class MudBlazor.DateMask : PatternMask {
    private char _y;
    private char _M;
    private char _d;
    private int _year;
    private int _month;
    private int _day;
    public DateMask(string mask, char year, char month, char day);
    protected virtual void ModifyPartiallyAlignedMask(string mask, string text, int maskOffset, Int32& textIndex, Int32& maskIndex, String& alignedText);
    private int ExtractYear(string mask, string alignedText, int maskOffset);
    private void MonthLogic(string mask, string text, int maskOffset, Int32& textIndex, Int32& maskIndex, String& alignedText);
    private void DayLogic(string mask, string text, int maskOffset, Int32& textIndex, Int32& maskIndex, String& alignedText);
    protected virtual string ModifyFinalText(string text);
    private int FixDay(int year, int month, int day);
    private int FixMonth(int month);
    private int GetDaysInMonth(int year, int month);
    private ValueTuple`2<string, int> Extract(string maskPart, string mask, int maskOffset, string alignedText);
    public virtual void UpdateFrom(IMask other);
    [GeneratedRegexAttribute("^\d+$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex ValidDigitRegularExpression();
}
public class MudBlazor.DateRange : Range`1<Nullable`1<DateTime>> {
    public DateRange(Nullable`1<DateTime> start, Nullable`1<DateTime> end);
    public string ToString(Converter`2<Nullable`1<DateTime>, string> converter);
    public string ToIsoDateString();
    public static bool TryParse(string value, Converter`2<Nullable`1<DateTime>, string> converter, DateRange& date);
    public static bool TryParse(string start, string end, Converter`2<Nullable`1<DateTime>, string> converter, DateRange& date);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DateRange other);
    public static bool op_Equality(DateRange dateRange1, DateRange dateRange2);
    public static bool op_Inequality(DateRange dateRange1, DateRange dateRange2);
}
public class MudBlazor.Default : BaseTypography {
}
public class MudBlazor.DefaultConverter`1 : Converter`1<T> {
    public static Func`2<T, string> GlobalGetFunc;
    public static Func`2<string, T> GlobalSetFunc;
    [CompilerGeneratedAttribute]
private string <DefaultTimeSpanFormat>k__BackingField;
    public string DefaultTimeSpanFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultTimeSpanFormat();
    [CompilerGeneratedAttribute]
public void set_DefaultTimeSpanFormat(string value);
    protected virtual T ConvertFromString(string value);
    protected virtual string ConvertToString(T arg);
    public static bool IsNullableEnum(Type t);
}
public enum MudBlazor.DefaultFocus : Enum {
    public int value__;
    public static DefaultFocus None;
    public static DefaultFocus Element;
    public static DefaultFocus FirstChild;
    public static DefaultFocus LastChild;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.DefaultLocalizationInterceptor : AbstractLocalizationInterceptor {
    [CompilerGeneratedAttribute]
private bool <IgnoreDefaultEnglish>k__BackingField;
    public bool IgnoreDefaultEnglish { get; public set; }
    public DefaultLocalizationInterceptor(ILoggerFactory loggerFactory, MudLocalizer mudLocalizer);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreDefaultEnglish();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IgnoreDefaultEnglish(bool value);
    public virtual LocalizedString Handle(string key, Object[] arguments);
    [ExcludeFromCodeCoverageAttribute]
[ObsoleteAttribute("Use TranslationWithFallback(string key, params object[] arguments) overload instead! Will be removed in v8.", "True")]
protected virtual LocalizedString TranslationFallback(string key);
    protected virtual LocalizedString TranslationWithFallback(string key, Object[] arguments);
}
public static class MudBlazor.Defaults : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.DialogOptions : object {
    [NullableAttribute("1")]
internal static DialogOptions Default;
    [CompilerGeneratedAttribute]
private Nullable`1<DialogPosition> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MaxWidth> <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BackdropClick>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CloseOnEscapeKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CloseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FullScreen>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundClass>k__BackingField;
    public Nullable`1<DialogPosition> Position { get; public set; }
    public Nullable`1<MaxWidth> MaxWidth { get; public set; }
    public Nullable`1<bool> BackdropClick { get; public set; }
    public Nullable`1<bool> CloseOnEscapeKey { get; public set; }
    public Nullable`1<bool> NoHeader { get; public set; }
    public Nullable`1<bool> CloseButton { get; public set; }
    public Nullable`1<bool> FullScreen { get; public set; }
    public Nullable`1<bool> FullWidth { get; public set; }
    public string BackgroundClass { get; public set; }
    private static DialogOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<DialogPosition> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<DialogPosition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MaxWidth> get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(Nullable`1<MaxWidth> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BackdropClick();
    [CompilerGeneratedAttribute]
public void set_BackdropClick(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CloseOnEscapeKey();
    [CompilerGeneratedAttribute]
public void set_CloseOnEscapeKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoHeader();
    [CompilerGeneratedAttribute]
public void set_NoHeader(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CloseButton();
    [CompilerGeneratedAttribute]
public void set_CloseButton(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FullScreen();
    [CompilerGeneratedAttribute]
public void set_FullScreen(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BackgroundClass();
    [CompilerGeneratedAttribute]
public void set_BackgroundClass(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MudBlazor.DialogParameters : object {
    internal static DialogParameters Default;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<string, object> _parameters;
    public int Count { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private static DialogParameters();
    public void Add(string parameterName, object value);
    [NullableContextAttribute("2")]
public T Get(string parameterName);
    [NullableContextAttribute("2")]
public T TryGet(string parameterName);
    public int get_Count();
    public object get_Item(string parameterName);
    public void set_Item(string parameterName, object value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.DialogParameters`1 : DialogParameters {
    [NullableContextAttribute("1")]
public void Add(Expression`1<Func`2<T, TParam>> propertyExpression, TParam value);
    public TParam Get(Expression`1<Func`2<T, TParam>> propertyExpression);
    public TParam TryGet(Expression`1<Func`2<T, TParam>> propertyExpression);
}
public enum MudBlazor.DialogPosition : Enum {
    public int value__;
    [DescriptionAttribute("center")]
public static DialogPosition Center;
    [DescriptionAttribute("centerleft")]
public static DialogPosition CenterLeft;
    [DescriptionAttribute("centerright")]
public static DialogPosition CenterRight;
    [DescriptionAttribute("topcenter")]
public static DialogPosition TopCenter;
    [DescriptionAttribute("topleft")]
public static DialogPosition TopLeft;
    [DescriptionAttribute("topright")]
public static DialogPosition TopRight;
    [DescriptionAttribute("bottomcenter")]
public static DialogPosition BottomCenter;
    [DescriptionAttribute("bottomleft")]
public static DialogPosition BottomLeft;
    [DescriptionAttribute("bottomright")]
public static DialogPosition BottomRight;
    [DescriptionAttribute("custom")]
public static DialogPosition Custom;
}
[ExtensionAttribute]
public static class MudBlazor.DialogPositionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(DialogPosition mudEnum);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.DialogReference : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TaskCompletionSource`1<DialogResult> _resultCompletion;
    [NullableAttribute("1")]
private IDialogService _dialogService;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Dialog>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <RenderFragment>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TaskCompletionSource`1<bool> <MudBlazor.IDialogReference.RenderCompleteTaskCompletionSource>k__BackingField;
    public Guid Id { get; }
    public object Dialog { get; private set; }
    public RenderFragment RenderFragment { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Task`1<DialogResult> Result { get; }
    [NullableAttribute("1")]
private TaskCompletionSource`1<bool> MudBlazor.IDialogReference.RenderCompleteTaskCompletionSource { get; }
    [NullableContextAttribute("1")]
public DialogReference(Guid dialogInstanceId, IDialogService dialogService);
    public sealed virtual void Close();
    public sealed virtual void Close(DialogResult result);
    public virtual bool Dismiss(DialogResult result);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Dialog();
    [CompilerGeneratedAttribute]
private void set_Dialog(object value);
    [CompilerGeneratedAttribute]
public sealed virtual RenderFragment get_RenderFragment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RenderFragment(RenderFragment value);
    public sealed virtual Task`1<DialogResult> get_Result();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private sealed virtual override TaskCompletionSource`1<bool> MudBlazor.IDialogReference.get_RenderCompleteTaskCompletionSource();
    [NullableContextAttribute("1")]
public sealed virtual void InjectDialog(object inst);
    [NullableContextAttribute("1")]
public sealed virtual void InjectRenderFragment(RenderFragment rf);
    [AsyncStateMachineAttribute("MudBlazor.DialogReference/<GetReturnValueAsync>d__24`1")]
public sealed virtual Task`1<T> GetReturnValueAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.DialogResult : object {
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    public object Data { get; }
    public Type DataType { get; }
    public bool Canceled { get; }
    protected internal DialogResult(object data, Type resultType, bool canceled);
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
public bool get_Canceled();
    [NullableContextAttribute("1")]
public static DialogResult Ok(T result);
    [NullableContextAttribute("1")]
public static DialogResult Ok(T result, Type dialogType);
    [NullableContextAttribute("1")]
public static DialogResult Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.DialogService : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<IDialogReference> OnDialogInstanceAdded;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IDialogReference, Task> DialogInstanceAddedAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<IDialogReference, DialogResult> OnDialogCloseRequested;
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnDialogInstanceAdded(Action`1<IDialogReference> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnDialogInstanceAdded(Action`1<IDialogReference> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DialogInstanceAddedAsync(Func`2<IDialogReference, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DialogInstanceAddedAsync(Func`2<IDialogReference, Task> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnDialogCloseRequested(Action`2<IDialogReference, DialogResult> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnDialogCloseRequested(Action`2<IDialogReference, DialogResult> value);
    public sealed virtual IDialogReference Show();
    public sealed virtual IDialogReference Show(string title);
    public sealed virtual IDialogReference Show(string title, DialogOptions options);
    public sealed virtual IDialogReference Show(string title, DialogParameters parameters);
    public sealed virtual IDialogReference Show(string title, DialogParameters parameters, DialogOptions options);
    public sealed virtual IDialogReference Show(Type contentComponent);
    public sealed virtual IDialogReference Show(Type contentComponent, string title);
    public sealed virtual IDialogReference Show(Type contentComponent, string title, DialogOptions options);
    public sealed virtual IDialogReference Show(Type contentComponent, string title, DialogParameters parameters);
    public sealed virtual IDialogReference Show(Type contentComponent, string title, DialogParameters parameters, DialogOptions options);
    public sealed virtual Task`1<IDialogReference> ShowAsync();
    public sealed virtual Task`1<IDialogReference> ShowAsync(string title);
    public sealed virtual Task`1<IDialogReference> ShowAsync(string title, DialogOptions options);
    public sealed virtual Task`1<IDialogReference> ShowAsync(string title, DialogParameters parameters);
    public sealed virtual Task`1<IDialogReference> ShowAsync(string title, DialogParameters parameters, DialogOptions options);
    public sealed virtual Task`1<IDialogReference> ShowAsync(Type contentComponent);
    public sealed virtual Task`1<IDialogReference> ShowAsync(Type contentComponent, string title);
    public sealed virtual Task`1<IDialogReference> ShowAsync(Type contentComponent, string title, DialogOptions options);
    public sealed virtual Task`1<IDialogReference> ShowAsync(Type contentComponent, string title, DialogParameters parameters);
    [AsyncStateMachineAttribute("MudBlazor.DialogService/<ShowAsync>d__29")]
public sealed virtual Task`1<IDialogReference> ShowAsync(Type contentComponent, string title, DialogParameters parameters, DialogOptions options);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<Nullable`1<bool>> ShowMessageBox(string title, string message, string yesText, string noText, string cancelText, DialogOptions options);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<Nullable`1<bool>> ShowMessageBox(string title, MarkupString markupMessage, string yesText, string noText, string cancelText, DialogOptions options);
    [AsyncStateMachineAttribute("MudBlazor.DialogService/<ShowMessageBox>d__32")]
public sealed virtual Task`1<Nullable`1<bool>> ShowMessageBox(MessageBoxOptions messageBoxOptions, DialogOptions options);
    public sealed virtual void Close(IDialogReference dialog);
    public virtual void Close(IDialogReference dialog, DialogResult result);
    public virtual IDialogReference CreateReference();
}
public enum MudBlazor.Direction : Enum {
    public int value__;
    [DescriptionAttribute("bottom")]
public static Direction Bottom;
    [DescriptionAttribute("top")]
public static Direction Top;
    [DescriptionAttribute("left")]
public static Direction Left;
    [DescriptionAttribute("right")]
public static Direction Right;
    [DescriptionAttribute("start")]
public static Direction Start;
    [DescriptionAttribute("end")]
public static Direction End;
}
[ExtensionAttribute]
public static class MudBlazor.DirectionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Direction mudEnum);
}
public enum MudBlazor.DividerType : Enum {
    public int value__;
    [DescriptionAttribute("fullwidth")]
public static DividerType FullWidth;
    [DescriptionAttribute("inset")]
public static DividerType Inset;
    [DescriptionAttribute("middle")]
public static DividerType Middle;
}
[ExtensionAttribute]
public static class MudBlazor.DividerTypeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(DividerType mudEnum);
}
[DebuggerDisplayAttribute("Epsilon = {_epsilon}")]
public class MudBlazor.DoubleEpsilonEqualityComparer : object {
    private static double DoubleMinNormal;
    private double _epsilon;
    public static DoubleEpsilonEqualityComparer Default;
    public DoubleEpsilonEqualityComparer(double epsilon);
    private static DoubleEpsilonEqualityComparer();
    public sealed virtual bool Equals(double x, double y);
    public sealed virtual int GetHashCode(double obj);
}
public enum MudBlazor.DrawerClipMode : Enum {
    public int value__;
    [DescriptionAttribute("never")]
public static DrawerClipMode Never;
    [DescriptionAttribute("docked")]
public static DrawerClipMode Docked;
    [DescriptionAttribute("always")]
public static DrawerClipMode Always;
}
[ExtensionAttribute]
public static class MudBlazor.DrawerClipModeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(DrawerClipMode mudEnum);
}
public enum MudBlazor.DrawerVariant : Enum {
    public int value__;
    [DescriptionAttribute("temporary")]
public static DrawerVariant Temporary;
    [DescriptionAttribute("responsive")]
public static DrawerVariant Responsive;
    [DescriptionAttribute("persistent")]
public static DrawerVariant Persistent;
    [DescriptionAttribute("mini")]
public static DrawerVariant Mini;
}
[ExtensionAttribute]
public static class MudBlazor.DrawerVariantSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(DrawerVariant mudEnum);
}
public enum MudBlazor.Edge : Enum {
    public int value__;
    [DescriptionAttribute("false")]
public static Edge False;
    [DescriptionAttribute("start")]
public static Edge Start;
    [DescriptionAttribute("end")]
public static Edge End;
}
[ExtensionAttribute]
public static class MudBlazor.EdgeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Edge mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
public static class MudBlazor.ElementReferenceExtensions : object {
    [NullableAttribute("2")]
private static PropertyInfo _jsRuntimeProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<Func`2<WebElementReferenceContext, IJSRuntime>> _jsRuntimeAccessor;
    private static ElementReferenceExtensions();
    private static Func`2<WebElementReferenceContext, IJSRuntime> JsRuntimeFactory();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static IJSRuntime GetJSRuntime(ElementReference elementReference);
    [ExtensionAttribute]
public static ValueTask MudFocusFirstAsync(ElementReference elementReference, int skip, int min);
    [ExtensionAttribute]
public static ValueTask MudFocusLastAsync(ElementReference elementReference, int skip, int min);
    [ExtensionAttribute]
public static ValueTask MudSaveFocusAsync(ElementReference elementReference);
    [ExtensionAttribute]
public static ValueTask MudRestoreFocusAsync(ElementReference elementReference);
    [ExtensionAttribute]
public static ValueTask MudBlurAsync(ElementReference elementReference);
    [ExtensionAttribute]
public static ValueTask MudSelectAsync(ElementReference elementReference);
    [ExtensionAttribute]
public static ValueTask MudSelectRangeAsync(ElementReference elementReference, int pos1, int pos2);
    [ExtensionAttribute]
public static ValueTask MudChangeCssAsync(ElementReference elementReference, string css);
    [ExtensionAttribute]
public static ValueTask`1<BoundingClientRect> MudGetBoundingClientRectAsync(ElementReference elementReference);
    [ExtensionAttribute]
public static ValueTask`1<Int32[]> AddDefaultPreventingHandlers(ElementReference elementReference, String[] eventNames);
    [ExtensionAttribute]
public static ValueTask RemoveDefaultPreventingHandlers(ElementReference elementReference, String[] eventNames, Int32[] listenerIds);
}
[EventHandlerAttribute("onanimationend", "System.EventArgs", "True", "False")]
public static class MudBlazor.EventHandlers : object {
}
public class MudBlazor.EventListener : object {
    private IJSRuntime _jsRuntime;
    private DotNetObjectReference`1<EventListener> _dotNetRef;
    private bool _disposed;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Guid, ValueTuple`2<Type, Func`2<object, Task>>> _callbackResolver;
    [DynamicDependencyAttribute("OnEventOccur")]
public EventListener(IJSRuntime runtime);
    [AsyncStateMachineAttribute("MudBlazor.EventListener/<OnEventOccur>d__5")]
[JSInvokableAttribute]
public Task OnEventOccur(Guid key, string eventData);
    [AsyncStateMachineAttribute("MudBlazor.EventListener/<Subscribe>d__6`1")]
public sealed virtual Task`1<Guid> Subscribe(string eventName, string elementId, string projectionName, int throotleInterval, Func`2<object, Task> callback);
    [AsyncStateMachineAttribute("MudBlazor.EventListener/<SubscribeGlobal>d__7`1")]
public sealed virtual Task`1<Guid> SubscribeGlobal(string eventName, int throotleInterval, Func`2<object, Task> callback);
    [AsyncStateMachineAttribute("MudBlazor.EventListener/<Unsubscribe>d__8")]
public sealed virtual Task`1<bool> Unsubscribe(Guid key);
    private ValueTuple`2<Type, String[]> GetTypeInformation();
    private Guid RegisterCallBack(Type type, Func`2<object, Task> callback);
    [AsyncStateMachineAttribute("MudBlazor.EventListener/<DisposeAsync>d__11")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class MudBlazor.EventListenerFactory : object {
    private IServiceProvider _provider;
    public EventListenerFactory(IServiceProvider provider);
    public sealed virtual IEventListener Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MudBlazor.EventUtil : object {
    public static Action AsNonRenderingEventHandler(Action callback);
    public static Action`1<TValue> AsNonRenderingEventHandler(Action`1<TValue> callback);
    public static Func`1<Task> AsNonRenderingEventHandler(Func`1<Task> callback);
    public static Func`2<TValue, Task> AsNonRenderingEventHandler(Func`2<TValue, Task> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.ExpressionBodyIdentifier : ExpressionVisitor {
    public Expression Identify(Expression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.ExpressionExtensions : object {
    [ExtensionAttribute]
public static string GetFullPathOfMember(Expression`1<Func`1<T>> property);
    [ExtensionAttribute]
public static string GetLabelString(Expression`1<Func`1<T>> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MudBlazor.ExpressionModifier : object {
    [ExtensionAttribute]
internal static Expression`1<Func`2<T, bool>> Modify(Expression firstExpression, Expression secondExpression);
    [ExtensionAttribute]
internal static Expression ReplaceBinary(Expression exp, ExpressionType from, ExpressionType to);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> GenerateBinary(Expression expression, ExpressionType binaryOperation, object value);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, U>> ChangeExpressionReturnType(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.ExpressionParameterIdentifier : ExpressionVisitor {
    public Expression Identify(Expression node);
    protected virtual Expression VisitLambda(Expression`1<T> node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.ExpressionReplacer : ExpressionVisitor {
    private Expression _from;
    private Expression _to;
    public ExpressionReplacer(Expression from, Expression to);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.Extensions.ComponentBaseWithStateExtensions : object {
    [ExtensionAttribute]
public static T GetState(TComponent component, Func`2<TComponent, T> propertyExpression, string propertyNameCallerArgumentExpression);
    [ExtensionAttribute]
public static T GetState(ComponentBaseWithState component, string propertyName);
    private static string GetPropertyFromFuncLambda(string propertyNameExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.Extensions.DateTimeExtensions : object {
    [ExtensionAttribute]
public static string ToIsoDateString(DateTime self);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToIsoDateString(Nullable`1<DateTime> self);
    [ExtensionAttribute]
public static DateTime StartOfMonth(DateTime self, CultureInfo culture);
    [ExtensionAttribute]
public static DateTime EndOfMonth(DateTime self, CultureInfo culture);
    [ExtensionAttribute]
public static DateTime StartOfWeek(DateTime self, DayOfWeek firstDayOfWeek);
}
[ExtensionAttribute]
public static class MudBlazor.Extensions.DoubleExtensions : object {
    [ExtensionAttribute]
public static string ToInvariantString(double input);
}
public static class MudBlazor.Extensions.EnumExtensions : object {
    [NullableContextAttribute("1")]
internal static IEnumerable`1<Enum> GetSafeEnumValues(Type type);
}
[ExtensionAttribute]
public static class MudBlazor.Extensions.KeepInRangeExtensions : object {
    [ExtensionAttribute]
public static double EnsureRange(double input, double max);
    [ExtensionAttribute]
public static double EnsureRange(double input, double min, double max);
    [ExtensionAttribute]
public static byte EnsureRange(byte input, byte max);
    [ExtensionAttribute]
public static byte EnsureRange(byte input, byte min, byte max);
    [ExtensionAttribute]
public static byte EnsureRangeToByte(int input);
    [ExtensionAttribute]
public static int EnsureRange(int input, int max);
    [ExtensionAttribute]
public static int EnsureRange(int input, int min, int max);
}
public static class MudBlazor.Extensions.MathExtensions : object {
    public static double Map(double sourceMin, double sourceMax, double targetMin, double targetMax, double value);
}
[ExtensionAttribute]
public static class MudBlazor.Extensions.ObjectExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T As(object self);
}
[ExtensionAttribute]
internal static class MudBlazor.Extensions.ResizeOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static ResizeOptions Clone(ResizeOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.FieldType : object {
    [CompilerGeneratedAttribute]
private Type <InnerType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBoolean>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGuid>k__BackingField;
    public Type InnerType { get; public set; }
    public bool IsString { get; public set; }
    public bool IsNumber { get; public set; }
    public bool IsEnum { get; public set; }
    public bool IsDateTime { get; public set; }
    public bool IsBoolean { get; public set; }
    public bool IsGuid { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_InnerType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InnerType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsString();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsString(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNumber();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsNumber(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsEnum(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDateTime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsDateTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBoolean();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsBoolean(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsGuid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsGuid(bool value);
    [NullableContextAttribute("1")]
public static FieldType Identify(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Filter`1 : object {
    private MudDataGrid`1<T> _dataGrid;
    private IFilterDefinition`1<T> _filterDefinition;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Column`1<T> _column;
    [NullableAttribute("2")]
internal string _valueString;
    internal Nullable`1<double> _valueNumber;
    [NullableAttribute("2")]
internal Enum _valueEnum;
    internal Nullable`1<bool> _valueBool;
    internal Nullable`1<DateTime> _valueDate;
    internal Nullable`1<TimeSpan> _valueTime;
    internal Nullable`1<Guid> _valueGuid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Column`1<T> FilterColumn { get; }
    public Filter`1(MudDataGrid`1<T> dataGrid, IFilterDefinition`1<T> filterDefinition, Column`1<T> column);
    internal Column`1<T> get_FilterColumn();
    [AsyncStateMachineAttribute("MudBlazor.Filter`1/<RemoveFilterAsync>d__13")]
internal Task RemoveFilterAsync();
    internal void FieldChanged(Column`1<T> column);
    internal void StringValueChanged(string value);
    internal void NumberValueChanged(Nullable`1<double> value);
    internal void EnumValueChanged(Enum value);
    internal void BoolValueChanged(Nullable`1<bool> value);
    internal void DateValueChanged(Nullable`1<DateTime> value);
    internal void TimeValueChanged(Nullable`1<TimeSpan> value);
    internal void GuidValueChanged(Nullable`1<Guid> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <get_FilterColumn>b__11_0(Column`1<T> c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.FilterContext`1 : object {
    private MudDataGrid`1<T> _dataGrid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HeaderCell`1<T> <HeaderCell>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IFilterDefinition`1<T> <FilterDefinition>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private FilterActions<T> <Actions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal HeaderCell`1<T> HeaderCell { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IFilterDefinition`1<T> FilterDefinition { get; public set; }
    public IEnumerable`1<T> Items { get; }
    public List`1<IFilterDefinition`1<T>> FilterDefinitions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FilterActions<T> Actions { get; }
    public FilterContext`1(MudDataGrid`1<T> dataGrid);
    [CompilerGeneratedAttribute]
internal HeaderCell`1<T> get_HeaderCell();
    [CompilerGeneratedAttribute]
internal void set_HeaderCell(HeaderCell`1<T> value);
    [CompilerGeneratedAttribute]
public IFilterDefinition`1<T> get_FilterDefinition();
    [CompilerGeneratedAttribute]
public void set_FilterDefinition(IFilterDefinition`1<T> value);
    public IEnumerable`1<T> get_Items();
    public List`1<IFilterDefinition`1<T>> get_FilterDefinitions();
    [CompilerGeneratedAttribute]
public FilterActions<T> get_Actions();
    [AsyncStateMachineAttribute("MudBlazor.FilterContext`1/<<-ctor>b__16_0>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__16_0(IFilterDefinition`1<T> x);
    [AsyncStateMachineAttribute("MudBlazor.FilterContext`1/<<-ctor>b__16_1>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__16_1(IEnumerable`1<IFilterDefinition`1<T>> x);
    [AsyncStateMachineAttribute("MudBlazor.FilterContext`1/<<-ctor>b__16_2>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__16_2(IFilterDefinition`1<T> x);
    [AsyncStateMachineAttribute("MudBlazor.FilterContext`1/<<-ctor>b__16_3>d")]
[CompilerGeneratedAttribute]
private Task <.ctor>b__16_3(IEnumerable`1<IFilterDefinition`1<T>> x);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.FilterDefinition`1 : object {
    private int _cachedExpressionHashCode;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, bool> _cachedFilterFunction;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Column`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <FilterFunction>k__BackingField;
    public Guid Id { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Column`1<T> Column { get; public set; }
    public string Title { get; public set; }
    public string Operator { get; public set; }
    public object Value { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<T, bool> FilterFunction { get; public set; }
    [NullableAttribute("1")]
public FieldType FieldType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual Column`1<T> get_Column();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Column(Column`1<T> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Title();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Operator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Operator(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_FilterFunction();
    [CompilerGeneratedAttribute]
public void set_FilterFunction(Func`2<T, bool> value);
    [NullableContextAttribute("1")]
public sealed virtual FieldType get_FieldType();
    [NullableContextAttribute("1")]
public sealed virtual Func`2<T, bool> GenerateFilterFunction(FilterOptions filterOptions);
    [NullableContextAttribute("1")]
public sealed virtual IFilterDefinition`1<T> Clone();
}
public static class MudBlazor.FilterExpressionGenerator : object {
    [NullableContextAttribute("1")]
public static Expression`1<Func`2<T, bool>> GenerateExpression(IFilterDefinition`1<T> filter, FilterOptions filterOptions);
}
public class MudBlazor.FilterHeaderCell`1 : MudComponentBase {
    [CompilerGeneratedAttribute]
private MudDataGrid`1<T> <DataGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private Column`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [CascadingParameterAttribute]
public MudDataGrid`1<T> DataGrid { get; public set; }
    [ParameterAttribute]
public Column`1<T> Column { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    private string _classname { get; }
    private string _style { get; }
    private Type dataType { get; }
    private FieldType fieldType { get; }
    private String[] operators { get; }
    private string valueString { get; }
    private Nullable`1<double> valueNumber { get; }
    private Nullable`1<bool> valueBool { get; }
    private Enum valueEnum { get; }
    private Nullable`1<DateTime> valueDate { get; }
    private Nullable`1<TimeSpan> valueTime { get; }
    private string operator { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
public MudDataGrid`1<T> get_DataGrid();
    [CompilerGeneratedAttribute]
public void set_DataGrid(MudDataGrid`1<T> value);
    [CompilerGeneratedAttribute]
public Column`1<T> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(Column`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    private string get__classname();
    private string get__style();
    private Type get_dataType();
    private FieldType get_fieldType();
    private String[] get_operators();
    private string get_valueString();
    private Nullable`1<double> get_valueNumber();
    private Nullable`1<bool> get_valueBool();
    private Enum get_valueEnum();
    private Nullable`1<DateTime> get_valueDate();
    private Nullable`1<TimeSpan> get_valueTime();
    private string get_operator();
    private string chosenOperatorStyle(string o);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<ChangeOperatorAsync>d__37")]
private Task ChangeOperatorAsync(string o);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<StringValueChangedAsync>d__38")]
internal Task StringValueChangedAsync(string value);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<NumberValueChangedAsync>d__39")]
internal Task NumberValueChangedAsync(Nullable`1<double> value);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<EnumValueChangedAsync>d__40")]
internal Task EnumValueChangedAsync(Enum value);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<BoolValueChangedAsync>d__41")]
internal Task BoolValueChangedAsync(Nullable`1<bool> value);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<DateValueChangedAsync>d__42")]
internal Task DateValueChangedAsync(Nullable`1<DateTime> value);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<TimeValueChangedAsync>d__43")]
internal Task TimeValueChangedAsync(Nullable`1<TimeSpan> value);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<ApplyFilterAsync>d__44")]
internal Task ApplyFilterAsync(IFilterDefinition`1<T> filterDefinition);
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<ClearFilterAsync>d__45")]
private Task ClearFilterAsync();
    [AsyncStateMachineAttribute("MudBlazor.FilterHeaderCell`1/<ClearFilterAsync>d__46")]
internal Task ClearFilterAsync(IFilterDefinition`1<T> filterDefinition);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_2(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_6(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_7(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_8(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_9(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_4(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MudBlazor.FilterOperator : object {
    internal static String[] GetOperatorByDataType(Type type);
    internal static String[] GetOperatorByDataType(FieldType fieldType);
    internal static string GetTranslationKeyByOperatorName(string operatorName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.FilterOptions : object {
    [CompilerGeneratedAttribute]
private DataGridFilterCaseSensitivity <FilterCaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private static FilterOptions <Default>k__BackingField;
    public DataGridFilterCaseSensitivity FilterCaseSensitivity { get; public set; }
    public static FilterOptions Default { get; }
    private static FilterOptions();
    [CompilerGeneratedAttribute]
public DataGridFilterCaseSensitivity get_FilterCaseSensitivity();
    [CompilerGeneratedAttribute]
public void set_FilterCaseSensitivity(DataGridFilterCaseSensitivity value);
    [CompilerGeneratedAttribute]
public static FilterOptions get_Default();
}
public class MudBlazor.FooterCell`1 : MudComponentBase {
    [CompilerGeneratedAttribute]
private MudDataGrid`1<T> <DataGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private Column`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <CurrentItems>k__BackingField;
    [CascadingParameterAttribute]
public MudDataGrid`1<T> DataGrid { get; public set; }
    [ParameterAttribute]
public Column`1<T> Column { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<T> CurrentItems { get; public set; }
    private string _classname { get; }
    private string _style { get; }
    internal IEnumerable`1<T> items { get; }
    [CompilerGeneratedAttribute]
public MudDataGrid`1<T> get_DataGrid();
    [CompilerGeneratedAttribute]
public void set_DataGrid(MudDataGrid`1<T> value);
    [CompilerGeneratedAttribute]
public Column`1<T> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(Column`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_CurrentItems();
    [CompilerGeneratedAttribute]
public void set_CurrentItems(IEnumerable`1<T> value);
    private string get__classname();
    private string get__style();
    internal IEnumerable`1<T> get_items();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.FooterContext`1 : object {
    private MudDataGrid`1<T> _dataGrid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private FooterActions<T> <Actions>k__BackingField;
    public IEnumerable`1<T> Items { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FooterActions<T> Actions { get; }
    public Nullable`1<bool> IsAllSelected { get; }
    public FooterContext`1(MudDataGrid`1<T> dataGrid);
    public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public FooterActions<T> get_Actions();
    public Nullable`1<bool> get_IsAllSelected();
    [CompilerGeneratedAttribute]
private Task <.ctor>b__8_0(Nullable`1<bool> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.GridData`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItems>k__BackingField;
    public IEnumerable`1<T> Items { get; public set; }
    public int TotalItems { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public int get_TotalItems();
    [CompilerGeneratedAttribute]
public void set_TotalItems(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.GridState`1 : object {
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SortDefinition`1<T>> <SortDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IFilterDefinition`1<T>> <FilterDefinitions>k__BackingField;
    public int Page { get; public set; }
    public int PageSize { get; public set; }
    public ICollection`1<SortDefinition`1<T>> SortDefinitions { get; public set; }
    public ICollection`1<IFilterDefinition`1<T>> FilterDefinitions { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public ICollection`1<SortDefinition`1<T>> get_SortDefinitions();
    [CompilerGeneratedAttribute]
public void set_SortDefinitions(ICollection`1<SortDefinition`1<T>> value);
    [CompilerGeneratedAttribute]
public ICollection`1<IFilterDefinition`1<T>> get_FilterDefinitions();
    [CompilerGeneratedAttribute]
public void set_FilterDefinitions(ICollection`1<IFilterDefinition`1<T>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.GridStateVirtualize`1 : object {
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SortDefinition`1<T>> <SortDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IFilterDefinition`1<T>> <FilterDefinitions>k__BackingField;
    public int StartIndex { get; public set; }
    public int Count { get; public set; }
    public IReadOnlyCollection`1<SortDefinition`1<T>> SortDefinitions { get; public set; }
    public IReadOnlyCollection`1<IFilterDefinition`1<T>> FilterDefinitions { get; public set; }
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartIndex(int value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Count(int value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SortDefinition`1<T>> get_SortDefinitions();
    [CompilerGeneratedAttribute]
public void set_SortDefinitions(IReadOnlyCollection`1<SortDefinition`1<T>> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IFilterDefinition`1<T>> get_FilterDefinitions();
    [CompilerGeneratedAttribute]
public void set_FilterDefinitions(IReadOnlyCollection`1<IFilterDefinition`1<T>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.GroupDefinition`1 : object {
    [CompilerGeneratedAttribute]
private IGrouping`2<object, T> <Grouping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    public IGrouping`2<object, T> Grouping { get; public set; }
    public bool Expanded { get; public set; }
    public GroupDefinition`1(IGrouping`2<object, T> grouping, bool expanded);
    [CompilerGeneratedAttribute]
public IGrouping`2<object, T> get_Grouping();
    [CompilerGeneratedAttribute]
public void set_Grouping(IGrouping`2<object, T> value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
}
public class MudBlazor.H1 : BaseTypography {
}
public class MudBlazor.H2 : BaseTypography {
}
public class MudBlazor.H3 : BaseTypography {
}
public class MudBlazor.H4 : BaseTypography {
}
public class MudBlazor.H5 : BaseTypography {
}
public class MudBlazor.H6 : BaseTypography {
}
public class MudBlazor.HeaderCell`1 : MudComponentBase {
    private string _id;
    [CompilerGeneratedAttribute]
private MudDataGrid`1<T> <DataGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnlyHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Column`1<T> <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    private SortDirection _initialDirection;
    private bool _selected;
    private ElementReference _headerElement;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Width>k__BackingField;
    private Nullable`1<double> _resizerHeight;
    private bool _isResizing;
    private bool _filtersMenuVisible;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [CascadingParameterAttribute]
public MudDataGrid`1<T> DataGrid { get; public set; }
    [CascadingParameterAttribute]
public bool IsOnlyHeader { get; public set; }
    [ParameterAttribute]
public Column`1<T> Column { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    private string _classname { get; }
    private string _style { get; }
    private string _resizerStyle { get; }
    private string _resizerClass { get; }
    private string _sortHeaderClass { get; }
    private string _optionsClass { get; }
    public Nullable`1<double> Width { get; internal set; }
    private string computedTitle { get; }
    private bool sortable { get; }
    private bool resizable { get; }
    private bool filterable { get; }
    private bool showFilterIcon { get; }
    private bool hideable { get; }
    private bool groupable { get; }
    private bool showColumnOptions { get; }
    internal string sortIconClass { get; }
    internal bool hasFilter { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
public MudDataGrid`1<T> get_DataGrid();
    [CompilerGeneratedAttribute]
public void set_DataGrid(MudDataGrid`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_IsOnlyHeader();
    [CompilerGeneratedAttribute]
public void set_IsOnlyHeader(bool value);
    [CompilerGeneratedAttribute]
public Column`1<T> get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(Column`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    public SortDirection get_SortDirection();
    public void set_SortDirection(SortDirection value);
    private string get__classname();
    private string get__style();
    private string get__resizerStyle();
    private string get__resizerClass();
    private string get__sortHeaderClass();
    private string get__optionsClass();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Width();
    [CompilerGeneratedAttribute]
internal void set_Width(Nullable`1<double> value);
    private string get_computedTitle();
    private bool get_sortable();
    private bool get_resizable();
    private bool get_filterable();
    private bool get_showFilterIcon();
    private bool get_hideable();
    private bool get_groupable();
    private bool get_showColumnOptions();
    internal string get_sortIconClass();
    internal bool get_hasFilter();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<OnParametersSetAsync>d__62")]
protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<OnInitializedAsync>d__63")]
protected virtual Task OnInitializedAsync();
    private void OnGridSortChanged(Dictionary`2<string, SortDefinition`1<T>> activeSorts, HashSet`1<string> removedSorts);
    private void OnSelectedAllItemsChanged(bool value);
    private void OnSelectedItemsChanged(HashSet`1<T> items);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<OnResizerPointerDown>d__67")]
private Task OnResizerPointerDown(PointerEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<OnResizerPointerOver>d__68")]
private Task OnResizerPointerOver();
    private void OnResizerPointerLeave();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<UpdateColumnWidth>d__70")]
internal Task`1<double> UpdateColumnWidth(double targetWidth, double gridHeight, bool finishResize);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<GetCurrentCellWidth>d__71")]
internal Task`1<double> GetCurrentCellWidth();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<SortChangedAsync>d__72")]
internal Task SortChangedAsync(MouseEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<RemoveSortAsync>d__73")]
internal Task RemoveSortAsync();
    internal void AddFilter();
    internal void OpenFilters();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<ApplyFilterAsync>d__76")]
internal Task ApplyFilterAsync();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<ApplyFilterAsync>d__77")]
internal Task ApplyFilterAsync(IFilterDefinition`1<T> filterDefinition);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<ApplyFiltersAsync>d__78")]
internal Task ApplyFiltersAsync(IEnumerable`1<IFilterDefinition`1<T>> filterDefinitions);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<ClearFilterAsync>d__79")]
internal Task ClearFilterAsync();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<ClearFilterAsync>d__80")]
internal Task ClearFilterAsync(IFilterDefinition`1<T> filterDefinition);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<ClearFiltersAsync>d__81")]
internal Task ClearFiltersAsync(IEnumerable`1<IFilterDefinition`1<T>> filterDefinitions);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<CheckedChangedAsync>d__82")]
private Task CheckedChangedAsync(bool value);
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<HideColumnAsync>d__83")]
internal Task HideColumnAsync();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<GroupColumnAsync>d__84")]
internal Task GroupColumnAsync();
    [AsyncStateMachineAttribute("MudBlazor.HeaderCell`1/<UngroupColumnAsync>d__85")]
internal Task UngroupColumnAsync();
    private void MarkAsUnsorted();
    public sealed virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal RenderFragment TableHeader();
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private bool <get_hasFilter>b__61_0(IFilterDefinition`1<T> x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <OnInitializedAsync>b__63_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <SortChangedAsync>b__72_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <SortChangedAsync>b__72_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <RemoveSortAsync>b__73_0();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__88_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private bool <BuildRenderTree>b__88_1(Column`1<T> item);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_4(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_5(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_6(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_7(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_8(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <TableHeader>b__89_2(bool __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_9(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_10(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_11(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_12(RenderTreeBuilder __builder6);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <TableHeader>b__89_13(RenderTreeBuilder __builder6);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.HeaderContext`1 : object {
    private MudDataGrid`1<T> _dataGrid;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private HeaderActions<T> <Actions>k__BackingField;
    public IEnumerable`1<T> Items { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public HeaderActions<T> Actions { get; }
    public Nullable`1<bool> IsAllSelected { get; }
    public HeaderContext`1(MudDataGrid`1<T> dataGrid);
    public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public HeaderActions<T> get_Actions();
    public Nullable`1<bool> get_IsAllSelected();
    [CompilerGeneratedAttribute]
private Task <.ctor>b__8_0(Nullable`1<bool> x);
}
public class MudBlazor.HierarchyColumn`1 : MudComponentBase {
    private bool _finishedInitialExpanded;
    [CompilerGeneratedAttribute]
private string <ClosedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, bool> <ButtonDisabledFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DragAndDropEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hideable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <HiddenChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, bool> <InitiallyExpandedFunc>k__BackingField;
    [ParameterAttribute]
public string ClosedIcon { get; public set; }
    [ParameterAttribute]
public string OpenIcon { get; public set; }
    [ParameterAttribute]
public Size IconSize { get; public set; }
    [ParameterAttribute]
public Func`2<T, bool> ButtonDisabledFunc { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> DragAndDropEnabled { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Hideable { get; public set; }
    [ParameterAttribute]
public bool Hidden { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> HiddenChanged { get; public set; }
    [ParameterAttribute]
public Func`2<T, bool> InitiallyExpandedFunc { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClosedIcon();
    [CompilerGeneratedAttribute]
public void set_ClosedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_OpenIcon();
    [CompilerGeneratedAttribute]
public void set_OpenIcon(string value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_ButtonDisabledFunc();
    [CompilerGeneratedAttribute]
public void set_ButtonDisabledFunc(Func`2<T, bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DragAndDropEnabled();
    [CompilerGeneratedAttribute]
public void set_DragAndDropEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hideable();
    [CompilerGeneratedAttribute]
public void set_Hideable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_HiddenChanged();
    [CompilerGeneratedAttribute]
public void set_HiddenChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_InitiallyExpandedFunc();
    [CompilerGeneratedAttribute]
public void set_InitiallyExpandedFunc(Func`2<T, bool> value);
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__38_0(CellContext`1<T> context);
}
public enum MudBlazor.HorizontalAlignment : Enum {
    public int value__;
    [DescriptionAttribute("center")]
public static HorizontalAlignment Center;
    [DescriptionAttribute("left")]
public static HorizontalAlignment Left;
    [DescriptionAttribute("right")]
public static HorizontalAlignment Right;
    [DescriptionAttribute("start")]
public static HorizontalAlignment Start;
    [DescriptionAttribute("end")]
public static HorizontalAlignment End;
}
[ExtensionAttribute]
public static class MudBlazor.HorizontalAlignmentSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(HorizontalAlignment mudEnum);
}
[NullableContextAttribute("2")]
public interface MudBlazor.IBrowserViewportObserver {
    public Guid Id { get; }
    public ResizeOptions ResizeOptions { get; }
    public abstract virtual Guid get_Id();
    public virtual ResizeOptions get_ResizeOptions();
    [NullableContextAttribute("1")]
public abstract virtual Task NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs);
}
[NullableContextAttribute("1")]
public interface MudBlazor.IBrowserViewportService {
    public ResizeOptions ResizeOptions { get; }
    public abstract virtual ResizeOptions get_ResizeOptions();
    public abstract virtual Task SubscribeAsync(IBrowserViewportObserver observer, bool fireImmediately);
    public abstract virtual Task SubscribeAsync(Guid observerId, Action`1<BrowserViewportEventArgs> lambda, ResizeOptions options, bool fireImmediately);
    public abstract virtual Task SubscribeAsync(Guid observerId, Func`2<BrowserViewportEventArgs, Task> lambda, ResizeOptions options, bool fireImmediately);
    public abstract virtual Task UnsubscribeAsync(IBrowserViewportObserver observer);
    public abstract virtual Task UnsubscribeAsync(Guid observerId);
    public abstract virtual Task`1<bool> IsMediaQueryMatchAsync(string mediaQuery);
    public abstract virtual Task`1<bool> IsBreakpointWithinWindowSizeAsync(Breakpoint breakpoint);
    public abstract virtual Task`1<bool> IsBreakpointWithinReferenceSizeAsync(Breakpoint breakpoint, Breakpoint reference);
    public abstract virtual Task`1<Breakpoint> GetCurrentBreakpointAsync();
    public abstract virtual Task`1<BrowserWindowSize> GetCurrentBrowserWindowSizeAsync();
}
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.Icons : object {
}
internal static class MudBlazor.Identifier : object {
    private static string Chars;
    private static int CharsLength;
    private static int RandomStringLength;
    internal static string Create(ReadOnlySpan`1<char> prefix);
    internal static string Create();
}
[NullableContextAttribute("2")]
public interface MudBlazor.IDialogReference {
    public Guid Id { get; }
    public RenderFragment RenderFragment { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Task`1<DialogResult> Result { get; }
    [NullableAttribute("1")]
public TaskCompletionSource`1<bool> RenderCompleteTaskCompletionSource { get; }
    public object Dialog { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual RenderFragment get_RenderFragment();
    public abstract virtual void set_RenderFragment(RenderFragment value);
    public abstract virtual Task`1<DialogResult> get_Result();
    [NullableContextAttribute("1")]
public abstract virtual TaskCompletionSource`1<bool> get_RenderCompleteTaskCompletionSource();
    public abstract virtual void Close();
    public abstract virtual void Close(DialogResult result);
    public abstract virtual bool Dismiss(DialogResult result);
    public abstract virtual object get_Dialog();
    [NullableContextAttribute("1")]
public abstract virtual void InjectRenderFragment(RenderFragment rf);
    [NullableContextAttribute("1")]
public abstract virtual void InjectDialog(object inst);
    public abstract virtual Task`1<T> GetReturnValueAsync();
}
[NullableContextAttribute("1")]
public interface MudBlazor.IDialogService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDialogInstanceAdded(Action`1<IDialogReference> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDialogInstanceAdded(Action`1<IDialogReference> value);
    public virtual void add_DialogInstanceAddedAsync(Func`2<IDialogReference, Task> value);
    public virtual void remove_DialogInstanceAddedAsync(Func`2<IDialogReference, Task> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDialogCloseRequested(Action`2<IDialogReference, DialogResult> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDialogCloseRequested(Action`2<IDialogReference, DialogResult> value);
    public abstract virtual IDialogReference Show();
    public abstract virtual IDialogReference Show(string title);
    public abstract virtual IDialogReference Show(string title, DialogOptions options);
    public abstract virtual IDialogReference Show(string title, DialogParameters parameters);
    public abstract virtual IDialogReference Show(string title, DialogParameters parameters, DialogOptions options);
    public abstract virtual IDialogReference Show(Type component);
    public abstract virtual IDialogReference Show(Type component, string title);
    public abstract virtual IDialogReference Show(Type component, string title, DialogOptions options);
    public abstract virtual IDialogReference Show(Type component, string title, DialogParameters parameters);
    public abstract virtual IDialogReference Show(Type component, string title, DialogParameters parameters, DialogOptions options);
    public abstract virtual Task`1<IDialogReference> ShowAsync();
    public abstract virtual Task`1<IDialogReference> ShowAsync(string title);
    public abstract virtual Task`1<IDialogReference> ShowAsync(string title, DialogOptions options);
    public abstract virtual Task`1<IDialogReference> ShowAsync(string title, DialogParameters parameters);
    public abstract virtual Task`1<IDialogReference> ShowAsync(string title, DialogParameters parameters, DialogOptions options);
    public abstract virtual Task`1<IDialogReference> ShowAsync(Type component);
    public abstract virtual Task`1<IDialogReference> ShowAsync(Type component, string title);
    public abstract virtual Task`1<IDialogReference> ShowAsync(Type component, string title, DialogOptions options);
    public abstract virtual Task`1<IDialogReference> ShowAsync(Type component, string title, DialogParameters parameters);
    public abstract virtual Task`1<IDialogReference> ShowAsync(Type component, string title, DialogParameters parameters, DialogOptions options);
    public abstract virtual IDialogReference CreateReference();
    [NullableContextAttribute("2")]
public abstract virtual Task`1<Nullable`1<bool>> ShowMessageBox(string title, string message, string yesText, string noText, string cancelText, DialogOptions options);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<Nullable`1<bool>> ShowMessageBox(string title, MarkupString markupMessage, string yesText, string noText, string cancelText, DialogOptions options);
    public abstract virtual Task`1<Nullable`1<bool>> ShowMessageBox(MessageBoxOptions messageBoxOptions, DialogOptions options);
    public abstract virtual void Close(IDialogReference dialog);
    public abstract virtual void Close(IDialogReference dialog, DialogResult result);
}
public interface MudBlazor.IEventListener {
    public abstract virtual Task`1<Guid> Subscribe(string eventName, string elementId, string projectionName, int throotleInterval, Func`2<object, Task> callback);
    public abstract virtual Task`1<Guid> SubscribeGlobal(string eventName, int throotleInterval, Func`2<object, Task> callback);
    public abstract virtual Task`1<bool> Unsubscribe(Guid key);
}
public interface MudBlazor.IEventListenerFactory {
    public abstract virtual IEventListener Create();
}
[NullableContextAttribute("2")]
public interface MudBlazor.IFilterDefinition`1 {
    public Guid Id { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Column`1<T> Column { get; public set; }
    public string Title { get; public set; }
    public string Operator { get; public set; }
    public object Value { get; public set; }
    [NullableAttribute("1")]
public FieldType FieldType { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual void set_Id(Guid value);
    public abstract virtual Column`1<T> get_Column();
    public abstract virtual void set_Column(Column`1<T> value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Operator();
    public abstract virtual void set_Operator(string value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    [NullableContextAttribute("1")]
public virtual FieldType get_FieldType();
    [NullableContextAttribute("1")]
public abstract virtual Func`2<T, bool> GenerateFilterFunction(FilterOptions filterOptions);
    [NullableContextAttribute("1")]
public abstract virtual IFilterDefinition`1<T> Clone();
}
[ExtensionAttribute]
public static class MudBlazor.IIJSRuntimeExtentions : object {
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeVoidAsyncIgnoreErrors>d__0")]
[ExtensionAttribute]
public static ValueTask InvokeVoidAsyncIgnoreErrors(IJSRuntime jsRuntime, string identifier, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeVoidAsyncIgnoreErrors>d__1")]
[ExtensionAttribute]
public static ValueTask InvokeVoidAsyncIgnoreErrors(IJSRuntime jsRuntime, string identifier, CancellationToken cancellationToken, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeVoidAsyncWithErrorHandling>d__2")]
[ExtensionAttribute]
public static ValueTask`1<bool> InvokeVoidAsyncWithErrorHandling(IJSRuntime jsRuntime, string identifier, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeVoidAsyncWithErrorHandling>d__3")]
[ExtensionAttribute]
public static ValueTask`1<bool> InvokeVoidAsyncWithErrorHandling(IJSRuntime jsRuntime, string identifier, CancellationToken cancellationToken, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeAsyncWithErrorHandling>d__4`1")]
[ExtensionAttribute]
public static ValueTask`1<ValueTuple`2<bool, TValue>> InvokeAsyncWithErrorHandling(IJSRuntime jsRuntime, string identifier, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeAsyncWithErrorHandling>d__5`1")]
[ExtensionAttribute]
public static ValueTask`1<ValueTuple`2<bool, TValue>> InvokeAsyncWithErrorHandling(IJSRuntime jsRuntime, string identifier, CancellationToken cancellationToken, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeAsyncWithErrorHandling>d__6`1")]
[ExtensionAttribute]
public static ValueTask`1<ValueTuple`2<bool, TValue>> InvokeAsyncWithErrorHandling(IJSRuntime jsRuntime, TValue fallbackValue, string identifier, Object[] args);
    [AsyncStateMachineAttribute("MudBlazor.IIJSRuntimeExtentions/<InvokeAsyncWithErrorHandling>d__7`1")]
[ExtensionAttribute]
public static ValueTask`1<ValueTuple`2<bool, TValue>> InvokeAsyncWithErrorHandling(IJSRuntime jsRuntime, TValue fallbackValue, string identifier, CancellationToken cancellationToken, Object[] args);
}
public interface MudBlazor.IJsApiService {
    public abstract virtual ValueTask CopyToClipboardAsync(string text);
    public abstract virtual ValueTask OpenInNewTabAsync(string url);
    public abstract virtual ValueTask Open(string link, string target);
    internal abstract virtual ValueTask UpdateStyleProperty(string elementId, string propertyName, object value);
}
[NullableContextAttribute("1")]
public interface MudBlazor.ILocalizationInterceptor {
    public abstract virtual LocalizedString Handle(string key, Object[] arguments);
}
public interface MudBlazor.IMask {
    public string Mask { get; }
    public string Text { get; }
    public int CaretPos { get; public set; }
    public Nullable`1<ValueTuple`2<int, int>> Selection { get; public set; }
    public abstract virtual string get_Mask();
    public abstract virtual string get_Text();
    public virtual string GetCleanText();
    public abstract virtual int get_CaretPos();
    public abstract virtual void set_CaretPos(int value);
    public abstract virtual Nullable`1<ValueTuple`2<int, int>> get_Selection();
    public abstract virtual void set_Selection(Nullable`1<ValueTuple`2<int, int>> value);
    public abstract virtual void Insert(string input);
    public abstract virtual void Delete();
    public abstract virtual void Backspace();
    public abstract virtual void Clear();
    public abstract virtual void SetText(string text);
    public abstract virtual void UpdateFrom(IMask other);
}
[NullableContextAttribute("2")]
public interface MudBlazor.IMudPopoverHolder {
    public Guid Id { get; }
    public bool IsConnected { get; }
    public bool IsDetached { get; }
    public string Class { get; }
    public string Style { get; }
    public object Tag { get; }
    public bool ShowContent { get; }
    public Nullable`1<DateTime> ActivationDate { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> UserAttributes { get; }
    public MudRender ElementReference { get; public set; }
    public RenderFragment Fragment { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual bool get_IsConnected();
    public abstract virtual bool get_IsDetached();
    public abstract virtual string get_Class();
    public abstract virtual string get_Style();
    public abstract virtual object get_Tag();
    public abstract virtual bool get_ShowContent();
    public abstract virtual Nullable`1<DateTime> get_ActivationDate();
    public abstract virtual Dictionary`2<string, object> get_UserAttributes();
    public abstract virtual MudRender get_ElementReference();
    public abstract virtual void set_ElementReference(MudRender value);
    public abstract virtual RenderFragment get_Fragment();
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Please use IPopoverService. This will be removed in a future version.")]
public interface MudBlazor.IMudPopoverService {
    public bool ThrowOnDuplicateProvider { get; }
    public IEnumerable`1<MudPopoverHandler> Handlers { get; }
    public abstract virtual MudPopoverHandler Register(RenderFragment fragment);
    public abstract virtual Task`1<bool> Unregister(MudPopoverHandler handler);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<int> CountProviders();
    public abstract virtual bool get_ThrowOnDuplicateProvider();
    public abstract virtual IEnumerable`1<MudPopoverHandler> get_Handlers();
    public abstract virtual Task InitializeIfNeeded();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_FragmentsChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_FragmentsChanged(EventHandler value);
}
[NullableContextAttribute("1")]
internal interface MudBlazor.IMudRadioGroup {
    public abstract virtual void CheckGenericTypeMatch(object selectItem);
}
internal interface MudBlazor.IMudSelect {
    public bool MultiSelection { get; public set; }
    public abstract virtual void CheckGenericTypeMatch(object select_item);
    public abstract virtual bool get_MultiSelection();
    public abstract virtual void set_MultiSelection(bool value);
}
internal interface MudBlazor.IMudShadowSelect {
}
public class MudBlazor.Input : BaseTypography {
}
public enum MudBlazor.InputMode : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static InputMode none;
    [DescriptionAttribute("text")]
public static InputMode text;
    [DescriptionAttribute("decimal")]
public static InputMode decimal;
    [DescriptionAttribute("numeric")]
public static InputMode numeric;
    [DescriptionAttribute("tel")]
public static InputMode tel;
    [DescriptionAttribute("search")]
public static InputMode search;
    [DescriptionAttribute("email")]
public static InputMode email;
    [DescriptionAttribute("url")]
public static InputMode url;
}
[ExtensionAttribute]
public static class MudBlazor.InputModeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(InputMode mudEnum);
}
public enum MudBlazor.InputType : Enum {
    public int value__;
    [DescriptionAttribute("text")]
public static InputType Text;
    [DescriptionAttribute("password")]
public static InputType Password;
    [DescriptionAttribute("email")]
public static InputType Email;
    [DescriptionAttribute("hidden")]
public static InputType Hidden;
    [DescriptionAttribute("number")]
public static InputType Number;
    [DescriptionAttribute("search")]
public static InputType Search;
    [DescriptionAttribute("tel")]
public static InputType Telephone;
    [DescriptionAttribute("url")]
public static InputType Url;
    [DescriptionAttribute("color")]
public static InputType Color;
    [DescriptionAttribute("date")]
public static InputType Date;
    [DescriptionAttribute("datetime-local")]
public static InputType DateTimeLocal;
    [DescriptionAttribute("month")]
public static InputType Month;
    [DescriptionAttribute("time")]
public static InputType Time;
    [DescriptionAttribute("week")]
public static InputType Week;
}
[ExtensionAttribute]
public static class MudBlazor.InputTypeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(InputType mudEnum);
}
public interface MudBlazor.Interfaces.IActivatable {
    public abstract virtual void Activate(object activator, MouseEventArgs args);
}
[NullableContextAttribute("1")]
public interface MudBlazor.Interfaces.IForm {
    public bool IsValid { get; }
    public String[] Errors { get; }
    [NullableAttribute("2")]
public object Model { get; public set; }
    public abstract virtual bool get_IsValid();
    public abstract virtual String[] get_Errors();
    [NullableContextAttribute("2")]
public abstract virtual object get_Model();
    [NullableContextAttribute("2")]
public abstract virtual void set_Model(object value);
    public abstract virtual void FieldChanged(IFormComponent formControl, object newValue);
    internal abstract virtual void Add(IFormComponent formControl);
    internal abstract virtual void Remove(IFormComponent formControl);
    internal abstract virtual void Update(IFormComponent formControl);
}
public interface MudBlazor.Interfaces.IFormComponent {
    public bool Required { get; public set; }
    public bool Error { get; public set; }
    public bool HasErrors { get; }
    public bool Touched { get; }
    public object Validation { get; public set; }
    public bool IsForNull { get; }
    public List`1<string> ValidationErrors { get; public set; }
    public abstract virtual bool get_Required();
    public abstract virtual void set_Required(bool value);
    public abstract virtual bool get_Error();
    public abstract virtual void set_Error(bool value);
    public abstract virtual bool get_HasErrors();
    public abstract virtual bool get_Touched();
    public abstract virtual object get_Validation();
    public abstract virtual void set_Validation(object value);
    public abstract virtual bool get_IsForNull();
    public abstract virtual List`1<string> get_ValidationErrors();
    public abstract virtual void set_ValidationErrors(List`1<string> value);
    public abstract virtual Task Validate();
    public abstract virtual Task ResetAsync();
    public abstract virtual void ResetValidation();
}
public interface MudBlazor.Interfaces.IMudStateHasChanged {
    public abstract virtual void StateHasChanged();
}
public interface MudBlazor.Interfaces.INavigationEventReceiver {
    public abstract virtual Task OnNavigation();
}
public class MudBlazor.Internal.MudInputAdornment : ComponentBase {
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Edge <Edge>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <AdornmentClick>k__BackingField;
    [ParameterAttribute]
public string Class { get; public set; }
    [ParameterAttribute]
public string Text { get; public set; }
    [ParameterAttribute]
public string Icon { get; public set; }
    [ParameterAttribute]
public Edge Edge { get; public set; }
    [ParameterAttribute]
public Size Size { get; public set; }
    [ParameterAttribute]
public Color Color { get; public set; }
    [ParameterAttribute]
public string AriaLabel { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> AdornmentClick { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Edge get_Edge();
    [CompilerGeneratedAttribute]
public void set_Edge(Edge value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public string get_AriaLabel();
    [CompilerGeneratedAttribute]
public void set_AriaLabel(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_AdornmentClick();
    [CompilerGeneratedAttribute]
public void set_AdornmentClick(EventCallback`1<MouseEventArgs> value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__32_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class MudBlazor.InternalMudLocalizer : object {
    private ILocalizationInterceptor _interceptor;
    private Lazy`1<IStringLocalizer> _defaultLocalizationInterceptor;
    private LocalizedString Microsoft.Extensions.Localization.IStringLocalizer.Item { get; }
    public LocalizedString Item { get; }
    public InternalMudLocalizer(ILocalizationInterceptor interceptor);
    private sealed virtual override IEnumerable`1<LocalizedString> Microsoft.Extensions.Localization.IStringLocalizer.GetAllStrings(bool includeParentCultures);
    private sealed virtual override LocalizedString Microsoft.Extensions.Localization.IStringLocalizer.get_Item(string key);
    public sealed virtual LocalizedString get_Item(string key, Object[] arguments);
    [ObsoleteAttribute("To be removed in v8")]
private static string GetLegacyKey(string key);
}
public class MudBlazor.Interop.BoundingClientRect : object {
    [CompilerGeneratedAttribute]
private double <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WindowHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <WindowWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollX>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollY>k__BackingField;
    public double Top { get; public set; }
    public double Left { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double WindowHeight { get; public set; }
    public double WindowWidth { get; public set; }
    public double ScrollX { get; public set; }
    public double ScrollY { get; public set; }
    public double X { get; }
    public double Y { get; }
    public double Bottom { get; }
    public double Right { get; }
    public double AbsoluteLeft { get; }
    public double AbsoluteTop { get; }
    public double AbsoluteRight { get; }
    public double AbsoluteBottom { get; }
    public bool IsOutsideBottom { get; }
    public bool IsOutsideLeft { get; }
    public bool IsOutsideTop { get; }
    public bool IsOutsideRight { get; }
    [CompilerGeneratedAttribute]
public double get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(double value);
    [CompilerGeneratedAttribute]
public double get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(double value);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    [CompilerGeneratedAttribute]
public double get_WindowHeight();
    [CompilerGeneratedAttribute]
public void set_WindowHeight(double value);
    [CompilerGeneratedAttribute]
public double get_WindowWidth();
    [CompilerGeneratedAttribute]
public void set_WindowWidth(double value);
    [CompilerGeneratedAttribute]
public double get_ScrollX();
    [CompilerGeneratedAttribute]
public void set_ScrollX(double value);
    [CompilerGeneratedAttribute]
public double get_ScrollY();
    [CompilerGeneratedAttribute]
public void set_ScrollY(double value);
    public double get_X();
    public double get_Y();
    public double get_Bottom();
    public double get_Right();
    public double get_AbsoluteLeft();
    public double get_AbsoluteTop();
    public double get_AbsoluteRight();
    public double get_AbsoluteBottom();
    public bool get_IsOutsideBottom();
    public bool get_IsOutsideLeft();
    public bool get_IsOutsideTop();
    public bool get_IsOutsideRight();
    public BoundingClientRect Clone();
}
[ExtensionAttribute]
public static class MudBlazor.Interop.BoundingClientRectExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualTo(BoundingClientRect sourceRect, BoundingClientRect targetRect);
}
internal class MudBlazor.Interop.PopoverJsInterop : object {
    [NullableAttribute("1")]
private IJSRuntime _jsRuntime;
    [NullableContextAttribute("1")]
public PopoverJsInterop(IJSRuntime jsRuntime);
    public ValueTask`1<bool> Initialize(string containerClass, int flipMargin, CancellationToken cancellationToken);
    public ValueTask`1<bool> Connect(Guid id, CancellationToken cancellationToken);
    public ValueTask`1<bool> Disconnect(Guid id, CancellationToken cancellationToken);
    public ValueTask`1<ValueTuple`2<bool, int>> CountProviders(CancellationToken cancellationToken);
    public ValueTask Dispose(CancellationToken cancellationToken);
}
internal class MudBlazor.Interop.ResizeListenerInterop : object {
    [NullableAttribute("1")]
private IJSRuntime _jsRuntime;
    [NullableContextAttribute("1")]
public ResizeListenerInterop(IJSRuntime jsRuntime);
    [AsyncStateMachineAttribute("MudBlazor.Interop.ResizeListenerInterop/<MatchMedia>d__2")]
public ValueTask`1<bool> MatchMedia(string mediaQuery);
    [NullableContextAttribute("1")]
public ValueTask`1<bool> ListenForResize(DotNetObjectReference`1<T> dotNetObjectReference, ResizeOptions options, Guid javaScriptListerId);
    public ValueTask`1<bool> CancelListener(Guid javaScriptListerId);
    public ValueTask`1<bool> CancelListeners(Guid[] jsListenerIds);
    public ValueTask Dispose();
    [AsyncStateMachineAttribute("MudBlazor.Interop.ResizeListenerInterop/<GetBrowserWindowSize>d__7")]
public ValueTask`1<BrowserWindowSize> GetBrowserWindowSize();
}
public enum MudBlazor.InterpolationOption : Enum {
    public int value__;
    public static InterpolationOption NaturalSpline;
    public static InterpolationOption EndSlope;
    public static InterpolationOption Periodic;
    public static InterpolationOption Straight;
}
[NullableContextAttribute("2")]
public interface MudBlazor.IPopover {
    public Guid Id { get; }
    [NullableAttribute("1")]
public string PopoverClass { get; }
    [NullableAttribute("1")]
public string PopoverStyles { get; }
    public bool Open { get; public set; }
    public object Tag { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> UserAttributes { get; public set; }
    public RenderFragment ChildContent { get; public set; }
    public abstract virtual Guid get_Id();
    [NullableContextAttribute("1")]
public abstract virtual string get_PopoverClass();
    [NullableContextAttribute("1")]
public abstract virtual string get_PopoverStyles();
    public abstract virtual bool get_Open();
    public abstract virtual void set_Open(bool value);
    public abstract virtual object get_Tag();
    public abstract virtual void set_Tag(object value);
    public abstract virtual Dictionary`2<string, object> get_UserAttributes();
    public abstract virtual void set_UserAttributes(Dictionary`2<string, object> value);
    public abstract virtual RenderFragment get_ChildContent();
    public abstract virtual void set_ChildContent(RenderFragment value);
}
[NullableContextAttribute("1")]
public interface MudBlazor.IPopoverObserver {
    public Guid Id { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual Task PopoverCollectionUpdatedNotificationAsync(PopoverHolderContainer container, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface MudBlazor.IPopoverService {
    public PopoverOptions PopoverOptions { get; }
    public IEnumerable`1<IMudPopoverHolder> ActivePopovers { get; }
    public bool IsInitialized { get; }
    public abstract virtual PopoverOptions get_PopoverOptions();
    public abstract virtual IEnumerable`1<IMudPopoverHolder> get_ActivePopovers();
    public abstract virtual bool get_IsInitialized();
    public abstract virtual void Subscribe(IPopoverObserver observer);
    public abstract virtual void Unsubscribe(IPopoverObserver observer);
    public abstract virtual Task CreatePopoverAsync(IPopover popover);
    public abstract virtual Task`1<bool> UpdatePopoverAsync(IPopover popover);
    public abstract virtual Task`1<bool> DestroyPopoverAsync(IPopover popover);
    [NullableContextAttribute("0")]
public abstract virtual ValueTask`1<int> GetProviderCountAsync();
}
public interface MudBlazor.IScrollListener {
    public string Selector { get; public set; }
    public abstract virtual string get_Selector();
    public abstract virtual void set_Selector(string value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnScroll(EventHandler`1<ScrollEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnScroll(EventHandler`1<ScrollEventArgs> value);
}
public interface MudBlazor.IScrollListenerFactory {
    public abstract virtual IScrollListener Create(string selector);
}
public interface MudBlazor.IScrollManager {
    public abstract virtual ValueTask ScrollToAsync(string id, int left, int top, ScrollBehavior scrollBehavior);
    public abstract virtual ValueTask ScrollIntoViewAsync(string selector, ScrollBehavior behavior);
    public abstract virtual ValueTask ScrollToTopAsync(string id, ScrollBehavior scrollBehavior);
    public abstract virtual ValueTask ScrollToYearAsync(string elementId);
    public abstract virtual ValueTask ScrollToListItemAsync(string elementId);
    public abstract virtual ValueTask LockScrollAsync(string selector, string cssClass);
    public abstract virtual ValueTask UnlockScrollAsync(string selector, string cssClass);
    public abstract virtual ValueTask ScrollToBottomAsync(string elementId, ScrollBehavior scrollBehavior);
}
public interface MudBlazor.IScrollSpy {
    public string CenteredSection { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ScrollSectionSectionCentered(EventHandler`1<ScrollSectionCenteredEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ScrollSectionSectionCentered(EventHandler`1<ScrollSectionCenteredEventArgs> value);
    public abstract virtual Task StartSpying(string containerSelector, string sectionClassSelector);
    public abstract virtual Task ScrollToSection(string id);
    public abstract virtual Task ScrollToSection(Uri uri);
    public abstract virtual Task SetSectionAsActive(string id);
    public abstract virtual string get_CenteredSection();
}
public interface MudBlazor.IScrollSpyFactory {
    public abstract virtual IScrollSpy Create();
}
[NullableContextAttribute("2")]
public interface MudBlazor.ISnackbar {
    [NullableAttribute("1")]
public IEnumerable`1<Snackbar> ShownSnackbars { get; }
    [NullableAttribute("1")]
public SnackbarConfiguration Configuration { get; }
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<Snackbar> get_ShownSnackbars();
    [NullableContextAttribute("1")]
public abstract virtual SnackbarConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnSnackbarsUpdated(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnSnackbarsUpdated(Action value);
    public abstract virtual Snackbar Add(string message, Severity severity, Action`1<SnackbarOptions> configure, string key);
    public abstract virtual Snackbar Add(MarkupString message, Severity severity, Action`1<SnackbarOptions> configure, string key);
    public abstract virtual Snackbar Add(RenderFragment message, Severity severity, Action`1<SnackbarOptions> configure, string key);
    public abstract virtual Snackbar Add(Dictionary`2<string, object> componentParameters, Severity severity, Action`1<SnackbarOptions> configure, string key);
    public abstract virtual void Clear();
    [NullableContextAttribute("1")]
public abstract virtual void Remove(Snackbar snackbar);
    [NullableContextAttribute("1")]
public abstract virtual void RemoveByKey(string key);
}
public class MudBlazor.JsApiService : object {
    private IJSRuntime _jsRuntime;
    public JsApiService(IJSRuntime jsRuntime);
    public sealed virtual ValueTask CopyToClipboardAsync(string text);
    public sealed virtual ValueTask Open(string link, string target);
    public sealed virtual ValueTask OpenInNewTabAsync(string url);
    private sealed virtual override ValueTask MudBlazor.IJsApiService.UpdateStyleProperty(string elementId, string propertyName, object value);
}
public enum MudBlazor.Justify : Enum {
    public int value__;
    [DescriptionAttribute("start")]
public static Justify FlexStart;
    [DescriptionAttribute("center")]
public static Justify Center;
    [DescriptionAttribute("end")]
public static Justify FlexEnd;
    [DescriptionAttribute("space-between")]
public static Justify SpaceBetween;
    [DescriptionAttribute("space-around")]
public static Justify SpaceAround;
    [DescriptionAttribute("space-evenly")]
public static Justify SpaceEvenly;
}
[ExtensionAttribute]
public static class MudBlazor.JustifySourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Justify mudEnum);
}
[AttributeUsageAttribute("384")]
public class MudBlazor.LabelAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public LabelAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public enum MudBlazor.LabelPosition : Enum {
    public int value__;
    [DescriptionAttribute("start")]
public static LabelPosition Start;
    [DescriptionAttribute("end")]
public static LabelPosition End;
}
[ExtensionAttribute]
public static class MudBlazor.LabelPositionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(LabelPosition mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.LayoutProperties : object {
    [CompilerGeneratedAttribute]
private string <DefaultBorderRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DrawerMiniWidthLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DrawerMiniWidthRight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DrawerWidthLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DrawerWidthRight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppbarHeight>k__BackingField;
    public string DefaultBorderRadius { get; public set; }
    public string DrawerMiniWidthLeft { get; public set; }
    public string DrawerMiniWidthRight { get; public set; }
    public string DrawerWidthLeft { get; public set; }
    public string DrawerWidthRight { get; public set; }
    public string AppbarHeight { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultBorderRadius();
    [CompilerGeneratedAttribute]
public void set_DefaultBorderRadius(string value);
    [CompilerGeneratedAttribute]
public string get_DrawerMiniWidthLeft();
    [CompilerGeneratedAttribute]
public void set_DrawerMiniWidthLeft(string value);
    [CompilerGeneratedAttribute]
public string get_DrawerMiniWidthRight();
    [CompilerGeneratedAttribute]
public void set_DrawerMiniWidthRight(string value);
    [CompilerGeneratedAttribute]
public string get_DrawerWidthLeft();
    [CompilerGeneratedAttribute]
public void set_DrawerWidthLeft(string value);
    [CompilerGeneratedAttribute]
public string get_DrawerWidthRight();
    [CompilerGeneratedAttribute]
public void set_DrawerWidthRight(string value);
    [CompilerGeneratedAttribute]
public string get_AppbarHeight();
    [CompilerGeneratedAttribute]
public void set_AppbarHeight(string value);
}
public enum MudBlazor.Margin : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static Margin None;
    [DescriptionAttribute("dense")]
public static Margin Dense;
    [DescriptionAttribute("normal")]
public static Margin Normal;
}
[ExtensionAttribute]
public static class MudBlazor.MarginSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Margin mudEnum);
}
public class MudBlazor.MaskChar : ValueType {
    [CompilerGeneratedAttribute]
private char <Char>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    public char Char { get; public set; }
    public string Regex { get; public set; }
    public MaskChar(char c, string regex);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public char get_Char();
    [CompilerGeneratedAttribute]
public void set_Char(char value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    public static MaskChar Letter(char c);
    public static MaskChar Digit(char c);
    public static MaskChar LetterOrDigit(char c);
}
public class MudBlazor.MaskOption : ValueType {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    public string Id { get; public set; }
    public string Mask { get; public set; }
    public string Regex { get; public set; }
    public MaskOption(string Id, string Mask, string Regex);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Mask();
    [CompilerGeneratedAttribute]
public void set_Mask(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Regex();
    [CompilerGeneratedAttribute]
public void set_Regex(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MaskOption left, MaskOption right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MaskOption left, MaskOption right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(MaskOption other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Id, String& Mask, String& Regex);
}
public enum MudBlazor.MaxWidth : Enum {
    public int value__;
    [DescriptionAttribute("lg")]
public static MaxWidth Large;
    [DescriptionAttribute("md")]
public static MaxWidth Medium;
    [DescriptionAttribute("sm")]
public static MaxWidth Small;
    [DescriptionAttribute("xl")]
public static MaxWidth ExtraLarge;
    [DescriptionAttribute("xxl")]
public static MaxWidth ExtraExtraLarge;
    [DescriptionAttribute("xs")]
public static MaxWidth ExtraSmall;
    [DescriptionAttribute("false")]
public static MaxWidth False;
}
[ExtensionAttribute]
public static class MudBlazor.MaxWidthSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(MaxWidth mudEnum);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.MessageBoxOptions : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkupString <MarkupMessage>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <YesText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelText>k__BackingField;
    public string Title { get; public set; }
    public string Message { get; public set; }
    public MarkupString MarkupMessage { get; public set; }
    [NullableAttribute("1")]
public string YesText { get; public set; }
    public string NoText { get; public set; }
    public string CancelText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public MarkupString get_MarkupMessage();
    [CompilerGeneratedAttribute]
public void set_MarkupMessage(MarkupString value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_YesText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_YesText(string value);
    [CompilerGeneratedAttribute]
public string get_NoText();
    [CompilerGeneratedAttribute]
public void set_NoText(string value);
    [CompilerGeneratedAttribute]
public string get_CancelText();
    [CompilerGeneratedAttribute]
public void set_CancelText(string value);
}
public enum MudBlazor.MouseEvent : Enum {
    public int value__;
    public static MouseEvent LeftClick;
    public static MouseEvent RightClick;
    public static MouseEvent MouseOver;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudAlert : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <ContentAlignment>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MudAlert> <CloseIconClicked>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [NullableAttribute("2")]
protected string _icon;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    protected string ClassPosition { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public HorizontalAlignment ContentAlignment { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MudAlert> CloseIconClicked { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowCloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool NoIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Severity Severity { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Icon { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_Classname();
    protected string get_ClassPosition();
    private HorizontalAlignment ConvertHorizontalAlignment(HorizontalAlignment contentAlignment);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_ContentAlignment();
    [CompilerGeneratedAttribute]
public void set_ContentAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudAlert> get_CloseIconClicked();
    [CompilerGeneratedAttribute]
public void set_CloseIconClicked(EventCallback`1<MudAlert> value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowCloseIcon();
    [CompilerGeneratedAttribute]
public void set_ShowCloseIcon(bool value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoIcon();
    [CompilerGeneratedAttribute]
public void set_NoIcon(bool value);
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [CompilerGeneratedAttribute]
public void set_Severity(Severity value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Icon();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Icon(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudAlert/<OnCloseIconClickAsync>d__58")]
internal Task OnCloseIconClickAsync();
    [ExcludeFromCodeCoverageAttribute]
protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.MudAlert/<OnClickHandler>d__60")]
internal Task OnClickHandler(MouseEventArgs mouseEventArgs);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudAppBar : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Bottom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fixed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolBarClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string ToolBarClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Bottom { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Fixed { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool WrapContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ToolBarClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_ToolBarClassname();
    [CompilerGeneratedAttribute]
public bool get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(bool value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_Fixed();
    [CompilerGeneratedAttribute]
public void set_Fixed(bool value);
    [CompilerGeneratedAttribute]
public bool get_WrapContent();
    [CompilerGeneratedAttribute]
public void set_WrapContent(bool value);
    [CompilerGeneratedAttribute]
public string get_ToolBarClass();
    [CompilerGeneratedAttribute]
public void set_ToolBarClass(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__40_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__40_1(RenderTreeBuilder __builder2);
}
public class MudBlazor.MudAutocomplete`1 : MudBaseInput`1<T> {
    private string _componentId;
    private bool _isCleared;
    private bool _isClearing;
    private bool _isProcessingValue;
    private int _selectedListItemIndex;
    private int _elementKey;
    private int _returnedItemsCount;
    private bool _open;
    private MudInput`1<string> _elementReference;
    private CancellationTokenSource _cancellationTokenSrc;
    private Task _currentSearchTask;
    private Timer _debounceTimer;
    private T[] _items;
    private List`1<int> _enabledItemIndices;
    private Func`2<T, string> _toStringFunc;
    [CompilerGeneratedAttribute]
private IScrollManager <ScrollManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopoverClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListItemClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <AnchorOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <TransformOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowProgressIndicator>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ProgressIndicatorColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, CancellationToken, Task`1<IEnumerable`1<T>>> <SearchFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetValueOnEmptyText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectOnActivation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DebounceInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<T> <ItemTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<T> <ItemSelectedTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<T> <ItemDisabledTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <MoreItemsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NoItemsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <BeforeItemsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <AfterItemsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ProgressIndicatorTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ProgressIndicatorInPopoverTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoerceText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CoerceValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, bool> <ItemDisabledFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <OpenChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectValueOnTab>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClearButtonClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <ReturnedItemsCountChanged>k__BackingField;
    [InjectAttribute]
private IScrollManager ScrollManager { get; private set; }
    protected string Classname { get; }
    protected string AutocompleteClassname { get; }
    protected string CircularProgressClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string PopoverClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string ListClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string ListItemClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public Origin AnchorOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public Origin TransformOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string OpenIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public int MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public Func`2<T, string> ToStringFunc { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowProgressIndicator { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color ProgressIndicatorColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public Func`3<string, CancellationToken, Task`1<IEnumerable`1<T>>> SearchFunc { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public Nullable`1<int> MaxItems { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int MinCharacters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ResetValueOnEmptyText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool SelectOnActivation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Strict { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int DebounceInterval { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment`1<T> ItemTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment`1<T> ItemSelectedTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment`1<T> ItemDisabledTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment MoreItemsTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment NoItemsTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment BeforeItemsTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment AfterItemsTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment ProgressIndicatorTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment ProgressIndicatorInPopoverTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool CoerceText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool CoerceValue { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public Func`2<T, bool> ItemDisabledFunc { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> OpenChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public bool SelectValueOnTab { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public bool OpenOnFocus { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Clearable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ClearIcon { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClearButtonClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> ReturnedItemsCountChanged { get; public set; }
    public bool Open { get; protected set; }
    private bool IsLoading { get; }
    private string CurrentIcon { get; }
    [CompilerGeneratedAttribute]
private IScrollManager get_ScrollManager();
    [CompilerGeneratedAttribute]
private void set_ScrollManager(IScrollManager value);
    protected string get_Classname();
    protected string get_AutocompleteClassname();
    protected string get_CircularProgressClassname();
    protected string GetListItemClassname(bool isSelected);
    [CompilerGeneratedAttribute]
public string get_PopoverClass();
    [CompilerGeneratedAttribute]
public void set_PopoverClass(string value);
    [CompilerGeneratedAttribute]
public string get_ListClass();
    [CompilerGeneratedAttribute]
public void set_ListClass(string value);
    [CompilerGeneratedAttribute]
public string get_ListItemClass();
    [CompilerGeneratedAttribute]
public void set_ListItemClass(string value);
    [CompilerGeneratedAttribute]
public Origin get_AnchorOrigin();
    [CompilerGeneratedAttribute]
public void set_AnchorOrigin(Origin value);
    [CompilerGeneratedAttribute]
public Origin get_TransformOrigin();
    [CompilerGeneratedAttribute]
public void set_TransformOrigin(Origin value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public string get_OpenIcon();
    [CompilerGeneratedAttribute]
public void set_OpenIcon(string value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
public int get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(int value);
    public Func`2<T, string> get_ToStringFunc();
    public void set_ToStringFunc(Func`2<T, string> value);
    [CompilerGeneratedAttribute]
public bool get_ShowProgressIndicator();
    [CompilerGeneratedAttribute]
public void set_ShowProgressIndicator(bool value);
    [CompilerGeneratedAttribute]
public Color get_ProgressIndicatorColor();
    [CompilerGeneratedAttribute]
public void set_ProgressIndicatorColor(Color value);
    [CompilerGeneratedAttribute]
public Func`3<string, CancellationToken, Task`1<IEnumerable`1<T>>> get_SearchFunc();
    [CompilerGeneratedAttribute]
public void set_SearchFunc(Func`3<string, CancellationToken, Task`1<IEnumerable`1<T>>> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItems();
    [CompilerGeneratedAttribute]
public void set_MaxItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_MinCharacters();
    [CompilerGeneratedAttribute]
public void set_MinCharacters(int value);
    [CompilerGeneratedAttribute]
public bool get_ResetValueOnEmptyText();
    [CompilerGeneratedAttribute]
public void set_ResetValueOnEmptyText(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectOnActivation();
    [CompilerGeneratedAttribute]
public void set_SelectOnActivation(bool value);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public int get_DebounceInterval();
    [CompilerGeneratedAttribute]
public void set_DebounceInterval(int value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemTemplate(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ItemSelectedTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemSelectedTemplate(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ItemDisabledTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemDisabledTemplate(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_MoreItemsTemplate();
    [CompilerGeneratedAttribute]
public void set_MoreItemsTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NoItemsTemplate();
    [CompilerGeneratedAttribute]
public void set_NoItemsTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_BeforeItemsTemplate();
    [CompilerGeneratedAttribute]
public void set_BeforeItemsTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_AfterItemsTemplate();
    [CompilerGeneratedAttribute]
public void set_AfterItemsTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ProgressIndicatorTemplate();
    [CompilerGeneratedAttribute]
public void set_ProgressIndicatorTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ProgressIndicatorInPopoverTemplate();
    [CompilerGeneratedAttribute]
public void set_ProgressIndicatorInPopoverTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_CoerceText();
    [CompilerGeneratedAttribute]
public void set_CoerceText(bool value);
    [CompilerGeneratedAttribute]
public bool get_CoerceValue();
    [CompilerGeneratedAttribute]
public void set_CoerceValue(bool value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_ItemDisabledFunc();
    [CompilerGeneratedAttribute]
public void set_ItemDisabledFunc(Func`2<T, bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_OpenChanged();
    [CompilerGeneratedAttribute]
public void set_OpenChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_SelectValueOnTab();
    [CompilerGeneratedAttribute]
public void set_SelectValueOnTab(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenOnFocus();
    [CompilerGeneratedAttribute]
public void set_OpenOnFocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    [CompilerGeneratedAttribute]
public string get_ClearIcon();
    [CompilerGeneratedAttribute]
public void set_ClearIcon(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClearButtonClick();
    [CompilerGeneratedAttribute]
public void set_OnClearButtonClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_ReturnedItemsCountChanged();
    [CompilerGeneratedAttribute]
public void set_ReturnedItemsCountChanged(EventCallback`1<int> value);
    public bool get_Open();
    protected void set_Open(bool value);
    private bool get_IsLoading();
    private string get_CurrentIcon();
    protected object GetAutocomplete();
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<SelectOptionAsync>d__186")]
public Task SelectOptionAsync(T value);
    protected virtual void OnInitialized();
    protected virtual void OnAfterRender(bool firstRender);
    protected virtual Task UpdateTextPropertyAsync(bool updateValue);
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<UpdateValuePropertyAsync>d__190")]
protected virtual Task UpdateValuePropertyAsync(bool updateText);
    private void OnDebounceComplete(object stateInfo);
    private void CancelToken();
    private Task SetReturnedItemsCountAsync(int value);
    public Task ToggleMenuAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<CloseMenuAsync>d__195")]
public Task CloseMenuAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<OpenMenuAsync>d__196")]
public Task OpenMenuAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<ClearAsync>d__197")]
public Task ClearAsync();
    protected virtual Task ResetValueAsync();
    private string GetItemString(T item);
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<OnInputKeyDownAsync>d__200")]
private Task OnInputKeyDownAsync(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<OnInputKeyUpAsync>d__201")]
private Task OnInputKeyUpAsync(KeyboardEventArgs args);
    private ValueTask SelectNextItemAsync(int increment);
    public ValueTask ScrollToListItemAsync(int index);
    private ValueTask RestoreScrollPositionAsync();
    private string GetListItemId(Int32& index);
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<OnEnterKeyAsync>d__206")]
internal Task OnEnterKeyAsync();
    private Task OnInputClickedAsync();
    private Task OnInputFocusedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<OnInputActivationAsync>d__209")]
private Task OnInputActivationAsync(bool openMenu);
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<AdornmentClickHandlerAsync>d__210")]
private Task AdornmentClickHandlerAsync();
    private Task OnInputBlurredAsync(FocusEventArgs args);
    private Task OnOverlayClosedAsync();
    private Task CoerceTextToValueAsync();
    private Task CoerceValueToTextAsync();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask FocusAsync();
    public virtual ValueTask BlurAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    [AsyncStateMachineAttribute("MudBlazor.MudAutocomplete`1/<OnTextChangedAsync>d__220")]
private Task OnTextChangedAsync(string text);
    private Task ListItemOnClickAsync(T item);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <OpenMenuAsync>b__196_1(ValueTuple`2<T, int> tuple);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(KeyboardEventArgs obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(KeyboardEventArgs obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__222_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__222_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__222_2(MudInput`1<string> __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__222_3(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__222_4(RenderTreeBuilder __builder5);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudAvatar : MudComponentBase {
    [CompilerGeneratedAttribute]
private MudAvatarGroup <AvatarGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rounded>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CascadingParameterAttribute]
protected MudAvatarGroup AvatarGroup { get; protected set; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string Stylesname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Rounded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
protected MudAvatarGroup get_AvatarGroup();
    [CompilerGeneratedAttribute]
protected void set_AvatarGroup(MudAvatarGroup value);
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_Stylesname();
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rounded();
    [CompilerGeneratedAttribute]
public void set_Rounded(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual void OnInitialized();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudAvatarGroup : MudComponentBase {
    private bool _childrenNeedUpdates;
    [CompilerGeneratedAttribute]
private int <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <OutlineColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxElevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaxSquare>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaxRounded>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <MaxColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <MaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <MaxVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxAvatarClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<int> <MaxAvatarsTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
internal List`1<MudAvatar> _avatars;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string MaxAvatarClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Spacing { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color OutlineColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int MaxElevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool MaxSquare { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool MaxRounded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color MaxColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size MaxSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant MaxVariant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Max { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MaxAvatarClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment`1<int> MaxAvatarsTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_MaxAvatarClassname();
    [CompilerGeneratedAttribute]
public int get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(int value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public Color get_OutlineColor();
    [CompilerGeneratedAttribute]
public void set_OutlineColor(Color value);
    [CompilerGeneratedAttribute]
public void set_MaxElevation(int value);
    [CompilerGeneratedAttribute]
public int get_MaxElevation();
    [CompilerGeneratedAttribute]
public bool get_MaxSquare();
    [CompilerGeneratedAttribute]
public void set_MaxSquare(bool value);
    [CompilerGeneratedAttribute]
public bool get_MaxRounded();
    [CompilerGeneratedAttribute]
public void set_MaxRounded(bool value);
    [CompilerGeneratedAttribute]
public Color get_MaxColor();
    [CompilerGeneratedAttribute]
public void set_MaxColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_MaxSize();
    [CompilerGeneratedAttribute]
public void set_MaxSize(Size value);
    [CompilerGeneratedAttribute]
public Variant get_MaxVariant();
    [CompilerGeneratedAttribute]
public void set_MaxVariant(Variant value);
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
    [CompilerGeneratedAttribute]
public string get_MaxAvatarClass();
    [CompilerGeneratedAttribute]
public void set_MaxAvatarClass(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<int> get_MaxAvatarsTemplate();
    [CompilerGeneratedAttribute]
public void set_MaxAvatarsTemplate(RenderFragment`1<int> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
internal void AddAvatar(MudAvatar avatar);
    [NullableContextAttribute("1")]
internal void RemoveAvatar(MudAvatar avatar);
    internal CssBuilder GetAvatarSpacing();
    [NullableContextAttribute("1")]
internal StyleBuilder GetAvatarZindex(MudAvatar avatar);
    [NullableContextAttribute("1")]
internal bool MaxGroupReached(MudAvatar avatar);
    protected virtual void OnParametersSet();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private int <.ctor>b__58_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__58_1();
    [CompilerGeneratedAttribute]
private int <.ctor>b__58_2();
    [CompilerGeneratedAttribute]
private void <.ctor>b__58_3();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__65_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__65_1(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudBadge : MudComponentBase {
    [CompilerGeneratedAttribute]
private Origin <Origin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overlap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bordered>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadgeClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BadgeAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    private string _content;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string WrapperClass { get; }
    [NullableAttribute("1")]
protected string BadgeClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Origin Origin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Dot { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Overlap { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Bordered { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Max { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public object Content { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string BadgeClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string BadgeAriaLabel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_WrapperClass();
    [NullableContextAttribute("1")]
protected string get_BadgeClassname();
    [CompilerGeneratedAttribute]
public Origin get_Origin();
    [CompilerGeneratedAttribute]
public void set_Origin(Origin value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_Dot();
    [CompilerGeneratedAttribute]
public void set_Dot(bool value);
    [CompilerGeneratedAttribute]
public bool get_Overlap();
    [CompilerGeneratedAttribute]
public void set_Overlap(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bordered();
    [CompilerGeneratedAttribute]
public void set_Bordered(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public int get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(int value);
    [CompilerGeneratedAttribute]
public object get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(object value);
    [CompilerGeneratedAttribute]
public string get_BadgeClass();
    [CompilerGeneratedAttribute]
public void set_BadgeClass(string value);
    [CompilerGeneratedAttribute]
public string get_BadgeAriaLabel();
    [CompilerGeneratedAttribute]
public void set_BadgeAriaLabel(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [NullableContextAttribute("1")]
internal Task HandleBadgeClick(MouseEventArgs e);
    protected virtual void OnParametersSet();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class MudBlazor.MudBaseBindableItemsControl`2 : MudBaseItemsControl`1<TChildComponent> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TData> <ItemsSource>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<TData> <ItemTemplate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public IEnumerable`1<TData> ItemsSource { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment`1<TData> ItemTemplate { get; public set; }
    public object SelectedItem { get; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<TData> get_ItemsSource();
    [CompilerGeneratedAttribute]
public void set_ItemsSource(IEnumerable`1<TData> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TData> get_ItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemTemplate(RenderFragment`1<TData> value);
    public object get_SelectedItem();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudBaseButton : MudComponentBase {
    [CompilerGeneratedAttribute]
private IActivatable <Activatable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <HtmlTag>k__BackingField;
    [CompilerGeneratedAttribute]
private ButtonType <ButtonType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClickPropagation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropShadow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    protected ElementReference _elementReference;
    [CascadingParameterAttribute]
protected IActivatable Activatable { get; protected set; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Click action")]
public string HtmlTag { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public ButtonType ButtonType { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Href { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Target { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Rel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ClickPropagation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DropShadow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [CompilerGeneratedAttribute]
protected IActivatable get_Activatable();
    [CompilerGeneratedAttribute]
protected void set_Activatable(IActivatable value);
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_HtmlTag();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_HtmlTag(string value);
    [CompilerGeneratedAttribute]
public ButtonType get_ButtonType();
    [CompilerGeneratedAttribute]
public void set_ButtonType(ButtonType value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Rel();
    [CompilerGeneratedAttribute]
public void set_Rel(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClickPropagation();
    [CompilerGeneratedAttribute]
public void set_ClickPropagation(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropShadow();
    [CompilerGeneratedAttribute]
public void set_DropShadow(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    protected bool GetDisabledState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseButton/<OnClickHandler>d__49")]
protected virtual Task OnClickHandler(MouseEventArgs ev);
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    private void SetDefaultValues();
    protected bool GetClickPropagation();
    public ValueTask FocusAsync();
    protected string GetRel();
}
public abstract class MudBlazor.MudBaseDatePicker : MudPicker`1<Nullable`1<DateTime>> {
    private string _mudPickerCalendarContentElementId;
    private bool _dateFormatTouched;
    [CompilerGeneratedAttribute]
private IScrollManager <ScrollManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsApiService <JsApiService>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MaxDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MinDate>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenTo <OpenTo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DayOfWeek> <FirstDayOfWeek>k__BackingField;
    private Nullable`1<DateTime> _picker_month;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<DateTime>> <PickerMonthChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosingDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DisplayMonths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxMonthColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowWeekNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleDateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClose>k__BackingField;
    private Func`2<DateTime, bool> _isDateDisabledFunc;
    [CompilerGeneratedAttribute]
private Func`2<DateTime, string> <AdditionalDateClassesFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FixYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FixMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FixDay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRange>k__BackingField;
    protected OpenTo CurrentView;
    private string _componentId;
    private bool _scrollToYearAfterRender;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [InjectAttribute]
protected IScrollManager ScrollManager { get; protected set; }
    [InjectAttribute]
private IJsApiService JsApiService { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public Nullable`1<DateTime> MaxDate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public Nullable`1<DateTime> MinDate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public OpenTo OpenTo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string DateFormat { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public Nullable`1<DayOfWeek> FirstDayOfWeek { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public Nullable`1<DateTime> PickerMonth { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<DateTime>> PickerMonthChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public int ClosingDelay { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public int DisplayMonths { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public Nullable`1<int> MaxMonthColumns { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public Nullable`1<DateTime> StartMonth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowWeekNumbers { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public string TitleDateFormat { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool AutoClose { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public Func`2<DateTime, bool> IsDateDisabledFunc { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Func`2<DateTime, string> AdditionalDateClassesFunc { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string PreviousIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string NextIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public Nullable`1<int> FixYear { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public Nullable`1<int> FixMonth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public Nullable`1<int> FixDay { get; public set; }
    protected bool IsRange { get; }
    protected RenderFragment PickerContent { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
protected IScrollManager get_ScrollManager();
    [CompilerGeneratedAttribute]
protected void set_ScrollManager(IScrollManager value);
    [CompilerGeneratedAttribute]
private IJsApiService get_JsApiService();
    [CompilerGeneratedAttribute]
private void set_JsApiService(IJsApiService value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MaxDate();
    [CompilerGeneratedAttribute]
public void set_MaxDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MinDate();
    [CompilerGeneratedAttribute]
public void set_MinDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public OpenTo get_OpenTo();
    [CompilerGeneratedAttribute]
public void set_OpenTo(OpenTo value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    protected virtual Task DateFormatChangedAsync(string newFormat);
    protected virtual bool SetCulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public Nullable`1<DayOfWeek> get_FirstDayOfWeek();
    [CompilerGeneratedAttribute]
public void set_FirstDayOfWeek(Nullable`1<DayOfWeek> value);
    public Nullable`1<DateTime> get_PickerMonth();
    public void set_PickerMonth(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<DateTime>> get_PickerMonthChanged();
    [CompilerGeneratedAttribute]
public void set_PickerMonthChanged(EventCallback`1<Nullable`1<DateTime>> value);
    [CompilerGeneratedAttribute]
public int get_ClosingDelay();
    [CompilerGeneratedAttribute]
public void set_ClosingDelay(int value);
    [CompilerGeneratedAttribute]
public int get_DisplayMonths();
    [CompilerGeneratedAttribute]
public void set_DisplayMonths(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxMonthColumns();
    [CompilerGeneratedAttribute]
public void set_MaxMonthColumns(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartMonth();
    [CompilerGeneratedAttribute]
public void set_StartMonth(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_ShowWeekNumbers();
    [CompilerGeneratedAttribute]
public void set_ShowWeekNumbers(bool value);
    [CompilerGeneratedAttribute]
public string get_TitleDateFormat();
    [CompilerGeneratedAttribute]
public void set_TitleDateFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoClose();
    [CompilerGeneratedAttribute]
public void set_AutoClose(bool value);
    public Func`2<DateTime, bool> get_IsDateDisabledFunc();
    public void set_IsDateDisabledFunc(Func`2<DateTime, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<DateTime, string> get_AdditionalDateClassesFunc();
    [CompilerGeneratedAttribute]
public void set_AdditionalDateClassesFunc(Func`2<DateTime, string> value);
    [CompilerGeneratedAttribute]
public string get_PreviousIcon();
    [CompilerGeneratedAttribute]
public void set_PreviousIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NextIcon();
    [CompilerGeneratedAttribute]
public void set_NextIcon(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FixYear();
    [CompilerGeneratedAttribute]
public void set_FixYear(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FixMonth();
    [CompilerGeneratedAttribute]
public void set_FixMonth(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FixDay();
    [CompilerGeneratedAttribute]
public void set_FixDay(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
protected virtual bool get_IsRange();
    [AsyncStateMachineAttribute("MudBlazor.MudBaseDatePicker/<OnPickerOpenedAsync>d__100")]
protected virtual Task OnPickerOpenedAsync();
    protected DateTime GetMonthStart(int month);
    protected DateTime GetMonthEnd(int month);
    protected DayOfWeek GetFirstDayOfWeek();
    [IteratorStateMachineAttribute("MudBlazor.MudBaseDatePicker/<GetWeek>d__104")]
protected IEnumerable`1<DateTime> GetWeek(int month, int index);
    private string GetWeekNumber(int month, int index);
    protected virtual Nullable`1<OpenTo> GetNextView();
    [AsyncStateMachineAttribute("MudBlazor.MudBaseDatePicker/<SubmitAndCloseAsync>d__107")]
protected virtual Task SubmitAndCloseAsync();
    protected abstract virtual string GetDayClasses(int month, DateTime day);
    protected abstract virtual Task OnDayClickedAsync(DateTime dateTime);
    protected virtual Task OnMonthSelectedAsync(DateTime month);
    protected virtual Task OnYearClickedAsync(int year);
    protected virtual void OnMonthClicked(int month);
    private bool IsMonthDisabled(DateTime month);
    protected IEnumerable`1<string> GetAbbreviatedDayNames();
    private static T[] Shift(T[] array, int positions);
    protected string GetMonthName(int month);
    protected abstract virtual string GetTitleDateString();
    protected string FormatTitleDate(Nullable`1<DateTime> date);
    protected string GetFormattedYearString();
    private void OnPreviousMonthClick();
    private void OnNextMonthClick();
    private void OnPreviousYearClick();
    private void OnNextYearClick();
    private void OnYearClick();
    [AsyncStateMachineAttribute("MudBlazor.MudBaseDatePicker/<ScrollToYear>d__127")]
public void ScrollToYear();
    private int GetMinYear();
    private int GetMaxYear();
    private string GetYearClasses(int year);
    private string GetCalendarHeaderClasses(int month);
    private Typo GetYearTypo(int year);
    private void OnFormattedDateClick();
    [IteratorStateMachineAttribute("MudBlazor.MudBaseDatePicker/<GetAllMonths>d__134")]
private IEnumerable`1<DateTime> GetAllMonths();
    private string GetAbbreviatedMonthName(DateTime month);
    private string GetMonthName(DateTime month);
    private string GetMonthClasses(DateTime month);
    private Typo GetMonthTypo(DateTime month);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudBaseDatePicker/<OnAfterRenderAsync>d__140")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected abstract virtual DateTime GetCalendarStartOfMonth();
    private int GetCalendarDayOfMonth(DateTime date);
    protected abstract virtual int GetCalendarYear(DateTime yearDate);
    private ValueTask HandleMouseoverOnPickerCalendarDayButton(int tempId);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected virtual RenderFragment get_PickerContent();
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__147_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__147_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__147_2(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__147_4(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__147_5(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__147_3(RenderTreeBuilder __builder4);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class MudBlazor.MudBaseInput`1 : MudFormComponent`2<T, string> {
    private bool _isDirty;
    private bool _validated;
    protected bool _isFocused;
    protected bool _forceTextUpdate;
    private string _userAttributesId;
    [NullableAttribute("1")]
private string _componentId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<string> _inputIdState;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Immediate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelperId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelperText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HelperTextOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentText>k__BackingField;
    [CompilerGeneratedAttribute]
private Adornment <Adornment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyValidateIfDirty>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AdornmentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnAdornmentClick>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Typo <Typo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Counter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TextUpdateSuppression>k__BackingField;
    [CompilerGeneratedAttribute]
private InputMode <InputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShrinkLabel>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<string> <TextChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<FocusEventArgs> <OnBlur>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<ChangeEventArgs> <OnInternalInputChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<KeyboardEventArgs> <OnKeyDown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeyDownPreventDefault>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<KeyboardEventArgs> <OnKeyUp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeyUpPreventDefault>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputId>k__BackingField;
    protected string InputElementId { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [CascadingParameterAttribute]
private bool ParentReadOnly { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool FullWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Immediate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Underline { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public string HelperId { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string HelperText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool HelperTextOnFocus { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AdornmentIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AdornmentText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Adornment Adornment { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool OnlyValidateIfDirty { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color AdornmentColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string AdornmentAriaLabel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size IconSize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnAdornmentClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Margin Margin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Typo Typo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Placeholder { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public Nullable`1<int> Counter { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public int MaxLength { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AutoFocus { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Lines { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool TextUpdateSuppression { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public InputMode InputMode { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public string Pattern { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool ShrinkLabel { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<string> TextChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<FocusEventArgs> OnBlur { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<ChangeEventArgs> OnInternalInputChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<KeyboardEventArgs> OnKeyDown { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool KeyDownPreventDefault { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<KeyboardEventArgs> OnKeyUp { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool KeyUpPreventDefault { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Format { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string InputId { get; public set; }
    protected string get_InputElementId();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentReadOnly();
    [CompilerGeneratedAttribute]
private void set_ParentReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(bool value);
    [CompilerGeneratedAttribute]
public bool get_Immediate();
    [CompilerGeneratedAttribute]
public void set_Immediate(bool value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public string get_HelperId();
    [CompilerGeneratedAttribute]
public void set_HelperId(string value);
    [CompilerGeneratedAttribute]
public string get_HelperText();
    [CompilerGeneratedAttribute]
public void set_HelperText(string value);
    [CompilerGeneratedAttribute]
public bool get_HelperTextOnFocus();
    [CompilerGeneratedAttribute]
public void set_HelperTextOnFocus(bool value);
    [CompilerGeneratedAttribute]
public string get_AdornmentIcon();
    [CompilerGeneratedAttribute]
public void set_AdornmentIcon(string value);
    [CompilerGeneratedAttribute]
public string get_AdornmentText();
    [CompilerGeneratedAttribute]
public void set_AdornmentText(string value);
    [CompilerGeneratedAttribute]
public Adornment get_Adornment();
    [CompilerGeneratedAttribute]
public void set_Adornment(Adornment value);
    [CompilerGeneratedAttribute]
public bool get_OnlyValidateIfDirty();
    [CompilerGeneratedAttribute]
public void set_OnlyValidateIfDirty(bool value);
    [CompilerGeneratedAttribute]
public Color get_AdornmentColor();
    [CompilerGeneratedAttribute]
public void set_AdornmentColor(Color value);
    [CompilerGeneratedAttribute]
public string get_AdornmentAriaLabel();
    [CompilerGeneratedAttribute]
public void set_AdornmentAriaLabel(string value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnAdornmentClick();
    [CompilerGeneratedAttribute]
public void set_OnAdornmentClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    [CompilerGeneratedAttribute]
public Typo get_Typo();
    [CompilerGeneratedAttribute]
public void set_Typo(Typo value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Counter();
    [CompilerGeneratedAttribute]
public void set_Counter(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoFocus();
    [CompilerGeneratedAttribute]
public void set_AutoFocus(bool value);
    [CompilerGeneratedAttribute]
public int get_Lines();
    [CompilerGeneratedAttribute]
public void set_Lines(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_TextUpdateSuppression();
    [CompilerGeneratedAttribute]
public void set_TextUpdateSuppression(bool value);
    [CompilerGeneratedAttribute]
public virtual InputMode get_InputMode();
    [CompilerGeneratedAttribute]
public virtual void set_InputMode(InputMode value);
    [CompilerGeneratedAttribute]
public virtual string get_Pattern();
    [CompilerGeneratedAttribute]
public virtual void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public bool get_ShrinkLabel();
    [CompilerGeneratedAttribute]
public void set_ShrinkLabel(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_TextChanged();
    [CompilerGeneratedAttribute]
public void set_TextChanged(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<FocusEventArgs> get_OnBlur();
    [CompilerGeneratedAttribute]
public void set_OnBlur(EventCallback`1<FocusEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<ChangeEventArgs> get_OnInternalInputChanged();
    [CompilerGeneratedAttribute]
public void set_OnInternalInputChanged(EventCallback`1<ChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<KeyboardEventArgs> get_OnKeyDown();
    [CompilerGeneratedAttribute]
public void set_OnKeyDown(EventCallback`1<KeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_KeyDownPreventDefault();
    [CompilerGeneratedAttribute]
public void set_KeyDownPreventDefault(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<KeyboardEventArgs> get_OnKeyUp();
    [CompilerGeneratedAttribute]
public void set_OnKeyUp(EventCallback`1<KeyboardEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_KeyUpPreventDefault();
    [CompilerGeneratedAttribute]
public void set_KeyUpPreventDefault(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    public T get_Value();
    public void set_Value(T value);
    public string get_Format();
    public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_InputId();
    [CompilerGeneratedAttribute]
public void set_InputId(string value);
    protected bool GetDisabledState();
    protected bool GetReadOnlyState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<SetTextAsync>d__182")]
protected virtual Task SetTextAsync(string text, bool updateValue);
    [NullableContextAttribute("1")]
protected virtual Task UpdateTextPropertyAsync(bool updateValue);
    public virtual ValueTask FocusAsync();
    public virtual ValueTask BlurAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<OnBlurredAsync>d__188")]
protected internal virtual Task OnBlurredAsync(FocusEventArgs obj);
    [NullableContextAttribute("1")]
protected virtual Task InvokeKeyDownAsync(KeyboardEventArgs obj);
    [NullableContextAttribute("1")]
protected virtual Task InvokeKeyUpAsync(KeyboardEventArgs obj);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<SetValueAsync>d__191")]
protected virtual Task SetValueAsync(T value, bool updateText, bool force);
    [NullableContextAttribute("1")]
public virtual Task ForceUpdate();
    [NullableContextAttribute("1")]
protected virtual Task UpdateValuePropertyAsync(bool updateText);
    [NullableContextAttribute("1")]
protected virtual bool SetConverter(Converter`2<T, string> value);
    [NullableContextAttribute("1")]
protected virtual bool SetCulture(CultureInfo value);
    protected virtual bool SetFormat(string value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<ValidateValue>d__197")]
protected virtual Task ValidateValue();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<OnInitializedAsync>d__198")]
protected virtual Task OnInitializedAsync();
    public virtual void ForceRender(bool forceTextUpdate);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<SetParametersAsync>d__200")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<OnAfterRenderAsync>d__201")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void OnParametersSet();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<ResetValueAsync>d__203")]
protected virtual Task ResetValueAsync();
    protected string GetHelperId();
    protected string GetAriaDescribedByString();
    internal virtual InputType GetInputType();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseInput`1/<UpdateInputIdStateAsync>d__207")]
private Task UpdateInputIdStateAsync();
    [CompilerGeneratedAttribute]
private string <.ctor>b__9_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudBaseItemsControl`1 : MudComponentBase {
    private int _selectedIndexField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedIndexChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private TChildComponent <LastContainer>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<TChildComponent> <Items>k__BackingField;
    internal bool _moveNext;
    [ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int SelectedIndex { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<int> SelectedIndexChanged { get; public set; }
    public TChildComponent LastContainer { get; private set; }
    [NullableAttribute("1")]
public List`1<TChildComponent> Items { get; }
    public TChildComponent SelectedContainer { get; }
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedIndexChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_SelectedIndexChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public TChildComponent get_LastContainer();
    [CompilerGeneratedAttribute]
private void set_LastContainer(TChildComponent value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<TChildComponent> get_Items();
    public TChildComponent get_SelectedContainer();
    [NullableContextAttribute("1")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public void Previous();
    public void Next();
    public void MoveTo(int index);
    protected virtual void SelectionChanged();
    [NullableContextAttribute("1")]
public virtual void AddItem(TChildComponent item);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudBaseSelectItem : MudComponentBase {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("1")]
[InjectAttribute]
private NavigationManager UriHelper { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Href { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool ForceLoad { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private NavigationManager get_UriHelper();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_UriHelper(NavigationManager value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public void set_ForceLoad(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBaseSelectItem/<OnClickHandler>d__28")]
protected Task OnClickHandler(MouseEventArgs ev);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudBooleanInput`1 : MudFormComponent`2<T, Nullable`1<bool>> {
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopClickPropagation>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [CascadingParameterAttribute]
private bool ParentReadOnly { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool StopClickPropagation { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    protected Nullable`1<bool> BoolValue { get; }
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    protected bool GetDisabledState();
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentReadOnly();
    [CompilerGeneratedAttribute]
private void set_ParentReadOnly(bool value);
    protected bool GetReadOnlyState();
    public T get_Value();
    public void set_Value(T value);
    [CompilerGeneratedAttribute]
public bool get_StopClickPropagation();
    [CompilerGeneratedAttribute]
public void set_StopClickPropagation(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    protected Nullable`1<bool> get_BoolValue();
    [NullableContextAttribute("1")]
protected virtual Task OnChange(ChangeEventArgs args);
    [NullableContextAttribute("1")]
protected Task SetBoolValueAsync(Nullable`1<bool> value, Nullable`1<bool> markAsTouched);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBooleanInput`1/<SetCheckedAsync>d__34")]
protected Task SetCheckedAsync(T value);
    protected virtual bool SetConverter(Converter`2<T, Nullable`1<bool>> value);
    protected virtual bool HasValue(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudBreadcrumbs : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<BreadcrumbItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <SeparatorTemplate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<BreadcrumbItem> <ItemTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <MaxItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpanderIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Collapsed>k__BackingField;
    private string Classname { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public IReadOnlyList`1<BreadcrumbItem> Items { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Separator { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment SeparatorTemplate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<BreadcrumbItem> ItemTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<byte> MaxItems { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ExpanderIcon { get; public set; }
    public bool Collapsed { get; private set; }
    private string get_Classname();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BreadcrumbItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IReadOnlyList`1<BreadcrumbItem> value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_SeparatorTemplate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SeparatorTemplate(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<BreadcrumbItem> get_ItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemTemplate(RenderFragment`1<BreadcrumbItem> value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_MaxItems();
    [CompilerGeneratedAttribute]
public void set_MaxItems(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_ExpanderIcon();
    [CompilerGeneratedAttribute]
public void set_ExpanderIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_Collapsed();
    [CompilerGeneratedAttribute]
private void set_Collapsed(bool value);
    internal static string GetItemClassname(BreadcrumbItem item);
    internal void Expand();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__32_0(RenderTreeBuilder __builder2);
}
public class MudBlazor.MudBreakpointProvider : MudComponentBase {
    [CompilerGeneratedAttribute]
private Breakpoint <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Breakpoint> <OnBreakpointChanged>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IBrowserViewportService <BrowserViewportService>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MudBlazor.IBrowserViewportObserver.Id>k__BackingField;
    public Breakpoint Breakpoint { get; private set; }
    [ParameterAttribute]
public EventCallback`1<Breakpoint> OnBreakpointChanged { get; public set; }
    [NullableAttribute("1")]
[InjectAttribute]
protected IBrowserViewportService BrowserViewportService { get; protected set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    private Guid MudBlazor.IBrowserViewportObserver.Id { get; }
    [CompilerGeneratedAttribute]
public Breakpoint get_Breakpoint();
    [CompilerGeneratedAttribute]
private void set_Breakpoint(Breakpoint value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Breakpoint> get_OnBreakpointChanged();
    [CompilerGeneratedAttribute]
public void set_OnBreakpointChanged(EventCallback`1<Breakpoint> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected IBrowserViewportService get_BrowserViewportService();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected void set_BrowserViewportService(IBrowserViewportService value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBreakpointProvider/<OnAfterRenderAsync>d__16")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudBreakpointProvider/<DisposeAsync>d__17")]
public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private sealed virtual override Guid MudBlazor.IBrowserViewportObserver.get_Id();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudBreakpointProvider/<MudBlazor-IBrowserViewportObserver-NotifyBrowserViewportChangeAsync>d__21")]
private sealed virtual override Task MudBlazor.IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__22_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudButton : MudBaseButton {
    [CompilerGeneratedAttribute]
private string <StartIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Size> <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string StartIconClass { get; }
    [NullableAttribute("1")]
protected string EndIconClass { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string StartIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string EndIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Size> IconSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string IconClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool FullWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_StartIconClass();
    [NullableContextAttribute("1")]
protected string get_EndIconClass();
    [CompilerGeneratedAttribute]
public string get_StartIcon();
    [CompilerGeneratedAttribute]
public void set_StartIcon(string value);
    [CompilerGeneratedAttribute]
public string get_EndIcon();
    [CompilerGeneratedAttribute]
public void set_EndIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Nullable`1<Size> get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Nullable`1<Size> value);
    [CompilerGeneratedAttribute]
public string get_IconClass();
    [CompilerGeneratedAttribute]
public void set_IconClass(string value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public bool get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_1(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudButtonGroup : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverrideStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropShadow>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool OverrideStyles { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Vertical { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DropShadow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool FullWidth { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideStyles();
    [CompilerGeneratedAttribute]
public void set_OverrideStyles(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropShadow();
    [CompilerGeneratedAttribute]
public void set_DropShadow(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public bool get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(bool value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__38_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudCard : MudComponentBase {
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__18_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudCardActions : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudCardContent : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudCardHeader : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <CardHeaderAvatar>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <CardHeaderContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <CardHeaderActions>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment CardHeaderAvatar { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment CardHeaderContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment CardHeaderActions { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_CardHeaderAvatar();
    [CompilerGeneratedAttribute]
public void set_CardHeaderAvatar(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_CardHeaderContent();
    [CompilerGeneratedAttribute]
public void set_CardHeaderContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_CardHeaderActions();
    [CompilerGeneratedAttribute]
public void set_CardHeaderActions(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudCardMedia : MudComponentBase {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [NullableAttribute("1")]
protected string StyleString { get; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Title { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Image { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Height { get; public set; }
    [NullableContextAttribute("1")]
protected string get_StyleString();
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudCarousel`1 : MudBaseBindableItemsControl`2<MudCarouselItem, TData> {
    [NullableAttribute("2")]
private Timer _timer;
    private bool _autoCycle;
    private Color _currentColor;
    private TimeSpan _cycleTimeout;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowArrows>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <ArrowsPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowBullets>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <BulletsPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <BulletsColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <NavigationButtonsClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BulletsClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreviousIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextIcon>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <NextButtonTemplate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <PreviousButtonTemplate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment`1<bool> <BulletTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSwipeGesture>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    protected string NavigationButtonsClassName { get; }
    protected string BulletsButtonsClassName { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowArrows { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Position ArrowsPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowBullets { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Position BulletsPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> BulletsColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AutoCycle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TimeSpan AutoCycleTime { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string NavigationButtonsClass { get; public set; }
    [NullableAttribute("2")]
[CategoryAttribute("Appearance")]
[ParameterAttribute]
public string BulletsClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string PreviousIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string UncheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string NextIcon { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment NextButtonTemplate { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment PreviousButtonTemplate { get; public set; }
    [NullableAttribute("2")]
[CategoryAttribute("Appearance")]
[ParameterAttribute]
public RenderFragment`1<bool> BulletTemplate { get; public set; }
    [CategoryAttribute("Behavior")]
[ParameterAttribute]
public bool EnableSwipeGesture { get; public set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_Classname();
    protected string get_NavigationButtonsClassName();
    protected string get_BulletsButtonsClassName();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowArrows();
    [CompilerGeneratedAttribute]
public void set_ShowArrows(bool value);
    [CompilerGeneratedAttribute]
public Position get_ArrowsPosition();
    [CompilerGeneratedAttribute]
public void set_ArrowsPosition(Position value);
    [CompilerGeneratedAttribute]
public bool get_ShowBullets();
    [CompilerGeneratedAttribute]
public void set_ShowBullets(bool value);
    [CompilerGeneratedAttribute]
public Position get_BulletsPosition();
    [CompilerGeneratedAttribute]
public void set_BulletsPosition(Position value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_BulletsColor();
    [CompilerGeneratedAttribute]
public void set_BulletsColor(Nullable`1<Color> value);
    public bool get_AutoCycle();
    public void set_AutoCycle(bool value);
    public TimeSpan get_AutoCycleTime();
    public void set_AutoCycleTime(TimeSpan value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_NavigationButtonsClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NavigationButtonsClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_BulletsClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BulletsClass(string value);
    [CompilerGeneratedAttribute]
public string get_PreviousIcon();
    [CompilerGeneratedAttribute]
public void set_PreviousIcon(string value);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_UncheckedIcon();
    [CompilerGeneratedAttribute]
public void set_UncheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NextIcon();
    [CompilerGeneratedAttribute]
public void set_NextIcon(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_NextButtonTemplate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NextButtonTemplate(RenderFragment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_PreviousButtonTemplate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_PreviousButtonTemplate(RenderFragment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment`1<bool> get_BulletTemplate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BulletTemplate(RenderFragment`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_EnableSwipeGesture();
    [CompilerGeneratedAttribute]
public void set_EnableSwipeGesture(bool value);
    protected virtual void SelectionChanged();
    public virtual void AddItem(MudCarouselItem item);
    [NullableContextAttribute("2")]
private void TimerElapsed(object stateInfo);
    private static Position ConvertPosition(Position position);
    private void OnSwipeEnd(SwipeEventArgs e);
    private ValueTask StartTimerAsync();
    private ValueTask StopTimerAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<ResetTimerAsync>d__87")]
private ValueTask ResetTimerAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<TimerTickAsync>d__88")]
private ValueTask TimerTickAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<OnAfterRenderAsync>d__89")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<DisposeAsync>d__90")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<DisposeAsync>d__91")]
protected virtual ValueTask DisposeAsync(bool disposing);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<<set_AutoCycle>b__36_0>d")]
[CompilerGeneratedAttribute]
private Task <set_AutoCycle>b__36_0();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<<set_AutoCycle>b__36_1>d")]
[CompilerGeneratedAttribute]
private Task <set_AutoCycle>b__36_1();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<<set_AutoCycleTime>b__39_0>d")]
[CompilerGeneratedAttribute]
private Task <set_AutoCycleTime>b__39_0();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<<set_AutoCycleTime>b__39_1>d")]
[CompilerGeneratedAttribute]
private Task <set_AutoCycleTime>b__39_1();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<<SelectionChanged>b__80_0>d")]
[CompilerGeneratedAttribute]
private Task <SelectionChanged>b__80_0();
    [AsyncStateMachineAttribute("MudBlazor.MudCarousel`1/<<TimerElapsed>b__82_0>d")]
[CompilerGeneratedAttribute]
private Task <TimerElapsed>b__82_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_1(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudCarouselItem : MudComponentBase {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudBaseItemsControl`1<MudCarouselItem> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Transition <Transition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomTransitionEnter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomTransitionExit>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
protected internal MudBaseItemsControl`1<MudCarouselItem> Parent { get; protected internal set; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Transition Transition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CustomTransitionEnter { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CustomTransitionExit { get; public set; }
    public bool Visible { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
protected internal MudBaseItemsControl`1<MudCarouselItem> get_Parent();
    [CompilerGeneratedAttribute]
protected internal void set_Parent(MudBaseItemsControl`1<MudCarouselItem> value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Transition get_Transition();
    [CompilerGeneratedAttribute]
public void set_Transition(Transition value);
    [CompilerGeneratedAttribute]
public string get_CustomTransitionEnter();
    [CompilerGeneratedAttribute]
public void set_CustomTransitionEnter(string value);
    [CompilerGeneratedAttribute]
public string get_CustomTransitionExit();
    [CompilerGeneratedAttribute]
public void set_CustomTransitionExit(string value);
    public bool get_Visible();
    [NullableContextAttribute("1")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public abstract class MudBlazor.MudCategoryChartBase : MudChartBase {
    [CompilerGeneratedAttribute]
private Double[] <InputData>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <InputLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <XAxisLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ChartSeries> <ChartSeries>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Double[] InputData { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public String[] InputLabels { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public String[] XAxisLabels { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public List`1<ChartSeries> ChartSeries { get; public set; }
    [CompilerGeneratedAttribute]
public Double[] get_InputData();
    [CompilerGeneratedAttribute]
public void set_InputData(Double[] value);
    [CompilerGeneratedAttribute]
public String[] get_InputLabels();
    [CompilerGeneratedAttribute]
public void set_InputLabels(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_XAxisLabels();
    [CompilerGeneratedAttribute]
public void set_XAxisLabels(String[] value);
    [CompilerGeneratedAttribute]
public List`1<ChartSeries> get_ChartSeries();
    [CompilerGeneratedAttribute]
public void set_ChartSeries(List`1<ChartSeries> value);
    protected Double[] GetNormalizedData();
}
public class MudBlazor.MudChart : MudCategoryChartBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(int __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_3(int __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_4(int __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_5(int __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_6(int __value);
}
public abstract class MudBlazor.MudChartBase : MudComponentBase {
    [CompilerGeneratedAttribute]
private ChartOptions <ChartOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <CustomGraphics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private ChartType <ChartType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <LegendPosition>k__BackingField;
    private int _selectedIndex;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedIndexChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanHideSeries>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public ChartOptions ChartOptions { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment CustomGraphics { get; public set; }
    protected string Classname { get; }
    [CascadingParameterAttribute]
[CategoryAttribute("Behavior")]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public ChartType ChartType { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Width { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Height { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Position LegendPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int SelectedIndex { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<int> SelectedIndexChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool CanHideSeries { get; public set; }
    [CompilerGeneratedAttribute]
public ChartOptions get_ChartOptions();
    [CompilerGeneratedAttribute]
public void set_ChartOptions(ChartOptions value);
    [CompilerGeneratedAttribute]
public RenderFragment get_CustomGraphics();
    [CompilerGeneratedAttribute]
public void set_CustomGraphics(RenderFragment value);
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public ChartType get_ChartType();
    [CompilerGeneratedAttribute]
public void set_ChartType(ChartType value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public Position get_LegendPosition();
    [CompilerGeneratedAttribute]
public void set_LegendPosition(Position value);
    private Position ConvertLegendPosition(Position position);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    internal void SetSelectedIndex(int index);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedIndexChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedIndexChanged(EventCallback`1<int> value);
    protected string ToS(double d, string format);
    [CompilerGeneratedAttribute]
public bool get_CanHideSeries();
    [CompilerGeneratedAttribute]
public void set_CanHideSeries(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudCheckBox`1 : MudBooleanInput`1<T> {
    [NullableAttribute("2")]
private IKeyInterceptor _keyInterceptor;
    private string _elementId;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <KeyInterceptorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <UncheckedColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelPosition <LabelPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeyboardEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndeterminateIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriState>k__BackingField;
    [InjectAttribute]
private IKeyInterceptorFactory KeyInterceptorFactory { get; private set; }
    protected string Classname { get; }
    protected string LabelClassname { get; }
    protected string CheckBoxClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> UncheckedColor { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public LabelPosition LabelPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool KeyboardEnabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string UncheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string IndeterminateIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public bool TriState { get; public set; }
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get_KeyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set_KeyInterceptorFactory(IKeyInterceptorFactory value);
    protected string get_Classname();
    protected string get_LabelClassname();
    protected string get_CheckBoxClassname();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_UncheckedColor();
    [CompilerGeneratedAttribute]
public void set_UncheckedColor(Nullable`1<Color> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Label();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public LabelPosition get_LabelPosition();
    [CompilerGeneratedAttribute]
public void set_LabelPosition(LabelPosition value);
    [CompilerGeneratedAttribute]
public bool get_KeyboardEnabled();
    [CompilerGeneratedAttribute]
public void set_KeyboardEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_UncheckedIcon();
    [CompilerGeneratedAttribute]
public void set_UncheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_IndeterminateIcon();
    [CompilerGeneratedAttribute]
public void set_IndeterminateIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_TriState();
    [CompilerGeneratedAttribute]
public void set_TriState(bool value);
    private string GetIcon();
    protected virtual Task OnChange(ChangeEventArgs args);
    protected void HandleKeyDown(KeyboardEventArgs obj);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudCheckBox`1/<OnAfterRenderAsync>d__68")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_2(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudChip`1 : MudComponentBase {
    [NullableAttribute("1")]
internal ParameterState`1<bool> SelectedState;
    [CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsApiService <JsApiService>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudChipSet`1<T> <ChipSet>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <SelectedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Size> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Variant> <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <AvatarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Default>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MudChip`1<T>> <OnClose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <SelectedChanged>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [InjectAttribute]
public NavigationManager UriHelper { get; public set; }
    [InjectAttribute]
public IJsApiService JsApiService { get; public set; }
    [NullableAttribute("1")]
protected string Classname { get; }
    private bool IsClickable { get; }
    private string RoleAttribute { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
private MudChipSet`1<T> ChipSet { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> SelectedColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Size> Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Variant> Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment AvatarContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<bool> Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<bool> Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Href { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Target { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool ForceLoad { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<bool> Default { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MudChip`1<T>> OnClose { get; public set; }
    internal bool ShowCheckMark { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Selected { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> SelectedChanged { get; public set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [NullableContextAttribute("1")]
private Task OnSelectedChangedAsync(ParameterChangedEventArgs`1<bool> args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudChip`1/<UpdateSelectionStateAsync>d__2")]
internal Task UpdateSelectionStateAsync(bool selected);
    [CompilerGeneratedAttribute]
public NavigationManager get_UriHelper();
    [CompilerGeneratedAttribute]
public void set_UriHelper(NavigationManager value);
    [CompilerGeneratedAttribute]
public IJsApiService get_JsApiService();
    [CompilerGeneratedAttribute]
public void set_JsApiService(IJsApiService value);
    [NullableContextAttribute("1")]
protected string get_Classname();
    private bool get_IsClickable();
    private string get_RoleAttribute();
    internal Variant GetVariant();
    private Color GetColor();
    private Color GetSelectedColor();
    private Color GetIconColor();
    private Size GetSize();
    private bool GetDisabled();
    private bool GetRipple();
    private bool GetLabel();
    [NullableContextAttribute("1")]
private string GetCheckedIcon();
    [NullableContextAttribute("1")]
private string GetCloseIcon();
    [CompilerGeneratedAttribute]
private MudChipSet`1<T> get_ChipSet();
    [CompilerGeneratedAttribute]
private void set_ChipSet(MudChipSet`1<T> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_SelectedColor();
    [CompilerGeneratedAttribute]
public void set_SelectedColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Size> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<Size> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Variant> get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Nullable`1<Variant> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_AvatarContent();
    [CompilerGeneratedAttribute]
public void set_AvatarContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public void set_ForceLoad(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudChip`1<T>> get_OnClose();
    [CompilerGeneratedAttribute]
public void set_OnClose(EventCallback`1<MudChip`1<T>> value);
    internal bool get_ShowCheckMark();
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_SelectedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_SelectedChanged(EventCallback`1<bool> value);
    internal T GetValue();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudChip`1/<OnInitializedAsync>d__127")]
protected virtual Task OnInitializedAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudChip`1/<OnClickAsync>d__128")]
protected internal Task OnClickAsync(MouseEventArgs ev);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudChip`1/<OnCloseAsync>d__129")]
protected Task OnCloseAsync(MouseEventArgs ev);
    [AsyncStateMachineAttribute("MudBlazor.MudChip`1/<DisposeAsync>d__130")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__0_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CascadingTypeParameterAttribute("T")]
public class MudBlazor.MudChipSet`1 : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<T> _selectedValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<IReadOnlyCollection`1<T>> _selectedValues;
    private HashSet`1<T> _selection;
    private HashSet`1<MudChip`1<T>> _chips;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionMode <SelectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllClosable>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <SelectedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckMark>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <Comparer>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <SelectedValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <SelectedValueChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <SelectedValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<IReadOnlyCollection`1<T>> <SelectedValuesChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MudChip`1<T>> <OnClose>k__BackingField;
    private bool _disposed;
    private bool MultiSelection { get; }
    private bool Mandatory { get; }
    protected string Classname { get; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public SelectionMode SelectionMode { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AllClosable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color SelectedColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool CheckMark { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public IEqualityComparer`1<T> Comparer { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public T SelectedValue { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> SelectedValueChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public IReadOnlyCollection`1<T> SelectedValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<IReadOnlyCollection`1<T>> SelectedValuesChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MudChip`1<T>> OnClose { get; public set; }
    private bool get_MultiSelection();
    private bool get_Mandatory();
    protected string get_Classname();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(SelectionMode value);
    [CompilerGeneratedAttribute]
public bool get_AllClosable();
    [CompilerGeneratedAttribute]
public void set_AllClosable(bool value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Color get_SelectedColor();
    [CompilerGeneratedAttribute]
public void set_SelectedColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_CheckMark();
    [CompilerGeneratedAttribute]
public void set_CheckMark(bool value);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<T> get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(IEqualityComparer`1<T> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_SelectedValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SelectedValue(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_SelectedValueChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValueChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<T> get_SelectedValues();
    [CompilerGeneratedAttribute]
public void set_SelectedValues(IReadOnlyCollection`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IReadOnlyCollection`1<T>> get_SelectedValuesChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValuesChanged(EventCallback`1<IReadOnlyCollection`1<T>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudChip`1<T>> get_OnClose();
    [CompilerGeneratedAttribute]
public void set_OnClose(EventCallback`1<MudChip`1<T>> value);
    private Task OnSelectedValueChangedAsync(ParameterChangedEventArgs`1<T> args);
    private Task OnSelectedValuesChangedAsync(ParameterChangedEventArgs`1<IReadOnlyCollection`1<T>> args);
    private Task OnComparerChangedAsync(ParameterChangedEventArgs`1<IEqualityComparer`1<T>> args);
    private void OnCheckMarkChanged(ParameterChangedEventArgs`1<bool> args);
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<UpdateSelectedValueAsync>d__99")]
private Task UpdateSelectedValueAsync(T newValue, bool updateChips);
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<UpdateSelectedValuesAsync>d__100")]
private Task UpdateSelectedValuesAsync(IReadOnlyCollection`1<T> newValues, bool updateChips);
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<UpdateChipsAsync>d__101")]
private Task UpdateChipsAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<AddAsync>d__102")]
internal Task AddAsync(MudChip`1<T> chip);
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<RemoveAsync>d__103")]
internal Task RemoveAsync(MudChip`1<T> chip);
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<OnChipSelectedChangedAsync>d__104")]
internal Task OnChipSelectedChangedAsync(MudChip`1<T> chip, bool selected);
    [AsyncStateMachineAttribute("MudBlazor.MudChipSet`1/<OnChipDeletedAsync>d__105")]
internal Task OnChipDeletedAsync(MudChip`1<T> chip);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private T <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <.ctor>b__0_1();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_2();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <.ctor>b__0_3();
    [CompilerGeneratedAttribute]
private EventCallback`1<IReadOnlyCollection`1<T>> <.ctor>b__0_4();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_5();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_7();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_8();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudCollapse : MudComponentBase {
    internal double _height;
    private ParameterState`1<bool> _expandedState;
    private bool _isRendered;
    private bool _updateHeight;
    private ElementReference _wrapper;
    internal CollapseState _state;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxHeight>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <OnAnimationEnd>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    protected string Stylename { get; }
    protected string Classname { get; }
    [ParameterAttribute]
public bool Expanded { get; public set; }
    [ParameterAttribute]
public Nullable`1<int> MaxHeight { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback OnAnimationEnd { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    private double CalculatedAnimationDuration { get; }
    protected string get_Stylename();
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback get_OnAnimationEnd();
    [CompilerGeneratedAttribute]
public void set_OnAnimationEnd(EventCallback value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [AsyncStateMachineAttribute("MudBlazor.MudCollapse/<OnExpandedParameterChangedAsync>d__32")]
private Task OnExpandedParameterChangedAsync();
    private double get_CalculatedAnimationDuration();
    [AsyncStateMachineAttribute("MudBlazor.MudCollapse/<UpdateHeightAsync>d__35")]
internal Task UpdateHeightAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudCollapse/<OnAfterRenderAsync>d__36")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public Task AnimationEndAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__31_1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__38_0(ElementReference __value);
}
public class MudBlazor.MudColorPicker : MudPicker`1<MudColor> {
    private ParameterState`1<int> _throttleIntervalState;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<int, ValueTuple`4<Func`2<int, int>, Func`2<int, int>, Func`2<int, int>, string>> _rgbToHueMapper;
    private static double _maxY;
    private static double _maxX;
    private static double _selectorSize;
    private double _selectorX;
    private double _selectorY;
    private bool _skipFeedback;
    private MudColor _baseColor;
    private bool _collectionOpen;
    private string _id;
    private ThrottleDispatcher _throttleDispatcher;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    private bool _alpha;
    [CompilerGeneratedAttribute]
private bool <ShowColorField>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowModeSwitch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowSliders>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorPickerMode <ColorPickerMode>k__BackingField;
    private ColorPickerView _colorPickerView;
    private ColorPickerView _activeColorPickerView;
    [CompilerGeneratedAttribute]
private bool <UpdateBindingIfOnlyHSLChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MudColor> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<MudColor> <Palette>k__BackingField;
    private IEnumerable`1<MudColor> _gridList;
    [CompilerGeneratedAttribute]
private bool <DragEffect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpectrumIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GridIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PaletteIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportExportIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThrottleInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowAlpha { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowColorField { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowModeSwitch { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowInputs { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowSliders { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool ShowPreview { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public ColorPickerMode ColorPickerMode { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public ColorPickerView ColorPickerView { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool UpdateBindingIfOnlyHSLChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public MudColor Value { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MudColor> ValueChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public IEnumerable`1<MudColor> Palette { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool DragEffect { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string CloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string SpectrumIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string GridIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string PaletteIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string ImportExportIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public int ThrottleInterval { get; public set; }
    private string AlphaSliderStyle { get; }
    protected RenderFragment PickerContent { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    private static MudColorPicker();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    public bool get_ShowAlpha();
    public void set_ShowAlpha(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowColorField();
    [CompilerGeneratedAttribute]
public void set_ShowColorField(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowModeSwitch();
    [CompilerGeneratedAttribute]
public void set_ShowModeSwitch(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowInputs();
    [CompilerGeneratedAttribute]
public void set_ShowInputs(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowSliders();
    [CompilerGeneratedAttribute]
public void set_ShowSliders(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPreview();
    [CompilerGeneratedAttribute]
public void set_ShowPreview(bool value);
    [CompilerGeneratedAttribute]
public ColorPickerMode get_ColorPickerMode();
    [CompilerGeneratedAttribute]
public void set_ColorPickerMode(ColorPickerMode value);
    public ColorPickerView get_ColorPickerView();
    public void set_ColorPickerView(ColorPickerView value);
    [CompilerGeneratedAttribute]
public bool get_UpdateBindingIfOnlyHSLChanged();
    [CompilerGeneratedAttribute]
public void set_UpdateBindingIfOnlyHSLChanged(bool value);
    public MudColor get_Value();
    public void set_Value(MudColor value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudColor> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<MudColor> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<MudColor> get_Palette();
    [CompilerGeneratedAttribute]
public void set_Palette(IEnumerable`1<MudColor> value);
    [CompilerGeneratedAttribute]
public bool get_DragEffect();
    [CompilerGeneratedAttribute]
public void set_DragEffect(bool value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
public string get_SpectrumIcon();
    [CompilerGeneratedAttribute]
public void set_SpectrumIcon(string value);
    [CompilerGeneratedAttribute]
public string get_GridIcon();
    [CompilerGeneratedAttribute]
public void set_GridIcon(string value);
    [CompilerGeneratedAttribute]
public string get_PaletteIcon();
    [CompilerGeneratedAttribute]
public void set_PaletteIcon(string value);
    [CompilerGeneratedAttribute]
public string get_ImportExportIcon();
    [CompilerGeneratedAttribute]
public void set_ImportExportIcon(string value);
    [CompilerGeneratedAttribute]
public int get_ThrottleInterval();
    [CompilerGeneratedAttribute]
public void set_ThrottleInterval(int value);
    protected virtual void OnInitialized();
    private void OnThrottleIntervalParameterChanged(ParameterChangedEventArgs`1<int> args);
    private void SetThrottle(int interval);
    private void ToggleCollection();
    [AsyncStateMachineAttribute("MudBlazor.MudColorPicker/<SelectPaletteColorAsync>d__98")]
private Task SelectPaletteColorAsync(MudColor color);
    public void ChangeMode();
    public void ChangeView(ColorPickerView value);
    [AsyncStateMachineAttribute("MudBlazor.MudColorPicker/<SetColorAsync>d__101")]
private Task SetColorAsync(MudColor value);
    private void UpdateBaseColorSlider(int value);
    private void UpdateBaseColor();
    private void UpdateColorBaseOnSelection();
    private void UpdateColorSelectorBasedOnRgb();
    [AsyncStateMachineAttribute("MudBlazor.MudColorPicker/<HandleColorOverlayClickedAsync>d__106")]
private Task HandleColorOverlayClickedAsync();
    private Task OnColorOverlayClick(PointerEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudColorPicker/<OnPointerMoveAsync>d__108")]
private Task OnPointerMoveAsync(PointerEventArgs e);
    private void SetSelectorBasedOnPointerEvents(PointerEventArgs e, bool offsetIsAbsolute);
    public void SetR(int value);
    public void SetG(int value);
    public void SetB(int value);
    public void SetH(double value);
    public void SetS(double value);
    public void SetL(double value);
    public void SetAlpha(double value);
    public void SetAlpha(int value);
    public void SetInputString(string input);
    protected virtual Task StringValueChangedAsync(string value);
    private string GetSelectorLocation();
    private string GetColorTextValue();
    private int GetHexColorInputMaxLength();
    private EventCallback`1<MouseEventArgs> GetEventCallback();
    private bool IsAnyControlVisible();
    private EventCallback`1<MouseEventArgs> GetSelectPaletteColorCallback(MudColor color);
    private Color GetButtonColor(ColorPickerView view);
    private string GetColorDotClass(MudColor color);
    private string get_AlphaSliderStyle();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected virtual RenderFragment get_PickerContent();
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private int <.ctor>b__1_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <OnPointerMoveAsync>b__108_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <GetEventCallback>b__123_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_2(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_4();
    [CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_5();
    [CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_6();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__132_3(RenderTreeBuilder __builder4);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudComponentBase : ComponentBaseWithState {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <UserAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsJSRuntimeAvailable>k__BackingField;
    [NullableAttribute("1")]
private string _id;
    [NullableAttribute("1")]
[InjectAttribute]
private ILoggerFactory LoggerFactory { get; private set; }
    [NullableAttribute("1")]
protected ILogger Logger { get; }
    [ParameterAttribute]
[CategoryAttribute("Common")]
public string Class { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Common")]
public string Style { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Common")]
public object Tag { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Common")]
public Dictionary`2<string, object> UserAttributes { get; public set; }
    protected bool IsJSRuntimeAvailable { get; protected set; }
    [NullableAttribute("1")]
public string FieldId { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private ILoggerFactory get_LoggerFactory();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_LoggerFactory(ILoggerFactory value);
    [NullableContextAttribute("1")]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public string get_Class();
    [CompilerGeneratedAttribute]
public void set_Class(string value);
    [CompilerGeneratedAttribute]
public string get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tag();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Tag(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_UserAttributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAttributes(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
protected bool get_IsJSRuntimeAvailable();
    [CompilerGeneratedAttribute]
protected void set_IsJSRuntimeAvailable(bool value);
    [NullableContextAttribute("1")]
public string get_FieldId();
    protected virtual void OnAfterRender(bool firstRender);
    private sealed virtual override void MudBlazor.Interfaces.IMudStateHasChanged.StateHasChanged();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudContainer : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Fixed>k__BackingField;
    [CompilerGeneratedAttribute]
private MaxWidth <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Fixed { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public MaxWidth MaxWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Fixed();
    [CompilerGeneratedAttribute]
public void set_Fixed(bool value);
    [CompilerGeneratedAttribute]
public MaxWidth get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(MaxWidth value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
}
[CascadingTypeParameterAttribute("T")]
public class MudBlazor.MudDataGrid`1 : MudComponentBase {
    private Func`1<IFilterDefinition`1<T>> _defaultFilterDefinitionFactory;
    private int _currentPage;
    internal Nullable`1<int> _rowsPerPage;
    private bool _isFirstRendered;
    private bool _filtersMenuVisible;
    private bool _columnsPanelVisible;
    private string _columnsPanelSearch;
    private IEnumerable`1<T> _items;
    private T _selectedItem;
    private MudForm _editForm;
    private MudVirtualize`1<T> _mudVirtualize;
    internal Dictionary`2<object, bool> _groupExpansionsDict;
    private List`1<GroupDefinition`1<T>> _currentPageGroups;
    private List`1<GroupDefinition`1<T>> _allGroups;
    internal HashSet`1<T> _openHierarchies;
    private PropertyInfo[] _properties;
    private MudDropContainer`1<Column`1<T>> _dropContainer;
    private MudDropContainer`1<Column`1<T>> _columnsPanelDropContainer;
    private CancellationTokenSource _serverDataCancellationTokenSource;
    public List`1<Column`1<T>> RenderedColumns;
    internal T _editingItem;
    internal T editingSourceItem;
    internal T _previousEditingItem;
    internal bool isEditFormOpen;
    private Converter`2<bool, Nullable`1<bool>> _oppositeBoolConverter;
    [CompilerGeneratedAttribute]
private Action`2<Dictionary`2<string, SortDefinition`1<T>>, HashSet`1<string>> <SortChangedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HashSet`1<T>> <SelectedItemsChangedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<bool> <SelectedAllItemsChangedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <StartedEditingItemEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <EditingCanceledEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <PagerStateHasChangedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <SelectedItemChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<HashSet`1<T>> <SelectedItemsChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridRowClickEventArgs`1<T>> <RowClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DataGridRowClickEventArgs`1<T>> <RowContextMenuClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <StartedEditingItem>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <CanceledEditingItem>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <CommittedItemChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<FormFieldChangedEventArgs> <FormFieldChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ColumnsPanelReordering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DragDropColumnReordering>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DragIndicatorIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <DragIndicatorSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DropAllowedClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DropNotAllowedClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyDropClassesOnDragStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private SortMode <SortMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Filterable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hideable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowColumnOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Breakpoint <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bordered>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ColGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Striped>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixedFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFilterIcons>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridFilterMode <FilterMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DataGridFilterCaseSensitivity <FilterCaseSensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<MudDataGrid`1<T>> <FilterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IFilterDefinition`1<T>> <FilterDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SortDefinition`1<T>> <SortDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Virtualize>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <RowLoadingContent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverscanCount>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ItemSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<T, int, string> <RowClassFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<T, int, string> <RowStyleFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectOnRowClick>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DataGridEditMode> <EditMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DataGridEditTrigger> <EditTrigger>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogOptions <EditDialogOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICloneStrategy`1<T> <CloneStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Loading>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCancelEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LoadingProgressColor>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ToolBarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HorizontalScrollbar>k__BackingField;
    [CompilerGeneratedAttribute]
private ResizeMode <ColumnResizeMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, bool> <QuickFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<CellContext`1<T>> <ChildRowContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NoRecordsContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <LoadingContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <PagerContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<GridState`1<T>, Task`1<GridData`1<T>>> <ServerData>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<GridStateVirtualize`1<T>, CancellationToken, Task`1<GridData`1<T>>> <VirtualizeServerData>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <RowsPerPageChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    private bool _groupable;
    [CompilerGeneratedAttribute]
private bool <GroupExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<GroupDefinition`1<T>, string> <GroupClassFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<GroupDefinition`1<T>, string> <GroupStyleFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowMenuIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<T> <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPager>k__BackingField;
    private GridData`1<T> _server_data;
    private IEnumerable`1<T> _currentRenderFilteredItemsCache;
    [CompilerGeneratedAttribute]
private ItemsProviderDelegate`1<T> <VirtualItemsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FilteringRunCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IForm <Validator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventListener <EventListener>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResizing>k__BackingField;
    private ElementReference _gridElement;
    private DataGridColumnResizeService`1<T> _resizeService;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string _classname { get; }
    protected string _style { get; }
    protected string _tableStyle { get; }
    protected string _tableClass { get; }
    protected string _headClassname { get; }
    protected string _footClassname { get; }
    protected string _headerFooterStyle { get; }
    protected int numPages { get; }
    internal Action`2<Dictionary`2<string, SortDefinition`1<T>>, HashSet`1<string>> SortChangedEvent { get; internal set; }
    internal Action`1<HashSet`1<T>> SelectedItemsChangedEvent { get; internal set; }
    internal Action`1<bool> SelectedAllItemsChangedEvent { get; internal set; }
    internal Action StartedEditingItemEvent { get; internal set; }
    internal Action EditingCanceledEvent { get; internal set; }
    public Action PagerStateHasChangedEvent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> SelectedItemChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<HashSet`1<T>> SelectedItemsChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridRowClickEventArgs`1<T>> RowClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DataGridRowClickEventArgs`1<T>> RowContextMenuClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> StartedEditingItem { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> CanceledEditingItem { get; public set; }
    [ObsoleteAttribute("Use CanceledEditingItem instead", "False")]
[ParameterAttribute]
public EventCallback`1<T> CancelledEditingItem { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> CommittedItemChanges { get; public set; }
    [ParameterAttribute]
public EventCallback`1<FormFieldChangedEventArgs> FormFieldChanged { get; public set; }
    [ParameterAttribute]
public bool ColumnsPanelReordering { get; public set; }
    [CascadingParameterAttribute]
private bool RightToLeft { get; private set; }
    [ParameterAttribute]
public bool DragDropColumnReordering { get; public set; }
    [ParameterAttribute]
public string DragIndicatorIcon { get; public set; }
    [ParameterAttribute]
public Size DragIndicatorSize { get; public set; }
    [ParameterAttribute]
public string DropAllowedClass { get; public set; }
    [ParameterAttribute]
public string DropNotAllowedClass { get; public set; }
    [ParameterAttribute]
public bool ApplyDropClassesOnDragStarted { get; public set; }
    [ParameterAttribute]
public SortMode SortMode { get; public set; }
    [ParameterAttribute]
public bool Filterable { get; public set; }
    [ParameterAttribute]
public bool Hideable { get; public set; }
    [ParameterAttribute]
public bool ShowColumnOptions { get; public set; }
    [ParameterAttribute]
public Breakpoint Breakpoint { get; public set; }
    [ParameterAttribute]
public int Elevation { get; public set; }
    [ParameterAttribute]
public bool Square { get; public set; }
    [ParameterAttribute]
public bool Outlined { get; public set; }
    [ParameterAttribute]
public bool Bordered { get; public set; }
    [ParameterAttribute]
public RenderFragment ColGroup { get; public set; }
    [ParameterAttribute]
public bool Dense { get; public set; }
    [ParameterAttribute]
public bool Hover { get; public set; }
    [ParameterAttribute]
public bool Striped { get; public set; }
    [ParameterAttribute]
public bool FixedHeader { get; public set; }
    [ParameterAttribute]
public bool FixedFooter { get; public set; }
    [ParameterAttribute]
public bool ShowFilterIcons { get; public set; }
    [ParameterAttribute]
public DataGridFilterMode FilterMode { get; public set; }
    [ParameterAttribute]
public DataGridFilterCaseSensitivity FilterCaseSensitivity { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<MudDataGrid`1<T>> FilterTemplate { get; public set; }
    [ParameterAttribute]
public List`1<IFilterDefinition`1<T>> FilterDefinitions { get; public set; }
    [ParameterAttribute]
public Dictionary`2<string, SortDefinition`1<T>> SortDefinitions { get; public set; }
    [ParameterAttribute]
public bool Virtualize { get; public set; }
    [ParameterAttribute]
public RenderFragment RowLoadingContent { get; public set; }
    [ParameterAttribute]
public int OverscanCount { get; public set; }
    [ParameterAttribute]
public float ItemSize { get; public set; }
    [ParameterAttribute]
public string RowClass { get; public set; }
    [ParameterAttribute]
public string RowStyle { get; public set; }
    [ParameterAttribute]
public Func`3<T, int, string> RowClassFunc { get; public set; }
    [ParameterAttribute]
public Func`3<T, int, string> RowStyleFunc { get; public set; }
    [ParameterAttribute]
public bool MultiSelection { get; public set; }
    [ParameterAttribute]
public bool SelectOnRowClick { get; public set; }
    [ParameterAttribute]
public Nullable`1<DataGridEditMode> EditMode { get; public set; }
    [ParameterAttribute]
public Nullable`1<DataGridEditTrigger> EditTrigger { get; public set; }
    [ParameterAttribute]
public DialogOptions EditDialogOptions { get; public set; }
    [ParameterAttribute]
public ICloneStrategy`1<T> CloneStrategy { get; public set; }
    [ParameterAttribute]
public IEnumerable`1<T> Items { get; public set; }
    [ParameterAttribute]
public bool Loading { get; public set; }
    [ParameterAttribute]
public bool CanCancelEdit { get; public set; }
    [ParameterAttribute]
public Color LoadingProgressColor { get; public set; }
    [ParameterAttribute]
public RenderFragment ToolBarContent { get; public set; }
    [ParameterAttribute]
public bool HorizontalScrollbar { get; public set; }
    [ParameterAttribute]
public ResizeMode ColumnResizeMode { get; public set; }
    [ParameterAttribute]
public string HeaderClass { get; public set; }
    [ParameterAttribute]
public string Height { get; public set; }
    [ParameterAttribute]
public string FooterClass { get; public set; }
    [ParameterAttribute]
public Func`2<T, bool> QuickFilter { get; public set; }
    [ParameterAttribute]
public RenderFragment Header { get; public set; }
    [ParameterAttribute]
public RenderFragment Columns { get; public set; }
    [ParameterAttribute]
public CultureInfo Culture { get; public set; }
    [ParameterAttribute]
public RenderFragment`1<CellContext`1<T>> ChildRowContent { get; public set; }
    [ParameterAttribute]
public RenderFragment NoRecordsContent { get; public set; }
    [ParameterAttribute]
public RenderFragment LoadingContent { get; public set; }
    [ParameterAttribute]
public RenderFragment PagerContent { get; public set; }
    [ParameterAttribute]
public Func`2<GridState`1<T>, Task`1<GridData`1<T>>> ServerData { get; public set; }
    [ParameterAttribute]
public Func`3<GridStateVirtualize`1<T>, CancellationToken, Task`1<GridData`1<T>>> VirtualizeServerData { get; public set; }
    [ParameterAttribute]
public int RowsPerPage { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> RowsPerPageChanged { get; public set; }
    [ParameterAttribute]
public int CurrentPage { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public HashSet`1<T> SelectedItems { get; public set; }
    [ParameterAttribute]
public T SelectedItem { get; public set; }
    [ParameterAttribute]
public bool Groupable { get; public set; }
    [ParameterAttribute]
public bool GroupExpanded { get; public set; }
    [ParameterAttribute]
public string GroupClass { get; public set; }
    [ParameterAttribute]
public string GroupStyle { get; public set; }
    [ParameterAttribute]
public Func`2<GroupDefinition`1<T>, string> GroupClassFunc { get; public set; }
    [ParameterAttribute]
public Func`2<GroupDefinition`1<T>, string> GroupStyleFunc { get; public set; }
    [ParameterAttribute]
public bool ShowMenuIcon { get; public set; }
    internal IEnumerable`1<T> CurrentPageItems { get; }
    public HashSet`1<T> Selection { get; public set; }
    public bool HasPager { get; public set; }
    public IEnumerable`1<T> ServerItems { get; }
    internal ItemsProviderDelegate`1<T> VirtualItemsProvider { get; internal set; }
    internal UInt32 FilteringRunCount { get; private set; }
    public IEnumerable`1<T> FilteredItems { get; }
    public IForm Validator { get; public set; }
    internal Column`1<T> GroupedColumn { get; }
    private bool hasFooter { get; }
    private bool hasStickyColumns { get; }
    private bool hasHierarchyColumn { get; }
    internal bool HasServerData { get; }
    [InjectAttribute]
private IEventListener EventListener { get; private set; }
    internal bool IsResizing { get; internal set; }
    internal DataGridColumnResizeService`1<T> ResizeService { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get__classname();
    protected string get__style();
    protected string get__tableStyle();
    protected string get__tableClass();
    protected string get__headClassname();
    protected string get__footClassname();
    protected string get__headerFooterStyle();
    protected virtual void OnParametersSet();
    internal SortDirection GetColumnSortDirection(string columnName);
    protected int get_numPages();
    internal static bool RenderedColumnsItemsSelector(Column`1<T> item, string dropZone);
    private static void Swap(List`1<TItem> list, int indexA, int indexB);
    private Task ItemUpdatedAsync(MudItemDropInfo`1<Column`1<T>> dropItem);
    [CompilerGeneratedAttribute]
internal Action`2<Dictionary`2<string, SortDefinition`1<T>>, HashSet`1<string>> get_SortChangedEvent();
    [CompilerGeneratedAttribute]
internal void set_SortChangedEvent(Action`2<Dictionary`2<string, SortDefinition`1<T>>, HashSet`1<string>> value);
    [CompilerGeneratedAttribute]
internal Action`1<HashSet`1<T>> get_SelectedItemsChangedEvent();
    [CompilerGeneratedAttribute]
internal void set_SelectedItemsChangedEvent(Action`1<HashSet`1<T>> value);
    [CompilerGeneratedAttribute]
internal Action`1<bool> get_SelectedAllItemsChangedEvent();
    [CompilerGeneratedAttribute]
internal void set_SelectedAllItemsChangedEvent(Action`1<bool> value);
    [CompilerGeneratedAttribute]
internal Action get_StartedEditingItemEvent();
    [CompilerGeneratedAttribute]
internal void set_StartedEditingItemEvent(Action value);
    [CompilerGeneratedAttribute]
internal Action get_EditingCanceledEvent();
    [CompilerGeneratedAttribute]
internal void set_EditingCanceledEvent(Action value);
    [CompilerGeneratedAttribute]
public Action get_PagerStateHasChangedEvent();
    [CompilerGeneratedAttribute]
public void set_PagerStateHasChangedEvent(Action value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_SelectedItemChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedItemChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<HashSet`1<T>> get_SelectedItemsChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedItemsChanged(EventCallback`1<HashSet`1<T>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridRowClickEventArgs`1<T>> get_RowClick();
    [CompilerGeneratedAttribute]
public void set_RowClick(EventCallback`1<DataGridRowClickEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DataGridRowClickEventArgs`1<T>> get_RowContextMenuClick();
    [CompilerGeneratedAttribute]
public void set_RowContextMenuClick(EventCallback`1<DataGridRowClickEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_StartedEditingItem();
    [CompilerGeneratedAttribute]
public void set_StartedEditingItem(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_CanceledEditingItem();
    [CompilerGeneratedAttribute]
public void set_CanceledEditingItem(EventCallback`1<T> value);
    public EventCallback`1<T> get_CancelledEditingItem();
    public void set_CancelledEditingItem(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_CommittedItemChanges();
    [CompilerGeneratedAttribute]
public void set_CommittedItemChanges(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<FormFieldChangedEventArgs> get_FormFieldChanged();
    [CompilerGeneratedAttribute]
public void set_FormFieldChanged(EventCallback`1<FormFieldChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_ColumnsPanelReordering();
    [CompilerGeneratedAttribute]
public void set_ColumnsPanelReordering(bool value);
    [CompilerGeneratedAttribute]
private bool get_RightToLeft();
    [CompilerGeneratedAttribute]
private void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_DragDropColumnReordering();
    [CompilerGeneratedAttribute]
public void set_DragDropColumnReordering(bool value);
    [CompilerGeneratedAttribute]
public string get_DragIndicatorIcon();
    [CompilerGeneratedAttribute]
public void set_DragIndicatorIcon(string value);
    [CompilerGeneratedAttribute]
public Size get_DragIndicatorSize();
    [CompilerGeneratedAttribute]
public void set_DragIndicatorSize(Size value);
    [CompilerGeneratedAttribute]
public string get_DropAllowedClass();
    [CompilerGeneratedAttribute]
public void set_DropAllowedClass(string value);
    [CompilerGeneratedAttribute]
public string get_DropNotAllowedClass();
    [CompilerGeneratedAttribute]
public void set_DropNotAllowedClass(string value);
    [CompilerGeneratedAttribute]
public bool get_ApplyDropClassesOnDragStarted();
    [CompilerGeneratedAttribute]
public void set_ApplyDropClassesOnDragStarted(bool value);
    [CompilerGeneratedAttribute]
public SortMode get_SortMode();
    [CompilerGeneratedAttribute]
public void set_SortMode(SortMode value);
    [CompilerGeneratedAttribute]
public bool get_Filterable();
    [CompilerGeneratedAttribute]
public void set_Filterable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hideable();
    [CompilerGeneratedAttribute]
public void set_Hideable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowColumnOptions();
    [CompilerGeneratedAttribute]
public void set_ShowColumnOptions(bool value);
    [CompilerGeneratedAttribute]
public Breakpoint get_Breakpoint();
    [CompilerGeneratedAttribute]
public void set_Breakpoint(Breakpoint value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bordered();
    [CompilerGeneratedAttribute]
public void set_Bordered(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ColGroup();
    [CompilerGeneratedAttribute]
public void set_ColGroup(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hover();
    [CompilerGeneratedAttribute]
public void set_Hover(bool value);
    [CompilerGeneratedAttribute]
public bool get_Striped();
    [CompilerGeneratedAttribute]
public void set_Striped(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixedHeader();
    [CompilerGeneratedAttribute]
public void set_FixedHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixedFooter();
    [CompilerGeneratedAttribute]
public void set_FixedFooter(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowFilterIcons();
    [CompilerGeneratedAttribute]
public void set_ShowFilterIcons(bool value);
    [CompilerGeneratedAttribute]
public DataGridFilterMode get_FilterMode();
    [CompilerGeneratedAttribute]
public void set_FilterMode(DataGridFilterMode value);
    [CompilerGeneratedAttribute]
public DataGridFilterCaseSensitivity get_FilterCaseSensitivity();
    [CompilerGeneratedAttribute]
public void set_FilterCaseSensitivity(DataGridFilterCaseSensitivity value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<MudDataGrid`1<T>> get_FilterTemplate();
    [CompilerGeneratedAttribute]
public void set_FilterTemplate(RenderFragment`1<MudDataGrid`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<IFilterDefinition`1<T>> get_FilterDefinitions();
    [CompilerGeneratedAttribute]
public void set_FilterDefinitions(List`1<IFilterDefinition`1<T>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, SortDefinition`1<T>> get_SortDefinitions();
    [CompilerGeneratedAttribute]
public void set_SortDefinitions(Dictionary`2<string, SortDefinition`1<T>> value);
    [CompilerGeneratedAttribute]
public bool get_Virtualize();
    [CompilerGeneratedAttribute]
public void set_Virtualize(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_RowLoadingContent();
    [CompilerGeneratedAttribute]
public void set_RowLoadingContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public int get_OverscanCount();
    [CompilerGeneratedAttribute]
public void set_OverscanCount(int value);
    [CompilerGeneratedAttribute]
public float get_ItemSize();
    [CompilerGeneratedAttribute]
public void set_ItemSize(float value);
    [CompilerGeneratedAttribute]
public string get_RowClass();
    [CompilerGeneratedAttribute]
public void set_RowClass(string value);
    [CompilerGeneratedAttribute]
public string get_RowStyle();
    [CompilerGeneratedAttribute]
public void set_RowStyle(string value);
    [CompilerGeneratedAttribute]
public Func`3<T, int, string> get_RowClassFunc();
    [CompilerGeneratedAttribute]
public void set_RowClassFunc(Func`3<T, int, string> value);
    [CompilerGeneratedAttribute]
public Func`3<T, int, string> get_RowStyleFunc();
    [CompilerGeneratedAttribute]
public void set_RowStyleFunc(Func`3<T, int, string> value);
    [CompilerGeneratedAttribute]
public bool get_MultiSelection();
    [CompilerGeneratedAttribute]
public void set_MultiSelection(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectOnRowClick();
    [CompilerGeneratedAttribute]
public void set_SelectOnRowClick(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DataGridEditMode> get_EditMode();
    [CompilerGeneratedAttribute]
public void set_EditMode(Nullable`1<DataGridEditMode> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DataGridEditTrigger> get_EditTrigger();
    [CompilerGeneratedAttribute]
public void set_EditTrigger(Nullable`1<DataGridEditTrigger> value);
    [CompilerGeneratedAttribute]
public DialogOptions get_EditDialogOptions();
    [CompilerGeneratedAttribute]
public void set_EditDialogOptions(DialogOptions value);
    [CompilerGeneratedAttribute]
public ICloneStrategy`1<T> get_CloneStrategy();
    [CompilerGeneratedAttribute]
public void set_CloneStrategy(ICloneStrategy`1<T> value);
    public IEnumerable`1<T> get_Items();
    public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_Loading();
    [CompilerGeneratedAttribute]
public void set_Loading(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanCancelEdit();
    [CompilerGeneratedAttribute]
public void set_CanCancelEdit(bool value);
    [CompilerGeneratedAttribute]
public Color get_LoadingProgressColor();
    [CompilerGeneratedAttribute]
public void set_LoadingProgressColor(Color value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ToolBarContent();
    [CompilerGeneratedAttribute]
public void set_ToolBarContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_HorizontalScrollbar();
    [CompilerGeneratedAttribute]
public void set_HorizontalScrollbar(bool value);
    [CompilerGeneratedAttribute]
public ResizeMode get_ColumnResizeMode();
    [CompilerGeneratedAttribute]
public void set_ColumnResizeMode(ResizeMode value);
    [CompilerGeneratedAttribute]
public string get_HeaderClass();
    [CompilerGeneratedAttribute]
public void set_HeaderClass(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_FooterClass();
    [CompilerGeneratedAttribute]
public void set_FooterClass(string value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_QuickFilter();
    [CompilerGeneratedAttribute]
public void set_QuickFilter(Func`2<T, bool> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(RenderFragment value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<CellContext`1<T>> get_ChildRowContent();
    [CompilerGeneratedAttribute]
public void set_ChildRowContent(RenderFragment`1<CellContext`1<T>> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NoRecordsContent();
    [CompilerGeneratedAttribute]
public void set_NoRecordsContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_LoadingContent();
    [CompilerGeneratedAttribute]
public void set_LoadingContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_PagerContent();
    [CompilerGeneratedAttribute]
public void set_PagerContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Func`2<GridState`1<T>, Task`1<GridData`1<T>>> get_ServerData();
    [CompilerGeneratedAttribute]
public void set_ServerData(Func`2<GridState`1<T>, Task`1<GridData`1<T>>> value);
    [CompilerGeneratedAttribute]
public Func`3<GridStateVirtualize`1<T>, CancellationToken, Task`1<GridData`1<T>>> get_VirtualizeServerData();
    [CompilerGeneratedAttribute]
public void set_VirtualizeServerData(Func`3<GridStateVirtualize`1<T>, CancellationToken, Task`1<GridData`1<T>>> value);
    public int get_RowsPerPage();
    public void set_RowsPerPage(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_RowsPerPageChanged();
    [CompilerGeneratedAttribute]
public void set_RowsPerPageChanged(EventCallback`1<int> value);
    public int get_CurrentPage();
    public void set_CurrentPage(int value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    public HashSet`1<T> get_SelectedItems();
    public void set_SelectedItems(HashSet`1<T> value);
    public T get_SelectedItem();
    public void set_SelectedItem(T value);
    public bool get_Groupable();
    public void set_Groupable(bool value);
    [CompilerGeneratedAttribute]
public bool get_GroupExpanded();
    [CompilerGeneratedAttribute]
public void set_GroupExpanded(bool value);
    [CompilerGeneratedAttribute]
public string get_GroupClass();
    [CompilerGeneratedAttribute]
public void set_GroupClass(string value);
    [CompilerGeneratedAttribute]
public string get_GroupStyle();
    [CompilerGeneratedAttribute]
public void set_GroupStyle(string value);
    [CompilerGeneratedAttribute]
public Func`2<GroupDefinition`1<T>, string> get_GroupClassFunc();
    [CompilerGeneratedAttribute]
public void set_GroupClassFunc(Func`2<GroupDefinition`1<T>, string> value);
    [CompilerGeneratedAttribute]
public Func`2<GroupDefinition`1<T>, string> get_GroupStyleFunc();
    [CompilerGeneratedAttribute]
public void set_GroupStyleFunc(Func`2<GroupDefinition`1<T>, string> value);
    [CompilerGeneratedAttribute]
public bool get_ShowMenuIcon();
    [CompilerGeneratedAttribute]
public void set_ShowMenuIcon(bool value);
    internal IEnumerable`1<T> get_CurrentPageItems();
    [CompilerGeneratedAttribute]
public HashSet`1<T> get_Selection();
    [CompilerGeneratedAttribute]
public void set_Selection(HashSet`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_HasPager();
    [CompilerGeneratedAttribute]
public void set_HasPager(bool value);
    public IEnumerable`1<T> get_ServerItems();
    [CompilerGeneratedAttribute]
internal ItemsProviderDelegate`1<T> get_VirtualItemsProvider();
    [CompilerGeneratedAttribute]
internal void set_VirtualItemsProvider(ItemsProviderDelegate`1<T> value);
    [CompilerGeneratedAttribute]
internal UInt32 get_FilteringRunCount();
    [CompilerGeneratedAttribute]
private void set_FilteringRunCount(UInt32 value);
    public IEnumerable`1<T> get_FilteredItems();
    [CompilerGeneratedAttribute]
public IForm get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(IForm value);
    internal Column`1<T> get_GroupedColumn();
    private bool get_hasFooter();
    private bool get_hasStickyColumns();
    private bool get_hasHierarchyColumn();
    internal bool get_HasServerData();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<OnAfterRenderAsync>d__442")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetParametersAsync>d__443")]
public virtual Task SetParametersAsync(ParameterView parameters);
    protected IEnumerable`1<T> GetItemsOfPage(int page, int pageSize);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<InvokeServerLoadFunc>d__445")]
internal Task InvokeServerLoadFunc();
    internal void AddColumn(Column`1<T> column);
    internal void CancelServerDataToken();
    internal void RemoveColumn(Column`1<T> column);
    internal IFilterDefinition`1<T> CreateFilterDefinitionInstance();
    public void SetDefaultFilterDefinition();
    public void SetDefaultFilterDefinition(Func`1<IFilterDefinition`1<T>> factory);
    public void AddFilter();
    internal Task ApplyFiltersAsync();
    public Task ClearFiltersAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<AddFilterAsync>d__455")]
public Task AddFilterAsync(IFilterDefinition`1<T> definition);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<RemoveFilterAsync>d__456")]
internal Task RemoveFilterAsync(Guid id);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetSelectedItemAsync>d__457")]
internal Task SetSelectedItemAsync(bool value, T item);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetSelectAllAsync>d__458")]
internal Task SetSelectAllAsync(bool value);
    internal IEnumerable`1<T> Sort(IEnumerable`1<T> items);
    internal void ClearEditingItem();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<CommitItemChangesAsync>d__461")]
internal Task CommitItemChangesAsync(T item);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<CommitItemChangesAsync>d__462")]
internal Task CommitItemChangesAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<OnRowClickedAsync>d__463")]
internal Task OnRowClickedAsync(MouseEventArgs args, T item, int rowIndex);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<OnContextMenuClickedAsync>d__464")]
internal Task OnContextMenuClickedAsync(MouseEventArgs args, T item, int rowIndex);
    public int GetFilteredItemsCount();
    public void NavigateTo(Page page);
    public Task SetRowsPerPageAsync(int size);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetRowsPerPageAsync>d__468")]
public Task SetRowsPerPageAsync(int size, bool resetPage);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetSortAsync>d__469")]
public Task SetSortAsync(string field, SortDirection direction, Func`2<T, object> sortFunc, IComparer`1<object> comparer);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<ExtendSortAsync>d__470")]
public Task ExtendSortAsync(string field, SortDirection direction, Func`2<T, object> sortFunc, IComparer`1<object> comparer);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<RemoveSortAsync>d__471")]
public Task RemoveSortAsync(string field);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<ClearCurrentSortings>d__472")]
private Task ClearCurrentSortings();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<InvokeSortUpdates>d__473")]
private Task InvokeSortUpdates(Dictionary`2<string, SortDefinition`1<T>> activeSortDefinitions, HashSet`1<string> removedSortDefinitions);
    private void VirtualItemsProviderInitialize();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetSelectedItemAsync>d__475")]
public Task SetSelectedItemAsync(T item);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<SetEditingItemAsync>d__476")]
public Task SetEditingItemAsync(T item);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<CancelEditingItemAsync>d__477")]
public Task CancelEditingItemAsync();
    public void ToggleFiltersMenu();
    public Task ReloadServerData();
    public void OpenFilters();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<HideAllColumnsAsync>d__481")]
internal Task HideAllColumnsAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<ShowAllColumnsAsync>d__482")]
internal Task ShowAllColumnsAsync();
    public void ShowColumnsPanel();
    public void HideColumnsPanel();
    private Task ColumnOrderUpdated(MudItemDropInfo`1<Column`1<T>> dropItem);
    private void ColumnUp(Column`1<T> column);
    private void ColumnDown(Column`1<T> column);
    internal void DropContainerHasChanged();
    public void GroupItems(bool noStateChange);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<ChangedGrouping>d__490")]
internal Task ChangedGrouping(Column`1<T> column);
    internal void ToggleGroupExpansion(GroupDefinition`1<T> g);
    public void ExpandAllGroups();
    public void CollapseAllGroups();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<ToggleHierarchyVisibilityAsync>d__494")]
internal Task ToggleHierarchyVisibilityAsync(T item);
    [CompilerGeneratedAttribute]
private IEventListener get_EventListener();
    [CompilerGeneratedAttribute]
private void set_EventListener(IEventListener value);
    [CompilerGeneratedAttribute]
internal bool get_IsResizing();
    [CompilerGeneratedAttribute]
internal void set_IsResizing(bool value);
    internal DataGridColumnResizeService`1<T> get_ResizeService();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<StartResizeColumn>d__507")]
internal Task`1<bool> StartResizeColumn(HeaderCell`1<T> headerCell, double clientX);
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<GetActualHeight>d__508")]
internal Task`1<double> GetActualHeight();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    internal RenderFragment ToolbarMenu(MudDataGrid`1<T> dataGrid);
    internal RenderFragment FooterCells(IEnumerable`1<T> currentItems);
    internal RenderFragment Cell(Column`1<T> column, T item);
    internal RenderFragment Filter(IFilterDefinition`1<T> filterDefinition, Column`1<T> column);
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <set_Items>b__279_0(object s, NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <SetSelectedItemAsync>b__457_0();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGrid`1/<<VirtualItemsProviderInitialize>b__474_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<ItemsProviderResult`1<T>> <VirtualItemsProviderInitialize>b__474_0(ItemsProviderRequest request);
    [CompilerGeneratedAttribute]
private GridStateVirtualize`1<T> <VirtualItemsProviderInitialize>b__474_1(int startIndex, int count);
    [CompilerGeneratedAttribute]
private GroupDefinition`1<T> <GroupItems>b__489_0(IGrouping`2<object, T> x);
    [CompilerGeneratedAttribute]
private GroupDefinition`1<T> <GroupItems>b__489_1(IGrouping`2<object, T> x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_2(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_3(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_4(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_6(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_10(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_11(bool __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_12(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_15(RenderTreeBuilder __builder5);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_22();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_23(string __value);
    [CompilerGeneratedAttribute]
private bool <BuildRenderTree>b__511_17(Column`1<T> item);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_18(RenderTreeBuilder __builder5);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__511_19(Column`1<T> context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_20(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_21(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_34(RenderTreeBuilder __builder6);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_35(RenderTreeBuilder __builder6);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_36(RenderTreeBuilder __builder6);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_37(RenderTreeBuilder __builder6);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_13(bool __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_14(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_38(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_39(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_40(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_41(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_43(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_45(MudVirtualize`1<T> __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_50(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_52(MudVirtualize`1<T> __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_8(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_9(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_58(bool __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_59(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_61(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_62(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_60(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_63(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__511_64(RenderTreeBuilder __builder5);
}
public class MudBlazor.MudDataGridPager`1 : MudComponentBase {
    [CompilerGeneratedAttribute]
private MudDataGrid`1<T> <DataGrid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PageSizeSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <PageSizeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InfoFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowsPerPageString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllItemsText>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [CascadingParameterAttribute]
public MudDataGrid`1<T> DataGrid { get; public set; }
    [ParameterAttribute]
public bool PageSizeSelector { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public Int32[] PageSizeOptions { get; public set; }
    [ParameterAttribute]
public string InfoFormat { get; public set; }
    [ParameterAttribute]
public string RowsPerPageString { get; public set; }
    [ParameterAttribute]
public bool ShowNavigation { get; public set; }
    [ParameterAttribute]
public bool ShowPageNumber { get; public set; }
    [ParameterAttribute]
public string AllItemsText { get; public set; }
    private string Info { get; }
    private bool BackButtonsDisabled { get; }
    private bool ForwardButtonsDisabled { get; }
    protected string Classname { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
public MudDataGrid`1<T> get_DataGrid();
    [CompilerGeneratedAttribute]
public void set_DataGrid(MudDataGrid`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_PageSizeSelector();
    [CompilerGeneratedAttribute]
public void set_PageSizeSelector(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public Int32[] get_PageSizeOptions();
    [CompilerGeneratedAttribute]
public void set_PageSizeOptions(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_InfoFormat();
    [CompilerGeneratedAttribute]
public void set_InfoFormat(string value);
    [CompilerGeneratedAttribute]
public string get_RowsPerPageString();
    [CompilerGeneratedAttribute]
public void set_RowsPerPageString(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowNavigation();
    [CompilerGeneratedAttribute]
public void set_ShowNavigation(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPageNumber();
    [CompilerGeneratedAttribute]
public void set_ShowPageNumber(bool value);
    [CompilerGeneratedAttribute]
public string get_AllItemsText();
    [CompilerGeneratedAttribute]
public void set_AllItemsText(string value);
    private string get_Info();
    private bool get_BackButtonsDisabled();
    private bool get_ForwardButtonsDisabled();
    protected string get_Classname();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGridPager`1/<SetRowsPerPageAsync>d__44")]
private Task SetRowsPerPageAsync(int size);
    protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.MudDataGridPager`1/<OnInitializedAsync>d__46")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_2(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_8(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_3(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_4();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_5();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_6();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__48_7();
}
public class MudBlazor.MudDatePicker : MudBaseDatePicker {
    private Nullable`1<DateTime> _selectedDate;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<DateTime>> <DateChanged>k__BackingField;
    private DateTime _lastSetTime;
    private static int DebounceTimeoutMs;
    [ParameterAttribute]
public EventCallback`1<Nullable`1<DateTime>> DateChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public Nullable`1<DateTime> Date { get; public set; }
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<DateTime>> get_DateChanged();
    [CompilerGeneratedAttribute]
public void set_DateChanged(EventCallback`1<Nullable`1<DateTime>> value);
    public Nullable`1<DateTime> get_Date();
    public void set_Date(Nullable`1<DateTime> value);
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<SetDateAsync>d__10")]
protected Task SetDateAsync(Nullable`1<DateTime> date, bool updateValue);
    protected virtual Task DateFormatChangedAsync(string newFormat);
    protected virtual Task StringValueChangedAsync(string value);
    protected virtual string GetDayClasses(int month, DateTime day);
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<OnDayClickedAsync>d__14")]
protected virtual Task OnDayClickedAsync(DateTime dateTime);
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<OnMonthSelectedAsync>d__15")]
protected virtual Task OnMonthSelectedAsync(DateTime month);
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<OnYearClickedAsync>d__16")]
protected virtual Task OnYearClickedAsync(int year);
    protected virtual Task OnOpenedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<SubmitAsync>d__18")]
protected internal virtual Task SubmitAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<ClearAsync>d__19")]
public virtual Task ClearAsync(bool close);
    protected virtual string GetTitleDateString();
    protected virtual DateTime GetCalendarStartOfMonth();
    protected virtual int GetCalendarYear(DateTime yearDate);
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<OnHandleKeyDownAsync>d__23")]
protected internal virtual Task OnHandleKeyDownAsync(KeyboardEventArgs args);
    private Task ReturnDateBackUpAsync();
    public void GoToDate();
    [AsyncStateMachineAttribute("MudBlazor.MudDatePicker/<GoToDate>d__26")]
public Task GoToDate(DateTime date, bool submitDate);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <OnDayClickedAsync>b__14_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(KeyboardEventArgs args);
}
public class MudBlazor.MudDateRangePicker : MudBaseDatePicker {
    private Nullable`1<DateTime> _firstDate;
    private Nullable`1<DateTime> _secondDate;
    private DateRange _dateRange;
    private Range`1<string> _rangeText;
    [CompilerGeneratedAttribute]
private string <PlaceholderStart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlaceholderEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SeparatorIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<DateRange> <DateRangeChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDisabledDatesInRange>k__BackingField;
    private MudRangeInput`1<string> _rangeInput;
    protected bool IsRange { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string PlaceholderStart { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string PlaceholderEnd { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string SeparatorIcon { get; public set; }
    [ParameterAttribute]
public EventCallback`1<DateRange> DateRangeChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public DateRange DateRange { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public bool AllowDisabledDatesInRange { get; public set; }
    private Range`1<string> RangeText { get; private set; }
    protected RenderFragment InputContent { get; }
    protected virtual bool get_IsRange();
    [CompilerGeneratedAttribute]
public string get_PlaceholderStart();
    [CompilerGeneratedAttribute]
public void set_PlaceholderStart(string value);
    [CompilerGeneratedAttribute]
public string get_PlaceholderEnd();
    [CompilerGeneratedAttribute]
public void set_PlaceholderEnd(string value);
    [CompilerGeneratedAttribute]
public string get_SeparatorIcon();
    [CompilerGeneratedAttribute]
public void set_SeparatorIcon(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<DateRange> get_DateRangeChanged();
    [CompilerGeneratedAttribute]
public void set_DateRangeChanged(EventCallback`1<DateRange> value);
    public DateRange get_DateRange();
    public void set_DateRange(DateRange value);
    [CompilerGeneratedAttribute]
public bool get_AllowDisabledDatesInRange();
    [CompilerGeneratedAttribute]
public void set_AllowDisabledDatesInRange(bool value);
    [AsyncStateMachineAttribute("MudBlazor.MudDateRangePicker/<SetDateRangeAsync>d__30")]
protected Task SetDateRangeAsync(DateRange range, bool updateValue);
    private Range`1<string> get_RangeText();
    private void set_RangeText(Range`1<string> value);
    public ValueTask FocusStartAsync();
    public ValueTask SelectStartAsync();
    public ValueTask SelectRangeStartAsync(int pos1, int pos2);
    public ValueTask FocusEndAsync();
    public ValueTask SelectEndAsync();
    public ValueTask SelectRangeEndAsync(int pos1, int pos2);
    protected virtual Task DateFormatChangedAsync(string newFormat);
    protected virtual Task StringValueChangedAsync(string value);
    protected virtual bool HasValue(Nullable`1<DateTime> value);
    private DateRange ParseDateRangeValue(string value);
    private DateRange ParseDateRangeValue(string start, string end);
    protected virtual Task OnPickerClosedAsync();
    private bool CheckDateRange(DateTime day, Func`3<DateTime, DateTime, bool> compareStart, Func`3<DateTime, DateTime, bool> compareEnd);
    protected virtual string GetDayClasses(int month, DateTime day);
    [AsyncStateMachineAttribute("MudBlazor.MudDateRangePicker/<OnDayClickedAsync>d__49")]
protected virtual Task OnDayClickedAsync(DateTime dateTime);
    protected virtual Task OnOpenedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDateRangePicker/<SubmitAsync>d__51")]
protected internal virtual Task SubmitAsync();
    public virtual Task ClearAsync(bool close);
    protected virtual string GetTitleDateString();
    protected virtual DateTime GetCalendarStartOfMonth();
    protected virtual int GetCalendarYear(DateTime yearDate);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected virtual RenderFragment get_InputContent();
    [CompilerGeneratedAttribute]
internal static bool <GetDayClasses>g__isLessThan|48_0(DateTime date1, DateTime date2);
    [CompilerGeneratedAttribute]
internal static bool <GetDayClasses>g__isGreaterThan|48_1(DateTime date1, DateTime date2);
    [CompilerGeneratedAttribute]
internal static bool <GetDayClasses>g__isEqualTo|48_2(DateTime date1, DateTime date2);
    [CompilerGeneratedAttribute]
internal static bool <GetDayClasses>g__isNotEqualTo|48_3(DateTime date1, DateTime date2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_InputContent>b__58_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDateRangePicker/<<get_InputContent>b__58_1>d")]
[CompilerGeneratedAttribute]
private Task <get_InputContent>b__58_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_InputContent>b__58_2(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <get_InputContent>b__58_3(Range`1<string> __value);
    [CompilerGeneratedAttribute]
private void <get_InputContent>b__58_4(MudRangeInput`1<string> __value);
}
public abstract class MudBlazor.MudDebouncedInput`1 : MudBaseInput`1<T> {
    private Timer _timer;
    private ParameterState`1<double> _debounceIntervalState;
    [CompilerGeneratedAttribute]
private double <DebounceInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <OnDebounceIntervalElapsed>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double DebounceInterval { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> OnDebounceIntervalElapsed { get; public set; }
    [CompilerGeneratedAttribute]
public double get_DebounceInterval();
    [CompilerGeneratedAttribute]
public void set_DebounceInterval(double value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_OnDebounceIntervalElapsed();
    [CompilerGeneratedAttribute]
public void set_OnDebounceIntervalElapsed(EventCallback`1<string> value);
    protected Task OnChange();
    protected virtual Task UpdateTextPropertyAsync(bool updateValue);
    protected virtual Task UpdateValuePropertyAsync(bool updateText);
    protected virtual void OnParametersSet();
    private void OnDebounceIntervalChanged(ParameterChangedEventArgs`1<double> args);
    private void SetTimer();
    private void OnTimerTick(object sender, ElapsedEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudDebouncedInput`1/<OnTimerTickGuiThread>d__18")]
private Task OnTimerTickGuiThread();
    private void ClearTimer(bool suppressTick);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private double <.ctor>b__2_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool updateText);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudDialog : MudComponentBase {
    private IDialogReference _reference;
    [NullableAttribute("1")]
private ParameterState`1<bool> _visibleState;
    [CompilerGeneratedAttribute]
private MudDialogInstance <DialogInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNested>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDialogService <DialogService>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TitleContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <DialogContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <DialogActions>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogOptions <Options>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnBackdropClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionsClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <VisibleChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultFocus <DefaultFocus>k__BackingField;
    [NullableAttribute("1")]
protected string ContentClassname { get; }
    [NullableAttribute("1")]
protected string ActionsClassname { get; }
    [CascadingParameterAttribute]
private MudDialogInstance DialogInstance { get; private set; }
    [CascadingParameterAttribute]
private bool IsNested { get; private set; }
    [NullableAttribute("1")]
[InjectAttribute]
protected IDialogService DialogService { get; protected set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment TitleContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment DialogContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment DialogActions { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Misc")]
public DialogOptions Options { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<MouseEventArgs> OnBackdropClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string TitleClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ContentClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ActionsClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ContentStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> VisibleChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public DefaultFocus DefaultFocus { get; public set; }
    private bool IsInline { get; }
    [NullableContextAttribute("1")]
protected string get_ContentClassname();
    [NullableContextAttribute("1")]
protected string get_ActionsClassname();
    [CompilerGeneratedAttribute]
private MudDialogInstance get_DialogInstance();
    [CompilerGeneratedAttribute]
private void set_DialogInstance(MudDialogInstance value);
    [CompilerGeneratedAttribute]
private bool get_IsNested();
    [CompilerGeneratedAttribute]
private void set_IsNested(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected IDialogService get_DialogService();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected void set_DialogService(IDialogService value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TitleContent();
    [CompilerGeneratedAttribute]
public void set_TitleContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_DialogContent();
    [CompilerGeneratedAttribute]
public void set_DialogContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_DialogActions();
    [CompilerGeneratedAttribute]
public void set_DialogActions(RenderFragment value);
    [CompilerGeneratedAttribute]
public DialogOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(DialogOptions value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnBackdropClick();
    [CompilerGeneratedAttribute]
public void set_OnBackdropClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public string get_TitleClass();
    [CompilerGeneratedAttribute]
public void set_TitleClass(string value);
    [CompilerGeneratedAttribute]
public string get_ContentClass();
    [CompilerGeneratedAttribute]
public void set_ContentClass(string value);
    [CompilerGeneratedAttribute]
public string get_ActionsClass();
    [CompilerGeneratedAttribute]
public void set_ActionsClass(string value);
    [CompilerGeneratedAttribute]
public string get_ContentStyle();
    [CompilerGeneratedAttribute]
public void set_ContentStyle(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_VisibleChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_VisibleChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public DefaultFocus get_DefaultFocus();
    [CompilerGeneratedAttribute]
public void set_DefaultFocus(DefaultFocus value);
    private bool get_IsInline();
    [AsyncStateMachineAttribute("MudBlazor.MudDialog/<ShowAsync>d__73")]
public Task`1<IDialogReference> ShowAsync(string title, DialogOptions options);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDialog/<CloseAsync>d__74")]
public Task CloseAsync(DialogResult result);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDialog/<OnAfterRenderAsync>d__75")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void OnInitialized();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__2_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__2_1();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task <ShowAsync>b__73_0(Task`1<DialogResult> t);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <ShowAsync>b__73_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_1(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDialogInstance : MudComponentBase {
    [NullableAttribute("2")]
private DialogOptions _options;
    private string _elementId;
    [NullableAttribute("2")]
private IKeyInterceptor _keyInterceptor;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <KeyInterceptorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private MudDialogProvider <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private DialogOptions <GlobalDialogOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <TitleContent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DialogMaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BackdropClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseOnEscapeKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullScreen>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundClassname>k__BackingField;
    [NullableAttribute("2")]
private MudDialog _dialog;
    private bool _disposedValue;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [InjectAttribute]
private IKeyInterceptorFactory KeyInterceptorFactory { get; private set; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [CascadingParameterAttribute]
private MudDialogProvider Parent { get; private set; }
    [CascadingParameterAttribute]
private DialogOptions GlobalDialogOptions { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Misc")]
public DialogOptions Options { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Title { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment TitleContent { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment Content { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Guid Id { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIcon { get; public set; }
    private string Position { get; private set; }
    private string DialogMaxWidth { get; private set; }
    private bool BackdropClick { get; private set; }
    private bool CloseOnEscapeKey { get; private set; }
    private bool NoHeader { get; private set; }
    private bool CloseButton { get; private set; }
    private bool FullScreen { get; private set; }
    private bool FullWidth { get; private set; }
    protected string TitleClassname { get; }
    protected string Classname { get; }
    protected string BackgroundClassname { get; protected set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get_KeyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set_KeyInterceptorFactory(IKeyInterceptorFactory value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
private MudDialogProvider get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(MudDialogProvider value);
    [CompilerGeneratedAttribute]
private DialogOptions get_GlobalDialogOptions();
    [CompilerGeneratedAttribute]
private void set_GlobalDialogOptions(DialogOptions value);
    public DialogOptions get_Options();
    public void set_Options(DialogOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Title();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Title(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_TitleContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TitleContent(RenderFragment value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_Content();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Content(RenderFragment value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
private string get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(string value);
    [CompilerGeneratedAttribute]
private string get_DialogMaxWidth();
    [CompilerGeneratedAttribute]
private void set_DialogMaxWidth(string value);
    [CompilerGeneratedAttribute]
private bool get_BackdropClick();
    [CompilerGeneratedAttribute]
private void set_BackdropClick(bool value);
    [CompilerGeneratedAttribute]
private bool get_CloseOnEscapeKey();
    [CompilerGeneratedAttribute]
private void set_CloseOnEscapeKey(bool value);
    [CompilerGeneratedAttribute]
private bool get_NoHeader();
    [CompilerGeneratedAttribute]
private void set_NoHeader(bool value);
    [CompilerGeneratedAttribute]
private bool get_CloseButton();
    [CompilerGeneratedAttribute]
private void set_CloseButton(bool value);
    [CompilerGeneratedAttribute]
private bool get_FullScreen();
    [CompilerGeneratedAttribute]
private void set_FullScreen(bool value);
    [CompilerGeneratedAttribute]
private bool get_FullWidth();
    [CompilerGeneratedAttribute]
private void set_FullWidth(bool value);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudDialogInstance/<OnAfterRenderAsync>d__75")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    internal void HandleKeyDown(KeyboardEventArgs args);
    public void SetOptions(DialogOptions options);
    public void SetTitle(string title);
    public void Close();
    public void Close(DialogResult dialogResult);
    public void Close(T returnValue);
    public void Cancel();
    private void ConfigureInstance();
    private string SetPosition();
    private string SetMaxWidth();
    private bool SetFullWidth();
    private bool SetFulScreen();
    protected string get_TitleClassname();
    protected string get_Classname();
    [CompilerGeneratedAttribute]
protected string get_BackgroundClassname();
    [CompilerGeneratedAttribute]
protected void set_BackgroundClassname(string value);
    private bool SetHideHeader();
    private bool SetCloseButton();
    private bool SetBackdropClick();
    private bool SetCloseOnEscapeKey();
    [AsyncStateMachineAttribute("MudBlazor.MudDialogInstance/<HandleBackgroundClickAsync>d__100")]
private Task HandleBackgroundClickAsync(MouseEventArgs args);
    public void Register(MudDialog dialog);
    public void StateHasChanged();
    public void CancelAll();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_1(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDialogProvider : ComponentBase {
    [CompilerGeneratedAttribute]
private IDialogService <DialogService>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <NoHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CloseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BackdropClick>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CloseOnEscapeKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DialogPosition> <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MaxWidth> <MaxWidth>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BackgroundClass>k__BackingField;
    private List`1<IDialogReference> _dialogs;
    private DialogOptions _globalDialogOptions;
    [InjectAttribute]
private IDialogService DialogService { get; private set; }
    [InjectAttribute]
private NavigationManager NavigationManager { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<bool> NoHeader { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<bool> CloseButton { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<bool> BackdropClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<bool> CloseOnEscapeKey { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<bool> FullWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<DialogPosition> Position { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<MaxWidth> MaxWidth { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string BackgroundClass { get; public set; }
    [CompilerGeneratedAttribute]
private IDialogService get_DialogService();
    [CompilerGeneratedAttribute]
private void set_DialogService(IDialogService value);
    [CompilerGeneratedAttribute]
private NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
private void set_NavigationManager(NavigationManager value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_NoHeader();
    [CompilerGeneratedAttribute]
public void set_NoHeader(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CloseButton();
    [CompilerGeneratedAttribute]
public void set_CloseButton(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BackdropClick();
    [CompilerGeneratedAttribute]
public void set_BackdropClick(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CloseOnEscapeKey();
    [CompilerGeneratedAttribute]
public void set_CloseOnEscapeKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DialogPosition> get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Nullable`1<DialogPosition> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MaxWidth> get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(Nullable`1<MaxWidth> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_BackgroundClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BackgroundClass(string value);
    protected virtual void OnInitialized();
    protected virtual Task OnAfterRenderAsync(bool firstRender);
    internal void DismissInstance(Guid id, DialogResult result);
    private Task AddInstanceAsync(IDialogReference dialog);
    public void DismissAll();
    private void DismissInstance(IDialogReference dialog, DialogResult result);
    [NullableContextAttribute("2")]
private IDialogReference GetDialogReference(Guid id);
    private void LocationChanged(object sender, LocationChangedEventArgs args);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <DismissAll>b__46_0(IDialogReference r);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__52_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__52_1(RenderTreeBuilder __builder3);
}
public class MudBlazor.MudDivider : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Absolute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlexItem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Light>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]
private DividerType <DividerType>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Absolute { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool FlexItem { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Light { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Vertical { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public DividerType DividerType { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Absolute();
    [CompilerGeneratedAttribute]
public void set_Absolute(bool value);
    [CompilerGeneratedAttribute]
public bool get_FlexItem();
    [CompilerGeneratedAttribute]
public void set_FlexItem(bool value);
    [CompilerGeneratedAttribute]
public bool get_Light();
    [CompilerGeneratedAttribute]
public void set_Light(bool value);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(bool value);
    [CompilerGeneratedAttribute]
public DividerType get_DividerType();
    [CompilerGeneratedAttribute]
public void set_DividerType(DividerType value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDragAndDropIndexChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ZoneIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldZoneIdentifier>k__BackingField;
    public string ZoneIdentifier { get; }
    public int Index { get; }
    public string OldZoneIdentifier { get; }
    public MudDragAndDropIndexChangedEventArgs(string zoneIdentifier, string oldZoneIdentifier, int index);
    [CompilerGeneratedAttribute]
public string get_ZoneIdentifier();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public string get_OldZoneIdentifier();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDragAndDropItemTransaction`1 : object {
    private Func`1<Task> _commitCallback;
    private Func`1<Task> _cancelCallback;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceZoneIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentZone>k__BackingField;
    [NullableAttribute("2")]
public T Item { get; public set; }
    public int Index { get; private set; }
    public int SourceIndex { get; }
    public string SourceZoneIdentifier { get; public set; }
    public string CurrentZone { get; private set; }
    public MudDragAndDropItemTransaction`1(T item, string identifier, int index, Func`1<Task> commitCallback, Func`1<Task> cancelCallback);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Item();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Item(T value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_SourceIndex();
    [CompilerGeneratedAttribute]
public string get_SourceZoneIdentifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SourceZoneIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentZone();
    [CompilerGeneratedAttribute]
private void set_CurrentZone(string value);
    public Task Cancel();
    public Task Commit();
    internal bool UpdateIndex(int index);
    internal bool UpdateZone(string identifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1 : EventArgs {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginatedDropzoneIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationDropzoneIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DestinationIndex>k__BackingField;
    [NullableAttribute("2")]
public T Item { get; }
    public bool Success { get; }
    public string OriginatedDropzoneIdentifier { get; }
    public string DestinationDropzoneIdentifier { get; }
    public int OriginIndex { get; }
    public int DestinationIndex { get; }
    public MudDragAndDropTransactionFinishedEventArgs`1(string destinationDropZoneIdentifier, bool success, MudDragAndDropItemTransaction`1<T> transaction);
    public MudDragAndDropTransactionFinishedEventArgs`1(MudDragAndDropItemTransaction`1<T> transaction);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public string get_OriginatedDropzoneIdentifier();
    [CompilerGeneratedAttribute]
public string get_DestinationDropzoneIdentifier();
    [CompilerGeneratedAttribute]
public int get_OriginIndex();
    [CompilerGeneratedAttribute]
public int get_DestinationIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDrawer : MudComponentBase {
    private double _height;
    private int _disposeCount;
    private ParameterState`1<bool> _rtlState;
    private ParameterState`1<bool> _openState;
    private ParameterState`1<Breakpoint> _breakpointState;
    private ParameterState`1<DrawerClipMode> _clipModeState;
    private ElementReference _contentRef;
    private bool _closeOnPointerLeave;
    private bool _isRendered;
    private bool _initial;
    private bool _keepInitialState;
    private Breakpoint _lastUpdatedBreakpoint;
    [CompilerGeneratedAttribute]
private IBrowserViewportService <BrowserViewportService>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MudDrawerContainer <DrawerContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fixed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private Anchor <Anchor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private DrawerVariant <Variant>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overlay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverlayAutoClose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OpenMiniOnHover>k__BackingField;
    [CompilerGeneratedAttribute]
private Breakpoint <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <OpenChanged>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MiniWidth>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private DrawerClipMode <ClipMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MudBlazor.IBrowserViewportObserver.Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ResizeOptions <MudBlazor.IBrowserViewportObserver.ResizeOptions>k__BackingField;
    private bool OverlayVisible { get; }
    protected string Classname { get; }
    protected string OverlayClass { get; }
    protected string Stylename { get; }
    [InjectAttribute]
protected IBrowserViewportService BrowserViewportService { get; protected set; }
    [NullableAttribute("2")]
[CascadingParameterAttribute]
private MudDrawerContainer DrawerContainer { get; private set; }
    [CascadingParameterAttribute]
private bool RightToLeft { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Fixed { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Anchor Anchor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public DrawerVariant Variant { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Overlay { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool OverlayAutoClose { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool OpenMiniOnHover { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Breakpoint Breakpoint { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Open { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> OpenChanged { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Width { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MiniWidth { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Height { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public DrawerClipMode ClipMode { get; public set; }
    internal bool IsFixed { get; }
    private Guid MudBlazor.IBrowserViewportObserver.Id { get; }
    private ResizeOptions MudBlazor.IBrowserViewportObserver.ResizeOptions { get; }
    private bool get_OverlayVisible();
    protected string get_Classname();
    protected string get_OverlayClass();
    protected string get_Stylename();
    [CompilerGeneratedAttribute]
protected IBrowserViewportService get_BrowserViewportService();
    [CompilerGeneratedAttribute]
protected void set_BrowserViewportService(IBrowserViewportService value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private MudDrawerContainer get_DrawerContainer();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_DrawerContainer(MudDrawerContainer value);
    [CompilerGeneratedAttribute]
private bool get_RightToLeft();
    [CompilerGeneratedAttribute]
private void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_Fixed();
    [CompilerGeneratedAttribute]
public void set_Fixed(bool value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public Anchor get_Anchor();
    [CompilerGeneratedAttribute]
public void set_Anchor(Anchor value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public DrawerVariant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(DrawerVariant value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Overlay();
    [CompilerGeneratedAttribute]
public void set_Overlay(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverlayAutoClose();
    [CompilerGeneratedAttribute]
public void set_OverlayAutoClose(bool value);
    [CompilerGeneratedAttribute]
public bool get_OpenMiniOnHover();
    [CompilerGeneratedAttribute]
public void set_OpenMiniOnHover(bool value);
    [CompilerGeneratedAttribute]
public Breakpoint get_Breakpoint();
    [CompilerGeneratedAttribute]
public void set_Breakpoint(Breakpoint value);
    [CompilerGeneratedAttribute]
public bool get_Open();
    [CompilerGeneratedAttribute]
public void set_Open(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_OpenChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_OpenChanged(EventCallback`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Width();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Width(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MiniWidth();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MiniWidth(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Height();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public DrawerClipMode get_ClipMode();
    [CompilerGeneratedAttribute]
public void set_ClipMode(DrawerClipMode value);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<OnAfterRenderAsync>d__98")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public sealed virtual void Dispose();
    public virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<OnOpenParameterChangedAsync>d__101")]
private Task OnOpenParameterChangedAsync(ParameterChangedEventArgs`1<bool> arg);
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<OnBreakpointParameterChangedAsync>d__102")]
private Task OnBreakpointParameterChangedAsync(ParameterChangedEventArgs`1<Breakpoint> arg);
    private void OnClipModeParameterChange();
    private void OnRightToLeftParameterChanged();
    private void DrawerContainerUpdate();
    private Task CloseDrawerAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<UpdateHeightAsync>d__107")]
private Task UpdateHeightAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<UpdateBreakpointStateAsync>d__108")]
private Task UpdateBreakpointStateAsync(Breakpoint breakpoint);
    private bool IsBelowCurrentBreakpoint();
    private bool IsBelowBreakpoint(Breakpoint breakpoint);
    private bool IsResponsiveOrMini();
    private bool ShouldCloseDrawer(Breakpoint breakpoint);
    private bool ShouldOpenDrawer(Breakpoint breakpoint);
    internal string GetPosition();
    internal bool get_IsFixed();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<OnPointerEnterAsync>d__117")]
private Task OnPointerEnterAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<OnPointerLeaveAsync>d__118")]
private Task OnPointerLeaveAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<MudBlazor-Interfaces-INavigationEventReceiver-OnNavigation>d__119")]
private sealed virtual override Task MudBlazor.Interfaces.INavigationEventReceiver.OnNavigation();
    [CompilerGeneratedAttribute]
private sealed virtual override Guid MudBlazor.IBrowserViewportObserver.get_Id();
    [CompilerGeneratedAttribute]
private sealed virtual override ResizeOptions MudBlazor.IBrowserViewportObserver.get_ResizeOptions();
    [AsyncStateMachineAttribute("MudBlazor.MudDrawer/<MudBlazor-IBrowserViewportObserver-NotifyBrowserViewportChangeAsync>d__126")]
private sealed virtual override Task MudBlazor.IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs);
    private static Breakpoint NormalizeBreakpoint(Breakpoint breakpoint);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private DrawerClipMode <.ctor>b__12_0();
    [CompilerGeneratedAttribute]
private Breakpoint <.ctor>b__12_1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__12_2();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__12_3();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__12_4();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__128_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__128_1(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudDrawerContainer : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Fixed>k__BackingField;
    [NullableAttribute("1")]
private List`1<MudDrawer> _drawers;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    protected bool Fixed { get; protected set; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string Stylename { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
protected bool get_Fixed();
    [CompilerGeneratedAttribute]
protected void set_Fixed(bool value);
    [NullableContextAttribute("1")]
protected virtual string get_Classname();
    [NullableContextAttribute("1")]
protected string get_Stylename();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
internal void Add(MudDrawer drawer);
    [NullableContextAttribute("1")]
internal void Remove(MudDrawer drawer);
    [NullableContextAttribute("1")]
private string GetDrawerClass(MudDrawer drawer);
    private string GetDrawerWidth(MudDrawer drawer);
    private string GetMiniDrawerWidth(MudDrawer drawer);
    private MudDrawer FindLeftDrawer();
    private MudDrawer FindRightDrawer();
    private MudDrawer FindLeftMiniDrawer();
    private MudDrawer FindRightMiniDrawer();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__26_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudDrawerHeader : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkToIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool LinkToIndex { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_LinkToIndex();
    [CompilerGeneratedAttribute]
public void set_LinkToIndex(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDropContainer`1 : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MudDragAndDropItemTransaction`1<T> _transaction;
    private Dictionary`2<string, MudDropZone`1<T>> _mudDropZones;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <ItemRenderer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<T, string, bool> <ItemsSelector>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MudItemDropInfo`1<T>> <ItemDropped>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MudDragAndDropItemTransaction`1<T>> <ItemPicked>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<T, string, bool> <CanDrop>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CanDropClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <NoDropClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyDropClassesOnDragStarted>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <ItemDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisabledClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DraggingClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ItemDraggingClass>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<T, string, string> <ItemsClassSelector>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MudDragAndDropItemTransaction`1<T>> TransactionStarted;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MudDragAndDropIndexChangedEventArgs> TransactionIndexChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MudDragAndDropTransactionFinishedEventArgs`1<T>> TransactionEnded;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler RefreshRequested;
    protected string Classname { get; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Items")]
public IEnumerable`1<T> Items { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public RenderFragment`1<T> ItemRenderer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public Func`3<T, string, bool> ItemsSelector { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public EventCallback`1<MudItemDropInfo`1<T>> ItemDropped { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public EventCallback`1<MudDragAndDropItemTransaction`1<T>> ItemPicked { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("DropRules")]
public Func`3<T, string, bool> CanDrop { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DropRules")]
public string CanDropClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DropRules")]
public string NoDropClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("DropRules")]
public bool ApplyDropClassesOnDragStarted { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Disable")]
public Func`2<T, bool> ItemDisabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Disable")]
public string DisabledClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DraggingClass")]
public string DraggingClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DraggingClass")]
public string ItemDraggingClass { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public Func`3<T, string, string> ItemsClassSelector { get; public set; }
    protected string get_Classname();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ItemRenderer();
    [CompilerGeneratedAttribute]
public void set_ItemRenderer(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public Func`3<T, string, bool> get_ItemsSelector();
    [CompilerGeneratedAttribute]
public void set_ItemsSelector(Func`3<T, string, bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudItemDropInfo`1<T>> get_ItemDropped();
    [CompilerGeneratedAttribute]
public void set_ItemDropped(EventCallback`1<MudItemDropInfo`1<T>> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudDragAndDropItemTransaction`1<T>> get_ItemPicked();
    [CompilerGeneratedAttribute]
public void set_ItemPicked(EventCallback`1<MudDragAndDropItemTransaction`1<T>> value);
    [CompilerGeneratedAttribute]
public Func`3<T, string, bool> get_CanDrop();
    [CompilerGeneratedAttribute]
public void set_CanDrop(Func`3<T, string, bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CanDropClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CanDropClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_NoDropClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NoDropClass(string value);
    [CompilerGeneratedAttribute]
public bool get_ApplyDropClassesOnDragStarted();
    [CompilerGeneratedAttribute]
public void set_ApplyDropClassesOnDragStarted(bool value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_ItemDisabled();
    [CompilerGeneratedAttribute]
public void set_ItemDisabled(Func`2<T, bool> value);
    [CompilerGeneratedAttribute]
public string get_DisabledClass();
    [CompilerGeneratedAttribute]
public void set_DisabledClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DraggingClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DraggingClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ItemDraggingClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ItemDraggingClass(string value);
    [CompilerGeneratedAttribute]
public Func`3<T, string, string> get_ItemsClassSelector();
    [CompilerGeneratedAttribute]
public void set_ItemsClassSelector(Func`3<T, string, string> value);
    [CompilerGeneratedAttribute]
public void add_TransactionStarted(EventHandler`1<MudDragAndDropItemTransaction`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_TransactionStarted(EventHandler`1<MudDragAndDropItemTransaction`1<T>> value);
    [CompilerGeneratedAttribute]
public void add_TransactionIndexChanged(EventHandler`1<MudDragAndDropIndexChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TransactionIndexChanged(EventHandler`1<MudDragAndDropIndexChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TransactionEnded(EventHandler`1<MudDragAndDropTransactionFinishedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public void remove_TransactionEnded(EventHandler`1<MudDragAndDropTransactionFinishedEventArgs`1<T>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_RefreshRequested(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_RefreshRequested(EventHandler value);
    public void StartTransaction(T item, string identifier, int index, Func`1<Task> commitCallback, Func`1<Task> cancelCallback);
    [NullableContextAttribute("2")]
public T GetTransactionItem();
    public bool TransactionInProgress();
    [ObsoleteAttribute("Use the GetTransactionOriginZoneIdentifier method instead.  This will be removed in a future release.")]
public string GetTransactionOrignZoneIdentiifer();
    [ObsoleteAttribute("Use the GetTransactionOriginZoneIdentifier method instead.  This will be removed in a future release.")]
public string GetTransactionOrignZoneIdentifier();
    public string GetTransactionOriginZoneIdentifier();
    [ObsoleteAttribute("Use the GetTransactionCurrentZoneIdentifier method instead.  This will be removed in a future release.")]
public string GetTransactionCurrentZoneIdentiifer();
    public string GetTransactionCurrentZoneIdentifier();
    public bool IsTransactionOriginatedFromInside(string identifier);
    public int GetTransactionIndex();
    public bool IsItemMovedDownwards();
    public bool HasTransactionIndexChanged();
    [ObsoleteAttribute("Use the IsOrigin method instead.  This will be removed in a future release.")]
public bool IsOrign(int index, string identifier);
    public bool IsOrigin(int index, string identifier);
    [AsyncStateMachineAttribute("MudBlazor.MudDropContainer`1/<CommitTransaction>d__90")]
public Task CommitTransaction(string dropZoneIdentifier, bool reorderIsAllowed);
    [AsyncStateMachineAttribute("MudBlazor.MudDropContainer`1/<CancelTransaction>d__91")]
public Task CancelTransaction();
    public void UpdateTransactionIndex(int index);
    internal void UpdateTransactionZone(string identifier);
    internal bool RegisterDropZone(MudDropZone`1<T> dropZone);
    internal void RemoveDropZone(string identifier);
    internal MudDropZone`1<T> GetDropZone(string identifier);
    public void Refresh();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__98_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudDropZone`1 : MudComponentBase {
    private bool _containerIsInitialized;
    private bool _canDrop;
    private bool _dragInProgress;
    private bool _disposedValue;
    private string _id;
    private Dictionary`2<T, int> _indices;
    [CompilerGeneratedAttribute]
private IJSRuntime <JsRuntime>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudDropContainer`1<T> <Container>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <ItemRenderer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <ItemsSelector>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <CanDrop>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CanDropClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <NoDropClass>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ApplyDropClassesOnDragStarted>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <ItemDisabled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DisabledClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DraggingClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ItemDraggingClass>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, string> <ItemsClassSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowReorder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnlyZone>k__BackingField;
    private int _dragCounter;
    [InjectAttribute]
private IJSRuntime JsRuntime { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
protected MudDropContainer`1<T> Container { get; protected set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Identifier { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public RenderFragment`1<T> ItemRenderer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public Func`2<T, bool> ItemsSelector { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("DropRules")]
public Func`2<T, bool> CanDrop { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DropRules")]
public string CanDropClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DropRules")]
public string NoDropClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("DropRules")]
public Nullable`1<bool> ApplyDropClassesOnDragStarted { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Disable")]
public Func`2<T, bool> ItemDisabled { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Disable")]
public string DisabledClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DraggingClass")]
public string DraggingClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("DraggingClass")]
public string ItemDraggingClass { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Items")]
public Func`2<T, string> ItemsClassSelector { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AllowReorder { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool OnlyZone { get; public set; }
    protected string Classname { get; }
    protected string PlaceholderClassname { get; }
    [CompilerGeneratedAttribute]
private IJSRuntime get_JsRuntime();
    [CompilerGeneratedAttribute]
private void set_JsRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
protected MudDropContainer`1<T> get_Container();
    [CompilerGeneratedAttribute]
protected void set_Container(MudDropContainer`1<T> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ItemRenderer();
    [CompilerGeneratedAttribute]
public void set_ItemRenderer(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_ItemsSelector();
    [CompilerGeneratedAttribute]
public void set_ItemsSelector(Func`2<T, bool> value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_CanDrop();
    [CompilerGeneratedAttribute]
public void set_CanDrop(Func`2<T, bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CanDropClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CanDropClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_NoDropClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_NoDropClass(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ApplyDropClassesOnDragStarted();
    [CompilerGeneratedAttribute]
public void set_ApplyDropClassesOnDragStarted(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_ItemDisabled();
    [CompilerGeneratedAttribute]
public void set_ItemDisabled(Func`2<T, bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DisabledClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DisabledClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DraggingClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DraggingClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ItemDraggingClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ItemDraggingClass(string value);
    [CompilerGeneratedAttribute]
public Func`2<T, string> get_ItemsClassSelector();
    [CompilerGeneratedAttribute]
public void set_ItemsClassSelector(Func`2<T, string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowReorder();
    [CompilerGeneratedAttribute]
public void set_AllowReorder(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnlyZone();
    [CompilerGeneratedAttribute]
public void set_OnlyZone(bool value);
    private int GetItemIndex(T item);
    private T[] GetItems();
    private RenderFragment`1<T> GetItemTemplate();
    private string GetDraggingClass();
    private string GetItemDraggingClass();
    private bool GetApplyDropClassesOnDragStarted();
    private bool GetItemDisabledStatus(T item);
    private string GetItemClassUsingSelector(T item);
    protected string get_Classname();
    protected string get_PlaceholderClassname();
    private ValueTuple`2<T, bool> ItemCanBeDropped();
    private bool IsOrigin(int index);
    private void Container_TransactionEnded(object sender, MudDragAndDropTransactionFinishedEventArgs`1<T> e);
    private void Container_TransactionStarted(object sender, MudDragAndDropItemTransaction`1<T> e);
    private void Container_RefreshRequested(object sender, EventArgs e);
    private void HandleDragEnter();
    private void HandleDragLeave();
    [AsyncStateMachineAttribute("MudBlazor.MudDropZone`1/<HandleDrop>d__94")]
internal Task HandleDrop();
    private void FinishedDragOperation();
    private void DragOperationStarted();
    protected virtual void OnParametersSet();
    private void Container_TransactionIndexChanged(object sender, MudDragAndDropIndexChangedEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudDropZone`1/<OnAfterRenderAsync>d__99")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <GetItems>b__75_0(T item);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudDynamicDropItem`1 : MudComponentBase {
    private bool _dragOperationIsInProgress;
    [NullableAttribute("1")]
private string _id;
    private double _onTouchStartX;
    private double _onTouchStartY;
    private double _onTouchLastX;
    private double _onTouchLastY;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IJSRuntime <JsRuntime>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudDropContainer`1<T> <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZoneIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DraggingClass>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <OnDragStarted>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <OnDragEnded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisabledClass>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideContent>k__BackingField;
    [NullableAttribute("1")]
[InjectAttribute]
private IJSRuntime JsRuntime { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
protected MudDropContainer`1<T> Container { get; protected set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string ZoneIdentifier { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Item { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("DraggingClass")]
public string DraggingClass { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<T> OnDragStarted { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<T> OnDragEnded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Disable")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Disable")]
public string DisabledClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Sorting")]
public int Index { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Sorting")]
public bool HideContent { get; public set; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IJSRuntime get_JsRuntime();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_JsRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
protected MudDropContainer`1<T> get_Container();
    [CompilerGeneratedAttribute]
protected void set_Container(MudDropContainer`1<T> value);
    [CompilerGeneratedAttribute]
public string get_ZoneIdentifier();
    [CompilerGeneratedAttribute]
public void set_ZoneIdentifier(string value);
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(T value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_DraggingClass();
    [CompilerGeneratedAttribute]
public void set_DraggingClass(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_OnDragStarted();
    [CompilerGeneratedAttribute]
public void set_OnDragStarted(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_OnDragEnded();
    [CompilerGeneratedAttribute]
public void set_OnDragEnded(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_DisabledClass();
    [CompilerGeneratedAttribute]
public void set_DisabledClass(string value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public bool get_HideContent();
    [CompilerGeneratedAttribute]
public void set_HideContent(bool value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<DragStartedAsync>d__54")]
private Task DragStartedAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<TouchStartedAsync>d__55")]
private Task TouchStartedAsync(TouchEventArgs e);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<OnDroppedSucceeded>d__56")]
private Task OnDroppedSucceeded();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<OnDroppedCanceled>d__57")]
private Task OnDroppedCanceled();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<DragEndedAsync>d__58")]
private Task DragEndedAsync(DragEventArgs e);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<TouchMovedAsync>d__59")]
private Task TouchMovedAsync(TouchEventArgs e);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudDynamicDropItem`1/<TouchEndedAsync>d__60")]
private Task TouchEndedAsync(TouchEventArgs e);
    [NullableContextAttribute("1")]
private ValueTuple`2<T, bool> ItemCanBeDropped(string identifier);
    private void HandleDragEnter();
    private void HandleDragLeave();
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudDynamicTabs : MudTabs {
    [CompilerGeneratedAttribute]
private string <AddTabIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseTabIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <AddTab>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MudTabPanel> <CloseTab>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddIconClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddIconStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIconClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIconStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddIconToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIconToolTip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalClassName>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string AddTabIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseTabIcon { get; public set; }
    [ParameterAttribute]
public EventCallback AddTab { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MudTabPanel> CloseTab { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string AddIconClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string AddIconStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIconClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIconStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AddIconToolTip { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string CloseIconToolTip { get; public set; }
    protected string InternalClassName { get; }
    public RenderFragment Render { get; }
    private RenderFragment`1<MudTabPanel> MudTabPanelPanelHeader { get; }
    private RenderFragment`1<MudTabs> MudTabsHeader { get; }
    [CompilerGeneratedAttribute]
public string get_AddTabIcon();
    [CompilerGeneratedAttribute]
public void set_AddTabIcon(string value);
    [CompilerGeneratedAttribute]
public string get_CloseTabIcon();
    [CompilerGeneratedAttribute]
public void set_CloseTabIcon(string value);
    [CompilerGeneratedAttribute]
public EventCallback get_AddTab();
    [CompilerGeneratedAttribute]
public void set_AddTab(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MudTabPanel> get_CloseTab();
    [CompilerGeneratedAttribute]
public void set_CloseTab(EventCallback`1<MudTabPanel> value);
    [CompilerGeneratedAttribute]
public string get_AddIconClass();
    [CompilerGeneratedAttribute]
public void set_AddIconClass(string value);
    [CompilerGeneratedAttribute]
public string get_AddIconStyle();
    [CompilerGeneratedAttribute]
public void set_AddIconStyle(string value);
    [CompilerGeneratedAttribute]
public string get_CloseIconClass();
    [CompilerGeneratedAttribute]
public void set_CloseIconClass(string value);
    [CompilerGeneratedAttribute]
public string get_CloseIconStyle();
    [CompilerGeneratedAttribute]
public void set_CloseIconStyle(string value);
    [CompilerGeneratedAttribute]
public string get_AddIconToolTip();
    [CompilerGeneratedAttribute]
public void set_AddIconToolTip(string value);
    [CompilerGeneratedAttribute]
public string get_CloseIconToolTip();
    [CompilerGeneratedAttribute]
public void set_CloseIconToolTip(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_InternalClassName();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected virtual void OnInitialized();
    public RenderFragment get_Render();
    private RenderFragment`1<MudTabPanel> get_MudTabPanelPanelHeader();
    private RenderFragment`1<MudTabs> get_MudTabsHeader();
    [CompilerGeneratedAttribute]
private RenderFragment <get_MudTabPanelPanelHeader>b__48_0(MudTabPanel context);
    [CompilerGeneratedAttribute]
private RenderFragment <get_MudTabsHeader>b__50_0(MudTabs _);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_MudTabsHeader>b__50_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_MudTabsHeader>b__50_2(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_MudTabsHeader>b__50_3(RenderTreeBuilder __builder4);
}
public class MudBlazor.MudElement : MudComponentBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <HtmlTag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ElementReference> <Ref>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<ElementReference> <RefChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClickPropagation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventDefault>k__BackingField;
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Misc")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Misc")]
public string HtmlTag { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Misc")]
public Nullable`1<ElementReference> Ref { get; public set; }
    [ParameterAttribute]
public EventCallback`1<ElementReference> RefChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ClickPropagation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool PreventDefault { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_HtmlTag();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_HtmlTag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ElementReference> get_Ref();
    [CompilerGeneratedAttribute]
public void set_Ref(Nullable`1<ElementReference> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<ElementReference> get_RefChanged();
    [CompilerGeneratedAttribute]
public void set_RefChanged(EventCallback`1<ElementReference> value);
    [CompilerGeneratedAttribute]
public bool get_ClickPropagation();
    [CompilerGeneratedAttribute]
public void set_ClickPropagation(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreventDefault();
    [CompilerGeneratedAttribute]
public void set_PreventDefault(bool value);
    [NullableContextAttribute("1")]
protected virtual void BuildRenderTree(RenderTreeBuilder builder);
    [AsyncStateMachineAttribute("MudBlazor.MudElement/<<BuildRenderTree>b__24_0>d")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__24_0(ElementReference capturedRef);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudExpansionPanel : MudComponentBase {
    [NullableAttribute("1")]
internal ParameterState`1<bool> _expandedState;
    [CompilerGeneratedAttribute]
private MudExpansionPanels <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TitleContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideIcon>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NextPanelExpanded>k__BackingField;
    [CascadingParameterAttribute]
private MudExpansionPanels Parent { get; private set; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string PanelContentClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<int> MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment TitleContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool HideIcon { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Expanded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    public bool NextPanelExpanded { get; public set; }
    [CompilerGeneratedAttribute]
private MudExpansionPanels get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(MudExpansionPanels value);
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_PanelContentClassname();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TitleContent();
    [CompilerGeneratedAttribute]
public void set_TitleContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_HideIcon();
    [CompilerGeneratedAttribute]
public void set_HideIcon(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Icon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_NextPanelExpanded();
    [CompilerGeneratedAttribute]
public void set_NextPanelExpanded(bool value);
    [NullableContextAttribute("1")]
private Task OnExpandedParameterChangedAsync(ParameterChangedEventArgs`1<bool> args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudExpansionPanel/<ToggleExpansionAsync>d__59")]
public Task ToggleExpansionAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudExpansionPanel/<ExpandAsync>d__60")]
public Task ExpandAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudExpansionPanel/<CollapseAsync>d__61")]
public Task CollapseAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudExpansionPanel/<OnInitializedAsync>d__62")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__57_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__57_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__65_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudExpansionPanels : MudComponentBase {
    private List`1<MudExpansionPanel> _panels;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiExpansion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool MultiExpansion { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiExpansion();
    [CompilerGeneratedAttribute]
public void set_MultiExpansion(bool value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [AsyncStateMachineAttribute("MudBlazor.MudExpansionPanels/<AddPanelAsync>d__31")]
internal Task AddPanelAsync(MudExpansionPanel panel);
    internal void RemovePanel(MudExpansionPanel panel);
    [AsyncStateMachineAttribute("MudBlazor.MudExpansionPanels/<NotifyPanelsChanged>d__33")]
internal Task NotifyPanelsChanged(MudExpansionPanel panel);
    public Task UpdateAllAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudExpansionPanels/<CollapseAllExceptAsync>d__35")]
public Task CollapseAllExceptAsync(MudExpansionPanel panel);
    [AsyncStateMachineAttribute("MudBlazor.MudExpansionPanels/<CollapseAllAsync>d__36")]
public Task CollapseAllAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudExpansionPanels/<ExpandAllAsync>d__37")]
public Task ExpandAllAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__38_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudFab : MudBaseButton {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string StartIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string EndIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size IconSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public string get_StartIcon();
    [CompilerGeneratedAttribute]
public void set_StartIcon(string value);
    [CompilerGeneratedAttribute]
public string get_EndIcon();
    [CompilerGeneratedAttribute]
public void set_EndIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [NullableContextAttribute("1")]
private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__31_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__31_1(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudField : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Typo <Typo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelperText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentText>k__BackingField;
    [CompilerGeneratedAttribute]
private Adornment <Adornment>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <AdornmentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnAdornmentClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InnerPadding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string InnerClassname { get; }
    [NullableAttribute("1")]
protected string AdornmentClassname { get; }
    [NullableAttribute("1")]
protected string InputControlClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Margin Margin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Typo Typo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public bool Error { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public string ErrorText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string HelperText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool FullWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AdornmentIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AdornmentText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Adornment Adornment { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color AdornmentColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size IconSize { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnAdornmentClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool InnerPadding { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Underline { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_InnerClassname();
    [NullableContextAttribute("1")]
protected string get_AdornmentClassname();
    [NullableContextAttribute("1")]
protected string get_InputControlClassname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    [CompilerGeneratedAttribute]
public Typo get_Typo();
    [CompilerGeneratedAttribute]
public void set_Typo(Typo value);
    [CompilerGeneratedAttribute]
public bool get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public string get_HelperText();
    [CompilerGeneratedAttribute]
public void set_HelperText(string value);
    [CompilerGeneratedAttribute]
public bool get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_AdornmentIcon();
    [CompilerGeneratedAttribute]
public void set_AdornmentIcon(string value);
    [CompilerGeneratedAttribute]
public string get_AdornmentText();
    [CompilerGeneratedAttribute]
public void set_AdornmentText(string value);
    [CompilerGeneratedAttribute]
public Adornment get_Adornment();
    [CompilerGeneratedAttribute]
public void set_Adornment(Adornment value);
    [CompilerGeneratedAttribute]
public Color get_AdornmentColor();
    [CompilerGeneratedAttribute]
public void set_AdornmentColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnAdornmentClick();
    [CompilerGeneratedAttribute]
public void set_OnAdornmentClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_InnerPadding();
    [CompilerGeneratedAttribute]
public void set_InnerPadding(bool value);
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_0();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_1();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_2();
    [CompilerGeneratedAttribute]
private bool <get_InnerClassname>b__3_0();
    [CompilerGeneratedAttribute]
private bool <get_InnerClassname>b__3_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__80_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudFileUpload`1 : MudFormComponent`2<T, string> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<T> _filesState;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IJSRuntime <JsRuntime>k__BackingField;
    [NullableAttribute("1")]
private string _id;
    [CompilerGeneratedAttribute]
private T <Files>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <FilesChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<InputFileChangeEventArgs> <OnFilesChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendMultipleFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ActivatorContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<T> <SelectedTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressOnChangeWhenInvalid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumFileCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentReadOnly>k__BackingField;
    [NullableAttribute("1")]
[InjectAttribute]
private IJSRuntime JsRuntime { get; private set; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Files { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<T> FilesChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<InputFileChangeEventArgs> OnFilesChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AppendMultipleFiles { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ActivatorContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment`1<T> SelectedTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool SuppressOnChangeWhenInvalid { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Accept { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Hidden { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string InputClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string InputStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int MaximumFileCount { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [CascadingParameterAttribute]
private bool ParentReadOnly { get; private set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IJSRuntime get_JsRuntime();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_JsRuntime(IJSRuntime value);
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public T get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_FilesChanged();
    [CompilerGeneratedAttribute]
public void set_FilesChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<InputFileChangeEventArgs> get_OnFilesChanged();
    [CompilerGeneratedAttribute]
public void set_OnFilesChanged(EventCallback`1<InputFileChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_AppendMultipleFiles();
    [CompilerGeneratedAttribute]
public void set_AppendMultipleFiles(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ActivatorContent();
    [CompilerGeneratedAttribute]
public void set_ActivatorContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_SelectedTemplate();
    [CompilerGeneratedAttribute]
public void set_SelectedTemplate(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressOnChangeWhenInvalid();
    [CompilerGeneratedAttribute]
public void set_SuppressOnChangeWhenInvalid(bool value);
    [CompilerGeneratedAttribute]
public string get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(string value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public string get_InputClass();
    [CompilerGeneratedAttribute]
public void set_InputClass(string value);
    [CompilerGeneratedAttribute]
public string get_InputStyle();
    [CompilerGeneratedAttribute]
public void set_InputStyle(string value);
    [CompilerGeneratedAttribute]
public int get_MaximumFileCount();
    [CompilerGeneratedAttribute]
public void set_MaximumFileCount(int value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentReadOnly();
    [CompilerGeneratedAttribute]
private void set_ParentReadOnly(bool value);
    protected bool GetDisabledState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudFileUpload`1/<ClearAsync>d__70")]
public Task ClearAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudFileUpload`1/<OpenFilePickerAsync>d__71")]
public Task OpenFilePickerAsync();
    [NullableContextAttribute("1")]
public sealed virtual void Activate(object activator, MouseEventArgs args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudFileUpload`1/<OnChangeAsync>d__73")]
private Task OnChangeAsync(InputFileChangeEventArgs args);
    protected virtual void OnInitialized();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudFileUpload`1/<NotifyValueChangedAsync>d__75")]
private Task NotifyValueChangedAsync(T value);
    protected virtual T ReadValue();
    [NullableContextAttribute("1")]
protected virtual Task WriteValueAsync(T value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private T <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <.ctor>b__5_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__78_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__78_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__78_2(RenderTreeBuilder __builder4);
}
public class MudBlazor.MudFlexBreak : MudComponentBase {
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudFocusTrap : MudComponentBase {
    private bool _shiftDown;
    private bool _disabled;
    private bool _initialized;
    private bool _shouldRender;
    protected ElementReference _firstBumper;
    protected ElementReference _lastBumper;
    protected ElementReference _fallback;
    protected ElementReference _root;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private DefaultFocus <DefaultFocus>k__BackingField;
    protected string Classname { get; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public DefaultFocus DefaultFocus { get; public set; }
    private string TrapTabIndex { get; }
    protected string get_Classname();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public DefaultFocus get_DefaultFocus();
    [CompilerGeneratedAttribute]
public void set_DefaultFocus(DefaultFocus value);
    private string get_TrapTabIndex();
    [AsyncStateMachineAttribute("MudBlazor.MudFocusTrap/<OnAfterRenderAsync>d__23")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    private Task OnBottomFocusAsync(FocusEventArgs args);
    private Task OnBumperFocusAsync(FocusEventArgs args);
    private Task OnRootFocusAsync(FocusEventArgs args);
    private void OnRootKeyDown(KeyboardEventArgs args);
    private void OnRootKeyUp(KeyboardEventArgs args);
    private Task OnTopFocusAsync(FocusEventArgs args);
    private Task InitializeFocusAsync();
    private Task FocusFallbackAsync();
    private Task FocusFirstAsync();
    private Task FocusLastAsync();
    private void HandleKeyEvent(KeyboardEventArgs args);
    private Task RestoreFocusAsync();
    private Task SaveFocusAsync();
    protected virtual bool ShouldRender();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__39_3(ElementReference __value);
}
public class MudBlazor.MudForm : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    private bool _valid;
    private bool _touched;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ValidationDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressRenderingOnValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressImplicitSubmission>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <IsValidChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <IsTouchedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<FormFieldChangedEventArgs> <FieldChanged>k__BackingField;
    protected HashSet`1<IFormComponent> _formControls;
    protected HashSet`1<string> _errors;
    [CompilerGeneratedAttribute]
private object <Validation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OverrideFieldValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<String[]> <ErrorsChanged>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<MudForm> <ChildForms>k__BackingField;
    [CompilerGeneratedAttribute]
private MudForm <ParentMudForm>k__BackingField;
    private Timer _timer;
    private bool _shouldRender;
    protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Validated data")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation result")]
public bool IsValid { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool IsTouched { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [CascadingParameterAttribute]
private bool ParentReadOnly { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int ValidationDelay { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool SuppressRenderingOnValidation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool SuppressImplicitSubmission { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Spacing { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> IsValidChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> IsTouchedChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<FormFieldChangedEventArgs> FieldChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public object Validation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public Nullable`1<bool> OverrideFieldValidation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation result")]
public String[] Errors { get; public set; }
    [ParameterAttribute]
public EventCallback`1<String[]> ErrorsChanged { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Validated data")]
public object Model { get; public set; }
    private HashSet`1<MudForm> ChildForms { get; private set; }
    [CascadingParameterAttribute]
private MudForm ParentMudForm { get; private set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    public sealed virtual bool get_IsValid();
    public void set_IsValid(bool value);
    private void SetIsValid(bool value);
    public bool get_IsTouched();
    public void set_IsTouched(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    protected bool GetDisabledState();
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentReadOnly();
    [CompilerGeneratedAttribute]
private void set_ParentReadOnly(bool value);
    protected bool GetReadOnlyState();
    [CompilerGeneratedAttribute]
public int get_ValidationDelay();
    [CompilerGeneratedAttribute]
public void set_ValidationDelay(int value);
    [CompilerGeneratedAttribute]
public bool get_SuppressRenderingOnValidation();
    [CompilerGeneratedAttribute]
public void set_SuppressRenderingOnValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressImplicitSubmission();
    [CompilerGeneratedAttribute]
public void set_SuppressImplicitSubmission(bool value);
    [CompilerGeneratedAttribute]
public void set_Spacing(int value);
    [CompilerGeneratedAttribute]
public int get_Spacing();
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_IsValidChanged();
    [CompilerGeneratedAttribute]
public void set_IsValidChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_IsTouchedChanged();
    [CompilerGeneratedAttribute]
public void set_IsTouchedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<FormFieldChangedEventArgs> get_FieldChanged();
    [CompilerGeneratedAttribute]
public void set_FieldChanged(EventCallback`1<FormFieldChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public object get_Validation();
    [CompilerGeneratedAttribute]
public void set_Validation(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OverrideFieldValidation();
    [CompilerGeneratedAttribute]
public void set_OverrideFieldValidation(Nullable`1<bool> value);
    public sealed virtual String[] get_Errors();
    public void set_Errors(String[] value);
    [CompilerGeneratedAttribute]
public EventCallback`1<String[]> get_ErrorsChanged();
    [CompilerGeneratedAttribute]
public void set_ErrorsChanged(EventCallback`1<String[]> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Model();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Model(object value);
    [CompilerGeneratedAttribute]
private HashSet`1<MudForm> get_ChildForms();
    [CompilerGeneratedAttribute]
private void set_ChildForms(HashSet`1<MudForm> value);
    [CompilerGeneratedAttribute]
private MudForm get_ParentMudForm();
    [CompilerGeneratedAttribute]
private void set_ParentMudForm(MudForm value);
    private sealed virtual override void MudBlazor.Interfaces.IForm.FieldChanged(IFormComponent formControl, object newValue);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Add(IFormComponent formControl);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Remove(IFormComponent formControl);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Update(IFormComponent formControl);
    private void EvaluateForm(bool debounce);
    private void OnTimerComplete(object stateInfo);
    [AsyncStateMachineAttribute("MudBlazor.MudForm/<OnEvaluateForm>d__98")]
protected Task OnEvaluateForm();
    protected virtual bool ShouldRender();
    [AsyncStateMachineAttribute("MudBlazor.MudForm/<Validate>d__100")]
public Task Validate();
    [AsyncStateMachineAttribute("MudBlazor.MudForm/<ResetAsync>d__101")]
public Task ResetAsync();
    public void ResetValidation();
    public void ResetTouched();
    protected virtual Task OnAfterRenderAsync(bool firstRender);
    private void SetDefaultControlValidation(IFormComponent formComponent);
    protected virtual void OnInitialized();
    public sealed virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__108_2(RenderTreeBuilder __builder4);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudFormComponent`2 : MudComponentBase {
    private Converter`2<T, U> _converter;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IForm <Form>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubscribeToParentForm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredError>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Error>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Touched>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ValidationErrors>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Validation>k__BackingField;
    [NullableAttribute("2")]
protected T _value;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EditContext <EditContext>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`1<T>> <For>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<ValidationAttribute> _validationAttrsFor;
    private FieldIdentifier _fieldIdentifier;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`1<T>> _currentFor;
    [NullableAttribute("2")]
private EditContext _currentEditContext;
    [NullableAttribute("2")]
[CascadingParameterAttribute]
internal IForm Form { get; internal set; }
    [CascadingParameterAttribute]
internal bool SubscribeToParentForm { get; internal set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public bool Required { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public string RequiredError { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Validation")]
public string ErrorText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public bool Error { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Validation")]
public string ErrorId { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Converter`2<T, U> Converter { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public CultureInfo Culture { get; public set; }
    [MemberNotNullWhenAttribute("True", "ConversionErrorMessage")]
public bool ConversionError { get; }
    [NullableAttribute("2")]
public string ConversionErrorMessage { get; }
    public bool HasErrors { get; }
    public bool Touched { get; protected set; }
    public List`1<string> ValidationErrors { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Validation")]
public object Validation { get; public set; }
    [NullableAttribute("2")]
[CascadingParameterAttribute]
private EditContext EditContext { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Validation")]
public Expression`1<Func`1<T>> For { get; public set; }
    [MemberNotNullWhenAttribute("False", "For")]
public bool IsForNull { get; }
    protected MudFormComponent`2(Converter`2<T, U> converter);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IForm get_Form();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Form(IForm value);
    [CompilerGeneratedAttribute]
internal bool get_SubscribeToParentForm();
    [CompilerGeneratedAttribute]
internal void set_SubscribeToParentForm(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Required();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_RequiredError();
    [CompilerGeneratedAttribute]
public void set_RequiredError(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Error();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Error(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorId(string value);
    public Converter`2<T, U> get_Converter();
    public void set_Converter(Converter`2<T, U> value);
    protected virtual bool SetConverter(Converter`2<T, U> value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    protected virtual bool SetCulture(CultureInfo value);
    private void OnConversionError(string error);
    protected virtual void OnConversionErrorOccurred(string error);
    [MemberNotNullWhenAttribute("True", "ConversionErrorMessage")]
public bool get_ConversionError();
    [NullableContextAttribute("2")]
public string get_ConversionErrorMessage();
    public sealed virtual bool get_HasErrors();
    [NullableContextAttribute("2")]
public string GetErrorText();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Touched();
    [CompilerGeneratedAttribute]
protected void set_Touched(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_ValidationErrors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ValidationErrors(List`1<string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Validation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Validation(object value);
    protected Task BeginValidationAfterAsync(Task task);
    protected Task BeginValidateAsync();
    public sealed virtual Task Validate();
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ValidateValue>d__63")]
protected virtual Task ValidateValue();
    [NullableContextAttribute("2")]
protected virtual bool HasValue(T value);
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026:Members annotated with 'RequiresUnreferencedCodeAttribute' require dynamic access otherwise can break functionality when trimming application code")]
protected virtual void ValidateWithAttribute(ValidationAttribute attr, T value, List`1<string> errors);
    protected virtual void ValidateWithFunc(Func`2<T, bool> func, T value, List`1<string> errors);
    protected virtual void ValidateWithFunc(Func`2<T, string> func, T value, List`1<string> errors);
    protected virtual void ValidateWithFunc(Func`2<T, IEnumerable`1<string>> func, T value, List`1<string> errors);
    protected virtual void ValidateModelWithFullPathOfMember(Func`3<object, string, IEnumerable`1<string>> func, List`1<string> errors);
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ValidateWithFunc>d__70")]
protected virtual Task ValidateWithFunc(Func`2<T, Task`1<bool>> func, T value, List`1<string> errors);
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ValidateWithFunc>d__71")]
protected virtual Task ValidateWithFunc(Func`2<T, Task`1<string>> func, T value, List`1<string> errors);
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ValidateWithFunc>d__72")]
protected virtual Task ValidateWithFunc(Func`2<T, Task`1<IEnumerable`1<string>>> func, T value, List`1<string> errors);
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ValidateModelWithFullPathOfMember>d__73")]
protected virtual Task ValidateModelWithFullPathOfMember(Func`3<object, string, Task`1<IEnumerable`1<string>>> func, List`1<string> errors);
    [NullableContextAttribute("2")]
protected void FieldChanged(object newValue);
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ResetAsync>d__75")]
public sealed virtual Task ResetAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<ResetValueAsync>d__76")]
protected virtual Task ResetValueAsync();
    public sealed virtual void ResetValidation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private EditContext get_EditContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_EditContext(EditContext value);
    internal void EditFormValidate();
    [CompilerGeneratedAttribute]
public Expression`1<Func`1<T>> get_For();
    [CompilerGeneratedAttribute]
public void set_For(Expression`1<Func`1<T>> value);
    [MemberNotNullWhenAttribute("False", "For")]
public sealed virtual bool get_IsForNull();
    private void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs e);
    protected virtual void OnParametersSet();
    private void DetachValidationStateChangedListener();
    protected virtual Task OnInitializedAsync();
    protected virtual void RegisterAsFormComponent();
    [NullableContextAttribute("2")]
protected virtual T ReadValue();
    protected virtual Task WriteValueAsync(T value);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    [AsyncStateMachineAttribute("MudBlazor.MudFormComponent`2/<<BeginValidateAsync>b__61_0>d")]
[CompilerGeneratedAttribute]
private Task <BeginValidateAsync>b__61_0();
}
public static class MudBlazor.MudGlobal : object {
    [CompilerGeneratedAttribute]
private static Action`1<Exception> <UnhandledExceptionHandler>k__BackingField;
    [ObsoleteAttribute("This field is obsolete and has no function due to the new Analyzer. It will be removed in a future version.", "True")]
public static bool EnableIllegalRazorParameterDetection;
    public static Action`1<Exception> UnhandledExceptionHandler { get; public set; }
    private static MudGlobal();
    [CompilerGeneratedAttribute]
public static Action`1<Exception> get_UnhandledExceptionHandler();
    [CompilerGeneratedAttribute]
public static void set_UnhandledExceptionHandler(Action`1<Exception> value);
    private static void OnDefaultExceptionHandler(Exception ex);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudGrid : MudComponentBase {
    [CompilerGeneratedAttribute]
private int <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private Justify <Justify>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Spacing { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Justify Justify { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public void set_Spacing(int value);
    [CompilerGeneratedAttribute]
public int get_Spacing();
    [CompilerGeneratedAttribute]
public Justify get_Justify();
    [CompilerGeneratedAttribute]
public void set_Justify(Justify value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__14_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudHidden : MudComponentBase {
    private ParameterState`1<bool> _hiddenState;
    private bool _serviceIsReady;
    private Breakpoint _currentBreakpoint;
    [CompilerGeneratedAttribute]
private IBrowserViewportService <BrowserViewportService>k__BackingField;
    [CompilerGeneratedAttribute]
private Breakpoint <CurrentBreakpointFromProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Breakpoint <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Invert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <HiddenChanged>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MudBlazor.IBrowserViewportObserver.Id>k__BackingField;
    [InjectAttribute]
protected IBrowserViewportService BrowserViewportService { get; protected set; }
    [CascadingParameterAttribute]
public Breakpoint CurrentBreakpointFromProvider { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Breakpoint Breakpoint { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Invert { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Hidden { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> HiddenChanged { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    private Guid MudBlazor.IBrowserViewportObserver.Id { get; }
    [CompilerGeneratedAttribute]
protected IBrowserViewportService get_BrowserViewportService();
    [CompilerGeneratedAttribute]
protected void set_BrowserViewportService(IBrowserViewportService value);
    [CompilerGeneratedAttribute]
public Breakpoint get_CurrentBreakpointFromProvider();
    [CompilerGeneratedAttribute]
public void set_CurrentBreakpointFromProvider(Breakpoint value);
    [CompilerGeneratedAttribute]
public Breakpoint get_Breakpoint();
    [CompilerGeneratedAttribute]
public void set_Breakpoint(Breakpoint value);
    [CompilerGeneratedAttribute]
public bool get_Invert();
    [CompilerGeneratedAttribute]
public void set_Invert(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_HiddenChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_HiddenChanged(EventCallback`1<bool> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [AsyncStateMachineAttribute("MudBlazor.MudHidden/<OnParametersSetAsync>d__32")]
protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudHidden/<OnAfterRenderAsync>d__33")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudHidden/<DisposeAsync>d__34")]
public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private sealed virtual override Guid MudBlazor.IBrowserViewportObserver.get_Id();
    [AsyncStateMachineAttribute("MudBlazor.MudHidden/<MudBlazor-IBrowserViewportObserver-NotifyBrowserViewportChangeAsync>d__38")]
private sealed virtual override Task MudBlazor.IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs);
    [AsyncStateMachineAttribute("MudBlazor.MudHidden/<UpdateAsync>d__39")]
protected Task UpdateAsync(Breakpoint currentBreakpoint);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__31_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__31_1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudHighlighter : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Memory`1<string> _fragments;
    private string _regex;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HighlightedText>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <HighlightedTexts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UntilNextBoundary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Markup>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string HighlightedText { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public IEnumerable`1<string> HighlightedTexts { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool CaseSensitive { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool UntilNextBoundary { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Markup { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_HighlightedText();
    [CompilerGeneratedAttribute]
public void set_HighlightedText(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IEnumerable`1<string> get_HighlightedTexts();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_HighlightedTexts(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_CaseSensitive();
    [CompilerGeneratedAttribute]
public void set_CaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_UntilNextBoundary();
    [CompilerGeneratedAttribute]
public void set_UntilNextBoundary(bool value);
    [CompilerGeneratedAttribute]
public bool get_Markup();
    [CompilerGeneratedAttribute]
public void set_Markup(bool value);
    protected virtual void OnParametersSet();
    [NullableContextAttribute("1")]
private bool IsMatch(string fragment);
    [NullableContextAttribute("1")]
private static RenderFragment ToRenderFragment(string markupContent);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudIcon : MudComponentBase {
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ViewBox>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Title { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string ViewBox { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [MemberNotNullWhenAttribute("True", "Icon")]
private bool IsAngleBracket { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ViewBox();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ViewBox(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [MemberNotNullWhenAttribute("True", "Icon")]
private bool get_IsAngleBracket();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudIconButton : MudBaseButton {
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Edge <Edge>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    protected bool AsButton { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Edge Edge { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    protected bool get_AsButton();
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Edge get_Edge();
    [CompilerGeneratedAttribute]
public void set_Edge(Edge value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_0();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_1();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_0(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_2(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudImage : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Fluid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alt>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectFit <ObjectFit>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectPosition <ObjectPosition>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Fluid { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Src { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Alt { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<int> Height { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<int> Width { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public ObjectFit ObjectFit { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public ObjectPosition ObjectPosition { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Fluid();
    [CompilerGeneratedAttribute]
public void set_Fluid(bool value);
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public string get_Alt();
    [CompilerGeneratedAttribute]
public void set_Alt(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public void set_ObjectFit(ObjectFit value);
    [CompilerGeneratedAttribute]
public ObjectFit get_ObjectFit();
    [CompilerGeneratedAttribute]
public void set_ObjectPosition(ObjectPosition value);
    [CompilerGeneratedAttribute]
public ObjectPosition get_ObjectPosition();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudInput`1 : MudBaseInput`1<T> {
    [CompilerGeneratedAttribute]
private InputType <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReference <ElementReference>k__BackingField;
    private ElementReference _elementReference1;
    [CompilerGeneratedAttribute]
private EventCallback <OnIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <OnDecrement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideSpinButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClearButtonClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<WheelEventArgs> <OnMouseWheel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumericUpIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NumericDownIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoGrow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLines>k__BackingField;
    private string _oldText;
    private string _internalText;
    private bool _shouldInitAutoGrow;
    [CompilerGeneratedAttribute]
private IJSRuntime <JsRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    protected string InputClassname { get; }
    protected string AdornmentClassname { get; }
    protected string ClearButtonClassname { get; }
    [ParameterAttribute]
public InputType InputType { get; public set; }
    protected string InputTypeString { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    public ElementReference ElementReference { get; private set; }
    [ParameterAttribute]
public EventCallback OnIncrement { get; public set; }
    [ParameterAttribute]
public EventCallback OnDecrement { get; public set; }
    [ParameterAttribute]
public bool HideSpinButtons { get; public set; }
    [ParameterAttribute]
public bool Clearable { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClearButtonClick { get; public set; }
    [ParameterAttribute]
public EventCallback`1<WheelEventArgs> OnMouseWheel { get; public set; }
    [ParameterAttribute]
public string ClearIcon { get; public set; }
    [ParameterAttribute]
public string NumericUpIcon { get; public set; }
    [ParameterAttribute]
public string NumericDownIcon { get; public set; }
    [ParameterAttribute]
public bool AutoGrow { get; public set; }
    [ParameterAttribute]
public int MaxLines { get; public set; }
    [InjectAttribute]
private IJSRuntime JsRuntime { get; private set; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_Classname();
    protected string get_InputClassname();
    protected string get_AdornmentClassname();
    protected string get_ClearButtonClassname();
    [CompilerGeneratedAttribute]
public InputType get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(InputType value);
    internal virtual InputType GetInputType();
    protected string get_InputTypeString();
    protected Task OnInput(ChangeEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.MudInput`1/<OnChange>d__16")]
protected Task OnChange(ChangeEventArgs args);
    protected virtual Task OnPaste(ClipboardEventArgs args);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public ElementReference get_ElementReference();
    [CompilerGeneratedAttribute]
private void set_ElementReference(ElementReference value);
    [AsyncStateMachineAttribute("MudBlazor.MudInput`1/<FocusAsync>d__27")]
public virtual ValueTask FocusAsync();
    public virtual ValueTask BlurAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    [CompilerGeneratedAttribute]
public EventCallback get_OnIncrement();
    [CompilerGeneratedAttribute]
public void set_OnIncrement(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_OnDecrement();
    [CompilerGeneratedAttribute]
public void set_OnDecrement(EventCallback value);
    [CompilerGeneratedAttribute]
public bool get_HideSpinButtons();
    [CompilerGeneratedAttribute]
public void set_HideSpinButtons(bool value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClearButtonClick();
    [CompilerGeneratedAttribute]
public void set_OnClearButtonClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<WheelEventArgs> get_OnMouseWheel();
    [CompilerGeneratedAttribute]
public void set_OnMouseWheel(EventCallback`1<WheelEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_ClearIcon();
    [CompilerGeneratedAttribute]
public void set_ClearIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NumericUpIcon();
    [CompilerGeneratedAttribute]
public void set_NumericUpIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NumericDownIcon();
    [CompilerGeneratedAttribute]
public void set_NumericDownIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_AutoGrow();
    [CompilerGeneratedAttribute]
public void set_AutoGrow(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxLines();
    [CompilerGeneratedAttribute]
public void set_MaxLines(int value);
    private Size GetButtonSize();
    private bool GetClearable();
    [AsyncStateMachineAttribute("MudBlazor.MudInput`1/<ClearButtonClickHandlerAsync>d__77")]
protected virtual Task ClearButtonClickHandlerAsync(MouseEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudInput`1/<SetParametersAsync>d__81")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JsRuntime();
    [CompilerGeneratedAttribute]
private void set_JsRuntime(IJSRuntime value);
    [AsyncStateMachineAttribute("MudBlazor.MudInput`1/<OnAfterRenderAsync>d__86")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public Task SetText(string text);
    private bool HasNativeHtmlPlaceholder();
    [AsyncStateMachineAttribute("MudBlazor.MudInput`1/<DisposeAsync>d__89")]
public sealed virtual ValueTask DisposeAsync();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_0();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_3(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_4(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__90_5(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudInputControl : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <InputContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelperText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelperId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HelperTextOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CounterText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ForId>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string HelperContainer { get; }
    [NullableAttribute("1")]
protected string HelperClass { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public RenderFragment InputContent { get; public set; }
    [ParameterAttribute]
public Margin Margin { get; public set; }
    [ParameterAttribute]
public bool Required { get; public set; }
    [ParameterAttribute]
public bool Error { get; public set; }
    [ParameterAttribute]
public string ErrorText { get; public set; }
    [ParameterAttribute]
public string ErrorId { get; public set; }
    [ParameterAttribute]
public string HelperText { get; public set; }
    [ParameterAttribute]
public string HelperId { get; public set; }
    [ParameterAttribute]
public bool HelperTextOnFocus { get; public set; }
    [ParameterAttribute]
public string CounterText { get; public set; }
    [ParameterAttribute]
public bool FullWidth { get; public set; }
    [ParameterAttribute]
public string Label { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
public string ForId { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_HelperContainer();
    [NullableContextAttribute("1")]
protected string get_HelperClass();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_InputContent();
    [CompilerGeneratedAttribute]
public void set_InputContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public bool get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorText();
    [CompilerGeneratedAttribute]
public void set_ErrorText(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorId();
    [CompilerGeneratedAttribute]
public void set_ErrorId(string value);
    [CompilerGeneratedAttribute]
public string get_HelperText();
    [CompilerGeneratedAttribute]
public void set_HelperText(string value);
    [CompilerGeneratedAttribute]
public string get_HelperId();
    [CompilerGeneratedAttribute]
public void set_HelperId(string value);
    [CompilerGeneratedAttribute]
public bool get_HelperTextOnFocus();
    [CompilerGeneratedAttribute]
public void set_HelperTextOnFocus(bool value);
    [CompilerGeneratedAttribute]
public string get_CounterText();
    [CompilerGeneratedAttribute]
public void set_CounterText(string value);
    [CompilerGeneratedAttribute]
public bool get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ForId();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ForId(string value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_0();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__70_0(RenderTreeBuilder __builder2);
}
internal static class MudBlazor.MudInputCssHelper : object {
    public static string GetClassname(MudBaseInput`1<T> baseInput, Func`1<bool> shrinkWhen);
    public static string GetInputClassname(MudBaseInput`1<T> baseInput);
    public static string GetAdornmentClassname(MudBaseInput`1<T> baseInput);
}
public class MudBlazor.MudInputLabel : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForId>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public bool Error { get; public set; }
    [ParameterAttribute]
public Variant Variant { get; public set; }
    [ParameterAttribute]
public Margin Margin { get; public set; }
    [ParameterAttribute]
public string ForId { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(bool value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    [CompilerGeneratedAttribute]
public string get_ForId();
    [CompilerGeneratedAttribute]
public void set_ForId(string value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__1_0();
}
public class MudBlazor.MudInputString : MudInput`1<string> {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudItem : MudComponentBase {
    [CompilerGeneratedAttribute]
private MudGrid <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <xs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <sm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <md>k__BackingField;
    [CompilerGeneratedAttribute]
private int <lg>k__BackingField;
    [CompilerGeneratedAttribute]
private int <xl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <xxl>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
private MudGrid Parent { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int xs { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int sm { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int md { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int lg { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int xl { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int xxl { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
private MudGrid get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(MudGrid value);
    [CompilerGeneratedAttribute]
public int get_xs();
    [CompilerGeneratedAttribute]
public void set_xs(int value);
    [CompilerGeneratedAttribute]
public int get_sm();
    [CompilerGeneratedAttribute]
public void set_sm(int value);
    [CompilerGeneratedAttribute]
public int get_md();
    [CompilerGeneratedAttribute]
public void set_md(int value);
    [CompilerGeneratedAttribute]
public int get_lg();
    [CompilerGeneratedAttribute]
public void set_lg(int value);
    [CompilerGeneratedAttribute]
public int get_xl();
    [CompilerGeneratedAttribute]
public void set_xl(int value);
    [CompilerGeneratedAttribute]
public int get_xxl();
    [CompilerGeneratedAttribute]
public void set_xxl(int value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual void OnInitialized();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudItemDropInfo`1 : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DropzoneIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndexInZone>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [NullableAttribute("2")]
public T Item { get; public set; }
    public string DropzoneIdentifier { get; public set; }
    public int IndexInZone { get; public set; }
    public MudItemDropInfo`1(T Item, string DropzoneIdentifier, int IndexInZone);
    [CompilerGeneratedAttribute]
protected MudItemDropInfo`1(MudItemDropInfo`1<T> original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Item();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Item(T value);
    [CompilerGeneratedAttribute]
public string get_DropzoneIdentifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DropzoneIdentifier(string value);
    [CompilerGeneratedAttribute]
public int get_IndexInZone();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IndexInZone(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(MudItemDropInfo`1<T> left, MudItemDropInfo`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(MudItemDropInfo`1<T> left, MudItemDropInfo`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(MudItemDropInfo`1<T> other);
    [CompilerGeneratedAttribute]
public virtual MudItemDropInfo`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(T& Item, String& DropzoneIdentifier, Int32& IndexInZone);
}
public class MudBlazor.MudLayout : MudDrawerContainer {
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableContextAttribute("1")]
protected virtual string get_Classname();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__3_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudLink : MudComponentBase {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Typo <Typo>k__BackingField;
    [CompilerGeneratedAttribute]
private Underline <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, object> Attributes { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Typo Typo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Underline Underline { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Href { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Target { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    private Dictionary`2<string, object> get_Attributes();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Typo get_Typo();
    [CompilerGeneratedAttribute]
public void set_Typo(Typo value);
    [CompilerGeneratedAttribute]
public Underline get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(Underline value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudLink/<OnClickHandler>d__36")]
protected Task OnClickHandler(MouseEventArgs ev);
    [NullableContextAttribute("1")]
private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CascadingTypeParameterAttribute("T")]
public class MudBlazor.MudList`1 : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<T> _selectedValueState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<IReadOnlyCollection`1<T>> _selectedValuesState;
    private HashSet`1<MudListItem`1<T>> _items;
    private HashSet`1<MudList`1<T>> _childLists;
    private HashSet`1<T> _selection;
    [CompilerGeneratedAttribute]
private MudList`1<T> <TopLevelList>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudList`1<T> <ParentList>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <CheckBoxColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionMode <SelectionMode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <SelectedValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <SelectedValueChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <SelectedValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<IReadOnlyCollection`1<T>> <SelectedValuesChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncheckedIcon>k__BackingField;
    internal MudList`1<T> TopLevelList { get; private set; }
    protected string Classname { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
protected MudList`1<T> ParentList { get; protected set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public Color CheckBoxColor { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Padding { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public SelectionMode SelectionMode { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public T SelectedValue { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> SelectedValueChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public IReadOnlyCollection`1<T> SelectedValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<IReadOnlyCollection`1<T>> SelectedValuesChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public IEqualityComparer`1<T> Comparer { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public string UncheckedIcon { get; public set; }
    [CompilerGeneratedAttribute]
internal MudList`1<T> get_TopLevelList();
    [CompilerGeneratedAttribute]
private void set_TopLevelList(MudList`1<T> value);
    protected string get_Classname();
    [CompilerGeneratedAttribute]
protected MudList`1<T> get_ParentList();
    [CompilerGeneratedAttribute]
protected void set_ParentList(MudList`1<T> value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Color get_CheckBoxColor();
    [CompilerGeneratedAttribute]
public void set_CheckBoxColor(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(SelectionMode value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_SelectedValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SelectedValue(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_SelectedValueChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValueChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<T> get_SelectedValues();
    [CompilerGeneratedAttribute]
public void set_SelectedValues(IReadOnlyCollection`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IReadOnlyCollection`1<T>> get_SelectedValuesChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValuesChanged(EventCallback`1<IReadOnlyCollection`1<T>> value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<T> get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(IEqualityComparer`1<T> value);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_UncheckedIcon();
    [CompilerGeneratedAttribute]
public void set_UncheckedIcon(string value);
    protected virtual void OnInitialized();
    protected virtual void OnAfterRender(bool firstRender);
    internal void Update();
    private Task OnSelectedValueParameterChangedAsync(ParameterChangedEventArgs`1<T> args);
    private void OnSelectedValuesChangedAsync(ParameterChangedEventArgs`1<IReadOnlyCollection`1<T>> arg);
    private void SetSelectedValues(IReadOnlyCollection`1<T> values);
    [AsyncStateMachineAttribute("MudBlazor.MudList`1/<OnComparerChangedAsync>d__86")]
private Task OnComparerChangedAsync(ParameterChangedEventArgs`1<IEqualityComparer`1<T>> args);
    [AsyncStateMachineAttribute("MudBlazor.MudList`1/<RegisterAsync>d__87")]
internal Task RegisterAsync(MudListItem`1<T> item);
    internal void Unregister(MudListItem`1<T> item);
    internal void Register(MudList`1<T> child);
    internal void Unregister(MudList`1<T> child);
    internal bool GetDisabled();
    internal bool GetReadOnly();
    [AsyncStateMachineAttribute("MudBlazor.MudList`1/<SetSelectedValueAsync>d__93")]
internal Task SetSelectedValueAsync(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudList`1/<SelectValueAsync>d__94")]
internal Task SelectValueAsync(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudList`1/<DeselectValueAsync>d__95")]
internal Task DeselectValueAsync(T value);
    internal void UpdateSelection();
    [NullableContextAttribute("2")]
private void UpdateSelectedItem(T value);
    internal void UpdateSelectedItems(HashSet`1<T> selection);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private T <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <.ctor>b__0_1();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_2();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <.ctor>b__0_3();
    [CompilerGeneratedAttribute]
private EventCallback`1<IReadOnlyCollection`1<T>> <.ctor>b__0_4();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_5();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_7();
    [CompilerGeneratedAttribute]
private SelectionMode <.ctor>b__0_8();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_9();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_10();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_11();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__100_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudListItem`1 : MudComponentBase {
    private bool _selected;
    [NullableAttribute("1")]
private ParameterState`1<bool> _expandedState;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudList`1<T> <MudList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecondaryText>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <AvatarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ExpandIconColor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ExpandLessIcon>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ExpandMoreIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnClickPreventDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NestedList>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    private bool MultiSelection { get; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
[InjectAttribute]
protected NavigationManager UriHelper { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
protected MudList`1<T> MudList { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MudList`1<T> TopLevelList { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string SecondaryText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment AvatarContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Href { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Target { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool ForceLoad { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size IconSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Expanding")]
public Color ExpandIconColor { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Expanding")]
public string ExpandLessIcon { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Expanding")]
public string ExpandMoreIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Inset { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<bool> Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Expanding")]
public bool Expanded { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool OnClickPreventDefault { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment NestedList { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEqualityComparer`1<T> Comparer { get; }
    private bool ReadOnly { get; }
    private SelectionMode SelectionMode { get; }
    private Typo TextTypo { get; }
    [NullableAttribute("1")]
private string HtmlTag { get; }
    private bool get_MultiSelection();
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected NavigationManager get_UriHelper();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected void set_UriHelper(NavigationManager value);
    [CompilerGeneratedAttribute]
protected MudList`1<T> get_MudList();
    [CompilerGeneratedAttribute]
protected void set_MudList(MudList`1<T> value);
    private MudList`1<T> get_TopLevelList();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_SecondaryText();
    [CompilerGeneratedAttribute]
public void set_SecondaryText(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public RenderFragment get_AvatarContent();
    [CompilerGeneratedAttribute]
public void set_AvatarContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public void set_ForceLoad(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public Color get_ExpandIconColor();
    [CompilerGeneratedAttribute]
public void set_ExpandIconColor(Color value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ExpandLessIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ExpandLessIcon(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ExpandMoreIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ExpandMoreIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_Inset();
    [CompilerGeneratedAttribute]
public void set_Inset(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_OnClickPreventDefault();
    [CompilerGeneratedAttribute]
public void set_OnClickPreventDefault(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NestedList();
    [CompilerGeneratedAttribute]
public void set_NestedList(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    private IEqualityComparer`1<T> get_Comparer();
    private bool get_ReadOnly();
    private SelectionMode get_SelectionMode();
    private Typo get_TextTypo();
    private bool GetClickable();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudListItem`1/<OnInitializedAsync>d__122")]
protected virtual Task OnInitializedAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudListItem`1/<OnClickHandlerAsync>d__123")]
protected Task OnClickHandlerAsync(MouseEventArgs eventArgs);
    internal void SetSelected(bool selected);
    internal T GetValue();
    private bool GetDisabled();
    private bool GetReadOnly();
    private bool GetDense();
    private Nullable`1<bool> GetCheckBoxState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudListItem`1/<OnCheckboxChangedAsync>d__130")]
private Task OnCheckboxChangedAsync();
    [NullableContextAttribute("1")]
private string GetIndeterminateIcon();
    private Color GetCheckBoxColor();
    [NullableContextAttribute("1")]
private string GetCheckedIcon();
    [NullableContextAttribute("1")]
private string GetUncheckedIcon();
    [NullableContextAttribute("1")]
private string get_HtmlTag();
    private bool GetPreventDefault();
    private bool GetClickPropagation();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__4_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__140_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__140_2(Nullable`1<bool> x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__140_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__140_4(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__140_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__140_5(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudListSubheader : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inset>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Inset { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inset();
    [CompilerGeneratedAttribute]
public void set_Inset(bool value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MudBlazor.MudLocalizer : object {
    public LocalizedString Item { get; }
    public LocalizedString Item { get; }
    public virtual LocalizedString get_Item(string key);
    public virtual LocalizedString get_Item(string key, Object[] arguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudMainContent : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
}
public class MudBlazor.MudMask : MudBaseInput`1<string> {
    private ElementReference _elementReference;
    private ElementReference _elementReference1;
    private IJsEvent _jsEvent;
    private IKeyInterceptor _keyInterceptor;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <_keyInterceptorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsEventFactory <_jsEventFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsApiService <_jsApiService>k__BackingField;
    private string _elementId;
    private IMask _mask;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private InputType <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    private bool _showClearable;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClearButtonClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearIcon>k__BackingField;
    private bool _updating;
    private int _caret;
    private Nullable`1<ValueTuple`2<int, int>> _selection;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    protected string InputClassname { get; }
    protected string AdornmentClassname { get; }
    protected string ClearButtonClassname { get; }
    [InjectAttribute]
private IKeyInterceptorFactory _keyInterceptorFactory { get; private set; }
    [InjectAttribute]
private IJsEventFactory _jsEventFactory { get; private set; }
    [InjectAttribute]
private IJsApiService _jsApiService { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public IMask Mask { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public InputType InputType { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public bool Clearable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public EventCallback`1<MouseEventArgs> OnClearButtonClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ClearIcon { get; public set; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_Classname();
    protected string get_InputClassname();
    protected string get_AdornmentClassname();
    protected string get_ClearButtonClassname();
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get__keyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set__keyInterceptorFactory(IKeyInterceptorFactory value);
    [CompilerGeneratedAttribute]
private IJsEventFactory get__jsEventFactory();
    [CompilerGeneratedAttribute]
private void set__jsEventFactory(IJsEventFactory value);
    [CompilerGeneratedAttribute]
private IJsApiService get__jsApiService();
    [CompilerGeneratedAttribute]
private void set__jsApiService(IJsApiService value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    public IMask get_Mask();
    public void set_Mask(IMask value);
    [CompilerGeneratedAttribute]
public InputType get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(InputType value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    private void UpdateClearable(object value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClearButtonClick();
    [CompilerGeneratedAttribute]
public void set_OnClearButtonClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_ClearIcon();
    [CompilerGeneratedAttribute]
public void set_ClearIcon(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<OnInitializedAsync>d__52")]
protected virtual Task OnInitializedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<OnAfterRenderAsync>d__53")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<HandleKeyDownInternally>d__54")]
private void HandleKeyDownInternally(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<HandleKeyDown>d__55")]
protected internal Task HandleKeyDown(KeyboardEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<UpdateAsync>d__57")]
private Task UpdateAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<HandleClearButtonAsync>d__58")]
internal Task HandleClearButtonAsync(MouseEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<UpdateTextPropertyAsync>d__59")]
protected virtual Task UpdateTextPropertyAsync(bool updateValue);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<UpdateValuePropertyAsync>d__60")]
protected virtual Task UpdateValuePropertyAsync(bool updateText);
    internal virtual InputType GetInputType();
    private string GetCounterText();
    public Task Clear();
    public virtual ValueTask FocusAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    internal void OnCopy();
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<OnPaste>d__68")]
internal void OnPaste(string text);
    public void OnSelect(int start, int end);
    internal void OnFocused(FocusEventArgs obj);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<OnBlurredAsync>d__71")]
protected internal virtual Task OnBlurredAsync(FocusEventArgs obj);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<SetCaretPositionAsync>d__74")]
private Task SetCaretPositionAsync(int caret, Nullable`1<ValueTuple`2<int, int>> selection, bool render);
    internal void OnCaretPositionChanged(int pos);
    private void SetMask(IMask other);
    [AsyncStateMachineAttribute("MudBlazor.MudMask/<OnCut>d__77")]
private void OnCut(ClipboardEventArgs obj);
    protected virtual void Dispose(bool disposing);
    [GeneratedRegexAttribute("^.$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex ValidCharacterRegularExpression();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__2_0();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__2_1();
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__2_2();
    [CompilerGeneratedAttribute]
private bool <get_InputClassname>b__4_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(string text, bool updateValue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(FocusEventArgs obj);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__80_0(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__80_1(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__80_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__80_3(ElementReference __value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudMenu : MudComponentBase {
    private string _popoverStyle;
    private bool _isTemporary;
    private bool _isPointerOver;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopoverClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PositionAtCursor>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ActivatorContent>k__BackingField;
    [CompilerGeneratedAttribute]
private MouseEvent <ActivationEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <AnchorOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <TransformOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropShadow>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <OpenChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string ActivatorClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AriaLabel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public string ListClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public string PopoverClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string StartIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string EndIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public bool FullWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public Nullable`1<int> MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup behavior")]
public bool PositionAtCursor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ActivatorContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public MouseEvent ActivationEvent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public Origin AnchorOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public Origin TransformOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup appearance")]
public bool LockScroll { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DropShadow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Popup behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
[CategoryAttribute("Popup behavior")]
public EventCallback`1<bool> OpenChanged { get; public set; }
    public bool Open { get; private set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_ActivatorClassname();
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_AriaLabel();
    [CompilerGeneratedAttribute]
public void set_AriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_ListClass();
    [CompilerGeneratedAttribute]
public void set_ListClass(string value);
    [CompilerGeneratedAttribute]
public string get_PopoverClass();
    [CompilerGeneratedAttribute]
public void set_PopoverClass(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public string get_StartIcon();
    [CompilerGeneratedAttribute]
public void set_StartIcon(string value);
    [CompilerGeneratedAttribute]
public string get_EndIcon();
    [CompilerGeneratedAttribute]
public void set_EndIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_FullWidth();
    [CompilerGeneratedAttribute]
public void set_FullWidth(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_PositionAtCursor();
    [CompilerGeneratedAttribute]
public void set_PositionAtCursor(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ActivatorContent();
    [CompilerGeneratedAttribute]
public void set_ActivatorContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public MouseEvent get_ActivationEvent();
    [CompilerGeneratedAttribute]
public void set_ActivationEvent(MouseEvent value);
    [CompilerGeneratedAttribute]
public Origin get_AnchorOrigin();
    [CompilerGeneratedAttribute]
public void set_AnchorOrigin(Origin value);
    [CompilerGeneratedAttribute]
public Origin get_TransformOrigin();
    [CompilerGeneratedAttribute]
public void set_TransformOrigin(Origin value);
    [CompilerGeneratedAttribute]
public bool get_LockScroll();
    [CompilerGeneratedAttribute]
public void set_LockScroll(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropShadow();
    [CompilerGeneratedAttribute]
public void set_DropShadow(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_OpenChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_OpenChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Open();
    [CompilerGeneratedAttribute]
private void set_Open(bool value);
    [NullableContextAttribute("1")]
public Task CloseMenuAsync();
    [NullableContextAttribute("1")]
public Task OpenMenuAsync(EventArgs args, bool temporary);
    [NullableContextAttribute("1")]
private void SetPopoverStyle(MouseEventArgs args);
    [NullableContextAttribute("1")]
public Task ToggleMenuAsync(EventArgs args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudMenu/<PointerEnterAsync>d__115")]
private Task PointerEnterAsync(PointerEventArgs args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudMenu/<PointerLeaveAsync>d__116")]
private Task PointerLeaveAsync();
    [NullableContextAttribute("1")]
private sealed virtual override void MudBlazor.Interfaces.IActivatable.Activate(object activator, MouseEventArgs args);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__118_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__118_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__118_2(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__118_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__118_4(RenderTreeBuilder __builder4);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudMenuItem : MudComponentBase {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private NavigationManager <UriHelper>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IJsApiService <JsApiService>k__BackingField;
    [CompilerGeneratedAttribute]
private MudMenu <MudMenu>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClose>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("1")]
[InjectAttribute]
protected NavigationManager UriHelper { get; protected set; }
    [NullableAttribute("1")]
[InjectAttribute]
protected IJsApiService JsApiService { get; protected set; }
    [CascadingParameterAttribute]
public MudMenu MudMenu { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Href { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Target { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool ForceLoad { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size IconSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool AutoClose { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected NavigationManager get_UriHelper();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected void set_UriHelper(NavigationManager value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected IJsApiService get_JsApiService();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected void set_JsApiService(IJsApiService value);
    [CompilerGeneratedAttribute]
public MudMenu get_MudMenu();
    [CompilerGeneratedAttribute]
public void set_MudMenu(MudMenu value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public void set_ForceLoad(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public bool get_AutoClose();
    [CompilerGeneratedAttribute]
public void set_AutoClose(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudMenuItem/<OnClickHandlerAsync>d__52")]
protected Task OnClickHandlerAsync(MouseEventArgs ev);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__53_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudMessageBox : MudComponentBase {
    [NullableAttribute("1")]
private ParameterState`1<bool> _visibleState;
    private IDialogReference _reference;
    private ActivatableCallback _yesCallback;
    private ActivatableCallback _cancelCallback;
    private ActivatableCallback _noCallback;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDialogService <DialogService>k__BackingField;
    [CompilerGeneratedAttribute]
private MudDialogInstance <DialogInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TitleContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private MarkupString <MarkupMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <MessageContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelText>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <CancelButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoText>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NoButton>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <YesText>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <YesButton>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <OnYes>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <OnNo>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <OnCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <VisibleChanged>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
[InjectAttribute]
private IDialogService DialogService { get; private set; }
    [CascadingParameterAttribute]
internal MudDialogInstance DialogInstance { get; internal set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Title { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment TitleContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Message { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public MarkupString MarkupMessage { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment MessageContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string CancelText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment CancelButton { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string NoText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment NoButton { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string YesText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment YesButton { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> OnYes { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> OnNo { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> OnCancel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> VisibleChanged { get; public set; }
    [MemberNotNullWhenAttribute("False", "DialogInstance")]
private bool IsInline { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IDialogService get_DialogService();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_DialogService(IDialogService value);
    [CompilerGeneratedAttribute]
internal MudDialogInstance get_DialogInstance();
    [CompilerGeneratedAttribute]
internal void set_DialogInstance(MudDialogInstance value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TitleContent();
    [CompilerGeneratedAttribute]
public void set_TitleContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public MarkupString get_MarkupMessage();
    [CompilerGeneratedAttribute]
public void set_MarkupMessage(MarkupString value);
    [CompilerGeneratedAttribute]
public RenderFragment get_MessageContent();
    [CompilerGeneratedAttribute]
public void set_MessageContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_CancelText();
    [CompilerGeneratedAttribute]
public void set_CancelText(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_CancelButton();
    [CompilerGeneratedAttribute]
public void set_CancelButton(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_NoText();
    [CompilerGeneratedAttribute]
public void set_NoText(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_NoButton();
    [CompilerGeneratedAttribute]
public void set_NoButton(RenderFragment value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_YesText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_YesText(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_YesButton();
    [CompilerGeneratedAttribute]
public void set_YesButton(RenderFragment value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_OnYes();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_OnYes(EventCallback`1<bool> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_OnNo();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_OnNo(EventCallback`1<bool> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_OnCancel();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_OnCancel(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_VisibleChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_VisibleChanged(EventCallback`1<bool> value);
    [MemberNotNullWhenAttribute("False", "DialogInstance")]
private bool get_IsInline();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudMessageBox/<ShowAsync>d__82")]
public Task`1<Nullable`1<bool>> ShowAsync(DialogOptions options);
    public void Close();
    protected virtual void OnInitialized();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudMessageBox/<OnVisibleChangedAsync>d__85")]
private Task OnVisibleChangedAsync(ParameterChangedEventArgs`1<bool> arg);
    [NullableContextAttribute("1")]
private void OnYesActivated(object arg1, MouseEventArgs arg2);
    [NullableContextAttribute("1")]
private void OnNoActivated(object arg1, MouseEventArgs arg2);
    [NullableContextAttribute("1")]
private void OnCancelActivated(object arg1, MouseEventArgs arg2);
    private void OnYesClicked();
    private void OnNoClicked();
    private void OnCancelClicked();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__7_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__7_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_2(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_4(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_5(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_6(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_7(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_8(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_9(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__92_10(RenderTreeBuilder __builder4);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudNavGroup : MudComponentBase {
    private ParameterState`1<bool> _expandedState;
    private ParameterState`1<bool> _disabledState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<NavigationContext> _parentNavigationContextState;
    private NavigationContext _navigationContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NavigationContext <ParentNavigationContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideExpandIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandIcon>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    protected string ButtonClassname { get; }
    protected string IconClassname { get; }
    protected string ExpandIconClassname { get; }
    protected int ButtonTabIndex { get; }
    [NullableAttribute("2")]
[CascadingParameterAttribute]
private NavigationContext ParentNavigationContext { get; private set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Title { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Expanded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool HideExpandIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<int> MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ExpandIcon { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected virtual void OnInitialized();
    protected string get_Classname();
    protected string get_ButtonClassname();
    protected string get_IconClassname();
    protected string get_ExpandIconClassname();
    protected int get_ButtonTabIndex();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private NavigationContext get_ParentNavigationContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ParentNavigationContext(NavigationContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Title();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Title(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Icon();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideExpandIcon();
    [CompilerGeneratedAttribute]
public void set_HideExpandIcon(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ExpandIcon();
    [CompilerGeneratedAttribute]
public void set_ExpandIcon(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [AsyncStateMachineAttribute("MudBlazor.MudNavGroup/<ExpandedToggleAsync>d__64")]
private Task ExpandedToggleAsync();
    private void UpdateNavigationContext();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private NavigationContext <.ctor>b__4_1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4_2();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__4_3();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__66_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__66_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__66_2(RenderTreeBuilder __builder4);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudNavLink : MudBaseSelectItem {
    [CompilerGeneratedAttribute]
private INavigationEventReceiver <NavigationEventReceiver>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationContext <NavigationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private NavLinkMatch <Match>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ActiveClass>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string LinkClassname { get; }
    [NullableAttribute("1")]
protected string IconClassname { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, object> Attributes { get; }
    protected int TabIndex { get; }
    [CascadingParameterAttribute]
private INavigationEventReceiver NavigationEventReceiver { get; private set; }
    [CascadingParameterAttribute]
private NavigationContext NavigationContext { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public NavLinkMatch Match { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public string Target { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Common")]
public string ActiveClass { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_LinkClassname();
    [NullableContextAttribute("1")]
protected string get_IconClassname();
    protected Dictionary`2<string, object> get_Attributes();
    protected int get_TabIndex();
    [CompilerGeneratedAttribute]
private INavigationEventReceiver get_NavigationEventReceiver();
    [CompilerGeneratedAttribute]
private void set_NavigationEventReceiver(INavigationEventReceiver value);
    [CompilerGeneratedAttribute]
private NavigationContext get_NavigationContext();
    [CompilerGeneratedAttribute]
private void set_NavigationContext(NavigationContext value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public NavLinkMatch get_Match();
    [CompilerGeneratedAttribute]
public void set_Match(NavLinkMatch value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ActiveClass();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ActiveClass(string value);
    [NullableContextAttribute("1")]
protected Task HandleNavigation();
    [NullableContextAttribute("1")]
private sealed virtual override Task Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__40_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudNavMenu : MudComponentBase {
    [CompilerGeneratedAttribute]
private NavigationContext <NavigationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bordered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rounded>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
private NavigationContext NavigationContext { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Bordered { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Rounded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Margin Margin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
private NavigationContext get_NavigationContext();
    [CompilerGeneratedAttribute]
private void set_NavigationContext(NavigationContext value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_Bordered();
    [CompilerGeneratedAttribute]
public void set_Bordered(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rounded();
    [CompilerGeneratedAttribute]
public void set_Rounded(bool value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__30_0(RenderTreeBuilder __builder2);
}
public class MudBlazor.MudNumericField`1 : MudDebouncedInput`1<T> {
    private IKeyInterceptor _keyInterceptor;
    private Comparer _comparer;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <_keyInterceptorFactory>k__BackingField;
    private string _elementId;
    private MudInput`1<string> _elementReference;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearIcon>k__BackingField;
    private bool _minHasValue;
    [CompilerGeneratedAttribute]
private bool <InvertMouseWheel>k__BackingField;
    private T _minDefault;
    private T _min;
    private bool _maxHasValue;
    private T _maxDefault;
    private T _max;
    private bool _stepHasValue;
    private T _stepDefault;
    private T _step;
    [CompilerGeneratedAttribute]
private bool <HideSpinButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private InputMode <InputMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Pattern>k__BackingField;
    private static string TagFormat;
    protected string Classname { get; }
    [InjectAttribute]
private IKeyInterceptorFactory _keyInterceptorFactory { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Clearable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ClearIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool InvertMouseWheel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public T Min { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public T Max { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Step { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool HideSpinButtons { get; public set; }
    [ParameterAttribute]
public InputMode InputMode { get; public set; }
    [ParameterAttribute]
public string Pattern { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get__keyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set__keyInterceptorFactory(IKeyInterceptorFactory value);
    [ExcludeFromCodeCoverageAttribute]
public virtual ValueTask FocusAsync();
    [ExcludeFromCodeCoverageAttribute]
public virtual ValueTask BlurAsync();
    [ExcludeFromCodeCoverageAttribute]
public virtual ValueTask SelectAsync();
    [ExcludeFromCodeCoverageAttribute]
public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    protected virtual Task SetValueAsync(T value, bool updateText, bool force);
    [AsyncStateMachineAttribute("MudBlazor.MudNumericField`1/<OnBlurredAsync>d__16")]
protected internal virtual Task OnBlurredAsync(FocusEventArgs obj);
    [AsyncStateMachineAttribute("MudBlazor.MudNumericField`1/<ValidateInput>d__17")]
protected Task`1<bool> ValidateInput(T value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    [CompilerGeneratedAttribute]
public string get_ClearIcon();
    [CompilerGeneratedAttribute]
public void set_ClearIcon(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudNumericField`1/<Change>d__26")]
private Task Change(double factor);
    private T GetNextValue(double factor);
    public Task Increment();
    public Task Decrement();
    protected ValueTuple`2<T, bool> ConstrainBoundaries(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudNumericField`1/<OnAfterRenderAsync>d__31")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudNumericField`1/<HandleKeydown>d__32")]
protected Task HandleKeydown(KeyboardEventArgs obj);
    protected Task HandleKeyUp(KeyboardEventArgs obj);
    [AsyncStateMachineAttribute("MudBlazor.MudNumericField`1/<OnMouseWheel>d__34")]
protected Task OnMouseWheel(WheelEventArgs obj);
    [CompilerGeneratedAttribute]
public bool get_InvertMouseWheel();
    [CompilerGeneratedAttribute]
public void set_InvertMouseWheel(bool value);
    public T get_Min();
    public void set_Min(T value);
    public T get_Max();
    public void set_Max(T value);
    public T get_Step();
    public void set_Step(T value);
    [CompilerGeneratedAttribute]
public bool get_HideSpinButtons();
    [CompilerGeneratedAttribute]
public void set_HideSpinButtons(bool value);
    [CompilerGeneratedAttribute]
public virtual InputMode get_InputMode();
    [CompilerGeneratedAttribute]
public virtual void set_InputMode(InputMode value);
    [CompilerGeneratedAttribute]
public virtual string get_Pattern();
    [CompilerGeneratedAttribute]
public virtual void set_Pattern(string value);
    private string GetCounterText();
    private Task OnInputValueChanged(string text);
    private string FormatParam(T value);
    private decimal FromDecimal(T v);
    private long FromInt64(T v);
    private ulong FromUInt64(T v);
    protected virtual void Dispose(bool disposing);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(FocusEventArgs obj);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_2(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_3(object __value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudOverlay : MudComponentBase {
    private ParameterState`1<bool> _visibleState;
    [CompilerGeneratedAttribute]
private IScrollManager <ScrollManager>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <VisibleChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockScrollClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DarkBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LightBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Absolute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ZIndex>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <OnClosed>k__BackingField;
    protected string Classname { get; }
    protected string ScrimClassname { get; }
    protected string Styles { get; }
    [InjectAttribute]
public IScrollManager ScrollManager { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> VisibleChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool AutoClose { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool LockScroll { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string LockScrollClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DarkBackground { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool LightBackground { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Absolute { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int ZIndex { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [ParameterAttribute]
public EventCallback OnClosed { get; public set; }
    protected string get_Classname();
    protected string get_ScrimClassname();
    protected string get_Styles();
    [CompilerGeneratedAttribute]
public IScrollManager get_ScrollManager();
    [CompilerGeneratedAttribute]
public void set_ScrollManager(IScrollManager value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_VisibleChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_VisibleChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_AutoClose();
    [CompilerGeneratedAttribute]
public void set_AutoClose(bool value);
    [CompilerGeneratedAttribute]
public bool get_LockScroll();
    [CompilerGeneratedAttribute]
public void set_LockScroll(bool value);
    [CompilerGeneratedAttribute]
public string get_LockScrollClass();
    [CompilerGeneratedAttribute]
public void set_LockScrollClass(string value);
    [CompilerGeneratedAttribute]
public bool get_DarkBackground();
    [CompilerGeneratedAttribute]
public void set_DarkBackground(bool value);
    [CompilerGeneratedAttribute]
public bool get_LightBackground();
    [CompilerGeneratedAttribute]
public void set_LightBackground(bool value);
    [CompilerGeneratedAttribute]
public bool get_Absolute();
    [CompilerGeneratedAttribute]
public void set_Absolute(bool value);
    [CompilerGeneratedAttribute]
public int get_ZIndex();
    [CompilerGeneratedAttribute]
public void set_ZIndex(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback get_OnClosed();
    [CompilerGeneratedAttribute]
public void set_OnClosed(EventCallback value);
    [AsyncStateMachineAttribute("MudBlazor.MudOverlay/<OnAfterRenderAsync>d__60")]
protected virtual Task OnAfterRenderAsync(bool firstTime);
    [AsyncStateMachineAttribute("MudBlazor.MudOverlay/<OnClickHandlerAsync>d__61")]
protected internal Task OnClickHandlerAsync(MouseEventArgs ev);
    private ValueTask BlockScrollAsync();
    private ValueTask UnblockScrollAsync();
    public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__59_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__59_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudPageContentNavigation : MudComponentBase {
    private List`1<MudPageContentSection> _sections;
    [NullableAttribute("2")]
private IScrollSpy _scrollSpy;
    [CompilerGeneratedAttribute]
private IScrollSpyFactory <ScrollSpyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Headline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScrollContainerSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionClassSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, int> <HierarchyMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentNavigationExpandBehaviour <ExpandBehaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ActivateFirstSectionAsDefault>k__BackingField;
    private Dictionary`2<MudPageContentSection, MudPageContentSection> _parentMapper;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [InjectAttribute]
private IScrollSpyFactory ScrollSpyFactory { get; private set; }
    public IEnumerable`1<MudPageContentSection> Sections { get; }
    [NullableAttribute("2")]
public MudPageContentSection ActiveSection { get; }
    [ParameterAttribute]
public string Headline { get; public set; }
    [ParameterAttribute]
public string ScrollContainerSelector { get; public set; }
    [ParameterAttribute]
public string SectionClassSelector { get; public set; }
    [ParameterAttribute]
public IDictionary`2<string, int> HierarchyMapper { get; public set; }
    [ParameterAttribute]
public ContentNavigationExpandBehaviour ExpandBehaviour { get; public set; }
    [ParameterAttribute]
public bool ActivateFirstSectionAsDefault { get; public set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
private IScrollSpyFactory get_ScrollSpyFactory();
    [CompilerGeneratedAttribute]
private void set_ScrollSpyFactory(IScrollSpyFactory value);
    public IEnumerable`1<MudPageContentSection> get_Sections();
    [NullableContextAttribute("2")]
public MudPageContentSection get_ActiveSection();
    [CompilerGeneratedAttribute]
public string get_Headline();
    [CompilerGeneratedAttribute]
public void set_Headline(string value);
    [CompilerGeneratedAttribute]
public string get_ScrollContainerSelector();
    [CompilerGeneratedAttribute]
public void set_ScrollContainerSelector(string value);
    [CompilerGeneratedAttribute]
public string get_SectionClassSelector();
    [CompilerGeneratedAttribute]
public void set_SectionClassSelector(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, int> get_HierarchyMapper();
    [CompilerGeneratedAttribute]
public void set_HierarchyMapper(IDictionary`2<string, int> value);
    [CompilerGeneratedAttribute]
public ContentNavigationExpandBehaviour get_ExpandBehaviour();
    [CompilerGeneratedAttribute]
public void set_ExpandBehaviour(ContentNavigationExpandBehaviour value);
    [CompilerGeneratedAttribute]
public bool get_ActivateFirstSectionAsDefault();
    [CompilerGeneratedAttribute]
public void set_ActivateFirstSectionAsDefault(bool value);
    private Task OnNavLinkClick(string id);
    private void ScrollSpy_ScrollSectionSectionCentered(object sender, ScrollSectionCenteredEventArgs e);
    private void SelectActiveSection(string id);
    private string GetNavLinkClass(MudPageContentSection section);
    private string GetPanelClass();
    public Task ScrollToSection(Uri uri);
    public void AddSection(string sectionName, string sectionId, bool forceUpdate);
    public void AddSection(MudPageContentSection section, bool forceUpdate);
    private sealed virtual override void MudBlazor.Interfaces.IMudStateHasChanged.StateHasChanged();
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudPageContentNavigation/<OnAfterRenderAsync>d__45")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudPageContentNavigation/<DisposeAsync>d__46")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_1(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudPageContentSection : object {
    private List`1<MudPageContentSection> _children;
    [CompilerGeneratedAttribute]
private int <LevelSortingValue>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MudPageContentSection <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    public int LevelSortingValue { get; private set; }
    [NullableAttribute("2")]
public MudPageContentSection Parent { get; }
    public int Level { get; public set; }
    public string Title { get; public set; }
    public string Id { get; public set; }
    public bool Active { get; private set; }
    public MudPageContentSection(string title, string id);
    public MudPageContentSection(string title, string id, int level, MudPageContentSection parent);
    [CompilerGeneratedAttribute]
public int get_LevelSortingValue();
    [CompilerGeneratedAttribute]
private void set_LevelSortingValue(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MudPageContentSection get_Parent();
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
private void set_Active(bool value);
    protected internal void Activate();
    protected internal void Deactive();
    internal void SetLevelStructure(int counter, int diff);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudPagination : MudComponentBase {
    private int _count;
    private int _selected;
    private int _middleCount;
    private int _boundaryCount;
    private bool _selectedFirstSet;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rectangular>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropShadow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowFirstButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowLastButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPreviousButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowNextButton>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPageButtons>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<Page> <ControlButtonClicked>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastIcon>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    private string Classname { get; }
    private string ItemClassname { get; }
    private string SelectedItemClassname { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Count { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int BoundaryCount { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int MiddleCount { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Selected { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Rectangular { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DropShadow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowFirstButton { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowLastButton { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowPreviousButton { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowNextButton { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowPageButtons { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<Page> ControlButtonClicked { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<int> SelectedChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string FirstIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string BeforeIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string NextIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string LastIcon { get; public set; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    private string get_Classname();
    private string get_ItemClassname();
    private string get_SelectedItemClassname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    public int get_Count();
    public void set_Count(int value);
    public int get_BoundaryCount();
    public void set_BoundaryCount(int value);
    public int get_MiddleCount();
    public void set_MiddleCount(int value);
    public int get_Selected();
    public void set_Selected(int value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_Rectangular();
    [CompilerGeneratedAttribute]
public void set_Rectangular(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_DropShadow();
    [CompilerGeneratedAttribute]
public void set_DropShadow(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowFirstButton();
    [CompilerGeneratedAttribute]
public void set_ShowFirstButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowLastButton();
    [CompilerGeneratedAttribute]
public void set_ShowLastButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPreviousButton();
    [CompilerGeneratedAttribute]
public void set_ShowPreviousButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowNextButton();
    [CompilerGeneratedAttribute]
public void set_ShowNextButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPageButtons();
    [CompilerGeneratedAttribute]
public void set_ShowPageButtons(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<Page> get_ControlButtonClicked();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ControlButtonClicked(EventCallback`1<Page> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_SelectedChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public string get_FirstIcon();
    [CompilerGeneratedAttribute]
public void set_FirstIcon(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeIcon();
    [CompilerGeneratedAttribute]
public void set_BeforeIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NextIcon();
    [CompilerGeneratedAttribute]
public void set_NextIcon(string value);
    [CompilerGeneratedAttribute]
public string get_LastIcon();
    [CompilerGeneratedAttribute]
public void set_LastIcon(string value);
    private IEnumerable`1<int> GeneratePagination();
    private void OnClickControlButton(Page page);
    [ExcludeFromCodeCoverageAttribute]
public void NavigateTo(Page page);
    public void NavigateTo(int pageIndex);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__99_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__99_1();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__99_2();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__99_3();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__99_4();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudPaper : MudComponentBase {
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaxWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string Stylename { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Height { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Width { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MaxWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MinHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MinWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_Stylename();
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(string value);
    [CompilerGeneratedAttribute]
public string get_MaxWidth();
    [CompilerGeneratedAttribute]
public void set_MaxWidth(string value);
    [CompilerGeneratedAttribute]
public string get_MinHeight();
    [CompilerGeneratedAttribute]
public void set_MinHeight(string value);
    [CompilerGeneratedAttribute]
public string get_MinWidth();
    [CompilerGeneratedAttribute]
public void set_MinWidth(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudPicker`1 : MudFormComponent`2<T, string> {
    protected IKeyInterceptor _keyInterceptor;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <KeyInterceptorFactory>k__BackingField;
    private string _elementId;
    [CompilerGeneratedAttribute]
private Color <AdornmentColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdornmentAriaLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <PickerOpened>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <PickerClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rounded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelperText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HelperTextOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Underline>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolbarClass>k__BackingField;
    [CompilerGeneratedAttribute]
private PickerVariant <PickerVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Adornment <Adornment>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<string> <TextChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImmediateText>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    private string _text;
    [CompilerGeneratedAttribute]
private string <ActionsClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<MudPicker`1<T>> <PickerActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Margin <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <AnchorOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <TransformOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private OverflowBehavior <OverflowBehavior>k__BackingField;
    protected IMask _mask;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    protected internal MudTextField`1<string> _inputReference;
    private bool _pickerSquare;
    private int _pickerElevation;
    private ElementReference _pickerInlineRef;
    [InjectAttribute]
private IKeyInterceptorFactory KeyInterceptorFactory { get; private set; }
    protected string PickerClassname { get; }
    protected string PickerPaperClassname { get; }
    protected string PickerPaperStylename { get; }
    protected string PickerInlineClassname { get; }
    protected string PickerContainerClassname { get; }
    protected string PickerInputClassname { get; }
    protected string ActionsClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color AdornmentColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string AdornmentIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string AdornmentAriaLabel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Placeholder { get; public set; }
    [ParameterAttribute]
public EventCallback PickerOpened { get; public set; }
    [ParameterAttribute]
public EventCallback PickerClosed { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public bool Rounded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string HelperText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool HelperTextOnFocus { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Clearable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Underline { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [CascadingParameterAttribute]
private bool ParentReadOnly { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Editable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public bool ShowToolbar { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string ToolbarClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public PickerVariant PickerVariant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Adornment Adornment { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size IconSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
public EventCallback`1<string> TextChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ImmediateText { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker appearance")]
public string ActionsClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public RenderFragment`1<MudPicker`1<T>> PickerActions { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Margin Margin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public IMask Mask { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Origin AnchorOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Origin TransformOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public OverflowBehavior OverflowBehavior { get; public set; }
    protected bool Open { get; protected set; }
    protected RenderFragment InputContent { get; }
    protected RenderFragment PickerContent { get; }
    protected RenderFragment Render { get; }
    protected MudPicker`1(Converter`2<T, string> converter);
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get_KeyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set_KeyInterceptorFactory(IKeyInterceptorFactory value);
    protected string get_PickerClassname();
    protected string get_PickerPaperClassname();
    protected string get_PickerPaperStylename();
    protected string get_PickerInlineClassname();
    protected string get_PickerContainerClassname();
    protected string get_PickerInputClassname();
    protected string get_ActionsClassname();
    [CompilerGeneratedAttribute]
public Color get_AdornmentColor();
    [CompilerGeneratedAttribute]
public void set_AdornmentColor(Color value);
    [CompilerGeneratedAttribute]
public string get_AdornmentIcon();
    [CompilerGeneratedAttribute]
public void set_AdornmentIcon(string value);
    [CompilerGeneratedAttribute]
public string get_AdornmentAriaLabel();
    [CompilerGeneratedAttribute]
public void set_AdornmentAriaLabel(string value);
    [CompilerGeneratedAttribute]
public string get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(string value);
    [CompilerGeneratedAttribute]
public EventCallback get_PickerOpened();
    [CompilerGeneratedAttribute]
public void set_PickerOpened(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_PickerClosed();
    [CompilerGeneratedAttribute]
public void set_PickerClosed(EventCallback value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rounded();
    [CompilerGeneratedAttribute]
public void set_Rounded(bool value);
    [CompilerGeneratedAttribute]
public string get_HelperText();
    [CompilerGeneratedAttribute]
public void set_HelperText(string value);
    [CompilerGeneratedAttribute]
public bool get_HelperTextOnFocus();
    [CompilerGeneratedAttribute]
public void set_HelperTextOnFocus(bool value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    protected bool GetDisabledState();
    [CompilerGeneratedAttribute]
public bool get_Underline();
    [CompilerGeneratedAttribute]
public void set_Underline(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentReadOnly();
    [CompilerGeneratedAttribute]
private void set_ParentReadOnly(bool value);
    protected bool GetReadOnlyState();
    [CompilerGeneratedAttribute]
public bool get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowToolbar();
    [CompilerGeneratedAttribute]
public void set_ShowToolbar(bool value);
    [CompilerGeneratedAttribute]
public string get_ToolbarClass();
    [CompilerGeneratedAttribute]
public void set_ToolbarClass(string value);
    [CompilerGeneratedAttribute]
public PickerVariant get_PickerVariant();
    [CompilerGeneratedAttribute]
public void set_PickerVariant(PickerVariant value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Adornment get_Adornment();
    [CompilerGeneratedAttribute]
public void set_Adornment(Adornment value);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public EventCallback`1<string> get_TextChanged();
    [CompilerGeneratedAttribute]
public void set_TextChanged(EventCallback`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ImmediateText();
    [CompilerGeneratedAttribute]
public void set_ImmediateText(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_ActionsClass();
    [CompilerGeneratedAttribute]
public void set_ActionsClass(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<MudPicker`1<T>> get_PickerActions();
    [CompilerGeneratedAttribute]
public void set_PickerActions(RenderFragment`1<MudPicker`1<T>> value);
    [CompilerGeneratedAttribute]
public Margin get_Margin();
    [CompilerGeneratedAttribute]
public void set_Margin(Margin value);
    public IMask get_Mask();
    public void set_Mask(IMask value);
    [CompilerGeneratedAttribute]
public Origin get_AnchorOrigin();
    [CompilerGeneratedAttribute]
public void set_AnchorOrigin(Origin value);
    [CompilerGeneratedAttribute]
public Origin get_TransformOrigin();
    [CompilerGeneratedAttribute]
public void set_TransformOrigin(Origin value);
    [CompilerGeneratedAttribute]
public OverflowBehavior get_OverflowBehavior();
    [CompilerGeneratedAttribute]
public void set_OverflowBehavior(OverflowBehavior value);
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<SetTextAsync>d__176")]
protected Task SetTextAsync(string value, bool callback);
    protected virtual Task StringValueChangedAsync(string value);
    [CompilerGeneratedAttribute]
protected bool get_Open();
    [CompilerGeneratedAttribute]
protected void set_Open(bool value);
    public Task ToggleOpenAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<CloseAsync>d__183")]
public Task CloseAsync(bool submit);
    public Task OpenAsync();
    private Task CloseOverlayAsync();
    protected internal virtual Task SubmitAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<ClearAsync>d__187")]
public virtual Task ClearAsync(bool close);
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<ResetValueAsync>d__188")]
protected virtual Task ResetValueAsync();
    public virtual ValueTask FocusAsync();
    public virtual ValueTask BlurAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<EnsureKeyInterceptorAsync>d__198")]
private Task EnsureKeyInterceptorAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<OnClickAsync>d__199")]
private Task OnClickAsync(MouseEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<HandleKeyDown>d__200")]
private void HandleKeyDown(KeyboardEventArgs args);
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<OnAfterRenderAsync>d__201")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<ToggleStateAsync>d__202")]
protected internal Task ToggleStateAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<OnOpenedAsync>d__203")]
protected virtual Task OnOpenedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<OnClosedAsync>d__204")]
protected virtual Task OnClosedAsync();
    protected virtual Task OnPickerOpenedAsync();
    protected virtual Task OnPickerClosedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<OnHandleKeyDownAsync>d__207")]
protected internal virtual Task OnHandleKeyDownAsync(KeyboardEventArgs args);
    protected virtual void Dispose(bool disposing);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected virtual RenderFragment get_InputContent();
    protected virtual RenderFragment get_PickerContent();
    protected virtual RenderFragment get_Render();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_InputContent>b__211_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudPicker`1/<<get_InputContent>b__211_1>d")]
[CompilerGeneratedAttribute]
private Task <get_InputContent>b__211_1();
    [CompilerGeneratedAttribute]
private void <get_InputContent>b__211_2(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_InputContent>b__211_3(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_2(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_3(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <get_Render>b__215_6(ElementReference __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_7(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_4(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_5(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_Render>b__215_8(RenderTreeBuilder __builder5);
}
public class MudBlazor.MudPickerContent : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudPickerToolbar : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <ShowToolbar>k__BackingField;
    [CompilerGeneratedAttribute]
private Orientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private PickerVariant <PickerVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowToolbar { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Orientation Orientation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public PickerVariant PickerVariant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_ShowToolbar();
    [CompilerGeneratedAttribute]
public void set_ShowToolbar(bool value);
    [CompilerGeneratedAttribute]
public Orientation get_Orientation();
    [CompilerGeneratedAttribute]
public void set_Orientation(Orientation value);
    [CompilerGeneratedAttribute]
public PickerVariant get_PickerVariant();
    [CompilerGeneratedAttribute]
public void set_PickerVariant(PickerVariant value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__22_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudPopover : MudPopoverBase {
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Paper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropShadow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fixed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <AnchorOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <TransformOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private OverflowBehavior <OverflowBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RelativeWidth>k__BackingField;
    protected internal string PopoverClass { get; }
    protected internal string PopoverStyles { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<int> MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Paper { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DropShadow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Fixed { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public double Duration { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public double Delay { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Origin AnchorOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Origin TransformOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public OverflowBehavior OverflowBehavior { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool RelativeWidth { get; public set; }
    protected internal virtual string get_PopoverClass();
    protected internal virtual string get_PopoverStyles();
    internal Direction ConvertDirection(Direction direction);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_Paper();
    [CompilerGeneratedAttribute]
public void set_Paper(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropShadow();
    [CompilerGeneratedAttribute]
public void set_DropShadow(bool value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Fixed();
    [CompilerGeneratedAttribute]
public void set_Fixed(bool value);
    [CompilerGeneratedAttribute]
public double get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(double value);
    [CompilerGeneratedAttribute]
public double get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(double value);
    [CompilerGeneratedAttribute]
public Origin get_AnchorOrigin();
    [CompilerGeneratedAttribute]
public void set_AnchorOrigin(Origin value);
    [CompilerGeneratedAttribute]
public Origin get_TransformOrigin();
    [CompilerGeneratedAttribute]
public void set_TransformOrigin(Origin value);
    [CompilerGeneratedAttribute]
public OverflowBehavior get_OverflowBehavior();
    [CompilerGeneratedAttribute]
public void set_OverflowBehavior(OverflowBehavior value);
    [CompilerGeneratedAttribute]
public bool get_RelativeWidth();
    [CompilerGeneratedAttribute]
public void set_RelativeWidth(bool value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudPopoverBase : MudComponentBase {
    [NullableAttribute("2")]
[ObsoleteAttribute("For Legacy compatibility mode only, will be removed in a future version.")]
private MudPopoverHandler _handler;
    private bool _afterFirstRender;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IMudPopoverService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IPopoverService <PopoverService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Open>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    public Guid Id { get; private set; }
    [InjectAttribute]
[ObsoleteAttribute("Replaced by PopoverService. Will be removed in a future version.")]
public IMudPopoverService Service { get; public set; }
    [InjectAttribute]
protected IPopoverService PopoverService { get; protected set; }
    private string MudBlazor.IPopover.PopoverClass { get; }
    private string MudBlazor.IPopover.PopoverStyles { get; }
    protected internal string PopoverClass { get; }
    protected internal string PopoverStyles { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Open { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Guid get_Id();
    [CompilerGeneratedAttribute]
[ObsoleteAttribute("Set is only needed for legacy mode only. Remove in a future version.")]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public IMudPopoverService get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(IMudPopoverService value);
    [CompilerGeneratedAttribute]
protected IPopoverService get_PopoverService();
    [CompilerGeneratedAttribute]
protected void set_PopoverService(IPopoverService value);
    private sealed virtual override string MudBlazor.IPopover.get_PopoverClass();
    private sealed virtual override string MudBlazor.IPopover.get_PopoverStyles();
    protected internal abstract virtual string get_PopoverClass();
    protected internal abstract virtual string get_PopoverStyles();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Open();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Open(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ChildContent(RenderFragment value);
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverBase/<OnInitializedAsync>d__30")]
protected virtual Task OnInitializedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverBase/<OnParametersSetAsync>d__31")]
protected virtual Task OnParametersSetAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverBase/<OnAfterRenderAsync>d__32")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverBase/<DisposeAsync>d__33")]
[ExcludeFromCodeCoverageAttribute]
public virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(bool firstRender);
}
[ObsoleteAttribute("Please use IPopoverService in conjunction with IMudPopoverHolder. This will be removed in a future version.")]
public class MudBlazor.MudPopoverHandler : object {
    private SemaphoreSlim _semaphore;
    private PopoverJsInterop _popoverJsInterop;
    internal Action _updater;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Fragment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDetached>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ActivationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <UserAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private MudRender <ElementReference>k__BackingField;
    public Guid Id { get; }
    public RenderFragment Fragment { get; internal set; }
    public bool IsConnected { get; internal set; }
    public bool IsDetached { get; internal set; }
    public string Class { get; private set; }
    public string Style { get; private set; }
    public object Tag { get; private set; }
    public bool ShowContent { get; private set; }
    public Nullable`1<DateTime> ActivationDate { get; private set; }
    public Dictionary`2<string, object> UserAttributes { get; public set; }
    public MudRender ElementReference { get; public set; }
    public MudPopoverHandler(RenderFragment fragment, IJSRuntime jsInterop, Action updater);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual RenderFragment get_Fragment();
    [CompilerGeneratedAttribute]
internal void set_Fragment(RenderFragment value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
internal void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDetached();
    [CompilerGeneratedAttribute]
internal void set_IsDetached(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Class();
    [CompilerGeneratedAttribute]
private void set_Class(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowContent();
    [CompilerGeneratedAttribute]
private void set_ShowContent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ActivationDate();
    [CompilerGeneratedAttribute]
private void set_ActivationDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_UserAttributes();
    [CompilerGeneratedAttribute]
public void set_UserAttributes(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual MudRender get_ElementReference();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ElementReference(MudRender value);
    public void SetComponentBaseParameters(MudComponentBase componentBase, string class, string style, bool showContent);
    [ObsoleteAttribute("Use UpdateFragmentAsync instead. This method will be removed in a future version.")]
public void UpdateFragment(RenderFragment fragment, MudComponentBase componentBase, string class, string style, bool showContent);
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverHandler/<UpdateFragmentAsync>d__49")]
public Task UpdateFragmentAsync(RenderFragment fragment, MudComponentBase componentBase, string class, string style, bool showContent);
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverHandler/<Initialize>d__50")]
public Task Initialize();
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverHandler/<Detach>d__51")]
public Task Detach();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MudBlazor.MudPopoverHolder : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Fragment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDetached>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ActivationDate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <UserAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private MudRender <ElementReference>k__BackingField;
    public Guid Id { get; }
    public RenderFragment Fragment { get; internal set; }
    public bool IsConnected { get; internal set; }
    public bool IsDetached { get; internal set; }
    public string Class { get; private set; }
    public string Style { get; private set; }
    public object Tag { get; private set; }
    public bool ShowContent { get; private set; }
    public Nullable`1<DateTime> ActivationDate { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> UserAttributes { get; public set; }
    public MudRender ElementReference { get; public set; }
    public MudPopoverHolder(Guid id);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual RenderFragment get_Fragment();
    [CompilerGeneratedAttribute]
internal void set_Fragment(RenderFragment value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
internal void set_IsConnected(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDetached();
    [CompilerGeneratedAttribute]
internal void set_IsDetached(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Class();
    [CompilerGeneratedAttribute]
private void set_Class(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Style();
    [CompilerGeneratedAttribute]
private void set_Style(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(object value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowContent();
    [CompilerGeneratedAttribute]
private void set_ShowContent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_ActivationDate();
    [CompilerGeneratedAttribute]
private void set_ActivationDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_UserAttributes();
    [CompilerGeneratedAttribute]
public void set_UserAttributes(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual MudRender get_ElementReference();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ElementReference(MudRender value);
    [NullableContextAttribute("1")]
public MudPopoverHolder SetClass(string class);
    [NullableContextAttribute("1")]
public MudPopoverHolder SetStyle(string style);
    [NullableContextAttribute("1")]
public MudPopoverHolder SetShowContent(bool showContent);
    [NullableContextAttribute("1")]
public MudPopoverHolder SetTag(object tag);
    [NullableContextAttribute("1")]
public MudPopoverHolder SetUserAttributes(Dictionary`2<string, object> userAttributes);
    [NullableContextAttribute("1")]
public MudPopoverHolder SetFragment(RenderFragment renderFragment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudPopoverProvider : ComponentBase {
    private bool _isConnectedToService;
    [CompilerGeneratedAttribute]
private IMudPopoverService <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private IPopoverService <PopoverService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MudBlazor.IPopoverObserver.Id>k__BackingField;
    [InjectAttribute]
[ObsoleteAttribute("Use PopoverService instead. This will be removed in a future version")]
public IMudPopoverService Service { get; public set; }
    [InjectAttribute]
internal IPopoverService PopoverService { get; internal set; }
    [CascadingParameterAttribute]
public bool Enabled { get; public set; }
    private Guid MudBlazor.IPopoverObserver.Id { get; }
    [CompilerGeneratedAttribute]
public IMudPopoverService get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(IMudPopoverService value);
    [CompilerGeneratedAttribute]
internal IPopoverService get_PopoverService();
    [CompilerGeneratedAttribute]
internal void set_PopoverService(IPopoverService value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public sealed virtual void Dispose();
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverProvider/<OnAfterRenderAsync>d__16")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    private void Service_FragmentsChanged(object sender, EventArgs e);
    private IEnumerable`1<IMudPopoverHolder> GetActivePopovers();
    [CompilerGeneratedAttribute]
private sealed virtual override Guid MudBlazor.IPopoverObserver.get_Id();
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverProvider/<MudBlazor-IPopoverObserver-PopoverCollectionUpdatedNotificationAsync>d__22")]
private sealed virtual override Task MudBlazor.IPopoverObserver.PopoverCollectionUpdatedNotificationAsync(PopoverHolderContainer container, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Please use PopoverService. This will be removed in a future version.")]
public class MudBlazor.MudPopoverService : object {
    private bool _isInitialized;
    private IJSRuntime _jsRuntime;
    private PopoverOptions _options;
    private PopoverJsInterop _popoverJsInterop;
    private Dictionary`2<Guid, MudPopoverHandler> _handlers;
    private SemaphoreSlim _semaphoreSlim;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler FragmentsChanged;
    public bool ThrowOnDuplicateProvider { get; }
    public IEnumerable`1<MudPopoverHandler> Handlers { get; }
    public MudPopoverService(IJSRuntime jsInterop, IOptions`1<PopoverOptions> options);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_FragmentsChanged(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_FragmentsChanged(EventHandler value);
    public sealed virtual bool get_ThrowOnDuplicateProvider();
    public sealed virtual IEnumerable`1<MudPopoverHandler> get_Handlers();
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverService/<InitializeIfNeeded>d__14")]
public sealed virtual Task InitializeIfNeeded();
    public sealed virtual MudPopoverHandler Register(RenderFragment fragment);
    [AsyncStateMachineAttribute("MudBlazor.MudPopoverService/<Unregister>d__16")]
public sealed virtual Task`1<bool> Unregister(MudPopoverHandler handler);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MudBlazor.MudPopoverService/<CountProviders>d__17")]
public sealed virtual ValueTask`1<int> CountProviders();
    [ExcludeFromCodeCoverageAttribute]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudProgressCircular : MudComponentBase {
    private int _svgValue;
    private ParameterState`1<double> _valueState;
    private static int MagicNumber;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indeterminate>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StrokeWidth>k__BackingField;
    protected string Classname { get; }
    protected string SvgClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Indeterminate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double Min { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double Max { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int StrokeWidth { get; public set; }
    protected string get_Classname();
    protected string get_SvgClassname();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_Indeterminate();
    [CompilerGeneratedAttribute]
public void set_Indeterminate(bool value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public int get_StrokeWidth();
    [CompilerGeneratedAttribute]
public void set_StrokeWidth(int value);
    private void OnValueParameterChanged(ParameterChangedEventArgs`1<double> args);
    protected virtual void OnInitialized();
    private int ToSvgValue(double value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private double <.ctor>b__35_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudProgressLinear : MudComponentBase {
    private ParameterState`1<double> _minState;
    private ParameterState`1<double> _maxState;
    private ParameterState`1<double> _valueState;
    private ParameterState`1<double> _bufferValueState;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indeterminate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rounded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Striped>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Vertical>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BufferValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ValuePercent>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BufferPercent>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Indeterminate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Buffer { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Rounded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Striped { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Vertical { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double Min { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double Max { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public double BufferValue { get; public set; }
    protected double ValuePercent { get; protected set; }
    protected double BufferPercent { get; protected set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_Indeterminate();
    [CompilerGeneratedAttribute]
public void set_Indeterminate(bool value);
    [CompilerGeneratedAttribute]
public bool get_Buffer();
    [CompilerGeneratedAttribute]
public void set_Buffer(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rounded();
    [CompilerGeneratedAttribute]
public void set_Rounded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Striped();
    [CompilerGeneratedAttribute]
public void set_Striped(bool value);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public double get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(double value);
    [CompilerGeneratedAttribute]
public double get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(double value);
    [CompilerGeneratedAttribute]
public double get_BufferValue();
    [CompilerGeneratedAttribute]
public void set_BufferValue(double value);
    private void OnParameterChangedShared();
    [CompilerGeneratedAttribute]
protected double get_ValuePercent();
    [CompilerGeneratedAttribute]
protected void set_ValuePercent(double value);
    [CompilerGeneratedAttribute]
protected double get_BufferPercent();
    [CompilerGeneratedAttribute]
protected void set_BufferPercent(double value);
    protected void UpdatePercentages();
    private double GetPercentage(double input);
    public double GetValuePercent();
    public double GetBufferPercent();
    private string GetStyleBarTransform(double input);
    public string GetStyledBar1Transform();
    public string GetStyledBar2Transform();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private double <.ctor>b__54_0();
    [CompilerGeneratedAttribute]
private double <.ctor>b__54_1();
    [CompilerGeneratedAttribute]
private double <.ctor>b__54_2();
    [CompilerGeneratedAttribute]
private double <.ctor>b__54_3();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudRadio`1 : MudComponentBase {
    [NullableAttribute("2")]
private IMudRadioGroup _parent;
    [NullableAttribute("2")]
private IKeyInterceptor _keyInterceptor;
    private string _elementId;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <KeyInterceptorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <UncheckedColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Placement <Placement>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checked>k__BackingField;
    protected string Classname { get; }
    protected string ButtonClassname { get; }
    protected string RadioIconsClassNames { get; }
    protected string IconClassName { get; }
    protected string CheckedIconClassName { get; }
    protected string ChildSpanClassName { get; }
    [InjectAttribute]
private IKeyInterceptorFactory KeyInterceptorFactory { get; private set; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [NullableAttribute("2")]
[CascadingParameterAttribute]
internal IMudRadioGroup IMudRadioGroup { get; internal set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> UncheckedColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Placement Placement { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    internal bool Checked { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal MudRadioGroup`1<T> MudRadioGroup { get; }
    protected string get_Classname();
    protected string get_ButtonClassname();
    protected string get_RadioIconsClassNames();
    protected string get_IconClassName();
    protected string get_CheckedIconClassName();
    protected string get_ChildSpanClassName();
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get_KeyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set_KeyInterceptorFactory(IKeyInterceptorFactory value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [NullableContextAttribute("2")]
internal IMudRadioGroup get_IMudRadioGroup();
    [NullableContextAttribute("2")]
internal void set_IMudRadioGroup(IMudRadioGroup value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_UncheckedColor();
    [CompilerGeneratedAttribute]
public void set_UncheckedColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Placement get_Placement();
    [CompilerGeneratedAttribute]
public void set_Placement(Placement value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    private bool GetDisabled();
    private bool GetReadOnly();
    [CompilerGeneratedAttribute]
internal bool get_Checked();
    [CompilerGeneratedAttribute]
private void set_Checked(bool value);
    internal MudRadioGroup`1<T> get_MudRadioGroup();
    private Placement ConvertPlacement(Placement placement);
    internal void SetChecked(bool value);
    public Task SelectAsync();
    internal Task OnClickAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudRadio`1/<HandleKeyDownAsync>d__74")]
protected internal Task HandleKeyDownAsync(KeyboardEventArgs keyboardEventArgs);
    [AsyncStateMachineAttribute("MudBlazor.MudRadio`1/<OnInitializedAsync>d__75")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MudBlazor.MudRadio`1/<OnAfterRenderAsync>d__77")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudRadioGroup`1 : MudFormComponent`2<T, T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MudRadio`1<T> _selectedRadio;
    [NullableAttribute("1")]
private HashSet`1<MudRadio`1<T>> _radios;
    [CompilerGeneratedAttribute]
private bool <ParentDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
private bool ParentDisabled { get; private set; }
    [CascadingParameterAttribute]
private bool ParentReadOnly { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string InputClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string InputStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Name { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public T Value { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
private string GetInputClass();
    [CompilerGeneratedAttribute]
private bool get_ParentDisabled();
    [CompilerGeneratedAttribute]
private void set_ParentDisabled(bool value);
    [CompilerGeneratedAttribute]
private bool get_ParentReadOnly();
    [CompilerGeneratedAttribute]
private void set_ParentReadOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_InputClass();
    [CompilerGeneratedAttribute]
public void set_InputClass(string value);
    [CompilerGeneratedAttribute]
public string get_InputStyle();
    [CompilerGeneratedAttribute]
public void set_InputStyle(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    public T get_Value();
    public void set_Value(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    internal bool GetDisabledState();
    internal bool GetReadOnlyState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudRadioGroup`1/<SetSelectedOptionAsync>d__47")]
protected Task SetSelectedOptionAsync(T option, bool updateRadio, bool updateValue);
    [NullableContextAttribute("1")]
public sealed virtual void CheckGenericTypeMatch(object selectItem);
    [NullableContextAttribute("1")]
internal Task SetSelectedRadioAsync(MudRadio`1<T> radio);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudRadioGroup`1/<SetSelectedRadioAsync>d__50")]
protected Task SetSelectedRadioAsync(MudRadio`1<T> radio, bool updateOption);
    [NullableContextAttribute("1")]
internal Task RegisterRadioAsync(MudRadio`1<T> radio);
    [NullableContextAttribute("1")]
internal void UnregisterRadio(MudRadio`1<T> radio);
    [NullableContextAttribute("1")]
protected virtual Task ResetValueAsync();
    private static T GetValueOrDefault(MudRadio`1<T> radio);
    private static bool OptionEquals(T option1, T option2);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <SetSelectedOptionAsync>b__47_0(MudRadio`1<T> r);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__56_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__56_1(RenderTreeBuilder __builder3);
}
public class MudBlazor.MudRangeInput`1 : MudBaseInput`1<Range`1<T>> {
    private string _textStart;
    private string _textEnd;
    [CompilerGeneratedAttribute]
private InputType <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlaceholderStart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlaceholderEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClearButtonClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    private ElementReference _elementReferenceStart;
    private ElementReference _elementReferenceEnd;
    [CompilerGeneratedAttribute]
private string <SeparatorIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
public InputType InputType { get; public set; }
    protected string InputClassname { get; }
    protected string AdornmentClassname { get; }
    [ParameterAttribute]
public string PlaceholderStart { get; public set; }
    [ParameterAttribute]
public string PlaceholderEnd { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClearButtonClick { get; public set; }
    [ParameterAttribute]
public bool Clearable { get; public set; }
    protected string InputTypeString { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string SeparatorIcon { get; public set; }
    public string TextStart { get; public set; }
    public string TextEnd { get; public set; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public InputType get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(InputType value);
    internal virtual InputType GetInputType();
    protected string get_InputClassname();
    protected string get_AdornmentClassname();
    [CompilerGeneratedAttribute]
public string get_PlaceholderStart();
    [CompilerGeneratedAttribute]
public void set_PlaceholderStart(string value);
    [CompilerGeneratedAttribute]
public string get_PlaceholderEnd();
    [CompilerGeneratedAttribute]
public void set_PlaceholderEnd(string value);
    protected bool IsClearable();
    [AsyncStateMachineAttribute("MudBlazor.MudRangeInput`1/<ClearButtonClickHandlerAsync>d__23")]
protected virtual Task ClearButtonClickHandlerAsync(MouseEventArgs e);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClearButtonClick();
    [CompilerGeneratedAttribute]
public void set_OnClearButtonClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    protected string get_InputTypeString();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_SeparatorIcon();
    [CompilerGeneratedAttribute]
public void set_SeparatorIcon(string value);
    public ValueTask FocusStartAsync();
    public ValueTask SelectStartAsync();
    public ValueTask SelectRangeStartAsync(int pos1, int pos2);
    public ValueTask FocusEndAsync();
    public ValueTask SelectEndAsync();
    public ValueTask SelectRangeEndAsync(int pos1, int pos2);
    public string get_TextStart();
    public void set_TextStart(string value);
    public string get_TextEnd();
    public void set_TextEnd(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudRangeInput`1/<UpdateTextPropertyAsync>d__56")]
protected virtual Task UpdateTextPropertyAsync(bool updateValue);
    [AsyncStateMachineAttribute("MudBlazor.MudRangeInput`1/<UpdateValuePropertyAsync>d__57")]
protected virtual Task UpdateValuePropertyAsync(bool updateText);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private bool <get_Classname>b__4_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool updateValue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool updateText);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_0(string __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_1(ElementReference __value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_2(string __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_3(ElementReference __value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudRating : MudComponentBase {
    private ParameterState`1<int> _selectedValueState;
    private Nullable`1<int> _hoveredValue;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RatingItemsClass>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RatingItemsStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmptyIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <FullIconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <EmptyIconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<int> <SelectedValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedValue>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<int>> <HoveredValueChanged>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string ClassName { get; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string RatingItemsClass { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string RatingItemsStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Name { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int MaxValue { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string FullIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string EmptyIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> FullIconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> EmptyIconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<int> SelectedValueChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public int SelectedValue { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<Nullable`1<int>> HoveredValueChanged { get; public set; }
    internal Nullable`1<int> HoveredValue { get; }
    internal bool IsRatingHover { get; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_ClassName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RatingItemsClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RatingItemsClass(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_RatingItemsStyle();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RatingItemsStyle(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_MaxValue();
    [CompilerGeneratedAttribute]
public void set_MaxValue(int value);
    [CompilerGeneratedAttribute]
public string get_FullIcon();
    [CompilerGeneratedAttribute]
public void set_FullIcon(string value);
    [CompilerGeneratedAttribute]
public string get_EmptyIcon();
    [CompilerGeneratedAttribute]
public void set_EmptyIcon(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_FullIconColor();
    [CompilerGeneratedAttribute]
public void set_FullIconColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_EmptyIconColor();
    [CompilerGeneratedAttribute]
public void set_EmptyIconColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<int> get_SelectedValueChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_SelectedValueChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public int get_SelectedValue();
    [CompilerGeneratedAttribute]
public void set_SelectedValue(int value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<int>> get_HoveredValueChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_HoveredValueChanged(EventCallback`1<Nullable`1<int>> value);
    internal Nullable`1<int> get_HoveredValue();
    internal Task SetHoveredValueAsync(Nullable`1<int> hoveredValue);
    internal bool get_IsRatingHover();
    [AsyncStateMachineAttribute("MudBlazor.MudRating/<HandleItemClickedAsync>d__74")]
private Task HandleItemClickedAsync(int itemValue);
    internal Task HandleItemHoveredAsync(Nullable`1<int> itemValue);
    [AsyncStateMachineAttribute("MudBlazor.MudRating/<IncreaseValueAsync>d__76")]
private Task IncreaseValueAsync(int val);
    [AsyncStateMachineAttribute("MudBlazor.MudRating/<HandleKeyDownAsync>d__77")]
protected internal Task HandleKeyDownAsync(KeyboardEventArgs keyboardEventArgs);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private int <.ctor>b__2_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<int> <.ctor>b__2_1();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__78_0(RenderTreeBuilder __builder2);
}
public class MudBlazor.MudRatingItem : MudComponentBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MudRating <Rating>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <ItemClicked>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<int>> <ItemHovered>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ItemColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ItemIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [NullableAttribute("1")]
protected string ClassName { get; }
    [NullableAttribute("2")]
[CascadingParameterAttribute]
private MudRating Rating { get; private set; }
    [ParameterAttribute]
public int ItemValue { get; public set; }
    [ParameterAttribute]
public Size Size { get; public set; }
    [ParameterAttribute]
public Color Color { get; public set; }
    [ParameterAttribute]
public bool Ripple { get; public set; }
    [ParameterAttribute]
public bool Disabled { get; public set; }
    [ParameterAttribute]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> ItemClicked { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<int>> ItemHovered { get; public set; }
    internal Color ItemColor { get; internal set; }
    [NullableAttribute("2")]
internal string ItemIcon { get; internal set; }
    internal bool Active { get; internal set; }
    private bool Checked { get; }
    [NullableContextAttribute("1")]
protected string get_ClassName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private MudRating get_Rating();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Rating(MudRating value);
    [CompilerGeneratedAttribute]
public int get_ItemValue();
    [CompilerGeneratedAttribute]
public void set_ItemValue(int value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_ItemClicked();
    [CompilerGeneratedAttribute]
public void set_ItemClicked(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<int>> get_ItemHovered();
    [CompilerGeneratedAttribute]
public void set_ItemHovered(EventCallback`1<Nullable`1<int>> value);
    [CompilerGeneratedAttribute]
internal Color get_ItemColor();
    [CompilerGeneratedAttribute]
internal void set_ItemColor(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_ItemIcon();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ItemIcon(string value);
    [CompilerGeneratedAttribute]
internal bool get_Active();
    [CompilerGeneratedAttribute]
internal void set_Active(bool value);
    private bool get_Checked();
    protected virtual void OnParametersSet();
    [NullableContextAttribute("2")]
internal string SelectIcon();
    internal Color SelectIconColor();
    [NullableContextAttribute("1")]
internal Task HandlePointerOutAsync(PointerEventArgs e);
    [NullableContextAttribute("1")]
internal Task HandlePointerOverAsync(PointerEventArgs e);
    [NullableContextAttribute("1")]
private Task HandleClickAsync();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudRender : ComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    private sealed virtual override void MudBlazor.Interfaces.IMudStateHasChanged.StateHasChanged();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudRTLProvider : MudComponentBase {
    [NullableAttribute("1")]
private ParameterState`1<bool> _rtlState;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    private void OnRightToLeftParameterChange();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__13_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__13_1(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudScrollToTop : MudComponentBase {
    private IScrollListener _scrollListener;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IScrollListenerFactory <ScrollListenerFactory>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IScrollManager <ScrollManager>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisibleCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HiddenCssClass>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TopOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ScrollBehavior <ScrollBehavior>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<ScrollEventArgs> <OnScroll>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
[InjectAttribute]
private IScrollListenerFactory ScrollListenerFactory { get; private set; }
    [NullableAttribute("1")]
[InjectAttribute]
private IScrollManager ScrollManager { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Selector { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string VisibleCssClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string HiddenCssClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int TopOffset { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public ScrollBehavior ScrollBehavior { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<ScrollEventArgs> OnScroll { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IScrollListenerFactory get_ScrollListenerFactory();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_ScrollListenerFactory(IScrollListenerFactory value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private IScrollManager get_ScrollManager();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_ScrollManager(IScrollManager value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public string get_VisibleCssClass();
    [CompilerGeneratedAttribute]
public void set_VisibleCssClass(string value);
    [CompilerGeneratedAttribute]
public string get_HiddenCssClass();
    [CompilerGeneratedAttribute]
public void set_HiddenCssClass(string value);
    [CompilerGeneratedAttribute]
public int get_TopOffset();
    [CompilerGeneratedAttribute]
public void set_TopOffset(int value);
    [CompilerGeneratedAttribute]
public ScrollBehavior get_ScrollBehavior();
    [CompilerGeneratedAttribute]
public void set_ScrollBehavior(ScrollBehavior value);
    [CompilerGeneratedAttribute]
public EventCallback`1<ScrollEventArgs> get_OnScroll();
    [CompilerGeneratedAttribute]
public void set_OnScroll(EventCallback`1<ScrollEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    protected virtual void OnAfterRender(bool firstRender);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudScrollToTop/<ScrollListener_OnScroll>d__48")]
private void ScrollListener_OnScroll(object sender, ScrollEventArgs e);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudScrollToTop/<OnButtonClick>d__49")]
private Task OnButtonClick(MouseEventArgs args);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudSelect`1 : MudBaseInput`1<T> {
    private HashSet`1<T> _selectedValues;
    private IEqualityComparer`1<T> _comparer;
    private bool _dense;
    private string multiSelectionText;
    private Nullable`1<bool> _selectAllChecked;
    private IKeyInterceptor _keyInterceptor;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <KeyInterceptorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IScrollManager <ScrollManager>k__BackingField;
    private string _elementId;
    [CompilerGeneratedAttribute]
private string <OuterClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputClass>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <OnOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback <OnClose>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopoverClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectAll>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectAllText>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<IEnumerable`1<T>> <SelectedValuesChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<List`1<string>, string> <MultiSelectionTextFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    private Func`2<T, string> _toStringFunc;
    private MudInput`1<string> _elementReference;
    private TaskCompletionSource _renderComplete;
    [CompilerGeneratedAttribute]
private Action`1<ICollection`1<T>> SelectionChangedFromOutside;
    private bool _multiSelection;
    protected internal List`1<MudSelectItem`1<T>> _items;
    protected Dictionary`2<T, MudSelectItem`1<T>> _valueLookup;
    protected Dictionary`2<T, MudSelectItem`1<T>> _shadowLookup;
    private string _activeItemId;
    [CompilerGeneratedAttribute]
private int <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <AnchorOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private Origin <TransformOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Strict>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockScroll>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClearButtonClick>k__BackingField;
    internal bool _open;
    [CompilerGeneratedAttribute]
private string <_currentIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndeterminateIcon>k__BackingField;
    protected string OuterClassname { get; }
    protected string Classname { get; }
    protected string InputClassname { get; }
    [InjectAttribute]
private IKeyInterceptorFactory KeyInterceptorFactory { get; private set; }
    [InjectAttribute]
private IScrollManager ScrollManager { get; private set; }
    [CategoryAttribute("Appearance")]
[ParameterAttribute]
public string OuterClass { get; public set; }
    [CategoryAttribute("Appearance")]
[ParameterAttribute]
public string InputClass { get; public set; }
    [CategoryAttribute("Behavior")]
[ParameterAttribute]
public EventCallback OnOpen { get; public set; }
    [CategoryAttribute("Behavior")]
[ParameterAttribute]
public EventCallback OnClose { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string PopoverClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string ListClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string OpenIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public bool SelectAll { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string SelectAllText { get; public set; }
    [ParameterAttribute]
public EventCallback`1<IEnumerable`1<T>> SelectedValuesChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Func`2<List`1<string>, string> MultiSelectionTextFunc { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Delimiter { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public IEnumerable`1<T> SelectedValues { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public IEqualityComparer`1<T> Comparer { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public Func`2<T, string> ToStringFunc { get; public set; }
    protected bool CanRenderValue { get; }
    protected bool IsValueInList { get; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public bool MultiSelection { get; public set; }
    public IReadOnlyList`1<MudSelectItem`1<T>> Items { get; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public int MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public Origin AnchorOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public Origin TransformOrigin { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Strict { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Clearable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ClearIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List behavior")]
public bool LockScroll { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClearButtonClick { get; public set; }
    public string _currentIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string UncheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("List appearance")]
public string IndeterminateIcon { get; public set; }
    protected string SelectAllCheckBoxIcon { get; }
    protected string get_OuterClassname();
    protected string get_Classname();
    protected string get_InputClassname();
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get_KeyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set_KeyInterceptorFactory(IKeyInterceptorFactory value);
    [CompilerGeneratedAttribute]
private IScrollManager get_ScrollManager();
    [CompilerGeneratedAttribute]
private void set_ScrollManager(IScrollManager value);
    private Task SelectNextItem();
    private Task SelectPreviousItem();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectAdjacentItem>d__23")]
private Task SelectAdjacentItem(int direction);
    private ValueTask ScrollToItemAsync(MudSelectItem`1<T> item);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectFirstItem>d__25")]
private Task SelectFirstItem(string startChar);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectLastItem>d__26")]
private Task SelectLastItem();
    [CompilerGeneratedAttribute]
public string get_OuterClass();
    [CompilerGeneratedAttribute]
public void set_OuterClass(string value);
    [CompilerGeneratedAttribute]
public string get_InputClass();
    [CompilerGeneratedAttribute]
public void set_InputClass(string value);
    [CompilerGeneratedAttribute]
public EventCallback get_OnOpen();
    [CompilerGeneratedAttribute]
public void set_OnOpen(EventCallback value);
    [CompilerGeneratedAttribute]
public EventCallback get_OnClose();
    [CompilerGeneratedAttribute]
public void set_OnClose(EventCallback value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_PopoverClass();
    [CompilerGeneratedAttribute]
public void set_PopoverClass(string value);
    [CompilerGeneratedAttribute]
public string get_ListClass();
    [CompilerGeneratedAttribute]
public void set_ListClass(string value);
    public bool get_Dense();
    public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public string get_OpenIcon();
    [CompilerGeneratedAttribute]
public void set_OpenIcon(string value);
    [CompilerGeneratedAttribute]
public string get_CloseIcon();
    [CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_SelectAll();
    [CompilerGeneratedAttribute]
public void set_SelectAll(bool value);
    [CompilerGeneratedAttribute]
public string get_SelectAllText();
    [CompilerGeneratedAttribute]
public void set_SelectAllText(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IEnumerable`1<T>> get_SelectedValuesChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValuesChanged(EventCallback`1<IEnumerable`1<T>> value);
    [CompilerGeneratedAttribute]
public Func`2<List`1<string>, string> get_MultiSelectionTextFunc();
    [CompilerGeneratedAttribute]
public void set_MultiSelectionTextFunc(Func`2<List`1<string>, string> value);
    [CompilerGeneratedAttribute]
public string get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(string value);
    public IEnumerable`1<T> get_SelectedValues();
    public void set_SelectedValues(IEnumerable`1<T> value);
    public IEqualityComparer`1<T> get_Comparer();
    public void set_Comparer(IEqualityComparer`1<T> value);
    public Func`2<T, string> get_ToStringFunc();
    public void set_ToStringFunc(Func`2<T, string> value);
    protected virtual void OnAfterRender(bool firstRender);
    private Task WaitForRender();
    protected bool get_CanRenderValue();
    protected bool get_IsValueInList();
    protected RenderFragment GetSelectedValuePresenter();
    protected virtual Task UpdateValuePropertyAsync(bool updateText);
    protected virtual Task UpdateTextPropertyAsync(bool updateValue);
    [CompilerGeneratedAttribute]
internal void add_SelectionChangedFromOutside(Action`1<ICollection`1<T>> value);
    [CompilerGeneratedAttribute]
internal void remove_SelectionChangedFromOutside(Action`1<ICollection`1<T>> value);
    public sealed virtual bool get_MultiSelection();
    public sealed virtual void set_MultiSelection(bool value);
    public IReadOnlyList`1<MudSelectItem`1<T>> get_Items();
    internal bool Add(MudSelectItem`1<T> item);
    internal void Remove(MudSelectItem`1<T> item);
    [CompilerGeneratedAttribute]
public int get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(int value);
    [CompilerGeneratedAttribute]
public Origin get_AnchorOrigin();
    [CompilerGeneratedAttribute]
public void set_AnchorOrigin(Origin value);
    [CompilerGeneratedAttribute]
public Origin get_TransformOrigin();
    [CompilerGeneratedAttribute]
public void set_TransformOrigin(Origin value);
    [CompilerGeneratedAttribute]
public bool get_Strict();
    [CompilerGeneratedAttribute]
public void set_Strict(bool value);
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    [CompilerGeneratedAttribute]
public string get_ClearIcon();
    [CompilerGeneratedAttribute]
public void set_ClearIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_LockScroll();
    [CompilerGeneratedAttribute]
public void set_LockScroll(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClearButtonClick();
    [CompilerGeneratedAttribute]
public void set_OnClearButtonClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public string get__currentIcon();
    [CompilerGeneratedAttribute]
public void set__currentIcon(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectOption>d__160")]
public Task SelectOption(int index);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectOption>d__161")]
public Task SelectOption(object obj);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<HilightItemForValueAsync>d__162")]
private void HilightItemForValueAsync(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<HilightItem>d__163")]
private void HilightItem(MudSelectItem`1<T> item);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<HilightSelectedValue>d__164")]
private Task HilightSelectedValue();
    private void UpdateSelectAllChecked();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<ToggleMenu>d__166")]
public Task ToggleMenu();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<OpenMenu>d__167")]
public Task OpenMenu();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<CloseMenu>d__168")]
public Task CloseMenu(bool focusAgain);
    private void UpdateIcon();
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<OnAfterRenderAsync>d__172")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public sealed virtual void CheckGenericTypeMatch(object select_item);
    public virtual ValueTask FocusAsync();
    public virtual ValueTask BlurAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectClearButtonClickHandlerAsync>d__178")]
protected ValueTask SelectClearButtonClickHandlerAsync(MouseEventArgs e);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SetCustomizedTextAsync>d__179")]
protected Task SetCustomizedTextAsync(string text, bool updateValue, List`1<string> selectedConvertedValues, Func`2<List`1<string>, string> multiSelectionTextFunc);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_UncheckedIcon();
    [CompilerGeneratedAttribute]
public void set_UncheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_IndeterminateIcon();
    [CompilerGeneratedAttribute]
public void set_IndeterminateIcon(string value);
    protected string get_SelectAllCheckBoxIcon();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<HandleKeyDown>d__194")]
internal void HandleKeyDown(KeyboardEventArgs obj);
    internal void HandleKeyUp(KeyboardEventArgs obj);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<Clear>d__196")]
public Task Clear();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectAllClickAsync>d__197")]
private Task SelectAllClickAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<SelectAllItems>d__198")]
private Task SelectAllItems();
    public void RegisterShadowItem(MudSelectItem`1<T> item);
    public void UnregisterShadowItem(MudSelectItem`1<T> item);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<OnFocusOutAsync>d__201")]
private Task OnFocusOutAsync(FocusEventArgs focusEventArgs);
    internal Task OnBlurAsync(FocusEventArgs obj);
    protected virtual void Dispose(bool disposing);
    protected virtual bool HasValue(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<ForceUpdate>d__205")]
public virtual Task ForceUpdate();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <SelectAdjacentItem>b__23_0(MudSelectItem`1<T> x);
    [CompilerGeneratedAttribute]
private string <UpdateTextPropertyAsync>b__107_0(T x);
    [CompilerGeneratedAttribute]
private string <UpdateTextPropertyAsync>b__107_1(T x);
    [CompilerGeneratedAttribute]
private string <UpdateTextPropertyAsync>b__107_2(T x);
    [CompilerGeneratedAttribute]
private string <SelectOption>b__161_0(T x);
    [CompilerGeneratedAttribute]
private string <SelectOption>b__161_1(T x);
    [CompilerGeneratedAttribute]
private string <SelectOption>b__161_2(T x);
    [CompilerGeneratedAttribute]
private bool <OpenMenu>b__167_0(MudSelectItem`1<T> x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private bool <HandleKeyDown>b__194_0(MudSelectItem`1<T> x);
    [CompilerGeneratedAttribute]
private string <SelectAllItems>b__198_2(T x);
    [CompilerGeneratedAttribute]
private string <SelectAllItems>b__198_3(T x);
    [CompilerGeneratedAttribute]
private string <SelectAllItems>b__198_4(T x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_2(RenderTreeBuilder __builder3);
    [AsyncStateMachineAttribute("MudBlazor.MudSelect`1/<<BuildRenderTree>b__206_4>d")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__206_4(MouseEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_5(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_6(MudInput`1<string> __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_7(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_8(RenderTreeBuilder __builder5);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_9(string __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_10(RenderTreeBuilder __builder6);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__206_11(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__206_1();
}
public class MudBlazor.MudSelectItem`1 : MudBaseSelectItem {
    private IMudSelect _parent;
    [CompilerGeneratedAttribute]
private string <ItemId>k__BackingField;
    private IMudShadowSelect _shadowParent;
    private bool _selected;
    [CompilerGeneratedAttribute]
private bool <HideContent>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    internal string ItemId { get; }
    [CascadingParameterAttribute]
internal IMudSelect IMudSelect { get; internal set; }
    [CascadingParameterAttribute]
internal IMudShadowSelect IMudShadowSelect { get; internal set; }
    [CascadingParameterAttribute]
internal bool HideContent { get; internal set; }
    internal MudSelect`1<T> MudSelect { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Value { get; public set; }
    protected bool MultiSelection { get; }
    internal bool Selected { get; internal set; }
    protected string CheckBoxIcon { get; }
    protected string DisplayString { get; }
    private string GetCssClasses();
    [CompilerGeneratedAttribute]
internal string get_ItemId();
    internal IMudSelect get_IMudSelect();
    internal void set_IMudSelect(IMudSelect value);
    internal IMudShadowSelect get_IMudShadowSelect();
    internal void set_IMudShadowSelect(IMudShadowSelect value);
    [CompilerGeneratedAttribute]
internal bool get_HideContent();
    [CompilerGeneratedAttribute]
internal void set_HideContent(bool value);
    internal MudSelect`1<T> get_MudSelect();
    private void OnUpdateSelectionStateFromOutside(IEnumerable`1<T> selection);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    protected bool get_MultiSelection();
    internal bool get_Selected();
    internal void set_Selected(bool value);
    protected string get_CheckBoxIcon();
    protected string get_DisplayString();
    private void OnClicked();
    public sealed virtual void Dispose();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <set_IMudSelect>b__7_0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__35_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudSimpleTable : MudComponentBase {
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bordered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Striped>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Hover { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Bordered { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Striped { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool FixedHeader { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Hover();
    [CompilerGeneratedAttribute]
public void set_Hover(bool value);
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bordered();
    [CompilerGeneratedAttribute]
public void set_Bordered(bool value);
    [CompilerGeneratedAttribute]
public bool get_Striped();
    [CompilerGeneratedAttribute]
public void set_Striped(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixedHeader();
    [CompilerGeneratedAttribute]
public void set_FixedHeader(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudSkeleton : MudComponentBase {
    [CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private SkeletonType <SkeletonType>k__BackingField;
    [CompilerGeneratedAttribute]
private Animation <Animation>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string Stylename { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Width { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Height { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public SkeletonType SkeletonType { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Animation Animation { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_Stylename();
    [CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public string get_Width();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_SkeletonType(SkeletonType value);
    [CompilerGeneratedAttribute]
public SkeletonType get_SkeletonType();
    [CompilerGeneratedAttribute]
public void set_Animation(Animation value);
    [CompilerGeneratedAttribute]
public Animation get_Animation();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudSlider`1 : MudComponentBase {
    private int _tickMarkCount;
    private bool _nullableValueResetToDefault;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<T> _valueState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<Nullable`1<T>> _nullableValueState;
    [CompilerGeneratedAttribute]
private T <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Step>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<T>> <NullableValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<T> <NullableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Immediate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TickMarks>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <TickMarkLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValueLabel>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ValueLabelFormat>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<SliderContext`1<T>> <ValueLabelContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public T Min { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public T Max { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Validation")]
public T Step { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public EventCallback`1<T> ValueChanged { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<T>> NullableValueChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public Nullable`1<T> NullableValue { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Immediate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Vertical { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool TickMarks { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public String[] TickMarkLabels { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool ValueLabel { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public CultureInfo Culture { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ValueLabelFormat { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment`1<SliderContext`1<T>> ValueLabelContent { get; public set; }
    [NullableAttribute("1")]
private string GetValueText { get; }
    [NullableAttribute("1")]
private string Width { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public T get_Min();
    [CompilerGeneratedAttribute]
public void set_Min(T value);
    [CompilerGeneratedAttribute]
public T get_Max();
    [CompilerGeneratedAttribute]
public void set_Max(T value);
    [CompilerGeneratedAttribute]
public T get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(T value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<T>> get_NullableValueChanged();
    [CompilerGeneratedAttribute]
public void set_NullableValueChanged(EventCallback`1<Nullable`1<T>> value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public Nullable`1<T> get_NullableValue();
    [CompilerGeneratedAttribute]
public void set_NullableValue(Nullable`1<T> value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_Immediate();
    [CompilerGeneratedAttribute]
public void set_Immediate(bool value);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(bool value);
    [CompilerGeneratedAttribute]
public bool get_TickMarks();
    [CompilerGeneratedAttribute]
public void set_TickMarks(bool value);
    [CompilerGeneratedAttribute]
public String[] get_TickMarkLabels();
    [CompilerGeneratedAttribute]
public void set_TickMarkLabels(String[] value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public bool get_ValueLabel();
    [CompilerGeneratedAttribute]
public void set_ValueLabel(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ValueLabelFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ValueLabelFormat(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<SliderContext`1<T>> get_ValueLabelContent();
    [CompilerGeneratedAttribute]
public void set_ValueLabelContent(RenderFragment`1<SliderContext`1<T>> value);
    protected virtual void OnParametersSet();
    private double CalculatePosition();
    [NullableContextAttribute("1")]
private string get_GetValueText();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudSlider`1/<SetValueTextAsync>d__91")]
private Task SetValueTextAsync(string text);
    [NullableContextAttribute("1")]
private Task OnValueParameterChangedAsync(ParameterChangedEventArgs`1<T> arg);
    [NullableContextAttribute("1")]
private Task OnNullableValueParameterChangedAsync(ParameterChangedEventArgs`1<Nullable`1<T>> arg);
    [NullableContextAttribute("1")]
private string get_Width();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private T <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <.ctor>b__4_1();
    [CompilerGeneratedAttribute]
private Nullable`1<T> <.ctor>b__4_2();
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<T>> <.ctor>b__4_3();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__96_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudSnackbarElement : MudComponentBase {
    private RenderFragment _css;
    [CompilerGeneratedAttribute]
private Snackbar <Snackbar>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CloseIcon>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    [ParameterAttribute]
public Snackbar Snackbar { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
public string CloseIcon { get; public set; }
    private string Action { get; }
    private Color ActionColor { get; }
    private Variant ActionVariant { get; }
    [NullableAttribute("1")]
private string AnimationStyle { get; }
    private string SnackbarClass { get; }
    private bool ShowActionButton { get; }
    private bool ShowCloseIcon { get; }
    private bool HideIcon { get; }
    private string Icon { get; }
    private Color IconColor { get; }
    private Size IconSize { get; }
    private SnackbarMessage Message { get; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    [CompilerGeneratedAttribute]
public Snackbar get_Snackbar();
    [CompilerGeneratedAttribute]
public void set_Snackbar(Snackbar value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CloseIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CloseIcon(string value);
    private string get_Action();
    private Color get_ActionColor();
    private Variant get_ActionVariant();
    [NullableContextAttribute("1")]
private string get_AnimationStyle();
    private string get_SnackbarClass();
    private bool get_ShowActionButton();
    private bool get_ShowCloseIcon();
    private bool get_HideIcon();
    private string get_Icon();
    private Color get_IconColor();
    private Size get_IconSize();
    private void ActionClicked();
    private void CloseIconClicked();
    private SnackbarMessage get_Message();
    private void SnackbarClicked();
    private void SnackbarUpdated();
    protected virtual void OnInitialized();
    protected void InteractionStartHandler();
    protected void InteractionEndHandler();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <OnInitialized>b__37_0(RenderTreeBuilder builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudSnackbarProvider : MudComponentBase {
    [CompilerGeneratedAttribute]
private ISnackbar <Snackbars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [InjectAttribute]
private ISnackbar Snackbars { get; private set; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    protected IEnumerable`1<Snackbar> Snackbar { get; }
    protected string Classname { get; }
    [CompilerGeneratedAttribute]
private ISnackbar get_Snackbars();
    [CompilerGeneratedAttribute]
private void set_Snackbars(ISnackbar value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    protected IEnumerable`1<Snackbar> get_Snackbar();
    protected string get_Classname();
    private string GetPositionClass();
    protected virtual void OnInitialized();
    private void OnSnackbarsUpdated();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudSpacer : ComponentBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudStack : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Spacing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Justify> <Justify>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<AlignItems> <AlignItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StretchItems> <StretchItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Wrap> <Wrap>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Row { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Reverse { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Spacing { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<Justify> Justify { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<AlignItems> AlignItems { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<StretchItems> StretchItems { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Nullable`1<Wrap> Wrap { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Row();
    [CompilerGeneratedAttribute]
public void set_Row(bool value);
    [CompilerGeneratedAttribute]
public bool get_Reverse();
    [CompilerGeneratedAttribute]
public void set_Reverse(bool value);
    [CompilerGeneratedAttribute]
public int get_Spacing();
    [CompilerGeneratedAttribute]
public void set_Spacing(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<Justify> get_Justify();
    [CompilerGeneratedAttribute]
public void set_Justify(Nullable`1<Justify> value);
    [CompilerGeneratedAttribute]
public Nullable`1<AlignItems> get_AlignItems();
    [CompilerGeneratedAttribute]
public void set_AlignItems(Nullable`1<AlignItems> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StretchItems> get_StretchItems();
    [CompilerGeneratedAttribute]
public void set_StretchItems(Nullable`1<StretchItems> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Wrap> get_Wrap();
    [CompilerGeneratedAttribute]
public void set_Wrap(Nullable`1<Wrap> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudSwipeArea : MudComponentBase {
    private static String[] _preventDefaultEventNames;
    private Nullable`1<double> _swipeDelta;
    [NullableAttribute("2")]
internal Int32[] _listenerIds;
    internal Nullable`1<double> _xDown;
    internal Nullable`1<double> _yDown;
    private bool _preventDefaultChanged;
    private ElementReference _componentRef;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<SwipeEventArgs> <OnSwipeEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sensitivity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventDefault>k__BackingField;
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<SwipeEventArgs> OnSwipeEnd { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int Sensitivity { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool PreventDefault { get; public set; }
    private static MudSwipeArea();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public EventCallback`1<SwipeEventArgs> get_OnSwipeEnd();
    [CompilerGeneratedAttribute]
public void set_OnSwipeEnd(EventCallback`1<SwipeEventArgs> value);
    [CompilerGeneratedAttribute]
public int get_Sensitivity();
    [CompilerGeneratedAttribute]
public void set_Sensitivity(int value);
    [CompilerGeneratedAttribute]
public bool get_PreventDefault();
    [CompilerGeneratedAttribute]
public void set_PreventDefault(bool value);
    [AsyncStateMachineAttribute("MudBlazor.MudSwipeArea/<SetParametersAsync>d__23")]
public virtual Task SetParametersAsync(ParameterView parameters);
    [AsyncStateMachineAttribute("MudBlazor.MudSwipeArea/<SetPreventDefaultInternal>d__24")]
private Task SetPreventDefaultInternal(bool value);
    [AsyncStateMachineAttribute("MudBlazor.MudSwipeArea/<OnAfterRenderAsync>d__25")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    internal void OnTouchStart(TouchEventArgs arg);
    [AsyncStateMachineAttribute("MudBlazor.MudSwipeArea/<OnTouchEnd>d__27")]
internal Task OnTouchEnd(TouchEventArgs arg);
    internal void OnTouchCancel(TouchEventArgs arg);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(ParameterView parameters);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__29_0(ElementReference __value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudSwitch`1 : MudBooleanInput`1<T> {
    private string _elementId;
    [NullableAttribute("2")]
private IKeyInterceptor _keyInterceptor;
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory <KeyInterceptorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <UncheckedColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelPosition <LabelPosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ThumbIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ThumbIconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [InjectAttribute]
private IKeyInterceptorFactory KeyInterceptorFactory { get; private set; }
    protected string Classname { get; }
    protected string LabelClassname { get; }
    protected string SwitchLabelClassname { get; }
    protected string SwitchClassname { get; }
    protected string TrackClassname { get; }
    protected string ThumbClassname { get; }
    protected string SpanClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color UncheckedColor { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Label { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public LabelPosition LabelPosition { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ThumbIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color ThumbIconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [CompilerGeneratedAttribute]
private IKeyInterceptorFactory get_KeyInterceptorFactory();
    [CompilerGeneratedAttribute]
private void set_KeyInterceptorFactory(IKeyInterceptorFactory value);
    protected string get_Classname();
    protected string get_LabelClassname();
    protected string get_SwitchLabelClassname();
    protected string get_SwitchClassname();
    protected string get_TrackClassname();
    protected string get_ThumbClassname();
    protected string get_SpanClassname();
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Color get_UncheckedColor();
    [CompilerGeneratedAttribute]
public void set_UncheckedColor(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Label();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public LabelPosition get_LabelPosition();
    [CompilerGeneratedAttribute]
public void set_LabelPosition(LabelPosition value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ThumbIcon();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ThumbIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_ThumbIconColor();
    [CompilerGeneratedAttribute]
public void set_ThumbIconColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    protected internal void HandleKeyDown(KeyboardEventArgs obj);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudSwitch`1/<OnAfterRenderAsync>d__58")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__60_2(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTable`1 : MudTableBase {
    private T _selectedItem;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<T> _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<T> _preEditSort;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEqualityComparer`1<T> _comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TableGroupDefinition`1<T> _groupBy;
    private bool _currentRenderFilteredItemsCached;
    private CancellationTokenSource _cancellationTokenSrc;
    [NullableAttribute("1")]
private TableData`1<T> _serverData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <RowTemplate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <ChildRowContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <RowEditingTemplate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <RowEditableFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <NoRecordsContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <LoadingContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HorizontalScrollbar>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, bool> <Filter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<TableRowClickEventArgs`1<T>> <OnRowClick>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<TableRowHoverEventArgs`1<T>> <OnRowMouseEnter>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<TableRowHoverEventArgs`1<T>> <OnRowMouseLeave>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<T, int, string> <RowClassFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<T, int, string> <RowStyleFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <SelectedItemChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<HashSet`1<T>> <SelectedItemsChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<TableGroupData`2<object, T>> <GroupHeaderTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupHeaderClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupHeaderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupFooterClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupFooterStyle>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<TableGroupData`2<object, T>> <GroupFooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FilteringRunCount>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TableContext`1<T> <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<TableState, CancellationToken, Task`1<TableData`1<T>>> <ServerData>k__BackingField;
    [MemberNotNullWhenAttribute("True", "_preEditSort")]
private bool HasPreEditSort { get; }
    [MemberNotNullWhenAttribute("True", "ServerData")]
internal bool HasServerData { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Rows")]
public RenderFragment`1<T> RowTemplate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Rows")]
public RenderFragment`1<T> ChildRowContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Editing")]
public RenderFragment`1<T> RowEditingTemplate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Editing")]
public Func`2<T, bool> RowEditableFunc { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<T> Columns { get; public set; }
    protected T Def { get; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment NoRecordsContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment LoadingContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool HorizontalScrollbar { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public IEnumerable`1<T> Items { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Filtering")]
public Func`2<T, bool> Filter { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<TableRowClickEventArgs`1<T>> OnRowClick { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<TableRowHoverEventArgs`1<T>> OnRowMouseEnter { get; public set; }
    internal bool HasRowMouseEnterEventHandler { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<TableRowHoverEventArgs`1<T>> OnRowMouseLeave { get; public set; }
    internal bool HasRowMouseLeaveEventHandler { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Rows")]
public Func`3<T, int, string> RowClassFunc { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Rows")]
public Func`3<T, int, string> RowStyleFunc { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public T SelectedItem { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> SelectedItemChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public HashSet`1<T> SelectedItems { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public IEqualityComparer`1<T> Comparer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<HashSet`1<T>> SelectedItemsChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Grouping")]
public TableGroupDefinition`1<T> GroupBy { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Grouping")]
public RenderFragment`1<TableGroupData`2<object, T>> GroupHeaderTemplate { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Grouping")]
public string GroupHeaderClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Grouping")]
public string GroupHeaderStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Grouping")]
public string GroupFooterClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Grouping")]
public string GroupFooterStyle { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Grouping")]
public RenderFragment`1<TableGroupData`2<object, T>> GroupFooterTemplate { get; public set; }
    internal UInt32 FilteringRunCount { get; private set; }
    [NullableAttribute("1")]
public IEnumerable`1<T> FilteredItems { get; }
    [NullableAttribute("1")]
protected IEnumerable`1<T> CurrentPageItems { get; }
    protected int NumPages { get; }
    [NullableAttribute("1")]
public TableContext TableContext { get; }
    [NullableAttribute("1")]
public TableContext`1<T> Context { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public Func`3<TableState, CancellationToken, Task`1<TableData`1<T>>> ServerData { get; public set; }
    internal bool Editable { get; }
    [NullableAttribute("1")]
private IEnumerable`1<IGrouping`2<object, T>> GroupItemsPage { get; }
    [MemberNotNullWhenAttribute("True", "_preEditSort")]
private bool get_HasPreEditSort();
    [MemberNotNullWhenAttribute("True", "ServerData")]
internal virtual bool get_HasServerData();
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_RowTemplate();
    [CompilerGeneratedAttribute]
public void set_RowTemplate(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ChildRowContent();
    [CompilerGeneratedAttribute]
public void set_ChildRowContent(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_RowEditingTemplate();
    [CompilerGeneratedAttribute]
public void set_RowEditingTemplate(RenderFragment`1<T> value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_RowEditableFunc();
    [CompilerGeneratedAttribute]
public void set_RowEditableFunc(Func`2<T, bool> value);
    [NullableContextAttribute("1")]
private bool IsItemEditable(T item);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(RenderFragment`1<T> value);
    protected T get_Def();
    protected virtual void OnInitialized();
    [CompilerGeneratedAttribute]
public RenderFragment get_NoRecordsContent();
    [CompilerGeneratedAttribute]
public void set_NoRecordsContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_LoadingContent();
    [CompilerGeneratedAttribute]
public void set_LoadingContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_HorizontalScrollbar();
    [CompilerGeneratedAttribute]
public void set_HorizontalScrollbar(bool value);
    [NullableContextAttribute("1")]
internal string GetHorizontalScrollbarStyle();
    public IEnumerable`1<T> get_Items();
    public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public Func`2<T, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<T, bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<TableRowClickEventArgs`1<T>> get_OnRowClick();
    [CompilerGeneratedAttribute]
public void set_OnRowClick(EventCallback`1<TableRowClickEventArgs`1<T>> value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTable`1/<FireRowClickEventAsync>d__60")]
internal virtual Task FireRowClickEventAsync(MouseEventArgs args, MudTr row, object o);
    [CompilerGeneratedAttribute]
public EventCallback`1<TableRowHoverEventArgs`1<T>> get_OnRowMouseEnter();
    [CompilerGeneratedAttribute]
public void set_OnRowMouseEnter(EventCallback`1<TableRowHoverEventArgs`1<T>> value);
    internal virtual bool get_HasRowMouseEnterEventHandler();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTable`1/<FireRowMouseEnterEventAsync>d__67")]
internal virtual Task FireRowMouseEnterEventAsync(PointerEventArgs args, MudTr row, object o);
    [CompilerGeneratedAttribute]
public EventCallback`1<TableRowHoverEventArgs`1<T>> get_OnRowMouseLeave();
    [CompilerGeneratedAttribute]
public void set_OnRowMouseLeave(EventCallback`1<TableRowHoverEventArgs`1<T>> value);
    internal virtual bool get_HasRowMouseLeaveEventHandler();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTable`1/<FireRowMouseLeaveEventAsync>d__74")]
internal virtual Task FireRowMouseLeaveEventAsync(PointerEventArgs args, MudTr row, object o);
    [CompilerGeneratedAttribute]
public Func`3<T, int, string> get_RowClassFunc();
    [CompilerGeneratedAttribute]
public void set_RowClassFunc(Func`3<T, int, string> value);
    [CompilerGeneratedAttribute]
public Func`3<T, int, string> get_RowStyleFunc();
    [CompilerGeneratedAttribute]
public void set_RowStyleFunc(Func`3<T, int, string> value);
    public T get_SelectedItem();
    public void set_SelectedItem(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_SelectedItemChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedItemChanged(EventCallback`1<T> value);
    public HashSet`1<T> get_SelectedItems();
    public void set_SelectedItems(HashSet`1<T> value);
    [NullableContextAttribute("1")]
protected bool IsCheckedRow(T item);
    public IEqualityComparer`1<T> get_Comparer();
    public void set_Comparer(IEqualityComparer`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<HashSet`1<T>> get_SelectedItemsChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedItemsChanged(EventCallback`1<HashSet`1<T>> value);
    public TableGroupDefinition`1<T> get_GroupBy();
    public void set_GroupBy(TableGroupDefinition`1<T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TableGroupData`2<object, T>> get_GroupHeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_GroupHeaderTemplate(RenderFragment`1<TableGroupData`2<object, T>> value);
    [CompilerGeneratedAttribute]
public string get_GroupHeaderClass();
    [CompilerGeneratedAttribute]
public void set_GroupHeaderClass(string value);
    [CompilerGeneratedAttribute]
public string get_GroupHeaderStyle();
    [CompilerGeneratedAttribute]
public void set_GroupHeaderStyle(string value);
    [CompilerGeneratedAttribute]
public string get_GroupFooterClass();
    [CompilerGeneratedAttribute]
public void set_GroupFooterClass(string value);
    [CompilerGeneratedAttribute]
public string get_GroupFooterStyle();
    [CompilerGeneratedAttribute]
public void set_GroupFooterStyle(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TableGroupData`2<object, T>> get_GroupFooterTemplate();
    [CompilerGeneratedAttribute]
public void set_GroupFooterTemplate(RenderFragment`1<TableGroupData`2<object, T>> value);
    [CompilerGeneratedAttribute]
internal UInt32 get_FilteringRunCount();
    [CompilerGeneratedAttribute]
private void set_FilteringRunCount(UInt32 value);
    [NullableContextAttribute("1")]
public IEnumerable`1<T> get_FilteredItems();
    [NullableContextAttribute("1")]
protected IEnumerable`1<T> get_CurrentPageItems();
    [NullableContextAttribute("1")]
protected IEnumerable`1<T> GetItemsOfPage(int n, int pageSize);
    protected virtual int get_NumPages();
    public virtual int GetFilteredItemsCount();
    public virtual void SetSelectedItem(object item);
    public virtual void SetEditingItem(object item);
    public virtual bool ContainsItem(object item);
    public virtual void UpdateSelection();
    [NullableContextAttribute("1")]
public virtual TableContext get_TableContext();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TableContext`1<T> get_Context();
    [NullableContextAttribute("1")]
private void OnRowCheckboxChanged(bool checkedState, T item);
    internal virtual void OnHeaderCheckboxClicked(bool checkedState);
    [CompilerGeneratedAttribute]
public Func`3<TableState, CancellationToken, Task`1<TableData`1<T>>> get_ServerData();
    [CompilerGeneratedAttribute]
public void set_ServerData(Func`3<TableState, CancellationToken, Task`1<TableData`1<T>>> value);
    private void CancelToken();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTable`1/<InvokeServerLoadFunc>d__156")]
internal virtual Task InvokeServerLoadFunc();
    protected virtual void OnAfterRender(bool firstRender);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTable`1/<OnAfterRenderAsync>d__158")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [NullableContextAttribute("1")]
public Task ReloadServerData();
    internal virtual bool get_Editable();
    [NullableContextAttribute("1")]
private IEnumerable`1<IGrouping`2<object, T>> get_GroupItemsPage();
    [NullableContextAttribute("1")]
internal IEnumerable`1<IGrouping`2<object, T>> GetItemsOfGroup(TableGroupDefinition`1<T> parent, IEnumerable`1<T> sourceList);
    [NullableContextAttribute("1")]
internal void OnGroupHeaderCheckboxClicked(bool checkedState, IEnumerable`1<T> items);
    public void ExpandAllGroups();
    public void CollapseAllGroups();
    private void ToggleExpandGroups(bool expand);
    [NullableContextAttribute("1")]
private string ClearFilterCache();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
internal RenderFragment RenderRows(IEnumerable`1<T> source, string customClass, bool expandable);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ToggleExpandGroups>b__168_0(MudTableGroupRow`1<T> gr);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <ToggleExpandGroups>b__168_1(MudTableGroupRow`1<T> gr);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__172_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__172_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__172_2(RenderTreeBuilder __builder3);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__172_5(MudTableSortLabel`1<T> v);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__172_6(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__172_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__172_4(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.MudTableBase : MudComponentBase {
    private int _currentPage;
    private bool _isFirstRendered;
    internal Nullable`1<int> _rowsPerPage;
    internal object _editingItem;
    [CompilerGeneratedAttribute]
private bool <IsEditRowSwitchingBlocked>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Square>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Bordered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Striped>k__BackingField;
    [CompilerGeneratedAttribute]
private Breakpoint <Breakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixedFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnsorted>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<int> <RowsPerPageChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiSelection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionChangeable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectOnRowClick>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ToolBarContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Loading>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LoadingProgressColor>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <HeaderContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CustomHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <FooterContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CustomFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterClass>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ColGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <PagerContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnCommitEditClick>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnCancelEditClick>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<object> <OnPreviewEditClick>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitEditTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CancelEditTooltip>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CommitEditIcon>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CancelEditIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCancelEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private TableApplyButtonPosition <ApplyButtonPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private TableEditButtonPosition <EditButtonPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private TableEditTrigger <EditTrigger>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<EditButtonContext> <EditButtonContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<object> <RowEditPreview>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<object> <RowEditCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<object> <RowEditCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Virtualize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverscanCount>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ItemSize>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IForm <Validator>k__BackingField;
    internal bool Editing { get; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string HeadClassname { get; }
    [NullableAttribute("1")]
protected string FootClassname { get; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public bool IsEditRowSwitchingBlocked { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Square { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Bordered { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Hover { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Striped { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Breakpoint Breakpoint { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Header")]
public bool FixedHeader { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Footer")]
public bool FixedFooter { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Height { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Sorting")]
public string SortLabel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Sorting")]
public bool AllowUnsorted { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Pagination")]
public int RowsPerPage { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<int> RowsPerPageChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Pagination")]
public int CurrentPage { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool MultiSelection { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool SelectionChangeable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Rows")]
public bool SelectOnRowClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ToolBarContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public bool Loading { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public Color LoadingProgressColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Header")]
public RenderFragment HeaderContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Header")]
public bool CustomHeader { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Header")]
public string HeaderClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ContainerStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ContainerClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Footer")]
public RenderFragment FooterContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Footer")]
public bool CustomFooter { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Footer")]
public string FooterClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ColGroup { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Pagination")]
public RenderFragment PagerContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public bool ReadOnly { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnCommitEditClick { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnCancelEditClick { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<object> OnPreviewEditClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public string CommitEditTooltip { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public string CancelEditTooltip { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Editing")]
public string CommitEditIcon { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Editing")]
public string CancelEditIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public bool CanCancelEdit { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public TableApplyButtonPosition ApplyButtonPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public TableEditButtonPosition EditButtonPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public TableEditTrigger EditTrigger { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Editing")]
public RenderFragment`1<EditButtonContext> EditButtonContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public Action`1<object> RowEditPreview { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public Action`1<object> RowEditCommit { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Editing")]
public Action`1<object> RowEditCancel { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public int TotalItems { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Rows")]
public string RowClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Rows")]
public string RowStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Virtualize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int OverscanCount { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public float ItemSize { get; public set; }
    [NullableAttribute("1")]
public TableContext TableContext { get; }
    protected int NumPages { get; }
    [NullableAttribute("1")]
protected string TableContainerStyle { get; }
    [NullableAttribute("1")]
protected string TableContainerClass { get; }
    internal bool HasServerData { get; }
    internal bool HasRowMouseEnterEventHandler { get; }
    internal bool HasRowMouseLeaveEventHandler { get; }
    internal bool Editable { get; }
    [NullableAttribute("1")]
public IForm Validator { get; public set; }
    internal bool get_Editing();
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_HeadClassname();
    [NullableContextAttribute("1")]
protected string get_FootClassname();
    [CompilerGeneratedAttribute]
public bool get_IsEditRowSwitchingBlocked();
    [CompilerGeneratedAttribute]
public void set_IsEditRowSwitchingBlocked(bool value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_Square();
    [CompilerGeneratedAttribute]
public void set_Square(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public bool get_Bordered();
    [CompilerGeneratedAttribute]
public void set_Bordered(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hover();
    [CompilerGeneratedAttribute]
public void set_Hover(bool value);
    [CompilerGeneratedAttribute]
public bool get_Striped();
    [CompilerGeneratedAttribute]
public void set_Striped(bool value);
    [CompilerGeneratedAttribute]
public Breakpoint get_Breakpoint();
    [CompilerGeneratedAttribute]
public void set_Breakpoint(Breakpoint value);
    [CompilerGeneratedAttribute]
public bool get_FixedHeader();
    [CompilerGeneratedAttribute]
public void set_FixedHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixedFooter();
    [CompilerGeneratedAttribute]
public void set_FixedFooter(bool value);
    [CompilerGeneratedAttribute]
public string get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(string value);
    [CompilerGeneratedAttribute]
public string get_SortLabel();
    [CompilerGeneratedAttribute]
public void set_SortLabel(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowUnsorted();
    [CompilerGeneratedAttribute]
public void set_AllowUnsorted(bool value);
    public int get_RowsPerPage();
    public void set_RowsPerPage(int value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<int> get_RowsPerPageChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_RowsPerPageChanged(EventCallback`1<int> value);
    public int get_CurrentPage();
    public void set_CurrentPage(int value);
    [CompilerGeneratedAttribute]
public bool get_MultiSelection();
    [CompilerGeneratedAttribute]
public void set_MultiSelection(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectionChangeable();
    [CompilerGeneratedAttribute]
public void set_SelectionChangeable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectOnRowClick();
    [CompilerGeneratedAttribute]
public void set_SelectOnRowClick(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ToolBarContent();
    [CompilerGeneratedAttribute]
public void set_ToolBarContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Loading();
    [CompilerGeneratedAttribute]
public void set_Loading(bool value);
    [CompilerGeneratedAttribute]
public Color get_LoadingProgressColor();
    [CompilerGeneratedAttribute]
public void set_LoadingProgressColor(Color value);
    [CompilerGeneratedAttribute]
public RenderFragment get_HeaderContent();
    [CompilerGeneratedAttribute]
public void set_HeaderContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_CustomHeader();
    [CompilerGeneratedAttribute]
public void set_CustomHeader(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderClass();
    [CompilerGeneratedAttribute]
public void set_HeaderClass(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerStyle();
    [CompilerGeneratedAttribute]
public void set_ContainerStyle(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerClass();
    [CompilerGeneratedAttribute]
public void set_ContainerClass(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_FooterContent();
    [CompilerGeneratedAttribute]
public void set_FooterContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_CustomFooter();
    [CompilerGeneratedAttribute]
public void set_CustomFooter(bool value);
    [CompilerGeneratedAttribute]
public string get_FooterClass();
    [CompilerGeneratedAttribute]
public void set_FooterClass(string value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ColGroup();
    [CompilerGeneratedAttribute]
public void set_ColGroup(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_PagerContent();
    [CompilerGeneratedAttribute]
public void set_PagerContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnCommitEditClick();
    [CompilerGeneratedAttribute]
public void set_OnCommitEditClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnCancelEditClick();
    [CompilerGeneratedAttribute]
public void set_OnCancelEditClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<object> get_OnPreviewEditClick();
    [CompilerGeneratedAttribute]
public void set_OnPreviewEditClick(EventCallback`1<object> value);
    [CompilerGeneratedAttribute]
public string get_CommitEditTooltip();
    [CompilerGeneratedAttribute]
public void set_CommitEditTooltip(string value);
    [CompilerGeneratedAttribute]
public string get_CancelEditTooltip();
    [CompilerGeneratedAttribute]
public void set_CancelEditTooltip(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CommitEditIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CommitEditIcon(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CancelEditIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CancelEditIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_CanCancelEdit();
    [CompilerGeneratedAttribute]
public void set_CanCancelEdit(bool value);
    [CompilerGeneratedAttribute]
public TableApplyButtonPosition get_ApplyButtonPosition();
    [CompilerGeneratedAttribute]
public void set_ApplyButtonPosition(TableApplyButtonPosition value);
    [CompilerGeneratedAttribute]
public TableEditButtonPosition get_EditButtonPosition();
    [CompilerGeneratedAttribute]
public void set_EditButtonPosition(TableEditButtonPosition value);
    [CompilerGeneratedAttribute]
public TableEditTrigger get_EditTrigger();
    [CompilerGeneratedAttribute]
public void set_EditTrigger(TableEditTrigger value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<EditButtonContext> get_EditButtonContent();
    [CompilerGeneratedAttribute]
public void set_EditButtonContent(RenderFragment`1<EditButtonContext> value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_RowEditPreview();
    [CompilerGeneratedAttribute]
public void set_RowEditPreview(Action`1<object> value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_RowEditCommit();
    [CompilerGeneratedAttribute]
public void set_RowEditCommit(Action`1<object> value);
    [CompilerGeneratedAttribute]
public Action`1<object> get_RowEditCancel();
    [CompilerGeneratedAttribute]
public void set_RowEditCancel(Action`1<object> value);
    [CompilerGeneratedAttribute]
public int get_TotalItems();
    [CompilerGeneratedAttribute]
public void set_TotalItems(int value);
    [CompilerGeneratedAttribute]
public string get_RowClass();
    [CompilerGeneratedAttribute]
public void set_RowClass(string value);
    [CompilerGeneratedAttribute]
public string get_RowStyle();
    [CompilerGeneratedAttribute]
public void set_RowStyle(string value);
    [CompilerGeneratedAttribute]
public bool get_Virtualize();
    [CompilerGeneratedAttribute]
public void set_Virtualize(bool value);
    [CompilerGeneratedAttribute]
public int get_OverscanCount();
    [CompilerGeneratedAttribute]
public void set_OverscanCount(int value);
    [CompilerGeneratedAttribute]
public float get_ItemSize();
    [CompilerGeneratedAttribute]
public void set_ItemSize(float value);
    [NullableContextAttribute("1")]
public abstract virtual TableContext get_TableContext();
    [NullableContextAttribute("1")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    public void NavigateTo(Page page);
    public void NavigateTo(int pageIndex);
    public void SetRowsPerPage(int size);
    protected abstract virtual int get_NumPages();
    public abstract virtual int GetFilteredItemsCount();
    public abstract virtual void SetSelectedItem(object item);
    public abstract virtual void SetEditingItem(object item);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTableBase/<OnCommitEditHandler>d__241")]
internal Task OnCommitEditHandler(MouseEventArgs ev, object item);
    [NullableContextAttribute("1")]
internal Task OnPreviewEditHandler(object item);
    [NullableContextAttribute("1")]
internal Task OnCancelEditHandler(MouseEventArgs ev);
    [NullableContextAttribute("1")]
protected string get_TableContainerStyle();
    [NullableContextAttribute("1")]
protected string get_TableContainerClass();
    internal abstract virtual bool get_HasServerData();
    [NullableContextAttribute("1")]
internal abstract virtual Task InvokeServerLoadFunc();
    [NullableContextAttribute("1")]
internal abstract virtual Task FireRowClickEventAsync(MouseEventArgs args, MudTr mudTr, object item);
    [NullableContextAttribute("1")]
internal abstract virtual Task FireRowMouseEnterEventAsync(PointerEventArgs args, MudTr mudTr, object item);
    [NullableContextAttribute("1")]
internal abstract virtual Task FireRowMouseLeaveEventAsync(PointerEventArgs args, MudTr mudTr, object item);
    internal abstract virtual void OnHeaderCheckboxClicked(bool checkedState);
    internal abstract virtual bool get_HasRowMouseEnterEventHandler();
    internal abstract virtual bool get_HasRowMouseLeaveEventHandler();
    internal abstract virtual bool get_Editable();
    public abstract virtual bool ContainsItem(object item);
    public abstract virtual void UpdateSelection();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IForm get_Validator();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Validator(IForm value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTableGroupRow`1 : MudComponentBase {
    private Nullable`1<bool> _checked;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IGrouping`2<object, T> _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<IGrouping`2<object, T>> _innerGroupItems;
    [CompilerGeneratedAttribute]
private TableContext <Context>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private TableGroupDefinition`1<T> <GroupDefinition>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<TableGroupData`2<object, T>> <HeaderTemplate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<TableGroupData`2<object, T>> <FooterTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionChangeable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeaderStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FooterStyle>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ExpandIcon>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CollapseIcon>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnRowClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [NullableAttribute("1")]
protected string HeaderClassname { get; }
    [NullableAttribute("1")]
protected string FooterClassname { get; }
    [NullableAttribute("1")]
protected string ActionsStylename { get; }
    [CascadingParameterAttribute]
public TableContext Context { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public TableGroupDefinition`1<T> GroupDefinition { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public IGrouping`2<object, T> Items { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<TableGroupData`2<object, T>> HeaderTemplate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<TableGroupData`2<object, T>> FooterTemplate { get; public set; }
    [ParameterAttribute]
public bool Checkable { get; public set; }
    [ParameterAttribute]
public bool SelectionChangeable { get; public set; }
    [ParameterAttribute]
public string HeaderClass { get; public set; }
    [ParameterAttribute]
public string FooterClass { get; public set; }
    [ParameterAttribute]
public string HeaderStyle { get; public set; }
    [ParameterAttribute]
public string FooterStyle { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
public string ExpandIcon { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
public string CollapseIcon { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnRowClick { get; public set; }
    public Nullable`1<bool> Checked { get; public set; }
    public bool Expanded { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MudTable`1<T> Table { get; }
    [NullableContextAttribute("1")]
protected string get_HeaderClassname();
    [NullableContextAttribute("1")]
protected string get_FooterClassname();
    [NullableContextAttribute("1")]
protected string get_ActionsStylename();
    [CompilerGeneratedAttribute]
public TableContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(TableContext value);
    [CompilerGeneratedAttribute]
public TableGroupDefinition`1<T> get_GroupDefinition();
    [CompilerGeneratedAttribute]
public void set_GroupDefinition(TableGroupDefinition`1<T> value);
    public IGrouping`2<object, T> get_Items();
    public void set_Items(IGrouping`2<object, T> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TableGroupData`2<object, T>> get_HeaderTemplate();
    [CompilerGeneratedAttribute]
public void set_HeaderTemplate(RenderFragment`1<TableGroupData`2<object, T>> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TableGroupData`2<object, T>> get_FooterTemplate();
    [CompilerGeneratedAttribute]
public void set_FooterTemplate(RenderFragment`1<TableGroupData`2<object, T>> value);
    [CompilerGeneratedAttribute]
public bool get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectionChangeable();
    [CompilerGeneratedAttribute]
public void set_SelectionChangeable(bool value);
    [CompilerGeneratedAttribute]
public string get_HeaderClass();
    [CompilerGeneratedAttribute]
public void set_HeaderClass(string value);
    [CompilerGeneratedAttribute]
public string get_FooterClass();
    [CompilerGeneratedAttribute]
public void set_FooterClass(string value);
    [CompilerGeneratedAttribute]
public string get_HeaderStyle();
    [CompilerGeneratedAttribute]
public void set_HeaderStyle(string value);
    [CompilerGeneratedAttribute]
public string get_FooterStyle();
    [CompilerGeneratedAttribute]
public void set_FooterStyle(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ExpandIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ExpandIcon(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CollapseIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_CollapseIcon(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnRowClick();
    [CompilerGeneratedAttribute]
public void set_OnRowClick(EventCallback`1<MouseEventArgs> value);
    public Nullable`1<bool> get_Checked();
    public void set_Checked(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
internal void set_Expanded(bool value);
    [NullableContextAttribute("1")]
protected virtual Task OnInitializedAsync();
    private void SyncInnerGroupItems();
    public sealed virtual void Dispose();
    public void SetChecked(Nullable`1<bool> checkedState, bool notify);
    private MudTable`1<T> get_Table();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_2();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__77_3(Nullable`1<bool> __value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudTablePager : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TableContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideRowsPerPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HidePageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HidePagination>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <PageSizeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InfoFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AllItemsText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RowsPerPageString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastIcon>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    protected string Classname { get; }
    protected string PaginationClassname { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [NullableAttribute("2")]
[CascadingParameterAttribute]
public TableContext Context { get; public set; }
    [ParameterAttribute]
public bool HideRowsPerPage { get; public set; }
    [ParameterAttribute]
public bool HidePageNumber { get; public set; }
    [ParameterAttribute]
public bool HidePagination { get; public set; }
    [ParameterAttribute]
public HorizontalAlignment HorizontalAlignment { get; public set; }
    [ParameterAttribute]
public Int32[] PageSizeOptions { get; public set; }
    [ParameterAttribute]
public string InfoFormat { get; public set; }
    [ParameterAttribute]
public string AllItemsText { get; public set; }
    private string Info { get; }
    [ParameterAttribute]
public string RowsPerPageString { get; public set; }
    [ParameterAttribute]
public string FirstIcon { get; public set; }
    [ParameterAttribute]
public string BeforeIcon { get; public set; }
    [ParameterAttribute]
public string NextIcon { get; public set; }
    [ParameterAttribute]
public string LastIcon { get; public set; }
    private bool BackButtonsDisabled { get; }
    private bool ForwardButtonsDisabled { get; }
    [NullableAttribute("2")]
public MudTableBase Table { get; }
    [NullableAttribute("0")]
[InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    protected string get_Classname();
    protected string get_PaginationClassname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TableContext get_Context();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Context(TableContext value);
    [CompilerGeneratedAttribute]
public bool get_HideRowsPerPage();
    [CompilerGeneratedAttribute]
public void set_HideRowsPerPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_HidePageNumber();
    [CompilerGeneratedAttribute]
public void set_HidePageNumber(bool value);
    [CompilerGeneratedAttribute]
public bool get_HidePagination();
    [CompilerGeneratedAttribute]
public void set_HidePagination(bool value);
    [CompilerGeneratedAttribute]
public HorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public void set_HorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public Int32[] get_PageSizeOptions();
    [CompilerGeneratedAttribute]
public void set_PageSizeOptions(Int32[] value);
    [CompilerGeneratedAttribute]
public string get_InfoFormat();
    [CompilerGeneratedAttribute]
public void set_InfoFormat(string value);
    [CompilerGeneratedAttribute]
public string get_AllItemsText();
    [CompilerGeneratedAttribute]
public void set_AllItemsText(string value);
    private string get_Info();
    [CompilerGeneratedAttribute]
public string get_RowsPerPageString();
    [CompilerGeneratedAttribute]
public void set_RowsPerPageString(string value);
    [CompilerGeneratedAttribute]
public string get_FirstIcon();
    [CompilerGeneratedAttribute]
public void set_FirstIcon(string value);
    [CompilerGeneratedAttribute]
public string get_BeforeIcon();
    [CompilerGeneratedAttribute]
public void set_BeforeIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NextIcon();
    [CompilerGeneratedAttribute]
public void set_NextIcon(string value);
    [CompilerGeneratedAttribute]
public string get_LastIcon();
    [CompilerGeneratedAttribute]
public void set_LastIcon(string value);
    private void SetRowsPerPage(int size);
    private bool get_BackButtonsDisabled();
    private bool get_ForwardButtonsDisabled();
    [NullableContextAttribute("2")]
public MudTableBase get_Table();
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_6(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_7(RenderTreeBuilder __builder5);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_2();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_3();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_4();
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__71_5();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTableSortLabel`1 : MudComponentBase {
    private SortDirection _direction;
    [CompilerGeneratedAttribute]
private TableContext <TableContext>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <InitialDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SortIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AppendIcon>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<SortDirection> <SortDirectionChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, object> <SortBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortLabel>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
public TableContext TableContext { get; public set; }
    public MudTableBase Table { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TableContext`1<T> Context { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public SortDirection InitialDirection { get; public set; }
    [ParameterAttribute]
public bool Enabled { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
public string SortIcon { get; public set; }
    [ParameterAttribute]
public bool AppendIcon { get; public set; }
    [ParameterAttribute]
public SortDirection SortDirection { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<SortDirection> SortDirectionChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public Func`2<T, object> SortBy { get; public set; }
    [ParameterAttribute]
public string SortLabel { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public TableContext get_TableContext();
    [CompilerGeneratedAttribute]
public void set_TableContext(TableContext value);
    public MudTableBase get_Table();
    public TableContext`1<T> get_Context();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public SortDirection get_InitialDirection();
    [CompilerGeneratedAttribute]
public void set_InitialDirection(SortDirection value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_SortIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_SortIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_AppendIcon();
    [CompilerGeneratedAttribute]
public void set_AppendIcon(bool value);
    public SortDirection get_SortDirection();
    public void set_SortDirection(SortDirection value);
    [NullableContextAttribute("1")]
private Task UpdateSortDirectionAsync(SortDirection sortDirection);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<SortDirection> get_SortDirectionChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_SortDirectionChanged(EventCallback`1<SortDirection> value);
    [CompilerGeneratedAttribute]
public Func`2<T, object> get_SortBy();
    [CompilerGeneratedAttribute]
public void set_SortBy(Func`2<T, object> value);
    [CompilerGeneratedAttribute]
public string get_SortLabel();
    [CompilerGeneratedAttribute]
public void set_SortLabel(string value);
    [NullableContextAttribute("1")]
public Task ToggleSortDirection();
    protected virtual void OnInitialized();
    public sealed virtual void Dispose();
    internal void SetSortDirection(SortDirection dir);
    [NullableContextAttribute("1")]
private string GetSortIconClass();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudTabPanel : MudComponentBase {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private MudTabs <Parent>k__BackingField;
    public ElementReference PanelRef;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowCloseIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private object <BadgeData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BadgeDot>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <BadgeColor>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TabContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<RenderFragment> <TabWrapperContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    [CascadingParameterAttribute]
private MudTabs Parent { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ShowCloseIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public object BadgeData { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool BadgeDot { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color BadgeColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public object ID { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment TabContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<RenderFragment> TabWrapperContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string ToolTip { get; public set; }
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private MudTabs get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(MudTabs value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowCloseIcon();
    [CompilerGeneratedAttribute]
public void set_ShowCloseIcon(bool value);
    [CompilerGeneratedAttribute]
public object get_BadgeData();
    [CompilerGeneratedAttribute]
public void set_BadgeData(object value);
    [CompilerGeneratedAttribute]
public bool get_BadgeDot();
    [CompilerGeneratedAttribute]
public void set_BadgeDot(bool value);
    [CompilerGeneratedAttribute]
public Color get_BadgeColor();
    [CompilerGeneratedAttribute]
public void set_BadgeColor(Color value);
    [CompilerGeneratedAttribute]
public object get_ID();
    [CompilerGeneratedAttribute]
public void set_ID(object value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TabContent();
    [CompilerGeneratedAttribute]
public void set_TabContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<RenderFragment> get_TabWrapperContent();
    [CompilerGeneratedAttribute]
public void set_TabWrapperContent(RenderFragment`1<RenderFragment> value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
public void set_ToolTip(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudTabPanel/<OnAfterRenderAsync>d__63")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void OnInitialized();
    [AsyncStateMachineAttribute("MudBlazor.MudTabPanel/<DisposeAsync>d__65")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
}
public class MudBlazor.MudTabs : MudComponentBase {
    private bool _isDisposed;
    private int _activePanelIndex;
    private int _scrollIndex;
    private bool _isRendered;
    private bool _prevButtonDisabled;
    private bool _nextButtonDisabled;
    private bool _showScrollButtons;
    private ElementReference _tabsContentSize;
    private double _sliderSize;
    private double _sliderPosition;
    private double _tabBarContentSize;
    private double _allTabsSize;
    private double _scrollPosition;
    private IResizeObserver _resizeObserver;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private IResizeObserverFactory <_resizeObserverFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepPanelsAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rounded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Border>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Centered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideSlider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrevIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysShowScrollButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumTabWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <SliderColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ScrollIconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyEffectsToContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SliderAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<MudTabPanel> <PrePanelContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TabPanelClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TabHeaderClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveTabClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PanelClass>k__BackingField;
    [CompilerGeneratedAttribute]
private MudTabPanel <ActivePanel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<int> <ActivePanelIndexChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MudTabPanel> <Panels>k__BackingField;
    private List`1<MudTabPanel> _panels;
    [CompilerGeneratedAttribute]
private RenderFragment`1<MudTabs> <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private TabHeaderPosition <HeaderPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<MudTabPanel> <TabPanelHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private TabHeaderPosition <TabPanelHeaderPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TabInteractionEventArgs, Task> <OnPreviewInteraction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalClassName>k__BackingField;
    private string _prevIcon;
    private string _nextIcon;
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [InjectAttribute]
private IResizeObserverFactory _resizeObserverFactory { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool KeepPanelsAlive { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Rounded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Border { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Centered { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool HideSlider { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string PrevIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string NextIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool AlwaysShowScrollButtons { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<int> MaxHeight { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MinimumTabWidth { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Position Position { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color SliderColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color ScrollIconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool ApplyEffectsToContainer { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool SliderAnimation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<MudTabPanel> PrePanelContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string TabPanelClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string TabHeaderClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ActiveTabClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string PanelClass { get; public set; }
    public MudTabPanel ActivePanel { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int ActivePanelIndex { get; public set; }
    [ParameterAttribute]
public EventCallback`1<int> ActivePanelIndexChanged { get; public set; }
    public IReadOnlyList`1<MudTabPanel> Panels { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<MudTabs> Header { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TabHeaderPosition HeaderPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<MudTabPanel> TabPanelHeader { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TabHeaderPosition TabPanelHeaderPosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public Func`2<TabInteractionEventArgs, Task> OnPreviewInteraction { get; public set; }
    protected string InternalClassName { get; }
    protected string TabsClassnames { get; }
    protected string TabBarClassnames { get; }
    protected string WrapperClassnames { get; }
    protected string WrapperScrollStyle { get; }
    protected string PanelsClassnames { get; }
    protected string SliderClass { get; }
    protected string MaxHeightStyles { get; }
    protected string SliderStyle { get; }
    private bool IsSliderPositionDetermined { get; }
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
private IResizeObserverFactory get__resizeObserverFactory();
    [CompilerGeneratedAttribute]
private void set__resizeObserverFactory(IResizeObserverFactory value);
    [CompilerGeneratedAttribute]
public bool get_KeepPanelsAlive();
    [CompilerGeneratedAttribute]
public void set_KeepPanelsAlive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rounded();
    [CompilerGeneratedAttribute]
public void set_Rounded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Border();
    [CompilerGeneratedAttribute]
public void set_Border(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public bool get_Centered();
    [CompilerGeneratedAttribute]
public void set_Centered(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideSlider();
    [CompilerGeneratedAttribute]
public void set_HideSlider(bool value);
    [CompilerGeneratedAttribute]
public string get_PrevIcon();
    [CompilerGeneratedAttribute]
public void set_PrevIcon(string value);
    [CompilerGeneratedAttribute]
public string get_NextIcon();
    [CompilerGeneratedAttribute]
public void set_NextIcon(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysShowScrollButtons();
    [CompilerGeneratedAttribute]
public void set_AlwaysShowScrollButtons(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxHeight();
    [CompilerGeneratedAttribute]
public void set_MaxHeight(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_MinimumTabWidth();
    [CompilerGeneratedAttribute]
public void set_MinimumTabWidth(string value);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(Position value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Color get_SliderColor();
    [CompilerGeneratedAttribute]
public void set_SliderColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_ScrollIconColor();
    [CompilerGeneratedAttribute]
public void set_ScrollIconColor(Color value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public bool get_ApplyEffectsToContainer();
    [CompilerGeneratedAttribute]
public void set_ApplyEffectsToContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_SliderAnimation();
    [CompilerGeneratedAttribute]
public void set_SliderAnimation(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<MudTabPanel> get_PrePanelContent();
    [CompilerGeneratedAttribute]
public void set_PrePanelContent(RenderFragment`1<MudTabPanel> value);
    [CompilerGeneratedAttribute]
public string get_TabPanelClass();
    [CompilerGeneratedAttribute]
public void set_TabPanelClass(string value);
    [CompilerGeneratedAttribute]
public string get_TabHeaderClass();
    [CompilerGeneratedAttribute]
public void set_TabHeaderClass(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveTabClass();
    [CompilerGeneratedAttribute]
public void set_ActiveTabClass(string value);
    [CompilerGeneratedAttribute]
public string get_PanelClass();
    [CompilerGeneratedAttribute]
public void set_PanelClass(string value);
    [CompilerGeneratedAttribute]
public MudTabPanel get_ActivePanel();
    [CompilerGeneratedAttribute]
private void set_ActivePanel(MudTabPanel value);
    public int get_ActivePanelIndex();
    public void set_ActivePanelIndex(int value);
    [CompilerGeneratedAttribute]
public EventCallback`1<int> get_ActivePanelIndexChanged();
    [CompilerGeneratedAttribute]
public void set_ActivePanelIndexChanged(EventCallback`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MudTabPanel> get_Panels();
    [CompilerGeneratedAttribute]
private void set_Panels(IReadOnlyList`1<MudTabPanel> value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<MudTabs> get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(RenderFragment`1<MudTabs> value);
    [CompilerGeneratedAttribute]
public TabHeaderPosition get_HeaderPosition();
    [CompilerGeneratedAttribute]
public void set_HeaderPosition(TabHeaderPosition value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<MudTabPanel> get_TabPanelHeader();
    [CompilerGeneratedAttribute]
public void set_TabPanelHeader(RenderFragment`1<MudTabPanel> value);
    [CompilerGeneratedAttribute]
public TabHeaderPosition get_TabPanelHeaderPosition();
    [CompilerGeneratedAttribute]
public void set_TabPanelHeaderPosition(TabHeaderPosition value);
    [CompilerGeneratedAttribute]
public Func`2<TabInteractionEventArgs, Task> get_OnPreviewInteraction();
    [CompilerGeneratedAttribute]
public void set_OnPreviewInteraction(Func`2<TabInteractionEventArgs, Task> value);
    [CompilerGeneratedAttribute]
protected virtual string get_InternalClassName();
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.MudTabs/<OnAfterRenderAsync>d__170")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudTabs/<DisposeAsync>d__171")]
public sealed virtual ValueTask DisposeAsync();
    internal void AddPanel(MudTabPanel tabPanel);
    [AsyncStateMachineAttribute("MudBlazor.MudTabs/<SetPanelRef>d__173")]
internal Task SetPanelRef(ElementReference reference);
    [AsyncStateMachineAttribute("MudBlazor.MudTabs/<RemovePanel>d__174")]
internal Task RemovePanel(MudTabPanel tabPanel);
    public void ActivatePanel(MudTabPanel panel, bool ignoreDisabledState);
    public void ActivatePanel(int index, bool ignoreDisabledState);
    public void ActivatePanel(object id, bool ignoreDisabledState);
    [AsyncStateMachineAttribute("MudBlazor.MudTabs/<ActivatePanel>d__178")]
private void ActivatePanel(MudTabPanel panel, MouseEventArgs ev, bool ignoreDisabledState);
    protected string get_TabsClassnames();
    protected string get_TabBarClassnames();
    protected string get_WrapperClassnames();
    protected string get_WrapperScrollStyle();
    protected string get_PanelsClassnames();
    protected string get_SliderClass();
    protected string get_MaxHeightStyles();
    protected string get_SliderStyle();
    private bool IsVerticalTabs();
    private Position ConvertPosition(Position position);
    private string GetTabClass(MudTabPanel panel);
    private Placement GetTooltipPlacement();
    private string GetTabStyle(MudTabPanel panel);
    private Color GetPanelIconColor(MudTabPanel panel);
    private void Rerender();
    [AsyncStateMachineAttribute("MudBlazor.MudTabs/<OnResized>d__202")]
private void OnResized(IDictionary`2<ElementReference, BoundingClientRect> changes);
    private void SetSliderState();
    private bool get_IsSliderPositionDetermined();
    private void GetTabBarContentSize();
    private void GetAllTabsSize();
    private double GetRelevantSize(ElementReference reference);
    private double GetLengthOfPanelItems(MudTabPanel panel, bool inclusive);
    private double GetPanelLength(MudTabPanel panel);
    private void SetScrollButtonVisibility();
    private void ScrollPrev();
    private void ScrollNext();
    private int GetVisiblePanels();
    private bool ScrollToItem(MudTabPanel panel, bool isLast);
    private bool IsAfterLastPanelIndex(int index);
    private bool IsBeforeFirstPanelIndex(int index);
    private void CenterScrollPositionAroundSelectedItem();
    private void SetScrollabilityStates();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private RenderFragment RenderTab(MudTabPanel panel);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__220_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__220_1(MouseEventArgs e);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__220_2(ElementReference __value);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__220_3(MouseEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTd : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideSmall>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public string DataLabel { get; public set; }
    [ParameterAttribute]
public bool HideSmall { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_DataLabel();
    [CompilerGeneratedAttribute]
public void set_DataLabel(string value);
    [CompilerGeneratedAttribute]
public bool get_HideSmall();
    [CompilerGeneratedAttribute]
public void set_HideSmall(bool value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudText : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Typo <Typo>k__BackingField;
    [CompilerGeneratedAttribute]
private Align <Align>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GutterBottom>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inline>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HtmlTag>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Typo Typo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Align Align { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool GutterBottom { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Inline { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string HtmlTag { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public Typo get_Typo();
    [CompilerGeneratedAttribute]
public void set_Typo(Typo value);
    [CompilerGeneratedAttribute]
public Align get_Align();
    [CompilerGeneratedAttribute]
public void set_Align(Align value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_GutterBottom();
    [CompilerGeneratedAttribute]
public void set_GutterBottom(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inline();
    [CompilerGeneratedAttribute]
public void set_Inline(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public string get_HtmlTag();
    [CompilerGeneratedAttribute]
public void set_HtmlTag(string value);
    [NullableContextAttribute("1")]
private string GetActualTag();
    [NullableContextAttribute("1")]
private static string GetTagName(Typo typo);
    private Align ConvertAlign(Align align);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__37_0(RenderTreeBuilder __builder2);
}
public class MudBlazor.MudTextField`1 : MudDebouncedInput`1<T> {
    [CompilerGeneratedAttribute]
private MudInput`1<string> <InputReference>k__BackingField;
    private MudMask _maskReference;
    [CompilerGeneratedAttribute]
private InputType <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clearable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClearIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClearButtonClick>k__BackingField;
    private IMask _mask;
    [CompilerGeneratedAttribute]
private bool <AutoGrow>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLines>k__BackingField;
    protected string Classname { get; }
    public MudInput`1<string> InputReference { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public InputType InputType { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Clearable { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ClearIcon { get; public set; }
    [ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClearButtonClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public IMask Mask { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AutoGrow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public int MaxLines { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public MudInput`1<string> get_InputReference();
    [CompilerGeneratedAttribute]
private void set_InputReference(MudInput`1<string> value);
    [CompilerGeneratedAttribute]
public InputType get_InputType();
    [CompilerGeneratedAttribute]
public void set_InputType(InputType value);
    internal virtual InputType GetInputType();
    private string GetCounterText();
    [CompilerGeneratedAttribute]
public bool get_Clearable();
    [CompilerGeneratedAttribute]
public void set_Clearable(bool value);
    [CompilerGeneratedAttribute]
public string get_ClearIcon();
    [CompilerGeneratedAttribute]
public void set_ClearIcon(string value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClearButtonClick();
    [CompilerGeneratedAttribute]
public void set_OnClearButtonClick(EventCallback`1<MouseEventArgs> value);
    public virtual ValueTask FocusAsync();
    public virtual ValueTask BlurAsync();
    public virtual ValueTask SelectAsync();
    public virtual ValueTask SelectRangeAsync(int pos1, int pos2);
    [AsyncStateMachineAttribute("MudBlazor.MudTextField`1/<ResetValueAsync>d__29")]
protected virtual Task ResetValueAsync();
    public Task Clear();
    [AsyncStateMachineAttribute("MudBlazor.MudTextField`1/<SetText>d__31")]
public Task SetText(string text);
    public IMask get_Mask();
    public void set_Mask(IMask value);
    protected virtual Task SetValueAsync(T value, bool updateText, bool force);
    protected virtual Task SetTextAsync(string text, bool updateValue);
    [AsyncStateMachineAttribute("MudBlazor.MudTextField`1/<OnMaskedValueChanged>d__38")]
private Task OnMaskedValueChanged(string s);
    [CompilerGeneratedAttribute]
public bool get_AutoGrow();
    [CompilerGeneratedAttribute]
public void set_AutoGrow(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxLines();
    [CompilerGeneratedAttribute]
public void set_MaxLines(int value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_2(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__47_3(string s);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_4(object __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__47_5(object __value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTFootRow : MudComponentBase {
    private Nullable`1<bool> _checked;
    [CompilerGeneratedAttribute]
private TableContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionChangeable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCheckbox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEditable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expandable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnRowClick>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
public TableContext Context { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public bool Checkable { get; public set; }
    [ParameterAttribute]
public bool SelectionChangeable { get; public set; }
    [ParameterAttribute]
public bool IgnoreCheckbox { get; public set; }
    [ParameterAttribute]
public bool IgnoreEditable { get; public set; }
    [ParameterAttribute]
public bool Expandable { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnRowClick { get; public set; }
    public Nullable`1<bool> Checked { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public TableContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(TableContext value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectionChangeable();
    [CompilerGeneratedAttribute]
public void set_SelectionChangeable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCheckbox();
    [CompilerGeneratedAttribute]
public void set_IgnoreCheckbox(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEditable();
    [CompilerGeneratedAttribute]
public void set_IgnoreEditable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expandable();
    [CompilerGeneratedAttribute]
public void set_Expandable(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnRowClick();
    [CompilerGeneratedAttribute]
public void set_OnRowClick(EventCallback`1<MouseEventArgs> value);
    public Nullable`1<bool> get_Checked();
    public void set_Checked(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    public void SetChecked(Nullable`1<bool> checkedState, bool notify);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_1(Nullable`1<bool> __value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTh : MudComponentBase {
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTHeadRow : MudComponentBase {
    private Nullable`1<bool> _checked;
    [CompilerGeneratedAttribute]
private TableContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionChangeable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCheckbox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreEditable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expandable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnRowClick>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
public TableContext Context { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public bool Checkable { get; public set; }
    [ParameterAttribute]
public bool SelectionChangeable { get; public set; }
    [ParameterAttribute]
public bool IgnoreCheckbox { get; public set; }
    [ParameterAttribute]
public bool IgnoreEditable { get; public set; }
    [ParameterAttribute]
public bool Expandable { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnRowClick { get; public set; }
    public Nullable`1<bool> Checked { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public TableContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(TableContext value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectionChangeable();
    [CompilerGeneratedAttribute]
public void set_SelectionChangeable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCheckbox();
    [CompilerGeneratedAttribute]
public void set_IgnoreCheckbox(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreEditable();
    [CompilerGeneratedAttribute]
public void set_IgnoreEditable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expandable();
    [CompilerGeneratedAttribute]
public void set_Expandable(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnRowClick();
    [CompilerGeneratedAttribute]
public void set_OnRowClick(EventCallback`1<MouseEventArgs> value);
    public Nullable`1<bool> get_Checked();
    public void set_Checked(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    public void SetChecked(Nullable`1<bool> checkedState, bool notify);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_0(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__41_1(Nullable`1<bool> __value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudTheme : object {
    [CompilerGeneratedAttribute]
private PaletteLight <PaletteLight>k__BackingField;
    [CompilerGeneratedAttribute]
private PaletteDark <PaletteDark>k__BackingField;
    [CompilerGeneratedAttribute]
private Shadow <Shadows>k__BackingField;
    [CompilerGeneratedAttribute]
private Typography <Typography>k__BackingField;
    [CompilerGeneratedAttribute]
private LayoutProperties <LayoutProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ZIndex <ZIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private PseudoCss <PseudoCss>k__BackingField;
    public PaletteLight PaletteLight { get; public set; }
    public PaletteDark PaletteDark { get; public set; }
    public Shadow Shadows { get; public set; }
    public Typography Typography { get; public set; }
    public LayoutProperties LayoutProperties { get; public set; }
    public ZIndex ZIndex { get; public set; }
    public PseudoCss PseudoCss { get; public set; }
    [CompilerGeneratedAttribute]
public PaletteLight get_PaletteLight();
    [CompilerGeneratedAttribute]
public void set_PaletteLight(PaletteLight value);
    [CompilerGeneratedAttribute]
public PaletteDark get_PaletteDark();
    [CompilerGeneratedAttribute]
public void set_PaletteDark(PaletteDark value);
    [CompilerGeneratedAttribute]
public Shadow get_Shadows();
    [CompilerGeneratedAttribute]
public void set_Shadows(Shadow value);
    [CompilerGeneratedAttribute]
public Typography get_Typography();
    [CompilerGeneratedAttribute]
public void set_Typography(Typography value);
    [CompilerGeneratedAttribute]
public LayoutProperties get_LayoutProperties();
    [CompilerGeneratedAttribute]
public void set_LayoutProperties(LayoutProperties value);
    [CompilerGeneratedAttribute]
public ZIndex get_ZIndex();
    [CompilerGeneratedAttribute]
public void set_ZIndex(ZIndex value);
    [CompilerGeneratedAttribute]
public PseudoCss get_PseudoCss();
    [CompilerGeneratedAttribute]
public void set_PseudoCss(PseudoCss value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudThemeProvider : ComponentBaseWithState {
    private bool _disposed;
    private bool _observing;
    private static string Palette;
    private static string Ripple;
    private static string Elevation;
    private static string Typography;
    private static string LayoutProperties;
    private static string Zindex;
    [NullableAttribute("2")]
private MudTheme _theme;
    private ParameterState`1<bool> _isDarkModeState;
    private ParameterState`1<bool> _observeSystemThemeChangeState;
    private Lazy`1<DotNetObjectReference`1<MudThemeProvider>> _lazyDotNetRef;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<bool, Task> _darkLightModeChanged;
    [CompilerGeneratedAttribute]
private IJSRuntime <JsRuntime>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MudTheme <Theme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultScrollbar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ObserveSystemThemeChange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDarkMode>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <IsDarkModeChanged>k__BackingField;
    [InjectAttribute]
private IJSRuntime JsRuntime { get; private set; }
    [NullableAttribute("2")]
[ParameterAttribute]
public MudTheme Theme { get; public set; }
    [ParameterAttribute]
public bool DefaultScrollbar { get; public set; }
    [ParameterAttribute]
public bool ObserveSystemThemeChange { get; public set; }
    [ParameterAttribute]
public bool IsDarkMode { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> IsDarkModeChanged { get; public set; }
    [CompilerGeneratedAttribute]
private void add__darkLightModeChanged(Func`2<bool, Task> value);
    [CompilerGeneratedAttribute]
private void remove__darkLightModeChanged(Func`2<bool, Task> value);
    [CompilerGeneratedAttribute]
private IJSRuntime get_JsRuntime();
    [CompilerGeneratedAttribute]
private void set_JsRuntime(IJSRuntime value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MudTheme get_Theme();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Theme(MudTheme value);
    [CompilerGeneratedAttribute]
public bool get_DefaultScrollbar();
    [CompilerGeneratedAttribute]
public void set_DefaultScrollbar(bool value);
    [CompilerGeneratedAttribute]
public bool get_ObserveSystemThemeChange();
    [CompilerGeneratedAttribute]
public void set_ObserveSystemThemeChange(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDarkMode();
    [CompilerGeneratedAttribute]
public void set_IsDarkMode(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_IsDarkModeChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_IsDarkModeChanged(EventCallback`1<bool> value);
    [AsyncStateMachineAttribute("MudBlazor.MudThemeProvider/<GetSystemPreference>d__40")]
public Task`1<bool> GetSystemPreference();
    public Task WatchSystemPreference(Func`2<bool, Task> functionOnChange);
    [AsyncStateMachineAttribute("MudBlazor.MudThemeProvider/<SystemPreferenceChanged>d__42")]
[JSInvokableAttribute]
public Task SystemPreferenceChanged(bool isDarkMode);
    [AsyncStateMachineAttribute("MudBlazor.MudThemeProvider/<OnAfterRenderAsync>d__43")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    protected virtual void OnInitialized();
    protected virtual void OnParametersSet();
    protected string BuildTheme();
    protected static string BuildMudBlazorScrollbar();
    protected virtual void GenerateTheme(StringBuilder theme);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MudBlazor.MudThemeProvider/<OnObserveSystemThemeChangeChanged>d__50")]
private Task OnObserveSystemThemeChangeChanged(ParameterChangedEventArgs`1<bool> arg);
    private ValueTask WatchDarkThemeMedia();
    private ValueTask StopWatchingDarkThemeMedia();
    private DotNetObjectReference`1<MudThemeProvider> CreateDotNetObjectReference();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__39_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__39_1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__39_2();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.MudTimeline : MudBaseItemsControl`1<MudTimelineItem> {
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private TimelineOrientation <TimelineOrientation>k__BackingField;
    [CompilerGeneratedAttribute]
private TimelinePosition <TimelinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private TimelineAlign <TimelineAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Modifiers>k__BackingField;
    protected string Classnames { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TimelineOrientation TimelineOrientation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TimelinePosition TimelinePosition { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TimelineAlign TimelineAlign { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Reverse { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Modifiers { get; public set; }
    protected string get_Classnames();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public TimelineOrientation get_TimelineOrientation();
    [CompilerGeneratedAttribute]
public void set_TimelineOrientation(TimelineOrientation value);
    [CompilerGeneratedAttribute]
public TimelinePosition get_TimelinePosition();
    [CompilerGeneratedAttribute]
public void set_TimelinePosition(TimelinePosition value);
    [CompilerGeneratedAttribute]
public TimelineAlign get_TimelineAlign();
    [CompilerGeneratedAttribute]
public void set_TimelineAlign(TimelineAlign value);
    [CompilerGeneratedAttribute]
public bool get_Reverse();
    [CompilerGeneratedAttribute]
public void set_Reverse(bool value);
    [CompilerGeneratedAttribute]
public bool get_Modifiers();
    [CompilerGeneratedAttribute]
public void set_Modifiers(bool value);
    private TimelinePosition ConvertTimelinePosition();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__27_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTimelineItem : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudBaseItemsControl`1<MudTimelineItem> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private TimelineAlign <TimelineAlign>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideDot>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ItemOpposite>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ItemContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ItemDot>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classnames { get; }
    [NullableAttribute("1")]
protected string DotClassnames { get; }
    [NullableAttribute("1")]
protected string DotInnerClassnames { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
protected internal MudBaseItemsControl`1<MudTimelineItem> Parent { get; protected internal set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public string DotStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public int Elevation { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TimelineAlign TimelineAlign { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public bool HideDot { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ItemOpposite { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ItemContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Dot")]
public RenderFragment ItemDot { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classnames();
    [NullableContextAttribute("1")]
protected string get_DotClassnames();
    [NullableContextAttribute("1")]
protected string get_DotInnerClassnames();
    [CompilerGeneratedAttribute]
protected internal MudBaseItemsControl`1<MudTimelineItem> get_Parent();
    [CompilerGeneratedAttribute]
protected internal void set_Parent(MudBaseItemsControl`1<MudTimelineItem> value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public string get_DotStyle();
    [CompilerGeneratedAttribute]
public void set_DotStyle(string value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public void set_Elevation(int value);
    [CompilerGeneratedAttribute]
public int get_Elevation();
    [CompilerGeneratedAttribute]
public TimelineAlign get_TimelineAlign();
    [CompilerGeneratedAttribute]
public void set_TimelineAlign(TimelineAlign value);
    [CompilerGeneratedAttribute]
public bool get_HideDot();
    [CompilerGeneratedAttribute]
public void set_HideDot(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ItemOpposite();
    [CompilerGeneratedAttribute]
public void set_ItemOpposite(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ItemContent();
    [CompilerGeneratedAttribute]
public void set_ItemContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ItemDot();
    [CompilerGeneratedAttribute]
public void set_ItemDot(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
protected virtual Task OnInitializedAsync();
    private void Select();
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
public class MudBlazor.MudTimePicker : MudPicker`1<Nullable`1<TimeSpan>> {
    private static string Format24Hours;
    private static string Format12Hours;
    private bool _amPm;
    private OpenTo _currentView;
    private string _timeFormat;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TimeIntermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenTo <OpenTo>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeEditMode <TimeEditMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClosingDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoClose>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinuteSelectionStep>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<Nullable`1<TimeSpan>> <TimeChanged>k__BackingField;
    private SetTime _timeSet;
    private int _initialHour;
    private int _initialMinute;
    private DotNetObjectReference`1<MudTimePicker> _dotNetRef;
    private string _clockElementReferenceId;
    [CompilerGeneratedAttribute]
private IJSRuntime <JsRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementReference <ClockElementReference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PointerMoving>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalMudLocalizer <Localizer>k__BackingField;
    internal Nullable`1<TimeSpan> TimeIntermediate { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public OpenTo OpenTo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public TimeEditMode TimeEditMode { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public int ClosingDelay { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public bool AutoClose { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Picker behavior")]
public int MinuteSelectionStep { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool AmPm { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string TimeFormat { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public Nullable`1<TimeSpan> Time { get; public set; }
    [ParameterAttribute]
public EventCallback`1<Nullable`1<TimeSpan>> TimeChanged { get; public set; }
    protected string ToolbarClassname { get; }
    protected string HoursButtonClassname { get; }
    protected string MinuteButtonClassname { get; }
    protected string AmButtonClassname { get; }
    protected string PmButtonClassname { get; }
    private string HourDialClassname { get; }
    private string MinuteDialClassname { get; }
    private bool IsAm { get; }
    private bool IsPm { get; }
    [InjectAttribute]
private IJSRuntime JsRuntime { get; private set; }
    protected ElementReference ClockElementReference { get; private set; }
    public bool PointerMoving { get; public set; }
    protected RenderFragment PickerContent { get; }
    [InjectAttribute]
private InternalMudLocalizer Localizer { get; private set; }
    private string OnSet(Nullable`1<TimeSpan> timespan);
    private Nullable`1<TimeSpan> OnGet(string value);
    private void HandleParsingError();
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_TimeIntermediate();
    [CompilerGeneratedAttribute]
private void set_TimeIntermediate(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public OpenTo get_OpenTo();
    [CompilerGeneratedAttribute]
public void set_OpenTo(OpenTo value);
    [CompilerGeneratedAttribute]
public TimeEditMode get_TimeEditMode();
    [CompilerGeneratedAttribute]
public void set_TimeEditMode(TimeEditMode value);
    [CompilerGeneratedAttribute]
public int get_ClosingDelay();
    [CompilerGeneratedAttribute]
public void set_ClosingDelay(int value);
    [CompilerGeneratedAttribute]
public bool get_AutoClose();
    [CompilerGeneratedAttribute]
public void set_AutoClose(bool value);
    [CompilerGeneratedAttribute]
public int get_MinuteSelectionStep();
    [CompilerGeneratedAttribute]
public void set_MinuteSelectionStep(int value);
    public bool get_AmPm();
    public void set_AmPm(bool value);
    public string get_TimeFormat();
    public void set_TimeFormat(string value);
    public Nullable`1<TimeSpan> get_Time();
    public void set_Time(Nullable`1<TimeSpan> value);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<SetTimeAsync>d__42")]
protected Task SetTimeAsync(Nullable`1<TimeSpan> time, bool updateValue);
    [CompilerGeneratedAttribute]
public EventCallback`1<Nullable`1<TimeSpan>> get_TimeChanged();
    [CompilerGeneratedAttribute]
public void set_TimeChanged(EventCallback`1<Nullable`1<TimeSpan>> value);
    protected virtual Task StringValueChangedAsync(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnPickerOpenedAsync>d__48")]
[ExcludeFromCodeCoverageAttribute]
protected virtual Task OnPickerOpenedAsync();
    protected internal virtual Task SubmitAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<ClearAsync>d__50")]
public virtual Task ClearAsync(bool close);
    private string GetHourString();
    private string GetMinuteString();
    private Task UpdateTimeAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnHourClickAsync>d__54")]
private Task OnHourClickAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnMinutesClick>d__55")]
private Task OnMinutesClick();
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnAmClickedAsync>d__56")]
private Task OnAmClickedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnPmClickedAsync>d__57")]
private Task OnPmClickedAsync();
    protected string get_ToolbarClassname();
    protected string get_HoursButtonClassname();
    protected string get_MinuteButtonClassname();
    protected string get_AmButtonClassname();
    protected string get_PmButtonClassname();
    private string get_HourDialClassname();
    private string get_MinuteDialClassname();
    private bool get_IsAm();
    private bool get_IsPm();
    private string GetClockPinColor();
    private string GetClockPointerColor();
    private string GetClockPointerThumbColor();
    private string GetNumberColor(int value);
    private double GetDeg();
    private static string GetTransform(double angle, double radius, double offsetX, double offsetY);
    private string GetPointerRotation();
    private string GetPointerHeight();
    protected virtual void OnInitialized();
    [CompilerGeneratedAttribute]
private IJSRuntime get_JsRuntime();
    [CompilerGeneratedAttribute]
private void set_JsRuntime(IJSRuntime value);
    [CompilerGeneratedAttribute]
protected ElementReference get_ClockElementReference();
    [CompilerGeneratedAttribute]
private void set_ClockElementReference(ElementReference value);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnAfterRenderAsync>d__98")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<DisposeAsync>d__99")]
public sealed virtual ValueTask DisposeAsync();
    private void UpdateTimeSetFromTime();
    [CompilerGeneratedAttribute]
public bool get_PointerMoving();
    [CompilerGeneratedAttribute]
public void set_PointerMoving(bool value);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<SelectTimeFromStick>d__105")]
[JSInvokableAttribute]
public Task SelectTimeFromStick(int value, bool pointerMoving);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnStickClick>d__106")]
[JSInvokableAttribute]
public Task OnStickClick(int value);
    private int HourAmPm(int hour);
    private int RoundToStepInterval(int value);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<SubmitAndCloseAsync>d__109")]
protected Task SubmitAndCloseAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<OnHandleKeyDownAsync>d__110")]
protected internal virtual Task OnHandleKeyDownAsync(KeyboardEventArgs obj);
    protected Task ChangeMinuteAsync(int minute);
    protected Task ChangeHourAsync(int hour);
    [AsyncStateMachineAttribute("MudBlazor.MudTimePicker/<ReturnTimeBackUpAsync>d__113")]
protected Task ReturnTimeBackUpAsync();
    [GeneratedRegexAttribute("AM|PM", "513")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex AmPmRegularExpression();
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    protected virtual RenderFragment get_PickerContent();
    [CompilerGeneratedAttribute]
private InternalMudLocalizer get_Localizer();
    [CompilerGeneratedAttribute]
private void set_Localizer(InternalMudLocalizer value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool firstRender);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(KeyboardEventArgs args);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_1(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_2(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_4(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_6(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_7(RenderTreeBuilder __builder5);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_3(RenderTreeBuilder __builder4);
    [CompilerGeneratedAttribute]
private void <get_PickerContent>b__118_10(ElementReference __value);
}
public class MudBlazor.MudTimeSeriesChart : MudTimeSeriesChartBase {
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_1(RenderTreeBuilder __builder3);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__0_2(int __value);
}
public abstract class MudBlazor.MudTimeSeriesChartBase : MudChartBase {
    [CompilerGeneratedAttribute]
private List`1<TimeSeriesChartSeries> <ChartSeries>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeLabelSpacing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeLabelFormat>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public List`1<TimeSeriesChartSeries> ChartSeries { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public TimeSpan TimeLabelSpacing { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string TimeLabelFormat { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<TimeSeriesChartSeries> get_ChartSeries();
    [CompilerGeneratedAttribute]
public void set_ChartSeries(List`1<TimeSeriesChartSeries> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeLabelSpacing();
    [CompilerGeneratedAttribute]
public void set_TimeLabelSpacing(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TimeLabelFormat();
    [CompilerGeneratedAttribute]
public void set_TimeLabelFormat(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[CascadingTypeParameterAttribute("T")]
public class MudBlazor.MudToggleGroup`1 : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<T> _value;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<IEnumerable`1<T>> _values;
    [NullableAttribute("1")]
private ParameterState`1<Color> _color;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<string> _selectedClass;
    [NullableAttribute("1")]
private ParameterState`1<bool> _outline;
    [NullableAttribute("1")]
private ParameterState`1<bool> _delimiters;
    [NullableAttribute("1")]
private ParameterState`1<bool> _rtl;
    [NullableAttribute("1")]
private ParameterState`1<Size> _size;
    [NullableAttribute("1")]
private ParameterState`1<bool> _rounded;
    [NullableAttribute("1")]
private ParameterState`1<bool> _checkMark;
    [NullableAttribute("1")]
private ParameterState`1<bool> _fixedContent;
    [NullableAttribute("1")]
private ParameterState`1<bool> _disabled;
    [NullableAttribute("1")]
private List`1<MudToggleItem`1<T>> _items;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <ValueChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Values>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<IEnumerable`1<T>> <ValuesChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckMarkClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Vertical>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Rounded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Outlined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Delimiters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionMode <SelectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckMark>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FixedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string Stylename { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Value { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<T> ValueChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public IEnumerable`1<T> Values { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<IEnumerable`1<T>> ValuesChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string SelectedClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string CheckMarkClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Vertical { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Rounded { get; public set; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Outlined { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Delimiters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public SelectionMode SelectionMode { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool CheckMark { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool FixedContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_Stylename();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_ValueChanged();
    [CompilerGeneratedAttribute]
public void set_ValueChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IEnumerable`1<T>> get_ValuesChanged();
    [CompilerGeneratedAttribute]
public void set_ValuesChanged(EventCallback`1<IEnumerable`1<T>> value);
    [CompilerGeneratedAttribute]
public string get_SelectedClass();
    [CompilerGeneratedAttribute]
public void set_SelectedClass(string value);
    [CompilerGeneratedAttribute]
public string get_CheckMarkClass();
    [CompilerGeneratedAttribute]
public void set_CheckMarkClass(string value);
    [CompilerGeneratedAttribute]
public bool get_Vertical();
    [CompilerGeneratedAttribute]
public void set_Vertical(bool value);
    [CompilerGeneratedAttribute]
public bool get_Rounded();
    [CompilerGeneratedAttribute]
public void set_Rounded(bool value);
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public bool get_Outlined();
    [CompilerGeneratedAttribute]
public void set_Outlined(bool value);
    [CompilerGeneratedAttribute]
public bool get_Delimiters();
    [CompilerGeneratedAttribute]
public void set_Delimiters(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(SelectionMode value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public bool get_CheckMark();
    [CompilerGeneratedAttribute]
public void set_CheckMark(bool value);
    [CompilerGeneratedAttribute]
public bool get_FixedContent();
    [CompilerGeneratedAttribute]
public void set_FixedContent(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [NullableContextAttribute("1")]
protected internal void Register(MudToggleItem`1<T> item);
    protected virtual void OnInitialized();
    protected virtual void OnAfterRender(bool firstRender);
    private void OnValueChanged();
    private void OnValuesChanged();
    private void OnParameterChanged();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudToggleGroup`1/<ToggleItemAsync>d__100")]
protected internal Task ToggleItemAsync(MudToggleItem`1<T> item);
    protected void DeselectAllItems();
    [NullableContextAttribute("1")]
protected internal IEnumerable`1<MudToggleItem`1<T>> GetItems();
    [NullableContextAttribute("1")]
protected internal bool IsFirstItem(MudToggleItem`1<T> item);
    [NullableContextAttribute("1")]
protected internal bool IsLastItem(MudToggleItem`1<T> item);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private T <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <.ctor>b__0_1();
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <.ctor>b__0_2();
    [CompilerGeneratedAttribute]
private EventCallback`1<IEnumerable`1<T>> <.ctor>b__0_3();
    [CompilerGeneratedAttribute]
private Color <.ctor>b__0_4();
    [CompilerGeneratedAttribute]
private string <.ctor>b__0_5();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_6();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_7();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_8();
    [CompilerGeneratedAttribute]
private Size <.ctor>b__0_9();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_10();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_11();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_12();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_13();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <OnValuesChanged>b__98_0(MudToggleItem`1<T> x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__105_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudToggleIconButton : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Toggled>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ToggledChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToggledIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Color> <ToggledColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Size> <ToggledSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Variant> <ToggledVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private Edge <Edge>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropShadow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClickPropagation>k__BackingField;
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Toggled { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ToggledChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ToggledIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Color> ToggledColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Size Size { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Size> ToggledSize { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Variant Variant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Nullable`1<Variant> ToggledVariant { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Edge Edge { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool DropShadow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ClickPropagation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Toggled();
    [CompilerGeneratedAttribute]
public void set_Toggled(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ToggledChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ToggledChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_ToggledIcon();
    [CompilerGeneratedAttribute]
public void set_ToggledIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Nullable`1<Color> get_ToggledColor();
    [CompilerGeneratedAttribute]
public void set_ToggledColor(Nullable`1<Color> value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Nullable`1<Size> get_ToggledSize();
    [CompilerGeneratedAttribute]
public void set_ToggledSize(Nullable`1<Size> value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public Nullable`1<Variant> get_ToggledVariant();
    [CompilerGeneratedAttribute]
public void set_ToggledVariant(Nullable`1<Variant> value);
    [CompilerGeneratedAttribute]
public Edge get_Edge();
    [CompilerGeneratedAttribute]
public void set_Edge(Edge value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropShadow();
    [CompilerGeneratedAttribute]
public void set_DropShadow(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClickPropagation();
    [CompilerGeneratedAttribute]
public void set_ClickPropagation(bool value);
    internal string GetIcon();
    internal Size GetSize();
    internal Color GetColor();
    internal Variant GetVariant();
    [NullableContextAttribute("1")]
public Task Toggle();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudToggleIconButton/<SetToggledAsync>d__65")]
protected internal Task SetToggledAsync(bool toggled);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudToggleItem`1 : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudToggleGroup`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnselectedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelectedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment`1<bool> <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string CheckMarkClassname { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
public MudToggleGroup`1<T> Parent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string UnselectedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string SelectedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public RenderFragment`1<bool> ChildContent { get; public set; }
    protected internal bool Selected { get; private set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_CheckMarkClassname();
    [CompilerGeneratedAttribute]
public MudToggleGroup`1<T> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(MudToggleGroup`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public string get_UnselectedIcon();
    [CompilerGeneratedAttribute]
public void set_UnselectedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_SelectedIcon();
    [CompilerGeneratedAttribute]
public void set_SelectedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<bool> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<bool> value);
    [CompilerGeneratedAttribute]
protected internal bool get_Selected();
    [CompilerGeneratedAttribute]
private void set_Selected(bool value);
    private string GetCurrentIcon();
    protected virtual void OnInitialized();
    public void SetSelected(bool selected);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudToggleItem`1/<HandleOnClickAsync>d__39")]
protected Task HandleOnClickAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__40_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudToolBar : MudComponentBase {
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Gutters>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WrapContent>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Gutters { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool WrapContent { get; public set; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [CompilerGeneratedAttribute]
public bool get_Gutters();
    [CompilerGeneratedAttribute]
public void set_Gutters(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_WrapContent();
    [CompilerGeneratedAttribute]
public void set_WrapContent(bool value);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTooltip : MudComponentBase {
    [NullableAttribute("1")]
private ParameterState`1<bool> _visibleState;
    private Origin _anchorOrigin;
    private Origin _transformOrigin;
    [CompilerGeneratedAttribute]
private bool <RightToLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Arrow>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Placement <Placement>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <TooltipContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inline>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnHover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <VisibleChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [NullableAttribute("1")]
protected string ContainerClass { get; }
    [NullableAttribute("1")]
protected string Classname { get; }
    [CascadingParameterAttribute]
public bool RightToLeft { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Arrow { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public double Duration { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public double Delay { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Placement Placement { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment TooltipContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Inline { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string RootStyle { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string RootClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool ShowOnHover { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool ShowOnFocus { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool ShowOnClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public EventCallback`1<bool> VisibleChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [NullableContextAttribute("1")]
protected string get_ContainerClass();
    [NullableContextAttribute("1")]
protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_RightToLeft();
    [CompilerGeneratedAttribute]
public void set_RightToLeft(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_Arrow();
    [CompilerGeneratedAttribute]
public void set_Arrow(bool value);
    [CompilerGeneratedAttribute]
public double get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(double value);
    [CompilerGeneratedAttribute]
public double get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(double value);
    [CompilerGeneratedAttribute]
public Placement get_Placement();
    [CompilerGeneratedAttribute]
public void set_Placement(Placement value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_TooltipContent();
    [CompilerGeneratedAttribute]
public void set_TooltipContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public bool get_Inline();
    [CompilerGeneratedAttribute]
public void set_Inline(bool value);
    [CompilerGeneratedAttribute]
public string get_RootStyle();
    [CompilerGeneratedAttribute]
public void set_RootStyle(string value);
    [CompilerGeneratedAttribute]
public string get_RootClass();
    [CompilerGeneratedAttribute]
public void set_RootClass(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowOnHover();
    [CompilerGeneratedAttribute]
public void set_ShowOnHover(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowOnFocus();
    [CompilerGeneratedAttribute]
public void set_ShowOnFocus(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowOnClick();
    [CompilerGeneratedAttribute]
public void set_ShowOnClick(bool value);
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_VisibleChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_VisibleChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [NullableContextAttribute("1")]
private Task HandlePointerEnterAsync();
    [NullableContextAttribute("1")]
private Task HandlePointerLeaveAsync();
    [NullableContextAttribute("1")]
private Task HandleFocusInAsync();
    [NullableContextAttribute("1")]
private Task HandleFocusOutAsync();
    [NullableContextAttribute("1")]
private Task HandlePointerUpAsync();
    private Origin ConvertPlacement();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__3_1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__86_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTr : MudComponentBase {
    private bool _checked;
    private bool _hasBeenCanceled;
    private bool _hasBeenCommitted;
    private bool _hasBeenClickedFirstTime;
    [CompilerGeneratedAttribute]
private TableContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Checkable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SelectionChangeable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expandable>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <CheckedChanged>k__BackingField;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string ActionsStylename { get; }
    [CascadingParameterAttribute]
public TableContext Context { get; public set; }
    [ParameterAttribute]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
public object Item { get; public set; }
    [ParameterAttribute]
public bool Checkable { get; public set; }
    [ParameterAttribute]
public bool SelectionChangeable { get; public set; }
    [ParameterAttribute]
public bool Editable { get; public set; }
    [ParameterAttribute]
public bool Expandable { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> CheckedChanged { get; public set; }
    [ParameterAttribute]
public bool Checked { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventCallback`1<PointerEventArgs> RowMouseEnterEventCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private EventCallback`1<PointerEventArgs> RowMouseLeaveEventCallback { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_ActionsStylename();
    [CompilerGeneratedAttribute]
public TableContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(TableContext value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public object get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(object value);
    [CompilerGeneratedAttribute]
public bool get_Checkable();
    [CompilerGeneratedAttribute]
public void set_Checkable(bool value);
    [CompilerGeneratedAttribute]
public bool get_SelectionChangeable();
    [CompilerGeneratedAttribute]
public void set_SelectionChangeable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expandable();
    [CompilerGeneratedAttribute]
public void set_Expandable(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_CheckedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_CheckedChanged(EventCallback`1<bool> value);
    public bool get_Checked();
    public void set_Checked(bool value);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTr/<OnRowClickedAsync>d__43")]
public Task OnRowClickedAsync(MouseEventArgs args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTr/<OnRowMouseEnterAsync>d__44")]
public Task OnRowMouseEnterAsync(PointerEventArgs args);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTr/<OnRowMouseLeaveAsync>d__45")]
public Task OnRowMouseLeaveAsync(PointerEventArgs args);
    private EventCallback`1<PointerEventArgs> get_RowMouseEnterEventCallback();
    private EventCallback`1<PointerEventArgs> get_RowMouseLeaveEventCallback();
    private void StartEditingItem();
    private void StartEditingItem(bool buttonClicked);
    [NullableContextAttribute("1")]
protected virtual Task OnInitializedAsync();
    public sealed virtual void Dispose();
    public void SetChecked(bool checkedState, bool notify);
    [NullableContextAttribute("1")]
private void FinishEdit(MouseEventArgs ev);
    [NullableContextAttribute("1")]
private void CancelEdit(MouseEventArgs ev);
    public void ManagePreviousEdition();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_0(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_3(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_4(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_1(RenderTreeBuilder __builder2);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_5(bool __value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_2(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_6(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__58_7(RenderTreeBuilder __builder3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CascadingTypeParameterAttribute("T")]
public class MudBlazor.MudTreeView`1 : MudComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<T> _selectedValueState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterState`1<IReadOnlyCollection`1<T>> _selectedValuesState;
    private HashSet`1<T> _selection;
    private HashSet`1<MudTreeViewItem`1<T>> _childItems;
    private bool _isFirstRender;
    [CompilerGeneratedAttribute]
private MudTreeView`1<T> <MudTreeRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <CheckBoxColor>k__BackingField;
    [CompilerGeneratedAttribute]
private SelectionMode <SelectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSelectParent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandOnClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandOnDoubleClick>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dense>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Height>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <MaxHeight>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ripple>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TreeItemData`1<T>> <Items>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <SelectedValue>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<T> <SelectedValueChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <SelectedValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<IReadOnlyCollection`1<T>> <SelectedValuesChanged>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<TreeItemData`1<T>> <ItemTemplate>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <Comparer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, Task`1<IReadOnlyCollection`1<TreeItemData`1<T>>>> <ServerData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UncheckedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndeterminateIcon>k__BackingField;
    internal bool MultiSelection { get; }
    private bool ToggleSelection { get; }
    protected string Classname { get; }
    protected string Stylename { get; }
    [CascadingParameterAttribute]
private MudTreeView`1<T> MudTreeRoot { get; private set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public Color Color { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public Color CheckBoxColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public SelectionMode SelectionMode { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool TriState { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool AutoSelectParent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool ExpandOnClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Click action")]
public bool ExpandOnDoubleClick { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool AutoExpand { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Hover { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Dense { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Height { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string MaxHeight { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string Width { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public bool Ripple { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public IReadOnlyCollection`1<TreeItemData`1<T>> Items { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public T SelectedValue { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<T> SelectedValueChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public IReadOnlyCollection`1<T> SelectedValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<IReadOnlyCollection`1<T>> SelectedValuesChanged { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment ChildContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment`1<TreeItemData`1<T>> ItemTemplate { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Selecting")]
public IEqualityComparer`1<T> Comparer { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public Func`2<T, Task`1<IReadOnlyCollection`1<TreeItemData`1<T>>>> ServerData { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public string CheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public string UncheckedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public string IndeterminateIcon { get; public set; }
    internal bool get_MultiSelection();
    private bool get_ToggleSelection();
    protected string get_Classname();
    protected string get_Stylename();
    [CompilerGeneratedAttribute]
private MudTreeView`1<T> get_MudTreeRoot();
    [CompilerGeneratedAttribute]
private void set_MudTreeRoot(MudTreeView`1<T> value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [CompilerGeneratedAttribute]
public Color get_CheckBoxColor();
    [CompilerGeneratedAttribute]
public void set_CheckBoxColor(Color value);
    [CompilerGeneratedAttribute]
public SelectionMode get_SelectionMode();
    [CompilerGeneratedAttribute]
public void set_SelectionMode(SelectionMode value);
    [CompilerGeneratedAttribute]
public bool get_TriState();
    [CompilerGeneratedAttribute]
public void set_TriState(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoSelectParent();
    [CompilerGeneratedAttribute]
public void set_AutoSelectParent(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExpandOnClick();
    [CompilerGeneratedAttribute]
public void set_ExpandOnClick(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExpandOnDoubleClick();
    [CompilerGeneratedAttribute]
public void set_ExpandOnDoubleClick(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoExpand();
    [CompilerGeneratedAttribute]
public void set_AutoExpand(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hover();
    [CompilerGeneratedAttribute]
public void set_Hover(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dense();
    [CompilerGeneratedAttribute]
public void set_Dense(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Height();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Height(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_MaxHeight();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_MaxHeight(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Width();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Width(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Ripple();
    [CompilerGeneratedAttribute]
public void set_Ripple(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TreeItemData`1<T>> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IReadOnlyCollection`1<TreeItemData`1<T>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_SelectedValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SelectedValue(T value);
    [CompilerGeneratedAttribute]
public EventCallback`1<T> get_SelectedValueChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValueChanged(EventCallback`1<T> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<T> get_SelectedValues();
    [CompilerGeneratedAttribute]
public void set_SelectedValues(IReadOnlyCollection`1<T> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<IReadOnlyCollection`1<T>> get_SelectedValuesChanged();
    [CompilerGeneratedAttribute]
public void set_SelectedValuesChanged(EventCallback`1<IReadOnlyCollection`1<T>> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<TreeItemData`1<T>> get_ItemTemplate();
    [CompilerGeneratedAttribute]
public void set_ItemTemplate(RenderFragment`1<TreeItemData`1<T>> value);
    [CompilerGeneratedAttribute]
public IEqualityComparer`1<T> get_Comparer();
    [CompilerGeneratedAttribute]
public void set_Comparer(IEqualityComparer`1<T> value);
    [CompilerGeneratedAttribute]
public Func`2<T, Task`1<IReadOnlyCollection`1<TreeItemData`1<T>>>> get_ServerData();
    [CompilerGeneratedAttribute]
public void set_ServerData(Func`2<T, Task`1<IReadOnlyCollection`1<TreeItemData`1<T>>>> value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_CheckedIcon();
    [CompilerGeneratedAttribute]
public void set_CheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_UncheckedIcon();
    [CompilerGeneratedAttribute]
public void set_UncheckedIcon(string value);
    [CompilerGeneratedAttribute]
public string get_IndeterminateIcon();
    [CompilerGeneratedAttribute]
public void set_IndeterminateIcon(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<OnAfterRenderAsync>d__130")]
protected virtual Task OnAfterRenderAsync(bool firstRender);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<ExpandAllAsync>d__131")]
public Task ExpandAllAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<CollapseAllAsync>d__132")]
public Task CollapseAllAsync();
    private Task OnSelectedValueChangedAsync(ParameterChangedEventArgs`1<T> args);
    private Task OnSelectedValuesChangedAsync(ParameterChangedEventArgs`1<IReadOnlyCollection`1<T>> args);
    private Task OnComparerChangedAsync(ParameterChangedEventArgs`1<IEqualityComparer`1<T>> args);
    private Task OnParameterChangedAsync();
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<OnItemClickAsync>d__137")]
internal Task OnItemClickAsync(MudTreeViewItem`1<T> clickedItem);
    private void UpdateParentItem(MudTreeViewItem`1<T> parentItem);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<AddChildAsync>d__139")]
internal Task AddChildAsync(MudTreeViewItem`1<T> item);
    internal void RemoveChild(MudTreeViewItem`1<T> item);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<SelectAsync>d__141")]
internal Task SelectAsync(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<UnselectAsync>d__142")]
internal Task UnselectAsync(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<SetSelectedValueAsync>d__143")]
internal Task SetSelectedValueAsync(T value);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<SetSelectedValuesAsync>d__144")]
private Task SetSelectedValuesAsync(IReadOnlyCollection`1<T> newValues);
    [AsyncStateMachineAttribute("MudBlazor.MudTreeView`1/<UpdateItemsAsync>d__145")]
private Task UpdateItemsAsync();
    private HashSet`1<T> GetSelection();
    private HashSet`1<T> GetChildValuesRecursive(IEnumerable`1<MudTreeViewItem`1<T>> children, HashSet`1<T> values);
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private T <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private EventCallback`1<T> <.ctor>b__0_1();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_2();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<T> <.ctor>b__0_3();
    [CompilerGeneratedAttribute]
private EventCallback`1<IReadOnlyCollection`1<T>> <.ctor>b__0_4();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_5();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <.ctor>b__0_7();
    [CompilerGeneratedAttribute]
private SelectionMode <.ctor>b__0_8();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_9();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_10();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__0_11();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool firstRender);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <UpdateParentItem>b__138_2(T x);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__148_0(RenderTreeBuilder __builder2);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.MudTreeViewItem`1 : MudComponentBase {
    private bool _isServerLoaded;
    [NullableAttribute("1")]
private ParameterState`1<bool> _selectedState;
    [NullableAttribute("1")]
private ParameterState`1<bool> _expandedState;
    [NullableAttribute("1")]
private Converter`1<T> _converter;
    [NullableAttribute("1")]
private HashSet`1<MudTreeViewItem`1<T>> _childItems;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudTreeView`1<T> <MudTreeRoot>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudTreeViewItem`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Typo <TextTypo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndText>k__BackingField;
    [CompilerGeneratedAttribute]
private Typo <EndTextTypo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTextClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanExpand>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <ChildContent>k__BackingField;
    [CompilerGeneratedAttribute]
private RenderFragment <Content>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<MudTreeViewItem`1<T>> <BodyContent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<TreeItemData`1<T>> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconExpanded>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <EndIconColor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ExpandButtonIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ExpandButtonIconColor>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <LoadingIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LoadingIconColor>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <SelectedChanged>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnClick>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventCallback`1<MouseEventArgs> <OnDoubleClick>k__BackingField;
    private bool _loading;
    [NullableAttribute("1")]
protected string Classname { get; }
    [NullableAttribute("1")]
protected string ContentClassname { get; }
    [NullableAttribute("1")]
public string TextClassname { get; }
    private bool MultiSelection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
private MudTreeView`1<T> MudTreeRoot { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CascadingParameterAttribute]
internal MudTreeViewItem`1<T> Parent { get; internal set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public T Value { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Text { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Typo TextTypo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string TextClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string EndText { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Typo EndTextTypo { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string EndTextClass { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool ReadOnly { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool CanExpand { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Data")]
public RenderFragment ChildContent { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment Content { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Behavior")]
public RenderFragment`1<MudTreeViewItem`1<T>> BodyContent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[CategoryAttribute("Data")]
public IReadOnlyCollection`1<TreeItemData`1<T>> Items { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Expanding")]
public bool Expanded { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Selecting")]
public bool Selected { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string Icon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string IconExpanded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color IconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public string EndIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color EndIconColor { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Expanding")]
public string ExpandButtonIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Expanding")]
public Color ExpandButtonIconColor { get; public set; }
    [NullableAttribute("1")]
[ParameterAttribute]
[CategoryAttribute("Appearance")]
public string LoadingIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color LoadingIconColor { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> SelectedChanged { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnClick { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public EventCallback`1<MouseEventArgs> OnDoubleClick { get; public set; }
    [NullableAttribute("1")]
private string CheckedIcon { get; }
    [NullableAttribute("1")]
private string UncheckedIcon { get; }
    [NullableAttribute("1")]
private string IndeterminateIcon { get; }
    [NullableAttribute("1")]
internal List`1<MudTreeViewItem`1<T>> ChildItems { get; }
    private bool HasIcon { get; }
    [NullableContextAttribute("1")]
protected string get_Classname();
    [NullableContextAttribute("1")]
protected string get_ContentClassname();
    [NullableContextAttribute("1")]
public string get_TextClassname();
    private bool get_MultiSelection();
    [CompilerGeneratedAttribute]
private MudTreeView`1<T> get_MudTreeRoot();
    [CompilerGeneratedAttribute]
private void set_MudTreeRoot(MudTreeView`1<T> value);
    [CompilerGeneratedAttribute]
internal MudTreeViewItem`1<T> get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(MudTreeViewItem`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Typo get_TextTypo();
    [CompilerGeneratedAttribute]
public void set_TextTypo(Typo value);
    [CompilerGeneratedAttribute]
public string get_TextClass();
    [CompilerGeneratedAttribute]
public void set_TextClass(string value);
    [CompilerGeneratedAttribute]
public string get_EndText();
    [CompilerGeneratedAttribute]
public void set_EndText(string value);
    [CompilerGeneratedAttribute]
public Typo get_EndTextTypo();
    [CompilerGeneratedAttribute]
public void set_EndTextTypo(Typo value);
    [CompilerGeneratedAttribute]
public string get_EndTextClass();
    [CompilerGeneratedAttribute]
public void set_EndTextClass(string value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanExpand();
    [CompilerGeneratedAttribute]
public void set_CanExpand(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(RenderFragment value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<MudTreeViewItem`1<T>> get_BodyContent();
    [CompilerGeneratedAttribute]
public void set_BodyContent(RenderFragment`1<MudTreeViewItem`1<T>> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<TreeItemData`1<T>> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IReadOnlyCollection`1<TreeItemData`1<T>> value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Selected();
    [CompilerGeneratedAttribute]
public void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_IconExpanded();
    [CompilerGeneratedAttribute]
public void set_IconExpanded(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public string get_EndIcon();
    [CompilerGeneratedAttribute]
public void set_EndIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_EndIconColor();
    [CompilerGeneratedAttribute]
public void set_EndIconColor(Color value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ExpandButtonIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_ExpandButtonIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_ExpandButtonIconColor();
    [CompilerGeneratedAttribute]
public void set_ExpandButtonIconColor(Color value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LoadingIcon();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_LoadingIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_LoadingIconColor();
    [CompilerGeneratedAttribute]
public void set_LoadingIconColor(Color value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_SelectedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_SelectedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnClick();
    [CompilerGeneratedAttribute]
public void set_OnClick(EventCallback`1<MouseEventArgs> value);
    [CompilerGeneratedAttribute]
public EventCallback`1<MouseEventArgs> get_OnDoubleClick();
    [CompilerGeneratedAttribute]
public void set_OnDoubleClick(EventCallback`1<MouseEventArgs> value);
    [NullableContextAttribute("1")]
private string get_CheckedIcon();
    [NullableContextAttribute("1")]
private string get_UncheckedIcon();
    [NullableContextAttribute("1")]
private string get_IndeterminateIcon();
    private bool HasChildren();
    internal T GetValue();
    private string GetText();
    private bool GetDisabled();
    private Nullable`1<bool> GetCheckBoxStateTriState();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<ExpandAllAsync>d__150")]
public Task ExpandAllAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<CollapseAllAsync>d__151")]
public Task CollapseAllAsync();
    protected virtual void OnParametersSet();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<OnCheckboxChangedAsync>d__153")]
private Task OnCheckboxChangedAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<OnInitializedAsync>d__154")]
protected virtual Task OnInitializedAsync();
    [NullableContextAttribute("1")]
private Task OnSelectedParameterChangedAsync(ParameterChangedEventArgs`1<bool> arg);
    private bool GetReadOnly();
    private bool GetExpandOnClick();
    private bool GetExpandOnDoubleClick();
    private bool GetRipple();
    private bool GetAutoExpand();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<OnItemClickedAsync>d__161")]
private Task OnItemClickedAsync(MouseEventArgs ev);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<OnItemDoubleClickedAsync>d__162")]
private Task OnItemDoubleClickedAsync(MouseEventArgs ev);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<OnItemExpanded>d__163")]
private Task OnItemExpanded(bool expanded);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<ReloadAsync>d__164")]
public Task ReloadAsync();
    [NullableContextAttribute("1")]
private void AddChild(MudTreeViewItem`1<T> item);
    [NullableContextAttribute("1")]
private void RemoveChild(MudTreeViewItem`1<T> item);
    [NullableContextAttribute("1")]
internal List`1<MudTreeViewItem`1<T>> get_ChildItems();
    private bool get_HasIcon();
    private string GetIcon();
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<GetSelectedItems>d__172")]
internal IEnumerable`1<MudTreeViewItem`1<T>> GetSelectedItems();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<TryInvokeServerLoadFunc>d__173")]
internal Task TryInvokeServerLoadFunc();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.MudTreeViewItem`1/<UpdateSelectionStateAsync>d__174")]
internal Task`1<bool> UpdateSelectionStateAsync(HashSet`1<T> selectedValues);
    public sealed virtual void Dispose();
    internal List`1<MudTreeViewItem`1<T>> GetChildItemsRecursive(List`1<MudTreeViewItem`1<T>> list);
    [NullableContextAttribute("1")]
private string GetIndeterminateIcon();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__5_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__5_1();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__5_2();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__5_3();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Task <BuildRenderTree>b__178_0(Nullable`1<bool> x);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__178_1(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__178_2(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__178_3(RenderTreeBuilder __builder2);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__178_4(RenderTreeBuilder __builder3);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__178_5(RenderTreeBuilder __builder4);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__178_6(RenderTreeBuilder __builder5);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudTreeViewItemToggleButton : MudComponentBase {
    private ParameterState`1<bool> _expandedState;
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Loading>k__BackingField;
    [NullableAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <ExpandedChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadingIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LoadingIconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpandedIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ExpandedIconColor>k__BackingField;
    protected string Classname { get; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Visible { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Disabled { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Expanded { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Behavior")]
public bool Loading { get; public set; }
    [NullableAttribute("0")]
[ParameterAttribute]
public EventCallback`1<bool> ExpandedChanged { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string LoadingIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color LoadingIconColor { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public string ExpandedIcon { get; public set; }
    [ParameterAttribute]
[CategoryAttribute("Appearance")]
public Color ExpandedIconColor { get; public set; }
    protected string get_Classname();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    [CompilerGeneratedAttribute]
public void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public bool get_Loading();
    [CompilerGeneratedAttribute]
public void set_Loading(bool value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public EventCallback`1<bool> get_ExpandedChanged();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
public void set_ExpandedChanged(EventCallback`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_LoadingIcon();
    [CompilerGeneratedAttribute]
public void set_LoadingIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_LoadingIconColor();
    [CompilerGeneratedAttribute]
public void set_LoadingIconColor(Color value);
    [CompilerGeneratedAttribute]
public string get_ExpandedIcon();
    [CompilerGeneratedAttribute]
public void set_ExpandedIcon(string value);
    [CompilerGeneratedAttribute]
public Color get_ExpandedIconColor();
    [CompilerGeneratedAttribute]
public void set_ExpandedIconColor(Color value);
    private Task ToggleAsync();
    private void OnDoubleClick();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private EventCallback`1<bool> <.ctor>b__1_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.MudVirtualize`1 : ComponentBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Virtualize`1<T> _virtualizeContainerReference;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private RenderFragment`1<T> <ChildContent>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RenderFragment <Placeholder>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<T> <Items>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ItemsProviderDelegate`1<T> <ItemsProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverscanCount>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ItemSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpacerElement>k__BackingField;
    [ParameterAttribute]
public bool Enabled { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public RenderFragment`1<T> ChildContent { get; public set; }
    [NullableAttribute("2")]
[ParameterAttribute]
public RenderFragment Placeholder { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public ICollection`1<T> Items { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public ItemsProviderDelegate`1<T> ItemsProvider { get; public set; }
    [ParameterAttribute]
public int OverscanCount { get; public set; }
    [ParameterAttribute]
public float ItemSize { get; public set; }
    [ParameterAttribute]
public string SpacerElement { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public RenderFragment`1<T> get_ChildContent();
    [CompilerGeneratedAttribute]
public void set_ChildContent(RenderFragment`1<T> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RenderFragment get_Placeholder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Placeholder(RenderFragment value);
    [CompilerGeneratedAttribute]
public ICollection`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(ICollection`1<T> value);
    [CompilerGeneratedAttribute]
public ItemsProviderDelegate`1<T> get_ItemsProvider();
    [CompilerGeneratedAttribute]
public void set_ItemsProvider(ItemsProviderDelegate`1<T> value);
    [CompilerGeneratedAttribute]
public int get_OverscanCount();
    [CompilerGeneratedAttribute]
public void set_OverscanCount(int value);
    [CompilerGeneratedAttribute]
public float get_ItemSize();
    [CompilerGeneratedAttribute]
public void set_ItemSize(float value);
    [CompilerGeneratedAttribute]
public string get_SpacerElement();
    [CompilerGeneratedAttribute]
public void set_SpacerElement(string value);
    [AsyncStateMachineAttribute("MudBlazor.MudVirtualize`1/<RefreshDataAsync>d__33")]
public Task RefreshDataAsync();
    [NullableContextAttribute("0")]
protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__34_0(T item);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__34_1(PlaceholderContext item);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_7(RenderTreeBuilder __builder2);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_2(Virtualize`1<T> __value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__34_3(T item);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__34_4(PlaceholderContext item);
    [CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_9(RenderTreeBuilder __builder2);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <BuildRenderTree>b__34_5(Virtualize`1<T> __value);
}
public class MudBlazor.MultiMask : PatternMask {
    private string _defaultMask;
    private MaskOption[] _options;
    [CompilerGeneratedAttribute]
private Action`2<Nullable`1<MaskOption>, string> <OptionDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MaskOption> <DetectedOption>k__BackingField;
    public Action`2<Nullable`1<MaskOption>, string> OptionDetected { get; public set; }
    public Nullable`1<MaskOption> DetectedOption { get; private set; }
    public MultiMask(string defaultMask, MaskOption[] options);
    [CompilerGeneratedAttribute]
public Action`2<Nullable`1<MaskOption>, string> get_OptionDetected();
    [CompilerGeneratedAttribute]
public void set_OptionDetected(Action`2<Nullable`1<MaskOption>, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MaskOption> get_DetectedOption();
    [CompilerGeneratedAttribute]
private void set_DetectedOption(Nullable`1<MaskOption> value);
    public virtual void Insert(string input);
    public virtual void Delete();
    public virtual void Backspace();
    protected void DoCheckAndRedo(Action action);
    protected virtual Nullable`1<MaskOption> CheckOption();
    public virtual void UpdateFrom(IMask other);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.NavigationContext : object {
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MenuId>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool Disabled { get; public set; }
    public bool Expanded { get; public set; }
    public string MenuId { get; }
    public NavigationContext(bool Disabled, bool Expanded);
    [CompilerGeneratedAttribute]
protected NavigationContext(NavigationContext original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Expanded();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public string get_MenuId();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NavigationContext left, NavigationContext right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NavigationContext left, NavigationContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NavigationContext other);
    [CompilerGeneratedAttribute]
public virtual NavigationContext <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& Disabled, Boolean& Expanded);
}
public class MudBlazor.NullableDateConverter : Converter`1<Nullable`1<DateTime>> {
    [CompilerGeneratedAttribute]
private string <DateFormat>k__BackingField;
    public string DateFormat { get; public set; }
    public NullableDateConverter(string format);
    [CompilerGeneratedAttribute]
public string get_DateFormat();
    [CompilerGeneratedAttribute]
public void set_DateFormat(string value);
    private Nullable`1<DateTime> OnGet(string arg);
    private string OnSet(Nullable`1<DateTime> arg);
}
[ExcludeFromCodeCoverageAttribute]
internal static class MudBlazor.Num : object {
    public static T To(double d);
    public static double From(T v);
}
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.NumericConverter`1 : Converter`2<T, double> {
    private T OnGet(double value);
    private double OnSet(T arg);
}
public enum MudBlazor.ObjectFit : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static ObjectFit None;
    [DescriptionAttribute("cover")]
public static ObjectFit Cover;
    [DescriptionAttribute("contain")]
public static ObjectFit Contain;
    [DescriptionAttribute("fill")]
public static ObjectFit Fill;
    [DescriptionAttribute("scale-down")]
public static ObjectFit ScaleDown;
}
[ExtensionAttribute]
public static class MudBlazor.ObjectFitSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(ObjectFit mudEnum);
}
public enum MudBlazor.ObjectPosition : Enum {
    public int value__;
    [DescriptionAttribute("center")]
public static ObjectPosition Center;
    [DescriptionAttribute("top")]
public static ObjectPosition Top;
    [DescriptionAttribute("bottom")]
public static ObjectPosition Bottom;
    [DescriptionAttribute("left")]
public static ObjectPosition Left;
    [DescriptionAttribute("left-top")]
public static ObjectPosition LeftTop;
    [DescriptionAttribute("left-bottom")]
public static ObjectPosition LeftBottom;
    [DescriptionAttribute("right")]
public static ObjectPosition Right;
    [DescriptionAttribute("right-top")]
public static ObjectPosition RightTop;
    [DescriptionAttribute("right-bottom")]
public static ObjectPosition RightBottom;
}
[ExtensionAttribute]
public static class MudBlazor.ObjectPositionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(ObjectPosition mudEnum);
}
public enum MudBlazor.OpenTo : Enum {
    public int value__;
    public static OpenTo None;
    public static OpenTo Date;
    public static OpenTo Year;
    public static OpenTo Month;
    public static OpenTo Hours;
    public static OpenTo Minutes;
}
public enum MudBlazor.Orientation : Enum {
    public int value__;
    [DescriptionAttribute("portrait")]
public static Orientation Portrait;
    [DescriptionAttribute("landscape")]
public static Orientation Landscape;
}
[ExtensionAttribute]
public static class MudBlazor.OrientationSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Orientation mudEnum);
}
public enum MudBlazor.Origin : Enum {
    public int value__;
    [DescriptionAttribute("top-left")]
public static Origin TopLeft;
    [DescriptionAttribute("top-center")]
public static Origin TopCenter;
    [DescriptionAttribute("top-right")]
public static Origin TopRight;
    [DescriptionAttribute("center-left")]
public static Origin CenterLeft;
    [DescriptionAttribute("center-center")]
public static Origin CenterCenter;
    [DescriptionAttribute("center-right")]
public static Origin CenterRight;
    [DescriptionAttribute("bottom-left")]
public static Origin BottomLeft;
    [DescriptionAttribute("bottom-center")]
public static Origin BottomCenter;
    [DescriptionAttribute("bottom-right")]
public static Origin BottomRight;
}
[ExtensionAttribute]
public static class MudBlazor.OriginSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Origin mudEnum);
}
public enum MudBlazor.OverflowBehavior : Enum {
    public int value__;
    [DescriptionAttribute("flip-never")]
public static OverflowBehavior FlipNever;
    [DescriptionAttribute("flip-onopen")]
public static OverflowBehavior FlipOnOpen;
    [DescriptionAttribute("flip-always")]
public static OverflowBehavior FlipAlways;
}
[ExtensionAttribute]
public static class MudBlazor.OverflowBehaviorSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(OverflowBehavior mudEnum);
}
public class MudBlazor.Overline : BaseTypography {
}
public enum MudBlazor.Page : Enum {
    public int value__;
    public static Page First;
    public static Page Previous;
    public static Page Next;
    public static Page Last;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MudBlazor.Palette : object {
    [NullableAttribute("2")]
private MudColor _primaryDarken;
    [NullableAttribute("2")]
private MudColor _primaryLighten;
    [NullableAttribute("2")]
private MudColor _secondaryDarken;
    [NullableAttribute("2")]
private MudColor _secondaryLighten;
    [NullableAttribute("2")]
private MudColor _tertiaryDarken;
    [NullableAttribute("2")]
private MudColor _tertiaryLighten;
    [NullableAttribute("2")]
private MudColor _infoDarken;
    [NullableAttribute("2")]
private MudColor _infoLighten;
    [NullableAttribute("2")]
private MudColor _successDarken;
    [NullableAttribute("2")]
private MudColor _successLighten;
    [NullableAttribute("2")]
private MudColor _warningDarken;
    [NullableAttribute("2")]
private MudColor _warningLighten;
    [NullableAttribute("2")]
private MudColor _errorDarken;
    [NullableAttribute("2")]
private MudColor _errorLighten;
    [NullableAttribute("2")]
private MudColor _darkDarken;
    [NullableAttribute("2")]
private MudColor _darkLighten;
    [CompilerGeneratedAttribute]
private MudColor <Black>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <White>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <PrimaryContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Secondary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <SecondaryContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Tertiary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TertiaryContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <InfoContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <SuccessContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <WarningContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ErrorContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Dark>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DarkContrastText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TextPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TextSecondary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TextDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ActionDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ActionDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ActionDisabledBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <BackgroundGray>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DrawerBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DrawerText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DrawerIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <AppbarBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <AppbarText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <LinesDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <LinesInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TableLines>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TableStriped>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TableHover>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Divider>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DividerLight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HoverOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RippleOpacity>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RippleOpacitySecondary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrayDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrayLight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrayLighter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrayDark>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GrayDarker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverlayDark>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverlayLight>k__BackingField;
    public MudColor Black { get; public set; }
    public MudColor White { get; public set; }
    public MudColor Primary { get; public set; }
    public MudColor PrimaryContrastText { get; public set; }
    public MudColor Secondary { get; public set; }
    public MudColor SecondaryContrastText { get; public set; }
    public MudColor Tertiary { get; public set; }
    public MudColor TertiaryContrastText { get; public set; }
    public MudColor Info { get; public set; }
    public MudColor InfoContrastText { get; public set; }
    public MudColor Success { get; public set; }
    public MudColor SuccessContrastText { get; public set; }
    public MudColor Warning { get; public set; }
    public MudColor WarningContrastText { get; public set; }
    public MudColor Error { get; public set; }
    public MudColor ErrorContrastText { get; public set; }
    public MudColor Dark { get; public set; }
    public MudColor DarkContrastText { get; public set; }
    public MudColor TextPrimary { get; public set; }
    public MudColor TextSecondary { get; public set; }
    public MudColor TextDisabled { get; public set; }
    public MudColor ActionDefault { get; public set; }
    public MudColor ActionDisabled { get; public set; }
    public MudColor ActionDisabledBackground { get; public set; }
    public MudColor Background { get; public set; }
    public MudColor BackgroundGray { get; public set; }
    public MudColor Surface { get; public set; }
    public MudColor DrawerBackground { get; public set; }
    public MudColor DrawerText { get; public set; }
    public MudColor DrawerIcon { get; public set; }
    public MudColor AppbarBackground { get; public set; }
    public MudColor AppbarText { get; public set; }
    public MudColor LinesDefault { get; public set; }
    public MudColor LinesInputs { get; public set; }
    public MudColor TableLines { get; public set; }
    public MudColor TableStriped { get; public set; }
    public MudColor TableHover { get; public set; }
    public MudColor Divider { get; public set; }
    public MudColor DividerLight { get; public set; }
    public string PrimaryDarken { get; public set; }
    public string PrimaryLighten { get; public set; }
    public string SecondaryDarken { get; public set; }
    public string SecondaryLighten { get; public set; }
    public string TertiaryDarken { get; public set; }
    public string TertiaryLighten { get; public set; }
    public string InfoDarken { get; public set; }
    public string InfoLighten { get; public set; }
    public string SuccessDarken { get; public set; }
    public string SuccessLighten { get; public set; }
    public string WarningDarken { get; public set; }
    public string WarningLighten { get; public set; }
    public string ErrorDarken { get; public set; }
    public string ErrorLighten { get; public set; }
    public string DarkDarken { get; public set; }
    public string DarkLighten { get; public set; }
    public double HoverOpacity { get; public set; }
    public double RippleOpacity { get; public set; }
    public double RippleOpacitySecondary { get; public set; }
    public string GrayDefault { get; public set; }
    public string GrayLight { get; public set; }
    public string GrayLighter { get; public set; }
    public string GrayDark { get; public set; }
    public string GrayDarker { get; public set; }
    public string OverlayDark { get; public set; }
    public string OverlayLight { get; public set; }
    [CompilerGeneratedAttribute]
public virtual MudColor get_Black();
    [CompilerGeneratedAttribute]
public virtual void set_Black(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_White();
    [CompilerGeneratedAttribute]
public virtual void set_White(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Primary();
    [CompilerGeneratedAttribute]
public virtual void set_Primary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_PrimaryContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Secondary();
    [CompilerGeneratedAttribute]
public virtual void set_Secondary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_SecondaryContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_SecondaryContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Tertiary();
    [CompilerGeneratedAttribute]
public virtual void set_Tertiary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TertiaryContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_TertiaryContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Info();
    [CompilerGeneratedAttribute]
public virtual void set_Info(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_InfoContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_InfoContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Success();
    [CompilerGeneratedAttribute]
public virtual void set_Success(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_SuccessContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_SuccessContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Warning();
    [CompilerGeneratedAttribute]
public virtual void set_Warning(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_WarningContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_WarningContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Error();
    [CompilerGeneratedAttribute]
public virtual void set_Error(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ErrorContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_ErrorContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Dark();
    [CompilerGeneratedAttribute]
public virtual void set_Dark(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DarkContrastText();
    [CompilerGeneratedAttribute]
public virtual void set_DarkContrastText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TextPrimary();
    [CompilerGeneratedAttribute]
public virtual void set_TextPrimary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TextSecondary();
    [CompilerGeneratedAttribute]
public virtual void set_TextSecondary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TextDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_TextDisabled(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ActionDefault();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDefault(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ActionDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDisabled(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ActionDisabledBackground();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDisabledBackground(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Background();
    [CompilerGeneratedAttribute]
public virtual void set_Background(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_BackgroundGray();
    [CompilerGeneratedAttribute]
public virtual void set_BackgroundGray(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Surface();
    [CompilerGeneratedAttribute]
public virtual void set_Surface(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DrawerBackground();
    [CompilerGeneratedAttribute]
public virtual void set_DrawerBackground(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DrawerText();
    [CompilerGeneratedAttribute]
public virtual void set_DrawerText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DrawerIcon();
    [CompilerGeneratedAttribute]
public virtual void set_DrawerIcon(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_AppbarBackground();
    [CompilerGeneratedAttribute]
public virtual void set_AppbarBackground(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_AppbarText();
    [CompilerGeneratedAttribute]
public virtual void set_AppbarText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_LinesDefault();
    [CompilerGeneratedAttribute]
public virtual void set_LinesDefault(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_LinesInputs();
    [CompilerGeneratedAttribute]
public virtual void set_LinesInputs(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TableLines();
    [CompilerGeneratedAttribute]
public virtual void set_TableLines(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TableStriped();
    [CompilerGeneratedAttribute]
public virtual void set_TableStriped(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TableHover();
    [CompilerGeneratedAttribute]
public virtual void set_TableHover(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Divider();
    [CompilerGeneratedAttribute]
public virtual void set_Divider(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DividerLight();
    [CompilerGeneratedAttribute]
public virtual void set_DividerLight(MudColor value);
    public virtual string get_PrimaryDarken();
    public virtual void set_PrimaryDarken(string value);
    public virtual string get_PrimaryLighten();
    public virtual void set_PrimaryLighten(string value);
    public virtual string get_SecondaryDarken();
    public virtual void set_SecondaryDarken(string value);
    public virtual string get_SecondaryLighten();
    public virtual void set_SecondaryLighten(string value);
    public virtual string get_TertiaryDarken();
    public virtual void set_TertiaryDarken(string value);
    public virtual string get_TertiaryLighten();
    public virtual void set_TertiaryLighten(string value);
    public virtual string get_InfoDarken();
    public virtual void set_InfoDarken(string value);
    public virtual string get_InfoLighten();
    public virtual void set_InfoLighten(string value);
    public virtual string get_SuccessDarken();
    public virtual void set_SuccessDarken(string value);
    public virtual string get_SuccessLighten();
    public virtual void set_SuccessLighten(string value);
    public virtual string get_WarningDarken();
    public virtual void set_WarningDarken(string value);
    public virtual string get_WarningLighten();
    public virtual void set_WarningLighten(string value);
    public virtual string get_ErrorDarken();
    public virtual void set_ErrorDarken(string value);
    public virtual string get_ErrorLighten();
    public virtual void set_ErrorLighten(string value);
    public virtual string get_DarkDarken();
    public virtual void set_DarkDarken(string value);
    public virtual string get_DarkLighten();
    public virtual void set_DarkLighten(string value);
    [CompilerGeneratedAttribute]
public virtual double get_HoverOpacity();
    [CompilerGeneratedAttribute]
public virtual void set_HoverOpacity(double value);
    [CompilerGeneratedAttribute]
public virtual double get_RippleOpacity();
    [CompilerGeneratedAttribute]
public virtual void set_RippleOpacity(double value);
    [CompilerGeneratedAttribute]
public virtual double get_RippleOpacitySecondary();
    [CompilerGeneratedAttribute]
public virtual void set_RippleOpacitySecondary(double value);
    [CompilerGeneratedAttribute]
public virtual string get_GrayDefault();
    [CompilerGeneratedAttribute]
public virtual void set_GrayDefault(string value);
    [CompilerGeneratedAttribute]
public virtual string get_GrayLight();
    [CompilerGeneratedAttribute]
public virtual void set_GrayLight(string value);
    [CompilerGeneratedAttribute]
public virtual string get_GrayLighter();
    [CompilerGeneratedAttribute]
public virtual void set_GrayLighter(string value);
    [CompilerGeneratedAttribute]
public virtual string get_GrayDark();
    [CompilerGeneratedAttribute]
public virtual void set_GrayDark(string value);
    [CompilerGeneratedAttribute]
public virtual string get_GrayDarker();
    [CompilerGeneratedAttribute]
public virtual void set_GrayDarker(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OverlayDark();
    [CompilerGeneratedAttribute]
public virtual void set_OverlayDark(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OverlayLight();
    [CompilerGeneratedAttribute]
public virtual void set_OverlayLight(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.PaletteDark : Palette {
    [CompilerGeneratedAttribute]
private MudColor <Black>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Primary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Dark>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TextPrimary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TextSecondary>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TextDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ActionDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ActionDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <ActionDisabledBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <BackgroundGray>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Surface>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DrawerBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DrawerText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DrawerIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <AppbarBackground>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <AppbarText>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <LinesDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <LinesInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TableLines>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <TableStriped>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <Divider>k__BackingField;
    [CompilerGeneratedAttribute]
private MudColor <DividerLight>k__BackingField;
    public MudColor Black { get; public set; }
    public MudColor Primary { get; public set; }
    public MudColor Info { get; public set; }
    public MudColor Success { get; public set; }
    public MudColor Warning { get; public set; }
    public MudColor Error { get; public set; }
    public MudColor Dark { get; public set; }
    public MudColor TextPrimary { get; public set; }
    public MudColor TextSecondary { get; public set; }
    public MudColor TextDisabled { get; public set; }
    public MudColor ActionDefault { get; public set; }
    public MudColor ActionDisabled { get; public set; }
    public MudColor ActionDisabledBackground { get; public set; }
    public MudColor Background { get; public set; }
    public MudColor BackgroundGray { get; public set; }
    public MudColor Surface { get; public set; }
    public MudColor DrawerBackground { get; public set; }
    public MudColor DrawerText { get; public set; }
    public MudColor DrawerIcon { get; public set; }
    public MudColor AppbarBackground { get; public set; }
    public MudColor AppbarText { get; public set; }
    public MudColor LinesDefault { get; public set; }
    public MudColor LinesInputs { get; public set; }
    public MudColor TableLines { get; public set; }
    public MudColor TableStriped { get; public set; }
    public MudColor Divider { get; public set; }
    public MudColor DividerLight { get; public set; }
    [CompilerGeneratedAttribute]
public virtual MudColor get_Black();
    [CompilerGeneratedAttribute]
public virtual void set_Black(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Primary();
    [CompilerGeneratedAttribute]
public virtual void set_Primary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Info();
    [CompilerGeneratedAttribute]
public virtual void set_Info(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Success();
    [CompilerGeneratedAttribute]
public virtual void set_Success(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Warning();
    [CompilerGeneratedAttribute]
public virtual void set_Warning(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Error();
    [CompilerGeneratedAttribute]
public virtual void set_Error(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Dark();
    [CompilerGeneratedAttribute]
public virtual void set_Dark(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TextPrimary();
    [CompilerGeneratedAttribute]
public virtual void set_TextPrimary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TextSecondary();
    [CompilerGeneratedAttribute]
public virtual void set_TextSecondary(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TextDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_TextDisabled(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ActionDefault();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDefault(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ActionDisabled();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDisabled(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_ActionDisabledBackground();
    [CompilerGeneratedAttribute]
public virtual void set_ActionDisabledBackground(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Background();
    [CompilerGeneratedAttribute]
public virtual void set_Background(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_BackgroundGray();
    [CompilerGeneratedAttribute]
public virtual void set_BackgroundGray(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Surface();
    [CompilerGeneratedAttribute]
public virtual void set_Surface(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DrawerBackground();
    [CompilerGeneratedAttribute]
public virtual void set_DrawerBackground(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DrawerText();
    [CompilerGeneratedAttribute]
public virtual void set_DrawerText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DrawerIcon();
    [CompilerGeneratedAttribute]
public virtual void set_DrawerIcon(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_AppbarBackground();
    [CompilerGeneratedAttribute]
public virtual void set_AppbarBackground(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_AppbarText();
    [CompilerGeneratedAttribute]
public virtual void set_AppbarText(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_LinesDefault();
    [CompilerGeneratedAttribute]
public virtual void set_LinesDefault(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_LinesInputs();
    [CompilerGeneratedAttribute]
public virtual void set_LinesInputs(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TableLines();
    [CompilerGeneratedAttribute]
public virtual void set_TableLines(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_TableStriped();
    [CompilerGeneratedAttribute]
public virtual void set_TableStriped(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_Divider();
    [CompilerGeneratedAttribute]
public virtual void set_Divider(MudColor value);
    [CompilerGeneratedAttribute]
public virtual MudColor get_DividerLight();
    [CompilerGeneratedAttribute]
public virtual void set_DividerLight(MudColor value);
}
public class MudBlazor.PaletteLight : Palette {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MudBlazor.ParameterViewExtensions : object {
    [ExtensionAttribute]
public static bool Contains(ParameterView view, string parameterName);
    [ExtensionAttribute]
public static bool HasParameterChanged(ParameterView parameters, string parameterName, T parameterValue, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool HasParameterChanged(ParameterView parameters, string parameterName, T parameterValue, T& value, IEqualityComparer`1<T> comparer);
}
public class MudBlazor.PatternMask : BaseMask {
    [CompilerGeneratedAttribute]
private Nullable`1<char> <Placeholder>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<char, char> <Transformation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanDelimiters>k__BackingField;
    public Nullable`1<char> Placeholder { get; public set; }
    public Func`2<char, char> Transformation { get; public set; }
    public bool CleanDelimiters { get; public set; }
    public PatternMask(string mask);
    [CompilerGeneratedAttribute]
public Nullable`1<char> get_Placeholder();
    [CompilerGeneratedAttribute]
public void set_Placeholder(Nullable`1<char> value);
    [CompilerGeneratedAttribute]
public Func`2<char, char> get_Transformation();
    [CompilerGeneratedAttribute]
public void set_Transformation(Func`2<char, char> value);
    public virtual void Insert(string input);
    protected virtual void DeleteSelection(bool align);
    public virtual void Delete();
    public virtual void Backspace();
    protected virtual string FillWithPlaceholder(string text);
    protected virtual string AlignAgainstMask(string text, int maskOffset);
    protected virtual void ModifyPartiallyAlignedMask(string mask, string text, int maskOffset, Int32& textIndex, Int32& maskIndex, String& alignedText);
    protected virtual bool IsMatch(char maskChar, char textChar);
    [CompilerGeneratedAttribute]
public bool get_CleanDelimiters();
    [CompilerGeneratedAttribute]
public void set_CleanDelimiters(bool value);
    public virtual string GetCleanText();
    protected virtual void InitInternals();
    protected virtual void UpdateText(string text);
    protected virtual string ModifyFinalText(string text);
    public virtual void UpdateFrom(IMask other);
    [CompilerGeneratedAttribute]
private bool <GetCleanText>b__21_0(char c, int i);
    [CompilerGeneratedAttribute]
private bool <UpdateText>b__23_0(char c);
}
public enum MudBlazor.PickerVariant : Enum {
    public int value__;
    [DescriptionAttribute("inline")]
public static PickerVariant Inline;
    [DescriptionAttribute("dialog")]
public static PickerVariant Dialog;
    [DescriptionAttribute("static")]
public static PickerVariant Static;
}
[ExtensionAttribute]
public static class MudBlazor.PickerVariantSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(PickerVariant mudEnum);
}
public enum MudBlazor.Placement : Enum {
    public int value__;
    [DescriptionAttribute("left")]
public static Placement Left;
    [DescriptionAttribute("right")]
public static Placement Right;
    [DescriptionAttribute("end")]
public static Placement End;
    [DescriptionAttribute("start")]
public static Placement Start;
    [DescriptionAttribute("top")]
public static Placement Top;
    [DescriptionAttribute("bottom")]
public static Placement Bottom;
}
[ExtensionAttribute]
public static class MudBlazor.PlacementSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Placement mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.PopoverHolderContainer : object {
    [CompilerGeneratedAttribute]
private PopoverHolderOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IMudPopoverHolder> <Holders>k__BackingField;
    public PopoverHolderOperation Operation { get; }
    public IReadOnlyCollection`1<IMudPopoverHolder> Holders { get; }
    public PopoverHolderContainer(PopoverHolderOperation operation, IReadOnlyCollection`1<IMudPopoverHolder> holders);
    [CompilerGeneratedAttribute]
public PopoverHolderOperation get_Operation();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IMudPopoverHolder> get_Holders();
}
public enum MudBlazor.PopoverHolderOperation : Enum {
    public int value__;
    public static PopoverHolderOperation Create;
    public static PopoverHolderOperation Remove;
    public static PopoverHolderOperation Update;
}
public enum MudBlazor.PopoverMode : Enum {
    public int value__;
    public static PopoverMode Default;
    public static PopoverMode Legacy;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.PopoverOptions : object {
    [CompilerGeneratedAttribute]
private bool <CheckForPopoverProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerClass>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FlipMargin>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QueueDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnDuplicateProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PopoverMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolInitialFill>k__BackingField;
    public bool CheckForPopoverProvider { get; public set; }
    public string ContainerClass { get; public set; }
    public int FlipMargin { get; public set; }
    public TimeSpan QueueDelay { get; public set; }
    public bool ThrowOnDuplicateProvider { get; public set; }
    public PopoverMode Mode { get; public set; }
    public int PoolSize { get; public set; }
    public int PoolInitialFill { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CheckForPopoverProvider();
    [CompilerGeneratedAttribute]
public void set_CheckForPopoverProvider(bool value);
    [CompilerGeneratedAttribute]
public string get_ContainerClass();
    [CompilerGeneratedAttribute]
public void set_ContainerClass(string value);
    [CompilerGeneratedAttribute]
public int get_FlipMargin();
    [CompilerGeneratedAttribute]
public void set_FlipMargin(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QueueDelay();
    [CompilerGeneratedAttribute]
public void set_QueueDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnDuplicateProvider();
    [CompilerGeneratedAttribute]
public void set_ThrowOnDuplicateProvider(bool value);
    [CompilerGeneratedAttribute]
public PopoverMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(PopoverMode value);
    [CompilerGeneratedAttribute]
public int get_PoolSize();
    [CompilerGeneratedAttribute]
public void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_PoolInitialFill();
    [CompilerGeneratedAttribute]
public void set_PoolInitialFill(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.PopoverService : object {
    private bool _disposed;
    private bool _isInitializing;
    private PopoverJsInterop _popoverJsInterop;
    private AsyncKeyedLocker`1<Guid> _popoverSemaphore;
    private Dictionary`2<Guid, MudPopoverHolder> _holders;
    private CancellationTokenSource _cancellationTokenSource;
    private BatchPeriodicQueue`1<MudPopoverHolder> _batchExecutor;
    private ObserverManager`2<Guid, IPopoverObserver> _observerManager;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private PopoverOptions <PopoverOptions>k__BackingField;
    public IEnumerable`1<IMudPopoverHolder> ActivePopovers { get; }
    public bool IsInitialized { get; private set; }
    public PopoverOptions PopoverOptions { get; }
    public int QueueCount { get; }
    public int ObserversCount { get; }
    public PopoverService(ILogger`1<PopoverService> logger, IJSRuntime jsInterop, IOptions`1<PopoverOptions> options);
    public sealed virtual IEnumerable`1<IMudPopoverHolder> get_ActivePopovers();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PopoverOptions get_PopoverOptions();
    public int get_QueueCount();
    public int get_ObserversCount();
    public sealed virtual void Subscribe(IPopoverObserver observer);
    public sealed virtual void Unsubscribe(IPopoverObserver observer);
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<CreatePopoverAsync>d__24")]
public sealed virtual Task CreatePopoverAsync(IPopover popover);
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<UpdatePopoverAsync>d__25")]
public sealed virtual Task`1<bool> UpdatePopoverAsync(IPopover popover);
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<DestroyPopoverAsync>d__26")]
public sealed virtual Task`1<bool> DestroyPopoverAsync(IPopover popover);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MudBlazor.PopoverService/<GetProviderCountAsync>d__27")]
public sealed virtual ValueTask`1<int> GetProviderCountAsync();
    public virtual Task OnBatchTimerElapsedAsync(IReadOnlyCollection`1<MudPopoverHolder> items, CancellationToken stoppingToken);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<DisposeAsyncCore>d__30")]
private ValueTask DisposeAsyncCore();
    private Task DestroyPopoversQuick();
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<DestroyPopoverByIdAsync>d__32")]
private Task`1<bool> DestroyPopoverByIdAsync(Guid id, bool queueForDisconnect);
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<DetachRangeAsync>d__33")]
private Task DetachRangeAsync(IReadOnlyCollection`1<MudPopoverHolder> holders);
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<InitializePopoverIfNeededAsync>d__34")]
private Task InitializePopoverIfNeededAsync(MudPopoverHolder holder);
    [AsyncStateMachineAttribute("MudBlazor.PopoverService/<InitializeServiceIfNeededAsync>d__35")]
private Task InitializeServiceIfNeededAsync();
    [CompilerGeneratedAttribute]
private void <.ctor>b__21_0(AsyncKeyedLockOptions lockOptions);
}
public enum MudBlazor.Position : Enum {
    public int value__;
    [DescriptionAttribute("bottom")]
public static Position Bottom;
    [DescriptionAttribute("center")]
public static Position Center;
    [DescriptionAttribute("top")]
public static Position Top;
    [DescriptionAttribute("left")]
public static Position Left;
    [DescriptionAttribute("right")]
public static Position Right;
    [DescriptionAttribute("start")]
public static Position Start;
    [DescriptionAttribute("end")]
public static Position End;
}
[ExtensionAttribute]
public static class MudBlazor.PositionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Position mudEnum);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.PropertyColumn`2 : Column`1<T> {
    private Guid _id;
    private string _propertyName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, object> _cellContentFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, TProperty> _compiledPropertyFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`2<T, TProperty>> _lastAssignedProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`2<T, TProperty>> _compiledPropertyFuncFor;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Expression`1<Func`2<T, TProperty>> <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NullableAttribute("1")]
[ParameterAttribute]
[EditorRequiredAttribute]
public Expression`1<Func`2<T, TProperty>> Property { get; public set; }
    [ParameterAttribute]
public string Format { get; public set; }
    protected internal LambdaExpression PropertyExpression { get; }
    public string PropertyName { get; }
    protected internal string ContentFormat { get; }
    [NullableAttribute("1")]
protected internal Type PropertyType { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Expression`1<Func`2<T, TProperty>> get_Property();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Property(Expression`1<Func`2<T, TProperty>> value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    protected virtual void OnParametersSet();
    protected internal virtual LambdaExpression get_PropertyExpression();
    public virtual string get_PropertyName();
    protected internal virtual string get_ContentFormat();
    [NullableContextAttribute("1")]
protected internal virtual object CellContent(T item);
    [NullableContextAttribute("1")]
protected internal virtual object PropertyFunc(T item);
    [NullableContextAttribute("1")]
protected internal virtual Type get_PropertyType();
    [NullableContextAttribute("1")]
private object RecursiveGetSubProperties(MemberExpression memberExpression, object item);
    [NullableContextAttribute("1")]
protected internal virtual void SetProperty(object item, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.PseudoCss : object {
    private string _scope;
    public string Scope { get; public set; }
    public string get_Scope();
    public void set_Scope(string value);
}
[ExtensionAttribute]
public static class MudBlazor.QueryFilterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IQueryable`1<T> Where(IQueryable`1<T> source, IEnumerable`1<IFilterDefinition`1<T>> filterDefinitions, DataGridFilterCaseSensitivity caseSensitivity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.QuerySortExtensions : object {
    private static MethodInfo _orderByMethod;
    private static MethodInfo _orderByDescendingMethod;
    private static MethodInfo _thenByMethod;
    private static MethodInfo _thenByDescendingMethod;
    private static QuerySortExtensions();
    [ExtensionAttribute]
public static IQueryable`1<T> OrderBy(IQueryable`1<T> source, IEnumerable`1<SortDefinition`1<T>> sortDefinitions);
    [ExtensionAttribute]
public static IQueryable`1<T> OrderBy(IQueryable`1<T> source, IEnumerable`1<SortDefinition`1<T>> sortDefinitions, Func`3<ParameterExpression, SortDefinition`1<T>, Expression> expression);
}
public class MudBlazor.Range`1 : object {
    [CompilerGeneratedAttribute]
private T <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private T <End>k__BackingField;
    public T Start { get; public set; }
    public T End { get; public set; }
    public Range`1(T start, T end);
    [CompilerGeneratedAttribute]
public T get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(T value);
    [CompilerGeneratedAttribute]
public T get_End();
    [CompilerGeneratedAttribute]
public void set_End(T value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class MudBlazor.RangeConverter`1 : Converter`1<Range`1<T>> {
    private DefaultConverter`1<T> _converter;
    private Range`1<T> OnGet(string value);
    private string OnSet(Range`1<T> arg);
    public static string Join(string valueStart, string valueEnd);
    public static bool Split(string value, String& valueStart, String& valueEnd);
}
public class MudBlazor.RegexMask : BaseMask {
    private static string WhiteSpaceFilter;
    protected string _regexPattern;
    protected Regex _regex;
    [CompilerGeneratedAttribute]
private string <Delimiters>k__BackingField;
    public string Delimiters { get; protected set; }
    public RegexMask(string regex, string mask);
    [CompilerGeneratedAttribute]
public string get_Delimiters();
    [CompilerGeneratedAttribute]
protected void set_Delimiters(string value);
    protected virtual void InitInternals();
    protected virtual void InitRegex();
    public virtual void Insert(string input);
    protected virtual void DeleteSelection(bool align);
    public virtual void Delete();
    public virtual void Backspace();
    protected virtual string AlignAgainstMask(string text);
    public virtual void UpdateFrom(IMask other);
    public static RegexMask IPv4(bool includePort, char maskChar);
    public static RegexMask IPv6(bool includePort, char maskChar, char portMaskChar);
    public static RegexMask Email(string mask);
}
public enum MudBlazor.ResizeMode : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static ResizeMode None;
    [DescriptionAttribute("column")]
public static ResizeMode Column;
    [DescriptionAttribute("container")]
public static ResizeMode Container;
}
[ExtensionAttribute]
public static class MudBlazor.ResizeModeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(ResizeMode mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MudBlazor.Resources.LanguageResource : object {
    [NullableAttribute("2")]
private static ResourceManager s_resourceManager;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    public static string MudDataGrid_Apply;
    public static string MudDataGrid_Clear;
    public static string MudDataGrid_AddFilter;
    public static string MudDataGrid_Cancel;
    public static string MudDataGrid_Loading;
    public static string MudDataGrid_Save;
    public static string MudDataGrid_HideAll;
    public static string MudDataGrid_ShowAll;
    public static string MudDataGrid_Columns;
    public static string MudDataGrid_ExpandAllGroups;
    public static string MudDataGrid_CollapseAllGroups;
    public static string MudDataGrid_RefreshData;
    public static string MudDataGrid_True;
    public static string MudDataGrid_False;
    public static string MudDataGrid_Unsort;
    public static string MudDataGrid_Filter;
    public static string MudDataGrid_Hide;
    public static string MudDataGrid_Ungroup;
    public static string MudDataGrid_Group;
    public static string MudDataGrid_FilterValue;
    public static string MudDataGrid_Contains;
    public static string MudDataGrid_NotContains;
    public static string MudDataGrid_Equals;
    public static string MudDataGrid_NotEquals;
    public static string MudDataGrid_StartsWith;
    public static string MudDataGrid_EndsWith;
    public static string MudDataGrid_IsEmpty;
    public static string MudDataGrid_IsNotEmpty;
    public static string MudDataGrid_EqualSign;
    public static string MudDataGrid_NotEqualSign;
    public static string MudDataGrid_GreaterThanSign;
    public static string MudDataGrid_GreaterThanOrEqualSign;
    public static string MudDataGrid_LessThanSign;
    public static string MudDataGrid_LessThanOrEqualSign;
    public static string MudDataGrid_Is;
    public static string MudDataGrid_IsNot;
    public static string MudDataGrid_IsAfter;
    public static string MudDataGrid_IsOnOrAfter;
    public static string MudDataGrid_IsBefore;
    public static string MudDataGrid_IsOnOrBefore;
    public static string MudDataGrid_Column;
    public static string MudDataGrid_Operator;
    public static string MudDataGrid_Value;
    public static string MudDataGrid_MoveDown;
    public static string MudDataGrid_MoveUp;
    public static string MudDataGrid_Sort;
    public static string MudNavGroup_ToggleExpand;
    public static string MudAlert_Close;
    public static string MudChip_Close;
    public static string MudColorPicker_Close;
    public static string MudColorPicker_SpectrumView;
    public static string MudColorPicker_GridView;
    public static string MudColorPicker_PaletteView;
    public static string MudColorPicker_ToggleCurrentColor;
    public static string MudColorPicker_HueSlider;
    public static string MudColorPicker_AlphaSlider;
    public static string MudColorPicker_PaletteColor;
    public static string MudColorPicker_ModeSwitch;
    public static string MudBaseDatePicker_PrevYear;
    public static string MudBaseDatePicker_NextYear;
    public static string MudBaseDatePicker_PrevMonth;
    public static string MudBaseDatePicker_NextMonth;
    public static string MudPagination_CurrentPage;
    public static string MudPagination_FirstPage;
    public static string MudPagination_LastPage;
    public static string MudPagination_NextPage;
    public static string MudPagination_PageIndex;
    public static string MudPagination_PreviousPage;
    public static string MudRatingItem_Label;
    public static string MudCarousel_Index;
    public static string MudCarousel_Next;
    public static string MudCarousel_Previous;
    public static string MudColorPicker_ColorDot;
    public static string MudDialog_Close;
    public static string MudInput_Clear;
    public static string MudInput_Decrement;
    public static string MudInput_Increment;
    public static string MudPageContentNavigation_NavMenu;
    public static string MudTablePager_FirstPage;
    public static string MudTablePager_LastPage;
    public static string MudTablePager_NextPage;
    public static string MudTablePager_PreviousPage;
    public static string MudSnackbar_Close;
    public static string MudDataGridPager_RowsPerPage;
    public static string MudDataGridPager_AllItems;
    public static string MudDataGridPager_InfoFormat;
    public static ResourceManager ResourceManager { get; }
    [NullableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static ResourceManager get_ResourceManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static CultureInfo get_Culture();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static void set_Culture(CultureInfo value);
    [NullableContextAttribute("2")]
internal static string GetResourceString(string resourceKey, string defaultValue);
}
public enum MudBlazor.ScrollBehavior : Enum {
    public int value__;
    [DescriptionAttribute("smooth")]
public static ScrollBehavior Smooth;
    [DescriptionAttribute("auto")]
public static ScrollBehavior Auto;
}
[ExtensionAttribute]
public static class MudBlazor.ScrollBehaviorSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(ScrollBehavior mudEnum);
}
public class MudBlazor.ScrollEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private BoundingClientRect <FirstChildBoundingClientRect>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollTop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ScrollLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScrollHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScrollWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeName>k__BackingField;
    public BoundingClientRect FirstChildBoundingClientRect { get; public set; }
    public double ScrollTop { get; public set; }
    public double ScrollLeft { get; public set; }
    public int ScrollHeight { get; public set; }
    public int ScrollWidth { get; public set; }
    public string NodeName { get; public set; }
    [CompilerGeneratedAttribute]
public BoundingClientRect get_FirstChildBoundingClientRect();
    [CompilerGeneratedAttribute]
public void set_FirstChildBoundingClientRect(BoundingClientRect value);
    [CompilerGeneratedAttribute]
public double get_ScrollTop();
    [CompilerGeneratedAttribute]
public void set_ScrollTop(double value);
    [CompilerGeneratedAttribute]
public double get_ScrollLeft();
    [CompilerGeneratedAttribute]
public void set_ScrollLeft(double value);
    [CompilerGeneratedAttribute]
public int get_ScrollHeight();
    [CompilerGeneratedAttribute]
public void set_ScrollHeight(int value);
    [CompilerGeneratedAttribute]
public int get_ScrollWidth();
    [CompilerGeneratedAttribute]
public void set_ScrollWidth(int value);
    [CompilerGeneratedAttribute]
public string get_NodeName();
    [CompilerGeneratedAttribute]
public void set_NodeName(string value);
}
internal class MudBlazor.ScrollListener : object {
    private IJSRuntime _js;
    private DotNetObjectReference`1<ScrollListener> _dotNetRef;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    private EventHandler`1<ScrollEventArgs> _onScroll;
    public string Selector { get; public set; }
    [DynamicDependencyAttribute("RaiseOnScroll")]
[DynamicDependencyAttribute("-1", "MudBlazor.ScrollEventArgs")]
public ScrollListener(IJSRuntime js);
    public ScrollListener(string selector, IJSRuntime js);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Selector();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Selector(string value);
    public sealed virtual void add_OnScroll(EventHandler`1<ScrollEventArgs> value);
    public sealed virtual void remove_OnScroll(EventHandler`1<ScrollEventArgs> value);
    [AsyncStateMachineAttribute("MudBlazor.ScrollListener/<Subscribe>d__12")]
private void Subscribe(EventHandler`1<ScrollEventArgs> value);
    private void Unsubscribe(EventHandler`1<ScrollEventArgs> value);
    [JSInvokableAttribute]
public void RaiseOnScroll(ScrollEventArgs e);
    private ValueTask`1<bool> Start();
    [AsyncStateMachineAttribute("MudBlazor.ScrollListener/<Cancel>d__16")]
private ValueTask Cancel();
    public sealed virtual void Dispose();
}
public class MudBlazor.ScrollListenerFactory : object {
    private IServiceProvider _provider;
    public ScrollListenerFactory(IServiceProvider provider);
    public sealed virtual IScrollListener Create(string selector);
}
public class MudBlazor.ScrollManager : object {
    private IJSRuntime _jSRuntime;
    public ScrollManager(IJSRuntime jSRuntime);
    public sealed virtual ValueTask ScrollToAsync(string id, int left, int top, ScrollBehavior behavior);
    public sealed virtual ValueTask ScrollIntoViewAsync(string selector, ScrollBehavior behavior);
    public sealed virtual ValueTask ScrollToTopAsync(string id, ScrollBehavior scrollBehavior);
    public sealed virtual ValueTask ScrollToBottomAsync(string id, ScrollBehavior behavior);
    public sealed virtual ValueTask ScrollToYearAsync(string elementId);
    public sealed virtual ValueTask ScrollToListItemAsync(string elementId);
    public sealed virtual ValueTask LockScrollAsync(string selector, string cssClass);
    public sealed virtual ValueTask UnlockScrollAsync(string selector, string cssClass);
}
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.ScrollManagerException : Exception {
    public ScrollManagerException(string message);
    public ScrollManagerException(string message, Exception inner);
}
public class MudBlazor.ScrollSectionCenteredEventArgs : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public ScrollSectionCenteredEventArgs(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
}
public class MudBlazor.ScrollSpy : object {
    [CompilerGeneratedAttribute]
private string <CenteredSection>k__BackingField;
    private IJSRuntime _js;
    private DotNetObjectReference`1<ScrollSpy> _dotNetRef;
    [CompilerGeneratedAttribute]
private EventHandler`1<ScrollSectionCenteredEventArgs> ScrollSectionSectionCentered;
    public string CenteredSection { get; private set; }
    [DynamicDependencyAttribute("SectionChangeOccured")]
public ScrollSpy(IJSRuntime js);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CenteredSection();
    [CompilerGeneratedAttribute]
private void set_CenteredSection(string value);
    [AsyncStateMachineAttribute("MudBlazor.ScrollSpy/<StartSpying>d__7")]
public sealed virtual Task StartSpying(string containerSelector, string sectionClassSelector);
    [JSInvokableAttribute]
public void SectionChangeOccured(string id);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ScrollSectionSectionCentered(EventHandler`1<ScrollSectionCenteredEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ScrollSectionSectionCentered(EventHandler`1<ScrollSectionCenteredEventArgs> value);
    [AsyncStateMachineAttribute("MudBlazor.ScrollSpy/<ScrollToSection>d__12")]
public sealed virtual Task ScrollToSection(string id);
    [AsyncStateMachineAttribute("MudBlazor.ScrollSpy/<SetSectionAsActive>d__13")]
public sealed virtual Task SetSectionAsActive(string id);
    [AsyncStateMachineAttribute("MudBlazor.ScrollSpy/<ScrollToSection>d__14")]
public sealed virtual Task ScrollToSection(Uri uri);
    [AsyncStateMachineAttribute("MudBlazor.ScrollSpy/<DisposeAsync>d__15")]
public sealed virtual ValueTask DisposeAsync();
}
public class MudBlazor.ScrollSpyFactory : object {
    private IServiceProvider _provider;
    public ScrollSpyFactory(IServiceProvider provider);
    public sealed virtual IScrollSpy Create();
}
public class MudBlazor.SelectColumn`1 : ComponentBase {
    [CompilerGeneratedAttribute]
private bool <ShowInHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInFooter>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DragAndDropEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Hideable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    [CompilerGeneratedAttribute]
private EventCallback`1<bool> <HiddenChanged>k__BackingField;
    [ParameterAttribute]
public bool ShowInHeader { get; public set; }
    [ParameterAttribute]
public bool ShowInFooter { get; public set; }
    [ParameterAttribute]
public Size Size { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> DragAndDropEnabled { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Hideable { get; public set; }
    [ParameterAttribute]
public bool Hidden { get; public set; }
    [ParameterAttribute]
public EventCallback`1<bool> HiddenChanged { get; public set; }
    [NullableAttribute("1")]
private RenderFragment`1<FooterContext`1<T>> FooterTemplate { get; }
    [CompilerGeneratedAttribute]
public bool get_ShowInHeader();
    [CompilerGeneratedAttribute]
public void set_ShowInHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowInFooter();
    [CompilerGeneratedAttribute]
public void set_ShowInFooter(bool value);
    [CompilerGeneratedAttribute]
public Size get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Size value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DragAndDropEnabled();
    [CompilerGeneratedAttribute]
public void set_DragAndDropEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hideable();
    [CompilerGeneratedAttribute]
public void set_Hideable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    [CompilerGeneratedAttribute]
public EventCallback`1<bool> get_HiddenChanged();
    [CompilerGeneratedAttribute]
public void set_HiddenChanged(EventCallback`1<bool> value);
    protected virtual void BuildRenderTree(RenderTreeBuilder __builder);
    private RenderFragment`1<FooterContext`1<T>> GetFooterTemplate();
    [NullableContextAttribute("1")]
private RenderFragment`1<FooterContext`1<T>> get_FooterTemplate();
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__28_0(HeaderContext`1<T> context);
    [CompilerGeneratedAttribute]
private RenderFragment <BuildRenderTree>b__28_1(CellContext`1<T> context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private RenderFragment <get_FooterTemplate>b__31_0(FooterContext`1<T> context);
}
public enum MudBlazor.SelectionMode : Enum {
    public int value__;
    [DescriptionAttribute("single-selection")]
public static SelectionMode SingleSelection;
    [DescriptionAttribute("multi-selection")]
public static SelectionMode MultiSelection;
    [DescriptionAttribute("toggle-selection")]
public static SelectionMode ToggleSelection;
}
[ExtensionAttribute]
public static class MudBlazor.SelectionModeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(SelectionMode mudEnum);
}
public class MudBlazor.Services.BrowserWindowSize : EventArgs {
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    public int Height { get; public set; }
    public int Width { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
}
public interface MudBlazor.Services.IJsEvent {
    public abstract virtual Task Connect(string elementId, JsEventOptions options);
    public abstract virtual Task Disconnect();
    [CompilerGeneratedAttribute]
public abstract virtual void add_CaretPositionChanged(Action`1<int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CaretPositionChanged(Action`1<int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Paste(Action`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Paste(Action`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Select(Action`2<int, int> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Select(Action`2<int, int> value);
}
public interface MudBlazor.Services.IJsEventFactory {
    public abstract virtual IJsEvent Create();
}
public interface MudBlazor.Services.IKeyInterceptor {
    public abstract virtual Task Connect(string elementId, KeyInterceptorOptions options);
    public abstract virtual Task Disconnect();
    public abstract virtual Task UpdateKey(KeyOptions option);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyDown(KeyboardEvent value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyDown(KeyboardEvent value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeyUp(KeyboardEvent value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeyUp(KeyboardEvent value);
}
public interface MudBlazor.Services.IKeyInterceptorFactory {
    public abstract virtual IKeyInterceptor Create();
}
public interface MudBlazor.Services.IResizeObserver {
    public abstract virtual Task`1<BoundingClientRect> Observe(ElementReference element);
    public abstract virtual Task`1<IEnumerable`1<BoundingClientRect>> Observe(IEnumerable`1<ElementReference> elements);
    public abstract virtual Task Unobserve(ElementReference element);
    public abstract virtual double GetWidth(ElementReference reference);
    public abstract virtual double GetHeight(ElementReference reference);
    public abstract virtual BoundingClientRect GetSizeInfo(ElementReference reference);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnResized(SizeChanged value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnResized(SizeChanged value);
    public abstract virtual bool IsElementObserved(ElementReference reference);
}
public interface MudBlazor.Services.IResizeObserverFactory {
    public abstract virtual IResizeObserver Create(ResizeObserverOptions options);
    public abstract virtual IResizeObserver Create();
}
public class MudBlazor.Services.JsEvent : object {
    private bool _isDisposed;
    private DotNetObjectReference`1<JsEvent> _dotNetRef;
    private IJSRuntime _jsRuntime;
    private string _elementId;
    private bool _isObserving;
    internal HashSet`1<string> _subscribedEvents;
    private List`1<Action`1<int>> _caretPositionChangedHandlers;
    private List`1<Action`1<string>> _pasteHandlers;
    private List`1<Action`2<int, int>> _selectHandlers;
    [DynamicDependencyAttribute("OnCaretPositionChanged")]
[DynamicDependencyAttribute("OnPaste")]
[DynamicDependencyAttribute("OnSelect")]
[DynamicDependencyAttribute("-1", "MudBlazor.Services.JsEventOptions")]
public JsEvent(IJSRuntime jsRuntime);
    [AsyncStateMachineAttribute("MudBlazor.Services.JsEvent/<Connect>d__7")]
public sealed virtual Task Connect(string elementId, JsEventOptions options);
    [AsyncStateMachineAttribute("MudBlazor.Services.JsEvent/<Disconnect>d__8")]
public sealed virtual Task Disconnect();
    internal void Subscribe(string eventName);
    [AsyncStateMachineAttribute("MudBlazor.Services.JsEvent/<Unsubscribe>d__10")]
internal Task Unsubscribe(string eventName);
    [AsyncStateMachineAttribute("MudBlazor.Services.JsEvent/<UnsubscribeAll>d__11")]
internal Task UnsubscribeAll();
    public sealed virtual void add_CaretPositionChanged(Action`1<int> value);
    public sealed virtual void remove_CaretPositionChanged(Action`1<int> value);
    [JSInvokableAttribute]
public void OnCaretPositionChanged(int caretPosition);
    public sealed virtual void add_Paste(Action`1<string> value);
    public sealed virtual void remove_Paste(Action`1<string> value);
    [JSInvokableAttribute]
public void OnPaste(string text);
    public sealed virtual void add_Select(Action`2<int, int> value);
    public sealed virtual void remove_Select(Action`2<int, int> value);
    [JSInvokableAttribute]
public void OnSelect(int start, int end);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class MudBlazor.Services.JsEventFactory : object {
    private IServiceProvider _provider;
    public JsEventFactory(IServiceProvider provider);
    public sealed virtual IJsEvent Create();
}
public class MudBlazor.Services.JsEventOptions : object {
    [CompilerGeneratedAttribute]
private string <TargetClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLogging>k__BackingField;
    public string TargetClass { get; public set; }
    public string TagName { get; public set; }
    public bool EnableLogging { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetClass();
    [CompilerGeneratedAttribute]
public void set_TargetClass(string value);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
public void set_TagName(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableLogging();
    [CompilerGeneratedAttribute]
public void set_EnableLogging(bool value);
}
public class MudBlazor.Services.KeyboardEvent : MulticastDelegate {
    public KeyboardEvent(object object, IntPtr method);
    public virtual void Invoke(KeyboardEventArgs args);
    public virtual IAsyncResult BeginInvoke(KeyboardEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MudBlazor.Services.KeyInterceptor : object {
    private bool _isDisposed;
    private DotNetObjectReference`1<KeyInterceptor> _dotNetRef;
    private IJSRuntime _jsRuntime;
    private bool _isObserving;
    private string _elementId;
    [CompilerGeneratedAttribute]
private KeyboardEvent KeyDown;
    [CompilerGeneratedAttribute]
private KeyboardEvent KeyUp;
    [DynamicDependencyAttribute("OnKeyDown")]
[DynamicDependencyAttribute("OnKeyUp")]
[DynamicDependencyAttribute("-1", "MudBlazor.Services.KeyboardEvent")]
[DynamicDependencyAttribute("-1", "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs")]
[DynamicDependencyAttribute("-1", "MudBlazor.Services.KeyOptions")]
[DynamicDependencyAttribute("-1", "MudBlazor.Services.KeyInterceptorOptions")]
public KeyInterceptor(IJSRuntime jsRuntime);
    [AsyncStateMachineAttribute("MudBlazor.Services.KeyInterceptor/<Connect>d__6")]
public sealed virtual Task Connect(string elementId, KeyInterceptorOptions options);
    [AsyncStateMachineAttribute("MudBlazor.Services.KeyInterceptor/<UpdateKey>d__7")]
public sealed virtual Task UpdateKey(KeyOptions option);
    [AsyncStateMachineAttribute("MudBlazor.Services.KeyInterceptor/<Disconnect>d__8")]
public sealed virtual Task Disconnect();
    [JSInvokableAttribute]
public void OnKeyDown(KeyboardEventArgs args);
    [JSInvokableAttribute]
public void OnKeyUp(KeyboardEventArgs args);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeyDown(KeyboardEvent value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeyDown(KeyboardEvent value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeyUp(KeyboardEvent value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeyUp(KeyboardEvent value);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class MudBlazor.Services.KeyInterceptorFactory : object {
    private IServiceProvider _provider;
    public KeyInterceptorFactory(IServiceProvider provider);
    public sealed virtual IKeyInterceptor Create();
}
public class MudBlazor.Services.KeyInterceptorOptions : object {
    [CompilerGeneratedAttribute]
private string <TargetClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyOptions> <Keys>k__BackingField;
    public string TargetClass { get; public set; }
    public bool EnableLogging { get; public set; }
    public List`1<KeyOptions> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetClass();
    [CompilerGeneratedAttribute]
public void set_TargetClass(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableLogging();
    [CompilerGeneratedAttribute]
public void set_EnableLogging(bool value);
    [CompilerGeneratedAttribute]
public List`1<KeyOptions> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(List`1<KeyOptions> value);
}
public class MudBlazor.Services.KeyOptions : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubscribeDown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubscribeUp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreventDown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreventUp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopDown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopUp>k__BackingField;
    public string Key { get; public set; }
    public bool SubscribeDown { get; public set; }
    public bool SubscribeUp { get; public set; }
    public string PreventDown { get; public set; }
    public string PreventUp { get; public set; }
    public string StopDown { get; public set; }
    public string StopUp { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public bool get_SubscribeDown();
    [CompilerGeneratedAttribute]
public void set_SubscribeDown(bool value);
    [CompilerGeneratedAttribute]
public bool get_SubscribeUp();
    [CompilerGeneratedAttribute]
public void set_SubscribeUp(bool value);
    [CompilerGeneratedAttribute]
public string get_PreventDown();
    [CompilerGeneratedAttribute]
public void set_PreventDown(string value);
    [CompilerGeneratedAttribute]
public string get_PreventUp();
    [CompilerGeneratedAttribute]
public void set_PreventUp(string value);
    [CompilerGeneratedAttribute]
public string get_StopDown();
    [CompilerGeneratedAttribute]
public void set_StopDown(string value);
    [CompilerGeneratedAttribute]
public string get_StopUp();
    [CompilerGeneratedAttribute]
public void set_StopUp(string value);
}
public class MudBlazor.Services.MudServicesConfiguration : object {
    [CompilerGeneratedAttribute]
private SnackbarConfiguration <SnackbarConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private ResizeOptions <ResizeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ResizeObserverOptions <ResizeObserverOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private PopoverOptions <PopoverOptions>k__BackingField;
    public SnackbarConfiguration SnackbarConfiguration { get; public set; }
    public ResizeOptions ResizeOptions { get; public set; }
    public ResizeObserverOptions ResizeObserverOptions { get; public set; }
    public PopoverOptions PopoverOptions { get; public set; }
    [CompilerGeneratedAttribute]
public SnackbarConfiguration get_SnackbarConfiguration();
    [CompilerGeneratedAttribute]
public void set_SnackbarConfiguration(SnackbarConfiguration value);
    [CompilerGeneratedAttribute]
public ResizeOptions get_ResizeOptions();
    [CompilerGeneratedAttribute]
public void set_ResizeOptions(ResizeOptions value);
    [CompilerGeneratedAttribute]
public ResizeObserverOptions get_ResizeObserverOptions();
    [CompilerGeneratedAttribute]
public void set_ResizeObserverOptions(ResizeObserverOptions value);
    [CompilerGeneratedAttribute]
public PopoverOptions get_PopoverOptions();
    [CompilerGeneratedAttribute]
public void set_PopoverOptions(PopoverOptions value);
}
public class MudBlazor.Services.ResizeObserver : object {
    private bool _isDisposed;
    private IJSRuntime _jsRuntime;
    private Guid _id;
    private ResizeObserverOptions _options;
    private DotNetObjectReference`1<ResizeObserver> _dotNetRef;
    private Dictionary`2<Guid, ElementReference> _cachedValueIds;
    private Dictionary`2<ElementReference, BoundingClientRect> _cachedValues;
    [CompilerGeneratedAttribute]
private SizeChanged OnResized;
    [DynamicDependencyAttribute("OnSizeChanged")]
[DynamicDependencyAttribute("-1", "MudBlazor.Services.ResizeObserver/SizeChangeUpdateInfo")]
[DynamicDependencyAttribute("-1", "MudBlazor.Interop.BoundingClientRect")]
public ResizeObserver(IJSRuntime jsRuntime, IOptions`1<ResizeObserverOptions> options);
    [AsyncStateMachineAttribute("MudBlazor.Services.ResizeObserver/<Observe>d__8")]
public sealed virtual Task`1<BoundingClientRect> Observe(ElementReference element);
    [AsyncStateMachineAttribute("MudBlazor.Services.ResizeObserver/<Observe>d__9")]
public sealed virtual Task`1<IEnumerable`1<BoundingClientRect>> Observe(IEnumerable`1<ElementReference> elements);
    [AsyncStateMachineAttribute("MudBlazor.Services.ResizeObserver/<Unobserve>d__10")]
public sealed virtual Task Unobserve(ElementReference element);
    public sealed virtual bool IsElementObserved(ElementReference reference);
    [JSInvokableAttribute]
public void OnSizeChanged(IEnumerable`1<SizeChangeUpdateInfo> changes);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnResized(SizeChanged value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnResized(SizeChanged value);
    public sealed virtual BoundingClientRect GetSizeInfo(ElementReference reference);
    public sealed virtual double GetHeight(ElementReference reference);
    public sealed virtual double GetWidth(ElementReference reference);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MudBlazor.Services.ResizeObserver/<DisposeAsync>d__22")]
public sealed virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
private bool <Observe>b__9_0(ElementReference x);
}
public class MudBlazor.Services.ResizeObserverFactory : object {
    private IServiceProvider _provider;
    public ResizeObserverFactory(IServiceProvider provider);
    public sealed virtual IResizeObserver Create(ResizeObserverOptions options);
    public sealed virtual IResizeObserver Create();
}
public class MudBlazor.Services.ResizeObserverOptions : object {
    [CompilerGeneratedAttribute]
private int <ReportRate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLogging>k__BackingField;
    public int ReportRate { get; public set; }
    public bool EnableLogging { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ReportRate();
    [CompilerGeneratedAttribute]
public void set_ReportRate(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableLogging();
    [CompilerGeneratedAttribute]
public void set_EnableLogging(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.Services.ResizeOptions : object {
    [CompilerGeneratedAttribute]
private int <ReportRate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressInitEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifyOnBreakpointOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Breakpoint, int> <BreakpointDefinitions>k__BackingField;
    public int ReportRate { get; public set; }
    public bool EnableLogging { get; public set; }
    public bool SuppressInitEvent { get; public set; }
    public bool NotifyOnBreakpointOnly { get; public set; }
    public Dictionary`2<Breakpoint, int> BreakpointDefinitions { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ReportRate();
    [CompilerGeneratedAttribute]
public void set_ReportRate(int value);
    [CompilerGeneratedAttribute]
public bool get_EnableLogging();
    [CompilerGeneratedAttribute]
public void set_EnableLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressInitEvent();
    [CompilerGeneratedAttribute]
public void set_SuppressInitEvent(bool value);
    [CompilerGeneratedAttribute]
public bool get_NotifyOnBreakpointOnly();
    [CompilerGeneratedAttribute]
public void set_NotifyOnBreakpointOnly(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Breakpoint, int> get_BreakpointDefinitions();
    [CompilerGeneratedAttribute]
public void set_BreakpointDefinitions(Dictionary`2<Breakpoint, int> value);
    public static bool op_Equality(ResizeOptions left, ResizeOptions right);
    [NullableContextAttribute("1")]
public static bool op_Inequality(ResizeOptions left, ResizeOptions right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ResizeOptions other);
    public virtual int GetHashCode();
}
public class MudBlazor.Services.Scroll.ScrollOptions : object {
    [CompilerGeneratedAttribute]
private ElementReference <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReportRate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressInitEvent>k__BackingField;
    public ElementReference Element { get; public set; }
    public int ReportRate { get; public set; }
    public bool SuppressInitEvent { get; public set; }
    [CompilerGeneratedAttribute]
public ElementReference get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(ElementReference value);
    [CompilerGeneratedAttribute]
public int get_ReportRate();
    [CompilerGeneratedAttribute]
public void set_ReportRate(int value);
    [CompilerGeneratedAttribute]
public bool get_SuppressInitEvent();
    [CompilerGeneratedAttribute]
public void set_SuppressInitEvent(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
public static class MudBlazor.Services.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorDialog(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorSnackbar(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorSnackbar(IServiceCollection services, Action`1<SnackbarConfiguration> options);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorResizeListener(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorResizeListener(IServiceCollection services, Action`1<ResizeOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorResizeObserver(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorResizeObserver(IServiceCollection services, Action`1<ResizeObserverOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorResizeObserverFactory(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorResizeObserverFactory(IServiceCollection services, Action`1<ResizeObserverOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorKeyInterceptor(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorJsEvent(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorScrollManager(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudPopoverService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudPopoverService(IServiceCollection services, Action`1<PopoverOptions> options);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorScrollListener(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorScrollSpy(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudBlazorJsApi(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudEventManager(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudLocalization(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddLocalizationInterceptor(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddLocalizationInterceptor(IServiceCollection services, Func`2<IServiceProvider, TInterceptor> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddMudServices(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMudServices(IServiceCollection services, Action`1<MudServicesConfiguration> configuration);
}
public class MudBlazor.Services.SizeChanged : MulticastDelegate {
    public SizeChanged(object object, IntPtr method);
    public virtual void Invoke(IDictionary`2<ElementReference, BoundingClientRect> changes);
    public virtual IAsyncResult BeginInvoke(IDictionary`2<ElementReference, BoundingClientRect> changes, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum MudBlazor.Severity : Enum {
    public int value__;
    [DescriptionAttribute("normal")]
public static Severity Normal;
    [DescriptionAttribute("info")]
public static Severity Info;
    [DescriptionAttribute("success")]
public static Severity Success;
    [DescriptionAttribute("warning")]
public static Severity Warning;
    [DescriptionAttribute("error")]
public static Severity Error;
}
[ExtensionAttribute]
public static class MudBlazor.SeveritySourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Severity mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Shadow : object {
    [CompilerGeneratedAttribute]
private String[] <Elevation>k__BackingField;
    public String[] Elevation { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Elevation();
    [CompilerGeneratedAttribute]
public void set_Elevation(String[] value);
}
public enum MudBlazor.Size : Enum {
    public int value__;
    [DescriptionAttribute("small")]
public static Size Small;
    [DescriptionAttribute("medium")]
public static Size Medium;
    [DescriptionAttribute("large")]
public static Size Large;
}
[ExtensionAttribute]
public static class MudBlazor.SizeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Size mudEnum);
}
public enum MudBlazor.SkeletonType : Enum {
    public int value__;
    [DescriptionAttribute("text")]
public static SkeletonType Text;
    [DescriptionAttribute("circle")]
public static SkeletonType Circle;
    [DescriptionAttribute("rectangle")]
public static SkeletonType Rectangle;
}
[ExtensionAttribute]
public static class MudBlazor.SkeletonTypeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(SkeletonType mudEnum);
}
public class MudBlazor.SliderContext`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<T> <NullableValue>k__BackingField;
    public T Value { get; }
    public Nullable`1<T> NullableValue { get; }
    public SliderContext`1(T value, Nullable`1<T> nullableValue);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<T> get_NullableValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Snackbar : object {
    private bool _paused;
    private bool _transitionCancellable;
    private bool _hideOnResume;
    [CompilerGeneratedAttribute]
private Timer <Timer>k__BackingField;
    [CompilerGeneratedAttribute]
private SnackBarMessageState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private SnackbarMessage <SnackbarMessage>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<Snackbar> OnClose;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action OnUpdate;
    private Timer Timer { get; }
    internal SnackBarMessageState State { get; }
    [NullableAttribute("2")]
public string Message { get; }
    internal SnackbarMessage SnackbarMessage { get; }
    public Severity Severity { get; }
    internal Snackbar(SnackbarMessage message, SnackbarOptions options);
    [CompilerGeneratedAttribute]
private Timer get_Timer();
    [CompilerGeneratedAttribute]
internal SnackBarMessageState get_State();
    [NullableContextAttribute("2")]
public string get_Message();
    [CompilerGeneratedAttribute]
internal SnackbarMessage get_SnackbarMessage();
    [CompilerGeneratedAttribute]
public void add_OnClose(Action`1<Snackbar> value);
    [CompilerGeneratedAttribute]
public void remove_OnClose(Action`1<Snackbar> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_OnUpdate(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_OnUpdate(Action value);
    public Severity get_Severity();
    internal void Init();
    internal void Clicked(bool fromCloseIcon);
    public void ForceClose();
    private void TransitionTo(SnackbarState state, bool animate, bool cancellable);
    public void PauseTransitions(bool pause);
    [NullableContextAttribute("2")]
private void TimerElapsed(object _);
    private bool StartTimer(int duration);
    private void StopTimer();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.SnackbarConfiguration : CommonSnackbarOptions {
    private bool _newestOnTop;
    private bool _preventDuplicates;
    private int _maxDisplayedSnackbars;
    private string _positionClass;
    private bool _clearAfterNavigation;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action OnUpdate;
    public bool NewestOnTop { get; public set; }
    public bool PreventDuplicates { get; public set; }
    public int MaxDisplayedSnackbars { get; public set; }
    public string PositionClass { get; public set; }
    public bool ClearAfterNavigation { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void add_OnUpdate(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void remove_OnUpdate(Action value);
    public bool get_NewestOnTop();
    public void set_NewestOnTop(bool value);
    public bool get_PreventDuplicates();
    public void set_PreventDuplicates(bool value);
    public int get_MaxDisplayedSnackbars();
    public void set_MaxDisplayedSnackbars(int value);
    public string get_PositionClass();
    public void set_PositionClass(string value);
    public bool get_ClearAfterNavigation();
    public void set_ClearAfterNavigation(bool value);
}
public enum MudBlazor.SnackbarDuplicatesBehavior : Enum {
    public int value__;
    public static SnackbarDuplicatesBehavior Allow;
    public static SnackbarDuplicatesBehavior Prevent;
    public static SnackbarDuplicatesBehavior GlobalDefault;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.SnackBarMessageState : object {
    [CompilerGeneratedAttribute]
private string <AnimationId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UserHasInteracted>k__BackingField;
    [CompilerGeneratedAttribute]
private SnackbarOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private SnackbarState <SnackbarState>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <Stopwatch>k__BackingField;
    private string AnimationId { get; }
    public bool UserHasInteracted { get; public set; }
    public SnackbarOptions Options { get; }
    public SnackbarState SnackbarState { get; public set; }
    public Stopwatch Stopwatch { get; }
    private string Opacity { get; }
    public bool ShowActionButton { get; }
    public bool ShowCloseIcon { get; }
    public bool HideIcon { get; }
    public string Icon { get; }
    public Color IconColor { get; }
    public Size IconSize { get; }
    public string ProgressBarStyle { get; }
    public string AnimationStyle { get; }
    public string SnackbarClass { get; }
    public string TransitionClass { get; }
    public SnackBarMessageState(SnackbarOptions options);
    [CompilerGeneratedAttribute]
private string get_AnimationId();
    [CompilerGeneratedAttribute]
public bool get_UserHasInteracted();
    [CompilerGeneratedAttribute]
public void set_UserHasInteracted(bool value);
    [CompilerGeneratedAttribute]
public SnackbarOptions get_Options();
    [CompilerGeneratedAttribute]
public SnackbarState get_SnackbarState();
    [CompilerGeneratedAttribute]
public void set_SnackbarState(SnackbarState value);
    [CompilerGeneratedAttribute]
public Stopwatch get_Stopwatch();
    private string get_Opacity();
    public bool get_ShowActionButton();
    public bool get_ShowCloseIcon();
    public bool get_HideIcon();
    public string get_Icon();
    public Color get_IconColor();
    public Size get_IconSize();
    public string get_ProgressBarStyle();
    public string get_AnimationStyle();
    public string get_SnackbarClass();
    public string get_TransitionClass();
    private int RemainingTransitionMilliseconds(int transitionDuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.SnackbarOptions : CommonSnackbarOptions {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Snackbar, Task> <Onclick>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Variant> <ActionVariant>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ActionColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Severity <Severity>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SnackbarTypeClass>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseAfterNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <IconColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Size <IconSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SnackbarDuplicatesBehavior <DuplicatesBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InfoIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuccessIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WarningIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorIcon>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Snackbar, Task> Onclick { get; public set; }
    [NullableAttribute("2")]
public string Action { get; public set; }
    public Nullable`1<Variant> ActionVariant { get; public set; }
    public Color ActionColor { get; public set; }
    public Severity Severity { get; }
    [NullableAttribute("2")]
public string SnackbarTypeClass { get; public set; }
    public bool CloseAfterNavigation { get; public set; }
    public bool HideIcon { get; public set; }
    public string Icon { get; public set; }
    public Color IconColor { get; public set; }
    public Size IconSize { get; public set; }
    public SnackbarDuplicatesBehavior DuplicatesBehavior { get; public set; }
    public string NormalIcon { get; public set; }
    public string InfoIcon { get; public set; }
    public string SuccessIcon { get; public set; }
    public string WarningIcon { get; public set; }
    public string ErrorIcon { get; public set; }
    public SnackbarOptions(Severity severity, CommonSnackbarOptions options);
    [CompilerGeneratedAttribute]
public Func`2<Snackbar, Task> get_Onclick();
    [CompilerGeneratedAttribute]
public void set_Onclick(Func`2<Snackbar, Task> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Action();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Variant> get_ActionVariant();
    [CompilerGeneratedAttribute]
public void set_ActionVariant(Nullable`1<Variant> value);
    [CompilerGeneratedAttribute]
public Color get_ActionColor();
    [CompilerGeneratedAttribute]
public void set_ActionColor(Color value);
    [CompilerGeneratedAttribute]
public Severity get_Severity();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SnackbarTypeClass();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SnackbarTypeClass(string value);
    [CompilerGeneratedAttribute]
public bool get_CloseAfterNavigation();
    [CompilerGeneratedAttribute]
public void set_CloseAfterNavigation(bool value);
    [CompilerGeneratedAttribute]
public bool get_HideIcon();
    [CompilerGeneratedAttribute]
public void set_HideIcon(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Color get_IconColor();
    [CompilerGeneratedAttribute]
public void set_IconColor(Color value);
    [CompilerGeneratedAttribute]
public Size get_IconSize();
    [CompilerGeneratedAttribute]
public void set_IconSize(Size value);
    [CompilerGeneratedAttribute]
public SnackbarDuplicatesBehavior get_DuplicatesBehavior();
    [CompilerGeneratedAttribute]
public void set_DuplicatesBehavior(SnackbarDuplicatesBehavior value);
    [CompilerGeneratedAttribute]
public string get_NormalIcon();
    [CompilerGeneratedAttribute]
public void set_NormalIcon(string value);
    [CompilerGeneratedAttribute]
public string get_InfoIcon();
    [CompilerGeneratedAttribute]
public void set_InfoIcon(string value);
    [CompilerGeneratedAttribute]
public string get_SuccessIcon();
    [CompilerGeneratedAttribute]
public void set_SuccessIcon(string value);
    [CompilerGeneratedAttribute]
public string get_WarningIcon();
    [CompilerGeneratedAttribute]
public void set_WarningIcon(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorIcon();
    [CompilerGeneratedAttribute]
public void set_ErrorIcon(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.SnackbarService : object {
    private List`1<Snackbar> _snackBarList;
    private ReaderWriterLockSlim _snackBarLock;
    private NavigationManager _navigationManager;
    [CompilerGeneratedAttribute]
private SnackbarConfiguration <Configuration>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action OnSnackbarsUpdated;
    public SnackbarConfiguration Configuration { get; }
    public IEnumerable`1<Snackbar> ShownSnackbars { get; }
    public SnackbarService(NavigationManager navigationManager, IOptions`1<SnackbarConfiguration> configuration);
    [CompilerGeneratedAttribute]
public sealed virtual SnackbarConfiguration get_Configuration();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_OnSnackbarsUpdated(Action value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_OnSnackbarsUpdated(Action value);
    public sealed virtual IEnumerable`1<Snackbar> get_ShownSnackbars();
    [NullableContextAttribute("2")]
public sealed virtual Snackbar Add(Dictionary`2<string, object> componentParameters, Severity severity, Action`1<SnackbarOptions> configure, string key);
    [NullableContextAttribute("2")]
public sealed virtual Snackbar Add(RenderFragment message, Severity severity, Action`1<SnackbarOptions> configure, string key);
    [NullableContextAttribute("2")]
public sealed virtual Snackbar Add(MarkupString message, Severity severity, Action`1<SnackbarOptions> configure, string key);
    [NullableContextAttribute("2")]
public sealed virtual Snackbar Add(string message, Severity severity, Action`1<SnackbarOptions> configure, string key);
    public sealed virtual void Clear();
    public sealed virtual void Remove(Snackbar snackbar);
    public sealed virtual void RemoveByKey(string key);
    private Snackbar AddCore(string text, Dictionary`2<string, object> componentParameters, Severity severity, Action`1<SnackbarOptions> configure, string key);
    private Snackbar AddCore(SnackbarMessage message, Severity severity, Action`1<SnackbarOptions> configure);
    private bool ResolvePreventDuplicates(SnackbarOptions options);
    private bool SnackbarAlreadyPresent(Snackbar newSnackbar);
    private void ConfigurationUpdated();
    private void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e);
    private void RemoveAllSnackbars(IEnumerable`1<Snackbar> snackbars);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum MudBlazor.SnackbarState : Enum {
    public int value__;
    public static SnackbarState Init;
    public static SnackbarState Showing;
    public static SnackbarState Hiding;
    public static SnackbarState Visible;
}
[ExtensionAttribute]
internal static class MudBlazor.SnackbarStateExtensions : object {
    [ExtensionAttribute]
public static bool IsShowing(SnackbarState state);
    [ExtensionAttribute]
public static bool IsVisible(SnackbarState state);
    [ExtensionAttribute]
public static bool IsHiding(SnackbarState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.SortDefinition`1 : object {
    [CompilerGeneratedAttribute]
private string <SortBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Descending>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, object> <SortFunc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IComparer`1<object> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string SortBy { get; public set; }
    public bool Descending { get; public set; }
    public int Index { get; public set; }
    public Func`2<T, object> SortFunc { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IComparer`1<object> Comparer { get; public set; }
    public SortDefinition`1(string SortBy, bool Descending, int Index, Func`2<T, object> SortFunc, IComparer`1<object> Comparer);
    [CompilerGeneratedAttribute]
private SortDefinition`1(SortDefinition`1<T> original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_SortBy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SortBy(string value);
    [CompilerGeneratedAttribute]
public bool get_Descending();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Descending(bool value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Index(int value);
    [CompilerGeneratedAttribute]
public Func`2<T, object> get_SortFunc();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SortFunc(Func`2<T, object> value);
    [CompilerGeneratedAttribute]
public IComparer`1<object> get_Comparer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Comparer(IComparer`1<object> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SortDefinition`1<T> left, SortDefinition`1<T> right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SortDefinition`1<T> left, SortDefinition`1<T> right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SortDefinition`1<T> other);
    [CompilerGeneratedAttribute]
public SortDefinition`1<T> <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& SortBy, Boolean& Descending, Int32& Index, Func`2& SortFunc, IComparer`1& Comparer);
}
public enum MudBlazor.SortDirection : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static SortDirection None;
    [DescriptionAttribute("ascending")]
public static SortDirection Ascending;
    [DescriptionAttribute("descending")]
public static SortDirection Descending;
}
[ExtensionAttribute]
public static class MudBlazor.SortDirectionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(SortDirection mudEnum);
}
public enum MudBlazor.SortMode : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static SortMode None;
    [DescriptionAttribute("single")]
public static SortMode Single;
    [DescriptionAttribute("multiple")]
public static SortMode Multiple;
}
[ExtensionAttribute]
public static class MudBlazor.SortModeSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(SortMode mudEnum);
}
[NullableContextAttribute("1")]
internal interface MudBlazor.State.Builder.IParameterBuilderAttach {
    public bool IsAttached { get; }
    public abstract virtual bool get_IsAttached();
    public abstract virtual IParameterComponentLifeCycle Attach();
}
public interface MudBlazor.State.Builder.IParameterRegistrationBuilderScope {
    public abstract virtual RegisterParameterBuilder`1<T> RegisterParameter();
    public abstract virtual RegisterParameterBuilder`1<T> RegisterParameter(string parameterName);
}
internal class MudBlazor.State.Builder.ParameterAttachBuilder : object {
    [NullableContextAttribute("1")]
public static ParameterAttachBuilder`1<T> Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class MudBlazor.State.Builder.ParameterAttachBuilder`1 : object {
    [NullableAttribute("2")]
private ParameterMetadata _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<T> _getParameterValueFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<EventCallback`1<T>> _eventCallbackFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IParameterChangedHandler`1<T> _parameterChangedHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IParameterEqualityComparerSwappable`1<T> _comparer;
    public ParameterAttachBuilder`1<T> WithMetadata(ParameterMetadata metadata);
    public ParameterAttachBuilder`1<T> WithGetParameterValueFunc(Func`1<T> getParameterValueFunc);
    public ParameterAttachBuilder`1<T> WithEventCallbackFunc(Func`1<EventCallback`1<T>> eventCallbackFunc);
    public ParameterAttachBuilder`1<T> WithParameterChangedHandler(IParameterChangedHandler`1<T> parameterChangedHandler);
    public ParameterAttachBuilder`1<T> WithParameterChangedHandler(Func`2<ParameterChangedEventArgs`1<T>, Task> parameterChangedHandler);
    public ParameterAttachBuilder`1<T> WithParameterChangedHandler(Func`1<Task> parameterChangedHandler);
    public ParameterAttachBuilder`1<T> WithParameterChangedHandler(Action parameterChangedHandler);
    public ParameterAttachBuilder`1<T> WithParameterChangedHandler(Action`1<ParameterChangedEventArgs`1<T>> parameterChangedHandler);
    public ParameterAttachBuilder`1<T> WithComparer(IEqualityComparer`1<T> comparer);
    public ParameterAttachBuilder`1<T> WithComparer(Func`1<IEqualityComparer`1<T>> comparerFunc);
    public ParameterAttachBuilder`1<T> WithComparer(Func`1<IEqualityComparer`1<TFrom>> comparerFromFunc, Func`2<IEqualityComparer`1<TFrom>, IEqualityComparer`1<T>> comparerToFunc, string comparerParameterName);
    public ParameterStateInternal`1<T> Attach();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.Builder.ParameterRegistrationBuilderScope : object {
    private IParameterStatesWriter _parameterStatesWriter;
    private IParameterScopeContainer _parameterScopeContainer;
    public bool IsLocked { get; }
    public ParameterRegistrationBuilderScope(IParameterScopeContainer scopeContainer, IParameterStatesWriter parameterStatesWriter);
    public bool get_IsLocked();
    public sealed virtual RegisterParameterBuilder`1<T> RegisterParameter(string parameterName);
    public sealed virtual RegisterParameterBuilder`1<T> RegisterParameter();
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.State.Builder.RegisterParameterBuilder`1 : object {
    [NullableAttribute("2")]
private string _handlerName;
    [NullableAttribute("2")]
private string _parameterName;
    [NullableAttribute("2")]
private string _comparerParameterName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<T> _getParameterValueFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<EventCallback`1<T>> _eventCallbackFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IParameterChangedHandler`1<T> _parameterChangedHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IParameterEqualityComparerSwappable`1<T> _comparer;
    private Lazy`1<ParameterStateInternal`1<T>> _parameterStateLazy;
    private bool MudBlazor.State.Builder.IParameterBuilderAttach.IsAttached { get; }
    public RegisterParameterBuilder`1<T> WithName(string parameterName);
    public RegisterParameterBuilder`1<T> WithParameter(Func`1<T> getParameterValueFunc);
    public RegisterParameterBuilder`1<T> WithEventCallback(Func`1<EventCallback`1<T>> eventCallbackFunc);
    public RegisterParameterBuilder`1<T> WithChangeHandler(IParameterChangedHandler`1<T> parameterChangedHandler, string handlerName);
    public RegisterParameterBuilder`1<T> WithChangeHandler(Func`2<ParameterChangedEventArgs`1<T>, Task> parameterChangedHandler, string handlerName);
    public RegisterParameterBuilder`1<T> WithChangeHandler(Func`1<Task> parameterChangedHandler, string handlerName);
    public RegisterParameterBuilder`1<T> WithChangeHandler(Action parameterChangedHandler, string handlerName);
    public RegisterParameterBuilder`1<T> WithChangeHandler(Action`1<ParameterChangedEventArgs`1<T>> parameterChangedHandler, string handlerName);
    public RegisterParameterBuilder`1<T> WithComparer(IEqualityComparer`1<T> comparer);
    public RegisterParameterBuilder`1<T> WithComparer(Func`1<IEqualityComparer`1<T>> comparerFunc, string comparerParameterName);
    public RegisterParameterBuilder`1<T> WithComparer(Func`1<IEqualityComparer`1<TFrom>> comparerFromFunc, Func`2<IEqualityComparer`1<TFrom>, IEqualityComparer`1<T>> comparerToFunc, string comparerParameterName);
    internal ParameterStateInternal`1<T> Attach();
    private ParameterStateInternal`1<T> CreateParameterState();
    private sealed virtual override bool MudBlazor.State.Builder.IParameterBuilderAttach.get_IsAttached();
    private sealed virtual override IParameterComponentLifeCycle MudBlazor.State.Builder.IParameterBuilderAttach.Attach();
    public static ParameterState`1<T> op_Implicit(RegisterParameterBuilder`1<T> builder);
}
[NullableContextAttribute("1")]
internal interface MudBlazor.State.Comparer.IParameterEqualityComparerSwappable`1 {
    public Func`1<IEqualityComparer`1<T>> UnderlyingComparer { get; }
    public abstract virtual Func`1<IEqualityComparer`1<T>> get_UnderlyingComparer();
    public abstract virtual bool TryGetFromParameterView(ParameterView parameters, string parameterName, IEqualityComparer`1& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("IEqualityComparer = {OriginalComparer}")]
internal class MudBlazor.State.Comparer.ParameterEqualityComparerSwappable`1 : object {
    [CompilerGeneratedAttribute]
private Func`1<IEqualityComparer`1<T>> <UnderlyingComparer>k__BackingField;
    [DebuggerBrowsableAttribute("0")]
public Func`1<IEqualityComparer`1<T>> UnderlyingComparer { get; }
    [ExcludeFromCodeCoverageAttribute]
[DebuggerBrowsableAttribute("3")]
private IEqualityComparer`1<T> OriginalComparer { get; }
    public ParameterEqualityComparerSwappable`1(IEqualityComparer`1<T> comparer);
    public ParameterEqualityComparerSwappable`1(Func`1<IEqualityComparer`1<T>> comparerFunc);
    [CompilerGeneratedAttribute]
public sealed virtual Func`1<IEqualityComparer`1<T>> get_UnderlyingComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
    public sealed virtual bool TryGetFromParameterView(ParameterView parameters, string parameterName, IEqualityComparer`1& result);
    private IEqualityComparer`1<T> get_OriginalComparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("IEqualityComparer = {OriginalComparer}")]
internal class MudBlazor.State.Comparer.ParameterEqualityComparerTransformSwappable`2 : object {
    [DebuggerBrowsableAttribute("0")]
private Func`2<IEqualityComparer`1<TFrom>, IEqualityComparer`1<T>> _comparerToFunc;
    [DebuggerBrowsableAttribute("0")]
private Func`1<IEqualityComparer`1<TFrom>> _comparerFromFunc;
    [DebuggerBrowsableAttribute("0")]
public Func`1<IEqualityComparer`1<T>> UnderlyingComparer { get; }
    [ExcludeFromCodeCoverageAttribute]
[DebuggerBrowsableAttribute("3")]
private IEqualityComparer`1<T> OriginalComparer { get; }
    public ParameterEqualityComparerTransformSwappable`2(Func`1<IEqualityComparer`1<TFrom>> comparerFromFunc, Func`2<IEqualityComparer`1<TFrom>, IEqualityComparer`1<T>> comparerToFunc);
    public sealed virtual Func`1<IEqualityComparer`1<T>> get_UnderlyingComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
    public sealed virtual bool TryGetFromParameterView(ParameterView parameters, string parameterName, IEqualityComparer`1& result);
    private IEqualityComparer`1<T> get_OriginalComparer();
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <get_UnderlyingComparer>b__3_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.Comparer.ParameterHandlerUniquenessComparer : object {
    public static ParameterHandlerUniquenessComparer Default;
    private static ParameterHandlerUniquenessComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ParameterMetadata x, ParameterMetadata y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IParameterComponentLifeCycle x, IParameterComponentLifeCycle y);
    public sealed virtual int GetHashCode(ParameterMetadata parameterMetadata);
    public sealed virtual int GetHashCode(IParameterComponentLifeCycle parameterComponentLifeCycle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.Comparer.ParameterNameUniquenessComparer : object {
    public static ParameterNameUniquenessComparer Default;
    private static ParameterNameUniquenessComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(ParameterMetadata x, ParameterMetadata y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IParameterComponentLifeCycle x, IParameterComponentLifeCycle y);
    public sealed virtual int GetHashCode(ParameterMetadata parameterMetadata);
    public sealed virtual int GetHashCode(IParameterComponentLifeCycle parameterComponentLifeCycle);
}
[NullableContextAttribute("1")]
public interface MudBlazor.State.IParameterChangedHandler`1 {
    public abstract virtual Task HandleAsync(ParameterChangedEventArgs`1<T> parameterChangedEventArgs);
}
[NullableContextAttribute("1")]
internal interface MudBlazor.State.IParameterComponentLifeCycle {
    public ParameterMetadata Metadata { get; }
    public bool HasHandler { get; }
    public abstract virtual ParameterMetadata get_Metadata();
    public abstract virtual bool get_HasHandler();
    public abstract virtual bool HasParameterChanged(ParameterView parameters);
    public abstract virtual Task ParameterChangeHandleAsync();
    public abstract virtual void OnInitialized();
    public abstract virtual void OnParametersSet();
}
internal interface MudBlazor.State.IParameterContainer {
    public abstract virtual void OnInitialized();
    public abstract virtual void OnParametersSet();
    public abstract virtual Task SetParametersAsync(Func`2<ParameterView, Task> baseSetParametersAsync, ParameterView parameters);
    public abstract virtual bool TryGetValue(string parameterName, IParameterComponentLifeCycle& parameterComponentLifeCycle);
}
internal interface MudBlazor.State.IParameterScopeContainer {
    public bool IsLocked { get; }
    public abstract virtual bool get_IsLocked();
}
[NullableContextAttribute("1")]
internal interface MudBlazor.State.IParameterStatesReader {
    public abstract virtual IEnumerable`1<IParameterComponentLifeCycle> ReadParameters();
    public abstract virtual void Complete();
}
internal interface MudBlazor.State.IParameterStatesWriter {
    public abstract virtual void WriteParameter(IParameterBuilderAttach builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.State.ParameterChangedEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private T <LastValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public string ParameterName { get; }
    public T LastValue { get; }
    public T Value { get; }
    public ParameterChangedEventArgs`1(string parameterName, T lastValue, T value);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public T get_LastValue();
    [CompilerGeneratedAttribute]
public T get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.ParameterChangedLambdaArgsHandler`1 : object {
    private Action`1<ParameterChangedEventArgs`1<T>> _lambda;
    public ParameterChangedLambdaArgsHandler`1(Action`1<ParameterChangedEventArgs`1<T>> lambda);
    public sealed virtual Task HandleAsync(ParameterChangedEventArgs`1<T> parameterChangedEventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.ParameterChangedLambdaArgsTaskHandler`1 : object {
    private Func`2<ParameterChangedEventArgs`1<T>, Task> _lambda;
    public ParameterChangedLambdaArgsTaskHandler`1(Func`2<ParameterChangedEventArgs`1<T>, Task> lambda);
    public sealed virtual Task HandleAsync(ParameterChangedEventArgs`1<T> parameterChangedEventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.ParameterChangedLambdaHandler`1 : object {
    private Action _lambda;
    public ParameterChangedLambdaHandler`1(Action lambda);
    public sealed virtual Task HandleAsync(ParameterChangedEventArgs`1<T> parameterChangedEventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.ParameterChangedLambdaTaskHandler`1 : object {
    private Func`1<Task> _lambda;
    public ParameterChangedLambdaTaskHandler`1(Func`1<Task> lambda);
    public sealed virtual Task HandleAsync(ParameterChangedEventArgs`1<T> parameterChangedEventArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.ParameterContainer : object {
    private Lazy`1<bool> _lazyVerify;
    private List`1<IParameterScopeContainer> _parameterScopeContainers;
    [CompilerGeneratedAttribute]
private bool <AutoVerify>k__BackingField;
    public bool AutoVerify { get; public set; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
public bool get_AutoVerify();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AutoVerify(bool value);
    public int get_Count();
    public void Add(IParameterScopeContainer parameterScopeContainer);
    public sealed virtual void OnInitialized();
    public sealed virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.State.ParameterContainer/<SetParametersAsync>d__12")]
public sealed virtual Task SetParametersAsync(Func`2<ParameterView, Task> baseSetParametersAsync, ParameterView parameters);
    public sealed virtual bool TryGetValue(string parameterName, IParameterComponentLifeCycle& parameterComponentLifeCycle);
    public void Verify();
    private void VerifyOnAuto();
    private bool VerifyInternal();
    private void ThrowOnDuplicates();
    public sealed virtual IEnumerator`1<IParameterComponentLifeCycle> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ParameterName = {ParameterName}")]
internal class MudBlazor.State.ParameterMetadata : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComparerParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerName>k__BackingField;
    [NullableAttribute("1")]
public string ParameterName { get; }
    public string ComparerParameterName { get; }
    public string HandlerName { get; }
    [NullableContextAttribute("1")]
public ParameterMetadata(string parameterName, string handlerName);
    public ParameterMetadata(string parameterName, string handlerName, string comparerParameterName);
    [NullableContextAttribute("1")]
public ParameterMetadata(string parameterName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public string get_ComparerParameterName();
    [CompilerGeneratedAttribute]
public string get_HandlerName();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.ParameterScopeContainer : object {
    private IParameterStatesReader _parameterStatesReader;
    private Lazy`1<Dictionary`2<string, IParameterComponentLifeCycle>> _parameters;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public bool IsLocked { get; private set; }
    public bool IsInitialized { get; }
    public ParameterScopeContainer(IParameterComponentLifeCycle[] parameters);
    public ParameterScopeContainer(IEnumerable`1<IParameterComponentLifeCycle> parameters);
    public ParameterScopeContainer(IParameterStatesReader parameterStatesReader);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLocked();
    [CompilerGeneratedAttribute]
private void set_IsLocked(bool value);
    public bool get_IsInitialized();
    private Dictionary`2<string, IParameterComponentLifeCycle> ParametersFactory();
    public void ForceParametersAttachment();
    public sealed virtual void OnInitialized();
    public sealed virtual void OnParametersSet();
    [AsyncStateMachineAttribute("MudBlazor.State.ParameterScopeContainer/<SetParametersAsync>d__15")]
public sealed virtual Task SetParametersAsync(Func`2<ParameterView, Task> baseSetParametersAsync, ParameterView parameters);
    public sealed virtual bool TryGetValue(string parameterName, IParameterComponentLifeCycle& parameterComponentLifeCycle);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<IParameterComponentLifeCycle> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.State.ParameterState`1 : object {
    public T Value { get; }
    public abstract virtual T get_Value();
    [NullableContextAttribute("1")]
public abstract virtual Task SetValueAsync(T value);
    [NullableContextAttribute("1")]
public static T op_Implicit(ParameterState`1<T> parameterState);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerDisplayAttribute("ParameterName = {Metadata.ParameterName}, Value = {_value}")]
internal class MudBlazor.State.ParameterStateInternal`1 : ParameterState`1<T> {
    [NullableAttribute("2")]
private T _value;
    [NullableAttribute("2")]
private T _lastValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ParameterChangedEventArgs`1<T> _parameterChangedEventArgs;
    private Func`1<T> _getParameterValueFunc;
    private IParameterEqualityComparerSwappable`1<T> _comparer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<EventCallback`1<T>> _eventCallbackFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IParameterChangedHandler`1<T> _parameterChangedHandler;
    [CompilerGeneratedAttribute]
private ParameterMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    [MemberNotNullWhenAttribute("True", "_parameterChangedEventArgs")]
private bool HasParameterChangedEventArgs { get; }
    public ParameterMetadata Metadata { get; }
    [MemberNotNullWhenAttribute("True", "_parameterChangedHandler")]
public bool HasHandler { get; }
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool IsInitialized { get; private set; }
    [NullableAttribute("2")]
public T Value { get; }
    public IParameterEqualityComparerSwappable`1<T> Comparer { get; }
    private ParameterStateInternal`1(ParameterMetadata metadata, Func`1<T> getParameterValueFunc, Func`1<EventCallback`1<T>> eventCallbackFunc, IParameterChangedHandler`1<T> parameterChangedHandler, IParameterEqualityComparerSwappable`1<T> comparer);
    [MemberNotNullWhenAttribute("True", "_parameterChangedEventArgs")]
private bool get_HasParameterChangedEventArgs();
    [CompilerGeneratedAttribute]
public sealed virtual ParameterMetadata get_Metadata();
    [MemberNotNullWhenAttribute("True", "_parameterChangedHandler")]
public sealed virtual bool get_HasHandler();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
private void set_IsInitialized(bool value);
    [NullableContextAttribute("2")]
public virtual T get_Value();
    public IParameterEqualityComparerSwappable`1<T> get_Comparer();
    public virtual Task SetValueAsync(T value);
    public sealed virtual void OnInitialized();
    public sealed virtual void OnParametersSet();
    public sealed virtual Task ParameterChangeHandleAsync();
    public sealed virtual bool HasParameterChanged(ParameterView parameters);
    public static ParameterStateInternal`1<T> Attach(ParameterMetadata metadata, Func`1<T> getParameterValueFunc, Func`1<EventCallback`1<T>> eventCallbackFunc, IParameterChangedHandler`1<T> parameterChangedHandler, IParameterEqualityComparerSwappable`1<T> comparer);
    public sealed virtual bool Equals(ParameterStateInternal`1<T> other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.Rule.Exclusion.ComparerParameterLambdaExclusion : object {
    public sealed virtual bool IsExclusion(ParameterMetadata currentMetadata, ParameterMetadata& newMetadata);
    private static bool RemoveLambda(string expression, String& result);
    private static string RemoveWhitespaces(string input);
}
internal class MudBlazor.State.Rule.Exclusion.HandlerLambdaExclusion : object {
    [NullableContextAttribute("1")]
public sealed virtual bool IsExclusion(ParameterMetadata currentMetadata, ParameterMetadata& newMetadata);
}
[NullableContextAttribute("1")]
internal interface MudBlazor.State.Rule.Exclusion.IExclusion {
    public abstract virtual bool IsExclusion(ParameterMetadata currentMetadata, ParameterMetadata& newMetadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.State.Rule.ParameterMetadataRules : object {
    private static IExclusion[] Exclusions;
    private static ParameterMetadataRules();
    public static ParameterMetadata Morph(ParameterMetadata originalMetadata);
}
public enum MudBlazor.StretchItems : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static StretchItems None;
    [DescriptionAttribute("start")]
public static StretchItems Start;
    [DescriptionAttribute("end")]
public static StretchItems End;
    [DescriptionAttribute("start-and-end")]
public static StretchItems StartAndEnd;
    [DescriptionAttribute("middle")]
public static StretchItems Middle;
    [DescriptionAttribute("all")]
public static StretchItems All;
}
[ExtensionAttribute]
public static class MudBlazor.StretchItemsSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(StretchItems mudEnum);
}
public class MudBlazor.Subtitle1 : BaseTypography {
}
public class MudBlazor.Subtitle2 : BaseTypography {
}
public enum MudBlazor.SwipeDirection : Enum {
    public int value__;
    public static SwipeDirection None;
    public static SwipeDirection LeftToRight;
    public static SwipeDirection RightToLeft;
    public static SwipeDirection TopToBottom;
    public static SwipeDirection BottomToTop;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.SwipeEventArgs : object {
    [CompilerGeneratedAttribute]
private TouchEventArgs <TouchEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <SwipeDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private MudSwipeArea <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private SwipeDirection <SwipeDirection>k__BackingField;
    public TouchEventArgs TouchEventArgs { get; }
    public Nullable`1<double> SwipeDelta { get; }
    public MudSwipeArea Sender { get; }
    public SwipeDirection SwipeDirection { get; }
    public SwipeEventArgs(TouchEventArgs touchEventArgs, SwipeDirection swipeDirection, Nullable`1<double> swipeDelta, MudSwipeArea sender);
    [CompilerGeneratedAttribute]
public TouchEventArgs get_TouchEventArgs();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_SwipeDelta();
    [CompilerGeneratedAttribute]
public MudSwipeArea get_Sender();
    [CompilerGeneratedAttribute]
public SwipeDirection get_SwipeDirection();
}
public enum MudBlazor.TabHeaderPosition : Enum {
    public int value__;
    [DescriptionAttribute("after")]
public static TabHeaderPosition After;
    [DescriptionAttribute("before")]
public static TabHeaderPosition Before;
    [DescriptionAttribute("none")]
public static TabHeaderPosition None;
}
[ExtensionAttribute]
public static class MudBlazor.TabHeaderPositionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(TabHeaderPosition mudEnum);
}
public class MudBlazor.TabInteractionEventArgs : object {
    [CompilerGeneratedAttribute]
private int <PanelIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private TabInteractionType <InteractionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public int PanelIndex { get; public set; }
    public TabInteractionType InteractionType { get; public set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PanelIndex();
    [CompilerGeneratedAttribute]
public void set_PanelIndex(int value);
    [CompilerGeneratedAttribute]
public TabInteractionType get_InteractionType();
    [CompilerGeneratedAttribute]
public void set_InteractionType(TabInteractionType value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public enum MudBlazor.TabInteractionType : Enum {
    public int value__;
    public static TabInteractionType Activate;
}
public enum MudBlazor.TableApplyButtonPosition : Enum {
    public int value__;
    public static TableApplyButtonPosition Start;
    public static TableApplyButtonPosition End;
    public static TableApplyButtonPosition StartAndEnd;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.TableButtonPositionExtensions : object {
    [ExtensionAttribute]
public static bool Editable(TableContext context, bool ignoreEditable);
    [ExtensionAttribute]
public static bool DisplayApplyButtonAtStart(TableApplyButtonPosition position);
    [ExtensionAttribute]
public static bool DisplayEditButtonAtStart(TableEditButtonPosition position);
    [ExtensionAttribute]
public static bool DisplayApplyButtonAtStart(TableContext context, bool ignoreEditable);
    [ExtensionAttribute]
public static bool DisplayApplyButtonAtEnd(TableApplyButtonPosition position);
    [ExtensionAttribute]
public static bool DisplayEditButtonAtEnd(TableEditButtonPosition position);
    [ExtensionAttribute]
public static bool DisplayApplyButtonAtEnd(TableContext context, bool ignoreEditable);
    [ExtensionAttribute]
public static bool DisplayEditButtonAtStart(TableContext context, bool ignoreEditable);
    [ExtensionAttribute]
public static bool DisplayEditButtonAtEnd(TableContext context, bool ignoreEditable);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MudBlazor.TableContext : object {
    [CompilerGeneratedAttribute]
private MudTableBase <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <TableStateHasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <PagerStateHasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPager>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<MudTHeadRow> <HeaderRows>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<MudTFootRow> <FooterRows>k__BackingField;
    public MudTableBase Table { get; public set; }
    public Action TableStateHasChanged { get; public set; }
    public Action PagerStateHasChanged { get; public set; }
    public bool HasPager { get; public set; }
    [NullableAttribute("1")]
public List`1<MudTHeadRow> HeaderRows { get; public set; }
    [NullableAttribute("1")]
public List`1<MudTFootRow> FooterRows { get; public set; }
    public SortDirection SortDirection { get; protected set; }
    [CompilerGeneratedAttribute]
public MudTableBase get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(MudTableBase value);
    [CompilerGeneratedAttribute]
public Action get_TableStateHasChanged();
    [CompilerGeneratedAttribute]
public void set_TableStateHasChanged(Action value);
    [CompilerGeneratedAttribute]
public Action get_PagerStateHasChanged();
    [CompilerGeneratedAttribute]
public void set_PagerStateHasChanged(Action value);
    [CompilerGeneratedAttribute]
public bool get_HasPager();
    [CompilerGeneratedAttribute]
public void set_HasPager(bool value);
    [NullableContextAttribute("1")]
public abstract virtual void Add(MudTr row, object item);
    [NullableContextAttribute("1")]
public abstract virtual void Remove(MudTr row, object item);
    public abstract virtual void UpdateRowCheckBoxes(bool updateGroups, bool updateHeaderFooter);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<MudTHeadRow> get_HeaderRows();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_HeaderRows(List`1<MudTHeadRow> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<MudTFootRow> get_FooterRows();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_FooterRows(List`1<MudTFootRow> value);
    public abstract virtual void InitializeSorting();
    public abstract virtual SortDirection get_SortDirection();
    protected abstract virtual void set_SortDirection(SortDirection value);
    [NullableContextAttribute("1")]
public abstract virtual void ManagePreviousEditedRow(MudTr row);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.TableContext`1 : TableContext {
    [NullableAttribute("2")]
private MudTr _editedRow;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEqualityComparer`1<T> _comparer;
    [CompilerGeneratedAttribute]
private HashSet`1<T> <Selection>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<T, MudTr> <Rows>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MudTableGroupRow`1<T>> <GroupRows>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MudTableSortLabel`1<T>> <SortLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, object> <SortBy>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private MudTableSortLabel`1<T> <CurrentSortLabel>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<T> Comparer { get; public set; }
    public HashSet`1<T> Selection { get; public set; }
    public Dictionary`2<T, MudTr> Rows { get; public set; }
    public List`1<MudTableGroupRow`1<T>> GroupRows { get; public set; }
    public List`1<MudTableSortLabel`1<T>> SortLabels { get; public set; }
    public SortDirection SortDirection { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<T, object> SortBy { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public MudTableSortLabel`1<T> CurrentSortLabel { get; protected set; }
    public IEqualityComparer`1<T> get_Comparer();
    public void set_Comparer(IEqualityComparer`1<T> value);
    [CompilerGeneratedAttribute]
public HashSet`1<T> get_Selection();
    [CompilerGeneratedAttribute]
public void set_Selection(HashSet`1<T> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<T, MudTr> get_Rows();
    [CompilerGeneratedAttribute]
public void set_Rows(Dictionary`2<T, MudTr> value);
    [CompilerGeneratedAttribute]
public List`1<MudTableGroupRow`1<T>> get_GroupRows();
    [CompilerGeneratedAttribute]
public void set_GroupRows(List`1<MudTableGroupRow`1<T>> value);
    [CompilerGeneratedAttribute]
public List`1<MudTableSortLabel`1<T>> get_SortLabels();
    [CompilerGeneratedAttribute]
public void set_SortLabels(List`1<MudTableSortLabel`1<T>> value);
    public virtual void UpdateRowCheckBoxes(bool updateGroups, bool updateHeaderFooter);
    public virtual void ManagePreviousEditedRow(MudTr row);
    public virtual void Add(MudTr row, object item);
    public virtual void Remove(MudTr row, object item);
    [CompilerGeneratedAttribute]
public virtual SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
protected virtual void set_SortDirection(SortDirection value);
    [CompilerGeneratedAttribute]
public Func`2<T, object> get_SortBy();
    [CompilerGeneratedAttribute]
protected void set_SortBy(Func`2<T, object> value);
    [CompilerGeneratedAttribute]
public MudTableSortLabel`1<T> get_CurrentSortLabel();
    [CompilerGeneratedAttribute]
protected void set_CurrentSortLabel(MudTableSortLabel`1<T> value);
    [AsyncStateMachineAttribute("MudBlazor.TableContext`1/<SetSortFunc>d__37")]
public Task SetSortFunc(MudTableSortLabel`1<T> label, bool overrideDirectionNone);
    public IEnumerable`1<T> Sort(IEnumerable`1<T> items);
    public virtual void InitializeSorting();
    private void UpdateSortLabels(MudTableSortLabel`1<T> label);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <Sort>b__38_0(T item);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <Sort>b__38_1(T item);
}
public class MudBlazor.TableData`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItems>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<T> Items { get; public set; }
    public int TotalItems { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public int get_TotalItems();
    [CompilerGeneratedAttribute]
public void set_TotalItems(int value);
}
public enum MudBlazor.TableEditButtonPosition : Enum {
    public int value__;
    public static TableEditButtonPosition Start;
    public static TableEditButtonPosition End;
    public static TableEditButtonPosition StartAndEnd;
}
public enum MudBlazor.TableEditTrigger : Enum {
    public int value__;
    public static TableEditTrigger RowClick;
    public static TableEditTrigger EditButton;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.TableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDirection(IEnumerable`1<TSource> source, SortDirection direction, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedQueryable`1<TSource> OrderByDirection(IQueryable`1<TSource> source, SortDirection direction, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool EditButtonDisabled(TableContext context, T item);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.TableGroupData`2 : object {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TElement> <Items>k__BackingField;
    public string GroupName { get; }
    public TKey Key { get; }
    [NullableAttribute("1")]
public IEnumerable`1<TElement> Items { get; }
    public TableGroupData`2(string groupName, TKey key, IEnumerable`1<TElement> items);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IEnumerable`1<TElement> get_Items();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.TableGroupDefinition`1 : object {
    private bool _expandable;
    private bool _indentation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TableContext`1<T> _context;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TableGroupDefinition`1<T> _innerGroup;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<T, object> <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitiallyExpanded>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private TableGroupDefinition`1<T> <Parent>k__BackingField;
    public string GroupName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<T, object> Selector { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TableGroupDefinition`1<T> InnerGroup { get; public set; }
    public bool Indentation { get; public set; }
    public bool Expandable { get; public set; }
    public bool IsInitiallyExpanded { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal TableGroupDefinition`1<T> Parent { get; private set; }
    internal bool IsParentExpandable { get; }
    internal bool IsThisOrParentExpandable { get; }
    internal int Level { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal TableContext`1<T> Context { get; internal set; }
    [NullableContextAttribute("1")]
public TableGroupDefinition`1(Func`2<T, object> selector, TableGroupDefinition`1<T> innerGroup);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public Func`2<T, object> get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(Func`2<T, object> value);
    public TableGroupDefinition`1<T> get_InnerGroup();
    public void set_InnerGroup(TableGroupDefinition`1<T> value);
    public bool get_Indentation();
    public void set_Indentation(bool value);
    public bool get_Expandable();
    public void set_Expandable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInitiallyExpanded();
    [CompilerGeneratedAttribute]
public void set_IsInitiallyExpanded(bool value);
    [CompilerGeneratedAttribute]
internal TableGroupDefinition`1<T> get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TableGroupDefinition`1<T> value);
    internal bool get_IsParentExpandable();
    internal bool get_IsThisOrParentExpandable();
    internal int get_Level();
    internal TableContext`1<T> get_Context();
    internal void set_Context(TableContext`1<T> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <set_Expandable>b__22_0(MudTableGroupRow`1<T> gr);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <set_Expandable>b__22_1(MudTableGroupRow`1<T> gr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.TableRowClickEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private MouseEventArgs <MouseEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private MudTr <Row>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    public MouseEventArgs MouseEventArgs { get; }
    public MudTr Row { get; }
    [NullableAttribute("2")]
public T Item { get; }
    public TableRowClickEventArgs`1(MouseEventArgs mouseEventArgs, MudTr row, T item);
    [CompilerGeneratedAttribute]
public MouseEventArgs get_MouseEventArgs();
    [CompilerGeneratedAttribute]
public MudTr get_Row();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Item();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.TableRowHoverEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private PointerEventArgs <PointerEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private MudTr <Row>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    public PointerEventArgs PointerEventArgs { get; }
    public MudTr Row { get; }
    [NullableAttribute("2")]
public T Item { get; }
    public TableRowHoverEventArgs`1(PointerEventArgs pointerEventArgs, MudTr row, T item);
    [CompilerGeneratedAttribute]
public PointerEventArgs get_PointerEventArgs();
    [CompilerGeneratedAttribute]
public MudTr get_Row();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Item();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.TableRowValidator : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Model>k__BackingField;
    protected HashSet`1<string> _errors;
    protected HashSet`1<IFormComponent> _formControls;
    public bool IsValid { get; }
    public String[] Errors { get; }
    [NullableAttribute("2")]
public object Model { get; public set; }
    public sealed virtual bool get_IsValid();
    public sealed virtual String[] get_Errors();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual object get_Model();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Model(object value);
    private sealed virtual override void MudBlazor.Interfaces.IForm.FieldChanged(IFormComponent formControl, object newValue);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Add(IFormComponent formControl);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Remove(IFormComponent formControl);
    private sealed virtual override void MudBlazor.Interfaces.IForm.Update(IFormComponent formControl);
    public void Validate();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.TableState : object {
    [CompilerGeneratedAttribute]
private int <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public int Page { get; public set; }
    public int PageSize { get; public set; }
    public string SortLabel { get; public set; }
    public SortDirection SortDirection { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(int value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_SortLabel();
    [CompilerGeneratedAttribute]
public void set_SortLabel(string value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
}
[ExtensionAttribute]
public static class MudBlazor.TaskExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.TaskExtensions/<CatchAndLog>d__0")]
[ExtensionAttribute]
public static void CatchAndLog(Task task, bool ignoreExceptions);
    [AsyncStateMachineAttribute("MudBlazor.TaskExtensions/<CatchAndLog>d__1")]
[ExtensionAttribute]
public static void CatchAndLog(ValueTask task, bool ignoreExceptions);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MudBlazor.TaskExtensions/<CatchAndLog>d__2`1")]
[ExtensionAttribute]
public static void CatchAndLog(ValueTask`1<T> task, bool ignoreExceptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MudBlazor.TemplateColumn`1 : Column`1<T> {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Filterable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Sortable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DragAndDropEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Resizable>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ShowColumnOptions>k__BackingField;
    public string PropertyName { get; }
    [ParameterAttribute]
public Nullable`1<bool> Filterable { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Sortable { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> DragAndDropEnabled { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> Resizable { get; public set; }
    [ParameterAttribute]
public Nullable`1<bool> ShowColumnOptions { get; public set; }
    protected internal virtual object CellContent(T item);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
    protected internal virtual object PropertyFunc(T item);
    protected internal virtual void SetProperty(object item, object value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Filterable();
    [CompilerGeneratedAttribute]
public virtual void set_Filterable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Sortable();
    [CompilerGeneratedAttribute]
public virtual void set_Sortable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_DragAndDropEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_DragAndDropEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_Resizable();
    [CompilerGeneratedAttribute]
public virtual void set_Resizable(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_ShowColumnOptions();
    [CompilerGeneratedAttribute]
public virtual void set_ShowColumnOptions(Nullable`1<bool> value);
}
public enum MudBlazor.TimeEditMode : Enum {
    public int value__;
    public static TimeEditMode Normal;
    public static TimeEditMode OnlyMinutes;
    public static TimeEditMode OnlyHours;
}
public enum MudBlazor.TimelineAlign : Enum {
    public int value__;
    [DescriptionAttribute("default")]
public static TimelineAlign Default;
    [DescriptionAttribute("start")]
public static TimelineAlign Start;
    [DescriptionAttribute("end")]
public static TimelineAlign End;
}
[ExtensionAttribute]
public static class MudBlazor.TimelineAlignSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(TimelineAlign mudEnum);
}
public enum MudBlazor.TimelineOrientation : Enum {
    public int value__;
    [DescriptionAttribute("vertical")]
public static TimelineOrientation Vertical;
    [DescriptionAttribute("horizontal")]
public static TimelineOrientation Horizontal;
}
[ExtensionAttribute]
public static class MudBlazor.TimelineOrientationSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(TimelineOrientation mudEnum);
}
public enum MudBlazor.TimelinePosition : Enum {
    public int value__;
    [DescriptionAttribute("alternate")]
public static TimelinePosition Alternate;
    [DescriptionAttribute("top")]
public static TimelinePosition Top;
    [DescriptionAttribute("bottom")]
public static TimelinePosition Bottom;
    [DescriptionAttribute("left")]
public static TimelinePosition Left;
    [DescriptionAttribute("right")]
public static TimelinePosition Right;
    [DescriptionAttribute("start")]
public static TimelinePosition Start;
    [DescriptionAttribute("end")]
public static TimelinePosition End;
}
[ExtensionAttribute]
public static class MudBlazor.TimelinePositionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(TimelinePosition mudEnum);
}
public enum MudBlazor.Transition : Enum {
    public int value__;
    [DescriptionAttribute("None")]
public static Transition None;
    [DescriptionAttribute("Fade")]
public static Transition Fade;
    [DescriptionAttribute("Slide")]
public static Transition Slide;
    [DescriptionAttribute("Custom")]
public static Transition Custom;
}
[ExtensionAttribute]
public static class MudBlazor.TransitionSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Transition mudEnum);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.TreeItemData`1 : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expanded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Expandable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Selected>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<TreeItemData`1<T>> <Children>k__BackingField;
    public string Text { get; public set; }
    public string Icon { get; public set; }
    public T Value { get; public set; }
    public bool Expanded { get; public set; }
    public bool Expandable { get; public set; }
    public bool Selected { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<TreeItemData`1<T>> Children { get; public set; }
    public bool HasChildren { get; }
    protected TreeItemData`1(T value);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual void set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Icon();
    [CompilerGeneratedAttribute]
public virtual void set_Icon(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(T value);
    [CompilerGeneratedAttribute]
public virtual bool get_Expanded();
    [CompilerGeneratedAttribute]
public virtual void set_Expanded(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_Expandable();
    [CompilerGeneratedAttribute]
public virtual void set_Expandable(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_Selected();
    [CompilerGeneratedAttribute]
public virtual void set_Selected(bool value);
    [CompilerGeneratedAttribute]
public virtual List`1<TreeItemData`1<T>> get_Children();
    [CompilerGeneratedAttribute]
public virtual void set_Children(List`1<TreeItemData`1<T>> value);
    public virtual bool get_HasChildren();
    public virtual bool Equals(TreeItemData`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MudBlazor.TypeIdentifier : object {
    [NullableAttribute("1")]
private static HashSet`1<Type> _numericTypes;
    private static TypeIdentifier();
    public static bool IsString(Type type);
    public static bool IsNumber(Type type);
    public static bool IsEnum(Type type);
    public static bool IsDateTime(Type type);
    public static bool IsBoolean(Type type);
    public static bool IsGuid(Type type);
}
public enum MudBlazor.Typo : Enum {
    public int value__;
    [DescriptionAttribute("inherit")]
public static Typo inherit;
    [DescriptionAttribute("h1")]
public static Typo h1;
    [DescriptionAttribute("h2")]
public static Typo h2;
    [DescriptionAttribute("h3")]
public static Typo h3;
    [DescriptionAttribute("h4")]
public static Typo h4;
    [DescriptionAttribute("h5")]
public static Typo h5;
    [DescriptionAttribute("h6")]
public static Typo h6;
    [DescriptionAttribute("subtitle1")]
public static Typo subtitle1;
    [DescriptionAttribute("subtitle2")]
public static Typo subtitle2;
    [DescriptionAttribute("body1")]
public static Typo body1;
    [DescriptionAttribute("body2")]
public static Typo body2;
    [DescriptionAttribute("input")]
public static Typo input;
    [DescriptionAttribute("button")]
public static Typo button;
    [DescriptionAttribute("caption")]
public static Typo caption;
    [DescriptionAttribute("overline")]
public static Typo overline;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Typography : object {
    [CompilerGeneratedAttribute]
private Default <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private H1 <H1>k__BackingField;
    [CompilerGeneratedAttribute]
private H2 <H2>k__BackingField;
    [CompilerGeneratedAttribute]
private H3 <H3>k__BackingField;
    [CompilerGeneratedAttribute]
private H4 <H4>k__BackingField;
    [CompilerGeneratedAttribute]
private H5 <H5>k__BackingField;
    [CompilerGeneratedAttribute]
private H6 <H6>k__BackingField;
    [CompilerGeneratedAttribute]
private Subtitle1 <Subtitle1>k__BackingField;
    [CompilerGeneratedAttribute]
private Subtitle2 <Subtitle2>k__BackingField;
    [CompilerGeneratedAttribute]
private Body1 <Body1>k__BackingField;
    [CompilerGeneratedAttribute]
private Body2 <Body2>k__BackingField;
    [CompilerGeneratedAttribute]
private Input <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Button <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Caption <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private Overline <Overline>k__BackingField;
    public Default Default { get; public set; }
    public H1 H1 { get; public set; }
    public H2 H2 { get; public set; }
    public H3 H3 { get; public set; }
    public H4 H4 { get; public set; }
    public H5 H5 { get; public set; }
    public H6 H6 { get; public set; }
    public Subtitle1 Subtitle1 { get; public set; }
    public Subtitle2 Subtitle2 { get; public set; }
    public Body1 Body1 { get; public set; }
    public Body2 Body2 { get; public set; }
    public Input Input { get; public set; }
    public Button Button { get; public set; }
    public Caption Caption { get; public set; }
    public Overline Overline { get; public set; }
    [CompilerGeneratedAttribute]
public Default get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Default value);
    [CompilerGeneratedAttribute]
public H1 get_H1();
    [CompilerGeneratedAttribute]
public void set_H1(H1 value);
    [CompilerGeneratedAttribute]
public H2 get_H2();
    [CompilerGeneratedAttribute]
public void set_H2(H2 value);
    [CompilerGeneratedAttribute]
public H3 get_H3();
    [CompilerGeneratedAttribute]
public void set_H3(H3 value);
    [CompilerGeneratedAttribute]
public H4 get_H4();
    [CompilerGeneratedAttribute]
public void set_H4(H4 value);
    [CompilerGeneratedAttribute]
public H5 get_H5();
    [CompilerGeneratedAttribute]
public void set_H5(H5 value);
    [CompilerGeneratedAttribute]
public H6 get_H6();
    [CompilerGeneratedAttribute]
public void set_H6(H6 value);
    [CompilerGeneratedAttribute]
public Subtitle1 get_Subtitle1();
    [CompilerGeneratedAttribute]
public void set_Subtitle1(Subtitle1 value);
    [CompilerGeneratedAttribute]
public Subtitle2 get_Subtitle2();
    [CompilerGeneratedAttribute]
public void set_Subtitle2(Subtitle2 value);
    [CompilerGeneratedAttribute]
public Body1 get_Body1();
    [CompilerGeneratedAttribute]
public void set_Body1(Body1 value);
    [CompilerGeneratedAttribute]
public Body2 get_Body2();
    [CompilerGeneratedAttribute]
public void set_Body2(Body2 value);
    [CompilerGeneratedAttribute]
public Input get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(Input value);
    [CompilerGeneratedAttribute]
public Button get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(Button value);
    [CompilerGeneratedAttribute]
public Caption get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(Caption value);
    [CompilerGeneratedAttribute]
public Overline get_Overline();
    [CompilerGeneratedAttribute]
public void set_Overline(Overline value);
}
[ExtensionAttribute]
public static class MudBlazor.TypoSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Typo mudEnum);
}
public enum MudBlazor.Underline : Enum {
    public int value__;
    [DescriptionAttribute("none")]
public static Underline None;
    [DescriptionAttribute("hover")]
public static Underline Hover;
    [DescriptionAttribute("always")]
public static Underline Always;
}
[ExtensionAttribute]
public static class MudBlazor.UnderlineSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Underline mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLockDictionary`1 : ConcurrentDictionary`2<TKey, AsyncKeyedLockReleaser`1<TKey>> {
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private AsyncKeyedLockPool`1<TKey> <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PoolingEnabled>k__BackingField;
    public int MaxCount { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal AsyncKeyedLockPool`1<TKey> Pool { get; }
    [MemberNotNullWhenAttribute("True", "Pool")]
internal bool PoolingEnabled { get; }
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options);
    public AsyncKeyedLockDictionary`1(IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLockDictionary`1(int concurrencyLevel, int capacity);
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity);
    public AsyncKeyedLockDictionary`1(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLockDictionary`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
internal AsyncKeyedLockPool`1<TKey> get_Pool();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Pool")]
internal bool get_PoolingEnabled();
    public AsyncKeyedLockReleaser`1<TKey> GetOrAdd(TKey key);
    public void Release(AsyncKeyedLockReleaser`1<TKey> releaser);
    public void ReleaseWithoutSemaphoreRelease(AsyncKeyedLockReleaser`1<TKey> releaser);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1 : object {
    internal AsyncKeyedLockDictionary`1<TKey> Dictionary;
    public IReadOnlyDictionary`2<TKey, AsyncKeyedLockReleaser`1<TKey>> Index { get; }
    public int MaxCount { get; }
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options);
    public AsyncKeyedLocker`1(IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(int concurrencyLevel, int capacity);
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options, int concurrencyLevel, int capacity);
    public AsyncKeyedLocker`1(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(AsyncKeyedLockOptions options, int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public AsyncKeyedLocker`1(Action`1<AsyncKeyedLockOptions> options, int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public IReadOnlyDictionary`2<TKey, AsyncKeyedLockReleaser`1<TKey>> get_Index();
    public int get_MaxCount();
    public AsyncKeyedLockReleaser`1<TKey> GetOrAdd(TKey key);
    private void Release(AsyncKeyedLockReleaser`1<TKey> releaser);
    private void ReleaseWithoutSemaphoreRelease(AsyncKeyedLockReleaser`1<TKey> releaser);
    public IDisposable Lock(TKey key);
    public IDisposable Lock(TKey key, CancellationToken cancellationToken);
    public IDisposable Lock(TKey key, int millisecondsTimeout, Boolean& entered);
    public IDisposable Lock(TKey key, TimeSpan timeout, Boolean& entered);
    public IDisposable Lock(TKey key, int millisecondsTimeout, CancellationToken cancellationToken, Boolean& entered);
    public IDisposable Lock(TKey key, TimeSpan timeout, CancellationToken cancellationToken, Boolean& entered);
    public bool TryLock(TKey key, Action action, int millisecondsTimeout);
    public bool TryLock(TKey key, Action action, TimeSpan timeout);
    public bool TryLock(TKey key, Action action, int millisecondsTimeout, CancellationToken cancellationToken);
    public bool TryLock(TKey key, Action action, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__30")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__31")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__32")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__33")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__34")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__35")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__36")]
public ValueTask`1<bool> TryLockAsync(TKey key, Action action, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<TryLockAsync>d__37")]
public ValueTask`1<bool> TryLockAsync(TKey key, Func`1<Task> task, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__38")]
public ValueTask`1<IDisposable> LockAsync(TKey key, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__39")]
public ValueTask`1<IDisposable> LockAsync(TKey key, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__40")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, int millisecondsTimeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__41")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, TimeSpan timeout, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__42")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, int millisecondsTimeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLocker`1/<LockAsync>d__43")]
public ValueTask`1<AsyncKeyedLockTimeoutReleaser`1<TKey>> LockAsync(TKey key, TimeSpan timeout, CancellationToken cancellationToken, bool continueOnCapturedContext);
    public bool IsInUse(TKey key);
    public int GetRemainingCount(TKey key);
    public int GetCurrentCount(TKey key);
    public sealed virtual void Dispose();
}
internal class MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLockOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolInitialFill>k__BackingField;
    public int MaxCount { get; public set; }
    public int PoolSize { get; public set; }
    public int PoolInitialFill { get; public set; }
    public AsyncKeyedLockOptions(int maxCount, int poolSize, int poolInitialFill);
    [CompilerGeneratedAttribute]
public int get_MaxCount();
    [CompilerGeneratedAttribute]
public void set_MaxCount(int value);
    [CompilerGeneratedAttribute]
public int get_PoolSize();
    [CompilerGeneratedAttribute]
public void set_PoolSize(int value);
    [CompilerGeneratedAttribute]
public int get_PoolInitialFill();
    [CompilerGeneratedAttribute]
public void set_PoolInitialFill(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLockPool`1 : object {
    private int _capacity;
    private IList`1<AsyncKeyedLockReleaser`1<TKey>> _objects;
    private Func`2<TKey, AsyncKeyedLockReleaser`1<TKey>> _objectGenerator;
    public AsyncKeyedLockPool`1(AsyncKeyedLockDictionary`1<TKey> asyncKeyedLockDictionary, int capacity, int initialFill);
    public sealed virtual void Dispose();
    public AsyncKeyedLockReleaser`1<TKey> GetObject(TKey key);
    public void PutObject(AsyncKeyedLockReleaser`1<TKey> item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLockReleaser`1 : object {
    private TKey _key;
    private int _referenceCount;
    private AsyncKeyedLockDictionary`1<TKey> _dictionary;
    [CompilerGeneratedAttribute]
private bool <IsNotInUse>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <SemaphoreSlim>k__BackingField;
    internal bool IsNotInUse { get; internal set; }
    public TKey Key { get; internal set; }
    public int ReferenceCount { get; internal set; }
    public SemaphoreSlim SemaphoreSlim { get; }
    internal AsyncKeyedLockReleaser`1(TKey key, SemaphoreSlim semaphoreSlim, AsyncKeyedLockDictionary`1<TKey> dictionary);
    [CompilerGeneratedAttribute]
internal bool get_IsNotInUse();
    [CompilerGeneratedAttribute]
internal void set_IsNotInUse(bool value);
    public TKey get_Key();
    internal void set_Key(TKey value);
    public int get_ReferenceCount();
    internal void set_ReferenceCount(int value);
    [CompilerGeneratedAttribute]
public SemaphoreSlim get_SemaphoreSlim();
    internal bool TryIncrement(TKey key);
    internal bool TryIncrementNoPooling();
    public sealed virtual void Dispose();
    internal void Dispose(bool enteredSemaphore);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.AsyncKeyedLock.AsyncKeyedLockTimeoutReleaser`1 : object {
    [CompilerGeneratedAttribute]
private bool <EnteredSemaphore>k__BackingField;
    internal AsyncKeyedLockReleaser`1<TKey> Releaser;
    public bool EnteredSemaphore { get; internal set; }
    internal AsyncKeyedLockTimeoutReleaser`1(bool enteredSemaphore, AsyncKeyedLockReleaser`1<TKey> releaser);
    [CompilerGeneratedAttribute]
public bool get_EnteredSemaphore();
    [CompilerGeneratedAttribute]
internal void set_EnteredSemaphore(bool value);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class MudBlazor.Utilities.Background.BackgroundWorkerBase : object {
    private Task _executeTask;
    private CancellationTokenSource _stoppingCts;
    public Task ExecuteTask { get; }
    public virtual Task get_ExecuteTask();
    [NullableContextAttribute("1")]
protected abstract virtual Task ExecuteAsync(CancellationToken stoppingToken);
    [NullableContextAttribute("1")]
public virtual Task StartAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.Utilities.Background.BackgroundWorkerBase/<StopAsync>d__6")]
public virtual Task StopAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.Background.Batch.BatchPeriodicQueue`1 : BackgroundWorkerBase {
    private ConcurrentQueue`1<T> _items;
    private PeriodicTimer _periodicTimer;
    private IBatchTimerHandler`1<T> _handler;
    public int Count { get; }
    public BatchPeriodicQueue`1(IBatchTimerHandler`1<T> handler, TimeSpan period);
    public void QueueItem(T item);
    public int get_Count();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("MudBlazor.Utilities.Background.Batch.BatchPeriodicQueue`1/<ExecuteAsync>d__8")]
protected virtual Task ExecuteAsync(CancellationToken stoppingToken);
    private Task OnBatchTimerElapsedAsync(CancellationToken stoppingToken);
}
[NullableContextAttribute("1")]
internal interface MudBlazor.Utilities.Background.Batch.IBatchTimerHandler`1 {
    public abstract virtual Task OnBatchTimerElapsedAsync(IReadOnlyCollection`1<TItems> items, CancellationToken stoppingToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Utilities.Clone.CloneableCloneStrategy`1 : object {
    public static ICloneStrategy`1<T> Instance;
    private static CloneableCloneStrategy`1();
    public sealed virtual T CloneObject(T item);
}
[NullableContextAttribute("1")]
public interface MudBlazor.Utilities.Clone.ICloneStrategy`1 {
    public abstract virtual T CloneObject(T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1 : object {
    public static ICloneStrategy`1<T> Instance;
    private static SystemTextJsonDeepCloneStrategy`1();
    [UnconditionalSuppressMessageAttribute("Trimming", "IL2026: Using member 'System.Text.Json.JsonSerializer.Deserialize<T>(string, System.Text.Json.JsonSerializerOptions?)' which has 'RequiresUnreferencedCodeAttribute' can break functionality when trimming application code. JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a JsonTypeInfo or JsonSerializerContext, or make sure all of the required types are preserved.")]
public sealed virtual T CloneObject(T item);
}
internal class MudBlazor.Utilities.CodeMessage : object {
    internal static string SerializationUnreferencedCodeMessage;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MudBlazor.Utilities.CssBuilder : ValueType {
    private StringBuilder _stringBuilder;
    public CssBuilder(string value);
    [NullableContextAttribute("1")]
public static CssBuilder Default(string value);
    public static CssBuilder Empty();
    public CssBuilder AddValue(string value);
    public CssBuilder AddClass(string value);
    public CssBuilder AddClass(string value, bool when);
    public CssBuilder AddClass(string value, Nullable`1<bool> when);
    public CssBuilder AddClass(string value, Func`1<bool> when);
    public CssBuilder AddClass(Func`1<string> value, bool when);
    public CssBuilder AddClass(Func`1<string> value, Func`1<bool> when);
    public CssBuilder AddClass(CssBuilder builder, bool when);
    public CssBuilder AddClass(CssBuilder builder, Func`1<bool> when);
    public CssBuilder AddClassFromAttributes(IReadOnlyDictionary`2<string, object> additionalAttributes);
    [NullableContextAttribute("1")]
public string Build();
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
private StringBuilder EnsureCreated();
}
internal class MudBlazor.Utilities.Debounce.DebounceDispatcher : object {
    private int _interval;
    [NullableAttribute("2")]
private CancellationTokenSource _cancellationTokenSource;
    public DebounceDispatcher(int interval);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MudBlazor.Utilities.Debounce.DebounceDispatcher/<DebounceAsync>d__3")]
public Task DebounceAsync(Func`1<Task> action, CancellationToken cancellationToken);
}
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.Utilities.Exceptions.GenericTypeMismatchException : Exception {
    public GenericTypeMismatchException(string parent, string child, Type t1, Type t2);
}
internal static class MudBlazor.Utilities.Expressions.ExpressionHasher : object {
    private static int NullHashCode;
    [NullableContextAttribute("2")]
public static int GetHashCode(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MudBlazor.Utilities.Expressions.PropertyPath : object {
    public static PropertyHolder Visit(Expression`1<Func`2<TSource, TResult>> expression);
}
public class MudBlazor.Utilities.FormFieldChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private IFormComponent <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public IFormComponent Field { get; public set; }
    public object NewValue { get; public set; }
    [CompilerGeneratedAttribute]
public IFormComponent get_Field();
    [CompilerGeneratedAttribute]
public void set_Field(IFormComponent value);
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Utilities.MudColor : object {
    private static double Epsilon;
    private Byte[] _valuesAsByte;
    [CompilerGeneratedAttribute]
private double <H>k__BackingField;
    [CompilerGeneratedAttribute]
private double <L>k__BackingField;
    [CompilerGeneratedAttribute]
private double <S>k__BackingField;
    [JsonIgnoreAttribute]
public string Value { get; }
    [JsonIgnoreAttribute]
public UInt32 UInt32 { get; }
    [JsonIncludeAttribute]
public byte R { get; }
    [JsonIncludeAttribute]
public byte G { get; }
    [JsonIncludeAttribute]
public byte B { get; }
    [JsonIncludeAttribute]
public byte A { get; }
    [JsonIgnoreAttribute]
public double APercentage { get; }
    [JsonIgnoreAttribute]
public double H { get; }
    [JsonIgnoreAttribute]
public double L { get; }
    [JsonIgnoreAttribute]
public double S { get; }
    protected MudColor(SerializationInfo info, StreamingContext context);
    public MudColor(double h, double s, double l, double a);
    public MudColor(double h, double s, double l, int a);
    [JsonConstructorAttribute]
public MudColor(byte r, byte g, byte b, byte a);
    public MudColor(UInt32 rgba);
    public MudColor(byte r, byte g, byte b, MudColor color);
    public MudColor(int r, int g, int b, double alpha);
    public MudColor(int r, int g, int b, int alpha);
    public MudColor(string value);
    public string get_Value();
    public UInt32 get_UInt32();
    public byte get_R();
    public byte get_G();
    public byte get_B();
    public byte get_A();
    public double get_APercentage();
    [CompilerGeneratedAttribute]
public double get_H();
    [CompilerGeneratedAttribute]
public double get_L();
    [CompilerGeneratedAttribute]
public double get_S();
    public MudColor SetH(double h);
    public MudColor SetS(double s);
    public MudColor SetL(double l);
    public MudColor SetR(int r);
    public MudColor SetG(int g);
    public MudColor SetB(int b);
    public MudColor SetAlpha(int a);
    public MudColor SetAlpha(double a);
    public MudColor ChangeLightness(double amount);
    public MudColor ColorLighten(double amount);
    public MudColor ColorDarken(double amount);
    public MudColor ColorRgbLighten();
    public MudColor ColorRgbDarken();
    public bool HslChanged(MudColor value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(MudColor other);
    [NullableContextAttribute("2")]
public static bool op_Equality(MudColor lhs, MudColor rhs);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(MudColorOutputFormats format);
    public static bool op_Inequality(MudColor lhs, MudColor rhs);
    public static MudColor op_Implicit(string input);
    public static string op_Explicit(MudColor color);
    public static UInt32 op_Explicit(MudColor mudColor);
    private byte GetByteFromValuePart(string input, int index);
    private static String[] SplitInputIntoParts(string value);
    [NullableContextAttribute("0")]
private ValueTuple`3<double, double, double> CalculateHsl();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum MudBlazor.Utilities.MudColorOutputFormats : Enum {
    public int value__;
    public static MudColorOutputFormats Hex;
    public static MudColorOutputFormats HexA;
    public static MudColorOutputFormats RGB;
    public static MudColorOutputFormats RGBA;
    public static MudColorOutputFormats ColorElements;
}
public class MudBlazor.Utilities.NaturalComparer : object {
    public sealed virtual int Compare(object x, object y);
    public static int CompareNatural(string strA, string strB);
    public static int CompareNatural(string strA, string strB, CultureInfo culture, CompareOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.ObserverManager.ObserverManager`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<TIdentity, ObserverEntry<TIdentity, TObserver>> _observers;
    private ILogger _log;
    public int Count { get; }
    public IDictionary`2<TIdentity, TObserver> Observers { get; }
    public ObserverManager`2(ILogger log);
    public int get_Count();
    public IDictionary`2<TIdentity, TObserver> get_Observers();
    public void Clear();
    public void Subscribe(TIdentity id, TObserver observer);
    public void Unsubscribe(TIdentity id);
    [AsyncStateMachineAttribute("MudBlazor.Utilities.ObserverManager.ObserverManager`2/<NotifyAsync>d__10")]
public Task NotifyAsync(Func`2<TObserver, Task> notification, Func`3<TIdentity, TObserver, bool> predicate);
    public sealed virtual IEnumerator`1<TObserver> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExcludeFromCodeCoverageAttribute]
public class MudBlazor.Utilities.RuntimeLocation : object {
    public static bool IsClientSide { get; }
    public static bool IsServerSide { get; }
    public static bool get_IsClientSide();
    public static bool get_IsServerSide();
}
[ExtensionAttribute]
public static class MudBlazor.Utilities.SortingAssistent : object {
    [ExtensionAttribute]
public static void UpdateOrder(IEnumerable`1<T> items, MudItemDropInfo`1<T> dropInfo, Expression`1<Func`2<T, int>> valueUpdater, int zoneOffset);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazor.Utilities.StyleBuilder : ValueType {
    [NullableAttribute("2")]
private StringBuilder _stringBuilder;
    public StyleBuilder(string prop, string value);
    public static StyleBuilder Default(string prop, string value);
    [NullableContextAttribute("2")]
public static StyleBuilder Default(string style);
    public static StyleBuilder Empty();
    [NullableContextAttribute("2")]
public StyleBuilder AddStyle(string style);
    [NullableContextAttribute("2")]
public StyleBuilder AddStyle(string style, bool when);
    [NullableContextAttribute("2")]
public StyleBuilder AddStyle(string style, Func`1<bool> when);
    [NullableContextAttribute("2")]
private StyleBuilder AddRaw(string style);
    private StyleBuilder AddRaw(char c);
    public StyleBuilder AddStyle(string prop, string value);
    public StyleBuilder AddStyle(string prop, string value, bool when);
    public StyleBuilder AddStyle(string prop, Func`1<string> value, bool when);
    [NullableContextAttribute("2")]
public StyleBuilder AddStyle(string prop, string value, Func`1<bool> when);
    public StyleBuilder AddStyle(string prop, Func`1<string> value, Func`1<bool> when);
    public StyleBuilder AddStyle(StyleBuilder builder);
    public StyleBuilder AddStyle(StyleBuilder builder, bool when);
    [NullableContextAttribute("2")]
public StyleBuilder AddStyle(StyleBuilder builder, Func`1<bool> when);
    public StyleBuilder AddStyle(string prop, Action`1<ValueBuilder> builder, bool when);
    public StyleBuilder AddStyleFromAttributes(IReadOnlyDictionary`2<string, object> additionalAttributes);
    public string Build();
    public virtual string ToString();
    private StringBuilder EnsureCreated();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MudBlazor.Utilities.Throttle.ThrottleDispatcher : object {
    private int _interval;
    private object _locker;
    private bool _delayAfterExecution;
    private bool _resetIntervalOnException;
    private bool _busy;
    [NullableAttribute("2")]
private Task _lastTask;
    private Nullable`1<DateTime> _invokeTime;
    public ThrottleDispatcher(int interval, bool delayAfterExecution, bool resetIntervalOnException);
    private bool ShouldWait();
    public Task ThrottleAsync(Func`1<Task> action, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ThrottleAsync>b__9_0(Task _);
    [CompilerGeneratedAttribute]
private void <ThrottleAsync>b__9_1(Task _, object _);
}
public class MudBlazor.Utilities.ValueBuilder : object {
    private string stringBuffer;
    public bool HasValue { get; }
    public bool get_HasValue();
    public ValueBuilder AddValue(string value, bool when);
    public ValueBuilder AddValue(Func`1<string> value, bool when);
    private ValueBuilder AddRaw(string style);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MudBlazor.Utilities.WebUnitsExtensions : object {
    [ExtensionAttribute]
public static string ToPx(int val);
    [ExtensionAttribute]
public static string ToPx(Nullable`1<int> val);
    [ExtensionAttribute]
public static string ToPx(long val);
    [ExtensionAttribute]
public static string ToPx(Nullable`1<long> val);
    [ExtensionAttribute]
public static string ToPx(double val);
    [ExtensionAttribute]
public static string ToPx(Nullable`1<double> val);
}
public enum MudBlazor.Variant : Enum {
    public int value__;
    [DescriptionAttribute("text")]
public static Variant Text;
    [DescriptionAttribute("filled")]
public static Variant Filled;
    [DescriptionAttribute("outlined")]
public static Variant Outlined;
}
[ExtensionAttribute]
public static class MudBlazor.VariantSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Variant mudEnum);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonSerializableAttribute("System.EventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.ChangeEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.ClipboardEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.DragEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.ErrorEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.FocusEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.KeyboardEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.MouseEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.PointerEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.ProgressEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.TouchEventArgs")]
[JsonSerializableAttribute("Microsoft.AspNetCore.Components.Web.WheelEventArgs")]
[GeneratedCodeAttribute("System.Text.Json.SourceGeneration", "7.0.10.26716")]
internal class MudBlazor.WebEventJsonContext : JsonSerializerContext {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<EventArgs> _EventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<object> _Object;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<ChangeEventArgs> _ChangeEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<string> _String;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<ClipboardEventArgs> _ClipboardEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<String[]> _StringArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<DataTransferItem> _DataTransferItem;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<DataTransferItem[]> _DataTransferItemArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<DataTransfer> _DataTransfer;
    [NullableAttribute("2")]
private JsonTypeInfo`1<long> _Int64;
    [NullableAttribute("2")]
private JsonTypeInfo`1<double> _Double;
    [NullableAttribute("2")]
private JsonTypeInfo`1<bool> _Boolean;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<DragEventArgs> _DragEventArgs;
    [NullableAttribute("2")]
private JsonTypeInfo`1<int> _Int32;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<ErrorEventArgs> _ErrorEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<FocusEventArgs> _FocusEventArgs;
    [NullableAttribute("2")]
private JsonTypeInfo`1<float> _Single;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<KeyboardEventArgs> _KeyboardEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<MouseEventArgs> _MouseEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<PointerEventArgs> _PointerEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<ProgressEventArgs> _ProgressEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TouchPoint> _TouchPoint;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TouchPoint[]> _TouchPointArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TouchEventArgs> _TouchEventArgs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<WheelEventArgs> _WheelEventArgs;
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <s_defaultOptions>k__BackingField;
    [NullableAttribute("2")]
private static WebEventJsonContext s_defaultContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonSerializerOptions <GeneratedSerializerOptions>k__BackingField;
    private static JsonEncodedText PropName_Type;
    private static JsonEncodedText PropName_DataTransfer;
    private static JsonEncodedText PropName_Detail;
    private static JsonEncodedText PropName_ScreenX;
    private static JsonEncodedText PropName_ScreenY;
    private static JsonEncodedText PropName_ClientX;
    private static JsonEncodedText PropName_ClientY;
    private static JsonEncodedText PropName_OffsetX;
    private static JsonEncodedText PropName_OffsetY;
    private static JsonEncodedText PropName_PageX;
    private static JsonEncodedText PropName_PageY;
    private static JsonEncodedText PropName_MovementX;
    private static JsonEncodedText PropName_MovementY;
    private static JsonEncodedText PropName_Button;
    private static JsonEncodedText PropName_Buttons;
    private static JsonEncodedText PropName_CtrlKey;
    private static JsonEncodedText PropName_ShiftKey;
    private static JsonEncodedText PropName_AltKey;
    private static JsonEncodedText PropName_MetaKey;
    private static JsonEncodedText PropName_DropEffect;
    private static JsonEncodedText PropName_EffectAllowed;
    private static JsonEncodedText PropName_Files;
    private static JsonEncodedText PropName_Items;
    private static JsonEncodedText PropName_Types;
    private static JsonEncodedText PropName_Kind;
    private static JsonEncodedText PropName_Message;
    private static JsonEncodedText PropName_Filename;
    private static JsonEncodedText PropName_Lineno;
    private static JsonEncodedText PropName_Colno;
    private static JsonEncodedText PropName_Key;
    private static JsonEncodedText PropName_Code;
    private static JsonEncodedText PropName_Location;
    private static JsonEncodedText PropName_Repeat;
    private static JsonEncodedText PropName_PointerId;
    private static JsonEncodedText PropName_Width;
    private static JsonEncodedText PropName_Height;
    private static JsonEncodedText PropName_Pressure;
    private static JsonEncodedText PropName_TiltX;
    private static JsonEncodedText PropName_TiltY;
    private static JsonEncodedText PropName_PointerType;
    private static JsonEncodedText PropName_IsPrimary;
    private static JsonEncodedText PropName_LengthComputable;
    private static JsonEncodedText PropName_Loaded;
    private static JsonEncodedText PropName_Total;
    private static JsonEncodedText PropName_Touches;
    private static JsonEncodedText PropName_TargetTouches;
    private static JsonEncodedText PropName_ChangedTouches;
    private static JsonEncodedText PropName_Identifier;
    private static JsonEncodedText PropName_DeltaX;
    private static JsonEncodedText PropName_DeltaY;
    private static JsonEncodedText PropName_DeltaZ;
    private static JsonEncodedText PropName_DeltaMode;
    public JsonTypeInfo`1<EventArgs> EventArgs { get; }
    public JsonTypeInfo`1<object> Object { get; }
    public JsonTypeInfo`1<ChangeEventArgs> ChangeEventArgs { get; }
    public JsonTypeInfo`1<string> String { get; }
    public JsonTypeInfo`1<ClipboardEventArgs> ClipboardEventArgs { get; }
    public JsonTypeInfo`1<String[]> StringArray { get; }
    public JsonTypeInfo`1<DataTransferItem> DataTransferItem { get; }
    public JsonTypeInfo`1<DataTransferItem[]> DataTransferItemArray { get; }
    public JsonTypeInfo`1<DataTransfer> DataTransfer { get; }
    public JsonTypeInfo`1<long> Int64 { get; }
    public JsonTypeInfo`1<double> Double { get; }
    public JsonTypeInfo`1<bool> Boolean { get; }
    public JsonTypeInfo`1<DragEventArgs> DragEventArgs { get; }
    public JsonTypeInfo`1<int> Int32 { get; }
    public JsonTypeInfo`1<ErrorEventArgs> ErrorEventArgs { get; }
    public JsonTypeInfo`1<FocusEventArgs> FocusEventArgs { get; }
    public JsonTypeInfo`1<float> Single { get; }
    public JsonTypeInfo`1<KeyboardEventArgs> KeyboardEventArgs { get; }
    public JsonTypeInfo`1<MouseEventArgs> MouseEventArgs { get; }
    public JsonTypeInfo`1<PointerEventArgs> PointerEventArgs { get; }
    public JsonTypeInfo`1<ProgressEventArgs> ProgressEventArgs { get; }
    public JsonTypeInfo`1<TouchPoint> TouchPoint { get; }
    public JsonTypeInfo`1<TouchPoint[]> TouchPointArray { get; }
    public JsonTypeInfo`1<TouchEventArgs> TouchEventArgs { get; }
    public JsonTypeInfo`1<WheelEventArgs> WheelEventArgs { get; }
    private static JsonSerializerOptions s_defaultOptions { get; }
    public static WebEventJsonContext Default { get; }
    [NullableAttribute("2")]
protected JsonSerializerOptions GeneratedSerializerOptions { get; }
    public WebEventJsonContext(JsonSerializerOptions options);
    private static WebEventJsonContext();
    public JsonTypeInfo`1<EventArgs> get_EventArgs();
    private JsonTypeInfo`1<EventArgs> Create_EventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] EventArgsPropInit(JsonSerializerOptions options);
    private void EventArgsSerializeHandler(Utf8JsonWriter writer, EventArgs value);
    public JsonTypeInfo`1<object> get_Object();
    private JsonTypeInfo`1<object> Create_Object(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<ChangeEventArgs> get_ChangeEventArgs();
    private JsonTypeInfo`1<ChangeEventArgs> Create_ChangeEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] ChangeEventArgsPropInit(JsonSerializerOptions options);
    public JsonTypeInfo`1<string> get_String();
    private JsonTypeInfo`1<string> Create_String(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<ClipboardEventArgs> get_ClipboardEventArgs();
    private JsonTypeInfo`1<ClipboardEventArgs> Create_ClipboardEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] ClipboardEventArgsPropInit(JsonSerializerOptions options);
    private void ClipboardEventArgsSerializeHandler(Utf8JsonWriter writer, ClipboardEventArgs value);
    public JsonTypeInfo`1<String[]> get_StringArray();
    private JsonTypeInfo`1<String[]> Create_StringArray(JsonSerializerOptions options, bool makeReadOnly);
    private void StringArraySerializeHandler(Utf8JsonWriter writer, String[] value);
    public JsonTypeInfo`1<DataTransferItem> get_DataTransferItem();
    private JsonTypeInfo`1<DataTransferItem> Create_DataTransferItem(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] DataTransferItemPropInit(JsonSerializerOptions options);
    private void DataTransferItemSerializeHandler(Utf8JsonWriter writer, DataTransferItem value);
    public JsonTypeInfo`1<DataTransferItem[]> get_DataTransferItemArray();
    private JsonTypeInfo`1<DataTransferItem[]> Create_DataTransferItemArray(JsonSerializerOptions options, bool makeReadOnly);
    private void DataTransferItemArraySerializeHandler(Utf8JsonWriter writer, DataTransferItem[] value);
    public JsonTypeInfo`1<DataTransfer> get_DataTransfer();
    private JsonTypeInfo`1<DataTransfer> Create_DataTransfer(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] DataTransferPropInit(JsonSerializerOptions options);
    private void DataTransferSerializeHandler(Utf8JsonWriter writer, DataTransfer value);
    public JsonTypeInfo`1<long> get_Int64();
    private JsonTypeInfo`1<long> Create_Int64(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<double> get_Double();
    private JsonTypeInfo`1<double> Create_Double(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<bool> get_Boolean();
    private JsonTypeInfo`1<bool> Create_Boolean(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<DragEventArgs> get_DragEventArgs();
    private JsonTypeInfo`1<DragEventArgs> Create_DragEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] DragEventArgsPropInit(JsonSerializerOptions options);
    private void DragEventArgsSerializeHandler(Utf8JsonWriter writer, DragEventArgs value);
    public JsonTypeInfo`1<int> get_Int32();
    private JsonTypeInfo`1<int> Create_Int32(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<ErrorEventArgs> get_ErrorEventArgs();
    private JsonTypeInfo`1<ErrorEventArgs> Create_ErrorEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] ErrorEventArgsPropInit(JsonSerializerOptions options);
    private void ErrorEventArgsSerializeHandler(Utf8JsonWriter writer, ErrorEventArgs value);
    public JsonTypeInfo`1<FocusEventArgs> get_FocusEventArgs();
    private JsonTypeInfo`1<FocusEventArgs> Create_FocusEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] FocusEventArgsPropInit(JsonSerializerOptions options);
    private void FocusEventArgsSerializeHandler(Utf8JsonWriter writer, FocusEventArgs value);
    public JsonTypeInfo`1<float> get_Single();
    private JsonTypeInfo`1<float> Create_Single(JsonSerializerOptions options, bool makeReadOnly);
    public JsonTypeInfo`1<KeyboardEventArgs> get_KeyboardEventArgs();
    private JsonTypeInfo`1<KeyboardEventArgs> Create_KeyboardEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] KeyboardEventArgsPropInit(JsonSerializerOptions options);
    private void KeyboardEventArgsSerializeHandler(Utf8JsonWriter writer, KeyboardEventArgs value);
    public JsonTypeInfo`1<MouseEventArgs> get_MouseEventArgs();
    private JsonTypeInfo`1<MouseEventArgs> Create_MouseEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] MouseEventArgsPropInit(JsonSerializerOptions options);
    private void MouseEventArgsSerializeHandler(Utf8JsonWriter writer, MouseEventArgs value);
    public JsonTypeInfo`1<PointerEventArgs> get_PointerEventArgs();
    private JsonTypeInfo`1<PointerEventArgs> Create_PointerEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] PointerEventArgsPropInit(JsonSerializerOptions options);
    private void PointerEventArgsSerializeHandler(Utf8JsonWriter writer, PointerEventArgs value);
    public JsonTypeInfo`1<ProgressEventArgs> get_ProgressEventArgs();
    private JsonTypeInfo`1<ProgressEventArgs> Create_ProgressEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] ProgressEventArgsPropInit(JsonSerializerOptions options);
    private void ProgressEventArgsSerializeHandler(Utf8JsonWriter writer, ProgressEventArgs value);
    public JsonTypeInfo`1<TouchPoint> get_TouchPoint();
    private JsonTypeInfo`1<TouchPoint> Create_TouchPoint(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] TouchPointPropInit(JsonSerializerOptions options);
    private void TouchPointSerializeHandler(Utf8JsonWriter writer, TouchPoint value);
    public JsonTypeInfo`1<TouchPoint[]> get_TouchPointArray();
    private JsonTypeInfo`1<TouchPoint[]> Create_TouchPointArray(JsonSerializerOptions options, bool makeReadOnly);
    private void TouchPointArraySerializeHandler(Utf8JsonWriter writer, TouchPoint[] value);
    public JsonTypeInfo`1<TouchEventArgs> get_TouchEventArgs();
    private JsonTypeInfo`1<TouchEventArgs> Create_TouchEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] TouchEventArgsPropInit(JsonSerializerOptions options);
    private void TouchEventArgsSerializeHandler(Utf8JsonWriter writer, TouchEventArgs value);
    public JsonTypeInfo`1<WheelEventArgs> get_WheelEventArgs();
    private JsonTypeInfo`1<WheelEventArgs> Create_WheelEventArgs(JsonSerializerOptions options, bool makeReadOnly);
    private static JsonPropertyInfo[] WheelEventArgsPropInit(JsonSerializerOptions options);
    private void WheelEventArgsSerializeHandler(Utf8JsonWriter writer, WheelEventArgs value);
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions get_s_defaultOptions();
    public static WebEventJsonContext get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual JsonSerializerOptions get_GeneratedSerializerOptions();
    private static JsonConverter GetRuntimeProvidedCustomConverter(JsonSerializerOptions options, Type type);
    public virtual JsonTypeInfo GetTypeInfo(Type type);
    private sealed virtual override JsonTypeInfo global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(Type type, JsonSerializerOptions options);
}
public enum MudBlazor.Width : Enum {
    public int value__;
    [DescriptionAttribute("xs")]
public static Width xs;
    [DescriptionAttribute("sm")]
public static Width sm;
    [DescriptionAttribute("md")]
public static Width md;
    [DescriptionAttribute("lg")]
public static Width lg;
    [DescriptionAttribute("xl")]
public static Width xl;
    [DescriptionAttribute("xxl")]
public static Width xxl;
    [DescriptionAttribute("false")]
public static Width False;
}
[ExtensionAttribute]
public static class MudBlazor.WidthSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Width mudEnum);
}
public enum MudBlazor.Wrap : Enum {
    public int value__;
    [DescriptionAttribute("nowrap")]
public static Wrap NoWrap;
    [DescriptionAttribute("wrap")]
public static Wrap Wrap;
    [DescriptionAttribute("wrap-reverse")]
public static Wrap WrapReverse;
}
[ExtensionAttribute]
public static class MudBlazor.WrapSourceGeneratorEnumExtensions : object {
    [ExtensionAttribute]
public static string ToDescriptionString(Wrap mudEnum);
}
public class MudBlazor.ZIndex : object {
    [CompilerGeneratedAttribute]
private int <Drawer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Popover>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AppBar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dialog>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Snackbar>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Tooltip>k__BackingField;
    public int Drawer { get; public set; }
    public int Popover { get; public set; }
    public int AppBar { get; public set; }
    public int Dialog { get; public set; }
    public int Snackbar { get; public set; }
    public int Tooltip { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Drawer();
    [CompilerGeneratedAttribute]
public void set_Drawer(int value);
    [CompilerGeneratedAttribute]
public int get_Popover();
    [CompilerGeneratedAttribute]
public void set_Popover(int value);
    [CompilerGeneratedAttribute]
public int get_AppBar();
    [CompilerGeneratedAttribute]
public void set_AppBar(int value);
    [CompilerGeneratedAttribute]
public int get_Dialog();
    [CompilerGeneratedAttribute]
public void set_Dialog(int value);
    [CompilerGeneratedAttribute]
public int get_Snackbar();
    [CompilerGeneratedAttribute]
public void set_Snackbar(int value);
    [CompilerGeneratedAttribute]
public int get_Tooltip();
    [CompilerGeneratedAttribute]
public void set_Tooltip(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MudBlazorFix.EditButtonContext : object {
    [CompilerGeneratedAttribute]
private Action <ButtonAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ButtonDisabled>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Item>k__BackingField;
    public Action ButtonAction { get; }
    public bool ButtonDisabled { get; }
    [NullableAttribute("2")]
public object Item { get; }
    public EditButtonContext(Action buttonAction, bool buttonDisabled, object item);
    [CompilerGeneratedAttribute]
public Action get_ButtonAction();
    [CompilerGeneratedAttribute]
public bool get_ButtonDisabled();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Item();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class StringExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(string value);
    [ExtensionAttribute]
public static bool IsNonEmpty(string value);
    [ExtensionAttribute]
public static string Trimmed(string value);
    [ExtensionAttribute]
public static string ToPercentage(decimal value);
    [ExtensionAttribute]
public static string ToJsString(string value);
    [ExtensionAttribute]
public static byte GetByteValue(string value, int index);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__AmPmRegularExpression_2 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__AmPmRegularExpression_2 Instance;
    private static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__AmPmRegularExpression_2();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__SlashContentRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__SlashContentRegex_0 Instance;
    private static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__SlashContentRegex_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__Utilities();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__ValidCharacterRegularExpression_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__ValidCharacterRegularExpression_1 Instance;
    private static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__ValidCharacterRegularExpression_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__ValidDigitRegularExpression_3 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__ValidDigitRegularExpression_3 Instance;
    private static <RegexGenerator_g>FE8469AB71AAB023BBF9A45C5DEF71F9F74D6EEE3BD0C67152D6D180FB3910F3B__ValidDigitRegularExpression_3();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Text.StringBuilderCache : object {
    private static int MaxBuilderSize;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder _cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
[ExtensionAttribute]
internal static class TimeSpanExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToIsoString(TimeSpan self, bool seconds, bool ms);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToIsoString(Nullable`1<TimeSpan> self, bool seconds, bool ms);
    [ExtensionAttribute]
public static int ToAmPmHour(TimeSpan time);
}
