public enum Murmur.AlgorithmPreference : Enum {
    public int value__;
    public static AlgorithmPreference Auto;
    public static AlgorithmPreference X64;
    public static AlgorithmPreference X86;
}
public enum Murmur.AlgorithmType : Enum {
    public int value__;
    public static AlgorithmType Murmur32;
    public static AlgorithmType Murmur128;
}
[ExtensionAttribute]
internal static class Murmur.Extensions : object {
    [ExtensionAttribute]
internal static UInt32 ToUInt32(Byte[] data, int start);
    [ExtensionAttribute]
internal static ulong ToUInt64(Byte[] data, int start);
    [ExtensionAttribute]
internal static UInt32 RotateLeft(UInt32 x, byte r);
    [ExtensionAttribute]
internal static ulong RotateLeft(ulong x, byte r);
    [ExtensionAttribute]
internal static UInt32 FMix(UInt32 h);
    [ExtensionAttribute]
internal static ulong FMix(ulong h);
}
public abstract class Murmur.Murmur128 : HashAlgorithm {
    private UInt32 _Seed;
    public UInt32 Seed { get; }
    public int HashSize { get; }
    protected Murmur128(UInt32 seed);
    public UInt32 get_Seed();
    public virtual int get_HashSize();
}
internal class Murmur.Murmur128ManagedX64 : Murmur128 {
    private static ulong C1;
    private static ulong C2;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <H1>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <H2>k__BackingField;
    private int Length { get; private set; }
    private ulong H1 { get; private set; }
    private ulong H2 { get; private set; }
    internal Murmur128ManagedX64(UInt32 seed);
    [CompilerGeneratedAttribute]
private int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [CompilerGeneratedAttribute]
private ulong get_H1();
    [CompilerGeneratedAttribute]
private void set_H1(ulong value);
    [CompilerGeneratedAttribute]
private ulong get_H2();
    [CompilerGeneratedAttribute]
private void set_H2(ulong value);
    private void Reset();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void Body(Byte[] data, int start, int length);
    private void Tail(Byte[] tail, int start, int remaining);
    protected virtual Byte[] HashFinal();
}
internal class Murmur.Murmur128ManagedX86 : Murmur128 {
    private static UInt32 C1;
    private static UInt32 C2;
    private static UInt32 C3;
    private static UInt32 C4;
    [CompilerGeneratedAttribute]
private UInt32 <H1>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <H2>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <H3>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <H4>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    private UInt32 H1 { get; private set; }
    private UInt32 H2 { get; private set; }
    private UInt32 H3 { get; private set; }
    private UInt32 H4 { get; private set; }
    private int Length { get; private set; }
    internal Murmur128ManagedX86(UInt32 seed);
    [CompilerGeneratedAttribute]
private UInt32 get_H1();
    [CompilerGeneratedAttribute]
private void set_H1(UInt32 value);
    [CompilerGeneratedAttribute]
private UInt32 get_H2();
    [CompilerGeneratedAttribute]
private void set_H2(UInt32 value);
    [CompilerGeneratedAttribute]
private UInt32 get_H3();
    [CompilerGeneratedAttribute]
private void set_H3(UInt32 value);
    [CompilerGeneratedAttribute]
private UInt32 get_H4();
    [CompilerGeneratedAttribute]
private void set_H4(UInt32 value);
    [CompilerGeneratedAttribute]
private int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    private void Reset();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void Body(Byte[] data, int start, int length);
    private void Tail(Byte[] tail, int position, int remainder);
    protected virtual Byte[] HashFinal();
}
internal class Murmur.Murmur128UnmanagedX64 : Murmur128 {
    private static ulong C1;
    private static ulong C2;
    [CompilerGeneratedAttribute]
private ulong <H1>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <H2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    private ulong H1 { get; private set; }
    private ulong H2 { get; private set; }
    private int Length { get; private set; }
    internal Murmur128UnmanagedX64(UInt32 seed);
    [CompilerGeneratedAttribute]
private ulong get_H1();
    [CompilerGeneratedAttribute]
private void set_H1(ulong value);
    [CompilerGeneratedAttribute]
private ulong get_H2();
    [CompilerGeneratedAttribute]
private void set_H2(ulong value);
    [CompilerGeneratedAttribute]
private int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    private void Reset();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void Body(Byte[] data, int start, int length);
    private void Tail(Byte* tail, int remaining);
    protected virtual Byte[] HashFinal();
}
internal class Murmur.Murmur128UnmanagedX86 : Murmur128 {
    private static UInt32 C1;
    private static UInt32 C2;
    private static UInt32 C3;
    private static UInt32 C4;
    [CompilerGeneratedAttribute]
private UInt32 <H1>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <H2>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <H3>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <H4>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    private UInt32 H1 { get; private set; }
    private UInt32 H2 { get; private set; }
    private UInt32 H3 { get; private set; }
    private UInt32 H4 { get; private set; }
    private int Length { get; private set; }
    internal Murmur128UnmanagedX86(UInt32 seed);
    [CompilerGeneratedAttribute]
private UInt32 get_H1();
    [CompilerGeneratedAttribute]
private void set_H1(UInt32 value);
    [CompilerGeneratedAttribute]
private UInt32 get_H2();
    [CompilerGeneratedAttribute]
private void set_H2(UInt32 value);
    [CompilerGeneratedAttribute]
private UInt32 get_H3();
    [CompilerGeneratedAttribute]
private void set_H3(UInt32 value);
    [CompilerGeneratedAttribute]
private UInt32 get_H4();
    [CompilerGeneratedAttribute]
private void set_H4(UInt32 value);
    [CompilerGeneratedAttribute]
private int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    private void Reset();
    public virtual void Initialize();
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void Body(Byte[] data, int start, int length);
    private void Tail(Byte* tail, int remainder);
    protected virtual Byte[] HashFinal();
}
public abstract class Murmur.Murmur32 : HashAlgorithm {
    protected static UInt32 C1;
    protected static UInt32 C2;
    private UInt32 _Seed;
    [CompilerGeneratedAttribute]
private UInt32 <H1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int HashSize { get; }
    public UInt32 Seed { get; }
    protected UInt32 H1 { get; protected set; }
    protected int Length { get; protected set; }
    protected Murmur32(UInt32 seed);
    public virtual int get_HashSize();
    public UInt32 get_Seed();
    [CompilerGeneratedAttribute]
protected UInt32 get_H1();
    [CompilerGeneratedAttribute]
protected void set_H1(UInt32 value);
    [CompilerGeneratedAttribute]
protected int get_Length();
    [CompilerGeneratedAttribute]
protected void set_Length(int value);
    private void Reset();
    public virtual void Initialize();
    protected virtual Byte[] HashFinal();
}
internal class Murmur.Murmur32ManagedX86 : Murmur32 {
    public Murmur32ManagedX86(UInt32 seed);
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void Body(Byte[] data, int start, int length);
    private void Tail(Byte[] tail, int position, int remainder);
}
internal class Murmur.Murmur32UnmanagedX86 : Murmur32 {
    public Murmur32UnmanagedX86(UInt32 seed);
    protected virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    private void Body(Byte[] data, int start, int length);
    private void Tail(Byte* tail, int remainder);
}
public static class Murmur.MurmurHash : object {
    public static Murmur32 Create32(UInt32 seed, bool managed);
    public static Murmur128 Create128(UInt32 seed, bool managed, AlgorithmPreference preference);
    private static HashAlgorithm Pick(UInt32 seed, AlgorithmPreference preference, Func`2<UInt32, T32> factory32, Func`2<UInt32, T64> factory64);
    private static bool Is64BitProcess();
}
