public class CustomTasks.BatchMergeXaml : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <RS1Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RS2Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RS3Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RS4Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RS5Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <N19H1Pages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostfixForGeneratedFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TlogReadFilesOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TlogWriteFilesOutputPath>k__BackingField;
    private List`1<string> filesWritten;
    private string postfixForPrefixedGeneratedFile;
    private string nextBaseFile;
    [RequiredAttribute]
public ITaskItem[] RS1Pages { get; public set; }
    [RequiredAttribute]
public ITaskItem[] RS2Pages { get; public set; }
    [RequiredAttribute]
public ITaskItem[] RS3Pages { get; public set; }
    [RequiredAttribute]
public ITaskItem[] RS4Pages { get; public set; }
    [RequiredAttribute]
public ITaskItem[] RS5Pages { get; public set; }
    [RequiredAttribute]
public ITaskItem[] N19H1Pages { get; public set; }
    [RequiredAttribute]
public string PostfixForGeneratedFile { get; public set; }
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    [RequiredAttribute]
public string TlogReadFilesOutputPath { get; public set; }
    [RequiredAttribute]
public string TlogWriteFilesOutputPath { get; public set; }
    [OutputAttribute]
public String[] FilesWritten { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RS1Pages();
    [CompilerGeneratedAttribute]
public void set_RS1Pages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RS2Pages();
    [CompilerGeneratedAttribute]
public void set_RS2Pages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RS3Pages();
    [CompilerGeneratedAttribute]
public void set_RS3Pages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RS4Pages();
    [CompilerGeneratedAttribute]
public void set_RS4Pages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RS5Pages();
    [CompilerGeneratedAttribute]
public void set_RS5Pages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_N19H1Pages();
    [CompilerGeneratedAttribute]
public void set_N19H1Pages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PostfixForGeneratedFile();
    [CompilerGeneratedAttribute]
public void set_PostfixForGeneratedFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_TlogReadFilesOutputPath();
    [CompilerGeneratedAttribute]
public void set_TlogReadFilesOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_TlogWriteFilesOutputPath();
    [CompilerGeneratedAttribute]
public void set_TlogWriteFilesOutputPath(string value);
    public String[] get_FilesWritten();
    private void ExecuteForTaskItems(ITaskItem[] items, string targetOSVersion);
    private void MergeAndGenerateXaml(MergedDictionary mergedDictionary, List`1<string> files, string targetOSVersion, int apiVersion);
    public virtual bool Execute();
}
public class CustomTasks.DependencyPropertyCodeGen : AppDomainIsolatedTask {
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <WinMDInput>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FilesWritten>k__BackingField;
    private List`1<string> _pendingFilesWritten;
    [RequiredAttribute]
public string OutputDirectory { get; public set; }
    [RequiredAttribute]
public String[] WinMDInput { get; public set; }
    [RequiredAttribute]
public String[] References { get; public set; }
    [OutputAttribute]
public String[] FilesWritten { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public String[] get_WinMDInput();
    [CompilerGeneratedAttribute]
public void set_WinMDInput(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_FilesWritten();
    [CompilerGeneratedAttribute]
public void set_FilesWritten(String[] value);
    public virtual bool Execute();
    private List`1<PropertyDefinition> CollectProperties(Type type);
    private PropertyDefinition CollectProperty(Type type, PropertyInfo dependencyProperty, string baseName, PropertyInfo instanceProperty);
    private List`1<EventDefinition> CollectEvents(Type type);
    private string CppInputModifier(Type type);
    private string CppName(Type type);
    private string EventFieldName(string name);
    private bool NeedsActivationFactory(Type type);
    private T GetAttributeValue(string name, MemberInfo[] members);
    private bool HasAttribute(string name, MemberInfo[] members);
    private Nullable`1<bool> NeedsPropertyChangedCallback(MemberInfo[] members);
    private bool NeedsDependencyPropertyField(MemberInfo[] members);
    private string GetPropertyChangedCallbackMethodName(MemberInfo[] members);
    private string GetPropertyValidationCallback(MemberInfo[] members);
    private string GetDefaultValue(MemberInfo[] members);
    private string GetPropertyTypeOverride(MemberInfo[] members);
    private string WriteHeader(TypeDefinition typeDefinition);
    private string WriteImplementation(TypeDefinition typeDefinition, List`1<TypeDefinition> allTypes);
    private static List`1<Type> GetTypes(string assemblyPath, IList`1<string> references);
    private void RewriteFileIfNecessary(string path, string contents);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <Execute>b__17_0(string x);
    [CompilerGeneratedAttribute]
private string <CppName>b__25_0(Type x);
}
public class CustomTasks.MergedDictionary : object {
    private static Dictionary`2<string, string> standardNameDictionary;
    private static string _conditionalXamlPattern;
    private XmlElement xmlElement;
    private XmlDocument owningDocument;
    private List`1<XmlNode> nodeList;
    private List`1<int> nodeListNodesToIgnore;
    private Dictionary`2<string, int> nodeKeyToNodeListIndexDictionary;
    private Dictionary`2<string, MergedDictionary> mergedThemeDictionaryByKeyDictionary;
    private List`1<string> namespaceList;
    private MergedDictionary parentDictionary;
    private MergedDictionary(XmlDocument document);
    private MergedDictionary(XmlDocument document, MergedDictionary parentDictionary);
    private static MergedDictionary();
    public static MergedDictionary CreateMergedDicionary();
    public virtual string ToString();
    public void MergeContent(string content);
    private void AddNamespace(string xmlnsString, string namespaceString);
    private void AddNode(XmlNode node, Dictionary`2<string, string> xmlnsReplacementDictionary);
    private XmlNode GetXaml();
    private static void ReplaceNamespacePrefix(XmlNode currentNode, Dictionary`2<string, string> xmlnsReplacementDictionary);
    private static string GetKey(XmlNode node);
    private static string GetStandardNamespace(string name, string value);
    private static void GenerateStandardNameSpaces(XmlDocument document, Dictionary`2<string, string> standardNamespaceDictionary, Dictionary`2<string, string> toBeReplacedDictionary);
    private void RemoveAncestorNodesWithKey(string key);
}
public class CustomTasks.RunPowershellScript : AppDomainIsolatedTask {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <FilesWritten>k__BackingField;
    private Regex errorInFileRegex;
    [RequiredAttribute]
public string Path { get; public set; }
    public string Parameters { get; public set; }
    public String[] FilesWritten { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
    [CompilerGeneratedAttribute]
public String[] get_FilesWritten();
    [CompilerGeneratedAttribute]
public void set_FilesWritten(String[] value);
    public virtual bool Execute();
}
internal class CustomTasks.StripNamespaces : object {
    public static Dictionary`2<string, int> universalApiContractVersionMapping;
    private static StripNamespaces();
    private static List`1<string> BuildNamespaceToBeRemoved(int apiVersion);
    private static List`1<string> BuildRegexPatternToBeReplaced();
    public static string StripNamespaceForAPIVersion(string content, int apiVersion);
    private static string StripNamespace(string xml, List`1<string> namespaceToBeRemoved);
}
internal class CustomTasks.Utils : object {
    public static string UnEscapeAmpersand(string s);
    public static string EscapeAmpersand(string s);
    public static string DocumentToString(Action`1<XmlWriter> action);
    public static string RewriteFileIfNecessary(string path, string contents);
}
