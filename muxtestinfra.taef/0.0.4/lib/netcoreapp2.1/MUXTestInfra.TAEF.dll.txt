public enum Common.DeviceType : Enum {
    public int value__;
    public static DeviceType Desktop;
    public static DeviceType Phone;
    public static DeviceType OneCore;
}
public enum Common.OSVersion : Enum {
    public ushort value__;
    public static OSVersion Threshold2;
    public static OSVersion Redstone1;
    public static OSVersion Redstone2;
    public static OSVersion Redstone3;
    public static OSVersion Redstone4;
    public static OSVersion Redstone5;
    public static OSVersion NineteenH1;
}
public class Common.PlatformConfiguration : object {
    private static OSVersion MaxOSVersion;
    private static ushort InvalidAPIVersion;
    private static ushort _currentAPIVersion;
    private static PlatformConfiguration();
    private static bool IsApiContractPresent(ushort version);
    public static ushort GetCurrentAPIVersion();
    public static bool IsDevice(DeviceType type);
    public static bool IsOsVersion(OSVersion version);
    public static bool IsOsVersionGreaterThan(OSVersion version);
    public static bool IsOsVersionGreaterThanOrEqual(OSVersion version);
    public static bool IsOSVersionLessThan(OSVersion version);
    public static bool IsDebugBuildConfiguration();
}
[ExtensionAttribute]
public static class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.AppsTestExtensions : object {
    [ExtensionAttribute]
public static void SelectItemByName(ComboBox comboBox, string name);
    [ExtensionAttribute]
public static void SelectItemById(ComboBox comboBox, string id);
    [ExtensionAttribute]
public static void InvokeAndWait(Button button, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static void InvokeAndWait(MenuItem menuItem, Nullable`1<TimeSpan> timeout);
    [ExtensionAttribute]
public static void ToggleAndWait(ToggleButton toggleButton);
    [ExtensionAttribute]
public static void SetValueAndWait(Edit edit, string s);
    [ExtensionAttribute]
public static void InvokeAndWait(SplitButton splitButton);
    [ExtensionAttribute]
public static void ExpandAndWait(SplitButton splitButton);
    [ExtensionAttribute]
public static void CollapseAndWait(SplitButton splitButton);
    [ExtensionAttribute]
public static string GetIdentifier(UIObject obj);
    [ExtensionAttribute]
public static string GetDescription(UIObject obj);
    [ExtensionAttribute]
public static string GetText(UIObject textControl, bool shouldTrim);
    [ExtensionAttribute]
public static string GetTextSelection(UIObject textControl, bool shouldTrim);
}
public enum Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.Direction : Enum {
    public int value__;
    public static Direction North;
    public static Direction NorthEast;
    public static Direction East;
    public static Direction SouthEast;
    public static Direction South;
    public static Direction SouthWest;
    public static Direction West;
    public static Direction NorthWest;
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ElementCache : object {
    private static Dictionary`2<string, UIObject> objectFromIdCache;
    private static Dictionary`2<string, UIObject> objectFromNameCache;
    private static Dictionary`2<string, UIObject> objectFromClassNameCache;
    private static ElementCache();
    public static UIObject TryGetObjectById(string id, bool shouldWait);
    public static UIObject TryGetObjectByName(string name, bool shouldWait);
    public static UIObject TryGetObjectByNameOrId(string nameOrId, bool shouldWait);
    public static UIObject TryGetObjectByClassName(string className, bool shouldWait);
    private static UIObject TryGetObject(string key, Dictionary`2<string, UIObject> dictionary, Action`1<string> waitAction);
    private static UIObject TryGetObject(string key, List`1<Dictionary`2<string, UIObject>> dictionaries, Action`1<string> waitAction);
    public static void Clear();
    public static void Refresh();
    public static void Dump();
    private static void DumpDictionary(Dictionary`2<string, UIObject> dictionary);
}
public enum Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.FindBy : Enum {
    public int value__;
    public static FindBy Id;
    public static FindBy Name;
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.FindCore : object {
    public static UIObject ById(string id, bool shouldWait);
    public static UIObject ByName(string name, bool shouldWait);
    public static UIObject ByNameOrId(string nameOrId, bool shouldWait);
    public static UIObject ByClassName(string className, bool shouldWait);
    public static UIObject ByNameAndClassName(string name, string className, bool shouldWait);
    public static UIObject ByNameAndClassName(UIObject root, string name, string className, bool shouldWait);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.FindElement : object {
    public static UIObject ById(string id);
    public static UIObject ByName(string name);
    public static UIObject ByNameOrId(string nameOrId);
    public static UIObject ByClassName(string className);
    public static UIObject ByNameAndClassName(string name, string className);
    public static T ById(string id);
    public static T ByName(string name);
    public static T ByNameOrId(string name);
}
public static class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.FocusHelper : object {
    public static void SetFocus(UIObject control);
}
public enum Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.GamepadButton : Enum {
    public int value__;
    public static GamepadButton A;
    public static GamepadButton B;
    public static GamepadButton X;
    public static GamepadButton Y;
    public static GamepadButton RightShoulder;
    public static GamepadButton LeftShoulder;
    public static GamepadButton LeftTrigger;
    public static GamepadButton RightTrigger;
    public static GamepadButton DPadUp;
    public static GamepadButton DPadDown;
    public static GamepadButton DPadLeft;
    public static GamepadButton DPadRight;
    public static GamepadButton Menu;
    public static GamepadButton View;
    public static GamepadButton LeftThumbstickButton;
    public static GamepadButton RightThumbstick;
    public static GamepadButton LeftThumbstickUp;
    public static GamepadButton LeftThumbstickDown;
    public static GamepadButton LeftThumbstickRight;
    public static GamepadButton LeftThumbstickLeft;
    public static GamepadButton RightThumbstickUp;
    public static GamepadButton RightThumbstickDown;
    public static GamepadButton RightThumbstickRight;
    public static GamepadButton RightThumbstickLeft;
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.GamepadHelper : object {
    public static void PressButton(UIObject obj, GamepadButton button);
}
public static class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.InputHelper : object {
    public static UInt32 DefaultPanHoldDuration;
    public static float DefaultPanAcceleration;
    public static UInt32 DefaultDragDuration;
    public static void LeftClick(UIObject obj);
    public static void LeftClick(UIObject obj, double offsetX, double offsetY);
    public static void RightClick(UIObject obj, int offsetX, int offsetY);
    public static void RotateWheel(UIObject obj, int mouseWheelDelta);
    public static void LeftMouseButtonDown(UIObject obj, int offsetX, int offsetY);
    public static void LeftMouseButtonUp(UIObject obj, int offsetX, int offsetY);
    public static void MoveMouse(UIObject obj, int offsetX, int offsetY);
    public static void TapAndHold(UIObject obj, double offsetX, double offsetY, UInt32 durationMs);
    public static void Tap(UIObject obj);
    public static void Tap(UIObject obj, double offsetX, double offsetY);
    public static void TapAndHold(UIObject obj, UInt32 durationMs);
    public static void Pan(UIObject obj, int distance, Direction direction, UInt32 holdDuration, float panAcceleration, UInt32 dragDuration, bool waitForIdle);
    public static void Pan(UIObject obj, Point start, int distance, Direction direction, UInt32 holdDuration, float panAcceleration, UInt32 dragDuration, bool waitForIdle);
    public static void Pan(UIObject obj, Point start, Point end, UInt32 holdDuration, float panAcceleration, UInt32 dragDuration, bool waitForIdle);
    public static void DragToTarget(UIObject obj, UIObject obj2);
    public static void DragDistance(UIObject obj, int distance, Direction direction, UInt32 duration);
    public static void Flick(UIObject obj, int distance, Direction direction);
    public static void Pinch(UIObject obj);
    public static void Pinch(UIObject obj, UInt32 distance, Direction direction, bool pivot);
    public static void Stretch(UIObject obj);
    public static void Stretch(UIObject obj, UInt32 distance, Direction direction, bool pivot);
    private static float DirectionToAngle(Direction direction);
    private static Waiter GetWaiterForInputEvent(UIObject obj, InputEvent inputEvent);
    public static void ScrollToElement(UIObject uiObject);
}
public enum Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.Key : Enum {
    public int value__;
    public static Key Enter;
    public static Key Escape;
    public static Key Tab;
    public static Key Up;
    public static Key Down;
    public static Key Left;
    public static Key Right;
    public static Key PageUp;
    public static Key PageDown;
    public static Key Home;
    public static Key End;
    public static Key Space;
    public static Key Backspace;
    public static Key F10;
    public static Key F4;
    public static Key F6;
    public static Key R;
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.KeyboardHelper : object {
    private static Dictionary`2<Key, string> keyToKeyStringDictionary;
    private static KeyboardHelper();
    private static string ApplyModifierKey(string keyStrokes, ModifierKey key);
    public static void PressKey(Key key, ModifierKey modifierKey, UInt32 numPresses);
    public static void PressKeySequence(Key[] keys);
    public static string GetPressDownModifierKeyStroke(ModifierKey modifierKey);
    public static void PressDownModifierKey(ModifierKey modifierKey);
    public static string GetReleaseModifierKeyStroke(ModifierKey modifierKey);
    public static void ReleaseModifierKey(ModifierKey modifierKey);
    public static void PressKey(UIObject obj, Key key, ModifierKey modifierKey, UInt32 numPresses, bool useDebugMode);
    public static void HoldKeyMilliSeconds(Key key, UInt32 milliseconds, ModifierKey modifierKey, bool useDebugMode);
    public static void EnterText(Edit edit, string s, bool useKeyboard);
    private static Waiter GetWaiterForKeyEvent(UIObject obj, Key key);
}
[FlagsAttribute]
public enum Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ModifierKey : Enum {
    public int value__;
    public static ModifierKey None;
    public static ModifierKey Shift;
    public static ModifierKey Control;
    public static ModifierKey Alt;
    public static ModifierKey Windows;
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ScrollChangedEventWaiter : UIEventWaiter {
    private ScrollProperty scrollProperty;
    private UIObject root;
    private double expectedDoubleValue;
    private Nullable`1<bool> expectedBoolValue;
    public ScrollChangedEventWaiter(IScroll root, ScrollProperty scrollProperty, double expectedValue);
    public ScrollChangedEventWaiter(IScroll root, ScrollProperty scrollProperty, Nullable`1<bool> expectedValue);
    public virtual string ToString();
    protected virtual void OnNotify(WaiterEventArgs e);
}
public static class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ScrollHelper : object {
    public static void ScrollHorizontally(ScrollPresenter scrollPresenter, ScrollAmount amount);
    public static void ScrollVertically(ScrollPresenter scrollPresenter, ScrollAmount amount);
    public static void Scroll(ScrollPresenter scrollPresenter, ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public static void SetHorizontalScrollPercent(ScrollPresenter scrollPresenter, double horizontalPercent);
    public static void SetVerticalScrollPercent(ScrollPresenter scrollPresenter, double verticalPercent);
    public static void SetScrollPercent(ScrollPresenter scrollPresenter, double horizontalPercent, double verticalPercent);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ScrollPresenter : UIObject {
    private IScroll _scrollPattern;
    private static IFactory`1<ScrollPresenter> _factory;
    public static IFactory`1<ScrollPresenter> Factory { get; }
    public bool HorizontallyScrollable { get; }
    public bool VerticallyScrollable { get; }
    public double HorizontalScrollPercent { get; }
    public double VerticalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public double VerticalViewSize { get; }
    public ScrollPresenter(UIObject uiObject);
    private void Initialize();
    public ScrollChangedEventWaiter GetScrollChangedWaiter(ScrollProperty scrollProperty, Nullable`1<bool> expectedValue);
    public ScrollChangedEventWaiter GetScrollChangedWaiter(ScrollProperty scrollProperty, double expectedValue);
    public static IFactory`1<ScrollPresenter> get_Factory();
    public virtual bool get_HorizontallyScrollable();
    public virtual bool get_VerticallyScrollable();
    public virtual double get_HorizontalScrollPercent();
    public virtual double get_VerticalScrollPercent();
    public virtual double get_HorizontalViewSize();
    public virtual double get_VerticalViewSize();
    public virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public virtual void ScrollHorizontal(ScrollAmount amount);
    public virtual void ScrollVertical(ScrollAmount amount);
    public virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
}
public enum Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ScrollProperty : Enum {
    public int value__;
    public static ScrollProperty HorizontallyScrollable;
    public static ScrollProperty HorizontalScrollPercent;
    public static ScrollProperty HorizontalViewSize;
    public static ScrollProperty VerticallyScrollable;
    public static ScrollProperty VerticalScrollPercent;
    public static ScrollProperty VerticalViewSize;
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.TestHelpers : object {
    private static bool s_systemTabbedShellIsEnabledCached;
    private static bool s_systemTabbedShellIsEnabled;
    public static bool SystemTabbedShellIsEnabled { get; }
    private static int DwmGetUnmetTabRequirements(IntPtr hwnd, Int32& requirements);
    public static bool get_SystemTabbedShellIsEnabled();
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.TryFindElement : object {
    public static UIObject ById(string id);
    public static UIObject ByName(string name);
    public static UIObject ByNameOrId(string nameOrId);
    public static UIObject ByClassName(string className);
    public static UIObject ByNameAndClassName(string name, string className);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.ValueChangedEventWaiter : UIEventWaiter {
    private UIObject root;
    private string expectedValue;
    public ValueChangedEventWaiter(IValue root, string expectedValue);
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.VerifyElement : object {
    public static void Found(string idOrName, FindBy findBy);
    public static void NotFound(string idOrName, FindBy findBy);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Common.Wait : object {
    private static Button waitForIdleInvokerButton;
    private static CheckBox idleStateEnteredCheckBox;
    private static Edit errorReportingTextBox;
    private static Edit logReportingTextBox;
    private static bool isRetrying;
    private static bool isRS2OrHigher;
    private static bool isRS2OrHigherInitialized;
    public static void RetryUntilEvalFuncSuccessOrTimeout(Func`1<bool> retryEvalFunc, int retryTimoutByMilliseconds);
    public static void ForSeconds(UInt32 time);
    public static void ForMilliseconds(UInt32 time);
    public static void ForIdle(bool findElementsIfNull);
    public static bool ForScrollChanged(ScrollPresenter scrollPresenter, ScrollProperty scrollProperty);
    public static void ForAppDebugger();
    internal static void InitializeWaitHelper();
    internal static void ResetIdleHelper();
    private static bool IsRS2OrHigher();
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.Application : object {
    private string _packageName;
    private string _packageFamilyName;
    private string _appName;
    private string _appWindowTitle;
    private string _appProcessName;
    private string _appInstallerName;
    private bool _isUWPApp;
    private string _certSerialNumber;
    private string _baseAppxDir;
    private UICondition _windowCondition;
    private UICondition _appFrameWindowCondition;
    [CompilerGeneratedAttribute]
private UIObject <CoreWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private UIObject <ApplicationFrameWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    public UIObject CoreWindow { get; private set; }
    public UIObject ApplicationFrameWindow { get; private set; }
    public Process Process { get; private set; }
    public IntPtr Hwnd { get; }
    public Application(string packageName, string packageFamilyName, string appName, string testAppMainWindowTitle, string testAppProcessName, string testAppInstallerName, string certSerialNumber, string baseAppxDir, bool isUWPApp);
    [CompilerGeneratedAttribute]
public UIObject get_CoreWindow();
    [CompilerGeneratedAttribute]
private void set_CoreWindow(UIObject value);
    [CompilerGeneratedAttribute]
public UIObject get_ApplicationFrameWindow();
    [CompilerGeneratedAttribute]
private void set_ApplicationFrameWindow(UIObject value);
    [CompilerGeneratedAttribute]
public Process get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(Process value);
    public IntPtr get_Hwnd();
    internal void Initialize(bool doLaunch, string deploymentDir);
    private UIObject Launch(string deploymentDir);
    private UIObject LaunchApp();
    private UIObject LaunchUWPApp();
    private UIObject LaunchNonUWPApp(string packageName);
    public void Close();
    private void EnsureApplicationProcessHasExited(int appWindowsProccessId);
    private int GetProcessIdFromAppWindow();
    private bool CloseAppWindowWithCloseButton();
    private static bool KillProcessAndWaitForExit(Process process);
    private static bool WaitForWindowToClose(UICondition topWindowCondition);
    public void GoBack();
    private UICondition CreateTopLevelWindowCondition();
    private void LogDumpTree();
    private string UIObjectToLoggableString(UIObject obj);
}
public static class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.DumpHelper : object {
    public static void DumpFullContext();
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.LocalizationHelper : object {
    public static void CompareStringSets(IList`1<string> englishStrings, IList`1<string> otherLanguageStrings);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.TestAppCrashDetector : object {
    public sealed virtual void SinkEvent(WaiterEventArgs eventArgs);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.TestAppInstallHelper : object {
    private static HashSet`1<string> TestAppxInstalled;
    private static TestAppInstallHelper();
    public static void InstallTestAppIfNeeded(string deploymentDir, string packageName, string packageFamilyName, string appInstallerName);
    public static void InstallCert(string certFilePath);
    public static void InstallAppxCert(string deploymentDir, string certFileName);
    public static void EnableSideloadingApps();
    [CompilerGeneratedAttribute]
internal static FileInfo <InstallTestAppIfNeeded>g__FirstFileWithExtension|1_0(String[] extensions, <>c__DisplayClass1_0& );
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.TestApplicationInfo : object {
    [CompilerGeneratedAttribute]
private string <TestAppPackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAppPackageFamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAppMainWindowTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstallerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUwpApp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertSerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseAppxDir>k__BackingField;
    private static string MUXCertSerialNumber;
    public string TestAppPackageName { get; private set; }
    public string TestAppName { get; private set; }
    public string TestAppPackageFamilyName { get; private set; }
    public string TestAppMainWindowTitle { get; private set; }
    public string ProcessName { get; private set; }
    public string InstallerName { get; private set; }
    public bool IsUwpApp { get; private set; }
    public string CertSerialNumber { get; private set; }
    public string BaseAppxDir { get; private set; }
    private static string MUXBaseAppxDir { get; }
    public static TestApplicationInfo MUXControlsTestApp { get; }
    public static TestApplicationInfo NugetPackageTestApp { get; }
    public static TestApplicationInfo AppThatUsesMUXIndirectly { get; }
    public static TestApplicationInfo MUXControlsTestAppWPFPackage { get; }
    public static TestApplicationInfo NugetPackageTestAppCX { get; }
    public TestApplicationInfo(string testAppPackageName, string testAppName, string testAppPackageFamilyName, string certSerialNumber, string baseAppxDir);
    public TestApplicationInfo(string testAppPackageName, string testAppName, string testAppPackageFamilyName, string testAppMainWindowTitle, string processName, string installerName, string certSerialNumber, string baseAppxDir);
    public TestApplicationInfo(string testAppPackageName, string testAppName, string testAppPackageFamilyName, string testAppMainWindowTitle, string processName, string installerName, bool isUwpApp, string certSerialNumber, string baseAppxDir);
    [CompilerGeneratedAttribute]
public string get_TestAppPackageName();
    [CompilerGeneratedAttribute]
private void set_TestAppPackageName(string value);
    [CompilerGeneratedAttribute]
public string get_TestAppName();
    [CompilerGeneratedAttribute]
private void set_TestAppName(string value);
    [CompilerGeneratedAttribute]
public string get_TestAppPackageFamilyName();
    [CompilerGeneratedAttribute]
private void set_TestAppPackageFamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_TestAppMainWindowTitle();
    [CompilerGeneratedAttribute]
private void set_TestAppMainWindowTitle(string value);
    [CompilerGeneratedAttribute]
public string get_ProcessName();
    [CompilerGeneratedAttribute]
private void set_ProcessName(string value);
    [CompilerGeneratedAttribute]
public string get_InstallerName();
    [CompilerGeneratedAttribute]
private void set_InstallerName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsUwpApp();
    [CompilerGeneratedAttribute]
private void set_IsUwpApp(bool value);
    [CompilerGeneratedAttribute]
public string get_CertSerialNumber();
    [CompilerGeneratedAttribute]
private void set_CertSerialNumber(string value);
    [CompilerGeneratedAttribute]
public string get_BaseAppxDir();
    [CompilerGeneratedAttribute]
private void set_BaseAppxDir(string value);
    private static string get_MUXBaseAppxDir();
    public static TestApplicationInfo get_MUXControlsTestApp();
    public static TestApplicationInfo get_NugetPackageTestApp();
    public static TestApplicationInfo get_AppThatUsesMUXIndirectly();
    public static TestApplicationInfo get_MUXControlsTestAppWPFPackage();
    public static TestApplicationInfo get_NugetPackageTestAppCX();
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.TestCleanupHelper : object {
    [CompilerGeneratedAttribute]
private static int <TestSetupHelperPendingDisposals>k__BackingField;
    public static int TestSetupHelperPendingDisposals { get; public set; }
    [CompilerGeneratedAttribute]
public static int get_TestSetupHelperPendingDisposals();
    [CompilerGeneratedAttribute]
public static void set_TestSetupHelperPendingDisposals(int value);
    public static void Cleanup();
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.TestEnvironment : object {
    [CompilerGeneratedAttribute]
private static TestContext <TestContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsLogVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsLogSuperVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private static Application <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ShouldRestartApplication>k__BackingField;
    private static UIntPtr DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE;
    private static UIntPtr DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2;
    public static TestContext TestContext { get; private set; }
    public static bool IsLogVerbose { get; private set; }
    public static bool IsLogSuperVerbose { get; private set; }
    public static Application Application { get; private set; }
    public static bool ShouldRestartApplication { get; public set; }
    private static TestEnvironment();
    [CompilerGeneratedAttribute]
public static TestContext get_TestContext();
    [CompilerGeneratedAttribute]
private static void set_TestContext(TestContext value);
    [CompilerGeneratedAttribute]
public static bool get_IsLogVerbose();
    [CompilerGeneratedAttribute]
private static void set_IsLogVerbose(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsLogSuperVerbose();
    [CompilerGeneratedAttribute]
private static void set_IsLogSuperVerbose(bool value);
    [CompilerGeneratedAttribute]
public static Application get_Application();
    [CompilerGeneratedAttribute]
private static void set_Application(Application value);
    [CompilerGeneratedAttribute]
public static bool get_ShouldRestartApplication();
    [CompilerGeneratedAttribute]
public static void set_ShouldRestartApplication(bool value);
    public static void LogVerbose(string format, Object[] args);
    public static void LogSuperVerbose(string format, Object[] args);
    public static void AssemblyInitialize(TestContext testContext, string certFileName);
    public static void AssemblyCleanup();
    public static void AssemblyCleanupWorker(TestApplicationInfo testAppInfo);
    private static Application CreateApplication(TestApplicationInfo info);
    public static void Initialize(TestContext testContext);
    public static void Initialize(TestContext testContext, TestApplicationInfo testAppInfo);
    public static void LogDumpTree(UIObject root);
    public static void WaitUntilElementLoadedById(string automationId);
    public static void WaitUntilElementLoadedByName(string name);
    public static void WaitUntilElementLoadedByNameOrId(string nameOrId);
    public static void WaitUntilElementLoadedByClassName(string className);
    private static void WaitUntilElementLoaded(string key, ElementKeyType keyType);
    private static void LogDumpTreeWorker(string indent, UIObject current);
    public static void VerifyAreEqualWithRetry(int maxRetries, Func`1<object> expectedFunc, Func`1<object> actualFunc, Action retryAction);
    private static int SetProcessDpiAwarenessContext(UIntPtr value);
}
public class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.TestSetupHelper : object {
    private int OpenedTestPages;
    [CompilerGeneratedAttribute]
private TestSetupHelperOptions <Options>k__BackingField;
    private TestSetupHelperOptions Options { get; private set; }
    public TestSetupHelper(string testName, TestSetupHelperOptions options);
    public TestSetupHelper(ICollection`1<string> testNames, TestSetupHelperOptions options, bool shouldRestrictInnerFrameSize);
    [CompilerGeneratedAttribute]
private TestSetupHelperOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(TestSetupHelperOptions value);
    private void PreTestSetup();
    private bool TestSingleRun(ICollection`1<string> testNames, bool shouldRestrictInnerFrameSize);
    public static void GoBack();
    public virtual void Dispose();
}
public static class Windows.UI.Xaml.Tests.MUXControls.InteractionTests.Infra.WarningReportHelper : object {
    public static void Record(string warning, List`1<string> traces);
}
