[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Mvp.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Arg_NullOrEmpty { get; }
    internal static string AttributeOrNamespaceInIncludeLocationError { get; }
    internal static string CircularInclusion { get; }
    internal static string CircularInclusionLong { get; }
    internal static string CircumflexCharMustBeEscaped { get; }
    internal static string CustomXmlResolverError { get; }
    internal static string CustomXmlResolverReturnedNull { get; }
    internal static string CustomXmlResolverReturnedUnsupportedType { get; }
    internal static string EmptyElementSchemeXPointer { get; }
    internal static string FallbackNotChildOfInclude { get; }
    internal static string FallbackNotChildOfIncludeLong { get; }
    internal static string FatalResourceException { get; }
    internal static string FragmentIDInHref { get; }
    internal static string IncludeChildOfInclude { get; }
    internal static string IncludeChildOfIncludeLong { get; }
    internal static string IndexingXPathNavigator_KeyArgumentNotString { get; }
    internal static string IndexingXPathNavigator_KeyWrongArguments { get; }
    internal static string IntradocumentReferencesNotSupported { get; }
    internal static string InvalidCharForAccept { get; }
    internal static string InvalidNameToken { get; }
    internal static string InvalidToken { get; }
    internal static string InvalidTokenAfterShorthandPointer { get; }
    internal static string InvalidTokenInElementSchemeWhileClosingRoundBracketExpected { get; }
    internal static string InvalidTokenInElementSchemeWhileNumberExpected { get; }
    internal static string InvalidTokenInXmlnsSchemeWhileEqualsSignExpected { get; }
    internal static string InvalidTokenInXmlnsSchemeWhileNCNameExpected { get; }
    internal static string InvalidURI { get; }
    internal static string IOErrorWhileFetchingResource { get; }
    internal static string MalformedXInclusionResult { get; }
    internal static string MissingHrefAndXpointerException { get; }
    internal static string MissingHrefAndXpointerExceptionLong { get; }
    internal static string NonXmlCharacter { get; }
    internal static string NoSubresourcesIdentifiedException { get; }
    internal static string NotSupportedEncoding { get; }
    internal static string NullXPointer { get; }
    internal static string OutOfMemoryWhileFetchingResource { get; }
    internal static string ResourceError { get; }
    internal static string SecurityException { get; }
    internal static string SyntaxErrorInXmlnsSchemeData { get; }
    internal static string SyntaxErrorInXPath1SchemeData { get; }
    internal static string SyntaxErrorInXPointerSchemeData { get; }
    internal static string TwoFallbacks { get; }
    internal static string TwoFallbacksLong { get; }
    internal static string UndeclaredPrefix { get; }
    internal static string UnexpectedEndOfSchemeData { get; }
    internal static string UnknownParseAttrValue { get; }
    internal static string UnknownParseAttrValueLong { get; }
    internal static string UnknownXIncludeElement { get; }
    internal static string UnresolvableURI { get; }
    internal static string URISchemaNotSupported { get; }
    internal static string Xml_MissingRoot { get; }
    internal static string XmlDocumentFactory_NotImplementedDOM { get; }
    internal static string XmlFragmentStream_EOF { get; }
    internal static string XmlNodeListFactory_IHasXmlNodeMissing { get; }
    internal static string XPathCache_BadSortObject { get; }
    internal static string XPathNavigatorIterator_CantAddAfterMove { get; }
    internal static string ZeroIndexInElementSchemechildSequence { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Arg_NullOrEmpty();
    internal static string get_AttributeOrNamespaceInIncludeLocationError();
    internal static string get_CircularInclusion();
    internal static string get_CircularInclusionLong();
    internal static string get_CircumflexCharMustBeEscaped();
    internal static string get_CustomXmlResolverError();
    internal static string get_CustomXmlResolverReturnedNull();
    internal static string get_CustomXmlResolverReturnedUnsupportedType();
    internal static string get_EmptyElementSchemeXPointer();
    internal static string get_FallbackNotChildOfInclude();
    internal static string get_FallbackNotChildOfIncludeLong();
    internal static string get_FatalResourceException();
    internal static string get_FragmentIDInHref();
    internal static string get_IncludeChildOfInclude();
    internal static string get_IncludeChildOfIncludeLong();
    internal static string get_IndexingXPathNavigator_KeyArgumentNotString();
    internal static string get_IndexingXPathNavigator_KeyWrongArguments();
    internal static string get_IntradocumentReferencesNotSupported();
    internal static string get_InvalidCharForAccept();
    internal static string get_InvalidNameToken();
    internal static string get_InvalidToken();
    internal static string get_InvalidTokenAfterShorthandPointer();
    internal static string get_InvalidTokenInElementSchemeWhileClosingRoundBracketExpected();
    internal static string get_InvalidTokenInElementSchemeWhileNumberExpected();
    internal static string get_InvalidTokenInXmlnsSchemeWhileEqualsSignExpected();
    internal static string get_InvalidTokenInXmlnsSchemeWhileNCNameExpected();
    internal static string get_InvalidURI();
    internal static string get_IOErrorWhileFetchingResource();
    internal static string get_MalformedXInclusionResult();
    internal static string get_MissingHrefAndXpointerException();
    internal static string get_MissingHrefAndXpointerExceptionLong();
    internal static string get_NonXmlCharacter();
    internal static string get_NoSubresourcesIdentifiedException();
    internal static string get_NotSupportedEncoding();
    internal static string get_NullXPointer();
    internal static string get_OutOfMemoryWhileFetchingResource();
    internal static string get_ResourceError();
    internal static string get_SecurityException();
    internal static string get_SyntaxErrorInXmlnsSchemeData();
    internal static string get_SyntaxErrorInXPath1SchemeData();
    internal static string get_SyntaxErrorInXPointerSchemeData();
    internal static string get_TwoFallbacks();
    internal static string get_TwoFallbacksLong();
    internal static string get_UndeclaredPrefix();
    internal static string get_UnexpectedEndOfSchemeData();
    internal static string get_UnknownParseAttrValue();
    internal static string get_UnknownParseAttrValueLong();
    internal static string get_UnknownXIncludeElement();
    internal static string get_UnresolvableURI();
    internal static string get_URISchemaNotSupported();
    internal static string get_Xml_MissingRoot();
    internal static string get_XmlDocumentFactory_NotImplementedDOM();
    internal static string get_XmlFragmentStream_EOF();
    internal static string get_XmlNodeListFactory_IHasXmlNodeMissing();
    internal static string get_XPathCache_BadSortObject();
    internal static string get_XPathNavigatorIterator_CantAddAfterMove();
    internal static string get_ZeroIndexInElementSchemechildSequence();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.Common.Xsl.CharacterMap : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<char, string> <Map>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReferencedCharacterMaps>k__BackingField;
    public Dictionary`2<char, string> Map { get; }
    public String[] ReferencedCharacterMaps { get; public set; }
    public void AddMapping(char character, string replace);
    [CompilerGeneratedAttribute]
public Dictionary`2<char, string> get_Map();
    [CompilerGeneratedAttribute]
public String[] get_ReferencedCharacterMaps();
    [CompilerGeneratedAttribute]
public void set_ReferencedCharacterMaps(String[] value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.Common.Xsl.CharacterMapping : object {
    private Dictionary`2<string, CharacterMap> maps;
    public void AddCharacterMap(string name, CharacterMap map);
    public Dictionary`2<char, string> Compile(List`1<string> charMapsToBeUsed);
    private void CompileMap(string mapName, Dictionary`2<char, string> compiledMap, Stack`1<string> mapStack);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.CharacterMappingXmlReader : XmlWrappingReader {
    private CharacterMapping mapping;
    private string nxsltNamespace;
    private string characterMapTag;
    private string nameTag;
    private string outputCharacterTag;
    private string characterTag;
    private string stringTag;
    private string outputTag;
    private string useCharacterMapsTag;
    private List`1<string> useCharacterMaps;
    private string currMapName;
    private CharacterMap currMap;
    public CharacterMappingXmlReader(XmlReader baseReader);
    public virtual bool Read();
    public Dictionary`2<char, string> CompileCharacterMapping();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.CharacterMappingXmlWriter : XmlWrappingWriter {
    private Dictionary`2<char, string> mapping;
    private CharacterMappingXmlReader reader;
    public CharacterMappingXmlWriter(XmlWriter baseWriter, Dictionary`2<char, string> mapping);
    public CharacterMappingXmlWriter(CharacterMappingXmlReader reader, XmlWriter baseWriter);
    public virtual void WriteString(string text);
    private void FlushBuffer(StringBuilder buf);
}
internal class Mvp.Xml.Common.Xsl.DefaultXmlResolver : XmlUrlResolver {
}
[NullableContextAttribute("1")]
public interface Mvp.Xml.Common.Xsl.IXmlTransform {
    public XmlWriterSettings OutputSettings { get; }
    public abstract virtual XmlOutput Transform(XmlInput defaulDocument, XsltArgumentList args, XmlOutput output);
    public abstract virtual XmlWriterSettings get_OutputSettings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.MvpXslTransform : object {
    private object sync;
    private ExsltFunctionNamespace supportedFunctions;
    private Dictionary`2<char, string> characterMap;
    [CompilerGeneratedAttribute]
private bool <MultiOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnforceXHTMLOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportCharacterMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private XslCompiledTransform <CompiledTransform>k__BackingField;
    protected static XmlReaderSettings DefaultReaderSettings;
    public ExsltFunctionNamespace SupportedFunctions { get; public set; }
    public bool MultiOutput { get; public set; }
    public bool EnforceXHTMLOutput { get; public set; }
    public bool SupportCharacterMaps { get; public set; }
    public XmlWriterSettings OutputSettings { get; }
    internal XslCompiledTransform CompiledTransform { get; }
    public MvpXslTransform(bool debug);
    private static MvpXslTransform();
    public void Load(IXPathNavigable stylesheet);
    public void Load(string stylesheetUri);
    public void Load(XmlReader stylesheet);
    public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(string stylesheetUri, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void set_SupportedFunctions(ExsltFunctionNamespace value);
    public ExsltFunctionNamespace get_SupportedFunctions();
    [CompilerGeneratedAttribute]
public bool get_MultiOutput();
    [CompilerGeneratedAttribute]
public void set_MultiOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnforceXHTMLOutput();
    [CompilerGeneratedAttribute]
public void set_EnforceXHTMLOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportCharacterMaps();
    [CompilerGeneratedAttribute]
public void set_SupportCharacterMaps(bool value);
    public sealed virtual XmlOutput Transform(XmlInput input, XsltArgumentList arguments, XmlOutput output);
    public sealed virtual XmlWriterSettings get_OutputSettings();
    public XmlReader Transform(XmlInput input, XsltArgumentList arguments);
    public XmlReader Transform(XmlInput input, XsltArgumentList arguments, bool multiThread, int initialBufferSize);
    [CompilerGeneratedAttribute]
internal XslCompiledTransform get_CompiledTransform();
    protected XmlReaderSettings GetReaderSettings(XmlInput defaultDocument);
    protected void TransformToWriter(XmlInput defaultDocument, XsltArgumentList xsltArgs, XmlWriter targetWriter);
    protected void TransformIxPathNavigable(IXPathNavigable nav, XsltArgumentList args, XmlWriter xmlWriter, XmlResolver resolver);
    protected void LoadStylesheetFromReader(XmlReader reader);
    protected void LoadStylesheetFromReader(XmlReader reader, XsltSettings settings, XmlResolver resolver);
    protected XsltArgumentList AddExsltExtensionObjectsSync(XsltArgumentList list);
    public static XsltArgumentList AddExsltExtensionObjects(XsltArgumentList list);
    public static XsltArgumentList AddExsltExtensionObjects(XsltArgumentList list, ExsltFunctionNamespace supportedFunctions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.OutputResolver : XmlUrlResolver {
    private Uri baseUri;
    public OutputResolver(string baseUri);
    public virtual Uri ResolveUri(Uri _, string relativeUri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.XmlInput : object {
    internal object Source;
    internal XmlResolver Resolver;
    public XmlInput(XmlReader reader, XmlResolver resolver);
    public XmlInput(TextReader reader, XmlResolver resolver);
    public XmlInput(Stream stream, XmlResolver resolver);
    public XmlInput(string uri, XmlResolver resolver);
    public XmlInput(IXPathNavigable nav, XmlResolver resolver);
    public XmlInput(XmlReader reader);
    public XmlInput(TextReader reader);
    public XmlInput(Stream stream);
    public XmlInput(string uri);
    public XmlInput(IXPathNavigable nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.XmlOutput : object {
    internal object Destination;
    [CompilerGeneratedAttribute]
private XmlResolver <XmlResolver>k__BackingField;
    public XmlResolver XmlResolver { get; public set; }
    public XmlOutput(XmlWriter writer);
    public XmlOutput(TextWriter writer);
    public XmlOutput(Stream stream);
    public XmlOutput(string uri);
    [CompilerGeneratedAttribute]
public XmlResolver get_XmlResolver();
    [CompilerGeneratedAttribute]
public void set_XmlResolver(XmlResolver value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Common.Xsl.XslReader : XmlReader {
    private static XmlReaderSettings readerSettings;
    private static string nsXml;
    private static string nsXmlNs;
    private static int defaultBufferSize;
    private XmlNameTable nameTable;
    private TokenPipe pipe;
    private BufferWriter writer;
    private ScopeManager scope;
    private Thread thread;
    private bool multiThread;
    private XmlInput defaulDocument;
    private XsltArgumentList arguments;
    [CompilerGeneratedAttribute]
private XslCompiledTransform <XslCompiledTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InitialBufferSize>k__BackingField;
    private int attOffset;
    private int attCount;
    private int depth;
    private XmlNodeType nodeType;
    private ReadState readState;
    private QName qname;
    private string value;
    private static Char[] qnameSeparator;
    private IPrincipal principal;
    public XslCompiledTransform XslCompiledTransform { get; public set; }
    public int InitialBufferSize { get; public set; }
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public XmlNameTable NameTable { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public XmlNodeType NodeType { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public ReadState ReadState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    private static XslReader();
    public XslReader(XslCompiledTransform xslTransform, bool multiThread, int initialBufferSize);
    public XslReader(XslCompiledTransform xslTransform);
    public XmlReader StartTransform(XmlInput input, XsltArgumentList args);
    private void Start();
    private void StartTransform();
    [CompilerGeneratedAttribute]
public XslCompiledTransform get_XslCompiledTransform();
    [CompilerGeneratedAttribute]
public void set_XslCompiledTransform(XslCompiledTransform value);
    [CompilerGeneratedAttribute]
public int get_InitialBufferSize();
    [CompilerGeneratedAttribute]
public void set_InitialBufferSize(int value);
    private void SetUndefinedState(ReadState readState);
    private static bool IsWhitespace(string s);
    public virtual bool Read();
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual XmlNameTable get_NameTable();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual XmlNodeType get_NodeType();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual ReadState get_ReadState();
    public virtual void Close();
    public virtual string GetAttribute(int i);
    private int FindAttribute(string name);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string ns);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToAttribute(string name);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name, string ns);
    private bool IsInsideElement();
    private void ChangeDepthToElement();
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    private static bool RefEquals(string strA, string strB);
    private static bool RefEquals(QName qnA, QName qnB);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.Exslt.AuxExslt : object {
    public static bool FindNode(List`1<XPathNavigator> arNodes1, List`1<DocPair> arDocs, XPathNavigator currNode);
    public static void FindDocs(List`1<XPathNavigator> arNodes, List`1<DocPair> arDocs);
}
internal class Mvp.Xml.Exslt.DocPair : object {
    [CompilerGeneratedAttribute]
private int <First>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    public int First { get; }
    public int Second { get; }
    public DocPair(int first, int second);
    [CompilerGeneratedAttribute]
public int get_First();
    [CompilerGeneratedAttribute]
public int get_Second();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltContext : XsltContext {
    private XmlNameTable nt;
    private ExsltFunctionNamespace supportedFunctions;
    private ExsltMath exsltMath;
    private ExsltDatesAndTimes exsltDatesAndTimes;
    private ExsltRegularExpressions exsltRegularExpressions;
    private ExsltStrings exsltStrings;
    private ExsltSets exsltSets;
    private ExsltRandom exsltRandom;
    private GdnDatesAndTimes gdnDatesAndTimes;
    private GdnRegularExpressions gdnRegularExpressions;
    private GdnMath gdnMath;
    private GdnSets gdnSets;
    private GdnStrings gdnStrings;
    private GdnDynamic gdnDynamic;
    public ExsltFunctionNamespace SupportedFunctions { get; public set; }
    public bool Whitespace { get; }
    public ExsltContext(XmlNameTable nt);
    public ExsltContext(NameTable nt, ExsltFunctionNamespace supportedFunctions);
    private void AddExtensionNamespaces();
    public void set_SupportedFunctions(ExsltFunctionNamespace value);
    public ExsltFunctionNamespace get_SupportedFunctions();
    public virtual int CompareDocument(string baseUri, string nextbaseUri);
    public virtual bool PreserveWhitespace(XPathNavigator node);
    public virtual bool get_Whitespace();
    public virtual IXsltContextVariable ResolveVariable(string prefix, string name);
    public virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes);
    private ExsltContextFunction GetExtensionFunctionImplementation(object obj, string name, XPathResultType[] argTypes);
    public static XPathResultType ConvertToXPathType(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.Exslt.ExsltContextFunction : object {
    private MethodInfo method;
    private XPathResultType[] argTypes;
    private object ownerObj;
    public int Minargs { get; }
    public int Maxargs { get; }
    public XPathResultType[] ArgTypes { get; }
    public XPathResultType ReturnType { get; }
    public ExsltContextFunction(MethodInfo mi, XPathResultType[] argTypes, object owner);
    public sealed virtual int get_Minargs();
    public sealed virtual int get_Maxargs();
    public sealed virtual XPathResultType[] get_ArgTypes();
    public sealed virtual XPathResultType get_ReturnType();
    public sealed virtual object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltDatesAndTimes : object {
    private String[] dayAbbrevs;
    private String[] dayNames;
    private String[] monthAbbrevs;
    private String[] monthNames;
    public string DateTime();
    public string date-time();
    public string DateTime(string s);
    public string date-time(string d);
    internal string DateTimeImpl(DateTimeTz dtz);
    public string Date();
    public string date();
    public string Date(string d);
    public string date(string d);
    public string Time();
    public string time();
    public string Time(string d);
    public string time(string d);
    public double Year();
    public double year();
    public double Year(string d);
    public double year(string d);
    private static bool IsLeapYear(int year);
    public bool LeapYear();
    public bool leap-year();
    public bool LeapYear(string d);
    public bool leap-year(string d);
    public double MonthInYear();
    public double month-in-year();
    public double MonthInYear(string d);
    public double month-in-year(string d);
    private double WeekInYear(DateTime d);
    public double WeekInYear();
    public double week-in-year();
    public double WeekInYear(string d);
    public double week-in-year(string d);
    private double WeekInMonth(DateTime d);
    public double WeekInMonth();
    public double week-in-month();
    public double WeekInMonth(string d);
    public double week-in-month(string d);
    public double DayInYear();
    public double day-in-year();
    public double DayInYear(string d);
    public double day-in-year(string d);
    public double DayInWeek();
    public double day-in-week();
    public double DayInWeek(string d);
    public double day-in-week(string d);
    public double DayInMonth();
    public double day-in-month();
    public double DayInMonth(string d);
    public double day-in-month(string d);
    private double DayOfWeekInMonth(int day);
    public double DayOfWeekInMonth();
    public double day-of-week-in-month();
    public double DayOfWeekInMonth(string d);
    public double day-of-week-in-month(string d);
    public double HourInDay();
    public double hour-in-day();
    public double HourInDay(string d);
    public double hour-in-day(string d);
    public double MinuteInHour();
    public double minute-in-hour();
    public double MinuteInHour(string d);
    public double minute-in-hour(string d);
    public double SecondInMinute();
    public double second-in-minute();
    public double SecondInMinute(string d);
    public double second-in-minute(string d);
    private string DayName(int dow);
    public string DayName();
    public string day-name();
    public string DayName(string d);
    public string day-name(string d);
    private string DayAbbreviation(int dow);
    public string DayAbbreviation();
    public string day-abbreviation();
    public string DayAbbreviation(string d);
    public string day-abbreviation(string d);
    private string MonthName(int month);
    public string MonthName();
    public string month-name();
    public string MonthName(string d);
    public string month-name(string d);
    private string MonthAbbreviation(int month);
    public string MonthAbbreviation();
    public string month-abbreviation();
    public string MonthAbbreviation(string d);
    public string month-abbreviation(string d);
    public string FormatDate(string d, string format);
    public string format-date(string d, string format);
    public string ParseDate(string d, string format);
    public string parse-date(string d, string format);
    public string Difference(string start, string end);
    public string difference(string start, string end);
    public string Add(string datetime, string duration);
    public string add(string datetime, string duration);
    public string AddDuration(string duration1, string duration2);
    public string add-duration(string duration1, string duration2);
    private double Seconds(ExsltDateTime d);
    public double Seconds();
    public double seconds();
    public double Seconds(string datetime);
    public double seconds(string datetime);
    public string Sum(XPathNodeIterator iterator);
    public string sum(XPathNodeIterator iterator);
    public string Duration();
    public string duration();
    public string Duration(double seconds);
    public string duration(double seconds);
}
[FlagsAttribute]
public enum Mvp.Xml.Exslt.ExsltFunctionNamespace : Enum {
    public int value__;
    public static ExsltFunctionNamespace None;
    public static ExsltFunctionNamespace DatesAndTimes;
    public static ExsltFunctionNamespace Math;
    public static ExsltFunctionNamespace RegularExpressions;
    public static ExsltFunctionNamespace Sets;
    public static ExsltFunctionNamespace Strings;
    public static ExsltFunctionNamespace GdnDatesAndTimes;
    public static ExsltFunctionNamespace GdnSets;
    public static ExsltFunctionNamespace GdnMath;
    public static ExsltFunctionNamespace GdnRegularExpressions;
    public static ExsltFunctionNamespace GdnStrings;
    public static ExsltFunctionNamespace Random;
    public static ExsltFunctionNamespace GdnDynamic;
    public static ExsltFunctionNamespace AllExslt;
    public static ExsltFunctionNamespace All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltMath : object {
    public double Min(XPathNodeIterator iterator);
    public double min(XPathNodeIterator iterator);
    public double Max(XPathNodeIterator iterator);
    public double max(XPathNodeIterator iterator);
    public XPathNodeIterator Highest(XPathNodeIterator iterator);
    public XPathNodeIterator highest(XPathNodeIterator iterator);
    public XPathNodeIterator Lowest(XPathNodeIterator iterator);
    public XPathNodeIterator lowest(XPathNodeIterator iterator);
    public double Abs(double number);
    public double abs(double number);
    public double Sqrt(double number);
    public double sqrt(double number);
    public double Power(double x, double y);
    public double power(double x, double y);
    public double Log(double x);
    public double log(double x);
    public double Constant(string c, double precision);
    public double constant(string c, double precision);
    public double Random();
    public double random();
    public double Sin(double x);
    public double sin(double x);
    public double Asin(double x);
    public double asin(double x);
    public double Cos(double x);
    public double cos(double x);
    public double Acos(double x);
    public double acos(double x);
    public double Tan(double x);
    public double tan(double x);
    public double Atan(double x);
    public double atan(double x);
    public double Atan2(double x, double y);
    public double atan2(double x, double y);
    public double Exp(double x);
    public double exp(double x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mvp.Xml.Exslt.ExsltNamespaces : object {
    public static string DatesAndTimes;
    public static string Math;
    public static string Random;
    public static string RegularExpressions;
    public static string Sets;
    public static string Strings;
    public static string GdnDatesAndTimes;
    public static string GdnMath;
    public static string GdnRegularExpressions;
    public static string GdnSets;
    public static string GdnStrings;
    public static string GdnDynamic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltRandom : object {
    public XPathNodeIterator randomSequence();
    public XPathNodeIterator random-sequence();
    public XPathNodeIterator randomSequence(double number);
    public XPathNodeIterator random-sequence(double number);
    public XPathNodeIterator randomSequence(double number, double seed);
    public XPathNodeIterator random-sequence(double number, double seed);
    private XPathNodeIterator randomSequenceImpl(double number, int seed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltRegularExpressions : object {
    public bool Test(string str, string regexp);
    public bool test(string str, string regexp);
    public bool Test(string str, string regexp, string flags);
    public bool test(string str, string regexp, string flags);
    public XPathNodeIterator Match(string str, string regexp);
    public XPathNodeIterator match(string str, string regexp);
    public XPathNodeIterator Match(string str, string regexp, string flags);
    public XPathNodeIterator match(string str, string regexp, string flags);
    public string Replace(string input, string regexp, string flags, string replacement);
    public string replace(string input, string regexp, string flags, string replacement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltSets : object {
    public XPathNodeIterator Difference(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator difference(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    private XPathNodeIterator Difference2(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator Distinct(XPathNodeIterator nodeset);
    public XPathNodeIterator distinct(XPathNodeIterator nodeset);
    private XPathNodeIterator Distinct2(XPathNodeIterator nodeset);
    public bool HasSameNode(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    private bool HasSameNode2(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public bool has-same-node(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator Intersection(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator intersection(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    private XPathNodeIterator Intersection3(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator Leading(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator leading(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator Trailing(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public XPathNodeIterator trailing(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.ExsltStrings : object {
    private static Char[] hexdigit;
    private static ExsltStrings();
    public XPathNodeIterator Tokenize(string str, string delimiters);
    public XPathNodeIterator tokenize(string str, string delimiters);
    public XPathNodeIterator Tokenize(string str);
    public XPathNodeIterator tokenize(string str);
    public string Replace(string str, string oldValue, string newValue);
    public string replace(string str, string oldValue, string newValue);
    public string Padding(int number);
    public string padding(int number);
    public string Padding(int number, string s);
    public string padding(int number, string s);
    public XPathNodeIterator Split(string str);
    public XPathNodeIterator split(string str);
    public XPathNodeIterator Split(string str, string delimiter);
    public XPathNodeIterator split(string str, string delimiter);
    public string Concat(XPathNodeIterator nodeset);
    public string concat(XPathNodeIterator nodeset);
    public string Align(string str, string padding, string alignment);
    public string align(string str, string padding, string alignment);
    public string Align(string str, string padding);
    public string align(string str, string padding);
    public string EncodeUri(string str, bool encodeReserved);
    public string encode-uri(string str, bool encodeReserved);
    public string EncodeUri(string str, bool encodeReserved, string encoding);
    public string encode-uri(string str, bool encodeReserved, string encoding);
    private string EncodeUriImpl(string str, bool encodeReserved, Encoding enc);
    private void EncodeChar(StringBuilder res, Encoding enc, Char[] str, int index);
    private bool IsHexDigit(char c);
    public string DecodeUri(string str);
    public string decode-uri(string str);
    public string DecodeUri(string str, string encoding);
    public string decode-uri(string str, string encoding);
    private string DecodeUriImpl(string str, Encoding enc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This class has been deprecated. Please use Mvp.Xml.Common.Xsl.MvpXslTransform instead.")]
public class Mvp.Xml.Exslt.ExsltTransform : object {
    private object sync;
    private XslCompiledTransform xslTransform;
    private ExsltFunctionNamespace supportedFunctions;
    private ExsltMath exsltMath;
    private ExsltRandom exsltRandom;
    private ExsltDatesAndTimes exsltDatesAndTimes;
    private ExsltRegularExpressions exsltRegularExpressions;
    private ExsltStrings exsltStrings;
    private ExsltSets exsltSets;
    private GdnDatesAndTimes gdnDatesAndTimes;
    private GdnRegularExpressions gdnRegularExpressions;
    private GdnMath gdnMath;
    private GdnSets gdnSets;
    private GdnStrings gdnStrings;
    private GdnDynamic gdnDynamic;
    private bool multiOutput;
    public ExsltFunctionNamespace SupportedFunctions { get; public set; }
    public bool MultiOutput { get; public set; }
    public XmlWriterSettings OutputSettings { get; }
    public ExsltTransform(bool debug);
    public void set_SupportedFunctions(ExsltFunctionNamespace value);
    public ExsltFunctionNamespace get_SupportedFunctions();
    public bool get_MultiOutput();
    public void set_MultiOutput(bool value);
    public XmlWriterSettings get_OutputSettings();
    public void Load(IXPathNavigable stylesheet);
    public void Load(string stylesheetUri);
    public void Load(XmlReader stylesheet);
    public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(string stylesheetUri, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Transform(IXPathNavigable input, XmlWriter results);
    public void Transform(string inputUri, string resultsFile);
    public void Transform(string inputUri, XmlWriter results);
    public void Transform(XmlReader input, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, Stream results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, TextWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, Stream results);
    public void Transform(string inputUri, XsltArgumentList arguments, TextWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, Stream results);
    public void Transform(XmlReader input, XsltArgumentList arguments, TextWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
    private XsltArgumentList AddExsltExtensionObjects(XsltArgumentList list);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.GdnDatesAndTimes : ExsltDatesAndTimes {
    public string Avg(XPathNodeIterator iterator);
    public string avg(XPathNodeIterator iterator);
    public string Min(XPathNodeIterator iterator);
    public string min(XPathNodeIterator iterator);
    public string Max(XPathNodeIterator iterator);
    public string max(XPathNodeIterator iterator);
    public string DayAbbreviation(string culture);
    public string day-abbreviation(string c);
    public string DayAbbreviation(string d, string culture);
    public string day-abbreviation(string d, string c);
    public string DayName(string d, string culture);
    public string day-name(string d, string c);
    public string DayName(string culture);
    public string day-name(string c);
    public string MonthAbbreviation(string culture);
    public string month-abbreviation(string c);
    public string MonthAbbreviation(string d, string culture);
    public string month-abbreviation(string d, string c);
    public string MonthName(string d, string culture);
    public string month-name(string d, string c);
    public string MonthName(string culture);
    public string month-name(string c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.GdnDynamic : object {
    public object Evaluate(XPathNodeIterator contextNode, string expression);
    public object evaluate(XPathNodeIterator contextNode, string expression);
    public object Evaluate(XPathNodeIterator contextNode, string expression, string namespaces);
    public object evaluate(XPathNodeIterator contextNode, string expression, string namespaces);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.GdnMath : object {
    public double Avg(XPathNodeIterator iterator);
    public double avg(XPathNodeIterator iterator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.GdnRegularExpressions : object {
    public XPathNodeIterator Tokenize(string str, string regexp);
    public XPathNodeIterator tokenize(string str, string regexp);
    public XPathNodeIterator Tokenize(string str, string regexp, string flags);
    public XPathNodeIterator tokenize(string str, string regexp, string flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.GdnSets : object {
    public bool Subset(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public bool subset(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
    public bool Subset2(XPathNodeIterator nodeset1, XPathNodeIterator nodeset2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.GdnStrings : object {
    public string Uppercase(string str);
    public string uppercase(string str);
    public string Lowercase(string str);
    public string lowercase(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Exslt.MultiXmlTextWriter : XmlTextWriter {
    protected static string RedirectNamespace;
    protected static string RedirectElementName;
    private XmlResolver outResolver;
    private Stack states;
    private OutputState state;
    private string currentAttributeName;
    private RedirectState redirectState;
    public MultiXmlTextWriter(string fileName, Encoding encoding);
    public MultiXmlTextWriter(TextWriter w);
    public MultiXmlTextWriter(TextWriter w, XmlResolver outResolver);
    public MultiXmlTextWriter(Stream w, Encoding encoding);
    public MultiXmlTextWriter(Stream w, Encoding encoding, XmlResolver outResolver);
    private void CheckContentStart();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal void FinishRedirecting();
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteString(string text);
}
internal enum Mvp.Xml.Exslt.OutputMethod : Enum {
    public int value__;
    public static OutputMethod Xml;
    public static OutputMethod Text;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.Exslt.OutputState : object {
    [CompilerGeneratedAttribute]
private bool <Standalone>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicDoctype>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemDoctype>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTextWriter <XmlWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamWriter <TextWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OmitXmlDeclaration>k__BackingField;
    public bool Standalone { get; public set; }
    public OutputMethod Method { get; public set; }
    public string Href { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool Indent { get; public set; }
    public string PublicDoctype { get; public set; }
    public string SystemDoctype { get; public set; }
    public XmlTextWriter XmlWriter { get; private set; }
    public StreamWriter TextWriter { get; private set; }
    public int Depth { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public void InitWriter(XmlResolver outResolver);
    public void CloseWriter();
    [CompilerGeneratedAttribute]
public bool get_Standalone();
    [CompilerGeneratedAttribute]
public void set_Standalone(bool value);
    [CompilerGeneratedAttribute]
public OutputMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(OutputMethod value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
    [CompilerGeneratedAttribute]
public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
    [CompilerGeneratedAttribute]
public string get_PublicDoctype();
    [CompilerGeneratedAttribute]
public void set_PublicDoctype(string value);
    [CompilerGeneratedAttribute]
public string get_SystemDoctype();
    [CompilerGeneratedAttribute]
public void set_SystemDoctype(string value);
    [CompilerGeneratedAttribute]
public XmlTextWriter get_XmlWriter();
    [CompilerGeneratedAttribute]
private void set_XmlWriter(XmlTextWriter value);
    [CompilerGeneratedAttribute]
public StreamWriter get_TextWriter();
    [CompilerGeneratedAttribute]
private void set_TextWriter(StreamWriter value);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
    [CompilerGeneratedAttribute]
public bool get_OmitXmlDeclaration();
    [CompilerGeneratedAttribute]
public void set_OmitXmlDeclaration(bool value);
}
internal enum Mvp.Xml.Exslt.RedirectState : Enum {
    public int value__;
    public static RedirectState Relaying;
    public static RedirectState Redirecting;
    public static RedirectState WritingRedirectElementAttrs;
    public static RedirectState WritingRedirectElementAttrValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Mvp.Xml.Guard : object {
    public static void ArgumentNotNull(object value, string argumentName);
    public static void ArgumentNotNullOrEmptyString(string value, string argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.QName : object {
    [CompilerGeneratedAttribute]
private string <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NsUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Local { get; }
    public string NsUri { get; }
    public string Prefix { get; }
    public QName(string local, string nsUri, string prefix);
    [CompilerGeneratedAttribute]
public string get_Local();
    [CompilerGeneratedAttribute]
public string get_NsUri();
    [CompilerGeneratedAttribute]
public string get_Prefix();
    public virtual string ToString();
}
public static class Mvp.Xml.Serialization.CacheKeyFactory : object {
    [NullableContextAttribute("1")]
public static string MakeKey(Type type, XmlAttributeOverrides overrides, Type[] types, XmlRootAttribute root, string defaultNamespace);
}
public class Mvp.Xml.Serialization.SerializerCacheDelegate : MulticastDelegate {
    public SerializerCacheDelegate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(Type type, XmlAttributeOverrides overrides, Type[] types, XmlRootAttribute root, string defaultNamespace);
    [NullableContextAttribute("1")]
public virtual IAsyncResult BeginInvoke(Type type, XmlAttributeOverrides overrides, Type[] types, XmlRootAttribute root, string defaultNamespace, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mvp.Xml.Serialization.SignatureExtractor : object {
    public static string GetDefaultNamespaceSignature(string defaultNamespace);
    public static string GetXmlRootSignature(XmlRootAttribute root);
    public static string GetOverridesSignature(XmlAttributeOverrides overrides);
    public static string GetTypeArraySignature(Type[] types);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Serialization.StringSorter : object {
    private List`1<string> list;
    public void AddString(string s);
    public String[] GetOrderedArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mvp.Xml.Serialization.XmlAttributeOverridesThumbprinter : object {
    public static string GetThumbprint(XmlAttributeOverrides overrides);
    internal static StringBuilder AddXmlRootPrint(XmlRootAttribute root, StringBuilder printBuilder);
    private static string GetClassThumbprint(XmlAttributeOverrides overrides);
    private static void GetTypePrint(string typeName, Dictionary`2<Type, Dictionary`2<string, XmlAttributes>> attributes, StringBuilder printBuilder);
    private static void GetXmlAttributesThumbprint(XmlAttributes atts, StringBuilder printBuilder);
    private static void AddXmlAnyElementsPrint(XmlAnyElementAttributes atts, StringBuilder printBuilder);
    private static void AddXmlArrayPrint(XmlArrayAttribute att, StringBuilder printBuilder);
    private static void AddXmlArrayItemsPrint(XmlArrayItemAttributes atts, StringBuilder printBuilder);
    private static void AddXmlAttributePrint(XmlAttributeAttribute att, StringBuilder printBuilder);
    private static void AddXmlChoiceIdentifierPrint(XmlChoiceIdentifierAttribute att, StringBuilder printBuilder);
    private static void AddXmlDefaultValuePrint(object defaultValue, StringBuilder printBuilder);
    private static void AddXmlElementsPrint(XmlElementAttributes atts, StringBuilder printBuilder);
    private static void AddXmlEnumPrint(XmlEnumAttribute att, StringBuilder printBuilder);
    private static StringBuilder AddXmlIgnorePrint(bool ignore, StringBuilder printBuilder);
    private static StringBuilder AddXmlNamespacePrint(bool xmlns, StringBuilder printBuilder);
    private static void AddXmlTextPrint(XmlTextAttribute att, StringBuilder printBuilder);
    private static void AddXmlTypePrint(XmlTypeAttribute att, StringBuilder printBuilder);
    private static Dictionary`2<Type, Dictionary`2<string, XmlAttributes>> GetTypesHashtable(XmlAttributeOverrides overrides);
    private static Dictionary`2<Type, Dictionary`2<string, XmlAttributes>> GetHashtable(XmlAttributeOverrides overrides, string fieldName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.Serialization.XmlSerializerCache : object {
    [CompilerGeneratedAttribute]
private SerializerCacheDelegate NewSerializer;
    [CompilerGeneratedAttribute]
private SerializerCacheDelegate CacheHit;
    private Dictionary`2<string, XmlSerializer> serializers;
    private object syncRoot;
    [CompilerGeneratedAttribute]
public void add_NewSerializer(SerializerCacheDelegate value);
    [CompilerGeneratedAttribute]
public void remove_NewSerializer(SerializerCacheDelegate value);
    [CompilerGeneratedAttribute]
public void add_CacheHit(SerializerCacheDelegate value);
    [CompilerGeneratedAttribute]
public void remove_CacheHit(SerializerCacheDelegate value);
    public XmlSerializer GetSerializer(Type type, string defaultNamespace);
    public XmlSerializer GetSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer GetSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer GetSerializer(Type type, Type[] types);
    public XmlSerializer GetSerializer(Type type, XmlAttributeOverrides overrides, Type[] types, XmlRootAttribute root, string defaultNamespace);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XhtmlWriter : XmlWrappingWriter {
    private Stack`1<QName> elementStack;
    public XhtmlWriter(XmlWriter baseWriter);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    private void WriteXhmlEndElement(bool fullEndTag);
}
public class Mvp.Xml.XInclude.AttributeOrNamespaceInIncludeLocationError : FatalException {
    [NullableContextAttribute("1")]
public AttributeOrNamespaceInIncludeLocationError(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XInclude.CircularInclusionException : FatalException {
    public CircularInclusionException(Uri uri);
    public CircularInclusionException(Uri uri, string locationUri, int line, int position);
}
internal class Mvp.Xml.XInclude.FallbackState : ValueType {
    public bool Fallbacking;
    public int FallbackDepth;
    public bool FallbackProcessed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Mvp.Xml.XInclude.FatalException : XIncludeException {
    protected FatalException(string message);
    protected FatalException(string message, Exception innerException);
}
public class Mvp.Xml.XInclude.FatalResourceException : FatalException {
    [NullableContextAttribute("1")]
public FatalResourceException(Exception re);
}
public class Mvp.Xml.XInclude.InvalidAcceptHTTPHeaderValueError : FatalException {
    public InvalidAcceptHTTPHeaderValueError(char c);
}
public class Mvp.Xml.XInclude.MalformedXInclusionResultError : FatalException {
    [NullableContextAttribute("1")]
public MalformedXInclusionResultError(string message);
}
public class Mvp.Xml.XInclude.NonXmlCharacterException : FatalException {
    public NonXmlCharacterException(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XInclude.ResourceException : XIncludeException {
    public ResourceException(string message);
    public ResourceException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Mvp.Xml.XInclude.TextIncludingReader : XmlReader {
    private string encoding;
    private ReadState state;
    private string value;
    private Uri includeLocation;
    private string accept;
    private string acceptLanguage;
    private string baseUri;
    private bool exposeCdata;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public TextIncludingReader(Uri includeLocation, string encoding, string accept, string acceptLanguage, bool exposeCdata);
    public TextIncludingReader(string value, bool exposeCdata);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_Item(int index);
    public virtual string get_Item(string qname);
    public virtual string get_Item(string localname, string nsuri);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual string GetAttribute(int index);
    public virtual string GetAttribute(string qname);
    public virtual string GetAttribute(string localname, string nsuri);
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int index);
    public virtual bool MoveToAttribute(string qname);
    public virtual bool MoveToAttribute(string localname, string nsuri);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool ReadAttributeValue();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual string ReadString();
    public virtual void ResolveEntity();
    public virtual bool Read();
    private static Encoding GetEncodingFromXmlDecl(string href);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XInclude.TextUtils : object {
    public static void CheckForNonXmlChars(string str);
    public static void CheckAcceptValue(string accept);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Mvp.Xml.XInclude.XIncludeException : Exception {
    protected XIncludeException(string message);
    protected XIncludeException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XInclude.XIncludeKeywords : object {
    private static string sXIncludeNamespace;
    private static string sOldXIncludeNamespace;
    private static string sInclude;
    private static string sHref;
    private static string sParse;
    private static string sXml;
    private static string sText;
    private static string sXpointer;
    private static string sAccept;
    private static string sAcceptLanguage;
    private static string sEncoding;
    private static string sFallback;
    private static string sXmlNamespace;
    private static string sBase;
    private static string sXmlBase;
    private static string sLang;
    private static string sXmlLang;
    private XmlNameTable nameTable;
    private string xml;
    private string text;
    private string xpointer;
    private string accept;
    private string acceptLanguage;
    private string encoding;
    private string fallback;
    private string xmlNamespace;
    private string _Base;
    private string xmlBase;
    private string lang;
    private string xmlLang;
    [CompilerGeneratedAttribute]
private string <XIncludeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldXIncludeNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Include>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parse>k__BackingField;
    public string XIncludeNamespace { get; }
    public string OldXIncludeNamespace { get; }
    public string Include { get; }
    public string Href { get; }
    public string Parse { get; }
    public string Xml { get; }
    public string Text { get; }
    public string Xpointer { get; }
    public string Accept { get; }
    public string AcceptLanguage { get; }
    public string Encoding { get; }
    public string Fallback { get; }
    public string XmlNamespace { get; }
    public string Base { get; }
    public string XmlBase { get; }
    public string Lang { get; }
    public string XmlLang { get; }
    public XIncludeKeywords(XmlNameTable nt);
    [CompilerGeneratedAttribute]
public string get_XIncludeNamespace();
    [CompilerGeneratedAttribute]
public string get_OldXIncludeNamespace();
    [CompilerGeneratedAttribute]
public string get_Include();
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public string get_Parse();
    public string get_Xml();
    public string get_Text();
    public string get_Xpointer();
    public string get_Accept();
    public string get_AcceptLanguage();
    public string get_Encoding();
    public string get_Fallback();
    public string get_XmlNamespace();
    public string get_Base();
    public string get_XmlBase();
    public string get_Lang();
    public string get_XmlLang();
    public static bool Equals(string keyword1, string keyword2);
}
public class Mvp.Xml.XInclude.XIncludeSyntaxError : FatalException {
    [NullableContextAttribute("1")]
public XIncludeSyntaxError(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Mvp.Xml.XInclude.XIncludingReader : XmlReader {
    private XIncludeKeywords keywords;
    private XmlReader reader;
    private Stack`1<XmlReader> readers;
    private Uri topBaseUri;
    private bool topLevel;
    private bool gotTopIncludedElem;
    private bool gotElement;
    private XIncludingReaderState state;
    private XmlNameTable nameTable;
    private FallbackState fallbackState;
    private FallbackState prevFallbackState;
    private XmlResolver xmlResolver;
    private bool differentLang;
    private static IDictionary`2<string, WeakReference> cache;
    private int realXmlBaseIndex;
    [CompilerGeneratedAttribute]
private WhitespaceHandling <WhitespaceHandling>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MakeRelativeBaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExposeTextInclusionsAsCDATA>k__BackingField;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool IsEmptyElement { get; }
    public ReadState ReadState { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public string Value { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    public Encoding Encoding { get; }
    public bool MakeRelativeBaseUri { get; public set; }
    public bool ExposeTextInclusionsAsCDATA { get; public set; }
    public XIncludingReader(XmlReader reader);
    public XIncludingReader(string url);
    public XIncludingReader(string url, XmlResolver resolver);
    public XIncludingReader(string url, XmlNameTable nt);
    public XIncludingReader(TextReader reader);
    public XIncludingReader(string url, TextReader reader);
    public XIncludingReader(TextReader reader, XmlNameTable nt);
    public XIncludingReader(string url, TextReader reader, XmlNameTable nt);
    public XIncludingReader(Stream input);
    public XIncludingReader(string url, Stream input);
    public XIncludingReader(string url, Stream input, XmlResolver resolver);
    public XIncludingReader(Stream input, XmlNameTable nt);
    public XIncludingReader(string url, Stream input, XmlNameTable nt);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual void Close();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceUri);
    public virtual bool get_IsEmptyElement();
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool ReadAttributeValue();
    public virtual ReadState get_ReadState();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceUri);
    public virtual void ResolveEntity();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_Value();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual string ReadString();
    public virtual bool Read();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public WhitespaceHandling get_WhitespaceHandling();
    [CompilerGeneratedAttribute]
public void set_WhitespaceHandling(WhitespaceHandling value);
    public void set_XmlResolver(XmlResolver value);
    public Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public bool get_MakeRelativeBaseUri();
    [CompilerGeneratedAttribute]
public void set_MakeRelativeBaseUri(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExposeTextInclusionsAsCDATA();
    [CompilerGeneratedAttribute]
public void set_ExposeTextInclusionsAsCDATA(bool value);
    private static void ValidationCallback(object sender, ValidationEventArgs args);
    private bool IsIncludeElement();
    private bool IsFallbackElement();
    internal static Stream GetResource(string includeLocation, string accept, string acceptLanguage, WebResponse& response);
    private bool ProcessIncludeElement();
    private Uri ResolveHref(string href);
    private void SkipContent();
    private bool ProcessFallback(int depth, Exception e);
    private void CheckAndSkipContent();
    private void ThrowCircularInclusionError(XmlReader r, Uri url);
    private bool AreDifferentLangs(string lang1, string lang2);
    private string CreateAcquiredInfoset(Uri includeLocation);
    private string CreateAcquiredInfoset(Uri includeLocation, TextReader sourceReader);
    private string CreateAcquiredInfoset(XmlReader sourceReader);
    private bool ProcessInterDocXmlInclusion(string href, string xpointer);
    private bool ProcessInterDocTextInclusion(string href);
    private void CheckLoops(Uri url);
    private string GetBaseUri();
}
internal enum Mvp.Xml.XInclude.XIncludingReaderState : Enum {
    public int value__;
    public static XIncludingReaderState Default;
    public static XIncludingReaderState ExposingXmlBaseAttr;
    public static XIncludingReaderState ExposingXmlBaseAttrValue;
    public static XIncludingReaderState ExposingXmlLangAttr;
    public static XIncludingReaderState ExposingXmlLangAttrValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XmlBaseAwareXmlReader : XmlWrappingReader {
    private XmlBaseState state;
    private Stack`1<XmlBaseState> states;
    public string BaseURI { get; }
    public XmlBaseAwareXmlReader(string uri);
    public XmlBaseAwareXmlReader(string uri, XmlResolver resolver);
    public XmlBaseAwareXmlReader(string uri, XmlNameTable nt);
    public XmlBaseAwareXmlReader(TextReader reader);
    public XmlBaseAwareXmlReader(string uri, TextReader reader);
    public XmlBaseAwareXmlReader(TextReader reader, XmlNameTable nt);
    public XmlBaseAwareXmlReader(string uri, TextReader reader, XmlNameTable nt);
    public XmlBaseAwareXmlReader(Stream stream);
    public XmlBaseAwareXmlReader(string uri, Stream stream);
    public XmlBaseAwareXmlReader(string uri, Stream stream, XmlResolver resolver);
    public XmlBaseAwareXmlReader(Stream stream, XmlNameTable nt);
    public XmlBaseAwareXmlReader(string uri, Stream stream, XmlNameTable nt);
    public XmlBaseAwareXmlReader(string uri, XmlReaderSettings settings);
    public XmlBaseAwareXmlReader(TextReader reader, XmlReaderSettings settings);
    public XmlBaseAwareXmlReader(Stream stream, XmlReaderSettings settings);
    public XmlBaseAwareXmlReader(XmlReader reader, XmlReaderSettings settings);
    public XmlBaseAwareXmlReader(TextReader reader, XmlReaderSettings settings, string baseUri);
    public XmlBaseAwareXmlReader(Stream stream, XmlReaderSettings settings, string baseUri);
    private static XmlReaderSettings CreateReaderSettings();
    private static XmlReaderSettings CreateReaderSettings(XmlResolver resolver);
    private static XmlReaderSettings CreateReaderSettings(XmlNameTable nt);
    public virtual string get_BaseURI();
    public virtual bool Read();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XmlBaseState : object {
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    public Uri BaseUri { get; public set; }
    public int Depth { get; public set; }
    public XmlBaseState(Uri baseUri, int depth);
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public int get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XmlFirstLowerWriter : XmlTextWriter {
    public XmlFirstLowerWriter(TextWriter w);
    public XmlFirstLowerWriter(Stream w, Encoding encoding);
    public XmlFirstLowerWriter(string filename, Encoding encoding);
    internal static string MakeFirstLower(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Mvp.Xml.XmlFirstUpperReader : XmlTextReader {
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlFirstUpperReader(Stream input);
    public XmlFirstUpperReader(TextReader input);
    public XmlFirstUpperReader(string url);
    public XmlFirstUpperReader(Stream input, XmlNameTable nt);
    public XmlFirstUpperReader(TextReader input, XmlNameTable nt);
    public XmlFirstUpperReader(string url, Stream input);
    public XmlFirstUpperReader(string url, TextReader input);
    public XmlFirstUpperReader(string url, XmlNameTable nt);
    public XmlFirstUpperReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlFirstUpperReader(string url, Stream input, XmlNameTable nt);
    public XmlFirstUpperReader(string url, TextReader input, XmlNameTable nt);
    public XmlFirstUpperReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    private string MakeFirstUpper(string name);
    public virtual string get_Item(string name, string namespaceUri);
    public virtual string get_Item(string name);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual bool MoveToAttribute(string name, string ns);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XmlFragmentReader : XmlWrappingReader {
    private XmlQualifiedName rootName;
    private bool isRoot;
    private ReadState state;
    private XmlNodeType nodeType;
    public ReadState ReadState { get; }
    public XmlNodeType NodeType { get; }
    public int Depth { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Name { get; }
    public XmlFragmentReader(string rootElementName, XmlReader baseReader);
    public XmlFragmentReader(string rootElementName, string rootXmlNamespace, XmlReader baseReader);
    public XmlFragmentReader(XmlQualifiedName rootName, XmlReader baseReader);
    private void Initialize(XmlQualifiedName qualifiedRootName);
    public virtual bool Read();
    public virtual ReadState get_ReadState();
    public virtual XmlNodeType get_NodeType();
    public virtual int get_Depth();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use XmlFragmentReader instead.", "False")]
[EditorBrowsableAttribute("1")]
public class Mvp.Xml.XmlFragmentStream : Stream {
    private Stream stream;
    private bool first;
    private bool done;
    private bool eof;
    private Byte[] rootstart;
    private Byte[] rootend;
    private int endidx;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public XmlFragmentStream(Stream innerStream);
    public XmlFragmentStream(Stream innerStream, string rootName);
    public XmlFragmentStream(Stream innerStream, string rootName, string ns);
    public virtual void Close();
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mvp.Xml.XmlNamespaces : object {
    public static string Xml;
    public static string XmlNs;
    public static string XmlNsPrefix;
    public static string Xsi;
    public static string Xsd;
    public static string Xhtml;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XmlNodeFactory : object {
    public static XmlNode Create(object value);
    public static XmlNode Create(XPathNavigator navigator);
    public static XmlNode Create(XmlReader reader);
    public static XmlNode Create(XmlReader reader, bool defaultAttrs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mvp.Xml.XmlNodeListFactory : object {
    public static XmlNodeList CreateNodeList(XPathNodeIterator iterator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XmlNormalizingReader : XmlWrappingReader {
    private XmlNamespaceManager nsManager;
    private string xmlNsNamespace;
    public int AttributeCount { get; }
    private bool IsXmlNs { get; }
    private bool IsLocalXmlNs { get; }
    public XmlNormalizingReader(XmlReader baseReader);
    public virtual bool Read();
    public virtual int get_AttributeCount();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    private bool get_IsXmlNs();
    private bool get_IsLocalXmlNs();
    private string GetNamespacePrefix();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XmlPrefix : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamespaceUri>k__BackingField;
    public string Prefix { get; }
    public string NamespaceUri { get; }
    public XmlPrefix(string prefix, string ns);
    public XmlPrefix(string prefix, string ns, XmlNameTable nameTable);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_NamespaceUri();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class Mvp.Xml.XmlWrappingReader : XmlReader {
    private XmlReader baseReader;
    protected XmlReader BaseReader { get; protected set; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool CanResolveEntity { get; }
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    protected XmlWrappingReader(XmlReader baseReader);
    protected XmlReader get_BaseReader();
    protected void set_BaseReader(XmlReader value);
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_CanResolveEntity();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
    public virtual void Close();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceUri);
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceUri);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceUri);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Mvp.Xml.XmlWrappingWriter : XmlWriter {
    private XmlWriter baseWriter;
    protected XmlWriter BaseWriter { get; protected set; }
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    protected XmlWrappingWriter(XmlWriter baseWriter);
    protected XmlWriter get_BaseWriter();
    protected void set_BaseWriter(XmlWriter value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(string value);
    public virtual void WriteWhitespace(string ws);
    public virtual XmlWriterSettings get_Settings();
    public virtual WriteState get_WriteState();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.DynamicContext : XsltContext {
    private Dictionary`2<string, IXsltContextVariable> variables;
    public bool Whitespace { get; }
    public DynamicContext(NameTable table);
    public DynamicContext(XmlNamespaceManager context);
    public DynamicContext(XmlNamespaceManager context, NameTable table);
    public virtual int CompareDocument(string baseUri, string nextbaseUri);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool PreserveWhitespace(XPathNavigator node);
    public virtual bool get_Whitespace();
    public static XPathExpression Compile(string xpath);
    public void AddVariable(string name, object value);
    public virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes);
    public virtual IXsltContextVariable ResolveVariable(string prefix, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.EmptyXPathNodeIterator : XPathNodeIterator {
    [CompilerGeneratedAttribute]
private static EmptyXPathNodeIterator <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private XPathNavigator <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentPosition>k__BackingField;
    public static EmptyXPathNodeIterator Instance { get; }
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    private static EmptyXPathNodeIterator();
    [CompilerGeneratedAttribute]
public static EmptyXPathNodeIterator get_Instance();
    public virtual XPathNodeIterator Clone();
    [CompilerGeneratedAttribute]
public virtual int get_Count();
    [CompilerGeneratedAttribute]
public virtual XPathNavigator get_Current();
    [CompilerGeneratedAttribute]
public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
[NullableContextAttribute("1")]
public interface Mvp.Xml.XPath.IHasXPathNavigator {
    public abstract virtual XPathNavigator GetNavigator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.IndexingXPathNavigator : XPathNavigator {
    private XPathNavigator nav;
    private XPathNavigatorIndexManager manager;
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public XmlNameTable NameTable { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public IndexingXPathNavigator(XPathNavigator navigator);
    public void BuildIndexes();
    public virtual void AddKey(string keyName, string match, string use);
    public virtual XPathExpression Compile(string xpath);
    public virtual XPathNodeIterator Select(string xpath);
    public virtual XPathNavigator Clone();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceUri);
    public virtual bool MoveToAttribute(string localName, string namespaceUri);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string localname);
    public virtual bool MoveToNamespace(string namespace);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool get_HasChildren();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.SingletonXPathNodeIterator : XPathNodeIterator {
    private XPathNavigator navigator;
    private int position;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public SingletonXPathNodeIterator(XPathNavigator nav);
    public virtual XPathNodeIterator Clone();
    [CompilerGeneratedAttribute]
public virtual int get_Count();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.SubtreeXPathNavigator : XPathNavigator {
    private XPathNavigator navigator;
    private XPathNavigator root;
    private bool fragment;
    [CompilerGeneratedAttribute]
private bool <AtRoot>k__BackingField;
    private bool AtRoot { get; private set; }
    private bool IsTop { get; }
    public string BaseURI { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string XmlLang { get; }
    public SubtreeXPathNavigator(XPathNavigator navigator);
    public SubtreeXPathNavigator(XPathNavigator navigator, bool enableFragment);
    private SubtreeXPathNavigator(XPathNavigator root, XPathNavigator current, bool atRoot, bool enableFragment);
    [CompilerGeneratedAttribute]
private bool get_AtRoot();
    [CompilerGeneratedAttribute]
private void set_AtRoot(bool value);
    private bool get_IsTop();
    public virtual string get_BaseURI();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XPathNavigator Clone();
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToNext();
    public virtual bool MoveToParent();
    public virtual bool MoveToPrevious();
    public virtual void MoveToRoot();
    public virtual string GetAttribute(string localName, string namespaceUri);
    public virtual bool MoveToAttribute(string localName, string namespaceUri);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string localName);
    public virtual bool MoveToNamespace(string namespace);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Mvp.Xml.XPath.XPathCache : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, XPathExpression> <Cache>k__BackingField;
    private static IDictionary`2<string, XPathExpression> Cache { get; }
    private static XPathCache();
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, XPathExpression> get_Cache();
    private static XPathExpression GetCompiledExpression(string expression, XPathNavigator source);
    private static XmlNamespaceManager PrepareContext(XPathNavigator source, XmlNamespaceManager context, XmlPrefix[] prefixes, XPathVariable[] variables);
    private static void PrepareSort(XPathExpression expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    private static void PrepareSort(XPathExpression expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlNamespaceManager context);
    private static void PrepareSort(XPathExpression expression, XPathNavigator source, object sortExpression, IComparer comparer);
    private static void PrepareSort(XPathExpression expression, XPathNavigator source, object sortExpression, IComparer comparer, XmlNamespaceManager context);
    public static object Evaluate(string expression, XPathNavigator source);
    public static object Evaluate(string expression, XPathNavigator source, XPathVariable[] variables);
    public static object Evaluate(string expression, XPathNavigator source, XmlNamespaceManager context);
    public static object Evaluate(string expression, XPathNavigator source, XmlPrefix[] prefixes);
    public static object Evaluate(string expression, XPathNavigator source, XmlNamespaceManager context, XPathVariable[] variables);
    public static object Evaluate(string expression, XPathNavigator source, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XPathNodeIterator Select(string expression, XPathNavigator source);
    public static XPathNodeIterator Select(string expression, XPathNavigator source, XPathVariable[] variables);
    public static XPathNodeIterator Select(string expression, XPathNavigator source, XmlNamespaceManager context);
    public static XPathNodeIterator Select(string expression, XPathNavigator source, XmlPrefix[] prefixes);
    public static XPathNodeIterator Select(string expression, XPathNavigator source, XmlNamespaceManager context, XPathVariable[] variables);
    public static XPathNodeIterator Select(string expression, XPathNavigator source, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, IComparer comparer);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, IComparer comparer, XPathVariable[] variables);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XPathVariable[] variables);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlNamespaceManager context);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, IComparer comparer, XmlPrefix[] prefixes);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlPrefix[] prefixes);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlNamespaceManager context, XPathVariable[] variables);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, IComparer comparer, XmlNamespaceManager context, XPathVariable[] variables);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XPathNodeIterator SelectSorted(string expression, XPathNavigator source, object sortExpression, IComparer comparer, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XmlNodeList SelectNodes(string expression, XmlNode source);
    public static XmlNodeList SelectNodes(string expression, XmlNode source, XPathVariable[] variables);
    public static XmlNodeList SelectNodes(string expression, XmlNode source, XmlNamespaceManager context);
    public static XmlNodeList SelectNodes(string expression, XmlNode source, XmlPrefix[] prefixes);
    public static XmlNodeList SelectNodes(string expression, XmlNode source, XmlNamespaceManager context, XPathVariable[] variables);
    public static XmlNodeList SelectNodes(string expression, XmlNode source, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, IComparer comparer);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, IComparer comparer, XPathVariable[] variables);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XPathVariable[] variables);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlNamespaceManager context);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, IComparer comparer, XmlPrefix[] prefixes);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlPrefix[] prefixes);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlNamespaceManager context, XPathVariable[] variables);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, IComparer comparer, XmlNamespaceManager context, XPathVariable[] variables);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XmlNodeList SelectNodesSorted(string expression, XmlNode source, object sortExpression, IComparer comparer, XmlPrefix[] prefixes, XPathVariable[] variables);
    public static XmlNode SelectSingleNode(string expression, XmlNode source);
    public static XmlNode SelectSingleNode(string expression, XmlNode source, XPathVariable[] variables);
    public static XmlNode SelectSingleNode(string expression, XmlNode source, XmlNamespaceManager context);
    public static XmlNode SelectSingleNode(string expression, XmlNode source, XmlPrefix[] prefixes);
    public static XmlNode SelectSingleNode(string expression, XmlNode source, XmlNamespaceManager context, XPathVariable[] variables);
    public static XmlNode SelectSingleNode(string expression, XmlNode source, XmlPrefix[] prefixes, XPathVariable[] variables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.XPathDocumentWriter : XmlWrappingWriter {
    private static ConstructorInfo defaultConstructor;
    private static MethodInfo loadWriterMethod;
    private XPathDocument document;
    private bool hasRoot;
    public WriteState WriteState { get; }
    private static XPathDocumentWriter();
    public XPathDocumentWriter(string baseUri);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public XPathDocument Close();
    public virtual WriteState get_WriteState();
    protected virtual void Dispose(bool disposing);
    private static XPathDocument CreateDocument();
    private static XmlWriter GetWriter(XPathDocument document, string baseUri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Mvp.Xml.XPath.XPathIteratorReader : XmlTextReader {
    private XmlReader current;
    private XPathNodeIterator iterator;
    private XmlQualifiedName rootname;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public XPathIteratorReader(XPathNodeIterator iterator);
    public XPathIteratorReader(XPathNodeIterator iterator, string rootName);
    public XPathIteratorReader(XPathNodeIterator iterator, string rootName, string ns);
    private string Serialize();
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_Item(string name, string ns);
    public virtual string get_Item(string name);
    public virtual string get_Item(int i);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual string GetAttribute(string name, string ns);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(int i);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToAttribute(string name);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual void ResolveEntity();
    public sealed virtual void WriteXml(XmlWriter writer);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Mvp.Xml.XPath.XPathNavigatorIterator : XPathNodeIterator {
    private List`1<XPathNavigator> navigators;
    private int position;
    public XPathNavigator Item { get; }
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public XPathNavigatorIterator(int capacity);
    public XPathNavigatorIterator(XPathNavigator navigator);
    public XPathNavigatorIterator(XPathNodeIterator iterator);
    public XPathNavigatorIterator(XPathNodeIterator iterator, bool removeDuplicates);
    public XPathNavigatorIterator(List`1<XPathNavigator> navigators);
    public void Add(XPathNavigator navigator);
    public void Add(XPathNodeIterator iterator);
    public void Add(IEnumerable`1<XPathNavigator> navigatorsToAdd);
    public bool Contains(XPathNavigator value);
    public bool ContainsValue(string value);
    public XPathNavigator get_Item(int index);
    public void RemoveAt(int index);
    public void Reset();
    public virtual XPathNodeIterator Clone();
    public virtual int get_Count();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPath.XPathVariable : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public XPathVariable(string name, object value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public object get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(XPathVariable a, XPathVariable b);
    public static bool op_Inequality(XPathVariable a, XPathVariable b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.ElementSchemaPointerPart : PointerPart {
    [CompilerGeneratedAttribute]
private string <XPath>k__BackingField;
    public string XPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
public void set_XPath(string value);
    public virtual XPathNodeIterator Evaluate(XPathNavigator doc, XmlNamespaceManager nm);
    public static ElementSchemaPointerPart ParseSchemaData(XPointerLexer lexer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.LexUtils : object {
    private static int fstartname;
    private static int fname;
    private static string nameChars;
    private static string nameStartChars;
    private static Byte[] chars;
    private static LexUtils();
    private static void SetChars(string ranges, byte value);
    public static bool IsWhitespace(char ch);
    public static bool IsStartNameChar(char ch);
    public static bool IsStartNcNameChar(char ch);
    public static bool IsNameChar(char ch);
    public static bool IsNcNameChar(char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPointer.NoSubresourcesIdentifiedException : XPointerException {
    public NoSubresourcesIdentifiedException(string message);
    public NoSubresourcesIdentifiedException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Mvp.Xml.XPointer.Pointer : object {
    public static Pointer Compile(string xpointer);
    public abstract virtual XPathNodeIterator Evaluate(XPathNavigator nav);
}
internal abstract class Mvp.Xml.XPointer.PointerPart : object {
    [NullableContextAttribute("1")]
public abstract virtual XPathNodeIterator Evaluate(XPathNavigator doc, XmlNamespaceManager nm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.SchemaBasedPointer : Pointer {
    private IList`1<PointerPart> parts;
    private string xpointer;
    public SchemaBasedPointer(IList`1<PointerPart> parts, string xpointer);
    public virtual XPathNodeIterator Evaluate(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.ShorthandPointer : Pointer {
    private string ncName;
    public ShorthandPointer(string n);
    public virtual XPathNodeIterator Evaluate(XPathNavigator nav);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.XmlnsSchemaPointerPart : PointerPart {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Prefix { get; }
    public string Uri { get; }
    public XmlnsSchemaPointerPart(string prefix, string uri);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public string get_Uri();
    public virtual XPathNodeIterator Evaluate(XPathNavigator doc, XmlNamespaceManager nm);
    public static XmlnsSchemaPointerPart ParseSchemaData(XPointerLexer lexer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.XPath1SchemaPointerPart : PointerPart {
    private string xpath;
    public virtual XPathNodeIterator Evaluate(XPathNavigator doc, XmlNamespaceManager nm);
    public static XPath1SchemaPointerPart ParseSchemaData(XPointerLexer lexer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Mvp.Xml.XPointer.XPointerException : Exception {
    public XPointerException(string message);
    public XPointerException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.XPointerLexer : object {
    private string ptr;
    private int ptrIndex;
    private char currChar;
    [CompilerGeneratedAttribute]
private LexKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NcName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanBeSchemaName>k__BackingField;
    public LexKind Kind { get; private set; }
    public int Number { get; private set; }
    public string NcName { get; private set; }
    public string Prefix { get; private set; }
    public bool CanBeSchemaName { get; private set; }
    public XPointerLexer(string p);
    private string ParseName();
    public bool NextChar();
    [CompilerGeneratedAttribute]
public LexKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(LexKind value);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
private void set_Number(int value);
    [CompilerGeneratedAttribute]
public string get_NcName();
    [CompilerGeneratedAttribute]
private void set_NcName(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public bool get_CanBeSchemaName();
    [CompilerGeneratedAttribute]
private void set_CanBeSchemaName(bool value);
    public void SkipWhiteSpace();
    public bool NextLexeme();
    public string ParseEscapedData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.XPointerParser : object {
    private static IDictionary`2<string, SchemaType> schemas;
    private static XPointerParser();
    private static SchemaType GetSchema(XPointerLexer lexer, IList`1<PointerPart> parts);
    public static Pointer ParseXPointer(string xpointer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Mvp.Xml.XPointer.XPointerReader : XmlReader {
    private XmlReader reader;
    private XPathNodeIterator pointedNodes;
    private static IDictionary`2<string, WeakReference> cache;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool IsEmptyElement { get; }
    public ReadState ReadState { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public string Value { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XPointerReader(IXPathNavigable doc, string xpointer);
    public XPointerReader(XPathNavigator nav, string xpointer);
    public XPointerReader(string uri, string xpointer);
    public XPointerReader(string uri, XmlNameTable nt, string xpointer);
    public XPointerReader(string uri, Stream stream, XmlNameTable nt, string xpointer);
    public XPointerReader(string uri, Stream stream, string xpointer);
    public XPointerReader(XmlReader reader, string xpointer);
    public XPointerReader(string uri, string content, string xpointer);
    private void Init(XPathNavigator nav, string xpointer);
    private XPathDocument CreateAndCacheDocument(XmlReader r);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual void Close();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceUri);
    public virtual bool get_IsEmptyElement();
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool ReadAttributeValue();
    public virtual ReadState get_ReadState();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceUri);
    public virtual void ResolveEntity();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_Value();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual string ReadString();
    public virtual bool Read();
    public sealed virtual XPathNavigator GetNavigator();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.XPointerSchema : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<string, SchemaType> <Schemas>k__BackingField;
    public static IDictionary`2<string, SchemaType> Schemas { get; }
    private static XPointerSchema();
    [CompilerGeneratedAttribute]
public static IDictionary`2<string, SchemaType> get_Schemas();
    private static IDictionary`2<string, SchemaType> CreateSchemasTable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Mvp.Xml.XPointer.XPointerSchemaPointerPart : PointerPart {
    private string xpath;
    public XPointerSchemaPointerPart(string xpath);
    public virtual XPathNodeIterator Evaluate(XPathNavigator doc, XmlNamespaceManager nm);
    public static XPointerSchemaPointerPart ParseSchemaData(XPointerLexer lexer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Mvp.Xml.XPointer.XPointerSyntaxException : XPointerException {
    public XPointerSyntaxException(string message);
    public XPointerSyntaxException(string message, Exception innerException);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
