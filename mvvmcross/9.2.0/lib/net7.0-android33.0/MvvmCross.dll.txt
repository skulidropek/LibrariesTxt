[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public interface MvvmCross.Base.IMvxApplicable {
    public abstract virtual void Apply();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxApplicableTo {
    public abstract virtual void ApplyTo(object what);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxApplicableTo`1 {
    public abstract virtual void ApplyTo(T what);
}
public interface MvvmCross.Base.IMvxBootstrapAction {
    public abstract virtual void Run();
}
[NullableContextAttribute("2")]
public interface MvvmCross.Base.IMvxDataConsumer {
    public object DataContext { get; public set; }
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Base.IMvxDisposeSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisposeCalled(EventHandler value);
}
public interface MvvmCross.Base.IMvxJsonConverter {
    [NullableContextAttribute("2")]
public abstract virtual T DeserializeObject(Stream stream);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxMainThreadAsyncDispatcher {
    public bool IsOnMainThread { get; }
    public abstract virtual Task ExecuteOnMainThreadAsync(Action action, bool maskExceptions);
    public abstract virtual Task ExecuteOnMainThreadAsync(Func`1<Task> action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxMainThreadDispatcher {
    public bool IsOnMainThread { get; }
    [ObsoleteAttribute("Use IMvxMainThreadAsyncDispatcher.ExecuteOnMainThreadAsync instead")]
public abstract virtual bool RequestMainThreadAction(Action action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxNamedInstanceRegistry`1 {
    public abstract virtual void AddOrOverwrite(string name, T instance);
    public abstract virtual void AddOrOverwriteFrom(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxResourceLoader {
    public abstract virtual bool ResourceExists(string resourcePath);
    public abstract virtual string GetTextResource(string resourcePath);
    public abstract virtual void GetResourceStream(string resourcePath, Action`1<Stream> streamAction);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxSingletonCache {
    public IMvxSettings Settings { get; }
    public IMvxInpcInterceptor InpcInterceptor { get; }
    public IMvxStringToTypeParser Parser { get; }
    public abstract virtual IMvxSettings get_Settings();
    public abstract virtual IMvxInpcInterceptor get_InpcInterceptor();
    public abstract virtual IMvxStringToTypeParser get_Parser();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxTextSerializer {
    [NullableContextAttribute("2")]
public abstract virtual T DeserializeObject(string inputText);
    public abstract virtual object DeserializeObject(Type type, string inputText);
    public abstract virtual string SerializeObject(object toSerialise);
}
public abstract class MvvmCross.Base.MvxApplicable : object {
    private bool _finalizerSuppressed;
    protected virtual override void Finalize();
    protected void SuppressFinalizer();
    public virtual void Apply();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxApplicableExtensions : object {
    [ExtensionAttribute]
public static void Apply(IEnumerable`1<IMvxApplicable> toApply);
    [ExtensionAttribute]
public static void ApplyTo(IEnumerable`1<IMvxApplicableTo> toApply, object what);
    [ExtensionAttribute]
public static void ApplyTo(IEnumerable`1<IMvxApplicableTo`1<T>> toApply, T what);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Base.MvxApplicableTo`1 : MvxApplicable {
    public virtual void ApplyTo(T what);
}
public class MvvmCross.Base.MvxBootstrapRunner : object {
    public virtual void Run(Assembly assembly);
    protected virtual void Run(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxCoreExtensions : object {
    [ExtensionAttribute]
public static bool ConvertToBooleanCore(object result);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object MakeSafeValueCore(Type propertyType, object value);
    private static object ErrorMaskedConvert(object value, Type type, CultureInfo cultureInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxDelegateExtensions : object {
    [ExtensionAttribute]
public static void Raise(EventHandler eventHandler, object sender);
    [ExtensionAttribute]
public static void Raise(EventHandler`1<MvxValueEventArgs`1<T>> eventHandler, object sender, T value);
}
[ExtensionAttribute]
public static class MvvmCross.Base.MvxDictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDictionary`2<string, object> ToPropertyDictionary(object input);
}
public abstract class MvvmCross.Base.MvxMainThreadAsyncDispatcher : MvxMainThreadDispatcher {
    public bool IsOnMainThread { get; }
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteOnMainThreadAsync(Action action, bool maskExceptions);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MvvmCross.Base.MvxMainThreadAsyncDispatcher/<ExecuteOnMainThreadAsync>d__1")]
public sealed virtual Task ExecuteOnMainThreadAsync(Func`1<Task> action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class MvvmCross.Base.MvxMainThreadDispatcher : MvxSingleton`1<IMvxMainThreadDispatcher> {
    public bool IsOnMainThread { get; }
    public static void ExceptionMaskedAction(Action action, bool maskExceptions);
    public abstract virtual bool RequestMainThreadAction(Action action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
public abstract class MvvmCross.Base.MvxMainThreadDispatchingObject : object {
    protected IMvxMainThreadAsyncDispatcher AsyncDispatcher { get; }
    protected IMvxMainThreadAsyncDispatcher get_AsyncDispatcher();
    protected void InvokeOnMainThread(Action action, bool maskExceptions);
    protected Task InvokeOnMainThreadAsync(Action action, bool maskExceptions);
}
[ExtensionAttribute]
public static class MvvmCross.Base.MvxObjectExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void DisposeIfDisposable(object thing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Base.MvxParser : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FullText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentIndex>k__BackingField;
    [NullableAttribute("2")]
protected string FullText { get; private set; }
    protected int CurrentIndex { get; private set; }
    protected bool IsComplete { get; }
    protected char CurrentChar { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_FullText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FullText(string value);
    [CompilerGeneratedAttribute]
protected int get_CurrentIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentIndex(int value);
    [NullableContextAttribute("2")]
protected virtual void Reset(string textToParse);
    protected bool get_IsComplete();
    protected char get_CurrentChar();
    protected string ReadQuotedString();
    protected UInt32 ReadUnsignedInteger();
    protected char ReadEscapedCharacter();
    private char ReadFourDigitUnicodeCharacter();
    private string ReadNDigits(int count);
    protected void MoveNext(UInt32 increment);
    protected void SkipWhitespaceAndCharacters(Char[] toSkip);
    protected void SkipWhitespaceAndCharacters(IEnumerable`1<char> toSkip);
    protected void SkipWhitespaceAndCharacters(Dictionary`2<char, bool> toSkip);
    protected void SkipWhitespace();
    private static bool IsWhiteSpaceOrCharacter(char charToTest, Dictionary`2<char, bool> toSkip);
    private static bool IsWhiteSpaceOrCharacter(char charToTest, IEnumerable`1<char> toSkip);
    [NullableContextAttribute("2")]
protected object ReadValue();
    [NullableContextAttribute("2")]
protected bool TryReadValue(AllowNonQuotedText allowNonQuotedText, Object& value);
    protected bool TestKeywordInPeekString(string uppercaseKeyword, string peekString);
    protected bool TryReadNull();
    protected bool TryReadBoolean(Boolean& booleanValue);
    protected string SafePeekString(int length);
    protected ValueType ReadNumber();
    protected ValueType NumberFromText(string numberText);
    protected ValueType NumberFromText(string numberText, bool decimalPeriodSeen);
    protected object ReadEnumerationValue(Type enumerationType, bool ignoreCase);
    protected string ReadTextUntilWhitespaceOr(Char[] terminatingCharacters);
    protected string ReadTextUntil(Char[] terminatingCharacters);
    protected string ReadValidCSharpName();
    protected bool IsValidFirstCharacterOfCSharpName(char firstChar);
    protected bool IsValidMidCharacterOfCSharpName(char firstChar);
    private void CheckFullTextValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxPropertyNameExtensions : object {
    private static string WrongExpressionMessage;
    private static string WrongUnaryExpressionMessage;
    [ExtensionAttribute]
public static string GetPropertyNameFromExpression(object target, Expression`1<Func`1<T>> expression);
    [NullableContextAttribute("2")]
private static MemberExpression FindMemberExpression(Expression`1<Func`1<T>> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxReflectionExtensions : object {
    [ExtensionAttribute]
public static Attribute[] GetCustomAttributes(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static bool IsInstanceOfType(Type type, object obj);
    [ExtensionAttribute]
private static bool IsMarshalByRefObject(object obj);
    [ExtensionAttribute]
public static MethodInfo GetAddMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetRemoveMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo property, bool nonPublic);
}
public abstract class MvvmCross.Base.MvxSingleton : object {
    [NullableAttribute("1")]
private static List`1<MvxSingleton> Singletons;
    private static MvxSingleton();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool isDisposing);
    public static void ClearAllSingletons();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.Base.MvxSingleton`1 : MvxSingleton {
    [CompilerGeneratedAttribute]
private static TInterface <Instance>k__BackingField;
    public static TInterface Instance { get; private set; }
    [CompilerGeneratedAttribute]
public static TInterface get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(TInterface value);
    protected virtual void Dispose(bool isDisposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.Base.MvxSingletonCache : MvxSingleton`1<IMvxSingletonCache> {
    private bool _inpcInterceptorResolveAttempted;
    [NullableAttribute("2")]
private IMvxInpcInterceptor _inpcInterceptor;
    [NullableAttribute("2")]
private IMvxStringToTypeParser _parser;
    [NullableAttribute("2")]
private IMvxSettings _settings;
    public IMvxInpcInterceptor InpcInterceptor { get; }
    public IMvxStringToTypeParser Parser { get; }
    public IMvxSettings Settings { get; }
    public static MvxSingletonCache Initialize();
    public sealed virtual IMvxInpcInterceptor get_InpcInterceptor();
    public sealed virtual IMvxStringToTypeParser get_Parser();
    public sealed virtual IMvxSettings get_Settings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Base.MvxStopWatch : object {
    [NullableAttribute("2")]
private ILogger _log;
    private string _message;
    private int _startTickCount;
    private MvxStopWatch(string text, Object[] args);
    private MvxStopWatch(string tag, string text, Object[] args);
    public sealed virtual void Dispose();
    public static MvxStopWatch Create(string text, Object[] args);
    public static MvxStopWatch CreateWithTag(string tag, string text, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Base.MvxValueEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; private set; }
    public MvxValueEventArgs`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
}
[AttributeUsageAttribute("128")]
public class MvvmCross.Binding.Attributes.MvxSetToNullAfterBindingAttribute : Attribute {
}
public interface MvvmCross.Binding.Binders.IMvxAutoValueConverters {
    public abstract virtual IMvxValueConverter Find(Type viewModelType, Type viewType);
    public abstract virtual void Register(Type viewModelType, Type viewType, IMvxValueConverter converter);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Binding.Binders.IMvxBinder {
    public abstract virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, string bindingText);
    public abstract virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
    public abstract virtual IEnumerable`1<IMvxUpdateableBinding> LanguageBind(object source, object target, string bindingText);
    public abstract virtual IMvxUpdateableBinding BindSingle(object source, object target, string targetPropertyName, string partialBindingDescription);
    public abstract virtual IMvxUpdateableBinding BindSingle(MvxBindingRequest bindingRequest);
}
public interface MvvmCross.Binding.Binders.IMvxBindingDescriptionParser {
    public abstract virtual IEnumerable`1<MvxBindingDescription> Parse(string text);
    public abstract virtual IEnumerable`1<MvxBindingDescription> LanguageParse(string text);
    public abstract virtual MvxBindingDescription ParseSingle(string text);
    public abstract virtual MvxBindingDescription SerializableBindingToBinding(string targetName, MvxSerializableBindingDescription description);
}
public interface MvvmCross.Binding.Binders.IMvxNamedInstanceLookup`1 {
    public abstract virtual T Find(string name);
}
public interface MvvmCross.Binding.Binders.IMvxNamedInstanceRegistryFiller`1 {
    public abstract virtual string FindName(Type type);
    public abstract virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    public abstract virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Assembly assembly);
}
public interface MvvmCross.Binding.Binders.IMvxValueConverterLookup {
}
public interface MvvmCross.Binding.Binders.IMvxValueConverterRegistryFiller {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Binding.Binders.MvxAutoValueConverters : object {
    private Dictionary`2<Key, IMvxValueConverter> _lookup;
    public sealed virtual IMvxValueConverter Find(Type viewModelType, Type viewType);
    public sealed virtual void Register(Type viewModelType, Type viewType, IMvxValueConverter converter);
}
public class MvvmCross.Binding.Binders.MvxFromTextBinder : object {
    public sealed virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, string bindingText);
    public sealed virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
    public sealed virtual IEnumerable`1<IMvxUpdateableBinding> LanguageBind(object source, object target, string bindingText);
    public sealed virtual IMvxUpdateableBinding BindSingle(object source, object target, string targetPropertyName, string partialBindingDescription);
    public sealed virtual IMvxUpdateableBinding BindSingle(MvxBindingRequest bindingRequest);
}
public class MvvmCross.Binding.Binders.MvxNamedInstanceRegistry`1 : object {
    private Dictionary`2<string, T> _converters;
    public sealed virtual T Find(string name);
    public sealed virtual void AddOrOverwrite(string name, T instance);
    public sealed virtual void AddOrOverwriteFrom(Assembly assembly);
}
public class MvvmCross.Binding.Binders.MvxNamedInstanceRegistryFiller`1 : object {
    protected virtual void FillFromInstance(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    protected virtual void FillFromStatic(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    public virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    public virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Assembly assembly);
    public virtual string FindName(Type type);
    protected static string RemoveHead(string name, string word);
    protected static string RemoveTail(string name, string word);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType2`2<Type, string> <FillFrom>b__3_3(Type type);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Binders.MvxRegistryFillerExtensions : object {
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IEnumerable`1<Assembly> assemblies, IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IEnumerable`1<Assembly> assemblies);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, IEnumerable`1<Assembly> assemblies);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, Assembly assembly);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, Assembly assembly);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, Type type);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, Type type);
}
public class MvvmCross.Binding.Binders.MvxValueConverterRegistry : MvxNamedInstanceRegistry`1<IMvxValueConverter> {
}
public class MvvmCross.Binding.Binders.MvxValueConverterRegistryFiller : MvxNamedInstanceRegistryFiller`1<IMvxValueConverter> {
    public virtual string FindName(Type type);
}
public interface MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription {
    public object ClearBindingKey { get; public set; }
    public abstract virtual object get_ClearBindingKey();
    public abstract virtual void set_ClearBindingKey(object value);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingContext {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataContextChanged(EventHandler value);
    public abstract virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, IEnumerable`1<MvxBindingDescription> firstBindingValue);
    public abstract virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, string firstBindingValue);
    public abstract virtual void RegisterBinding(object target, IMvxUpdateableBinding binding);
    public abstract virtual void RegisterBindingsWithClearKey(object clearKey, IEnumerable`1<KeyValuePair`2<object, IMvxUpdateableBinding>> bindings);
    public abstract virtual void RegisterBindingWithClearKey(object clearKey, object target, IMvxUpdateableBinding binding);
    public abstract virtual void ClearBindings(object clearKey);
    public abstract virtual void ClearAllBindings();
    public abstract virtual void DelayBind(Action action);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingContextOwner {
    public IMvxBindingContext BindingContext { get; public set; }
    public abstract virtual IMvxBindingContext get_BindingContext();
    public abstract virtual void set_BindingContext(IMvxBindingContext value);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingContextStack`1 {
    public TContext Current { get; }
    public abstract virtual TContext get_Current();
    public abstract virtual void Push(TContext context);
    public abstract virtual TContext Pop();
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingNameLookup {
    public abstract virtual string DefaultFor(Type type);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingNameRegistry {
    public abstract virtual void AddOrOverwrite(Type type, string name);
    public abstract virtual void AddOrOverwrite(Expression`1<Func`2<T, object>> nameExpression);
}
public class MvvmCross.Binding.BindingContext.MvxBaseFluentBindingDescription`1 : MvxApplicableTo`1<TTarget> {
    private TTarget _target;
    private IMvxBindingContextOwner _bindingContextOwner;
    private MvxBindingDescription _bindingDescription;
    private MvxSourceStepDescription _sourceStepDescription;
    private ISourceSpec<TTarget> _sourceSpec;
    [CompilerGeneratedAttribute]
private object <ClearBindingKey>k__BackingField;
    protected object ClearBindingKey { get; protected set; }
    private object MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription.ClearBindingKey { get; private set; }
    protected MvxBindingDescription BindingDescription { get; }
    protected MvxSourceStepDescription SourceStepDescription { get; }
    public MvxBaseFluentBindingDescription`1(IMvxBindingContextOwner bindingContextOwner, TTarget target);
    [CompilerGeneratedAttribute]
protected object get_ClearBindingKey();
    [CompilerGeneratedAttribute]
protected void set_ClearBindingKey(object value);
    private sealed virtual override object MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription.get_ClearBindingKey();
    private sealed virtual override void MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription.set_ClearBindingKey(object value);
    protected MvxBindingDescription get_BindingDescription();
    protected MvxSourceStepDescription get_SourceStepDescription();
    protected void SetFreeTextPropertyPath(string sourcePropertyPath);
    protected void SetKnownTextPropertyPath(string sourcePropertyPath);
    protected void SetCombiner(IMvxValueCombiner combiner, String[] properties, bool useParser);
    protected void SourceOverwrite(MvxBindingDescription bindingDescription);
    protected void FullOverwrite(MvxBindingDescription bindingDescription);
    protected static string TargetPropertyName(Expression`1<Func`2<TTarget, object>> targetPropertyPath);
    protected static string SourcePropertyPath(Expression`1<Func`2<TSource, object>> sourceProperty);
    protected static IMvxValueConverter ValueConverterFromName(string converterName);
    protected MvxBindingDescription CreateBindingDescription();
    public virtual void Apply();
    public virtual void ApplyTo(TTarget what);
    protected void EnsureTargetNameSet();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.BindingContext.MvxBindExtensions : object {
    [ExtensionAttribute]
public static MvxInlineBindingTarget`1<TViewModel> CreateInlineBindingTarget(IMvxBindingContextOwner bindingContextOwner);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, string descriptionText);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, string converterName, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<T, object>> targetPropertyPath, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, string converterName, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<T, object>> targetPropertyPath, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, string targetPath, string sourcePath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, IMvxBindingContextOwner bindingContextOwner, string descriptionText);
    [ExtensionAttribute]
public static T Bind(T element, IMvxBindingContextOwner bindingContextOwner, IEnumerable`1<MvxBindingDescription> descriptions);
}
public class MvvmCross.Binding.BindingContext.MvxBindingContext : object {
    private List`1<Action> _delayedActions;
    private List`1<TargetAndBinding> _directBindings;
    private List`1<KeyValuePair`2<object, IList`1<TargetAndBinding>>> _viewBindings;
    private object _dataContext;
    private IMvxBinder _binder;
    [CompilerGeneratedAttribute]
private EventHandler DataContextChanged;
    protected IMvxBinder Binder { get; }
    public object DataContext { get; public set; }
    public MvxBindingContext(object dataContext);
    public MvxBindingContext(IDictionary`2<object, string> firstBindings);
    public MvxBindingContext(object dataContext, IDictionary`2<object, string> firstBindings);
    public MvxBindingContext(IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> firstBindings);
    public MvxBindingContext(object dataContext, IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> firstBindings);
    public MvxBindingContext Init(object dataContext, IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> firstBindings);
    public MvxBindingContext Init(object dataContext, IDictionary`2<object, string> firstBindings);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, IEnumerable`1<MvxBindingDescription> firstBindingValue);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, string firstBindingValue);
    private void AddDelayedAction(object key, string value);
    private void AddDelayedAction(object key, IEnumerable`1<MvxBindingDescription> value);
    private void AddDelayedAction(KeyValuePair`2<object, string> kvp);
    private void AddDelayedAction(KeyValuePair`2<object, IEnumerable`1<MvxBindingDescription>> kvp);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected IMvxBinder get_Binder();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataContextChanged(EventHandler value);
    protected virtual void OnDataContextChange();
    public virtual void DelayBind(Action action);
    public virtual void RegisterBinding(object target, IMvxUpdateableBinding binding);
    public virtual void RegisterBindingsWithClearKey(object clearKey, IEnumerable`1<KeyValuePair`2<object, IMvxUpdateableBinding>> bindings);
    public virtual void RegisterBindingWithClearKey(object clearKey, object target, IMvxUpdateableBinding binding);
    public virtual void ClearBindings(object clearKey);
    public virtual void ClearAllBindings();
    protected virtual void ClearAllDelayedBindings();
    protected virtual void ClearAllDirectBindings();
    protected virtual void ClearAllViewBindings();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.BindingContext.MvxBindingContextOwnerExtensions : object {
    public static IMvxLanguageBindingParser LanguageParser { get; }
    public static IMvxPropertyExpressionParser PropertyExpressionParser { get; }
    public static IMvxValueConverterLookup ValueConverterLookup { get; }
    public static IMvxBindingNameLookup DefaultBindingNameLookup { get; }
    public static IMvxBinder Binder { get; }
    [ExtensionAttribute]
public static void ClearBindings(IMvxBindingContextOwner owner, object target);
    [ExtensionAttribute]
public static void ClearAllBindings(IMvxBindingContextOwner owner);
    [ExtensionAttribute]
public static void CreateBindingContext(IMvxBindingContextOwner view);
    [ExtensionAttribute]
public static void CreateBindingContext(IMvxBindingContextOwner view, string bindingText);
    [ExtensionAttribute]
public static void CreateBindingContext(IMvxBindingContextOwner view, IEnumerable`1<MvxBindingDescription> bindings);
    [ExtensionAttribute]
public static void DelayBind(IMvxBindingContextOwner view, Action bindingAction);
    [ExtensionAttribute]
public static void AddBinding(IMvxBindingContextOwner view, object target, IMvxUpdateableBinding binding, object clearKey);
    [ExtensionAttribute]
public static void AddBinding(IMvxBindingContextOwner view, object target, MvxBindingDescription bindingDescription, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, object target, IEnumerable`1<IMvxUpdateableBinding> bindings, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, object target, string bindingText, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, object target, IEnumerable`1<MvxBindingDescription> bindingDescriptions, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, IDictionary`2<object, string> bindingMap, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> bindingMap, object clearKey);
    [ExtensionAttribute]
public static MvxFluentBindingDescriptionSet`2<TTarget, TSource> CreateBindingSet(TTarget target);
    [ExtensionAttribute]
public static MvxFluentBindingDescriptionSet`2<TTarget, TSource> CreateBindingSet(TTarget target, string clearBindingKey);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`1<TTarget> CreateBinding(TTarget target);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`1<TTarget> CreateBinding(IMvxBindingContextOwner contextOwner, TTarget target);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, string sourceKey);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, string sourceKey, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, string sourceKey, Expression`1<Func`2<TViewModel, IMvxTextProvider>> textProvider, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, Expression`1<Func`2<TTarget, object>> targetPropertyExpression, string sourceKey, string sourcePropertyName, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, Expression`1<Func`2<TTarget, object>> targetPropertyExpression, string sourceKey, Expression`1<Func`2<TViewModel, IMvxLanguageBinder>> sourcePropertyExpression, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, string targetPropertyName, string sourceKey, string sourcePropertyName, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, object target, string targetPropertyName, string sourceKey, string sourcePropertyName, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void AddLangBindings(IMvxBindingContextOwner view, object target, string bindingText);
    [ExtensionAttribute]
public static void AddLangBindings(IMvxBindingContextOwner view, IDictionary`2<object, string> lookup);
    public static IMvxLanguageBindingParser get_LanguageParser();
    public static IMvxPropertyExpressionParser get_PropertyExpressionParser();
    public static IMvxValueConverterLookup get_ValueConverterLookup();
    public static IMvxBindingNameLookup get_DefaultBindingNameLookup();
    public static IMvxBinder get_Binder();
}
public class MvvmCross.Binding.BindingContext.MvxBindingContextStack`1 : Stack`1<TContext> {
    public TContext Current { get; }
    public sealed virtual TContext get_Current();
    private sealed virtual override void MvvmCross.Binding.BindingContext.IMvxBindingContextStack<TContext>.Push(TContext context);
    private sealed virtual override TContext MvvmCross.Binding.BindingContext.IMvxBindingContextStack<TContext>.Pop();
}
public class MvvmCross.Binding.BindingContext.MvxBindingContextStackRegistration`1 : object {
    protected IMvxBindingContextStack`1<TBindingContext> Stack { get; }
    public MvxBindingContextStackRegistration`1(TBindingContext toRegister);
    protected IMvxBindingContextStack`1<TBindingContext> get_Stack();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class MvvmCross.Binding.BindingContext.MvxBindingNameRegistry : object {
    private Dictionary`2<Type, string> _lookup;
    public sealed virtual string DefaultFor(Type type);
    private bool TryDefaultFor(Type type, String& toReturn, bool includeInterfaces);
    public sealed virtual void AddOrOverwrite(Type type, string name);
    public sealed virtual void AddOrOverwrite(Expression`1<Func`2<T, object>> nameExpression);
}
public class MvvmCross.Binding.BindingContext.MvxFluentBindingDescription`1 : MvxBaseFluentBindingDescription`1<TTarget> {
    public MvxFluentBindingDescription`1(IMvxBindingContextOwner bindingContextOwner, TTarget target);
    public MvxFluentBindingDescription`1<TTarget> For(string targetPropertyName);
    public MvxFluentBindingDescription`1<TTarget> For(Expression`1<Func`2<TTarget, object>> targetPropertyPath);
    public MvxFluentBindingDescription`1<TTarget> TwoWay();
    public MvxFluentBindingDescription`1<TTarget> OneWay();
    public MvxFluentBindingDescription`1<TTarget> OneWayToSource();
    public MvxFluentBindingDescription`1<TTarget> OneTime();
    public MvxFluentBindingDescription`1<TTarget> Mode(MvxBindingMode mode);
    public MvxFluentBindingDescription`1<TTarget> To(string sourcePropertyPath);
    public MvxFluentBindingDescription`1<TTarget> To(Expression`1<Func`2<TSource, object>> sourceProperty);
    public MvxFluentBindingDescription`1<TTarget> CommandParameter(object parameter);
    public MvxFluentBindingDescription`1<TTarget> WithConversion(string converterName, object converterParameter);
    public MvxFluentBindingDescription`1<TTarget> WithConversion(IMvxValueConverter converter, object converterParameter);
    public MvxFluentBindingDescription`1<TTarget> WithConversion(object converterParameter);
    public MvxFluentBindingDescription`1<TTarget> WithFallback(object fallback);
    public MvxFluentBindingDescription`1<TTarget> SourceDescribed(string bindingDescription);
    public MvxFluentBindingDescription`1<TTarget> SourceDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`1<TTarget> FullyDescribed(string bindingDescription);
    public MvxFluentBindingDescription`1<TTarget> FullyDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`1<TTarget> WithClearBindingKey(object clearBindingKey);
}
public class MvvmCross.Binding.BindingContext.MvxFluentBindingDescription`2 : MvxBaseFluentBindingDescription`1<TTarget> {
    public MvxFluentBindingDescription`2(IMvxBindingContextOwner bindingContextOwner, TTarget target);
    public MvxFluentBindingDescription`2<TTarget, TSource> For(string targetPropertyName);
    public MvxFluentBindingDescription`2<TTarget, TSource> For(Expression`1<Func`2<TTarget, object>> targetPropertyPath);
    public MvxFluentBindingDescription`2<TTarget, TSource> TwoWay();
    public MvxFluentBindingDescription`2<TTarget, TSource> OneWay();
    public MvxFluentBindingDescription`2<TTarget, TSource> OneWayToSource();
    public MvxFluentBindingDescription`2<TTarget, TSource> OneTime();
    public MvxFluentBindingDescription`2<TTarget, TSource> Mode(MvxBindingMode mode);
    public MvxFluentBindingDescription`2<TTarget, TSource> To(string sourcePropertyPath);
    public MvxFluentBindingDescription`2<TTarget, TSource> To(Expression`1<Func`2<TSource, object>> sourceProperty);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(string combinerName, Expression`1[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(string combinerName, String[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(IMvxValueCombiner combiner, Expression`1[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(IMvxValueCombiner combiner, String[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(Expression`1[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(String[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> CommandParameter(object parameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithConversion(string converterName, object converterParameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithConversion(IMvxValueConverter converter, object converterParameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithConversion(object converterParameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithFallback(object fallback);
    public MvxFluentBindingDescription`2<TTarget, TSource> SourceDescribed(string bindingDescription);
    public MvxFluentBindingDescription`2<TTarget, TSource> SourceDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`2<TTarget, TSource> FullyDescribed(string bindingDescription);
    public MvxFluentBindingDescription`2<TTarget, TSource> FullyDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithClearBindingKey(object clearBindingKey);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.BindingContext.MvxFluentBindingDescriptionExtensions : object {
    [ExtensionAttribute]
public static MvxFluentBindingDescription`2<TTarget, TSource> ToLocalizationId(MvxFluentBindingDescription`2<TTarget, TSource> bindingDescription, string localizationId);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`2<TTarget, TSource> WithDictionaryConversion(MvxFluentBindingDescription`2<TTarget, TSource> bindingDescription, IDictionary`2<TFrom, TTo> converterParameter);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`2<TTarget, TSource> WithDictionaryConversion(MvxFluentBindingDescription`2<TTarget, TSource> bindingDescription, IDictionary`2<TFrom, TTo> converterParameter, TTo fallback);
}
public class MvvmCross.Binding.BindingContext.MvxFluentBindingDescriptionSet`2 : MvxApplicable {
    private List`1<IMvxApplicable> _applicables;
    private TOwningTarget _bindingContextOwner;
    private string _clearBindingKey;
    public MvxFluentBindingDescriptionSet`2(TOwningTarget bindingContextOwner);
    public MvxFluentBindingDescriptionSet`2(TOwningTarget bindingContextOwner, string clearBindingKey);
    public MvxFluentBindingDescription`2<TOwningTarget, TSource> Bind();
    public MvxFluentBindingDescription`2<TChildTarget, TSource> Bind(TChildTarget childTarget);
    public MvxFluentBindingDescription`2<TChildTarget, TSource> Bind(TChildTarget childTarget, string bindingDescription);
    public MvxFluentBindingDescription`2<TChildTarget, TSource> Bind(TChildTarget childTarget, MvxBindingDescription bindingDescription);
    public virtual void Apply();
    public void ApplyWithClearBindingKey(object clearBindingKey);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class MvvmCross.Binding.BindingContext.MvxInlineBindingTarget`1 : object {
    [CompilerGeneratedAttribute]
private IMvxBindingContextOwner <BindingContextOwner>k__BackingField;
    public IMvxBindingContextOwner BindingContextOwner { get; private set; }
    public MvxInlineBindingTarget`1(IMvxBindingContextOwner bindingContextOwner);
    [CompilerGeneratedAttribute]
public IMvxBindingContextOwner get_BindingContextOwner();
    [CompilerGeneratedAttribute]
private void set_BindingContextOwner(IMvxBindingContextOwner value);
}
public class MvvmCross.Binding.BindingContext.MvxTaskBasedBindingContext : object {
    private List`1<Action> _delayedActions;
    private List`1<TargetAndBinding> _directBindings;
    private List`1<KeyValuePair`2<object, IList`1<TargetAndBinding>>> _viewBindings;
    private object _dataContext;
    private IMvxBinder _binder;
    [CompilerGeneratedAttribute]
private bool <RunSynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler DataContextChanged;
    public bool RunSynchronously { get; public set; }
    protected IMvxBinder Binder { get; }
    public object DataContext { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RunSynchronously();
    [CompilerGeneratedAttribute]
public void set_RunSynchronously(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataContextChanged(EventHandler value);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, IEnumerable`1<MvxBindingDescription> firstBindingValue);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, string firstBindingValue);
    private void AddDelayedAction(object key, string value);
    private void AddDelayedAction(object key, IEnumerable`1<MvxBindingDescription> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected IMvxBinder get_Binder();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    protected virtual void OnDataContextChange();
    private void SetBindings(List`1<KeyValuePair`2<object, IList`1<TargetAndBinding>>> viewBindings, List`1<TargetAndBinding> bindings);
    public virtual void DelayBind(Action action);
    public virtual void RegisterBinding(object target, IMvxUpdateableBinding binding);
    public virtual void RegisterBindingsWithClearKey(object clearKey, IEnumerable`1<KeyValuePair`2<object, IMvxUpdateableBinding>> bindings);
    public virtual void RegisterBindingWithClearKey(object clearKey, object target, IMvxUpdateableBinding binding);
    public virtual void ClearBindings(object clearKey);
    public virtual void ClearAllBindings();
    protected virtual void ClearAllDelayedBindings();
    protected virtual void ClearAllDirectBindings();
    protected virtual void ClearAllViewBindings();
}
public interface MvvmCross.Binding.Bindings.IMvxBinding {
}
public interface MvvmCross.Binding.Bindings.IMvxUpdateableBinding {
    public object DataContext { get; public set; }
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
}
public abstract class MvvmCross.Binding.Bindings.MvxBinding : object {
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Binding.Bindings.MvxBindingDescription : object {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxSourceStepDescription <Source>k__BackingField;
    public string TargetName { get; public set; }
    public MvxBindingMode Mode { get; public set; }
    public MvxSourceStepDescription Source { get; public set; }
    public MvxBindingDescription(string targetName, string sourcePropertyPath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public MvxBindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(MvxBindingMode value);
    [CompilerGeneratedAttribute]
public MvxSourceStepDescription get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(MvxSourceStepDescription value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Bindings.MvxBindingModeExtensions : object {
    [ExtensionAttribute]
public static MvxBindingMode IfDefault(MvxBindingMode bindingMode, MvxBindingMode modeIfDefault);
    [ExtensionAttribute]
public static bool RequireSourceObservation(MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static bool RequiresTargetObservation(MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static bool RequireTargetUpdateOnFirstBind(MvxBindingMode bindingMode);
}
public class MvvmCross.Binding.Bindings.MvxCompositeBinding : MvxBinding {
    private List`1<IMvxBinding> _bindings;
    public MvxCompositeBinding(IMvxBinding[] args);
    public void Add(IMvxBinding[] args);
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Binding.Bindings.MvxFullBinding : MvxBinding {
    private MvxBindingDescription _bindingDescription;
    private IMvxSourceStep _sourceStep;
    private IMvxTargetBinding _targetBinding;
    private object _targetLocker;
    private object _dataContext;
    private EventHandler _sourceBindingOnChanged;
    private EventHandler`1<MvxTargetChangedEventArgs> _targetBindingOnValueChanged;
    private object _defaultTargetValue;
    private CancellationTokenSource _cancelSource;
    private IMvxSourceStepFactory SourceStepFactory { get; }
    private IMvxTargetBindingFactory TargetBindingFactory { get; }
    private IMvxMainThreadAsyncDispatcher dispatcher { get; }
    public object DataContext { get; public set; }
    protected bool NeedToObserveSourceChanges { get; }
    protected bool NeedToObserveTargetChanges { get; }
    protected bool NeedToUpdateTargetOnBind { get; }
    protected MvxBindingMode ActualBindingMode { get; }
    public MvxFullBinding(MvxBindingRequest bindingRequest);
    private IMvxSourceStepFactory get_SourceStepFactory();
    private IMvxTargetBindingFactory get_TargetBindingFactory();
    private IMvxMainThreadAsyncDispatcher get_dispatcher();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    protected virtual void ClearSourceBinding();
    private void CreateSourceBinding(object source);
    private void UpdateTargetOnBind();
    protected virtual void ClearTargetBinding();
    private void CreateTargetBinding(object target);
    [AsyncStateMachineAttribute("MvvmCross.Binding.Bindings.MvxFullBinding/<UpdateTargetFromSource>d__24")]
private void UpdateTargetFromSource(object value, CancellationToken cancel);
    private void UpdateSourceFromTarget(object value);
    protected bool get_NeedToObserveSourceChanges();
    protected bool get_NeedToObserveTargetChanges();
    protected bool get_NeedToUpdateTargetOnBind();
    protected MvxBindingMode get_ActualBindingMode();
    protected virtual void Dispose(bool isDisposing);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <CreateSourceBinding>b__20_0(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <CreateTargetBinding>b__23_0(object sender, MvxTargetChangedEventArgs args);
}
public abstract class MvvmCross.Binding.Bindings.Source.Chained.MvxChainedSourceBinding : MvxPropertyInfoSourceBinding {
    private IList`1<MvxPropertyToken> _childTokens;
    private IMvxSourceBinding _currentChildBinding;
    private IMvxSourceBindingFactory SourceBindingFactory { get; }
    public Type SourceType { get; }
    protected MvxChainedSourceBinding(object source, PropertyInfo propertyInfo, IList`1<MvxPropertyToken> childTokens);
    protected virtual void Dispose(bool isDisposing);
    private IMvxSourceBindingFactory get_SourceBindingFactory();
    public virtual Type get_SourceType();
    protected void UpdateChildBinding();
    protected abstract virtual Object[] PropertyIndexParameters();
    private void ChildSourceBindingChanged(object sender, EventArgs e);
    protected virtual void OnBoundPropertyChanged();
    public virtual object GetValue();
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Source.Chained.MvxIndexerChainedSourceBinding : MvxChainedSourceBinding {
    private MvxIndexerPropertyToken _indexerPropertyToken;
    public MvxIndexerChainedSourceBinding(object source, PropertyInfo itemPropertyInfo, MvxIndexerPropertyToken indexerPropertyToken, IList`1<MvxPropertyToken> childTokens);
    protected virtual Object[] PropertyIndexParameters();
}
public class MvvmCross.Binding.Bindings.Source.Chained.MvxSimpleChainedSourceBinding : MvxChainedSourceBinding {
    public MvxSimpleChainedSourceBinding(object source, PropertyInfo propertyInfo, IList`1<MvxPropertyToken> childTokens);
    protected virtual Object[] PropertyIndexParameters();
}
public interface MvvmCross.Binding.Bindings.Source.Construction.IMvxSourceBindingFactory {
    public abstract virtual IMvxSourceBinding CreateBinding(object source, string combinedPropertyName);
    public abstract virtual IMvxSourceBinding CreateBinding(object source, IList`1<MvxPropertyToken> tokens);
}
public interface MvvmCross.Binding.Bindings.Source.Construction.IMvxSourceBindingFactoryExtension {
    public abstract virtual bool TryCreateBinding(object source, MvxPropertyToken propertyToken, List`1<MvxPropertyToken> remainingTokens, IMvxSourceBinding& result);
}
public interface MvvmCross.Binding.Bindings.Source.Construction.IMvxSourceBindingFactoryExtensionHost {
    public IList`1<IMvxSourceBindingFactoryExtension> Extensions { get; }
    public abstract virtual IList`1<IMvxSourceBindingFactoryExtension> get_Extensions();
}
public class MvvmCross.Binding.Bindings.Source.Construction.MvxPropertySourceBindingFactoryExtension : object {
    private static ConcurrentDictionary`2<int, PropertyInfo> PropertyInfoCache;
    private static MvxPropertySourceBindingFactoryExtension();
    public sealed virtual bool TryCreateBinding(object source, MvxPropertyToken currentToken, List`1<MvxPropertyToken> remainingTokens, IMvxSourceBinding& result);
    protected virtual MvxChainedSourceBinding CreateChainedBinding(object source, MvxPropertyToken propertyToken, List`1<MvxPropertyToken> remainingTokens);
    protected virtual IMvxSourceBinding CreateLeafBinding(object source, MvxPropertyToken propertyToken);
    protected PropertyInfo FindPropertyInfo(object source, string propertyName);
}
public class MvvmCross.Binding.Bindings.Source.Construction.MvxSourceBindingFactory : object {
    private IMvxSourcePropertyPathParser _propertyPathParser;
    private List`1<IMvxSourceBindingFactoryExtension> _extensions;
    protected IMvxSourcePropertyPathParser SourcePropertyPathParser { get; }
    public IList`1<IMvxSourceBindingFactoryExtension> Extensions { get; }
    protected IMvxSourcePropertyPathParser get_SourcePropertyPathParser();
    protected bool TryCreateBindingFromExtensions(object source, MvxPropertyToken propertyToken, List`1<MvxPropertyToken> remainingTokens, IMvxSourceBinding& result);
    public sealed virtual IMvxSourceBinding CreateBinding(object source, string combinedPropertyName);
    public sealed virtual IMvxSourceBinding CreateBinding(object source, IList`1<MvxPropertyToken> tokens);
    public sealed virtual IList`1<IMvxSourceBindingFactoryExtension> get_Extensions();
}
public interface MvvmCross.Binding.Bindings.Source.IMvxSourceBinding {
    public Type SourceType { get; }
    public abstract virtual Type get_SourceType();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
    public abstract virtual object GetValue();
}
public class MvvmCross.Binding.Bindings.Source.Leaf.MvxDirectToSourceBinding : MvxSourceBinding {
    public Type SourceType { get; }
    public MvxDirectToSourceBinding(object source);
    public virtual Type get_SourceType();
    public virtual void SetValue(object value);
    public virtual object GetValue();
}
public class MvvmCross.Binding.Bindings.Source.Leaf.MvxIndexerLeafPropertyInfoSourceBinding : MvxLeafPropertyInfoSourceBinding {
    private object _key;
    public MvxIndexerLeafPropertyInfoSourceBinding(object source, PropertyInfo itemPropertyInfo, MvxIndexerPropertyToken indexToken);
    protected virtual Object[] PropertyIndexParameters();
}
public abstract class MvvmCross.Binding.Bindings.Source.Leaf.MvxLeafPropertyInfoSourceBinding : MvxPropertyInfoSourceBinding {
    public Type SourceType { get; }
    protected MvxLeafPropertyInfoSourceBinding(object source, PropertyInfo propertyInfo);
    public virtual Type get_SourceType();
    protected virtual void OnBoundPropertyChanged();
    public virtual object GetValue();
    protected abstract virtual Object[] PropertyIndexParameters();
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Source.Leaf.MvxSimpleLeafPropertyInfoSourceBinding : MvxLeafPropertyInfoSourceBinding {
    public MvxSimpleLeafPropertyInfoSourceBinding(object source, PropertyInfo propertyInfo);
    protected virtual Object[] PropertyIndexParameters();
}
public class MvvmCross.Binding.Bindings.Source.MvxMissingSourceBinding : MvxSourceBinding {
    public Type SourceType { get; }
    public MvxMissingSourceBinding(object source);
    public virtual void SetValue(object value);
    public virtual Type get_SourceType();
    public virtual object GetValue();
}
public abstract class MvvmCross.Binding.Bindings.Source.MvxPropertyInfoSourceBinding : MvxSourceBinding {
    private PropertyInfo _propertyInfo;
    private string _propertyName;
    private IDisposable _subscription;
    protected string PropertyName { get; }
    protected string PropertyNameForChangedEvent { get; }
    protected PropertyInfo PropertyInfo { get; }
    protected bool IsIndexedProperty { get; }
    protected MvxPropertyInfoSourceBinding(object source, PropertyInfo propertyInfo);
    protected string get_PropertyName();
    protected string get_PropertyNameForChangedEvent();
    protected PropertyInfo get_PropertyInfo();
    protected bool get_IsIndexedProperty();
    protected virtual void Dispose(bool isDisposing);
    public void SourcePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected abstract virtual void OnBoundPropertyChanged();
}
public abstract class MvvmCross.Binding.Bindings.Source.MvxSourceBinding : MvxBinding {
    private object _source;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    protected object Source { get; }
    public Type SourceType { get; }
    protected MvxSourceBinding(object source);
    protected object get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(EventHandler value);
    public abstract virtual void SetValue(object value);
    public abstract virtual Type get_SourceType();
    public abstract virtual object GetValue();
    protected void FireChanged();
    protected bool EqualsCurrentValue(object testValue);
}
public class MvvmCross.Binding.Bindings.Source.MvxSourcePropertyBindingEventArgs : EventArgs {
    private object _value;
    public object Value { get; }
    public MvxSourcePropertyBindingEventArgs(object value);
    public MvxSourcePropertyBindingEventArgs(IMvxSourceBinding propertySourceBinding);
    public object get_Value();
}
public interface MvvmCross.Binding.Bindings.SourceSteps.IMvxSourceStep {
    public Type TargetType { get; public set; }
    public Type SourceType { get; }
    public object DataContext { get; public set; }
    public abstract virtual Type get_TargetType();
    public abstract virtual void set_TargetType(Type value);
    public abstract virtual Type get_SourceType();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
    public abstract virtual object GetValue();
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
}
public interface MvvmCross.Binding.Bindings.SourceSteps.IMvxSourceStepFactory {
    public abstract virtual IMvxSourceStep Create(MvxSourceStepDescription description);
}
public interface MvvmCross.Binding.Bindings.SourceSteps.IMvxSourceStepFactoryRegistry {
    public abstract virtual void AddOrOverwrite(Type type, IMvxSourceStepFactory factory);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxCombinerSourceStep : MvxSourceStep`1<MvxCombinerSourceStepDescription> {
    private List`1<IMvxSourceStep> _subSteps;
    private bool _isSubscribeToChangedEvents;
    public Type TargetType { get; public set; }
    public Type SourceType { get; }
    public MvxCombinerSourceStep(MvxCombinerSourceStepDescription description);
    protected virtual void Dispose(bool isDisposing);
    protected virtual void OnFirstChangeListenerAdded();
    public virtual Type get_TargetType();
    public virtual void set_TargetType(Type value);
    private void SetSubTypeTargetTypes();
    private void SubscribeToChangedEvents();
    protected virtual void OnLastChangeListenerRemoved();
    private void UnsubscribeFromChangedEvents();
    private void SubStepOnChanged(object sender, EventArgs args);
    protected virtual void OnDataContextChanged();
    public virtual Type get_SourceType();
    protected virtual void SetSourceValue(object sourceValue);
    protected virtual object GetSourceValue();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxCombinerSourceStepDescription : MvxSourceStepDescription {
    [CompilerGeneratedAttribute]
private IMvxValueCombiner <Combiner>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MvxSourceStepDescription> <InnerSteps>k__BackingField;
    public IMvxValueCombiner Combiner { get; public set; }
    public List`1<MvxSourceStepDescription> InnerSteps { get; public set; }
    [CompilerGeneratedAttribute]
public IMvxValueCombiner get_Combiner();
    [CompilerGeneratedAttribute]
public void set_Combiner(IMvxValueCombiner value);
    [CompilerGeneratedAttribute]
public List`1<MvxSourceStepDescription> get_InnerSteps();
    [CompilerGeneratedAttribute]
public void set_InnerSteps(List`1<MvxSourceStepDescription> value);
    public virtual string ToString();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxCombinerSourceStepFactory : MvxTypedSourceStepFactory`1<MvxCombinerSourceStepDescription> {
    protected virtual IMvxSourceStep TypedCreate(MvxCombinerSourceStepDescription description);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxLiteralSourceStep : MvxSourceStep`1<MvxLiteralSourceStepDescription> {
    public Type SourceType { get; }
    public MvxLiteralSourceStep(MvxLiteralSourceStepDescription description);
    public virtual Type get_SourceType();
    protected virtual void SetSourceValue(object sourceValue);
    protected virtual object GetSourceValue();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxLiteralSourceStepDescription : MvxSourceStepDescription {
    [CompilerGeneratedAttribute]
private object <Literal>k__BackingField;
    public object Literal { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Literal();
    [CompilerGeneratedAttribute]
public void set_Literal(object value);
    public virtual string ToString();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxLiteralSourceStepFactory : MvxTypedSourceStepFactory`1<MvxLiteralSourceStepDescription> {
    protected virtual IMvxSourceStep TypedCreate(MvxLiteralSourceStepDescription description);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxPathSourceStep : MvxSourceStep`1<MvxPathSourceStepDescription> {
    private IMvxSourceBinding _sourceBinding;
    private object _sourceLocker;
    private IMvxSourceBindingFactory SourceBindingFactory { get; }
    public Type SourceType { get; }
    public MvxPathSourceStep(MvxPathSourceStepDescription description);
    private IMvxSourceBindingFactory get_SourceBindingFactory();
    protected virtual void Dispose(bool isDisposing);
    public virtual Type get_SourceType();
    protected virtual void OnDataContextChanged();
    private void ClearPathSourceBinding();
    private void SourceBindingOnChanged(object sender, EventArgs args);
    protected virtual void SetSourceValue(object sourceValue);
    protected virtual object GetSourceValue();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxPathSourceStepDescription : MvxSourceStepDescription {
    [CompilerGeneratedAttribute]
private string <SourcePropertyPath>k__BackingField;
    public string SourcePropertyPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourcePropertyPath();
    [CompilerGeneratedAttribute]
public void set_SourcePropertyPath(string value);
    public virtual string ToString();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxPathSourceStepFactory : MvxTypedSourceStepFactory`1<MvxPathSourceStepDescription> {
    protected virtual IMvxSourceStep TypedCreate(MvxPathSourceStepDescription description);
}
public abstract class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStep : object {
    private MvxSourceStepDescription _description;
    private object _dataContext;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler _changed;
    protected MvxSourceStepDescription Description { get; }
    public Type TargetType { get; public set; }
    public Type SourceType { get; }
    public object DataContext { get; public set; }
    protected MvxSourceStep(MvxSourceStepDescription description);
    protected MvxSourceStepDescription get_Description();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    [CompilerGeneratedAttribute]
public virtual Type get_TargetType();
    [CompilerGeneratedAttribute]
public virtual void set_TargetType(Type value);
    public virtual Type get_SourceType();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    protected virtual void OnDataContextChanged();
    public sealed virtual void SetValue(object value);
    private object ApplyValueConverterTargetToSource(object value);
    private object ApplyValueConverterSourceToTarget(object value);
    protected abstract virtual void SetSourceValue(object sourceValue);
    protected virtual void SendSourcePropertyChanged();
    private object ConvertSourceToTarget(object value);
    [CompilerGeneratedAttribute]
private void add__changed(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__changed(EventHandler value);
    public sealed virtual void add_Changed(EventHandler value);
    public sealed virtual void remove_Changed(EventHandler value);
    protected virtual void OnLastChangeListenerRemoved();
    protected virtual void OnFirstChangeListenerAdded();
    public sealed virtual object GetValue();
    protected abstract virtual object GetSourceValue();
}
public abstract class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStep`1 : MvxSourceStep {
    protected T Description { get; }
    protected MvxSourceStep`1(T description);
    protected T get_Description();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStepDescription : object {
    [CompilerGeneratedAttribute]
private IMvxValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    public IMvxValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public object FallbackValue { get; public set; }
    [CompilerGeneratedAttribute]
public IMvxValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IMvxValueConverter value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public object get_FallbackValue();
    [CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStepFactory : object {
    private Dictionary`2<Type, IMvxSourceStepFactory> _subFactories;
    public sealed virtual void AddOrOverwrite(Type type, IMvxSourceStepFactory factory);
    public sealed virtual IMvxSourceStep Create(MvxSourceStepDescription description);
}
public abstract class MvvmCross.Binding.Bindings.SourceSteps.MvxTypedSourceStepFactory`1 : object {
    public sealed virtual IMvxSourceStep Create(MvxSourceStepDescription description);
    protected abstract virtual IMvxSourceStep TypedCreate(T description);
}
public interface MvvmCross.Binding.Bindings.Target.Construction.IMvxPluginTargetBindingFactory {
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public abstract virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
}
public interface MvvmCross.Binding.Bindings.Target.Construction.IMvxTargetBindingFactory {
    public abstract virtual IMvxTargetBinding CreateBinding(object target, string targetName);
}
public interface MvvmCross.Binding.Bindings.Target.Construction.IMvxTargetBindingFactoryRegistry {
    public abstract virtual void RegisterFactory(IMvxPluginTargetBindingFactory factory);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxCustomBindingFactory`1 : object {
    private Func`2<TTarget, IMvxTargetBinding> _targetBindingCreator;
    private string _targetFakePropertyName;
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public MvxCustomBindingFactory`1(string targetFakePropertyName, Func`2<TTarget, IMvxTargetBinding> targetBindingCreator);
    public sealed virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
    public sealed virtual IMvxTargetBinding CreateBinding(object target, string targetName);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxPropertyInfoTargetBindingFactory : object {
    private Func`3<object, PropertyInfo, IMvxTargetBinding> _bindingCreator;
    private string _targetName;
    private Type _targetType;
    protected Type TargetType { get; }
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public MvxPropertyInfoTargetBindingFactory(Type targetType, string targetName, Func`3<object, PropertyInfo, IMvxTargetBinding> bindingCreator);
    protected Type get_TargetType();
    public sealed virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
    public sealed virtual IMvxTargetBinding CreateBinding(object target, string targetName);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxSimplePropertyInfoTargetBindingFactory : object {
    private Type _bindingType;
    private MvxPropertyInfoTargetBindingFactory _innerFactory;
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public MvxSimplePropertyInfoTargetBindingFactory(Type bindingType, Type targetType, string targetName);
    public sealed virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
    public sealed virtual IMvxTargetBinding CreateBinding(object target, string targetName);
    private IMvxTargetBinding CreateTargetBinding(object target, PropertyInfo targetPropertyInfo);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxTargetBindingFactoryRegistry : object {
    private Dictionary`2<int, IMvxPluginTargetBindingFactory> _lookups;
    public virtual IMvxTargetBinding CreateBinding(object target, string targetName);
    protected virtual bool TryCreateReflectionBasedBinding(object target, string targetName, IMvxTargetBinding& binding);
    protected virtual bool TryCreateSpecificFactoryBinding(object target, string targetName, IMvxTargetBinding& binding);
    public sealed virtual void RegisterFactory(IMvxPluginTargetBindingFactory factory);
    private static int GenerateKey(Type type, string name);
    private IMvxPluginTargetBindingFactory FindSpecificFactory(Type type, string name);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Bindings.Target.Construction.MvxTargetBindingFactoryRegistryExtensions : object {
    [ExtensionAttribute]
public static void RegisterCustomBindingFactory(IMvxTargetBindingFactoryRegistry registry, string customName, Func`2<TView, IMvxTargetBinding> creator);
    [ExtensionAttribute]
public static void RegisterPropertyInfoBindingFactory(IMvxTargetBindingFactoryRegistry registry, Type bindingType, Type targetType, string targetName);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxTypeAndNamePair : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type Type { get; public set; }
    public string Name { get; public set; }
    public MvxTypeAndNamePair(Type type, string name);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public interface MvvmCross.Binding.Bindings.Target.IMvxTargetBinding {
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public abstract virtual Type get_TargetValueType();
    public abstract virtual MvxBindingMode get_DefaultMode();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    public abstract virtual void SubscribeToEvents();
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxConvertingTargetBinding : MvxTargetBinding {
    private bool _isUpdatingSource;
    private bool _isUpdatingTarget;
    private object _updatingSourceWith;
    public MvxBindingMode DefaultMode { get; }
    protected MvxConvertingTargetBinding(object target);
    public virtual MvxBindingMode get_DefaultMode();
    protected abstract virtual void SetValueImpl(object target, object value);
    public virtual void SetValue(object value);
    protected virtual bool ShouldSkipSetValueForViewSpecificReasons(object target, object value);
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(object target, object value);
    protected virtual object MakeSafeValue(object value);
    protected sealed virtual void FireValueChanged(object newValue);
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxConvertingTargetBinding`2 : MvxTargetBinding`2<TTarget, TValue> {
    private bool _isUpdatingSource;
    private bool _isUpdatingTarget;
    private TValue _updatingSourceWith;
    public MvxBindingMode DefaultMode { get; }
    protected MvxConvertingTargetBinding`2(TTarget target);
    public virtual MvxBindingMode get_DefaultMode();
    protected abstract virtual void SetValueImpl(TTarget target, TValue value);
    protected virtual void SetValue(TValue value);
    protected virtual bool ShouldSkipSetValueForViewSpecificReasons(TTarget target, TValue value);
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(TTarget target, TValue value);
    protected virtual TValue MakeSafeValue(TValue value);
    protected sealed virtual void FireValueChanged(TValue newValue);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventHandlerEventInfoTargetBinding : MvxTargetBinding {
    private EventInfo _targetEventInfo;
    private ICommand _currentCommand;
    private object _eventHandler;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventHandlerEventInfoTargetBinding(object target, EventInfo targetEventInfo);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, EventArgs args);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventInfoTargetBinding`1 : MvxTargetBinding {
    private EventInfo _targetEventInfo;
    private ICommand _currentCommand;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventInfoTargetBinding`1(object target, EventInfo targetEventInfo);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, T args);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventNameTargetBinding`1 : MvxTargetBinding {
    private bool _useEventArgsAsCommandParameter;
    private IDisposable _eventSubscription;
    private ICommand _currentCommand;
    [CompilerGeneratedAttribute]
private Type <TargetValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultMode>k__BackingField;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventNameTargetBinding`1(TTarget target, string targetEventName, bool useEventArgsAsCommandParameter);
    [CompilerGeneratedAttribute]
public virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, EventArgs parameter);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventNameTargetBinding`2 : MvxTargetBinding {
    private bool _useEventArgsAsCommandParameter;
    private IDisposable _eventSubscription;
    private ICommand _currentCommand;
    [CompilerGeneratedAttribute]
private Type <TargetValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultMode>k__BackingField;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventNameTargetBinding`2(TTarget target, string targetEventName, bool useEventArgsAsCommandParameter);
    [CompilerGeneratedAttribute]
public virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, TEventArgs parameter);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxNullTargetBinding : MvxTargetBinding {
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxPropertyInfoTargetBinding : MvxConvertingTargetBinding {
    private PropertyInfo _targetPropertyInfo;
    public Type TargetValueType { get; }
    protected PropertyInfo TargetPropertyInfo { get; }
    public MvxPropertyInfoTargetBinding(object target, PropertyInfo targetPropertyInfo);
    protected virtual void Dispose(bool isDisposing);
    public virtual Type get_TargetValueType();
    protected PropertyInfo get_TargetPropertyInfo();
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxPropertyInfoTargetBinding`1 : MvxPropertyInfoTargetBinding {
    protected T View { get; }
    public MvxPropertyInfoTargetBinding`1(object target, PropertyInfo targetPropertyInfo);
    protected T get_View();
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxTargetBinding : MvxBinding {
    private WeakReference _target;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxTargetChangedEventArgs> ValueChanged;
    protected object Target { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    protected MvxTargetBinding(object target);
    protected object get_Target();
    public virtual void SubscribeToEvents();
    protected virtual void FireValueChanged(object newValue);
    public abstract virtual Type get_TargetValueType();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    public abstract virtual MvxBindingMode get_DefaultMode();
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxTargetBinding`2 : MvxBinding {
    private WeakReference`1<TTarget> _target;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxTargetChangedEventArgs> ValueChanged;
    protected TTarget Target { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    protected MvxTargetBinding`2(TTarget target);
    protected TTarget get_Target();
    public virtual void SubscribeToEvents();
    protected virtual void FireValueChanged(TValue newValue);
    public abstract virtual MvxBindingMode get_DefaultMode();
    public sealed virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    protected abstract virtual void SetValue(TValue value);
    public sealed virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxTargetChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; private set; }
    public MvxTargetChangedEventArgs(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxWithEventPropertyInfoTargetBinding : MvxPropertyInfoTargetBinding {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxWithEventPropertyInfoTargetBinding(object target, PropertyInfo targetPropertyInfo);
    public void OnValueChanged(object sender, EventArgs eventArgs);
    public void OnPropertyChanged(object sender, PropertyChangedEventArgs eventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    private EventInfo GetNamedPropertyChangedEvent(Type viewType, string propertyName);
    private EventInfo GetPropertyChangedEvent(Type viewType);
    protected virtual void Dispose(bool isDisposing);
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombiner {
    public abstract virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    public abstract virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public abstract virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    public abstract virtual IEnumerable`1<Type> SubStepTargetTypes(IEnumerable`1<IMvxSourceStep> subSteps, Type overallTargetType);
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombinerLookup {
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombinerRegistry {
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombinerRegistryFiller {
}
public class MvvmCross.Binding.Combiners.MvxAddValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxAndValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxBooleanValueCombiner : MvxValueCombiner {
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    protected abstract virtual bool TryCombine(List`1<bool> stepValues, Object& value);
    protected virtual bool TryConvertToBool(object objectValue, Boolean& booleanValue);
}
public class MvvmCross.Binding.Combiners.MvxDivideValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxEqualToValueCombiner : MvxPairwiseValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineNullAndObject(object object1, Object& value);
    protected virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected virtual bool CombineObjectAndNull(object input1, Object& value);
    protected virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxFormatValueCombiner : MvxValueCombiner {
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxGreaterThanOrEqualToValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxGreaterThanValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxIfValueCombiner : MvxValueCombiner {
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    private bool TryEvaluateif(IMvxSourceStep testStep, IMvxSourceStep ifStep, IMvxSourceStep elseStep, Object& value);
    protected virtual bool IsTrue(object result);
    protected virtual object ReturnSubStepResult(IMvxSourceStep subStep);
}
public class MvvmCross.Binding.Combiners.MvxInvertedValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxLessThanOrEqualToValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxLessThanValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxModulusValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxMultiplyValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxNotEqualToValueCombiner : MvxPairwiseValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineNullAndObject(object object1, Object& value);
    protected virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected virtual bool CombineObjectAndNull(object input1, Object& value);
    protected virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxNotValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxNumericOnlyValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected sealed virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected sealed virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected sealed virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected sealed virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected sealed virtual bool CombineNullAndString(string input2, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxObjectAsStringPairwiseValueCombiner : MvxPairwiseValueCombiner {
    protected abstract virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected abstract virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected abstract virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected abstract virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected abstract virtual bool CombineNullAndString(string input2, Object& value);
    protected abstract virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected abstract virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected abstract virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected abstract virtual bool CombineStringAndNull(string input1, Object& value);
    protected sealed virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected sealed virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected sealed virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected sealed virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected sealed virtual bool CombineNullAndObject(object object1, Object& value);
    protected sealed virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected sealed virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected sealed virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected sealed virtual bool CombineObjectAndNull(object input1, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxOrValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxPairwiseValueCombiner : MvxValueCombiner {
    private Dictionary`2<TypeTuple, CombinerFunc`2<object, object>> _combinerActions;
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    private static Type GetLookupTypeFor(object value);
    private void AddSingle(CombinerFunc combinerAction);
    private void AddSingle(CombinerFunc`1<T1> combinerAction, CombinerFunc`1<T1> switchedCombinerAction);
    private void AddSingle(CombinerFunc`2<T1, T2> combinerAction);
    protected virtual object ForceToSimpleValueTypes(object input);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    protected abstract virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected abstract virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected abstract virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected abstract virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected abstract virtual bool CombineObjectAndNull(object input1, Object& value);
    protected abstract virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected abstract virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected abstract virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected abstract virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected abstract virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected abstract virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected abstract virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected abstract virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected abstract virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected abstract virtual bool CombineLongAndNull(long input1, Object& value);
    protected abstract virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected abstract virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected abstract virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected abstract virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected abstract virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected abstract virtual bool CombineNullAndObject(object object1, Object& value);
    protected abstract virtual bool CombineNullAndDouble(double input2, Object& value);
    protected abstract virtual bool CombineNullAndLong(long input2, Object& value);
    protected abstract virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected abstract virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxSingleValueCombiner : MvxValueCombiner {
    public virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxSubtractValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxValueCombiner : object {
    public virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    public virtual IEnumerable`1<Type> SubStepTargetTypes(IEnumerable`1<IMvxSourceStep> subSteps, Type overallTargetType);
}
public class MvvmCross.Binding.Combiners.MvxValueCombinerRegistry : MvxNamedInstanceRegistry`1<IMvxValueCombiner> {
}
public class MvvmCross.Binding.Combiners.MvxValueCombinerRegistryFiller : MvxNamedInstanceRegistryFiller`1<IMvxValueCombiner> {
    public virtual string FindName(Type type);
}
[MvxUnconventionalAttribute]
public class MvvmCross.Binding.Combiners.MvxValueConverterValueCombiner : MvxValueCombiner {
    private IMvxValueConverter _valueConverter;
    private Type _targetType;
    public MvxValueConverterValueCombiner(IMvxValueConverter valueConverter);
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual IEnumerable`1<Type> SubStepTargetTypes(IEnumerable`1<IMvxSourceStep> subSteps, Type overallTargetType);
    private static object GetParameterValue(IEnumerable`1<IMvxSourceStep> steps);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxXorValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public interface MvvmCross.Binding.ExpressionParse.IMvxParsedExpression {
    public abstract virtual string Print();
}
public interface MvvmCross.Binding.ExpressionParse.IMvxPropertyExpressionParser {
    public abstract virtual IMvxParsedExpression Parse(Expression`1<Func`2<TObj, TRet>> propertyPath);
    public abstract virtual IMvxParsedExpression Parse(LambdaExpression propertyPath);
}
public class MvvmCross.Binding.ExpressionParse.MvxParsedExpression : object {
    private LinkedList`1<INode> _nodes;
    protected LinkedList`1<INode> Nodes { get; }
    protected LinkedList`1<INode> get_Nodes();
    protected void Prepend(INode node);
    public void PrependProperty(string propertyName);
    public void PrependIndexed(string indexedValue);
    public sealed virtual string Print();
}
public class MvvmCross.Binding.ExpressionParse.MvxPropertyExpressionParser : object {
    private ILogger`1<MvxPropertyExpressionParser> _log;
    public MvxPropertyExpressionParser(ILoggerFactory loggerFactory);
    public sealed virtual IMvxParsedExpression Parse(Expression`1<Func`2<TObj, TRet>> propertyPath);
    public sealed virtual IMvxParsedExpression Parse(LambdaExpression propertyPath);
    private static Expression ParseTo(Expression current, MvxParsedExpression toReturn, ILogger log);
    private static Expression ParseMethodCall(Expression current, MvxParsedExpression toReturn, ILogger log);
    private static IMvxParsedExpression ParseBindExtensionMethod(LambdaExpression propertyPath, object controlType);
    private static Expression ConvertMemberAccessToConstant(Expression argument, ILogger log);
    private static Expression ParseProperty(Expression current, MvxParsedExpression toReturn);
    private static Expression Unbox(Expression current);
}
public interface MvvmCross.Binding.Extensions.IMvxEditableTextView {
    public string CurrentText { get; }
    public abstract virtual string get_CurrentText();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Extensions.MvxBindingExtensions : object {
    [ExtensionAttribute]
public static bool ShouldSkipSetValueAsHaveNearlyIdenticalNumericText(IMvxEditableTextView mvxEditableTextView, object target, object value);
    [ExtensionAttribute]
public static bool ConvertToBoolean(object result);
    [ExtensionAttribute]
public static object MakeSafeValue(Type propertyType, object value);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Extensions.MvxEnumerableExtensions : object {
    [ExtensionAttribute]
public static int Count(IEnumerable enumerable);
    [ExtensionAttribute]
public static int GetPosition(IEnumerable items, object item);
    [ExtensionAttribute]
public static object ElementAt(IEnumerable items, int position);
    [ExtensionAttribute]
public static IEnumerable Filter(IEnumerable items, Func`2<object, bool> predicate);
}
public interface MvvmCross.Binding.IMvxBindingSingletonCache {
    public IMvxAutoValueConverters AutoValueConverters { get; }
    public IMvxBindingDescriptionParser BindingDescriptionParser { get; }
    public IMvxLanguageBindingParser LanguageParser { get; }
    public IMvxPropertyExpressionParser PropertyExpressionParser { get; }
    public IMvxValueConverterLookup ValueConverterLookup { get; }
    public IMvxBindingNameLookup DefaultBindingNameLookup { get; }
    public IMvxBinder Binder { get; }
    public IMvxSourceBindingFactory SourceBindingFactory { get; }
    public IMvxTargetBindingFactory TargetBindingFactory { get; }
    public IMvxSourceStepFactory SourceStepFactory { get; }
    public IMvxValueCombinerLookup ValueCombinerLookup { get; }
    public IMvxMainThreadAsyncDispatcher MainThreadDispatcher { get; }
    public abstract virtual IMvxAutoValueConverters get_AutoValueConverters();
    public abstract virtual IMvxBindingDescriptionParser get_BindingDescriptionParser();
    public abstract virtual IMvxLanguageBindingParser get_LanguageParser();
    public abstract virtual IMvxPropertyExpressionParser get_PropertyExpressionParser();
    public abstract virtual IMvxValueConverterLookup get_ValueConverterLookup();
    public abstract virtual IMvxBindingNameLookup get_DefaultBindingNameLookup();
    public abstract virtual IMvxBinder get_Binder();
    public abstract virtual IMvxSourceBindingFactory get_SourceBindingFactory();
    public abstract virtual IMvxTargetBindingFactory get_TargetBindingFactory();
    public abstract virtual IMvxSourceStepFactory get_SourceStepFactory();
    public abstract virtual IMvxValueCombinerLookup get_ValueCombinerLookup();
    public abstract virtual IMvxMainThreadAsyncDispatcher get_MainThreadDispatcher();
}
public class MvvmCross.Binding.MvxBindingBuilder : MvxCoreBindingBuilder {
    public virtual void DoRegistration(IMvxIoCProvider iocProvider);
    protected virtual void RegisterBindingFactories(IMvxIoCProvider iocProvider);
    protected virtual void RegisterMvxBindingFactories(IMvxIoCProvider iocProvider);
    protected virtual void RegisterSourceStepFactory(IMvxIoCProvider iocProvider);
    protected virtual void FillSourceStepFactory(IMvxSourceStepFactoryRegistry registry);
    protected virtual IMvxSourceStepFactoryRegistry CreateSourceStepFactoryRegistry();
    protected virtual void RegisterSourceFactory(IMvxIoCProvider iocProvider);
    protected virtual void RegisterSourceBindingFactoryExtensions(IMvxSourceBindingFactoryExtensionHost extensionHost);
    protected virtual IMvxSourceBindingFactory CreateSourceBindingFactory();
    protected virtual void RegisterTargetFactory(IMvxIoCProvider iocProvider);
    protected virtual IMvxTargetBindingFactoryRegistry CreateTargetBindingRegistry();
    protected virtual void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MvvmCross.Binding.MvxBindingLog : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static ILogger <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private static LogLevel <TraceBindingLevel>k__BackingField;
    [NullableAttribute("2")]
public static ILogger Instance { get; }
    public static LogLevel TraceBindingLevel { get; public set; }
    private static MvxBindingLog();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static ILogger get_Instance();
    [CompilerGeneratedAttribute]
public static LogLevel get_TraceBindingLevel();
    [CompilerGeneratedAttribute]
public static void set_TraceBindingLevel(LogLevel value);
    private static void Trace(LogLevel level, string message, Object[] args);
    public static void Trace(string message, Object[] args);
    public static void Warning(string message, Object[] args);
    public static void Error(string message, Object[] args);
}
public enum MvvmCross.Binding.MvxBindingMode : Enum {
    public int value__;
    public static MvxBindingMode Default;
    public static MvxBindingMode TwoWay;
    public static MvxBindingMode OneWay;
    public static MvxBindingMode OneTime;
    public static MvxBindingMode OneWayToSource;
}
public class MvvmCross.Binding.MvxBindingRequest : object {
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingDescription <Description>k__BackingField;
    public object Target { get; public set; }
    public object Source { get; public set; }
    public MvxBindingDescription Description { get; public set; }
    public MvxBindingRequest(object source, object target, MvxBindingDescription description);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(object value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public MvxBindingDescription get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(MvxBindingDescription value);
}
public class MvvmCross.Binding.MvxBindingSingletonCache : MvxSingleton`1<IMvxBindingSingletonCache> {
    private IMvxAutoValueConverters _autoValueConverters;
    private IMvxBindingDescriptionParser _bindingDescriptionParser;
    private IMvxSourceBindingFactory _sourceBindingFactory;
    private IMvxTargetBindingFactory _targetBindingFactory;
    private IMvxLanguageBindingParser _languageParser;
    private IMvxPropertyExpressionParser _propertyExpressionParser;
    private IMvxValueConverterLookup _valueConverterLookup;
    private IMvxBindingNameLookup _defaultBindingName;
    private IMvxBinder _binder;
    private IMvxSourceStepFactory _sourceStepFactory;
    private IMvxValueCombinerLookup _valueCombinerLookup;
    private IMvxMainThreadAsyncDispatcher _mainThreadDispatcher;
    public IMvxAutoValueConverters AutoValueConverters { get; }
    public IMvxBindingDescriptionParser BindingDescriptionParser { get; }
    public IMvxLanguageBindingParser LanguageParser { get; }
    public IMvxPropertyExpressionParser PropertyExpressionParser { get; }
    public IMvxValueConverterLookup ValueConverterLookup { get; }
    public IMvxValueCombinerLookup ValueCombinerLookup { get; }
    public IMvxBindingNameLookup DefaultBindingNameLookup { get; }
    public IMvxBinder Binder { get; }
    public IMvxSourceBindingFactory SourceBindingFactory { get; }
    public IMvxTargetBindingFactory TargetBindingFactory { get; }
    public IMvxSourceStepFactory SourceStepFactory { get; }
    public IMvxMainThreadAsyncDispatcher MainThreadDispatcher { get; }
    public static IMvxBindingSingletonCache Initialize();
    public sealed virtual IMvxAutoValueConverters get_AutoValueConverters();
    public sealed virtual IMvxBindingDescriptionParser get_BindingDescriptionParser();
    public sealed virtual IMvxLanguageBindingParser get_LanguageParser();
    public sealed virtual IMvxPropertyExpressionParser get_PropertyExpressionParser();
    public sealed virtual IMvxValueConverterLookup get_ValueConverterLookup();
    public sealed virtual IMvxValueCombinerLookup get_ValueCombinerLookup();
    public sealed virtual IMvxBindingNameLookup get_DefaultBindingNameLookup();
    public sealed virtual IMvxBinder get_Binder();
    public sealed virtual IMvxSourceBindingFactory get_SourceBindingFactory();
    public sealed virtual IMvxTargetBindingFactory get_TargetBindingFactory();
    public sealed virtual IMvxSourceStepFactory get_SourceStepFactory();
    public sealed virtual IMvxMainThreadAsyncDispatcher get_MainThreadDispatcher();
}
public class MvvmCross.Binding.MvxCoreBindingBuilder : object {
    public virtual void DoRegistration(IMvxIoCProvider iocProvider);
    protected virtual void RegisterAutoValueConverters(IMvxIoCProvider iocProvider);
    protected virtual void FillAutoValueConverters(IMvxAutoValueConverters autoValueConverters);
    protected virtual IMvxAutoValueConverters CreateAutoValueConverters();
    protected virtual void CreateSingleton();
    protected virtual void RegisterValueConverterRegistryFiller(IMvxIoCProvider iocProvider);
    protected virtual IMvxValueConverterRegistryFiller CreateValueConverterRegistryFiller();
    protected virtual void RegisterValueCombinerRegistryFiller(IMvxIoCProvider iocProvider);
    protected virtual IMvxValueCombinerRegistryFiller CreateValueCombinerRegistryFiller();
    protected virtual void RegisterExpressionParser(IMvxIoCProvider iocProvider);
    protected virtual void RegisterCore(IMvxIoCProvider iocProvider);
    protected virtual void RegisterValueConverterProvider(IMvxIoCProvider iocProvider);
    protected virtual MvxValueConverterRegistry CreateValueConverterRegistry();
    protected virtual void FillValueConverters(IMvxValueConverterRegistry registry);
    protected virtual void RegisterValueCombinerProvider(IMvxIoCProvider iocProvider);
    protected virtual IMvxValueCombinerRegistry CreateValueCombinerRegistry();
    protected virtual void FillValueCombiners(IMvxValueCombinerRegistry registry);
    protected virtual void RegisterBindingParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxBindingParser CreateBindingParser();
    protected virtual void RegisterLanguageBindingParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxLanguageBindingParser CreateLanguageBindingParser();
    protected virtual void RegisterBindingDescriptionParser(IMvxIoCProvider iocProvider);
    private static IMvxBindingDescriptionParser CreateBindingDescriptionParser();
    protected virtual void RegisterSourcePropertyPathParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxSourcePropertyPathParser CreateSourcePropertyPathParser();
    protected virtual void RegisterBindingNameRegistry(IMvxIoCProvider iocProvider);
    protected virtual void FillDefaultBindingNames(IMvxBindingNameRegistry registry);
    protected virtual void RegisterPlatformSpecificComponents(IMvxIoCProvider iocProvider);
}
public interface MvvmCross.Binding.Parse.Binding.IMvxBindingParser {
    public abstract virtual bool TryParseBindingDescription(string text, MvxSerializableBindingDescription& requestedDescription);
    public abstract virtual bool TryParseBindingSpecification(string text, MvxSerializableBindingSpecification& requestedBindings);
}
public interface MvvmCross.Binding.Parse.Binding.Lang.IMvxLanguageBindingParser {
    public string DefaultConverterName { get; public set; }
    public string DefaultTextSourceName { get; public set; }
    public abstract virtual string get_DefaultConverterName();
    public abstract virtual void set_DefaultConverterName(string value);
    public abstract virtual string get_DefaultTextSourceName();
    public abstract virtual void set_DefaultTextSourceName(string value);
}
public class MvvmCross.Binding.Parse.Binding.Lang.MvxLanguageBindingParser : MvxBindingParser {
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultBindingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultConverterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTextSourceName>k__BackingField;
    public MvxBindingMode DefaultBindingMode { get; public set; }
    public string DefaultConverterName { get; public set; }
    public string DefaultTextSourceName { get; public set; }
    [CompilerGeneratedAttribute]
public MvxBindingMode get_DefaultBindingMode();
    [CompilerGeneratedAttribute]
public void set_DefaultBindingMode(MvxBindingMode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultConverterName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultConverterName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultTextSourceName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultTextSourceName(string value);
    protected void ParseNextBindingDescriptionOptionInto(MvxSerializableBindingDescription description);
    private static string UnquoteBlockIfNecessary(string block);
    protected virtual MvxSerializableBindingDescription ParseBindingDescription();
}
public class MvvmCross.Binding.Parse.Binding.MvxBindingDescriptionParser : object {
    private IMvxBindingParser _bindingParser;
    private IMvxValueConverterLookup _valueConverterLookup;
    private IMvxLanguageBindingParser _languageBindingParser;
    protected IMvxBindingParser BindingParser { get; }
    protected IMvxLanguageBindingParser LanguageBindingParser { get; }
    protected IMvxValueConverterLookup ValueConverterLookup { get; }
    protected IMvxBindingParser get_BindingParser();
    protected IMvxLanguageBindingParser get_LanguageBindingParser();
    protected IMvxValueConverterLookup get_ValueConverterLookup();
    protected IMvxValueConverter FindConverter(string converterName);
    protected IMvxValueCombiner FindCombiner(string combiner);
    public sealed virtual IEnumerable`1<MvxBindingDescription> Parse(string text);
    public IEnumerable`1<MvxBindingDescription> Parse(string text, IMvxBindingParser parser);
    public sealed virtual IEnumerable`1<MvxBindingDescription> LanguageParse(string text);
    public sealed virtual MvxBindingDescription ParseSingle(string text);
    private string GetErrorTextParameter(string text);
    public sealed virtual MvxBindingDescription SerializableBindingToBinding(string targetName, MvxSerializableBindingDescription description);
    private MvxSourceStepDescription SourceStepDescriptionFrom(MvxSerializableBindingDescription description);
    [CompilerGeneratedAttribute]
private MvxBindingDescription <Parse>b__12_0(KeyValuePair`2<string, MvxSerializableBindingDescription> item);
    [CompilerGeneratedAttribute]
private MvxSourceStepDescription <SourceStepDescriptionFrom>b__17_0(MvxSerializableBindingDescription s);
    [CompilerGeneratedAttribute]
private MvxSourceStepDescription <SourceStepDescriptionFrom>b__17_1(MvxSerializableBindingDescription source);
}
public abstract class MvvmCross.Binding.Parse.Binding.MvxBindingParser : MvxParser {
    protected abstract virtual MvxSerializableBindingDescription ParseBindingDescription();
    public sealed virtual bool TryParseBindingDescription(string text, MvxSerializableBindingDescription& requestedDescription);
    public sealed virtual bool TryParseBindingSpecification(string text, MvxSerializableBindingSpecification& requestedBindings);
    protected KeyValuePair`2<string, MvxSerializableBindingDescription> ParseTargetPropertyNameAndDescription();
    protected void ParseEquals(string block);
    protected MvxBindingMode ReadBindingMode();
    protected string ReadTextUntilNonQuotedOccurrenceOfAnyOf(Char[] terminationCharacters);
    protected string ReadTargetPropertyName();
    protected void SkipWhitespaceAndOptionSeparators();
    protected void SkipWhitespaceAndDescriptionSeparators();
}
public class MvvmCross.Binding.Parse.Binding.MvxSerializableBindingDescription : object {
    [CompilerGeneratedAttribute]
private string <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MvxSerializableBindingDescription> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Literal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public object FallbackValue { get; public set; }
    public MvxBindingMode Mode { get; public set; }
    public IList`1<MvxSerializableBindingDescription> Sources { get; public set; }
    public string Function { get; public set; }
    public object Literal { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(string value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public object get_FallbackValue();
    [CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
    [CompilerGeneratedAttribute]
public MvxBindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(MvxBindingMode value);
    [CompilerGeneratedAttribute]
public IList`1<MvxSerializableBindingDescription> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IList`1<MvxSerializableBindingDescription> value);
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
    [CompilerGeneratedAttribute]
public object get_Literal();
    [CompilerGeneratedAttribute]
public void set_Literal(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class MvvmCross.Binding.Parse.Binding.MvxSerializableBindingSpecification : Dictionary`2<string, MvxSerializableBindingDescription> {
}
public class MvvmCross.Binding.Parse.Binding.Swiss.MvxSwissBindingParser : MvxBindingParser {
    protected virtual IEnumerable`1<char> TerminatingCharacters();
    private void ParsePath(string block, MvxSerializableBindingDescription description);
    private void ParseConverter(string block, MvxSerializableBindingDescription description);
    private void ParseConverterParameter(string block, MvxSerializableBindingDescription description);
    private void ParseCommandParameter(string block, MvxSerializableBindingDescription description);
    private void ParseFallbackValue(string block, MvxSerializableBindingDescription description);
    private void ParseMode(string block, MvxSerializableBindingDescription description);
    protected virtual void ParseNextBindingDescriptionOptionInto(MvxSerializableBindingDescription description);
    protected virtual void HandleEmptyBlock(MvxSerializableBindingDescription description);
    protected virtual void ParseNonKeywordBlockInto(MvxSerializableBindingDescription description, string block);
    protected virtual void ParseFunctionStyleBlockInto(MvxSerializableBindingDescription description, string block);
    protected void ReadConverterParameterAndClosingBracket(MvxSerializableBindingDescription description);
    protected void ParseChildBindingDescriptionInto(MvxSerializableBindingDescription description, ParentIsLookingForComma parentIsLookingForComma);
    protected void ThrowExceptionIfPathAlreadyDefined(MvxSerializableBindingDescription description);
    protected virtual MvxSerializableBindingDescription ParseBindingDescription();
    protected virtual MvxSerializableBindingDescription ParseBindingDescription(ParentIsLookingForComma parentIsLookingForComma);
    protected virtual MvxSerializableBindingDescription ParseOperatorWithLeftHand(MvxSerializableBindingDescription description);
    protected virtual bool DetectOperator();
}
public class MvvmCross.Binding.Parse.Binding.Tibet.MvxTibetBindingParser : MvxSwissBindingParser {
    public static object LiteralNull;
    public static Char[] OperatorCharacters;
    private Char[] _terminatingCharacters;
    private static Dictionary`2<string, string> TwoCharacterOperatorCombinerNames { get; }
    private static Dictionary`2<char, string> SingleCharacterOperatorCombinerNames { get; }
    private static MvxTibetBindingParser();
    private static Dictionary`2<string, string> get_TwoCharacterOperatorCombinerNames();
    private static Dictionary`2<char, string> get_SingleCharacterOperatorCombinerNames();
    protected virtual IEnumerable`1<char> TerminatingCharacters();
    protected virtual void ParseNextBindingDescriptionOptionInto(MvxSerializableBindingDescription description);
    protected virtual void ParseFunctionStyleBlockInto(MvxSerializableBindingDescription description, string block);
    private Tuple`2<UInt32, string> ParseTwoCharacterOperator();
    protected virtual MvxSerializableBindingDescription ParseOperatorWithLeftHand(MvxSerializableBindingDescription description);
    protected virtual bool DetectOperator();
    protected virtual void HandleEmptyBlock(MvxSerializableBindingDescription description);
}
public interface MvvmCross.Binding.Parse.PropertyPath.IMvxSourcePropertyPathParser {
    public abstract virtual IList`1<MvxPropertyToken> Parse(string textToParse);
}
public class MvvmCross.Binding.Parse.PropertyPath.MvxPropertyPathParser : MvxParser {
    [CompilerGeneratedAttribute]
private List`1<MvxPropertyToken> <CurrentTokens>k__BackingField;
    protected List`1<MvxPropertyToken> CurrentTokens { get; }
    [CompilerGeneratedAttribute]
protected List`1<MvxPropertyToken> get_CurrentTokens();
    protected virtual void Reset(string textToParse);
    public static string MakeSafe(string textToParse);
    public IList`1<MvxPropertyToken> Parse(string textToParse);
    private void ParseNextToken();
    private void ParsePropertyName();
    private void ParseIndexer();
    private void ParseIntegerIndexer();
    private void ParseQuotedStringIndexer();
    private void ParseUnquotedStringIndexer();
    private void SkipWhitespaceAndPeriods();
}
public class MvvmCross.Binding.Parse.PropertyPath.MvxSourcePropertyPathParser : object {
    private static ConcurrentDictionary`2<string, IList`1<MvxPropertyToken>> ParseCache;
    private static MvxSourcePropertyPathParser();
    public sealed virtual IList`1<MvxPropertyToken> Parse(string textToParse);
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxEmptyPropertyToken : MvxPropertyToken {
    public virtual string ToString();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxIndexerPropertyToken : MvxPropertyToken {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    public object Key { get; }
    protected MvxIndexerPropertyToken(object key);
    [CompilerGeneratedAttribute]
public object get_Key();
    public virtual string ToString();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxIndexerPropertyToken`1 : MvxIndexerPropertyToken {
    public T Key { get; }
    protected MvxIndexerPropertyToken`1(T key);
    public T get_Key();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxIntegerIndexerPropertyToken : MvxIndexerPropertyToken`1<int> {
    public MvxIntegerIndexerPropertyToken(int key);
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxPropertyNamePropertyToken : MvxPropertyToken {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public MvxPropertyNamePropertyToken(string propertyText);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    public virtual string ToString();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxPropertyToken : object {
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxStringIndexerPropertyToken : MvxIndexerPropertyToken`1<string> {
    public MvxStringIndexerPropertyToken(string key);
}
public class MvvmCross.Binding.ValueConverters.MvxCommandParameterValueConverter : MvxValueConverter`2<ICommand, ICommand> {
    protected virtual ICommand Convert(ICommand value, Type targetType, object parameter, CultureInfo culture);
}
public class MvvmCross.Binding.ValueConverters.MvxWrappingCommand : object {
    private static EventInfo CanExecuteChangedEventInfo;
    private ICommand _wrapped;
    private object _commandParameterOverride;
    private IDisposable _canChangedEventSubscription;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public MvxWrappingCommand(ICommand wrapped, object commandParameterOverride);
    private static MvxWrappingCommand();
    public void WrappedOnCanExecuteChanged(object sender, EventArgs eventArgs);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public interface MvvmCross.Commands.IMvxAsyncCommand {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(object parameter);
    public abstract virtual void Cancel();
}
public interface MvvmCross.Commands.IMvxAsyncCommand`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(TParameter parameter);
    public abstract virtual void Cancel();
}
public interface MvvmCross.Commands.IMvxCommand {
    public abstract virtual void RaiseCanExecuteChanged();
    public abstract virtual void Execute();
    public abstract virtual bool CanExecute();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Commands.IMvxCommand`1 {
    [ObsoleteAttribute("Use the strongly typed version of Execute instead", "True")]
public abstract virtual void Execute(object parameter);
    public abstract virtual void Execute(TParameter parameter);
    [ObsoleteAttribute("Use the strongly typed version of CanExecute instead", "True")]
public abstract virtual bool CanExecute(object parameter);
    public abstract virtual bool CanExecute(TParameter parameter);
    public abstract virtual void RaiseCanExecuteChanged();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface MvvmCross.Commands.IMvxCommandCollection {
    [NullableAttribute("2")]
public IMvxCommand Item { get; }
    public abstract virtual IMvxCommand get_Item(string name);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Commands.IMvxCommandCollectionBuilder {
    public abstract virtual IMvxCommandCollection BuildCollectionFor(object owner);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Commands.IMvxCommandHelper {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("1")]
public abstract virtual void RaiseCanExecuteChanged(object sender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxAsyncCommand : MvxAsyncCommandBase {
    private Func`2<CancellationToken, Task> _execute;
    [NullableAttribute("2")]
private Func`1<bool> _canExecute;
    public MvxAsyncCommand(Func`1<Task> execute, Func`1<bool> canExecute, bool allowConcurrentExecutions);
    public MvxAsyncCommand(Func`2<CancellationToken, Task> execute, Func`1<bool> canExecute, bool allowConcurrentExecutions);
    [NullableContextAttribute("2")]
protected virtual bool CanExecuteImpl(object parameter);
    protected virtual Task ExecuteAsyncImpl(object parameter);
    [NullableContextAttribute("2")]
public static MvxAsyncCommand`1<T> CreateCommand(Func`2<T, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    [NullableContextAttribute("2")]
public static MvxAsyncCommand`1<T> CreateCommand(Func`3<T, CancellationToken, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    public sealed virtual Task ExecuteAsync(object parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxAsyncCommand`1 : MvxAsyncCommandBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<T, CancellationToken, Task> _execute;
    private Func`2<T, bool> _canExecute;
    public MvxAsyncCommand`1(Func`2<T, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    public MvxAsyncCommand`1(Func`3<T, CancellationToken, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAsync(T parameter);
    public sealed virtual void Execute(T parameter);
    public sealed virtual bool CanExecute(T parameter);
    protected virtual bool CanExecuteImpl(object parameter);
    [NullableContextAttribute("1")]
protected virtual Task ExecuteAsyncImpl(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Commands.MvxAsyncCommandBase : MvxCommandBase {
    private object _syncRoot;
    private bool _allowConcurrentExecutions;
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    private int _concurrentExecutions;
    public bool IsRunning { get; }
    protected CancellationToken CancelToken { get; }
    protected MvxAsyncCommandBase(bool allowConcurrentExecutions);
    public bool get_IsRunning();
    protected CancellationToken get_CancelToken();
    [NullableContextAttribute("2")]
protected abstract virtual bool CanExecuteImpl(object parameter);
    protected abstract virtual Task ExecuteAsyncImpl(object parameter);
    public sealed virtual void Cancel();
    public sealed virtual bool CanExecute();
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecute(object parameter);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MvvmCross.Commands.MvxAsyncCommandBase/<Execute>d__14")]
public sealed virtual void Execute(object parameter);
    public sealed virtual void Execute();
    [AsyncStateMachineAttribute("MvvmCross.Commands.MvxAsyncCommandBase/<ExecuteAsync>d__16")]
protected Task ExecuteAsync(object parameter, bool hideCanceledException);
    [AsyncStateMachineAttribute("MvvmCross.Commands.MvxAsyncCommandBase/<ExecuteConcurrentAsync>d__17")]
private Task ExecuteConcurrentAsync(object parameter, bool hideCanceledException);
    private void ClearCancellationTokenSource();
    private void InitCancellationTokenSource();
}
public class MvvmCross.Commands.MvxCommand : MvxCommandBase {
    [NullableAttribute("2")]
private Func`1<bool> _canExecute;
    [NullableAttribute("1")]
private Action _execute;
    [NullableContextAttribute("1")]
public MvxCommand(Action execute, Func`1<bool> canExecute);
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecute(object parameter);
    public sealed virtual bool CanExecute();
    [NullableContextAttribute("2")]
public sealed virtual void Execute(object parameter);
    public sealed virtual void Execute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxCommand`1 : MvxCommandBase {
    private Func`2<T, bool> _canExecute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<T> _execute;
    public MvxCommand`1(Action`1<T> execute, Func`2<T, bool> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual bool CanExecute();
    public sealed virtual bool CanExecute(T parameter);
    public sealed virtual void Execute(object parameter);
    public sealed virtual void Execute();
    public sealed virtual void Execute(T parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class MvvmCross.Commands.MvxCommandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CanExecutePropertyName>k__BackingField;
    public string CommandName { get; public set; }
    [NullableAttribute("2")]
public string CanExecutePropertyName { get; public set; }
    public MvxCommandAttribute(string commandName, string canExecutePropertyName);
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CanExecutePropertyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CanExecutePropertyName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxCommandBase : MvxMainThreadDispatchingObject {
    private IMvxCommandHelper _commandHelper;
    [CompilerGeneratedAttribute]
private bool <ShouldAlwaysRaiseCECOnUserInterfaceThread>k__BackingField;
    public bool ShouldAlwaysRaiseCECOnUserInterfaceThread { get; public set; }
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_ShouldAlwaysRaiseCECOnUserInterfaceThread();
    [CompilerGeneratedAttribute]
public void set_ShouldAlwaysRaiseCECOnUserInterfaceThread(bool value);
    public sealed virtual void RaiseCanExecuteChanged();
    [CompilerGeneratedAttribute]
private void <RaiseCanExecuteChanged>b__9_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MvvmCross.Commands.MvxCommandCollection : object {
    private object _owner;
    private Dictionary`2<string, IMvxCommand> _commandLookup;
    private Dictionary`2<string, List`1<IMvxCommand>> _canExecuteLookup;
    [NullableAttribute("2")]
public IMvxCommand Item { get; }
    public MvxCommandCollection(object owner);
    private void SubscribeToNotifyPropertyChanged();
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void RaiseAllCanExecuteChanged();
    public sealed virtual IMvxCommand get_Item(string name);
    public void Add(IMvxCommand command, string name, string canExecuteName);
    private static void AddToLookup(IDictionary`2<string, IMvxCommand> lookup, IMvxCommand command, string name);
    private static void AddToLookup(IDictionary`2<string, List`1<IMvxCommand>> lookup, IMvxCommand command, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxCommandCollectionBuilder : object {
    private static string DefaultCommandSuffix;
    private static string DefaultCanExecutePrefix;
    [CompilerGeneratedAttribute]
private string <CommandSuffix>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <AdditionalCommandSuffixes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CanExecutePrefix>k__BackingField;
    public string CommandSuffix { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> AdditionalCommandSuffixes { get; public set; }
    public string CanExecutePrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandSuffix();
    [CompilerGeneratedAttribute]
public void set_CommandSuffix(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AdditionalCommandSuffixes();
    [CompilerGeneratedAttribute]
public void set_AdditionalCommandSuffixes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_CanExecutePrefix();
    [CompilerGeneratedAttribute]
public void set_CanExecutePrefix(string value);
    public virtual IMvxCommandCollection BuildCollectionFor(object owner);
    protected virtual void CreateCommands(object owner, MvxCommandCollection toReturn);
    protected virtual void CreateCommand(object owner, MvxCommandCollection collection, MethodInfo commandMethod, string commandName, bool hasParameter);
    protected virtual PropertyInfo CanExecutePropertyInfo(Type type, MethodInfo commandMethod);
    protected virtual string GetCommandNameOrNull(MethodInfo method);
    protected virtual string GetConventionalCommandNameOrNull(MethodInfo method, string suffix);
    protected MvxCommandAttribute CommandAttribute(MethodInfo method);
    protected virtual string CanExecuteProperyName(MethodInfo method);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType5`2<<>f__AnonymousType4`2<MethodInfo, int>, string> <CreateCommands>b__16_2(<>f__AnonymousType4`2<MethodInfo, int> <>h__TransparentIdentifier0);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxStrongCommandHelper : object {
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("1")]
public sealed virtual void RaiseCanExecuteChanged(object sender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxWeakCommandHelper : object {
    private List`1<WeakReference> _eventHandlers;
    private object _syncRoot;
    [NullableContextAttribute("2")]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    private IEnumerable`1<EventHandler> SafeCopyEventHandlerList();
    public sealed virtual void RaiseCanExecuteChanged(object sender);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Converters.IMvxValueConverter {
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface MvvmCross.Converters.IMvxValueConverterRegistry {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Converters.MvxBindingConstant : object {
    public static MvxBindingConstant DoNothing;
    public static MvxBindingConstant UnsetValue;
    private string _debug;
    private MvxBindingConstant(string debug);
    private static MvxBindingConstant();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.Converters.MvxDictionaryValueConverter`2 : MvxValueConverter`2<TKey, TValue> {
    protected virtual TValue Convert(TKey value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class MvvmCross.Converters.MvxValueConverter : object {
    [NullableContextAttribute("2")]
public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.Converters.MvxValueConverter`1 : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual object Convert(TFrom value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual TFrom TypedConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private static ILogger GetLog();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.Converters.MvxValueConverter`2 : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual TTo Convert(TFrom value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual TFrom ConvertBack(TTo value, Type targetType, object parameter, CultureInfo culture);
    private static ILogger GetLog();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxFillableStringToTypeParser {
    public IDictionary`2<Type, IParser> TypeParsers { get; }
    public IList`1<IExtraParser> ExtraParsers { get; }
    public abstract virtual IDictionary`2<Type, IParser> get_TypeParsers();
    public abstract virtual IList`1<IExtraParser> get_ExtraParsers();
}
public interface MvvmCross.Core.IMvxLifetime {
    [CompilerGeneratedAttribute]
public abstract virtual void add_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
}
public interface MvvmCross.Core.IMvxSettings {
    public bool AlwaysRaiseInpcOnUserInterfaceThread { get; public set; }
    public bool ShouldRaisePropertyChanging { get; public set; }
    public bool ShouldLogInpc { get; public set; }
    public abstract virtual bool get_AlwaysRaiseInpcOnUserInterfaceThread();
    public abstract virtual void set_AlwaysRaiseInpcOnUserInterfaceThread(bool value);
    public abstract virtual bool get_ShouldRaisePropertyChanging();
    public abstract virtual void set_ShouldRaisePropertyChanging(bool value);
    public abstract virtual bool get_ShouldLogInpc();
    public abstract virtual void set_ShouldLogInpc(bool value);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxSetup {
    public MvxSetupState State { get; }
    public abstract virtual void InitializePrimary();
    public abstract virtual void InitializeSecondary();
    public abstract virtual IEnumerable`1<Assembly> GetViewAssemblies();
    public abstract virtual IEnumerable`1<Assembly> GetViewModelAssemblies();
    public abstract virtual IEnumerable`1<Assembly> GetPluginAssemblies();
    public abstract virtual IEnumerable`1<Type> CreatableTypes();
    public abstract virtual IEnumerable`1<Type> CreatableTypes(Assembly assembly);
    public abstract virtual void LoadPlugins(IMvxPluginManager pluginManager);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    public abstract virtual MvxSetupState get_State();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxSetupMonitor {
    public abstract virtual Task InitializationComplete();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxStringToTypeParser {
    public abstract virtual bool TypeSupported(Type targetType);
    public abstract virtual object ReadValue(string rawValue, Type targetType, string fieldOrParameterName);
}
public enum MvvmCross.Core.MvxLifetimeEvent : Enum {
    public int value__;
    public static MvxLifetimeEvent Launching;
    public static MvxLifetimeEvent ActivatedFromMemory;
    public static MvxLifetimeEvent ActivatedFromDisk;
    public static MvxLifetimeEvent Deactivated;
    public static MvxLifetimeEvent Closing;
}
public class MvvmCross.Core.MvxLifetimeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MvxLifetimeEvent <LifetimeEvent>k__BackingField;
    public MvxLifetimeEvent LifetimeEvent { get; }
    public MvxLifetimeEventArgs(MvxLifetimeEvent lifetimeEvent);
    [CompilerGeneratedAttribute]
public MvxLifetimeEvent get_LifetimeEvent();
}
public abstract class MvvmCross.Core.MvxLifetimeMonitor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxLifetimeEventArgs> LifetimeChanged;
    protected void FireLifetimeChange(MvxLifetimeEvent which);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
}
public class MvvmCross.Core.MvxSettings : object {
    [CompilerGeneratedAttribute]
private bool <AlwaysRaiseInpcOnUserInterfaceThread>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRaisePropertyChanging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldLogInpc>k__BackingField;
    public bool AlwaysRaiseInpcOnUserInterfaceThread { get; public set; }
    public bool ShouldRaisePropertyChanging { get; public set; }
    public bool ShouldLogInpc { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AlwaysRaiseInpcOnUserInterfaceThread();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlwaysRaiseInpcOnUserInterfaceThread(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldRaisePropertyChanging();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldRaisePropertyChanging(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldLogInpc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldLogInpc(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Core.MvxSetup : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxSetupStateEventArgs> StateChanged;
    private static object _lock;
    private MvxSetupState _state;
    [NullableAttribute("2")]
private IMvxIoCProvider _iocProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`1<IMvxIoCProvider> <RegisterSetupDependencies>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`1<IMvxSetup> <SetupCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Assembly> <ViewAssemblies>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ILogger <SetupLog>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected static Action`1<IMvxIoCProvider> RegisterSetupDependencies { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected static Func`1<IMvxSetup> SetupCreator { get; protected set; }
    protected static List`1<Assembly> ViewAssemblies { get; }
    [NullableAttribute("2")]
protected ILogger SetupLog { get; private set; }
    public MvxSetupState State { get; private set; }
    private static MvxSetup();
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    [CompilerGeneratedAttribute]
protected static Action`1<IMvxIoCProvider> get_RegisterSetupDependencies();
    [CompilerGeneratedAttribute]
protected static void set_RegisterSetupDependencies(Action`1<IMvxIoCProvider> value);
    [CompilerGeneratedAttribute]
protected static Func`1<IMvxSetup> get_SetupCreator();
    [CompilerGeneratedAttribute]
protected static void set_SetupCreator(Func`1<IMvxSetup> value);
    [CompilerGeneratedAttribute]
protected static List`1<Assembly> get_ViewAssemblies();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ILogger get_SetupLog();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_SetupLog(ILogger value);
    public sealed virtual MvxSetupState get_State();
    private void set_State(MvxSetupState value);
    public static void RegisterSetupType(Assembly[] assemblies);
    public static IMvxSetup Instance();
    protected abstract virtual IMvxApplication CreateApp(IMvxIoCProvider iocProvider);
    protected abstract virtual IMvxViewsContainer CreateViewsContainer(IMvxIoCProvider iocProvider);
    protected abstract virtual IMvxViewDispatcher CreateViewDispatcher();
    public virtual void InitializePrimary();
    public virtual void InitializeSecondary();
    protected virtual void InitializeSingletonCache();
    protected virtual void InitializeInpcInterception(IMvxIoCProvider iocProvider);
    protected virtual IMvxChildViewModelCache InitializeViewModelCache(IMvxIoCProvider iocProvider);
    protected virtual IMvxChildViewModelCache CreateViewModelCache(IMvxIoCProvider iocProvider);
    protected virtual IMvxSettings InitializeSettings(IMvxIoCProvider iocProvider);
    protected virtual IMvxSettings CreateSettings(IMvxIoCProvider iocProvider);
    protected virtual IMvxStringToTypeParser InitializeStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxStringToTypeParser CreateStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxFillableStringToTypeParser InitializeFillableStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxFillableStringToTypeParser CreateFillableStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual void PerformBootstrapActions();
    protected virtual IMvxNavigationSerializer InitializeNavigationSerializer(IMvxIoCProvider iocProvider);
    protected virtual IMvxNavigationSerializer CreateNavigationSerializer(IMvxIoCProvider iocProvider);
    protected virtual IMvxCommandCollectionBuilder InitializeCommandCollectionBuilder(IMvxIoCProvider iocProvider);
    protected virtual IMvxCommandCollectionBuilder CreateCommandCollectionBuilder(IMvxIoCProvider iocProvider);
    protected virtual IMvxIoCProvider InitializeIoC();
    protected virtual void RegisterDefaultSetupDependencies(IMvxIoCProvider iocProvider);
    protected virtual IMvxIocOptions CreateIocOptions();
    protected virtual IMvxIoCProvider CreateIocProvider();
    protected virtual void InitializeFirstChance(IMvxIoCProvider iocProvider);
    protected virtual void InitializeLoggingServices(IMvxIoCProvider iocProvider);
    [NullableContextAttribute("2")]
protected abstract virtual ILoggerProvider CreateLogProvider();
    [NullableContextAttribute("2")]
protected abstract virtual ILoggerFactory CreateLogFactory();
    protected virtual IMvxViewModelLoader CreateViewModelLoader(IMvxIoCProvider iocProvider);
    protected virtual IMvxNavigationService CreateNavigationService(IMvxIoCProvider iocProvider);
    protected virtual IMvxPluginManager InitializePluginFramework(IMvxIoCProvider iocProvider);
    protected virtual IMvxPluginManager CreatePluginManager(IMvxIoCProvider iocProvider);
    protected virtual IMvxPluginConfiguration GetPluginConfiguration(Type plugin);
    public virtual IEnumerable`1<Assembly> GetPluginAssemblies();
    private static bool AssemblyReferencesMvvmCross(Assembly assembly, string mvvmCrossAssemblyName);
    public virtual void LoadPlugins(IMvxPluginManager pluginManager);
    protected virtual IMvxApplication CreateMvxApplication(IMvxIoCProvider iocProvider);
    protected virtual IMvxApplication InitializeMvxApplication(IMvxIoCProvider iocProvider);
    protected virtual void InitializeApp(IMvxApplication app);
    protected virtual IMvxViewsContainer InitializeViewsContainer(IMvxIoCProvider iocProvider);
    protected virtual void InitializeViewDispatcher(IMvxIoCProvider iocProvider);
    protected virtual IMvxNavigationService InitializeNavigationService(IMvxIoCProvider iocProvider);
    protected virtual void LoadNavigationServiceRoutes(IMvxNavigationService navigationService, IMvxIoCProvider iocProvider);
    public virtual IEnumerable`1<Assembly> GetViewAssemblies();
    public virtual IEnumerable`1<Assembly> GetViewModelAssemblies();
    protected virtual IEnumerable`1<Assembly> GetBootstrapOwningAssemblies();
    protected abstract virtual IMvxNameMapping CreateViewToViewModelNaming();
    protected virtual IMvxViewModelByNameLookup CreateViewModelByNameLookup(IMvxIoCProvider iocProvider);
    protected virtual IMvxViewModelByNameRegistry CreateViewModelByNameRegistry(IMvxIoCProvider iocProvider);
    protected virtual IMvxNameMapping InitializeViewModelTypeFinder(IMvxIoCProvider iocProvider);
    protected virtual IDictionary`2<Type, Type> InitializeLookupDictionary(IMvxIoCProvider iocProvider);
    protected virtual IMvxViewsContainer InitializeViewLookup(IDictionary`2<Type, Type> viewModelViewLookup, IMvxIoCProvider iocProvider);
    protected virtual void InitializeBindingBuilder(IMvxIoCProvider iocProvider);
    protected virtual void InitializeLastChance(IMvxIoCProvider iocProvider);
    public sealed virtual IEnumerable`1<Type> CreatableTypes();
    public sealed virtual IEnumerable`1<Type> CreatableTypes(Assembly assembly);
    private void FireStateChange(MvxSetupState state);
    protected static void ValidateArguments(IMvxIoCProvider iocProvider);
}
[ExtensionAttribute]
public static class MvvmCross.Core.MvxSetupExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RegisterSetupType(object platformApplication, Assembly[] assemblies);
    [NullableContextAttribute("1")]
public static TSetup CreateSetup(Assembly assembly, Object[] parameters);
    public static TSetup CreateSetup();
    [NullableContextAttribute("2")]
public static Type FindSetupType(Assembly assembly);
    [NullableContextAttribute("2")]
public static Type FindSetupType();
}
public abstract class MvvmCross.Core.MvxSetupSingleton : MvxSingleton`1<MvxSetupSingleton> {
    private static object LockObject;
    private IMvxSetup _setup;
    protected IMvxSetup Setup { get; }
    private static MvxSetupSingleton();
    protected virtual IMvxSetup get_Setup();
    public virtual TMvxSetup PlatformSetup();
    protected static TMvxSetupSingleton EnsureSingletonAvailable();
    public virtual void EnsureInitialized();
    protected virtual void CreateSetup();
}
public enum MvvmCross.Core.MvxSetupState : Enum {
    public int value__;
    public static MvxSetupState Uninitialized;
    public static MvxSetupState InitializingPrimary;
    public static MvxSetupState InitializedPrimary;
    public static MvxSetupState InitializingSecondary;
    public static MvxSetupState Initialized;
}
public class MvvmCross.Core.MvxSetupStateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MvxSetupState <SetupState>k__BackingField;
    public MvxSetupState SetupState { get; }
    public MvxSetupStateEventArgs(MvxSetupState setupState);
    [CompilerGeneratedAttribute]
public MvxSetupState get_SetupState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Core.MvxSimplePropertyDictionaryExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToSimpleStringPropertyDictionary(IDictionary`2<string, object> input);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IDictionary`2<string, string> SafeGetData(IMvxBundle bundle);
    [ExtensionAttribute]
public static void Write(IDictionary`2<string, string> data, object toStore);
    [ExtensionAttribute]
public static T Read(IDictionary`2<string, string> data);
    [ExtensionAttribute]
public static object Read(IDictionary`2<string, string> data, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<object> CreateArgumentList(IDictionary`2<string, string> data, IEnumerable`1<ParameterInfo> requiredParameters, string debugText);
    [ExtensionAttribute]
public static object GetArgumentValue(IDictionary`2<string, string> data, ParameterInfo requiredParameter, string debugText);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToSimplePropertyDictionary(object input);
    [ExtensionAttribute]
public static string GetPropertyValueAsString(object input, PropertyInfo propertyInfo);
    [ExtensionAttribute]
private static string ToStringInvariant(object value);
}
public class MvvmCross.Core.MvxStringToTypeParser : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDictionary`2<Type, IParser> <TypeParsers>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<IExtraParser> <ExtraParsers>k__BackingField;
    [NullableAttribute("1")]
public IDictionary`2<Type, IParser> TypeParsers { get; }
    [NullableAttribute("1")]
public IList`1<IExtraParser> ExtraParsers { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<Type, IParser> get_TypeParsers();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IList`1<IExtraParser> get_ExtraParsers();
    [NullableContextAttribute("1")]
public sealed virtual bool TypeSupported(Type targetType);
    [NullableContextAttribute("1")]
public sealed virtual object ReadValue(string rawValue, Type targetType, string fieldOrParameterName);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.Parse.StringDictionary.IMvxStringDictionaryParser {
    public abstract virtual IDictionary`2<string, string> Parse(string textToParse);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.Parse.StringDictionary.IMvxStringDictionaryWriter {
    public abstract virtual string Write(IDictionary`2<string, string> dictionary);
}
public class MvvmCross.Core.Parse.StringDictionary.MvxStringDictionaryParser : MvxParser {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CurrentEntries>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, string> CurrentEntries { get; private set; }
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, string> get_CurrentEntries();
    [CompilerGeneratedAttribute]
private void set_CurrentEntries(Dictionary`2<string, string> value);
    [NullableContextAttribute("1")]
public sealed virtual IDictionary`2<string, string> Parse(string textToParse);
    [NullableContextAttribute("2")]
protected virtual void Reset(string textToParse);
    private void ParseNextKeyValuePair();
}
public class MvvmCross.Core.Parse.StringDictionary.MvxStringDictionaryWriter : object {
    [NullableContextAttribute("1")]
public sealed virtual string Write(IDictionary`2<string, string> dictionary);
    [NullableContextAttribute("1")]
private static string Quote(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Core.Parse.StringDictionary.MvxViewModelRequestCustomTextSerializer : object {
    [NullableAttribute("2")]
private IMvxViewModelByNameLookup _byNameLookup;
    protected IMvxViewModelByNameLookup ByNameLookup { get; }
    protected IMvxViewModelByNameLookup get_ByNameLookup();
    public sealed virtual string SerializeObject(object toSerialise);
    public sealed virtual T DeserializeObject(string inputText);
    public sealed virtual object DeserializeObject(Type type, string inputText);
    protected virtual IDictionary`2<string, string> DeserializeStringDictionary(string inputText);
    protected virtual MvxViewModelRequest DeserializeViewModelRequest(string inputText);
    protected virtual string Serialize(IDictionary`2<string, string> toSerialise);
    protected virtual string Serialize(MvxViewModelRequest toSerialise);
    protected virtual string SerializeViewModelName(Type viewModelType);
    protected virtual Type DeserializeViewModelType(string viewModelTypeName);
    private static string SafeGetValue(IDictionary`2<string, string> dictionary, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Exceptions.MvxException : Exception {
    public MvxException(string message);
    public MvxException(string messageFormat, Object[] messageFormatArguments);
    public MvxException(Exception innerException, string messageFormat, Object[] formatArguments);
    public MvxException(string message, Exception innerException);
    protected MvxException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Exceptions.MvxExceptionExtensions : object {
    [ExtensionAttribute]
public static string ToLongString(Exception exception);
    [ExtensionAttribute]
public static Exception MvxWrap(Exception exception);
    [ExtensionAttribute]
public static Exception MvxWrap(Exception exception, string message);
    [ExtensionAttribute]
public static Exception MvxWrap(Exception exception, string messageFormat, Object[] formatArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Exceptions.MvxIoCResolveException : MvxException {
    public MvxIoCResolveException(string message);
    public MvxIoCResolveException(string messageFormat, Object[] messageFormatArguments);
    public MvxIoCResolveException(Exception innerException, string messageFormat, Object[] formatArguments);
    public MvxIoCResolveException(string message, Exception innerException);
    protected MvxIoCResolveException(SerializationInfo info, StreamingContext context);
}
public interface MvvmCross.IoC.IMvxIocOptions {
    public bool TryToDetectSingletonCircularReferences { get; }
    public bool TryToDetectDynamicCircularReferences { get; }
    public bool CheckDisposeIfPropertyInjectionFails { get; }
    public Type PropertyInjectorType { get; }
    public IMvxPropertyInjectorOptions PropertyInjectorOptions { get; }
    public abstract virtual bool get_TryToDetectSingletonCircularReferences();
    public abstract virtual bool get_TryToDetectDynamicCircularReferences();
    public abstract virtual bool get_CheckDisposeIfPropertyInjectionFails();
    public abstract virtual Type get_PropertyInjectorType();
    public abstract virtual IMvxPropertyInjectorOptions get_PropertyInjectorOptions();
}
[NullableContextAttribute("1")]
public interface MvvmCross.IoC.IMvxIoCProvider {
    public abstract virtual bool CanResolve();
    public abstract virtual bool CanResolve(Type type);
    public abstract virtual T Resolve();
    public abstract virtual object Resolve(Type type);
    public abstract virtual bool TryResolve(T& resolved);
    public abstract virtual bool TryResolve(Type type, Object& resolved);
    public abstract virtual T Create();
    public abstract virtual object Create(Type type);
    public abstract virtual T GetSingleton();
    public abstract virtual object GetSingleton(Type type);
    public abstract virtual void RegisterType();
    public abstract virtual void RegisterType(Func`1<TInterface> constructor);
    public abstract virtual void RegisterType(Type t, Func`1<object> constructor);
    public abstract virtual void RegisterType(Type tFrom, Type tTo);
    public abstract virtual void RegisterSingleton(TInterface theObject);
    public abstract virtual void RegisterSingleton(Type tInterface, object theObject);
    public abstract virtual void RegisterSingleton(Func`1<TInterface> theConstructor);
    public abstract virtual void RegisterSingleton(Type tInterface, Func`1<object> theConstructor);
    public abstract virtual T IoCConstruct();
    public abstract virtual T IoCConstruct(IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public abstract virtual T IoCConstruct(object arguments);
    public abstract virtual T IoCConstruct(Object[] arguments);
    public abstract virtual object IoCConstruct(Type type);
    public abstract virtual object IoCConstruct(Type type, IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public abstract virtual object IoCConstruct(Type type, object arguments);
    public abstract virtual object IoCConstruct(Type type, Object[] arguments);
    public abstract virtual IMvxIoCProvider CreateChildContainer();
}
public interface MvvmCross.IoC.IMvxPropertyInjector {
    public abstract virtual void Inject(object target, IMvxPropertyInjectorOptions options);
}
public interface MvvmCross.IoC.IMvxPropertyInjectorOptions {
    public MvxPropertyInjection InjectIntoProperties { get; }
    public bool ThrowIfPropertyInjectionFails { get; }
    public abstract virtual MvxPropertyInjection get_InjectIntoProperties();
    public abstract virtual bool get_ThrowIfPropertyInjectionFails();
}
public interface MvvmCross.IoC.IMvxTypeCache`1 {
    public Dictionary`2<string, Type> LowerCaseFullNameCache { get; }
    public Dictionary`2<string, Type> FullNameCache { get; }
    public Dictionary`2<string, Type> NameCache { get; }
    public abstract virtual Dictionary`2<string, Type> get_LowerCaseFullNameCache();
    public abstract virtual Dictionary`2<string, Type> get_FullNameCache();
    public abstract virtual Dictionary`2<string, Type> get_NameCache();
    public abstract virtual void AddAssembly(Assembly assembly);
}
[AttributeUsageAttribute("128")]
public abstract class MvvmCross.IoC.MvxConditionalConventionalAttribute : Attribute {
    public bool IsConditionSatisfied { get; }
    public abstract virtual bool get_IsConditionSatisfied();
}
[ExtensionAttribute]
public static class MvvmCross.IoC.MvxConventionAttributeExtensions : object {
    [ExtensionAttribute]
public static bool IsConventional(Type candidateType);
    [ExtensionAttribute]
public static bool IsConventional(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool SatisfiesConditionalConventions(Type candidateType);
    [ExtensionAttribute]
public static bool SatisfiesConditionalConventions(PropertyInfo propertyInfo);
}
[AttributeUsageAttribute("128")]
public class MvvmCross.IoC.MvxInjectAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.IoC.MvxIoCContainer : object {
    private Dictionary`2<Type, IResolver> _resolvers;
    private Dictionary`2<Type, bool> _circularTypeDetection;
    private object _lockObject;
    private IMvxIocOptions _options;
    [NullableAttribute("2")]
private IMvxPropertyInjector _propertyInjector;
    [NullableAttribute("2")]
private IMvxIoCProvider _parentProvider;
    private static Nullable`1<ResolverType> ResolverTypeNoneSpecified;
    private IMvxIocOptions Options { get; }
    [NullableContextAttribute("2")]
public MvxIoCContainer(IMvxIocOptions options, IMvxIoCProvider parentProvider);
    public MvxIoCContainer(IMvxIoCProvider parentProvider);
    private IMvxIocOptions get_Options();
    public sealed virtual bool CanResolve();
    public sealed virtual bool CanResolve(Type type);
    public sealed virtual bool TryResolve(T& resolved);
    public sealed virtual bool TryResolve(Type type, Object& resolved);
    public sealed virtual T Resolve();
    public sealed virtual object Resolve(Type type);
    public sealed virtual T GetSingleton();
    public sealed virtual object GetSingleton(Type type);
    public sealed virtual T Create();
    public sealed virtual object Create(Type type);
    public sealed virtual void RegisterType();
    public sealed virtual void RegisterType(Func`1<TInterface> constructor);
    public sealed virtual void RegisterType(Type t, Func`1<object> constructor);
    public sealed virtual void RegisterType(Type tFrom, Type tTo);
    public sealed virtual void RegisterSingleton(TInterface theObject);
    public sealed virtual void RegisterSingleton(Type tInterface, object theObject);
    public sealed virtual void RegisterSingleton(Func`1<TInterface> theConstructor);
    public sealed virtual void RegisterSingleton(Type tInterface, Func`1<object> theConstructor);
    public sealed virtual object IoCConstruct(Type type);
    [NullableContextAttribute("2")]
public sealed virtual object IoCConstruct(Type type, object arguments);
    public sealed virtual T IoCConstruct();
    public sealed virtual T IoCConstruct(IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public sealed virtual T IoCConstruct(object arguments);
    public sealed virtual T IoCConstruct(Object[] arguments);
    public sealed virtual object IoCConstruct(Type type, Object[] arguments);
    public sealed virtual object IoCConstruct(Type type, IDictionary`2<string, object> arguments);
    private object IoCConstruct(Type type, ConstructorInfo constructor, Object[] arguments);
    public void CleanAllResolvers();
    public sealed virtual IMvxIoCProvider CreateChildContainer();
    [NullableContextAttribute("2")]
private static bool Supports(IResolver resolver, Nullable`1<ResolverType> requiredResolverType);
    private bool InternalTryResolve(Type type, Object& resolved);
    private bool InternalTryResolve(Type type, Nullable`1<ResolverType> requiredResolverType, Object& resolved);
    private bool InternalTryResolve(Type type, IResolver resolver, Object& resolved);
    private bool TryGetResolver(Type type, IResolver& resolver);
    private bool ShouldDetectCircularReferencesFor(IResolver resolver);
    private void InternalSetResolver(Type interfaceType, IResolver resolver);
    private void InjectProperties(object toReturn);
    private List`1<object> GetIoCParameterValues(Type type, MethodBase selectedConstructor, IDictionary`2<string, object> arguments);
    private List`1<object> GetIoCParameterValues(Type type, MethodBase selectedConstructor, Object[] arguments);
    private bool TryResolveParameter(Type type, ParameterInfo parameterInfo, Object& parameterValue);
}
[ExtensionAttribute]
public static class MvvmCross.IoC.MvxIoCContainerExtensions : object {
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`2<TParameter1, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`3<TParameter1, TParameter2, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`4<TParameter1, TParameter2, TParameter3, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`5<TParameter1, TParameter2, TParameter3, TParameter4, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TInterface> typedConstructor);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc, IDictionary`2<string, object> arguments);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc, object arguments);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Object[] arguments);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, IDictionary`2<string, object> arguments);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, object arguments);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, Object[] arguments);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`1<TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, Func`1<object> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`2<TParameter1, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`3<TParameter1, TParameter2, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`4<TParameter1, TParameter2, TParameter3, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`5<TParameter1, TParameter2, TParameter3, TParameter4, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Type tType);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`2<TParameter1, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`3<TParameter1, TParameter2, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`4<TParameter1, TParameter2, TParameter3, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`5<TParameter1, TParameter2, TParameter3, TParameter4, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TInterface> constructor);
}
public class MvvmCross.IoC.MvxIocOptions : object {
    [CompilerGeneratedAttribute]
private bool <TryToDetectSingletonCircularReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryToDetectDynamicCircularReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckDisposeIfPropertyInjectionFails>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyInjectorType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxPropertyInjectorOptions <PropertyInjectorOptions>k__BackingField;
    public bool TryToDetectSingletonCircularReferences { get; public set; }
    public bool TryToDetectDynamicCircularReferences { get; public set; }
    public bool CheckDisposeIfPropertyInjectionFails { get; public set; }
    public Type PropertyInjectorType { get; public set; }
    public IMvxPropertyInjectorOptions PropertyInjectorOptions { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TryToDetectSingletonCircularReferences();
    [CompilerGeneratedAttribute]
public void set_TryToDetectSingletonCircularReferences(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TryToDetectDynamicCircularReferences();
    [CompilerGeneratedAttribute]
public void set_TryToDetectDynamicCircularReferences(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CheckDisposeIfPropertyInjectionFails();
    [CompilerGeneratedAttribute]
public void set_CheckDisposeIfPropertyInjectionFails(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_PropertyInjectorType();
    [CompilerGeneratedAttribute]
public void set_PropertyInjectorType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxPropertyInjectorOptions get_PropertyInjectorOptions();
    [CompilerGeneratedAttribute]
public void set_PropertyInjectorOptions(IMvxPropertyInjectorOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.IoC.MvxIoCProvider : MvxSingleton`1<IMvxIoCProvider> {
    private MvxIoCContainer _provider;
    [NullableContextAttribute("2")]
private MvxIoCProvider(IMvxIocOptions options);
    public static IMvxIoCProvider Initialize(IMvxIocOptions options);
    public sealed virtual bool CanResolve();
    public sealed virtual bool CanResolve(Type type);
    public sealed virtual bool TryResolve(T& resolved);
    public sealed virtual bool TryResolve(Type type, Object& resolved);
    public sealed virtual T Resolve();
    public sealed virtual object Resolve(Type type);
    public sealed virtual T GetSingleton();
    public sealed virtual object GetSingleton(Type type);
    public sealed virtual T Create();
    public sealed virtual object Create(Type type);
    public sealed virtual void RegisterType();
    public sealed virtual void RegisterType(Func`1<TInterface> constructor);
    public sealed virtual void RegisterType(Type t, Func`1<object> constructor);
    public sealed virtual void RegisterType(Type tFrom, Type tTo);
    public sealed virtual void RegisterSingleton(TInterface theObject);
    public sealed virtual void RegisterSingleton(Type tInterface, object theObject);
    public sealed virtual void RegisterSingleton(Func`1<TInterface> theConstructor);
    public sealed virtual void RegisterSingleton(Type tInterface, Func`1<object> theConstructor);
    public sealed virtual T IoCConstruct();
    public sealed virtual T IoCConstruct(IDictionary`2<string, object> arguments);
    public sealed virtual T IoCConstruct(Object[] arguments);
    [NullableContextAttribute("2")]
public sealed virtual T IoCConstruct(object arguments);
    public sealed virtual object IoCConstruct(Type type);
    public sealed virtual object IoCConstruct(Type type, IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public sealed virtual object IoCConstruct(Type type, object arguments);
    public sealed virtual object IoCConstruct(Type type, Object[] arguments);
    public void CleanAllResolvers();
    public sealed virtual IMvxIoCProvider CreateChildContainer();
}
public class MvvmCross.IoC.MvxLazySingletonCreator : object {
    private object _lockObject;
    private Type _type;
    private object _instance;
    public object Instance { get; }
    public MvxLazySingletonCreator(Type type);
    public object get_Instance();
}
public enum MvvmCross.IoC.MvxPropertyInjection : Enum {
    public int value__;
    public static MvxPropertyInjection None;
    public static MvxPropertyInjection MvxInjectInterfaceProperties;
    public static MvxPropertyInjection AllInterfaceProperties;
}
public class MvvmCross.IoC.MvxPropertyInjector : object {
    public virtual void Inject(object target, IMvxPropertyInjectorOptions options);
    protected virtual void InjectProperty(object toReturn, PropertyInfo injectableProperty, IMvxPropertyInjectorOptions options);
    protected virtual IEnumerable`1<PropertyInfo> FindInjectableProperties(Type type, IMvxPropertyInjectorOptions options);
}
public class MvvmCross.IoC.MvxPropertyInjectorOptions : object {
    [CompilerGeneratedAttribute]
private MvxPropertyInjection <InjectIntoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowIfPropertyInjectionFails>k__BackingField;
    private static IMvxPropertyInjectorOptions _mvxInjectProperties;
    private static IMvxPropertyInjectorOptions _allProperties;
    public MvxPropertyInjection InjectIntoProperties { get; public set; }
    public bool ThrowIfPropertyInjectionFails { get; public set; }
    public static IMvxPropertyInjectorOptions MvxInject { get; }
    public static IMvxPropertyInjectorOptions All { get; }
    [CompilerGeneratedAttribute]
public sealed virtual MvxPropertyInjection get_InjectIntoProperties();
    [CompilerGeneratedAttribute]
public void set_InjectIntoProperties(MvxPropertyInjection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowIfPropertyInjectionFails();
    [CompilerGeneratedAttribute]
public void set_ThrowIfPropertyInjectionFails(bool value);
    public static IMvxPropertyInjectorOptions get_MvxInject();
    public static IMvxPropertyInjectorOptions get_All();
}
public class MvvmCross.IoC.MvxTypeCache`1 : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <LowerCaseFullNameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <FullNameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <NameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Assembly, bool> <CachedAssemblies>k__BackingField;
    public Dictionary`2<string, Type> LowerCaseFullNameCache { get; }
    public Dictionary`2<string, Type> FullNameCache { get; }
    public Dictionary`2<string, Type> NameCache { get; }
    public Dictionary`2<Assembly, bool> CachedAssemblies { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Type> get_LowerCaseFullNameCache();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Type> get_FullNameCache();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Type> get_NameCache();
    [CompilerGeneratedAttribute]
public Dictionary`2<Assembly, bool> get_CachedAssemblies();
    public sealed virtual void AddAssembly(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.IoC.MvxTypeExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> ExceptionSafeGetTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<Type> CreatableTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<Type> EndingWith(IEnumerable`1<Type> types, string endingWith);
    [ExtensionAttribute]
public static IEnumerable`1<Type> StartingWith(IEnumerable`1<Type> types, string endingWith);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Containing(IEnumerable`1<Type> types, string containing);
    [ExtensionAttribute]
public static IEnumerable`1<Type> InNamespace(IEnumerable`1<Type> types, string namespaceBase);
    [ExtensionAttribute]
public static IEnumerable`1<Type> WithAttribute(IEnumerable`1<Type> types, Type attributeType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> WithAttribute(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Inherits(IEnumerable`1<Type> types, Type baseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Inherits(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<Type> DoesNotInherit(IEnumerable`1<Type> types, Type baseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> DoesNotInherit(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Except(IEnumerable`1<Type> types, Type[] except);
    [ExtensionAttribute]
public static bool IsGenericPartiallyClosed(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> AsTypes(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> AsInterfaces(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> AsInterfaces(IEnumerable`1<Type> types, Type[] interfaces);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> ExcludeInterfaces(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs, Type[] toExclude);
    [ExtensionAttribute]
public static void RegisterAsSingleton(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs);
    [ExtensionAttribute]
public static void RegisterAsLazySingleton(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs);
    [ExtensionAttribute]
public static void RegisterAsDynamic(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object CreateDefault(Type type);
    [ExtensionAttribute]
public static ConstructorInfo FindApplicableConstructor(Type type, IDictionary`2<string, object> arguments);
    [ExtensionAttribute]
public static ConstructorInfo FindApplicableConstructor(Type type, Object[] arguments);
}
[AttributeUsageAttribute("4")]
public class MvvmCross.IoC.MvxUnconventionalAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface MvvmCross.Localization.IMvxLanguageBinder {
    public abstract virtual string GetText(string entryKey);
    public abstract virtual string GetText(string entryKey, Object[] args);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Localization.IMvxLocalizedTextSourceOwner {
    public IMvxLanguageBinder LocalizedTextSource { get; }
    public abstract virtual IMvxLanguageBinder get_LocalizedTextSource();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Localization.IMvxTextProvider {
    [NullableContextAttribute("2")]
public abstract virtual string GetText(string namespaceKey, string typeKey, string name);
    [NullableContextAttribute("2")]
public abstract virtual string GetText(string namespaceKey, string typeKey, string name, Object[] formatArgs);
    public abstract virtual bool TryGetText(String& textValue, string namespaceKey, string typeKey, string name);
    public abstract virtual bool TryGetText(String& textValue, string namespaceKey, string typeKey, string name, Object[] formatArgs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Localization.MvxLanguageBinder : object {
    [NullableAttribute("1")]
private object _lockObject;
    private string _namespaceName;
    private string _typeName;
    private IMvxTextProvider _cachedTextProvider;
    [NullableContextAttribute("1")]
public MvxLanguageBinder(Type owningObject);
    public MvxLanguageBinder(string namespaceName, string typeName);
    protected virtual IMvxTextProvider GetTextProvider();
    [NullableContextAttribute("1")]
public virtual string GetText(string entryKey);
    [NullableContextAttribute("1")]
public virtual string GetText(string entryKey, Object[] args);
    protected virtual string GetText(string namespaceKey, string typeKey, string entryKey);
}
public class MvvmCross.Localization.MvxLanguageConverter : MvxValueConverter {
    [NullableContextAttribute("2")]
public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class MvvmCross.Logging.MvxLogHost : object {
    private static ILogger _defaultLogger;
    public static ILogger Default { get; }
    public static ILogger get_Default();
    public static ILogger`1<T> GetLog();
    [NullableContextAttribute("1")]
public static ILogger GetLog(string categoryName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class MvvmCross.Mvx : object {
    public static IMvxIoCProvider IoCProvider { get; }
    public static IMvxIoCProvider get_IoCProvider();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Navigation.EventArguments.ChangePresentationEventArgs : MvxCancelEventArgs {
    [CompilerGeneratedAttribute]
private MvxPresentationHint <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Result>k__BackingField;
    public MvxPresentationHint Hint { get; public set; }
    public Nullable`1<bool> Result { get; public set; }
    public ChangePresentationEventArgs(CancellationToken cancellationToken);
    public ChangePresentationEventArgs(MvxPresentationHint hint, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public MvxPresentationHint get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(MvxPresentationHint value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Navigation.EventArguments.IMvxNavigateEventArgs {
    public bool Cancel { get; public set; }
    public NavigationMode Mode { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public abstract virtual bool get_Cancel();
    public abstract virtual void set_Cancel(bool value);
    public abstract virtual NavigationMode get_Mode();
    public abstract virtual void set_Mode(NavigationMode value);
    public abstract virtual IMvxViewModel get_ViewModel();
    public abstract virtual void set_ViewModel(IMvxViewModel value);
}
public class MvvmCross.Navigation.EventArguments.MvxCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    protected CancellationToken CancellationToken { get; }
    public MvxCancelEventArgs(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
protected CancellationToken get_CancellationToken();
    protected virtual void Canceled();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Navigation.EventArguments.MvxNavigateEventArgs : MvxCancelEventArgs {
    [CompilerGeneratedAttribute]
private NavigationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxViewModel <ViewModel>k__BackingField;
    public NavigationMode Mode { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public MvxNavigateEventArgs(NavigationMode mode, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public MvxNavigateEventArgs(IMvxViewModel viewModel, NavigationMode mode, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual NavigationMode get_Mode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Mode(NavigationMode value);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewModel(IMvxViewModel value);
    private sealed virtual override bool MvvmCross.Navigation.EventArguments.IMvxNavigateEventArgs.get_Cancel();
    private sealed virtual override void MvvmCross.Navigation.EventArguments.IMvxNavigateEventArgs.set_Cancel(bool value);
}
public enum MvvmCross.Navigation.EventArguments.NavigationMode : Enum {
    public int value__;
    public static NavigationMode None;
    public static NavigationMode Show;
    public static NavigationMode Close;
}
public interface MvvmCross.Navigation.IMvxNavigationFacade {
    public abstract virtual Task`1<MvxViewModelRequest> BuildViewModelRequest(string url, IDictionary`2<string, string> currentParameters);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Navigation.IMvxNavigationService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    public abstract virtual void LoadRoutes(IEnumerable`1<Assembly> assemblies);
    public abstract virtual Task`1<bool> Navigate(IMvxViewModel viewModel, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(Type viewModelType, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(Type viewModelType, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(string path, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(string path, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CanNavigate(string path);
    public abstract virtual Task`1<bool> CanNavigate();
    public abstract virtual Task`1<bool> CanNavigate(Type viewModelType);
    public abstract virtual Task`1<bool> Close(IMvxViewModel viewModel, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class MvvmCross.Navigation.MvxNavigationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewModelOrFacade>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriRegex>k__BackingField;
    public Type ViewModelOrFacade { get; }
    public string UriRegex { get; }
    public MvxNavigationAttribute(Type viewModelOrFacade, string uriRegex);
    [CompilerGeneratedAttribute]
public Type get_ViewModelOrFacade();
    [CompilerGeneratedAttribute]
public string get_UriRegex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Navigation.MvxNavigationExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> CanNavigate(IMvxNavigationService navigationService, Uri path);
    [ExtensionAttribute]
public static Task Navigate(IMvxNavigationService navigationService, Uri path, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Navigate(IMvxNavigationService navigationService, Uri path, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Navigation.MvxNavigationService : object {
    private IMvxIoCProvider _iocProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ILogger> _log;
    [CompilerGeneratedAttribute]
private IMvxViewDispatcher <ViewDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<IMvxViewsContainer> <ViewsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Type> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxViewModelLoader <ViewModelLoader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConditionalWeakTable`2<IMvxViewModel, TaskCompletionSource`1<object>> <TaskCompletionResults>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> WillNavigate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> DidNavigate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> WillClose;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> DidClose;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ChangePresentationEventArgs> WillChangePresentation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ChangePresentationEventArgs> DidChangePresentation;
    public IMvxViewDispatcher ViewDispatcher { get; }
    protected Lazy`1<IMvxViewsContainer> ViewsContainer { get; }
    protected Dictionary`2<Regex, Type> Routes { get; }
    protected IMvxViewModelLoader ViewModelLoader { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected ConditionalWeakTable`2<IMvxViewModel, TaskCompletionSource`1<object>> TaskCompletionResults { get; }
    public MvxNavigationService(IMvxViewModelLoader viewModelLoader, IMvxViewDispatcher viewDispatcher, IMvxIoCProvider iocProvider);
    [CompilerGeneratedAttribute]
public IMvxViewDispatcher get_ViewDispatcher();
    [CompilerGeneratedAttribute]
protected Lazy`1<IMvxViewsContainer> get_ViewsContainer();
    [CompilerGeneratedAttribute]
protected Dictionary`2<Regex, Type> get_Routes();
    [CompilerGeneratedAttribute]
protected IMvxViewModelLoader get_ViewModelLoader();
    [CompilerGeneratedAttribute]
protected void set_ViewModelLoader(IMvxViewModelLoader value);
    [CompilerGeneratedAttribute]
protected ConditionalWeakTable`2<IMvxViewModel, TaskCompletionSource`1<object>> get_TaskCompletionResults();
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    public sealed virtual void LoadRoutes(IEnumerable`1<Assembly> assemblies);
    protected virtual bool TryGetRoute(string path, KeyValuePair`2& entry);
    protected virtual IDictionary`2<string, string> BuildParamDictionary(Regex regex, Match match);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<NavigationRouteRequest>d__40")]
protected virtual Task`1<MvxViewModelInstanceRequest> NavigationRouteRequest(string path, IMvxBundle presentationBundle);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<NavigationRouteRequest>d__41`1")]
protected Task`1<MvxViewModelInstanceRequest> NavigationRouteRequest(string path, TParameter param, IMvxBundle presentationBundle);
    public virtual Task`1<bool> CanNavigate(string path);
    public virtual Task`1<bool> CanNavigate();
    public virtual Task`1<bool> CanNavigate(Type viewModelType);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Navigate>d__45")]
protected virtual Task`1<bool> Navigate(MvxViewModelRequest request, IMvxViewModel viewModel, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Navigate>d__46")]
public virtual Task`1<bool> Navigate(string path, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Navigate>d__47`1")]
public virtual Task`1<bool> Navigate(string path, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(Type viewModelType, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(Type viewModelType, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(IMvxViewModel viewModel, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<ChangePresentation>d__54")]
public virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Close>d__55")]
public virtual Task`1<bool> Close(IMvxViewModel viewModel, CancellationToken cancellationToken);
    protected virtual void OnWillNavigate(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnDidNavigate(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnWillClose(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnDidClose(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnWillChangePresentation(object sender, ChangePresentationEventArgs e);
    protected virtual void OnDidChangePresentation(object sender, ChangePresentationEventArgs e);
    private static void ValidateArguments(MvxViewModelRequest request, IMvxViewModel viewModel);
    private static void ValidateArguments(string path, TParameter param);
    private static void ValidateArguments(string path);
    private static void ValidateArguments(MvxPresentationHint hint);
    private static void ValidateArguments(IMvxViewModel viewModel);
    [CompilerGeneratedAttribute]
private IMvxViewsContainer <.ctor>b__36_0();
}
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxAndroidViewBinder {
    public IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> CreatedBindings { get; }
    public abstract virtual void BindView(View view, Context context, IAttributeSet attrs);
    public abstract virtual IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> get_CreatedBindings();
}
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxAndroidViewBinderFactory {
    public abstract virtual IMvxAndroidViewBinder Create(object source);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxAndroidViewFactory {
    public abstract virtual View CreateView(View parent, string name, Context context, IAttributeSet attrs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxLayoutInflaterFactory {
    public abstract virtual View OnCreateView(View parent, string name, Context context, IAttributeSet attrs);
}
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxLayoutInflaterFactoryFactory {
    public abstract virtual IMvxLayoutInflaterFactory Create(object source);
}
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxLayoutInflaterHolderFactory {
    public IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> CreatedBindings { get; }
    public abstract virtual IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> get_CreatedBindings();
    public abstract virtual View BindCreatedView(View view, Context context, IAttributeSet attrs);
}
public interface MvvmCross.Platforms.Android.Binding.Binders.IMvxLayoutInflaterHolderFactoryFactory {
    public abstract virtual IMvxLayoutInflaterHolderFactory Create(object source);
}
public class MvvmCross.Platforms.Android.Binding.Binders.MvxAndroidViewBinder : object {
    private List`1<KeyValuePair`2<object, IMvxUpdateableBinding>> _viewBindings;
    private Lazy`1<IMvxAndroidBindingResource> mvxAndroidBindingResource;
    private object _source;
    private IMvxBinder _binder;
    protected IMvxBinder Binder { get; }
    public IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> CreatedBindings { get; }
    public MvxAndroidViewBinder(object source);
    protected IMvxBinder get_Binder();
    public sealed virtual IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> get_CreatedBindings();
    public virtual void BindView(View view, Context context, IAttributeSet attrs);
    private void ApplyBindingsFromAttribute(View view, TypedArray typedArray, int attributeId);
    private void StoreBindings(View view, IEnumerable`1<IMvxUpdateableBinding> newBindings);
    private void ApplyLanguageBindingsFromAttribute(View view, TypedArray typedArray, int attributeId);
}
public class MvvmCross.Platforms.Android.Binding.Binders.MvxAndroidViewBinderFactory : object {
    public sealed virtual IMvxAndroidViewBinder Create(object source);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Binding.Binders.MvxAndroidViewFactory : object {
    private IMvxViewTypeResolver _viewTypeResolver;
    protected IMvxViewTypeResolver ViewTypeResolver { get; }
    protected IMvxViewTypeResolver get_ViewTypeResolver();
    [NullableContextAttribute("1")]
public virtual View CreateView(View parent, string name, Context context, IAttributeSet attrs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Binding.Binders.MvxBindingLayoutInflaterFactory : object {
    [NullableAttribute("1")]
private object _source;
    private IMvxAndroidViewFactory _androidViewFactory;
    private IMvxAndroidViewBinder _binder;
    protected IMvxAndroidViewFactory AndroidViewFactory { get; }
    protected IMvxAndroidViewBinder Binder { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> CreatedBindings { get; }
    [NullableContextAttribute("1")]
public MvxBindingLayoutInflaterFactory(object source);
    protected virtual IMvxAndroidViewFactory get_AndroidViewFactory();
    protected virtual IMvxAndroidViewBinder get_Binder();
    public virtual IList`1<KeyValuePair`2<object, IMvxUpdateableBinding>> get_CreatedBindings();
    [NullableContextAttribute("1")]
public virtual View OnCreateView(View parent, string name, Context context, IAttributeSet attrs);
    [NullableContextAttribute("1")]
public virtual View BindCreatedView(View view, Context context, IAttributeSet attrs);
}
public static class MvvmCross.Platforms.Android.Binding.Binders.MvxLayoutInflaterCompat : object {
    [NullableContextAttribute("1")]
public static void SetFactory(LayoutInflater layoutInflater, IMvxLayoutInflaterFactory factory);
}
public class MvvmCross.Platforms.Android.Binding.Binders.MvxLayoutInflaterFactoryFactory : object {
    public sealed virtual IMvxLayoutInflaterHolderFactory Create(object bindingSource);
}
public interface MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.IMvxAxmlNameViewTypeResolver {
    public IDictionary`2<string, string> ViewNamespaceAbbreviations { get; }
    public abstract virtual IDictionary`2<string, string> get_ViewNamespaceAbbreviations();
}
public interface MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.IMvxNamespaceListViewTypeResolver {
    public abstract virtual void Add(string namespaceName);
}
public interface MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.IMvxViewTypeResolver {
    public abstract virtual Type Resolve(string tagName);
}
public class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxAxmlNameViewTypeResolver : MvxLongLowerCaseViewTypeResolver {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ViewNamespaceAbbreviations>k__BackingField;
    public IDictionary`2<string, string> ViewNamespaceAbbreviations { get; }
    public MvxAxmlNameViewTypeResolver(IMvxTypeCache`1<View> typeCache);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_ViewNamespaceAbbreviations();
    public virtual Type Resolve(string tagName);
    private string UnabbreviateTagName(string tagName);
    protected string GetLookupName(string tagName);
}
public class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxCachedViewTypeResolver : object {
    private Dictionary`2<string, Type> _cache;
    private IMvxViewTypeResolver _resolver;
    public MvxCachedViewTypeResolver(IMvxViewTypeResolver resolver);
    public sealed virtual Type Resolve(string tagName);
}
public class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxCompositeViewTypeResolver : object {
    private List`1<IMvxViewTypeResolver> _resolvers;
    public MvxCompositeViewTypeResolver(IMvxViewTypeResolver[] resolvers);
    public sealed virtual Type Resolve(string tagName);
}
public class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxJustNameViewTypeResolver : MvxReflectionViewTypeResolver {
    public MvxJustNameViewTypeResolver(IMvxTypeCache`1<View> typeCache);
    public virtual Type Resolve(string tagName);
}
public abstract class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxLongLowerCaseViewTypeResolver : MvxReflectionViewTypeResolver {
    protected MvxLongLowerCaseViewTypeResolver(IMvxTypeCache`1<View> typeCache);
    protected Type ResolveLowerCaseTypeName(string longLowerCaseName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxNamespaceListViewTypeResolver : MvxLongLowerCaseViewTypeResolver {
    [CompilerGeneratedAttribute]
private IList`1<string> <Namespaces>k__BackingField;
    public IList`1<string> Namespaces { get; }
    public MvxNamespaceListViewTypeResolver(IMvxTypeCache`1<View> typeCache);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Namespaces();
    public sealed virtual void Add(string namespaceName);
    public virtual Type Resolve(string tagName);
}
public abstract class MvvmCross.Platforms.Android.Binding.Binders.ViewTypeResolvers.MvxReflectionViewTypeResolver : object {
    [CompilerGeneratedAttribute]
private IMvxTypeCache`1<View> <TypeCache>k__BackingField;
    protected IMvxTypeCache`1<View> TypeCache { get; }
    protected MvxReflectionViewTypeResolver(IMvxTypeCache`1<View> typeCache);
    [CompilerGeneratedAttribute]
protected IMvxTypeCache`1<View> get_TypeCache();
    public abstract virtual Type Resolve(string tagName);
    protected static bool IsFullyQualified(string tagName);
}
public interface MvvmCross.Platforms.Android.Binding.BindingContext.IMvxAndroidBindingContext {
    public IMvxLayoutInflaterHolder LayoutInflaterHolder { get; public set; }
    public abstract virtual IMvxLayoutInflaterHolder get_LayoutInflaterHolder();
    public abstract virtual void set_LayoutInflaterHolder(IMvxLayoutInflaterHolder value);
    public abstract virtual View BindingInflate(int resourceId, ViewGroup viewGroup);
    public abstract virtual View BindingInflate(int resourceId, ViewGroup viewGroup, bool attachToParent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Binding.BindingContext.MvxAndroidBindingContext : MvxBindingContext {
    private WeakReference`1<Context> _context;
    [CompilerGeneratedAttribute]
private IMvxLayoutInflaterHolder <LayoutInflaterHolder>k__BackingField;
    public IMvxLayoutInflaterHolder LayoutInflaterHolder { get; public set; }
    public MvxAndroidBindingContext(Context context, IMvxLayoutInflaterHolder layoutInflaterHolder, object source);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxLayoutInflaterHolder get_LayoutInflaterHolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LayoutInflaterHolder(IMvxLayoutInflaterHolder value);
    public virtual View BindingInflate(int resourceId, ViewGroup viewGroup);
    public virtual View BindingInflate(int resourceId, ViewGroup viewGroup, bool attachToParent);
    protected virtual View CommonInflate(int resourceId, ViewGroup viewGroup, bool attachToParent);
}
public static class MvvmCross.Platforms.Android.Binding.BindingContext.MvxAndroidBindingContextHelpers : object {
    public static IMvxAndroidBindingContext Current();
    public static T Current();
}
public class MvvmCross.Platforms.Android.Binding.BindingContext.MvxAndroidBindingContextStack : MvxBindingContextStack`1<IMvxAndroidBindingContext> {
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Binding.BindingContext.MvxBindingContextOwnerExtensions : object {
    [ExtensionAttribute]
public static View BindingInflate(IMvxBindingContextOwner owner, int resourceId, ViewGroup viewGroup);
    [ExtensionAttribute]
public static View BindingInflate(IMvxBindingContextOwner owner, int resourceId, ViewGroup viewGroup, bool attachToParent);
}
public class MvvmCross.Platforms.Android.Binding.MvxAndroidBindingBuilder : MvxBindingBuilder {
    private Action`1<IMvxValueConverterRegistry> _fillValueConverters;
    private Action`1<IMvxValueCombinerRegistry> _fillValueCombiners;
    private Action`1<IMvxTargetBindingFactoryRegistry> _fillTargetFactories;
    private Action`1<IMvxBindingNameRegistry> _fillBindingNames;
    private Action`1<IMvxTypeCache`1<View>> _fillViewTypes;
    private Action`1<IMvxAxmlNameViewTypeResolver> _fillAxmlViewTypeResolver;
    private Action`1<IMvxNamespaceListViewTypeResolver> _fillNamespaceListViewTypeResolver;
    public MvxAndroidBindingBuilder(Action`1<IMvxValueConverterRegistry> fillValueConverters, Action`1<IMvxValueCombinerRegistry> fillValueCombiners, Action`1<IMvxTargetBindingFactoryRegistry> fillTargetFactories, Action`1<IMvxBindingNameRegistry> fillBindingNames, Action`1<IMvxTypeCache`1<View>> fillViewTypes, Action`1<IMvxAxmlNameViewTypeResolver> fillAxmlViewTypeResolver, Action`1<IMvxNamespaceListViewTypeResolver> fillNamespaceListViewTypeResolver);
    protected virtual void FillValueConverters(IMvxValueConverterRegistry registry);
    protected virtual void FillValueCombiners(IMvxValueCombinerRegistry registry);
    public virtual void DoRegistration(IMvxIoCProvider iocProvider);
    protected virtual void InitializeLayoutInflation(IMvxIoCProvider iocProvider);
    protected virtual IMvxAndroidViewBinderFactory CreateAndroidViewBinderFactory();
    protected virtual IMvxLayoutInflaterHolderFactoryFactory CreateLayoutInflaterFactoryFactory();
    protected virtual IMvxAndroidViewFactory CreateAndroidViewFactory();
    protected virtual void InitializeBindingResources(IMvxIoCProvider iocProvider);
    protected virtual IMvxAndroidBindingResource CreateAndroidBindingResource();
    protected virtual void InitializeAppResourceTypeFinder(IMvxIoCProvider provider);
    protected virtual IMvxAppResourceTypeFinder CreateAppResourceTypeFinder();
    protected virtual void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
    protected virtual void FillDefaultBindingNames(IMvxBindingNameRegistry registry);
    protected virtual void RegisterPlatformSpecificComponents(IMvxIoCProvider iocProvider);
    protected virtual void InitializeContextStack(IMvxIoCProvider iocProvider);
    protected virtual IMvxBindingContextStack`1<IMvxAndroidBindingContext> CreateContextStack();
    protected virtual void InitializeViewTypeResolver(IMvxIoCProvider iocProvider);
    protected virtual IMvxTypeCache`1<View> CreateViewTypeCache();
}
internal static class MvvmCross.Platforms.Android.Binding.MvxAndroidPropertyBinding : object {
    public static string View_Click;
    public static string View_LongClick;
    public static string View_Visible;
    public static string View_Hidden;
    public static string View_Focus;
    public static string View_Margin;
    public static string View_MarginLeft;
    public static string View_MarginRight;
    public static string View_MarginTop;
    public static string View_MarginBottom;
    public static string View_MarginStart;
    public static string View_MarginEnd;
    public static string TextView_Text;
    public static string TextView_TextFormatted;
    public static string EditTextPreference_Text;
    public static string EditText_TextFocus;
    public static string MvxAutoCompleteTextView_PartialText;
    public static string MvxAutoCompleteTextView_SelectedObject;
    public static string CompoundButton_Checked;
    public static string SeekBar_Progress;
    public static string ImageView_Bitmap;
    public static string ImageView_Drawable;
    public static string ImageView_DrawableId;
    public static string ImageView_DrawableName;
    public static string ImageView_ResourceName;
    public static string ImageView_AssetImagePath;
    public static string MvxSpinner_SelectedItem;
    public static string AdapterView_SelectedItemPosition;
    public static string MvxListView_SelectedItem;
    public static string MvxExpandableListView_SelectedItem;
    public static string RatingBar_Rating;
    public static string MvxRadioGroup_SelectedItem;
    public static string SearchView_Query;
    public static string Preference_Value;
    public static string ListPreference_Value;
    public static string TwoStatePreference_Checked;
    public static string NumberPicker_Value;
    public static string NumberPicker_DisplayedValues;
    public static string VideoView_Uri;
    public static string WebView_Uri;
    public static string WebView_Html;
    public static string MvxAppCompatAutoCompleteTextView_PartialText;
    public static string MvxAppCompatAutoCompleteTextView_SelectedObject;
    public static string MvxAppCompatSpinner_SelectedItem;
    public static string MvxAppCompatRadioGroup_SelectedItem;
    public static string Toolbar_Subtitle;
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Binding.MvxAndroidPropertyBindingExtensions : object {
    [ExtensionAttribute]
public static string BindClick(View view);
    [ExtensionAttribute]
public static string BindText(TextView textview);
    [ExtensionAttribute]
public static string BindTextFormatted(TextView textview);
    [ExtensionAttribute]
public static string BindPartialText(MvxAutoCompleteTextView mvxAutoCompleteTextView);
    [ExtensionAttribute]
public static string BindSelectedObject(MvxAutoCompleteTextView mvxAutoCompleteTextView);
    [ExtensionAttribute]
public static string BindChecked(CompoundButton compoundButton);
    [ExtensionAttribute]
public static string BindProgress(SeekBar seekBar);
    [ExtensionAttribute]
public static string BindVisible(View view);
    [ExtensionAttribute]
public static string BindHidden(View view);
    [ExtensionAttribute]
public static string BindBitmap(ImageView imageView);
    [ExtensionAttribute]
public static string BindDrawable(ImageView imageView);
    [ExtensionAttribute]
public static string BindDrawableId(ImageView imageView);
    [ExtensionAttribute]
public static string BindDrawableName(ImageView imageView);
    [ExtensionAttribute]
public static string BindResourceName(ImageView imageView);
    [ExtensionAttribute]
public static string BindAssetImagePath(ImageView imageView);
    [ExtensionAttribute]
public static string BindSelectedItem(MvxSpinner mvxSpinner);
    [ExtensionAttribute]
public static string BindSelectedItemPosition(AdapterView adapterView);
    [ExtensionAttribute]
public static string BindSelectedItem(MvxListView mvxListView);
    [ExtensionAttribute]
public static string BindSelectedItem(MvxExpandableListView mvxExpandableListView);
    [ExtensionAttribute]
public static string BindRating(RatingBar ratingBar);
    [ExtensionAttribute]
public static string BindLongClick(View view);
    [ExtensionAttribute]
public static string BindSelectedItem(MvxRadioGroup mvxRadioGroup);
    [ExtensionAttribute]
public static string BindTextFocus(EditText editText);
    [ExtensionAttribute]
public static string BindQuery(SearchView searchView);
    [ExtensionAttribute]
public static string BindValue(Preference preference);
    [ExtensionAttribute]
public static string BindText(EditTextPreference editTextPreference);
    [ExtensionAttribute]
public static string BindValue(ListPreference listPreference);
    [ExtensionAttribute]
public static string BindChecked(TwoStatePreference twoStatePreference);
    [ExtensionAttribute]
public static string BindDisplayedValues(NumberPicker numberPicker);
    [ExtensionAttribute]
public static string BindValue(NumberPicker numberPicker);
    [ExtensionAttribute]
public static string BindMargin(View view);
    [ExtensionAttribute]
public static string BindMarginLeft(View view);
    [ExtensionAttribute]
public static string BindMarginRight(View view);
    [ExtensionAttribute]
public static string BindMarginTop(View view);
    [ExtensionAttribute]
public static string BindMarginBottom(View view);
    [ExtensionAttribute]
public static string BindMarginStart(View view);
    [ExtensionAttribute]
public static string BindMarginEnd(View view);
    [ExtensionAttribute]
public static string BindFocus(View view);
    [ExtensionAttribute]
public static string BindVideoUri(VideoView view);
    [ExtensionAttribute]
public static string BindWebViewUri(WebView view);
    [ExtensionAttribute]
public static string BindWebViewHtml(WebView view);
}
internal static class MvvmCross.Platforms.Android.Binding.MvxPreferencePropertyBinding : object {
    public static string Preference_Value;
    public static string EditTextPreference_Text;
    public static string ListPreference_Value;
    public static string TwoStatePreference_Checked;
    public static string Preference_Click;
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Binding.MvxPreferencePropertyBindingExtensions : object {
    [ExtensionAttribute]
public static string BindValue(Preference preference);
    [ExtensionAttribute]
public static string BindValue(ListPreference listPreference);
    [ExtensionAttribute]
public static string BindText(EditTextPreference editTextPreference);
    [ExtensionAttribute]
public static string BindChecked(TwoStatePreference twoStatePreference);
    [ExtensionAttribute]
public static string BindClick(Preference preference);
}
public static class MvvmCross.Platforms.Android.Binding.MvxPreferenceSetupHelper : object {
    public static void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
}
public interface MvvmCross.Platforms.Android.Binding.ResourceHelpers.IMvxAndroidBindingResource {
    public int BindingTagUnique { get; }
    public Int32[] BindingStylableGroupId { get; }
    public int BindingBindId { get; }
    public int BindingLangId { get; }
    public Int32[] ControlStylableGroupId { get; }
    public int TemplateId { get; }
    public Int32[] ListViewStylableGroupId { get; }
    public int ListItemTemplateId { get; }
    public int DropDownListItemTemplateId { get; }
    public Int32[] ExpandableListViewStylableGroupId { get; }
    public int GroupItemTemplateId { get; }
    public abstract virtual int get_BindingTagUnique();
    public abstract virtual Int32[] get_BindingStylableGroupId();
    public abstract virtual int get_BindingBindId();
    public abstract virtual int get_BindingLangId();
    public abstract virtual Int32[] get_ControlStylableGroupId();
    public abstract virtual int get_TemplateId();
    public abstract virtual Int32[] get_ListViewStylableGroupId();
    public abstract virtual int get_ListItemTemplateId();
    public abstract virtual int get_DropDownListItemTemplateId();
    public abstract virtual Int32[] get_ExpandableListViewStylableGroupId();
    public abstract virtual int get_GroupItemTemplateId();
}
public interface MvvmCross.Platforms.Android.Binding.ResourceHelpers.IMvxAppResourceTypeFinder {
    public abstract virtual Type Find();
}
public class MvvmCross.Platforms.Android.Binding.ResourceHelpers.MvxAndroidBindingResource : object {
    public int BindingTagUnique { get; }
    public Int32[] BindingStylableGroupId { get; }
    public int BindingBindId { get; }
    public int BindingLangId { get; }
    public Int32[] ControlStylableGroupId { get; }
    public int TemplateId { get; }
    public Int32[] ListViewStylableGroupId { get; }
    public int ListItemTemplateId { get; }
    public int DropDownListItemTemplateId { get; }
    public Int32[] ExpandableListViewStylableGroupId { get; }
    public int GroupItemTemplateId { get; }
    public sealed virtual int get_BindingTagUnique();
    public sealed virtual Int32[] get_BindingStylableGroupId();
    public sealed virtual int get_BindingBindId();
    public sealed virtual int get_BindingLangId();
    public sealed virtual Int32[] get_ControlStylableGroupId();
    public sealed virtual int get_TemplateId();
    public sealed virtual Int32[] get_ListViewStylableGroupId();
    public sealed virtual int get_ListItemTemplateId();
    public sealed virtual int get_DropDownListItemTemplateId();
    public sealed virtual Int32[] get_ExpandableListViewStylableGroupId();
    public sealed virtual int get_GroupItemTemplateId();
}
public class MvvmCross.Platforms.Android.Binding.ResourceHelpers.MvxAppResourceTypeFinder : object {
    private Type FindResourceType(Assembly assembly);
    public sealed virtual Type Find();
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAdapterViewSelectedItemPositionTargetBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    protected AdapterView AdapterView { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxAdapterViewSelectedItemPositionTargetBinding(AdapterView adapterView);
    protected AdapterView get_AdapterView();
    protected virtual void SetValueImpl(object target, object value);
    private void AdapterViewOnItemSelected(object sender, ItemSelectedEventArgs itemSelectedEventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxAndroidPropertyInfoTargetBinding : MvxPropertyInfoTargetBinding {
    protected MvxAndroidPropertyInfoTargetBinding(object target, PropertyInfo targetPropertyInfo);
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(object target, object value);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxAndroidPropertyInfoTargetBinding`1 : MvxPropertyInfoTargetBinding`1<TView> {
    protected MvxAndroidPropertyInfoTargetBinding`1(object target, PropertyInfo targetPropertyInfo);
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(object target, object value);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxAndroidTargetBinding : MvxConvertingTargetBinding {
    private IMvxAndroidGlobals _androidGlobals;
    protected IMvxAndroidGlobals AndroidGlobals { get; }
    protected MvxAndroidTargetBinding(object target);
    protected IMvxAndroidGlobals get_AndroidGlobals();
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(object target, object value);
    public static bool TargetIsInvalid(object target);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxAndroidTargetBinding`2 : MvxConvertingTargetBinding`2<TTarget, TValue> {
    private IMvxAndroidGlobals _androidGlobals;
    protected IMvxAndroidGlobals AndroidGlobals { get; }
    protected MvxAndroidTargetBinding`2(TTarget target);
    protected IMvxAndroidGlobals get_AndroidGlobals();
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(TTarget target, TValue value);
    public static bool TargetIsInvalid(TTarget target);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAppCompatAutoCompleteTextViewPartialTextTargetBinding : MvxAndroidPropertyInfoTargetBinding`1<MvxAppCompatAutoCompleteTextView> {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxAppCompatAutoCompleteTextViewPartialTextTargetBinding(object target, PropertyInfo targetPropertyInfo);
    private void AutoCompleteOnPartialTextChanged(object sender, EventArgs eventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAppCompatAutoCompleteTextViewSelectedObjectTargetBinding : MvxAndroidPropertyInfoTargetBinding`1<MvxAppCompatAutoCompleteTextView> {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxAppCompatAutoCompleteTextViewSelectedObjectTargetBinding(object target, PropertyInfo targetPropertyInfo);
    private void AutoCompleteOnSelectedObjectChanged(object sender, EventArgs eventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxAppCompatBaseImageViewTargetBinding : MvxAndroidTargetBinding {
    protected AppCompatImageView ImageView { get; }
    public MvxBindingMode DefaultMode { get; }
    protected MvxAppCompatBaseImageViewTargetBinding(AppCompatImageView imageView);
    protected AppCompatImageView get_ImageView();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual void SetImageBitmap(AppCompatImageView imageView, Bitmap bitmap);
    protected abstract virtual bool GetBitmap(object value, Bitmap& bitmap);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAppCompatRadioGroupSelectedItemBinding : MvxAndroidTargetBinding {
    private object _currentValue;
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxAppCompatRadioGroupSelectedItemBinding(MvxAppCompatRadioGroup radioGroup);
    private bool CheckValueChanged(object newValue);
    private void RadioGroupCheckedChanged(object sender, CheckedChangeEventArgs args);
    protected virtual void SetValueImpl(object target, object newValue);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAppCompatSearchViewQueryTextTargetBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    protected SearchView SearchView { get; }
    public MvxAppCompatSearchViewQueryTextTargetBinding(object target);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected SearchView get_SearchView();
    public virtual void SubscribeToEvents();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual void Dispose(bool isDisposing);
    private void HandleQueryTextChanged(object sender, QueryTextChangeEventArgs e);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAppCompatSpinnerSelectedItemBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    private object _currentValue;
    protected MvxAppCompatSpinner Spinner { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxAppCompatSpinnerSelectedItemBinding(MvxAppCompatSpinner spinner);
    protected MvxAppCompatSpinner get_Spinner();
    private void SpinnerItemSelected(object sender, ItemSelectedEventArgs e);
    protected virtual void SetValueImpl(object target, object value);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAutoCompleteTextViewPartialTextTargetBinding : MvxAndroidPropertyInfoTargetBinding`1<MvxAutoCompleteTextView> {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxAutoCompleteTextViewPartialTextTargetBinding(object target, PropertyInfo targetPropertyInfo);
    private void AutoCompleteOnPartialTextChanged(object sender, EventArgs eventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxAutoCompleteTextViewSelectedObjectTargetBinding : MvxAndroidPropertyInfoTargetBinding`1<MvxAutoCompleteTextView> {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxAutoCompleteTextViewSelectedObjectTargetBinding(object target, PropertyInfo targetPropertyInfo);
    private void AutoCompleteOnSelectedObjectChanged(object sender, EventArgs eventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxBaseImageViewTargetBinding : MvxAndroidTargetBinding {
    protected ImageView ImageView { get; }
    public MvxBindingMode DefaultMode { get; }
    protected MvxBaseImageViewTargetBinding(ImageView imageView);
    protected ImageView get_ImageView();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual void SetImageBitmap(ImageView imageView, Bitmap bitmap);
    protected abstract virtual bool GetBitmap(object value, Bitmap& bitmap);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxBaseStreamImageViewTargetBinding : MvxBaseImageViewTargetBinding {
    protected MvxBaseStreamImageViewTargetBinding(ImageView imageView);
    protected virtual bool GetBitmap(object value, Bitmap& bitmap);
    protected virtual void SetImageBitmap(ImageView imageView, Bitmap bitmap);
    protected abstract virtual Stream GetStream(object value);
}
public abstract class MvvmCross.Platforms.Android.Binding.Target.MvxBaseViewVisibleBinding : MvxAndroidTargetBinding {
    protected View View { get; }
    public Type TargetValueType { get; }
    protected MvxBaseViewVisibleBinding(object target);
    protected View get_View();
    public virtual Type get_TargetValueType();
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxCompoundButtonCheckedTargetBinding : MvxAndroidPropertyInfoTargetBinding`1<CompoundButton> {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxCompoundButtonCheckedTargetBinding(object target, PropertyInfo targetPropertyInfo);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    private void CompoundButtonOnCheckedChange(object sender, CheckedChangeEventArgs args);
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxEditTextPreferenceTextTargetBinding : MvxPreferenceValueTargetBinding {
    public MvxEditTextPreferenceTextTargetBinding(EditTextPreference preference);
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxExpandableListViewSelectedItemTargetBinding : MvxAndroidTargetBinding {
    private object _currentValue;
    private IDisposable _subscription;
    protected MvxExpandableListView ListView { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxExpandableListViewSelectedItemTargetBinding(MvxExpandableListView target);
    protected MvxExpandableListView get_ListView();
    public virtual Type get_TargetValueType();
    protected virtual void SetValueImpl(object target, object value);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
    private void OnChildClick(object sender, ChildClickEventArgs childClickEventArgs);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxImageViewBitmapTargetBinding : MvxBaseImageViewTargetBinding {
    public Type TargetValueType { get; }
    public MvxImageViewBitmapTargetBinding(ImageView imageView);
    public virtual Type get_TargetValueType();
    protected virtual bool GetBitmap(object value, Bitmap& bitmap);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxImageViewDrawableNameTargetBinding : MvxImageViewDrawableTargetBinding {
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxImageViewDrawableNameTargetBinding(ImageView imageView);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxImageViewDrawableTargetBinding : MvxAndroidTargetBinding {
    protected ImageView ImageView { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxImageViewDrawableTargetBinding(ImageView imageView);
    protected ImageView get_ImageView();
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual void SetImage(ImageView imageView, int id);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxImageViewImageDrawableTargetBinding : MvxAndroidTargetBinding {
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxImageViewImageDrawableTargetBinding(ImageView target);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxImageViewImageTargetBinding : MvxBaseStreamImageViewTargetBinding {
    public Type TargetValueType { get; }
    public MvxImageViewImageTargetBinding(ImageView imageView);
    public virtual Type get_TargetValueType();
    protected virtual Stream GetStream(object value);
    private static string GetImageAssetName(string rawImage);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxImageViewResourceNameTargetBinding : MvxImageViewDrawableNameTargetBinding {
    public MvxImageViewResourceNameTargetBinding(ImageView imageView);
    protected virtual void SetImage(ImageView imageView, int id);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxListPreferenceTargetBinding : MvxPreferenceValueTargetBinding {
    public MvxListPreferenceTargetBinding(ListPreference preference);
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxListViewSelectedItemTargetBinding : MvxAndroidTargetBinding {
    private object _currentValue;
    private IDisposable _subscription;
    protected MvxListView ListView { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxListViewSelectedItemTargetBinding(MvxListView view);
    protected MvxListView get_ListView();
    private void OnItemClick(object sender, ItemClickEventArgs itemClickEventArgs);
    protected virtual void SetValueImpl(object target, object value);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxNumberPickerDisplayedValuesTargetBinding : MvxTargetBinding`2<NumberPicker, IEnumerable`1<string>> {
    public MvxBindingMode DefaultMode { get; }
    public MvxNumberPickerDisplayedValuesTargetBinding(NumberPicker target);
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValue(IEnumerable`1<string> value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxNumberPickerValueTargetBinding : MvxPropertyInfoTargetBinding`1<NumberPicker> {
    private IDisposable _subscription;
    private int JustForReflection { get; private set; }
    public MvxBindingMode DefaultMode { get; }
    public MvxNumberPickerValueTargetBinding(object target, PropertyInfo targetPropertyInfo);
    private int get_JustForReflection();
    private void set_JustForReflection(int value);
    protected virtual void SetValueImpl(object target, object value);
    private void NumberPickerValueChanged(object sender, ValueChangeEventArgs e);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxPreferenceClickTargetBinding : MvxAndroidTargetBinding {
    private ICommand _command;
    private IDisposable _clickSubscription;
    private IDisposable _canExecuteSubscription;
    private EventHandler`1<EventArgs> _canExecuteEventHandler;
    protected Preference Preference { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxPreferenceClickTargetBinding(Preference view);
    protected Preference get_Preference();
    private void ViewOnPreferenceClick(object sender, PreferenceClickEventArgs args);
    protected virtual void SetValueImpl(object target, object value);
    private void RefreshEnabledState();
    private void OnCanExecuteChanged(object sender, EventArgs e);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxPreferenceValueTargetBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    public Preference Preference { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxPreferenceValueTargetBinding(Preference preference);
    public Preference get_Preference();
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected void HandlePreferenceChange(object sender, PreferenceChangeEventArgs e);
    protected virtual void Dispose(bool isDisposing);
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxRadioGroupSelectedItemBinding : MvxAndroidTargetBinding {
    private object _currentValue;
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxRadioGroupSelectedItemBinding(MvxRadioGroup radioGroup);
    private bool CheckValueChanged(object newValue);
    private void RadioGroupCheckedChanged(object sender, CheckedChangeEventArgs args);
    protected virtual void SetValueImpl(object target, object newValue);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxRatingBarRatingTargetBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    protected RatingBar RatingBar { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxRatingBarRatingTargetBinding(RatingBar target);
    protected RatingBar get_RatingBar();
    public virtual void SubscribeToEvents();
    private void RatingBar_RatingBarChange(object sender, RatingBarChangeEventArgs e);
    protected virtual void SetValueImpl(object target, object value);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxSearchViewQueryTextTargetBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    protected SearchView SearchView { get; }
    public MvxSearchViewQueryTextTargetBinding(object target);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected SearchView get_SearchView();
    public virtual void SubscribeToEvents();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual void Dispose(bool isDisposing);
    private void HandleQueryTextChanged(object sender, QueryTextChangeEventArgs e);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxSeekBarProgressTargetBinding : MvxPropertyInfoTargetBinding`1<SeekBar> {
    private IDisposable _subscription;
    private int JustForReflection { get; private set; }
    public MvxBindingMode DefaultMode { get; }
    public MvxSeekBarProgressTargetBinding(object target, PropertyInfo targetPropertyInfo);
    private int get_JustForReflection();
    private void set_JustForReflection(int value);
    protected virtual void SetValueImpl(object target, object value);
    private void SeekBarProgressChanged(object sender, ProgressChangedEventArgs e);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxSpinnerSelectedItemBinding : MvxAndroidTargetBinding {
    private object _currentValue;
    private IDisposable _subscription;
    protected MvxSpinner Spinner { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxSpinnerSelectedItemBinding(MvxSpinner spinner);
    protected MvxSpinner get_Spinner();
    private void SpinnerItemSelected(object sender, ItemSelectedEventArgs e);
    protected virtual void SetValueImpl(object target, object value);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxTextViewFocusTargetBinding : MvxAndroidTargetBinding {
    private IDisposable _subscription;
    protected EditText TextField { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxTextViewFocusTargetBinding(object target);
    protected EditText get_TextField();
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
    public virtual void SubscribeToEvents();
    private void HandleLostFocus(object sender, FocusChangeEventArgs e);
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxTextViewTextFormattedTargetBinding : MvxAndroidTargetBinding {
    private bool _isEditTextBinding;
    private IDisposable _subscription;
    protected TextView TextView { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public string CurrentText { get; }
    public MvxTextViewTextFormattedTargetBinding(TextView target);
    protected TextView get_TextView();
    public virtual Type get_TargetValueType();
    protected virtual bool ShouldSkipSetValueForViewSpecificReasons(object target, object value);
    protected virtual void SetValueImpl(object target, object toSet);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    private void EditTextOnAfterTextChanged(object sender, AfterTextChangedEventArgs afterTextChangedEventArgs);
    protected virtual void Dispose(bool isDisposing);
    public sealed virtual string get_CurrentText();
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxTextViewTextTargetBinding : MvxAndroidTargetBinding {
    private bool _isEditTextBinding;
    private IDisposable _subscription;
    protected TextView TextView { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public string CurrentText { get; }
    public MvxTextViewTextTargetBinding(TextView target);
    protected TextView get_TextView();
    public virtual Type get_TargetValueType();
    protected virtual bool ShouldSkipSetValueForViewSpecificReasons(object target, object value);
    protected virtual void SetValueImpl(object target, object toSet);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    private void EditTextOnAfterTextChanged(object sender, AfterTextChangedEventArgs e);
    protected virtual void Dispose(bool isDisposing);
    public sealed virtual string get_CurrentText();
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxToolbarSubtitleBinding : MvxConvertingTargetBinding {
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    protected Toolbar Toolbar { get; }
    public MvxToolbarSubtitleBinding(Toolbar toolbar);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
    protected Toolbar get_Toolbar();
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxTwoStatePreferenceCheckedTargetBinding : MvxPreferenceValueTargetBinding {
    public MvxTwoStatePreferenceCheckedTargetBinding(TwoStatePreference preference);
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxVideoViewUriTargetBinding : MvxAndroidTargetBinding {
    public Type TargetValueType { get; }
    public MvxVideoViewUriTargetBinding(object target);
    public virtual Type get_TargetValueType();
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxViewClickBinding : MvxAndroidTargetBinding {
    private ICommand _command;
    private IDisposable _clickSubscription;
    private IDisposable _canExecuteSubscription;
    private EventHandler`1<EventArgs> _canExecuteEventHandler;
    protected View View { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxViewClickBinding(View view);
    protected View get_View();
    private void ViewOnClick(object sender, EventArgs args);
    protected virtual void SetValueImpl(object target, object value);
    private void RefreshEnabledState();
    private void OnCanExecuteChanged(object sender, EventArgs e);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxViewFocusChangedTargetbinding : MvxAndroidTargetBinding {
    private IDisposable _focusChangeSubscription;
    private ICommand _command;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxViewFocusChangedTargetbinding(View target);
    private void ViewOnFocusChange(object sender, FocusChangeEventArgs e);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxViewHiddenBinding : MvxBaseViewVisibleBinding {
    public MvxViewHiddenBinding(object target);
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxViewLongClickBinding : MvxAndroidTargetBinding {
    private ICommand _command;
    private IDisposable _subscription;
    protected View View { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public MvxViewLongClickBinding(View view);
    protected View get_View();
    private void ViewOnLongClick(object sender, LongClickEventArgs longClickEventArgs);
    protected virtual void SetValueImpl(object target, object value);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxViewMarginTargetBinding : MvxAndroidTargetBinding {
    private string _whichMargin;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxViewMarginTargetBinding(View target, string whichMargin);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
    private int DpToPx(float dp);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxViewVisibleBinding : MvxBaseViewVisibleBinding {
    public MvxViewVisibleBinding(object target);
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxWebViewHtmlTargetBinding : MvxAndroidTargetBinding {
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxWebViewHtmlTargetBinding(object target);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Platforms.Android.Binding.Target.MvxWebViewUriTargetBinding : MvxAndroidTargetBinding {
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxWebViewUriTargetBinding(object target);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void SetValueImpl(object target, object value);
}
public interface MvvmCross.Platforms.Android.Binding.Views.IMvxAdapter {
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public int DropDownItemTemplateId { get; public set; }
    public abstract virtual IEnumerable get_ItemsSource();
    public abstract virtual void set_ItemsSource(IEnumerable value);
    public abstract virtual int get_ItemTemplateId();
    public abstract virtual void set_ItemTemplateId(int value);
    public abstract virtual int get_DropDownItemTemplateId();
    public abstract virtual void set_DropDownItemTemplateId(int value);
    public abstract virtual object GetRawItem(int position);
    public abstract virtual int GetPosition(object value);
}
public interface MvvmCross.Platforms.Android.Binding.Views.IMvxAdapterWithChangedEvent {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataSetChanged(EventHandler`1<NotifyCollectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataSetChanged(EventHandler`1<NotifyCollectionChangedEventArgs> value);
}
public interface MvvmCross.Platforms.Android.Binding.Views.IMvxLayoutInflaterHolder {
    public LayoutInflater LayoutInflater { get; }
    public abstract virtual LayoutInflater get_LayoutInflater();
}
public interface MvvmCross.Platforms.Android.Binding.Views.IMvxListItemView {
    public int TemplateId { get; }
    public View Content { get; public set; }
    public abstract virtual int get_TemplateId();
    public abstract virtual View get_Content();
    public abstract virtual void set_Content(View value);
}
public interface MvvmCross.Platforms.Android.Binding.Views.IMvxWithChangeAdapter {
    public IMvxAdapterWithChangedEvent Adapter { get; }
    public abstract virtual IMvxAdapterWithChangedEvent get_Adapter();
}
public class MvvmCross.Platforms.Android.Binding.Views.MvxAdapter : BaseAdapter {
    [CompilerGeneratedAttribute]
private static Int32[] <SimpleItemTemplateIds>k__BackingField;
    private int _itemTemplateId;
    private int _dropDownItemTemplateId;
    private IEnumerable _itemsSource;
    private IDisposable _subscription;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxAndroidBindingContext <BindingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReloadOnAllItemsSourceSets>k__BackingField;
    private static Int32[] SimpleItemTemplateIds { get; }
    protected Context Context { get; }
    protected IMvxAndroidBindingContext BindingContext { get; }
    public bool ReloadOnAllItemsSourceSets { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public int DropDownItemTemplateId { get; public set; }
    public int Count { get; }
    public MvxAdapter(Context context);
    public MvxAdapter(Context context, IMvxAndroidBindingContext bindingContext);
    protected MvxAdapter(IntPtr javaReference, JniHandleOwnership transfer);
    private static MvxAdapter();
    [CompilerGeneratedAttribute]
private static Int32[] get_SimpleItemTemplateIds();
    [CompilerGeneratedAttribute]
protected Context get_Context();
    [CompilerGeneratedAttribute]
protected IMvxAndroidBindingContext get_BindingContext();
    [CompilerGeneratedAttribute]
public bool get_ReloadOnAllItemsSourceSets();
    [CompilerGeneratedAttribute]
public void set_ReloadOnAllItemsSourceSets(bool value);
    public virtual IEnumerable get_ItemsSource();
    public virtual void set_ItemsSource(IEnumerable value);
    public virtual int get_ItemTemplateId();
    public virtual void set_ItemTemplateId(int value);
    public virtual int get_DropDownItemTemplateId();
    public virtual void set_DropDownItemTemplateId(int value);
    private void SetItemTemplate(Int32& templateId, int newTemplateId);
    public virtual int get_Count();
    protected virtual void SetItemsSource(IEnumerable value);
    protected virtual void OnItemsSourceCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual void NotifyDataSetChanged(NotifyCollectionChangedEventArgs e);
    public virtual void NotifyDataSetChanged();
    protected virtual void RealNotifyDataSetChanged();
    public virtual int GetPosition(object item);
    public virtual object GetRawItem(int position);
    public virtual Object GetItem(int position);
    public virtual long GetItemId(int position);
    public virtual View GetDropDownView(int position, View convertView, ViewGroup parent);
    public virtual View GetView(int position, View convertView, ViewGroup parent);
    protected virtual View GetView(int position, View convertView, ViewGroup parent, int templateId);
    protected virtual View GetBindableView(View convertView, object dataContext, ViewGroup parent, int templateId);
    protected virtual void BindBindableView(object source, IMvxListItemView viewToUse);
    protected virtual IMvxListItemView CreateBindableView(object dataContext, ViewGroup parent, int templateId);
}
public class MvvmCross.Platforms.Android.Binding.Views.MvxAdapter`1 : MvxAdapter {
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable`1<TItem> ItemsSource { get; public set; }
    public MvxAdapter`1(Context context);
    public MvxAdapter`1(Context context, IMvxAndroidBindingContext bindingContext);
    public MvxAdapter`1(IntPtr javaReference, JniHandleOwnership transfer);
    public IEnumerable`1<TItem> get_ItemsSource();
    public void set_ItemsSource(IEnumerable`1<TItem> value);
}
public class MvvmCross.Platforms.Android.Binding.Views.MvxAdapterWithChangedEvent : MvxAdapter {
    [CompilerGeneratedAttribute]
private EventHandler`1<NotifyCollectionChangedEventArgs> DataSetChanged;
    public MvxAdapterWithChangedEvent(Context context);
    protected MvxAdapterWithChangedEvent(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataSetChanged(EventHandler`1<NotifyCollectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataSetChanged(EventHandler`1<NotifyCollectionChangedEventArgs> value);
    public virtual void NotifyDataSetChanged();
    public virtual void NotifyDataSetChanged(NotifyCollectionChangedEventArgs e);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxAppCompatAutoCompleteTextView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxAppCompatAutoCompleteTextView : AppCompatAutoCompleteTextView {
    private object _selectedObject;
    [CompilerGeneratedAttribute]
private EventHandler SelectedObjectChanged;
    [CompilerGeneratedAttribute]
private EventHandler PartialTextChanged;
    public MvxFilteringAdapter Adapter { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public string PartialText { get; }
    public object SelectedObject { get; private set; }
    public MvxAppCompatAutoCompleteTextView(Context context, IAttributeSet attrs);
    public MvxAppCompatAutoCompleteTextView(Context context, IAttributeSet attrs, MvxFilteringAdapter adapter);
    protected MvxAppCompatAutoCompleteTextView(IntPtr javaReference, JniHandleOwnership transfer);
    private void OnItemClick(object sender, ItemClickEventArgs itemClickEventArgs);
    private void OnItemSelected(object sender, ItemSelectedEventArgs itemSelectedEventArgs);
    protected virtual void OnItemClick(int position);
    protected virtual void OnItemSelected(int position);
    public MvxFilteringAdapter get_Adapter();
    public void set_Adapter(MvxFilteringAdapter value);
    private void AdapterOnPartialTextChanged(object sender, EventArgs eventArgs);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public string get_PartialText();
    public object get_SelectedObject();
    private void set_SelectedObject(object value);
    [CompilerGeneratedAttribute]
public void add_SelectedObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectedObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PartialTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PartialTextChanged(EventHandler value);
    private void FireChanged(EventHandler eventHandler);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxAppCompatRadioGroup")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxAppCompatRadioGroup : RadioGroup {
    private IMvxAdapterWithChangedEvent _adapter;
    private static long _nextGeneratedViewId;
    public IMvxAdapterWithChangedEvent Adapter { get; protected set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public MvxAppCompatRadioGroup(Context context, IAttributeSet attrs);
    public MvxAppCompatRadioGroup(Context context, IAttributeSet attrs, IMvxAdapterWithChangedEvent adapter);
    protected MvxAppCompatRadioGroup(IntPtr javaReference, JniHandleOwnership transfer);
    private static MvxAppCompatRadioGroup();
    public void AdapterOnDataSetChanged(object sender, NotifyCollectionChangedEventArgs eventArgs);
    private void OnChildViewAdded(object sender, ChildViewAddedEventArgs args);
    private void OnChildViewRemoved(object sender, ChildViewRemovedEventArgs childViewRemovedEventArgs);
    public sealed virtual IMvxAdapterWithChangedEvent get_Adapter();
    protected void set_Adapter(IMvxAdapterWithChangedEvent value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    private static int GenerateViewId();
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxAppCompatSpinner")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxAppCompatSpinner : AppCompatSpinner {
    [CompilerGeneratedAttribute]
private ICommand <HandleItemSelected>k__BackingField;
    public IMvxAdapter Adapter { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public int DropDownItemTemplateId { get; public set; }
    public ICommand HandleItemSelected { get; public set; }
    public MvxAppCompatSpinner(Context context, IAttributeSet attrs);
    public MvxAppCompatSpinner(Context context, IAttributeSet attrs, IMvxAdapter adapter);
    protected MvxAppCompatSpinner(IntPtr javaReference, JniHandleOwnership transfer);
    public IMvxAdapter get_Adapter();
    public void set_Adapter(IMvxAdapter value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public int get_DropDownItemTemplateId();
    public void set_DropDownItemTemplateId(int value);
    [CompilerGeneratedAttribute]
public ICommand get_HandleItemSelected();
    [CompilerGeneratedAttribute]
public void set_HandleItemSelected(ICommand value);
    private void OnItemSelected(object sender, ItemSelectedEventArgs e);
    protected virtual void HandleSelected(int position);
    protected virtual void Dispose(bool disposing);
}
public static class MvvmCross.Platforms.Android.Binding.Views.MvxAttributeHelpers : object {
    private static Lazy`1<IMvxAndroidBindingResource> mvxAndroidBindingResource;
    private static MvxAttributeHelpers();
    public static int ReadDropDownListItemTemplateId(Context context, IAttributeSet attrs);
    public static int ReadListItemTemplateId(Context context, IAttributeSet attrs);
    public static int ReadTemplateId(Context context, IAttributeSet attrs);
    public static int ReadGroupItemTemplateId(Context context, IAttributeSet attrs);
    public static int ReadAttributeValue(Context context, IAttributeSet attrs, Int32[] groupId, int requiredAttributeId);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxAutoCompleteTextView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxAutoCompleteTextView : AutoCompleteTextView {
    private object _selectedObject;
    [CompilerGeneratedAttribute]
private EventHandler SelectedObjectChanged;
    [CompilerGeneratedAttribute]
private EventHandler PartialTextChanged;
    public MvxFilteringAdapter Adapter { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public string PartialText { get; }
    public object SelectedObject { get; private set; }
    public MvxAutoCompleteTextView(Context context, IAttributeSet attrs);
    public MvxAutoCompleteTextView(Context context, IAttributeSet attrs, MvxFilteringAdapter adapter);
    protected MvxAutoCompleteTextView(IntPtr javaReference, JniHandleOwnership transfer);
    private void OnItemClick(object sender, ItemClickEventArgs itemClickEventArgs);
    private void OnItemSelected(object sender, ItemSelectedEventArgs itemSelectedEventArgs);
    protected virtual void OnItemClick(int position);
    protected virtual void OnItemSelected(int position);
    public MvxFilteringAdapter get_Adapter();
    public void set_Adapter(MvxFilteringAdapter value);
    private void AdapterOnPartialTextChanged(object sender, EventArgs eventArgs);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public string get_PartialText();
    public object get_SelectedObject();
    private void set_SelectedObject(object value);
    [CompilerGeneratedAttribute]
public void add_SelectedObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectedObjectChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_PartialTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PartialTextChanged(EventHandler value);
    private void FireChanged(EventHandler eventHandler);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxContextWrapper")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxContextWrapper : ContextWrapper {
    private LayoutInflater _inflater;
    private IMvxBindingContextOwner _bindingContextOwner;
    protected MvxContextWrapper(Context context, IMvxBindingContextOwner bindingContextOwner);
    public static ContextWrapper Wrap(Context base, IMvxBindingContextOwner bindingContextOwner);
    public virtual Object GetSystemService(string name);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxDatePicker")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxDatePicker : DatePicker {
    private bool _initialized;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    public DateTime Value { get; public set; }
    public MvxDatePicker(Context context);
    public MvxDatePicker(Context context, IAttributeSet attrs);
    public MvxDatePicker(Context context, IAttributeSet attrs, int defStyleAttr);
    public MvxDatePicker(Context context, IAttributeSet attrs, int defStyleAttr, int defStyleRes);
    protected MvxDatePicker(IntPtr javaReference, JniHandleOwnership transfer);
    public DateTime get_Value();
    public void set_Value(DateTime value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    public sealed virtual void OnDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth);
}
public class MvvmCross.Platforms.Android.Binding.Views.MvxExpandableListAdapter : MvxAdapter {
    private int _groupTemplateId;
    public int GroupTemplateId { get; public set; }
    public int GroupCount { get; }
    public MvxExpandableListAdapter(Context context);
    public MvxExpandableListAdapter(Context context, IMvxAndroidBindingContext bindingContext);
    protected MvxExpandableListAdapter(IntPtr javaReference, JniHandleOwnership transfer);
    public int get_GroupTemplateId();
    public void set_GroupTemplateId(int value);
    public sealed virtual int get_GroupCount();
    public virtual void OnGroupExpanded(int groupPosition);
    public virtual void OnGroupCollapsed(int groupPosition);
    public virtual bool IsChildSelectable(int groupPosition, int childPosition);
    public virtual View GetGroupView(int groupPosition, bool isExpanded, View convertView, ViewGroup parent);
    public virtual long GetGroupId(int groupPosition);
    public virtual Object GetGroup(int groupPosition);
    public virtual long GetCombinedGroupId(long groupId);
    public virtual long GetCombinedChildId(long groupId, long childId);
    public virtual object GetRawItem(int groupPosition, int position);
    public virtual object GetRawGroup(int groupPosition);
    public virtual View GetChildView(int groupPosition, int childPosition, bool isLastChild, View convertView, ViewGroup parent);
    public virtual int GetChildrenCount(int groupPosition);
    public virtual long GetChildId(int groupPosition, int childPosition);
    public virtual Object GetChild(int groupPosition, int childPosition);
    public virtual Tuple`2<int, int> GetPositions(object childItem);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxExpandableListView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxExpandableListView : ExpandableListView {
    private bool _groupClickOverloaded;
    private bool _itemClickOverloaded;
    private bool _itemLongClickOverloaded;
    private ICommand _itemClick;
    private ICommand _itemLongClick;
    private ICommand _groupClick;
    private ICommand _groupLongClick;
    protected MvxExpandableListAdapter ThisAdapter { get; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public int GroupTemplateId { get; public set; }
    public ICommand ItemClick { get; public set; }
    public ICommand ItemLongClick { get; public set; }
    public ICommand GroupClick { get; public set; }
    public ICommand GroupLongClick { get; public set; }
    public MvxExpandableListView(Context context, IAttributeSet attrs);
    public MvxExpandableListView(Context context, IAttributeSet attrs, MvxExpandableListAdapter adapter);
    protected MvxExpandableListView(IntPtr javaReference, JniHandleOwnership transfer);
    protected MvxExpandableListAdapter get_ThisAdapter();
    public virtual IEnumerable get_ItemsSource();
    public virtual void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public int get_GroupTemplateId();
    public void set_GroupTemplateId(int value);
    public ICommand get_ItemClick();
    public void set_ItemClick(ICommand value);
    public ICommand get_ItemLongClick();
    public void set_ItemLongClick(ICommand value);
    public ICommand get_GroupClick();
    public void set_GroupClick(ICommand value);
    public ICommand get_GroupLongClick();
    public void set_GroupLongClick(ICommand value);
    private void EnsureItemClickOverloaded();
    private void ChildOnClick(object sender, ChildClickEventArgs e);
    private void EnsureGroupClickOverloaded();
    private void GroupOnClick(object sender, GroupClickEventArgs e);
    private void EnsureItemLongClickOverloaded();
    private void ItemOnLongClick(object sender, ItemLongClickEventArgs e);
    protected virtual void ExecuteCommandOnItem(ICommand command, int groupPosition, int position);
    protected virtual void ExecuteCommandOnGroup(ICommand command, int groupPosition);
    protected virtual void Dispose(bool disposing);
}
public class MvvmCross.Platforms.Android.Binding.Views.MvxFilteringAdapter : MvxAdapter {
    private object _syncLock;
    public Func`3<object, string, bool> DefaultFilterPredicate;
    [CompilerGeneratedAttribute]
private Func`3<object, string, bool> <FilterPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <FilteredItemsSource>k__BackingField;
    private string _partialText;
    [CompilerGeneratedAttribute]
private EventHandler PartialTextChanged;
    [CompilerGeneratedAttribute]
private bool <ReturnSingleObjectFromGetItem>k__BackingField;
    private MvxReplaceableJavaContainer _javaContainer;
    [CompilerGeneratedAttribute]
private Filter <Filter>k__BackingField;
    public Func`3<object, string, bool> FilterPredicate { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    private IEnumerable FilteredItemsSource { get; private set; }
    public string PartialText { get; private set; }
    public bool ReturnSingleObjectFromGetItem { get; public set; }
    public int Count { get; }
    public Filter Filter { get; public set; }
    public MvxFilteringAdapter(Context context);
    public MvxFilteringAdapter(Context context, IMvxAndroidBindingContext bindingContext);
    protected MvxFilteringAdapter(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public Func`3<object, string, bool> get_FilterPredicate();
    [CompilerGeneratedAttribute]
public void set_FilterPredicate(Func`3<object, string, bool> value);
    protected virtual ValueTuple`2<int, IEnumerable> FilterValues(string constraint);
    public virtual IEnumerable get_ItemsSource();
    public virtual void set_ItemsSource(IEnumerable value);
    [CompilerGeneratedAttribute]
private IEnumerable get_FilteredItemsSource();
    [CompilerGeneratedAttribute]
private void set_FilteredItemsSource(IEnumerable value);
    [CompilerGeneratedAttribute]
public void add_PartialTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PartialTextChanged(EventHandler value);
    public string get_PartialText();
    private void set_PartialText(string value);
    private void FireConstraintChanged();
    [CompilerGeneratedAttribute]
public bool get_ReturnSingleObjectFromGetItem();
    [CompilerGeneratedAttribute]
public void set_ReturnSingleObjectFromGetItem(bool value);
    public virtual Object GetItem(int position);
    public virtual object GetRawItem(int position);
    public virtual int GetPosition(object item);
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
public sealed virtual Filter get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Filter value);
    [CompilerGeneratedAttribute]
private void <FireConstraintChanged>b__22_0();
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxFrameControl")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxFrameControl : FrameLayout {
    private int _templateId;
    private IMvxAndroidBindingContext _bindingContext;
    private object _cachedDataContext;
    private bool _isAttachedToWindow;
    private View _content;
    protected IMvxAndroidBindingContext AndroidBindingContext { get; }
    public IMvxBindingContext BindingContext { get; public set; }
    protected View Content { get; protected set; }
    [MvxSetToNullAfterBindingAttribute]
public object DataContext { get; public set; }
    public MvxFrameControl(Context context, IAttributeSet attrs);
    public MvxFrameControl(int templateId, Context context, IAttributeSet attrs);
    protected MvxFrameControl(IntPtr javaReference, JniHandleOwnership transfer);
    protected IMvxAndroidBindingContext get_AndroidBindingContext();
    public sealed virtual IMvxBindingContext get_BindingContext();
    public sealed virtual void set_BindingContext(IMvxBindingContext value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAttachedToWindow();
    protected virtual void OnDetachedFromWindow();
    protected View get_Content();
    protected void set_Content(View value);
    protected virtual void OnContentSet();
    public object get_DataContext();
    public void set_DataContext(object value);
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxGridView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxGridView : GridView {
    private ICommand _itemClick;
    private ICommand _itemLongClick;
    private bool _itemClickOverloaded;
    private bool _itemLongClickOverloaded;
    public IMvxAdapter Adapter { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public ICommand ItemClick { get; public set; }
    public ICommand ItemLongClick { get; public set; }
    public MvxGridView(Context context, IAttributeSet attrs);
    public MvxGridView(Context context, IAttributeSet attrs, IMvxAdapter adapter);
    protected MvxGridView(IntPtr javaReference, JniHandleOwnership transfer);
    public IMvxAdapter get_Adapter();
    public void set_Adapter(IMvxAdapter value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public ICommand get_ItemClick();
    public void set_ItemClick(ICommand value);
    private void EnsureItemClickOverloaded();
    private void ItemOnClick(object sender, ItemClickEventArgs e);
    public ICommand get_ItemLongClick();
    public void set_ItemLongClick(ICommand value);
    private void EnsureItemLongClickOverloaded();
    private void ItemOnLongClick(object sender, ItemLongClickEventArgs e);
    protected virtual void ExecuteCommandOnItem(ICommand command, int position);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnMeasure(int widthMeasureSpec, int heightMeasureSpec);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxLayoutInflater")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxLayoutInflater : LayoutInflater {
    [CompilerGeneratedAttribute]
private static bool <Debug>k__BackingField;
    [NullableAttribute("1")]
private static string Tag;
    [NullableAttribute("1")]
private static String[] ClassPrefixList;
    [NullableAttribute("1")]
private MvxBindingVisitor _bindingVisitor;
    private IMvxAndroidViewFactory _androidViewFactory;
    private IMvxLayoutInflaterHolderFactoryFactory _layoutInflaterHolderFactoryFactory;
    private Field _constructorArgs;
    private bool _setPrivateFactory;
    public static bool Debug { get; public set; }
    protected IMvxAndroidViewFactory AndroidViewFactory { get; }
    protected IMvxLayoutInflaterHolderFactoryFactory FactoryFactory { get; }
    [NullableContextAttribute("1")]
public MvxLayoutInflater(Context context);
    public MvxLayoutInflater(LayoutInflater original, Context newContext, MvxBindingVisitor bindingVisitor, bool cloned);
    [PreserveAttribute]
public MvxLayoutInflater(IntPtr handle, JniHandleOwnership transfer);
    private static MvxLayoutInflater();
    [CompilerGeneratedAttribute]
public static bool get_Debug();
    [CompilerGeneratedAttribute]
public static void set_Debug(bool value);
    [NullableContextAttribute("1")]
public virtual LayoutInflater CloneInContext(Context newContext);
    public virtual View Inflate(int resource, ViewGroup root, bool attachToRoot);
    protected virtual View OnCreateView(View parent, string name, IAttributeSet attrs);
    protected virtual View OnCreateView(string name, IAttributeSet attrs);
    public virtual View OnCreateView(Context viewContext, View parent, string name, IAttributeSet attrs);
    private View PhoneLayoutInflaterOnCreateView(string name, IAttributeSet attrs);
    [NullableContextAttribute("1")]
[ExportAttribute]
public void setFactory(IFactory factory);
    [NullableContextAttribute("1")]
[ExportAttribute]
public void setFactory2(IFactory2 factory2);
    private void SetupLayoutFactories(bool cloned);
    private void SetPrivateFactoryInternal();
    [NullableContextAttribute("1")]
internal View CreateCustomViewInternal(View parent, View view, string name, Context viewContext, IAttributeSet attrs);
    [NullableContextAttribute("1")]
private ValueTuple`2<Object[], Object> GetConstructorArgs(Context viewContext);
    private void RestoreConstructorArgs(Object[] constructorArgsArr, Object lastContext);
    [NullableContextAttribute("1")]
private View CreateViewCompat(Context viewContext, string name, IAttributeSet attrs);
    protected IMvxAndroidViewFactory get_AndroidViewFactory();
    protected IMvxLayoutInflaterHolderFactoryFactory get_FactoryFactory();
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxLinearLayout")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxLinearLayout : LinearLayout {
    private IMvxAdapterWithChangedEvent _adapter;
    public IMvxAdapterWithChangedEvent Adapter { get; protected set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public MvxLinearLayout(Context context, IAttributeSet attrs);
    public MvxLinearLayout(Context context, IAttributeSet attrs, IMvxAdapterWithChangedEvent adapter);
    protected MvxLinearLayout(IntPtr javaReference, JniHandleOwnership transfer);
    public void AdapterOnDataSetChanged(object sender, NotifyCollectionChangedEventArgs eventArgs);
    private void OnChildViewRemoved(object sender, ChildViewRemovedEventArgs childViewRemovedEventArgs);
    public sealed virtual IMvxAdapterWithChangedEvent get_Adapter();
    protected void set_Adapter(IMvxAdapterWithChangedEvent value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxListItemView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxListItemView : Object {
    private IMvxAndroidBindingContext _bindingContext;
    private View _content;
    private object _cachedDataContext;
    private bool _isAttachedToWindow;
    [CompilerGeneratedAttribute]
private int <TemplateId>k__BackingField;
    public IMvxBindingContext BindingContext { get; public set; }
    public View Content { get; public set; }
    public object DataContext { get; public set; }
    public int TemplateId { get; protected set; }
    public MvxListItemView(Context context, IMvxLayoutInflaterHolder layoutInflaterHolder, object dataContext, ViewGroup parent, int templateId);
    public sealed virtual void OnViewAttachedToWindow(View attachedView);
    public sealed virtual void OnViewDetachedFromWindow(View detachedView);
    public sealed virtual IMvxBindingContext get_BindingContext();
    public sealed virtual void set_BindingContext(IMvxBindingContext value);
    public sealed virtual View get_Content();
    public sealed virtual void set_Content(View value);
    public virtual object get_DataContext();
    public virtual void set_DataContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TemplateId();
    [CompilerGeneratedAttribute]
protected void set_TemplateId(int value);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxListView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxListView : ListView {
    private bool _itemClickOverloaded;
    private bool _itemLongClickOverloaded;
    private ICommand _itemClick;
    private ICommand _itemLongClick;
    public IMvxAdapter Adapter { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public ICommand ItemClick { get; public set; }
    public ICommand ItemLongClick { get; public set; }
    public MvxListView(Context context, IAttributeSet attrs);
    public MvxListView(Context context, IAttributeSet attrs, IMvxAdapter adapter);
    protected MvxListView(IntPtr javaReference, JniHandleOwnership transfer);
    public IMvxAdapter get_Adapter();
    public void set_Adapter(IMvxAdapter value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public ICommand get_ItemClick();
    public void set_ItemClick(ICommand value);
    private void EnsureItemClickOverloaded();
    public ICommand get_ItemLongClick();
    public void set_ItemLongClick(ICommand value);
    private void EnsureItemLongClickOverloaded();
    protected virtual void ExecuteCommandOnItem(ICommand command, int position);
    private void OnItemClick(object sender, ItemClickEventArgs e);
    private void OnItemLongClick(object sender, ItemLongClickEventArgs e);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxRadioGroup")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxRadioGroup : RadioGroup {
    private IMvxAdapterWithChangedEvent _adapter;
    private static long _nextGeneratedViewId;
    public IMvxAdapterWithChangedEvent Adapter { get; protected set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public MvxRadioGroup(Context context, IAttributeSet attrs);
    public MvxRadioGroup(Context context, IAttributeSet attrs, IMvxAdapterWithChangedEvent adapter);
    protected MvxRadioGroup(IntPtr javaReference, JniHandleOwnership transfer);
    private static MvxRadioGroup();
    public void AdapterOnDataSetChanged(object sender, NotifyCollectionChangedEventArgs eventArgs);
    private void OnChildViewAdded(object sender, ChildViewAddedEventArgs args);
    private void OnChildViewRemoved(object sender, ChildViewRemovedEventArgs childViewRemovedEventArgs);
    public sealed virtual IMvxAdapterWithChangedEvent get_Adapter();
    protected void set_Adapter(IMvxAdapterWithChangedEvent value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    private static int GenerateViewId();
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxSimpleListItemView")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxSimpleListItemView : MvxListItemView {
    public object DataContext { get; public set; }
    public MvxSimpleListItemView(Context context, IMvxLayoutInflaterHolder layoutInflaterHolder, object dataContext, ViewGroup parent, int templateId);
    public virtual object get_DataContext();
    public virtual void set_DataContext(object value);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxSpinner")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxSpinner : Spinner {
    [CompilerGeneratedAttribute]
private ICommand <HandleItemSelected>k__BackingField;
    public IMvxAdapter Adapter { get; public set; }
    [MvxSetToNullAfterBindingAttribute]
public IEnumerable ItemsSource { get; public set; }
    public int ItemTemplateId { get; public set; }
    public int DropDownItemTemplateId { get; public set; }
    public ICommand HandleItemSelected { get; public set; }
    public MvxSpinner(Context context, IAttributeSet attrs);
    public MvxSpinner(Context context, IAttributeSet attrs, IMvxAdapter adapter);
    protected MvxSpinner(IntPtr javaReference, JniHandleOwnership transfer);
    public IMvxAdapter get_Adapter();
    public void set_Adapter(IMvxAdapter value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public int get_ItemTemplateId();
    public void set_ItemTemplateId(int value);
    public int get_DropDownItemTemplateId();
    public void set_DropDownItemTemplateId(int value);
    [CompilerGeneratedAttribute]
public ICommand get_HandleItemSelected();
    [CompilerGeneratedAttribute]
public void set_HandleItemSelected(ICommand value);
    private void OnItemSelected(object sender, ItemSelectedEventArgs e);
    protected virtual void HandleSelected(int position);
    protected virtual void Dispose(bool disposing);
}
[RegisterAttribute("mvvmcross.platforms.android.binding.views.MvxTimePicker")]
public class MvvmCross.Platforms.Android.Binding.Views.MvxTimePicker : TimePicker {
    private bool _initialized;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    public TimeSpan Value { get; public set; }
    public MvxTimePicker(Context context);
    public MvxTimePicker(Context context, IAttributeSet attrs);
    public MvxTimePicker(Context context, IAttributeSet attrs, int defStyleAttr);
    public MvxTimePicker(Context context, IAttributeSet attrs, int defStyleAttr, int defStyleRes);
    protected MvxTimePicker(IntPtr javaReference, JniHandleOwnership transfer);
    public TimeSpan get_Value();
    public void set_Value(TimeSpan value);
    [CompilerGeneratedAttribute]
public void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValueChanged(EventHandler value);
    public sealed virtual void OnTimeChanged(TimePicker view, int hourOfDay, int minute);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Binding.Views.MvxViewGroupExtensions : object {
    [ExtensionAttribute]
public static void UpdateDataSetFromChange(T viewGroup, object sender, NotifyCollectionChangedEventArgs eventArgs);
    [ExtensionAttribute]
private static void Refill(ViewGroup viewGroup, IAdapter adapter);
    [ExtensionAttribute]
private static void Add(ViewGroup viewGroup, IAdapter adapter, int insertionIndex, int count);
    [ExtensionAttribute]
private static void Remove(ViewGroup viewGroup, IAdapter adapter, int removalIndex, int count);
    [ExtensionAttribute]
private static void Replace(ViewGroup viewGroup, IAdapter adapter, int startIndex, int count);
}
public interface MvvmCross.Platforms.Android.Core.IMvxAndroidActivityLifetimeListener {
    public abstract virtual void OnCreate(Activity activity, Bundle eventArgs);
    public abstract virtual void OnStart(Activity activity);
    public abstract virtual void OnRestart(Activity activity);
    public abstract virtual void OnResume(Activity activity);
    public abstract virtual void OnPause(Activity activity);
    public abstract virtual void OnStop(Activity activity);
    public abstract virtual void OnDestroy(Activity activity);
    public abstract virtual void OnViewNewIntent(Activity activity);
    public abstract virtual void OnSaveInstanceState(Activity activity, Bundle eventArgs);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ActivityChanged(EventHandler`1<MvxActivityEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ActivityChanged(EventHandler`1<MvxActivityEventArgs> value);
}
public interface MvvmCross.Platforms.Android.Core.IMvxAndroidSetup {
    [NullableContextAttribute("1")]
public abstract virtual void PlatformInitialize(Application application);
}
public interface MvvmCross.Platforms.Android.Core.IMvxSavedStateConverter {
    public abstract virtual IMvxBundle Read(Bundle bundle);
    public abstract virtual void Write(Bundle bundle, IMvxBundle savedState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Platforms.Android.Core.MvxAndroidSetup : MvxSetup {
    [NullableAttribute("2")]
private MvxCurrentTopActivity _currentTopActivity;
    [NullableAttribute("2")]
private IMvxAndroidViewPresenter _presenter;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Context <ApplicationContext>k__BackingField;
    public Assembly ExecutableAssembly { get; }
    [NullableAttribute("2")]
public Context ApplicationContext { get; private set; }
    protected IMvxAndroidViewPresenter Presenter { get; }
    protected IEnumerable`1<Type> ValueConverterHolders { get; }
    protected IEnumerable`1<Assembly> ValueConverterAssemblies { get; }
    protected IDictionary`2<string, string> ViewNamespaceAbbreviations { get; }
    protected IEnumerable`1<string> ViewNamespaces { get; }
    protected IEnumerable`1<Assembly> AndroidViewAssemblies { get; }
    public sealed virtual void PlatformInitialize(Application application);
    public virtual Assembly get_ExecutableAssembly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual Context get_ApplicationContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ApplicationContext(Context value);
    protected virtual void InitializeFirstChance(IMvxIoCProvider iocProvider);
    protected virtual void InitializeAndroidCurrentTopActivity(IMvxIoCProvider iocProvider);
    protected virtual IMvxAndroidCurrentTopActivity CreateAndroidCurrentTopActivity();
    protected virtual void InitializeLifetimeMonitor(IMvxIoCProvider iocProvider);
    protected virtual MvxAndroidLifetimeMonitor CreateLifetimeMonitor();
    protected virtual void InitializeSavedStateConverter(IMvxIoCProvider iocProvider);
    protected virtual IMvxSavedStateConverter CreateSavedStateConverter();
    protected virtual IMvxViewsContainer CreateViewsContainer(IMvxIoCProvider iocProvider);
    protected virtual IMvxAndroidViewsContainer CreateViewsContainer(Context applicationContext);
    protected IMvxAndroidViewPresenter get_Presenter();
    protected virtual IMvxAndroidViewPresenter CreateViewPresenter();
    protected virtual IMvxViewDispatcher CreateViewDispatcher();
    protected virtual void RegisterPresenter(IMvxIoCProvider iocProvider);
    protected virtual void InitializeLastChance(IMvxIoCProvider iocProvider);
    protected virtual void InitializeBindingBuilder(IMvxIoCProvider iocProvider);
    protected virtual MvxBindingBuilder CreateBindingBuilder();
    protected virtual void FillViewTypes(IMvxTypeCache`1<View> cache);
    protected virtual void FillBindingNames(IMvxBindingNameRegistry registry);
    protected virtual void FillAxmlViewTypeResolver(IMvxAxmlNameViewTypeResolver viewTypeResolver);
    protected virtual void FillNamespaceListViewTypeResolver(IMvxNamespaceListViewTypeResolver viewTypeResolver);
    protected virtual void FillValueConverters(IMvxValueConverterRegistry registry);
    protected virtual void FillValueCombiners(IMvxValueCombinerRegistry registry);
    protected virtual IEnumerable`1<Type> get_ValueConverterHolders();
    protected virtual IEnumerable`1<Assembly> get_ValueConverterAssemblies();
    protected virtual IDictionary`2<string, string> get_ViewNamespaceAbbreviations();
    protected virtual IEnumerable`1<string> get_ViewNamespaces();
    protected virtual IEnumerable`1<Assembly> get_AndroidViewAssemblies();
    protected virtual void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
    protected virtual IMvxNameMapping CreateViewToViewModelNaming();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Platforms.Android.Core.MvxAndroidSetup`1 : MvxAndroidSetup {
    protected virtual IMvxApplication CreateApp(IMvxIoCProvider iocProvider);
    public virtual IEnumerable`1<Assembly> GetViewModelAssemblies();
}
public class MvvmCross.Platforms.Android.Core.MvxAndroidSetupSingleton : MvxSetupSingleton {
    public static MvxAndroidSetupSingleton EnsureSingletonAvailable(Application applicationContext);
}
public interface MvvmCross.Platforms.Android.IMvxAndroidCurrentTopActivity {
    public Activity Activity { get; }
    public abstract virtual Activity get_Activity();
}
public interface MvvmCross.Platforms.Android.IMvxAndroidGlobals {
    public Assembly ExecutableAssembly { get; }
    public Context ApplicationContext { get; }
    public abstract virtual Assembly get_ExecutableAssembly();
    public abstract virtual Context get_ApplicationContext();
}
public interface MvvmCross.Platforms.Android.IMvxIntentResultSink {
    public abstract virtual void OnResult(MvxIntentResultEventArgs result);
}
public interface MvvmCross.Platforms.Android.IMvxIntentResultSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Result(EventHandler`1<MvxIntentResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Result(EventHandler`1<MvxIntentResultEventArgs> value);
}
public class MvvmCross.Platforms.Android.MvxAndroidTask : MvxMainThreadDispatchingObject {
    protected void StartActivity(Intent intent);
    protected void StartActivityForResult(int requestCode, Intent intent);
    protected virtual void ProcessMvxIntentResult(MvxIntentResultEventArgs result);
    private void OnMvxIntentResultReceived(object sender, MvxIntentResultEventArgs e);
    protected void DoOnActivity(Action`1<Activity> action, bool ensureOnMainThread);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.MvxDateTimeExtensions : object {
    private static DateTime UnixZeroUtc;
    private static MvxDateTimeExtensions();
    [ExtensionAttribute]
public static DateTime FromMillisecondsUnixTimeToUtc(long milliseconds);
    [ExtensionAttribute]
public static DateTime FromUnixTimeToUtc(long seconds);
    [ExtensionAttribute]
public static DateTime FromUnixTimeToLocal(long seconds);
    [ExtensionAttribute]
public static long FromUtcToUnixTime(DateTime dateTimeUtc);
    [ExtensionAttribute]
public static long FromLocalToUnixTime(DateTime dateTimeLocal);
}
public class MvvmCross.Platforms.Android.MvxIntentResultSink : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxIntentResultEventArgs> Result;
    public sealed virtual void OnResult(MvxIntentResultEventArgs result);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Result(EventHandler`1<MvxIntentResultEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Result(EventHandler`1<MvxIntentResultEventArgs> value);
}
public class MvvmCross.Platforms.Android.MvxJavaContainer : Object {
    [CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    public object Object { get; private set; }
    protected MvxJavaContainer(object theObject);
    [CompilerGeneratedAttribute]
public object get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(object value);
}
public class MvvmCross.Platforms.Android.MvxJavaContainer`1 : MvxJavaContainer {
    public T Object { get; }
    public MvxJavaContainer`1(T theObject);
    public T get_Object();
}
public static class MvvmCross.Platforms.Android.MvxJavaDateUtils : object {
    public static DateTime DateTimeFromJava(int year, int month, int dayOfMonth);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.MvxJavaObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsNull(Object object);
    [ExtensionAttribute]
public static bool IsActivityDead(Activity activity);
    [ExtensionAttribute]
public static bool IsActivityAlive(Activity activity);
}
public class MvvmCross.Platforms.Android.MvxReplaceableJavaContainer : Object {
    [CompilerGeneratedAttribute]
private object <Object>k__BackingField;
    public object Object { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(object value);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class MvvmCross.Platforms.Android.Presenters.Attributes.MvxActivityPresentationAttribute : MvxBasePresentationAttribute {
    [CompilerGeneratedAttribute]
private static Bundle <DefaultExtras>k__BackingField;
    [CompilerGeneratedAttribute]
private Bundle <Extras>k__BackingField;
    public static Bundle DefaultExtras { get; }
    public Bundle Extras { get; public set; }
    [CompilerGeneratedAttribute]
public static Bundle get_DefaultExtras();
    [CompilerGeneratedAttribute]
public Bundle get_Extras();
    [CompilerGeneratedAttribute]
public void set_Extras(Bundle value);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Presenters.Attributes.MvxAndroidPresentationAttributeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsFragmentCacheable(Type fragmentType, Type fragmentActivityParentType);
    [ExtensionAttribute]
public static PopBackStackFlags ToNativePopBackStackFlags(MvxPopBackStack mvxPopBackStack);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class MvvmCross.Platforms.Android.Presenters.Attributes.MvxDialogFragmentPresentationAttribute : MvxFragmentPresentationAttribute {
    [CompilerGeneratedAttribute]
private bool <Cancelable>k__BackingField;
    public bool Cancelable { get; public set; }
    public MvxDialogFragmentPresentationAttribute(bool cancelable, Type activityHostViewModelType, bool addToBackStack, int enterAnimation, int exitAnimation, int popEnterAnimation, int popExitAnimation, int transitionStyle, bool isCacheableFragment);
    public MvxDialogFragmentPresentationAttribute(bool cancelable, Type activityHostViewModelType, bool addToBackStack, string enterAnimation, string exitAnimation, string popEnterAnimation, string popExitAnimation, string transitionStyle, bool isCacheableFragment);
    [CompilerGeneratedAttribute]
public bool get_Cancelable();
    [CompilerGeneratedAttribute]
public void set_Cancelable(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class MvvmCross.Platforms.Android.Presenters.Attributes.MvxFragmentPresentationAttribute : MvxBasePresentationAttribute {
    [CompilerGeneratedAttribute]
private Type <ActivityHostViewModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <FragmentHostViewType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FragmentContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DefaultAddToBackStack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddToBackStack>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultEnterAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EnterAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultExitAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultPopEnterAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PopEnterAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultPopExitAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PopExitAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultTransitionStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransitionStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DefaultIsCacheableFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCacheableFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private static string <DefaultPopBackStackImmediateName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <PopBackStackImmediateName>k__BackingField;
    [CompilerGeneratedAttribute]
private static MvxPopBackStack <DefaultPopBackStackImmediateFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxPopBackStack <PopBackStackImmediateFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddFragment>k__BackingField;
    public Type ActivityHostViewModelType { get; public set; }
    public Type FragmentHostViewType { get; public set; }
    public int FragmentContentId { get; public set; }
    public static bool DefaultAddToBackStack { get; }
    public bool AddToBackStack { get; public set; }
    public static int DefaultEnterAnimation { get; }
    public int EnterAnimation { get; public set; }
    public static int DefaultExitAnimation { get; }
    public int ExitAnimation { get; public set; }
    public static int DefaultPopEnterAnimation { get; }
    public int PopEnterAnimation { get; public set; }
    public static int DefaultPopExitAnimation { get; }
    public int PopExitAnimation { get; public set; }
    public static int DefaultTransitionStyle { get; }
    public int TransitionStyle { get; public set; }
    public static bool DefaultIsCacheableFragment { get; }
    public bool IsCacheableFragment { get; public set; }
    public string Tag { get; public set; }
    [NullableAttribute("1")]
public static string DefaultPopBackStackImmediateName { get; }
    [NullableAttribute("1")]
public string PopBackStackImmediateName { get; public set; }
    public static MvxPopBackStack DefaultPopBackStackImmediateFlag { get; }
    public MvxPopBackStack PopBackStackImmediateFlag { get; public set; }
    public bool AddFragment { get; public set; }
    public MvxFragmentPresentationAttribute(Type activityHostViewModelType, int fragmentContentId, bool addToBackStack, int enterAnimation, int exitAnimation, int popEnterAnimation, int popExitAnimation, int transitionStyle, Type fragmentHostViewType, bool isCacheableFragment, string tag, string popBackStackImmediateName, MvxPopBackStack popBackStackImmediateFlag, bool addFragment);
    public MvxFragmentPresentationAttribute(Type activityHostViewModelType, string fragmentContentResourceName, bool addToBackStack, string enterAnimation, string exitAnimation, string popEnterAnimation, string popExitAnimation, string transitionStyle, Type fragmentHostViewType, bool isCacheableFragment, string tag, string popBackStackImmediateName, MvxPopBackStack popBackStackImmediateFlag, bool addFragment);
    private static MvxFragmentPresentationAttribute();
    [CompilerGeneratedAttribute]
public Type get_ActivityHostViewModelType();
    [CompilerGeneratedAttribute]
public void set_ActivityHostViewModelType(Type value);
    [CompilerGeneratedAttribute]
public Type get_FragmentHostViewType();
    [CompilerGeneratedAttribute]
public void set_FragmentHostViewType(Type value);
    [CompilerGeneratedAttribute]
public int get_FragmentContentId();
    [CompilerGeneratedAttribute]
public void set_FragmentContentId(int value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultAddToBackStack();
    [CompilerGeneratedAttribute]
public bool get_AddToBackStack();
    [CompilerGeneratedAttribute]
public void set_AddToBackStack(bool value);
    [CompilerGeneratedAttribute]
public static int get_DefaultEnterAnimation();
    [CompilerGeneratedAttribute]
public int get_EnterAnimation();
    [CompilerGeneratedAttribute]
public void set_EnterAnimation(int value);
    [CompilerGeneratedAttribute]
public static int get_DefaultExitAnimation();
    [CompilerGeneratedAttribute]
public int get_ExitAnimation();
    [CompilerGeneratedAttribute]
public void set_ExitAnimation(int value);
    [CompilerGeneratedAttribute]
public static int get_DefaultPopEnterAnimation();
    [CompilerGeneratedAttribute]
public int get_PopEnterAnimation();
    [CompilerGeneratedAttribute]
public void set_PopEnterAnimation(int value);
    [CompilerGeneratedAttribute]
public static int get_DefaultPopExitAnimation();
    [CompilerGeneratedAttribute]
public int get_PopExitAnimation();
    [CompilerGeneratedAttribute]
public void set_PopExitAnimation(int value);
    [CompilerGeneratedAttribute]
public static int get_DefaultTransitionStyle();
    [CompilerGeneratedAttribute]
public int get_TransitionStyle();
    [CompilerGeneratedAttribute]
public void set_TransitionStyle(int value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultIsCacheableFragment();
    [CompilerGeneratedAttribute]
public bool get_IsCacheableFragment();
    [CompilerGeneratedAttribute]
public void set_IsCacheableFragment(bool value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static string get_DefaultPopBackStackImmediateName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_PopBackStackImmediateName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_PopBackStackImmediateName(string value);
    [CompilerGeneratedAttribute]
public static MvxPopBackStack get_DefaultPopBackStackImmediateFlag();
    [CompilerGeneratedAttribute]
public MvxPopBackStack get_PopBackStackImmediateFlag();
    [CompilerGeneratedAttribute]
public void set_PopBackStackImmediateFlag(MvxPopBackStack value);
    [CompilerGeneratedAttribute]
public bool get_AddFragment();
    [CompilerGeneratedAttribute]
public void set_AddFragment(bool value);
}
public enum MvvmCross.Platforms.Android.Presenters.Attributes.MvxPopBackStack : Enum {
    public int value__;
    public static MvxPopBackStack None;
    public static MvxPopBackStack Inclusive;
}
[AttributeUsageAttribute("4")]
public class MvvmCross.Platforms.Android.Presenters.Attributes.MvxTabLayoutPresentationAttribute : MvxViewPagerFragmentPresentationAttribute {
    [CompilerGeneratedAttribute]
private int <TabLayoutResourceId>k__BackingField;
    public int TabLayoutResourceId { get; public set; }
    [NullableContextAttribute("2")]
public MvxTabLayoutPresentationAttribute(string title, int viewPagerResourceId, int tabLayoutResourceId, Type activityHostViewModelType, bool addToBackStack, Type fragmentHostViewType, bool isCacheableFragment);
    [NullableContextAttribute("1")]
public MvxTabLayoutPresentationAttribute(string title, string viewPagerResourceName, string tabLayoutResourceName, Type activityHostViewModelType, bool addToBackStack, Type fragmentHostViewType, bool isCacheableFragment);
    [CompilerGeneratedAttribute]
public int get_TabLayoutResourceId();
    [CompilerGeneratedAttribute]
public void set_TabLayoutResourceId(int value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class MvvmCross.Platforms.Android.Presenters.Attributes.MvxViewPagerFragmentPresentationAttribute : MvxFragmentPresentationAttribute {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ViewPagerResourceId>k__BackingField;
    public string Title { get; public set; }
    public int ViewPagerResourceId { get; public set; }
    public MvxViewPagerFragmentPresentationAttribute(string title, int viewPagerResourceId, Type activityHostViewModelType, bool addToBackStack, Type fragmentHostViewType, bool isCacheableFragment, string tag);
    public MvxViewPagerFragmentPresentationAttribute(string title, string viewPagerResourceName, Type activityHostViewModelType, bool addToBackStack, Type fragmentHostViewType, bool isCacheableFragment, string tag);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public int get_ViewPagerResourceId();
    [CompilerGeneratedAttribute]
public void set_ViewPagerResourceId(int value);
}
public interface MvvmCross.Platforms.Android.Presenters.IMvxAndroidViewPresenter {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Presenters.MvxAndroidViewPresenter : MvxAttributeViewPresenter {
    public static string ViewModelRequestBundleKey;
    public static string SharedElementsBundleKey;
    private Lazy`1<IMvxAndroidCurrentTopActivity> _androidCurrentTopActivity;
    private Lazy`1<IMvxAndroidActivityLifetimeListener> _activityLifetimeListener;
    private Lazy`1<IMvxNavigationSerializer> _navigationSerializer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ILogger> _logger;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Assembly> <AndroidViewAssemblies>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MvxViewModelRequest <PendingRequest>k__BackingField;
    protected IEnumerable`1<Assembly> AndroidViewAssemblies { get; protected set; }
    [NullableAttribute("2")]
protected MvxViewModelRequest PendingRequest { get; protected set; }
    [NullableAttribute("2")]
protected FragmentManager CurrentFragmentManager { get; }
    [NullableAttribute("2")]
protected AppCompatActivity CurrentActivity { get; }
    protected IMvxAndroidActivityLifetimeListener ActivityLifetimeListener { get; }
    protected IMvxNavigationSerializer NavigationSerializer { get; }
    public MvxAndroidViewPresenter(IEnumerable`1<Assembly> androidViewAssemblies);
    [CompilerGeneratedAttribute]
protected IEnumerable`1<Assembly> get_AndroidViewAssemblies();
    [CompilerGeneratedAttribute]
protected void set_AndroidViewAssemblies(IEnumerable`1<Assembly> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected MvxViewModelRequest get_PendingRequest();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_PendingRequest(MvxViewModelRequest value);
    [NullableContextAttribute("2")]
protected virtual FragmentManager get_CurrentFragmentManager();
    [NullableContextAttribute("2")]
protected virtual AppCompatActivity get_CurrentActivity();
    protected IMvxAndroidActivityLifetimeListener get_ActivityLifetimeListener();
    protected IMvxNavigationSerializer get_NavigationSerializer();
    protected virtual void ActivityLifetimeListenerOnActivityChanged(object sender, MvxActivityEventArgs e);
    protected Type GetAssociatedViewModelType(Type fromFragmentType);
    public virtual void RegisterAttributeTypes();
    public virtual MvxBasePresentationAttribute GetPresentationAttribute(MvxViewModelRequest request);
    private MvxBasePresentationAttribute GetAttributeForFragmentPresentation(IEnumerable`1<MvxFragmentPresentationAttribute> fragmentAttributes);
    private MvxBasePresentationAttribute GetAttributeForFragmentChildPresentation(IEnumerable`1<MvxFragmentPresentationAttribute> fragmentAttributes);
    [NullableContextAttribute("2")]
public virtual MvxBasePresentationAttribute CreatePresentationAttribute(Type viewModelType, Type viewType);
    public virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    private bool ChangePagePresentation(MvxPagePresentationHint pagePresentationHint);
    protected virtual ViewPager FindViewPagerInFragmentPresentation(MvxViewPagerFragmentPresentationAttribute pagerFragmentAttribute);
    [NullableContextAttribute("2")]
protected Type GetCurrentActivityViewModelType();
    protected virtual Task`1<bool> ShowActivity(Type view, MvxActivityPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual Bundle CreateActivityTransitionOptions(Intent intent, MvxActivityPresentationAttribute attribute, MvxViewModelRequest request);
    private Bundle CreateTransitionElementsBundle(Intent intent, IEnumerable`1<Pair> transitionElementPairs, IEnumerable`1<string> elements);
    private ValueTuple`2<List`1<string>, List`1<Pair>> GetTransitionElements(MvxBasePresentationAttribute attribute, MvxViewModelRequest request, IMvxAndroidSharedElements sharedElementsActivity);
    [NullableContextAttribute("2")]
protected virtual Intent CreateIntentForRequest(MvxViewModelRequest request);
    protected virtual void ShowIntent(Intent intent, Bundle bundle);
    private static void StartActivity(Context context, Intent intent, Bundle bundle);
    protected virtual void ShowHostActivity(MvxFragmentPresentationAttribute attribute);
    protected virtual Task`1<bool> ShowFragment(Type view, MvxFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual void ShowNestedFragment(Type view, MvxFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual void PerformShowFragmentTransaction(FragmentManager fragmentManager, MvxFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual void OnBeforeFragmentChanging(FragmentTransaction fragmentTransaction, Fragment fragment, MvxFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    [NullableContextAttribute("2")]
protected virtual void OnFragmentChanged(FragmentTransaction fragmentTransaction, Fragment fragment, MvxFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    [NullableContextAttribute("2")]
protected virtual void OnFragmentChanging(FragmentTransaction fragmentTransaction, Fragment fragment, MvxFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    [NullableContextAttribute("2")]
protected virtual void OnFragmentPopped(FragmentTransaction fragmentTransaction, Fragment fragment, MvxFragmentPresentationAttribute attribute);
    protected virtual Task`1<bool> ShowDialogFragment(Type view, MvxDialogFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual Task`1<bool> ShowViewPagerFragment(Type view, MvxViewPagerFragmentPresentationAttribute attribute, MvxViewModelRequest request);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.Android.Presenters.MvxAndroidViewPresenter/<ShowTabLayout>d__51")]
protected virtual Task`1<bool> ShowTabLayout(Type view, MvxTabLayoutPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual Task`1<bool> CloseActivity(IMvxViewModel viewModel, MvxActivityPresentationAttribute attribute);
    protected virtual Task`1<bool> CloseFragmentDialog(IMvxViewModel viewModel, MvxDialogFragmentPresentationAttribute attribute);
    protected virtual bool CloseFragments();
    protected virtual Task`1<bool> CloseFragment(IMvxViewModel viewModel, MvxFragmentPresentationAttribute attribute);
    protected virtual bool TryPerformCloseFragmentTransaction(FragmentManager fragmentManager, MvxFragmentPresentationAttribute fragmentAttribute);
    private void PopFragment(FragmentManager fragmentManager, MvxFragmentPresentationAttribute fragmentAttribute, Fragment fragmentToPop);
    private void PopOnBackstackEntries(string fragmentName, FragmentManager fragmentManager, MvxFragmentPresentationAttribute fragmentAttribute);
    protected virtual Task`1<bool> CloseViewPagerFragment(IMvxViewModel viewModel, MvxViewPagerFragmentPresentationAttribute attribute);
    protected virtual MvxViewPagerFragmentInfo FindFragmentInfoFromAttribute(MvxFragmentPresentationAttribute attribute, MvxCachingFragmentStatePagerAdapter adapter);
    protected virtual IMvxFragmentView CreateFragment(FragmentManager fragmentManager, MvxBasePresentationAttribute attribute, Type fragmentType);
    [NullableContextAttribute("2")]
protected virtual Fragment GetFragmentByViewType(Type type);
    [NullableContextAttribute("2")]
protected virtual Fragment FindFragmentInChildren(string fragmentName, FragmentManager fragmentManager);
    [NullableContextAttribute("2")]
private static void ValidateArguments(Type view, MvxBasePresentationAttribute attribute, MvxViewModelRequest request);
    [NullableContextAttribute("2")]
private static void ValidateArguments(MvxBasePresentationAttribute attribute, MvxViewModelRequest request);
    [NullableContextAttribute("2")]
private static void ValidateArguments(MvxBasePresentationAttribute attribute);
    [NullableContextAttribute("2")]
private static void ValidateArguments(MvxViewModelRequest request);
}
public class MvvmCross.Platforms.Android.ViewModels.MvxAndroidPropertyChangedListener : MvxPropertyChangedListener {
    private WeakReference`1<IJavaObject> _target;
    public MvxAndroidPropertyChangedListener(INotifyPropertyChanged source, IJavaObject target);
    public virtual void NotificationObjectOnPropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class MvvmCross.Platforms.Android.Views.AppCompat.ActionBarDrawerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private View <DrawerView>k__BackingField;
    public View DrawerView { get; private set; }
    public ActionBarDrawerEventArgs(View drawerView);
    [CompilerGeneratedAttribute]
public View get_DrawerView();
    [CompilerGeneratedAttribute]
private void set_DrawerView(View value);
}
public class MvvmCross.Platforms.Android.Views.AppCompat.ActionBarDrawerSlideEventArgs : ActionBarDrawerEventArgs {
    [CompilerGeneratedAttribute]
private float <SlideOffset>k__BackingField;
    public float SlideOffset { get; private set; }
    public ActionBarDrawerSlideEventArgs(View drawerView, float slideOffset);
    [CompilerGeneratedAttribute]
public float get_SlideOffset();
    [CompilerGeneratedAttribute]
private void set_SlideOffset(float value);
}
public class MvvmCross.Platforms.Android.Views.AppCompat.ActionBarDrawerStateChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <NewState>k__BackingField;
    public int NewState { get; private set; }
    public ActionBarDrawerStateChangeEventArgs(int newState);
    [CompilerGeneratedAttribute]
public int get_NewState();
    [CompilerGeneratedAttribute]
private void set_NewState(int value);
}
[RegisterAttribute("mvvmcross.platforms.android.views.appcompat.MvxActionBarDrawerToggle")]
public class MvvmCross.Platforms.Android.Views.AppCompat.MvxActionBarDrawerToggle : ActionBarDrawerToggle {
    [CompilerGeneratedAttribute]
private EventHandler`1<ActionBarDrawerEventArgs> DrawerClosed;
    [CompilerGeneratedAttribute]
private EventHandler`1<ActionBarDrawerEventArgs> DrawerOpened;
    [CompilerGeneratedAttribute]
private EventHandler`1<ActionBarDrawerSlideEventArgs> DrawerSlide;
    [CompilerGeneratedAttribute]
private EventHandler`1<ActionBarDrawerStateChangeEventArgs> DrawerStateChanged;
    public MvxActionBarDrawerToggle(IntPtr handle, JniHandleOwnership ownership);
    public MvxActionBarDrawerToggle(Activity activity, DrawerLayout drawerLayout, int openDrawerContentDescRes, int closeDrawerContentDescRes);
    public MvxActionBarDrawerToggle(Activity activity, DrawerLayout drawerLayout, Toolbar toolbar, int openDrawerContentDescRes, int closeDrawerContentDescRes);
    [CompilerGeneratedAttribute]
public void add_DrawerClosed(EventHandler`1<ActionBarDrawerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DrawerClosed(EventHandler`1<ActionBarDrawerEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DrawerOpened(EventHandler`1<ActionBarDrawerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DrawerOpened(EventHandler`1<ActionBarDrawerEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DrawerSlide(EventHandler`1<ActionBarDrawerSlideEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DrawerSlide(EventHandler`1<ActionBarDrawerSlideEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DrawerStateChanged(EventHandler`1<ActionBarDrawerStateChangeEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DrawerStateChanged(EventHandler`1<ActionBarDrawerStateChangeEventArgs> value);
    public virtual void OnDrawerClosed(View drawerView);
    public virtual void OnDrawerOpened(View drawerView);
    public virtual void OnDrawerSlide(View drawerView, float slideOffset);
    public virtual void OnDrawerStateChanged(int newState);
}
public interface MvvmCross.Platforms.Android.Views.Base.IMvxEventSourceActivity {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_NewIntentCalled(EventHandler`1<MvxValueEventArgs`1<Intent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NewIntentCalled(EventHandler`1<MvxValueEventArgs`1<Intent>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RestartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RestartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StartActivityForResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxStartActivityForResultParameters>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StartActivityForResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxStartActivityForResultParameters>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ActivityResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxActivityResultParameters>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ActivityResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxActivityResultParameters>> value);
}
public interface MvvmCross.Platforms.Android.Views.Base.IMvxStartActivityForResult {
    public abstract virtual void MvxInternalStartActivityForResult(Intent intent, int requestCode);
}
public class MvvmCross.Platforms.Android.Views.Base.MvxActivityResultParameters : object {
    [CompilerGeneratedAttribute]
private int <RequestCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Result <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Intent <Data>k__BackingField;
    public int RequestCode { get; private set; }
    public Result ResultCode { get; private set; }
    public Intent Data { get; private set; }
    public MvxActivityResultParameters(int requestCode, Result resultCode, Intent data);
    [CompilerGeneratedAttribute]
public int get_RequestCode();
    [CompilerGeneratedAttribute]
private void set_RequestCode(int value);
    [CompilerGeneratedAttribute]
public Result get_ResultCode();
    [CompilerGeneratedAttribute]
private void set_ResultCode(Result value);
    [CompilerGeneratedAttribute]
public Intent get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Intent value);
}
public abstract class MvvmCross.Platforms.Android.Views.Base.MvxBaseActivityAdapter : object {
    private IMvxEventSourceActivity _eventSource;
    protected Activity Activity { get; }
    protected MvxBaseActivityAdapter(IMvxEventSourceActivity eventSource);
    protected Activity get_Activity();
    protected virtual void EventSourceOnSaveInstanceStateCalled(object sender, MvxValueEventArgs`1<Bundle> eventArgs);
    protected virtual void EventSourceOnCreateWillBeCalled(object sender, MvxValueEventArgs`1<Bundle> eventArgs);
    protected virtual void EventSourceOnStopCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnStartCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnStartActivityForResultCalled(object sender, MvxValueEventArgs`1<MvxStartActivityForResultParameters> eventArgs);
    protected virtual void EventSourceOnResumeCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnRestartCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnPauseCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnNewIntentCalled(object sender, MvxValueEventArgs`1<Intent> eventArgs);
    protected virtual void EventSourceOnDisposeCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnDestroyCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnCreateCalled(object sender, MvxValueEventArgs`1<Bundle> eventArgs);
    protected virtual void EventSourceOnActivityResultCalled(object sender, MvxValueEventArgs`1<MvxActivityResultParameters> eventArgs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RegisterAttribute("mvvmcross.platforms.android.views.base.MvxEventSourceActivity")]
public abstract class MvvmCross.Platforms.Android.Views.Base.MvxEventSourceActivity : AppCompatActivity {
    [CompilerGeneratedAttribute]
private EventHandler DisposeCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateWillBeCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Intent>> NewIntentCalled;
    [CompilerGeneratedAttribute]
private EventHandler ResumeCalled;
    [CompilerGeneratedAttribute]
private EventHandler PauseCalled;
    [CompilerGeneratedAttribute]
private EventHandler StartCalled;
    [CompilerGeneratedAttribute]
private EventHandler RestartCalled;
    [CompilerGeneratedAttribute]
private EventHandler StopCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> SaveInstanceStateCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<MvxStartActivityForResultParameters>> StartActivityForResultCalled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<MvxActivityResultParameters>> ActivityResultCalled;
    protected MvxEventSourceActivity(IntPtr javaReference, JniHandleOwnership transfer);
    protected virtual void OnCreate(Bundle savedInstanceState);
    protected virtual void OnDestroy();
    protected virtual void OnNewIntent(Intent intent);
    protected virtual void OnResume();
    protected virtual void OnPause();
    protected virtual void OnStart();
    protected virtual void OnRestart();
    protected virtual void OnStop();
    public virtual void StartActivityForResult(Intent intent, int requestCode);
    protected virtual void OnActivityResult(int requestCode, Result resultCode, Intent data);
    [NullableContextAttribute("1")]
protected virtual void OnSaveInstanceState(Bundle outState);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NewIntentCalled(EventHandler`1<MvxValueEventArgs`1<Intent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NewIntentCalled(EventHandler`1<MvxValueEventArgs`1<Intent>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RestartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RestartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StartActivityForResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxStartActivityForResultParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StartActivityForResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxStartActivityForResultParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActivityResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxActivityResultParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActivityResultCalled(EventHandler`1<MvxValueEventArgs`1<MvxActivityResultParameters>> value);
}
public enum MvvmCross.Platforms.Android.Views.Base.MvxIntentRequestCode : Enum {
    public int value__;
    public static MvxIntentRequestCode PickFromFile;
    public static MvxIntentRequestCode PickFromCamera;
}
public class MvvmCross.Platforms.Android.Views.Base.MvxIntentResultEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RequestCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Result <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Intent <Data>k__BackingField;
    public int RequestCode { get; private set; }
    public Result ResultCode { get; private set; }
    public Intent Data { get; private set; }
    public MvxIntentResultEventArgs(int requestCode, Result resultCode, Intent data);
    [CompilerGeneratedAttribute]
public int get_RequestCode();
    [CompilerGeneratedAttribute]
private void set_RequestCode(int value);
    [CompilerGeneratedAttribute]
public Result get_ResultCode();
    [CompilerGeneratedAttribute]
private void set_ResultCode(Result value);
    [CompilerGeneratedAttribute]
public Intent get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Intent value);
}
public class MvvmCross.Platforms.Android.Views.Base.MvxStartActivityForResultParameters : object {
    [CompilerGeneratedAttribute]
private Intent <Intent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestCode>k__BackingField;
    public Intent Intent { get; private set; }
    public int RequestCode { get; private set; }
    public MvxStartActivityForResultParameters(Intent intent, int requestCode);
    [CompilerGeneratedAttribute]
public Intent get_Intent();
    [CompilerGeneratedAttribute]
private void set_Intent(Intent value);
    [CompilerGeneratedAttribute]
public int get_RequestCode();
    [CompilerGeneratedAttribute]
private void set_RequestCode(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Views.Fragments.EventSource.MvxBaseFragmentAdapter : object {
    private IMvxEventSourceFragment _eventSource;
    [NullableAttribute("2")]
protected Fragment Fragment { get; }
    protected MvxBaseFragmentAdapter(IMvxEventSourceFragment eventSource);
    [NullableContextAttribute("2")]
protected Fragment get_Fragment();
    protected virtual void HandleSaveInstanceStateCalled(object sender, MvxValueEventArgs`1<Bundle> e);
    protected virtual void HandleDetachCalled(object sender, EventArgs e);
    protected virtual void HandleResumeCalled(object sender, EventArgs e);
    protected virtual void HandlePauseCalled(object sender, EventArgs e);
    protected virtual void HandleStopCalled(object sender, EventArgs e);
    protected virtual void HandleStartCalled(object sender, EventArgs e);
    protected virtual void HandleCreateCalled(object sender, MvxValueEventArgs`1<Bundle> e);
    protected virtual void HandleAttachCalled(object sender, MvxValueEventArgs`1<Context> e);
    protected virtual void HandleDisposeCalled(object sender, EventArgs e);
    protected virtual void HandleDestroyViewCalled(object sender, EventArgs e);
    protected virtual void HandleCreateViewCalled(object sender, MvxValueEventArgs`1<MvxCreateViewParameters> e);
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.eventsource.MvxEventSourceDialogFragment")]
public class MvvmCross.Platforms.Android.Views.Fragments.EventSource.MvxEventSourceDialogFragment : DialogFragment {
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Context>> AttachCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateWillBeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> CreateViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler StartCalled;
    [CompilerGeneratedAttribute]
private EventHandler ResumeCalled;
    [CompilerGeneratedAttribute]
private EventHandler PauseCalled;
    [CompilerGeneratedAttribute]
private EventHandler StopCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyCalled;
    [CompilerGeneratedAttribute]
private EventHandler DetachCalled;
    [CompilerGeneratedAttribute]
private EventHandler DisposeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> SaveInstanceStateCalled;
    protected MvxEventSourceDialogFragment(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    public virtual void OnAttach(Context context);
    public virtual void OnCreate(Bundle savedInstanceState);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
    public virtual void OnDestroyView();
    public virtual void OnDestroy();
    public virtual void OnDetach();
    protected virtual void Dispose(bool disposing);
    public virtual void OnSaveInstanceState(Bundle outState);
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.eventsource.MvxEventSourceFragment")]
public class MvvmCross.Platforms.Android.Views.Fragments.EventSource.MvxEventSourceFragment : Fragment {
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Context>> AttachCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateWillBeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> CreateViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler StartCalled;
    [CompilerGeneratedAttribute]
private EventHandler ResumeCalled;
    [CompilerGeneratedAttribute]
private EventHandler PauseCalled;
    [CompilerGeneratedAttribute]
private EventHandler StopCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyCalled;
    [CompilerGeneratedAttribute]
private EventHandler DetachCalled;
    [CompilerGeneratedAttribute]
private EventHandler DisposeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> SaveInstanceStateCalled;
    protected MvxEventSourceFragment(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    public virtual void OnAttach(Context context);
    public virtual void OnCreate(Bundle savedInstanceState);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
    public virtual void OnDestroyView();
    public virtual void OnDestroy();
    public virtual void OnDetach();
    protected virtual void Dispose(bool disposing);
    public virtual void OnSaveInstanceState(Bundle outState);
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.eventsource.MvxEventSourceListFragment")]
public class MvvmCross.Platforms.Android.Views.Fragments.EventSource.MvxEventSourceListFragment : ListFragment {
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Context>> AttachCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateWillBeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> CreateViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler StartCalled;
    [CompilerGeneratedAttribute]
private EventHandler ResumeCalled;
    [CompilerGeneratedAttribute]
private EventHandler PauseCalled;
    [CompilerGeneratedAttribute]
private EventHandler StopCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyCalled;
    [CompilerGeneratedAttribute]
private EventHandler DetachCalled;
    [CompilerGeneratedAttribute]
private EventHandler DisposeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> SaveInstanceStateCalled;
    protected MvxEventSourceListFragment(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    public virtual void OnAttach(Context context);
    public virtual void OnCreate(Bundle savedInstanceState);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
    public virtual void OnDestroyView();
    public virtual void OnDestroy();
    public virtual void OnDetach();
    protected virtual void Dispose(bool disposing);
    public virtual void OnSaveInstanceState(Bundle outState);
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.eventsource.MvxEventSourcePreferenceFragment")]
public abstract class MvvmCross.Platforms.Android.Views.Fragments.EventSource.MvxEventSourcePreferenceFragment : PreferenceFragmentCompat {
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Context>> AttachCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateWillBeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> CreateCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> CreateViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler StartCalled;
    [CompilerGeneratedAttribute]
private EventHandler ResumeCalled;
    [CompilerGeneratedAttribute]
private EventHandler PauseCalled;
    [CompilerGeneratedAttribute]
private EventHandler StopCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyViewCalled;
    [CompilerGeneratedAttribute]
private EventHandler DestroyCalled;
    [CompilerGeneratedAttribute]
private EventHandler DetachCalled;
    [CompilerGeneratedAttribute]
private EventHandler DisposeCalled;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<Bundle>> SaveInstanceStateCalled;
    public MvxEventSourcePreferenceFragment(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    public virtual void OnAttach(Context context);
    public virtual void OnCreate(Bundle savedInstanceState);
    public virtual View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
    public virtual void OnDestroyView();
    public virtual void OnDestroy();
    public virtual void OnDetach();
    protected virtual void Dispose(bool disposing);
    public virtual void OnSaveInstanceState(Bundle outState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Views.Fragments.MvxBindingFragmentAdapter : MvxBaseFragmentAdapter {
    [NullableAttribute("2")]
public IMvxFragmentView FragmentView { get; }
    public MvxBindingFragmentAdapter(IMvxEventSourceFragment eventSource);
    [NullableContextAttribute("2")]
public IMvxFragmentView get_FragmentView();
    [NullableContextAttribute("2")]
protected virtual void HandleCreateCalled(object sender, MvxValueEventArgs`1<Bundle> e);
    private ValueTuple`2<Bundle, MvxViewModelRequest> GetAndroidBundleAndRequest(MvxValueEventArgs`1<Bundle> bundleArgs);
    [NullableContextAttribute("2")]
private static MvxViewModelRequest ReadRequest(MvxViewModelRequest request, string json);
    private static IMvxBundle ReadAndroidBundle(Bundle bundle);
    protected virtual void HandleCreateViewCalled(object sender, MvxValueEventArgs`1<MvxCreateViewParameters> e);
    protected virtual void HandleSaveInstanceStateCalled(object sender, MvxValueEventArgs`1<Bundle> e);
    protected virtual void HandleDestroyViewCalled(object sender, EventArgs e);
    protected virtual void HandleDisposeCalled(object sender, EventArgs e);
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.MvxDialogFragment")]
public abstract class MvvmCross.Platforms.Android.Views.Fragments.MvxDialogFragment : MvxEventSourceDialogFragment {
    [CompilerGeneratedAttribute]
private IMvxBindingContext <BindingContext>k__BackingField;
    private object _dataContext;
    public IMvxBindingContext BindingContext { get; public set; }
    public object DataContext { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public string UniqueImmutableCacheTag { get; }
    protected MvxDialogFragment(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxBindingContext get_BindingContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindingContext(IMvxBindingContext value);
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    public virtual IMvxViewModel get_ViewModel();
    public virtual void set_ViewModel(IMvxViewModel value);
    public virtual void OnViewModelSet();
    public sealed virtual string get_UniqueImmutableCacheTag();
    public virtual void OnCreate(Bundle bundle);
    public virtual void OnDestroy();
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
}
public abstract class MvvmCross.Platforms.Android.Views.Fragments.MvxDialogFragment`1 : MvxDialogFragment {
    public TViewModel ViewModel { get; public set; }
    protected MvxDialogFragment`1(IntPtr javaReference, JniHandleOwnership transfer);
    public sealed virtual TViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(TViewModel value);
    public sealed virtual MvxFluentBindingDescriptionSet`2<IMvxFragmentView`1<TViewModel>, TViewModel> CreateBindingSet();
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.MvxFragment")]
public class MvvmCross.Platforms.Android.Views.Fragments.MvxFragment : MvxEventSourceFragment {
    [CompilerGeneratedAttribute]
private IMvxBindingContext <BindingContext>k__BackingField;
    private object _dataContext;
    public IMvxBindingContext BindingContext { get; public set; }
    public object DataContext { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public string UniqueImmutableCacheTag { get; }
    protected MvxFragment(IntPtr javaReference, JniHandleOwnership transfer);
    public static MvxFragment NewInstance(Bundle bundle);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxBindingContext get_BindingContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindingContext(IMvxBindingContext value);
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    public virtual IMvxViewModel get_ViewModel();
    public virtual void set_ViewModel(IMvxViewModel value);
    public virtual void OnViewModelSet();
    public sealed virtual string get_UniqueImmutableCacheTag();
    public virtual void OnCreate(Bundle savedInstanceState);
    public virtual void OnDestroy();
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
}
public abstract class MvvmCross.Platforms.Android.Views.Fragments.MvxFragment`1 : MvxFragment {
    public TViewModel ViewModel { get; public set; }
    protected MvxFragment`1(IntPtr javaReference, JniHandleOwnership transfer);
    public sealed virtual TViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(TViewModel value);
    public sealed virtual MvxFluentBindingDescriptionSet`2<IMvxFragmentView`1<TViewModel>, TViewModel> CreateBindingSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Views.Fragments.MvxFragmentExtensions : object {
    [ExtensionAttribute]
public static void AddEventListeners(IMvxEventSourceFragment fragment);
    [ExtensionAttribute]
public static void OnCreate(IMvxFragmentView fragmentView, IMvxBundle bundle, MvxViewModelRequest request);
    [ExtensionAttribute]
public static Fragment ToFragment(IMvxFragmentView fragmentView);
    [ExtensionAttribute]
public static void EnsureBindingContextIsSet(IMvxFragmentView fragment, LayoutInflater inflater);
    [ExtensionAttribute]
public static void EnsureBindingContextIsSet(IMvxFragmentView fragment);
    [ExtensionAttribute]
public static TFragment FindFragmentById(MvxActivity activity, int resourceId);
    [ExtensionAttribute]
public static TFragment FindFragmentByTag(MvxActivity activity, string tag);
    private static TFragment SafeCast(Fragment fragment);
    [ExtensionAttribute]
public static void LoadViewModelFrom(IMvxFragmentView view, MvxViewModelRequest request, IMvxBundle savedState);
}
[RegisterAttribute("mvvmcross.platforms.android.views.fragments.MvxPreferenceFragment")]
public abstract class MvvmCross.Platforms.Android.Views.Fragments.MvxPreferenceFragment : MvxEventSourcePreferenceFragment {
    [CompilerGeneratedAttribute]
private IMvxBindingContext <BindingContext>k__BackingField;
    private object _dataContext;
    public IMvxBindingContext BindingContext { get; public set; }
    public object DataContext { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public string UniqueImmutableCacheTag { get; }
    protected MvxPreferenceFragment(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxBindingContext get_BindingContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindingContext(IMvxBindingContext value);
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    public virtual IMvxViewModel get_ViewModel();
    public virtual void set_ViewModel(IMvxViewModel value);
    public virtual void OnViewModelSet();
    public sealed virtual string get_UniqueImmutableCacheTag();
    public virtual void OnCreate(Bundle savedInstanceState);
    public virtual void OnDestroy();
    public virtual void OnStart();
    public virtual void OnResume();
    public virtual void OnPause();
    public virtual void OnStop();
}
public abstract class MvvmCross.Platforms.Android.Views.Fragments.MvxPreferenceFragment`1 : MvxPreferenceFragment {
    public TViewModel ViewModel { get; public set; }
    protected MvxPreferenceFragment`1(IntPtr javaReference, JniHandleOwnership transfer);
    public sealed virtual TViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(TViewModel value);
    public sealed virtual MvxFluentBindingDescriptionSet`2<IMvxFragmentView`1<TViewModel>, TViewModel> CreateBindingSet();
}
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidApplication {
}
[NullableContextAttribute("1")]
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidSharedElements {
    public abstract virtual IDictionary`2<string, View> FetchSharedElementsToAnimate(MvxBasePresentationAttribute attribute, MvxViewModelRequest request);
}
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidView {
}
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidView`1 {
    public abstract virtual MvxFluentBindingDescriptionSet`2<IMvxAndroidView`1<TViewModel>, TViewModel> CreateBindingSet();
}
[NullableContextAttribute("2")]
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidViewModelLoader {
    public abstract virtual IMvxViewModel Load(Intent intent, IMvxBundle savedState);
    public abstract virtual IMvxViewModel Load(Intent intent, IMvxBundle savedState, Type viewModelTypeHint);
}
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidViewModelRequestTranslator {
    public abstract virtual Intent GetIntentFor(MvxViewModelRequest request);
    public abstract virtual ValueTuple`2<Intent, int> GetIntentWithKeyFor(IMvxViewModel existingViewModelToUse, MvxViewModelRequest request);
    public abstract virtual void RemoveSubViewModelWithKey(int key);
}
public interface MvvmCross.Platforms.Android.Views.IMvxAndroidViewsContainer {
}
public interface MvvmCross.Platforms.Android.Views.IMvxChildViewModelOwner {
    public List`1<int> OwnedSubViewModelIndicies { get; }
    public abstract virtual List`1<int> get_OwnedSubViewModelIndicies();
}
public interface MvvmCross.Platforms.Android.Views.IMvxEventSourceFragment {
    [CompilerGeneratedAttribute]
public abstract virtual void add_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AttachCalled(EventHandler`1<MvxValueEventArgs`1<Context>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateWillBeCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateViewCalled(EventHandler`1<MvxValueEventArgs`1<MvxCreateViewParameters>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StartCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResumeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PauseCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StopCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DestroyViewCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DestroyCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DetachCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SaveInstanceStateCalled(EventHandler`1<MvxValueEventArgs`1<Bundle>> value);
}
public interface MvvmCross.Platforms.Android.Views.IMvxFragmentView {
    public string UniqueImmutableCacheTag { get; }
    public abstract virtual string get_UniqueImmutableCacheTag();
}
public interface MvvmCross.Platforms.Android.Views.IMvxFragmentView`1 {
    public abstract virtual MvxFluentBindingDescriptionSet`2<IMvxFragmentView`1<TViewModel>, TViewModel> CreateBindingSet();
}
public interface MvvmCross.Platforms.Android.Views.IMvxMultipleViewModelCache {
    public abstract virtual void Cache(IMvxViewModel toCache, string viewModelTag);
    public abstract virtual IMvxViewModel GetAndClear(Type viewModelType, string viewModelTag);
    public abstract virtual T GetAndClear(string viewModelTag);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Platforms.Android.Views.IMvxSingleViewModelCache {
    public abstract virtual void Cache(IMvxViewModel toCache, Bundle bundle);
    public abstract virtual IMvxViewModel GetAndClear(Bundle bundle);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[RegisterAttribute("mvvmcross.platforms.android.views.MvxActivity")]
public abstract class MvvmCross.Platforms.Android.Views.MvxActivity : MvxEventSourceActivity {
    [CompilerGeneratedAttribute]
private IMvxBindingContext <BindingContext>k__BackingField;
    public object DataContext { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public IMvxBindingContext BindingContext { get; public set; }
    protected MvxActivity(IntPtr javaReference, JniHandleOwnership transfer);
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    public sealed virtual IMvxViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(IMvxViewModel value);
    [NullableContextAttribute("1")]
public sealed virtual void MvxInternalStartActivityForResult(Intent intent, int requestCode);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxBindingContext get_BindingContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindingContext(IMvxBindingContext value);
    public virtual void SetContentView(int layoutResID);
    protected virtual void OnViewModelSet();
    [NullableContextAttribute("1")]
protected virtual Context BaseContextToAttach(Context base);
    protected virtual void AttachBaseContext(Context base);
    protected virtual void OnCreate(Bundle savedInstanceState);
    protected virtual void OnDestroy();
    protected virtual void OnStart();
    protected virtual void OnResume();
    protected virtual void OnPause();
    protected virtual void OnStop();
}
public abstract class MvvmCross.Platforms.Android.Views.MvxActivity`1 : MvxActivity {
    [NullableAttribute("2")]
public TViewModel ViewModel { get; public set; }
    protected MvxActivity`1(IntPtr javaReference, JniHandleOwnership transfer);
    [NullableContextAttribute("2")]
public sealed virtual TViewModel get_ViewModel();
    [NullableContextAttribute("2")]
public sealed virtual void set_ViewModel(TViewModel value);
    [NullableContextAttribute("1")]
public sealed virtual MvxFluentBindingDescriptionSet`2<IMvxAndroidView`1<TViewModel>, TViewModel> CreateBindingSet();
}
public class MvvmCross.Platforms.Android.Views.MvxActivityAdapter : MvxBaseActivityAdapter {
    protected IMvxAndroidView AndroidView { get; }
    public MvxActivityAdapter(IMvxEventSourceActivity eventSource);
    protected IMvxAndroidView get_AndroidView();
    protected virtual void EventSourceOnStopCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnStartCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnStartActivityForResultCalled(object sender, MvxValueEventArgs`1<MvxStartActivityForResultParameters> eventArgs);
    protected virtual void EventSourceOnResumeCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnRestartCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnPauseCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnNewIntentCalled(object sender, MvxValueEventArgs`1<Intent> eventArgs);
    protected virtual void EventSourceOnDestroyCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnCreateCalled(object sender, MvxValueEventArgs`1<Bundle> eventArgs);
    protected virtual void EventSourceOnSaveInstanceStateCalled(object sender, MvxValueEventArgs`1<Bundle> eventArgs);
    protected virtual void EventSourceOnActivityResultCalled(object sender, MvxValueEventArgs`1<MvxActivityResultParameters> eventArgs);
}
public class MvvmCross.Platforms.Android.Views.MvxActivityEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MvxActivityState <ActivityState>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Extras>k__BackingField;
    public MvxActivityState ActivityState { get; }
    public Activity Activity { get; }
    public object Extras { get; }
    public MvxActivityEventArgs(Activity activity, MvxActivityState state, object extras);
    [CompilerGeneratedAttribute]
public MvxActivityState get_ActivityState();
    [CompilerGeneratedAttribute]
public Activity get_Activity();
    [CompilerGeneratedAttribute]
public object get_Extras();
}
public enum MvvmCross.Platforms.Android.Views.MvxActivityState : Enum {
    public int value__;
    public static MvxActivityState OnCreate;
    public static MvxActivityState OnRestart;
    public static MvxActivityState OnStart;
    public static MvxActivityState OnResume;
    public static MvxActivityState OnPause;
    public static MvxActivityState OnStop;
    public static MvxActivityState OnDestroy;
    public static MvxActivityState OnSaveInstanceState;
    public static MvxActivityState OnNewIntent;
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Views.MvxActivityViewExtensions : object {
    [ExtensionAttribute]
public static void AddEventListeners(IMvxEventSourceActivity activity);
    [ExtensionAttribute]
public static void OnViewCreate(IMvxAndroidView androidView, Bundle bundle);
    private static IMvxBundle GetSavedStateFromBundle(Bundle bundle);
    [ExtensionAttribute]
public static void OnViewNewIntent(IMvxAndroidView androidView);
    [ExtensionAttribute]
public static void OnViewDestroy(IMvxAndroidView androidView);
    [NullableContextAttribute("2")]
private static bool IsActivityTearingDown(Activity activity);
    [ExtensionAttribute]
public static void OnViewStart(IMvxAndroidView androidView);
    [ExtensionAttribute]
public static void OnViewRestart(IMvxAndroidView androidView);
    [ExtensionAttribute]
public static void OnViewStop(IMvxAndroidView androidView);
    [ExtensionAttribute]
public static void OnViewResume(IMvxAndroidView androidView);
    [ExtensionAttribute]
public static void OnViewPause(IMvxAndroidView androidView);
    [ExtensionAttribute]
private static void OnLifetimeEvent(IMvxAndroidView androidView, Action`2<IMvxAndroidActivityLifetimeListener, Activity> report);
    [ExtensionAttribute]
public static Activity ToActivity(IMvxAndroidView androidView);
    [ExtensionAttribute]
private static IMvxViewModel LoadViewModel(IMvxAndroidView androidView, IMvxBundle savedState);
}
public abstract class MvvmCross.Platforms.Android.Views.MvxAndroidApplication : Application {
    [CompilerGeneratedAttribute]
private static MvxAndroidApplication <Instance>k__BackingField;
    public static MvxAndroidApplication Instance { get; private set; }
    protected MvxAndroidApplication(IntPtr javaReference, JniHandleOwnership transfer);
    [CompilerGeneratedAttribute]
public static MvxAndroidApplication get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(MvxAndroidApplication value);
    protected abstract virtual void RegisterSetup();
    public virtual void OnCreate();
    protected virtual void RunAppStart();
}
public abstract class MvvmCross.Platforms.Android.Views.MvxAndroidApplication`2 : MvxAndroidApplication {
    protected MvxAndroidApplication`2(IntPtr javaReference, JniHandleOwnership transfer);
    protected virtual void RegisterSetup();
}
public class MvvmCross.Platforms.Android.Views.MvxAndroidLifetimeMonitor : MvxLifetimeMonitor {
    private int _createdActivityCount;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxActivityEventArgs> ActivityChanged;
    public virtual void OnCreate(Activity activity, Bundle eventArgs);
    public virtual void OnStart(Activity activity);
    public virtual void OnRestart(Activity activity);
    public virtual void OnResume(Activity activity);
    public virtual void OnPause(Activity activity);
    public virtual void OnStop(Activity activity);
    public virtual void OnDestroy(Activity activity);
    public virtual void OnViewNewIntent(Activity activity);
    public virtual void OnSaveInstanceState(Activity activity, Bundle eventArgs);
    protected void FireActivityChange(Activity activity, MvxActivityState state, object extras);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActivityChanged(EventHandler`1<MvxActivityEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActivityChanged(EventHandler`1<MvxActivityEventArgs> value);
}
public class MvvmCross.Platforms.Android.Views.MvxAndroidMainThreadDispatcher : MvxMainThreadAsyncDispatcher {
    public bool IsOnMainThread { get; }
    public virtual bool get_IsOnMainThread();
    public virtual bool RequestMainThreadAction(Action action, bool maskExceptions);
}
public class MvvmCross.Platforms.Android.Views.MvxAndroidViewDispatcher : MvxAndroidMainThreadDispatcher {
    private IMvxAndroidViewPresenter _presenter;
    public MvxAndroidViewDispatcher(IMvxAndroidViewPresenter presenter);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.Android.Views.MvxAndroidViewDispatcher/<ShowViewModel>d__2")]
public sealed virtual Task`1<bool> ShowViewModel(MvxViewModelRequest request);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.Android.Views.MvxAndroidViewDispatcher/<ChangePresentation>d__3")]
public sealed virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Platforms.Android.Views.MvxAndroidViewsContainer : MvxViewsContainer {
    private static string ExtrasKey;
    private static string SubViewModelKey;
    private Context _applicationContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ILogger`1<MvxAndroidViewsContainer> _logger;
    public MvxAndroidViewsContainer(Context applicationContext);
    [NullableContextAttribute("2")]
public virtual IMvxViewModel Load(Intent intent, IMvxBundle savedState);
    [NullableContextAttribute("2")]
public virtual IMvxViewModel Load(Intent intent, IMvxBundle savedState, Type viewModelTypeHint);
    [NullableContextAttribute("2")]
protected virtual IMvxViewModel DirectLoad(IMvxBundle savedState, Type viewModelTypeHint);
    [NullableContextAttribute("2")]
protected virtual IMvxViewModel CreateViewModelFromIntent(Intent intent, IMvxBundle savedState);
    [NullableContextAttribute("2")]
protected virtual IMvxViewModel ViewModelFromRequest(MvxViewModelRequest viewModelRequest, IMvxBundle savedState);
    protected virtual bool TryGetEmbeddedViewModel(Intent intent, IMvxViewModel& mvxViewModel);
    public virtual Intent GetIntentFor(MvxViewModelRequest request);
    protected virtual void AdjustIntentForPresentation(Intent intent, MvxViewModelRequest request);
    public virtual ValueTuple`2<Intent, int> GetIntentWithKeyFor(IMvxViewModel existingViewModelToUse, MvxViewModelRequest request);
    public sealed virtual void RemoveSubViewModelWithKey(int key);
}
public class MvvmCross.Platforms.Android.Views.MvxBindingActivityAdapter : MvxBaseActivityAdapter {
    private IMvxAndroidBindingContext BindingContext { get; }
    public MvxBindingActivityAdapter(IMvxEventSourceActivity eventSource);
    private IMvxAndroidBindingContext get_BindingContext();
    protected virtual void EventSourceOnCreateWillBeCalled(object sender, MvxValueEventArgs`1<Bundle> MvxValueEventArgs);
    protected virtual void EventSourceOnDestroyCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnDisposeCalled(object sender, EventArgs eventArgs);
}
public class MvvmCross.Platforms.Android.Views.MvxChildViewModelOwnerAdapter : MvxBaseActivityAdapter {
    protected IMvxChildViewModelOwner ChildOwner { get; }
    public MvxChildViewModelOwnerAdapter(IMvxEventSourceActivity eventSource);
    protected IMvxChildViewModelOwner get_ChildOwner();
    protected virtual void EventSourceOnDestroyCalled(object sender, EventArgs eventArgs);
    protected virtual void EventSourceOnDisposeCalled(object sender, EventArgs eventArgs);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Views.MvxChildViewModelOwnerExtensions : object {
    [ExtensionAttribute]
public static Intent CreateIntentFor(IMvxAndroidView view, object parameterObject);
    [ExtensionAttribute]
public static Intent CreateIntentFor(IMvxAndroidView view, IDictionary`2<string, string> parameterValues);
    [ExtensionAttribute]
public static Intent CreateIntentFor(IMvxAndroidView view, MvxViewModelRequest request);
    [ExtensionAttribute]
public static Intent CreateIntentFor(IMvxChildViewModelOwner view, IMvxViewModel subViewModel);
    [ExtensionAttribute]
public static void ClearOwnedSubIndicies(IMvxChildViewModelOwner view);
}
public class MvvmCross.Platforms.Android.Views.MvxCreateViewParameters : object {
    [CompilerGeneratedAttribute]
private LayoutInflater <Inflater>k__BackingField;
    [CompilerGeneratedAttribute]
private ViewGroup <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private Bundle <SavedInstanceState>k__BackingField;
    public LayoutInflater Inflater { get; private set; }
    public ViewGroup Container { get; private set; }
    public Bundle SavedInstanceState { get; private set; }
    public MvxCreateViewParameters(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState);
    [CompilerGeneratedAttribute]
public LayoutInflater get_Inflater();
    [CompilerGeneratedAttribute]
private void set_Inflater(LayoutInflater value);
    [CompilerGeneratedAttribute]
public ViewGroup get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(ViewGroup value);
    [CompilerGeneratedAttribute]
public Bundle get_SavedInstanceState();
    [CompilerGeneratedAttribute]
private void set_SavedInstanceState(Bundle value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RegisterAttribute("mvvmcross.platforms.android.MvxCurrentTopActivity")]
public class MvvmCross.Platforms.Android.Views.MvxCurrentTopActivity : Object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<Activity> _lastSeenActivity;
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    [NullableAttribute("2")]
public Activity Activity { get; }
    public static bool Initialized { get; public set; }
    [NullableContextAttribute("2")]
public sealed virtual Activity get_Activity();
    [CompilerGeneratedAttribute]
public static bool get_Initialized();
    [CompilerGeneratedAttribute]
public static void set_Initialized(bool value);
    public sealed virtual void OnActivityCreated(Activity activity, Bundle savedInstanceState);
    public sealed virtual void OnActivityPaused(Activity activity);
    public sealed virtual void OnActivityResumed(Activity activity);
    public sealed virtual void OnActivityDestroyed(Activity activity);
    public sealed virtual void OnActivitySaveInstanceState(Activity activity, Bundle outState);
    public sealed virtual void OnActivityStarted(Activity activity);
    public sealed virtual void OnActivityStopped(Activity activity);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Views.MvxFragmentExtensions : object {
    [ExtensionAttribute]
public static Type FindAssociatedViewModelType(IMvxFragmentView fragmentView, Type fragmentActivityParentType);
    [ExtensionAttribute]
public static IMvxViewModel LoadViewModel(IMvxFragmentView fragmentView, IMvxBundle savedState, Type fragmentParentActivityType, MvxViewModelRequest request);
    public static void RunViewModelLifecycle(IMvxViewModel viewModel, IMvxBundle savedState, MvxViewModelRequest request);
    [ExtensionAttribute]
public static string FragmentJavaName(Type fragmentType);
}
public class MvvmCross.Platforms.Android.Views.MvxMultipleViewModelCache : object {
    private Lazy`1<ConcurrentDictionary`2<CachedViewModelType, IMvxViewModel>> _lazyCurrentViewModels;
    private ConcurrentDictionary`2<CachedViewModelType, IMvxViewModel> CurrentViewModels { get; }
    private ConcurrentDictionary`2<CachedViewModelType, IMvxViewModel> get_CurrentViewModels();
    public sealed virtual void Cache(IMvxViewModel toCache, string viewModelTag);
    public sealed virtual IMvxViewModel GetAndClear(Type viewModelType, string viewModelTag);
    public sealed virtual T GetAndClear(string viewModelTag);
}
public class MvvmCross.Platforms.Android.Views.MvxSavedStateConverter : object {
    private static string ExtrasKey;
    public sealed virtual IMvxBundle Read(Bundle bundle);
    public sealed virtual void Write(Bundle bundle, IMvxBundle savedState);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.Views.MvxSharedElementsExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetSharedElementTransitionNames(Bundle bundle);
    [ExtensionAttribute]
public static void SetSharedElementsByTag(Bundle bundle, View view);
    [ExtensionAttribute]
public static void SetSharedElementsById(Bundle bundle, View view);
    [ExtensionAttribute]
public static void SetTransitionNameSupport(View view, string transitionName);
    [ExtensionAttribute]
public static string GetTransitionNameSupport(View view);
}
public class MvvmCross.Platforms.Android.Views.MvxSimpleLayoutInflaterHolder : object {
    [CompilerGeneratedAttribute]
private LayoutInflater <LayoutInflater>k__BackingField;
    public LayoutInflater LayoutInflater { get; private set; }
    public MvxSimpleLayoutInflaterHolder(LayoutInflater layoutInflater);
    [CompilerGeneratedAttribute]
public sealed virtual LayoutInflater get_LayoutInflater();
    [CompilerGeneratedAttribute]
private void set_LayoutInflater(LayoutInflater value);
}
public class MvvmCross.Platforms.Android.Views.MvxSingleViewModelCache : object {
    [NullableAttribute("1")]
private static string BundleCacheKey;
    private int _counter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private WeakReference`1<IMvxViewModel> _currentViewModel;
    [NullableContextAttribute("1")]
public sealed virtual void Cache(IMvxViewModel toCache, Bundle bundle);
    [NullableContextAttribute("2")]
public sealed virtual IMvxViewModel GetAndClear(Bundle bundle);
}
[RegisterAttribute("mvvmcross.platforms.android.views.MvxStartActivity")]
public abstract class MvvmCross.Platforms.Android.Views.MvxStartActivity : MvxActivity {
    protected static int NoContent;
    private int _resourceId;
    private Bundle _bundle;
    public MvxNullViewModel ViewModel { get; public set; }
    protected MvxStartActivity(int resourceId);
    protected MvxStartActivity(IntPtr javaReference, JniHandleOwnership transfer);
    public MvxNullViewModel get_ViewModel();
    public void set_ViewModel(MvxNullViewModel value);
    protected virtual void RequestWindowFeatures();
    protected virtual void OnCreate(Bundle savedInstanceState);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.Android.Views.MvxStartActivity/<OnResume>d__10")]
protected virtual void OnResume();
    [AsyncStateMachineAttribute("MvvmCross.Platforms.Android.Views.MvxStartActivity/<RunAppStartAsync>d__11")]
protected virtual Task RunAppStartAsync(Bundle bundle);
    protected virtual object GetAppStartHint(object hint);
    protected virtual void RegisterSetup();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
}
[RegisterAttribute("mvvmcross.platforms.android.views.MvxTabsFragmentActivity")]
public abstract class MvvmCross.Platforms.Android.Views.MvxTabsFragmentActivity : MvxActivity {
    private static string SavedTabIndexStateKey;
    private Dictionary`2<string, TabInfo> _lookup;
    private int _layoutId;
    private TabHost _tabHost;
    private TabInfo _currentTab;
    private int _tabContentId;
    protected MvxTabsFragmentActivity(int layoutId, int tabContentId);
    protected virtual void OnCreate(Bundle savedInstanceState);
    public virtual void SetContentView(int layoutResId);
    protected virtual void OnSaveInstanceState(Bundle outState);
    private void InitializeTabHost(Bundle args);
    protected abstract virtual void AddTabs(Bundle args);
    protected void AddTab(string tagAndSpecName, string tabName, Bundle args, IMvxViewModel viewModel);
    protected void AddTab(Bundle args, IMvxViewModel viewModel, TabSpec tabSpec);
    private static void AddTab(MvxTabsFragmentActivity activity, TabHost tabHost, TabSpec tabSpec, TabInfo tabInfo);
    public virtual void OnTabChanged(string tag);
    protected virtual void FixupDataContext(TabInfo newTab);
    protected virtual string FragmentJavaName(Type fragmentType);
    public virtual void OnTabFragmentChanging(string tag, FragmentTransaction transaction);
}
public class MvvmCross.Platforms.Android.Views.MvxTranslatedIntent : object {
    [CompilerGeneratedAttribute]
private TranslationResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxViewModel <ExistingViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxViewModelRequest <ViewModelRequest>k__BackingField;
    public TranslationResult Result { get; private set; }
    public IMvxViewModel ExistingViewModel { get; private set; }
    public MvxViewModelRequest ViewModelRequest { get; private set; }
    public MvxTranslatedIntent(MvxViewModelRequest viewModelRequest);
    public MvxTranslatedIntent(IMvxViewModel existingViewModel);
    [CompilerGeneratedAttribute]
public TranslationResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TranslationResult value);
    [CompilerGeneratedAttribute]
public IMvxViewModel get_ExistingViewModel();
    [CompilerGeneratedAttribute]
private void set_ExistingViewModel(IMvxViewModel value);
    [CompilerGeneratedAttribute]
public MvxViewModelRequest get_ViewModelRequest();
    [CompilerGeneratedAttribute]
private void set_ViewModelRequest(MvxViewModelRequest value);
}
[RegisterAttribute("mvvmcross.platforms.android.views.viewpager.MvxCachingFragmentPagerAdapter")]
public abstract class MvvmCross.Platforms.Android.Views.ViewPager.MvxCachingFragmentPagerAdapter : PagerAdapter {
    private Fragment _currentPrimaryItem;
    private FragmentTransaction _curTransaction;
    private FragmentManager _fragmentManager;
    private List`1<Fragment> _fragments;
    private List`1<string> _savedFragmentTags;
    private List`1<SavedState> _savedState;
    protected FragmentFactory FragmentFactory { get; }
    protected MvxCachingFragmentPagerAdapter(IntPtr javaReference, JniHandleOwnership transfer);
    protected MvxCachingFragmentPagerAdapter(FragmentManager fragmentManager);
    protected FragmentFactory get_FragmentFactory();
    public abstract virtual Fragment GetItem(int position, SavedState fragmentSavedState);
    public virtual void DestroyItem(ViewGroup container, int position, Object objectValue);
    public virtual void FinishUpdate(ViewGroup container);
    public virtual Object InstantiateItem(ViewGroup container, int position);
    public virtual bool IsViewFromObject(View view, Object objectValue);
    public virtual void RestoreState(IParcelable state, ClassLoader loader);
    public virtual IParcelable SaveState();
    public virtual void SetPrimaryItem(ViewGroup container, int position, Object objectValue);
    protected virtual string GetTag(int position);
    public virtual void StartUpdate(ViewGroup container);
}
[RegisterAttribute("mvvmcross.platforms.android.views.viewpager.MvxCachingFragmentStatePagerAdapter")]
public class MvvmCross.Platforms.Android.Views.ViewPager.MvxCachingFragmentStatePagerAdapter : MvxCachingFragmentPagerAdapter {
    private Context _context;
    private Type _activityType;
    [CompilerGeneratedAttribute]
private List`1<MvxViewPagerFragmentInfo> <FragmentsInfo>k__BackingField;
    public List`1<MvxViewPagerFragmentInfo> FragmentsInfo { get; }
    public int Count { get; }
    protected MvxCachingFragmentStatePagerAdapter(IntPtr javaReference, JniHandleOwnership transfer);
    public MvxCachingFragmentStatePagerAdapter(Context context, FragmentManager fragmentManager, List`1<MvxViewPagerFragmentInfo> fragmentsInfo);
    [CompilerGeneratedAttribute]
public List`1<MvxViewPagerFragmentInfo> get_FragmentsInfo();
    public virtual int get_Count();
    public virtual Fragment GetItem(int position, SavedState fragmentSavedState);
    public virtual int GetItemPosition(Object object);
    public virtual ICharSequence GetPageTitleFormatted(int position);
    protected virtual string GetTag(int position);
    private static IMvxViewModel GetViewModel(MvxViewPagerFragmentInfo fragmentInfo);
    private static Bundle GetArguments(MvxViewPagerFragmentInfo fragmentInfo);
}
public class MvvmCross.Platforms.Android.Views.ViewPager.MvxViewPagerFragmentInfo : object {
    [CompilerGeneratedAttribute]
private Type <FragmentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxViewModelRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Fragment <CachedFragment>k__BackingField;
    public Type FragmentType { get; }
    public string Tag { get; }
    public string Title { get; }
    public MvxViewModelRequest Request { get; }
    public Fragment CachedFragment { get; public set; }
    public MvxViewPagerFragmentInfo(string title, string tag, Type fragmentType, MvxViewModelRequest request);
    [CompilerGeneratedAttribute]
public Type get_FragmentType();
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public MvxViewModelRequest get_Request();
    [CompilerGeneratedAttribute]
public Fragment get_CachedFragment();
    [CompilerGeneratedAttribute]
public void set_CachedFragment(Fragment value);
}
public class MvvmCross.Platforms.Android.WeakSubscription.MvxAndroidTargetEventSubscription`2 : MvxWeakEventSubscription`2<TSource, TEventArgs> {
    public MvxAndroidTargetEventSubscription`2(TSource source, string sourceEventName, EventHandler`1<TEventArgs> targetEventHandler);
    public MvxAndroidTargetEventSubscription`2(TSource source, EventInfo sourceEventInfo, EventHandler`1<TEventArgs> targetEventHandler);
    protected virtual object GetTargetObject();
    protected virtual Delegate CreateEventHandler();
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.Android.WeakSubscription.MvxAndroidWeakSubscriptionExtensions : object {
    [ExtensionAttribute]
public static MvxJavaEventSubscription`1<TSource> WeakSubscribe(TSource source, string eventName, EventHandler eventHandler);
    [ExtensionAttribute]
public static MvxAndroidTargetEventSubscription`2<TSource, TEventArgs> WeakSubscribe(TSource source, string eventName, EventHandler`1<TEventArgs> eventHandler);
}
public class MvvmCross.Platforms.Android.WeakSubscription.MvxJavaEventSubscription`1 : MvxWeakEventSubscription`1<TSource> {
    public MvxJavaEventSubscription`1(TSource source, string sourceEventName, EventHandler targetEventHandler);
    public MvxJavaEventSubscription`1(TSource source, EventInfo sourceEventInfo, EventHandler targetEventHandler);
    protected virtual object GetTargetObject();
    protected virtual Delegate CreateEventHandler();
}
public interface MvvmCross.Plugin.IMvxConfigurablePlugin {
    [NullableContextAttribute("1")]
public abstract virtual void Configure(IMvxPluginConfiguration configuration);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Plugin.IMvxPlugin {
    public abstract virtual void Load(IMvxIoCProvider provider);
}
public interface MvvmCross.Plugin.IMvxPluginConfiguration {
}
[NullableContextAttribute("1")]
public interface MvvmCross.Plugin.IMvxPluginManager {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Type, IMvxPluginConfiguration> ConfigurationSource { get; }
    public IEnumerable`1<Type> LoadedPlugins { get; }
    public abstract virtual Func`2<Type, IMvxPluginConfiguration> get_ConfigurationSource();
    public abstract virtual IEnumerable`1<Type> get_LoadedPlugins();
    public abstract virtual bool IsPluginLoaded(Type type);
    [NullableContextAttribute("0")]
public abstract virtual bool IsPluginLoaded();
    public abstract virtual void EnsurePluginLoaded(Type type, bool forceLoad);
    [NullableContextAttribute("0")]
public abstract virtual void EnsurePluginLoaded(bool forceLoad);
    public abstract virtual bool TryEnsurePluginLoaded(Type type, bool forceLoad);
    [NullableContextAttribute("0")]
public abstract virtual bool TryEnsurePluginLoaded(bool forceLoad);
}
[AttributeUsageAttribute("4")]
public class MvvmCross.Plugin.MvxPluginAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Plugin.MvxPluginManager : object {
    private IMvxIoCProvider _provider;
    private object _lockObject;
    private HashSet`1<Type> _loadedPlugins;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Type, IMvxPluginConfiguration> <ConfigurationSource>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Type, IMvxPluginConfiguration> ConfigurationSource { get; }
    public IEnumerable`1<Type> LoadedPlugins { get; }
    public MvxPluginManager(IMvxIoCProvider provider, Func`2<Type, IMvxPluginConfiguration> configurationSource);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, IMvxPluginConfiguration> get_ConfigurationSource();
    public sealed virtual IEnumerable`1<Type> get_LoadedPlugins();
    [NullableContextAttribute("0")]
public sealed virtual void EnsurePluginLoaded(bool forceLoad);
    public virtual void EnsurePluginLoaded(Type type, bool forceLoad);
    protected IMvxPluginConfiguration ConfigurationFor(Type toLoad);
    [NullableContextAttribute("0")]
public sealed virtual bool IsPluginLoaded();
    public sealed virtual bool IsPluginLoaded(Type type);
    [NullableContextAttribute("0")]
public sealed virtual bool TryEnsurePluginLoaded(bool forceLoad);
    public sealed virtual bool TryEnsurePluginLoaded(Type type, bool forceLoad);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Presenters.Attributes.IMvxPresentationAttribute {
    public Type ViewModelType { get; public set; }
    public Type ViewType { get; public set; }
    public abstract virtual Type get_ViewModelType();
    public abstract virtual void set_ViewModelType(Type value);
    public abstract virtual Type get_ViewType();
    public abstract virtual void set_ViewType(Type value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public abstract class MvvmCross.Presenters.Attributes.MvxBasePresentationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ViewType>k__BackingField;
    public Type ViewModelType { get; public set; }
    public Type ViewType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ViewModelType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewModelType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ViewType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewType(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxClosePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private IMvxViewModel <ViewModelToClose>k__BackingField;
    public IMvxViewModel ViewModelToClose { get; }
    public MvxClosePresentationHint(IMvxViewModel viewModelToClose);
    public MvxClosePresentationHint(IMvxViewModel viewModelToClose, MvxBundle body);
    public MvxClosePresentationHint(IMvxViewModel viewModelToClose, IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public IMvxViewModel get_ViewModelToClose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPagePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private Type <ViewModel>k__BackingField;
    public Type ViewModel { get; }
    public MvxPagePresentationHint(Type viewModel);
    public MvxPagePresentationHint(Type viewModel, MvxBundle body);
    public MvxPagePresentationHint(Type viewModel, IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public Type get_ViewModel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPopPresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private Type <ViewModelToPopTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    public Type ViewModelToPopTo { get; }
    public bool Animated { get; public set; }
    public MvxPopPresentationHint(Type viewModelToPopTo, bool animated);
    public MvxPopPresentationHint(MvxBundle body, Type viewModelToPopTo, bool animated);
    public MvxPopPresentationHint(IDictionary`2<string, string> hints, Type viewModelToPopTo, bool animated);
    [CompilerGeneratedAttribute]
public Type get_ViewModelToPopTo();
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPopRecursivePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private int <LevelsDeep>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    public int LevelsDeep { get; }
    public bool Animated { get; public set; }
    public MvxPopRecursivePresentationHint(int levelsDeep, bool animated);
    public MvxPopRecursivePresentationHint(MvxBundle body, int levelsDeep, bool animated);
    public MvxPopRecursivePresentationHint(IDictionary`2<string, string> hints, int levelsDeep, bool animated);
    [CompilerGeneratedAttribute]
public int get_LevelsDeep();
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPopToRootPresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    public bool Animated { get; public set; }
    public MvxPopToRootPresentationHint(bool animated);
    public MvxPopToRootPresentationHint(MvxBundle body, bool animated);
    public MvxPopToRootPresentationHint(IDictionary`2<string, string> hints, bool animated);
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxRemovePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private Type <ViewModelToRemove>k__BackingField;
    public Type ViewModelToRemove { get; }
    public MvxRemovePresentationHint(Type viewModelToRemove);
    public MvxRemovePresentationHint(Type viewModelToRemove, MvxBundle body);
    public MvxRemovePresentationHint(Type viewModelToRemove, IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public Type get_ViewModelToRemove();
}
[NullableContextAttribute("2")]
public interface MvvmCross.Presenters.IMvxAttributeViewPresenter {
    public IMvxViewModelTypeFinder ViewModelTypeFinder { get; }
    public IMvxViewsContainer ViewsContainer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<Type, MvxPresentationAttributeAction> AttributeTypesToActionsDictionary { get; }
    public abstract virtual IMvxViewModelTypeFinder get_ViewModelTypeFinder();
    public abstract virtual IMvxViewsContainer get_ViewsContainer();
    public abstract virtual IDictionary`2<Type, MvxPresentationAttributeAction> get_AttributeTypesToActionsDictionary();
    public abstract virtual void RegisterAttributeTypes();
    [NullableContextAttribute("1")]
public abstract virtual MvxBasePresentationAttribute GetPresentationAttribute(MvxViewModelRequest request);
    [NullableContextAttribute("1")]
public abstract virtual MvxBasePresentationAttribute CreatePresentationAttribute(Type viewModelType, Type viewType);
    [NullableContextAttribute("1")]
public abstract virtual MvxBasePresentationAttribute GetOverridePresentationAttribute(MvxViewModelRequest request, Type viewType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Presenters.IMvxOverridePresentationAttribute {
    public abstract virtual MvxBasePresentationAttribute PresentationAttribute(MvxViewModelRequest request);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Presenters.IMvxViewPresenter {
    public abstract virtual Task`1<bool> Show(MvxViewModelRequest request);
    public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    public abstract virtual void AddPresentationHintHandler(Func`2<THint, Task`1<bool>> action);
    public abstract virtual Task`1<bool> Close(IMvxViewModel viewModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Presenters.MvxAttributeViewPresenter : MvxViewPresenter {
    private Lazy`1<IMvxViewModelTypeFinder> _viewModelTypeFinder;
    private Lazy`1<IMvxViewsContainer> _viewsContainer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<Type, MvxPresentationAttributeAction> _attributeTypesActionsDictionary;
    public IMvxViewModelTypeFinder ViewModelTypeFinder { get; }
    public IMvxViewsContainer ViewsContainer { get; }
    public IDictionary`2<Type, MvxPresentationAttributeAction> AttributeTypesToActionsDictionary { get; }
    public virtual IMvxViewModelTypeFinder get_ViewModelTypeFinder();
    public virtual IMvxViewsContainer get_ViewsContainer();
    public virtual IDictionary`2<Type, MvxPresentationAttributeAction> get_AttributeTypesToActionsDictionary();
    public abstract virtual void RegisterAttributeTypes();
    public abstract virtual MvxBasePresentationAttribute CreatePresentationAttribute(Type viewModelType, Type viewType);
    public virtual object CreateOverridePresentationAttributeViewInstance(Type viewType);
    public virtual MvxBasePresentationAttribute GetOverridePresentationAttribute(MvxViewModelRequest request, Type viewType);
    public virtual MvxBasePresentationAttribute GetPresentationAttribute(MvxViewModelRequest request);
    protected virtual MvxPresentationAttributeAction GetPresentationAttributeAction(MvxViewModelRequest request, MvxBasePresentationAttribute& attribute);
    [AsyncStateMachineAttribute("MvvmCross.Presenters.MvxAttributeViewPresenter/<ChangePresentation>d__15")]
public virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    public virtual Task`1<bool> Close(IMvxViewModel viewModel);
    public virtual Task`1<bool> Show(MvxViewModelRequest request);
}
public class MvvmCross.Presenters.MvxPresentationAttributeAction : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> <ShowAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> <CloseAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> ShowAction { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> CloseAction { get; public set; }
    [CompilerGeneratedAttribute]
public Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> get_ShowAction();
    [CompilerGeneratedAttribute]
public void set_ShowAction(Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> get_CloseAction();
    [CompilerGeneratedAttribute]
public void set_CloseAction(Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Presenters.MvxPresentationAttributeExtensions : object {
    [ExtensionAttribute]
public static bool HasBasePresentationAttribute(Type candidateType);
    [ExtensionAttribute]
public static IEnumerable`1<MvxBasePresentationAttribute> GetBasePresentationAttributes(Type fromViewType);
    [ExtensionAttribute]
public static MvxBasePresentationAttribute GetBasePresentationAttribute(Type fromViewType);
    [ExtensionAttribute]
public static Type GetViewModelType(Type viewType);
    [ExtensionAttribute]
public static void Register(IDictionary`2<Type, MvxPresentationAttributeAction> attributeTypesToActionsDictionary, Func`4<Type, TMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> showAction, Func`3<IMvxViewModel, TMvxPresentationAttribute, Task`1<bool>> closeAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Presenters.MvxViewPresenter : object {
    private Dictionary`2<Type, Func`2<MvxPresentationHint, Task`1<bool>>> _presentationHintHandlers;
    public sealed virtual void AddPresentationHintHandler(Func`2<THint, Task`1<bool>> action);
    protected Task`1<bool> HandlePresentationChange(MvxPresentationHint hint);
    public abstract virtual Task`1<bool> Show(MvxViewModelRequest request);
    public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    public abstract virtual Task`1<bool> Close(IMvxViewModel viewModel);
}
[AttributeUsageAttribute("6141")]
public class MvvmCross.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
}
[GeneratedCodeAttribute("Xamarin.Android.Build.Tasks", "13.1.99.94")]
public class MvvmCross.Resource : object {
    private static Resource();
}
[NullableContextAttribute("1")]
public interface MvvmCross.UI.IMvxNativeColor {
    public abstract virtual object ToNative(Color color);
}
[NullableContextAttribute("1")]
public interface MvvmCross.UI.IMvxNativeVisibility {
    public abstract virtual object ToNative(MvxVisibility visibility);
}
public enum MvvmCross.UI.MvxVisibility : Enum {
    public byte value__;
    public static MvxVisibility Visible;
    public static MvxVisibility Collapsed;
    public static MvxVisibility Hidden;
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxApplication {
    public abstract virtual void LoadPlugins(IMvxPluginManager pluginManager);
    public abstract virtual void Initialize();
    public abstract virtual Task Startup();
    public abstract virtual void Reset();
}
public interface MvvmCross.ViewModels.IMvxApplication`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<THint> Startup(THint hint);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxAppStart {
    public bool IsStarted { get; }
    [NullableContextAttribute("2")]
public abstract virtual void Start(object hint);
    public abstract virtual Task StartAsync(object hint);
    public abstract virtual bool get_IsStarted();
    public abstract virtual void ResetStart();
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxBundle {
    public IDictionary`2<string, string> Data { get; }
    public abstract virtual IDictionary`2<string, string> get_Data();
    public abstract virtual void Write(object toStore);
    public abstract virtual T Read();
    public abstract virtual object Read(Type type);
    public abstract virtual IEnumerable`1<object> CreateArgumentList(IEnumerable`1<ParameterInfo> requiredParameters, string debugText);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxChildViewModelCache {
    public abstract virtual int Cache(IMvxViewModel viewModel);
    [NullableContextAttribute("2")]
public abstract virtual IMvxViewModel Get(int index);
    public abstract virtual IMvxViewModel Get(Type viewModelType);
    public abstract virtual void Remove(int index);
    public abstract virtual void Remove(Type viewModelType);
    public abstract virtual bool Exists(Type viewModelType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxInpcInterceptor {
    public abstract virtual MvxInpcInterceptionResult Intercept(IMvxNotifyPropertyChanged sender, PropertyChangedEventArgs args);
    public abstract virtual MvxInpcInterceptionResult Intercept(IMvxNotifyPropertyChanged sender, PropertyChangingEventArgs args);
}
[NullableContextAttribute("2")]
public interface MvvmCross.ViewModels.IMvxInteraction {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Requested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Requested(EventHandler value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.ViewModels.IMvxInteraction`1 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxNameMapping {
    public abstract virtual string Map(string inputName);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxNavigationSerializer {
    public IMvxTextSerializer Serializer { get; }
    public abstract virtual IMvxTextSerializer get_Serializer();
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxNotifyPropertyChanged {
    public abstract virtual bool ShouldAlwaysRaiseInpcOnUserInterfaceThread();
    public abstract virtual void ShouldAlwaysRaiseInpcOnUserInterfaceThread(bool value);
    public abstract virtual bool ShouldRaisePropertyChanging();
    public abstract virtual void ShouldRaisePropertyChanging(bool value);
    public abstract virtual bool RaisePropertyChanging(T newValue, Expression`1<Func`1<T>> propertyExpression);
    public abstract virtual bool RaisePropertyChanging(T newValue, string whichProperty);
    public abstract virtual bool RaisePropertyChanging(MvxPropertyChangingEventArgs`1<T> changingArgs);
    public abstract virtual Task RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    public abstract virtual Task RaisePropertyChanged(string whichProperty);
    public abstract virtual Task RaisePropertyChanged(PropertyChangedEventArgs changedArgs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxTypeFinder {
    public abstract virtual Type FindTypeOrNull(Type candidateType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxTypeToTypeLookupBuilder {
    public abstract virtual IDictionary`2<Type, Type> Build(IEnumerable`1<Assembly> sourceAssemblies);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModel {
    [NullableAttribute("2")]
public MvxNotifyTask InitializeTask { get; public set; }
    public abstract virtual void ViewCreated();
    public abstract virtual void ViewAppearing();
    public abstract virtual void ViewAppeared();
    public abstract virtual void ViewDisappearing();
    public abstract virtual void ViewDisappeared();
    public abstract virtual void ViewDestroy(bool viewFinishing);
    public abstract virtual void Init(IMvxBundle parameters);
    public abstract virtual void ReloadState(IMvxBundle state);
    public abstract virtual void Start();
    public abstract virtual void SaveState(IMvxBundle state);
    public abstract virtual void Prepare();
    public abstract virtual Task Initialize();
    [NullableContextAttribute("2")]
public abstract virtual MvxNotifyTask get_InitializeTask();
    [NullableContextAttribute("2")]
public abstract virtual void set_InitializeTask(MvxNotifyTask value);
}
public interface MvvmCross.ViewModels.IMvxViewModel`1 {
    [NullableContextAttribute("1")]
public abstract virtual void Prepare(TParameter parameter);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelByNameLookup {
    public abstract virtual bool TryLookupByName(string name, Type& viewModelType);
    public abstract virtual bool TryLookupByFullName(string name, Type& viewModelType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelByNameRegistry {
    public abstract virtual void Add(Type viewModelType);
    [NullableContextAttribute("0")]
public abstract virtual void Add();
    public abstract virtual void AddAll(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelLoader {
    public abstract virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, TParameter param, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel ReloadViewModel(IMvxViewModel viewModel, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel ReloadViewModel(IMvxViewModel`1<TParameter> viewModel, TParameter param, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelLocator {
    [NullableContextAttribute("2")]
public abstract virtual IMvxViewModel Load(Type viewModelType, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel`1<TParameter> Load(Type viewModelType, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    [NullableContextAttribute("2")]
public abstract virtual IMvxViewModel Reload(IMvxViewModel viewModel, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel`1<TParameter> Reload(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelLocatorCollection {
    public abstract virtual IMvxViewModelLocator FindViewModelLocator(MvxViewModelRequest request);
}
public interface MvvmCross.ViewModels.IMvxViewModelTypeFinder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxApplication : object {
    [NullableAttribute("2")]
private IMvxViewModelLocator _defaultLocator;
    private IMvxViewModelLocator DefaultLocator { get; }
    private IMvxViewModelLocator get_DefaultLocator();
    protected virtual IMvxViewModelLocator CreateDefaultViewModelLocator();
    public virtual void LoadPlugins(IMvxPluginManager pluginManager);
    public virtual void Initialize();
    public virtual Task Startup();
    public virtual void Reset();
    public sealed virtual IMvxViewModelLocator FindViewModelLocator(MvxViewModelRequest request);
    protected void RegisterCustomAppStart();
    [NullableContextAttribute("0")]
protected void RegisterAppStart();
    protected void RegisterAppStart(IMvxAppStart appStart);
    protected virtual void RegisterAppStart();
    protected IEnumerable`1<Type> CreatableTypes();
    protected IEnumerable`1<Type> CreatableTypes(Assembly assembly);
}
public class MvvmCross.ViewModels.MvxApplication`1 : MvxApplication {
    [NullableContextAttribute("1")]
public virtual Task`1<TParameter> Startup(TParameter hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxAppStart : object {
    protected IMvxNavigationService NavigationService;
    protected IMvxApplication Application;
    private int startHasCommenced;
    public bool IsStarted { get; }
    protected MvxAppStart(IMvxApplication application, IMvxNavigationService navigationService);
    [NullableContextAttribute("2")]
public sealed virtual void Start(object hint);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart/<StartAsync>d__5")]
public sealed virtual Task StartAsync(object hint);
    protected abstract virtual Task NavigateToFirstViewModel(object hint);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart/<ApplicationStartup>d__7")]
protected virtual Task`1<object> ApplicationStartup(object hint);
    public virtual bool get_IsStarted();
    public virtual void ResetStart();
    protected virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxAppStart`1 : MvxAppStart {
    public MvxAppStart`1(IMvxApplication application, IMvxNavigationService navigationService);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart`1/<NavigateToFirstViewModel>d__1")]
protected virtual Task NavigateToFirstViewModel(object hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.ViewModels.MvxAppStart`2 : MvxAppStart`1<TViewModel> {
    public MvxAppStart`2(IMvxApplication application, IMvxNavigationService navigationService);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart`2/<ApplicationStartup>d__1")]
protected virtual Task`1<object> ApplicationStartup(object hint);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart`2/<NavigateToFirstViewModel>d__2")]
protected virtual Task NavigateToFirstViewModel(object hint);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__0(object hint);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(object hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxBundle : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Data>k__BackingField;
    public IDictionary`2<string, string> Data { get; }
    public MvxBundle(IDictionary`2<string, string> data);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Data();
    public sealed virtual void Write(object toStore);
    public sealed virtual T Read();
    public sealed virtual object Read(Type type);
    public sealed virtual IEnumerable`1<object> CreateArgumentList(IEnumerable`1<ParameterInfo> requiredParameters, string debugText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxChildViewModelCache : object {
    private Dictionary`2<int, IMvxViewModel> _viewModels;
    private int _unique;
    public sealed virtual int Cache(IMvxViewModel viewModel);
    public sealed virtual bool Exists(Type viewModelType);
    public sealed virtual IMvxViewModel Get(int index);
    public sealed virtual IMvxViewModel Get(Type viewModelType);
    public sealed virtual void Remove(int index);
    public sealed virtual void Remove(Type viewModelType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxDefaultViewModelLocator : object {
    [NullableContextAttribute("2")]
public virtual IMvxViewModel Load(Type viewModelType, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public virtual IMvxViewModel`1<TParameter> Load(Type viewModelType, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    [NullableContextAttribute("2")]
public virtual IMvxViewModel Reload(IMvxViewModel viewModel, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public virtual IMvxViewModel`1<TParameter> Reload(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    protected virtual void CallCustomInitMethods(IMvxViewModel viewModel, IMvxBundle parameterValues);
    protected virtual void CallReloadStateMethods(IMvxViewModel viewModel, IMvxBundle savedState);
    [NullableContextAttribute("2")]
protected void RunViewModelLifecycle(IMvxViewModel viewModel, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    protected void RunViewModelLifecycle(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
}
public enum MvvmCross.ViewModels.MvxInpcInterceptionResult : Enum {
    public int value__;
    public static MvxInpcInterceptionResult NotIntercepted;
    public static MvxInpcInterceptionResult RaisePropertyChanged;
    public static MvxInpcInterceptionResult DoNotRaisePropertyChanged;
    public static MvxInpcInterceptionResult RaisePropertyChanging;
    public static MvxInpcInterceptionResult DoNotRaisePropertyChanging;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxInteraction : object {
    [CompilerGeneratedAttribute]
private EventHandler Requested;
    public void Raise();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Requested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Requested(EventHandler value);
}
public class MvvmCross.ViewModels.MvxInteraction`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<T>> Requested;
    [NullableContextAttribute("1")]
public void Raise(T request);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.ViewModels.MvxInteractionExtensions : object {
    [ExtensionAttribute]
public static IDisposable WeakSubscribe(IMvxInteraction interaction, EventHandler`1<EventArgs> action);
    [ExtensionAttribute]
public static MvxValueEventSubscription`1<T> WeakSubscribe(IMvxInteraction`1<T> interaction, EventHandler`1<MvxValueEventArgs`1<T>> action);
    [ExtensionAttribute]
public static MvxValueEventSubscription`1<T> WeakSubscribe(IMvxInteraction`1<T> interaction, Action`1<T> action);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.ViewModels.MvxJsonNavigationSerializer : MvxNavigationSerializer`1<IMvxJsonConverter> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNavigationSerializer : object {
    [CompilerGeneratedAttribute]
private IMvxTextSerializer <Serializer>k__BackingField;
    public IMvxTextSerializer Serializer { get; }
    public MvxNavigationSerializer(IMvxTextSerializer serializer);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxTextSerializer get_Serializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNavigationSerializer`1 : MvxNavigationSerializer {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxNavigationViewModel : MvxViewModel {
    [NullableAttribute("2")]
private ILogger _log;
    [CompilerGeneratedAttribute]
private IMvxNavigationService <NavigationService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    protected IMvxNavigationService NavigationService { get; }
    protected ILoggerFactory LoggerFactory { get; }
    protected ILogger Log { get; }
    protected MvxNavigationViewModel(ILoggerFactory logFactory, IMvxNavigationService navigationService);
    [CompilerGeneratedAttribute]
protected virtual IMvxNavigationService get_NavigationService();
    [CompilerGeneratedAttribute]
protected virtual ILoggerFactory get_LoggerFactory();
    protected virtual ILogger get_Log();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxNavigationViewModel`1 : MvxNavigationViewModel {
    protected MvxNavigationViewModel`1(ILoggerFactory logFactory, IMvxNavigationService navigationService);
    public abstract virtual void Prepare(TParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxNotifyPropertyChanged : MvxMainThreadDispatchingObject {
    private static PropertyChangedEventArgs AllPropertiesChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    private bool _shouldAlwaysRaiseInpcOnUserInterfaceThread;
    private bool _shouldRaisePropertyChanging;
    private bool _shouldLogInpc;
    private static MvxNotifyPropertyChanged();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    public sealed virtual bool ShouldAlwaysRaiseInpcOnUserInterfaceThread();
    public sealed virtual void ShouldAlwaysRaiseInpcOnUserInterfaceThread(bool value);
    public sealed virtual bool ShouldRaisePropertyChanging();
    public sealed virtual void ShouldRaisePropertyChanging(bool value);
    public bool ShouldLogInpc();
    public void ShouldLogInpc(bool value);
    public sealed virtual bool RaisePropertyChanging(T newValue, Expression`1<Func`1<T>> propertyExpression);
    [NullableContextAttribute("2")]
public sealed virtual bool RaisePropertyChanging(T newValue, string whichProperty);
    public virtual bool RaisePropertyChanging(MvxPropertyChangingEventArgs`1<T> changingArgs);
    public virtual Task RaiseAllPropertiesChanged();
    public sealed virtual Task RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    public virtual Task RaisePropertyChanged(string whichProperty);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxNotifyPropertyChanged/<RaisePropertyChanged>d__23")]
public virtual Task RaisePropertyChanged(PropertyChangedEventArgs changedArgs);
    [NullableContextAttribute("2")]
protected virtual void SetProperty(T& storage, T value, Action`1<bool> action, string propertyName);
    [NullableContextAttribute("2")]
protected virtual bool SetProperty(T& storage, T value, Action afterAction, string propertyName);
    protected virtual bool SetProperty(T& storage, T value, string propertyName);
    protected virtual MvxInpcInterceptionResult InterceptRaisePropertyChanged(PropertyChangedEventArgs changedArgs);
    protected virtual MvxInpcInterceptionResult InterceptRaisePropertyChanging(PropertyChangingEventArgs changingArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.ViewModels.MvxNotifyPropertyChangedExtensions : object {
    private static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, Func`1<bool> raiseAction);
    [ExtensionAttribute]
public static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, Expression`1<Func`1<TReturn>> propertySelector);
    [ExtensionAttribute]
public static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, string propertyName);
    [ExtensionAttribute]
public static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, MvxPropertyChangingEventArgs`1<TReturn> args);
    private static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, Func`2<TActionParameter, Task> raiseAction, TActionParameter raiseActionParameter);
    [ExtensionAttribute]
public static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, Expression`1<Func`1<TReturn>> propertySelector);
    [ExtensionAttribute]
public static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, string propertyName);
    [ExtensionAttribute]
public static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, PropertyChangedEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNotifyTask : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onException;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <TaskCompleted>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Task Task { get; }
    public Task TaskCompleted { get; }
    public TaskStatus Status { get; }
    public bool IsCompleted { get; }
    public bool IsNotCompleted { get; }
    public bool IsSuccessfullyCompleted { get; }
    public bool IsCanceled { get; }
    public bool IsFaulted { get; }
    public AggregateException Exception { get; }
    [NullableAttribute("2")]
public Exception InnerException { get; }
    [NullableAttribute("2")]
public string ErrorMessage { get; }
    private MvxNotifyTask(Task task, Action`1<Exception> onException);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxNotifyTask/<MonitorTaskAsync>d__2")]
private Task MonitorTaskAsync(Task task);
    private void NotifyProperties(Task task);
    [CompilerGeneratedAttribute]
public Task get_Task();
    [CompilerGeneratedAttribute]
public Task get_TaskCompleted();
    public TaskStatus get_Status();
    public bool get_IsCompleted();
    public bool get_IsNotCompleted();
    public bool get_IsSuccessfullyCompleted();
    public bool get_IsCanceled();
    public bool get_IsFaulted();
    public AggregateException get_Exception();
    [NullableContextAttribute("2")]
public Exception get_InnerException();
    [NullableContextAttribute("2")]
public string get_ErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public static MvxNotifyTask Create(Task task, Action`1<Exception> onException);
    public static MvxNotifyTask`1<TResult> Create(Task`1<TResult> task, TResult defaultResult, Action`1<Exception> onException);
    public static MvxNotifyTask Create(Func`1<Task> asyncAction, Action`1<Exception> onException);
    public static MvxNotifyTask`1<TResult> Create(Func`1<Task`1<TResult>> asyncAction, TResult defaultResult, Action`1<Exception> onException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNotifyTask`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onException;
    private TResult _defaultResult;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Task`1<TResult> <Task>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Task <TaskCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("1")]
public Task`1<TResult> Task { get; }
    [NullableAttribute("1")]
public Task TaskCompleted { get; }
    public TResult Result { get; }
    public TaskStatus Status { get; }
    public bool IsCompleted { get; }
    public bool IsNotCompleted { get; }
    public bool IsSuccessfullyCompleted { get; }
    public bool IsCanceled { get; }
    public bool IsFaulted { get; }
    public AggregateException Exception { get; }
    public Exception InnerException { get; }
    public string ErrorMessage { get; }
    [NullableContextAttribute("1")]
internal MvxNotifyTask`1(Task`1<TResult> task, TResult defaultResult, Action`1<Exception> onException);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxNotifyTask`1/<MonitorTaskAsync>d__3")]
private Task MonitorTaskAsync(Task task);
    [NullableContextAttribute("1")]
private void NotifyProperties(Task task);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Task`1<TResult> get_Task();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Task get_TaskCompleted();
    public TResult get_Result();
    public TaskStatus get_Status();
    public bool get_IsCompleted();
    public bool get_IsNotCompleted();
    public bool get_IsSuccessfullyCompleted();
    public bool get_IsCanceled();
    public bool get_IsFaulted();
    public AggregateException get_Exception();
    public Exception get_InnerException();
    public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class MvvmCross.ViewModels.MvxNullViewModel : MvxViewModel {
}
public class MvvmCross.ViewModels.MvxObservableCollection`1 : ObservableCollection`1<T> {
    private int _suppressEvents;
    public bool EventsAreSuppressed { get; }
    public MvxObservableCollection`1(IEnumerable`1<T> items);
    protected virtual SuppressEventsDisposable<T> SuppressEvents();
    public virtual bool get_EventsAreSuppressed();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual void AddRange(IEnumerable`1<T> items);
    public virtual void InsertRange(int index, IEnumerable`1<T> items);
    public virtual void ReplaceWith(IEnumerable`1<T> items);
    public virtual void ReplaceRange(IEnumerable`1<T> items, int firstIndex, int oldSize);
    public virtual void SwitchTo(IEnumerable`1<T> items);
    public virtual void RemoveItems(IEnumerable`1<T> items);
    public virtual void RemoveRange(int start, int count);
    protected virtual Task InvokeOnMainThread(Action action);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxObservableCollection`1/<OnPropertyChanged>d__16")]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(PropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxPostfixAwareViewToViewModelNameMapping : MvxViewToViewModelNameMapping {
    private String[] _postfixes;
    public MvxPostfixAwareViewToViewModelNameMapping(String[] postfixes);
    public virtual string Map(string inputName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxPresentationHint : object {
    [CompilerGeneratedAttribute]
private MvxBundle <Body>k__BackingField;
    public MvxBundle Body { get; }
    protected MvxPresentationHint(MvxBundle body);
    [NullableContextAttribute("1")]
protected MvxPresentationHint(IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public MvxBundle get_Body();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxPropertyChangedListener : object {
    private Dictionary`2<string, List`1<PropertyChangedEventHandler>> _handlersLookup;
    private INotifyPropertyChanged _notificationObject;
    private MvxNotifyPropertyChangedEventSubscription _token;
    public MvxPropertyChangedListener(INotifyPropertyChanged notificationObject);
    public virtual void NotificationObjectOnPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    public void Clear();
    public MvxPropertyChangedListener Listen(Expression`1<Func`1<TProperty>> property, Action handler);
    public MvxPropertyChangedListener Listen(Expression`1<Func`1<TProperty>> propertyExpression, PropertyChangedEventHandler handler);
    public MvxPropertyChangedListener Listen(string propertyName, Action handler);
    public MvxPropertyChangedListener Listen(string propertyName, PropertyChangedEventHandler handler);
}
public class MvvmCross.ViewModels.MvxPropertyChangingEventArgs`1 : PropertyChangingEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NewValue>k__BackingField;
    public bool Cancel { get; public set; }
    public T NewValue { get; public set; }
    public MvxPropertyChangingEventArgs`1(string propertyName, T newValue);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
public T get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxStringDictionaryNavigationSerializer : object {
    [CompilerGeneratedAttribute]
private IMvxTextSerializer <Serializer>k__BackingField;
    public IMvxTextSerializer Serializer { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IMvxTextSerializer get_Serializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class MvvmCross.ViewModels.MvxViewForAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewModel>k__BackingField;
    public Type ViewModel { get; public set; }
    public MvxViewForAttribute(Type viewModel);
    [CompilerGeneratedAttribute]
public Type get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_ViewModel(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxViewModel : MvxNotifyPropertyChanged {
    [NullableAttribute("2")]
private MvxNotifyTask _initializeTask;
    [NullableAttribute("2")]
public MvxNotifyTask InitializeTask { get; public set; }
    public virtual void ViewCreated();
    public virtual void ViewAppearing();
    public virtual void ViewAppeared();
    public virtual void ViewDisappearing();
    public virtual void ViewDisappeared();
    public virtual void ViewDestroy(bool viewFinishing);
    public sealed virtual void Init(IMvxBundle parameters);
    public sealed virtual void ReloadState(IMvxBundle state);
    public virtual void Start();
    public sealed virtual void SaveState(IMvxBundle state);
    protected virtual void InitFromBundle(IMvxBundle parameters);
    protected virtual void ReloadFromBundle(IMvxBundle state);
    protected virtual void SaveStateToBundle(IMvxBundle bundle);
    public virtual void Prepare();
    public virtual Task Initialize();
    [NullableContextAttribute("2")]
public sealed virtual MvxNotifyTask get_InitializeTask();
    [NullableContextAttribute("2")]
public sealed virtual void set_InitializeTask(MvxNotifyTask value);
}
public abstract class MvvmCross.ViewModels.MvxViewModel`1 : MvxViewModel {
    [NullableContextAttribute("1")]
public abstract virtual void Prepare(TParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelByNameLookup : object {
    private Dictionary`2<string, Type> _availableViewModelsByName;
    private Dictionary`2<string, Type> _availableViewModelsByFullName;
    public sealed virtual bool TryLookupByName(string name, Type& viewModelType);
    public sealed virtual bool TryLookupByFullName(string name, Type& viewModelType);
    public sealed virtual void Add(Type viewModelType);
    [NullableContextAttribute("0")]
public sealed virtual void Add();
    public sealed virtual void AddAll(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.ViewModels.MvxViewModelExtensions : object {
    [ExtensionAttribute]
public static void CallBundleMethods(IMvxViewModel viewModel, string methodName, IMvxBundle bundle);
    [ExtensionAttribute]
public static void CallBundleMethod(IMvxViewModel viewModel, MethodInfo methodInfo, IMvxBundle bundle);
    [ExtensionAttribute]
public static IMvxBundle SaveStateBundle(IMvxViewModel viewModel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelInstanceRequest : MvxViewModelRequest {
    [CompilerGeneratedAttribute]
private IMvxViewModel <ViewModelInstance>k__BackingField;
    public IMvxViewModel ViewModelInstance { get; public set; }
    [NullableContextAttribute("1")]
public MvxViewModelInstanceRequest(Type viewModelType);
    [NullableContextAttribute("1")]
public MvxViewModelInstanceRequest(IMvxViewModel viewModelInstance);
    [CompilerGeneratedAttribute]
public IMvxViewModel get_ViewModelInstance();
    [CompilerGeneratedAttribute]
public void set_ViewModelInstance(IMvxViewModel value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelLoader : object {
    [CompilerGeneratedAttribute]
private IMvxViewModelLocatorCollection <LocatorCollection>k__BackingField;
    protected IMvxViewModelLocatorCollection LocatorCollection { get; }
    public MvxViewModelLoader(IMvxViewModelLocatorCollection locatorCollection);
    [CompilerGeneratedAttribute]
protected IMvxViewModelLocatorCollection get_LocatorCollection();
    public sealed virtual IMvxViewModel ReloadViewModel(IMvxViewModel viewModel, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public sealed virtual IMvxViewModel ReloadViewModel(IMvxViewModel`1<TParameter> viewModel, TParameter param, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public sealed virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public sealed virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, TParameter param, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    private IMvxViewModelLocator FindViewModelLocator(MvxViewModelRequest request);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelRequest : object {
    [CompilerGeneratedAttribute]
private Type <ViewModelType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PresentationValues>k__BackingField;
    public Type ViewModelType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> ParameterValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> PresentationValues { get; public set; }
    [NullableContextAttribute("1")]
public MvxViewModelRequest(Type viewModelType);
    public MvxViewModelRequest(Type viewModelType, IMvxBundle parameterBundle, IMvxBundle presentationBundle);
    [CompilerGeneratedAttribute]
public Type get_ViewModelType();
    [CompilerGeneratedAttribute]
public void set_ViewModelType(Type value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterValues();
    [CompilerGeneratedAttribute]
public void set_ParameterValues(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_PresentationValues();
    [CompilerGeneratedAttribute]
public void set_PresentationValues(IDictionary`2<string, string> value);
    [NullableContextAttribute("1")]
public static MvxViewModelRequest GetDefaultRequest(Type viewModelType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelRequest`1 : MvxViewModelRequest {
    public MvxViewModelRequest`1(IMvxBundle parameterBundle, IMvxBundle presentationBundle);
    public static MvxViewModelRequest GetDefaultRequest();
}
public class MvvmCross.ViewModels.MvxViewModelViewLookupBuilder : object {
    [NullableContextAttribute("1")]
public virtual IDictionary`2<Type, Type> Build(IEnumerable`1<Assembly> sourceAssemblies);
    protected virtual IEnumerable`1<KeyValuePair`2<Type, Type>> FilterViews(IEnumerable`1<KeyValuePair`2<Type, Type>> views);
    [NullableContextAttribute("1")]
protected virtual Exception ReportBuildProblem(IEnumerable`1<KeyValuePair`2<Type, Type>> views, ArgumentException exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelViewTypeFinder : object {
    private IMvxViewModelByNameLookup _viewModelByNameLookup;
    private IMvxNameMapping _viewToViewModelNameMapping;
    public MvxViewModelViewTypeFinder(IMvxViewModelByNameLookup viewModelByNameLookup, IMvxNameMapping viewToViewModelNameMapping);
    public virtual Type FindTypeOrNull(Type candidateType);
    protected virtual Type LookupAttributedViewModelType(Type candidateType);
    protected virtual Type LookupNamedViewModelType(Type candidateType);
    protected virtual Type LookupAssociatedConcreteViewModelType(Type candidateType);
    protected virtual bool CheckCandidateTypeIsAView(Type candidateType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewToViewModelNameMapping : object {
    [CompilerGeneratedAttribute]
private string <ViewModelPostfix>k__BackingField;
    public string ViewModelPostfix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ViewModelPostfix();
    [CompilerGeneratedAttribute]
public void set_ViewModelPostfix(string value);
    public virtual string Map(string inputName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.PropertyChangedEventArgsCache : object {
    private Dictionary`2<string, PropertyChangedEventArgs> _cache;
    [CompilerGeneratedAttribute]
private static PropertyChangedEventArgsCache <Instance>k__BackingField;
    public static PropertyChangedEventArgsCache Instance { get; }
    private static PropertyChangedEventArgsCache();
    [CompilerGeneratedAttribute]
public static PropertyChangedEventArgsCache get_Instance();
    public PropertyChangedEventArgs Get(string propertyName);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Views.IMvxView {
    public IMvxViewModel ViewModel { get; public set; }
    public abstract virtual IMvxViewModel get_ViewModel();
    public abstract virtual void set_ViewModel(IMvxViewModel value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Views.IMvxView`1 {
    public TViewModel ViewModel { get; public set; }
    public abstract virtual TViewModel get_ViewModel();
    public abstract virtual void set_ViewModel(TViewModel value);
}
public interface MvvmCross.Views.IMvxViewDispatcher {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> ShowViewModel(MvxViewModelRequest request);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Views.IMvxViewFinder {
    public abstract virtual Type GetViewType(Type viewModelType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Views.IMvxViewsContainer {
    public abstract virtual void AddAll(IDictionary`2<Type, Type> viewModelViewLookup);
    public abstract virtual void Add(Type viewModelType, Type viewType);
    [NullableContextAttribute("0")]
public abstract virtual void Add();
    public abstract virtual void AddSecondary(IMvxViewFinder finder);
    public abstract virtual void SetLastResort(IMvxViewFinder finder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Views.MvxViewExtensions : object {
    [ExtensionAttribute]
public static void OnViewCreate(IMvxView view, Func`1<IMvxViewModel> viewModelLoader);
    [ExtensionAttribute]
public static void OnViewDestroy(IMvxView view);
    [ExtensionAttribute]
public static Type FindAssociatedViewModelTypeOrNull(IMvxView view);
    [ExtensionAttribute]
public static IMvxBundle CreateSaveStateBundle(IMvxView view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Views.MvxViewsContainer : object {
    private Dictionary`2<Type, Type> _bindingMap;
    private List`1<IMvxViewFinder> _secondaryViewFinders;
    [NullableAttribute("2")]
private IMvxViewFinder _lastResortViewFinder;
    public sealed virtual void AddAll(IDictionary`2<Type, Type> viewModelViewLookup);
    public sealed virtual void Add(Type viewModelType, Type viewType);
    [NullableContextAttribute("0")]
public sealed virtual void Add();
    public sealed virtual Type GetViewType(Type viewModelType);
    public sealed virtual void AddSecondary(IMvxViewFinder finder);
    public sealed virtual void SetLastResort(IMvxViewFinder finder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxCanExecuteChangedEventSubscription : MvxWeakEventSubscription`2<ICommand, EventArgs> {
    private static EventInfo CanExecuteChangedEventInfo;
    public MvxCanExecuteChangedEventSubscription(ICommand source, EventHandler`1<EventArgs> eventHandler);
    private static MvxCanExecuteChangedEventSubscription();
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxGeneralEventSubscription : MvxWeakEventSubscription`2<object, EventArgs> {
    public MvxGeneralEventSubscription(object source, EventInfo eventInfo, EventHandler`1<EventArgs> eventHandler);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxGeneralEventSubscription`2 : MvxWeakEventSubscription`2<TSource, TEventArgs> {
    public MvxGeneralEventSubscription`2(TSource source, EventInfo eventInfo, EventHandler`1<TEventArgs> eventHandler);
    public MvxGeneralEventSubscription`2(TSource source, string eventName, EventHandler`1<TEventArgs> eventHandler);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.WeakSubscription.MvxNamedNotifyPropertyChangedEventSubscription`1 : MvxNotifyPropertyChangedEventSubscription {
    private string _propertyName;
    public MvxNamedNotifyPropertyChangedEventSubscription`1(INotifyPropertyChanged source, Expression`1<Func`1<T>> property, EventHandler`1<PropertyChangedEventArgs> targetEventHandler);
    public MvxNamedNotifyPropertyChangedEventSubscription`1(INotifyPropertyChanged source, string propertyName, EventHandler`1<PropertyChangedEventArgs> targetEventHandler);
    protected virtual Delegate CreateEventHandler();
    [CompilerGeneratedAttribute]
private void <CreateEventHandler>b__3_0(object sender, PropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxNotifyCollectionChangedEventSubscription : MvxWeakEventSubscription`2<INotifyCollectionChanged, NotifyCollectionChangedEventArgs> {
    private static EventInfo EventInfo;
    public MvxNotifyCollectionChangedEventSubscription(INotifyCollectionChanged source, EventHandler`1<NotifyCollectionChangedEventArgs> targetEventHandler);
    private static MvxNotifyCollectionChangedEventSubscription();
    public static void LinkerPleaseInclude(INotifyCollectionChanged iNotifyCollectionChanged);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxNotifyPropertyChangedEventSubscription : MvxWeakEventSubscription`2<INotifyPropertyChanged, PropertyChangedEventArgs> {
    private static EventInfo PropertyChangedEventInfo;
    public MvxNotifyPropertyChangedEventSubscription(INotifyPropertyChanged source, EventHandler`1<PropertyChangedEventArgs> targetEventHandler);
    private static MvxNotifyPropertyChangedEventSubscription();
    public static void LinkerPleaseInclude(INotifyPropertyChanged iNotifyPropertyChanged);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxValueEventSubscription`1 : MvxWeakEventSubscription`2<object, MvxValueEventArgs`1<T>> {
    public MvxValueEventSubscription`1(object source, EventInfo eventInfo, EventHandler`1<MvxValueEventArgs`1<T>> eventHandler);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.WeakSubscription.MvxWeakEventSubscription`1 : object {
    private WeakReference _targetReference;
    private WeakReference`1<TSource> _sourceReference;
    private MethodInfo _eventHandlerMethodInfo;
    private EventInfo _sourceEventInfo;
    private Delegate _ourEventHandler;
    private bool _subscribed;
    public MvxWeakEventSubscription`1(TSource source, string sourceEventName, EventHandler targetEventHandler);
    protected MvxWeakEventSubscription`1(TSource source, EventInfo sourceEventInfo, EventHandler targetEventHandler);
    private static EventInfo GetEventInfo(string sourceEventName);
    [NullableContextAttribute("2")]
protected virtual object GetTargetObject();
    protected virtual Delegate CreateEventHandler();
    protected void OnSourceEvent(object sender, EventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void RemoveEventHandler();
    private void AddEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.WeakSubscription.MvxWeakEventSubscription`2 : object {
    private WeakReference _targetReference;
    private WeakReference`1<TSource> _sourceReference;
    private MethodInfo _eventHandlerMethodInfo;
    private EventInfo _sourceEventInfo;
    private Delegate _ourEventHandler;
    private bool _subscribed;
    public MvxWeakEventSubscription`2(TSource source, string sourceEventName, EventHandler`1<TEventArgs> targetEventHandler);
    protected MvxWeakEventSubscription`2(TSource source, EventInfo sourceEventInfo, EventHandler`1<TEventArgs> targetEventHandler);
    private static EventInfo GetEventInfo(string sourceEventName);
    private Delegate Init();
    protected virtual Delegate CreateEventHandler();
    [NullableContextAttribute("2")]
protected virtual object GetTargetObject();
    protected void OnSourceEvent(object sender, TEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void RemoveEventHandler();
    private void AddEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.WeakSubscription.MvxWeakSubscriptionExtensions : object {
    [ExtensionAttribute]
public static MvxNotifyPropertyChangedEventSubscription WeakSubscribe(INotifyPropertyChanged source, EventHandler`1<PropertyChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxNamedNotifyPropertyChangedEventSubscription`1<T> WeakSubscribe(INotifyPropertyChanged source, Expression`1<Func`1<T>> property, EventHandler`1<PropertyChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxNamedNotifyPropertyChangedEventSubscription`1<T> WeakSubscribe(INotifyPropertyChanged source, string property, EventHandler`1<PropertyChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxNotifyCollectionChangedEventSubscription WeakSubscribe(INotifyCollectionChanged source, EventHandler`1<NotifyCollectionChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxGeneralEventSubscription WeakSubscribe(EventInfo eventInfo, object source, EventHandler`1<EventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxValueEventSubscription`1<T> WeakSubscribe(EventInfo eventInfo, object source, EventHandler`1<MvxValueEventArgs`1<T>> eventHandler);
    [ExtensionAttribute]
public static MvxCanExecuteChangedEventSubscription WeakSubscribe(ICommand source, EventHandler`1<EventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxWeakEventSubscription`1<TSource> WeakSubscribe(TSource source, string eventName, EventHandler eventHandler);
    [ExtensionAttribute]
public static MvxWeakEventSubscription`2<TSource, TEventArgs> WeakSubscribe(TSource source, string eventName, EventHandler`1<TEventArgs> eventHandler);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
