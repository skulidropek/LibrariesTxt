public interface MvvmCross.Base.IMvxApplicable {
    public abstract virtual void Apply();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxApplicableTo {
    public abstract virtual void ApplyTo(object what);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxApplicableTo`1 {
    public abstract virtual void ApplyTo(T what);
}
public interface MvvmCross.Base.IMvxBootstrapAction {
    public abstract virtual void Run();
}
[NullableContextAttribute("2")]
public interface MvvmCross.Base.IMvxDataConsumer {
    public object DataContext { get; public set; }
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Base.IMvxDisposeSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DisposeCalled(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DisposeCalled(EventHandler value);
}
public interface MvvmCross.Base.IMvxJsonConverter {
    [NullableContextAttribute("2")]
public abstract virtual T DeserializeObject(Stream stream);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxMainThreadAsyncDispatcher {
    public bool IsOnMainThread { get; }
    public abstract virtual Task ExecuteOnMainThreadAsync(Action action, bool maskExceptions);
    public abstract virtual Task ExecuteOnMainThreadAsync(Func`1<Task> action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxMainThreadDispatcher {
    public bool IsOnMainThread { get; }
    [ObsoleteAttribute("Use IMvxMainThreadAsyncDispatcher.ExecuteOnMainThreadAsync instead")]
public abstract virtual bool RequestMainThreadAction(Action action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxNamedInstanceRegistry`1 {
    public abstract virtual void AddOrOverwrite(string name, T instance);
    public abstract virtual void AddOrOverwriteFrom(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxResourceLoader {
    public abstract virtual bool ResourceExists(string resourcePath);
    public abstract virtual string GetTextResource(string resourcePath);
    public abstract virtual void GetResourceStream(string resourcePath, Action`1<Stream> streamAction);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxSingletonCache {
    public IMvxSettings Settings { get; }
    public IMvxInpcInterceptor InpcInterceptor { get; }
    public IMvxStringToTypeParser Parser { get; }
    public abstract virtual IMvxSettings get_Settings();
    public abstract virtual IMvxInpcInterceptor get_InpcInterceptor();
    public abstract virtual IMvxStringToTypeParser get_Parser();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Base.IMvxTextSerializer {
    [NullableContextAttribute("2")]
public abstract virtual T DeserializeObject(string inputText);
    public abstract virtual object DeserializeObject(Type type, string inputText);
    public abstract virtual string SerializeObject(object toSerialise);
}
public abstract class MvvmCross.Base.MvxApplicable : object {
    private bool _finalizerSuppressed;
    protected virtual override void Finalize();
    protected void SuppressFinalizer();
    public virtual void Apply();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxApplicableExtensions : object {
    [ExtensionAttribute]
public static void Apply(IEnumerable`1<IMvxApplicable> toApply);
    [ExtensionAttribute]
public static void ApplyTo(IEnumerable`1<IMvxApplicableTo> toApply, object what);
    [ExtensionAttribute]
public static void ApplyTo(IEnumerable`1<IMvxApplicableTo`1<T>> toApply, T what);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Base.MvxApplicableTo`1 : MvxApplicable {
    public virtual void ApplyTo(T what);
}
public class MvvmCross.Base.MvxBootstrapRunner : object {
    public virtual void Run(Assembly assembly);
    protected virtual void Run(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxCoreExtensions : object {
    [ExtensionAttribute]
public static bool ConvertToBooleanCore(object result);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object MakeSafeValueCore(Type propertyType, object value);
    private static object ErrorMaskedConvert(object value, Type type, CultureInfo cultureInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxDelegateExtensions : object {
    [ExtensionAttribute]
public static void Raise(EventHandler eventHandler, object sender);
    [ExtensionAttribute]
public static void Raise(EventHandler`1<MvxValueEventArgs`1<T>> eventHandler, object sender, T value);
}
[ExtensionAttribute]
public static class MvvmCross.Base.MvxDictionaryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDictionary`2<string, object> ToPropertyDictionary(object input);
}
public abstract class MvvmCross.Base.MvxMainThreadAsyncDispatcher : MvxMainThreadDispatcher {
    public bool IsOnMainThread { get; }
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteOnMainThreadAsync(Action action, bool maskExceptions);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MvvmCross.Base.MvxMainThreadAsyncDispatcher/<ExecuteOnMainThreadAsync>d__1")]
public sealed virtual Task ExecuteOnMainThreadAsync(Func`1<Task> action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class MvvmCross.Base.MvxMainThreadDispatcher : MvxSingleton`1<IMvxMainThreadDispatcher> {
    public bool IsOnMainThread { get; }
    public static void ExceptionMaskedAction(Action action, bool maskExceptions);
    public abstract virtual bool RequestMainThreadAction(Action action, bool maskExceptions);
    public abstract virtual bool get_IsOnMainThread();
}
public abstract class MvvmCross.Base.MvxMainThreadDispatchingObject : object {
    protected IMvxMainThreadAsyncDispatcher AsyncDispatcher { get; }
    protected IMvxMainThreadAsyncDispatcher get_AsyncDispatcher();
    protected void InvokeOnMainThread(Action action, bool maskExceptions);
    protected Task InvokeOnMainThreadAsync(Action action, bool maskExceptions);
}
[ExtensionAttribute]
public static class MvvmCross.Base.MvxObjectExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void DisposeIfDisposable(object thing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Base.MvxParser : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FullText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentIndex>k__BackingField;
    [NullableAttribute("2")]
protected string FullText { get; private set; }
    protected int CurrentIndex { get; private set; }
    protected bool IsComplete { get; }
    protected char CurrentChar { get; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_FullText();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_FullText(string value);
    [CompilerGeneratedAttribute]
protected int get_CurrentIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentIndex(int value);
    [NullableContextAttribute("2")]
protected virtual void Reset(string textToParse);
    protected bool get_IsComplete();
    protected char get_CurrentChar();
    protected string ReadQuotedString();
    protected UInt32 ReadUnsignedInteger();
    protected char ReadEscapedCharacter();
    private char ReadFourDigitUnicodeCharacter();
    private string ReadNDigits(int count);
    protected void MoveNext(UInt32 increment);
    protected void SkipWhitespaceAndCharacters(Char[] toSkip);
    protected void SkipWhitespaceAndCharacters(IEnumerable`1<char> toSkip);
    protected void SkipWhitespaceAndCharacters(Dictionary`2<char, bool> toSkip);
    protected void SkipWhitespace();
    private static bool IsWhiteSpaceOrCharacter(char charToTest, Dictionary`2<char, bool> toSkip);
    private static bool IsWhiteSpaceOrCharacter(char charToTest, IEnumerable`1<char> toSkip);
    [NullableContextAttribute("2")]
protected object ReadValue();
    [NullableContextAttribute("2")]
protected bool TryReadValue(AllowNonQuotedText allowNonQuotedText, Object& value);
    protected bool TestKeywordInPeekString(string uppercaseKeyword, string peekString);
    protected bool TryReadNull();
    protected bool TryReadBoolean(Boolean& booleanValue);
    protected string SafePeekString(int length);
    protected ValueType ReadNumber();
    protected ValueType NumberFromText(string numberText);
    protected ValueType NumberFromText(string numberText, bool decimalPeriodSeen);
    protected object ReadEnumerationValue(Type enumerationType, bool ignoreCase);
    protected string ReadTextUntilWhitespaceOr(Char[] terminatingCharacters);
    protected string ReadTextUntil(Char[] terminatingCharacters);
    protected string ReadValidCSharpName();
    protected bool IsValidFirstCharacterOfCSharpName(char firstChar);
    protected bool IsValidMidCharacterOfCSharpName(char firstChar);
    private void CheckFullTextValid();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxPropertyNameExtensions : object {
    private static string WrongExpressionMessage;
    private static string WrongUnaryExpressionMessage;
    [ExtensionAttribute]
public static string GetPropertyNameFromExpression(object target, Expression`1<Func`1<T>> expression);
    [NullableContextAttribute("2")]
private static MemberExpression FindMemberExpression(Expression`1<Func`1<T>> expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Base.MvxReflectionExtensions : object {
    [ExtensionAttribute]
public static Attribute[] GetCustomAttributes(Type type, Type attributeType, bool inherit);
    [ExtensionAttribute]
public static bool IsInstanceOfType(Type type, object obj);
    [ExtensionAttribute]
private static bool IsMarshalByRefObject(object obj);
    [ExtensionAttribute]
public static MethodInfo GetAddMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetRemoveMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo property, bool nonPublic);
}
public abstract class MvvmCross.Base.MvxSingleton : object {
    [NullableAttribute("1")]
private static List`1<MvxSingleton> Singletons;
    private static MvxSingleton();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool isDisposing);
    public static void ClearAllSingletons();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.Base.MvxSingleton`1 : MvxSingleton {
    [CompilerGeneratedAttribute]
private static TInterface <Instance>k__BackingField;
    public static TInterface Instance { get; private set; }
    [CompilerGeneratedAttribute]
public static TInterface get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(TInterface value);
    protected virtual void Dispose(bool isDisposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.Base.MvxSingletonCache : MvxSingleton`1<IMvxSingletonCache> {
    private bool _inpcInterceptorResolveAttempted;
    [NullableAttribute("2")]
private IMvxInpcInterceptor _inpcInterceptor;
    [NullableAttribute("2")]
private IMvxStringToTypeParser _parser;
    [NullableAttribute("2")]
private IMvxSettings _settings;
    public IMvxInpcInterceptor InpcInterceptor { get; }
    public IMvxStringToTypeParser Parser { get; }
    public IMvxSettings Settings { get; }
    public static MvxSingletonCache Initialize();
    public sealed virtual IMvxInpcInterceptor get_InpcInterceptor();
    public sealed virtual IMvxStringToTypeParser get_Parser();
    public sealed virtual IMvxSettings get_Settings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Base.MvxStopWatch : object {
    [NullableAttribute("2")]
private ILogger _log;
    private string _message;
    private int _startTickCount;
    private MvxStopWatch(string text, Object[] args);
    private MvxStopWatch(string tag, string text, Object[] args);
    public sealed virtual void Dispose();
    public static MvxStopWatch Create(string text, Object[] args);
    public static MvxStopWatch CreateWithTag(string tag, string text, Object[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Base.MvxValueEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; private set; }
    public MvxValueEventArgs`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
}
[AttributeUsageAttribute("128")]
public class MvvmCross.Binding.Attributes.MvxSetToNullAfterBindingAttribute : Attribute {
}
public interface MvvmCross.Binding.Binders.IMvxAutoValueConverters {
    public abstract virtual IMvxValueConverter Find(Type viewModelType, Type viewType);
    public abstract virtual void Register(Type viewModelType, Type viewType, IMvxValueConverter converter);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Binding.Binders.IMvxBinder {
    public abstract virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, string bindingText);
    public abstract virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
    public abstract virtual IEnumerable`1<IMvxUpdateableBinding> LanguageBind(object source, object target, string bindingText);
    public abstract virtual IMvxUpdateableBinding BindSingle(object source, object target, string targetPropertyName, string partialBindingDescription);
    public abstract virtual IMvxUpdateableBinding BindSingle(MvxBindingRequest bindingRequest);
}
public interface MvvmCross.Binding.Binders.IMvxBindingDescriptionParser {
    public abstract virtual IEnumerable`1<MvxBindingDescription> Parse(string text);
    public abstract virtual IEnumerable`1<MvxBindingDescription> LanguageParse(string text);
    public abstract virtual MvxBindingDescription ParseSingle(string text);
    public abstract virtual MvxBindingDescription SerializableBindingToBinding(string targetName, MvxSerializableBindingDescription description);
}
public interface MvvmCross.Binding.Binders.IMvxNamedInstanceLookup`1 {
    public abstract virtual T Find(string name);
}
public interface MvvmCross.Binding.Binders.IMvxNamedInstanceRegistryFiller`1 {
    public abstract virtual string FindName(Type type);
    public abstract virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    public abstract virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Assembly assembly);
}
public interface MvvmCross.Binding.Binders.IMvxValueConverterLookup {
}
public interface MvvmCross.Binding.Binders.IMvxValueConverterRegistryFiller {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Binding.Binders.MvxAutoValueConverters : object {
    private Dictionary`2<Key, IMvxValueConverter> _lookup;
    public sealed virtual IMvxValueConverter Find(Type viewModelType, Type viewType);
    public sealed virtual void Register(Type viewModelType, Type viewType, IMvxValueConverter converter);
}
public class MvvmCross.Binding.Binders.MvxFromTextBinder : object {
    public sealed virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, string bindingText);
    public sealed virtual IEnumerable`1<IMvxUpdateableBinding> Bind(object source, object target, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
    public sealed virtual IEnumerable`1<IMvxUpdateableBinding> LanguageBind(object source, object target, string bindingText);
    public sealed virtual IMvxUpdateableBinding BindSingle(object source, object target, string targetPropertyName, string partialBindingDescription);
    public sealed virtual IMvxUpdateableBinding BindSingle(MvxBindingRequest bindingRequest);
}
public class MvvmCross.Binding.Binders.MvxNamedInstanceRegistry`1 : object {
    private Dictionary`2<string, T> _converters;
    public sealed virtual T Find(string name);
    public sealed virtual void AddOrOverwrite(string name, T instance);
    public sealed virtual void AddOrOverwriteFrom(Assembly assembly);
}
public class MvvmCross.Binding.Binders.MvxNamedInstanceRegistryFiller`1 : object {
    protected virtual void FillFromInstance(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    protected virtual void FillFromStatic(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    public virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Type type);
    public virtual void FillFrom(IMvxNamedInstanceRegistry`1<T> registry, Assembly assembly);
    public virtual string FindName(Type type);
    protected static string RemoveHead(string name, string word);
    protected static string RemoveTail(string name, string word);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType2`2<Type, string> <FillFrom>b__3_3(Type type);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Binders.MvxRegistryFillerExtensions : object {
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IEnumerable`1<Assembly> assemblies, IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IEnumerable`1<Assembly> assemblies);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, IEnumerable`1<Assembly> assemblies);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, Assembly assembly);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, Assembly assembly);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, IMvxNamedInstanceRegistryFiller`1<T> filler, Type type);
    [ExtensionAttribute]
public static void Fill(IMvxNamedInstanceRegistry`1<T> registry, Type type);
}
public class MvvmCross.Binding.Binders.MvxValueConverterRegistry : MvxNamedInstanceRegistry`1<IMvxValueConverter> {
}
public class MvvmCross.Binding.Binders.MvxValueConverterRegistryFiller : MvxNamedInstanceRegistryFiller`1<IMvxValueConverter> {
    public virtual string FindName(Type type);
}
public interface MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription {
    public object ClearBindingKey { get; public set; }
    public abstract virtual object get_ClearBindingKey();
    public abstract virtual void set_ClearBindingKey(object value);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingContext {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataContextChanged(EventHandler value);
    public abstract virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, IEnumerable`1<MvxBindingDescription> firstBindingValue);
    public abstract virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, string firstBindingValue);
    public abstract virtual void RegisterBinding(object target, IMvxUpdateableBinding binding);
    public abstract virtual void RegisterBindingsWithClearKey(object clearKey, IEnumerable`1<KeyValuePair`2<object, IMvxUpdateableBinding>> bindings);
    public abstract virtual void RegisterBindingWithClearKey(object clearKey, object target, IMvxUpdateableBinding binding);
    public abstract virtual void ClearBindings(object clearKey);
    public abstract virtual void ClearAllBindings();
    public abstract virtual void DelayBind(Action action);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingContextOwner {
    public IMvxBindingContext BindingContext { get; public set; }
    public abstract virtual IMvxBindingContext get_BindingContext();
    public abstract virtual void set_BindingContext(IMvxBindingContext value);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingContextStack`1 {
    public TContext Current { get; }
    public abstract virtual TContext get_Current();
    public abstract virtual void Push(TContext context);
    public abstract virtual TContext Pop();
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingNameLookup {
    public abstract virtual string DefaultFor(Type type);
}
public interface MvvmCross.Binding.BindingContext.IMvxBindingNameRegistry {
    public abstract virtual void AddOrOverwrite(Type type, string name);
    public abstract virtual void AddOrOverwrite(Expression`1<Func`2<T, object>> nameExpression);
}
public class MvvmCross.Binding.BindingContext.MvxBaseFluentBindingDescription`1 : MvxApplicableTo`1<TTarget> {
    private TTarget _target;
    private IMvxBindingContextOwner _bindingContextOwner;
    private MvxBindingDescription _bindingDescription;
    private MvxSourceStepDescription _sourceStepDescription;
    private ISourceSpec<TTarget> _sourceSpec;
    [CompilerGeneratedAttribute]
private object <ClearBindingKey>k__BackingField;
    protected object ClearBindingKey { get; protected set; }
    private object MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription.ClearBindingKey { get; private set; }
    protected MvxBindingDescription BindingDescription { get; }
    protected MvxSourceStepDescription SourceStepDescription { get; }
    public MvxBaseFluentBindingDescription`1(IMvxBindingContextOwner bindingContextOwner, TTarget target);
    [CompilerGeneratedAttribute]
protected object get_ClearBindingKey();
    [CompilerGeneratedAttribute]
protected void set_ClearBindingKey(object value);
    private sealed virtual override object MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription.get_ClearBindingKey();
    private sealed virtual override void MvvmCross.Binding.BindingContext.IMvxBaseFluentBindingDescription.set_ClearBindingKey(object value);
    protected MvxBindingDescription get_BindingDescription();
    protected MvxSourceStepDescription get_SourceStepDescription();
    protected void SetFreeTextPropertyPath(string sourcePropertyPath);
    protected void SetKnownTextPropertyPath(string sourcePropertyPath);
    protected void SetCombiner(IMvxValueCombiner combiner, String[] properties, bool useParser);
    protected void SourceOverwrite(MvxBindingDescription bindingDescription);
    protected void FullOverwrite(MvxBindingDescription bindingDescription);
    protected static string TargetPropertyName(Expression`1<Func`2<TTarget, object>> targetPropertyPath);
    protected static string SourcePropertyPath(Expression`1<Func`2<TSource, object>> sourceProperty);
    protected static IMvxValueConverter ValueConverterFromName(string converterName);
    protected MvxBindingDescription CreateBindingDescription();
    public virtual void Apply();
    public virtual void ApplyTo(TTarget what);
    protected void EnsureTargetNameSet();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.BindingContext.MvxBindExtensions : object {
    [ExtensionAttribute]
public static MvxInlineBindingTarget`1<TViewModel> CreateInlineBindingTarget(IMvxBindingContextOwner bindingContextOwner);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, string descriptionText);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, string converterName, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<T, object>> targetPropertyPath, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, string converterName, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, Expression`1<Func`2<T, object>> targetPropertyPath, Expression`1<Func`2<TViewModel, object>> sourcePropertyPath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, MvxInlineBindingTarget`1<TViewModel> target, string targetPath, string sourcePath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [ExtensionAttribute]
public static T Bind(T element, IMvxBindingContextOwner bindingContextOwner, string descriptionText);
    [ExtensionAttribute]
public static T Bind(T element, IMvxBindingContextOwner bindingContextOwner, IEnumerable`1<MvxBindingDescription> descriptions);
}
public class MvvmCross.Binding.BindingContext.MvxBindingContext : object {
    private List`1<Action> _delayedActions;
    private List`1<TargetAndBinding> _directBindings;
    private List`1<KeyValuePair`2<object, IList`1<TargetAndBinding>>> _viewBindings;
    private object _dataContext;
    private IMvxBinder _binder;
    [CompilerGeneratedAttribute]
private EventHandler DataContextChanged;
    protected IMvxBinder Binder { get; }
    public object DataContext { get; public set; }
    public MvxBindingContext(object dataContext);
    public MvxBindingContext(IDictionary`2<object, string> firstBindings);
    public MvxBindingContext(object dataContext, IDictionary`2<object, string> firstBindings);
    public MvxBindingContext(IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> firstBindings);
    public MvxBindingContext(object dataContext, IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> firstBindings);
    public MvxBindingContext Init(object dataContext, IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> firstBindings);
    public MvxBindingContext Init(object dataContext, IDictionary`2<object, string> firstBindings);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, IEnumerable`1<MvxBindingDescription> firstBindingValue);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, string firstBindingValue);
    private void AddDelayedAction(object key, string value);
    private void AddDelayedAction(object key, IEnumerable`1<MvxBindingDescription> value);
    private void AddDelayedAction(KeyValuePair`2<object, string> kvp);
    private void AddDelayedAction(KeyValuePair`2<object, IEnumerable`1<MvxBindingDescription>> kvp);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected IMvxBinder get_Binder();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataContextChanged(EventHandler value);
    protected virtual void OnDataContextChange();
    public virtual void DelayBind(Action action);
    public virtual void RegisterBinding(object target, IMvxUpdateableBinding binding);
    public virtual void RegisterBindingsWithClearKey(object clearKey, IEnumerable`1<KeyValuePair`2<object, IMvxUpdateableBinding>> bindings);
    public virtual void RegisterBindingWithClearKey(object clearKey, object target, IMvxUpdateableBinding binding);
    public virtual void ClearBindings(object clearKey);
    public virtual void ClearAllBindings();
    protected virtual void ClearAllDelayedBindings();
    protected virtual void ClearAllDirectBindings();
    protected virtual void ClearAllViewBindings();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.BindingContext.MvxBindingContextOwnerExtensions : object {
    public static IMvxLanguageBindingParser LanguageParser { get; }
    public static IMvxPropertyExpressionParser PropertyExpressionParser { get; }
    public static IMvxValueConverterLookup ValueConverterLookup { get; }
    public static IMvxBindingNameLookup DefaultBindingNameLookup { get; }
    public static IMvxBinder Binder { get; }
    [ExtensionAttribute]
public static void ClearBindings(IMvxBindingContextOwner owner, object target);
    [ExtensionAttribute]
public static void ClearAllBindings(IMvxBindingContextOwner owner);
    [ExtensionAttribute]
public static void CreateBindingContext(IMvxBindingContextOwner view);
    [ExtensionAttribute]
public static void CreateBindingContext(IMvxBindingContextOwner view, string bindingText);
    [ExtensionAttribute]
public static void CreateBindingContext(IMvxBindingContextOwner view, IEnumerable`1<MvxBindingDescription> bindings);
    [ExtensionAttribute]
public static void DelayBind(IMvxBindingContextOwner view, Action bindingAction);
    [ExtensionAttribute]
public static void AddBinding(IMvxBindingContextOwner view, object target, IMvxUpdateableBinding binding, object clearKey);
    [ExtensionAttribute]
public static void AddBinding(IMvxBindingContextOwner view, object target, MvxBindingDescription bindingDescription, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, object target, IEnumerable`1<IMvxUpdateableBinding> bindings, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, object target, string bindingText, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, object target, IEnumerable`1<MvxBindingDescription> bindingDescriptions, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, IDictionary`2<object, string> bindingMap, object clearKey);
    [ExtensionAttribute]
public static void AddBindings(IMvxBindingContextOwner view, IDictionary`2<object, IEnumerable`1<MvxBindingDescription>> bindingMap, object clearKey);
    [ExtensionAttribute]
public static MvxFluentBindingDescriptionSet`2<TTarget, TSource> CreateBindingSet(TTarget target);
    [ExtensionAttribute]
public static MvxFluentBindingDescriptionSet`2<TTarget, TSource> CreateBindingSet(TTarget target, string clearBindingKey);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`1<TTarget> CreateBinding(TTarget target);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`1<TTarget> CreateBinding(IMvxBindingContextOwner contextOwner, TTarget target);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, string sourceKey);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, string sourceKey, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, string sourceKey, Expression`1<Func`2<TViewModel, IMvxTextProvider>> textProvider, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, Expression`1<Func`2<TTarget, object>> targetPropertyExpression, string sourceKey, string sourcePropertyName, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, TTarget target, Expression`1<Func`2<TTarget, object>> targetPropertyExpression, string sourceKey, Expression`1<Func`2<TViewModel, IMvxLanguageBinder>> sourcePropertyExpression, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, string targetPropertyName, string sourceKey, string sourcePropertyName, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void BindLanguage(IMvxBindingContextOwner owner, object target, string targetPropertyName, string sourceKey, string sourcePropertyName, string fallbackValue, string converterName, MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static void AddLangBindings(IMvxBindingContextOwner view, object target, string bindingText);
    [ExtensionAttribute]
public static void AddLangBindings(IMvxBindingContextOwner view, IDictionary`2<object, string> lookup);
    public static IMvxLanguageBindingParser get_LanguageParser();
    public static IMvxPropertyExpressionParser get_PropertyExpressionParser();
    public static IMvxValueConverterLookup get_ValueConverterLookup();
    public static IMvxBindingNameLookup get_DefaultBindingNameLookup();
    public static IMvxBinder get_Binder();
}
public class MvvmCross.Binding.BindingContext.MvxBindingContextStack`1 : Stack`1<TContext> {
    public TContext Current { get; }
    public sealed virtual TContext get_Current();
    private sealed virtual override void MvvmCross.Binding.BindingContext.IMvxBindingContextStack<TContext>.Push(TContext context);
    private sealed virtual override TContext MvvmCross.Binding.BindingContext.IMvxBindingContextStack<TContext>.Pop();
}
public class MvvmCross.Binding.BindingContext.MvxBindingContextStackRegistration`1 : object {
    protected IMvxBindingContextStack`1<TBindingContext> Stack { get; }
    public MvxBindingContextStackRegistration`1(TBindingContext toRegister);
    protected IMvxBindingContextStack`1<TBindingContext> get_Stack();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class MvvmCross.Binding.BindingContext.MvxBindingNameRegistry : object {
    private Dictionary`2<Type, string> _lookup;
    public sealed virtual string DefaultFor(Type type);
    private bool TryDefaultFor(Type type, String& toReturn, bool includeInterfaces);
    public sealed virtual void AddOrOverwrite(Type type, string name);
    public sealed virtual void AddOrOverwrite(Expression`1<Func`2<T, object>> nameExpression);
}
public class MvvmCross.Binding.BindingContext.MvxFluentBindingDescription`1 : MvxBaseFluentBindingDescription`1<TTarget> {
    public MvxFluentBindingDescription`1(IMvxBindingContextOwner bindingContextOwner, TTarget target);
    public MvxFluentBindingDescription`1<TTarget> For(string targetPropertyName);
    public MvxFluentBindingDescription`1<TTarget> For(Expression`1<Func`2<TTarget, object>> targetPropertyPath);
    public MvxFluentBindingDescription`1<TTarget> TwoWay();
    public MvxFluentBindingDescription`1<TTarget> OneWay();
    public MvxFluentBindingDescription`1<TTarget> OneWayToSource();
    public MvxFluentBindingDescription`1<TTarget> OneTime();
    public MvxFluentBindingDescription`1<TTarget> Mode(MvxBindingMode mode);
    public MvxFluentBindingDescription`1<TTarget> To(string sourcePropertyPath);
    public MvxFluentBindingDescription`1<TTarget> To(Expression`1<Func`2<TSource, object>> sourceProperty);
    public MvxFluentBindingDescription`1<TTarget> CommandParameter(object parameter);
    public MvxFluentBindingDescription`1<TTarget> WithConversion(string converterName, object converterParameter);
    public MvxFluentBindingDescription`1<TTarget> WithConversion(IMvxValueConverter converter, object converterParameter);
    public MvxFluentBindingDescription`1<TTarget> WithConversion(object converterParameter);
    public MvxFluentBindingDescription`1<TTarget> WithFallback(object fallback);
    public MvxFluentBindingDescription`1<TTarget> SourceDescribed(string bindingDescription);
    public MvxFluentBindingDescription`1<TTarget> SourceDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`1<TTarget> FullyDescribed(string bindingDescription);
    public MvxFluentBindingDescription`1<TTarget> FullyDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`1<TTarget> WithClearBindingKey(object clearBindingKey);
}
public class MvvmCross.Binding.BindingContext.MvxFluentBindingDescription`2 : MvxBaseFluentBindingDescription`1<TTarget> {
    public MvxFluentBindingDescription`2(IMvxBindingContextOwner bindingContextOwner, TTarget target);
    public MvxFluentBindingDescription`2<TTarget, TSource> For(string targetPropertyName);
    public MvxFluentBindingDescription`2<TTarget, TSource> For(Expression`1<Func`2<TTarget, object>> targetPropertyPath);
    public MvxFluentBindingDescription`2<TTarget, TSource> TwoWay();
    public MvxFluentBindingDescription`2<TTarget, TSource> OneWay();
    public MvxFluentBindingDescription`2<TTarget, TSource> OneWayToSource();
    public MvxFluentBindingDescription`2<TTarget, TSource> OneTime();
    public MvxFluentBindingDescription`2<TTarget, TSource> Mode(MvxBindingMode mode);
    public MvxFluentBindingDescription`2<TTarget, TSource> To(string sourcePropertyPath);
    public MvxFluentBindingDescription`2<TTarget, TSource> To(Expression`1<Func`2<TSource, object>> sourceProperty);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(string combinerName, Expression`1[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(string combinerName, String[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(IMvxValueCombiner combiner, Expression`1[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(IMvxValueCombiner combiner, String[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(Expression`1[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> ByCombining(String[] properties);
    public MvxFluentBindingDescription`2<TTarget, TSource> CommandParameter(object parameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithConversion(string converterName, object converterParameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithConversion(IMvxValueConverter converter, object converterParameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithConversion(object converterParameter);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithFallback(object fallback);
    public MvxFluentBindingDescription`2<TTarget, TSource> SourceDescribed(string bindingDescription);
    public MvxFluentBindingDescription`2<TTarget, TSource> SourceDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`2<TTarget, TSource> FullyDescribed(string bindingDescription);
    public MvxFluentBindingDescription`2<TTarget, TSource> FullyDescribed(MvxBindingDescription description);
    public MvxFluentBindingDescription`2<TTarget, TSource> WithClearBindingKey(object clearBindingKey);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.BindingContext.MvxFluentBindingDescriptionExtensions : object {
    [ExtensionAttribute]
public static MvxFluentBindingDescription`2<TTarget, TSource> ToLocalizationId(MvxFluentBindingDescription`2<TTarget, TSource> bindingDescription, string localizationId);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`2<TTarget, TSource> WithDictionaryConversion(MvxFluentBindingDescription`2<TTarget, TSource> bindingDescription, IDictionary`2<TFrom, TTo> converterParameter);
    [ExtensionAttribute]
public static MvxFluentBindingDescription`2<TTarget, TSource> WithDictionaryConversion(MvxFluentBindingDescription`2<TTarget, TSource> bindingDescription, IDictionary`2<TFrom, TTo> converterParameter, TTo fallback);
}
public class MvvmCross.Binding.BindingContext.MvxFluentBindingDescriptionSet`2 : MvxApplicable {
    private List`1<IMvxApplicable> _applicables;
    private TOwningTarget _bindingContextOwner;
    private string _clearBindingKey;
    public MvxFluentBindingDescriptionSet`2(TOwningTarget bindingContextOwner);
    public MvxFluentBindingDescriptionSet`2(TOwningTarget bindingContextOwner, string clearBindingKey);
    public MvxFluentBindingDescription`2<TOwningTarget, TSource> Bind();
    public MvxFluentBindingDescription`2<TChildTarget, TSource> Bind(TChildTarget childTarget);
    public MvxFluentBindingDescription`2<TChildTarget, TSource> Bind(TChildTarget childTarget, string bindingDescription);
    public MvxFluentBindingDescription`2<TChildTarget, TSource> Bind(TChildTarget childTarget, MvxBindingDescription bindingDescription);
    public virtual void Apply();
    public void ApplyWithClearBindingKey(object clearBindingKey);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class MvvmCross.Binding.BindingContext.MvxInlineBindingTarget`1 : object {
    [CompilerGeneratedAttribute]
private IMvxBindingContextOwner <BindingContextOwner>k__BackingField;
    public IMvxBindingContextOwner BindingContextOwner { get; private set; }
    public MvxInlineBindingTarget`1(IMvxBindingContextOwner bindingContextOwner);
    [CompilerGeneratedAttribute]
public IMvxBindingContextOwner get_BindingContextOwner();
    [CompilerGeneratedAttribute]
private void set_BindingContextOwner(IMvxBindingContextOwner value);
}
public class MvvmCross.Binding.BindingContext.MvxTaskBasedBindingContext : object {
    private List`1<Action> _delayedActions;
    private List`1<TargetAndBinding> _directBindings;
    private List`1<KeyValuePair`2<object, IList`1<TargetAndBinding>>> _viewBindings;
    private object _dataContext;
    private IMvxBinder _binder;
    [CompilerGeneratedAttribute]
private bool <RunSynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler DataContextChanged;
    public bool RunSynchronously { get; public set; }
    protected IMvxBinder Binder { get; }
    public object DataContext { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RunSynchronously();
    [CompilerGeneratedAttribute]
public void set_RunSynchronously(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataContextChanged(EventHandler value);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, IEnumerable`1<MvxBindingDescription> firstBindingValue);
    public sealed virtual IMvxBindingContext Init(object dataContext, object firstBindingKey, string firstBindingValue);
    private void AddDelayedAction(object key, string value);
    private void AddDelayedAction(object key, IEnumerable`1<MvxBindingDescription> value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected IMvxBinder get_Binder();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    protected virtual void OnDataContextChange();
    private void SetBindings(List`1<KeyValuePair`2<object, IList`1<TargetAndBinding>>> viewBindings, List`1<TargetAndBinding> bindings);
    public virtual void DelayBind(Action action);
    public virtual void RegisterBinding(object target, IMvxUpdateableBinding binding);
    public virtual void RegisterBindingsWithClearKey(object clearKey, IEnumerable`1<KeyValuePair`2<object, IMvxUpdateableBinding>> bindings);
    public virtual void RegisterBindingWithClearKey(object clearKey, object target, IMvxUpdateableBinding binding);
    public virtual void ClearBindings(object clearKey);
    public virtual void ClearAllBindings();
    protected virtual void ClearAllDelayedBindings();
    protected virtual void ClearAllDirectBindings();
    protected virtual void ClearAllViewBindings();
}
public interface MvvmCross.Binding.Bindings.IMvxBinding {
}
public interface MvvmCross.Binding.Bindings.IMvxUpdateableBinding {
    public object DataContext { get; public set; }
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
}
public abstract class MvvmCross.Binding.Bindings.MvxBinding : object {
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Binding.Bindings.MvxBindingDescription : object {
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxSourceStepDescription <Source>k__BackingField;
    public string TargetName { get; public set; }
    public MvxBindingMode Mode { get; public set; }
    public MvxSourceStepDescription Source { get; public set; }
    public MvxBindingDescription(string targetName, string sourcePropertyPath, IMvxValueConverter converter, object converterParameter, object fallbackValue, MvxBindingMode mode);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public void set_TargetName(string value);
    [CompilerGeneratedAttribute]
public MvxBindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(MvxBindingMode value);
    [CompilerGeneratedAttribute]
public MvxSourceStepDescription get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(MvxSourceStepDescription value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Bindings.MvxBindingModeExtensions : object {
    [ExtensionAttribute]
public static MvxBindingMode IfDefault(MvxBindingMode bindingMode, MvxBindingMode modeIfDefault);
    [ExtensionAttribute]
public static bool RequireSourceObservation(MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static bool RequiresTargetObservation(MvxBindingMode bindingMode);
    [ExtensionAttribute]
public static bool RequireTargetUpdateOnFirstBind(MvxBindingMode bindingMode);
}
public class MvvmCross.Binding.Bindings.MvxCompositeBinding : MvxBinding {
    private List`1<IMvxBinding> _bindings;
    public MvxCompositeBinding(IMvxBinding[] args);
    public void Add(IMvxBinding[] args);
    protected virtual void Dispose(bool isDisposing);
}
public class MvvmCross.Binding.Bindings.MvxFullBinding : MvxBinding {
    private MvxBindingDescription _bindingDescription;
    private IMvxSourceStep _sourceStep;
    private IMvxTargetBinding _targetBinding;
    private object _targetLocker;
    private object _dataContext;
    private EventHandler _sourceBindingOnChanged;
    private EventHandler`1<MvxTargetChangedEventArgs> _targetBindingOnValueChanged;
    private object _defaultTargetValue;
    private CancellationTokenSource _cancelSource;
    private IMvxSourceStepFactory SourceStepFactory { get; }
    private IMvxTargetBindingFactory TargetBindingFactory { get; }
    private IMvxMainThreadAsyncDispatcher dispatcher { get; }
    public object DataContext { get; public set; }
    protected bool NeedToObserveSourceChanges { get; }
    protected bool NeedToObserveTargetChanges { get; }
    protected bool NeedToUpdateTargetOnBind { get; }
    protected MvxBindingMode ActualBindingMode { get; }
    public MvxFullBinding(MvxBindingRequest bindingRequest);
    private IMvxSourceStepFactory get_SourceStepFactory();
    private IMvxTargetBindingFactory get_TargetBindingFactory();
    private IMvxMainThreadAsyncDispatcher get_dispatcher();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    protected virtual void ClearSourceBinding();
    private void CreateSourceBinding(object source);
    private void UpdateTargetOnBind();
    protected virtual void ClearTargetBinding();
    private void CreateTargetBinding(object target);
    [AsyncStateMachineAttribute("MvvmCross.Binding.Bindings.MvxFullBinding/<UpdateTargetFromSource>d__24")]
private void UpdateTargetFromSource(object value, CancellationToken cancel);
    private void UpdateSourceFromTarget(object value);
    protected bool get_NeedToObserveSourceChanges();
    protected bool get_NeedToObserveTargetChanges();
    protected bool get_NeedToUpdateTargetOnBind();
    protected MvxBindingMode get_ActualBindingMode();
    protected virtual void Dispose(bool isDisposing);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <CreateSourceBinding>b__20_0(object sender, EventArgs args);
    [CompilerGeneratedAttribute]
private void <CreateTargetBinding>b__23_0(object sender, MvxTargetChangedEventArgs args);
}
public abstract class MvvmCross.Binding.Bindings.Source.Chained.MvxChainedSourceBinding : MvxPropertyInfoSourceBinding {
    private IList`1<MvxPropertyToken> _childTokens;
    private IMvxSourceBinding _currentChildBinding;
    private IMvxSourceBindingFactory SourceBindingFactory { get; }
    public Type SourceType { get; }
    protected MvxChainedSourceBinding(object source, PropertyInfo propertyInfo, IList`1<MvxPropertyToken> childTokens);
    protected virtual void Dispose(bool isDisposing);
    private IMvxSourceBindingFactory get_SourceBindingFactory();
    public virtual Type get_SourceType();
    protected void UpdateChildBinding();
    protected abstract virtual Object[] PropertyIndexParameters();
    private void ChildSourceBindingChanged(object sender, EventArgs e);
    protected virtual void OnBoundPropertyChanged();
    public virtual object GetValue();
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Source.Chained.MvxIndexerChainedSourceBinding : MvxChainedSourceBinding {
    private MvxIndexerPropertyToken _indexerPropertyToken;
    public MvxIndexerChainedSourceBinding(object source, PropertyInfo itemPropertyInfo, MvxIndexerPropertyToken indexerPropertyToken, IList`1<MvxPropertyToken> childTokens);
    protected virtual Object[] PropertyIndexParameters();
}
public class MvvmCross.Binding.Bindings.Source.Chained.MvxSimpleChainedSourceBinding : MvxChainedSourceBinding {
    public MvxSimpleChainedSourceBinding(object source, PropertyInfo propertyInfo, IList`1<MvxPropertyToken> childTokens);
    protected virtual Object[] PropertyIndexParameters();
}
public interface MvvmCross.Binding.Bindings.Source.Construction.IMvxSourceBindingFactory {
    public abstract virtual IMvxSourceBinding CreateBinding(object source, string combinedPropertyName);
    public abstract virtual IMvxSourceBinding CreateBinding(object source, IList`1<MvxPropertyToken> tokens);
}
public interface MvvmCross.Binding.Bindings.Source.Construction.IMvxSourceBindingFactoryExtension {
    public abstract virtual bool TryCreateBinding(object source, MvxPropertyToken propertyToken, List`1<MvxPropertyToken> remainingTokens, IMvxSourceBinding& result);
}
public interface MvvmCross.Binding.Bindings.Source.Construction.IMvxSourceBindingFactoryExtensionHost {
    public IList`1<IMvxSourceBindingFactoryExtension> Extensions { get; }
    public abstract virtual IList`1<IMvxSourceBindingFactoryExtension> get_Extensions();
}
public class MvvmCross.Binding.Bindings.Source.Construction.MvxPropertySourceBindingFactoryExtension : object {
    private static ConcurrentDictionary`2<int, PropertyInfo> PropertyInfoCache;
    private static MvxPropertySourceBindingFactoryExtension();
    public sealed virtual bool TryCreateBinding(object source, MvxPropertyToken currentToken, List`1<MvxPropertyToken> remainingTokens, IMvxSourceBinding& result);
    protected virtual MvxChainedSourceBinding CreateChainedBinding(object source, MvxPropertyToken propertyToken, List`1<MvxPropertyToken> remainingTokens);
    protected virtual IMvxSourceBinding CreateLeafBinding(object source, MvxPropertyToken propertyToken);
    protected PropertyInfo FindPropertyInfo(object source, string propertyName);
}
public class MvvmCross.Binding.Bindings.Source.Construction.MvxSourceBindingFactory : object {
    private IMvxSourcePropertyPathParser _propertyPathParser;
    private List`1<IMvxSourceBindingFactoryExtension> _extensions;
    protected IMvxSourcePropertyPathParser SourcePropertyPathParser { get; }
    public IList`1<IMvxSourceBindingFactoryExtension> Extensions { get; }
    protected IMvxSourcePropertyPathParser get_SourcePropertyPathParser();
    protected bool TryCreateBindingFromExtensions(object source, MvxPropertyToken propertyToken, List`1<MvxPropertyToken> remainingTokens, IMvxSourceBinding& result);
    public sealed virtual IMvxSourceBinding CreateBinding(object source, string combinedPropertyName);
    public sealed virtual IMvxSourceBinding CreateBinding(object source, IList`1<MvxPropertyToken> tokens);
    public sealed virtual IList`1<IMvxSourceBindingFactoryExtension> get_Extensions();
}
public interface MvvmCross.Binding.Bindings.Source.IMvxSourceBinding {
    public Type SourceType { get; }
    public abstract virtual Type get_SourceType();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
    public abstract virtual object GetValue();
}
public class MvvmCross.Binding.Bindings.Source.Leaf.MvxDirectToSourceBinding : MvxSourceBinding {
    public Type SourceType { get; }
    public MvxDirectToSourceBinding(object source);
    public virtual Type get_SourceType();
    public virtual void SetValue(object value);
    public virtual object GetValue();
}
public class MvvmCross.Binding.Bindings.Source.Leaf.MvxIndexerLeafPropertyInfoSourceBinding : MvxLeafPropertyInfoSourceBinding {
    private object _key;
    public MvxIndexerLeafPropertyInfoSourceBinding(object source, PropertyInfo itemPropertyInfo, MvxIndexerPropertyToken indexToken);
    protected virtual Object[] PropertyIndexParameters();
}
public abstract class MvvmCross.Binding.Bindings.Source.Leaf.MvxLeafPropertyInfoSourceBinding : MvxPropertyInfoSourceBinding {
    public Type SourceType { get; }
    protected MvxLeafPropertyInfoSourceBinding(object source, PropertyInfo propertyInfo);
    public virtual Type get_SourceType();
    protected virtual void OnBoundPropertyChanged();
    public virtual object GetValue();
    protected abstract virtual Object[] PropertyIndexParameters();
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Source.Leaf.MvxSimpleLeafPropertyInfoSourceBinding : MvxLeafPropertyInfoSourceBinding {
    public MvxSimpleLeafPropertyInfoSourceBinding(object source, PropertyInfo propertyInfo);
    protected virtual Object[] PropertyIndexParameters();
}
public class MvvmCross.Binding.Bindings.Source.MvxMissingSourceBinding : MvxSourceBinding {
    public Type SourceType { get; }
    public MvxMissingSourceBinding(object source);
    public virtual void SetValue(object value);
    public virtual Type get_SourceType();
    public virtual object GetValue();
}
public abstract class MvvmCross.Binding.Bindings.Source.MvxPropertyInfoSourceBinding : MvxSourceBinding {
    private PropertyInfo _propertyInfo;
    private string _propertyName;
    private IDisposable _subscription;
    protected string PropertyName { get; }
    protected string PropertyNameForChangedEvent { get; }
    protected PropertyInfo PropertyInfo { get; }
    protected bool IsIndexedProperty { get; }
    protected MvxPropertyInfoSourceBinding(object source, PropertyInfo propertyInfo);
    protected string get_PropertyName();
    protected string get_PropertyNameForChangedEvent();
    protected PropertyInfo get_PropertyInfo();
    protected bool get_IsIndexedProperty();
    protected virtual void Dispose(bool isDisposing);
    public void SourcePropertyChanged(object sender, PropertyChangedEventArgs e);
    protected abstract virtual void OnBoundPropertyChanged();
}
public abstract class MvvmCross.Binding.Bindings.Source.MvxSourceBinding : MvxBinding {
    private object _source;
    [CompilerGeneratedAttribute]
private EventHandler Changed;
    protected object Source { get; }
    public Type SourceType { get; }
    protected MvxSourceBinding(object source);
    protected object get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Changed(EventHandler value);
    public abstract virtual void SetValue(object value);
    public abstract virtual Type get_SourceType();
    public abstract virtual object GetValue();
    protected void FireChanged();
    protected bool EqualsCurrentValue(object testValue);
}
public class MvvmCross.Binding.Bindings.Source.MvxSourcePropertyBindingEventArgs : EventArgs {
    private object _value;
    public object Value { get; }
    public MvxSourcePropertyBindingEventArgs(object value);
    public MvxSourcePropertyBindingEventArgs(IMvxSourceBinding propertySourceBinding);
    public object get_Value();
}
public interface MvvmCross.Binding.Bindings.SourceSteps.IMvxSourceStep {
    public Type TargetType { get; public set; }
    public Type SourceType { get; }
    public object DataContext { get; public set; }
    public abstract virtual Type get_TargetType();
    public abstract virtual void set_TargetType(Type value);
    public abstract virtual Type get_SourceType();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(EventHandler value);
    public abstract virtual object GetValue();
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
}
public interface MvvmCross.Binding.Bindings.SourceSteps.IMvxSourceStepFactory {
    public abstract virtual IMvxSourceStep Create(MvxSourceStepDescription description);
}
public interface MvvmCross.Binding.Bindings.SourceSteps.IMvxSourceStepFactoryRegistry {
    public abstract virtual void AddOrOverwrite(Type type, IMvxSourceStepFactory factory);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxCombinerSourceStep : MvxSourceStep`1<MvxCombinerSourceStepDescription> {
    private List`1<IMvxSourceStep> _subSteps;
    private bool _isSubscribeToChangedEvents;
    public Type TargetType { get; public set; }
    public Type SourceType { get; }
    public MvxCombinerSourceStep(MvxCombinerSourceStepDescription description);
    protected virtual void Dispose(bool isDisposing);
    protected virtual void OnFirstChangeListenerAdded();
    public virtual Type get_TargetType();
    public virtual void set_TargetType(Type value);
    private void SetSubTypeTargetTypes();
    private void SubscribeToChangedEvents();
    protected virtual void OnLastChangeListenerRemoved();
    private void UnsubscribeFromChangedEvents();
    private void SubStepOnChanged(object sender, EventArgs args);
    protected virtual void OnDataContextChanged();
    public virtual Type get_SourceType();
    protected virtual void SetSourceValue(object sourceValue);
    protected virtual object GetSourceValue();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxCombinerSourceStepDescription : MvxSourceStepDescription {
    [CompilerGeneratedAttribute]
private IMvxValueCombiner <Combiner>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MvxSourceStepDescription> <InnerSteps>k__BackingField;
    public IMvxValueCombiner Combiner { get; public set; }
    public List`1<MvxSourceStepDescription> InnerSteps { get; public set; }
    [CompilerGeneratedAttribute]
public IMvxValueCombiner get_Combiner();
    [CompilerGeneratedAttribute]
public void set_Combiner(IMvxValueCombiner value);
    [CompilerGeneratedAttribute]
public List`1<MvxSourceStepDescription> get_InnerSteps();
    [CompilerGeneratedAttribute]
public void set_InnerSteps(List`1<MvxSourceStepDescription> value);
    public virtual string ToString();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxCombinerSourceStepFactory : MvxTypedSourceStepFactory`1<MvxCombinerSourceStepDescription> {
    protected virtual IMvxSourceStep TypedCreate(MvxCombinerSourceStepDescription description);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxLiteralSourceStep : MvxSourceStep`1<MvxLiteralSourceStepDescription> {
    public Type SourceType { get; }
    public MvxLiteralSourceStep(MvxLiteralSourceStepDescription description);
    public virtual Type get_SourceType();
    protected virtual void SetSourceValue(object sourceValue);
    protected virtual object GetSourceValue();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxLiteralSourceStepDescription : MvxSourceStepDescription {
    [CompilerGeneratedAttribute]
private object <Literal>k__BackingField;
    public object Literal { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Literal();
    [CompilerGeneratedAttribute]
public void set_Literal(object value);
    public virtual string ToString();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxLiteralSourceStepFactory : MvxTypedSourceStepFactory`1<MvxLiteralSourceStepDescription> {
    protected virtual IMvxSourceStep TypedCreate(MvxLiteralSourceStepDescription description);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxPathSourceStep : MvxSourceStep`1<MvxPathSourceStepDescription> {
    private IMvxSourceBinding _sourceBinding;
    private object _sourceLocker;
    private IMvxSourceBindingFactory SourceBindingFactory { get; }
    public Type SourceType { get; }
    public MvxPathSourceStep(MvxPathSourceStepDescription description);
    private IMvxSourceBindingFactory get_SourceBindingFactory();
    protected virtual void Dispose(bool isDisposing);
    public virtual Type get_SourceType();
    protected virtual void OnDataContextChanged();
    private void ClearPathSourceBinding();
    private void SourceBindingOnChanged(object sender, EventArgs args);
    protected virtual void SetSourceValue(object sourceValue);
    protected virtual object GetSourceValue();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxPathSourceStepDescription : MvxSourceStepDescription {
    [CompilerGeneratedAttribute]
private string <SourcePropertyPath>k__BackingField;
    public string SourcePropertyPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourcePropertyPath();
    [CompilerGeneratedAttribute]
public void set_SourcePropertyPath(string value);
    public virtual string ToString();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxPathSourceStepFactory : MvxTypedSourceStepFactory`1<MvxPathSourceStepDescription> {
    protected virtual IMvxSourceStep TypedCreate(MvxPathSourceStepDescription description);
}
public abstract class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStep : object {
    private MvxSourceStepDescription _description;
    private object _dataContext;
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler _changed;
    protected MvxSourceStepDescription Description { get; }
    public Type TargetType { get; public set; }
    public Type SourceType { get; }
    public object DataContext { get; public set; }
    protected MvxSourceStep(MvxSourceStepDescription description);
    protected MvxSourceStepDescription get_Description();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    [CompilerGeneratedAttribute]
public virtual Type get_TargetType();
    [CompilerGeneratedAttribute]
public virtual void set_TargetType(Type value);
    public virtual Type get_SourceType();
    public sealed virtual object get_DataContext();
    public sealed virtual void set_DataContext(object value);
    protected virtual void OnDataContextChanged();
    public sealed virtual void SetValue(object value);
    private object ApplyValueConverterTargetToSource(object value);
    private object ApplyValueConverterSourceToTarget(object value);
    protected abstract virtual void SetSourceValue(object sourceValue);
    protected virtual void SendSourcePropertyChanged();
    private object ConvertSourceToTarget(object value);
    [CompilerGeneratedAttribute]
private void add__changed(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__changed(EventHandler value);
    public sealed virtual void add_Changed(EventHandler value);
    public sealed virtual void remove_Changed(EventHandler value);
    protected virtual void OnLastChangeListenerRemoved();
    protected virtual void OnFirstChangeListenerAdded();
    public sealed virtual object GetValue();
    protected abstract virtual object GetSourceValue();
}
public abstract class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStep`1 : MvxSourceStep {
    protected T Description { get; }
    protected MvxSourceStep`1(T description);
    protected T get_Description();
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStepDescription : object {
    [CompilerGeneratedAttribute]
private IMvxValueConverter <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    public IMvxValueConverter Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public object FallbackValue { get; public set; }
    [CompilerGeneratedAttribute]
public IMvxValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(IMvxValueConverter value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public object get_FallbackValue();
    [CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
}
public class MvvmCross.Binding.Bindings.SourceSteps.MvxSourceStepFactory : object {
    private Dictionary`2<Type, IMvxSourceStepFactory> _subFactories;
    public sealed virtual void AddOrOverwrite(Type type, IMvxSourceStepFactory factory);
    public sealed virtual IMvxSourceStep Create(MvxSourceStepDescription description);
}
public abstract class MvvmCross.Binding.Bindings.SourceSteps.MvxTypedSourceStepFactory`1 : object {
    public sealed virtual IMvxSourceStep Create(MvxSourceStepDescription description);
    protected abstract virtual IMvxSourceStep TypedCreate(T description);
}
public interface MvvmCross.Binding.Bindings.Target.Construction.IMvxPluginTargetBindingFactory {
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public abstract virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
}
public interface MvvmCross.Binding.Bindings.Target.Construction.IMvxTargetBindingFactory {
    public abstract virtual IMvxTargetBinding CreateBinding(object target, string targetName);
}
public interface MvvmCross.Binding.Bindings.Target.Construction.IMvxTargetBindingFactoryRegistry {
    public abstract virtual void RegisterFactory(IMvxPluginTargetBindingFactory factory);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxCustomBindingFactory`1 : object {
    private Func`2<TTarget, IMvxTargetBinding> _targetBindingCreator;
    private string _targetFakePropertyName;
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public MvxCustomBindingFactory`1(string targetFakePropertyName, Func`2<TTarget, IMvxTargetBinding> targetBindingCreator);
    public sealed virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
    public sealed virtual IMvxTargetBinding CreateBinding(object target, string targetName);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxPropertyInfoTargetBindingFactory : object {
    private Func`3<object, PropertyInfo, IMvxTargetBinding> _bindingCreator;
    private string _targetName;
    private Type _targetType;
    protected Type TargetType { get; }
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public MvxPropertyInfoTargetBindingFactory(Type targetType, string targetName, Func`3<object, PropertyInfo, IMvxTargetBinding> bindingCreator);
    protected Type get_TargetType();
    public sealed virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
    public sealed virtual IMvxTargetBinding CreateBinding(object target, string targetName);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxSimplePropertyInfoTargetBindingFactory : object {
    private Type _bindingType;
    private MvxPropertyInfoTargetBindingFactory _innerFactory;
    public IEnumerable`1<MvxTypeAndNamePair> SupportedTypes { get; }
    public MvxSimplePropertyInfoTargetBindingFactory(Type bindingType, Type targetType, string targetName);
    public sealed virtual IEnumerable`1<MvxTypeAndNamePair> get_SupportedTypes();
    public sealed virtual IMvxTargetBinding CreateBinding(object target, string targetName);
    private IMvxTargetBinding CreateTargetBinding(object target, PropertyInfo targetPropertyInfo);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxTargetBindingFactoryRegistry : object {
    private Dictionary`2<int, IMvxPluginTargetBindingFactory> _lookups;
    public virtual IMvxTargetBinding CreateBinding(object target, string targetName);
    protected virtual bool TryCreateReflectionBasedBinding(object target, string targetName, IMvxTargetBinding& binding);
    protected virtual bool TryCreateSpecificFactoryBinding(object target, string targetName, IMvxTargetBinding& binding);
    public sealed virtual void RegisterFactory(IMvxPluginTargetBindingFactory factory);
    private static int GenerateKey(Type type, string name);
    private IMvxPluginTargetBindingFactory FindSpecificFactory(Type type, string name);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Bindings.Target.Construction.MvxTargetBindingFactoryRegistryExtensions : object {
    [ExtensionAttribute]
public static void RegisterCustomBindingFactory(IMvxTargetBindingFactoryRegistry registry, string customName, Func`2<TView, IMvxTargetBinding> creator);
    [ExtensionAttribute]
public static void RegisterPropertyInfoBindingFactory(IMvxTargetBindingFactoryRegistry registry, Type bindingType, Type targetType, string targetName);
}
public class MvvmCross.Binding.Bindings.Target.Construction.MvxTypeAndNamePair : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type Type { get; public set; }
    public string Name { get; public set; }
    public MvxTypeAndNamePair(Type type, string name);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public interface MvvmCross.Binding.Bindings.Target.IMvxTargetBinding {
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public abstract virtual Type get_TargetValueType();
    public abstract virtual MvxBindingMode get_DefaultMode();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    public abstract virtual void SubscribeToEvents();
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxConvertingTargetBinding : MvxTargetBinding {
    private bool _isUpdatingSource;
    private bool _isUpdatingTarget;
    private object _updatingSourceWith;
    public MvxBindingMode DefaultMode { get; }
    protected MvxConvertingTargetBinding(object target);
    public virtual MvxBindingMode get_DefaultMode();
    protected abstract virtual void SetValueImpl(object target, object value);
    public virtual void SetValue(object value);
    protected virtual bool ShouldSkipSetValueForViewSpecificReasons(object target, object value);
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(object target, object value);
    protected virtual object MakeSafeValue(object value);
    protected sealed virtual void FireValueChanged(object newValue);
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxConvertingTargetBinding`2 : MvxTargetBinding`2<TTarget, TValue> {
    private bool _isUpdatingSource;
    private bool _isUpdatingTarget;
    private TValue _updatingSourceWith;
    public MvxBindingMode DefaultMode { get; }
    protected MvxConvertingTargetBinding`2(TTarget target);
    public virtual MvxBindingMode get_DefaultMode();
    protected abstract virtual void SetValueImpl(TTarget target, TValue value);
    protected virtual void SetValue(TValue value);
    protected virtual bool ShouldSkipSetValueForViewSpecificReasons(TTarget target, TValue value);
    protected virtual bool ShouldSkipSetValueForPlatformSpecificReasons(TTarget target, TValue value);
    protected virtual TValue MakeSafeValue(TValue value);
    protected sealed virtual void FireValueChanged(TValue newValue);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventHandlerEventInfoTargetBinding : MvxTargetBinding {
    private EventInfo _targetEventInfo;
    private ICommand _currentCommand;
    private object _eventHandler;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventHandlerEventInfoTargetBinding(object target, EventInfo targetEventInfo);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, EventArgs args);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventInfoTargetBinding`1 : MvxTargetBinding {
    private EventInfo _targetEventInfo;
    private ICommand _currentCommand;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventInfoTargetBinding`1(object target, EventInfo targetEventInfo);
    public virtual Type get_TargetValueType();
    public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, T args);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventNameTargetBinding`1 : MvxTargetBinding {
    private bool _useEventArgsAsCommandParameter;
    private IDisposable _eventSubscription;
    private ICommand _currentCommand;
    [CompilerGeneratedAttribute]
private Type <TargetValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultMode>k__BackingField;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventNameTargetBinding`1(TTarget target, string targetEventName, bool useEventArgsAsCommandParameter);
    [CompilerGeneratedAttribute]
public virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, EventArgs parameter);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxEventNameTargetBinding`2 : MvxTargetBinding {
    private bool _useEventArgsAsCommandParameter;
    private IDisposable _eventSubscription;
    private ICommand _currentCommand;
    [CompilerGeneratedAttribute]
private Type <TargetValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultMode>k__BackingField;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxEventNameTargetBinding`2(TTarget target, string targetEventName, bool useEventArgsAsCommandParameter);
    [CompilerGeneratedAttribute]
public virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public virtual MvxBindingMode get_DefaultMode();
    protected virtual void Dispose(bool isDisposing);
    private void HandleEvent(object sender, TEventArgs parameter);
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxNullTargetBinding : MvxTargetBinding {
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    public virtual MvxBindingMode get_DefaultMode();
    public virtual Type get_TargetValueType();
    public virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxPropertyInfoTargetBinding : MvxConvertingTargetBinding {
    private PropertyInfo _targetPropertyInfo;
    public Type TargetValueType { get; }
    protected PropertyInfo TargetPropertyInfo { get; }
    public MvxPropertyInfoTargetBinding(object target, PropertyInfo targetPropertyInfo);
    protected virtual void Dispose(bool isDisposing);
    public virtual Type get_TargetValueType();
    protected PropertyInfo get_TargetPropertyInfo();
    protected virtual void SetValueImpl(object target, object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxPropertyInfoTargetBinding`1 : MvxPropertyInfoTargetBinding {
    protected T View { get; }
    public MvxPropertyInfoTargetBinding`1(object target, PropertyInfo targetPropertyInfo);
    protected T get_View();
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxTargetBinding : MvxBinding {
    private WeakReference _target;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxTargetChangedEventArgs> ValueChanged;
    protected object Target { get; }
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    protected MvxTargetBinding(object target);
    protected object get_Target();
    public virtual void SubscribeToEvents();
    protected virtual void FireValueChanged(object newValue);
    public abstract virtual Type get_TargetValueType();
    public abstract virtual void SetValue(object value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    public abstract virtual MvxBindingMode get_DefaultMode();
}
public abstract class MvvmCross.Binding.Bindings.Target.MvxTargetBinding`2 : MvxBinding {
    private WeakReference`1<TTarget> _target;
    [CompilerGeneratedAttribute]
private EventHandler`1<MvxTargetChangedEventArgs> ValueChanged;
    protected TTarget Target { get; }
    public MvxBindingMode DefaultMode { get; }
    public Type TargetValueType { get; }
    protected MvxTargetBinding`2(TTarget target);
    protected TTarget get_Target();
    public virtual void SubscribeToEvents();
    protected virtual void FireValueChanged(TValue newValue);
    public abstract virtual MvxBindingMode get_DefaultMode();
    public sealed virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ValueChanged(EventHandler`1<MvxTargetChangedEventArgs> value);
    protected abstract virtual void SetValue(TValue value);
    public sealed virtual void SetValue(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxTargetChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; private set; }
    public MvxTargetChangedEventArgs(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
public class MvvmCross.Binding.Bindings.Target.MvxWithEventPropertyInfoTargetBinding : MvxPropertyInfoTargetBinding {
    private IDisposable _subscription;
    public MvxBindingMode DefaultMode { get; }
    public MvxWithEventPropertyInfoTargetBinding(object target, PropertyInfo targetPropertyInfo);
    public void OnValueChanged(object sender, EventArgs eventArgs);
    public void OnPropertyChanged(object sender, PropertyChangedEventArgs eventArgs);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SubscribeToEvents();
    private EventInfo GetNamedPropertyChangedEvent(Type viewType, string propertyName);
    private EventInfo GetPropertyChangedEvent(Type viewType);
    protected virtual void Dispose(bool isDisposing);
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombiner {
    public abstract virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    public abstract virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public abstract virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    public abstract virtual IEnumerable`1<Type> SubStepTargetTypes(IEnumerable`1<IMvxSourceStep> subSteps, Type overallTargetType);
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombinerLookup {
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombinerRegistry {
}
public interface MvvmCross.Binding.Combiners.IMvxValueCombinerRegistryFiller {
}
public class MvvmCross.Binding.Combiners.MvxAddValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxAndValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxBooleanValueCombiner : MvxValueCombiner {
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    protected abstract virtual bool TryCombine(List`1<bool> stepValues, Object& value);
    protected virtual bool TryConvertToBool(object objectValue, Boolean& booleanValue);
}
public class MvvmCross.Binding.Combiners.MvxDivideValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxEqualToValueCombiner : MvxPairwiseValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineNullAndObject(object object1, Object& value);
    protected virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected virtual bool CombineObjectAndNull(object input1, Object& value);
    protected virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxFormatValueCombiner : MvxValueCombiner {
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxGreaterThanOrEqualToValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxGreaterThanValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxIfValueCombiner : MvxValueCombiner {
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    private bool TryEvaluateif(IMvxSourceStep testStep, IMvxSourceStep ifStep, IMvxSourceStep elseStep, Object& value);
    protected virtual bool IsTrue(object result);
    protected virtual object ReturnSubStepResult(IMvxSourceStep subStep);
}
public class MvvmCross.Binding.Combiners.MvxInvertedValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxLessThanOrEqualToValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxLessThanValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
    protected virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected virtual bool CombineNullAndString(string input2, Object& value);
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxModulusValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxMultiplyValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxNotEqualToValueCombiner : MvxPairwiseValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineNullAndObject(object object1, Object& value);
    protected virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected virtual bool CombineObjectAndNull(object input1, Object& value);
    protected virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxNotValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxNumericOnlyValueCombiner : MvxObjectAsStringPairwiseValueCombiner {
    protected virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected virtual bool CombineStringAndNull(string input1, Object& value);
    protected sealed virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected sealed virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected sealed virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected sealed virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected sealed virtual bool CombineNullAndString(string input2, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxObjectAsStringPairwiseValueCombiner : MvxPairwiseValueCombiner {
    protected abstract virtual bool CombineStringAndString(string input1, string input2, Object& value);
    protected abstract virtual bool CombineLongAndString(long input1, string input2, Object& value);
    protected abstract virtual bool CombineDoubleAndString(double input1, string input2, Object& value);
    protected abstract virtual bool CombineDecimalAndString(decimal input1, string input2, Object& value);
    protected abstract virtual bool CombineNullAndString(string input2, Object& value);
    protected abstract virtual bool CombineStringAndDouble(string input1, double input2, Object& value);
    protected abstract virtual bool CombineStringAndLong(string input1, long input2, Object& value);
    protected abstract virtual bool CombineStringAndDecimal(string input1, decimal input2, Object& value);
    protected abstract virtual bool CombineStringAndNull(string input1, Object& value);
    protected sealed virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected sealed virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected sealed virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected sealed virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected sealed virtual bool CombineNullAndObject(object object1, Object& value);
    protected sealed virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected sealed virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected sealed virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected sealed virtual bool CombineObjectAndNull(object input1, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxOrValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxPairwiseValueCombiner : MvxValueCombiner {
    private Dictionary`2<TypeTuple, CombinerFunc`2<object, object>> _combinerActions;
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    private static Type GetLookupTypeFor(object value);
    private void AddSingle(CombinerFunc combinerAction);
    private void AddSingle(CombinerFunc`1<T1> combinerAction, CombinerFunc`1<T1> switchedCombinerAction);
    private void AddSingle(CombinerFunc`2<T1, T2> combinerAction);
    protected virtual object ForceToSimpleValueTypes(object input);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    protected abstract virtual bool CombineObjectAndDouble(object input1, double input2, Object& value);
    protected abstract virtual bool CombineObjectAndLong(object input1, long input2, Object& value);
    protected abstract virtual bool CombineObjectAndObject(object object1, object object2, Object& value);
    protected abstract virtual bool CombineObjectAndDecimal(object input1, decimal input2, Object& value);
    protected abstract virtual bool CombineObjectAndNull(object input1, Object& value);
    protected abstract virtual bool CombineDoubleAndObject(double input1, object input2, Object& value);
    protected abstract virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected abstract virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected abstract virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected abstract virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected abstract virtual bool CombineLongAndObject(long input1, object input2, Object& value);
    protected abstract virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected abstract virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected abstract virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected abstract virtual bool CombineLongAndNull(long input1, Object& value);
    protected abstract virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected abstract virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected abstract virtual bool CombineDecimalAndObject(decimal object1, object object2, Object& value);
    protected abstract virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected abstract virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected abstract virtual bool CombineNullAndObject(object object1, Object& value);
    protected abstract virtual bool CombineNullAndDouble(double input2, Object& value);
    protected abstract virtual bool CombineNullAndLong(long input2, Object& value);
    protected abstract virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected abstract virtual bool CombineTwoNulls(Object& value);
}
public class MvvmCross.Binding.Combiners.MvxSingleValueCombiner : MvxValueCombiner {
    public virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxSubtractValueCombiner : MvxNumericOnlyValueCombiner {
    protected virtual bool CombineDecimalAndDecimal(decimal input1, decimal input2, Object& value);
    protected virtual bool CombineDecimalAndDouble(decimal input1, double input2, Object& value);
    protected virtual bool CombineDecimalAndLong(decimal input1, long input2, Object& value);
    protected virtual bool CombineDecimalAndNull(decimal input1, Object& value);
    protected virtual bool CombineDoubleAndDecimal(double input1, decimal input2, Object& value);
    protected virtual bool CombineDoubleAndDouble(double input1, double input2, Object& value);
    protected virtual bool CombineDoubleAndLong(double input1, long input2, Object& value);
    protected virtual bool CombineDoubleAndNull(double input1, Object& value);
    protected virtual bool CombineLongAndDecimal(long input1, decimal input2, Object& value);
    protected virtual bool CombineLongAndDouble(long input1, double input2, Object& value);
    protected virtual bool CombineLongAndLong(long input1, long input2, Object& value);
    protected virtual bool CombineLongAndNull(long input1, Object& value);
    protected virtual bool CombineNullAndDecimal(decimal input2, Object& value);
    protected virtual bool CombineNullAndDouble(double input2, Object& value);
    protected virtual bool CombineNullAndLong(long input2, Object& value);
    protected virtual bool CombineTwoNulls(Object& value);
}
public abstract class MvvmCross.Binding.Combiners.MvxValueCombiner : object {
    public virtual Type SourceType(IEnumerable`1<IMvxSourceStep> steps);
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
    public virtual IEnumerable`1<Type> SubStepTargetTypes(IEnumerable`1<IMvxSourceStep> subSteps, Type overallTargetType);
}
public class MvvmCross.Binding.Combiners.MvxValueCombinerRegistry : MvxNamedInstanceRegistry`1<IMvxValueCombiner> {
}
public class MvvmCross.Binding.Combiners.MvxValueCombinerRegistryFiller : MvxNamedInstanceRegistryFiller`1<IMvxValueCombiner> {
    public virtual string FindName(Type type);
}
[MvxUnconventionalAttribute]
public class MvvmCross.Binding.Combiners.MvxValueConverterValueCombiner : MvxValueCombiner {
    private IMvxValueConverter _valueConverter;
    private Type _targetType;
    public MvxValueConverterValueCombiner(IMvxValueConverter valueConverter);
    public virtual void SetValue(IEnumerable`1<IMvxSourceStep> steps, object value);
    public virtual IEnumerable`1<Type> SubStepTargetTypes(IEnumerable`1<IMvxSourceStep> subSteps, Type overallTargetType);
    private static object GetParameterValue(IEnumerable`1<IMvxSourceStep> steps);
    public virtual bool TryGetValue(IEnumerable`1<IMvxSourceStep> steps, Object& value);
}
public class MvvmCross.Binding.Combiners.MvxXorValueCombiner : MvxBooleanValueCombiner {
    protected virtual bool TryCombine(List`1<bool> stepValues, Object& value);
}
public interface MvvmCross.Binding.ExpressionParse.IMvxParsedExpression {
    public abstract virtual string Print();
}
public interface MvvmCross.Binding.ExpressionParse.IMvxPropertyExpressionParser {
    public abstract virtual IMvxParsedExpression Parse(Expression`1<Func`2<TObj, TRet>> propertyPath);
    public abstract virtual IMvxParsedExpression Parse(LambdaExpression propertyPath);
}
public class MvvmCross.Binding.ExpressionParse.MvxParsedExpression : object {
    private LinkedList`1<INode> _nodes;
    protected LinkedList`1<INode> Nodes { get; }
    protected LinkedList`1<INode> get_Nodes();
    protected void Prepend(INode node);
    public void PrependProperty(string propertyName);
    public void PrependIndexed(string indexedValue);
    public sealed virtual string Print();
}
public class MvvmCross.Binding.ExpressionParse.MvxPropertyExpressionParser : object {
    private ILogger`1<MvxPropertyExpressionParser> _log;
    public MvxPropertyExpressionParser(ILoggerFactory loggerFactory);
    public sealed virtual IMvxParsedExpression Parse(Expression`1<Func`2<TObj, TRet>> propertyPath);
    public sealed virtual IMvxParsedExpression Parse(LambdaExpression propertyPath);
    private static Expression ParseTo(Expression current, MvxParsedExpression toReturn, ILogger log);
    private static Expression ParseMethodCall(Expression current, MvxParsedExpression toReturn, ILogger log);
    private static IMvxParsedExpression ParseBindExtensionMethod(LambdaExpression propertyPath, object controlType);
    private static Expression ConvertMemberAccessToConstant(Expression argument, ILogger log);
    private static Expression ParseProperty(Expression current, MvxParsedExpression toReturn);
    private static Expression Unbox(Expression current);
}
public interface MvvmCross.Binding.Extensions.IMvxEditableTextView {
    public string CurrentText { get; }
    public abstract virtual string get_CurrentText();
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Extensions.MvxBindingExtensions : object {
    [ExtensionAttribute]
public static bool ShouldSkipSetValueAsHaveNearlyIdenticalNumericText(IMvxEditableTextView mvxEditableTextView, object target, object value);
    [ExtensionAttribute]
public static bool ConvertToBoolean(object result);
    [ExtensionAttribute]
public static object MakeSafeValue(Type propertyType, object value);
}
[ExtensionAttribute]
public static class MvvmCross.Binding.Extensions.MvxEnumerableExtensions : object {
    [ExtensionAttribute]
public static int Count(IEnumerable enumerable);
    [ExtensionAttribute]
public static int GetPosition(IEnumerable items, object item);
    [ExtensionAttribute]
public static object ElementAt(IEnumerable items, int position);
    [ExtensionAttribute]
public static IEnumerable Filter(IEnumerable items, Func`2<object, bool> predicate);
}
public interface MvvmCross.Binding.IMvxBindingSingletonCache {
    public IMvxAutoValueConverters AutoValueConverters { get; }
    public IMvxBindingDescriptionParser BindingDescriptionParser { get; }
    public IMvxLanguageBindingParser LanguageParser { get; }
    public IMvxPropertyExpressionParser PropertyExpressionParser { get; }
    public IMvxValueConverterLookup ValueConverterLookup { get; }
    public IMvxBindingNameLookup DefaultBindingNameLookup { get; }
    public IMvxBinder Binder { get; }
    public IMvxSourceBindingFactory SourceBindingFactory { get; }
    public IMvxTargetBindingFactory TargetBindingFactory { get; }
    public IMvxSourceStepFactory SourceStepFactory { get; }
    public IMvxValueCombinerLookup ValueCombinerLookup { get; }
    public IMvxMainThreadAsyncDispatcher MainThreadDispatcher { get; }
    public abstract virtual IMvxAutoValueConverters get_AutoValueConverters();
    public abstract virtual IMvxBindingDescriptionParser get_BindingDescriptionParser();
    public abstract virtual IMvxLanguageBindingParser get_LanguageParser();
    public abstract virtual IMvxPropertyExpressionParser get_PropertyExpressionParser();
    public abstract virtual IMvxValueConverterLookup get_ValueConverterLookup();
    public abstract virtual IMvxBindingNameLookup get_DefaultBindingNameLookup();
    public abstract virtual IMvxBinder get_Binder();
    public abstract virtual IMvxSourceBindingFactory get_SourceBindingFactory();
    public abstract virtual IMvxTargetBindingFactory get_TargetBindingFactory();
    public abstract virtual IMvxSourceStepFactory get_SourceStepFactory();
    public abstract virtual IMvxValueCombinerLookup get_ValueCombinerLookup();
    public abstract virtual IMvxMainThreadAsyncDispatcher get_MainThreadDispatcher();
}
public class MvvmCross.Binding.MvxBindingBuilder : MvxCoreBindingBuilder {
    public virtual void DoRegistration(IMvxIoCProvider iocProvider);
    protected virtual void RegisterBindingFactories(IMvxIoCProvider iocProvider);
    protected virtual void RegisterMvxBindingFactories(IMvxIoCProvider iocProvider);
    protected virtual void RegisterSourceStepFactory(IMvxIoCProvider iocProvider);
    protected virtual void FillSourceStepFactory(IMvxSourceStepFactoryRegistry registry);
    protected virtual IMvxSourceStepFactoryRegistry CreateSourceStepFactoryRegistry();
    protected virtual void RegisterSourceFactory(IMvxIoCProvider iocProvider);
    protected virtual void RegisterSourceBindingFactoryExtensions(IMvxSourceBindingFactoryExtensionHost extensionHost);
    protected virtual IMvxSourceBindingFactory CreateSourceBindingFactory();
    protected virtual void RegisterTargetFactory(IMvxIoCProvider iocProvider);
    protected virtual IMvxTargetBindingFactoryRegistry CreateTargetBindingRegistry();
    protected virtual void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MvvmCross.Binding.MvxBindingLog : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static ILogger <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private static LogLevel <TraceBindingLevel>k__BackingField;
    [NullableAttribute("2")]
public static ILogger Instance { get; }
    public static LogLevel TraceBindingLevel { get; public set; }
    private static MvxBindingLog();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static ILogger get_Instance();
    [CompilerGeneratedAttribute]
public static LogLevel get_TraceBindingLevel();
    [CompilerGeneratedAttribute]
public static void set_TraceBindingLevel(LogLevel value);
    private static void Trace(LogLevel level, string message, Object[] args);
    public static void Trace(string message, Object[] args);
    public static void Warning(string message, Object[] args);
    public static void Error(string message, Object[] args);
}
public enum MvvmCross.Binding.MvxBindingMode : Enum {
    public int value__;
    public static MvxBindingMode Default;
    public static MvxBindingMode TwoWay;
    public static MvxBindingMode OneWay;
    public static MvxBindingMode OneTime;
    public static MvxBindingMode OneWayToSource;
}
public class MvvmCross.Binding.MvxBindingRequest : object {
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingDescription <Description>k__BackingField;
    public object Target { get; public set; }
    public object Source { get; public set; }
    public MvxBindingDescription Description { get; public set; }
    public MvxBindingRequest(object source, object target, MvxBindingDescription description);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(object value);
    [CompilerGeneratedAttribute]
public object get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(object value);
    [CompilerGeneratedAttribute]
public MvxBindingDescription get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(MvxBindingDescription value);
}
public class MvvmCross.Binding.MvxBindingSingletonCache : MvxSingleton`1<IMvxBindingSingletonCache> {
    private IMvxAutoValueConverters _autoValueConverters;
    private IMvxBindingDescriptionParser _bindingDescriptionParser;
    private IMvxSourceBindingFactory _sourceBindingFactory;
    private IMvxTargetBindingFactory _targetBindingFactory;
    private IMvxLanguageBindingParser _languageParser;
    private IMvxPropertyExpressionParser _propertyExpressionParser;
    private IMvxValueConverterLookup _valueConverterLookup;
    private IMvxBindingNameLookup _defaultBindingName;
    private IMvxBinder _binder;
    private IMvxSourceStepFactory _sourceStepFactory;
    private IMvxValueCombinerLookup _valueCombinerLookup;
    private IMvxMainThreadAsyncDispatcher _mainThreadDispatcher;
    public IMvxAutoValueConverters AutoValueConverters { get; }
    public IMvxBindingDescriptionParser BindingDescriptionParser { get; }
    public IMvxLanguageBindingParser LanguageParser { get; }
    public IMvxPropertyExpressionParser PropertyExpressionParser { get; }
    public IMvxValueConverterLookup ValueConverterLookup { get; }
    public IMvxValueCombinerLookup ValueCombinerLookup { get; }
    public IMvxBindingNameLookup DefaultBindingNameLookup { get; }
    public IMvxBinder Binder { get; }
    public IMvxSourceBindingFactory SourceBindingFactory { get; }
    public IMvxTargetBindingFactory TargetBindingFactory { get; }
    public IMvxSourceStepFactory SourceStepFactory { get; }
    public IMvxMainThreadAsyncDispatcher MainThreadDispatcher { get; }
    public static IMvxBindingSingletonCache Initialize();
    public sealed virtual IMvxAutoValueConverters get_AutoValueConverters();
    public sealed virtual IMvxBindingDescriptionParser get_BindingDescriptionParser();
    public sealed virtual IMvxLanguageBindingParser get_LanguageParser();
    public sealed virtual IMvxPropertyExpressionParser get_PropertyExpressionParser();
    public sealed virtual IMvxValueConverterLookup get_ValueConverterLookup();
    public sealed virtual IMvxValueCombinerLookup get_ValueCombinerLookup();
    public sealed virtual IMvxBindingNameLookup get_DefaultBindingNameLookup();
    public sealed virtual IMvxBinder get_Binder();
    public sealed virtual IMvxSourceBindingFactory get_SourceBindingFactory();
    public sealed virtual IMvxTargetBindingFactory get_TargetBindingFactory();
    public sealed virtual IMvxSourceStepFactory get_SourceStepFactory();
    public sealed virtual IMvxMainThreadAsyncDispatcher get_MainThreadDispatcher();
}
public class MvvmCross.Binding.MvxCoreBindingBuilder : object {
    public virtual void DoRegistration(IMvxIoCProvider iocProvider);
    protected virtual void RegisterAutoValueConverters(IMvxIoCProvider iocProvider);
    protected virtual void FillAutoValueConverters(IMvxAutoValueConverters autoValueConverters);
    protected virtual IMvxAutoValueConverters CreateAutoValueConverters();
    protected virtual void CreateSingleton();
    protected virtual void RegisterValueConverterRegistryFiller(IMvxIoCProvider iocProvider);
    protected virtual IMvxValueConverterRegistryFiller CreateValueConverterRegistryFiller();
    protected virtual void RegisterValueCombinerRegistryFiller(IMvxIoCProvider iocProvider);
    protected virtual IMvxValueCombinerRegistryFiller CreateValueCombinerRegistryFiller();
    protected virtual void RegisterExpressionParser(IMvxIoCProvider iocProvider);
    protected virtual void RegisterCore(IMvxIoCProvider iocProvider);
    protected virtual void RegisterValueConverterProvider(IMvxIoCProvider iocProvider);
    protected virtual MvxValueConverterRegistry CreateValueConverterRegistry();
    protected virtual void FillValueConverters(IMvxValueConverterRegistry registry);
    protected virtual void RegisterValueCombinerProvider(IMvxIoCProvider iocProvider);
    protected virtual IMvxValueCombinerRegistry CreateValueCombinerRegistry();
    protected virtual void FillValueCombiners(IMvxValueCombinerRegistry registry);
    protected virtual void RegisterBindingParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxBindingParser CreateBindingParser();
    protected virtual void RegisterLanguageBindingParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxLanguageBindingParser CreateLanguageBindingParser();
    protected virtual void RegisterBindingDescriptionParser(IMvxIoCProvider iocProvider);
    private static IMvxBindingDescriptionParser CreateBindingDescriptionParser();
    protected virtual void RegisterSourcePropertyPathParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxSourcePropertyPathParser CreateSourcePropertyPathParser();
    protected virtual void RegisterBindingNameRegistry(IMvxIoCProvider iocProvider);
    protected virtual void FillDefaultBindingNames(IMvxBindingNameRegistry registry);
    protected virtual void RegisterPlatformSpecificComponents(IMvxIoCProvider iocProvider);
}
public interface MvvmCross.Binding.Parse.Binding.IMvxBindingParser {
    public abstract virtual bool TryParseBindingDescription(string text, MvxSerializableBindingDescription& requestedDescription);
    public abstract virtual bool TryParseBindingSpecification(string text, MvxSerializableBindingSpecification& requestedBindings);
}
public interface MvvmCross.Binding.Parse.Binding.Lang.IMvxLanguageBindingParser {
    public string DefaultConverterName { get; public set; }
    public string DefaultTextSourceName { get; public set; }
    public abstract virtual string get_DefaultConverterName();
    public abstract virtual void set_DefaultConverterName(string value);
    public abstract virtual string get_DefaultTextSourceName();
    public abstract virtual void set_DefaultTextSourceName(string value);
}
public class MvvmCross.Binding.Parse.Binding.Lang.MvxLanguageBindingParser : MvxBindingParser {
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultBindingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultConverterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTextSourceName>k__BackingField;
    public MvxBindingMode DefaultBindingMode { get; public set; }
    public string DefaultConverterName { get; public set; }
    public string DefaultTextSourceName { get; public set; }
    [CompilerGeneratedAttribute]
public MvxBindingMode get_DefaultBindingMode();
    [CompilerGeneratedAttribute]
public void set_DefaultBindingMode(MvxBindingMode value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultConverterName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultConverterName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultTextSourceName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultTextSourceName(string value);
    protected void ParseNextBindingDescriptionOptionInto(MvxSerializableBindingDescription description);
    private static string UnquoteBlockIfNecessary(string block);
    protected virtual MvxSerializableBindingDescription ParseBindingDescription();
}
public class MvvmCross.Binding.Parse.Binding.MvxBindingDescriptionParser : object {
    private IMvxBindingParser _bindingParser;
    private IMvxValueConverterLookup _valueConverterLookup;
    private IMvxLanguageBindingParser _languageBindingParser;
    protected IMvxBindingParser BindingParser { get; }
    protected IMvxLanguageBindingParser LanguageBindingParser { get; }
    protected IMvxValueConverterLookup ValueConverterLookup { get; }
    protected IMvxBindingParser get_BindingParser();
    protected IMvxLanguageBindingParser get_LanguageBindingParser();
    protected IMvxValueConverterLookup get_ValueConverterLookup();
    protected IMvxValueConverter FindConverter(string converterName);
    protected IMvxValueCombiner FindCombiner(string combiner);
    public sealed virtual IEnumerable`1<MvxBindingDescription> Parse(string text);
    public IEnumerable`1<MvxBindingDescription> Parse(string text, IMvxBindingParser parser);
    public sealed virtual IEnumerable`1<MvxBindingDescription> LanguageParse(string text);
    public sealed virtual MvxBindingDescription ParseSingle(string text);
    private string GetErrorTextParameter(string text);
    public sealed virtual MvxBindingDescription SerializableBindingToBinding(string targetName, MvxSerializableBindingDescription description);
    private MvxSourceStepDescription SourceStepDescriptionFrom(MvxSerializableBindingDescription description);
    [CompilerGeneratedAttribute]
private MvxBindingDescription <Parse>b__12_0(KeyValuePair`2<string, MvxSerializableBindingDescription> item);
    [CompilerGeneratedAttribute]
private MvxSourceStepDescription <SourceStepDescriptionFrom>b__17_0(MvxSerializableBindingDescription s);
    [CompilerGeneratedAttribute]
private MvxSourceStepDescription <SourceStepDescriptionFrom>b__17_1(MvxSerializableBindingDescription source);
}
public abstract class MvvmCross.Binding.Parse.Binding.MvxBindingParser : MvxParser {
    protected abstract virtual MvxSerializableBindingDescription ParseBindingDescription();
    public sealed virtual bool TryParseBindingDescription(string text, MvxSerializableBindingDescription& requestedDescription);
    public sealed virtual bool TryParseBindingSpecification(string text, MvxSerializableBindingSpecification& requestedBindings);
    protected KeyValuePair`2<string, MvxSerializableBindingDescription> ParseTargetPropertyNameAndDescription();
    protected void ParseEquals(string block);
    protected MvxBindingMode ReadBindingMode();
    protected string ReadTextUntilNonQuotedOccurrenceOfAnyOf(Char[] terminationCharacters);
    protected string ReadTargetPropertyName();
    protected void SkipWhitespaceAndOptionSeparators();
    protected void SkipWhitespaceAndDescriptionSeparators();
}
public class MvvmCross.Binding.Parse.Binding.MvxSerializableBindingDescription : object {
    [CompilerGeneratedAttribute]
private string <Converter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ConverterParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private object <FallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private MvxBindingMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MvxSerializableBindingDescription> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Literal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Converter { get; public set; }
    public object ConverterParameter { get; public set; }
    public object FallbackValue { get; public set; }
    public MvxBindingMode Mode { get; public set; }
    public IList`1<MvxSerializableBindingDescription> Sources { get; public set; }
    public string Function { get; public set; }
    public object Literal { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(string value);
    [CompilerGeneratedAttribute]
public object get_ConverterParameter();
    [CompilerGeneratedAttribute]
public void set_ConverterParameter(object value);
    [CompilerGeneratedAttribute]
public object get_FallbackValue();
    [CompilerGeneratedAttribute]
public void set_FallbackValue(object value);
    [CompilerGeneratedAttribute]
public MvxBindingMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(MvxBindingMode value);
    [CompilerGeneratedAttribute]
public IList`1<MvxSerializableBindingDescription> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IList`1<MvxSerializableBindingDescription> value);
    [CompilerGeneratedAttribute]
public string get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(string value);
    [CompilerGeneratedAttribute]
public object get_Literal();
    [CompilerGeneratedAttribute]
public void set_Literal(object value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class MvvmCross.Binding.Parse.Binding.MvxSerializableBindingSpecification : Dictionary`2<string, MvxSerializableBindingDescription> {
}
public class MvvmCross.Binding.Parse.Binding.Swiss.MvxSwissBindingParser : MvxBindingParser {
    protected virtual IEnumerable`1<char> TerminatingCharacters();
    private void ParsePath(string block, MvxSerializableBindingDescription description);
    private void ParseConverter(string block, MvxSerializableBindingDescription description);
    private void ParseConverterParameter(string block, MvxSerializableBindingDescription description);
    private void ParseCommandParameter(string block, MvxSerializableBindingDescription description);
    private void ParseFallbackValue(string block, MvxSerializableBindingDescription description);
    private void ParseMode(string block, MvxSerializableBindingDescription description);
    protected virtual void ParseNextBindingDescriptionOptionInto(MvxSerializableBindingDescription description);
    protected virtual void HandleEmptyBlock(MvxSerializableBindingDescription description);
    protected virtual void ParseNonKeywordBlockInto(MvxSerializableBindingDescription description, string block);
    protected virtual void ParseFunctionStyleBlockInto(MvxSerializableBindingDescription description, string block);
    protected void ReadConverterParameterAndClosingBracket(MvxSerializableBindingDescription description);
    protected void ParseChildBindingDescriptionInto(MvxSerializableBindingDescription description, ParentIsLookingForComma parentIsLookingForComma);
    protected void ThrowExceptionIfPathAlreadyDefined(MvxSerializableBindingDescription description);
    protected virtual MvxSerializableBindingDescription ParseBindingDescription();
    protected virtual MvxSerializableBindingDescription ParseBindingDescription(ParentIsLookingForComma parentIsLookingForComma);
    protected virtual MvxSerializableBindingDescription ParseOperatorWithLeftHand(MvxSerializableBindingDescription description);
    protected virtual bool DetectOperator();
}
public class MvvmCross.Binding.Parse.Binding.Tibet.MvxTibetBindingParser : MvxSwissBindingParser {
    public static object LiteralNull;
    public static Char[] OperatorCharacters;
    private Char[] _terminatingCharacters;
    private static Dictionary`2<string, string> TwoCharacterOperatorCombinerNames { get; }
    private static Dictionary`2<char, string> SingleCharacterOperatorCombinerNames { get; }
    private static MvxTibetBindingParser();
    private static Dictionary`2<string, string> get_TwoCharacterOperatorCombinerNames();
    private static Dictionary`2<char, string> get_SingleCharacterOperatorCombinerNames();
    protected virtual IEnumerable`1<char> TerminatingCharacters();
    protected virtual void ParseNextBindingDescriptionOptionInto(MvxSerializableBindingDescription description);
    protected virtual void ParseFunctionStyleBlockInto(MvxSerializableBindingDescription description, string block);
    private Tuple`2<UInt32, string> ParseTwoCharacterOperator();
    protected virtual MvxSerializableBindingDescription ParseOperatorWithLeftHand(MvxSerializableBindingDescription description);
    protected virtual bool DetectOperator();
    protected virtual void HandleEmptyBlock(MvxSerializableBindingDescription description);
}
public interface MvvmCross.Binding.Parse.PropertyPath.IMvxSourcePropertyPathParser {
    public abstract virtual IList`1<MvxPropertyToken> Parse(string textToParse);
}
public class MvvmCross.Binding.Parse.PropertyPath.MvxPropertyPathParser : MvxParser {
    [CompilerGeneratedAttribute]
private List`1<MvxPropertyToken> <CurrentTokens>k__BackingField;
    protected List`1<MvxPropertyToken> CurrentTokens { get; }
    [CompilerGeneratedAttribute]
protected List`1<MvxPropertyToken> get_CurrentTokens();
    protected virtual void Reset(string textToParse);
    public static string MakeSafe(string textToParse);
    public IList`1<MvxPropertyToken> Parse(string textToParse);
    private void ParseNextToken();
    private void ParsePropertyName();
    private void ParseIndexer();
    private void ParseIntegerIndexer();
    private void ParseQuotedStringIndexer();
    private void ParseUnquotedStringIndexer();
    private void SkipWhitespaceAndPeriods();
}
public class MvvmCross.Binding.Parse.PropertyPath.MvxSourcePropertyPathParser : object {
    private static ConcurrentDictionary`2<string, IList`1<MvxPropertyToken>> ParseCache;
    private static MvxSourcePropertyPathParser();
    public sealed virtual IList`1<MvxPropertyToken> Parse(string textToParse);
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxEmptyPropertyToken : MvxPropertyToken {
    public virtual string ToString();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxIndexerPropertyToken : MvxPropertyToken {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    public object Key { get; }
    protected MvxIndexerPropertyToken(object key);
    [CompilerGeneratedAttribute]
public object get_Key();
    public virtual string ToString();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxIndexerPropertyToken`1 : MvxIndexerPropertyToken {
    public T Key { get; }
    protected MvxIndexerPropertyToken`1(T key);
    public T get_Key();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxIntegerIndexerPropertyToken : MvxIndexerPropertyToken`1<int> {
    public MvxIntegerIndexerPropertyToken(int key);
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxPropertyNamePropertyToken : MvxPropertyToken {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public MvxPropertyNamePropertyToken(string propertyText);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    public virtual string ToString();
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxPropertyToken : object {
}
public class MvvmCross.Binding.Parse.PropertyPath.PropertyTokens.MvxStringIndexerPropertyToken : MvxIndexerPropertyToken`1<string> {
    public MvxStringIndexerPropertyToken(string key);
}
public class MvvmCross.Binding.ValueConverters.MvxCommandParameterValueConverter : MvxValueConverter`2<ICommand, ICommand> {
    protected virtual ICommand Convert(ICommand value, Type targetType, object parameter, CultureInfo culture);
}
public class MvvmCross.Binding.ValueConverters.MvxWrappingCommand : object {
    private static EventInfo CanExecuteChangedEventInfo;
    private ICommand _wrapped;
    private object _commandParameterOverride;
    private IDisposable _canChangedEventSubscription;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public MvxWrappingCommand(ICommand wrapped, object commandParameterOverride);
    private static MvxWrappingCommand();
    public void WrappedOnCanExecuteChanged(object sender, EventArgs eventArgs);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void Execute(object parameter);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
}
public interface MvvmCross.Commands.IMvxAsyncCommand {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(object parameter);
    public abstract virtual void Cancel();
}
public interface MvvmCross.Commands.IMvxAsyncCommand`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(TParameter parameter);
    public abstract virtual void Cancel();
}
public interface MvvmCross.Commands.IMvxCommand {
    public abstract virtual void RaiseCanExecuteChanged();
    public abstract virtual void Execute();
    public abstract virtual bool CanExecute();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Commands.IMvxCommand`1 {
    [ObsoleteAttribute("Use the strongly typed version of Execute instead", "True")]
public abstract virtual void Execute(object parameter);
    public abstract virtual void Execute(TParameter parameter);
    [ObsoleteAttribute("Use the strongly typed version of CanExecute instead", "True")]
public abstract virtual bool CanExecute(object parameter);
    public abstract virtual bool CanExecute(TParameter parameter);
    public abstract virtual void RaiseCanExecuteChanged();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface MvvmCross.Commands.IMvxCommandCollection {
    [NullableAttribute("2")]
public IMvxCommand Item { get; }
    public abstract virtual IMvxCommand get_Item(string name);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Commands.IMvxCommandCollectionBuilder {
    public abstract virtual IMvxCommandCollection BuildCollectionFor(object owner);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Commands.IMvxCommandHelper {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("1")]
public abstract virtual void RaiseCanExecuteChanged(object sender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxAsyncCommand : MvxAsyncCommandBase {
    private Func`2<CancellationToken, Task> _execute;
    [NullableAttribute("2")]
private Func`1<bool> _canExecute;
    public MvxAsyncCommand(Func`1<Task> execute, Func`1<bool> canExecute, bool allowConcurrentExecutions);
    public MvxAsyncCommand(Func`2<CancellationToken, Task> execute, Func`1<bool> canExecute, bool allowConcurrentExecutions);
    [NullableContextAttribute("2")]
protected virtual bool CanExecuteImpl(object parameter);
    protected virtual Task ExecuteAsyncImpl(object parameter);
    [NullableContextAttribute("2")]
public static MvxAsyncCommand`1<T> CreateCommand(Func`2<T, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    [NullableContextAttribute("2")]
public static MvxAsyncCommand`1<T> CreateCommand(Func`3<T, CancellationToken, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    public sealed virtual Task ExecuteAsync(object parameter);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxAsyncCommand`1 : MvxAsyncCommandBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<T, CancellationToken, Task> _execute;
    private Func`2<T, bool> _canExecute;
    public MvxAsyncCommand`1(Func`2<T, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    public MvxAsyncCommand`1(Func`3<T, CancellationToken, Task> execute, Func`2<T, bool> canExecute, bool allowConcurrentExecutions);
    [NullableContextAttribute("1")]
public sealed virtual Task ExecuteAsync(T parameter);
    public sealed virtual void Execute(T parameter);
    public sealed virtual bool CanExecute(T parameter);
    protected virtual bool CanExecuteImpl(object parameter);
    [NullableContextAttribute("1")]
protected virtual Task ExecuteAsyncImpl(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Commands.MvxAsyncCommandBase : MvxCommandBase {
    private object _syncRoot;
    private bool _allowConcurrentExecutions;
    [NullableAttribute("2")]
private CancellationTokenSource _cts;
    private int _concurrentExecutions;
    public bool IsRunning { get; }
    protected CancellationToken CancelToken { get; }
    protected MvxAsyncCommandBase(bool allowConcurrentExecutions);
    public bool get_IsRunning();
    protected CancellationToken get_CancelToken();
    [NullableContextAttribute("2")]
protected abstract virtual bool CanExecuteImpl(object parameter);
    protected abstract virtual Task ExecuteAsyncImpl(object parameter);
    public sealed virtual void Cancel();
    public sealed virtual bool CanExecute();
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecute(object parameter);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MvvmCross.Commands.MvxAsyncCommandBase/<Execute>d__14")]
public sealed virtual void Execute(object parameter);
    public sealed virtual void Execute();
    [AsyncStateMachineAttribute("MvvmCross.Commands.MvxAsyncCommandBase/<ExecuteAsync>d__16")]
protected Task ExecuteAsync(object parameter, bool hideCanceledException);
    [AsyncStateMachineAttribute("MvvmCross.Commands.MvxAsyncCommandBase/<ExecuteConcurrentAsync>d__17")]
private Task ExecuteConcurrentAsync(object parameter, bool hideCanceledException);
    private void ClearCancellationTokenSource();
    private void InitCancellationTokenSource();
}
public class MvvmCross.Commands.MvxCommand : MvxCommandBase {
    [NullableAttribute("2")]
private Func`1<bool> _canExecute;
    [NullableAttribute("1")]
private Action _execute;
    [NullableContextAttribute("1")]
public MvxCommand(Action execute, Func`1<bool> canExecute);
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecute(object parameter);
    public sealed virtual bool CanExecute();
    [NullableContextAttribute("2")]
public sealed virtual void Execute(object parameter);
    public sealed virtual void Execute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxCommand`1 : MvxCommandBase {
    private Func`2<T, bool> _canExecute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<T> _execute;
    public MvxCommand`1(Action`1<T> execute, Func`2<T, bool> canExecute);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual bool CanExecute();
    public sealed virtual bool CanExecute(T parameter);
    public sealed virtual void Execute(object parameter);
    public sealed virtual void Execute();
    public sealed virtual void Execute(T parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
public class MvvmCross.Commands.MvxCommandAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CanExecutePropertyName>k__BackingField;
    public string CommandName { get; public set; }
    [NullableAttribute("2")]
public string CanExecutePropertyName { get; public set; }
    public MvxCommandAttribute(string commandName, string canExecutePropertyName);
    [CompilerGeneratedAttribute]
public string get_CommandName();
    [CompilerGeneratedAttribute]
public void set_CommandName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CanExecutePropertyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CanExecutePropertyName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxCommandBase : MvxMainThreadDispatchingObject {
    private IMvxCommandHelper _commandHelper;
    [CompilerGeneratedAttribute]
private bool <ShouldAlwaysRaiseCECOnUserInterfaceThread>k__BackingField;
    public bool ShouldAlwaysRaiseCECOnUserInterfaceThread { get; public set; }
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public bool get_ShouldAlwaysRaiseCECOnUserInterfaceThread();
    [CompilerGeneratedAttribute]
public void set_ShouldAlwaysRaiseCECOnUserInterfaceThread(bool value);
    public sealed virtual void RaiseCanExecuteChanged();
    [CompilerGeneratedAttribute]
private void <RaiseCanExecuteChanged>b__9_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MvvmCross.Commands.MvxCommandCollection : object {
    private object _owner;
    private Dictionary`2<string, IMvxCommand> _commandLookup;
    private Dictionary`2<string, List`1<IMvxCommand>> _canExecuteLookup;
    [NullableAttribute("2")]
public IMvxCommand Item { get; }
    public MvxCommandCollection(object owner);
    private void SubscribeToNotifyPropertyChanged();
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs args);
    private void RaiseAllCanExecuteChanged();
    public sealed virtual IMvxCommand get_Item(string name);
    public void Add(IMvxCommand command, string name, string canExecuteName);
    private static void AddToLookup(IDictionary`2<string, IMvxCommand> lookup, IMvxCommand command, string name);
    private static void AddToLookup(IDictionary`2<string, List`1<IMvxCommand>> lookup, IMvxCommand command, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxCommandCollectionBuilder : object {
    private static string DefaultCommandSuffix;
    private static string DefaultCanExecutePrefix;
    [CompilerGeneratedAttribute]
private string <CommandSuffix>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <AdditionalCommandSuffixes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CanExecutePrefix>k__BackingField;
    public string CommandSuffix { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> AdditionalCommandSuffixes { get; public set; }
    public string CanExecutePrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandSuffix();
    [CompilerGeneratedAttribute]
public void set_CommandSuffix(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AdditionalCommandSuffixes();
    [CompilerGeneratedAttribute]
public void set_AdditionalCommandSuffixes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_CanExecutePrefix();
    [CompilerGeneratedAttribute]
public void set_CanExecutePrefix(string value);
    public virtual IMvxCommandCollection BuildCollectionFor(object owner);
    protected virtual void CreateCommands(object owner, MvxCommandCollection toReturn);
    protected virtual void CreateCommand(object owner, MvxCommandCollection collection, MethodInfo commandMethod, string commandName, bool hasParameter);
    protected virtual PropertyInfo CanExecutePropertyInfo(Type type, MethodInfo commandMethod);
    protected virtual string GetCommandNameOrNull(MethodInfo method);
    protected virtual string GetConventionalCommandNameOrNull(MethodInfo method, string suffix);
    protected MvxCommandAttribute CommandAttribute(MethodInfo method);
    protected virtual string CanExecuteProperyName(MethodInfo method);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType5`2<<>f__AnonymousType4`2<MethodInfo, int>, string> <CreateCommands>b__16_2(<>f__AnonymousType4`2<MethodInfo, int> <>h__TransparentIdentifier0);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxStrongCommandHelper : object {
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("1")]
public sealed virtual void RaiseCanExecuteChanged(object sender);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Commands.MvxWeakCommandHelper : object {
    private List`1<WeakReference> _eventHandlers;
    private object _syncRoot;
    [NullableContextAttribute("2")]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [NullableContextAttribute("2")]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    private IEnumerable`1<EventHandler> SafeCopyEventHandlerList();
    public sealed virtual void RaiseCanExecuteChanged(object sender);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Converters.IMvxValueConverter {
    public abstract virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public abstract virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public interface MvvmCross.Converters.IMvxValueConverterRegistry {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Converters.MvxBindingConstant : object {
    public static MvxBindingConstant DoNothing;
    public static MvxBindingConstant UnsetValue;
    private string _debug;
    private MvxBindingConstant(string debug);
    private static MvxBindingConstant();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.Converters.MvxDictionaryValueConverter`2 : MvxValueConverter`2<TKey, TValue> {
    protected virtual TValue Convert(TKey value, Type targetType, object parameter, CultureInfo culture);
}
public abstract class MvvmCross.Converters.MvxValueConverter : object {
    [NullableContextAttribute("2")]
public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    [NullableContextAttribute("2")]
public virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.Converters.MvxValueConverter`1 : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual object Convert(TFrom value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual TFrom TypedConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private static ILogger GetLog();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.Converters.MvxValueConverter`2 : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual TTo Convert(TFrom value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    protected virtual TFrom ConvertBack(TTo value, Type targetType, object parameter, CultureInfo culture);
    private static ILogger GetLog();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxFillableStringToTypeParser {
    public IDictionary`2<Type, IParser> TypeParsers { get; }
    public IList`1<IExtraParser> ExtraParsers { get; }
    public abstract virtual IDictionary`2<Type, IParser> get_TypeParsers();
    public abstract virtual IList`1<IExtraParser> get_ExtraParsers();
}
public interface MvvmCross.Core.IMvxLifetime {
    [CompilerGeneratedAttribute]
public abstract virtual void add_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
}
public interface MvvmCross.Core.IMvxSettings {
    public bool AlwaysRaiseInpcOnUserInterfaceThread { get; public set; }
    public bool ShouldRaisePropertyChanging { get; public set; }
    public bool ShouldLogInpc { get; public set; }
    public abstract virtual bool get_AlwaysRaiseInpcOnUserInterfaceThread();
    public abstract virtual void set_AlwaysRaiseInpcOnUserInterfaceThread(bool value);
    public abstract virtual bool get_ShouldRaisePropertyChanging();
    public abstract virtual void set_ShouldRaisePropertyChanging(bool value);
    public abstract virtual bool get_ShouldLogInpc();
    public abstract virtual void set_ShouldLogInpc(bool value);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxSetup {
    public MvxSetupState State { get; }
    public abstract virtual void InitializePrimary();
    public abstract virtual void InitializeSecondary();
    public abstract virtual IEnumerable`1<Assembly> GetViewAssemblies();
    public abstract virtual IEnumerable`1<Assembly> GetViewModelAssemblies();
    public abstract virtual IEnumerable`1<Assembly> GetPluginAssemblies();
    public abstract virtual IEnumerable`1<Type> CreatableTypes();
    public abstract virtual IEnumerable`1<Type> CreatableTypes(Assembly assembly);
    public abstract virtual void LoadPlugins(IMvxPluginManager pluginManager);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    public abstract virtual MvxSetupState get_State();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxSetupMonitor {
    public abstract virtual Task InitializationComplete();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.IMvxStringToTypeParser {
    public abstract virtual bool TypeSupported(Type targetType);
    public abstract virtual object ReadValue(string rawValue, Type targetType, string fieldOrParameterName);
}
public enum MvvmCross.Core.MvxLifetimeEvent : Enum {
    public int value__;
    public static MvxLifetimeEvent Launching;
    public static MvxLifetimeEvent ActivatedFromMemory;
    public static MvxLifetimeEvent ActivatedFromDisk;
    public static MvxLifetimeEvent Deactivated;
    public static MvxLifetimeEvent Closing;
}
public class MvvmCross.Core.MvxLifetimeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MvxLifetimeEvent <LifetimeEvent>k__BackingField;
    public MvxLifetimeEvent LifetimeEvent { get; }
    public MvxLifetimeEventArgs(MvxLifetimeEvent lifetimeEvent);
    [CompilerGeneratedAttribute]
public MvxLifetimeEvent get_LifetimeEvent();
}
public abstract class MvvmCross.Core.MvxLifetimeMonitor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxLifetimeEventArgs> LifetimeChanged;
    protected void FireLifetimeChange(MvxLifetimeEvent which);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LifetimeChanged(EventHandler`1<MvxLifetimeEventArgs> value);
}
public class MvvmCross.Core.MvxSettings : object {
    [CompilerGeneratedAttribute]
private bool <AlwaysRaiseInpcOnUserInterfaceThread>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRaisePropertyChanging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldLogInpc>k__BackingField;
    public bool AlwaysRaiseInpcOnUserInterfaceThread { get; public set; }
    public bool ShouldRaisePropertyChanging { get; public set; }
    public bool ShouldLogInpc { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AlwaysRaiseInpcOnUserInterfaceThread();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AlwaysRaiseInpcOnUserInterfaceThread(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldRaisePropertyChanging();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldRaisePropertyChanging(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldLogInpc();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldLogInpc(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Core.MvxSetup : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxSetupStateEventArgs> StateChanged;
    private static object _lock;
    private MvxSetupState _state;
    [NullableAttribute("2")]
private IMvxIoCProvider _iocProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`1<IMvxIoCProvider> <RegisterSetupDependencies>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Func`1<IMvxSetup> <SetupCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<Assembly> <ViewAssemblies>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ILogger <SetupLog>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected static Action`1<IMvxIoCProvider> RegisterSetupDependencies { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected static Func`1<IMvxSetup> SetupCreator { get; protected set; }
    protected static List`1<Assembly> ViewAssemblies { get; }
    [NullableAttribute("2")]
protected ILogger SetupLog { get; private set; }
    public MvxSetupState State { get; private set; }
    private static MvxSetup();
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChanged(EventHandler`1<MvxSetupStateEventArgs> value);
    [CompilerGeneratedAttribute]
protected static Action`1<IMvxIoCProvider> get_RegisterSetupDependencies();
    [CompilerGeneratedAttribute]
protected static void set_RegisterSetupDependencies(Action`1<IMvxIoCProvider> value);
    [CompilerGeneratedAttribute]
protected static Func`1<IMvxSetup> get_SetupCreator();
    [CompilerGeneratedAttribute]
protected static void set_SetupCreator(Func`1<IMvxSetup> value);
    [CompilerGeneratedAttribute]
protected static List`1<Assembly> get_ViewAssemblies();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected ILogger get_SetupLog();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_SetupLog(ILogger value);
    public sealed virtual MvxSetupState get_State();
    private void set_State(MvxSetupState value);
    public static void RegisterSetupType(Assembly[] assemblies);
    public static IMvxSetup Instance();
    protected abstract virtual IMvxApplication CreateApp(IMvxIoCProvider iocProvider);
    protected abstract virtual IMvxViewsContainer CreateViewsContainer(IMvxIoCProvider iocProvider);
    protected abstract virtual IMvxViewDispatcher CreateViewDispatcher();
    public virtual void InitializePrimary();
    public virtual void InitializeSecondary();
    protected virtual void InitializeSingletonCache();
    protected virtual void InitializeInpcInterception(IMvxIoCProvider iocProvider);
    protected virtual IMvxChildViewModelCache InitializeViewModelCache(IMvxIoCProvider iocProvider);
    protected virtual IMvxChildViewModelCache CreateViewModelCache(IMvxIoCProvider iocProvider);
    protected virtual IMvxSettings InitializeSettings(IMvxIoCProvider iocProvider);
    protected virtual IMvxSettings CreateSettings(IMvxIoCProvider iocProvider);
    protected virtual IMvxStringToTypeParser InitializeStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxStringToTypeParser CreateStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxFillableStringToTypeParser InitializeFillableStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual IMvxFillableStringToTypeParser CreateFillableStringToTypeParser(IMvxIoCProvider iocProvider);
    protected virtual void PerformBootstrapActions();
    protected virtual IMvxNavigationSerializer InitializeNavigationSerializer(IMvxIoCProvider iocProvider);
    protected virtual IMvxNavigationSerializer CreateNavigationSerializer(IMvxIoCProvider iocProvider);
    protected virtual IMvxCommandCollectionBuilder InitializeCommandCollectionBuilder(IMvxIoCProvider iocProvider);
    protected virtual IMvxCommandCollectionBuilder CreateCommandCollectionBuilder(IMvxIoCProvider iocProvider);
    protected virtual IMvxIoCProvider InitializeIoC();
    protected virtual void RegisterDefaultSetupDependencies(IMvxIoCProvider iocProvider);
    protected virtual IMvxIocOptions CreateIocOptions();
    protected virtual IMvxIoCProvider CreateIocProvider();
    protected virtual void InitializeFirstChance(IMvxIoCProvider iocProvider);
    protected virtual void InitializeLoggingServices(IMvxIoCProvider iocProvider);
    [NullableContextAttribute("2")]
protected abstract virtual ILoggerProvider CreateLogProvider();
    [NullableContextAttribute("2")]
protected abstract virtual ILoggerFactory CreateLogFactory();
    protected virtual IMvxViewModelLoader CreateViewModelLoader(IMvxIoCProvider iocProvider);
    protected virtual IMvxNavigationService CreateNavigationService(IMvxIoCProvider iocProvider);
    protected virtual IMvxPluginManager InitializePluginFramework(IMvxIoCProvider iocProvider);
    protected virtual IMvxPluginManager CreatePluginManager(IMvxIoCProvider iocProvider);
    protected virtual IMvxPluginConfiguration GetPluginConfiguration(Type plugin);
    public virtual IEnumerable`1<Assembly> GetPluginAssemblies();
    private static bool AssemblyReferencesMvvmCross(Assembly assembly, string mvvmCrossAssemblyName);
    public virtual void LoadPlugins(IMvxPluginManager pluginManager);
    protected virtual IMvxApplication CreateMvxApplication(IMvxIoCProvider iocProvider);
    protected virtual IMvxApplication InitializeMvxApplication(IMvxIoCProvider iocProvider);
    protected virtual void InitializeApp(IMvxApplication app);
    protected virtual IMvxViewsContainer InitializeViewsContainer(IMvxIoCProvider iocProvider);
    protected virtual void InitializeViewDispatcher(IMvxIoCProvider iocProvider);
    protected virtual IMvxNavigationService InitializeNavigationService(IMvxIoCProvider iocProvider);
    protected virtual void LoadNavigationServiceRoutes(IMvxNavigationService navigationService, IMvxIoCProvider iocProvider);
    public virtual IEnumerable`1<Assembly> GetViewAssemblies();
    public virtual IEnumerable`1<Assembly> GetViewModelAssemblies();
    protected virtual IEnumerable`1<Assembly> GetBootstrapOwningAssemblies();
    protected abstract virtual IMvxNameMapping CreateViewToViewModelNaming();
    protected virtual IMvxViewModelByNameLookup CreateViewModelByNameLookup(IMvxIoCProvider iocProvider);
    protected virtual IMvxViewModelByNameRegistry CreateViewModelByNameRegistry(IMvxIoCProvider iocProvider);
    protected virtual IMvxNameMapping InitializeViewModelTypeFinder(IMvxIoCProvider iocProvider);
    protected virtual IDictionary`2<Type, Type> InitializeLookupDictionary(IMvxIoCProvider iocProvider);
    protected virtual IMvxViewsContainer InitializeViewLookup(IDictionary`2<Type, Type> viewModelViewLookup, IMvxIoCProvider iocProvider);
    protected virtual void InitializeBindingBuilder(IMvxIoCProvider iocProvider);
    protected virtual void InitializeLastChance(IMvxIoCProvider iocProvider);
    public sealed virtual IEnumerable`1<Type> CreatableTypes();
    public sealed virtual IEnumerable`1<Type> CreatableTypes(Assembly assembly);
    private void FireStateChange(MvxSetupState state);
    protected static void ValidateArguments(IMvxIoCProvider iocProvider);
}
[ExtensionAttribute]
public static class MvvmCross.Core.MvxSetupExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RegisterSetupType(object platformApplication, Assembly[] assemblies);
    [NullableContextAttribute("1")]
public static TSetup CreateSetup(Assembly assembly, Object[] parameters);
    public static TSetup CreateSetup();
    [NullableContextAttribute("2")]
public static Type FindSetupType(Assembly assembly);
    [NullableContextAttribute("2")]
public static Type FindSetupType();
}
public abstract class MvvmCross.Core.MvxSetupSingleton : MvxSingleton`1<MvxSetupSingleton> {
    private static object LockObject;
    private IMvxSetup _setup;
    protected IMvxSetup Setup { get; }
    private static MvxSetupSingleton();
    protected virtual IMvxSetup get_Setup();
    public virtual TMvxSetup PlatformSetup();
    protected static TMvxSetupSingleton EnsureSingletonAvailable();
    public virtual void EnsureInitialized();
    protected virtual void CreateSetup();
}
public enum MvvmCross.Core.MvxSetupState : Enum {
    public int value__;
    public static MvxSetupState Uninitialized;
    public static MvxSetupState InitializingPrimary;
    public static MvxSetupState InitializedPrimary;
    public static MvxSetupState InitializingSecondary;
    public static MvxSetupState Initialized;
}
public class MvvmCross.Core.MvxSetupStateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MvxSetupState <SetupState>k__BackingField;
    public MvxSetupState SetupState { get; }
    public MvxSetupStateEventArgs(MvxSetupState setupState);
    [CompilerGeneratedAttribute]
public MvxSetupState get_SetupState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Core.MvxSimplePropertyDictionaryExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToSimpleStringPropertyDictionary(IDictionary`2<string, object> input);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IDictionary`2<string, string> SafeGetData(IMvxBundle bundle);
    [ExtensionAttribute]
public static void Write(IDictionary`2<string, string> data, object toStore);
    [ExtensionAttribute]
public static T Read(IDictionary`2<string, string> data);
    [ExtensionAttribute]
public static object Read(IDictionary`2<string, string> data, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<object> CreateArgumentList(IDictionary`2<string, string> data, IEnumerable`1<ParameterInfo> requiredParameters, string debugText);
    [ExtensionAttribute]
public static object GetArgumentValue(IDictionary`2<string, string> data, ParameterInfo requiredParameter, string debugText);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToSimplePropertyDictionary(object input);
    [ExtensionAttribute]
public static string GetPropertyValueAsString(object input, PropertyInfo propertyInfo);
    [ExtensionAttribute]
private static string ToStringInvariant(object value);
}
public class MvvmCross.Core.MvxStringToTypeParser : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IDictionary`2<Type, IParser> <TypeParsers>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<IExtraParser> <ExtraParsers>k__BackingField;
    [NullableAttribute("1")]
public IDictionary`2<Type, IParser> TypeParsers { get; }
    [NullableAttribute("1")]
public IList`1<IExtraParser> ExtraParsers { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<Type, IParser> get_TypeParsers();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual IList`1<IExtraParser> get_ExtraParsers();
    [NullableContextAttribute("1")]
public sealed virtual bool TypeSupported(Type targetType);
    [NullableContextAttribute("1")]
public sealed virtual object ReadValue(string rawValue, Type targetType, string fieldOrParameterName);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.Parse.StringDictionary.IMvxStringDictionaryParser {
    public abstract virtual IDictionary`2<string, string> Parse(string textToParse);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Core.Parse.StringDictionary.IMvxStringDictionaryWriter {
    public abstract virtual string Write(IDictionary`2<string, string> dictionary);
}
public class MvvmCross.Core.Parse.StringDictionary.MvxStringDictionaryParser : MvxParser {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CurrentEntries>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Dictionary`2<string, string> CurrentEntries { get; private set; }
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, string> get_CurrentEntries();
    [CompilerGeneratedAttribute]
private void set_CurrentEntries(Dictionary`2<string, string> value);
    [NullableContextAttribute("1")]
public sealed virtual IDictionary`2<string, string> Parse(string textToParse);
    [NullableContextAttribute("2")]
protected virtual void Reset(string textToParse);
    private void ParseNextKeyValuePair();
}
public class MvvmCross.Core.Parse.StringDictionary.MvxStringDictionaryWriter : object {
    [NullableContextAttribute("1")]
public sealed virtual string Write(IDictionary`2<string, string> dictionary);
    [NullableContextAttribute("1")]
private static string Quote(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Core.Parse.StringDictionary.MvxViewModelRequestCustomTextSerializer : object {
    [NullableAttribute("2")]
private IMvxViewModelByNameLookup _byNameLookup;
    protected IMvxViewModelByNameLookup ByNameLookup { get; }
    protected IMvxViewModelByNameLookup get_ByNameLookup();
    public sealed virtual string SerializeObject(object toSerialise);
    public sealed virtual T DeserializeObject(string inputText);
    public sealed virtual object DeserializeObject(Type type, string inputText);
    protected virtual IDictionary`2<string, string> DeserializeStringDictionary(string inputText);
    protected virtual MvxViewModelRequest DeserializeViewModelRequest(string inputText);
    protected virtual string Serialize(IDictionary`2<string, string> toSerialise);
    protected virtual string Serialize(MvxViewModelRequest toSerialise);
    protected virtual string SerializeViewModelName(Type viewModelType);
    protected virtual Type DeserializeViewModelType(string viewModelTypeName);
    private static string SafeGetValue(IDictionary`2<string, string> dictionary, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Exceptions.MvxException : Exception {
    public MvxException(string message);
    public MvxException(string messageFormat, Object[] messageFormatArguments);
    public MvxException(Exception innerException, string messageFormat, Object[] formatArguments);
    public MvxException(string message, Exception innerException);
    protected MvxException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Exceptions.MvxExceptionExtensions : object {
    [ExtensionAttribute]
public static string ToLongString(Exception exception);
    [ExtensionAttribute]
public static Exception MvxWrap(Exception exception);
    [ExtensionAttribute]
public static Exception MvxWrap(Exception exception, string message);
    [ExtensionAttribute]
public static Exception MvxWrap(Exception exception, string messageFormat, Object[] formatArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Exceptions.MvxIoCResolveException : MvxException {
    public MvxIoCResolveException(string message);
    public MvxIoCResolveException(string messageFormat, Object[] messageFormatArguments);
    public MvxIoCResolveException(Exception innerException, string messageFormat, Object[] formatArguments);
    public MvxIoCResolveException(string message, Exception innerException);
    protected MvxIoCResolveException(SerializationInfo info, StreamingContext context);
}
public interface MvvmCross.IoC.IMvxIocOptions {
    public bool TryToDetectSingletonCircularReferences { get; }
    public bool TryToDetectDynamicCircularReferences { get; }
    public bool CheckDisposeIfPropertyInjectionFails { get; }
    public Type PropertyInjectorType { get; }
    public IMvxPropertyInjectorOptions PropertyInjectorOptions { get; }
    public abstract virtual bool get_TryToDetectSingletonCircularReferences();
    public abstract virtual bool get_TryToDetectDynamicCircularReferences();
    public abstract virtual bool get_CheckDisposeIfPropertyInjectionFails();
    public abstract virtual Type get_PropertyInjectorType();
    public abstract virtual IMvxPropertyInjectorOptions get_PropertyInjectorOptions();
}
[NullableContextAttribute("1")]
public interface MvvmCross.IoC.IMvxIoCProvider {
    public abstract virtual bool CanResolve();
    public abstract virtual bool CanResolve(Type type);
    public abstract virtual T Resolve();
    public abstract virtual object Resolve(Type type);
    public abstract virtual bool TryResolve(T& resolved);
    public abstract virtual bool TryResolve(Type type, Object& resolved);
    public abstract virtual T Create();
    public abstract virtual object Create(Type type);
    public abstract virtual T GetSingleton();
    public abstract virtual object GetSingleton(Type type);
    public abstract virtual void RegisterType();
    public abstract virtual void RegisterType(Func`1<TInterface> constructor);
    public abstract virtual void RegisterType(Type t, Func`1<object> constructor);
    public abstract virtual void RegisterType(Type tFrom, Type tTo);
    public abstract virtual void RegisterSingleton(TInterface theObject);
    public abstract virtual void RegisterSingleton(Type tInterface, object theObject);
    public abstract virtual void RegisterSingleton(Func`1<TInterface> theConstructor);
    public abstract virtual void RegisterSingleton(Type tInterface, Func`1<object> theConstructor);
    public abstract virtual T IoCConstruct();
    public abstract virtual T IoCConstruct(IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public abstract virtual T IoCConstruct(object arguments);
    public abstract virtual T IoCConstruct(Object[] arguments);
    public abstract virtual object IoCConstruct(Type type);
    public abstract virtual object IoCConstruct(Type type, IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public abstract virtual object IoCConstruct(Type type, object arguments);
    public abstract virtual object IoCConstruct(Type type, Object[] arguments);
    public abstract virtual IMvxIoCProvider CreateChildContainer();
}
public interface MvvmCross.IoC.IMvxPropertyInjector {
    public abstract virtual void Inject(object target, IMvxPropertyInjectorOptions options);
}
public interface MvvmCross.IoC.IMvxPropertyInjectorOptions {
    public MvxPropertyInjection InjectIntoProperties { get; }
    public bool ThrowIfPropertyInjectionFails { get; }
    public abstract virtual MvxPropertyInjection get_InjectIntoProperties();
    public abstract virtual bool get_ThrowIfPropertyInjectionFails();
}
public interface MvvmCross.IoC.IMvxTypeCache`1 {
    public Dictionary`2<string, Type> LowerCaseFullNameCache { get; }
    public Dictionary`2<string, Type> FullNameCache { get; }
    public Dictionary`2<string, Type> NameCache { get; }
    public abstract virtual Dictionary`2<string, Type> get_LowerCaseFullNameCache();
    public abstract virtual Dictionary`2<string, Type> get_FullNameCache();
    public abstract virtual Dictionary`2<string, Type> get_NameCache();
    public abstract virtual void AddAssembly(Assembly assembly);
}
[AttributeUsageAttribute("128")]
public abstract class MvvmCross.IoC.MvxConditionalConventionalAttribute : Attribute {
    public bool IsConditionSatisfied { get; }
    public abstract virtual bool get_IsConditionSatisfied();
}
[ExtensionAttribute]
public static class MvvmCross.IoC.MvxConventionAttributeExtensions : object {
    [ExtensionAttribute]
public static bool IsConventional(Type candidateType);
    [ExtensionAttribute]
public static bool IsConventional(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static bool SatisfiesConditionalConventions(Type candidateType);
    [ExtensionAttribute]
public static bool SatisfiesConditionalConventions(PropertyInfo propertyInfo);
}
[AttributeUsageAttribute("128")]
public class MvvmCross.IoC.MvxInjectAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.IoC.MvxIoCContainer : object {
    private Dictionary`2<Type, IResolver> _resolvers;
    private Dictionary`2<Type, bool> _circularTypeDetection;
    private object _lockObject;
    private IMvxIocOptions _options;
    [NullableAttribute("2")]
private IMvxPropertyInjector _propertyInjector;
    [NullableAttribute("2")]
private IMvxIoCProvider _parentProvider;
    private static Nullable`1<ResolverType> ResolverTypeNoneSpecified;
    private IMvxIocOptions Options { get; }
    [NullableContextAttribute("2")]
public MvxIoCContainer(IMvxIocOptions options, IMvxIoCProvider parentProvider);
    public MvxIoCContainer(IMvxIoCProvider parentProvider);
    private IMvxIocOptions get_Options();
    public sealed virtual bool CanResolve();
    public sealed virtual bool CanResolve(Type type);
    public sealed virtual bool TryResolve(T& resolved);
    public sealed virtual bool TryResolve(Type type, Object& resolved);
    public sealed virtual T Resolve();
    public sealed virtual object Resolve(Type type);
    public sealed virtual T GetSingleton();
    public sealed virtual object GetSingleton(Type type);
    public sealed virtual T Create();
    public sealed virtual object Create(Type type);
    public sealed virtual void RegisterType();
    public sealed virtual void RegisterType(Func`1<TInterface> constructor);
    public sealed virtual void RegisterType(Type t, Func`1<object> constructor);
    public sealed virtual void RegisterType(Type tFrom, Type tTo);
    public sealed virtual void RegisterSingleton(TInterface theObject);
    public sealed virtual void RegisterSingleton(Type tInterface, object theObject);
    public sealed virtual void RegisterSingleton(Func`1<TInterface> theConstructor);
    public sealed virtual void RegisterSingleton(Type tInterface, Func`1<object> theConstructor);
    public sealed virtual object IoCConstruct(Type type);
    [NullableContextAttribute("2")]
public sealed virtual object IoCConstruct(Type type, object arguments);
    public sealed virtual T IoCConstruct();
    public sealed virtual T IoCConstruct(IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public sealed virtual T IoCConstruct(object arguments);
    public sealed virtual T IoCConstruct(Object[] arguments);
    public sealed virtual object IoCConstruct(Type type, Object[] arguments);
    public sealed virtual object IoCConstruct(Type type, IDictionary`2<string, object> arguments);
    private object IoCConstruct(Type type, ConstructorInfo constructor, Object[] arguments);
    public void CleanAllResolvers();
    public sealed virtual IMvxIoCProvider CreateChildContainer();
    [NullableContextAttribute("2")]
private static bool Supports(IResolver resolver, Nullable`1<ResolverType> requiredResolverType);
    private bool InternalTryResolve(Type type, Object& resolved);
    private bool InternalTryResolve(Type type, Nullable`1<ResolverType> requiredResolverType, Object& resolved);
    private bool InternalTryResolve(Type type, IResolver resolver, Object& resolved);
    private bool TryGetResolver(Type type, IResolver& resolver);
    private bool ShouldDetectCircularReferencesFor(IResolver resolver);
    private void InternalSetResolver(Type interfaceType, IResolver resolver);
    private void InjectProperties(object toReturn);
    private List`1<object> GetIoCParameterValues(Type type, MethodBase selectedConstructor, IDictionary`2<string, object> arguments);
    private List`1<object> GetIoCParameterValues(Type type, MethodBase selectedConstructor, Object[] arguments);
    private bool TryResolveParameter(Type type, ParameterInfo parameterInfo, Object& parameterValue);
}
[ExtensionAttribute]
public static class MvvmCross.IoC.MvxIoCContainerExtensions : object {
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`2<TParameter1, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`3<TParameter1, TParameter2, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`4<TParameter1, TParameter2, TParameter3, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`5<TParameter1, TParameter2, TParameter3, TParameter4, TInterface> typedConstructor);
    [ExtensionAttribute]
private static Func`1<TInterface> CreateResolver(IMvxIoCProvider ioc, Func`6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TInterface> typedConstructor);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc, IDictionary`2<string, object> arguments);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc, object arguments);
    [ExtensionAttribute]
public static TType ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Object[] arguments);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, IDictionary`2<string, object> arguments);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, object arguments);
    [ExtensionAttribute]
public static object ConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, Object[] arguments);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`1<TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Type type, Func`1<object> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`2<TParameter1, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`3<TParameter1, TParameter2, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`4<TParameter1, TParameter2, TParameter3, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`5<TParameter1, TParameter2, TParameter3, TParameter4, TInterface> constructor);
    [ExtensionAttribute]
public static void LazyConstructAndRegisterSingleton(IMvxIoCProvider ioc, Func`6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Type tType);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`2<TParameter1, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`3<TParameter1, TParameter2, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`4<TParameter1, TParameter2, TParameter3, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`5<TParameter1, TParameter2, TParameter3, TParameter4, TInterface> constructor);
    [ExtensionAttribute]
public static void RegisterType(IMvxIoCProvider ioc, Func`6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TInterface> constructor);
}
public class MvvmCross.IoC.MvxIocOptions : object {
    [CompilerGeneratedAttribute]
private bool <TryToDetectSingletonCircularReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryToDetectDynamicCircularReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckDisposeIfPropertyInjectionFails>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyInjectorType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxPropertyInjectorOptions <PropertyInjectorOptions>k__BackingField;
    public bool TryToDetectSingletonCircularReferences { get; public set; }
    public bool TryToDetectDynamicCircularReferences { get; public set; }
    public bool CheckDisposeIfPropertyInjectionFails { get; public set; }
    public Type PropertyInjectorType { get; public set; }
    public IMvxPropertyInjectorOptions PropertyInjectorOptions { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TryToDetectSingletonCircularReferences();
    [CompilerGeneratedAttribute]
public void set_TryToDetectSingletonCircularReferences(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TryToDetectDynamicCircularReferences();
    [CompilerGeneratedAttribute]
public void set_TryToDetectDynamicCircularReferences(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CheckDisposeIfPropertyInjectionFails();
    [CompilerGeneratedAttribute]
public void set_CheckDisposeIfPropertyInjectionFails(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_PropertyInjectorType();
    [CompilerGeneratedAttribute]
public void set_PropertyInjectorType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxPropertyInjectorOptions get_PropertyInjectorOptions();
    [CompilerGeneratedAttribute]
public void set_PropertyInjectorOptions(IMvxPropertyInjectorOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.IoC.MvxIoCProvider : MvxSingleton`1<IMvxIoCProvider> {
    private MvxIoCContainer _provider;
    [NullableContextAttribute("2")]
private MvxIoCProvider(IMvxIocOptions options);
    public static IMvxIoCProvider Initialize(IMvxIocOptions options);
    public sealed virtual bool CanResolve();
    public sealed virtual bool CanResolve(Type type);
    public sealed virtual bool TryResolve(T& resolved);
    public sealed virtual bool TryResolve(Type type, Object& resolved);
    public sealed virtual T Resolve();
    public sealed virtual object Resolve(Type type);
    public sealed virtual T GetSingleton();
    public sealed virtual object GetSingleton(Type type);
    public sealed virtual T Create();
    public sealed virtual object Create(Type type);
    public sealed virtual void RegisterType();
    public sealed virtual void RegisterType(Func`1<TInterface> constructor);
    public sealed virtual void RegisterType(Type t, Func`1<object> constructor);
    public sealed virtual void RegisterType(Type tFrom, Type tTo);
    public sealed virtual void RegisterSingleton(TInterface theObject);
    public sealed virtual void RegisterSingleton(Type tInterface, object theObject);
    public sealed virtual void RegisterSingleton(Func`1<TInterface> theConstructor);
    public sealed virtual void RegisterSingleton(Type tInterface, Func`1<object> theConstructor);
    public sealed virtual T IoCConstruct();
    public sealed virtual T IoCConstruct(IDictionary`2<string, object> arguments);
    public sealed virtual T IoCConstruct(Object[] arguments);
    [NullableContextAttribute("2")]
public sealed virtual T IoCConstruct(object arguments);
    public sealed virtual object IoCConstruct(Type type);
    public sealed virtual object IoCConstruct(Type type, IDictionary`2<string, object> arguments);
    [NullableContextAttribute("2")]
public sealed virtual object IoCConstruct(Type type, object arguments);
    public sealed virtual object IoCConstruct(Type type, Object[] arguments);
    public void CleanAllResolvers();
    public sealed virtual IMvxIoCProvider CreateChildContainer();
}
public class MvvmCross.IoC.MvxLazySingletonCreator : object {
    private object _lockObject;
    private Type _type;
    private object _instance;
    public object Instance { get; }
    public MvxLazySingletonCreator(Type type);
    public object get_Instance();
}
public enum MvvmCross.IoC.MvxPropertyInjection : Enum {
    public int value__;
    public static MvxPropertyInjection None;
    public static MvxPropertyInjection MvxInjectInterfaceProperties;
    public static MvxPropertyInjection AllInterfaceProperties;
}
public class MvvmCross.IoC.MvxPropertyInjector : object {
    public virtual void Inject(object target, IMvxPropertyInjectorOptions options);
    protected virtual void InjectProperty(object toReturn, PropertyInfo injectableProperty, IMvxPropertyInjectorOptions options);
    protected virtual IEnumerable`1<PropertyInfo> FindInjectableProperties(Type type, IMvxPropertyInjectorOptions options);
}
public class MvvmCross.IoC.MvxPropertyInjectorOptions : object {
    [CompilerGeneratedAttribute]
private MvxPropertyInjection <InjectIntoProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowIfPropertyInjectionFails>k__BackingField;
    private static IMvxPropertyInjectorOptions _mvxInjectProperties;
    private static IMvxPropertyInjectorOptions _allProperties;
    public MvxPropertyInjection InjectIntoProperties { get; public set; }
    public bool ThrowIfPropertyInjectionFails { get; public set; }
    public static IMvxPropertyInjectorOptions MvxInject { get; }
    public static IMvxPropertyInjectorOptions All { get; }
    [CompilerGeneratedAttribute]
public sealed virtual MvxPropertyInjection get_InjectIntoProperties();
    [CompilerGeneratedAttribute]
public void set_InjectIntoProperties(MvxPropertyInjection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ThrowIfPropertyInjectionFails();
    [CompilerGeneratedAttribute]
public void set_ThrowIfPropertyInjectionFails(bool value);
    public static IMvxPropertyInjectorOptions get_MvxInject();
    public static IMvxPropertyInjectorOptions get_All();
}
public class MvvmCross.IoC.MvxTypeCache`1 : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <LowerCaseFullNameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <FullNameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <NameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Assembly, bool> <CachedAssemblies>k__BackingField;
    public Dictionary`2<string, Type> LowerCaseFullNameCache { get; }
    public Dictionary`2<string, Type> FullNameCache { get; }
    public Dictionary`2<string, Type> NameCache { get; }
    public Dictionary`2<Assembly, bool> CachedAssemblies { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Type> get_LowerCaseFullNameCache();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Type> get_FullNameCache();
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, Type> get_NameCache();
    [CompilerGeneratedAttribute]
public Dictionary`2<Assembly, bool> get_CachedAssemblies();
    public sealed virtual void AddAssembly(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.IoC.MvxTypeExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> ExceptionSafeGetTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<Type> CreatableTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<Type> EndingWith(IEnumerable`1<Type> types, string endingWith);
    [ExtensionAttribute]
public static IEnumerable`1<Type> StartingWith(IEnumerable`1<Type> types, string endingWith);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Containing(IEnumerable`1<Type> types, string containing);
    [ExtensionAttribute]
public static IEnumerable`1<Type> InNamespace(IEnumerable`1<Type> types, string namespaceBase);
    [ExtensionAttribute]
public static IEnumerable`1<Type> WithAttribute(IEnumerable`1<Type> types, Type attributeType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> WithAttribute(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Inherits(IEnumerable`1<Type> types, Type baseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Inherits(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<Type> DoesNotInherit(IEnumerable`1<Type> types, Type baseType);
    [ExtensionAttribute]
public static IEnumerable`1<Type> DoesNotInherit(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<Type> Except(IEnumerable`1<Type> types, Type[] except);
    [ExtensionAttribute]
public static bool IsGenericPartiallyClosed(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> AsTypes(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> AsInterfaces(IEnumerable`1<Type> types);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> AsInterfaces(IEnumerable`1<Type> types, Type[] interfaces);
    [ExtensionAttribute]
public static IEnumerable`1<ServiceTypeAndImplementationTypePair> ExcludeInterfaces(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs, Type[] toExclude);
    [ExtensionAttribute]
public static void RegisterAsSingleton(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs);
    [ExtensionAttribute]
public static void RegisterAsLazySingleton(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs);
    [ExtensionAttribute]
public static void RegisterAsDynamic(IEnumerable`1<ServiceTypeAndImplementationTypePair> pairs);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static object CreateDefault(Type type);
    [ExtensionAttribute]
public static ConstructorInfo FindApplicableConstructor(Type type, IDictionary`2<string, object> arguments);
    [ExtensionAttribute]
public static ConstructorInfo FindApplicableConstructor(Type type, Object[] arguments);
}
[AttributeUsageAttribute("4")]
public class MvvmCross.IoC.MvxUnconventionalAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface MvvmCross.Localization.IMvxLanguageBinder {
    public abstract virtual string GetText(string entryKey);
    public abstract virtual string GetText(string entryKey, Object[] args);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Localization.IMvxLocalizedTextSourceOwner {
    public IMvxLanguageBinder LocalizedTextSource { get; }
    public abstract virtual IMvxLanguageBinder get_LocalizedTextSource();
}
[NullableContextAttribute("1")]
public interface MvvmCross.Localization.IMvxTextProvider {
    [NullableContextAttribute("2")]
public abstract virtual string GetText(string namespaceKey, string typeKey, string name);
    [NullableContextAttribute("2")]
public abstract virtual string GetText(string namespaceKey, string typeKey, string name, Object[] formatArgs);
    public abstract virtual bool TryGetText(String& textValue, string namespaceKey, string typeKey, string name);
    public abstract virtual bool TryGetText(String& textValue, string namespaceKey, string typeKey, string name, Object[] formatArgs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Localization.MvxLanguageBinder : object {
    [NullableAttribute("1")]
private object _lockObject;
    private string _namespaceName;
    private string _typeName;
    private IMvxTextProvider _cachedTextProvider;
    [NullableContextAttribute("1")]
public MvxLanguageBinder(Type owningObject);
    public MvxLanguageBinder(string namespaceName, string typeName);
    protected virtual IMvxTextProvider GetTextProvider();
    [NullableContextAttribute("1")]
public virtual string GetText(string entryKey);
    [NullableContextAttribute("1")]
public virtual string GetText(string entryKey, Object[] args);
    protected virtual string GetText(string namespaceKey, string typeKey, string entryKey);
}
public class MvvmCross.Localization.MvxLanguageConverter : MvxValueConverter {
    [NullableContextAttribute("2")]
public virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class MvvmCross.Logging.MvxLogHost : object {
    private static ILogger _defaultLogger;
    public static ILogger Default { get; }
    public static ILogger get_Default();
    public static ILogger`1<T> GetLog();
    [NullableContextAttribute("1")]
public static ILogger GetLog(string categoryName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class MvvmCross.Mvx : object {
    public static IMvxIoCProvider IoCProvider { get; }
    public static IMvxIoCProvider get_IoCProvider();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Navigation.EventArguments.ChangePresentationEventArgs : MvxCancelEventArgs {
    [CompilerGeneratedAttribute]
private MvxPresentationHint <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Result>k__BackingField;
    public MvxPresentationHint Hint { get; public set; }
    public Nullable`1<bool> Result { get; public set; }
    public ChangePresentationEventArgs(CancellationToken cancellationToken);
    public ChangePresentationEventArgs(MvxPresentationHint hint, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public MvxPresentationHint get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(MvxPresentationHint value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(Nullable`1<bool> value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Navigation.EventArguments.IMvxNavigateEventArgs {
    public bool Cancel { get; public set; }
    public NavigationMode Mode { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public abstract virtual bool get_Cancel();
    public abstract virtual void set_Cancel(bool value);
    public abstract virtual NavigationMode get_Mode();
    public abstract virtual void set_Mode(NavigationMode value);
    public abstract virtual IMvxViewModel get_ViewModel();
    public abstract virtual void set_ViewModel(IMvxViewModel value);
}
public class MvvmCross.Navigation.EventArguments.MvxCancelEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    protected CancellationToken CancellationToken { get; }
    public MvxCancelEventArgs(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
protected CancellationToken get_CancellationToken();
    protected virtual void Canceled();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.Navigation.EventArguments.MvxNavigateEventArgs : MvxCancelEventArgs {
    [CompilerGeneratedAttribute]
private NavigationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxViewModel <ViewModel>k__BackingField;
    public NavigationMode Mode { get; public set; }
    public IMvxViewModel ViewModel { get; public set; }
    public MvxNavigateEventArgs(NavigationMode mode, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public MvxNavigateEventArgs(IMvxViewModel viewModel, NavigationMode mode, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual NavigationMode get_Mode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Mode(NavigationMode value);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxViewModel get_ViewModel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewModel(IMvxViewModel value);
    private sealed virtual override bool MvvmCross.Navigation.EventArguments.IMvxNavigateEventArgs.get_Cancel();
    private sealed virtual override void MvvmCross.Navigation.EventArguments.IMvxNavigateEventArgs.set_Cancel(bool value);
}
public enum MvvmCross.Navigation.EventArguments.NavigationMode : Enum {
    public int value__;
    public static NavigationMode None;
    public static NavigationMode Show;
    public static NavigationMode Close;
}
public interface MvvmCross.Navigation.IMvxNavigationFacade {
    public abstract virtual Task`1<MvxViewModelRequest> BuildViewModelRequest(string url, IDictionary`2<string, string> currentParameters);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Navigation.IMvxNavigationService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    public abstract virtual void LoadRoutes(IEnumerable`1<Assembly> assemblies);
    public abstract virtual Task`1<bool> Navigate(IMvxViewModel viewModel, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(Type viewModelType, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(Type viewModelType, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(string path, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(string path, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> Navigate(TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CanNavigate(string path);
    public abstract virtual Task`1<bool> CanNavigate();
    public abstract virtual Task`1<bool> CanNavigate(Type viewModelType);
    public abstract virtual Task`1<bool> Close(IMvxViewModel viewModel, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class MvvmCross.Navigation.MvxNavigationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewModelOrFacade>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UriRegex>k__BackingField;
    public Type ViewModelOrFacade { get; }
    public string UriRegex { get; }
    public MvxNavigationAttribute(Type viewModelOrFacade, string uriRegex);
    [CompilerGeneratedAttribute]
public Type get_ViewModelOrFacade();
    [CompilerGeneratedAttribute]
public string get_UriRegex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Navigation.MvxNavigationExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> CanNavigate(IMvxNavigationService navigationService, Uri path);
    [ExtensionAttribute]
public static Task Navigate(IMvxNavigationService navigationService, Uri path, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task Navigate(IMvxNavigationService navigationService, Uri path, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Navigation.MvxNavigationService : object {
    private IMvxIoCProvider _iocProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ILogger> _log;
    [CompilerGeneratedAttribute]
private IMvxViewDispatcher <ViewDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<IMvxViewsContainer> <ViewsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Regex, Type> <Routes>k__BackingField;
    [CompilerGeneratedAttribute]
private IMvxViewModelLoader <ViewModelLoader>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConditionalWeakTable`2<IMvxViewModel, TaskCompletionSource`1<object>> <TaskCompletionResults>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> WillNavigate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> DidNavigate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> WillClose;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<IMvxNavigateEventArgs> DidClose;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ChangePresentationEventArgs> WillChangePresentation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<ChangePresentationEventArgs> DidChangePresentation;
    public IMvxViewDispatcher ViewDispatcher { get; }
    protected Lazy`1<IMvxViewsContainer> ViewsContainer { get; }
    protected Dictionary`2<Regex, Type> Routes { get; }
    protected IMvxViewModelLoader ViewModelLoader { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected ConditionalWeakTable`2<IMvxViewModel, TaskCompletionSource`1<object>> TaskCompletionResults { get; }
    public MvxNavigationService(IMvxViewModelLoader viewModelLoader, IMvxViewDispatcher viewDispatcher, IMvxIoCProvider iocProvider);
    [CompilerGeneratedAttribute]
public IMvxViewDispatcher get_ViewDispatcher();
    [CompilerGeneratedAttribute]
protected Lazy`1<IMvxViewsContainer> get_ViewsContainer();
    [CompilerGeneratedAttribute]
protected Dictionary`2<Regex, Type> get_Routes();
    [CompilerGeneratedAttribute]
protected IMvxViewModelLoader get_ViewModelLoader();
    [CompilerGeneratedAttribute]
protected void set_ViewModelLoader(IMvxViewModelLoader value);
    [CompilerGeneratedAttribute]
protected ConditionalWeakTable`2<IMvxViewModel, TaskCompletionSource`1<object>> get_TaskCompletionResults();
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DidNavigate(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DidClose(EventHandler`1<IMvxNavigateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WillChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DidChangePresentation(EventHandler`1<ChangePresentationEventArgs> value);
    public sealed virtual void LoadRoutes(IEnumerable`1<Assembly> assemblies);
    protected virtual bool TryGetRoute(string path, KeyValuePair`2& entry);
    protected virtual IDictionary`2<string, string> BuildParamDictionary(Regex regex, Match match);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<NavigationRouteRequest>d__40")]
protected virtual Task`1<MvxViewModelInstanceRequest> NavigationRouteRequest(string path, IMvxBundle presentationBundle);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<NavigationRouteRequest>d__41`1")]
protected Task`1<MvxViewModelInstanceRequest> NavigationRouteRequest(string path, TParameter param, IMvxBundle presentationBundle);
    public virtual Task`1<bool> CanNavigate(string path);
    public virtual Task`1<bool> CanNavigate();
    public virtual Task`1<bool> CanNavigate(Type viewModelType);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Navigate>d__45")]
protected virtual Task`1<bool> Navigate(MvxViewModelRequest request, IMvxViewModel viewModel, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Navigate>d__46")]
public virtual Task`1<bool> Navigate(string path, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Navigate>d__47`1")]
public virtual Task`1<bool> Navigate(string path, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(Type viewModelType, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(Type viewModelType, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(IMvxViewModel viewModel, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    public virtual Task`1<bool> Navigate(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle presentationBundle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<ChangePresentation>d__54")]
public virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MvvmCross.Navigation.MvxNavigationService/<Close>d__55")]
public virtual Task`1<bool> Close(IMvxViewModel viewModel, CancellationToken cancellationToken);
    protected virtual void OnWillNavigate(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnDidNavigate(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnWillClose(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnDidClose(object sender, IMvxNavigateEventArgs e);
    protected virtual void OnWillChangePresentation(object sender, ChangePresentationEventArgs e);
    protected virtual void OnDidChangePresentation(object sender, ChangePresentationEventArgs e);
    private static void ValidateArguments(MvxViewModelRequest request, IMvxViewModel viewModel);
    private static void ValidateArguments(string path, TParameter param);
    private static void ValidateArguments(string path);
    private static void ValidateArguments(MvxPresentationHint hint);
    private static void ValidateArguments(IMvxViewModel viewModel);
    [CompilerGeneratedAttribute]
private IMvxViewsContainer <.ctor>b__36_0();
}
public static class MvvmCross.Platforms.WinUi.Binding.Bi : object {
    public static DependencyProperty ndProperty;
    private static IMvxBindingCreator _bindingCreator;
    private static IMvxBindingCreator BindingCreator { get; }
    private static Bi();
    public static string Getnd(DependencyObject obj);
    public static void Setnd(DependencyObject obj, string value);
    private static IMvxBindingCreator get_BindingCreator();
    private static IMvxBindingCreator ResolveBindingCreator();
    private static void CallBackWhenndIsChanged(object sender, DependencyPropertyChangedEventArgs args);
    private static IEnumerable`1<MvxBindingDescription> ParseBindingDescriptions(string bindingText);
}
public class MvvmCross.Platforms.WinUi.Binding.Import : object {
    private object _from;
    public object From { get; public set; }
    private static Import();
    public object get_From();
    public void set_From(object value);
    private static void RegisterAssembly(Assembly assembly);
}
public interface MvvmCross.Platforms.WinUi.Binding.IMvxBindingCreator {
    public abstract virtual void CreateBindings(object sender, DependencyPropertyChangedEventArgs args, Func`2<string, IEnumerable`1<MvxBindingDescription>> parseBindingDescriptions);
}
public interface MvvmCross.Platforms.WinUi.Binding.IMvxWindowsAssemblyCache {
    public IList`1<Assembly> Assemblies { get; }
    public abstract virtual IList`1<Assembly> get_Assemblies();
}
public static class MvvmCross.Platforms.WinUi.Binding.La : object {
    public static DependencyProperty ngProperty;
    private static IMvxBindingCreator _bindingCreator;
    private static IMvxBindingCreator BindingCreator { get; }
    private static La();
    public static string Getng(DependencyObject obj);
    public static void Setng(DependencyObject obj, string value);
    private static IMvxBindingCreator get_BindingCreator();
    private static void CallBackWhenngIsChanged(object sender, DependencyPropertyChangedEventArgs args);
    private static IEnumerable`1<MvxBindingDescription> ParseBindingDescriptions(string languageText);
}
public class MvvmCross.Platforms.WinUi.Binding.MvxBinding.MvxMvvmCrossBindingCreator : MvxBindingCreator {
    public static DependencyProperty DataContextWatcherProperty;
    public static DependencyProperty BindingsListProperty;
    private static MvxMvvmCrossBindingCreator();
    protected virtual void ApplyBindings(FrameworkElement attachedObject, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
    private void RegisterBindingsForUpdates(FrameworkElement attachedObject, IEnumerable`1<IMvxUpdateableBinding> bindings);
    private IList`1<IMvxUpdateableBinding> GetOrCreateBindingsList(FrameworkElement attachedObject);
    public static object GetDataContextWatcher(DependencyObject d);
    public static void SetDataContextWatcher(DependencyObject d, string value);
    public static IList`1<IMvxUpdateableBinding> GetBindingsList(DependencyObject d);
    public static void SetBindingsList(DependencyObject d, string value);
    private static void DataContext_Changed(DependencyObject d, DependencyPropertyChangedEventArgs e);
}
public class MvvmCross.Platforms.WinUi.Binding.MvxBinding.MvxWindowsTargetBindingFactoryRegistry : MvxTargetBindingFactoryRegistry {
    protected virtual bool TryCreateReflectionBasedBinding(object target, string targetName, IMvxTargetBinding& binding);
    private static bool TryCreatePropertyDependencyBasedBinding(object target, string targetName, IMvxTargetBinding& binding);
}
public class MvvmCross.Platforms.WinUi.Binding.MvxBinding.Target.MvxCollapsedTargetBinding : MvxVisibleTargetBinding {
    public MvxCollapsedTargetBinding(object target);
    public virtual void SetValue(object value);
}
public class MvvmCross.Platforms.WinUi.Binding.MvxBinding.Target.MvxDependencyPropertyTargetBinding : MvxConvertingTargetBinding {
    private string _targetName;
    private DependencyProperty _targetDependencyProperty;
    private Type _actualPropertyType;
    [CompilerGeneratedAttribute]
private MvxBindingMode <DefaultMode>k__BackingField;
    public Type TargetValueType { get; }
    public MvxBindingMode DefaultMode { get; }
    public MvxDependencyPropertyTargetBinding(object target, string targetName, DependencyProperty targetDependencyProperty, Type actualPropertyType);
    public virtual void SubscribeToEvents();
    public virtual Type get_TargetValueType();
    [CompilerGeneratedAttribute]
public virtual MvxBindingMode get_DefaultMode();
    protected virtual object GetValueByReflection();
    protected virtual void SetValueImpl(object target, object value);
    protected virtual object MakeSafeValue(object value);
    [CompilerGeneratedAttribute]
private void <SubscribeToEvents>b__4_0(DependencyObject s, DependencyPropertyChangedEventArgs e);
}
public class MvvmCross.Platforms.WinUi.Binding.MvxBinding.Target.MvxVisibleTargetBinding : MvxDependencyPropertyTargetBinding {
    public MvxBindingMode DefaultMode { get; }
    public MvxVisibleTargetBinding(object target);
    public virtual MvxBindingMode get_DefaultMode();
    public virtual void SetValue(object value);
}
public abstract class MvvmCross.Platforms.WinUi.Binding.MvxBindingCreator : object {
    public sealed virtual void CreateBindings(object sender, DependencyPropertyChangedEventArgs args, Func`2<string, IEnumerable`1<MvxBindingDescription>> parseBindingDescriptions);
    protected abstract virtual void ApplyBindings(FrameworkElement attachedObject, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.WinUi.Binding.MvxDependencyPropertyExtensions : object {
    [ExtensionAttribute]
public static PropertyInfo FindActualProperty(Type type, string name);
    private static PropertyInfo FindDependencyPropertyInfo(Type type, string dependencyPropertyName);
    [ExtensionAttribute]
public static DependencyProperty FindDependencyProperty(Type type, string name);
    private static bool EnsureIsDependencyPropertyName(String& dependencyPropertyName);
}
public static class MvvmCross.Platforms.WinUi.Binding.MvxDesignTimeChecker : object {
    private static bool _checked;
    public static void Check();
}
public class MvvmCross.Platforms.WinUi.Binding.MvxWindowsAssemblyCache : MvxSingleton`1<IMvxWindowsAssemblyCache> {
    [CompilerGeneratedAttribute]
private IList`1<Assembly> <Assemblies>k__BackingField;
    public IList`1<Assembly> Assemblies { get; }
    public static void EnsureInitialized();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Assembly> get_Assemblies();
}
public class MvvmCross.Platforms.WinUi.Binding.MvxWindowsBindingBuilder : MvxBindingBuilder {
    private BindingType _bindingType;
    private Action`1<IMvxTargetBindingFactoryRegistry> _fillTargetFactories;
    private Action`1<IMvxBindingNameRegistry> _fillBindingNames;
    private Action`1<IMvxValueConverterRegistry> _fillValueConverters;
    private Action`1<IMvxValueCombinerRegistry> _fillValueCombiners;
    public MvxWindowsBindingBuilder(Action`1<IMvxTargetBindingFactoryRegistry> fillTargetFactories, Action`1<IMvxBindingNameRegistry> fillBindingNames, Action`1<IMvxValueConverterRegistry> fillValueConverters, Action`1<IMvxValueCombinerRegistry> fillValueCombiners, BindingType bindingType);
    public virtual void DoRegistration(IMvxIoCProvider iocProvider);
    protected virtual void RegisterBindingFactories(IMvxIoCProvider iocProvider);
    protected virtual IMvxTargetBindingFactoryRegistry CreateTargetBindingRegistry();
    private void InitializeBindingCreator();
    protected virtual IMvxBindingCreator CreateBindingCreator();
    protected virtual void FillDefaultBindingNames(IMvxBindingNameRegistry registry);
    protected virtual void FillValueConverters(IMvxValueConverterRegistry registry);
    protected virtual void FillValueCombiners(IMvxValueCombinerRegistry registry);
    protected virtual void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
}
public class MvvmCross.Platforms.WinUi.Binding.MvxWindowsBindingCreator : MvxBindingCreator {
    protected virtual void ApplyBinding(MvxBindingDescription bindingDescription, Type actualType, FrameworkElement attachedObject);
    protected virtual void ApplyBindings(FrameworkElement attachedObject, IEnumerable`1<MvxBindingDescription> bindingDescriptions);
    protected static IValueConverter GetConverter(IMvxValueConverter converter);
    protected static BindingMode ConvertMode(MvxBindingMode mode, Type propertyType);
}
internal static class MvvmCross.Platforms.WinUi.Binding.MvxWindowsPropertyBinding : object {
    public static string FrameworkElement_Visible;
    public static string FrameworkElement_Collapsed;
    public static string FrameworkElement_Hidden;
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.WinUi.Binding.MvxWindowsPropertyBindingExtensions : object {
    [ExtensionAttribute]
public static string BindVisible(FrameworkElement frameworkElement);
    [ExtensionAttribute]
public static string BindCollapsed(FrameworkElement frameworkElement);
    [ExtensionAttribute]
public static string BindHidden(FrameworkElement frameworkElement);
}
public class MvvmCross.Platforms.WinUi.Converters.MvxNativeValueConverter : object {
    private IMvxValueConverter _wrapped;
    protected IMvxValueConverter Wrapped { get; }
    public MvxNativeValueConverter(IMvxValueConverter wrapped);
    protected IMvxValueConverter get_Wrapped();
    public virtual object Convert(object value, Type targetType, object parameter, string language);
    public virtual object ConvertBack(object value, Type targetType, object parameter, string language);
    private static object MapIfSpecialValue(object toReturn);
}
public class MvvmCross.Platforms.WinUi.Converters.MvxNativeValueConverter`1 : MvxNativeValueConverter {
    protected T Wrapped { get; }
    protected T get_Wrapped();
}
public interface MvvmCross.Platforms.WinUi.Core.IMvxWindowsSetup {
    public abstract virtual void PlatformInitialize(Frame rootFrame, string activatedEventArgs, string suspensionManagerSessionStateKey);
    public abstract virtual void PlatformInitialize(Frame rootFrame, string suspensionManagerSessionStateKey);
    public abstract virtual void PlatformInitialize(IMvxWindowsFrame rootFrame);
    public abstract virtual void UpdateActivationArguments(string e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Platforms.WinUi.Core.MvxWindowsSetup : MvxSetup {
    [NullableAttribute("2")]
private IMvxWindowsFrame _rootFrame;
    [NullableAttribute("2")]
private string _suspensionManagerSessionStateKey;
    [NullableAttribute("2")]
private IMvxWindowsViewPresenter _presenter;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ActivationArguments>k__BackingField;
    protected IMvxWindowsViewPresenter Presenter { get; }
    [NullableAttribute("2")]
protected string ActivationArguments { get; private set; }
    protected List`1<Type> ValueConverterHolders { get; }
    protected IEnumerable`1<Assembly> ValueConverterAssemblies { get; }
    public virtual void PlatformInitialize(Frame rootFrame, string activatedEventArgs, string suspensionManagerSessionStateKey);
    public virtual void PlatformInitialize(Frame rootFrame, string suspensionManagerSessionStateKey);
    public virtual void PlatformInitialize(IMvxWindowsFrame rootFrame);
    public virtual void UpdateActivationArguments(string e);
    protected virtual void InitializeFirstChance(IMvxIoCProvider iocProvider);
    protected virtual void InitializeSuspensionManager(IMvxIoCProvider iocProvider);
    protected virtual IMvxSuspensionManager CreateSuspensionManager();
    protected sealed virtual IMvxViewsContainer CreateViewsContainer(IMvxIoCProvider iocProvider);
    protected virtual IMvxStoreViewsContainer CreateStoreViewsContainer();
    protected IMvxWindowsViewPresenter get_Presenter();
    protected virtual IMvxWindowsViewPresenter CreateViewPresenter(IMvxWindowsFrame rootFrame);
    protected virtual MvxWindowsViewDispatcher CreateViewDispatcher(IMvxWindowsFrame rootFrame);
    protected virtual IMvxViewDispatcher CreateViewDispatcher();
    protected virtual void RegisterPresenter(IMvxIoCProvider iocProvider);
    protected virtual void InitializeBindingBuilder(IMvxIoCProvider iocProvider);
    protected virtual void FillBindingNames(IMvxBindingNameRegistry registry);
    protected virtual void FillValueConverters(IMvxValueConverterRegistry registry);
    protected virtual void FillValueCombiners(IMvxValueCombinerRegistry registry);
    protected virtual void FillTargetFactories(IMvxTargetBindingFactoryRegistry registry);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_ActivationArguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ActivationArguments(string value);
    protected virtual List`1<Type> get_ValueConverterHolders();
    protected virtual IEnumerable`1<Assembly> get_ValueConverterAssemblies();
    protected virtual MvxBindingBuilder CreateBindingBuilder();
    protected virtual IMvxNameMapping CreateViewToViewModelNaming();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Platforms.WinUi.Core.MvxWindowsSetup`1 : MvxWindowsSetup {
    protected virtual IMvxApplication CreateApp(IMvxIoCProvider iocProvider);
    public virtual IEnumerable`1<Assembly> GetViewModelAssemblies();
}
public class MvvmCross.Platforms.WinUi.Core.MvxWindowsSetupSingleton : MvxSetupSingleton {
    public static MvxWindowsSetupSingleton EnsureSingletonAvailable(Frame rootFrame, string activatedEventArgs, string suspensionManagerSessionStateKey);
    public static MvxWindowsSetupSingleton EnsureSingletonAvailable(Frame rootFrame, string suspensionManagerSessionStateKey);
    public static MvxWindowsSetupSingleton EnsureSingletonAvailable(IMvxWindowsFrame rootFrame);
}
public abstract class MvvmCross.Platforms.WinUi.MvxDesignTimeHelper : object {
    private static Nullable`1<bool> _isInDesignTime;
    protected static bool IsInDesignTool { get; }
    protected static bool get_IsInDesignTool();
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.WinUi.MvxPseudoAsyncExtensions : object {
    [ExtensionAttribute]
public static void Await(IAsyncAction operation);
    [ExtensionAttribute]
public static TResult Await(IAsyncOperation`1<TResult> operation);
}
public class MvvmCross.Platforms.WinUi.Presenters.Attributes.MvxDialogViewPresentationAttribute : MvxBasePresentationAttribute {
    [CompilerGeneratedAttribute]
private ContentDialogPlacement <Placement>k__BackingField;
    public ContentDialogPlacement Placement { get; public set; }
    [CompilerGeneratedAttribute]
public ContentDialogPlacement get_Placement();
    [CompilerGeneratedAttribute]
public void set_Placement(ContentDialogPlacement value);
}
public class MvvmCross.Platforms.WinUi.Presenters.Attributes.MvxPagePresentationAttribute : MvxBasePresentationAttribute {
}
public class MvvmCross.Platforms.WinUi.Presenters.Attributes.MvxRegionPresentationAttribute : MvxBasePresentationAttribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public MvxRegionPresentationAttribute(string regionName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public class MvvmCross.Platforms.WinUi.Presenters.Attributes.MvxSplitViewPresentationAttribute : MvxBasePresentationAttribute {
    [CompilerGeneratedAttribute]
private SplitPanePosition <Position>k__BackingField;
    public SplitPanePosition Position { get; public set; }
    public MvxSplitViewPresentationAttribute(SplitPanePosition position);
    [CompilerGeneratedAttribute]
public SplitPanePosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(SplitPanePosition value);
}
public enum MvvmCross.Platforms.WinUi.Presenters.Attributes.SplitPanePosition : Enum {
    public int value__;
    public static SplitPanePosition Pane;
    public static SplitPanePosition Content;
}
public interface MvvmCross.Platforms.WinUi.Presenters.IMvxWindowsViewPresenter {
}
public class MvvmCross.Platforms.WinUi.Presenters.MvxWindowsViewPresenter : MvxAttributeViewPresenter {
    protected IMvxWindowsFrame _rootFrame;
    private ILogger`1<MvxWindowsViewPresenter> _logger;
    private IMvxViewModelLoader _viewModelLoader;
    public IMvxViewModelLoader ViewModelLoader { get; public set; }
    public MvxWindowsViewPresenter(IMvxWindowsFrame rootFrame);
    public IMvxViewModelLoader get_ViewModelLoader();
    public void set_ViewModelLoader(IMvxViewModelLoader value);
    public virtual void RegisterAttributeTypes();
    public virtual MvxBasePresentationAttribute CreatePresentationAttribute(Type viewModelType, Type viewType);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.WinUi.Presenters.MvxWindowsViewPresenter/<BackButtonOnBackRequested>d__9")]
protected virtual void BackButtonOnBackRequested(object sender, BackRequestedEventArgs backRequestedEventArgs);
    protected virtual string GetRequestText(MvxViewModelRequest request);
    protected virtual void HandleBackButtonVisibility();
    protected virtual Task`1<bool> ShowSplitView(Type viewType, MvxSplitViewPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual Task`1<bool> CloseSplitView(IMvxViewModel viewModel, MvxSplitViewPresentationAttribute attribute);
    protected virtual Task`1<bool> ShowRegionView(Type viewType, MvxRegionPresentationAttribute attribute, MvxViewModelRequest request);
    protected virtual Task`1<bool> CloseRegionView(IMvxViewModel viewModel, MvxRegionPresentationAttribute attribute);
    protected virtual Task`1<bool> ClosePage(IMvxViewModel viewModel, MvxBasePresentationAttribute attribute);
    protected virtual Task`1<bool> ShowPage(Type viewType, MvxBasePresentationAttribute attribute, MvxViewModelRequest request);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.WinUi.Presenters.MvxWindowsViewPresenter/<ShowDialog>d__18")]
protected virtual Task`1<bool> ShowDialog(Type viewType, MvxDialogViewPresentationAttribute attribute, MvxViewModelRequest request);
    public virtual Control CreateControl(Type viewType, MvxViewModelRequest request, MvxBasePresentationAttribute attribute);
    protected virtual Task`1<bool> CloseDialog(IMvxViewModel viewModel, MvxBasePresentationAttribute attribute);
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxStoreViewsContainer {
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsContentDialog {
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsContentDialog`1 {
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsFrame {
    public Control UnderlyingControl { get; }
    public object Content { get; }
    public bool CanGoBack { get; }
    public abstract virtual Control get_UnderlyingControl();
    public abstract virtual object get_Content();
    public abstract virtual bool get_CanGoBack();
    public abstract virtual bool Navigate(Type viewType, object parameter);
    public abstract virtual void GoBack();
    public abstract virtual void ClearValue(DependencyProperty property);
    public abstract virtual object GetValue(DependencyProperty property);
    public abstract virtual void SetValue(DependencyProperty property, object value);
    public abstract virtual void SetNavigationState(string state);
    public abstract virtual string GetNavigationState();
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsView {
    public abstract virtual void ClearBackStack();
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsView`1 {
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsViewModelLoader {
    public abstract virtual IMvxViewModel Load(string requestText, IMvxBundle savedState);
}
public interface MvvmCross.Platforms.WinUi.Views.IMvxWindowsViewModelRequestTranslator {
    public abstract virtual string GetRequestTextFor(MvxViewModelRequest request);
    public abstract virtual string GetRequestTextWithKeyFor(IMvxViewModel existingViewModelToUse);
    public abstract virtual void RemoveSubViewModelWithKey(int key);
    public abstract virtual int RequestTextGetKey(string requestText);
}
public abstract class MvvmCross.Platforms.WinUi.Views.MvxApplication : Application {
    [CompilerGeneratedAttribute]
private Frame <RootFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private Window <MainWindow>k__BackingField;
    protected Frame RootFrame { get; protected set; }
    protected Window MainWindow { get; protected set; }
    [CompilerGeneratedAttribute]
protected Frame get_RootFrame();
    [CompilerGeneratedAttribute]
protected void set_RootFrame(Frame value);
    [CompilerGeneratedAttribute]
protected Window get_MainWindow();
    [CompilerGeneratedAttribute]
protected void set_MainWindow(Window value);
    protected virtual void OnLaunched(LaunchActivatedEventArgs args);
    protected virtual void RunAppStart(string arguments);
    protected virtual object GetAppStartHint(object hint);
    protected virtual Window CreateWindow();
    protected virtual Frame InitializeFrame(string arguments);
    protected virtual Frame CreateFrame();
    protected virtual void OnNavigationFailed(object sender, NavigationFailedEventArgs e);
    protected virtual void RegisterSetup();
}
public class MvvmCross.Platforms.WinUi.Views.MvxApplication`2 : MvxApplication {
    protected virtual void RegisterSetup();
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsContentDialog : ContentDialog {
    private IMvxViewModel _viewModel;
    public IMvxViewModel ViewModel { get; public set; }
    private void MvxWindowsContentDialog_Loading(FrameworkElement sender, object args);
    private void MvxWindowsContentDialog_Loaded(object sender, RoutedEventArgs e);
    private void MvxWindowsContentDialog_Opened(ContentDialog sender, ContentDialogOpenedEventArgs args);
    private void MvxWindowsContentDialog_Closing(ContentDialog sender, ContentDialogClosingEventArgs args);
    private void MvxWindowsContentDialog_Closed(ContentDialog sender, ContentDialogClosedEventArgs args);
    private void MvxWindowsContentDialog_Unloaded(object sender, RoutedEventArgs e);
    public sealed virtual IMvxViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(IMvxViewModel value);
    protected virtual void OnViewModelSet();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object MvvmCross.Base.IMvxDataConsumer.get_DataContext();
    private sealed virtual override void MvvmCross.Base.IMvxDataConsumer.set_DataContext(object value);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsContentDialog`1 : MvxWindowsContentDialog {
    public TViewModel ViewModel { get; public set; }
    public sealed virtual TViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(TViewModel value);
    private sealed virtual override object MvvmCross.Base.IMvxDataConsumer.get_DataContext();
    private sealed virtual override void MvvmCross.Base.IMvxDataConsumer.set_DataContext(object value);
}
[ExtensionAttribute]
public static class MvvmCross.Platforms.WinUi.Views.MvxWindowsExtensions : object {
    [ExtensionAttribute]
public static void OnViewCreate(IMvxWindowsView storeView, string requestText, Func`1<IMvxBundle> bundleLoader);
    [ExtensionAttribute]
public static void OnViewCreate(IMvxWindowsView storeView, Func`1<IMvxViewModel> viewModelLoader);
    [ExtensionAttribute]
public static void OnViewDestroy(IMvxWindowsView storeView, int key);
    [ExtensionAttribute]
public static bool HasRegionAttribute(Type view);
    [ExtensionAttribute]
public static string GetRegionName(Type view);
    [ExtensionAttribute]
public static T FindControl(UIElement parent, string name);
    [ExtensionAttribute]
private static IMvxViewModel LoadViewModel(IMvxWindowsView storeView, string requestText, IMvxBundle bundle);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsMainThreadDispatcher : MvxMainThreadAsyncDispatcher {
    private DispatcherQueue _uiDispatcher;
    public bool IsOnMainThread { get; }
    public MvxWindowsMainThreadDispatcher(DispatcherQueue uiDispatcher);
    public virtual bool get_IsOnMainThread();
    public virtual bool RequestMainThreadAction(Action action, bool maskExceptions);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsPage : Page {
    private IMvxViewModel _viewModel;
    private string _reqData;
    private string _pageKey;
    private IMvxSuspensionManager _suspensionManager;
    public IMvxWindowsFrame WrappedFrame { get; }
    public IMvxViewModel ViewModel { get; public set; }
    protected IMvxSuspensionManager SuspensionManager { get; }
    private void MvxWindowsPage_Loading(FrameworkElement sender, object args);
    private void MvxWindowsPage_Loaded(object sender, RoutedEventArgs e);
    private void MvxWindowsPage_Unloaded(object sender, RoutedEventArgs e);
    protected virtual void OnNavigatingFrom(NavigatingCancelEventArgs e);
    public IMvxWindowsFrame get_WrappedFrame();
    public sealed virtual IMvxViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(IMvxViewModel value);
    protected virtual void OnViewModelSet();
    public virtual void ClearBackStack();
    protected virtual void UpdateBackButtonVisibility();
    protected virtual void OnNavigatedTo(NavigationEventArgs e);
    protected virtual void OnNavigatedFrom(NavigationEventArgs e);
    protected IMvxSuspensionManager get_SuspensionManager();
    protected virtual IMvxBundle LoadStateBundle(NavigationEventArgs e);
    protected virtual void SaveStateBundle(NavigationEventArgs navigationEventArgs, IMvxBundle bundle);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override object MvvmCross.Base.IMvxDataConsumer.get_DataContext();
    private sealed virtual override void MvvmCross.Base.IMvxDataConsumer.set_DataContext(object value);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsPage`1 : MvxWindowsPage {
    public TViewModel ViewModel { get; public set; }
    public sealed virtual TViewModel get_ViewModel();
    public sealed virtual void set_ViewModel(TViewModel value);
    private sealed virtual override object MvvmCross.Base.IMvxDataConsumer.get_DataContext();
    private sealed virtual override void MvvmCross.Base.IMvxDataConsumer.set_DataContext(object value);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsViewDispatcher : MvxWindowsMainThreadDispatcher {
    private IMvxWindowsViewPresenter _presenter;
    public MvxWindowsViewDispatcher(IMvxWindowsViewPresenter presenter, IMvxWindowsFrame rootFrame);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.WinUi.Views.MvxWindowsViewDispatcher/<ShowViewModel>d__2")]
public sealed virtual Task`1<bool> ShowViewModel(MvxViewModelRequest request);
    [AsyncStateMachineAttribute("MvvmCross.Platforms.WinUi.Views.MvxWindowsViewDispatcher/<ChangePresentation>d__3")]
public sealed virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWindowsViewsContainer : MvxViewsContainer {
    private static string ExtrasKey;
    private static string SubViewModelKey;
    public sealed virtual IMvxViewModel Load(string requestText, IMvxBundle savedState);
    public sealed virtual string GetRequestTextFor(MvxViewModelRequest request);
    public sealed virtual string GetRequestTextWithKeyFor(IMvxViewModel existingViewModelToUse);
    public sealed virtual void RemoveSubViewModelWithKey(int key);
    public sealed virtual int RequestTextGetKey(string requestText);
}
public class MvvmCross.Platforms.WinUi.Views.MvxWrappedFrame : object {
    private Frame _frame;
    public Control UnderlyingControl { get; }
    public object Content { get; }
    public bool CanGoBack { get; }
    public MvxWrappedFrame(Frame frame);
    public sealed virtual Control get_UnderlyingControl();
    public sealed virtual object get_Content();
    public sealed virtual bool get_CanGoBack();
    public sealed virtual bool Navigate(Type viewType, object parameter);
    public sealed virtual void GoBack();
    public sealed virtual void ClearValue(DependencyProperty property);
    public sealed virtual object GetValue(DependencyProperty property);
    public sealed virtual void SetValue(DependencyProperty property, object value);
    public sealed virtual void SetNavigationState(string state);
    public sealed virtual string GetNavigationState();
}
public interface MvvmCross.Platforms.WinUi.Views.Suspension.IMvxSuspensionManager {
    public Dictionary`2<string, object> SessionState { get; }
    public List`1<Type> KnownTypes { get; }
    public abstract virtual Dictionary`2<string, object> get_SessionState();
    public abstract virtual List`1<Type> get_KnownTypes();
    public abstract virtual Task SaveAsync();
    public abstract virtual Task RestoreAsync();
    public abstract virtual void RegisterFrame(IMvxWindowsFrame frame, string sessionStateKey);
    public abstract virtual void UnregisterFrame(IMvxWindowsFrame frame);
    public abstract virtual Dictionary`2<string, object> SessionStateForFrame(IMvxWindowsFrame frame);
}
public class MvvmCross.Platforms.WinUi.Views.Suspension.MvxSuspensionManager : object {
    protected static string SessionStateFilename;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <SessionState>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <KnownTypes>k__BackingField;
    protected DependencyProperty MvxFrameSessionStateKeyProperty;
    protected DependencyProperty MvxFrameSessionStateProperty;
    protected List`1<WeakReference`1<IMvxWindowsFrame>> _registeredFrames;
    public Dictionary`2<string, object> SessionState { get; protected set; }
    public List`1<Type> KnownTypes { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, object> get_SessionState();
    [CompilerGeneratedAttribute]
protected void set_SessionState(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Type> get_KnownTypes();
    [AsyncStateMachineAttribute("MvvmCross.Platforms.WinUi.Views.Suspension.MvxSuspensionManager/<SaveAsync>d__8")]
public virtual Task SaveAsync();
    [AsyncStateMachineAttribute("MvvmCross.Platforms.WinUi.Views.Suspension.MvxSuspensionManager/<RestoreAsync>d__9")]
public virtual Task RestoreAsync();
    public virtual void RegisterFrame(IMvxWindowsFrame frame, string sessionStateKey);
    public virtual void UnregisterFrame(IMvxWindowsFrame frame);
    public virtual Dictionary`2<string, object> SessionStateForFrame(IMvxWindowsFrame frame);
    protected virtual void RestoreFrameNavigationState(IMvxWindowsFrame frame);
    protected virtual void SaveFrameNavigationState(IMvxWindowsFrame frame);
}
public class MvvmCross.Platforms.WinUi.Views.Suspension.MvxSuspensionManagerException : MvxException {
    public MvxSuspensionManagerException(Exception e);
}
public interface MvvmCross.Plugin.IMvxConfigurablePlugin {
    [NullableContextAttribute("1")]
public abstract virtual void Configure(IMvxPluginConfiguration configuration);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Plugin.IMvxPlugin {
    public abstract virtual void Load(IMvxIoCProvider provider);
}
public interface MvvmCross.Plugin.IMvxPluginConfiguration {
}
[NullableContextAttribute("1")]
public interface MvvmCross.Plugin.IMvxPluginManager {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Type, IMvxPluginConfiguration> ConfigurationSource { get; }
    public IEnumerable`1<Type> LoadedPlugins { get; }
    public abstract virtual Func`2<Type, IMvxPluginConfiguration> get_ConfigurationSource();
    public abstract virtual IEnumerable`1<Type> get_LoadedPlugins();
    public abstract virtual bool IsPluginLoaded(Type type);
    [NullableContextAttribute("0")]
public abstract virtual bool IsPluginLoaded();
    public abstract virtual void EnsurePluginLoaded(Type type, bool forceLoad);
    [NullableContextAttribute("0")]
public abstract virtual void EnsurePluginLoaded(bool forceLoad);
    public abstract virtual bool TryEnsurePluginLoaded(Type type, bool forceLoad);
    [NullableContextAttribute("0")]
public abstract virtual bool TryEnsurePluginLoaded(bool forceLoad);
}
[AttributeUsageAttribute("4")]
public class MvvmCross.Plugin.MvxPluginAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Plugin.MvxPluginManager : object {
    private IMvxIoCProvider _provider;
    private object _lockObject;
    private HashSet`1<Type> _loadedPlugins;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<Type, IMvxPluginConfiguration> <ConfigurationSource>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<Type, IMvxPluginConfiguration> ConfigurationSource { get; }
    public IEnumerable`1<Type> LoadedPlugins { get; }
    public MvxPluginManager(IMvxIoCProvider provider, Func`2<Type, IMvxPluginConfiguration> configurationSource);
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<Type, IMvxPluginConfiguration> get_ConfigurationSource();
    public sealed virtual IEnumerable`1<Type> get_LoadedPlugins();
    [NullableContextAttribute("0")]
public sealed virtual void EnsurePluginLoaded(bool forceLoad);
    public virtual void EnsurePluginLoaded(Type type, bool forceLoad);
    protected IMvxPluginConfiguration ConfigurationFor(Type toLoad);
    [NullableContextAttribute("0")]
public sealed virtual bool IsPluginLoaded();
    public sealed virtual bool IsPluginLoaded(Type type);
    [NullableContextAttribute("0")]
public sealed virtual bool TryEnsurePluginLoaded(bool forceLoad);
    public sealed virtual bool TryEnsurePluginLoaded(Type type, bool forceLoad);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Presenters.Attributes.IMvxPresentationAttribute {
    public Type ViewModelType { get; public set; }
    public Type ViewType { get; public set; }
    public abstract virtual Type get_ViewModelType();
    public abstract virtual void set_ViewModelType(Type value);
    public abstract virtual Type get_ViewType();
    public abstract virtual void set_ViewType(Type value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public abstract class MvvmCross.Presenters.Attributes.MvxBasePresentationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewModelType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ViewType>k__BackingField;
    public Type ViewModelType { get; public set; }
    public Type ViewType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ViewModelType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewModelType(Type value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ViewType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ViewType(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxClosePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private IMvxViewModel <ViewModelToClose>k__BackingField;
    public IMvxViewModel ViewModelToClose { get; }
    public MvxClosePresentationHint(IMvxViewModel viewModelToClose);
    public MvxClosePresentationHint(IMvxViewModel viewModelToClose, MvxBundle body);
    public MvxClosePresentationHint(IMvxViewModel viewModelToClose, IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public IMvxViewModel get_ViewModelToClose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPagePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private Type <ViewModel>k__BackingField;
    public Type ViewModel { get; }
    public MvxPagePresentationHint(Type viewModel);
    public MvxPagePresentationHint(Type viewModel, MvxBundle body);
    public MvxPagePresentationHint(Type viewModel, IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public Type get_ViewModel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPopPresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private Type <ViewModelToPopTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    public Type ViewModelToPopTo { get; }
    public bool Animated { get; public set; }
    public MvxPopPresentationHint(Type viewModelToPopTo, bool animated);
    public MvxPopPresentationHint(MvxBundle body, Type viewModelToPopTo, bool animated);
    public MvxPopPresentationHint(IDictionary`2<string, string> hints, Type viewModelToPopTo, bool animated);
    [CompilerGeneratedAttribute]
public Type get_ViewModelToPopTo();
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPopRecursivePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private int <LevelsDeep>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    public int LevelsDeep { get; }
    public bool Animated { get; public set; }
    public MvxPopRecursivePresentationHint(int levelsDeep, bool animated);
    public MvxPopRecursivePresentationHint(MvxBundle body, int levelsDeep, bool animated);
    public MvxPopRecursivePresentationHint(IDictionary`2<string, string> hints, int levelsDeep, bool animated);
    [CompilerGeneratedAttribute]
public int get_LevelsDeep();
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxPopToRootPresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private bool <Animated>k__BackingField;
    public bool Animated { get; public set; }
    public MvxPopToRootPresentationHint(bool animated);
    public MvxPopToRootPresentationHint(MvxBundle body, bool animated);
    public MvxPopToRootPresentationHint(IDictionary`2<string, string> hints, bool animated);
    [CompilerGeneratedAttribute]
public bool get_Animated();
    [CompilerGeneratedAttribute]
public void set_Animated(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.Presenters.Hints.MvxRemovePresentationHint : MvxPresentationHint {
    [CompilerGeneratedAttribute]
private Type <ViewModelToRemove>k__BackingField;
    public Type ViewModelToRemove { get; }
    public MvxRemovePresentationHint(Type viewModelToRemove);
    public MvxRemovePresentationHint(Type viewModelToRemove, MvxBundle body);
    public MvxRemovePresentationHint(Type viewModelToRemove, IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public Type get_ViewModelToRemove();
}
[NullableContextAttribute("2")]
public interface MvvmCross.Presenters.IMvxAttributeViewPresenter {
    public IMvxViewModelTypeFinder ViewModelTypeFinder { get; }
    public IMvxViewsContainer ViewsContainer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<Type, MvxPresentationAttributeAction> AttributeTypesToActionsDictionary { get; }
    public abstract virtual IMvxViewModelTypeFinder get_ViewModelTypeFinder();
    public abstract virtual IMvxViewsContainer get_ViewsContainer();
    public abstract virtual IDictionary`2<Type, MvxPresentationAttributeAction> get_AttributeTypesToActionsDictionary();
    public abstract virtual void RegisterAttributeTypes();
    [NullableContextAttribute("1")]
public abstract virtual MvxBasePresentationAttribute GetPresentationAttribute(MvxViewModelRequest request);
    [NullableContextAttribute("1")]
public abstract virtual MvxBasePresentationAttribute CreatePresentationAttribute(Type viewModelType, Type viewType);
    [NullableContextAttribute("1")]
public abstract virtual MvxBasePresentationAttribute GetOverridePresentationAttribute(MvxViewModelRequest request, Type viewType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Presenters.IMvxOverridePresentationAttribute {
    public abstract virtual MvxBasePresentationAttribute PresentationAttribute(MvxViewModelRequest request);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Presenters.IMvxViewPresenter {
    public abstract virtual Task`1<bool> Show(MvxViewModelRequest request);
    public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    public abstract virtual void AddPresentationHintHandler(Func`2<THint, Task`1<bool>> action);
    public abstract virtual Task`1<bool> Close(IMvxViewModel viewModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Presenters.MvxAttributeViewPresenter : MvxViewPresenter {
    private Lazy`1<IMvxViewModelTypeFinder> _viewModelTypeFinder;
    private Lazy`1<IMvxViewsContainer> _viewsContainer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<Type, MvxPresentationAttributeAction> _attributeTypesActionsDictionary;
    public IMvxViewModelTypeFinder ViewModelTypeFinder { get; }
    public IMvxViewsContainer ViewsContainer { get; }
    public IDictionary`2<Type, MvxPresentationAttributeAction> AttributeTypesToActionsDictionary { get; }
    public virtual IMvxViewModelTypeFinder get_ViewModelTypeFinder();
    public virtual IMvxViewsContainer get_ViewsContainer();
    public virtual IDictionary`2<Type, MvxPresentationAttributeAction> get_AttributeTypesToActionsDictionary();
    public abstract virtual void RegisterAttributeTypes();
    public abstract virtual MvxBasePresentationAttribute CreatePresentationAttribute(Type viewModelType, Type viewType);
    public virtual object CreateOverridePresentationAttributeViewInstance(Type viewType);
    public virtual MvxBasePresentationAttribute GetOverridePresentationAttribute(MvxViewModelRequest request, Type viewType);
    public virtual MvxBasePresentationAttribute GetPresentationAttribute(MvxViewModelRequest request);
    protected virtual MvxPresentationAttributeAction GetPresentationAttributeAction(MvxViewModelRequest request, MvxBasePresentationAttribute& attribute);
    [AsyncStateMachineAttribute("MvvmCross.Presenters.MvxAttributeViewPresenter/<ChangePresentation>d__15")]
public virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    public virtual Task`1<bool> Close(IMvxViewModel viewModel);
    public virtual Task`1<bool> Show(MvxViewModelRequest request);
}
public class MvvmCross.Presenters.MvxPresentationAttributeAction : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> <ShowAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> <CloseAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> ShowAction { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> CloseAction { get; public set; }
    [CompilerGeneratedAttribute]
public Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> get_ShowAction();
    [CompilerGeneratedAttribute]
public void set_ShowAction(Func`4<Type, IMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> value);
    [CompilerGeneratedAttribute]
public Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> get_CloseAction();
    [CompilerGeneratedAttribute]
public void set_CloseAction(Func`3<IMvxViewModel, IMvxPresentationAttribute, Task`1<bool>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Presenters.MvxPresentationAttributeExtensions : object {
    [ExtensionAttribute]
public static bool HasBasePresentationAttribute(Type candidateType);
    [ExtensionAttribute]
public static IEnumerable`1<MvxBasePresentationAttribute> GetBasePresentationAttributes(Type fromViewType);
    [ExtensionAttribute]
public static MvxBasePresentationAttribute GetBasePresentationAttribute(Type fromViewType);
    [ExtensionAttribute]
public static Type GetViewModelType(Type viewType);
    [ExtensionAttribute]
public static void Register(IDictionary`2<Type, MvxPresentationAttributeAction> attributeTypesToActionsDictionary, Func`4<Type, TMvxPresentationAttribute, MvxViewModelRequest, Task`1<bool>> showAction, Func`3<IMvxViewModel, TMvxPresentationAttribute, Task`1<bool>> closeAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Presenters.MvxViewPresenter : object {
    private Dictionary`2<Type, Func`2<MvxPresentationHint, Task`1<bool>>> _presentationHintHandlers;
    public sealed virtual void AddPresentationHintHandler(Func`2<THint, Task`1<bool>> action);
    protected Task`1<bool> HandlePresentationChange(MvxPresentationHint hint);
    public abstract virtual Task`1<bool> Show(MvxViewModelRequest request);
    public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
    public abstract virtual Task`1<bool> Close(IMvxViewModel viewModel);
}
[AttributeUsageAttribute("6141")]
public class MvvmCross.PreserveAttribute : Attribute {
    public bool AllMembers;
    public bool Conditional;
}
[NullableContextAttribute("1")]
public interface MvvmCross.UI.IMvxNativeColor {
    public abstract virtual object ToNative(Color color);
}
[NullableContextAttribute("1")]
public interface MvvmCross.UI.IMvxNativeVisibility {
    public abstract virtual object ToNative(MvxVisibility visibility);
}
public enum MvvmCross.UI.MvxVisibility : Enum {
    public byte value__;
    public static MvxVisibility Visible;
    public static MvxVisibility Collapsed;
    public static MvxVisibility Hidden;
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxApplication {
    public abstract virtual void LoadPlugins(IMvxPluginManager pluginManager);
    public abstract virtual void Initialize();
    public abstract virtual Task Startup();
    public abstract virtual void Reset();
}
public interface MvvmCross.ViewModels.IMvxApplication`1 {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<THint> Startup(THint hint);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxAppStart {
    public bool IsStarted { get; }
    [NullableContextAttribute("2")]
public abstract virtual void Start(object hint);
    public abstract virtual Task StartAsync(object hint);
    public abstract virtual bool get_IsStarted();
    public abstract virtual void ResetStart();
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxBundle {
    public IDictionary`2<string, string> Data { get; }
    public abstract virtual IDictionary`2<string, string> get_Data();
    public abstract virtual void Write(object toStore);
    public abstract virtual T Read();
    public abstract virtual object Read(Type type);
    public abstract virtual IEnumerable`1<object> CreateArgumentList(IEnumerable`1<ParameterInfo> requiredParameters, string debugText);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxChildViewModelCache {
    public abstract virtual int Cache(IMvxViewModel viewModel);
    [NullableContextAttribute("2")]
public abstract virtual IMvxViewModel Get(int index);
    public abstract virtual IMvxViewModel Get(Type viewModelType);
    public abstract virtual void Remove(int index);
    public abstract virtual void Remove(Type viewModelType);
    public abstract virtual bool Exists(Type viewModelType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxInpcInterceptor {
    public abstract virtual MvxInpcInterceptionResult Intercept(IMvxNotifyPropertyChanged sender, PropertyChangedEventArgs args);
    public abstract virtual MvxInpcInterceptionResult Intercept(IMvxNotifyPropertyChanged sender, PropertyChangingEventArgs args);
}
[NullableContextAttribute("2")]
public interface MvvmCross.ViewModels.IMvxInteraction {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Requested(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Requested(EventHandler value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.ViewModels.IMvxInteraction`1 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxNameMapping {
    public abstract virtual string Map(string inputName);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxNavigationSerializer {
    public IMvxTextSerializer Serializer { get; }
    public abstract virtual IMvxTextSerializer get_Serializer();
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxNotifyPropertyChanged {
    public abstract virtual bool ShouldAlwaysRaiseInpcOnUserInterfaceThread();
    public abstract virtual void ShouldAlwaysRaiseInpcOnUserInterfaceThread(bool value);
    public abstract virtual bool ShouldRaisePropertyChanging();
    public abstract virtual void ShouldRaisePropertyChanging(bool value);
    public abstract virtual bool RaisePropertyChanging(T newValue, Expression`1<Func`1<T>> propertyExpression);
    public abstract virtual bool RaisePropertyChanging(T newValue, string whichProperty);
    public abstract virtual bool RaisePropertyChanging(MvxPropertyChangingEventArgs`1<T> changingArgs);
    public abstract virtual Task RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    public abstract virtual Task RaisePropertyChanged(string whichProperty);
    public abstract virtual Task RaisePropertyChanged(PropertyChangedEventArgs changedArgs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxTypeFinder {
    public abstract virtual Type FindTypeOrNull(Type candidateType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxTypeToTypeLookupBuilder {
    public abstract virtual IDictionary`2<Type, Type> Build(IEnumerable`1<Assembly> sourceAssemblies);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModel {
    [NullableAttribute("2")]
public MvxNotifyTask InitializeTask { get; public set; }
    public abstract virtual void ViewCreated();
    public abstract virtual void ViewAppearing();
    public abstract virtual void ViewAppeared();
    public abstract virtual void ViewDisappearing();
    public abstract virtual void ViewDisappeared();
    public abstract virtual void ViewDestroy(bool viewFinishing);
    public abstract virtual void Init(IMvxBundle parameters);
    public abstract virtual void ReloadState(IMvxBundle state);
    public abstract virtual void Start();
    public abstract virtual void SaveState(IMvxBundle state);
    public abstract virtual void Prepare();
    public abstract virtual Task Initialize();
    [NullableContextAttribute("2")]
public abstract virtual MvxNotifyTask get_InitializeTask();
    [NullableContextAttribute("2")]
public abstract virtual void set_InitializeTask(MvxNotifyTask value);
}
public interface MvvmCross.ViewModels.IMvxViewModel`1 {
    [NullableContextAttribute("1")]
public abstract virtual void Prepare(TParameter parameter);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelByNameLookup {
    public abstract virtual bool TryLookupByName(string name, Type& viewModelType);
    public abstract virtual bool TryLookupByFullName(string name, Type& viewModelType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelByNameRegistry {
    public abstract virtual void Add(Type viewModelType);
    [NullableContextAttribute("0")]
public abstract virtual void Add();
    public abstract virtual void AddAll(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelLoader {
    public abstract virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, TParameter param, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel ReloadViewModel(IMvxViewModel viewModel, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel ReloadViewModel(IMvxViewModel`1<TParameter> viewModel, TParameter param, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelLocator {
    [NullableContextAttribute("2")]
public abstract virtual IMvxViewModel Load(Type viewModelType, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel`1<TParameter> Load(Type viewModelType, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    [NullableContextAttribute("2")]
public abstract virtual IMvxViewModel Reload(IMvxViewModel viewModel, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public abstract virtual IMvxViewModel`1<TParameter> Reload(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
}
[NullableContextAttribute("1")]
public interface MvvmCross.ViewModels.IMvxViewModelLocatorCollection {
    public abstract virtual IMvxViewModelLocator FindViewModelLocator(MvxViewModelRequest request);
}
public interface MvvmCross.ViewModels.IMvxViewModelTypeFinder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxApplication : object {
    [NullableAttribute("2")]
private IMvxViewModelLocator _defaultLocator;
    private IMvxViewModelLocator DefaultLocator { get; }
    private IMvxViewModelLocator get_DefaultLocator();
    protected virtual IMvxViewModelLocator CreateDefaultViewModelLocator();
    public virtual void LoadPlugins(IMvxPluginManager pluginManager);
    public virtual void Initialize();
    public virtual Task Startup();
    public virtual void Reset();
    public sealed virtual IMvxViewModelLocator FindViewModelLocator(MvxViewModelRequest request);
    protected void RegisterCustomAppStart();
    [NullableContextAttribute("0")]
protected void RegisterAppStart();
    protected void RegisterAppStart(IMvxAppStart appStart);
    protected virtual void RegisterAppStart();
    protected IEnumerable`1<Type> CreatableTypes();
    protected IEnumerable`1<Type> CreatableTypes(Assembly assembly);
}
public class MvvmCross.ViewModels.MvxApplication`1 : MvxApplication {
    [NullableContextAttribute("1")]
public virtual Task`1<TParameter> Startup(TParameter hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxAppStart : object {
    protected IMvxNavigationService NavigationService;
    protected IMvxApplication Application;
    private int startHasCommenced;
    public bool IsStarted { get; }
    protected MvxAppStart(IMvxApplication application, IMvxNavigationService navigationService);
    [NullableContextAttribute("2")]
public sealed virtual void Start(object hint);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart/<StartAsync>d__5")]
public sealed virtual Task StartAsync(object hint);
    protected abstract virtual Task NavigateToFirstViewModel(object hint);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart/<ApplicationStartup>d__7")]
protected virtual Task`1<object> ApplicationStartup(object hint);
    public virtual bool get_IsStarted();
    public virtual void ResetStart();
    protected virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxAppStart`1 : MvxAppStart {
    public MvxAppStart`1(IMvxApplication application, IMvxNavigationService navigationService);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart`1/<NavigateToFirstViewModel>d__1")]
protected virtual Task NavigateToFirstViewModel(object hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.ViewModels.MvxAppStart`2 : MvxAppStart`1<TViewModel> {
    public MvxAppStart`2(IMvxApplication application, IMvxNavigationService navigationService);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart`2/<ApplicationStartup>d__1")]
protected virtual Task`1<object> ApplicationStartup(object hint);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxAppStart`2/<NavigateToFirstViewModel>d__2")]
protected virtual Task NavigateToFirstViewModel(object hint);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__0(object hint);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(object hint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxBundle : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Data>k__BackingField;
    public IDictionary`2<string, string> Data { get; }
    public MvxBundle(IDictionary`2<string, string> data);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Data();
    public sealed virtual void Write(object toStore);
    public sealed virtual T Read();
    public sealed virtual object Read(Type type);
    public sealed virtual IEnumerable`1<object> CreateArgumentList(IEnumerable`1<ParameterInfo> requiredParameters, string debugText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxChildViewModelCache : object {
    private Dictionary`2<int, IMvxViewModel> _viewModels;
    private int _unique;
    public sealed virtual int Cache(IMvxViewModel viewModel);
    public sealed virtual bool Exists(Type viewModelType);
    public sealed virtual IMvxViewModel Get(int index);
    public sealed virtual IMvxViewModel Get(Type viewModelType);
    public sealed virtual void Remove(int index);
    public sealed virtual void Remove(Type viewModelType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxDefaultViewModelLocator : object {
    [NullableContextAttribute("2")]
public virtual IMvxViewModel Load(Type viewModelType, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public virtual IMvxViewModel`1<TParameter> Load(Type viewModelType, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    [NullableContextAttribute("2")]
public virtual IMvxViewModel Reload(IMvxViewModel viewModel, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public virtual IMvxViewModel`1<TParameter> Reload(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    protected virtual void CallCustomInitMethods(IMvxViewModel viewModel, IMvxBundle parameterValues);
    protected virtual void CallReloadStateMethods(IMvxViewModel viewModel, IMvxBundle savedState);
    [NullableContextAttribute("2")]
protected void RunViewModelLifecycle(IMvxViewModel viewModel, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    protected void RunViewModelLifecycle(IMvxViewModel`1<TParameter> viewModel, TParameter param, IMvxBundle parameterValues, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
}
public enum MvvmCross.ViewModels.MvxInpcInterceptionResult : Enum {
    public int value__;
    public static MvxInpcInterceptionResult NotIntercepted;
    public static MvxInpcInterceptionResult RaisePropertyChanged;
    public static MvxInpcInterceptionResult DoNotRaisePropertyChanged;
    public static MvxInpcInterceptionResult RaisePropertyChanging;
    public static MvxInpcInterceptionResult DoNotRaisePropertyChanging;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxInteraction : object {
    [CompilerGeneratedAttribute]
private EventHandler Requested;
    public void Raise();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Requested(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Requested(EventHandler value);
}
public class MvvmCross.ViewModels.MvxInteraction`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MvxValueEventArgs`1<T>> Requested;
    [NullableContextAttribute("1")]
public void Raise(T request);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Requested(EventHandler`1<MvxValueEventArgs`1<T>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.ViewModels.MvxInteractionExtensions : object {
    [ExtensionAttribute]
public static IDisposable WeakSubscribe(IMvxInteraction interaction, EventHandler`1<EventArgs> action);
    [ExtensionAttribute]
public static MvxValueEventSubscription`1<T> WeakSubscribe(IMvxInteraction`1<T> interaction, EventHandler`1<MvxValueEventArgs`1<T>> action);
    [ExtensionAttribute]
public static MvxValueEventSubscription`1<T> WeakSubscribe(IMvxInteraction`1<T> interaction, Action`1<T> action);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.ViewModels.MvxJsonNavigationSerializer : MvxNavigationSerializer`1<IMvxJsonConverter> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNavigationSerializer : object {
    [CompilerGeneratedAttribute]
private IMvxTextSerializer <Serializer>k__BackingField;
    public IMvxTextSerializer Serializer { get; }
    public MvxNavigationSerializer(IMvxTextSerializer serializer);
    [CompilerGeneratedAttribute]
public sealed virtual IMvxTextSerializer get_Serializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNavigationSerializer`1 : MvxNavigationSerializer {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxNavigationViewModel : MvxViewModel {
    [NullableAttribute("2")]
private ILogger _log;
    [CompilerGeneratedAttribute]
private IMvxNavigationService <NavigationService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    protected IMvxNavigationService NavigationService { get; }
    protected ILoggerFactory LoggerFactory { get; }
    protected ILogger Log { get; }
    protected MvxNavigationViewModel(ILoggerFactory logFactory, IMvxNavigationService navigationService);
    [CompilerGeneratedAttribute]
protected virtual IMvxNavigationService get_NavigationService();
    [CompilerGeneratedAttribute]
protected virtual ILoggerFactory get_LoggerFactory();
    protected virtual ILogger get_Log();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxNavigationViewModel`1 : MvxNavigationViewModel {
    protected MvxNavigationViewModel`1(ILoggerFactory logFactory, IMvxNavigationService navigationService);
    public abstract virtual void Prepare(TParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxNotifyPropertyChanged : MvxMainThreadDispatchingObject {
    private static PropertyChangedEventArgs AllPropertiesChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    private bool _shouldAlwaysRaiseInpcOnUserInterfaceThread;
    private bool _shouldRaisePropertyChanging;
    private bool _shouldLogInpc;
    private static MvxNotifyPropertyChanged();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    public sealed virtual bool ShouldAlwaysRaiseInpcOnUserInterfaceThread();
    public sealed virtual void ShouldAlwaysRaiseInpcOnUserInterfaceThread(bool value);
    public sealed virtual bool ShouldRaisePropertyChanging();
    public sealed virtual void ShouldRaisePropertyChanging(bool value);
    public bool ShouldLogInpc();
    public void ShouldLogInpc(bool value);
    public sealed virtual bool RaisePropertyChanging(T newValue, Expression`1<Func`1<T>> propertyExpression);
    [NullableContextAttribute("2")]
public sealed virtual bool RaisePropertyChanging(T newValue, string whichProperty);
    public virtual bool RaisePropertyChanging(MvxPropertyChangingEventArgs`1<T> changingArgs);
    public virtual Task RaiseAllPropertiesChanged();
    public sealed virtual Task RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    public virtual Task RaisePropertyChanged(string whichProperty);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxNotifyPropertyChanged/<RaisePropertyChanged>d__23")]
public virtual Task RaisePropertyChanged(PropertyChangedEventArgs changedArgs);
    [NullableContextAttribute("2")]
protected virtual void SetProperty(T& storage, T value, Action`1<bool> action, string propertyName);
    [NullableContextAttribute("2")]
protected virtual bool SetProperty(T& storage, T value, Action afterAction, string propertyName);
    protected virtual bool SetProperty(T& storage, T value, string propertyName);
    protected virtual MvxInpcInterceptionResult InterceptRaisePropertyChanged(PropertyChangedEventArgs changedArgs);
    protected virtual MvxInpcInterceptionResult InterceptRaisePropertyChanging(PropertyChangingEventArgs changingArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.ViewModels.MvxNotifyPropertyChangedExtensions : object {
    private static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, Func`1<bool> raiseAction);
    [ExtensionAttribute]
public static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, Expression`1<Func`1<TReturn>> propertySelector);
    [ExtensionAttribute]
public static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, string propertyName);
    [ExtensionAttribute]
public static bool RaiseIfChanging(TSource source, TReturn backingField, TReturn newValue, MvxPropertyChangingEventArgs`1<TReturn> args);
    private static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, Func`2<TActionParameter, Task> raiseAction, TActionParameter raiseActionParameter);
    [ExtensionAttribute]
public static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, Expression`1<Func`1<TReturn>> propertySelector);
    [ExtensionAttribute]
public static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, string propertyName);
    [ExtensionAttribute]
public static TReturn RaiseAndSetIfChanged(TSource source, TReturn& backingField, TReturn newValue, PropertyChangedEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNotifyTask : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onException;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <TaskCompleted>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public Task Task { get; }
    public Task TaskCompleted { get; }
    public TaskStatus Status { get; }
    public bool IsCompleted { get; }
    public bool IsNotCompleted { get; }
    public bool IsSuccessfullyCompleted { get; }
    public bool IsCanceled { get; }
    public bool IsFaulted { get; }
    public AggregateException Exception { get; }
    [NullableAttribute("2")]
public Exception InnerException { get; }
    [NullableAttribute("2")]
public string ErrorMessage { get; }
    private MvxNotifyTask(Task task, Action`1<Exception> onException);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxNotifyTask/<MonitorTaskAsync>d__2")]
private Task MonitorTaskAsync(Task task);
    private void NotifyProperties(Task task);
    [CompilerGeneratedAttribute]
public Task get_Task();
    [CompilerGeneratedAttribute]
public Task get_TaskCompleted();
    public TaskStatus get_Status();
    public bool get_IsCompleted();
    public bool get_IsNotCompleted();
    public bool get_IsSuccessfullyCompleted();
    public bool get_IsCanceled();
    public bool get_IsFaulted();
    public AggregateException get_Exception();
    [NullableContextAttribute("2")]
public Exception get_InnerException();
    [NullableContextAttribute("2")]
public string get_ErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public static MvxNotifyTask Create(Task task, Action`1<Exception> onException);
    public static MvxNotifyTask`1<TResult> Create(Task`1<TResult> task, TResult defaultResult, Action`1<Exception> onException);
    public static MvxNotifyTask Create(Func`1<Task> asyncAction, Action`1<Exception> onException);
    public static MvxNotifyTask`1<TResult> Create(Func`1<Task`1<TResult>> asyncAction, TResult defaultResult, Action`1<Exception> onException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxNotifyTask`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Exception> _onException;
    private TResult _defaultResult;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Task`1<TResult> <Task>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Task <TaskCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("1")]
public Task`1<TResult> Task { get; }
    [NullableAttribute("1")]
public Task TaskCompleted { get; }
    public TResult Result { get; }
    public TaskStatus Status { get; }
    public bool IsCompleted { get; }
    public bool IsNotCompleted { get; }
    public bool IsSuccessfullyCompleted { get; }
    public bool IsCanceled { get; }
    public bool IsFaulted { get; }
    public AggregateException Exception { get; }
    public Exception InnerException { get; }
    public string ErrorMessage { get; }
    [NullableContextAttribute("1")]
internal MvxNotifyTask`1(Task`1<TResult> task, TResult defaultResult, Action`1<Exception> onException);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxNotifyTask`1/<MonitorTaskAsync>d__3")]
private Task MonitorTaskAsync(Task task);
    [NullableContextAttribute("1")]
private void NotifyProperties(Task task);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Task`1<TResult> get_Task();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Task get_TaskCompleted();
    public TResult get_Result();
    public TaskStatus get_Status();
    public bool get_IsCompleted();
    public bool get_IsNotCompleted();
    public bool get_IsSuccessfullyCompleted();
    public bool get_IsCanceled();
    public bool get_IsFaulted();
    public AggregateException get_Exception();
    public Exception get_InnerException();
    public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
public class MvvmCross.ViewModels.MvxNullViewModel : MvxViewModel {
}
public class MvvmCross.ViewModels.MvxObservableCollection`1 : ObservableCollection`1<T> {
    private int _suppressEvents;
    public bool EventsAreSuppressed { get; }
    public MvxObservableCollection`1(IEnumerable`1<T> items);
    protected virtual SuppressEventsDisposable<T> SuppressEvents();
    public virtual bool get_EventsAreSuppressed();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual void AddRange(IEnumerable`1<T> items);
    public virtual void InsertRange(int index, IEnumerable`1<T> items);
    public virtual void ReplaceWith(IEnumerable`1<T> items);
    public virtual void ReplaceRange(IEnumerable`1<T> items, int firstIndex, int oldSize);
    public virtual void SwitchTo(IEnumerable`1<T> items);
    public virtual void RemoveItems(IEnumerable`1<T> items);
    public virtual void RemoveRange(int start, int count);
    protected virtual Task InvokeOnMainThread(Action action);
    [AsyncStateMachineAttribute("MvvmCross.ViewModels.MvxObservableCollection`1/<OnPropertyChanged>d__16")]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(PropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxPostfixAwareViewToViewModelNameMapping : MvxViewToViewModelNameMapping {
    private String[] _postfixes;
    public MvxPostfixAwareViewToViewModelNameMapping(String[] postfixes);
    public virtual string Map(string inputName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxPresentationHint : object {
    [CompilerGeneratedAttribute]
private MvxBundle <Body>k__BackingField;
    public MvxBundle Body { get; }
    protected MvxPresentationHint(MvxBundle body);
    [NullableContextAttribute("1")]
protected MvxPresentationHint(IDictionary`2<string, string> hints);
    [CompilerGeneratedAttribute]
public MvxBundle get_Body();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxPropertyChangedListener : object {
    private Dictionary`2<string, List`1<PropertyChangedEventHandler>> _handlersLookup;
    private INotifyPropertyChanged _notificationObject;
    private MvxNotifyPropertyChangedEventSubscription _token;
    public MvxPropertyChangedListener(INotifyPropertyChanged notificationObject);
    public virtual void NotificationObjectOnPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    public void Clear();
    public MvxPropertyChangedListener Listen(Expression`1<Func`1<TProperty>> property, Action handler);
    public MvxPropertyChangedListener Listen(Expression`1<Func`1<TProperty>> propertyExpression, PropertyChangedEventHandler handler);
    public MvxPropertyChangedListener Listen(string propertyName, Action handler);
    public MvxPropertyChangedListener Listen(string propertyName, PropertyChangedEventHandler handler);
}
public class MvvmCross.ViewModels.MvxPropertyChangingEventArgs`1 : PropertyChangingEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private T <NewValue>k__BackingField;
    public bool Cancel { get; public set; }
    public T NewValue { get; public set; }
    public MvxPropertyChangingEventArgs`1(string propertyName, T newValue);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
public T get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxStringDictionaryNavigationSerializer : object {
    [CompilerGeneratedAttribute]
private IMvxTextSerializer <Serializer>k__BackingField;
    public IMvxTextSerializer Serializer { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IMvxTextSerializer get_Serializer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class MvvmCross.ViewModels.MvxViewForAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ViewModel>k__BackingField;
    public Type ViewModel { get; public set; }
    public MvxViewForAttribute(Type viewModel);
    [CompilerGeneratedAttribute]
public Type get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_ViewModel(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.ViewModels.MvxViewModel : MvxNotifyPropertyChanged {
    [NullableAttribute("2")]
private MvxNotifyTask _initializeTask;
    [NullableAttribute("2")]
public MvxNotifyTask InitializeTask { get; public set; }
    public virtual void ViewCreated();
    public virtual void ViewAppearing();
    public virtual void ViewAppeared();
    public virtual void ViewDisappearing();
    public virtual void ViewDisappeared();
    public virtual void ViewDestroy(bool viewFinishing);
    public sealed virtual void Init(IMvxBundle parameters);
    public sealed virtual void ReloadState(IMvxBundle state);
    public virtual void Start();
    public sealed virtual void SaveState(IMvxBundle state);
    protected virtual void InitFromBundle(IMvxBundle parameters);
    protected virtual void ReloadFromBundle(IMvxBundle state);
    protected virtual void SaveStateToBundle(IMvxBundle bundle);
    public virtual void Prepare();
    public virtual Task Initialize();
    [NullableContextAttribute("2")]
public sealed virtual MvxNotifyTask get_InitializeTask();
    [NullableContextAttribute("2")]
public sealed virtual void set_InitializeTask(MvxNotifyTask value);
}
public abstract class MvvmCross.ViewModels.MvxViewModel`1 : MvxViewModel {
    [NullableContextAttribute("1")]
public abstract virtual void Prepare(TParameter parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelByNameLookup : object {
    private Dictionary`2<string, Type> _availableViewModelsByName;
    private Dictionary`2<string, Type> _availableViewModelsByFullName;
    public sealed virtual bool TryLookupByName(string name, Type& viewModelType);
    public sealed virtual bool TryLookupByFullName(string name, Type& viewModelType);
    public sealed virtual void Add(Type viewModelType);
    [NullableContextAttribute("0")]
public sealed virtual void Add();
    public sealed virtual void AddAll(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.ViewModels.MvxViewModelExtensions : object {
    [ExtensionAttribute]
public static void CallBundleMethods(IMvxViewModel viewModel, string methodName, IMvxBundle bundle);
    [ExtensionAttribute]
public static void CallBundleMethod(IMvxViewModel viewModel, MethodInfo methodInfo, IMvxBundle bundle);
    [ExtensionAttribute]
public static IMvxBundle SaveStateBundle(IMvxViewModel viewModel);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelInstanceRequest : MvxViewModelRequest {
    [CompilerGeneratedAttribute]
private IMvxViewModel <ViewModelInstance>k__BackingField;
    public IMvxViewModel ViewModelInstance { get; public set; }
    [NullableContextAttribute("1")]
public MvxViewModelInstanceRequest(Type viewModelType);
    [NullableContextAttribute("1")]
public MvxViewModelInstanceRequest(IMvxViewModel viewModelInstance);
    [CompilerGeneratedAttribute]
public IMvxViewModel get_ViewModelInstance();
    [CompilerGeneratedAttribute]
public void set_ViewModelInstance(IMvxViewModel value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelLoader : object {
    [CompilerGeneratedAttribute]
private IMvxViewModelLocatorCollection <LocatorCollection>k__BackingField;
    protected IMvxViewModelLocatorCollection LocatorCollection { get; }
    public MvxViewModelLoader(IMvxViewModelLocatorCollection locatorCollection);
    [CompilerGeneratedAttribute]
protected IMvxViewModelLocatorCollection get_LocatorCollection();
    public sealed virtual IMvxViewModel ReloadViewModel(IMvxViewModel viewModel, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public sealed virtual IMvxViewModel ReloadViewModel(IMvxViewModel`1<TParameter> viewModel, TParameter param, MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public sealed virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    public sealed virtual IMvxViewModel LoadViewModel(MvxViewModelRequest request, TParameter param, IMvxBundle savedState, IMvxNavigateEventArgs navigationArgs);
    private IMvxViewModelLocator FindViewModelLocator(MvxViewModelRequest request);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelRequest : object {
    [CompilerGeneratedAttribute]
private Type <ViewModelType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ParameterValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <PresentationValues>k__BackingField;
    public Type ViewModelType { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> ParameterValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> PresentationValues { get; public set; }
    [NullableContextAttribute("1")]
public MvxViewModelRequest(Type viewModelType);
    public MvxViewModelRequest(Type viewModelType, IMvxBundle parameterBundle, IMvxBundle presentationBundle);
    [CompilerGeneratedAttribute]
public Type get_ViewModelType();
    [CompilerGeneratedAttribute]
public void set_ViewModelType(Type value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ParameterValues();
    [CompilerGeneratedAttribute]
public void set_ParameterValues(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_PresentationValues();
    [CompilerGeneratedAttribute]
public void set_PresentationValues(IDictionary`2<string, string> value);
    [NullableContextAttribute("1")]
public static MvxViewModelRequest GetDefaultRequest(Type viewModelType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelRequest`1 : MvxViewModelRequest {
    public MvxViewModelRequest`1(IMvxBundle parameterBundle, IMvxBundle presentationBundle);
    public static MvxViewModelRequest GetDefaultRequest();
}
public class MvvmCross.ViewModels.MvxViewModelViewLookupBuilder : object {
    [NullableContextAttribute("1")]
public virtual IDictionary`2<Type, Type> Build(IEnumerable`1<Assembly> sourceAssemblies);
    protected virtual IEnumerable`1<KeyValuePair`2<Type, Type>> FilterViews(IEnumerable`1<KeyValuePair`2<Type, Type>> views);
    [NullableContextAttribute("1")]
protected virtual Exception ReportBuildProblem(IEnumerable`1<KeyValuePair`2<Type, Type>> views, ArgumentException exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewModelViewTypeFinder : object {
    private IMvxViewModelByNameLookup _viewModelByNameLookup;
    private IMvxNameMapping _viewToViewModelNameMapping;
    public MvxViewModelViewTypeFinder(IMvxViewModelByNameLookup viewModelByNameLookup, IMvxNameMapping viewToViewModelNameMapping);
    public virtual Type FindTypeOrNull(Type candidateType);
    protected virtual Type LookupAttributedViewModelType(Type candidateType);
    protected virtual Type LookupNamedViewModelType(Type candidateType);
    protected virtual Type LookupAssociatedConcreteViewModelType(Type candidateType);
    protected virtual bool CheckCandidateTypeIsAView(Type candidateType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.MvxViewToViewModelNameMapping : object {
    [CompilerGeneratedAttribute]
private string <ViewModelPostfix>k__BackingField;
    public string ViewModelPostfix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ViewModelPostfix();
    [CompilerGeneratedAttribute]
public void set_ViewModelPostfix(string value);
    public virtual string Map(string inputName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.ViewModels.PropertyChangedEventArgsCache : object {
    private Dictionary`2<string, PropertyChangedEventArgs> _cache;
    [CompilerGeneratedAttribute]
private static PropertyChangedEventArgsCache <Instance>k__BackingField;
    public static PropertyChangedEventArgsCache Instance { get; }
    private static PropertyChangedEventArgsCache();
    [CompilerGeneratedAttribute]
public static PropertyChangedEventArgsCache get_Instance();
    public PropertyChangedEventArgs Get(string propertyName);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Views.IMvxView {
    public IMvxViewModel ViewModel { get; public set; }
    public abstract virtual IMvxViewModel get_ViewModel();
    public abstract virtual void set_ViewModel(IMvxViewModel value);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Views.IMvxView`1 {
    public TViewModel ViewModel { get; public set; }
    public abstract virtual TViewModel get_ViewModel();
    public abstract virtual void set_ViewModel(TViewModel value);
}
public interface MvvmCross.Views.IMvxViewDispatcher {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> ShowViewModel(MvxViewModelRequest request);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<bool> ChangePresentation(MvxPresentationHint hint);
}
[NullableContextAttribute("2")]
public interface MvvmCross.Views.IMvxViewFinder {
    public abstract virtual Type GetViewType(Type viewModelType);
}
[NullableContextAttribute("1")]
public interface MvvmCross.Views.IMvxViewsContainer {
    public abstract virtual void AddAll(IDictionary`2<Type, Type> viewModelViewLookup);
    public abstract virtual void Add(Type viewModelType, Type viewType);
    [NullableContextAttribute("0")]
public abstract virtual void Add();
    public abstract virtual void AddSecondary(IMvxViewFinder finder);
    public abstract virtual void SetLastResort(IMvxViewFinder finder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.Views.MvxViewExtensions : object {
    [ExtensionAttribute]
public static void OnViewCreate(IMvxView view, Func`1<IMvxViewModel> viewModelLoader);
    [ExtensionAttribute]
public static void OnViewDestroy(IMvxView view);
    [ExtensionAttribute]
public static Type FindAssociatedViewModelTypeOrNull(IMvxView view);
    [ExtensionAttribute]
public static IMvxBundle CreateSaveStateBundle(IMvxView view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class MvvmCross.Views.MvxViewsContainer : object {
    private Dictionary`2<Type, Type> _bindingMap;
    private List`1<IMvxViewFinder> _secondaryViewFinders;
    [NullableAttribute("2")]
private IMvxViewFinder _lastResortViewFinder;
    public sealed virtual void AddAll(IDictionary`2<Type, Type> viewModelViewLookup);
    public sealed virtual void Add(Type viewModelType, Type viewType);
    [NullableContextAttribute("0")]
public sealed virtual void Add();
    public sealed virtual Type GetViewType(Type viewModelType);
    public sealed virtual void AddSecondary(IMvxViewFinder finder);
    public sealed virtual void SetLastResort(IMvxViewFinder finder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxCanExecuteChangedEventSubscription : MvxWeakEventSubscription`2<ICommand, EventArgs> {
    private static EventInfo CanExecuteChangedEventInfo;
    public MvxCanExecuteChangedEventSubscription(ICommand source, EventHandler`1<EventArgs> eventHandler);
    private static MvxCanExecuteChangedEventSubscription();
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxGeneralEventSubscription : MvxWeakEventSubscription`2<object, EventArgs> {
    public MvxGeneralEventSubscription(object source, EventInfo eventInfo, EventHandler`1<EventArgs> eventHandler);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxGeneralEventSubscription`2 : MvxWeakEventSubscription`2<TSource, TEventArgs> {
    public MvxGeneralEventSubscription`2(TSource source, EventInfo eventInfo, EventHandler`1<TEventArgs> eventHandler);
    public MvxGeneralEventSubscription`2(TSource source, string eventName, EventHandler`1<TEventArgs> eventHandler);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.WeakSubscription.MvxNamedNotifyPropertyChangedEventSubscription`1 : MvxNotifyPropertyChangedEventSubscription {
    private string _propertyName;
    public MvxNamedNotifyPropertyChangedEventSubscription`1(INotifyPropertyChanged source, Expression`1<Func`1<T>> property, EventHandler`1<PropertyChangedEventArgs> targetEventHandler);
    public MvxNamedNotifyPropertyChangedEventSubscription`1(INotifyPropertyChanged source, string propertyName, EventHandler`1<PropertyChangedEventArgs> targetEventHandler);
    protected virtual Delegate CreateEventHandler();
    [CompilerGeneratedAttribute]
private void <CreateEventHandler>b__3_0(object sender, PropertyChangedEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxNotifyCollectionChangedEventSubscription : MvxWeakEventSubscription`2<INotifyCollectionChanged, NotifyCollectionChangedEventArgs> {
    private static EventInfo EventInfo;
    public MvxNotifyCollectionChangedEventSubscription(INotifyCollectionChanged source, EventHandler`1<NotifyCollectionChangedEventArgs> targetEventHandler);
    private static MvxNotifyCollectionChangedEventSubscription();
    public static void LinkerPleaseInclude(INotifyCollectionChanged iNotifyCollectionChanged);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxNotifyPropertyChangedEventSubscription : MvxWeakEventSubscription`2<INotifyPropertyChanged, PropertyChangedEventArgs> {
    private static EventInfo PropertyChangedEventInfo;
    public MvxNotifyPropertyChangedEventSubscription(INotifyPropertyChanged source, EventHandler`1<PropertyChangedEventArgs> targetEventHandler);
    private static MvxNotifyPropertyChangedEventSubscription();
    public static void LinkerPleaseInclude(INotifyPropertyChanged iNotifyPropertyChanged);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class MvvmCross.WeakSubscription.MvxValueEventSubscription`1 : MvxWeakEventSubscription`2<object, MvxValueEventArgs`1<T>> {
    public MvxValueEventSubscription`1(object source, EventInfo eventInfo, EventHandler`1<MvxValueEventArgs`1<T>> eventHandler);
    protected virtual Delegate CreateEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.WeakSubscription.MvxWeakEventSubscription`1 : object {
    private WeakReference _targetReference;
    private WeakReference`1<TSource> _sourceReference;
    private MethodInfo _eventHandlerMethodInfo;
    private EventInfo _sourceEventInfo;
    private Delegate _ourEventHandler;
    private bool _subscribed;
    public MvxWeakEventSubscription`1(TSource source, string sourceEventName, EventHandler targetEventHandler);
    protected MvxWeakEventSubscription`1(TSource source, EventInfo sourceEventInfo, EventHandler targetEventHandler);
    private static EventInfo GetEventInfo(string sourceEventName);
    [NullableContextAttribute("2")]
protected virtual object GetTargetObject();
    protected virtual Delegate CreateEventHandler();
    protected void OnSourceEvent(object sender, EventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void RemoveEventHandler();
    private void AddEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MvvmCross.WeakSubscription.MvxWeakEventSubscription`2 : object {
    private WeakReference _targetReference;
    private WeakReference`1<TSource> _sourceReference;
    private MethodInfo _eventHandlerMethodInfo;
    private EventInfo _sourceEventInfo;
    private Delegate _ourEventHandler;
    private bool _subscribed;
    public MvxWeakEventSubscription`2(TSource source, string sourceEventName, EventHandler`1<TEventArgs> targetEventHandler);
    protected MvxWeakEventSubscription`2(TSource source, EventInfo sourceEventInfo, EventHandler`1<TEventArgs> targetEventHandler);
    private static EventInfo GetEventInfo(string sourceEventName);
    private Delegate Init();
    protected virtual Delegate CreateEventHandler();
    [NullableContextAttribute("2")]
protected virtual object GetTargetObject();
    protected void OnSourceEvent(object sender, TEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void RemoveEventHandler();
    private void AddEventHandler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class MvvmCross.WeakSubscription.MvxWeakSubscriptionExtensions : object {
    [ExtensionAttribute]
public static MvxNotifyPropertyChangedEventSubscription WeakSubscribe(INotifyPropertyChanged source, EventHandler`1<PropertyChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxNamedNotifyPropertyChangedEventSubscription`1<T> WeakSubscribe(INotifyPropertyChanged source, Expression`1<Func`1<T>> property, EventHandler`1<PropertyChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxNamedNotifyPropertyChangedEventSubscription`1<T> WeakSubscribe(INotifyPropertyChanged source, string property, EventHandler`1<PropertyChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxNotifyCollectionChangedEventSubscription WeakSubscribe(INotifyCollectionChanged source, EventHandler`1<NotifyCollectionChangedEventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxGeneralEventSubscription WeakSubscribe(EventInfo eventInfo, object source, EventHandler`1<EventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxValueEventSubscription`1<T> WeakSubscribe(EventInfo eventInfo, object source, EventHandler`1<MvxValueEventArgs`1<T>> eventHandler);
    [ExtensionAttribute]
public static MvxCanExecuteChangedEventSubscription WeakSubscribe(ICommand source, EventHandler`1<EventArgs> eventHandler);
    [ExtensionAttribute]
public static MvxWeakEventSubscription`1<TSource> WeakSubscribe(TSource source, string eventName, EventHandler eventHandler);
    [ExtensionAttribute]
public static MvxWeakEventSubscription`2<TSource, TEventArgs> WeakSubscribe(TSource source, string eventName, EventHandler`1<TEventArgs> eventHandler);
}
