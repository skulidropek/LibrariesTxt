public abstract class GalaSoft.MvvmLight.Helpers.Binding : object {
    protected WeakReference TopSource;
    protected WeakReference TopTarget;
    [CompilerGeneratedAttribute]
private BindingMode <Mode>k__BackingField;
    public BindingMode Mode { get; protected set; }
    public object Source { get; }
    public object Target { get; }
    [CompilerGeneratedAttribute]
public BindingMode get_Mode();
    [CompilerGeneratedAttribute]
protected void set_Mode(BindingMode value);
    public object get_Source();
    public object get_Target();
    public abstract virtual void Detach();
    public abstract virtual void ForceUpdateValueFromSourceToTarget();
    public abstract virtual void ForceUpdateValueFromTargetToSource();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(EventHandler value);
}
public class GalaSoft.MvvmLight.Helpers.Binding`2 : Binding {
    private SimpleConverter<TSource, TTarget> _converter;
    private List`1<IWeakEventListener> _listeners;
    private Dictionary`2<string, DelegateInfo<TSource, TTarget>> _sourceHandlers;
    private Expression`1<Func`1<TSource>> _sourcePropertyExpression;
    private string _sourcePropertyName;
    private Dictionary`2<string, DelegateInfo<TSource, TTarget>> _targetHandlers;
    private Expression`1<Func`1<TTarget>> _targetPropertyExpression;
    private string _targetPropertyName;
    private bool _isFallbackValueActive;
    private WeakAction _onSourceUpdate;
    private WeakReference _propertySource;
    private WeakReference _propertyTarget;
    private bool _resolveTopField;
    private bool _settingSourceToTarget;
    private bool _settingTargetToSource;
    private PropertyInfo _sourceProperty;
    private PropertyInfo _targetProperty;
    [CompilerGeneratedAttribute]
private TSource <FallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TSource <TargetNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    public TSource FallbackValue { get; private set; }
    public TSource TargetNullValue { get; private set; }
    public TTarget Value { get; }
    public Binding`2(object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    public Binding`2(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, object target, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    internal Binding`2(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, Nullable`1<bool> resolveTopField, object target, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveSourceEvent instead.")]
public Binding`2<TSource, TTarget> UpdateSourceTrigger();
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveSourceEvent instead.")]
public Binding`2<TSource, TTarget> UpdateSourceTrigger(UpdateTriggerMode mode);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveTargetEvent instead.")]
public Binding`2<TSource, TTarget> UpdateTargetTrigger();
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveTargetEvent instead.")]
public Binding`2<TSource, TTarget> UpdateTargetTrigger(UpdateTriggerMode mode);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveSourceEvent instead.")]
public Binding`2<TSource, TTarget> UpdateSourceTrigger(string eventName);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveSourceEvent instead.")]
public Binding`2<TSource, TTarget> UpdateSourceTrigger(string eventName);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveTargetEvent instead.")]
public Binding`2<TSource, TTarget> UpdateTargetTrigger(string eventName);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveTargetEvent instead.")]
public Binding`2<TSource, TTarget> UpdateTargetTrigger(string eventName);
    [CompilerGeneratedAttribute]
public TSource get_FallbackValue();
    [CompilerGeneratedAttribute]
private void set_FallbackValue(TSource value);
    [CompilerGeneratedAttribute]
public TSource get_TargetNullValue();
    [CompilerGeneratedAttribute]
private void set_TargetNullValue(TSource value);
    public TTarget get_Value();
    public Binding`2<TSource, TTarget> ConvertSourceToTarget(Func`2<TSource, TTarget> convert);
    public Binding`2<TSource, TTarget> ConvertTargetToSource(Func`2<TTarget, TSource> convertBack);
    public virtual void Detach();
    public virtual void ForceUpdateValueFromSourceToTarget();
    public virtual void ForceUpdateValueFromTargetToSource();
    public Binding`2<TSource, TTarget> ObserveSourceEvent(string eventName);
    public Binding`2<TSource, TTarget> ObserveSourceEvent(string eventName);
    public Binding`2<TSource, TTarget> ObserveTargetEvent(string eventName);
    public Binding`2<TSource, TTarget> ObserveTargetEvent(string eventName);
    public Binding`2<TSource, TTarget> WhenSourceChanges(Action callback);
    private void Attach(object source, object target, BindingMode mode);
    private void Attach(object source, object target, BindingMode mode, bool resolveTopField);
    private void Attach();
    private bool CanBeConverted(PropertyInfo sourceProperty, PropertyInfo targetProperty);
    private void DetachSourceHandlers();
    private void DetachTargetHandlers();
    private static IList`1<PropertyAndName<TSource, TTarget>> GetPropertyChain(object topInstance, IList`1<PropertyAndName<TSource, TTarget>> instances, MemberExpression expression, string propertyName, bool resolveTopField, bool top);
    private static string GetPropertyName(Expression`1<Func`1<T>> propertyExpression);
    private TTarget GetSourceValue();
    private TSource GetTargetValue();
    private void HandleSourceEvent(object sender, TEventArgs args);
    private void HandleTargetEvent(object source, TEventArgs args);
    private bool IsSourceDefaultValue();
    private bool IsValueType(Type type);
    private void RaiseValueChanged();
    private void SetSourceValue(TSource value);
    private bool SetSpecialValues();
    private void SetTargetValue(TTarget value);
    [CompilerGeneratedAttribute]
public virtual void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_ValueChanged(EventHandler value);
    public Binding`2<TSource, TTarget> ObserveSourceEvent();
    public Binding`2<TSource, TTarget> ObserveSourceEvent(UpdateTriggerMode mode);
    public Binding`2<TSource, TTarget> ObserveTargetEvent();
    public Binding`2<TSource, TTarget> ObserveTargetEvent(UpdateTriggerMode mode);
    private Binding`2<TSource, TTarget> CheckControlSource();
    private Binding`2<TSource, TTarget> CheckControlTarget();
}
public enum GalaSoft.MvvmLight.Helpers.BindingMode : Enum {
    public int value__;
    public static BindingMode Default;
    public static BindingMode OneTime;
    public static BindingMode OneWay;
    public static BindingMode TwoWay;
}
[ExtensionAttribute]
public static class GalaSoft.MvvmLight.Helpers.Extensions : object {
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, object target, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TSource> SetBinding(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, string sourcePropertyName, string targetPropertyName, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
internal static EventInfo GetEventInfoForControl(Type type, string eventName);
}
[ExtensionAttribute]
public static class GalaSoft.MvvmLight.Helpers.ExtensionsAndroid : object {
    [ExtensionAttribute]
public static ObservableAdapter`1<T> GetAdapter(ObservableCollection`1<T> collection, Func`4<int, T, View, View> getTemplateDelegate);
    [ExtensionAttribute]
public static ObservableAdapter`1<T> GetAdapter(IList`1<T> list, Func`4<int, T, View, View> getTemplateDelegate);
    [ExtensionAttribute]
internal static string GetDefaultEventNameForControl(Type type);
    [ExtensionAttribute]
internal static Delegate GetCommandHandler(EventInfo info, string eventName, Type elementType, ICommand command);
    [ExtensionAttribute]
internal static Delegate GetCommandHandler(EventInfo info, string eventName, Type elementType, RelayCommand`1<T> command, Binding`2<T, T> castedBinding);
    [ExtensionAttribute]
internal static Delegate GetCommandHandler(EventInfo info, string eventName, Type elementType, RelayCommand`1<T> command, T commandParameter);
}
[DefaultMemberAttribute("Item")]
public class GalaSoft.MvvmLight.Helpers.ObservableAdapter`1 : BaseAdapter`1<T> {
    private IList`1<T> _dataSource;
    private INotifyCollectionChanged _notifier;
    [CompilerGeneratedAttribute]
private Func`4<int, T, View, View> <GetTemplateDelegate>k__BackingField;
    public int Count { get; }
    public IList`1<T> DataSource { get; public set; }
    public Func`4<int, T, View, View> GetTemplateDelegate { get; public set; }
    public T Item { get; }
    public virtual int get_Count();
    public IList`1<T> get_DataSource();
    public void set_DataSource(IList`1<T> value);
    [CompilerGeneratedAttribute]
public Func`4<int, T, View, View> get_GetTemplateDelegate();
    [CompilerGeneratedAttribute]
public void set_GetTemplateDelegate(Func`4<int, T, View, View> value);
    public virtual T get_Item(int index);
    public virtual long GetItemId(int position);
    public virtual View GetView(int position, View convertView, ViewGroup parent);
    private void NotifierCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
}
public enum GalaSoft.MvvmLight.Helpers.UpdateTriggerMode : Enum {
    public int value__;
    public static UpdateTriggerMode LostFocus;
    public static UpdateTriggerMode PropertyChanged;
}
public static class GalaSoft.MvvmLight.Threading.DispatcherHelper : object {
    public static void CheckBeginInvokeOnUI(Action action);
    public static void Initialize();
    public static void Reset();
    private static void CheckDispatcher();
}
public class GalaSoft.MvvmLight.Views.ActivityBase : Activity {
    [CompilerGeneratedAttribute]
private static ActivityBase <CurrentActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityKey>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <NextPageKey>k__BackingField;
    public static ActivityBase CurrentActivity { get; private set; }
    internal string ActivityKey { get; private set; }
    internal static string NextPageKey { get; internal set; }
    [CompilerGeneratedAttribute]
public static ActivityBase get_CurrentActivity();
    [CompilerGeneratedAttribute]
private static void set_CurrentActivity(ActivityBase value);
    [CompilerGeneratedAttribute]
internal string get_ActivityKey();
    [CompilerGeneratedAttribute]
private void set_ActivityKey(string value);
    [CompilerGeneratedAttribute]
internal static string get_NextPageKey();
    [CompilerGeneratedAttribute]
internal static void set_NextPageKey(string value);
    public static void GoBack();
    protected virtual void OnResume();
}
public class GalaSoft.MvvmLight.Views.DialogService : object {
    public sealed virtual Task ShowError(string message, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task ShowError(Exception error, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task ShowMessage(string message, string title);
    public sealed virtual Task ShowMessage(string message, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task`1<bool> ShowMessage(string message, string title, string buttonConfirmText, string buttonCancelText, Action`1<bool> afterHideCallback);
    public sealed virtual Task ShowMessageBox(string message, string title);
    private static AlertDialogInfo CreateDialog(string content, string title, string okText, string cancelText, Action`1<bool> afterHideCallbackWithResponse);
}
public class GalaSoft.MvvmLight.Views.NavigationService : object {
    public static string RootPageKey;
    private static string ParameterKeyName;
    private Dictionary`2<string, Type> _pagesByKey;
    private Dictionary`2<string, object> _parametersByKey;
    public string CurrentPageKey { get; }
    public sealed virtual string get_CurrentPageKey();
    public void Configure(string key, Type activityType);
    public object GetAndRemoveParameter(Intent intent);
    public T GetAndRemoveParameter(Intent intent);
    public sealed virtual void GoBack();
    public sealed virtual void NavigateTo(string pageKey);
    public sealed virtual void NavigateTo(string pageKey, object parameter);
}
public interface System.Windows.IWeakEventListener {
    public WeakReference InstanceReference { get; }
    public abstract virtual WeakReference get_InstanceReference();
    public abstract virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
public class System.Windows.PropertyChangedEventManager : object {
    private static PropertyChangedEventManager _manager;
    private static object SyncLock;
    private Dictionary`2<string, List`1<ListenerInfo>> _list;
    private static PropertyChangedEventManager Instance { get; }
    private static PropertyChangedEventManager();
    private static PropertyChangedEventManager get_Instance();
    public static void AddListener(INotifyPropertyChanged source, IWeakEventListener listener, string propertyName);
    public static void RemoveListener(IWeakEventListener listener);
    private void PrivateAddListener(INotifyPropertyChanged source, IWeakEventListener listener, string propertyName);
    private void PrivateRemoveListener(IWeakEventListener listener);
    private void PropertyChanged(object sender, PropertyChangedEventArgs args);
    private void StartListening(INotifyPropertyChanged source);
    private void StopListening(INotifyPropertyChanged source);
}
