public class GalaSoft.MvvmLight.Command.EventToCommand : TriggerAction`1<DependencyObject> {
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty MustToggleIsEnabledProperty;
    private object _commandParameterValue;
    private Nullable`1<bool> _mustToggleValue;
    [CompilerGeneratedAttribute]
private bool <PassEventArgsToCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventArgsConverter <EventArgsConverter>k__BackingField;
    public static string EventArgsConverterParameterPropertyName;
    public static DependencyProperty EventArgsConverterParameterProperty;
    public static string AlwaysInvokeCommandPropertyName;
    public static DependencyProperty AlwaysInvokeCommandProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public object CommandParameterValue { get; public set; }
    public bool MustToggleIsEnabled { get; public set; }
    public bool MustToggleIsEnabledValue { get; public set; }
    public bool PassEventArgsToCommand { get; public set; }
    public IEventArgsConverter EventArgsConverter { get; public set; }
    public object EventArgsConverterParameter { get; public set; }
    public bool AlwaysInvokeCommand { get; public set; }
    private static EventToCommand();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public object get_CommandParameterValue();
    public void set_CommandParameterValue(object value);
    public bool get_MustToggleIsEnabled();
    public void set_MustToggleIsEnabled(bool value);
    public bool get_MustToggleIsEnabledValue();
    public void set_MustToggleIsEnabledValue(bool value);
    protected virtual void OnAttached();
    private FrameworkElement GetAssociatedObject();
    private ICommand GetCommand();
    [CompilerGeneratedAttribute]
public bool get_PassEventArgsToCommand();
    [CompilerGeneratedAttribute]
public void set_PassEventArgsToCommand(bool value);
    [CompilerGeneratedAttribute]
public IEventArgsConverter get_EventArgsConverter();
    [CompilerGeneratedAttribute]
public void set_EventArgsConverter(IEventArgsConverter value);
    public object get_EventArgsConverterParameter();
    public void set_EventArgsConverterParameter(object value);
    public bool get_AlwaysInvokeCommand();
    public void set_AlwaysInvokeCommand(bool value);
    public void Invoke();
    protected virtual void Invoke(object parameter);
    private static void OnCommandChanged(EventToCommand element, DependencyPropertyChangedEventArgs e);
    private bool AssociatedElementIsDisabled();
    private void EnableDisableElement();
    private void OnCommandCanExecuteChanged(object sender, EventArgs e);
}
public interface GalaSoft.MvvmLight.Command.IEventArgsConverter {
    public abstract virtual object Convert(object value, object parameter);
}
public class GalaSoft.MvvmLight.CommandWpf.RelayCommand : object {
    private WeakAction _execute;
    private WeakFunc`1<bool> _canExecute;
    private EventHandler _requerySuggestedLocal;
    public RelayCommand(Action execute, bool keepTargetAlive);
    public RelayCommand(Action execute, Func`1<bool> canExecute, bool keepTargetAlive);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
public class GalaSoft.MvvmLight.CommandWpf.RelayCommand`1 : object {
    private WeakAction`1<T> _execute;
    private WeakFunc`2<T, bool> _canExecute;
    public RelayCommand`1(Action`1<T> execute, bool keepTargetAlive);
    public RelayCommand`1(Action`1<T> execute, Func`2<T, bool> canExecute, bool keepTargetAlive);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
public static class GalaSoft.MvvmLight.Threading.DispatcherHelper : object {
    [CompilerGeneratedAttribute]
private static Dispatcher <UIDispatcher>k__BackingField;
    public static Dispatcher UIDispatcher { get; private set; }
    [CompilerGeneratedAttribute]
public static Dispatcher get_UIDispatcher();
    [CompilerGeneratedAttribute]
private static void set_UIDispatcher(Dispatcher value);
    public static void CheckBeginInvokeOnUI(Action action);
    private static void CheckDispatcher();
    public static DispatcherOperation RunAsync(Action action);
    public static void Initialize();
    public static void Reset();
}
