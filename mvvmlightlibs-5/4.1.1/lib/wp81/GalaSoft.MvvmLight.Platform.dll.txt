public class GalaSoft.MvvmLight.Command.EventToCommand : TriggerAction`1<DependencyObject> {
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty MustToggleIsEnabledProperty;
    private object _commandParameterValue;
    private Nullable`1<bool> _mustToggleValue;
    [CompilerGeneratedAttribute]
private bool <PassEventArgsToCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventArgsConverter <EventArgsConverter>k__BackingField;
    public static string EventArgsConverterParameterPropertyName;
    public static DependencyProperty EventArgsConverterParameterProperty;
    public static string AlwaysInvokeCommandPropertyName;
    public static DependencyProperty AlwaysInvokeCommandProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public object CommandParameterValue { get; public set; }
    public bool MustToggleIsEnabled { get; public set; }
    public bool MustToggleIsEnabledValue { get; public set; }
    public bool PassEventArgsToCommand { get; public set; }
    public IEventArgsConverter EventArgsConverter { get; public set; }
    public object EventArgsConverterParameter { get; public set; }
    public bool AlwaysInvokeCommand { get; public set; }
    private static EventToCommand();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public object get_CommandParameterValue();
    public void set_CommandParameterValue(object value);
    public bool get_MustToggleIsEnabled();
    public void set_MustToggleIsEnabled(bool value);
    public bool get_MustToggleIsEnabledValue();
    public void set_MustToggleIsEnabledValue(bool value);
    protected virtual void OnAttached();
    private Control GetAssociatedObject();
    private ICommand GetCommand();
    [CompilerGeneratedAttribute]
public bool get_PassEventArgsToCommand();
    [CompilerGeneratedAttribute]
public void set_PassEventArgsToCommand(bool value);
    [CompilerGeneratedAttribute]
public IEventArgsConverter get_EventArgsConverter();
    [CompilerGeneratedAttribute]
public void set_EventArgsConverter(IEventArgsConverter value);
    public object get_EventArgsConverterParameter();
    public void set_EventArgsConverterParameter(object value);
    public bool get_AlwaysInvokeCommand();
    public void set_AlwaysInvokeCommand(bool value);
    public void Invoke();
    protected virtual void Invoke(object parameter);
    private static void OnCommandChanged(EventToCommand element, DependencyPropertyChangedEventArgs e);
    private bool AssociatedElementIsDisabled();
    private void EnableDisableElement();
    private void OnCommandCanExecuteChanged(object sender, EventArgs e);
}
public interface GalaSoft.MvvmLight.Command.IEventArgsConverter {
    public abstract virtual object Convert(object value, object parameter);
}
public static class GalaSoft.MvvmLight.Threading.DispatcherHelper : object {
    [CompilerGeneratedAttribute]
private static Dispatcher <UIDispatcher>k__BackingField;
    public static Dispatcher UIDispatcher { get; private set; }
    [CompilerGeneratedAttribute]
public static Dispatcher get_UIDispatcher();
    [CompilerGeneratedAttribute]
private static void set_UIDispatcher(Dispatcher value);
    public static void CheckBeginInvokeOnUI(Action action);
    private static void CheckDispatcher();
    public static DispatcherOperation RunAsync(Action action);
    public static void Initialize();
    public static void Reset();
}
public class GalaSoft.MvvmLight.Views.DialogService : object {
    public sealed virtual Task ShowError(string message, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task ShowError(Exception error, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task ShowMessage(string message, string title);
    public sealed virtual Task ShowMessage(string message, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task`1<bool> ShowMessage(string message, string title, string buttonConfirmText, string buttonCancelText, Action`1<bool> afterHideCallback);
    public sealed virtual Task ShowMessageBox(string message, string title);
}
public class GalaSoft.MvvmLight.Views.NavigationService : object {
    public static string RootPageKey;
    public static string ParameterKeyName;
    private static Dictionary`2<string, Uri> PagesByKey;
    private static Dictionary`2<string, object> ParametersByKey;
    private PhoneApplicationFrame _mainFrame;
    [CompilerGeneratedAttribute]
private NavigatedEventHandler Navigated;
    [CompilerGeneratedAttribute]
private NavigatingCancelEventHandler Navigating;
    public string CurrentPageKey { get; }
    private static NavigationService();
    [CompilerGeneratedAttribute]
public void add_Navigated(NavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(NavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigating(NavigatingCancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(NavigatingCancelEventHandler value);
    public sealed virtual string get_CurrentPageKey();
    public sealed virtual void GoBack();
    public sealed virtual void NavigateTo(string pageKey);
    public sealed virtual void NavigateTo(string pageKey, object parameter);
    public void Configure(string key, Uri targetUri);
    public object GetAndRemoveParameter(NavigationContext context);
    public T GetAndRemoveParameter(NavigationContext context);
    private bool EnsureMainFrame();
    private void NavigateTo(Uri pageUri);
    [CompilerGeneratedAttribute]
private void <EnsureMainFrame>b__19_0(object s, NavigatingCancelEventArgs e);
    [CompilerGeneratedAttribute]
private void <EnsureMainFrame>b__19_1(object s, NavigationEventArgs e);
}
