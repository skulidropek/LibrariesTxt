public abstract class GalaSoft.MvvmLight.Helpers.Binding : object {
    protected WeakReference TopSource;
    protected WeakReference TopTarget;
    [CompilerGeneratedAttribute]
private BindingMode <Mode>k__BackingField;
    public BindingMode Mode { get; protected set; }
    public object Source { get; }
    public object Target { get; }
    [CompilerGeneratedAttribute]
public BindingMode get_Mode();
    [CompilerGeneratedAttribute]
protected void set_Mode(BindingMode value);
    public object get_Source();
    public object get_Target();
    public abstract virtual void Detach();
    public abstract virtual void ForceUpdateValueFromSourceToTarget();
    public abstract virtual void ForceUpdateValueFromTargetToSource();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ValueChanged(EventHandler value);
}
public class GalaSoft.MvvmLight.Helpers.Binding`2 : Binding {
    private SimpleConverter<TSource, TTarget> _converter;
    private List`1<IWeakEventListener> _listeners;
    private Dictionary`2<string, DelegateInfo<TSource, TTarget>> _sourceHandlers;
    private Expression`1<Func`1<TSource>> _sourcePropertyExpression;
    private string _sourcePropertyName;
    private Dictionary`2<string, DelegateInfo<TSource, TTarget>> _targetHandlers;
    private Expression`1<Func`1<TTarget>> _targetPropertyExpression;
    private string _targetPropertyName;
    private bool _isFallbackValueActive;
    private WeakAction _onSourceUpdate;
    private WeakReference _propertySource;
    private WeakReference _propertyTarget;
    private bool _resolveTopField;
    private bool _settingSourceToTarget;
    private bool _settingTargetToSource;
    private PropertyInfo _sourceProperty;
    private PropertyInfo _targetProperty;
    [CompilerGeneratedAttribute]
private TSource <FallbackValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TSource <TargetNullValue>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler ValueChanged;
    public TSource FallbackValue { get; private set; }
    public TSource TargetNullValue { get; private set; }
    public TTarget Value { get; }
    public Binding`2(object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    public Binding`2(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, object target, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    internal Binding`2(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, Nullable`1<bool> resolveTopField, object target, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [CompilerGeneratedAttribute]
public TSource get_FallbackValue();
    [CompilerGeneratedAttribute]
private void set_FallbackValue(TSource value);
    [CompilerGeneratedAttribute]
public TSource get_TargetNullValue();
    [CompilerGeneratedAttribute]
private void set_TargetNullValue(TSource value);
    public TTarget get_Value();
    public Binding`2<TSource, TTarget> ConvertSourceToTarget(Func`2<TSource, TTarget> convert);
    public Binding`2<TSource, TTarget> ConvertTargetToSource(Func`2<TTarget, TSource> convertBack);
    public virtual void Detach();
    public virtual void ForceUpdateValueFromSourceToTarget();
    public virtual void ForceUpdateValueFromTargetToSource();
    public Binding`2<TSource, TTarget> ObserveSourceEvent(string eventName);
    public Binding`2<TSource, TTarget> ObserveSourceEvent(string eventName);
    public Binding`2<TSource, TTarget> ObserveTargetEvent(string eventName);
    public Binding`2<TSource, TTarget> ObserveTargetEvent(string eventName);
    public Binding`2<TSource, TTarget> WhenSourceChanges(Action callback);
    private void Attach(object source, object target, BindingMode mode);
    private void Attach(object source, object target, BindingMode mode, bool resolveTopField);
    private void Attach();
    private bool CanBeConverted(PropertyInfo sourceProperty, PropertyInfo targetProperty);
    private void DetachSourceHandlers();
    private void DetachTargetHandlers();
    private static IList`1<PropertyAndName<TSource, TTarget>> GetPropertyChain(object topInstance, IList`1<PropertyAndName<TSource, TTarget>> instances, MemberExpression expression, string propertyName, bool resolveTopField, bool top);
    private static string GetPropertyName(Expression`1<Func`1<T>> propertyExpression);
    private TTarget GetSourceValue();
    private TSource GetTargetValue();
    private void HandleSourceEvent(object sender, TEventArgs args);
    private void HandleTargetEvent(object source, TEventArgs args);
    private bool IsSourceDefaultValue();
    private bool IsValueType(Type type);
    private void RaiseValueChanged();
    private void SetSourceValue(TSource value);
    private bool SetSpecialValues();
    private void SetTargetValue(TTarget value);
    [CompilerGeneratedAttribute]
public virtual void add_ValueChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_ValueChanged(EventHandler value);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveSourceEvent instead.")]
public Binding`2<TSource, TTarget> UpdateSourceTrigger(string eventName);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveSourceEvent instead.")]
public Binding`2<TSource, TTarget> UpdateSourceTrigger(string eventName);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveTargetEvent instead.")]
public Binding`2<TSource, TTarget> UpdateTargetTrigger(string eventName);
    [ObsoleteAttribute("This method will be removed in a future version. Please use ObserveTargetEvent instead.")]
public Binding`2<TSource, TTarget> UpdateTargetTrigger(string eventName);
    public Binding`2<TSource, TTarget> UpdateSourceTrigger();
    public Binding`2<TSource, TTarget> UpdateSourceTrigger(UpdateTriggerMode mode);
    public Binding`2<TSource, TTarget> UpdateTargetTrigger();
    public Binding`2<TSource, TTarget> UpdateTargetTrigger(UpdateTriggerMode mode);
    public Binding`2<TSource, TTarget> ObserveSourceEvent();
    public Binding`2<TSource, TTarget> ObserveSourceEvent(UpdateTriggerMode mode);
    public Binding`2<TSource, TTarget> ObserveTargetEvent();
    public Binding`2<TSource, TTarget> ObserveTargetEvent(UpdateTriggerMode mode);
    private Binding`2<TSource, TTarget> CheckControlSource();
    private Binding`2<TSource, TTarget> CheckControlTarget();
}
public enum GalaSoft.MvvmLight.Helpers.BindingMode : Enum {
    public int value__;
    public static BindingMode Default;
    public static BindingMode OneTime;
    public static BindingMode OneWay;
    public static BindingMode TwoWay;
}
[ExtensionAttribute]
public static class GalaSoft.MvvmLight.Helpers.Extensions : object {
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, object target, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TSource> SetBinding(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, Expression`1<Func`1<TSource>> sourcePropertyExpression, Expression`1<Func`1<TTarget>> targetPropertyExpression, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, string sourcePropertyName, object target, string targetPropertyName, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static Binding`2<TSource, TTarget> SetBinding(object source, string sourcePropertyName, string targetPropertyName, BindingMode mode, TSource fallbackValue, TSource targetNullValue);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
public static void SetCommand(object element, string eventName, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, Binding commandParameterBinding);
    [ExtensionAttribute]
public static void SetCommand(object element, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, ICommand command);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
public static void SetCommand(object element, RelayCommand`1<T> command, T commandParameter);
    [ExtensionAttribute]
internal static EventInfo GetEventInfoForControl(Type type, string eventName);
}
[ExtensionAttribute]
public static class GalaSoft.MvvmLight.Helpers.ExtensionsApple : object {
    [ExtensionAttribute]
public static ObservableCollectionViewSource`2<TItem, TCell> GetCollectionViewSource(IList`1<TItem> list, Action`3<TCell, TItem, NSIndexPath> bindCellDelegate, Func`3<NSString, NSIndexPath, UICollectionReusableView> getSupplementaryViewDelegate, string reuseId, Func`1<ObservableCollectionViewSource`2<TItem, TCell>> factory);
    [ExtensionAttribute]
public static ObservableCollectionViewSource`2<TItem, TCell> GetCollectionViewSource(ObservableCollection`1<TItem> list, Action`3<TCell, TItem, NSIndexPath> bindCellDelegate, Func`3<NSString, NSIndexPath, UICollectionReusableView> getSupplementaryViewDelegate, string reuseId, Func`1<ObservableCollectionViewSource`2<TItem, TCell>> factory);
    [ExtensionAttribute]
public static ObservableTableViewController`1<TItem> GetController(ObservableCollection`1<TItem> collection, Func`2<NSString, UITableViewCell> createCellDelegate, Action`3<UITableViewCell, TItem, NSIndexPath> bindCellDelegate, string reuseId);
    [ExtensionAttribute]
public static ObservableTableViewController`1<TItem> GetController(IList`1<TItem> list, Func`2<NSString, UITableViewCell> createCellDelegate, Action`3<UITableViewCell, TItem, NSIndexPath> bindCellDelegate, string reuseId);
    [ExtensionAttribute]
public static ObservableTableViewSource`1<TItem> GetTableViewSource(IList`1<TItem> list, Action`3<UITableViewCell, TItem, NSIndexPath> bindCellDelegate, string reuseId, Func`1<ObservableTableViewSource`1<TItem>> factory);
    [ExtensionAttribute]
public static ObservableTableViewSource`1<TItem> GetTableViewSource(ObservableCollection`1<TItem> list, Action`3<UITableViewCell, TItem, NSIndexPath> bindCellDelegate, string reuseId, Func`1<ObservableTableViewSource`1<TItem>> factory);
    [ExtensionAttribute]
public static ObservableTableViewSource`1<TItem> GetTableViewSource(IList`1<TItem> list, Func`2<NSString, UITableViewCell> createCellDelegate, Action`3<UITableViewCell, TItem, NSIndexPath> bindCellDelegate, string reuseId, Func`1<ObservableTableViewSource`1<TItem>> factory);
    [ExtensionAttribute]
public static ObservableTableViewSource`1<TItem> GetTableViewSource(ObservableCollection`1<TItem> list, Func`2<NSString, UITableViewCell> createCellDelegate, Action`3<UITableViewCell, TItem, NSIndexPath> bindCellDelegate, string reuseId, Func`1<ObservableTableViewSource`1<TItem>> factory);
    [ExtensionAttribute]
internal static string GetDefaultEventNameForControl(Type type);
    [ExtensionAttribute]
internal static Delegate GetCommandHandler(EventInfo info, string eventName, Type elementType, ICommand command);
    [ExtensionAttribute]
internal static Delegate GetCommandHandler(EventInfo info, string eventName, Type elementType, RelayCommand`1<T> command, Binding`2<T, T> castedBinding);
    [ExtensionAttribute]
internal static Delegate GetCommandHandler(EventInfo info, string eventName, Type elementType, RelayCommand`1<T> command, T commandParameter);
}
public class GalaSoft.MvvmLight.Helpers.ObservableCollectionViewSource`2 : UICollectionViewSource {
    public static string SelectedItemPropertyName;
    private NSString _defaultReuseId;
    private Thread _mainThread;
    private IList`1<TItem> _dataSource;
    private INotifyCollectionChanged _notifier;
    private NSString _reuseId;
    private TItem _selectedItem;
    private UICollectionView _view;
    [CompilerGeneratedAttribute]
private Action`3<TCell, TItem, NSIndexPath> <BindCellDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<NSString, NSIndexPath, UICollectionReusableView> <GetSupplementaryViewDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public Action`3<TCell, TItem, NSIndexPath> BindCellDelegate { get; public set; }
    public IList`1<TItem> DataSource { get; public set; }
    public Func`3<NSString, NSIndexPath, UICollectionReusableView> GetSupplementaryViewDelegate { get; public set; }
    public string ReuseId { get; public set; }
    public TItem SelectedItem { get; protected set; }
    private NSString NsReuseId { get; }
    [CompilerGeneratedAttribute]
public Action`3<TCell, TItem, NSIndexPath> get_BindCellDelegate();
    [CompilerGeneratedAttribute]
public void set_BindCellDelegate(Action`3<TCell, TItem, NSIndexPath> value);
    public IList`1<TItem> get_DataSource();
    public void set_DataSource(IList`1<TItem> value);
    [CompilerGeneratedAttribute]
public Func`3<NSString, NSIndexPath, UICollectionReusableView> get_GetSupplementaryViewDelegate();
    [CompilerGeneratedAttribute]
public void set_GetSupplementaryViewDelegate(Func`3<NSString, NSIndexPath, UICollectionReusableView> value);
    public string get_ReuseId();
    public void set_ReuseId(string value);
    public TItem get_SelectedItem();
    protected void set_SelectedItem(TItem value);
    private NSString get_NsReuseId();
    public virtual UICollectionViewCell GetCell(UICollectionView collectionView, NSIndexPath indexPath);
    public TItem GetItem(NSIndexPath indexPath);
    public virtual nint GetItemsCount(UICollectionView collectionView, nint section);
    public virtual UICollectionReusableView GetViewForSupplementaryElement(UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath);
    public virtual void ItemDeselected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual void ItemSelected(UICollectionView collectionView, NSIndexPath indexPath);
    public virtual nint NumberOfSections(UICollectionView collectionView);
    protected virtual void BindCell(UICollectionViewCell cell, object item, NSIndexPath indexPath);
    protected virtual void RaisePropertyChanged(string propertyName);
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void RaiseSelectionChanged();
    private void SetView(UICollectionView collectionView);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
}
public class GalaSoft.MvvmLight.Helpers.ObservableTableViewController`1 : UITableViewController {
    public static string SelectedItemPropertyName;
    private IList`1<T> _dataSource;
    private bool _loadedView;
    private Thread _mainThread;
    private INotifyCollectionChanged _notifier;
    private ObservableTableSource`1<T, T> _tableSource;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <AddAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<UITableViewCell, T, NSIndexPath> <BindCellDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<NSString, UITableViewCell> <CreateCellDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <DeleteAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<UITableView, nint, nfloat> <GetHeightForFooterDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<UITableView, nint, nfloat> <GetHeightForHeaderDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<UITableView, nint, UIView> <GetViewForFooterDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<UITableView, nint, UIView> <GetViewForHeaderDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReuseId>k__BackingField;
    [CompilerGeneratedAttribute]
private T <SelectedItem>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public UITableViewRowAnimation AddAnimation { get; public set; }
    public Action`3<UITableViewCell, T, NSIndexPath> BindCellDelegate { get; public set; }
    public Func`2<NSString, UITableViewCell> CreateCellDelegate { get; public set; }
    public IList`1<T> DataSource { get; public set; }
    public UITableViewRowAnimation DeleteAnimation { get; public set; }
    public Func`3<UITableView, nint, nfloat> GetHeightForFooterDelegate { get; public set; }
    public Func`3<UITableView, nint, nfloat> GetHeightForHeaderDelegate { get; public set; }
    public Func`3<UITableView, nint, UIView> GetViewForFooterDelegate { get; public set; }
    public Func`3<UITableView, nint, UIView> GetViewForHeaderDelegate { get; public set; }
    public string ReuseId { get; public set; }
    public T SelectedItem { get; private set; }
    public UITableViewSource TableSource { get; }
    public UITableView TableView { get; public set; }
    public ObservableTableViewController`1(UITableViewStyle tableStyle);
    [CompilerGeneratedAttribute]
public UITableViewRowAnimation get_AddAnimation();
    [CompilerGeneratedAttribute]
public void set_AddAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
public Action`3<UITableViewCell, T, NSIndexPath> get_BindCellDelegate();
    [CompilerGeneratedAttribute]
public void set_BindCellDelegate(Action`3<UITableViewCell, T, NSIndexPath> value);
    [CompilerGeneratedAttribute]
public Func`2<NSString, UITableViewCell> get_CreateCellDelegate();
    [CompilerGeneratedAttribute]
public void set_CreateCellDelegate(Func`2<NSString, UITableViewCell> value);
    public IList`1<T> get_DataSource();
    public void set_DataSource(IList`1<T> value);
    [CompilerGeneratedAttribute]
public UITableViewRowAnimation get_DeleteAnimation();
    [CompilerGeneratedAttribute]
public void set_DeleteAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
public Func`3<UITableView, nint, nfloat> get_GetHeightForFooterDelegate();
    [CompilerGeneratedAttribute]
public void set_GetHeightForFooterDelegate(Func`3<UITableView, nint, nfloat> value);
    [CompilerGeneratedAttribute]
public Func`3<UITableView, nint, nfloat> get_GetHeightForHeaderDelegate();
    [CompilerGeneratedAttribute]
public void set_GetHeightForHeaderDelegate(Func`3<UITableView, nint, nfloat> value);
    [CompilerGeneratedAttribute]
public Func`3<UITableView, nint, UIView> get_GetViewForFooterDelegate();
    [CompilerGeneratedAttribute]
public void set_GetViewForFooterDelegate(Func`3<UITableView, nint, UIView> value);
    [CompilerGeneratedAttribute]
public Func`3<UITableView, nint, UIView> get_GetViewForHeaderDelegate();
    [CompilerGeneratedAttribute]
public void set_GetViewForHeaderDelegate(Func`3<UITableView, nint, UIView> value);
    [CompilerGeneratedAttribute]
public string get_ReuseId();
    [CompilerGeneratedAttribute]
public void set_ReuseId(string value);
    [CompilerGeneratedAttribute]
public T get_SelectedItem();
    [CompilerGeneratedAttribute]
private void set_SelectedItem(T value);
    public UITableViewSource get_TableSource();
    public virtual UITableView get_TableView();
    public virtual void set_TableView(UITableView value);
    public virtual void ViewDidLoad();
    protected virtual void BindCell(UITableViewCell cell, object item, NSIndexPath indexPath);
    protected virtual UITableViewCell CreateCell(NSString reuseId);
    protected virtual ObservableTableSource`1<T, T> CreateSource();
    protected virtual void OnRowSelected(object item, NSIndexPath indexPath);
    protected virtual void RaisePropertyChanged(string propertyName);
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void Initialize();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
}
public class GalaSoft.MvvmLight.Helpers.ObservableTableViewSource`1 : UITableViewSource {
    public static string SelectedItemPropertyName;
    private NSString _defaultReuseId;
    private Thread _mainThread;
    private IList`1<TItem> _dataSource;
    private INotifyCollectionChanged _notifier;
    private NSString _reuseId;
    private TItem _selectedItem;
    private UITableView _view;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <AddAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`3<UITableViewCell, TItem, NSIndexPath> <BindCellDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<NSString, UITableViewCell> <CreateCellDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private UITableViewRowAnimation <DeleteAnimation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<nfloat> <GetHeightForFooterDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<nfloat> <GetHeightForHeaderDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<UIView> <GetViewForFooterDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<UIView> <GetViewForHeaderDelegate>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private EventHandler SelectionChanged;
    public UITableViewRowAnimation AddAnimation { get; public set; }
    public Action`3<UITableViewCell, TItem, NSIndexPath> BindCellDelegate { get; public set; }
    public Func`2<NSString, UITableViewCell> CreateCellDelegate { get; public set; }
    public IList`1<TItem> DataSource { get; public set; }
    public UITableViewRowAnimation DeleteAnimation { get; public set; }
    public Func`1<nfloat> GetHeightForFooterDelegate { get; public set; }
    public Func`1<nfloat> GetHeightForHeaderDelegate { get; public set; }
    public Func`1<UIView> GetViewForFooterDelegate { get; public set; }
    public Func`1<UIView> GetViewForHeaderDelegate { get; public set; }
    public string ReuseId { get; public set; }
    public TItem SelectedItem { get; protected set; }
    private NSString NsReuseId { get; }
    [CompilerGeneratedAttribute]
public UITableViewRowAnimation get_AddAnimation();
    [CompilerGeneratedAttribute]
public void set_AddAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
public Action`3<UITableViewCell, TItem, NSIndexPath> get_BindCellDelegate();
    [CompilerGeneratedAttribute]
public void set_BindCellDelegate(Action`3<UITableViewCell, TItem, NSIndexPath> value);
    [CompilerGeneratedAttribute]
public Func`2<NSString, UITableViewCell> get_CreateCellDelegate();
    [CompilerGeneratedAttribute]
public void set_CreateCellDelegate(Func`2<NSString, UITableViewCell> value);
    public IList`1<TItem> get_DataSource();
    public void set_DataSource(IList`1<TItem> value);
    [CompilerGeneratedAttribute]
public UITableViewRowAnimation get_DeleteAnimation();
    [CompilerGeneratedAttribute]
public void set_DeleteAnimation(UITableViewRowAnimation value);
    [CompilerGeneratedAttribute]
public Func`1<nfloat> get_GetHeightForFooterDelegate();
    [CompilerGeneratedAttribute]
public void set_GetHeightForFooterDelegate(Func`1<nfloat> value);
    [CompilerGeneratedAttribute]
public Func`1<nfloat> get_GetHeightForHeaderDelegate();
    [CompilerGeneratedAttribute]
public void set_GetHeightForHeaderDelegate(Func`1<nfloat> value);
    [CompilerGeneratedAttribute]
public Func`1<UIView> get_GetViewForFooterDelegate();
    [CompilerGeneratedAttribute]
public void set_GetViewForFooterDelegate(Func`1<UIView> value);
    [CompilerGeneratedAttribute]
public Func`1<UIView> get_GetViewForHeaderDelegate();
    [CompilerGeneratedAttribute]
public void set_GetViewForHeaderDelegate(Func`1<UIView> value);
    public string get_ReuseId();
    public void set_ReuseId(string value);
    public TItem get_SelectedItem();
    protected void set_SelectedItem(TItem value);
    private NSString get_NsReuseId();
    public virtual UITableViewCell GetCell(UITableView view, NSIndexPath indexPath);
    public virtual nfloat GetHeightForFooter(UITableView tableView, nint section);
    public virtual nfloat GetHeightForHeader(UITableView tableView, nint section);
    public TItem GetItem(NSIndexPath indexPath);
    public virtual UIView GetViewForFooter(UITableView tableView, nint section);
    public virtual UIView GetViewForHeader(UITableView tableView, nint section);
    public virtual nint NumberOfSections(UITableView tableView);
    public virtual void RowDeselected(UITableView tableView, NSIndexPath indexPath);
    public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath);
    public virtual nint RowsInSection(UITableView tableView, nint section);
    protected virtual void BindCell(UITableViewCell cell, object item, NSIndexPath indexPath);
    protected virtual UITableViewCell CreateCell(NSString reuseId);
    protected virtual void RaisePropertyChanged(string propertyName);
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void RaiseSelectionChanged();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler value);
}
public enum GalaSoft.MvvmLight.Helpers.UpdateTriggerMode : Enum {
    public int value__;
    public static UpdateTriggerMode LostFocus;
    public static UpdateTriggerMode PropertyChanged;
}
public static class GalaSoft.MvvmLight.Threading.DispatcherHelper : object {
    [CompilerGeneratedAttribute]
private static NSObject <MainThreadContext>k__BackingField;
    public static NSObject MainThreadContext { get; private set; }
    [CompilerGeneratedAttribute]
public static NSObject get_MainThreadContext();
    [CompilerGeneratedAttribute]
private static void set_MainThreadContext(NSObject value);
    public static void CheckBeginInvokeOnUI(Action action);
    public static void Initialize(NSObject mainThreadObject);
    public static void Reset();
    private static void CheckDispatcher();
}
[ObsoleteAttribute("This class is not needed anymore. Instead, use a normal UIViewController, and then use NavigationService.GetAndRemoveParameter to retrieve the navigation parameter.")]
public class GalaSoft.MvvmLight.Views.ControllerBase : UIViewController {
    [CompilerGeneratedAttribute]
private object <NavigationParameter>k__BackingField;
    public object NavigationParameter { get; public set; }
    public ControllerBase(NSCoder coder);
    public ControllerBase(NSObjectFlag t);
    public ControllerBase(string nibName, NSBundle bundle);
    protected internal ControllerBase(IntPtr handle);
    [CompilerGeneratedAttribute]
public object get_NavigationParameter();
    [CompilerGeneratedAttribute]
public void set_NavigationParameter(object value);
}
public class GalaSoft.MvvmLight.Views.DialogService : object {
    public sealed virtual Task ShowError(string message, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task ShowError(Exception error, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task ShowMessage(string message, string title);
    public sealed virtual Task ShowMessage(string message, string title, string buttonText, Action afterHideCallback);
    public sealed virtual Task`1<bool> ShowMessage(string message, string title, string buttonConfirmText, string buttonCancelText, Action`1<bool> afterHideCallback);
    public sealed virtual Task ShowMessageBox(string message, string title);
}
public class GalaSoft.MvvmLight.Views.NavigationService : object {
    public static string RootPageKey;
    public static string UnknownPageKey;
    private Dictionary`2<string, TypeActionOrKey> _pagesByKey;
    private Dictionary`2<WeakReference, object> _parametersByController;
    [CompilerGeneratedAttribute]
private UINavigationController <NavigationController>k__BackingField;
    public string CurrentPageKey { get; }
    public UINavigationController NavigationController { get; private set; }
    public sealed virtual string get_CurrentPageKey();
    [CompilerGeneratedAttribute]
public UINavigationController get_NavigationController();
    [CompilerGeneratedAttribute]
private void set_NavigationController(UINavigationController value);
    public void Configure(string key, Type controllerType);
    public void Configure(string key, Func`2<object, UIViewController> createAction);
    public void Configure(string key, string storyboardId);
    public object GetAndRemoveParameter(UIViewController controller);
    public sealed virtual void GoBack();
    public void Initialize(UINavigationController navigation);
    public sealed virtual void NavigateTo(string pageKey);
    public sealed virtual void NavigateTo(string pageKey, object parameter);
    private UIViewController MakeController(Type controllerType, object parameter);
    private void SaveConfigurationItem(string key, TypeActionOrKey item);
}
public interface System.Windows.IWeakEventListener {
    public WeakReference InstanceReference { get; }
    public abstract virtual WeakReference get_InstanceReference();
    public abstract virtual bool ReceiveWeakEvent(Type managerType, object sender, EventArgs e);
}
public class System.Windows.PropertyChangedEventManager : object {
    private static PropertyChangedEventManager _manager;
    private static object SyncLock;
    private Dictionary`2<string, List`1<ListenerInfo>> _list;
    private static PropertyChangedEventManager Instance { get; }
    private static PropertyChangedEventManager();
    private static PropertyChangedEventManager get_Instance();
    public static void AddListener(INotifyPropertyChanged source, IWeakEventListener listener, string propertyName);
    public static void RemoveListener(IWeakEventListener listener);
    private void PrivateAddListener(INotifyPropertyChanged source, IWeakEventListener listener, string propertyName);
    private void PrivateRemoveListener(IWeakEventListener listener);
    private void PropertyChanged(object sender, PropertyChangedEventArgs args);
    private void StartListening(INotifyPropertyChanged source);
    private void StopListening(INotifyPropertyChanged source);
}
