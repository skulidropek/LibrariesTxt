public class GalaSoft.MvvmLight.Command.EventToCommand : TriggerAction`1<DependencyObject> {
    public static DependencyProperty CommandParameterProperty;
    public static DependencyProperty CommandProperty;
    public static DependencyProperty MustToggleIsEnabledProperty;
    private object _commandParameterValue;
    private Nullable`1<bool> _mustToggleValue;
    [CompilerGeneratedAttribute]
private bool <PassEventArgsToCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventArgsConverter <EventArgsConverter>k__BackingField;
    public static string EventArgsConverterParameterPropertyName;
    public static DependencyProperty EventArgsConverterParameterProperty;
    public static string AlwaysInvokeCommandPropertyName;
    public static DependencyProperty AlwaysInvokeCommandProperty;
    public ICommand Command { get; public set; }
    public object CommandParameter { get; public set; }
    public object CommandParameterValue { get; public set; }
    public bool MustToggleIsEnabled { get; public set; }
    public bool MustToggleIsEnabledValue { get; public set; }
    public bool PassEventArgsToCommand { get; public set; }
    public IEventArgsConverter EventArgsConverter { get; public set; }
    public object EventArgsConverterParameter { get; public set; }
    public bool AlwaysInvokeCommand { get; public set; }
    private static EventToCommand();
    public ICommand get_Command();
    public void set_Command(ICommand value);
    public object get_CommandParameter();
    public void set_CommandParameter(object value);
    public object get_CommandParameterValue();
    public void set_CommandParameterValue(object value);
    public bool get_MustToggleIsEnabled();
    public void set_MustToggleIsEnabled(bool value);
    public bool get_MustToggleIsEnabledValue();
    public void set_MustToggleIsEnabledValue(bool value);
    protected virtual void OnAttached();
    private Control GetAssociatedObject();
    private ICommand GetCommand();
    [CompilerGeneratedAttribute]
public bool get_PassEventArgsToCommand();
    [CompilerGeneratedAttribute]
public void set_PassEventArgsToCommand(bool value);
    [CompilerGeneratedAttribute]
public IEventArgsConverter get_EventArgsConverter();
    [CompilerGeneratedAttribute]
public void set_EventArgsConverter(IEventArgsConverter value);
    public object get_EventArgsConverterParameter();
    public void set_EventArgsConverterParameter(object value);
    public bool get_AlwaysInvokeCommand();
    public void set_AlwaysInvokeCommand(bool value);
    public void Invoke();
    protected virtual void Invoke(object parameter);
    private static void OnCommandChanged(EventToCommand element, DependencyPropertyChangedEventArgs e);
    private bool AssociatedElementIsDisabled();
    private void EnableDisableElement();
    private void OnCommandCanExecuteChanged(object sender, EventArgs e);
}
public interface GalaSoft.MvvmLight.Command.IEventArgsConverter {
    public abstract virtual object Convert(object value, object parameter);
}
internal static class GalaSoft.MvvmLight.Helpers.DesignerLibrary : object {
    private static Nullable`1<DesignerPlatformLibrary> _detectedDesignerPlatformLibrary;
    private static Nullable`1<bool> _isInDesignMode;
    internal static DesignerPlatformLibrary DetectedDesignerLibrary { get; }
    public static bool IsInDesignMode { get; }
    internal static DesignerPlatformLibrary get_DetectedDesignerLibrary();
    private static DesignerPlatformLibrary GetCurrentPlatform();
    public static bool get_IsInDesignMode();
}
internal enum GalaSoft.MvvmLight.Helpers.DesignerPlatformLibrary : Enum {
    public int value__;
    public static DesignerPlatformLibrary Unknown;
    public static DesignerPlatformLibrary Net;
    public static DesignerPlatformLibrary WinRt;
    public static DesignerPlatformLibrary Silverlight;
}
public interface GalaSoft.MvvmLight.Ioc.ISimpleIoc {
    public abstract virtual bool ContainsCreated();
    public abstract virtual bool ContainsCreated(string key);
    public abstract virtual bool IsRegistered();
    public abstract virtual bool IsRegistered(string key);
    public abstract virtual void Register();
    public abstract virtual void Register(bool createInstanceImmediately);
    public abstract virtual void Register();
    public abstract virtual void Register(bool createInstanceImmediately);
    public abstract virtual void Register(Func`1<TClass> factory);
    public abstract virtual void Register(Func`1<TClass> factory, bool createInstanceImmediately);
    public abstract virtual void Register(Func`1<TClass> factory, string key);
    public abstract virtual void Register(Func`1<TClass> factory, string key, bool createInstanceImmediately);
    public abstract virtual void Reset();
    public abstract virtual void Unregister();
    public abstract virtual void Unregister(TClass instance);
    public abstract virtual void Unregister(string key);
}
[AttributeUsageAttribute("32")]
public class GalaSoft.MvvmLight.Ioc.PreferredConstructorAttribute : Attribute {
}
public class GalaSoft.MvvmLight.Ioc.SimpleIoc : object {
    private Dictionary`2<Type, ConstructorInfo> _constructorInfos;
    private string _defaultKey;
    private Object[] _emptyArguments;
    private Dictionary`2<Type, Dictionary`2<string, Delegate>> _factories;
    private Dictionary`2<Type, Dictionary`2<string, object>> _instancesRegistry;
    private Dictionary`2<Type, Type> _interfaceToClassMap;
    private object _syncLock;
    private static object _instanceLock;
    private static SimpleIoc _default;
    public static SimpleIoc Default { get; }
    private static SimpleIoc();
    public static SimpleIoc get_Default();
    public sealed virtual bool ContainsCreated();
    public sealed virtual bool ContainsCreated(string key);
    public sealed virtual bool IsRegistered();
    public sealed virtual bool IsRegistered(string key);
    public sealed virtual void Register();
    public sealed virtual void Register(bool createInstanceImmediately);
    public sealed virtual void Register();
    public sealed virtual void Register(bool createInstanceImmediately);
    public sealed virtual void Register(Func`1<TClass> factory);
    public sealed virtual void Register(Func`1<TClass> factory, bool createInstanceImmediately);
    public sealed virtual void Register(Func`1<TClass> factory, string key);
    public sealed virtual void Register(Func`1<TClass> factory, string key, bool createInstanceImmediately);
    public sealed virtual void Reset();
    public sealed virtual void Unregister();
    public sealed virtual void Unregister(TClass instance);
    public sealed virtual void Unregister(string key);
    private object DoGetService(Type serviceType, string key, bool cache);
    private void DoRegister(Type classType, Func`1<TClass> factory, string key);
    private ConstructorInfo GetConstructorInfo(Type serviceType);
    private static ConstructorInfo GetPreferredConstructorInfo(IEnumerable`1<ConstructorInfo> constructorInfos, Type resolveTo);
    private TClass MakeInstance();
    public IEnumerable`1<object> GetAllCreatedInstances(Type serviceType);
    public IEnumerable`1<TService> GetAllCreatedInstances();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetAllInstances(Type serviceType);
    public sealed virtual IEnumerable`1<TService> GetAllInstances();
    public sealed virtual object GetInstance(Type serviceType);
    public object GetInstanceWithoutCaching(Type serviceType);
    public sealed virtual object GetInstance(Type serviceType, string key);
    public object GetInstanceWithoutCaching(Type serviceType, string key);
    public sealed virtual TService GetInstance();
    public TService GetInstanceWithoutCaching();
    public sealed virtual TService GetInstance(string key);
    public TService GetInstanceWithoutCaching(string key);
}
