public class GalaSoft.MvvmLight.Command.RelayCommand : object {
    private WeakAction _execute;
    private WeakFunc`1<bool> _canExecute;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public RelayCommand(Action execute, bool keepTargetAlive);
    public RelayCommand(Action execute, Func`1<bool> canExecute, bool keepTargetAlive);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
public class GalaSoft.MvvmLight.Command.RelayCommand`1 : object {
    private WeakAction`1<T> _execute;
    private WeakFunc`2<T, bool> _canExecute;
    [CompilerGeneratedAttribute]
private EventHandler CanExecuteChanged;
    public RelayCommand`1(Action`1<T> execute, bool keepTargetAlive);
    public RelayCommand`1(Action`1<T> execute, Func`2<T, bool> canExecute, bool keepTargetAlive);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public void RaiseCanExecuteChanged();
    public sealed virtual bool CanExecute(object parameter);
    public virtual void Execute(object parameter);
}
internal static class GalaSoft.MvvmLight.Helpers.DesignerLibrary : object {
    private static Nullable`1<DesignerPlatformLibrary> _detectedDesignerPlatformLibrary;
    private static Nullable`1<bool> _isInDesignMode;
    internal static DesignerPlatformLibrary DetectedDesignerLibrary { get; }
    public static bool IsInDesignMode { get; }
    internal static DesignerPlatformLibrary get_DetectedDesignerLibrary();
    private static DesignerPlatformLibrary GetCurrentPlatform();
    public static bool get_IsInDesignMode();
}
internal enum GalaSoft.MvvmLight.Helpers.DesignerPlatformLibrary : Enum {
    public int value__;
    public static DesignerPlatformLibrary Unknown;
    public static DesignerPlatformLibrary Net;
    public static DesignerPlatformLibrary WinRt;
    public static DesignerPlatformLibrary Silverlight;
}
public interface GalaSoft.MvvmLight.Helpers.IExecuteWithObject {
    public object Target { get; }
    public abstract virtual object get_Target();
    public abstract virtual void ExecuteWithObject(object parameter);
    public abstract virtual void MarkForDeletion();
}
public interface GalaSoft.MvvmLight.Helpers.IExecuteWithObjectAndResult {
    public abstract virtual object ExecuteWithObject(object parameter);
}
public class GalaSoft.MvvmLight.Helpers.WeakAction : object {
    private Action _action;
    private Action _staticAction;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <ActionReference>k__BackingField;
    [CompilerGeneratedAttribute]
private object <LiveReference>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <Reference>k__BackingField;
    protected MethodInfo Method { get; protected set; }
    public string MethodName { get; }
    protected WeakReference ActionReference { get; protected set; }
    protected object LiveReference { get; protected set; }
    protected WeakReference Reference { get; protected set; }
    public bool IsStatic { get; }
    public bool IsAlive { get; }
    public object Target { get; }
    protected object ActionTarget { get; }
    public WeakAction(Action action, bool keepTargetAlive);
    public WeakAction(object target, Action action, bool keepTargetAlive);
    [CompilerGeneratedAttribute]
protected MethodInfo get_Method();
    [CompilerGeneratedAttribute]
protected void set_Method(MethodInfo value);
    public virtual string get_MethodName();
    [CompilerGeneratedAttribute]
protected WeakReference get_ActionReference();
    [CompilerGeneratedAttribute]
protected void set_ActionReference(WeakReference value);
    [CompilerGeneratedAttribute]
protected object get_LiveReference();
    [CompilerGeneratedAttribute]
protected void set_LiveReference(object value);
    [CompilerGeneratedAttribute]
protected WeakReference get_Reference();
    [CompilerGeneratedAttribute]
protected void set_Reference(WeakReference value);
    public bool get_IsStatic();
    public virtual bool get_IsAlive();
    public sealed virtual object get_Target();
    protected object get_ActionTarget();
    public void Execute();
    public void MarkForDeletion();
}
public class GalaSoft.MvvmLight.Helpers.WeakAction`1 : WeakAction {
    private Action`1<T> _action;
    private Action`1<T> _staticAction;
    public string MethodName { get; }
    public bool IsAlive { get; }
    public WeakAction`1(Action`1<T> action, bool keepTargetAlive);
    public WeakAction`1(object target, Action`1<T> action, bool keepTargetAlive);
    public virtual string get_MethodName();
    public virtual bool get_IsAlive();
    public void Execute();
    public void Execute(T parameter);
    public sealed virtual void ExecuteWithObject(object parameter);
    public sealed virtual void MarkForDeletion();
}
public class GalaSoft.MvvmLight.Helpers.WeakFunc`1 : object {
    private Func`1<TResult> _func;
    private Func`1<TResult> _staticFunc;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <FuncReference>k__BackingField;
    [CompilerGeneratedAttribute]
private object <LiveReference>k__BackingField;
    [CompilerGeneratedAttribute]
private WeakReference <Reference>k__BackingField;
    protected MethodInfo Method { get; protected set; }
    public bool IsStatic { get; }
    public string MethodName { get; }
    protected WeakReference FuncReference { get; protected set; }
    protected object LiveReference { get; protected set; }
    protected WeakReference Reference { get; protected set; }
    public bool IsAlive { get; }
    public object Target { get; }
    protected object FuncTarget { get; }
    public WeakFunc`1(Func`1<TResult> func, bool keepTargetAlive);
    public WeakFunc`1(object target, Func`1<TResult> func, bool keepTargetAlive);
    [CompilerGeneratedAttribute]
protected MethodInfo get_Method();
    [CompilerGeneratedAttribute]
protected void set_Method(MethodInfo value);
    public bool get_IsStatic();
    public virtual string get_MethodName();
    [CompilerGeneratedAttribute]
protected WeakReference get_FuncReference();
    [CompilerGeneratedAttribute]
protected void set_FuncReference(WeakReference value);
    [CompilerGeneratedAttribute]
protected object get_LiveReference();
    [CompilerGeneratedAttribute]
protected void set_LiveReference(object value);
    [CompilerGeneratedAttribute]
protected WeakReference get_Reference();
    [CompilerGeneratedAttribute]
protected void set_Reference(WeakReference value);
    public virtual bool get_IsAlive();
    public object get_Target();
    protected object get_FuncTarget();
    public TResult Execute();
    public void MarkForDeletion();
}
public class GalaSoft.MvvmLight.Helpers.WeakFunc`2 : WeakFunc`1<TResult> {
    private Func`2<T, TResult> _func;
    private Func`2<T, TResult> _staticFunc;
    public string MethodName { get; }
    public bool IsAlive { get; }
    public WeakFunc`2(Func`2<T, TResult> func, bool keepTargetAlive);
    public WeakFunc`2(object target, Func`2<T, TResult> func, bool keepTargetAlive);
    public virtual string get_MethodName();
    public virtual bool get_IsAlive();
    public TResult Execute();
    public TResult Execute(T parameter);
    public sealed virtual object ExecuteWithObject(object parameter);
    public void MarkForDeletion();
}
public interface GalaSoft.MvvmLight.ICleanup {
    public abstract virtual void Cleanup();
}
[ObsoleteAttribute("This class is not recommended because it uses MessageBoxResult which is not good in VMs. See http://www.galasoft.ch/s/dialogmessage.")]
public class GalaSoft.MvvmLight.Messaging.DialogMessage : GenericMessage`1<string> {
    [CompilerGeneratedAttribute]
private MessageBoxButton <Button>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<MessageBoxResult> <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageBoxResult <DefaultResult>k__BackingField;
    public MessageBoxButton Button { get; public set; }
    public Action`1<MessageBoxResult> Callback { get; private set; }
    public string Caption { get; public set; }
    public MessageBoxResult DefaultResult { get; public set; }
    public DialogMessage(string content, Action`1<MessageBoxResult> callback);
    public DialogMessage(object sender, string content, Action`1<MessageBoxResult> callback);
    public DialogMessage(object sender, object target, string content, Action`1<MessageBoxResult> callback);
    [CompilerGeneratedAttribute]
public MessageBoxButton get_Button();
    [CompilerGeneratedAttribute]
public void set_Button(MessageBoxButton value);
    [CompilerGeneratedAttribute]
public Action`1<MessageBoxResult> get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(Action`1<MessageBoxResult> value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public MessageBoxResult get_DefaultResult();
    [CompilerGeneratedAttribute]
public void set_DefaultResult(MessageBoxResult value);
    public void ProcessCallback(MessageBoxResult result);
}
public class GalaSoft.MvvmLight.Messaging.GenericMessage`1 : MessageBase {
    [CompilerGeneratedAttribute]
private T <Content>k__BackingField;
    public T Content { get; protected set; }
    public GenericMessage`1(T content);
    public GenericMessage`1(object sender, T content);
    public GenericMessage`1(object sender, object target, T content);
    [CompilerGeneratedAttribute]
public T get_Content();
    [CompilerGeneratedAttribute]
protected void set_Content(T value);
}
public interface GalaSoft.MvvmLight.Messaging.IMessenger {
    public abstract virtual void Register(object recipient, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Register(object recipient, object token, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Register(object recipient, object token, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Register(object recipient, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public abstract virtual void Send(TMessage message);
    public abstract virtual void Send(TMessage message);
    public abstract virtual void Send(TMessage message, object token);
    public abstract virtual void Unregister(object recipient);
    public abstract virtual void Unregister(object recipient);
    public abstract virtual void Unregister(object recipient, object token);
    public abstract virtual void Unregister(object recipient, Action`1<TMessage> action);
    public abstract virtual void Unregister(object recipient, object token, Action`1<TMessage> action);
}
public class GalaSoft.MvvmLight.Messaging.MessageBase : object {
    [CompilerGeneratedAttribute]
private object <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    public object Sender { get; protected set; }
    public object Target { get; protected set; }
    public MessageBase(object sender);
    public MessageBase(object sender, object target);
    [CompilerGeneratedAttribute]
public object get_Sender();
    [CompilerGeneratedAttribute]
protected void set_Sender(object value);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
protected void set_Target(object value);
}
public class GalaSoft.MvvmLight.Messaging.Messenger : object {
    private static object CreationLock;
    private static IMessenger _defaultInstance;
    private object _registerLock;
    private Dictionary`2<Type, List`1<WeakActionAndToken>> _recipientsOfSubclassesAction;
    private Dictionary`2<Type, List`1<WeakActionAndToken>> _recipientsStrictAction;
    private bool _isCleanupRegistered;
    public static IMessenger Default { get; }
    private static Messenger();
    public static IMessenger get_Default();
    public virtual void Register(object recipient, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Register(object recipient, object token, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Register(object recipient, object token, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Register(object recipient, bool receiveDerivedMessagesToo, Action`1<TMessage> action, bool keepTargetAlive);
    public virtual void Send(TMessage message);
    public virtual void Send(TMessage message);
    public virtual void Send(TMessage message, object token);
    public virtual void Unregister(object recipient);
    public virtual void Unregister(object recipient);
    public virtual void Unregister(object recipient, object token);
    public virtual void Unregister(object recipient, Action`1<TMessage> action);
    public virtual void Unregister(object recipient, object token, Action`1<TMessage> action);
    public static void OverrideDefault(IMessenger newMessenger);
    public static void Reset();
    public void ResetAll();
    private static void CleanupList(IDictionary`2<Type, List`1<WeakActionAndToken>> lists);
    private static void SendToList(TMessage message, IEnumerable`1<WeakActionAndToken> weakActionsAndTokens, Type messageTargetType, object token);
    private static void UnregisterFromLists(object recipient, Dictionary`2<Type, List`1<WeakActionAndToken>> lists);
    private static void UnregisterFromLists(object recipient, object token, Action`1<TMessage> action, Dictionary`2<Type, List`1<WeakActionAndToken>> lists);
    public void RequestCleanup();
    public void Cleanup();
    private void SendToTargetOrType(TMessage message, Type messageTargetType, object token);
}
public class GalaSoft.MvvmLight.Messaging.NotificationMessage : MessageBase {
    [CompilerGeneratedAttribute]
private string <Notification>k__BackingField;
    public string Notification { get; private set; }
    public NotificationMessage(string notification);
    public NotificationMessage(object sender, string notification);
    public NotificationMessage(object sender, object target, string notification);
    [CompilerGeneratedAttribute]
public string get_Notification();
    [CompilerGeneratedAttribute]
private void set_Notification(string value);
}
public class GalaSoft.MvvmLight.Messaging.NotificationMessage`1 : GenericMessage`1<T> {
    [CompilerGeneratedAttribute]
private string <Notification>k__BackingField;
    public string Notification { get; private set; }
    public NotificationMessage`1(T content, string notification);
    public NotificationMessage`1(object sender, T content, string notification);
    public NotificationMessage`1(object sender, object target, T content, string notification);
    [CompilerGeneratedAttribute]
public string get_Notification();
    [CompilerGeneratedAttribute]
private void set_Notification(string value);
}
public class GalaSoft.MvvmLight.Messaging.NotificationMessageAction : NotificationMessageWithCallback {
    public NotificationMessageAction(string notification, Action callback);
    public NotificationMessageAction(object sender, string notification, Action callback);
    public NotificationMessageAction(object sender, object target, string notification, Action callback);
    public void Execute();
}
public class GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1 : NotificationMessageWithCallback {
    public NotificationMessageAction`1(string notification, Action`1<TCallbackParameter> callback);
    public NotificationMessageAction`1(object sender, string notification, Action`1<TCallbackParameter> callback);
    public NotificationMessageAction`1(object sender, object target, string notification, Action`1<TCallbackParameter> callback);
    public void Execute(TCallbackParameter parameter);
}
public class GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback : NotificationMessage {
    private Delegate _callback;
    public NotificationMessageWithCallback(string notification, Delegate callback);
    public NotificationMessageWithCallback(object sender, string notification, Delegate callback);
    public NotificationMessageWithCallback(object sender, object target, string notification, Delegate callback);
    public virtual object Execute(Object[] arguments);
    private static void CheckCallback(Delegate callback);
}
public class GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1 : PropertyChangedMessageBase {
    [CompilerGeneratedAttribute]
private T <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <OldValue>k__BackingField;
    public T NewValue { get; private set; }
    public T OldValue { get; private set; }
    public PropertyChangedMessage`1(object sender, T oldValue, T newValue, string propertyName);
    public PropertyChangedMessage`1(T oldValue, T newValue, string propertyName);
    public PropertyChangedMessage`1(object sender, object target, T oldValue, T newValue, string propertyName);
    [CompilerGeneratedAttribute]
public T get_NewValue();
    [CompilerGeneratedAttribute]
private void set_NewValue(T value);
    [CompilerGeneratedAttribute]
public T get_OldValue();
    [CompilerGeneratedAttribute]
private void set_OldValue(T value);
}
public abstract class GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase : MessageBase {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; protected set; }
    protected PropertyChangedMessageBase(object sender, string propertyName);
    protected PropertyChangedMessageBase(object sender, object target, string propertyName);
    protected PropertyChangedMessageBase(string propertyName);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
protected void set_PropertyName(string value);
}
public class GalaSoft.MvvmLight.ObservableObject : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    protected PropertyChangedEventHandler PropertyChangedHandler { get; }
    protected PropertyChangingEventHandler PropertyChangingHandler { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected PropertyChangedEventHandler get_PropertyChangedHandler();
    [CompilerGeneratedAttribute]
public void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanging(PropertyChangingEventHandler value);
    protected PropertyChangingEventHandler get_PropertyChangingHandler();
    [ConditionalAttribute("DEBUG")]
[DebuggerStepThroughAttribute]
public void VerifyPropertyName(string propertyName);
    public virtual void RaisePropertyChanging(string propertyName);
    public virtual void RaisePropertyChanged(string propertyName);
    public virtual void RaisePropertyChanging(Expression`1<Func`1<T>> propertyExpression);
    public virtual void RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression);
    protected static string GetPropertyName(Expression`1<Func`1<T>> propertyExpression);
    protected bool Set(Expression`1<Func`1<T>> propertyExpression, T& field, T newValue);
    protected bool Set(string propertyName, T& field, T newValue);
}
public static class GalaSoft.MvvmLight.Threading.DispatcherHelper : object {
    [CompilerGeneratedAttribute]
private static Dispatcher <UIDispatcher>k__BackingField;
    public static Dispatcher UIDispatcher { get; private set; }
    [CompilerGeneratedAttribute]
public static Dispatcher get_UIDispatcher();
    [CompilerGeneratedAttribute]
private static void set_UIDispatcher(Dispatcher value);
    public static void CheckBeginInvokeOnUI(Action action);
    private static void CheckDispatcher();
    public static DispatcherOperation RunAsync(Action action);
    public static void Initialize();
    public static void Reset();
}
public abstract class GalaSoft.MvvmLight.ViewModelBase : ObservableObject {
    private IMessenger _messengerInstance;
    public bool IsInDesignMode { get; }
    public static bool IsInDesignModeStatic { get; }
    protected IMessenger MessengerInstance { get; protected set; }
    public ViewModelBase(IMessenger messenger);
    public bool get_IsInDesignMode();
    public static bool get_IsInDesignModeStatic();
    protected IMessenger get_MessengerInstance();
    protected void set_MessengerInstance(IMessenger value);
    public virtual void Cleanup();
    protected virtual void Broadcast(T oldValue, T newValue, string propertyName);
    public virtual void RaisePropertyChanged(string propertyName, T oldValue, T newValue, bool broadcast);
    public virtual void RaisePropertyChanged(Expression`1<Func`1<T>> propertyExpression, T oldValue, T newValue, bool broadcast);
    protected bool Set(Expression`1<Func`1<T>> propertyExpression, T& field, T newValue, bool broadcast);
    protected bool Set(string propertyName, T& field, T newValue, bool broadcast);
}
public interface GalaSoft.MvvmLight.Views.IDialogService {
    public abstract virtual Task ShowError(string message, string title, string buttonText, Action afterHideCallback);
    public abstract virtual Task ShowError(Exception error, string title, string buttonText, Action afterHideCallback);
    public abstract virtual Task ShowMessage(string message, string title);
    public abstract virtual Task ShowMessage(string message, string title, string buttonText, Action afterHideCallback);
    public abstract virtual Task`1<bool> ShowMessage(string message, string title, string buttonConfirmText, string buttonCancelText, Action`1<bool> afterHideCallback);
    public abstract virtual Task ShowMessageBox(string message, string title);
}
public interface GalaSoft.MvvmLight.Views.INavigationService {
    public string CurrentPageKey { get; }
    public abstract virtual string get_CurrentPageKey();
    public abstract virtual void GoBack();
    public abstract virtual void NavigateTo(string pageKey);
    public abstract virtual void NavigateTo(string pageKey, object parameter);
}
