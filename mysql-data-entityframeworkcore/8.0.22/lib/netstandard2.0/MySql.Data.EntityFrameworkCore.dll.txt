[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MySQLDbContextOptionsExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseMySQL(DbContextOptionsBuilder optionsBuilder, string connectionString, Action`1<MySQLDbContextOptionsBuilder> MySQLOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseMySQL(DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action`1<MySQLDbContextOptionsBuilder> MySQLOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseMySQL(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, Action`1<MySQLDbContextOptionsBuilder> MySQLOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseMySQL(DbContextOptionsBuilder`1<TContext> optionsBuilder, DbConnection connection, Action`1<MySQLDbContextOptionsBuilder> MySQLOptionsAction);
    private static MySQLOptionsExtension GetOrCreateExtension(DbContextOptionsBuilder optionsBuilder);
}
[AttributeUsageAttribute("32767")]
internal class MySql.Data.EntityFrameworkCore.CanBeNullAttribute : Attribute {
}
public class MySql.Data.EntityFrameworkCore.DataAnnotations.MySqlCharsetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Charset>k__BackingField;
    public string Charset { get; }
    public MySqlCharsetAttribute(string charset);
    [CompilerGeneratedAttribute]
public string get_Charset();
}
public class MySql.Data.EntityFrameworkCore.DataAnnotations.MySqlCollationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    public string Collation { get; }
    public MySqlCollationAttribute(string collation);
    [CompilerGeneratedAttribute]
public string get_Collation();
}
internal class MySql.Data.EntityFrameworkCore.Design.Internal.MySQLAnnotationCodeGenerator : AnnotationCodeGenerator {
    public MySQLAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies);
    public virtual bool IsHandledByConvention(IModel model, IAnnotation annotation);
    public virtual MethodCallCodeFragment GenerateFluentApi(IProperty property, IAnnotation annotation);
}
internal class MySql.Data.EntityFrameworkCore.Design.Internal.MySQLDesignTimeServices : object {
    public sealed virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
internal class MySql.Data.EntityFrameworkCore.Diagnostics.Internal.MySQLLoggingDefinitions : RelationalLoggingDefinitions {
    public EventDefinitionBase LogDefaultDecimalTypeColumn;
    public EventDefinitionBase LogByteIdentityColumn;
    public EventDefinitionBase LogFoundDefaultSchema;
    public EventDefinitionBase LogFoundTypeAlias;
    public EventDefinitionBase LogFoundColumn;
    public EventDefinitionBase LogFoundForeignKey;
    public EventDefinitionBase LogPrincipalTableNotInSelectionSet;
    public EventDefinitionBase LogMissingSchema;
    public EventDefinitionBase LogMissingTable;
    public EventDefinitionBase LogFoundSequence;
    public EventDefinitionBase LogFoundTable;
    public EventDefinitionBase LogFoundIndex;
    public EventDefinitionBase LogFoundPrimaryKey;
    public EventDefinitionBase LogFoundUniqueConstraint;
    public EventDefinitionBase LogPrincipalColumnNotFound;
    public EventDefinitionBase LogReflexiveConstraintIgnored;
}
public static class MySQL.Data.EntityFrameworkCore.Diagnostics.MySQLEventId : object {
    private static string _validationPrefix;
    public static EventId DecimalTypeDefaultWarning;
    public static EventId ByteIdentityColumnWarning;
    private static string _scaffoldingPrefix;
    public static EventId ColumnFound;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnFound;
    public static EventId DefaultSchemaFound;
    public static EventId TypeAliasFound;
    public static EventId MissingSchemaWarning;
    public static EventId MissingTableWarning;
    [ObsoleteAttribute]
public static EventId SequenceNotNamedWarning;
    [ObsoleteAttribute]
public static EventId IndexColumnsNotMappedWarning;
    public static EventId ForeignKeyReferencesMissingPrincipalTableWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnsNotMappedWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyNotNamedWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnMissingWarning;
    [ObsoleteAttribute]
public static EventId ForeignKeyColumnNotNamedWarning;
    [ObsoleteAttribute]
public static EventId ColumnNotNamedWarning;
    [ObsoleteAttribute]
public static EventId IndexNotNamedWarning;
    [ObsoleteAttribute]
public static EventId IndexTableMissingWarning;
    [ObsoleteAttribute]
public static EventId IndexColumnNotNamedWarning;
    public static EventId TableFound;
    [ObsoleteAttribute]
public static EventId TableSkipped;
    [ObsoleteAttribute]
public static EventId ColumnSkipped;
    [ObsoleteAttribute]
public static EventId IndexColumnFound;
    [ObsoleteAttribute]
public static EventId IndexColumnSkipped;
    public static EventId SequenceFound;
    [ObsoleteAttribute]
public static EventId ForeignKeyTableMissingWarning;
    public static EventId PrimaryKeyFound;
    public static EventId UniqueConstraintFound;
    public static EventId IndexFound;
    public static EventId ForeignKeyFound;
    public static EventId ForeignKeyPrincipalColumnMissingWarning;
    public static EventId ReflexiveConstraintIgnored;
    private static MySQLEventId();
    private static EventId MakeValidationId(Id id);
    private static EventId MakeScaffoldingId(Id id);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static bool IsMySql(DatabaseFacade database);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLDbFunctionsExtensions : object {
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffYear(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffYear(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMonth(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMonth(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffDay(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffDay(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffHour(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffHour(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMinute(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMinute(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffSecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffSecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTime startDate, DateTime endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [ExtensionAttribute]
public static int DateDiffMicrosecond(DbFunctions _, DateTimeOffset startDate, DateTimeOffset endDate);
    [ExtensionAttribute]
public static Nullable`1<int> DateDiffMicrosecond(DbFunctions _, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [ExtensionAttribute]
public static bool Like(DbFunctions _, T matchExpression, string pattern);
    [ExtensionAttribute]
public static bool Like(DbFunctions _, T matchExpression, string pattern, string escapeCharacter);
    private static bool LikeCore(T matchExpression, string pattern, string escapeCharacter);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLIndexExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsFullText(IIndex index);
    [ExtensionAttribute]
public static void SetIsFullText(IMutableIndex index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetIsFullText(IConventionIndex index, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsFullTextConfigurationSource(IConventionIndex property);
    [ExtensionAttribute]
public static Nullable`1<bool> IsSpatial(IIndex index);
    [ExtensionAttribute]
public static void SetIsSpatial(IMutableIndex index, Nullable`1<bool> value);
    [ExtensionAttribute]
public static void SetIsSpatial(IConventionIndex index, Nullable`1<bool> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsSpatialConfigurationSource(IConventionIndex property);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLMigrationBuilderExtensions : object {
    [ExtensionAttribute]
public static bool IsMySql(MigrationBuilder migrationBuilder);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLModelExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<MySQLValueGenerationStrategy> GetValueGenerationStrategy(IModel model);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IMutableModel model, Nullable`1<MySQLValueGenerationStrategy> value);
    [ExtensionAttribute]
public static void SetValueGenerationStrategy(IConventionModel model, Nullable`1<MySQLValueGenerationStrategy> value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGenerationStrategyConfigurationSource(IConventionModel model);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder UseMySQLAutoIncrementColumn(PropertyBuilder propertyBuilder, string typeName);
    [ExtensionAttribute]
public static PropertyBuilder ForMySQLHasDefaultValueSql(PropertyBuilder propertyBuilder, string sql);
    [ExtensionAttribute]
public static PropertyBuilder ForMySQLHasDefaultValue(PropertyBuilder propertyBuilder, object value);
    [ExtensionAttribute]
public static PropertyBuilder ForMySQLHasCharset(PropertyBuilder propertyBuilder, string charset);
    [ExtensionAttribute]
public static EntityTypeBuilder ForMySQLHasCharset(EntityTypeBuilder entityTypeBuilder, string charset);
    [ExtensionAttribute]
public static PropertyBuilder ForMySQLHasCollation(PropertyBuilder propertyBuilder, string collation);
    [ExtensionAttribute]
public static EntityTypeBuilder ForMySQLHasCollation(EntityTypeBuilder entityTypeBuilder, string collation);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLPropertyExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<MySQLValueGenerationStrategy> GetValueGenerationStrategy(IProperty property);
    public static bool IsCompatibleIdentityColumn(IProperty property);
    public static bool IsCompatibleComputedColumn(IProperty property);
    private static bool HasConverter(IProperty property);
    private static bool HasExternalConverter(IProperty property);
    private static ValueConverter GetConverter(IProperty property);
}
[ExtensionAttribute]
public static class MySql.Data.EntityFrameworkCore.Extensions.MySQLServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddEntityFrameworkMySQL(IServiceCollection services);
}
internal interface MySql.Data.EntityFrameworkCore.Infrastructure.Internal.IMySQLOptions {
    public CharacterSet CharSet { get; }
    public MySqlConnectionStringBuilder ConnectionSettings { get; }
    public abstract virtual CharacterSet get_CharSet();
    public abstract virtual MySqlConnectionStringBuilder get_ConnectionSettings();
}
public class MySql.Data.EntityFrameworkCore.Infrastructure.Internal.MySQLOptionsExtension : RelationalOptionsExtension {
    private DbContextOptionsExtensionInfo _info;
    [NullableAttribute("2")]
private CharacterSet _charset;
    public DbContextOptionsExtensionInfo Info { get; }
    [NullableAttribute("2")]
public CharacterSet CharSet { get; }
    public MySQLOptionsExtension(MySQLOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual RelationalOptionsExtension Clone();
    [NullableContextAttribute("2")]
public virtual CharacterSet get_CharSet();
    public MySQLOptionsExtension WithCharSet(CharacterSet charSet);
    public virtual void ApplyServices(IServiceCollection services);
}
public class MySql.Data.EntityFrameworkCore.Infrastructure.MySQLDbContextOptionsBuilder : RelationalDbContextOptionsBuilder`2<MySQLDbContextOptionsBuilder, MySQLOptionsExtension> {
    public MySQLDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    internal virtual MySQLDbContextOptionsBuilder CharSet(CharacterSet charSet);
}
internal class MySql.Data.EntityFrameworkCore.Internal.MySQLModelValidator : RelationalModelValidator {
    public MySQLModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies);
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
}
internal class MySql.Data.EntityFrameworkCore.Internal.MySQLOptions : object {
    [CompilerGeneratedAttribute]
private CharacterSet <CharSet>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlConnectionStringBuilder <ConnectionSettings>k__BackingField;
    public CharacterSet CharSet { get; private set; }
    public MySqlConnectionStringBuilder ConnectionSettings { get; private set; }
    [CompilerGeneratedAttribute]
public virtual CharacterSet get_CharSet();
    [CompilerGeneratedAttribute]
private void set_CharSet(CharacterSet value);
    [CompilerGeneratedAttribute]
public virtual MySqlConnectionStringBuilder get_ConnectionSettings();
    [CompilerGeneratedAttribute]
private void set_ConnectionSettings(MySqlConnectionStringBuilder value);
    public sealed virtual void Initialize(IDbContextOptions options);
    public sealed virtual void Validate(IDbContextOptions options);
    private static MySqlConnectionStringBuilder GetConnectionSettings(MySQLOptionsExtension relationalOptions);
}
internal static class MySql.Data.EntityFrameworkCore.Internal.MySQLValueGenerationStrategyCompatibility : object {
    internal static Nullable`1<MySQLValueGenerationStrategy> GetValueGenerationStrategy(IAnnotation[] annotations);
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySqlCharsetAttributeConvention : PropertyAttributeConventionBase`1<MySqlCharsetAttribute> {
    public MySqlCharsetAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, MySqlCharsetAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySqlCollationAttributeConvention : PropertyAttributeConventionBase`1<MySqlCollationAttribute> {
    internal MySqlCollationAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, MySqlCollationAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySQLConventionSetBuilder : RelationalConventionSetBuilder {
    public MySQLConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual ConventionSet CreateConventionSet();
    public static ConventionSet Build();
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySqlEntityCharsetAttributeConvention : EntityTypeAttributeConventionBase`1<MySqlCharsetAttribute> {
    public MySqlEntityCharsetAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MySqlCharsetAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySqlEntityCollationAttributeConvention : EntityTypeAttributeConventionBase`1<MySqlCollationAttribute> {
    internal MySqlEntityCollationAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MySqlCollationAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySQLValueGenerationConvention : RelationalValueGenerationConvention {
    public MySQLValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IProperty property);
}
internal class MySql.Data.EntityFrameworkCore.Metadata.Conventions.MySQLValueGenerationStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public MySQLValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public sealed virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public sealed virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
internal static class MySql.Data.EntityFrameworkCore.Metadata.Internal.MySQLAnnotationNames : object {
    public static string Prefix;
    public static string ValueGenerationStrategy;
    public static string LegacyValueGeneratedOnAddOrUpdate;
    public static string LegacyValueGeneratedOnAdd;
    public static string FullTextIndex;
    public static string SpatialIndex;
    public static string DefaultValueSql;
    public static string Charset;
    public static string Collation;
}
public enum MySql.Data.EntityFrameworkCore.Metadata.MySQLValueGenerationStrategy : Enum {
    public int value__;
    public static MySQLValueGenerationStrategy None;
    public static MySQLValueGenerationStrategy IdentityColumn;
    public static MySQLValueGenerationStrategy ComputedColumn;
}
internal class MySql.Data.EntityFrameworkCore.Migrations.Internal.MySQLHistoryRepository : HistoryRepository {
    protected string ExistsSql { get; }
    public MySQLHistoryRepository(HistoryRepositoryDependencies dependencies);
    protected virtual string get_ExistsSql();
    protected virtual bool InterpretExistsResult(object value);
    public virtual string GetBeginIfExistsScript(string migrationId);
    public virtual string GetBeginIfNotExistsScript(string migrationId);
    public virtual string GetCreateIfNotExistsScript();
    public virtual string GetEndIfScript();
}
internal class MySql.Data.EntityFrameworkCore.Migrations.Internal.MySQLMigrationsAnnotationProvider : MigrationsAnnotationProvider {
    public MySQLMigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies);
    public virtual IEnumerable`1<IAnnotation> For(IModel model);
    public virtual IEnumerable`1<IAnnotation> For(IEntityType entityType);
    [IteratorStateMachineAttribute("MySql.Data.EntityFrameworkCore.Migrations.Internal.MySQLMigrationsAnnotationProvider/<For>d__3")]
public virtual IEnumerable`1<IAnnotation> For(IIndex index);
    [IteratorStateMachineAttribute("MySql.Data.EntityFrameworkCore.Migrations.Internal.MySQLMigrationsAnnotationProvider/<For>d__4")]
public virtual IEnumerable`1<IAnnotation> For(IProperty property);
}
internal class MySql.Data.EntityFrameworkCore.Migrations.Internal.MySQLMigrationsModelDiffer : MigrationsModelDiffer {
    public MySQLMigrationsModelDiffer(IRelationalTypeMappingSource typeMappingSource, IMigrationsAnnotationProvider migrationsAnnotations, IChangeDetector changeDetector, IUpdateAdapterFactory updateAdapterFactory, CommandBatchPreparerDependencies commandBatchPreparerDependencies);
    protected virtual IEnumerable`1<MigrationOperation> Add(IProperty target, DiffContext diffContext, bool inline);
}
internal class MySql.Data.EntityFrameworkCore.Migrations.MySQLMigrationsSqlGenerator : MigrationsSqlGenerator {
    private static Regex _typeRegex;
    private RelationalTypeMapping _typeMapper;
    public MySQLMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies);
    private static MySQLMigrationsSqlGenerator();
    protected virtual void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(MySQLCreateDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(MySQLDropDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    private void ColumnDefinitionWithCharSet(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    private string GetColumnTypeWithCharSetAndCollation(ColumnOperation operation, string columnType, IProperty property);
    protected virtual string GetColumnType(string schema, string table, string name, ColumnOperation operation, IModel model);
    protected virtual void DefaultValue(object defaultValue, string defaultValueSql, string columnType, MigrationCommandListBuilder builder);
    protected virtual void PrimaryKeyConstraint(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder);
    protected virtual void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(DropPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
    protected virtual void Generate(AddPrimaryKeyOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate);
}
internal class MySql.Data.EntityFrameworkCore.Migrations.Operations.MySQLCreateDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class MySql.Data.EntityFrameworkCore.Migrations.Operations.MySQLDropDatabaseOperation : MigrationOperation {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
}
internal class MySql.Data.EntityFrameworkCore.MySQLDatabaseCreator : RelationalDatabaseCreator {
    private MySQLServerConnection _connection;
    private IMigrationsSqlGenerator _sqlGenerator;
    private IRawSqlCommandBuilder _rawSqlCommandBuilder;
    private IMigrationCommandExecutor _migrationCommandExecutor;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    public TimeSpan RetryDelay { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public MySQLDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, IRawSqlCommandBuilder rawSqlCommandBuilder);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryDelay();
    [CompilerGeneratedAttribute]
public virtual void set_RetryDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_RetryTimeout(TimeSpan value);
    public virtual void Create();
    [AsyncStateMachineAttribute("MySql.Data.EntityFrameworkCore.MySQLDatabaseCreator/<CreateAsync>d__14")]
public virtual Task CreateAsync(CancellationToken cancellationToken);
    public virtual void Delete();
    [AsyncStateMachineAttribute("MySql.Data.EntityFrameworkCore.MySQLDatabaseCreator/<DeleteAsync>d__16")]
public virtual Task DeleteAsync(CancellationToken cancellationToken);
    public virtual bool Exists();
    private bool Exists(bool retryOnNotExists);
    public virtual Task`1<bool> ExistsAsync(CancellationToken cancellationToken);
    private Task`1<bool> ExistsAsync(bool retryOnNotExists, CancellationToken cancellationToken);
    private static bool IsDoesNotExist(MySqlException exception);
    private bool RetryOnExistsFailure(MySqlException e);
    public virtual bool HasTables();
    public virtual Task`1<bool> HasTablesAsync(CancellationToken cancellationToken);
    private IRelationalCommand CreateHasTablesCommand();
    private IReadOnlyList`1<MigrationCommand> CreateCreateOperations();
    private IReadOnlyList`1<MigrationCommand> CreateDropCommands();
    private static void ClearAllPools();
    private void ClearPool();
    [CompilerGeneratedAttribute]
private bool <HasTables>b__23_0(MySQLServerConnection connection);
    [AsyncStateMachineAttribute("MySql.Data.EntityFrameworkCore.MySQLDatabaseCreator/<<HasTablesAsync>b__24_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <HasTablesAsync>b__24_0(MySQLServerConnection connection, CancellationToken ct);
}
internal class MySql.Data.EntityFrameworkCore.MySQLServerConnection : RelationalConnection {
    private string _cnnStr { get; }
    public MySQLServerConnection(RelationalConnectionDependencies dependencies);
    private MySQLServerConnection CreateConnection(IDbContextOptions options);
    private string get__cnnStr();
    protected virtual DbConnection CreateDbConnection();
    public virtual IMySQLServerConnection CreateMasterConnection();
}
internal class MySql.Data.EntityFrameworkCore.MySQLSqlGenerationHelper : RelationalSqlGenerationHelper {
    public MySQLSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies);
    public virtual string EscapeIdentifier(string identifier);
    public virtual void EscapeIdentifier(StringBuilder builder, string identifier);
    public virtual void DelimitIdentifier(StringBuilder builder, string identifier);
    public virtual string DelimitIdentifier(string identifier);
}
internal class MySql.Data.EntityFrameworkCore.MySQLUpdateSqlGenerator : UpdateSqlGenerator {
    public MySQLUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies);
    public sealed virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, int commandPosition);
    private ResultSetMapping AppendBulkInsertWithoutServerValues(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, List`1<ColumnModification> writeOperations);
    protected virtual void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification);
    protected virtual void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected);
    protected virtual ResultSetMapping AppendSelectAffectedCountCommand(StringBuilder commandStringBuilder, string name, string schemaName, int commandPosition);
}
[AttributeUsageAttribute("32767")]
internal class MySql.Data.EntityFrameworkCore.NotNullAttribute : Attribute {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MySql.Data.EntityFrameworkCore.Properties.MySQLStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ExpressionTypeMismatch { get; }
    internal static string InvalidTableToIncludeInScaffolding { get; }
    internal static string NoInitialCatalog { get; }
    internal static string TransientExceptionDetected { get; }
    internal static string UnqualifiedDataType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ExpressionTypeMismatch();
    internal static string get_InvalidTableToIncludeInScaffolding();
    internal static string get_NoInitialCatalog();
    internal static string get_TransientExceptionDetected();
    internal static string get_UnqualifiedDataType();
}
internal class MySql.Data.EntityFrameworkCore.Query.Expressions.Internal.MySQLBinaryExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private MySQLBinaryExpressionOperatorType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public MySQLBinaryExpressionOperatorType OperatorType { get; }
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public MySQLBinaryExpression(MySQLBinaryExpressionOperatorType operatorType, SqlExpression left, SqlExpression right, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual MySQLBinaryExpressionOperatorType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MySQLBinaryExpression Update(SqlExpression left, SqlExpression right);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    private bool RequiresBrackets(SqlExpression expression);
    public virtual bool Equals(object obj);
    private bool Equals(MySQLBinaryExpression sqlBinaryExpression);
    public virtual int GetHashCode();
}
internal enum MySql.Data.EntityFrameworkCore.Query.Expressions.Internal.MySQLBinaryExpressionOperatorType : Enum {
    public int value__;
    public static MySQLBinaryExpressionOperatorType IntegerDivision;
}
internal class MySql.Data.EntityFrameworkCore.Query.Expressions.Internal.MySQLCollateExpression : SqlExpression {
    private SqlExpression _valueExpression;
    private string _charset;
    private string _collation;
    public SqlExpression ValueExpression { get; }
    public string Charset { get; }
    public string Collation { get; }
    public MySQLCollateExpression(SqlExpression valueExpression, string charset, string collation, RelationalTypeMapping typeMapping);
    public virtual SqlExpression get_ValueExpression();
    public virtual string get_Charset();
    public virtual string get_Collation();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual bool Equals(object obj);
    private bool Equals(MySQLCollateExpression other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
internal class MySql.Data.EntityFrameworkCore.Query.Expressions.Internal.MySQLComplexFunctionArgumentExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <ArgumentParts>k__BackingField;
    public IReadOnlyList`1<SqlExpression> ArgumentParts { get; }
    public MySQLComplexFunctionArgumentExpression(IEnumerable`1<SqlExpression> argumentParts, Type type, RelationalTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_ArgumentParts();
    protected virtual Expression Accept(ExpressionVisitor visitor);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(MySQLComplexFunctionArgumentExpression other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class MySql.Data.EntityFrameworkCore.Query.Expressions.Internal.MySQLStringComparisonMethodTranslator : object {
    private static MethodInfo _equalsMethodInfo;
    private static MethodInfo _staticEqualsMethodInfo;
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _indexOfMethodInfo;
    private SqlExpression _caseSensitiveComparisons;
    private MySQLSqlExpressionFactory _sqlExpressionFactory;
    public MySQLStringComparisonMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLStringComparisonMethodTranslator();
    public sealed virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    public SqlExpression MakeStringEqualsExpression(SqlExpression leftValue, SqlExpression rightValue, SqlExpression stringComparison);
    public SqlExpression MakeStartsWithExpression(SqlExpression target, SqlExpression prefix, SqlExpression stringComparison);
    private SqlBinaryExpression MakeStartsWithExpressionImpl(SqlExpression target, SqlExpression prefix, SqlExpression originalPrefix);
    public SqlExpression MakeEndsWithExpression(SqlExpression target, SqlExpression suffix, SqlExpression stringComparison);
    private SqlExpression MakeEndsWithExpressionImpl(SqlExpression target, SqlExpression suffix, SqlExpression originalSuffix);
    public SqlExpression MakeContainsExpression(SqlExpression target, SqlExpression search, SqlExpression stringComparison);
    private SqlExpression MakeContainsExpressionImpl(SqlExpression target, SqlExpression search, SqlExpression originalSearch);
    public SqlExpression MakeIndexOfExpression(SqlExpression target, SqlExpression search, SqlExpression stringComparison);
    private SqlExpression MakeIndexOfExpressionImpl(SqlExpression target, SqlExpression search);
    private static bool TryGetExpressionValue(SqlExpression expression, T& value);
    private static SqlExpression CreateExpressionForCaseSensitivity(StringComparison cmp, Func`1<SqlExpression> ifCaseSensitive, Func`1<SqlExpression> ifCaseInsensitive);
    private SqlExpression LCase(SqlExpression value);
    private SqlExpression Utf8Bin(SqlExpression value);
    private SqlExpression CharLength(SqlExpression value);
}
internal class MySql.Data.EntityFrameworkCore.Query.ExpressionTranslators.Internal.MySQLDbFunctionsExtensionsMethodTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private static Type[] _supportedTypes;
    private static MethodInfo[] _methodInfos;
    public MySQLDbFunctionsExtensionsMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLDbFunctionsExtensionsMethodTranslator();
    public sealed virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression InferStringTypeMappingOrApplyDefault(SqlExpression expression, RelationalTypeMapping inferenceSourceTypeMapping);
}
internal class MySql.Data.EntityFrameworkCore.Query.ExpressionTranslators.Internal.MySQLStringLengthTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLStringLengthTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLCompatibilityExpressionVisitor : ExpressionVisitor {
    private IMySQLOptions _options;
    public MySQLCompatibilityExpressionVisitor(IMySQLOptions options);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitExcept(ExceptExpression exceptExpression);
    protected virtual Expression VisitIntercept(IntersectExpression intersectExpression);
    protected virtual Expression CheckSupport(Expression expression, bool isSupported);
    protected virtual Expression CheckTranslated(Expression translated, Expression original);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator {
    public MySQLCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies);
    public virtual object GenerateCacheKey(Expression query, bool async);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLConvertTranslator : object {
    private static MethodInfo[] _supportedMethods;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLConvertTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLConvertTranslator();
    public sealed virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLDateDiffFunctionsTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDateDiffMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLDateDiffFunctionsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLDateTimeMemberTranslator : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, ValueTuple`2<string, int>> _datePartMapping;
    private MySQLSqlExpressionFactory _sqlExpressionFactory;
    public MySQLDateTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLDateTimeMemberTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLDateTimeMethodTranslator : object {
    private Dictionary`2<MethodInfo, string> _methodInfoDatePartMapping;
    private MySQLSqlExpressionFactory _sqlExpressionFactory;
    public MySQLDateTimeMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLMathMethodTranslator : object {
    private static Dictionary`2<MethodInfo, string> _supportedMethodTranslations;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLMathMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLMathMethodTranslator();
    public sealed virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLMemberTranslatorProvider : RelationalMemberTranslatorProvider {
    public MySQLMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider {
    public MySQLMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLNewGuidTranslator : object {
    private static MethodInfo _methodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLNewGuidTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLObjectToStringTranslator : object {
    private static int DefaultLength;
    private static Dictionary`2<Type, string> _typeMapping;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLObjectToStringTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLObjectToStringTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLQueryTranslationPostprocessor : RelationalQueryTranslationPostprocessor {
    private IMySQLOptions _options;
    public MySQLQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, QueryCompilationContext queryCompilationContext, IMySQLOptions options);
    public virtual Expression Process(Expression query);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLQueryTranslationPostprocessorFactory : object {
    private QueryTranslationPostprocessorDependencies _dependencies;
    private RelationalQueryTranslationPostprocessorDependencies _relationalDependencies;
    private IMySQLOptions _options;
    public MySQLQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, RelationalQueryTranslationPostprocessorDependencies relationalDependencies, IMySQLOptions options);
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLSqlExpressionFactory : SqlExpressionFactory {
    private IRelationalTypeMappingSource _typeMappingSource;
    private RelationalTypeMapping _boolTypeMapping;
    public MySQLSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies);
    public MySQLComplexFunctionArgumentExpression ComplexFunctionArgument(IEnumerable`1<SqlExpression> argumentParts, Type argumentType, RelationalTypeMapping typeMapping);
    public MySQLCollateExpression Collate(SqlExpression valueExpression, string charset, string collation);
    public virtual MySQLBinaryExpression MySqlIntegerDivide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual MySQLBinaryExpression MakeBinary(MySQLBinaryExpressionOperatorType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping);
    public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping);
    private MySQLComplexFunctionArgumentExpression ApplyTypeMappingOnComplexFunctionArgument(MySQLComplexFunctionArgumentExpression complexFunctionArgumentExpression);
    private MySQLCollateExpression ApplyTypeMappingOnCollate(MySQLCollateExpression collateExpression);
    private SqlExpression ApplyTypeMappingOnMySqlBinary(MySQLBinaryExpression sqlBinaryExpression, RelationalTypeMapping typeMapping);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    private static bool IsDateTimeBasedOperation(SqlBinaryExpression binaryExpression);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLSqlTranslatingExpressionVisitorFactory : object {
    private RelationalSqlTranslatingExpressionVisitorDependencies _dependencies;
    public MySQLSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies);
    public virtual RelationalSqlTranslatingExpressionVisitor Create(IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLStringMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public MySQLStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType);
}
internal class MySql.Data.EntityFrameworkCore.Query.Internal.MySQLStringMethodTranslator : object {
    private static MethodInfo _indexOfMethodInfo;
    private static MethodInfo _replaceMethodInfo;
    private static MethodInfo _toLowerMethodInfo;
    private static MethodInfo _toUpperMethodInfo;
    private static MethodInfo _substringMethodInfo;
    private static MethodInfo _isNullOrWhiteSpaceMethodInfo;
    private static MethodInfo _trimStartMethodInfoWithoutArgs;
    private static MethodInfo _trimStartMethodInfoWithCharArg;
    private static MethodInfo _trimEndMethodInfoWithoutArgs;
    private static MethodInfo _trimEndMethodInfoWithCharArg;
    private static MethodInfo _trimMethodInfoWithoutArgs;
    private static MethodInfo _trimMethodInfoWithCharArg;
    private static MethodInfo _trimStartMethodInfoWithCharArrayArg;
    private static MethodInfo _trimEndMethodInfoWithCharArrayArg;
    private static MethodInfo _trimMethodInfoWithCharArrayArg;
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _containsMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private static MethodInfo _padLeftWithOneArg;
    private static MethodInfo _padRightWithOneArg;
    private static MethodInfo _padLeftWithTwoArgs;
    private static MethodInfo _padRightWithTwoArgs;
    private MySQLSqlExpressionFactory _sqlExpressionFactory;
    public MySQLStringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static MySQLStringMethodTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments);
    private SqlExpression TranslatePadLeftRight(bool leftPad, SqlExpression instance, SqlExpression length, SqlExpression padString, Type returnType);
    private SqlExpression ProcessTrimMethod(SqlExpression instance, SqlExpression trimChar, string locationSpecifier);
}
internal class MySql.Data.EntityFrameworkCore.Query.MySQLQueryGeneratorFactory : object {
    private QuerySqlGeneratorDependencies _dependencies;
    public MySQLQueryGeneratorFactory(QuerySqlGeneratorDependencies dependencies);
    public sealed virtual QuerySqlGenerator Create();
}
internal class MySql.Data.EntityFrameworkCore.Query.MySQLQuerySqlGenerator : QuerySqlGenerator {
    private static ulong LimitUpperBound;
    public MySQLQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies);
    protected virtual void GenerateLimitOffset(SelectExpression selectExpression);
    public Expression VisitMySQLComplexFunctionArgumentExpression(MySQLComplexFunctionArgumentExpression mySqlComplexFunctionArgumentExpression);
    public Expression VisitMySQLBinaryExpression(MySQLBinaryExpression mySqlBinaryExpression);
    public Expression VisitMySQLCollateExpression(MySQLCollateExpression mySqlCollateExpression);
}
internal class MySql.Data.EntityFrameworkCore.Scaffolding.Internal.MySQLCodeGenerator : ProviderCodeGenerator {
    public MySQLCodeGenerator(ProviderCodeGeneratorDependencies dependencies);
    public virtual MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions);
}
internal class MySql.Data.EntityFrameworkCore.Scaffolding.Internal.MySQLDatabaseModelFactory : DatabaseModelFactory {
    private IDiagnosticsLogger`1<Scaffolding> _logger;
    private IMySQLOptions _options;
    private static string NamePartRegex;
    private static Regex _partExtractor;
    private static string GetTablesQuery;
    private static string GetPrimaryQuery;
    private static string GetColumnsQuery;
    private static string GetIndexesQuery;
    private static string GetConstraintsQuery;
    public MySQLDatabaseModelFactory(IDiagnosticsLogger`1<Scaffolding> logger, IMySQLOptions options);
    private static MySQLDatabaseModelFactory();
    public virtual DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options);
    public virtual DatabaseModel Create(DbConnection connection, DatabaseModelFactoryOptions options);
    private void SetupMySQLOptions(DbConnection connection);
    private string GetDefaultSchema(DbConnection connection);
    private static ValueTuple`2<string, string> Parse(string table);
    private static Func`2<string, string> GenerateSchemaFilter(IReadOnlyList`1<string> schemas, string defaultSchema);
    private static Func`3<string, string, string> GenerateTableFilter(IReadOnlyList`1<ValueTuple`2<string, string>> tables, Func`2<string, string> schemaFilter);
    private static Nullable`1<ReferentialAction> ConvertToReferentialAction(string deleteAction);
    private IEnumerable`1<DatabaseTable> GetTables(DbConnection connection, Func`3<string, string, string> tableFilter);
    private void GetColumns(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private void GetPrimaryKeys(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private void GetIndexes(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private void GetConstraints(DbConnection connection, IReadOnlyList`1<DatabaseTable> tables, string tableFilter);
    private static string FilterClrDefaults(string dataTypeName, bool nullable, string defaultValue);
    private string CreateDefaultValueString(string defaultValue, string dataType);
    private static string EscapeLiteral(string s);
}
[ExtensionAttribute]
internal static class MySql.Data.EntityFrameworkCore.Scaffolding.Internal.MySQLDataReaderExtension : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataReader reader, string name);
    [ExtensionAttribute]
public static T GetValueOrDefault(DbDataRecord record, string name);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.ByteArrayComparer : ValueComparer`1<Byte[]> {
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.BytesToDateTimeConverter : ValueConverter`2<Byte[], DateTime> {
    private static NumberToBytesConverter`1<long> _longToBytes;
    private static BytesToDateTimeConverter();
}
internal interface MySql.Data.EntityFrameworkCore.Storage.Internal.IMySQLServerConnection {
    public abstract virtual IMySQLServerConnection CreateMasterConnection();
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLBinaryTypeMapping : MySQLTypeMapping {
    public MySQLBinaryTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size, bool fixedLength);
    protected MySQLBinaryTypeMapping(RelationalTypeMappingParameters parameters);
    public virtual CoreTypeMapping Clone(ValueConverter converter);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLBoolTypeMapping : BoolTypeMapping {
    public MySQLBoolTypeMapping(string storeType, Nullable`1<DbType> dbType, Nullable`1<int> size);
    protected MySQLBoolTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string GenerateNonNullSqlLiteral(object value);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLByteArrayTypeMapping : ByteArrayTypeMapping {
    private static int MaxSize;
    private int _maxSpecificSize;
    private static Char[] _lookup;
    public MySQLByteArrayTypeMapping(string storeType, Nullable`1<int> size, bool fixedLength);
    protected MySQLByteArrayTypeMapping(DbType type, string storeType, Nullable`1<int> size, bool fixedLength);
    protected MySQLByteArrayTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySQLByteArrayTypeMapping();
    private static string GetBaseType(Nullable`1<int> size, bool isFixedLength);
    private static StoreTypePostfix GetStoreTypePostfix(Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    private static int CalculateSize(Nullable`1<int> size);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private string ToHex(Byte[] b);
}
[DefaultMemberAttribute("Item")]
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLDataReader : DbDataReader {
    private MySqlDataReader _reader;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int Depth { get; }
    public int VisibleFieldCount { get; }
    public MySQLDataReader(MySqlDataReader reader);
    public virtual T GetFieldValue(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_RecordsAffected();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_Depth();
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual int get_VisibleFieldCount();
    private MySqlDataReader GetReader();
    public virtual bool NextResult();
    public virtual bool Read();
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLDateTimeTypeMapping : MySQLTypeMapping {
    private static string _dateTimeFormatConst;
    protected string SqlLiteralFormatString { get; }
    public MySQLDateTimeTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType);
    protected MySQLDateTimeTypeMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
    protected virtual void ConfigureParameter(DbParameter parameter);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public MySQLExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    [AsyncStateMachineAttribute("MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLExecutionStrategy/<ExecuteAsync>d__7`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLExecutionStrategyFactory : RelationalExecutionStrategyFactory {
    public MySQLExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLGeometryTypeMapping : MySQLTypeMapping {
    protected MySQLGeometryTypeMapping(RelationalTypeMappingParameters parameters);
    public MySQLGeometryTypeMapping(string storeType, Nullable`1<DbType> dbType);
    public virtual CoreTypeMapping Clone(ValueConverter converter);
    protected virtual void ConfigureParameter(DbParameter parameter);
    public virtual MethodInfo GetDataReaderMethod();
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLNumberTypeMapping : MySQLTypeMapping {
    public MySQLNumberTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType);
    protected MySQLNumberTypeMapping(RelationalTypeMappingParameters parameters);
    public virtual CoreTypeMapping Clone(ValueConverter converter);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLStringTypeMapping : StringTypeMapping {
    private static int UnicodeMax;
    private static int AnsiMax;
    private int _maxSpecificSize;
    private static Char[] LineBreakChars;
    public MySQLStringTypeMapping(string storeType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool fixedLength);
    protected MySQLStringTypeMapping(RelationalTypeMappingParameters parameters);
    private static MySQLStringTypeMapping();
    private static int CalculateSize(bool unicode, Nullable`1<int> size);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual void ConfigureParameter(DbParameter parameter);
    protected virtual string GenerateNonNullSqlLiteral(object value);
    private string EscapeLineBreaks(string value);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLTimeSpanMapping : TimeSpanTypeMapping {
    protected string SqlLiteralFormatString { get; }
    public MySQLTimeSpanMapping(string storeType, Nullable`1<int> precision);
    protected MySQLTimeSpanMapping(RelationalTypeMappingParameters parameters);
    protected virtual RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters);
    protected virtual string get_SqlLiteralFormatString();
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLTransientExceptionDetector : object {
    public static bool ShouldRetryOn(Exception ex);
}
internal class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLTypeMapper : RelationalTypeMappingSource {
    private static int CHAR_MAX_LENGTH;
    private static int VARCHAR_MAX_LENGTH;
    private static int _keyMaxLength;
    private MySQLNumberTypeMapping _int;
    private MySQLNumberTypeMapping _uint;
    private MySQLNumberTypeMapping _bigint;
    private MySQLNumberTypeMapping _ubigint;
    private MySQLNumberTypeMapping _bit;
    private MySQLNumberTypeMapping _smallint;
    private MySQLNumberTypeMapping _usmallint;
    private MySQLNumberTypeMapping _tinyint;
    private MySQLNumberTypeMapping _utinyint;
    private MySQLStringTypeMapping _charUnicode;
    private MySQLStringTypeMapping _varcharUnicode;
    private MySQLStringTypeMapping _varcharmaxUnicode;
    private MySQLDateTimeTypeMapping _datetime;
    private MySQLDateTimeTypeMapping _datetimeoffset;
    private MySQLDateTimeTypeMapping _date;
    private MySQLTimeSpanMapping _time;
    private MySQLNumberTypeMapping _float;
    private MySQLNumberTypeMapping _double;
    private MySQLNumberTypeMapping _real;
    private MySQLNumberTypeMapping _decimal;
    private RelationalTypeMapping _binary;
    private RelationalTypeMapping _varbinary;
    private MySQLBinaryTypeMapping _tinyblob;
    private MySQLBinaryTypeMapping _mediumblob;
    private MySQLBinaryTypeMapping _blob;
    private MySQLBinaryTypeMapping _longblob;
    private MySQLStringTypeMapping _enum;
    private MySQLGeometryTypeMapping _geometry;
    private MySQLBoolTypeMapping _bitBool;
    private MySQLBoolTypeMapping _tinyintBool;
    private Dictionary`2<string, RelationalTypeMapping> _storeTypeMappings;
    private Dictionary`2<Type, RelationalTypeMapping> _clrTypeMappings;
    private HashSet`1<string> _disallowedMappings;
    private IMySQLOptions _options;
    private bool _initialized;
    public MySQLTypeMapper(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, IMySQLOptions options);
    private static MySQLTypeMapper();
    protected void Initialize();
    protected virtual void ValidateMapping(CoreTypeMapping mapping, IProperty property);
    protected virtual RelationalTypeMapping FindMapping(RelationalTypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private RelationalTypeMapping FindRawMapping(RelationalTypeMappingInfo mappingInfo);
    protected virtual string ParseStoreTypeName(string storeTypeName, Nullable`1& unicode, Nullable`1& size, Nullable`1& precision, Nullable`1& scale);
}
internal abstract class MySql.Data.EntityFrameworkCore.Storage.Internal.MySQLTypeMapping : RelationalTypeMapping {
    public MySQLTypeMapping(string storeType, Type clrType, Nullable`1<DbType> dbType, bool unicode, Nullable`1<int> size, bool hasNonDefaultUnicode);
    protected MySQLTypeMapping(RelationalTypeMappingParameters parameters);
}
internal abstract class MySql.Data.EntityFrameworkCore.Storage.Internal.TypeMapperWrapper : RelationalTypeMappingSource {
    public TypeMapperWrapper(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies);
}
internal interface MySql.Data.EntityFrameworkCore.Update.IMySQLUpdateSqlGenerator {
    public abstract virtual ResultSetMapping AppendBulkInsertOperation(StringBuilder commandStringBuilder, IReadOnlyList`1<ModificationCommand> modificationCommands, int commandPosition);
}
internal class MySql.Data.EntityFrameworkCore.Update.MySQLModificationCommandBatch : AffectedCountModificationCommandBatch {
    private static int DefaultNetworkPacketSizeBytes;
    private static int MaxScriptLength;
    private static int MaxParameterCount;
    private static int MaxRowCount;
    private int _parameterCount;
    private int _maxBatchSize;
    private List`1<ModificationCommand> _bulkInsertCommands;
    private int _commandsLeftToLengthCheck;
    protected IMySQLUpdateSqlGenerator UpdateSqlGenerator { get; }
    public MySQLModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, Nullable`1<int> maxBatchSize);
    protected virtual IMySQLUpdateSqlGenerator get_UpdateSqlGenerator();
    protected virtual bool CanAddCommand(ModificationCommand modificationCommand);
    private static int CountParameters(ModificationCommand modificationCommand);
    protected virtual bool IsCommandTextValid();
    protected virtual int GetParameterCount();
    protected virtual void ResetCommandText();
    protected virtual string GetCommandText();
    private string GetBulkInsertCommandText(int lastIndex);
    protected virtual void UpdateCachedCommandText(int commandPosition);
    private static bool CanBeInsertedInSameStatement(ModificationCommand firstCommand, ModificationCommand secondCommand);
}
internal class MySql.Data.EntityFrameworkCore.Update.MySQLModificationCommandBatchFactory : object {
    private ModificationCommandBatchFactoryDependencies _dependencies;
    private IDbContextOptions _options;
    public MySQLModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options);
    public virtual ModificationCommandBatch Create();
}
[DebuggerStepThroughAttribute]
internal static class MySql.Data.EntityFrameworkCore.Utils.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName, string propertyName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static T IsDefined(T value, string parameterName);
    public static Type ValidEntityType(Type value, string parameterName);
}
internal class MySql.Data.EntityFrameworkCore.Utils.CodeAnnotations : object {
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class MySql.Data.EntityFrameworkCore.Utils.SharedTypeExtensions : object {
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool CanBeAutoIncrement(Type type);
}
internal class MySql.Data.EntityFrameworkCore.ValueGeneration.Internal.MySQLValueGeneratorSelector : RelationalValueGeneratorSelector {
    public MySQLValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies);
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
