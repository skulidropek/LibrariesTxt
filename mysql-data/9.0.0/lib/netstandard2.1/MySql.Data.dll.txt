[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class MySql.Data.Authentication.FIDO.FidoAssertion : object {
    private fido_assert_t* _assert;
    unknown ReadOnlySpan`1<byte> ClientDataHash {public set; }
    unknown string Rp {public set; }
    private static FidoAssertion();
    protected virtual override void Finalize();
    public void set_ClientDataHash(ReadOnlySpan`1<byte> value);
    public void set_Rp(string value);
    public void AllowCredential(ReadOnlySpan`1<byte> credentialId);
    public static fido_assert_t* op_Explicit(FidoAssertion assert);
    public FidoAssertionStatement GetFidoAssertionStatement(int idx);
    public int GetAssertCount();
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class MySql.Data.Authentication.FIDO.FidoAssertionStatement : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<byte> <AuthData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AuthDataLen>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<byte> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<byte> <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SignatureLen>k__BackingField;
    public ReadOnlySpan`1<byte> AuthData { get; }
    public int AuthDataLen { get; }
    public ReadOnlySpan`1<byte> Id { get; }
    public ReadOnlySpan`1<byte> Signature { get; }
    public int SignatureLen { get; }
    internal FidoAssertionStatement(fido_assert_t* native, int idx);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ReadOnlySpan`1<byte> get_AuthData();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_AuthDataLen();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ReadOnlySpan`1<byte> get_Id();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ReadOnlySpan`1<byte> get_Signature();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_SignatureLen();
}
internal class MySql.Data.Authentication.FIDO.FidoDevice : object {
    private fido_dev_t* _device;
    public bool SupportsCredman { get; }
    private static FidoDevice();
    protected virtual override void Finalize();
    public void Open(string path);
    public void Close();
    public bool get_SupportsCredman();
    public void GetAssert(FidoAssertion assert);
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
}
internal class MySql.Data.Authentication.FIDO.FidoDeviceInfo : object {
    private fido_dev_info_t* _devInfo;
    private fido_dev_info_t* _current;
    private int _size;
    public string Manufacturer { get; }
    public string Path { get; }
    public short Product { get; }
    public string ProductString { get; }
    public short Vendor { get; }
    private static FidoDeviceInfo();
    public string get_Manufacturer();
    public string get_Path();
    public short get_Product();
    public string get_ProductString();
    public short get_Vendor();
    protected virtual override void Finalize();
    private void ReleaseUnmanagedResources();
    public sealed virtual void Dispose();
}
internal class MySql.Data.Authentication.FIDO.Native.fido_assert_t : ValueType {
}
internal class MySql.Data.Authentication.FIDO.Native.fido_dev_info_t : ValueType {
}
internal class MySql.Data.Authentication.FIDO.Native.fido_dev_t : ValueType {
}
internal static class MySql.Data.Authentication.FIDO.Native.NativeMethods : object {
    private static string DllName;
    internal static void fido_init(int flags);
    internal static fido_dev_t* fido_dev_new();
    internal static void fido_dev_free(fido_dev_t** dev_p);
    internal static int fido_dev_close(fido_dev_t* dev);
    internal static int fido_dev_open(fido_dev_t* dev, string path);
    internal static int fido_dev_get_assert(fido_dev_t* dev, fido_assert_t* assert, string pin);
    internal static bool fido_dev_supports_credman(fido_dev_t* dev);
    public static fido_dev_info_t* fido_dev_info_new(IntPtr n);
    internal static string fido_dev_info_path(fido_dev_info_t* di);
    internal static fido_dev_info_t* fido_dev_info_ptr(fido_dev_info_t* di, IntPtr idx);
    public static int fido_dev_info_manifest(fido_dev_info_t* devlist, IntPtr ilen, IntPtr* olen);
    public static void fido_dev_info_free(fido_dev_info_t** devlist_p, IntPtr n);
    public static short fido_dev_info_vendor(fido_dev_info_t* di);
    public static short fido_dev_info_product(fido_dev_info_t* di);
    public static string fido_dev_info_product_string(fido_dev_info_t* di);
    public static string fido_dev_info_manufacturer_string(fido_dev_info_t* di);
    internal static fido_assert_t* fido_assert_new();
    internal static void fido_assert_free(fido_assert_t** assert_p);
    internal static int fido_assert_allow_cred(fido_assert_t* assert, Byte* ptr, IntPtr len);
    internal static int fido_assert_set_clientdata_hash(fido_assert_t* assert, Byte* ptr, IntPtr len);
    internal static int fido_assert_set_rp(fido_assert_t* assert, string id);
    public static int fido_assert_authdata_len(fido_assert_t* assert, IntPtr idx);
    public static Byte* fido_assert_authdata_ptr(fido_assert_t* assert, IntPtr idx);
    public static int fido_assert_sig_len(fido_assert_t* assert, IntPtr idx);
    public static Byte* fido_assert_sig_ptr(fido_assert_t* assert, IntPtr idx);
    public static int fido_assert_id_len(fido_assert_t* assert, IntPtr idx);
    public static Byte* fido_assert_id_ptr(fido_assert_t* assert, IntPtr idx);
    public static int fido_assert_clientdata_hash_len(fido_assert_t* assert);
    public static Byte* fido_assert_clientdata_hash_ptr(fido_assert_t* assert);
    public static int fido_assert_count(fido_assert_t* assert);
}
internal class MySql.Data.Authentication.FIDO.Utility.ConstStringMarshaler : object {
    private static ConstStringMarshaler Instance;
    private static ConstStringMarshaler();
    public static ICustomMarshaler GetInstance(string cookie);
    public sealed virtual void CleanUpManagedData(object ManagedObj);
    public sealed virtual void CleanUpNativeData(IntPtr pNativeData);
    public sealed virtual int GetNativeDataSize();
    public sealed virtual IntPtr MarshalManagedToNative(object ManagedObj);
    public sealed virtual object MarshalNativeToManaged(IntPtr pNativeData);
}
internal class MySql.Data.Authentication.FIDO.Utility.CtapException : Exception {
    [CompilerGeneratedAttribute]
private CtapStatus <Code>k__BackingField;
    internal CtapStatus Code { get; }
    internal CtapException(CtapStatus err);
    [CompilerGeneratedAttribute]
internal CtapStatus get_Code();
}
internal enum MySql.Data.Authentication.FIDO.Utility.CtapStatus : Enum {
    public int value__;
    public static CtapStatus Ok;
    public static CtapStatus InvalidCommand;
    public static CtapStatus InvalidParameter;
    public static CtapStatus InvalidLength;
    public static CtapStatus InvalidSeq;
    public static CtapStatus Timeout;
    public static CtapStatus ChannelBusy;
    public static CtapStatus LockRequired;
    public static CtapStatus InvalidChannel;
    public static CtapStatus CborUnexpectedType;
    public static CtapStatus InvalidCbor;
    public static CtapStatus MissingParameter;
    public static CtapStatus LimitExceeded;
    public static CtapStatus UnsupportedExtension;
    public static CtapStatus CredentialExcluded;
    public static CtapStatus Processing;
    public static CtapStatus InvalidCredential;
    public static CtapStatus UserActionPending;
    public static CtapStatus OperationPending;
    public static CtapStatus NoOperations;
    public static CtapStatus UnsupportedAlgorithm;
    public static CtapStatus OperationDenied;
    public static CtapStatus KeyStoreFull;
    public static CtapStatus NoOperationPending;
    public static CtapStatus UnsupportedOption;
    public static CtapStatus InvalidOption;
    public static CtapStatus KeepAliveCancel;
    public static CtapStatus NoCredentials;
    public static CtapStatus UserActionTimeout;
    public static CtapStatus NotAllowed;
    public static CtapStatus PinInvalid;
    public static CtapStatus PinBlocked;
    public static CtapStatus PinAuthInvalid;
    public static CtapStatus PinAuthBlocked;
    public static CtapStatus PinNotSet;
    public static CtapStatus PinRequired;
    public static CtapStatus PolicyViolation;
    public static CtapStatus PinTokenExpired;
    public static CtapStatus RequestTooLarge;
    public static CtapStatus ActionTimeout;
    public static CtapStatus UpRequired;
    public static CtapStatus Other;
    public static CtapStatus SpecLast;
    public static CtapStatus ExtensionFirst;
    public static CtapStatus ExtensionLast;
    public static CtapStatus VendorFirst;
    public static CtapStatus VendorLast;
}
[ExtensionAttribute]
internal static class MySql.Data.Authentication.FIDO.Utility.Extensions : object {
    [ExtensionAttribute]
public static void Check(int err);
}
internal class MySql.Data.Authentication.FIDO.Utility.FidoException : Exception {
    [CompilerGeneratedAttribute]
private FidoStatus <Code>k__BackingField;
    internal FidoStatus Code { get; internal set; }
    internal FidoException(FidoStatus code);
    [CompilerGeneratedAttribute]
internal FidoStatus get_Code();
    [CompilerGeneratedAttribute]
internal void set_Code(FidoStatus value);
}
internal enum MySql.Data.Authentication.FIDO.Utility.FidoStatus : Enum {
    public int value__;
    public static FidoStatus Ok;
    public static FidoStatus TxErr;
    public static FidoStatus RxErr;
    public static FidoStatus RxNotCbor;
    public static FidoStatus RxInvalidCbor;
    public static FidoStatus InvalidParam;
    public static FidoStatus InvalidSignature;
    public static FidoStatus InvalidArgument;
    public static FidoStatus UserPresenceRequired;
    public static FidoStatus InternalError;
}
internal class MySql.Data.Authentication.FIDO.Utility.Init : object {
    private static bool _called;
    internal static void Call();
}
internal static class MySql.Data.Authentication.GSSAPI.Const : object {
    internal static UInt32 GSS_S_COMPLETE;
    internal static UInt32 GSS_S_CONTINUE_NEEDED;
    internal static UInt32 GSS_C_INDEFINITE;
    internal static IntPtr GSS_C_NO_BUFFER;
    internal static IntPtr GSS_C_NO_CREDENTIAL;
    internal static IntPtr GSS_C_NO_NAME;
    internal static GssOidDescStruct GSS_C_NO_OID;
    internal static GssOidSetStruct GSS_C_NO_OID_SET;
    internal static UInt32 GSS_C_QOP_DEFAULT;
    private static Byte[] GssNtHostBasedServiceOid;
    internal static GssOidDescStruct GssNtHostBasedService;
    private static Byte[] GssNtPrincipalNameOid;
    internal static GssOidDescStruct GssNtPrincipalName;
    private static Byte[] GssNtUserNameOid;
    internal static GssOidDescStruct GssNtUserName;
    private static Byte[] GssKrb5MechOid;
    internal static GssOidDescStruct GssKrb5MechOidDesc;
    internal static GssOidSetStruct GssKrb5MechOidSet;
    private static Const();
}
internal enum MySql.Data.Authentication.GSSAPI.CredentialUsage : Enum {
    public int value__;
    public static CredentialUsage Both;
    public static CredentialUsage Initiate;
    public static CredentialUsage Accept;
}
internal class MySql.Data.Authentication.GSSAPI.GssapiMechanism : object {
    private bool finalHandshake;
    private GssCredentials gssCredentials;
    internal GssContext gssContext;
    internal string MechanismName { get; }
    public GssapiMechanism(string username, string password, string krbServicePrincipal);
    internal string get_MechanismName();
    internal Byte[] Challenge(Byte[] data);
    internal Byte[] DoFinalHandshake(Byte[] data);
}
internal class MySql.Data.Authentication.GSSAPI.GssContext : object {
    private bool disposed;
    internal bool IsEstablished;
    private GssCredentials Credentials;
    private GssContextFlags Flags;
    private IntPtr _context;
    private IntPtr _gssTargetName;
    internal GssContext(string spn, GssCredentials credentials, GssContextFlags flags);
    internal Byte[] InitSecContext(Byte[] token);
    internal Byte[] Unwrap(Byte[] message);
    internal Byte[] Wrap(Byte[] message);
    private static Byte[] MarshalOutputToken(GssBufferDescStruct gssToken);
    public void Cleanup();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
[FlagsAttribute]
internal enum MySql.Data.Authentication.GSSAPI.GssContextFlags : Enum {
    public int value__;
    public static GssContextFlags None;
    public static GssContextFlags Deleg;
    public static GssContextFlags Mutual;
    public static GssContextFlags Replay;
    public static GssContextFlags Sequence;
    public static GssContextFlags Conf;
    public static GssContextFlags Integ;
    public static GssContextFlags Anon;
    public static GssContextFlags ProtReady;
    public static GssContextFlags Trans;
    public static GssContextFlags DelegPolicy;
}
internal class MySql.Data.Authentication.GSSAPI.GssCredentials : object {
    internal IntPtr _credentials;
    private IntPtr _gssUsername;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    internal string UserName { get; internal set; }
    internal GssCredentials(string username, string password, CredentialUsage usage);
    internal GssCredentials(string username, CredentialUsage usage);
    internal GssCredentials(CredentialUsage usage);
    [CompilerGeneratedAttribute]
internal string get_UserName();
    [CompilerGeneratedAttribute]
internal void set_UserName(string value);
    private static string TranslateDisplayName(IntPtr name);
    public sealed virtual void Dispose();
}
internal class MySql.Data.Authentication.GSSAPI.Native.GssBufferDescStruct : ValueType {
    public UInt32 length;
    public IntPtr value;
}
internal class MySql.Data.Authentication.GSSAPI.Native.GssOidDescStruct : ValueType {
    public UInt32 length;
    public IntPtr elements;
}
internal class MySql.Data.Authentication.GSSAPI.Native.GssOidSetStruct : ValueType {
    public UInt32 count;
    public IntPtr elements;
}
internal static class MySql.Data.Authentication.GSSAPI.Native.NativeMethods : object {
    private static Nullable`1<bool> _isWin;
    private static bool IsWin { get; }
    private static bool get_IsWin();
    internal static UInt32 gss_import_name(UInt32& minorStatus, GssBufferDescStruct& inputNameBuffer, GssOidDescStruct& inputNameType, IntPtr& outputName);
    internal static UInt32 gss_acquire_cred(UInt32& minorStatus, IntPtr desiredName, UInt32 timeRequired, GssOidSetStruct& desiredMechanisms, int credentialUsage, IntPtr& credentialHandle, IntPtr actualMech, UInt32& expiryTime);
    internal static UInt32 gss_acquire_cred_with_password(UInt32& minorStatus, IntPtr desiredName, GssBufferDescStruct& password, UInt32 timeRequired, GssOidSetStruct& desiredMechanisms, int credentialUsage, IntPtr& credentialHandle, IntPtr actualMechs, UInt32& expiryTime);
    internal static UInt32 gss_inquire_cred(UInt32& minorStatus, IntPtr credentialHandle, IntPtr& name, UInt32& lifetime, Int32& credentialUsage, IntPtr& mechs);
    internal static UInt32 gss_init_sec_context(UInt32& minorStatus, IntPtr claimantCredHandle, IntPtr& contextHandle, IntPtr targetName, GssOidDescStruct& mechType, UInt32 reqFlags, UInt32 timeReq, IntPtr inputChanBindings, GssBufferDescStruct& inputToken, IntPtr actualMechType, GssBufferDescStruct& outputToken, IntPtr retFlags, IntPtr timeRec);
    internal static UInt32 gss_display_status(UInt32& minorStatus, UInt32 status, int statusType, GssOidDescStruct& mechType, IntPtr& messageContext, GssBufferDescStruct& statusString);
    internal static UInt32 gss_display_name(UInt32& minorStatus, IntPtr inputName, GssBufferDescStruct& nameBuffer, GssOidDescStruct& nameType);
    internal static UInt32 gss_release_buffer(UInt32& minorStatus, GssBufferDescStruct& buffer);
    internal static UInt32 gss_delete_sec_context(UInt32& minorStatus, IntPtr& contextHandle);
    internal static UInt32 gss_release_name(UInt32& minorStatus, IntPtr& inputName);
    internal static UInt32 gss_release_cred(UInt32& minorStatus, IntPtr& credentialHandle);
    internal static UInt32 gss_unwrap(UInt32& minorStatus, IntPtr contextHandle, GssBufferDescStruct& inputMessage, GssBufferDescStruct& outputMessage, Int32& confState, UInt32& qopState);
    internal static UInt32 gss_wrap(UInt32& minorStatus, IntPtr contextHandle, GssBufferDescStruct& inputMessage, GssBufferDescStruct& outputMessage);
}
internal static class MySql.Data.Authentication.GSSAPI.Native.NativeMethodsLinux : object {
    private static string GSS_MODULE_NAME;
    internal static UInt32 gss_import_name(UInt32& minorStatus, GssBufferDescStruct& inputNameBuffer, GssOidDescStruct& inputNameType, IntPtr& outputName);
    internal static UInt32 gss_acquire_cred(UInt32& minorStatus, IntPtr desiredName, UInt32 timeRequired, GssOidSetStruct& desiredMechanisms, int credentialUsage, IntPtr& credentialHandle, IntPtr actualMech, UInt32& expiryTime);
    internal static UInt32 gss_acquire_cred_with_password(UInt32& minorStatus, IntPtr desiredName, GssBufferDescStruct& password, UInt32 timeRequired, GssOidSetStruct& desiredMechanisms, int credentialUsage, IntPtr& credentialHandle, IntPtr actualMechs, UInt32& expiryTime);
    internal static UInt32 gss_init_sec_context(UInt32& minorStatus, IntPtr claimantCredHandle, IntPtr& contextHandle, IntPtr targetName, GssOidDescStruct& mechType, UInt32 reqFlags, UInt32 timeReq, IntPtr inputChanBindings, GssBufferDescStruct& inputToken, IntPtr actualMechType, GssBufferDescStruct& outputToken, IntPtr retFlags, IntPtr timeRec);
    internal static UInt32 gss_display_status(UInt32& minorStatus, UInt32 status, int statusType, GssOidDescStruct& mechType, IntPtr& messageContext, GssBufferDescStruct& statusString);
    internal static UInt32 gss_release_buffer(UInt32& minorStatus, GssBufferDescStruct& buffer);
    internal static UInt32 gss_release_cred(UInt32& minorStatus, IntPtr& credentialHandle);
    internal static UInt32 gss_release_name(UInt32& minorStatus, IntPtr& inputName);
    internal static UInt32 gss_delete_sec_context(UInt32& minorStatus, IntPtr& contextHandle, IntPtr outputToken);
    internal static UInt32 gss_unwrap(UInt32& minorStatus, IntPtr contextHandle, GssBufferDescStruct& inputMessage, GssBufferDescStruct& outputMessage, Int32& confState, UInt32& qopState);
    internal static UInt32 gss_wrap(UInt32& minorStatus, IntPtr contextHandle, int confReqFlag, UInt32 qopReq, GssBufferDescStruct& inputMessage, int confState, GssBufferDescStruct& outputMessage);
    internal static UInt32 gss_inquire_cred(UInt32& minorStatus, IntPtr credentialHandle, IntPtr& name, UInt32& lifetime, Int32& credentialUsage, IntPtr& mechs);
    internal static UInt32 gss_display_name(UInt32& minorStatus, IntPtr inputName, GssBufferDescStruct& NameBuffer, GssOidDescStruct& nameType);
}
internal static class MySql.Data.Authentication.GSSAPI.Native.NativeMethodsWin64 : object {
    private static string GSS_MODULE_NAME;
    internal static UInt32 gss_import_name(UInt32& minorStatus, GssBufferDescStruct& inputNameBuffer, GssOidDescStruct& inputNameType, IntPtr& outputName);
    internal static UInt32 gss_acquire_cred(UInt32& minorStatus, IntPtr desiredName, UInt32 timeRequired, GssOidSetStruct& desiredMechanisms, int credentialUsage, IntPtr& credentialHandle, IntPtr actualMech, UInt32& expiryTime);
    internal static UInt32 gss_acquire_cred_with_password(UInt32& minorStatus, IntPtr desiredName, GssBufferDescStruct& password, UInt32 timeRequired, GssOidSetStruct& desiredMechanisms, int credentialUsage, IntPtr& credentialHandle, IntPtr actualMechs, UInt32& expiryTime);
    internal static UInt32 gss_init_sec_context(UInt32& minorStatus, IntPtr claimantCredHandle, IntPtr& contextHandle, IntPtr targetName, GssOidDescStruct& mechType, UInt32 reqFlags, UInt32 timeReq, IntPtr inputChanBindings, GssBufferDescStruct& inputToken, IntPtr actualMechType, GssBufferDescStruct& outputToken, IntPtr retFlags, IntPtr timeRec);
    internal static UInt32 gss_display_status(UInt32& minorStatus, UInt32 status, int statusType, GssOidDescStruct& mechType, IntPtr& messageContext, GssBufferDescStruct& statusString);
    internal static UInt32 gss_release_buffer(UInt32& minorStatus, GssBufferDescStruct& buffer);
    internal static UInt32 gss_release_cred(UInt32& minorStatus, IntPtr& credentialHandle);
    internal static UInt32 gss_release_name(UInt32& minorStatus, IntPtr& inputName);
    internal static UInt32 gss_delete_sec_context(UInt32& minorStatus, IntPtr& contextHandle, IntPtr outputToken);
    internal static UInt32 gss_unwrap(UInt32& minorStatus, IntPtr contextHandle, GssBufferDescStruct& inputMessage, GssBufferDescStruct& outputMessage, Int32& confState, UInt32& qopState);
    internal static UInt32 gss_wrap(UInt32& minorStatus, IntPtr contextHandle, int confReqFlag, UInt32 qopReq, GssBufferDescStruct& inputMessage, int confState, GssBufferDescStruct& outputMessage);
    internal static UInt32 gss_inquire_cred(UInt32& minorStatus, IntPtr credentialHandle, IntPtr& name, UInt32& lifetime, Int32& credentialUsage, IntPtr& mechs);
    internal static UInt32 gss_display_name(UInt32& minorStatus, IntPtr inputName, GssBufferDescStruct& NameBuffer, GssOidDescStruct& nameType);
}
internal static class MySql.Data.Authentication.GSSAPI.Utility.Disposable : object {
    public static Disposable`1<T> From(T value);
    public static Disposable`1<T> From(T value, Action disposeAction);
    public static Disposable`1<T> From(D disposable, Func`2<D, T> loader);
    public static Disposable`1<T> From(D disposable, Func`2<D, T> loader, Action`1<T> disposer);
    public static Disposable`1<T> From(T value, IDisposable[] disposables);
    public static Disposable`1<T> From(T value, IDisposable[] disposables, Action disposeAction);
}
internal class MySql.Data.Authentication.GSSAPI.Utility.Disposable`1 : object {
    public T Value;
    private IDisposable[] _disposables;
    private Action _disposeAction;
    private bool _disposed;
    public Disposable`1(T value, IDisposable[] disposables, Action disposeAction);
    public static T op_Implicit(Disposable`1<T> p);
    public sealed virtual void Dispose();
}
internal static class MySql.Data.Authentication.GSSAPI.Utility.ExceptionMessages : object {
    private static int GssCGssCode;
    private static int GssCMechCode;
    internal static string FormatGssMessage(string message, UInt32 majorStatus, UInt32 minorStatus, GssOidDescStruct oid);
    private static string TranslateMajorStatusCode(UInt32 status);
    private static string TranslateMinorStatusCode(UInt32 status, GssOidDescStruct oid);
}
internal static class MySql.Data.Authentication.GSSAPI.Utility.GssType : object {
    private static Encoding Iso;
    private static GssType();
    internal static Disposable`1<GssBufferDescStruct> GetBufferFromString(string buffer);
    public static Disposable`1<GssBufferDescStruct> GetBufferFromBytes(Byte[] buffer);
}
internal class MySql.Data.Authentication.GSSAPI.Utility.KerberosConfig : object {
    private static string KRBCONFIG_LINUX;
    private static char COMMENT_HASH;
    private static char COMMENT_SEMI;
    private static char SECTION_OPEN;
    private static char SECTION_CLOSE;
    private static char GROUP_OPEN;
    private static char GROUP_CLOSE;
    private static Char[] Equal;
    private static List`1<KeyValuePair`2<string, string>> LibDefaults;
    private static List`1<KeyValuePair`2<string, string>> Realms;
    private static List`1<KeyValuePair`2<string, string>> AppDefaults;
    private static string SERVICE_NAME;
    private static string Domain;
    private static KerberosConfig();
    private static void ReadConfig();
    internal static string GetServicePrincipalName(string username);
    private static string SplitUserNameDomain(string original);
    private static bool TryReadLine(StringReader reader, String& currentLine);
    private static bool IsComment(char ch);
    private static bool CanSkip(string trimmed);
    private static bool IsSectionLine(string currentLine);
    private static string ReadSection(string currentLine, StringReader reader);
    private static void ReadValue(string currentLine, StringReader reader, List`1<KeyValuePair`2<string, string>> section);
    private static void ReadValues(string currentLine, StringReader reader, List`1<KeyValuePair`2<string, string>> section);
}
internal static class MySql.Data.Authentication.GSSAPI.Utility.Pinned : object {
    internal static Pinned`1<T> From(T value);
}
internal class MySql.Data.Authentication.GSSAPI.Utility.Pinned`1 : object {
    internal T Value;
    [CompilerGeneratedAttribute]
private IntPtr <Address>k__BackingField;
    private GCHandle _handle;
    internal IntPtr Address { get; }
    internal Pinned`1(T value);
    [CompilerGeneratedAttribute]
internal IntPtr get_Address();
    public static IntPtr op_Implicit(Pinned`1<T> p);
    public static T op_Implicit(Pinned`1<T> p);
    public sealed virtual void Dispose();
}
internal static class MySql.Data.Authentication.SSPI.Const : object {
    internal static int SECPKG_CRED_BOTH;
    internal static int SECURITY_NETWORK_DREP;
    internal static int SECURITY_NATIVE_DREP;
    internal static int SECPKG_CRED_INBOUND;
    internal static int MAX_TOKEN_SIZE;
    internal static int SECPKG_ATTR_SIZES;
    internal static int STANDARD_CONTEXT_ATTRIBUTES;
    internal static UInt32 SEC_WINNT_AUTH_IDENTITY_UNICODE;
}
internal enum MySql.Data.Authentication.SSPI.ContextStatus : Enum {
    public int value__;
    public static ContextStatus RequiresContinuation;
    public static ContextStatus Accepted;
    public static ContextStatus Error;
}
internal static class MySql.Data.Authentication.SSPI.NativeMethods : object {
    private static string SECUR32;
    internal static SecStatus AcquireCredentialsHandle(string pszPrincipal, string pszPackage, int fCredentialUse, IntPtr PAuthenticationID, IntPtr pAuthData, int pGetKeyFn, IntPtr pvGetKeyArgument, SECURITY_HANDLE& phCredential, IntPtr ptsExpiry);
    internal static SecStatus AcquireCredentialsHandle(string pszPrincipal, string pszPackage, int fCredentialUse, IntPtr PAuthenticationID, SEC_WINNT_AUTH_IDENTITY pAuthData, int pGetKeyFn, IntPtr pvGetKeyArgument, SECURITY_HANDLE& phCredential, IntPtr ptsExpiry);
    internal static SecStatus InitializeSecurityContext_0(SECURITY_HANDLE& phCredential, IntPtr phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, IntPtr pInput, int Reserved2, SECURITY_HANDLE& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SECURITY_INTEGER& ptsExpiry);
    internal static SecStatus InitializeSecurityContext_1(SECURITY_HANDLE& phCredential, SECURITY_HANDLE& phContext, string pszTargetName, int fContextReq, int Reserved1, int TargetDataRep, SecBufferDesc& SecBufferDesc, int Reserved2, SECURITY_HANDLE& phNewContext, SecBufferDesc& pOutput, UInt32& pfContextAttr, SECURITY_INTEGER& ptsExpiry);
    internal static int CompleteAuthToken(SECURITY_HANDLE& phContext, SecBufferDesc& pToken);
    internal static int QueryContextAttributes_String(SECURITY_HANDLE& phContext, UInt32 ulAttribute, SecPkgContext_SecString& pBuffer);
    internal static int FreeCredentialsHandle(SECURITY_HANDLE& pCred);
    internal static int DeleteSecurityContext(SECURITY_HANDLE& pContext);
}
internal class MySql.Data.Authentication.SSPI.SEC_WINNT_AUTH_IDENTITY : ValueType {
    public string User;
    public int UserLength;
    public string Domain;
    public int DomainLength;
    public string Password;
    public int PasswordLength;
    public UInt32 Flags;
}
internal class MySql.Data.Authentication.SSPI.SecBuffer : ValueType {
    internal int cbBuffer;
    internal int BufferType;
    internal IntPtr pvBuffer;
    internal SecBuffer(int bufferSize);
    internal SecBuffer(Byte[] secBufferBytes);
    internal SecBuffer(Byte[] secBufferBytes, SecBufferType bufferType);
    public sealed virtual void Dispose();
}
internal class MySql.Data.Authentication.SSPI.SecBufferDesc : ValueType {
    private int _ulVersion;
    private int _cBuffers;
    private IntPtr _pBuffers;
    internal SecBufferDesc(int bufferSize);
    internal SecBufferDesc(Byte[] secBufferBytes);
    public sealed virtual void Dispose();
    internal Byte[] GetSecBufferByteArray();
}
internal enum MySql.Data.Authentication.SSPI.SecBufferType : Enum {
    public int value__;
    public static SecBufferType SECBUFFER_VERSION;
    public static SecBufferType SECBUFFER_EMPTY;
    public static SecBufferType SECBUFFER_DATA;
    public static SecBufferType SECBUFFER_TOKEN;
}
internal class MySql.Data.Authentication.SSPI.SecHandle : ValueType {
    private IntPtr dwLower;
    private IntPtr dwUpper;
}
internal class MySql.Data.Authentication.SSPI.SecPkgContext_SecString : ValueType {
    public IntPtr sValue;
}
internal class MySql.Data.Authentication.SSPI.SecPkgContext_Sizes : ValueType {
    private UInt32 cbMaxToken;
    private UInt32 cbMaxSignature;
    private UInt32 cbBlockSize;
    private UInt32 cbSecurityTrailer;
}
internal enum MySql.Data.Authentication.SSPI.SecStatus : Enum {
    public UInt32 value__;
    public static SecStatus SEC_E_OK;
    public static SecStatus SEC_I_CONTINUE_NEEDED;
    public static SecStatus SEC_I_COMPLETE_NEEDED;
    public static SecStatus SEC_I_COMPLETE_AND_CONTINUE;
}
internal class MySql.Data.Authentication.SSPI.SECURITY_HANDLE : ValueType {
    private ulong LowPart;
    private ulong HighPart;
    private bool IsSet { get; }
    internal SECURITY_HANDLE(int dummy);
    private bool get_IsSet();
}
internal class MySql.Data.Authentication.SSPI.SECURITY_INTEGER : ValueType {
    private UInt32 LowPart;
    private int HighPart;
    internal SECURITY_INTEGER(int dummy);
}
internal class MySql.Data.Authentication.SSPI.SspiCredentials : object {
    internal SECURITY_HANDLE credentialsHandle;
    internal SspiCredentials(string package);
    internal SspiCredentials(string principal, string username, string password, string domain, string package);
}
internal class MySql.Data.Authentication.SSPI.SspiSecurityContext : object {
    private SECURITY_HANDLE securityContext;
    private SspiCredentials credentials;
    internal SspiSecurityContext(SspiCredentials credentials);
    internal ContextStatus InitializeSecurityContext(Byte[]& clientBlob, Byte[] serverBlob, string targetName);
    public sealed virtual void Dispose();
}
[DefaultMemberAttribute("Item")]
internal class MySql.Data.Common.Cache`2 : object {
    private int _capacity;
    private Queue`1<TKeyType> _keyQ;
    private Dictionary`2<TKeyType, TValueType> _contents;
    public TValueType Item { get; public set; }
    public Cache`2(int initialCapacity, int capacity);
    public TValueType get_Item(TKeyType key);
    public void set_Item(TKeyType key, TValueType value);
    public void Add(TKeyType key, TValueType value);
    private void InternalAdd(TKeyType key, TValueType value);
}
internal class MySql.Data.Common.ContextString : object {
    private bool _escapeBackslash;
    [CompilerGeneratedAttribute]
private string <ContextMarkers>k__BackingField;
    public string ContextMarkers { get; public set; }
    public ContextString(string contextMarkers, bool escapeBackslash);
    [CompilerGeneratedAttribute]
public string get_ContextMarkers();
    [CompilerGeneratedAttribute]
public void set_ContextMarkers(string value);
    public int IndexOf(string src, string target);
    public int IndexOf(string src, string target, int startIndex);
    private bool IndexInQuotes(string src, int index, int startIndex);
    public int IndexOf(string src, char target);
    public String[] Split(string src, string delimiters);
}
internal class MySql.Data.Common.DBVersion : ValueType {
    private string _srcString;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Build>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnterprise>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    public int Build { get; }
    public bool IsEnterprise { get; private set; }
    public DBVersion(string s, int major, int minor, int build);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Major();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Minor();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Build();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsEnterprise();
    [CompilerGeneratedAttribute]
private void set_IsEnterprise(bool value);
    public static DBVersion Parse(string versionString);
    public bool isAtLeast(int majorNum, int minorNum, int buildNum);
    public virtual string ToString();
}
internal class MySql.Data.Common.DnsClient.AdditionalResourceRecord : DnsResourceRecord {
    internal AdditionalResourceRecord(DnsRecordReader recordReader);
}
internal class MySql.Data.Common.DnsClient.AnswerResourceRecord : DnsResourceRecord {
    internal AnswerResourceRecord(DnsRecordReader recordReader);
}
internal class MySql.Data.Common.DnsClient.AuthorityResourceRecord : DnsResourceRecord {
    internal AuthorityResourceRecord(DnsRecordReader recordReader);
}
internal class MySql.Data.Common.DnsClient.DnsQuestion : object {
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryType <QuestionType>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryClass <QuestionClass>k__BackingField;
    internal string DomainName { get; }
    internal QueryType QuestionType { get; }
    internal QueryClass QuestionClass { get; }
    internal DnsQuestion(string domainName, QueryType questionType, QueryClass questionClass);
    internal DnsQuestion(DnsRecordReader reader);
    [CompilerGeneratedAttribute]
internal string get_DomainName();
    [CompilerGeneratedAttribute]
internal QueryType get_QuestionType();
    [CompilerGeneratedAttribute]
internal QueryClass get_QuestionClass();
    internal Byte[] GetData();
    private static Byte[] WriteName(string src);
    private static Byte[] WriteShort(ushort sValue);
}
internal abstract class MySql.Data.Common.DnsClient.DnsRecord : object {
    internal DnsResourceRecord ResourceRecord;
}
internal class MySql.Data.Common.DnsClient.DnsRecordHeader : object {
    private ushort _flags;
    [CompilerGeneratedAttribute]
private ushort <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <QuestionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AnswerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <NameserverCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <AdditionalRecordsCount>k__BackingField;
    internal ushort Id { get; internal set; }
    internal ushort QuestionCount { get; internal set; }
    internal ushort AnswerCount { get; internal set; }
    internal ushort NameserverCount { get; internal set; }
    internal ushort AdditionalRecordsCount { get; internal set; }
    internal OPCode OperationCode { get; internal set; }
    internal bool RecursionDesired { get; internal set; }
    internal DnsRecordHeader(DnsRecordReader recordReader);
    [CompilerGeneratedAttribute]
internal ushort get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(ushort value);
    [CompilerGeneratedAttribute]
internal ushort get_QuestionCount();
    [CompilerGeneratedAttribute]
internal void set_QuestionCount(ushort value);
    [CompilerGeneratedAttribute]
internal ushort get_AnswerCount();
    [CompilerGeneratedAttribute]
internal void set_AnswerCount(ushort value);
    [CompilerGeneratedAttribute]
internal ushort get_NameserverCount();
    [CompilerGeneratedAttribute]
internal void set_NameserverCount(ushort value);
    [CompilerGeneratedAttribute]
internal ushort get_AdditionalRecordsCount();
    [CompilerGeneratedAttribute]
internal void set_AdditionalRecordsCount(ushort value);
    internal OPCode get_OperationCode();
    internal void set_OperationCode(OPCode value);
    internal bool get_RecursionDesired();
    internal void set_RecursionDesired(bool value);
    private static ushort GetBits(ushort oldValue, int position, int length);
    private static ushort SetBits(ushort oldValue, int position, int length, bool blnValue);
    private static ushort SetBits(ushort oldValue, int position, int length, ushort newValue);
    internal Byte[] GetData();
    private static Byte[] WriteShort(ushort sValue);
}
internal class MySql.Data.Common.DnsClient.DnsRecordReader : object {
    private Byte[] _data;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    internal DnsRecordReader(Byte[] data, int position);
    internal DnsRecordReader(Byte[] data);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    internal byte ReadByte();
    internal char ReadChar();
    internal ushort ReadUInt16();
    internal ushort ReadUInt16(int offset);
    internal UInt32 ReadUInt32();
    internal string ReadDomainName();
    internal string ReadString();
    internal Byte[] ReadBytes(int length);
    internal DnsRecord ReadRecord(RecordType type);
}
internal class MySql.Data.Common.DnsClient.DnsRecordUnknown : DnsRecord {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    internal Byte[] Data { get; internal set; }
    internal DnsRecordUnknown(DnsRecordReader recordReader);
    [CompilerGeneratedAttribute]
internal Byte[] get_Data();
    [CompilerGeneratedAttribute]
internal void set_Data(Byte[] value);
}
internal class MySql.Data.Common.DnsClient.DnsRequest : object {
    [CompilerGeneratedAttribute]
private DnsRecordHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DnsQuestion> <Questions>k__BackingField;
    public DnsRecordHeader Header { get; }
    private List`1<DnsQuestion> Questions { get; }
    [CompilerGeneratedAttribute]
public DnsRecordHeader get_Header();
    [CompilerGeneratedAttribute]
private List`1<DnsQuestion> get_Questions();
    internal void AddQuestion(DnsQuestion question);
    internal Byte[] GetData();
}
internal class MySql.Data.Common.DnsClient.DnsResolver : object {
    private static int DefaultPort;
    private ushort _uniqueId;
    private List`1<IPEndPoint> _dnsServers;
    private void AddLocalServers();
    internal DnsResponse Query(string domainName);
    private DnsResponse GetResponse(DnsRequest request);
    private DnsResponse UdpRequest(DnsRequest request);
}
internal class MySql.Data.Common.DnsClient.DnsResourceRecord : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RecordType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryClass <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <RecordLength>k__BackingField;
    [CompilerGeneratedAttribute]
private DnsRecord <Record>k__BackingField;
    internal string Name { get; }
    internal RecordType Type { get; }
    internal QueryClass Class { get; }
    internal UInt32 TimeToLive { get; }
    internal ushort RecordLength { get; }
    internal DnsRecord Record { get; }
    internal DnsResourceRecord(DnsRecordReader recordReader);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal RecordType get_Type();
    [CompilerGeneratedAttribute]
internal QueryClass get_Class();
    [CompilerGeneratedAttribute]
internal UInt32 get_TimeToLive();
    [CompilerGeneratedAttribute]
internal ushort get_RecordLength();
    [CompilerGeneratedAttribute]
internal DnsRecord get_Record();
}
internal class MySql.Data.Common.DnsClient.DnsResponse : object {
    [CompilerGeneratedAttribute]
private List`1<DnsQuestion> <Questions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AnswerResourceRecord> <Answers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AuthorityResourceRecord> <Authorities>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AdditionalResourceRecord> <Additionals>k__BackingField;
    [CompilerGeneratedAttribute]
private DnsRecordHeader <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MessageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeStamp>k__BackingField;
    internal List`1<DnsQuestion> Questions { get; }
    internal List`1<AnswerResourceRecord> Answers { get; }
    internal List`1<AuthorityResourceRecord> Authorities { get; }
    internal List`1<AdditionalResourceRecord> Additionals { get; }
    internal DnsRecordHeader Header { get; }
    internal IPEndPoint Server { get; }
    internal int MessageSize { get; }
    internal string Error { get; internal set; }
    internal DateTime TimeStamp { get; }
    internal DnsSrvRecord[] RecordsSRV { get; }
    internal DnsResponse(IPEndPoint iPEndPoint, Byte[] data);
    [CompilerGeneratedAttribute]
internal List`1<DnsQuestion> get_Questions();
    [CompilerGeneratedAttribute]
internal List`1<AnswerResourceRecord> get_Answers();
    [CompilerGeneratedAttribute]
internal List`1<AuthorityResourceRecord> get_Authorities();
    [CompilerGeneratedAttribute]
internal List`1<AdditionalResourceRecord> get_Additionals();
    [CompilerGeneratedAttribute]
internal DnsRecordHeader get_Header();
    [CompilerGeneratedAttribute]
internal IPEndPoint get_Server();
    [CompilerGeneratedAttribute]
internal int get_MessageSize();
    [CompilerGeneratedAttribute]
internal string get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(string value);
    [CompilerGeneratedAttribute]
internal DateTime get_TimeStamp();
    internal DnsSrvRecord[] get_RecordsSRV();
}
internal class MySql.Data.Common.DnsClient.DnsSrvRecord : DnsRecord {
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    internal int Port { get; }
    internal int Priority { get; }
    internal string Target { get; }
    internal int Weight { get; }
    internal DnsSrvRecord(int port, int priority, string target, int weight);
    internal DnsSrvRecord(DnsRecordReader recordReader);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
internal int get_Priority();
    [CompilerGeneratedAttribute]
internal string get_Target();
    [CompilerGeneratedAttribute]
internal int get_Weight();
    public sealed virtual int Compare(DnsSrvRecord x, DnsSrvRecord y);
}
internal enum MySql.Data.Common.DnsClient.OPCode : Enum {
    public int value__;
    public static OPCode Query;
    public static OPCode IQUERY;
    public static OPCode Status;
    public static OPCode Notify;
    public static OPCode Update;
}
internal enum MySql.Data.Common.DnsClient.QueryClass : Enum {
    public int value__;
    public static QueryClass IN;
}
internal enum MySql.Data.Common.DnsClient.QueryType : Enum {
    public int value__;
    public static QueryType SRV;
}
internal enum MySql.Data.Common.DnsClient.RecordType : Enum {
    public int value__;
    public static RecordType SRV;
}
internal static class MySql.Data.Common.DnsSrv : object {
    private static DnsResolver _resolver;
    [CompilerGeneratedAttribute]
private static string <ServiceName>k__BackingField;
    internal static string ServiceName { get; private set; }
    [CompilerGeneratedAttribute]
internal static string get_ServiceName();
    [CompilerGeneratedAttribute]
private static void set_ServiceName(string value);
    internal static void CreateResolver(string serviceName);
    internal static List`1<DnsSrvRecord> GetDnsSrvRecords(string serviceName);
    internal static List`1<DnsSrvRecord> SortSrvRecords(List`1<DnsSrvRecord> srvRecords);
    private static void Reset();
}
internal class MySql.Data.Common.LowResolutionStopwatch : object {
    private long _startTime;
    public static long Frequency;
    public static bool IsHighResolution;
    [CompilerGeneratedAttribute]
private long <ElapsedMilliseconds>k__BackingField;
    public long ElapsedMilliseconds { get; private set; }
    public TimeSpan Elapsed { get; }
    private static LowResolutionStopwatch();
    [CompilerGeneratedAttribute]
public long get_ElapsedMilliseconds();
    [CompilerGeneratedAttribute]
private void set_ElapsedMilliseconds(long value);
    public void Start();
    public void Stop();
    public void Reset();
    public TimeSpan get_Elapsed();
    public static LowResolutionStopwatch StartNew();
    public static long GetTimestamp();
    private bool IsRunning();
}
internal class MySql.Data.Common.MyNetworkStream : NetworkStream {
    private static int MaxRetryCount;
    private Socket _socket;
    public Socket Socket { get; }
    public bool IsSocketClosed { get; }
    public MyNetworkStream(Socket socket, bool ownsSocket);
    public Socket get_Socket();
    public bool get_IsSocketClosed();
    private static bool IsTimeoutException(SocketException e);
    private static bool IsWouldBlockException(SocketException e);
    private void HandleOrRethrowException(Exception e);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.Common.MyNetworkStream/<ReadAsync>d__12")]
private Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, bool execAsync);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.Common.MyNetworkStream/<WriteAsync>d__16")]
public Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken, bool execAsync);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.Common.MyNetworkStream/<FlushAsync>d__19")]
private Task FlushAsync(CancellationToken cancellationToken, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Common.MyNetworkStream/<CreateStreamAsync>d__20")]
public static Task`1<MyNetworkStream> CreateStreamAsync(string server, UInt32 connectionTimeout, UInt32 keepAlive, UInt32 port, bool unix, bool execAsync);
    private static IPHostEntry ParseIPAddress(string hostname);
    private static IPHostEntry GetHostEntry(string hostname);
    private static MyNetworkStream CreateSocketStream(UInt32 port, UInt32 keepAlive, UInt32 connectionTimeout, IPAddress ip, bool unix);
    private static void SetKeepAlive(Socket s, UInt32 time);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(Byte[] buffer, int offset, int size, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private int <>n__1(Byte[] buffer, int offset, int size);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(Byte[] buffer, int offset, int size, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__3(Byte[] buffer, int offset, int size);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__5();
}
internal class MySql.Data.Common.MySqlConnectionStringOption : object {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCustomized>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Synonyms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Obsolete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private SetterDelegate <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
private GetterDelegate <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassicSetterDelegate <ClassicSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassicGetterDelegate <ClassicGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private XSetterDelegate <XSetter>k__BackingField;
    [CompilerGeneratedAttribute]
private XGetterDelegate <XGetter>k__BackingField;
    public Type BaseType { get; private set; }
    public bool IsCustomized { get; }
    public String[] Synonyms { get; private set; }
    public bool Obsolete { get; private set; }
    public string Keyword { get; private set; }
    public object DefaultValue { get; private set; }
    public SetterDelegate Setter { get; private set; }
    public GetterDelegate Getter { get; private set; }
    public ClassicSetterDelegate ClassicSetter { get; private set; }
    public ClassicGetterDelegate ClassicGetter { get; private set; }
    public XSetterDelegate XSetter { get; private set; }
    public XGetterDelegate XGetter { get; private set; }
    public MySqlConnectionStringOption(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete, SetterDelegate setter, GetterDelegate getter);
    public MySqlConnectionStringOption(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete, ClassicSetterDelegate setter, ClassicGetterDelegate getter);
    public MySqlConnectionStringOption(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete, XSetterDelegate setter, XGetterDelegate getter);
    public MySqlConnectionStringOption(string keyword, string synonyms, Type baseType, object defaultValue, bool obsolete);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsCustomized();
    [CompilerGeneratedAttribute]
public String[] get_Synonyms();
    [CompilerGeneratedAttribute]
private void set_Synonyms(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Obsolete();
    [CompilerGeneratedAttribute]
private void set_Obsolete(bool value);
    [CompilerGeneratedAttribute]
public string get_Keyword();
    [CompilerGeneratedAttribute]
private void set_Keyword(string value);
    [CompilerGeneratedAttribute]
public object get_DefaultValue();
    [CompilerGeneratedAttribute]
private void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public SetterDelegate get_Setter();
    [CompilerGeneratedAttribute]
private void set_Setter(SetterDelegate value);
    [CompilerGeneratedAttribute]
public GetterDelegate get_Getter();
    [CompilerGeneratedAttribute]
private void set_Getter(GetterDelegate value);
    [CompilerGeneratedAttribute]
public ClassicSetterDelegate get_ClassicSetter();
    [CompilerGeneratedAttribute]
private void set_ClassicSetter(ClassicSetterDelegate value);
    [CompilerGeneratedAttribute]
public ClassicGetterDelegate get_ClassicGetter();
    [CompilerGeneratedAttribute]
private void set_ClassicGetter(ClassicGetterDelegate value);
    [CompilerGeneratedAttribute]
public XSetterDelegate get_XSetter();
    [CompilerGeneratedAttribute]
private void set_XSetter(XSetterDelegate value);
    [CompilerGeneratedAttribute]
public XGetterDelegate get_XGetter();
    [CompilerGeneratedAttribute]
private void set_XGetter(XGetterDelegate value);
    public bool HasKeyword(string key);
    public void Clean(DbConnectionStringBuilder builder);
    public void ValidateValue(Object& value, string keyword, bool isXProtocol);
    public void ValidateValue(Object& value, string keyword);
    private bool ParseEnum(string requestedValue, Object& value);
}
internal class MySql.Data.Common.MySqlConnectionStringOptionCollection : Dictionary`2<string, MySqlConnectionStringOption> {
    [CompilerGeneratedAttribute]
private List`1<MySqlConnectionStringOption> <Options>k__BackingField;
    internal List`1<MySqlConnectionStringOption> Options { get; }
    [CompilerGeneratedAttribute]
internal List`1<MySqlConnectionStringOption> get_Options();
    internal void Add(MySqlConnectionStringOption option);
    internal MySqlConnectionStringOption Get(string keyword);
    internal MySqlConnectionStringOptionCollection Clone();
}
internal class MySql.Data.Common.MySqlTokenizer : object {
    private string _sql;
    [CompilerGeneratedAttribute]
private bool <AnsiQuotes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BackslashEscapes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiLine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SqlServerMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quoted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StopIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReturnComments>k__BackingField;
    public string Text { get; public set; }
    public bool AnsiQuotes { get; public set; }
    public bool BackslashEscapes { get; public set; }
    public bool MultiLine { get; public set; }
    public bool SqlServerMode { get; public set; }
    public bool Quoted { get; private set; }
    public bool IsComment { get; private set; }
    public int StartIndex { get; public set; }
    public int StopIndex { get; public set; }
    public int Position { get; public set; }
    public bool ReturnComments { get; public set; }
    public MySqlTokenizer(string input);
    public string get_Text();
    public void set_Text(string value);
    [CompilerGeneratedAttribute]
public bool get_AnsiQuotes();
    [CompilerGeneratedAttribute]
public void set_AnsiQuotes(bool value);
    [CompilerGeneratedAttribute]
public bool get_BackslashEscapes();
    [CompilerGeneratedAttribute]
public void set_BackslashEscapes(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiLine();
    [CompilerGeneratedAttribute]
public void set_MultiLine(bool value);
    [CompilerGeneratedAttribute]
public bool get_SqlServerMode();
    [CompilerGeneratedAttribute]
public void set_SqlServerMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_Quoted();
    [CompilerGeneratedAttribute]
private void set_Quoted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsComment();
    [CompilerGeneratedAttribute]
private void set_IsComment(bool value);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
public void set_StartIndex(int value);
    [CompilerGeneratedAttribute]
public int get_StopIndex();
    [CompilerGeneratedAttribute]
public void set_StopIndex(int value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public bool get_ReturnComments();
    [CompilerGeneratedAttribute]
public void set_ReturnComments(bool value);
    public List`1<string> GetAllTokens();
    public string NextToken();
    public static bool IsParameter(string s);
    public string NextParameter();
    public bool FindToken();
    public string ReadParenthesis();
    private bool ReadComment(char c);
    private void CalculatePosition(int start, int stop);
    private void ReadUnquotedToken();
    private void ReadSpecialToken();
    private void ReadQuotedToken(char quoteChar);
    private bool IsQuoteChar(char c);
    internal bool IsParameterMarker(char c);
    private bool IsSpecialCharacter(char c);
}
internal class MySql.Data.Common.NativeMethods : object {
    public static UInt32 GENERIC_READ;
    public static UInt32 GENERIC_WRITE;
    public static UInt32 FILE_READ_ATTRIBUTES;
    public static UInt32 FILE_READ_DATA;
    public static UInt32 FILE_WRITE_ATTRIBUTES;
    public static UInt32 FILE_WRITE_DATA;
    public static int INVALIDpipeHandle_VALUE;
    public static UInt32 FILE_FLAG_OVERLAPPED;
    public static UInt32 FILE_FLAG_NO_BUFFERING;
    public static UInt32 OPEN_EXISTING;
    public static IntPtr CreateFile(string fileName, UInt32 desiredAccess, UInt32 shareMode, SecurityAttributes securityAttributes, UInt32 creationDisposition, UInt32 flagsAndAttributes, UInt32 templateFile);
    public static bool PeekNamedPipe(IntPtr handle, Byte[] buffer, UInt32 nBufferSize, UInt32& bytesRead, UInt32& bytesAvail, UInt32& BytesLeftThisMessage);
    public static bool ReadFile(IntPtr hFile, Byte[] lpBuffer, UInt32 nNumberOfBytesToRead, UInt32& lpNumberOfBytesRead, IntPtr lpOverlapped);
    public static bool WriteFile(IntPtr hFile, Byte[] buffer, UInt32 numberOfBytesToWrite, UInt32& numberOfBytesWritten, IntPtr lpOverlapped);
    public static bool CloseHandle(IntPtr handle);
    public static bool CancelIo(IntPtr handle);
    public static bool FlushFileBuffers(IntPtr handle);
    public static IntPtr OpenEvent(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
    public static IntPtr OpenFileMapping(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
    public static IntPtr MapViewOfFile(IntPtr hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    public static bool UnmapViewOfFile(IntPtr lpBaseAddress);
    public static int FlushViewOfFile(IntPtr address, UInt32 numBytes);
    public static bool WaitNamedPipe(string namedPipeName, UInt32 timeOut);
    public static IntPtr socket(int af, int type, int protocol);
    public static int ioctlsocket(IntPtr socket, UInt32 cmd, UInt32& arg);
    public static int WSAIoctl(IntPtr s, UInt32 dwIoControlCode, Byte[] inBuffer, UInt32 cbInBuffer, Byte[] outBuffer, UInt32 cbOutBuffer, IntPtr lpcbBytesReturned, IntPtr lpOverlapped, IntPtr lpCompletionRoutine);
    public static int WSAGetLastError();
    public static int connect(IntPtr socket, Byte[] addr, int addrlen);
    public static int recv(IntPtr socket, Byte[] buff, int len, int flags);
    public static int send(IntPtr socket, Byte[] buff, int len, int flags);
}
internal class MySql.Data.Common.Platform : object {
    private static bool _inited;
    private static bool _isMono;
    public static bool IsWindows();
    public static bool IsMacOSX();
    public static bool IsMono();
    private static void Init();
}
internal class MySql.Data.Common.QueryNormalizer : object {
    private static List`1<string> Keywords;
    private List`1<Token> _tokens;
    private int _pos;
    private string _fullSql;
    private string _queryType;
    public string QueryType { get; }
    private static QueryNormalizer();
    public string get_QueryType();
    public string Normalize(string sql);
    private void DetermineStatementType(List`1<Token> tok);
    private static void ProcessMathSymbols(List`1<Token> tok);
    private static void CollapseWhitespace(List`1<Token> tok);
    private void CollapseValueLists(List`1<Token> tok);
    private void CollapseValueList(List`1<Token> tok, Int32& pos);
    private void CollapseInLists(List`1<Token> tok);
    private static Token GetNextRealToken(List`1<Token> tok, Int32& pos);
    private static void CollapseInList(List`1<Token> tok, Int32& pos);
    private void TokenizeSql(string sql);
    private bool LetterStartsComment(char c);
    private bool IsSpecialCharacter(char c);
    private bool ConsumeComment();
    private void ConsumeSymbol();
    private void ConsumeQuotedToken(char c);
    private void ConsumeUnquotedToken();
    private void ConsumeWhitespace();
    private static bool IsKeyword(string word);
}
internal class MySql.Data.Common.SharedMemory : object {
    private static UInt32 FILE_MAP_WRITE;
    private IntPtr fileMapping;
    private IntPtr view;
    public IntPtr View { get; }
    public SharedMemory(string name, IntPtr size);
    protected virtual override void Finalize();
    public IntPtr get_View();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class MySql.Data.Common.SharedMemoryStream : Stream {
    private string memoryName;
    private EventWaitHandle serverRead;
    private EventWaitHandle serverWrote;
    private EventWaitHandle clientRead;
    private EventWaitHandle clientWrote;
    private EventWaitHandle connectionClosed;
    private SharedMemory data;
    private int bytesLeft;
    private int position;
    private int connectNumber;
    private static int BUFFERLENGTH;
    private int readTimeout;
    private int writeTimeout;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public SharedMemoryStream(string memName);
    public void Open(UInt32 timeOut);
    public virtual void Close();
    private void GetConnectNumber(UInt32 timeOut);
    private void SetupEvents();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
}
internal class MySql.Data.Common.Ssl : object {
    private MySqlConnectionStringBuilder _settings;
    private bool _treatCertificatesAsPemFormat;
    private static SslProtocols[] tlsProtocols;
    private static Dictionary`2<string, SslProtocols> tlsConnectionRef;
    private static Dictionary`2<string, int> tlsRetry;
    private static object thisLock;
    public Ssl(MySqlConnectionStringBuilder settings);
    public Ssl(string server, MySqlSslMode sslMode, string certificateFile, MySqlCertificateStoreLocation certificateStoreLocation, string certificatePassword, string certificateThumbprint, string sslCa, string sslCert, string sslKey, string tlsVersion, UInt32 connectionTimeout);
    private static Ssl();
    private X509Certificate2 GetCertificateFromPEM(string certificatePath, string certificatePassword);
    private X509CertificateCollection GetPFXClientCertificates();
    [AsyncStateMachineAttribute("MySql.Data.Common.Ssl/<StartSSLAsync>d__10")]
public Task`1<Tuple`2<MySqlStream, Stream>> StartSSLAsync(Stream baseStream, Encoding encoding, string connectionString, CancellationToken cancellationToken, bool execAsync);
    private bool ServerCheckValidation(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private string GetCertificateFileExtension(string filePath, bool toLowerCase);
    [CompilerGeneratedAttribute]
private void <StartSSLAsync>b__10_0();
    [CompilerGeneratedAttribute]
private void <StartSSLAsync>b__10_1();
}
internal static class MySql.Data.common.SslPemCertificateValidator : object {
    public static void ValidateCertificate(X509Chain chain, MySqlBaseConnectionStringBuilder settings);
    private static void VerifyEmptyOrWhitespaceSslConnectionOption(string connectionOption, string connectionOptionName);
    private static Byte[] GetBuffer(string filePath);
    private static X509Certificate ReadSslCertificate(string filePath);
    private static AsymmetricCipherKeyPair ReadKey(string filePath);
    private static void VerifyDates(X509Certificate certificate);
    private static void VerifyCAStatus(X509Certificate certificate, bool expectedCAStatus);
    private static void VerifySignature(X509Certificate certificate, X509Certificate serverCertificate);
    private static void VerifySignatureUsingKey(X509Certificate certificate, AsymmetricCipherKeyPair key);
    private static void VerifySignature(X509Certificate certificate, AsymmetricKeyParameter key);
    private static void VerifyIdentity(SslPolicyErrors sslPolicyErrors);
    private static void VerifyIssuer(X509Certificate CACertificate, X509Certificate serverCertificate);
    private static void VerifyKeyCorrespondsToCertificateKey(X509Certificate certificate, AsymmetricCipherKeyPair key);
    private static Nullable`1<bool> IsCA(X509Certificate certificate, Int32& certificationPathLength);
}
internal class MySql.Data.Common.StreamCreator : object {
    private string _hostList;
    private UInt32 _port;
    private string pipeName;
    private UInt32 keepalive;
    private DBVersion driverVersion;
    public StreamCreator(string hosts, UInt32 port, string pipeName, UInt32 keepalive, DBVersion driverVersion);
    public static Tuple`2<Stream, MyNetworkStream> GetStream(string server, UInt32 port, string pipename, UInt32 keepalive, DBVersion v, UInt32 timeout);
    [AsyncStateMachineAttribute("MySql.Data.Common.StreamCreator/<GetStreamAsync>d__7")]
public static Task`1<Tuple`2<Stream, MyNetworkStream>> GetStreamAsync(MySqlConnectionStringBuilder settings, CancellationToken cancellationToken, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Common.StreamCreator/<GetTcpStreamAsync>d__8")]
private static Task`1<Tuple`2<Stream, MyNetworkStream>> GetTcpStreamAsync(MySqlConnectionStringBuilder settings, CancellationToken cancellationToken, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Common.StreamCreator/<GetUnixSocketStreamAsync>d__9")]
internal static Task`1<Tuple`2<Stream, MyNetworkStream>> GetUnixSocketStreamAsync(MySqlConnectionStringBuilder settings, CancellationToken cancellationToken, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Common.StreamCreator/<GetUnixSocketAsync>d__10")]
internal static Task`1<Socket> GetUnixSocketAsync(string server, UInt32 connectionTimeout, UInt32 keepAlive, CancellationToken cancellationToken, bool execAsync);
    private static Tuple`2<Stream, MyNetworkStream> GetSharedMemoryStream(MySqlConnectionStringBuilder settings);
    private static Tuple`2<Stream, MyNetworkStream> GetNamedPipeStream(MySqlConnectionStringBuilder settings);
    internal static void SetKeepAlive(Socket s, UInt32 time);
}
internal class MySql.Data.Common.StringUtility : object {
    public static string ToUpperInvariant(string s);
    public static string ToLowerInvariant(string s);
}
internal class MySql.Data.Common.Token : object {
    public TokenType Type;
    public string Text;
    public bool Output;
    public bool IsRealToken { get; }
    public Token(TokenType type, string text);
    public bool get_IsRealToken();
}
internal enum MySql.Data.Common.TokenType : Enum {
    public int value__;
    public static TokenType Keyword;
    public static TokenType String;
    public static TokenType Number;
    public static TokenType Symbol;
    public static TokenType Identifier;
    public static TokenType Comment;
    public static TokenType CommandComment;
    public static TokenType Whitespace;
}
internal class MySql.Data.Common.UnixEndPoint : EndPoint {
    [CompilerGeneratedAttribute]
private string <SocketName>k__BackingField;
    public string SocketName { get; private set; }
    public UnixEndPoint(string socketName);
    [CompilerGeneratedAttribute]
public string get_SocketName();
    [CompilerGeneratedAttribute]
private void set_SocketName(string value);
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual SocketAddress Serialize();
}
internal abstract class MySql.Data.Failover.FailoverGroup : object {
    [CompilerGeneratedAttribute]
private List`1<FailoverServer> <Hosts>k__BackingField;
    protected internal FailoverServer _activeHost;
    protected internal List`1<FailoverServer> Hosts { get; protected internal set; }
    protected internal FailoverServer ActiveHost { get; }
    internal FailoverGroup(List`1<FailoverServer> hosts);
    [CompilerGeneratedAttribute]
protected internal List`1<FailoverServer> get_Hosts();
    [CompilerGeneratedAttribute]
protected internal void set_Hosts(List`1<FailoverServer> value);
    protected internal FailoverServer get_ActiveHost();
    protected internal abstract virtual void SetInitialActiveServer();
    protected internal abstract virtual FailoverServer GetNextHost();
}
internal static class MySql.Data.Failover.FailoverManager : object {
    [CompilerGeneratedAttribute]
private static FailoverGroup <FailoverGroup>k__BackingField;
    internal static FailoverGroup FailoverGroup { get; private set; }
    [CompilerGeneratedAttribute]
internal static FailoverGroup get_FailoverGroup();
    [CompilerGeneratedAttribute]
private static void set_FailoverGroup(FailoverGroup value);
    internal static void Reset();
    internal static void SetHostList(List`1<FailoverServer> hostList, FailoverMethod failoverMethod);
    internal static InternalSession AttemptConnectionXProtocol(string originalConnectionString, String& connectionString, bool isDefaultPort, Client client);
    [AsyncStateMachineAttribute("MySql.Data.Failover.FailoverManager/<AttemptConnectionAsync>d__7")]
internal static Task`1<string> AttemptConnectionAsync(MySqlConnection connection, string originalConnectionString, bool execAsync, CancellationToken cancellationToken, bool mySqlPoolManager);
    internal static int ParseHostList(string hierPart, bool isXProtocol, bool connectionDataIsUri);
    private static FailoverServer ConvertToFailoverServer(string host, int priority, int port, bool connectionDataIsUri);
}
internal enum MySql.Data.Failover.FailoverMethod : Enum {
    public int value__;
    public static FailoverMethod Sequential;
    public static FailoverMethod Priority;
    public static FailoverMethod Random;
}
internal class MySql.Data.Failover.FailoverServer : object {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Attempted>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DemotedTime>k__BackingField;
    internal string Host { get; private set; }
    internal int Port { get; private set; }
    internal int Priority { get; private set; }
    internal bool IsActive { get; internal set; }
    internal bool Attempted { get; internal set; }
    internal DateTime DemotedTime { get; internal set; }
    internal FailoverServer(string host, int port, Nullable`1<int> priority);
    [CompilerGeneratedAttribute]
internal string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
internal int get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
internal bool get_Attempted();
    [CompilerGeneratedAttribute]
internal void set_Attempted(bool value);
    [CompilerGeneratedAttribute]
internal DateTime get_DemotedTime();
    [CompilerGeneratedAttribute]
internal void set_DemotedTime(DateTime value);
    public sealed virtual bool Equals(FailoverServer other);
}
internal class MySql.Data.Failover.RandomFailoverGroup : FailoverGroup {
    private FailoverServer _initialHost;
    private FailoverServer _currentHost;
    private Random rnd;
    public RandomFailoverGroup(List`1<FailoverServer> hosts);
    protected internal virtual void SetInitialActiveServer();
    protected internal virtual FailoverServer GetNextHost();
    [CompilerGeneratedAttribute]
private bool <GetNextHost>b__5_0(FailoverServer h);
}
internal class MySql.Data.Failover.SequentialFailoverGroup : FailoverGroup {
    private FailoverServer _initialHost;
    private int _hostIndex;
    private FailoverServer _currentHost;
    public SequentialFailoverGroup(List`1<FailoverServer> hosts);
    protected internal virtual void SetInitialActiveServer();
    protected internal virtual FailoverServer GetNextHost();
    [CompilerGeneratedAttribute]
private bool <GetNextHost>b__5_0(FailoverServer h);
}
internal class MySql.Data.MySqlClient.Authentication.AuthenticationPluginManager : object {
    private static Dictionary`2<string, PluginInfo> Plugins;
    private static AuthenticationPluginManager();
    private static void AuthenticationManagerCtorConfiguration();
    public static MySqlAuthenticationPlugin GetPlugin(string method);
    private static MySqlAuthenticationPlugin CreatePlugin(string method);
    public static void ValidateAuthenticationPlugin(string method);
}
internal enum MySql.Data.MySqlClient.Authentication.AuthStage : Enum {
    public int value__;
    public static AuthStage GENERATE_SCRAMBLE;
    public static AuthStage REQUEST_RSA_KEY;
    public static AuthStage FAST_AUTH;
    public static AuthStage FULL_AUTH;
}
internal class MySql.Data.MySqlClient.Authentication.CachingSha2AuthenticationPlugin : Sha256AuthenticationPlugin {
    internal static AuthStage _authStage;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    protected Byte[] GeneratePassword();
    private Byte[] GetRsaPassword(string password, Byte[] seedBytes, Byte[] rawPublicKey);
    public virtual object GetPassword();
}
internal class MySql.Data.MySqlClient.Authentication.KerberosAuthenticationPlugin : MySqlAuthenticationPlugin {
    private static string PACKAGE;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    private string _servicePrincipal;
    private string _realm;
    private GssapiMechanism _gssapiMechanism;
    private SspiSecurityContext _sspiSecurityContext;
    public string PluginName { get; }
    protected string Username { get; private set; }
    protected string Password { get; }
    public virtual string get_PluginName();
    [CompilerGeneratedAttribute]
protected string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    protected string get_Password();
    protected virtual void SetAuthData(Byte[] data);
    public virtual string GetUsername();
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    private Byte[] SspiMode(Byte[] data);
    private Byte[] GssapiMode(Byte[] data);
}
public abstract class MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin : object {
    internal NativeDriver _driver;
    private int _mfaIteration;
    [CompilerGeneratedAttribute]
private string <SwitchedPlugin>k__BackingField;
    protected Byte[] AuthenticationData;
    internal string SwitchedPlugin { get; private set; }
    protected MySqlConnectionStringBuilder Settings { get; }
    protected Version ServerVersion { get; }
    internal ClientFlags Flags { get; }
    protected Encoding Encoding { get; }
    public string PluginName { get; }
    [CompilerGeneratedAttribute]
internal string get_SwitchedPlugin();
    [CompilerGeneratedAttribute]
private void set_SwitchedPlugin(string value);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<GetPluginAsync>d__7")]
internal static Task`1<MySqlAuthenticationPlugin> GetPluginAsync(string method, NativeDriver driver, Byte[] authData, bool execAsync, int mfaIteration);
    protected MySqlConnectionStringBuilder get_Settings();
    protected Version get_ServerVersion();
    internal ClientFlags get_Flags();
    protected Encoding get_Encoding();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual void CheckConstraints();
    protected virtual void AuthenticationFailed(MySqlException ex);
    protected virtual void AuthenticationSuccessful();
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<AuthenticateAsync>d__21")]
internal Task AuthenticateAsync(bool reset, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<WritePasswordAsync>d__22")]
private Task WritePasswordAsync(MySqlPacket packet, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<ReadPacketAsync>d__23")]
internal Task`1<MySqlPacket> ReadPacketAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<HandleMFAAsync>d__24")]
private Task HandleMFAAsync(MySqlPacket packet, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<HandleAuthChangeAsync>d__25")]
private Task HandleAuthChangeAsync(MySqlPacket packet, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<NextPluginAsync>d__26")]
private Task`1<MySqlAuthenticationPlugin> NextPluginAsync(MySqlPacket packet, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Authentication.MySqlAuthenticationPlugin/<ContinueAuthenticationAsync>d__27")]
private Task ContinueAuthenticationAsync(bool execAsync, Byte[] data);
    protected string GetMFAPassword();
    public abstract virtual string get_PluginName();
    public virtual string GetUsername();
    public virtual object GetPassword();
}
public class MySql.Data.MySqlClient.Authentication.MySqlClearPasswordPlugin : MySqlAuthenticationPlugin {
    private Byte[] passBytes;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
}
public class MySql.Data.MySqlClient.Authentication.MySqlNativePasswordPlugin : MySqlAuthenticationPlugin {
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    public virtual object GetPassword();
    protected Byte[] Get411Password(string password, Byte[] seedBytes);
}
public class MySql.Data.MySqlClient.Authentication.MySqlPemReader : object {
    public static RSACryptoServiceProvider ConvertPemToRSAProvider(Byte[] rawPublicKey);
    private static RSACryptoServiceProvider DecodeX509Key(Byte[] key);
    private static Byte[] DecodeOpenSslKey(Byte[] rawPublicKey);
    private static Byte[] TrimByteArray(Byte[] array);
    private static bool StartsWith(Byte[] array, Byte[] containedArray);
    private static bool EndsWith(Byte[] array, Byte[] containedArray);
}
internal class MySql.Data.MySqlClient.Authentication.MySqlSASLPlugin : MySqlAuthenticationPlugin {
    private string _mechanismName;
    internal static ScramBase scramMechanism;
    internal static GssapiMechanism gssapiMechanism;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    internal static bool IsNonAsciiSpace(char c);
    internal static bool IsCommonlyMappedToNothing(char c);
    internal static bool IsProhibited(string s, int index);
    internal static string SaslPrep(string s);
    internal static string GetRandomBytes(int n);
}
internal class MySql.Data.MySqlClient.Authentication.MySqlWindowsAuthenticationPlugin : MySqlAuthenticationPlugin {
    private string targetName;
    private SspiSecurityContext securityContext;
    public string PluginName { get; }
    protected virtual void CheckConstraints();
    public virtual string GetUsername();
    public virtual string get_PluginName();
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
}
internal class MySql.Data.MySqlClient.Authentication.OciAuthenticationPlugin : MySqlAuthenticationPlugin {
    private Assembly _ociAssembly;
    internal string _ociConfigProfile;
    private static string KEY_FILE;
    private static string FINGERPRINT;
    private static string SECURITY_TOKEN_FILE;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual void CheckConstraints();
    protected virtual void SetAuthData(Byte[] data);
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    internal Dictionary`2<string, Dictionary`2<string, string>> LoadOciConfigProfiles();
    internal void GetOciConfigValues(Dictionary`2<string, Dictionary`2<string, string>> profiles, String& keyFilePath, String& fingerprint, String& securityTokenFilePath);
    internal static string SignData(Byte[] data, string keyFilePath);
    internal static string LoadSecurityToken(string securityTokenFilePath);
    internal static Byte[] BuildResponse(string fingerprint, string signature, string token);
}
internal class MySql.Data.MySqlClient.Authentication.PluginInfo : ValueType {
    public string Type;
    public Assembly Assembly;
    public PluginInfo(string type);
}
internal abstract class MySql.Data.MySqlClient.Authentication.ScramBase : MySqlSASLPlugin {
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    internal string _cnonce;
    internal string client;
    internal Byte[] salted;
    internal Byte[] auth;
    internal AuthState _state;
    protected string Host { get; private set; }
    protected string Username { get; private set; }
    protected string Password { get; private set; }
    internal string MechanismName { get; }
    protected ScramBase(string username, string password, string host);
    [CompilerGeneratedAttribute]
protected string get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(string value);
    [CompilerGeneratedAttribute]
protected string get_Username();
    [CompilerGeneratedAttribute]
private void set_Username(string value);
    [CompilerGeneratedAttribute]
protected string get_Password();
    [CompilerGeneratedAttribute]
private void set_Password(string value);
    internal abstract virtual string get_MechanismName();
    internal Byte[] Challenge(Byte[] token);
    internal Byte[] ClientInitial();
    internal Byte[] ProcessServerResponse(Byte[] data);
    internal void ValidateAuth(Byte[] data);
    private static string Normalize(string str);
    protected abstract virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    private Byte[] HMAC(Byte[] key, Byte[] str);
    protected abstract virtual Byte[] Hash(Byte[] str);
    private static void Xor(Byte[] a, Byte[] b);
    private Byte[] Hi(Byte[] str, Byte[] salt, int count);
    private static Dictionary`2<char, string> ParseServerChallenge(string challenge);
}
internal class MySql.Data.MySqlClient.Authentication.ScramSha1Mechanism : ScramBase {
    internal string MechanismName { get; }
    internal ScramSha1Mechanism(string username, string password, string host);
    internal virtual string get_MechanismName();
    protected virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    protected virtual Byte[] Hash(Byte[] str);
}
internal class MySql.Data.MySqlClient.Authentication.ScramSha256Mechanism : ScramBase {
    internal string MechanismName { get; }
    internal ScramSha256Mechanism(string username, string password, string host);
    internal virtual string get_MechanismName();
    protected virtual KeyedHashAlgorithm CreateHMAC(Byte[] key);
    protected virtual Byte[] Hash(Byte[] str);
}
internal class MySql.Data.MySqlClient.Authentication.Sha256AuthenticationPlugin : MySqlAuthenticationPlugin {
    protected Byte[] rawPubkey;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual Task`1<Byte[]> MoreDataAsync(Byte[] data, bool execAsync);
    public virtual object GetPassword();
    private Byte[] GetNonLengthEncodedPassword();
    private Byte[] GetRsaPassword(string password, Byte[] seedBytes, Byte[] rawPublicKey);
    protected Byte[] GetXor(Byte[] src, Byte[] pattern);
}
internal class MySql.Data.MySqlClient.Authentication.Sha256MemoryAuthenticationPlugin : MySqlAuthenticationPlugin {
    public string PluginName { get; }
    public virtual string get_PluginName();
    public Byte[] GetClientHash(string data, Byte[] nonce);
    protected Byte[] GetXOr(Byte[] left, Byte[] right);
}
internal class MySql.Data.MySqlClient.Authentication.WebAuthnAuthenticationPlugin : MySqlAuthenticationPlugin {
    private static int RANDOM_BYTES_LENGTH;
    private static int RELYING_PARTY_ID_MAX_LENGTH;
    private string _devicePath;
    private string _relyingPartyId;
    private string _clientDataJson;
    private Byte[] _credentialId;
    private Byte[] _clientDataHash;
    private Byte[] _challenge;
    private AuthState _state;
    public string PluginName { get; }
    public virtual string get_PluginName();
    protected virtual void SetAuthData(Byte[] data);
    protected Byte[] MoreData(Byte[] data);
    private void ParseChallenge(Byte[] data);
    private void SetClientData();
    private Byte[] GetAssertion(FidoDevice fidoDevice);
}
public class MySql.Data.MySqlClient.AuthenticationPluginConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
}
public abstract class MySql.Data.MySqlClient.BaseCommandInterceptor : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <ActiveConnection>k__BackingField;
    protected MySqlConnection ActiveConnection { get; private set; }
    [CompilerGeneratedAttribute]
protected MySqlConnection get_ActiveConnection();
    [CompilerGeneratedAttribute]
private void set_ActiveConnection(MySqlConnection value);
    public virtual bool ExecuteScalar(string sql, Object& returnValue);
    public virtual bool ExecuteNonQuery(string sql, Int32& returnValue);
    public virtual bool ExecuteReader(string sql, CommandBehavior behavior, MySqlDataReader& returnValue);
    public virtual void Init(MySqlConnection connection);
}
public class MySql.Data.MySqlClient.BaseTableCache : object {
    protected int MaxCacheAge;
    private Dictionary`2<string, CacheEntry> cache;
    public BaseTableCache(int maxCacheAge);
    public virtual void AddToCache(string commandText, object resultSet);
    public virtual object RetrieveFromCache(string commandText, int cacheAge);
    public void RemoveFromCache(string commandText);
    public virtual void Dump();
    protected virtual void CleanCache();
}
public class MySql.Data.MySqlClient.CharacterSet : object {
    public string name;
    public int byteCount;
    public CharacterSet(string name, int byteCount);
    public virtual int GetHashCode();
}
internal class MySql.Data.MySqlClient.CharSetMap : object {
    private static Dictionary`2<string, string> _defaultCollations;
    private static Dictionary`2<string, int> _maxLengths;
    private static Dictionary`2<string, CharacterSet> _mapping;
    private static object LockObject;
    private static CharSetMap();
    public static CharacterSet GetCharacterSet(string charSetName);
    public static Encoding GetEncoding(string charSetName);
    private static void InitializeMapping();
    private static void LoadCharsetMap();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CharSetMap/<InitCollectionsAsync>d__9")]
internal static Task InitCollectionsAsync(MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CharSetMap/<GetDefaultCollationAsync>d__10")]
internal static Task`1<string> GetDefaultCollationAsync(string charset, MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CharSetMap/<GetMaxLengthAsync>d__11")]
internal static Task`1<int> GetMaxLengthAsync(string charset, MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
}
[FlagsAttribute]
internal enum MySql.Data.MySqlClient.ClientFlags : Enum {
    public ulong value__;
    public static ClientFlags LONG_PASSWORD;
    public static ClientFlags FOUND_ROWS;
    public static ClientFlags LONG_FLAG;
    public static ClientFlags CONNECT_WITH_DB;
    public static ClientFlags NO_SCHEMA;
    public static ClientFlags COMPRESS;
    public static ClientFlags ODBC;
    public static ClientFlags LOCAL_FILES;
    public static ClientFlags IGNORE_SPACE;
    public static ClientFlags PROTOCOL_41;
    public static ClientFlags INTERACTIVE;
    public static ClientFlags SSL;
    public static ClientFlags IGNORE_SIGPIPE;
    public static ClientFlags TRANSACTIONS;
    public static ClientFlags RESERVED;
    public static ClientFlags SECURE_CONNECTION;
    public static ClientFlags MULTI_STATEMENTS;
    public static ClientFlags MULTI_RESULTS;
    public static ClientFlags PS_MULTI_RESULTS;
    public static ClientFlags PLUGIN_AUTH;
    public static ClientFlags CONNECT_ATTRS;
    public static ClientFlags CAN_HANDLE_EXPIRED_PASSWORD;
    public static ClientFlags CLIENT_SESSION_TRACK;
    public static ClientFlags CLIENT_QUERY_ATTRIBUTES;
    public static ClientFlags CLIENT_SSL_VERIFY_SERVER_CERT;
    public static ClientFlags CLIENT_REMEMBER_OPTIONS;
    public static ClientFlags MULTI_FACTOR_AUTHENTICATION;
}
public enum MySql.Data.MySqlClient.CloseNotification : Enum {
    public int value__;
    public static CloseNotification IDLE;
    public static CloseNotification SHUTDOWN;
    public static CloseNotification KILLED;
}
[FlagsAttribute]
internal enum MySql.Data.MySqlClient.ColumnFlags : Enum {
    public int value__;
    public static ColumnFlags NOT_NULL;
    public static ColumnFlags PRIMARY_KEY;
    public static ColumnFlags UNIQUE_KEY;
    public static ColumnFlags MULTIPLE_KEY;
    public static ColumnFlags BLOB;
    public static ColumnFlags UNSIGNED;
    public static ColumnFlags ZERO_FILL;
    public static ColumnFlags BINARY;
    public static ColumnFlags ENUM;
    public static ColumnFlags AUTO_INCREMENT;
    public static ColumnFlags TIMESTAMP;
    public static ColumnFlags SET;
    public static ColumnFlags NUMBER;
}
internal class MySql.Data.MySqlClient.CommandInterceptor : Interceptor {
    private bool _insideInterceptor;
    private List`1<BaseCommandInterceptor> _interceptors;
    public CommandInterceptor(MySqlConnection connection);
    public bool ExecuteScalar(string sql, Object& returnValue);
    public bool ExecuteNonQuery(string sql, Int32& returnValue);
    public bool ExecuteReader(string sql, CommandBehavior behavior, MySqlDataReader& returnValue);
    protected virtual void AddInterceptor(object o);
    protected virtual string ResolveType(string nameOrType);
}
internal class MySql.Data.MySqlClient.CommandTimer : object {
    private bool _timeoutSet;
    private MySqlConnection _connection;
    public CommandTimer(MySqlConnection connection, int timeout);
    public sealed virtual void Dispose();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal class MySql.Data.MySqlClient.Common.NamedPipeStream : Stream {
    private SafeFileHandle handle;
    private Stream fileStream;
    private int readTimeout;
    private int writeTimeout;
    private static int ERROR_PIPE_BUSY;
    private static int ERROR_SEM_TIMEOUT;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public NamedPipeStream(string path, FileAccess mode, UInt32 timeout);
    private void CancelIo();
    public void Open(string path, FileAccess mode, UInt32 timeout);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Close();
    public virtual void SetLength(long length);
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long Seek(long offset, SeekOrigin origin);
    internal static Stream Create(string pipeName, string hostname, UInt32 timeout);
}
internal class MySql.Data.MySqlClient.CompressedStream : Stream {
    private Stream baseStream;
    private MemoryStream cache;
    private Byte[] localByte;
    private Byte[] inBuffer;
    private Byte[] lengthBytes;
    private WeakReference inBufferRef;
    private int inPos;
    private int maxInPos;
    private DeflateStream compInStream;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public CompressedStream(Stream baseStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    public virtual void SetLength(long value);
    public virtual int ReadByte();
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<ReadAsync>d__34")]
private Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<PrepareNextPacketAsync>d__35")]
private Task PrepareNextPacketAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<ReadNextPacketAsync>d__36")]
private Task ReadNextPacketAsync(int len, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<CompressCacheAsync>d__37")]
private Task`1<MemoryStream> CompressCacheAsync(bool execAsync);
    private int Adler32(Byte[] bytes, int index, int length);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<CompressAndSendCacheAsync>d__39")]
private Task CompressAndSendCacheAsync(bool execAsync);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<FlushAsync>d__42")]
private Task FlushAsync(bool execAsync);
    private bool InputDone();
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.CompressedStream/<WriteAsync>d__47")]
private Task WriteAsync(Byte[] buffer, int offset, int count, bool execAsync);
    public virtual long Seek(long offset, SeekOrigin origin);
}
public enum MySql.Data.MySqlClient.CompressionAlgorithms : Enum {
    public int value__;
    public static CompressionAlgorithms zstd_stream;
    public static CompressionAlgorithms lz4_message;
    public static CompressionAlgorithms deflate_stream;
}
public enum MySql.Data.MySqlClient.CompressionType : Enum {
    public int value__;
    public static CompressionType Preferred;
    public static CompressionType Required;
    public static CompressionType Disabled;
}
internal class MySql.Data.MySqlClient.Crypt : object {
    private static void XorScramble(Byte[] from, int fromIndex, Byte[] to, int toIndex, Byte[] password, int length);
    public static Byte[] Get411Password(string password, string seed);
    private static double rand(Int64& seed1, Int64& seed2, long max);
    public static string EncryptPassword(string password, string seed, bool new_ver);
    private static Int64[] Hash(string P);
}
internal enum MySql.Data.MySqlClient.DBCmd : Enum {
    public byte value__;
    public static DBCmd SLEEP;
    public static DBCmd QUIT;
    public static DBCmd INIT_DB;
    public static DBCmd QUERY;
    public static DBCmd FIELD_LIST;
    public static DBCmd CREATE_DB;
    public static DBCmd DROP_DB;
    public static DBCmd RELOAD;
    public static DBCmd SHUTDOWN;
    public static DBCmd STATISTICS;
    public static DBCmd PROCESS_INFO;
    public static DBCmd CONNECT;
    public static DBCmd PROCESS_KILL;
    public static DBCmd DEBUG;
    public static DBCmd PING;
    public static DBCmd TIME;
    public static DBCmd DELAYED_INSERT;
    public static DBCmd CHANGE_USER;
    public static DBCmd BINLOG_DUMP;
    public static DBCmd TABLE_DUMP;
    public static DBCmd CONNECT_OUT;
    public static DBCmd REGISTER_REPLICA;
    public static DBCmd PREPARE;
    public static DBCmd EXECUTE;
    public static DBCmd LONG_DATA;
    public static DBCmd CLOSE_STMT;
    public static DBCmd RESET_STMT;
    public static DBCmd SET_OPTION;
    public static DBCmd FETCH;
}
internal class MySql.Data.MySqlClient.Driver : object {
    protected Encoding encoding;
    protected MySqlConnectionStringBuilder ConnectionString;
    protected DateTime creationTime;
    protected string serverCharSet;
    protected Dictionary`2<string, string> serverProps;
    internal int timeZoneOffset;
    private bool firstResult;
    protected IDriver handler;
    internal MySqlDataReader reader;
    private bool disposed;
    [CompilerGeneratedAttribute]
private DateTime <IdleSince>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlPromotableTransaction <currentTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInActiveUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxPacketSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionCharSetIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, string> <CharacterSets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPasswordExpired>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <BulkLoaderStream>k__BackingField;
    public DateTime IdleSince { get; public set; }
    public int ThreadID { get; }
    public DBVersion Version { get; }
    public MySqlConnectionStringBuilder Settings { get; public set; }
    public Encoding Encoding { get; public set; }
    public MySqlPromotableTransaction currentTransaction { get; public set; }
    public bool IsInActiveUse { get; public set; }
    public bool IsOpen { get; protected set; }
    public MySqlPool Pool { get; public set; }
    public long MaxPacketSize { get; protected set; }
    protected internal int ConnectionCharSetIndex { get; protected internal set; }
    protected internal Dictionary`2<int, string> CharacterSets { get; protected set; }
    public bool SupportsOutputParameters { get; }
    public bool SupportsBatch { get; }
    public bool SupportsConnectAttrs { get; }
    public bool SupportsPasswordExpiration { get; }
    public bool SupportsQueryAttributes { get; }
    public bool IsPasswordExpired { get; internal set; }
    public Stream BulkLoaderStream { get; public set; }
    public Driver(MySqlConnectionStringBuilder settings);
    [CompilerGeneratedAttribute]
public DateTime get_IdleSince();
    [CompilerGeneratedAttribute]
public void set_IdleSince(DateTime value);
    protected virtual override void Finalize();
    public int get_ThreadID();
    public DBVersion get_Version();
    public MySqlConnectionStringBuilder get_Settings();
    public void set_Settings(MySqlConnectionStringBuilder value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    [CompilerGeneratedAttribute]
public MySqlPromotableTransaction get_currentTransaction();
    [CompilerGeneratedAttribute]
public void set_currentTransaction(MySqlPromotableTransaction value);
    [CompilerGeneratedAttribute]
public bool get_IsInActiveUse();
    [CompilerGeneratedAttribute]
public void set_IsInActiveUse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsOpen();
    [CompilerGeneratedAttribute]
protected void set_IsOpen(bool value);
    [CompilerGeneratedAttribute]
public MySqlPool get_Pool();
    [CompilerGeneratedAttribute]
public void set_Pool(MySqlPool value);
    [CompilerGeneratedAttribute]
public long get_MaxPacketSize();
    [CompilerGeneratedAttribute]
protected void set_MaxPacketSize(long value);
    [CompilerGeneratedAttribute]
protected internal int get_ConnectionCharSetIndex();
    [CompilerGeneratedAttribute]
protected internal void set_ConnectionCharSetIndex(int value);
    [CompilerGeneratedAttribute]
protected internal Dictionary`2<int, string> get_CharacterSets();
    [CompilerGeneratedAttribute]
protected void set_CharacterSets(Dictionary`2<int, string> value);
    public bool get_SupportsOutputParameters();
    public bool get_SupportsBatch();
    public bool get_SupportsConnectAttrs();
    public bool get_SupportsPasswordExpiration();
    public bool get_SupportsQueryAttributes();
    [CompilerGeneratedAttribute]
public bool get_IsPasswordExpired();
    [CompilerGeneratedAttribute]
internal void set_IsPasswordExpired(bool value);
    [CompilerGeneratedAttribute]
public Stream get_BulkLoaderStream();
    [CompilerGeneratedAttribute]
public void set_BulkLoaderStream(Stream value);
    public string Property(string key);
    public bool ConnectionLifetimeExpired();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<CreateAsync>d__74")]
public static Task`1<Driver> CreateAsync(MySqlConnectionStringBuilder settings, bool execAsync, CancellationToken cancellationToken);
    public bool HasStatus(ServerStatusFlags flag);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<OpenAsync>d__76")]
public virtual Task OpenAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<CloseAsync>d__77")]
public virtual Task CloseAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<ConfigureAsync>d__78")]
public virtual Task ConfigureAsync(MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<LoadServerPropertiesAsync>d__79")]
private Task`1<Dictionary`2<string, string>> LoadServerPropertiesAsync(MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<GetTimeZoneOffsetAsync>d__80")]
private Task`1<int> GetTimeZoneOffsetAsync(MySqlConnection con, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<LoadCharacterSetsAsync>d__81")]
private Task LoadCharacterSetsAsync(MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<ReportWarningsAsync>d__82")]
public virtual Task`1<List`1<MySqlError>> ReportWarningsAsync(MySqlConnection connection, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<SendQueryAsync>d__83")]
public virtual Task SendQueryAsync(MySqlPacket p, int paramsPosition, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<NextResultAsync>d__84")]
public virtual Task`1<ResultSet> NextResultAsync(int statementId, bool force, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<GetResultAsync>d__85")]
protected virtual Task`1<Tuple`3<int, int, long>> GetResultAsync(int statementId, int affectedRows, long insertedId, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<FetchDataRowAsync>d__86")]
public virtual Task`1<bool> FetchDataRowAsync(int statementId, int columns, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<SkipDataRowAsync>d__87")]
public virtual Task`1<bool> SkipDataRowAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<ExecuteDirectAsync>d__88")]
public virtual Task ExecuteDirectAsync(string sql, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<GetColumnsAsync>d__89")]
public Task`1<MySqlField[]> GetColumnsAsync(int count, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<PrepareStatementAsync>d__90")]
public virtual Task`1<Tuple`2<int, MySqlField[]>> PrepareStatementAsync(string sql, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<ReadColumnValueAsync>d__91")]
public Task`1<IMySqlValue> ReadColumnValueAsync(int index, MySqlField field, IMySqlValue value, bool execAsync);
    public void SkipColumnValue(IMySqlValue valObject);
    public void ResetTimeout(int timeoutMilliseconds);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<PingAsync>d__94")]
public Task`1<bool> PingAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<SetDatabaseAsync>d__95")]
public virtual Task SetDatabaseAsync(string dbName, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<ExecuteStatementAsync>d__96")]
public virtual Task ExecuteStatementAsync(MySqlPacket packetToExecute, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<CloseStatementAsync>d__97")]
public virtual Task CloseStatementAsync(int id, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<ResetAsync>d__98")]
public virtual Task ResetAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<CloseQueryAsync>d__99")]
public virtual Task CloseQueryAsync(MySqlConnection connection, int statementId, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Driver/<DisposeAsync>d__100")]
protected virtual Task DisposeAsync(bool disposing, bool execAsync);
    public sealed virtual void Dispose();
}
internal class MySql.Data.MySqlClient.DriverTransactionManager : object {
    private static Hashtable driversInUse;
    private static DriverTransactionManager();
    public static Driver GetDriverInTransaction(Transaction transaction);
    public static void SetDriverInTransaction(Driver driver);
    public static void RemoveDriverInTransaction(Transaction transaction);
}
internal enum MySql.Data.MySqlClient.Field_Type : Enum {
    public byte value__;
    public static Field_Type DECIMAL;
    public static Field_Type BYTE;
    public static Field_Type SHORT;
    public static Field_Type LONG;
    public static Field_Type FLOAT;
    public static Field_Type DOUBLE;
    public static Field_Type NULL;
    public static Field_Type TIMESTAMP;
    public static Field_Type LONGLONG;
    public static Field_Type INT24;
    public static Field_Type DATE;
    public static Field_Type TIME;
    public static Field_Type DATETIME;
    public static Field_Type YEAR;
    public static Field_Type NEWDATE;
    public static Field_Type ENUM;
    public static Field_Type SET;
    public static Field_Type TINY_BLOB;
    public static Field_Type MEDIUM_BLOB;
    public static Field_Type LONG_BLOB;
    public static Field_Type BLOB;
    public static Field_Type VAR_STRING;
    public static Field_Type STRING;
}
public class MySql.Data.MySqlClient.GenericConfigurationElementCollection`1 : ConfigurationElementCollection {
    private List`1<T> _elements;
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
}
internal interface MySql.Data.MySqlClient.IDriver {
    public int ThreadId { get; }
    public DBVersion Version { get; }
    public ServerStatusFlags ServerStatus { get; }
    public ClientFlags Flags { get; }
    public int WarningCount { get; }
    public abstract virtual int get_ThreadId();
    public abstract virtual DBVersion get_Version();
    public abstract virtual ServerStatusFlags get_ServerStatus();
    public abstract virtual ClientFlags get_Flags();
    public abstract virtual void Configure();
    public abstract virtual Task OpenAsync(bool execAsync, CancellationToken cancellationToken);
    public abstract virtual Task SendQueryAsync(MySqlPacket packet, bool execAsync, int paramsPosition);
    public abstract virtual Task CloseAsync(bool isOpen, bool execAsync);
    public abstract virtual Task`1<bool> PingAsync(bool execAsync);
    public abstract virtual Task`1<Tuple`3<int, int, long>> GetResultAsync(int affectedRows, long insertedId, bool execAsync);
    public abstract virtual Task`1<bool> FetchDataRowAsync(int statementId, int columns, bool execAsync);
    public abstract virtual Task`1<Tuple`2<int, MySqlField[]>> PrepareStatementAsync(string sql, bool execAsync);
    public abstract virtual Task ExecuteStatementAsync(MySqlPacket packet, bool execAsync);
    public abstract virtual Task CloseStatementAsync(int statementId, bool execAsync);
    public abstract virtual Task SetDatabaseAsync(string dbName, bool execAsync);
    public abstract virtual Task ResetAsync(bool execAsync);
    public abstract virtual Task`1<IMySqlValue> ReadColumnValueAsync(int index, MySqlField field, IMySqlValue valObject, bool execAsync);
    public abstract virtual void SkipColumnValue(IMySqlValue valueObject);
    public abstract virtual Task GetColumnsDataAsync(MySqlField[] columns, bool execAsync);
    public abstract virtual void ResetTimeout(int timeout);
    public abstract virtual int get_WarningCount();
}
internal abstract class MySql.Data.MySqlClient.Interceptor : object {
    protected MySqlConnection Connection;
    protected void LoadInterceptors(string interceptorList);
    protected abstract virtual void AddInterceptor(object o);
    protected virtual string ResolveType(string nameOrType);
}
public class MySql.Data.MySqlClient.InterceptorConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
}
public abstract class MySql.Data.MySqlClient.Interceptors.BaseExceptionInterceptor : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <ActiveConnection>k__BackingField;
    protected MySqlConnection ActiveConnection { get; private set; }
    public abstract virtual Exception InterceptException(Exception exception);
    [CompilerGeneratedAttribute]
protected MySqlConnection get_ActiveConnection();
    [CompilerGeneratedAttribute]
private void set_ActiveConnection(MySqlConnection value);
    public virtual void Init(MySqlConnection connection);
}
internal class MySql.Data.MySqlClient.Interceptors.ExceptionInterceptor : Interceptor {
    private List`1<BaseExceptionInterceptor> _interceptors;
    public ExceptionInterceptor(MySqlConnection connection);
    protected virtual void AddInterceptor(object o);
    public void Throw(Exception exception);
    protected virtual string ResolveType(string nameOrType);
}
internal class MySql.Data.MySqlClient.Interceptors.StandardExceptionInterceptor : BaseExceptionInterceptor {
    public virtual Exception InterceptException(Exception exception);
}
internal class MySql.Data.MySqlClient.ISSchemaProvider : SchemaProvider {
    public ISSchemaProvider(MySqlConnection connection);
    protected virtual MySqlSchemaCollection GetCollections();
    protected virtual MySqlSchemaCollection GetRestrictions();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetDatabasesAsync>d__3")]
public virtual Task`1<MySqlSchemaCollection> GetDatabasesAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetTablesAsync>d__4")]
public virtual Task`1<MySqlSchemaCollection> GetTablesAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetColumnsAsync>d__5")]
public virtual Task`1<MySqlSchemaCollection> GetColumnsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetViewsAsync>d__6")]
private Task`1<MySqlSchemaCollection> GetViewsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetViewColumnsAsync>d__7")]
private Task`1<MySqlSchemaCollection> GetViewColumnsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetTriggersAsync>d__8")]
private Task`1<MySqlSchemaCollection> GetTriggersAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetProceduresAsync>d__9")]
public Task`1<MySqlSchemaCollection> GetProceduresAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetParametersForRoutineFromexecAsync>d__10")]
private Task`1<MySqlSchemaCollection> GetParametersForRoutineFromexecAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetProcedureParametersAsync>d__11")]
public virtual Task`1<MySqlSchemaCollection> GetProcedureParametersAsync(String[] restrictions, MySqlSchemaCollection routines, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetSchemaInternalAsync>d__12")]
protected virtual Task`1<MySqlSchemaCollection> GetSchemaInternalAsync(string collection, String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    private static string GetWhereClause(string initial_where, String[] keys, String[] values);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<QueryAsync>d__14")]
private Task`1<MySqlSchemaCollection> QueryAsync(string tableName, string initialWhere, String[] keys, String[] values, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetTableAsync>d__15")]
private Task`1<MySqlSchemaCollection> GetTableAsync(string sql, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetForeignKeysAsync>d__16")]
public virtual Task`1<MySqlSchemaCollection> GetForeignKeysAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ISSchemaProvider/<GetForeignKeyColumnsAsync>d__17")]
public virtual Task`1<MySqlSchemaCollection> GetForeignKeyColumnsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<MySqlSchemaCollection> <>n__0(string collection, String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<MySqlSchemaCollection> <>n__1(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<MySqlSchemaCollection> <>n__2(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
}
public enum MySql.Data.MySqlClient.KerberosAuthMode : Enum {
    public int value__;
    public static KerberosAuthMode AUTO;
    public static KerberosAuthMode SSPI;
    public static KerberosAuthMode GSSAPI;
}
public enum MySql.Data.MySqlClient.LockContention : Enum {
    public int value__;
    public static LockContention Default;
    public static LockContention NoWait;
    public static LockContention SkipLocked;
}
public class MySql.Data.MySqlClient.MySqlAttribute : object {
    private static int UNSIGNED_MASK;
    private string _attributeName;
    private object _attributeValue;
    private MySqlDbType _mySqlDbType;
    private int _size;
    [CompilerGeneratedAttribute]
private MySqlAttributeCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMySqlValue <ValueObject>k__BackingField;
    internal MySqlAttributeCollection Collection { get; internal set; }
    public string AttributeName { get; public set; }
    public object Value { get; public set; }
    public MySqlDbType MySqlDbType { get; public set; }
    internal IMySqlValue ValueObject { get; private set; }
    public MySqlAttribute(string attributeName, object attributeValue);
    [CompilerGeneratedAttribute]
internal MySqlAttributeCollection get_Collection();
    [CompilerGeneratedAttribute]
internal void set_Collection(MySqlAttributeCollection value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public object get_Value();
    public void set_Value(object value);
    public MySqlDbType get_MySqlDbType();
    public void set_MySqlDbType(MySqlDbType value);
    [CompilerGeneratedAttribute]
internal IMySqlValue get_ValueObject();
    [CompilerGeneratedAttribute]
private void set_ValueObject(IMySqlValue value);
    private void SetTypeFromValue();
    private void SetMySqlDbType(MySqlDbType mysqlDbtype);
    internal int GetPSType();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlAttribute/<SerializeAsync>d__27")]
internal Task SerializeAsync(MySqlPacket packet, bool binary, MySqlConnectionStringBuilder settings, bool execAsync);
    public MySqlAttribute Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlAttributeCollection : object {
    private List`1<MySqlAttribute> _items;
    public MySqlAttribute Item { get; }
    public int Count { get; }
    internal MySqlAttributeCollection(MySqlCommand cmd);
    public MySqlAttribute get_Item(int index);
    public int get_Count();
    public MySqlAttribute SetAttribute(MySqlAttribute value);
    public MySqlAttribute SetAttribute(string attributeName, object value);
    public void Clear();
    private MySqlAttribute InternalAdd(MySqlAttribute value);
    private void CheckIndex(int index);
    private MySqlAttribute InternalGetParameter(int index);
    public IEnumerator`1<MySqlAttribute> GetEnumerator();
}
public enum MySql.Data.MySqlClient.MySqlAuthenticationMode : Enum {
    public int value__;
    public static MySqlAuthenticationMode Default;
    public static MySqlAuthenticationMode AUTO;
    public static MySqlAuthenticationMode PLAIN;
    public static MySqlAuthenticationMode MYSQL41;
    public static MySqlAuthenticationMode EXTERNAL;
    public static MySqlAuthenticationMode SHA256_MEMORY;
}
public abstract class MySql.Data.MySqlClient.MySqlBaseConnectionStringBuilder : DbConnectionStringBuilder {
    internal static MySqlConnectionStringOptionCollection Options;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <values>k__BackingField;
    internal Dictionary`2<string, object> values { get; internal set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Server to connect to")]
[RefreshPropertiesAttribute("1")]
public string Server { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Database to use initially")]
[RefreshPropertiesAttribute("1")]
public string Database { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Connection Protocol")]
[DescriptionAttribute("Protocol to use for connection to MySQL")]
[RefreshPropertiesAttribute("1")]
public MySqlConnectionProtocol ConnectionProtocol { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Port to use for TCP/IP connections")]
[RefreshPropertiesAttribute("1")]
public UInt32 Port { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("DNS SRV")]
[DescriptionAttribute("The connection should resolve DNS SRV records.")]
[RefreshPropertiesAttribute("1")]
public bool DnsSrv { get; public set; }
    [CategoryAttribute("Security")]
[DisplayNameAttribute("User ID")]
[DescriptionAttribute("Indicates the user ID to be used when connecting to the data source.")]
[RefreshPropertiesAttribute("1")]
public string UserID { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Indicates the password to be used when connecting to the data source.")]
[RefreshPropertiesAttribute("1")]
[PasswordPropertyTextAttribute("True")]
public string Password { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Indicates the password for a second authentication to be used when connecting to the data source.")]
[RefreshPropertiesAttribute("1")]
[PasswordPropertyTextAttribute("True")]
public string Password2 { get; public set; }
    [CategoryAttribute("Security")]
[DescriptionAttribute("Indicates the password for a third authentication to be used when connecting to the data source.")]
[RefreshPropertiesAttribute("1")]
[PasswordPropertyTextAttribute("True")]
public string Password3 { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Certificate File")]
[DescriptionAttribute("Certificate file in PKCS#12 format (.pfx) or path to a local file that contains a list of trusted TLS/SSL CAs (.pem).")]
public string CertificateFile { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Certificate Password")]
[DescriptionAttribute("Password for certificate file")]
public string CertificatePassword { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Certificate Store Location")]
[DescriptionAttribute("Certificate Store Location for client certificates")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MySqlCertificateStoreLocation CertificateStoreLocation { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Certificate Thumbprint")]
[DescriptionAttribute("Certificate thumbprint. Can be used together with Certificate Store Location parameter to uniquely identify the certificate to be used for SSL authentication.")]
public string CertificateThumbprint { get; public set; }
    [DisplayNameAttribute("Ssl Mode")]
[CategoryAttribute("Authentication")]
[DescriptionAttribute("SSL properties for connection.")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MySqlSslMode SslMode { get; public set; }
    [DisplayNameAttribute("Ssl Ca")]
[CategoryAttribute("Authentication")]
[DescriptionAttribute("Path to a local file that contains a list of trusted TLS/SSL CAs.")]
public string SslCa { get; public set; }
    [DisplayNameAttribute("TLS version")]
[CategoryAttribute("Security")]
[DescriptionAttribute("TLS versions to use in a SSL connection to the server.")]
public string TlsVersion { get; public set; }
    [DisplayNameAttribute("Ssl Key")]
[CategoryAttribute("Authentication")]
[DescriptionAttribute("Name of the SSL key file in PEM format to use for establishing an encrypted connection.")]
public string SslKey { get; public set; }
    [DisplayNameAttribute("Ssl Cert")]
[CategoryAttribute("Authentication")]
[DescriptionAttribute("Name of the SSL certificate file in PEM format to use for establishing an encrypted connection.")]
public string SslCert { get; public set; }
    [DisplayNameAttribute("Keep Alive")]
[DescriptionAttribute("For TCP connections, the idle connection time (in seconds) before the first keepalive packet is sent.A value of 0 indicates that keepalive is not used.")]
[DefaultValueAttribute("0")]
public UInt32 Keepalive { get; public set; }
    [DisplayNameAttribute("Character Set")]
[CategoryAttribute("Advanced")]
[DescriptionAttribute("Character set this connection should use.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
public string CharacterSet { get; public set; }
    private static MySqlBaseConnectionStringBuilder();
    private static string TlsValidation(object value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, object> get_values();
    [CompilerGeneratedAttribute]
internal void set_values(Dictionary`2<string, object> value);
    public string get_Server();
    public void set_Server(string value);
    public string get_Database();
    public void set_Database(string value);
    public MySqlConnectionProtocol get_ConnectionProtocol();
    public void set_ConnectionProtocol(MySqlConnectionProtocol value);
    public UInt32 get_Port();
    public void set_Port(UInt32 value);
    public bool get_DnsSrv();
    public void set_DnsSrv(bool value);
    public string get_UserID();
    public void set_UserID(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Password2();
    public void set_Password2(string value);
    public string get_Password3();
    public void set_Password3(string value);
    public string get_CertificateFile();
    public void set_CertificateFile(string value);
    public string get_CertificatePassword();
    public void set_CertificatePassword(string value);
    public MySqlCertificateStoreLocation get_CertificateStoreLocation();
    public void set_CertificateStoreLocation(MySqlCertificateStoreLocation value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public MySqlSslMode get_SslMode();
    public void set_SslMode(MySqlSslMode value);
    public string get_SslCa();
    public void set_SslCa(string value);
    public string get_TlsVersion();
    public void set_TlsVersion(string value);
    public string get_SslKey();
    public void set_SslKey(string value);
    public string get_SslCert();
    public void set_SslCert(string value);
    public UInt32 get_Keepalive();
    public void set_Keepalive(UInt32 value);
    public string get_CharacterSet();
    public void set_CharacterSet(string value);
    internal void AnalyzeConnectionString(string connectionString, bool isXProtocol, bool isDefaultPort, bool isAnalyzed);
    public string GetConnectionString(bool includePass);
    internal abstract virtual MySqlConnectionStringOption GetOption(string key);
    public virtual int GetHashCode();
    internal void SetValue(string keyword, object value, string callerName);
    internal abstract virtual void SetInternalValue(string keyword, object value);
    public abstract virtual bool TryGetValue(string keyword, Object& value);
}
public class MySql.Data.MySqlClient.MySqlBulkLoader : object {
    private static string defaultFieldTerminator;
    private static string defaultLineTerminator;
    private static char defaultEscapeCharacter;
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfLinesToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private char <FieldQuotationCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FieldQuotationOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private char <EscapeCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlBulkLoaderConflictOption <ConflictOption>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlBulkLoaderPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Expressions>k__BackingField;
    public MySqlConnection Connection { get; public set; }
    public string FieldTerminator { get; public set; }
    public string LineTerminator { get; public set; }
    public string TableName { get; public set; }
    public string CharacterSet { get; public set; }
    public string FileName { get; public set; }
    public int Timeout { get; public set; }
    public bool Local { get; public set; }
    public int NumberOfLinesToSkip { get; public set; }
    public string LinePrefix { get; public set; }
    public char FieldQuotationCharacter { get; public set; }
    public bool FieldQuotationOptional { get; public set; }
    public char EscapeCharacter { get; public set; }
    public MySqlBulkLoaderConflictOption ConflictOption { get; public set; }
    public MySqlBulkLoaderPriority Priority { get; public set; }
    public List`1<string> Columns { get; }
    public List`1<string> Expressions { get; }
    public MySqlBulkLoader(MySqlConnection connection);
    [CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(MySqlConnection value);
    [CompilerGeneratedAttribute]
public string get_FieldTerminator();
    [CompilerGeneratedAttribute]
public void set_FieldTerminator(string value);
    [CompilerGeneratedAttribute]
public string get_LineTerminator();
    [CompilerGeneratedAttribute]
public void set_LineTerminator(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public void set_CharacterSet(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public int get_NumberOfLinesToSkip();
    [CompilerGeneratedAttribute]
public void set_NumberOfLinesToSkip(int value);
    [CompilerGeneratedAttribute]
public string get_LinePrefix();
    [CompilerGeneratedAttribute]
public void set_LinePrefix(string value);
    [CompilerGeneratedAttribute]
public char get_FieldQuotationCharacter();
    [CompilerGeneratedAttribute]
public void set_FieldQuotationCharacter(char value);
    [CompilerGeneratedAttribute]
public bool get_FieldQuotationOptional();
    [CompilerGeneratedAttribute]
public void set_FieldQuotationOptional(bool value);
    [CompilerGeneratedAttribute]
public char get_EscapeCharacter();
    [CompilerGeneratedAttribute]
public void set_EscapeCharacter(char value);
    [CompilerGeneratedAttribute]
public MySqlBulkLoaderConflictOption get_ConflictOption();
    [CompilerGeneratedAttribute]
public void set_ConflictOption(MySqlBulkLoaderConflictOption value);
    [CompilerGeneratedAttribute]
public MySqlBulkLoaderPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(MySqlBulkLoaderPriority value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public List`1<string> get_Expressions();
    public int Load();
    public int Load(Stream stream);
    public Task`1<int> LoadAsync();
    public Task`1<int> LoadAsync(Stream stream);
    public Task`1<int> LoadAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlBulkLoader/<LoadAsync>d__75")]
private Task`1<int> LoadAsync(Stream stream, bool execAsync, CancellationToken cancellationToken);
    private string BuildSqlCommand(bool useStream);
}
public enum MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption : Enum {
    public int value__;
    public static MySqlBulkLoaderConflictOption None;
    public static MySqlBulkLoaderConflictOption Replace;
    public static MySqlBulkLoaderConflictOption Ignore;
}
public enum MySql.Data.MySqlClient.MySqlBulkLoaderPriority : Enum {
    public int value__;
    public static MySqlBulkLoaderPriority None;
    public static MySqlBulkLoaderPriority Low;
    public static MySqlBulkLoaderPriority Concurrent;
}
public enum MySql.Data.MySqlClient.MySqlCertificateStoreLocation : Enum {
    public int value__;
    public static MySqlCertificateStoreLocation None;
    public static MySqlCertificateStoreLocation CurrentUser;
    public static MySqlCertificateStoreLocation LocalMachine;
}
public class MySql.Data.MySqlClient.MySqlClientFactory : DbProviderFactory {
    public static MySqlClientFactory Instance;
    private Type _dbServicesType;
    private FieldInfo _mySqlDbProviderServicesInstance;
    private Type DbServicesType { get; }
    private FieldInfo MySqlDbProviderServicesInstance { get; }
    private static MySqlClientFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbParameter CreateParameter();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    private Type get_DbServicesType();
    private FieldInfo get_MySqlDbProviderServicesInstance();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public class MySql.Data.MySqlClient.MySqlClientPermission : DBDataPermission {
    public MySqlClientPermission(PermissionState permissionState);
    private MySqlClientPermission(MySqlClientPermission permission);
    internal MySqlClientPermission(MySqlClientPermissionAttribute permissionAttribute);
    internal MySqlClientPermission(DBDataPermission permission);
    internal MySqlClientPermission(string connectionString);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class MySql.Data.MySqlClient.MySqlClientPermissionAttribute : DBDataPermissionAttribute {
    public MySqlClientPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
[DesignerCategoryAttribute("Code")]
public class MySql.Data.MySqlClient.MySqlCommand : DbCommand {
    private MySqlConnection connection;
    private string cmdText;
    private string originalcmdText;
    private PreparableStatement statement;
    private int commandTimeout;
    private bool resetSqlSelect;
    private CommandTimer commandTimer;
    private bool useDefaultTimeout;
    private static List`1<string> keywords;
    private bool disposed;
    internal static string ParameterPrefix;
    [CompilerGeneratedAttribute]
private long <LastInsertedId>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlParameterCollection <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlAttributeCollection <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CacheAge>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MySqlCommand> <Batch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchableCommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InternallyCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateRowSource <UpdatedRowSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutSql>k__BackingField;
    private IAsyncResult asyncResult;
    internal AsyncDelegate Caller;
    internal Exception thrownException;
    [BrowsableAttribute("False")]
public long LastInsertedId { get; internal set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("Command text to execute")]
public string CommandText { get; public set; }
    internal string OriginalCommandText { get; internal set; }
    [CategoryAttribute("Misc")]
[DescriptionAttribute("Time to wait for command to execute")]
[DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [CategoryAttribute("Data")]
public CommandType CommandType { get; public set; }
    [BrowsableAttribute("False")]
public bool IsPrepared { get; }
    [CategoryAttribute("Behavior")]
[DescriptionAttribute("Connection used by the command")]
public MySqlConnection Connection { get; public set; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("The parameters collection")]
[DesignerSerializationVisibilityAttribute("2")]
public MySqlParameterCollection Parameters { get; }
    [CategoryAttribute("Data")]
[DescriptionAttribute("The attributes collection")]
[DesignerSerializationVisibilityAttribute("2")]
public MySqlAttributeCollection Attributes { get; }
    [BrowsableAttribute("False")]
public MySqlTransaction Transaction { get; public set; }
    public bool EnableCaching { get; public set; }
    public int CacheAge { get; public set; }
    internal List`1<MySqlCommand> Batch { get; private set; }
    internal bool Canceled { get; private set; }
    internal string BatchableCommandText { get; private set; }
    internal bool InternallyCreated { get; internal set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    [BrowsableAttribute("False")]
public bool DesignTimeVisible { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    internal string OutSql { get; internal set; }
    public MySqlCommand(string cmdText);
    public MySqlCommand(string cmdText, MySqlConnection connection);
    public MySqlCommand(string cmdText, MySqlConnection connection, MySqlTransaction transaction);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public long get_LastInsertedId();
    [CompilerGeneratedAttribute]
internal void set_LastInsertedId(long value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    internal string get_OriginalCommandText();
    internal void set_OriginalCommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    public bool get_IsPrepared();
    public MySqlConnection get_Connection();
    public void set_Connection(MySqlConnection value);
    [CompilerGeneratedAttribute]
public MySqlParameterCollection get_Parameters();
    [CompilerGeneratedAttribute]
public MySqlAttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
public MySqlTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(MySqlTransaction value);
    [CompilerGeneratedAttribute]
public bool get_EnableCaching();
    [CompilerGeneratedAttribute]
public void set_EnableCaching(bool value);
    [CompilerGeneratedAttribute]
public int get_CacheAge();
    [CompilerGeneratedAttribute]
public void set_CacheAge(int value);
    [CompilerGeneratedAttribute]
internal List`1<MySqlCommand> get_Batch();
    [CompilerGeneratedAttribute]
private void set_Batch(List`1<MySqlCommand> value);
    [CompilerGeneratedAttribute]
internal bool get_Canceled();
    [CompilerGeneratedAttribute]
private void set_Canceled(bool value);
    [CompilerGeneratedAttribute]
internal string get_BatchableCommandText();
    [CompilerGeneratedAttribute]
private void set_BatchableCommandText(string value);
    [CompilerGeneratedAttribute]
internal bool get_InternallyCreated();
    [CompilerGeneratedAttribute]
internal void set_InternallyCreated(bool value);
    [CompilerGeneratedAttribute]
public virtual UpdateRowSource get_UpdatedRowSource();
    [CompilerGeneratedAttribute]
public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [CompilerGeneratedAttribute]
internal string get_OutSql();
    [CompilerGeneratedAttribute]
internal void set_OutSql(string value);
    public virtual void Cancel();
    public MySqlParameter CreateParameter();
    private void CheckState();
    internal void ProcessOutputParameters(MySqlDataReader reader);
    private void AdjustOutputTypes(MySqlDataReader reader);
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<ExecuteNonQueryAsync>d__100")]
internal Task`1<int> ExecuteNonQueryAsync(bool execAsync, CancellationToken cancellationToken);
    internal void ClearCommandTimer();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<CloseAsync>d__102")]
internal Task CloseAsync(MySqlDataReader reader, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<ResetReaderAsync>d__103")]
private Task ResetReaderAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<ResetSqlSelectLimitAsync>d__104")]
internal Task ResetSqlSelectLimitAsync(bool execAsync);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public MySqlDataReader ExecuteReader();
    public MySqlDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<MySqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<MySqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<ExecuteDbDataReaderAsync>d__110")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<ExecuteReaderAsync>d__111")]
internal Task`1<MySqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, bool execAsync, CancellationToken cancellationToken);
    private void EnsureCommandIsReadOnly(string sql);
    private bool IsReadOnlyCommand(string sql);
    public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<ExecuteScalarAsync>d__116")]
internal Task`1<object> ExecuteScalarAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<HandleCommandBehaviorsAsync>d__117")]
private Task HandleCommandBehaviorsAsync(bool execAsync, CommandBehavior behavior);
    public virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlCommand/<PrepareAsync>d__120")]
private Task PrepareAsync(bool execAsync, CancellationToken cancellationToken);
    public sealed virtual object Clone();
    [ObsoleteAttribute]
internal object AsyncExecuteWrapper(int type, CommandBehavior behavior);
    [ObsoleteAttribute]
public IAsyncResult BeginExecuteReader();
    [ObsoleteAttribute]
public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    [ObsoleteAttribute]
public MySqlDataReader EndExecuteReader(IAsyncResult result);
    [ObsoleteAttribute]
public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    [ObsoleteAttribute]
public IAsyncResult BeginExecuteNonQuery();
    [ObsoleteAttribute]
public int EndExecuteNonQuery(IAsyncResult asyncResult);
    internal long EstimatedSize();
    internal void AddToBatch(MySqlCommand command);
    internal string GetCommandTextForBatching();
    private void Throw(Exception ex);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
}
[ToolboxItemAttribute("False")]
[DesignerCategoryAttribute("Code")]
public class MySql.Data.MySqlClient.MySqlCommandBuilder : DbCommandBuilder {
    public MySqlDataAdapter DataAdapter { get; public set; }
    public MySqlCommandBuilder(MySqlDataAdapter adapter);
    public MySqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(MySqlDataAdapter value);
    public static void DeriveParameters(MySqlCommand command);
    private static List`1<string> GetPossibleValues(MySqlSchemaRow row);
    private static ParameterDirection GetDirection(MySqlSchemaRow row);
    public MySqlCommand GetDeleteCommand();
    public MySqlCommand GetUpdateCommand();
    public MySqlCommand GetInsertCommand();
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    protected virtual string GetParameterName(string parameterName);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdating(object sender, MySqlRowUpdatingEventArgs args);
}
public class MySql.Data.MySqlClient.MySqlConfiguration : ConfigurationSection {
    private static MySqlConfiguration settings;
    public static MySqlConfiguration Settings { get; }
    [ConfigurationPropertyAttribute("ExceptionInterceptors")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.InterceptorConfigurationElement")]
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> ExceptionInterceptors { get; }
    [ConfigurationPropertyAttribute("CommandInterceptors")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.InterceptorConfigurationElement")]
public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> CommandInterceptors { get; }
    [ConfigurationPropertyAttribute("AuthenticationPlugins")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.AuthenticationPluginConfigurationElement")]
public GenericConfigurationElementCollection`1<AuthenticationPluginConfigurationElement> AuthenticationPlugins { get; }
    [ConfigurationPropertyAttribute("Replication")]
public ReplicationConfigurationElement Replication { get; public set; }
    private static MySqlConfiguration();
    public static MySqlConfiguration get_Settings();
    public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> get_ExceptionInterceptors();
    public GenericConfigurationElementCollection`1<InterceptorConfigurationElement> get_CommandInterceptors();
    public GenericConfigurationElementCollection`1<AuthenticationPluginConfigurationElement> get_AuthenticationPlugins();
    public ReplicationConfigurationElement get_Replication();
    public void set_Replication(ReplicationConfigurationElement value);
}
internal class MySql.Data.MySqlClient.MySqlConnectAttrs : object {
    private static string _version;
    private static string _os;
    private static string _platform;
    private static string _osName;
    private static string _framework;
    [DisplayNameAttribute("_client_name")]
public string ClientName { get; }
    [DisplayNameAttribute("_client_licence")]
public string ClientLicence { get; }
    [DisplayNameAttribute("_pid")]
public string PID { get; }
    [DisplayNameAttribute("_client_version")]
public string ClientVersion { get; }
    [DisplayNameAttribute("_os")]
public string OS { get; }
    [DisplayNameAttribute("_thread")]
public string Thread { get; }
    [DisplayNameAttribute("_platform")]
public string Platform { get; }
    [DisplayNameAttribute("_os")]
public string OSName { get; }
    [DisplayNameAttribute("_framework")]
public string Framework { get; }
    private static MySqlConnectAttrs();
    public string get_ClientName();
    public string get_ClientLicence();
    public string get_PID();
    public string get_ClientVersion();
    public string get_OS();
    public string get_Thread();
    public string get_Platform();
    public string get_OSName();
    public string get_Framework();
    private static void InitVersion();
    private static void InitOS();
    private static void InitPlatform();
    private static bool Is64BitOS();
    private static void InitOSName();
    private static void InitFramework();
}
[DesignerCategoryAttribute("Code")]
[ToolboxItemAttribute("True")]
public class MySql.Data.MySqlClient.MySqlConnection : DbConnection {
    internal ConnectionState connectionState;
    internal Driver driver;
    internal bool hasBeenOpen;
    internal bool hasBeenDisposed;
    private SchemaProvider _schemaProvider;
    private ExceptionInterceptor _exceptionInterceptor;
    internal CommandInterceptor commandInterceptor;
    private bool _isKillQueryConnection;
    private string _database;
    private int _commandTimeout;
    [CompilerGeneratedAttribute]
private WebAuthnActionCallback WebAuthnActionRequested;
    [CompilerGeneratedAttribute]
private MySqlInfoMessageEventHandler InfoMessage;
    private static Cache`2<string, MySqlConnectionStringBuilder> ConnectionStringCache;
    [CompilerGeneratedAttribute]
private PerformanceMonitor <PerfMonitor>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcedureCache <ProcedureCache>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClone>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ParentHasbeenOpen>k__BackingField;
    internal bool IsConnectionStringAnalyzed;
    internal PerformanceMonitor PerfMonitor { get; private set; }
    internal ProcedureCache ProcedureCache { get; private set; }
    internal MySqlConnectionStringBuilder Settings { get; private set; }
    internal MySqlDataReader Reader { get; internal set; }
    internal bool SoftClosed { get; }
    internal bool IsInUse { get; internal set; }
    internal bool IsClone { get; internal set; }
    internal bool ParentHasbeenOpen { get; internal set; }
    [BrowsableAttribute("False")]
public int ServerThread { get; }
    [BrowsableAttribute("True")]
public string DataSource { get; }
    [BrowsableAttribute("True")]
public int ConnectionTimeout { get; }
    [BrowsableAttribute("True")]
public string Database { get; }
    [BrowsableAttribute("False")]
public bool UseCompression { get; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    [BrowsableAttribute("True")]
public bool IsDisposed { get; }
    [BrowsableAttribute("False")]
public string ServerVersion { get; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Data")]
[DescriptionAttribute("Information used to connect to a DataSource, such as 'Server=xxx;UserId=yyy;Password=zzz;Database=dbdb'.")]
public string ConnectionString { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public bool IsPasswordExpired { get; }
    public MySqlConnection(string connectionString);
    private static MySqlConnection();
    [CompilerGeneratedAttribute]
public void add_WebAuthnActionRequested(WebAuthnActionCallback value);
    [CompilerGeneratedAttribute]
public void remove_WebAuthnActionRequested(WebAuthnActionCallback value);
    [CompilerGeneratedAttribute]
public void add_InfoMessage(MySqlInfoMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(MySqlInfoMessageEventHandler value);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
internal PerformanceMonitor get_PerfMonitor();
    [CompilerGeneratedAttribute]
private void set_PerfMonitor(PerformanceMonitor value);
    [CompilerGeneratedAttribute]
internal ProcedureCache get_ProcedureCache();
    [CompilerGeneratedAttribute]
private void set_ProcedureCache(ProcedureCache value);
    [CompilerGeneratedAttribute]
internal MySqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(MySqlConnectionStringBuilder value);
    internal MySqlDataReader get_Reader();
    internal void set_Reader(MySqlDataReader value);
    internal void OnInfoMessage(MySqlInfoMessageEventArgs args);
    internal bool get_SoftClosed();
    [CompilerGeneratedAttribute]
internal bool get_IsInUse();
    [CompilerGeneratedAttribute]
internal void set_IsInUse(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsClone();
    [CompilerGeneratedAttribute]
internal void set_IsClone(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ParentHasbeenOpen();
    [CompilerGeneratedAttribute]
internal void set_ParentHasbeenOpen(bool value);
    public int get_ServerThread();
    public virtual string get_DataSource();
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public bool get_UseCompression();
    public virtual ConnectionState get_State();
    public bool get_IsDisposed();
    public virtual string get_ServerVersion();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    protected virtual DbProviderFactory get_DbProviderFactory();
    public bool get_IsPasswordExpired();
    protected virtual DbCommand CreateDbCommand();
    internal void SetState(ConnectionState newConnectionState, bool broadcast);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<DisposeAsync>d__78")]
public virtual ValueTask DisposeAsync();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public MySqlTransaction BeginTransaction();
    public MySqlTransaction BeginTransaction(IsolationLevel isolationLevel, string scope);
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync();
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync(IsolationLevel isolationLevel);
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<BeginDbTransactionAsync>d__86")]
protected virtual ValueTask`1<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<BeginTransactionAsync>d__87")]
private ValueTask`1<MySqlTransaction> BeginTransactionAsync(bool execAsync, IsolationLevel isolationLevel, CancellationToken cancellationToken, string scope);
    public virtual void ChangeDatabase(string databaseName);
    public virtual Task ChangeDatabaseAsync(string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<ChangeDatabaseAsync>d__90")]
internal Task ChangeDatabaseAsync(string databaseName, bool execAsync, CancellationToken cancellationToken);
    public bool Ping();
    public Task`1<bool> PingAsync();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<PingAsync>d__93")]
private Task`1<bool> PingAsync(bool execAsync);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<OpenAsync>d__96")]
internal Task OpenAsync(bool execAsync, CancellationToken cancellationToken);
    public MySqlCommand CreateCommand();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<AbortAsync>d__98")]
internal Task AbortAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<CloseFullyAsync>d__99")]
internal Task CloseFullyAsync(bool execAsync);
    public virtual void Close();
    public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<CloseAsync>d__102")]
internal Task CloseAsync(bool execAsync);
    internal string CurrentDatabase();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<HandleTimeoutOrThreadAbortAsync>d__104")]
internal Task HandleTimeoutOrThreadAbortAsync(Exception ex, bool execAsync, CancellationToken cancellationToken);
    public void CancelQuery(int timeout);
    public Task CancelQueryAsync(int timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<CancelQueryAsync>d__107")]
private Task CancelQueryAsync(int timeout, bool execAsync, CancellationToken cancellationToken);
    internal void Throw(Exception ex);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public Task`1<DataTable> GetSchemaAsync(CancellationToken cancellationToken);
    public Task`1<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken);
    public Task`1<DataTable> GetSchemaAsync(string collectionName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<GetSchemaAsync>d__115")]
internal Task`1<DataTable> GetSchemaAsync(bool execAsync, string collectionName, String[] restrictionValues, CancellationToken cancellationToken);
    public MySqlSchemaCollection GetSchemaCollection(string collectionName, String[] restrictionValues);
    public Task`1<MySqlSchemaCollection> GetSchemaCollectionAsync(string collectionName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<GetSchemaCollectionAsync>d__118")]
private Task`1<MySqlSchemaCollection> GetSchemaCollectionAsync(string collectionName, String[] restrictionValues, bool execAsync, CancellationToken cancellationToken);
    public virtual void EnlistTransaction(Transaction transaction);
    private void AssertPermissions();
    public sealed virtual object Clone();
    public MySqlConnection CloneWith(string connectionString);
    internal bool SetCommandTimeout(int value);
    internal void ClearCommandTimeout();
    public static void ClearPool(MySqlConnection connection);
    public Task ClearPoolAsync(MySqlConnection connection, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<ClearPoolAsync>d__127")]
private static Task ClearPoolAsync(MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
    public static void ClearAllPools();
    public Task ClearAllPoolsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlConnection/<ClearAllPoolsAsync>d__130")]
private static Task ClearAllPoolsAsync(bool execAsync);
}
public enum MySql.Data.MySqlClient.MySqlConnectionProtocol : Enum {
    public int value__;
    public static MySqlConnectionProtocol Sockets;
    public static MySqlConnectionProtocol Socket;
    public static MySqlConnectionProtocol Tcp;
    public static MySqlConnectionProtocol Pipe;
    public static MySqlConnectionProtocol NamedPipe;
    public static MySqlConnectionProtocol UnixSocket;
    public static MySqlConnectionProtocol Unix;
    public static MySqlConnectionProtocol SharedMemory;
    public static MySqlConnectionProtocol Memory;
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlConnectionStringBuilder : MySqlBaseConnectionStringBuilder {
    internal static MySqlConnectionStringOptionCollection Options;
    [CompilerGeneratedAttribute]
private WebAuthnActionCallback <WebAuthnActionRequested>k__BackingField;
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Pipe Name")]
[DescriptionAttribute("Name of pipe to use when connecting with named pipes (Win32 only)")]
[RefreshPropertiesAttribute("1")]
public string PipeName { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Use Compression")]
[DescriptionAttribute("Should the connection use compression")]
[RefreshPropertiesAttribute("1")]
public bool UseCompression { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Allow Batch")]
[DescriptionAttribute("Allows execution of multiple SQL commands in a single statement")]
[RefreshPropertiesAttribute("1")]
public bool AllowBatch { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("Enables output of diagnostic messages")]
[RefreshPropertiesAttribute("1")]
public bool Logging { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Shared Memory Name")]
[DescriptionAttribute("Name of the shared memory object to use")]
[RefreshPropertiesAttribute("1")]
public string SharedMemoryName { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Default Command Timeout")]
[DescriptionAttribute("The default timeout that MySqlCommand objects will use
                     unless changed.")]
[RefreshPropertiesAttribute("1")]
public UInt32 DefaultCommandTimeout { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Connect Timeout")]
[DescriptionAttribute("The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.")]
[RefreshPropertiesAttribute("1")]
public UInt32 ConnectionTimeout { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Allow Load Data Local Infile")]
[DescriptionAttribute("Allows reading data from a text file.")]
[RefreshPropertiesAttribute("1")]
public bool AllowLoadLocalInfile { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Allow Load Local Infile In Path")]
[DescriptionAttribute("Allows specifying a safe path to read and upload files to server.")]
[RefreshPropertiesAttribute("1")]
public string AllowLoadLocalInfileInPath { get; public set; }
    [CategoryAttribute("Security")]
[DisplayNameAttribute("Persist Security Info")]
[DescriptionAttribute("When false, security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
[RefreshPropertiesAttribute("1")]
public bool PersistSecurityInfo { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Integrated Security")]
[DescriptionAttribute("Use windows authentication when connecting to server")]
[DefaultValueAttribute("False")]
public bool IntegratedSecurity { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("AllowPublicKeyRetrieval")]
[DescriptionAttribute("Allow retrieval of RSA public keys from server when SSL is disabled.")]
[DefaultValueAttribute("False")]
public bool AllowPublicKeyRetrieval { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("DefaultAuthenticationPlugin")]
[DescriptionAttribute("Enables the setting of an authentication plugin that takes precedence over the server-sidedefault authentication plugin.")]
public string DefaultAuthenticationPlugin { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("OciConfigFile")]
[DescriptionAttribute("Specifies the OCI configuration file location.")]
public string OciConfigFile { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("OciConfigProfile")]
[DescriptionAttribute("Specifies the profile to use from the OCI configuration file location.")]
public string OciConfigProfile { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("KerberosAuthMode")]
[DescriptionAttribute("Specifies the API to use during Kerberos authentication.")]
public KerberosAuthMode KerberosAuthMode { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Allow Zero Datetime")]
[DescriptionAttribute("Should zero datetimes be supported")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool AllowZeroDateTime { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Convert Zero Datetime")]
[DescriptionAttribute("Should illegal datetime values be converted to DateTime.MinValue")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool ConvertZeroDateTime { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Use Usage Advisor")]
[DescriptionAttribute("Logs inefficient database operations")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool UseUsageAdvisor { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Procedure Cache Size")]
[DescriptionAttribute("Indicates how many stored procedures can be cached at one time. A value of 0 effectively disables the procedure cache.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("25")]
public UInt32 ProcedureCacheSize { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Use Performance Monitor")]
[DescriptionAttribute("Indicates that performance counters should be updated during execution.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool UsePerformanceMonitor { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Auto Enlist")]
[DescriptionAttribute("Should the connetion automatically enlist in the active connection, if there are any.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
public bool AutoEnlist { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Include Security Asserts")]
[DescriptionAttribute("Include security asserts to support Medium Trust")]
[DefaultValueAttribute("False")]
public bool IncludeSecurityAsserts { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Respect Binary Flags")]
[DescriptionAttribute("Should binary flags on column metadata be respected.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
public bool RespectBinaryFlags { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Treat Tiny As Boolean")]
[DescriptionAttribute("Should the provider treat TINYINT(1) columns as boolean.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
public bool TreatTinyAsBoolean { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Allow User Variables")]
[DescriptionAttribute("Should the provider expect user variables to appear in the SQL.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool AllowUserVariables { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Interactive Session")]
[DescriptionAttribute("Should this session be considered interactive?")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool InteractiveSession { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Functions Return String")]
[DescriptionAttribute("Should all server functions be treated as returning string?")]
[DefaultValueAttribute("False")]
public bool FunctionsReturnString { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Use Affected Rows")]
[DescriptionAttribute("Should the returned affected row count reflect affected rows instead of found rows?")]
[DefaultValueAttribute("False")]
public bool UseAffectedRows { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Old Guids")]
[DescriptionAttribute("Treat binary(16) columns as guids")]
[DefaultValueAttribute("False")]
public bool OldGuids { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Sql Server Mode")]
[DescriptionAttribute("Allow Sql Server syntax.  A value of yes allows symbols to be enclosed with [] instead of ``.  This does incur a performance hit so only use when necessary.")]
[DefaultValueAttribute("False")]
public bool SqlServerMode { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Table Cache")]
[DescriptionAttribute("Enables or disables caching of TableDirect command.  
            A value of yes enables the cache while no disables it.")]
[DefaultValueAttribute("False")]
public bool TableCaching { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Default Table Cache Age")]
[DescriptionAttribute("Specifies how long a TableDirect result should be cached in seconds.")]
[DefaultValueAttribute("60")]
public int DefaultTableCacheAge { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Check Parameters")]
[DescriptionAttribute("Indicates if stored routine parameters should be checked against the server.")]
[DefaultValueAttribute("True")]
public bool CheckParameters { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Replication")]
[DescriptionAttribute("Indicates if this connection is to use replicated servers.")]
[DefaultValueAttribute("False")]
public bool Replication { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Exception Interceptors")]
[DescriptionAttribute("The list of interceptors that can triage thrown MySqlExceptions.")]
public string ExceptionInterceptors { get; public set; }
    [CategoryAttribute("Advanced")]
[DisplayNameAttribute("Command Interceptors")]
[DescriptionAttribute("The list of interceptors that can intercept command operations.")]
public string CommandInterceptors { get; public set; }
    internal WebAuthnActionCallback WebAuthnActionRequested { get; internal set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Connection Lifetime")]
[DescriptionAttribute("The minimum amount of time (in seconds) for this connection to live in the pool before being destroyed.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public UInt32 ConnectionLifeTime { get; public set; }
    [CategoryAttribute("Pooling")]
[DescriptionAttribute("When true, the connection object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("True")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Minimum Pool Size")]
[DescriptionAttribute("The minimum number of connections allowed in the pool.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("0")]
public UInt32 MinimumPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Maximum Pool Size")]
[DescriptionAttribute("The maximum number of connections allowed in the pool.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("100")]
public UInt32 MaximumPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Connection Reset")]
[DescriptionAttribute("When true, indicates the connection state is reset when removed from the pool.")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool ConnectionReset { get; public set; }
    [CategoryAttribute("Pooling")]
[DisplayNameAttribute("Cache Server Properties")]
[DescriptionAttribute("When true, server properties will be cached after the first server in the pool is created")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool CacheServerProperties { get; public set; }
    [DisplayNameAttribute("Treat Blobs As UTF8")]
[CategoryAttribute("Advanced")]
[DescriptionAttribute("Should binary blobs be treated as UTF8")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool TreatBlobsAsUTF8 { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Pattern that matches columns that should be treated as UTF8")]
[RefreshPropertiesAttribute("1")]
public string BlobAsUTF8IncludePattern { get; public set; }
    [CategoryAttribute("Advanced")]
[DescriptionAttribute("Pattern that matches columns that should not be treated as UTF8")]
[RefreshPropertiesAttribute("1")]
public string BlobAsUTF8ExcludePattern { get; public set; }
    [DisplayNameAttribute("Use Default Command Timeout For EF")]
[CategoryAttribute("Backwards Compatibility")]
[DescriptionAttribute("Enforces the command timeout of EFMySqlCommand to the value provided in 'DefaultCommandTimeout' property")]
[DefaultValueAttribute("False")]
public bool UseDefaultCommandTimeoutForEF { get; public set; }
    public object Item { get; public set; }
    private static MySqlConnectionStringBuilder();
    public MySqlConnectionStringBuilder(string connectionString, bool isAnalyzed);
    public string get_PipeName();
    public void set_PipeName(string value);
    public bool get_UseCompression();
    public void set_UseCompression(bool value);
    public bool get_AllowBatch();
    public void set_AllowBatch(bool value);
    public bool get_Logging();
    public void set_Logging(bool value);
    public string get_SharedMemoryName();
    public void set_SharedMemoryName(string value);
    public UInt32 get_DefaultCommandTimeout();
    public void set_DefaultCommandTimeout(UInt32 value);
    public UInt32 get_ConnectionTimeout();
    public void set_ConnectionTimeout(UInt32 value);
    public bool get_AllowLoadLocalInfile();
    public void set_AllowLoadLocalInfile(bool value);
    public string get_AllowLoadLocalInfileInPath();
    public void set_AllowLoadLocalInfileInPath(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public bool get_AllowPublicKeyRetrieval();
    public void set_AllowPublicKeyRetrieval(bool value);
    public string get_DefaultAuthenticationPlugin();
    public void set_DefaultAuthenticationPlugin(string value);
    public string get_OciConfigFile();
    public void set_OciConfigFile(string value);
    public string get_OciConfigProfile();
    public void set_OciConfigProfile(string value);
    public KerberosAuthMode get_KerberosAuthMode();
    public void set_KerberosAuthMode(KerberosAuthMode value);
    public bool get_AllowZeroDateTime();
    public void set_AllowZeroDateTime(bool value);
    public bool get_ConvertZeroDateTime();
    public void set_ConvertZeroDateTime(bool value);
    public bool get_UseUsageAdvisor();
    public void set_UseUsageAdvisor(bool value);
    public UInt32 get_ProcedureCacheSize();
    public void set_ProcedureCacheSize(UInt32 value);
    public bool get_UsePerformanceMonitor();
    public void set_UsePerformanceMonitor(bool value);
    public bool get_AutoEnlist();
    public void set_AutoEnlist(bool value);
    public bool get_IncludeSecurityAsserts();
    public void set_IncludeSecurityAsserts(bool value);
    public bool get_RespectBinaryFlags();
    public void set_RespectBinaryFlags(bool value);
    public bool get_TreatTinyAsBoolean();
    public void set_TreatTinyAsBoolean(bool value);
    public bool get_AllowUserVariables();
    public void set_AllowUserVariables(bool value);
    public bool get_InteractiveSession();
    public void set_InteractiveSession(bool value);
    public bool get_FunctionsReturnString();
    public void set_FunctionsReturnString(bool value);
    public bool get_UseAffectedRows();
    public void set_UseAffectedRows(bool value);
    public bool get_OldGuids();
    public void set_OldGuids(bool value);
    public bool get_SqlServerMode();
    public void set_SqlServerMode(bool value);
    public bool get_TableCaching();
    public void set_TableCaching(bool value);
    public int get_DefaultTableCacheAge();
    public void set_DefaultTableCacheAge(int value);
    public bool get_CheckParameters();
    public void set_CheckParameters(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_ExceptionInterceptors();
    public void set_ExceptionInterceptors(string value);
    public string get_CommandInterceptors();
    public void set_CommandInterceptors(string value);
    [CompilerGeneratedAttribute]
internal WebAuthnActionCallback get_WebAuthnActionRequested();
    [CompilerGeneratedAttribute]
internal void set_WebAuthnActionRequested(WebAuthnActionCallback value);
    public UInt32 get_ConnectionLifeTime();
    public void set_ConnectionLifeTime(UInt32 value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public UInt32 get_MinimumPoolSize();
    public void set_MinimumPoolSize(UInt32 value);
    public UInt32 get_MaximumPoolSize();
    public void set_MaximumPoolSize(UInt32 value);
    public bool get_ConnectionReset();
    public void set_ConnectionReset(bool value);
    public bool get_CacheServerProperties();
    public void set_CacheServerProperties(bool value);
    public bool get_TreatBlobsAsUTF8();
    public void set_TreatBlobsAsUTF8(bool value);
    public string get_BlobAsUTF8IncludePattern();
    public void set_BlobAsUTF8IncludePattern(string value);
    public string get_BlobAsUTF8ExcludePattern();
    public void set_BlobAsUTF8ExcludePattern(string value);
    public bool get_UseDefaultCommandTimeoutForEF();
    public void set_UseDefaultCommandTimeoutForEF(bool value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Equals(object obj);
    internal Regex GetBlobAsUTF8IncludeRegex();
    internal Regex GetBlobAsUTF8ExcludeRegex();
    internal virtual MySqlConnectionStringOption GetOption(string key);
    public virtual bool Remove(string keyword);
    internal virtual void SetInternalValue(string keyword, object value);
    public virtual bool TryGetValue(string keyword, Object& value);
}
[DesignerCategoryAttribute("Code")]
[DesignerAttribute("MySql.Data.MySqlClient.Design.MySqlDataAdapterDesigner,MySqlClient.Design")]
public class MySql.Data.MySqlClient.MySqlDataAdapter : DbDataAdapter {
    private bool loadingDefaults;
    private int updateBatchSize;
    private List`1<IDbCommand> commandBatch;
    [CompilerGeneratedAttribute]
private MySqlRowUpdatingEventHandler RowUpdating;
    [CompilerGeneratedAttribute]
private MySqlRowUpdatedEventHandler RowUpdated;
    [DescriptionAttribute("Used during Update for deleted rows in Dataset.")]
public MySqlCommand DeleteCommand { get; public set; }
    [DescriptionAttribute("Used during Update for new rows in Dataset.")]
public MySqlCommand InsertCommand { get; public set; }
    [DescriptionAttribute("Used during Fill/FillSchema")]
[CategoryAttribute("Fill")]
public MySqlCommand SelectCommand { get; public set; }
    [DescriptionAttribute("Used during Update for modified rows in Dataset.")]
public MySqlCommand UpdateCommand { get; public set; }
    internal bool LoadDefaults { get; internal set; }
    public int UpdateBatchSize { get; public set; }
    public MySqlDataAdapter(MySqlCommand selectCommand);
    public MySqlDataAdapter(string selectCommandText, MySqlConnection connection);
    public MySqlDataAdapter(string selectCommandText, string selectConnString);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(MySqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(MySqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(MySqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(MySqlRowUpdatedEventHandler value);
    public MySqlCommand get_DeleteCommand();
    public void set_DeleteCommand(MySqlCommand value);
    public MySqlCommand get_InsertCommand();
    public void set_InsertCommand(MySqlCommand value);
    public MySqlCommand get_SelectCommand();
    public void set_SelectCommand(MySqlCommand value);
    public MySqlCommand get_UpdateCommand();
    public void set_UpdateCommand(MySqlCommand value);
    internal bool get_LoadDefaults();
    internal void set_LoadDefaults(bool value);
    private void OpenConnectionIfClosed(DataRowState state, List`1<MySqlConnection> openedConnections);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    protected virtual void InitializeBatching();
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual int ExecuteBatch();
    protected virtual void ClearBatch();
    protected virtual void TerminateBatching();
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    public Task`1<int> FillAsync(DataSet dataSet);
    public Task`1<int> FillAsync(DataSet dataSet, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataTable dataTable);
    public Task`1<int> FillAsync(DataTable dataTable, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataSet dataSet, string srcTable);
    public Task`1<int> FillAsync(DataSet dataSet, string srcTable, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataTable dataTable, IDataReader dataReader);
    public Task`1<int> FillAsync(DataTable dataTable, IDataReader dataReader, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataTable dataTable, IDbCommand command, CommandBehavior behavior);
    public Task`1<int> FillAsync(DataTable dataTable, IDbCommand command, CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(int startRecord, int maxRecords, DataTable[] dataTables);
    public Task`1<int> FillAsync(int startRecord, int maxRecords, CancellationToken cancellationToken, DataTable[] dataTables);
    public Task`1<int> FillAsync(DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    public Task`1<int> FillAsync(DataSet dataSet, int startRecord, int maxRecords, string srcTable, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords);
    public Task`1<int> FillAsync(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);
    public Task`1<int> FillAsync(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<int> FillAsync(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    public Task`1<int> FillAsync(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, CancellationToken cancellationToken);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, string srcTable);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, string srcTable, CancellationToken cancellationToken);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader, CancellationToken cancellationToken);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    public Task`1<DataTable[]> FillSchemaAsync(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<DataTable> FillSchemaAsync(DataTable dataTable, SchemaType schemaType);
    public Task`1<DataTable> FillSchemaAsync(DataTable dataTable, SchemaType schemaType, CancellationToken cancellationToken);
    public Task`1<DataTable> FillSchemaAsync(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);
    public Task`1<DataTable> FillSchemaAsync(DataTable dataTable, SchemaType schemaType, IDataReader dataReader, CancellationToken cancellationToken);
    public Task`1<DataTable> FillSchemaAsync(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);
    public Task`1<DataTable> FillSchemaAsync(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<int> UpdateAsync(DataRow[] dataRows);
    public Task`1<int> UpdateAsync(DataRow[] dataRows, CancellationToken cancellationToken);
    public Task`1<int> UpdateAsync(DataSet dataSet);
    public Task`1<int> UpdateAsync(DataSet dataSet, CancellationToken cancellationToken);
    public Task`1<int> UpdateAsync(DataTable dataTable);
    public Task`1<int> UpdateAsync(DataTable dataTable, CancellationToken cancellationToken);
    public Task`1<int> UpdateAsync(DataRow[] dataRows, DataTableMapping tableMapping);
    public Task`1<int> UpdateAsync(DataRow[] dataRows, DataTableMapping tableMapping, CancellationToken cancellationToken);
    public Task`1<int> UpdateAsync(DataSet dataSet, string srcTable);
    public Task`1<int> UpdateAsync(DataSet dataSet, string srcTable, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlDataReader : DbDataReader {
    private bool _isOpen;
    internal long affectedRows;
    internal Driver driver;
    private bool _disableZeroAffectedRows;
    private MySqlConnection _connection;
    [CompilerGeneratedAttribute]
private PreparableStatement <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultSet <ResultSet>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandBehavior <CommandBehavior>k__BackingField;
    internal PreparableStatement Statement { get; }
    internal MySqlCommand Command { get; private set; }
    internal ResultSet ResultSet { get; private set; }
    internal CommandBehavior CommandBehavior { get; private set; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int Depth { get; }
    internal MySqlDataReader(MySqlCommand cmd, PreparableStatement statement, CommandBehavior behavior);
    [CompilerGeneratedAttribute]
internal PreparableStatement get_Statement();
    [CompilerGeneratedAttribute]
internal MySqlCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(MySqlCommand value);
    [CompilerGeneratedAttribute]
internal ResultSet get_ResultSet();
    [CompilerGeneratedAttribute]
private void set_ResultSet(ResultSet value);
    [CompilerGeneratedAttribute]
internal CommandBehavior get_CommandBehavior();
    [CompilerGeneratedAttribute]
private void set_CommandBehavior(CommandBehavior value);
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual int get_Depth();
    public virtual void Close();
    public virtual Task CloseAsync();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlDataReader/<CloseAsync>d__37")]
internal Task CloseAsync(bool execAsync);
    public bool GetBoolean(string name);
    public virtual bool GetBoolean(int i);
    public byte GetByte(string name);
    public virtual byte GetByte(int i);
    public sbyte GetSByte(string name);
    public sbyte GetSByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    private object ChangeType(IMySqlValue value, int fieldIndex, Type newType);
    public char GetChar(string name);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public MySqlDateTime GetMySqlDateTime(string column);
    public MySqlDateTime GetMySqlDateTime(int column);
    public DateTime GetDateTime(string column);
    public virtual DateTime GetDateTime(int i);
    public MySqlDecimal GetMySqlDecimal(string column);
    public MySqlDecimal GetMySqlDecimal(int i);
    public decimal GetDecimal(string column);
    public virtual decimal GetDecimal(int i);
    public double GetDouble(string column);
    public virtual double GetDouble(int i);
    public Type GetFieldType(string column);
    public virtual Type GetFieldType(int i);
    public float GetFloat(string column);
    public virtual float GetFloat(int i);
    public string GetBodyDefinition(string column);
    public Guid GetGuid(string column);
    public virtual Guid GetGuid(int i);
    public short GetInt16(string column);
    public virtual short GetInt16(int i);
    public int GetInt32(string column);
    public virtual int GetInt32(int i);
    public long GetInt64(string column);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual Stream GetStream(int i);
    public string GetString(string column);
    public virtual string GetString(int i);
    public TimeSpan GetTimeSpan(string column);
    public TimeSpan GetTimeSpan(int column);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public ushort GetUInt16(string column);
    public ushort GetUInt16(int column);
    public UInt32 GetUInt32(string column);
    public UInt32 GetUInt32(int column);
    public ulong GetUInt64(string column);
    public ulong GetUInt64(int column);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int i);
    public virtual bool IsDBNull(int i);
    public MySqlGeometry GetMySqlGeometry(int i);
    public MySqlGeometry GetMySqlGeometry(string column);
    public virtual IEnumerator GetEnumerator();
    private IMySqlValue GetFieldValue(int index, bool checkNull);
    public virtual T GetFieldValue(int ordinal);
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlDataReader/<NextResultAsync>d__98")]
internal Task`1<bool> NextResultAsync(bool execAsync, CancellationToken cancellationToken);
    public virtual bool Read();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlDataReader/<ReadAsync>d__101")]
internal Task`1<bool> ReadAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlDataReader/<ClearKillFlagAsync>d__102")]
private Task ClearKillFlagAsync(bool execAsync);
    private void Throw(Exception ex);
    public virtual ValueTask DisposeAsync();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlDataReader/<DisposeAsync>d__106")]
internal ValueTask DisposeAsync(bool execAsync);
    protected virtual override void Finalize();
}
public enum MySql.Data.MySqlClient.MySqlDbType : Enum {
    public int value__;
    public static MySqlDbType Decimal;
    public static MySqlDbType Byte;
    public static MySqlDbType Int16;
    public static MySqlDbType Int24;
    public static MySqlDbType Int32;
    public static MySqlDbType Int64;
    public static MySqlDbType Float;
    public static MySqlDbType Double;
    public static MySqlDbType Timestamp;
    public static MySqlDbType Date;
    public static MySqlDbType Time;
    public static MySqlDbType DateTime;
    [ObsoleteAttribute("The Datetime enum value is obsolete.  Please use DateTime.")]
public static MySqlDbType Datetime;
    public static MySqlDbType Year;
    public static MySqlDbType Newdate;
    public static MySqlDbType VarString;
    public static MySqlDbType Bit;
    public static MySqlDbType Vector;
    public static MySqlDbType JSON;
    public static MySqlDbType NewDecimal;
    public static MySqlDbType Enum;
    public static MySqlDbType Set;
    public static MySqlDbType TinyBlob;
    public static MySqlDbType MediumBlob;
    public static MySqlDbType LongBlob;
    public static MySqlDbType Blob;
    public static MySqlDbType VarChar;
    public static MySqlDbType String;
    public static MySqlDbType Geometry;
    public static MySqlDbType UByte;
    public static MySqlDbType UInt16;
    public static MySqlDbType UInt24;
    public static MySqlDbType UInt32;
    public static MySqlDbType UInt64;
    public static MySqlDbType Binary;
    public static MySqlDbType VarBinary;
    public static MySqlDbType TinyText;
    public static MySqlDbType MediumText;
    public static MySqlDbType LongText;
    public static MySqlDbType Text;
    public static MySqlDbType Guid;
}
public enum MySql.Data.MySqlClient.MySqlDriverType : Enum {
    public int value__;
    public static MySqlDriverType Native;
    public static MySqlDriverType Client;
    public static MySqlDriverType Embedded;
}
public class MySql.Data.MySqlClient.MySqlError : object {
    [CompilerGeneratedAttribute]
private string <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Level { get; }
    public int Code { get; }
    public string Message { get; }
    public MySqlError(string level, int code, string message);
    [CompilerGeneratedAttribute]
public string get_Level();
    [CompilerGeneratedAttribute]
public int get_Code();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public enum MySql.Data.MySqlClient.MySqlErrorCode : Enum {
    public int value__;
    public static MySqlErrorCode None;
    public static MySqlErrorCode HashCheck;
    public static MySqlErrorCode ISAMCheck;
    public static MySqlErrorCode No;
    public static MySqlErrorCode Yes;
    public static MySqlErrorCode CannotCreateFile;
    public static MySqlErrorCode CannotCreateTable;
    public static MySqlErrorCode CannotCreateDatabase;
    public static MySqlErrorCode DatabaseCreateExists;
    public static MySqlErrorCode DatabaseDropExists;
    public static MySqlErrorCode DatabaseDropDelete;
    public static MySqlErrorCode DatabaseDropRemoveDir;
    public static MySqlErrorCode CannotDeleteFile;
    public static MySqlErrorCode CannotFindSystemRecord;
    public static MySqlErrorCode CannotGetStatus;
    public static MySqlErrorCode CannotGetWorkingDirectory;
    public static MySqlErrorCode CannotLock;
    public static MySqlErrorCode CannotOpenFile;
    public static MySqlErrorCode FileNotFound;
    public static MySqlErrorCode CannotReadDirectory;
    public static MySqlErrorCode CannotSetWorkingDirectory;
    public static MySqlErrorCode CheckRead;
    public static MySqlErrorCode DiskFull;
    public static MySqlErrorCode DuplicateKey;
    public static MySqlErrorCode ErrorOnClose;
    public static MySqlErrorCode ErrorOnRead;
    public static MySqlErrorCode ErrorOnRename;
    public static MySqlErrorCode ErrorOnWrite;
    public static MySqlErrorCode FileUsed;
    public static MySqlErrorCode FileSortAborted;
    public static MySqlErrorCode FormNotFound;
    public static MySqlErrorCode GetErrorNumber;
    public static MySqlErrorCode IllegalHA;
    public static MySqlErrorCode KeyNotFound;
    public static MySqlErrorCode NotFormFile;
    public static MySqlErrorCode NotKeyFile;
    public static MySqlErrorCode OldKeyFile;
    public static MySqlErrorCode OpenAsReadOnly;
    public static MySqlErrorCode OutOfMemory;
    public static MySqlErrorCode OutOfSortMemory;
    public static MySqlErrorCode UnexepectedEOF;
    public static MySqlErrorCode ConnectionCountError;
    public static MySqlErrorCode OutOfResources;
    public static MySqlErrorCode UnableToConnectToHost;
    public static MySqlErrorCode HandshakeError;
    public static MySqlErrorCode DatabaseAccessDenied;
    public static MySqlErrorCode AccessDenied;
    public static MySqlErrorCode NoDatabaseSelected;
    public static MySqlErrorCode UnknownCommand;
    public static MySqlErrorCode ColumnCannotBeNull;
    public static MySqlErrorCode UnknownDatabase;
    public static MySqlErrorCode TableExists;
    public static MySqlErrorCode BadTable;
    public static MySqlErrorCode NonUnique;
    public static MySqlErrorCode ServerShutdown;
    public static MySqlErrorCode BadFieldError;
    public static MySqlErrorCode WrongFieldWithGroup;
    public static MySqlErrorCode WrongGroupField;
    public static MySqlErrorCode WrongSumSelected;
    public static MySqlErrorCode WrongValueCount;
    public static MySqlErrorCode TooLongIdentifier;
    public static MySqlErrorCode DuplicateFieldName;
    public static MySqlErrorCode DuplicateKeyName;
    public static MySqlErrorCode DuplicateKeyEntry;
    public static MySqlErrorCode WrongFieldSpecifier;
    public static MySqlErrorCode ParseError;
    public static MySqlErrorCode EmptyQuery;
    public static MySqlErrorCode NonUniqueTable;
    public static MySqlErrorCode InvalidDefault;
    public static MySqlErrorCode MultiplePrimaryKey;
    public static MySqlErrorCode TooManyKeys;
    public static MySqlErrorCode TooManyKeysParts;
    public static MySqlErrorCode TooLongKey;
    public static MySqlErrorCode KeyColumnDoesNotExist;
    public static MySqlErrorCode BlobUsedAsKey;
    public static MySqlErrorCode TooBigFieldLength;
    public static MySqlErrorCode WrongAutoKey;
    public static MySqlErrorCode Ready;
    public static MySqlErrorCode NormalShutdown;
    public static MySqlErrorCode GotSignal;
    public static MySqlErrorCode ShutdownComplete;
    public static MySqlErrorCode ForcingClose;
    public static MySqlErrorCode IPSocketError;
    public static MySqlErrorCode NoSuchIndex;
    public static MySqlErrorCode WrongFieldTerminators;
    public static MySqlErrorCode BlobsAndNoTerminated;
    public static MySqlErrorCode TextFileNotReadable;
    public static MySqlErrorCode FileExists;
    public static MySqlErrorCode LoadInfo;
    public static MySqlErrorCode AlterInfo;
    public static MySqlErrorCode WrongSubKey;
    public static MySqlErrorCode CannotRemoveAllFields;
    public static MySqlErrorCode CannotDropFieldOrKey;
    public static MySqlErrorCode InsertInfo;
    public static MySqlErrorCode UpdateTableUsed;
    public static MySqlErrorCode NoSuchThread;
    public static MySqlErrorCode KillDenied;
    public static MySqlErrorCode NoTablesUsed;
    public static MySqlErrorCode TooBigSet;
    public static MySqlErrorCode NoUniqueLogFile;
    public static MySqlErrorCode TableNotLockedForWrite;
    public static MySqlErrorCode TableNotLocked;
    public static MySqlErrorCode BlobCannotHaveDefault;
    public static MySqlErrorCode WrongDatabaseName;
    public static MySqlErrorCode WrongTableName;
    public static MySqlErrorCode TooBigSelect;
    public static MySqlErrorCode UnknownError;
    public static MySqlErrorCode UnknownProcedure;
    public static MySqlErrorCode WrongParameterCountToProcedure;
    public static MySqlErrorCode WrongParametersToProcedure;
    public static MySqlErrorCode UnknownTable;
    public static MySqlErrorCode FieldSpecifiedTwice;
    public static MySqlErrorCode InvalidGroupFunctionUse;
    public static MySqlErrorCode UnsupportedExtenstion;
    public static MySqlErrorCode TableMustHaveColumns;
    public static MySqlErrorCode RecordFileFull;
    public static MySqlErrorCode UnknownCharacterSet;
    public static MySqlErrorCode TooManyTables;
    public static MySqlErrorCode TooManyFields;
    public static MySqlErrorCode TooBigRowSize;
    public static MySqlErrorCode StackOverrun;
    public static MySqlErrorCode WrongOuterJoin;
    public static MySqlErrorCode NullColumnInIndex;
    public static MySqlErrorCode CannotFindUDF;
    public static MySqlErrorCode CannotInitializeUDF;
    public static MySqlErrorCode UDFNoPaths;
    public static MySqlErrorCode UDFExists;
    public static MySqlErrorCode CannotOpenLibrary;
    public static MySqlErrorCode CannotFindDLEntry;
    public static MySqlErrorCode FunctionNotDefined;
    public static MySqlErrorCode HostIsBlocked;
    public static MySqlErrorCode HostNotPrivileged;
    public static MySqlErrorCode AnonymousUser;
    public static MySqlErrorCode PasswordNotAllowed;
    public static MySqlErrorCode PasswordNoMatch;
    public static MySqlErrorCode UpdateInfo;
    public static MySqlErrorCode CannotCreateThread;
    public static MySqlErrorCode WrongValueCountOnRow;
    public static MySqlErrorCode CannotReopenTable;
    public static MySqlErrorCode InvalidUseOfNull;
    public static MySqlErrorCode RegExpError;
    public static MySqlErrorCode MixOfGroupFunctionAndFields;
    public static MySqlErrorCode NonExistingGrant;
    public static MySqlErrorCode TableAccessDenied;
    public static MySqlErrorCode ColumnAccessDenied;
    public static MySqlErrorCode IllegalGrantForTable;
    public static MySqlErrorCode GrantWrongHostOrUser;
    public static MySqlErrorCode NoSuchTable;
    public static MySqlErrorCode NonExistingTableGrant;
    public static MySqlErrorCode NotAllowedCommand;
    public static MySqlErrorCode SyntaxError;
    public static MySqlErrorCode DelayedCannotChangeLock;
    public static MySqlErrorCode TooManyDelayedThreads;
    public static MySqlErrorCode AbortingConnection;
    public static MySqlErrorCode PacketTooLarge;
    public static MySqlErrorCode NetReadErrorFromPipe;
    public static MySqlErrorCode NetFCntlError;
    public static MySqlErrorCode NetPacketsOutOfOrder;
    public static MySqlErrorCode NetUncompressError;
    public static MySqlErrorCode NetReadError;
    public static MySqlErrorCode NetReadInterrupted;
    public static MySqlErrorCode NetErrorOnWrite;
    public static MySqlErrorCode NetWriteInterrupted;
    public static MySqlErrorCode TooLongString;
    public static MySqlErrorCode TableCannotHandleBlob;
    public static MySqlErrorCode TableCannotHandleAutoIncrement;
    public static MySqlErrorCode DelayedInsertTableLocked;
    public static MySqlErrorCode WrongColumnName;
    public static MySqlErrorCode WrongKeyColumn;
    public static MySqlErrorCode WrongMergeTable;
    public static MySqlErrorCode DuplicateUnique;
    public static MySqlErrorCode BlobKeyWithoutLength;
    public static MySqlErrorCode PrimaryCannotHaveNull;
    public static MySqlErrorCode TooManyRows;
    public static MySqlErrorCode RequiresPrimaryKey;
    public static MySqlErrorCode NoRAIDCompiled;
    public static MySqlErrorCode UpdateWithoutKeysInSafeMode;
    public static MySqlErrorCode KeyDoesNotExist;
    public static MySqlErrorCode CheckNoSuchTable;
    public static MySqlErrorCode CheckNotImplemented;
    public static MySqlErrorCode CannotDoThisDuringATransaction;
    public static MySqlErrorCode ErrorDuringCommit;
    public static MySqlErrorCode ErrorDuringRollback;
    public static MySqlErrorCode ErrorDuringFlushLogs;
    public static MySqlErrorCode ErrorDuringCheckpoint;
    public static MySqlErrorCode NewAbortingConnection;
    public static MySqlErrorCode DumpNotImplemented;
    public static MySqlErrorCode FlushSourceBinLogClosed;
    public static MySqlErrorCode IndexRebuild;
    public static MySqlErrorCode SourceError;
    public static MySqlErrorCode SourceNetRead;
    public static MySqlErrorCode SourceNetWrite;
    public static MySqlErrorCode FullTextMatchingKeyNotFound;
    public static MySqlErrorCode LockOrActiveTransaction;
    public static MySqlErrorCode UnknownSystemVariable;
    public static MySqlErrorCode CrashedOnUsage;
    public static MySqlErrorCode CrashedOnRepair;
    public static MySqlErrorCode WarningNotCompleteRollback;
    public static MySqlErrorCode TransactionCacheFull;
    public static MySqlErrorCode ReplicaMustStop;
    public static MySqlErrorCode ReplicaNotRunning;
    public static MySqlErrorCode BadReplica;
    public static MySqlErrorCode SourceInfo;
    public static MySqlErrorCode ReplicaThread;
    public static MySqlErrorCode TooManyUserConnections;
    public static MySqlErrorCode SetConstantsOnly;
    public static MySqlErrorCode LockWaitTimeout;
    public static MySqlErrorCode LockTableFull;
    public static MySqlErrorCode ReadOnlyTransaction;
    public static MySqlErrorCode DropDatabaseWithReadLock;
    public static MySqlErrorCode CreateDatabaseWithReadLock;
    public static MySqlErrorCode WrongArguments;
    public static MySqlErrorCode NoPermissionToCreateUser;
    public static MySqlErrorCode UnionTablesInDifferentDirectory;
    public static MySqlErrorCode LockDeadlock;
    public static MySqlErrorCode TableCannotHandleFullText;
    public static MySqlErrorCode CannotAddForeignConstraint;
    public static MySqlErrorCode NoReferencedRow;
    public static MySqlErrorCode RowIsReferenced;
    public static MySqlErrorCode ConnectToSource;
    public static MySqlErrorCode QueryOnSource;
    public static MySqlErrorCode ErrorWhenExecutingCommand;
    public static MySqlErrorCode WrongUsage;
    public static MySqlErrorCode WrongNumberOfColumnsInSelect;
    public static MySqlErrorCode CannotUpdateWithReadLock;
    public static MySqlErrorCode MixingNotAllowed;
    public static MySqlErrorCode DuplicateArgument;
    public static MySqlErrorCode UserLimitReached;
    public static MySqlErrorCode SpecifiedAccessDeniedError;
    public static MySqlErrorCode LocalVariableError;
    public static MySqlErrorCode GlobalVariableError;
    public static MySqlErrorCode NotDefaultError;
    public static MySqlErrorCode WrongValueForVariable;
    public static MySqlErrorCode WrongTypeForVariable;
    public static MySqlErrorCode VariableCannotBeRead;
    public static MySqlErrorCode CannotUseOptionHere;
    public static MySqlErrorCode NotSupportedYet;
    public static MySqlErrorCode SourceFatalErrorReadingBinLog;
    public static MySqlErrorCode ReplicaIgnoredTable;
    public static MySqlErrorCode IncorrectGlobalLocalVariable;
    public static MySqlErrorCode WrongForeignKeyDefinition;
    public static MySqlErrorCode KeyReferenceDoesNotMatchTableReference;
    public static MySqlErrorCode OpearnColumnsError;
    public static MySqlErrorCode SubQueryNoOneRow;
    public static MySqlErrorCode UnknownStatementHandler;
    public static MySqlErrorCode CorruptHelpDatabase;
    public static MySqlErrorCode CyclicReference;
    public static MySqlErrorCode AutoConvert;
    public static MySqlErrorCode IllegalReference;
    public static MySqlErrorCode DerivedMustHaveAlias;
    public static MySqlErrorCode SelectReduced;
    public static MySqlErrorCode TableNameNotAllowedHere;
    public static MySqlErrorCode NotSupportedAuthMode;
    public static MySqlErrorCode SpatialCannotHaveNull;
    public static MySqlErrorCode CollationCharsetMismatch;
    public static MySqlErrorCode ReplicaWasRunning;
    public static MySqlErrorCode ReplicaWasNotRunning;
    public static MySqlErrorCode TooBigForUncompress;
    public static MySqlErrorCode ZipLibMemoryError;
    public static MySqlErrorCode ZipLibBufferError;
    public static MySqlErrorCode ZipLibDataError;
    public static MySqlErrorCode CutValueGroupConcat;
    public static MySqlErrorCode WarningTooFewRecords;
    public static MySqlErrorCode WarningTooManyRecords;
    public static MySqlErrorCode WarningNullToNotNull;
    public static MySqlErrorCode WarningDataOutOfRange;
    public static MySqlErrorCode WaningDataTruncated;
    public static MySqlErrorCode WaningUsingOtherHandler;
    public static MySqlErrorCode CannotAggregateTwoCollations;
    public static MySqlErrorCode DropUserError;
    public static MySqlErrorCode RevokeGrantsError;
    public static MySqlErrorCode CannotAggregateThreeCollations;
    public static MySqlErrorCode CannotAggregateNCollations;
    public static MySqlErrorCode VariableIsNotStructure;
    public static MySqlErrorCode UnknownCollation;
    public static MySqlErrorCode ReplicaIgnoreSSLParameters;
    public static MySqlErrorCode ServerIsInSecureAuthMode;
    public static MySqlErrorCode WaningFieldResolved;
    public static MySqlErrorCode BadReplicaUntilCondition;
    public static MySqlErrorCode MissingSkipReplica;
    public static MySqlErrorCode ErrorUntilConditionIgnored;
    public static MySqlErrorCode WrongNameForIndex;
    public static MySqlErrorCode WrongNameForCatalog;
    public static MySqlErrorCode WarningQueryCacheResize;
    public static MySqlErrorCode BadFullTextColumn;
    public static MySqlErrorCode UnknownKeyCache;
    public static MySqlErrorCode WarningHostnameWillNotWork;
    public static MySqlErrorCode UnknownStorageEngine;
    public static MySqlErrorCode WaningDeprecatedSyntax;
    public static MySqlErrorCode NonUpdateableTable;
    public static MySqlErrorCode FeatureDisabled;
    public static MySqlErrorCode OptionPreventsStatement;
    public static MySqlErrorCode DuplicatedValueInType;
    public static MySqlErrorCode TruncatedWrongValue;
    public static MySqlErrorCode TooMuchAutoTimestampColumns;
    public static MySqlErrorCode InvalidOnUpdate;
    public static MySqlErrorCode UnsupportedPreparedStatement;
    public static MySqlErrorCode GetErroMessage;
    public static MySqlErrorCode GetTemporaryErrorMessage;
    public static MySqlErrorCode UnknownTimeZone;
    public static MySqlErrorCode WarningInvalidTimestamp;
    public static MySqlErrorCode InvalidCharacterString;
    public static MySqlErrorCode WarningAllowedPacketOverflowed;
    public static MySqlErrorCode ConflictingDeclarations;
    public static MySqlErrorCode StoredProcedureNoRecursiveCreate;
    public static MySqlErrorCode StoredProcedureAlreadyExists;
    public static MySqlErrorCode StoredProcedureDoesNotExist;
    public static MySqlErrorCode StoredProcedureDropFailed;
    public static MySqlErrorCode StoredProcedureStoreFailed;
    public static MySqlErrorCode StoredProcedureLiLabelMismatch;
    public static MySqlErrorCode StoredProcedureLabelRedefine;
    public static MySqlErrorCode StoredProcedureLabelMismatch;
    public static MySqlErrorCode StoredProcedureUninitializedVariable;
    public static MySqlErrorCode StoredProcedureBadSelect;
    public static MySqlErrorCode StoredProcedureBadReturn;
    public static MySqlErrorCode StoredProcedureBadStatement;
    public static MySqlErrorCode UpdateLogDeprecatedIgnored;
    public static MySqlErrorCode UpdateLogDeprecatedTranslated;
    public static MySqlErrorCode QueryInterrupted;
    public static MySqlErrorCode StoredProcedureNumberOfArguments;
    public static MySqlErrorCode StoredProcedureConditionMismatch;
    public static MySqlErrorCode StoredProcedureNoReturn;
    public static MySqlErrorCode StoredProcedureNoReturnEnd;
    public static MySqlErrorCode StoredProcedureBadCursorQuery;
    public static MySqlErrorCode StoredProcedureBadCursorSelect;
    public static MySqlErrorCode StoredProcedureCursorMismatch;
    public static MySqlErrorCode StoredProcedureAlreadyOpen;
    public static MySqlErrorCode StoredProcedureCursorNotOpen;
    public static MySqlErrorCode StoredProcedureUndeclaredVariabel;
    public static MySqlErrorCode StoredProcedureWrongNumberOfFetchArguments;
    public static MySqlErrorCode StoredProcedureFetchNoData;
    public static MySqlErrorCode StoredProcedureDuplicateParameter;
    public static MySqlErrorCode StoredProcedureDuplicateVariable;
    public static MySqlErrorCode StoredProcedureDuplicateCondition;
    public static MySqlErrorCode StoredProcedureDuplicateCursor;
    public static MySqlErrorCode StoredProcedureCannotAlter;
    public static MySqlErrorCode StoredProcedureSubSelectNYI;
    public static MySqlErrorCode StatementNotAllowedInStoredFunctionOrTrigger;
    public static MySqlErrorCode StoredProcedureVariableConditionAfterCursorHandler;
    public static MySqlErrorCode StoredProcedureCursorAfterHandler;
    public static MySqlErrorCode StoredProcedureCaseNotFound;
    public static MySqlErrorCode FileParserTooBigFile;
    public static MySqlErrorCode FileParserBadHeader;
    public static MySqlErrorCode FileParserEOFInComment;
    public static MySqlErrorCode FileParserErrorInParameter;
    public static MySqlErrorCode FileParserEOFInUnknownParameter;
    public static MySqlErrorCode ViewNoExplain;
    public static MySqlErrorCode FrmUnknownType;
    public static MySqlErrorCode WrongObject;
    public static MySqlErrorCode NonUpdateableColumn;
    public static MySqlErrorCode ViewSelectDerived;
    public static MySqlErrorCode ViewSelectClause;
    public static MySqlErrorCode ViewSelectVariable;
    public static MySqlErrorCode ViewSelectTempTable;
    public static MySqlErrorCode ViewWrongList;
    public static MySqlErrorCode WarningViewMerge;
    public static MySqlErrorCode WarningViewWithoutKey;
    public static MySqlErrorCode ViewInvalid;
    public static MySqlErrorCode StoredProcedureNoDropStoredProcedure;
    public static MySqlErrorCode StoredProcedureGotoInHandler;
    public static MySqlErrorCode TriggerAlreadyExists;
    public static MySqlErrorCode TriggerDoesNotExist;
    public static MySqlErrorCode TriggerOnViewOrTempTable;
    public static MySqlErrorCode TriggerCannotChangeRow;
    public static MySqlErrorCode TriggerNoSuchRowInTrigger;
    public static MySqlErrorCode NoDefaultForField;
    public static MySqlErrorCode DivisionByZero;
    public static MySqlErrorCode TruncatedWrongValueForField;
    public static MySqlErrorCode IllegalValueForType;
    public static MySqlErrorCode ViewNonUpdatableCheck;
    public static MySqlErrorCode ViewCheckFailed;
    public static MySqlErrorCode PrecedureAccessDenied;
    public static MySqlErrorCode RelayLogFail;
    public static MySqlErrorCode PasswordLength;
    public static MySqlErrorCode UnknownTargetBinLog;
    public static MySqlErrorCode IOErrorLogIndexRead;
    public static MySqlErrorCode BinLogPurgeProhibited;
    public static MySqlErrorCode FSeekFail;
    public static MySqlErrorCode BinLogPurgeFatalError;
    public static MySqlErrorCode LogInUse;
    public static MySqlErrorCode LogPurgeUnknownError;
    public static MySqlErrorCode RelayLogInit;
    public static MySqlErrorCode NoBinaryLogging;
    public static MySqlErrorCode ReservedSyntax;
    public static MySqlErrorCode WSAStartupFailed;
    public static MySqlErrorCode DifferentGroupsProcedure;
    public static MySqlErrorCode NoGroupForProcedure;
    public static MySqlErrorCode OrderWithProcedure;
    public static MySqlErrorCode LoggingProhibitsChangingOf;
    public static MySqlErrorCode NoFileMapping;
    public static MySqlErrorCode WrongMagic;
    public static MySqlErrorCode PreparedStatementManyParameters;
    public static MySqlErrorCode KeyPartZero;
    public static MySqlErrorCode ViewChecksum;
    public static MySqlErrorCode ViewMultiUpdate;
    public static MySqlErrorCode ViewNoInsertFieldList;
    public static MySqlErrorCode ViewDeleteMergeView;
    public static MySqlErrorCode CannotUser;
    public static MySqlErrorCode XAERNotA;
    public static MySqlErrorCode XAERInvalid;
    public static MySqlErrorCode XAERRemoveFail;
    public static MySqlErrorCode XAEROutside;
    public static MySqlErrorCode XAERRemoveError;
    public static MySqlErrorCode XARBRollback;
    public static MySqlErrorCode NonExistingProcedureGrant;
    public static MySqlErrorCode ProcedureAutoGrantFail;
    public static MySqlErrorCode ProcedureAutoRevokeFail;
    public static MySqlErrorCode DataTooLong;
    public static MySqlErrorCode StoredProcedureSQLState;
    public static MySqlErrorCode StartupError;
    public static MySqlErrorCode LoadFromFixedSizeRowsToVariable;
    public static MySqlErrorCode CannotCreateUserWithGrant;
    public static MySqlErrorCode WrongValueForType;
    public static MySqlErrorCode TableDefinitionChanged;
    public static MySqlErrorCode StoredProcedureDuplicateHandler;
    public static MySqlErrorCode StoredProcedureNotVariableArgument;
    public static MySqlErrorCode StoredProcedureNoReturnSet;
    public static MySqlErrorCode CannotCreateGeometryObject;
    public static MySqlErrorCode FailedRoutineBreaksBinLog;
    public static MySqlErrorCode BinLogUnsafeRoutine;
    public static MySqlErrorCode BinLogCreateRoutineNeedSuper;
    public static MySqlErrorCode ExecuteStatementWithOpenCursor;
    public static MySqlErrorCode StatementHasNoOpenCursor;
    public static MySqlErrorCode CommitNotAllowedIfStoredFunctionOrTrigger;
    public static MySqlErrorCode NoDefaultForViewField;
    public static MySqlErrorCode StoredProcedureNoRecursion;
    public static MySqlErrorCode TooBigScale;
    public static MySqlErrorCode TooBigPrecision;
    public static MySqlErrorCode MBiggerThanD;
    public static MySqlErrorCode WrongLockOfSystemTable;
    public static MySqlErrorCode ConnectToForeignDataSource;
    public static MySqlErrorCode QueryOnForeignDataSource;
    public static MySqlErrorCode ForeignDataSourceDoesNotExist;
    public static MySqlErrorCode ForeignDataStringInvalidCannotCreate;
    public static MySqlErrorCode ForeignDataStringInvalid;
    public static MySqlErrorCode CannotCreateFederatedTable;
    public static MySqlErrorCode TriggerInWrongSchema;
    public static MySqlErrorCode StackOverrunNeedMore;
    public static MySqlErrorCode TooLongBody;
    public static MySqlErrorCode WarningCannotDropDefaultKeyCache;
    public static MySqlErrorCode TooBigDisplayWidth;
    public static MySqlErrorCode XAERDuplicateID;
    public static MySqlErrorCode DateTimeFunctionOverflow;
    public static MySqlErrorCode CannotUpdateUsedTableInStoredFunctionOrTrigger;
    public static MySqlErrorCode ViewPreventUpdate;
    public static MySqlErrorCode PreparedStatementNoRecursion;
    public static MySqlErrorCode StoredProcedureCannotSetAutoCommit;
    public static MySqlErrorCode MalformedDefiner;
    public static MySqlErrorCode ViewFrmNoUser;
    public static MySqlErrorCode ViewOtherUser;
    public static MySqlErrorCode NoSuchUser;
    public static MySqlErrorCode ForbidSchemaChange;
    public static MySqlErrorCode RowIsReferenced2;
    public static MySqlErrorCode NoReferencedRow2;
    public static MySqlErrorCode StoredProcedureBadVariableShadow;
    public static MySqlErrorCode TriggerNoDefiner;
    public static MySqlErrorCode OldFileFormat;
    public static MySqlErrorCode StoredProcedureRecursionLimit;
    public static MySqlErrorCode StoredProcedureTableCorrupt;
    public static MySqlErrorCode StoredProcedureWrongName;
    public static MySqlErrorCode TableNeedsUpgrade;
    public static MySqlErrorCode StoredProcedureNoAggregate;
    public static MySqlErrorCode MaxPreparedStatementCountReached;
    public static MySqlErrorCode ViewRecursive;
    public static MySqlErrorCode NonGroupingFieldUsed;
    public static MySqlErrorCode TableCannotHandleSpatialKeys;
    public static MySqlErrorCode NoTriggersOnSystemSchema;
    public static MySqlErrorCode RemovedSpaces;
    public static MySqlErrorCode AutoIncrementReadFailed;
    public static MySqlErrorCode UserNameError;
    public static MySqlErrorCode HostNameError;
    public static MySqlErrorCode WrongStringLength;
    public static MySqlErrorCode NonInsertableTable;
    public static MySqlErrorCode AdminWrongMergeTable;
    public static MySqlErrorCode TooHighLevelOfNestingForSelect;
    public static MySqlErrorCode NameBecomesEmpty;
    public static MySqlErrorCode AmbiguousFieldTerm;
    public static MySqlErrorCode ForeignServerExists;
    public static MySqlErrorCode ForeignServerDoesNotExist;
    public static MySqlErrorCode IllegalHACreateOption;
    public static MySqlErrorCode PartitionRequiresValues;
    public static MySqlErrorCode PartitionWrongValues;
    public static MySqlErrorCode PartitionMaxValue;
    public static MySqlErrorCode PartitionSubPartition;
    public static MySqlErrorCode PartitionSubPartMix;
    public static MySqlErrorCode PartitionWrongNoPart;
    public static MySqlErrorCode PartitionWrongNoSubPart;
    public static MySqlErrorCode WrongExpressionInParitionFunction;
    public static MySqlErrorCode NoConstantExpressionInRangeOrListError;
    public static MySqlErrorCode FieldNotFoundPartitionErrror;
    public static MySqlErrorCode ListOfFieldsOnlyInHash;
    public static MySqlErrorCode InconsistentPartitionInfo;
    public static MySqlErrorCode PartitionFunctionNotAllowed;
    public static MySqlErrorCode PartitionsMustBeDefined;
    public static MySqlErrorCode RangeNotIncreasing;
    public static MySqlErrorCode InconsistentTypeOfFunctions;
    public static MySqlErrorCode MultipleDefinitionsConstantInListPartition;
    public static MySqlErrorCode PartitionEntryError;
    public static MySqlErrorCode MixHandlerError;
    public static MySqlErrorCode PartitionNotDefined;
    public static MySqlErrorCode TooManyPartitions;
    public static MySqlErrorCode SubPartitionError;
    public static MySqlErrorCode CannotCreateHandlerFile;
    public static MySqlErrorCode BlobFieldInPartitionFunction;
    public static MySqlErrorCode UniqueKeyNeedAllFieldsInPartitioningFunction;
    public static MySqlErrorCode NoPartitions;
    public static MySqlErrorCode PartitionManagementOnNoPartitioned;
    public static MySqlErrorCode ForeignKeyOnPartitioned;
    public static MySqlErrorCode DropPartitionNonExistent;
    public static MySqlErrorCode DropLastPartition;
    public static MySqlErrorCode CoalesceOnlyOnHashPartition;
    public static MySqlErrorCode ReorganizeHashOnlyOnSameNumber;
    public static MySqlErrorCode ReorganizeNoParameter;
    public static MySqlErrorCode OnlyOnRangeListPartition;
    public static MySqlErrorCode AddPartitionSubPartition;
    public static MySqlErrorCode AddPartitionNoNewPartition;
    public static MySqlErrorCode CoalescePartitionNoPartition;
    public static MySqlErrorCode ReorganizePartitionNotExist;
    public static MySqlErrorCode SameNamePartition;
    public static MySqlErrorCode NoBinLog;
    public static MySqlErrorCode ConsecutiveReorganizePartitions;
    public static MySqlErrorCode ReorganizeOutsideRange;
    public static MySqlErrorCode PartitionFunctionFailure;
    public static MySqlErrorCode PartitionStateError;
    public static MySqlErrorCode LimitedPartitionRange;
    public static MySqlErrorCode PluginIsNotLoaded;
    public static MySqlErrorCode WrongValue;
    public static MySqlErrorCode NoPartitionForGivenValue;
    public static MySqlErrorCode FileGroupOptionOnlyOnce;
    public static MySqlErrorCode CreateFileGroupFailed;
    public static MySqlErrorCode DropFileGroupFailed;
    public static MySqlErrorCode TableSpaceAutoExtend;
    public static MySqlErrorCode WrongSizeNumber;
    public static MySqlErrorCode SizeOverflow;
    public static MySqlErrorCode AlterFileGroupFailed;
    public static MySqlErrorCode BinLogRowLogginFailed;
    public static MySqlErrorCode BinLogRowWrongTableDefinition;
    public static MySqlErrorCode BinLogRowRBRToSBR;
    public static MySqlErrorCode EventAlreadyExists;
    public static MySqlErrorCode EventStoreFailed;
    public static MySqlErrorCode EventDoesNotExist;
    public static MySqlErrorCode EventCannotAlter;
    public static MySqlErrorCode EventDropFailed;
    public static MySqlErrorCode EventIntervalNotPositiveOrTooBig;
    public static MySqlErrorCode EventEndsBeforeStarts;
    public static MySqlErrorCode EventExecTimeInThePast;
    public static MySqlErrorCode EventOpenTableFailed;
    public static MySqlErrorCode EventNeitherMExpresssionNorMAt;
    public static MySqlErrorCode ColumnCountDoesNotMatchCorrupted;
    public static MySqlErrorCode CannotLoadFromTable;
    public static MySqlErrorCode EventCannotDelete;
    public static MySqlErrorCode EventCompileError;
    public static MySqlErrorCode EventSameName;
    public static MySqlErrorCode EventDataTooLong;
    public static MySqlErrorCode DropIndexForeignKey;
    public static MySqlErrorCode WarningDeprecatedSyntaxWithVersion;
    public static MySqlErrorCode CannotWriteLockLogTable;
    public static MySqlErrorCode CannotLockLogTable;
    public static MySqlErrorCode ForeignDuplicateKey;
    public static MySqlErrorCode ColumnCountDoesNotMatchPleaseUpdate;
    public static MySqlErrorCode TemoraryTablePreventSwitchOutOfRBR;
    public static MySqlErrorCode StoredFunctionPreventsSwitchBinLogFormat;
    public static MySqlErrorCode NDBCannotSwitchBinLogFormat;
    public static MySqlErrorCode PartitionNoTemporary;
    public static MySqlErrorCode PartitionConstantDomain;
    public static MySqlErrorCode PartitionFunctionIsNotAllowed;
    public static MySqlErrorCode DDLLogError;
    public static MySqlErrorCode NullInValuesLessThan;
    public static MySqlErrorCode WrongPartitionName;
    public static MySqlErrorCode CannotChangeTransactionIsolation;
    public static MySqlErrorCode DuplicateEntryAutoIncrementCase;
    public static MySqlErrorCode EventModifyQueueError;
    public static MySqlErrorCode EventSetVariableError;
    public static MySqlErrorCode PartitionMergeError;
    public static MySqlErrorCode CannotActivateLog;
    public static MySqlErrorCode RBRNotAvailable;
    public static MySqlErrorCode Base64DecodeError;
    public static MySqlErrorCode EventRecursionForbidden;
    public static MySqlErrorCode EventsDatabaseError;
    public static MySqlErrorCode OnlyIntegersAllowed;
    public static MySqlErrorCode UnsupportedLogEngine;
    public static MySqlErrorCode BadLogStatement;
    public static MySqlErrorCode CannotRenameLogTable;
    public static MySqlErrorCode WrongParameterCountToNativeFCT;
    public static MySqlErrorCode WrongParametersToNativeFCT;
    public static MySqlErrorCode WrongParametersToStoredFCT;
    public static MySqlErrorCode NativeFCTNameCollision;
    public static MySqlErrorCode DuplicateEntryWithKeyName;
    public static MySqlErrorCode BinLogPurgeEMFile;
    public static MySqlErrorCode EventCannotCreateInThePast;
    public static MySqlErrorCode EventCannotAlterInThePast;
    public static MySqlErrorCode ReplicaIncident;
    public static MySqlErrorCode NoPartitionForGivenValueSilent;
    public static MySqlErrorCode BinLogUnsafeStatement;
    public static MySqlErrorCode ReplicaFatalError;
    public static MySqlErrorCode ReplicaRelayLogReadFailure;
    public static MySqlErrorCode ReplicaRelayLogWriteFailure;
    public static MySqlErrorCode ReplicaCreateEventFailure;
    public static MySqlErrorCode ReplicaSourceComFailure;
    public static MySqlErrorCode BinLogLoggingImpossible;
    public static MySqlErrorCode ViewNoCreationContext;
    public static MySqlErrorCode ViewInvalidCreationContext;
    public static MySqlErrorCode StoredRoutineInvalidCreateionContext;
    public static MySqlErrorCode TiggerCorruptedFile;
    public static MySqlErrorCode TriggerNoCreationContext;
    public static MySqlErrorCode TriggerInvalidCreationContext;
    public static MySqlErrorCode EventInvalidCreationContext;
    public static MySqlErrorCode TriggerCannotOpenTable;
    public static MySqlErrorCode CannoCreateSubRoutine;
    public static MySqlErrorCode ReplicaAmbiguousExecMode;
    public static MySqlErrorCode NoFormatDescriptionEventBeforeBinLogStatement;
    public static MySqlErrorCode ReplicaCorruptEvent;
    public static MySqlErrorCode LoadDataInvalidColumn;
    public static MySqlErrorCode LogPurgeNoFile;
    public static MySqlErrorCode XARBTimeout;
    public static MySqlErrorCode XARBDeadlock;
    public static MySqlErrorCode NeedRePrepare;
    public static MySqlErrorCode DelayedNotSupported;
    public static MySqlErrorCode WarningNoSourceInfo;
    public static MySqlErrorCode WarningOptionIgnored;
    public static MySqlErrorCode WarningPluginDeleteBuiltIn;
    public static MySqlErrorCode WarningPluginBusy;
    public static MySqlErrorCode VariableIsReadonly;
    public static MySqlErrorCode WarningEngineTransactionRollback;
    public static MySqlErrorCode ReplicaHeartbeatFailure;
    public static MySqlErrorCode ReplicaHeartbeatValueOutOfRange;
    public static MySqlErrorCode NDBReplicationSchemaError;
    public static MySqlErrorCode ConflictFunctionParseError;
    public static MySqlErrorCode ExcepionsWriteError;
    public static MySqlErrorCode TooLongTableComment;
    public static MySqlErrorCode TooLongFieldComment;
    public static MySqlErrorCode FunctionInExistentNameCollision;
    public static MySqlErrorCode DatabaseNameError;
    public static MySqlErrorCode TableNameErrror;
    public static MySqlErrorCode PartitionNameError;
    public static MySqlErrorCode SubPartitionNameError;
    public static MySqlErrorCode TemporaryNameError;
    public static MySqlErrorCode RenamedNameError;
    public static MySqlErrorCode TooManyConcurrentTransactions;
    public static MySqlErrorCode WarningNonASCIISeparatorNotImplemented;
    public static MySqlErrorCode DebugSyncTimeout;
    public static MySqlErrorCode DebugSyncHitLimit;
    public static MySqlErrorCode ErrorLast;
    public static MySqlErrorCode ErrorClientInteractionTimeout;
}
public class MySql.Data.MySqlClient.MySqlException : DbException {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFatal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Code>k__BackingField;
    public int Number { get; }
    internal bool IsFatal { get; }
    internal bool IsQueryAborted { get; }
    public string SqlState { get; private set; }
    public UInt32 Code { get; private set; }
    internal MySqlException(string msg);
    internal MySqlException(string msg, Exception ex);
    internal MySqlException(string msg, bool isFatal, Exception inner);
    internal MySqlException(string msg, int errno, Exception inner);
    internal MySqlException(string msg, int errno, bool isFatal);
    internal MySqlException(string msg, int errno);
    internal MySqlException(UInt32 code, string sqlState, string msg);
    private MySqlException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
internal bool get_IsFatal();
    internal bool get_IsQueryAborted();
    [CompilerGeneratedAttribute]
public string get_SqlState();
    [CompilerGeneratedAttribute]
private void set_SqlState(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(UInt32 value);
}
internal class MySql.Data.MySqlClient.MySqlField : object {
    public string CatalogName;
    public int ColumnLength;
    public string ColumnName;
    public string OriginalColumnName;
    public string TableName;
    public string RealTableName;
    public string DatabaseName;
    public Encoding Encoding;
    protected int charSetIndex;
    protected DBVersion connVersion;
    protected bool binaryOk;
    internal Driver driver;
    [CompilerGeneratedAttribute]
private MySqlDbType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <TypeConversions>k__BackingField;
    public int CharacterSetIndex { get; public set; }
    public MySqlDbType Type { get; internal set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int MaxLength { get; public set; }
    public ColumnFlags Flags { get; protected set; }
    public bool IsAutoIncrement { get; }
    public bool IsNumeric { get; }
    public bool AllowsNull { get; }
    public bool IsUnique { get; }
    public bool IsPrimaryKey { get; }
    public bool IsBlob { get; }
    public bool IsBinary { get; }
    public bool IsUnsigned { get; }
    public bool IsTextField { get; }
    private int CharacterLength { get; }
    public List`1<Type> TypeConversions { get; }
    [SecuritySafeCriticalAttribute]
public MySqlField(Driver driver);
    public int get_CharacterSetIndex();
    public void set_CharacterSetIndex(int value);
    [CompilerGeneratedAttribute]
public MySqlDbType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(MySqlDbType value);
    [CompilerGeneratedAttribute]
public byte get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(byte value);
    [CompilerGeneratedAttribute]
public byte get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(byte value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
public void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public ColumnFlags get_Flags();
    [CompilerGeneratedAttribute]
protected void set_Flags(ColumnFlags value);
    public bool get_IsAutoIncrement();
    public bool get_IsNumeric();
    public bool get_AllowsNull();
    public bool get_IsUnique();
    public bool get_IsPrimaryKey();
    public bool get_IsBlob();
    public bool get_IsBinary();
    public bool get_IsUnsigned();
    public bool get_IsTextField();
    private int get_CharacterLength();
    [CompilerGeneratedAttribute]
public List`1<Type> get_TypeConversions();
    public void SetTypeAndFlags(MySqlDbType type, ColumnFlags flags);
    public void AddTypeConversion(Type t);
    private void CheckForExceptions();
    public IMySqlValue GetValueObject();
    public static IMySqlValue GetIMySqlValue(MySqlDbType type);
    private void SetFieldEncoding();
}
public enum MySql.Data.MySqlClient.MySqlGuidFormat : Enum {
    public int value__;
    public static MySqlGuidFormat Default;
    public static MySqlGuidFormat None;
    public static MySqlGuidFormat Char36;
    public static MySqlGuidFormat Char32;
    public static MySqlGuidFormat Binary16;
    public static MySqlGuidFormat TimeSwapBinary16;
    public static MySqlGuidFormat LittleEndianBinary16;
}
public class MySql.Data.MySqlClient.MySqlHelper : object {
    private static string stringOfBackslashChars;
    private static string stringOfQuoteChars;
    private static CharClass[] charClassArray;
    private static MySqlHelper();
    public static Task`1<DataRow> ExecuteDataRowAsync(string connectionString, string commandText, MySqlParameter[] parms);
    public static Task`1<DataRow> ExecuteDataRowAsync(string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] parms);
    public static DataRow ExecuteDataRow(string connectionString, string commandText, MySqlParameter[] parms);
    public static DataSet ExecuteDataset(string connectionString, string commandText);
    public static DataSet ExecuteDataset(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static DataSet ExecuteDataset(MySqlConnection connection, string commandText);
    public static DataSet ExecuteDataset(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static void UpdateDataSet(string connectionString, string commandText, DataSet ds, string tablename);
    public static Task`1<DataSet> ExecuteDatasetAsync(string connectionString, string commandText);
    public static Task`1<DataSet> ExecuteDatasetAsync(string connectionString, string commandText, CancellationToken cancellationToken);
    public static Task`1<DataSet> ExecuteDatasetAsync(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<DataSet> ExecuteDatasetAsync(string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static Task`1<DataSet> ExecuteDatasetAsync(MySqlConnection connection, string commandText);
    public static Task`1<DataSet> ExecuteDatasetAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken);
    public static Task`1<DataSet> ExecuteDatasetAsync(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<DataSet> ExecuteDatasetAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static Task UpdateDataSetAsync(string connectionString, string commandText, DataSet ds, string tablename);
    public static Task UpdateDataSetAsync(string connectionString, string commandText, DataSet ds, string tablename, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlHelper/<ExecuteNonQueryAsync>d__23")]
private static Task`1<int> ExecuteNonQueryAsync(bool execAsync, MySqlConnection connection, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlHelper/<ExecuteNonQueryAsync>d__24")]
private static Task`1<int> ExecuteNonQueryAsync(bool execAsync, string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static int ExecuteNonQuery(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static int ExecuteNonQuery(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<int> ExecuteNonQueryAsync(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<int> ExecuteNonQueryAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static Task`1<int> ExecuteNonQueryAsync(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<int> ExecuteNonQueryAsync(string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlHelper/<ExecuteReaderAsync>d__31")]
private static Task`1<MySqlDataReader> ExecuteReaderAsync(bool execAsync, MySqlConnection connection, MySqlTransaction transaction, string commandText, MySqlParameter[] commandParameters, bool externalConn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlHelper/<ExecuteReaderAsync>d__32")]
private static Task`1<MySqlDataReader> ExecuteReaderAsync(bool execAsync, string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    private static MySqlDataReader ExecuteReader(MySqlConnection connection, MySqlTransaction transaction, string commandText, MySqlParameter[] commandParameters, bool externalConn);
    public static MySqlDataReader ExecuteReader(string connectionString, string commandText);
    public static MySqlDataReader ExecuteReader(MySqlConnection connection, string commandText);
    public static MySqlDataReader ExecuteReader(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static MySqlDataReader ExecuteReader(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    private static Task`1<MySqlDataReader> ExecuteReaderAsync(MySqlConnection connection, MySqlTransaction transaction, string commandText, MySqlParameter[] commandParameters, bool ExternalConn);
    private static Task`1<MySqlDataReader> ExecuteReaderAsync(MySqlConnection connection, MySqlTransaction transaction, string commandText, MySqlParameter[] commandParameters, bool ExternalConn, CancellationToken cancellationToken);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(string connectionString, string commandText);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(string connectionString, string commandText, CancellationToken cancellationToken);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(MySqlConnection connection, string commandText);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<MySqlDataReader> ExecuteReaderAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlHelper/<ExecuteScalarAsync>d__48")]
private static Task`1<object> ExecuteScalarAsync(bool execAsync, MySqlConnection connection, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlHelper/<ExecuteScalarAsync>d__49")]
private static Task`1<object> ExecuteScalarAsync(bool execAsync, string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static object ExecuteScalar(string connectionString, string commandText);
    public static object ExecuteScalar(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static object ExecuteScalar(MySqlConnection connection, string commandText);
    public static object ExecuteScalar(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<object> ExecuteScalarAsync(string connectionString, string commandText);
    public static Task`1<object> ExecuteScalarAsync(string connectionString, string commandText, CancellationToken cancellationToken);
    public static Task`1<object> ExecuteScalarAsync(string connectionString, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<object> ExecuteScalarAsync(string connectionString, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    public static Task`1<object> ExecuteScalarAsync(MySqlConnection connection, string commandText);
    public static Task`1<object> ExecuteScalarAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken);
    public static Task`1<object> ExecuteScalarAsync(MySqlConnection connection, string commandText, MySqlParameter[] commandParameters);
    public static Task`1<object> ExecuteScalarAsync(MySqlConnection connection, string commandText, CancellationToken cancellationToken, MySqlParameter[] commandParameters);
    private static CharClass[] MakeCharClassArray();
    private static bool NeedsQuoting(string s);
    public static string EscapeString(string value);
    public static string DoubleQuoteString(string value);
}
public class MySql.Data.MySqlClient.MySqlInfoMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MySqlError[] <errors>k__BackingField;
    public MySqlError[] errors { get; public set; }
    [CompilerGeneratedAttribute]
public MySqlError[] get_errors();
    [CompilerGeneratedAttribute]
public void set_errors(MySqlError[] value);
}
public class MySql.Data.MySqlClient.MySqlInfoMessageEventHandler : MulticastDelegate {
    public MySqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlInfoMessageEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlInfoMessageEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class MySql.Data.MySqlClient.MySqlPacket : object {
    private Byte[] _tempBuffer;
    private Encoding _encoding;
    private MemoryStream _buffer;
    [CompilerGeneratedAttribute]
private DBVersion <Version>k__BackingField;
    public Encoding Encoding { get; public set; }
    public bool HasMoreData { get; }
    public int Position { get; public set; }
    public int Length { get; public set; }
    public bool IsLastPacket { get; }
    public Byte[] Buffer { get; }
    public DBVersion Version { get; public set; }
    public MySqlPacket(Encoding enc);
    public MySqlPacket(MemoryStream stream);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_HasMoreData();
    public int get_Position();
    public void set_Position(int value);
    public int get_Length();
    public void set_Length(int value);
    public bool get_IsLastPacket();
    public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public DBVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(DBVersion value);
    public void Clear();
    public byte ReadByte();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<ReadAsync>d__27")]
public Task`1<int> ReadAsync(Byte[] byteBuffer, int offset, int count, bool execAsync);
    public void WriteByte(byte b);
    public void Write(Byte[] bytes);
    public void Write(Byte[] bytes, int offset, int countToWrite);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteAsync>d__31")]
public Task WriteAsync(Byte[] bytesToWrite, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteAsync>d__32")]
public Task WriteAsync(Byte[] bytesToWrite, int offset, int countToWrite, bool execAsync);
    public int ReadNBytes();
    public void SetByte(long position, byte value);
    public long ReadFieldLength();
    public ulong ReadBitValue(int numbytes);
    public long ReadLong(int numbytes);
    public ulong ReadULong(int numbytes);
    public int Read3ByteInt();
    public int ReadInteger(int numbytes);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteIntegerAsync>d__41")]
public Task WriteIntegerAsync(long v, int numbytes, bool execAsync);
    public void WriteInteger(long v, int numbytes);
    public int ReadPackedInteger();
    public void WriteLength(long length);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteLengthAsync>d__45")]
public Task WriteLengthAsync(long length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteLenStringAsync>d__46")]
public Task WriteLenStringAsync(string s, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteStringNoNullAsync>d__47")]
public Task WriteStringNoNullAsync(string v, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<WriteStringAsync>d__48")]
public Task WriteStringAsync(string v, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<ReadLenStringAsync>d__49")]
public Task`1<string> ReadLenStringAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<ReadAsciiStringAsync>d__50")]
public Task`1<string> ReadAsciiStringAsync(long length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPacket/<ReadStringAsync>d__51")]
public Task`1<string> ReadStringAsync(long length, bool execAsync);
    public string ReadString();
    public string ReadString(Encoding theEncoding);
    public Byte[] ReadStringAsBytes();
}
[TypeConverterAttribute("MySql.Data.MySqlClient.MySqlParameterConverter")]
public class MySql.Data.MySqlClient.MySqlParameter : DbParameter {
    private static int UNSIGNED_MASK;
    private object _paramValue;
    private string _paramName;
    private MySqlDbType _mySqlDbType;
    private bool _inferType;
    private static int GEOMETRY_LENGTH;
    private DbType _dbType;
    [CompilerGeneratedAttribute]
private MySqlParameterCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private IMySqlValue <ValueObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IList <PossibleValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CategoryAttribute("Misc")]
public string ParameterName { get; public set; }
    internal MySqlParameterCollection Collection { get; internal set; }
    internal Encoding Encoding { get; internal set; }
    internal bool TypeHasBeenSet { get; }
    internal string BaseName { get; }
    [CategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
public bool IsNullable { get; public set; }
    [CategoryAttribute("Data")]
[DbProviderSpecificTypePropertyAttribute("True")]
public MySqlDbType MySqlDbType { get; public set; }
    [CategoryAttribute("Data")]
public byte Precision { get; public set; }
    [CategoryAttribute("Data")]
public byte Scale { get; public set; }
    [CategoryAttribute("Data")]
public int Size { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[CategoryAttribute("Data")]
public object Value { get; public set; }
    internal IMySqlValue ValueObject { get; private set; }
    public IList PossibleValues { get; internal set; }
    [CategoryAttribute("Data")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DbType DbType { get; public set; }
    [CategoryAttribute("Data")]
public DataRowVersion SourceVersion { get; public set; }
    public MySqlParameter(string parameterName, MySqlDbType dbType, int size, string sourceColumn);
    public MySqlParameter(string parameterName, object value);
    public MySqlParameter(string parameterName, MySqlDbType dbType);
    public MySqlParameter(string parameterName, MySqlDbType dbType, int size);
    public MySqlParameter(string parameterName, MySqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    internal MySqlParameter(string name, MySqlDbType type, ParameterDirection dir, string col, DataRowVersion sourceVersion, object val, bool sourceColumnNullMapping);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
internal MySqlParameterCollection get_Collection();
    [CompilerGeneratedAttribute]
internal void set_Collection(MySqlParameterCollection value);
    [CompilerGeneratedAttribute]
internal Encoding get_Encoding();
    [CompilerGeneratedAttribute]
internal void set_Encoding(Encoding value);
    internal bool get_TypeHasBeenSet();
    internal string get_BaseName();
    [CompilerGeneratedAttribute]
public virtual ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    public MySqlDbType get_MySqlDbType();
    public void set_MySqlDbType(MySqlDbType value);
    [CompilerGeneratedAttribute]
public virtual byte get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(byte value);
    [CompilerGeneratedAttribute]
public virtual byte get_Scale();
    [CompilerGeneratedAttribute]
public virtual void set_Scale(byte value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    [CompilerGeneratedAttribute]
internal IMySqlValue get_ValueObject();
    [CompilerGeneratedAttribute]
private void set_ValueObject(IMySqlValue value);
    [CompilerGeneratedAttribute]
public IList get_PossibleValues();
    [CompilerGeneratedAttribute]
internal void set_PossibleValues(IList value);
    [CompilerGeneratedAttribute]
public virtual string get_SourceColumn();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    [CompilerGeneratedAttribute]
public virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public virtual void set_SourceVersion(DataRowVersion value);
    public MySqlParameter Clone();
    private sealed virtual override object System.ICloneable.Clone();
    private void SetParameterName(string name);
    public virtual string ToString();
    internal int GetPSType();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlParameter/<SerializeAsync>d__83")]
internal Task SerializeAsync(MySqlPacket packet, bool binary, MySqlConnectionStringBuilder settings, bool execAsync);
    private void SetMySqlDbType(MySqlDbType mysqlDbtype);
    private void SetTypeFromValue();
    internal long EstimatedSize();
    public virtual void ResetDbType();
    private void SetDbTypeFromMySqlDbType();
    private void SetDbType(DbType dbType);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("True")]
public class MySql.Data.MySqlClient.MySqlParameterCollection : DbParameterCollection {
    private List`1<MySqlParameter> _items;
    private Dictionary`2<string, int> _indexHashCs;
    private Dictionary`2<string, int> _indexHashCi;
    internal bool containsUnnamedParameters;
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public MySqlParameter Item { get; public set; }
    public MySqlParameter Item { get; public set; }
    public object SyncRoot { get; }
    internal MySqlParameterCollection(MySqlCommand cmd);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public MySqlParameter get_Item(int index);
    public void set_Item(int index, MySqlParameter value);
    public MySqlParameter get_Item(string name);
    public void set_Item(string name, MySqlParameter value);
    public MySqlParameter Add(string parameterName, MySqlDbType dbType, int size, string sourceColumn);
    public MySqlParameter Add(MySqlParameter value);
    public MySqlParameter AddWithValue(string parameterName, object value);
    public MySqlParameter Add(string parameterName, MySqlDbType dbType);
    public MySqlParameter Add(string parameterName, MySqlDbType dbType, int size);
    public virtual void Clear();
    private void CheckIndex(int index);
    private MySqlParameter InternalGetParameter(int index);
    private MySqlParameter InternalGetParameter(string parameterName);
    private void InternalSetParameter(string parameterName, MySqlParameter value);
    private void InternalSetParameter(int index, MySqlParameter value);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    internal void ParameterNameChanged(MySqlParameter p, string oldName, string newName);
    private MySqlParameter InternalAdd(MySqlParameter value, Nullable`1<int> index);
    private int GetNextIndex();
    private static void AdjustHash(Dictionary`2<string, int> hash, string parameterName, int keyIndex, bool addEntry);
    private void AdjustHashes(int keyIndex, bool addEntry);
    private MySqlParameter GetParameterFlexibleInternal(string baseName);
    internal MySqlParameter GetParameterFlexible(string parameterName, bool throwOnNotFound);
    public virtual void AddRange(Array values);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    public virtual int Add(object value);
    public virtual bool Contains(string parameterName);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(string parameterName);
    public virtual void RemoveAt(int index);
    public virtual object get_SyncRoot();
}
internal class MySql.Data.MySqlClient.MySqlParameterConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class MySql.Data.MySqlClient.MySqlPool : object {
    private List`1<Driver> _inUsePool;
    private LinkedList`1<Driver> _idlePool;
    private UInt32 _minSize;
    private UInt32 _maxSize;
    private AutoResetEvent _autoEvent;
    private int _available;
    private object _dnsSrvLock;
    [CompilerGeneratedAttribute]
private MySqlConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcedureCache <ProcedureCache>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BeingCleared>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ServerProperties>k__BackingField;
    public MySqlConnectionStringBuilder Settings { get; public set; }
    public ProcedureCache ProcedureCache { get; }
    private bool HasIdleConnections { get; }
    private int NumConnections { get; }
    public bool BeingCleared { get; private set; }
    internal Dictionary`2<string, string> ServerProperties { get; internal set; }
    public MySqlPool(MySqlConnectionStringBuilder settings);
    private void EnqueueIdle(Driver driver);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<InitializeAsync>d__9")]
private Task`1<MySqlPool> InitializeAsync(bool execAsync, CancellationToken cancellationToken);
    public static Task`1<MySqlPool> CreateMySqlPoolAsync(MySqlConnectionStringBuilder settings, bool execAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public MySqlConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(MySqlConnectionStringBuilder value);
    [CompilerGeneratedAttribute]
public ProcedureCache get_ProcedureCache();
    private bool get_HasIdleConnections();
    private int get_NumConnections();
    [CompilerGeneratedAttribute]
public bool get_BeingCleared();
    [CompilerGeneratedAttribute]
private void set_BeingCleared(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_ServerProperties();
    [CompilerGeneratedAttribute]
internal void set_ServerProperties(Dictionary`2<string, string> value);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<GetPooledConnectionAsync>d__30")]
private Task`1<Driver> GetPooledConnectionAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<CreateNewPooledConnectionAsync>d__31")]
private Task`1<Driver> CreateNewPooledConnectionAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<ReleaseConnectionAsync>d__32")]
public Task ReleaseConnectionAsync(Driver driver, bool execAsync);
    public void RemoveConnection(Driver driver);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<TryToGetDriverAsync>d__34")]
private Task`1<Driver> TryToGetDriverAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<GetConnectionAsync>d__35")]
public Task`1<Driver> GetConnectionAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPool/<ClearAsync>d__36")]
internal Task ClearAsync(bool execAsync);
    internal List`1<Driver> RemoveOldIdleConnections();
}
internal class MySql.Data.MySqlClient.MySqlPoolManager : object {
    private static Dictionary`2<string, MySqlPool> Pools;
    private static List`1<MySqlPool> ClearingPools;
    internal static int DEMOTED_TIMEOUT;
    private static SemaphoreSlim waitHandle;
    [CompilerGeneratedAttribute]
private static ConcurrentQueue`1<FailoverServer> <DemotedHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private static List`1<FailoverServer> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private static Timer <DemotedServersTimer>k__BackingField;
    internal static int maxConnectionIdleTime;
    private static Timer timer;
    internal static ConcurrentQueue`1<FailoverServer> DemotedHosts { get; internal set; }
    internal static List`1<FailoverServer> Hosts { get; internal set; }
    internal static Timer DemotedServersTimer { get; internal set; }
    private static MySqlPoolManager();
    [CompilerGeneratedAttribute]
internal static ConcurrentQueue`1<FailoverServer> get_DemotedHosts();
    [CompilerGeneratedAttribute]
internal static void set_DemotedHosts(ConcurrentQueue`1<FailoverServer> value);
    [CompilerGeneratedAttribute]
internal static List`1<FailoverServer> get_Hosts();
    [CompilerGeneratedAttribute]
internal static void set_Hosts(List`1<FailoverServer> value);
    [CompilerGeneratedAttribute]
internal static Timer get_DemotedServersTimer();
    [CompilerGeneratedAttribute]
internal static void set_DemotedServersTimer(Timer value);
    private static void UnloadAssemblyLoadContext(AssemblyLoadContext obj);
    private static void UnloadAppDomain(object sender, EventArgs e);
    private static void UnloadPoolManager();
    private static string GetKey(MySqlConnectionStringBuilder settings);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPoolManager/<GetPoolAsync>d__23")]
public static Task`1<MySqlPool> GetPoolAsync(MySqlConnectionStringBuilder settings, bool execAsync, CancellationToken cancellationToken);
    public static void RemoveConnection(Driver driver);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPoolManager/<ReleaseConnectionAsync>d__25")]
public static Task ReleaseConnectionAsync(Driver driver, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPoolManager/<ClearPoolAsync>d__26")]
public static Task ClearPoolAsync(MySqlConnectionStringBuilder settings, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPoolManager/<ClearPoolByTextAsync>d__27")]
private static Task ClearPoolByTextAsync(string key, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPoolManager/<ClearAllPoolsAsync>d__28")]
public static Task ClearAllPoolsAsync(bool execAsync);
    public static void RemoveClearedPool(MySqlPool pool);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlPoolManager/<CleanIdleConnections>d__30")]
public static void CleanIdleConnections(object obj);
    internal static void ReleaseDemotedHosts(object state);
}
internal class MySql.Data.MySqlClient.MySqlPromotableTransaction : object {
    [ThreadStaticAttribute]
private static Stack`1<MySqlTransactionScope> globalScopeStack;
    private MySqlConnection connection;
    private Transaction baseTransaction;
    private Stack`1<MySqlTransactionScope> scopeStack;
    public Transaction BaseTransaction { get; }
    public MySqlConnection Connection { get; public set; }
    public bool InRollback { get; }
    public MySqlPromotableTransaction(MySqlConnection connection, Transaction baseTransaction);
    public Transaction get_BaseTransaction();
    public MySqlConnection get_Connection();
    public void set_Connection(MySqlConnection value);
    public bool get_InRollback();
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Initialize();
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override void System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    private sealed virtual override Byte[] System.Transactions.ITransactionPromoter.Promote();
}
public class MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public MySqlCommand Command { get; }
    public MySqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public MySqlCommand get_Command();
}
public class MySql.Data.MySqlClient.MySqlRowUpdatedEventHandler : MulticastDelegate {
    public MySqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public MySqlCommand Command { get; public set; }
    public MySqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public MySqlCommand get_Command();
    public void set_Command(MySqlCommand value);
}
public class MySql.Data.MySqlClient.MySqlRowUpdatingEventHandler : MulticastDelegate {
    public MySqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MySql.Data.MySqlClient.MySqlSchemaCollection : object {
    private List`1<SchemaColumn> _columns;
    private List`1<MySqlSchemaRow> _rows;
    private DataTable _table;
    internal Dictionary`2<string, int> Mapping;
    internal Dictionary`2<int, int> LogicalMappings;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public IList`1<SchemaColumn> Columns { get; }
    public IList`1<MySqlSchemaRow> Rows { get; }
    public MySqlSchemaCollection(string name);
    public MySqlSchemaCollection(DataTable dt);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public IList`1<SchemaColumn> get_Columns();
    public IList`1<MySqlSchemaRow> get_Rows();
    internal SchemaColumn AddColumn(string name, Type t);
    internal int ColumnIndex(string name);
    internal void RemoveColumn(string name);
    internal bool ContainsColumn(string name);
    internal MySqlSchemaRow AddRow();
    internal MySqlSchemaRow NewRow();
    internal DataTable AsDataTable();
}
[DefaultMemberAttribute("Item")]
public class MySql.Data.MySqlClient.MySqlSchemaRow : object {
    private Dictionary`2<int, object> _data;
    [CompilerGeneratedAttribute]
private MySqlSchemaCollection <Collection>k__BackingField;
    internal MySqlSchemaCollection Collection { get; }
    internal object Item { get; internal set; }
    internal object Item { get; internal set; }
    public MySqlSchemaRow(MySqlSchemaCollection c);
    internal void InitMetadata();
    [CompilerGeneratedAttribute]
internal MySqlSchemaCollection get_Collection();
    internal object get_Item(string s);
    internal void set_Item(string s, object value);
    internal object get_Item(int i);
    internal void set_Item(int i, object value);
    private void SetValueForName(string colName, object value);
    private object GetValueForName(string colName);
    internal void CopyRow(MySqlSchemaRow row);
}
public class MySql.Data.MySqlClient.MySqlScript : object {
    [CompilerGeneratedAttribute]
private MySqlStatementExecutedEventHandler StatementExecuted;
    [CompilerGeneratedAttribute]
private MySqlScriptErrorEventHandler Error;
    [CompilerGeneratedAttribute]
private EventHandler ScriptCompleted;
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Delimiter>k__BackingField;
    public MySqlConnection Connection { get; public set; }
    public string Query { get; public set; }
    public string Delimiter { get; public set; }
    public MySqlScript(MySqlConnection connection);
    public MySqlScript(string query);
    public MySqlScript(MySqlConnection connection, string query);
    [CompilerGeneratedAttribute]
public void add_StatementExecuted(MySqlStatementExecutedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StatementExecuted(MySqlStatementExecutedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Error(MySqlScriptErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Error(MySqlScriptErrorEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ScriptCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ScriptCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(MySqlConnection value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public string get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(string value);
    public int Execute();
    private void OnQueryExecuted(ScriptStatement statement);
    private void OnScriptCompleted();
    private bool OnScriptError(Exception ex);
    private List`1<int> BreakScriptIntoLines();
    private static int FindLineNumber(int position, List`1<int> lineNumbers);
    private List`1<ScriptStatement> BreakIntoStatements(bool ansiQuotes, bool noBackslashEscapes);
    private void AdjustDelimiterEnd(MySqlTokenizer tokenizer);
    public Task`1<int> ExecuteAsync();
    public Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
}
public class MySql.Data.MySqlClient.MySqlScriptErrorEventArgs : MySqlScriptEventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignore>k__BackingField;
    public Exception Exception { get; }
    public bool Ignore { get; public set; }
    public MySqlScriptErrorEventArgs(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public bool get_Ignore();
    [CompilerGeneratedAttribute]
public void set_Ignore(bool value);
}
public class MySql.Data.MySqlClient.MySqlScriptErrorEventHandler : MulticastDelegate {
    public MySqlScriptErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlScriptErrorEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlScriptErrorEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class MySql.Data.MySqlClient.MySqlScriptEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ScriptStatement <Statement>k__BackingField;
    internal ScriptStatement Statement { get; internal set; }
    public string StatementText { get; }
    public int Line { get; }
    public int Position { get; }
    [CompilerGeneratedAttribute]
internal ScriptStatement get_Statement();
    [CompilerGeneratedAttribute]
internal void set_Statement(ScriptStatement value);
    public string get_StatementText();
    public int get_Line();
    public int get_Position();
}
public class MySql.Data.MySqlClient.MySqlSecurityPermission : MarshalByRefObject {
    public static PermissionSet CreatePermissionSet(bool includeReflectionPermission);
}
public enum MySql.Data.MySqlClient.MySqlSslMode : Enum {
    public int value__;
    [ObsoleteAttribute("Use 'MySqlSslMode.Disabled' instead.")]
public static MySqlSslMode None;
    public static MySqlSslMode Disabled;
    public static MySqlSslMode Preferred;
    public static MySqlSslMode Prefered;
    public static MySqlSslMode Required;
    public static MySqlSslMode VerifyCA;
    public static MySqlSslMode VerifyFull;
}
public class MySql.Data.MySqlClient.MySqlStatementExecutedEventHandler : MulticastDelegate {
    public MySqlStatementExecutedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MySqlScriptEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlScriptEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class MySql.Data.MySqlClient.MySqlStream : object {
    private byte sequenceByte;
    private int maxBlockSize;
    private ulong maxPacketSize;
    private Byte[] packetHeader;
    private MySqlPacket packet;
    private TimedStream timedStream;
    private Stream inStream;
    private Stream outStream;
    private Socket socket;
    public Socket Socket { get; public set; }
    internal Stream BaseStream { get; }
    public Encoding Encoding { get; public set; }
    public byte SequenceByte { get; public set; }
    public int MaxBlockSize { get; public set; }
    public ulong MaxPacketSize { get; public set; }
    public MySqlStream(Encoding encoding);
    public MySqlStream(Stream baseStream, Encoding encoding, bool compress, Socket pSocket);
    public Socket get_Socket();
    public void set_Socket(Socket value);
    internal Stream get_BaseStream();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlStream/<CloseAsync>d__16")]
public Task CloseAsync(bool execAsync);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public void ResetTimeout(int timeout);
    public byte get_SequenceByte();
    public void set_SequenceByte(byte value);
    public int get_MaxBlockSize();
    public void set_MaxBlockSize(int value);
    public ulong get_MaxPacketSize();
    public void set_MaxPacketSize(ulong value);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlStream/<ReadPacketAsync>d__30")]
public Task`1<MySqlPacket> ReadPacketAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlStream/<ReadFullyAsync>d__31")]
internal static Task ReadFullyAsync(Stream stream, Byte[] buffer, int offset, int count, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlStream/<LoadPacketAsync>d__32")]
public Task LoadPacketAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlStream/<SendPacketAsync>d__33")]
public Task SendPacketAsync(MySqlPacket packet, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlStream/<SendEntirePacketDirectlyAsync>d__34")]
public Task SendEntirePacketDirectlyAsync(Byte[] buffer, int count, bool execAsync);
}
public class MySql.Data.MySqlClient.MySqlTrace : object {
    private static TraceSource source;
    [CompilerGeneratedAttribute]
private static TraceListenerCollection <Listeners>k__BackingField;
    public static TraceListenerCollection Listeners { get; }
    public static SourceSwitch Switch { get; public set; }
    internal static TraceSource Source { get; }
    private static MySqlTrace();
    [CompilerGeneratedAttribute]
public static TraceListenerCollection get_Listeners();
    public static SourceSwitch get_Switch();
    public static void set_Switch(SourceSwitch value);
    internal static TraceSource get_Source();
    internal static void LogInformation(int id, string msg);
    internal static void LogWarning(int id, string msg);
    internal static void LogError(int id, string msg);
    internal static void TraceEvent(TraceEventType eventType, MySqlTraceEventType mysqlEventType, string msgFormat, Object[] args);
}
public enum MySql.Data.MySqlClient.MySqlTraceEventType : Enum {
    public int value__;
    public static MySqlTraceEventType ConnectionOpened;
    public static MySqlTraceEventType ConnectionClosed;
    public static MySqlTraceEventType QueryOpened;
    public static MySqlTraceEventType ResultOpened;
    public static MySqlTraceEventType ResultClosed;
    public static MySqlTraceEventType QueryClosed;
    public static MySqlTraceEventType StatementPrepared;
    public static MySqlTraceEventType StatementExecuted;
    public static MySqlTraceEventType StatementClosed;
    public static MySqlTraceEventType NonQuery;
    public static MySqlTraceEventType UsageAdvisorWarning;
    public static MySqlTraceEventType Warning;
    public static MySqlTraceEventType Error;
    public static MySqlTraceEventType QueryNormalized;
}
public class MySql.Data.MySqlClient.MySqlTransaction : DbTransaction {
    private bool open;
    private bool disposed;
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    public MySqlConnection Connection { get; public set; }
    public IsolationLevel IsolationLevel { get; }
    protected DbConnection DbConnection { get; }
    internal MySqlTransaction(MySqlConnection c, IsolationLevel il);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(MySqlConnection value);
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    protected virtual DbConnection get_DbConnection();
    protected virtual void Dispose(bool disposing);
    public virtual void Commit();
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlTransaction/<CommitAsync>d__16")]
private Task CommitAsync(bool execAsync, CancellationToken cancellationToken);
    public virtual void Rollback();
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlTransaction/<RollbackAsync>d__19")]
private Task RollbackAsync(bool execAsync, CancellationToken cancellationToken);
}
internal class MySql.Data.MySqlClient.MySqlTransactionScope : object {
    public MySqlConnection connection;
    public Transaction baseTransaction;
    public MySqlTransaction simpleTransaction;
    public int rollbackThreadId;
    public MySqlTransactionScope(MySqlConnection con, Transaction trans, MySqlTransaction simpleTransaction);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlTransactionScope/<RollbackAsync>d__5")]
public Task RollbackAsync(SinglePhaseEnlistment singlePhaseEnlistment, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.MySqlTransactionScope/<SinglePhaseCommitAsync>d__6")]
public Task SinglePhaseCommitAsync(SinglePhaseEnlistment singlePhaseEnlistment, bool execAsync);
    public void ChangeConnection(MySqlConnection connection);
}
internal class MySql.Data.MySqlClient.NativeDriver : object {
    private DBVersion version;
    private int threadId;
    protected Byte[] encryptionSeed;
    protected ServerStatusFlags serverStatus;
    protected MySqlStream stream;
    protected Stream baseStream;
    protected MyNetworkStream networkStream;
    private BitArray nullMap;
    private MySqlPacket packet;
    private ClientFlags connectionFlags;
    private Driver owner;
    private int warnings;
    private MySqlAuthenticationPlugin authPlugin;
    private static Regex guidRegex;
    public ClientFlags Flags { get; }
    public int ThreadId { get; }
    public DBVersion Version { get; }
    public ServerStatusFlags ServerStatus { get; }
    public int WarningCount { get; }
    public MySqlPacket Packet { get; }
    internal MySqlConnectionStringBuilder Settings { get; }
    internal Encoding Encoding { get; }
    public NativeDriver(Driver owner);
    private static NativeDriver();
    public sealed virtual ClientFlags get_Flags();
    public sealed virtual int get_ThreadId();
    public sealed virtual DBVersion get_Version();
    public sealed virtual ServerStatusFlags get_ServerStatus();
    public sealed virtual int get_WarningCount();
    public MySqlPacket get_Packet();
    internal MySqlConnectionStringBuilder get_Settings();
    internal Encoding get_Encoding();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<HandleExceptionAsync>d__31")]
private Task HandleExceptionAsync(MySqlException ex, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<SendPacketAsync>d__32")]
internal Task SendPacketAsync(MySqlPacket p, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<SendEmptyPacketAsync>d__33")]
internal Task SendEmptyPacketAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ReadPacketAsync>d__34")]
internal Task`1<MySqlPacket> ReadPacketAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ReadOkAsync>d__35")]
internal Task`1<OkPacket> ReadOkAsync(bool read, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<SetDatabaseAsync>d__36")]
public sealed virtual Task SetDatabaseAsync(string dbName, bool execAsync);
    public sealed virtual void Configure();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<OpenAsync>d__38")]
public sealed virtual Task OpenAsync(bool execAsync, CancellationToken cancellationToken);
    private void SetConnectionFlags(ClientFlags serverCaps);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<AuthenticateAsync>d__40")]
public Task AuthenticateAsync(string authMethod, bool reset, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ResetAsync>d__41")]
public sealed virtual Task ResetAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<SendQueryAsync>d__42")]
public sealed virtual Task SendQueryAsync(MySqlPacket queryPacket, bool execAsync, int paramsPosition);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<CloseAsync>d__43")]
public sealed virtual Task CloseAsync(bool isOpen, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<PingAsync>d__44")]
public sealed virtual Task`1<bool> PingAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<GetResultAsync>d__45")]
public sealed virtual Task`1<Tuple`3<int, int, long>> GetResultAsync(int affectedRow, long insertedId, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ValidateLocalInfileSafePathAsync>d__46")]
private Task ValidateLocalInfileSafePathAsync(string filePath, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<SendFileToServerAsync>d__47")]
private Task SendFileToServerAsync(string filename, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ReadNullMapAsync>d__48")]
private Task ReadNullMapAsync(int fieldCount, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ReadColumnValueAsync>d__49")]
public sealed virtual Task`1<IMySqlValue> ReadColumnValueAsync(int index, MySqlField field, IMySqlValue valObject, bool execAsync);
    public sealed virtual void SkipColumnValue(IMySqlValue valObject);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<GetColumnsDataAsync>d__51")]
public sealed virtual Task GetColumnsDataAsync(MySqlField[] columns, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<GetColumnDataAsync>d__52")]
private Task GetColumnDataAsync(MySqlField field, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ExecutePacketAsync>d__53")]
private Task ExecutePacketAsync(MySqlPacket packetToExecute, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ExecuteStatementAsync>d__54")]
public sealed virtual Task ExecuteStatementAsync(MySqlPacket packetToExecute, bool execAsync);
    private void CheckEOF();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<ReadEOFAsync>d__56")]
private Task ReadEOFAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<PrepareStatementAsync>d__57")]
public sealed virtual Task`1<Tuple`2<int, MySqlField[]>> PrepareStatementAsync(string sql, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<FetchDataRowAsync>d__58")]
public sealed virtual Task`1<bool> FetchDataRowAsync(int statementId, int columns, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<CloseStatementAsync>d__59")]
public sealed virtual Task CloseStatementAsync(int statementId, bool execAsync);
    public sealed virtual void ResetTimeout(int timeout);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.NativeDriver/<SetConnectAttrsAsync>d__61")]
internal Task SetConnectAttrsAsync(bool execAsync);
}
internal class MySql.Data.MySqlClient.OkPacket : object {
    [CompilerGeneratedAttribute]
private long <AffectedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastInsertId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerStatusFlags <ServerStatusFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SessionTracker> <SessionTrackers>k__BackingField;
    internal long AffectedRows { get; private set; }
    internal long LastInsertId { get; private set; }
    internal ServerStatusFlags ServerStatusFlags { get; private set; }
    internal int WarningCount { get; private set; }
    internal string Info { get; private set; }
    internal List`1<SessionTracker> SessionTrackers { get; private set; }
    [CompilerGeneratedAttribute]
internal long get_AffectedRows();
    [CompilerGeneratedAttribute]
private void set_AffectedRows(long value);
    [CompilerGeneratedAttribute]
internal long get_LastInsertId();
    [CompilerGeneratedAttribute]
private void set_LastInsertId(long value);
    [CompilerGeneratedAttribute]
internal ServerStatusFlags get_ServerStatusFlags();
    [CompilerGeneratedAttribute]
private void set_ServerStatusFlags(ServerStatusFlags value);
    [CompilerGeneratedAttribute]
internal int get_WarningCount();
    [CompilerGeneratedAttribute]
private void set_WarningCount(int value);
    [CompilerGeneratedAttribute]
internal string get_Info();
    [CompilerGeneratedAttribute]
private void set_Info(string value);
    [CompilerGeneratedAttribute]
internal List`1<SessionTracker> get_SessionTrackers();
    [CompilerGeneratedAttribute]
private void set_SessionTrackers(List`1<SessionTracker> value);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.OkPacket/<CreateAsync>d__24")]
public static Task`1<OkPacket> CreateAsync(MySqlPacket packet, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.OkPacket/<InitializeAsync>d__26")]
private Task InitializeAsync(MySqlPacket packet, bool execAsync);
    private void AddTracker(SessionTrackType type, string name, string value);
}
internal class MySql.Data.MySqlClient.PerformanceMonitor : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    public MySqlConnection Connection { get; private set; }
    public PerformanceMonitor(MySqlConnection connection);
    [CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(MySqlConnection value);
    public virtual void AddHardProcedureQuery();
    public virtual void AddSoftProcedureQuery();
}
internal class MySql.Data.MySqlClient.PreparableStatement : Statement {
    private BitArray _nullMap;
    private List`1<MySqlParameter> _parametersToSend;
    private MySqlPacket _packet;
    private int _dataPosition;
    private int _nullMapPosition;
    private static int PARAMETER_COUNT_AVAILABLE;
    [CompilerGeneratedAttribute]
private int <ExecutionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatementId>k__BackingField;
    public int ExecutionCount { get; public set; }
    public bool IsPrepared { get; }
    public int StatementId { get; private set; }
    public PreparableStatement(MySqlCommand command, string text);
    [CompilerGeneratedAttribute]
public int get_ExecutionCount();
    [CompilerGeneratedAttribute]
public void set_ExecutionCount(int value);
    public bool get_IsPrepared();
    [CompilerGeneratedAttribute]
public int get_StatementId();
    [CompilerGeneratedAttribute]
private void set_StatementId(int value);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.PreparableStatement/<PrepareAsync>d__17")]
public Task PrepareAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.PreparableStatement/<ExecuteAsync>d__18")]
public virtual Task ExecuteAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.PreparableStatement/<ExecuteNextAsync>d__19")]
public virtual Task`1<bool> ExecuteNextAsync(bool execAsync);
    private List`1<string> PrepareCommandText(String& stripped_sql);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.PreparableStatement/<CloseStatementAsync>d__21")]
public virtual Task CloseStatementAsync(bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<bool> <>n__1(bool execAsync);
}
internal class MySql.Data.MySqlClient.ProcedureCache : object {
    private Dictionary`2<int, ProcedureCacheEntry> _procHash;
    private Queue`1<int> _hashQueue;
    private int _maxSize;
    public ProcedureCache(int size);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ProcedureCache/<GetProcedureAsync>d__4")]
public Task`1<ProcedureCacheEntry> GetProcedureAsync(MySqlConnection conn, string spName, string cacheKey, bool execAsync);
    internal string GetCacheKey(string spName, ProcedureCacheEntry proc);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ProcedureCache/<AddNewAsync>d__6")]
private Task`1<ProcedureCacheEntry> AddNewAsync(MySqlConnection connection, string spName, bool execAsync);
    private void TrimHash();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ProcedureCache/<GetProcDataAsync>d__8")]
private static Task`1<ProcedureCacheEntry> GetProcDataAsync(MySqlConnection connection, string spName, bool execAsync);
    private static void SplitSchemaAndEntity(string spName, String& schema, String& entity);
    private static int ExtractDotIndex(string spName, int dotIndex);
    internal void Clear();
}
internal class MySql.Data.MySqlClient.ProcedureCacheEntry : object {
    public MySqlSchemaCollection procedure;
    public MySqlSchemaCollection parameters;
}
internal static class MySql.Data.MySqlClient.Replication.ReplicationManager : object {
    private static List`1<ReplicationServerGroup> groups;
    private static object thisLock;
    [CompilerGeneratedAttribute]
private static IList`1<ReplicationServerGroup> <Groups>k__BackingField;
    internal static IList`1<ReplicationServerGroup> Groups { get; private set; }
    private static ReplicationManager();
    [CompilerGeneratedAttribute]
internal static IList`1<ReplicationServerGroup> get_Groups();
    [CompilerGeneratedAttribute]
private static void set_Groups(IList`1<ReplicationServerGroup> value);
    internal static ReplicationServerGroup AddGroup(string name, int retryTime);
    internal static ReplicationServerGroup AddGroup(string name, string groupType, int retryTime);
    internal static ReplicationServer GetServer(string groupName, bool isSource);
    internal static ReplicationServerGroup GetGroup(string groupName);
    internal static bool IsReplicationGroup(string groupName);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Replication.ReplicationManager/<GetNewConnectionAsync>d__12")]
internal static Task GetNewConnectionAsync(string groupName, bool source, MySqlConnection connection, bool execAsync, CancellationToken cancellationToken);
}
public class MySql.Data.MySqlClient.Replication.ReplicationRoundRobinServerGroup : ReplicationServerGroup {
    private int nextServer;
    public ReplicationRoundRobinServerGroup(string name, int retryTime);
    protected internal virtual ReplicationServer GetServer(bool isSource);
}
public class MySql.Data.MySqlClient.Replication.ReplicationServer : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaster>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    public string Name { get; private set; }
    [ObsoleteAttribute("This property is deprecated please use IsSource instead.")]
public bool IsMaster { get; private set; }
    public bool IsSource { get; private set; }
    public string ConnectionString { get; internal set; }
    public bool IsAvailable { get; public set; }
    public ReplicationServer(string name, bool isSource, string connectionString);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMaster();
    [CompilerGeneratedAttribute]
private void set_IsMaster(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSource();
    [CompilerGeneratedAttribute]
private void set_IsSource(bool value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public void set_IsAvailable(bool value);
}
public abstract class MySql.Data.MySqlClient.Replication.ReplicationServerGroup : object {
    protected List`1<ReplicationServer> servers;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ReplicationServer> <Servers>k__BackingField;
    public string Name { get; protected set; }
    public int RetryTime { get; protected set; }
    protected IList`1<ReplicationServer> Servers { get; private set; }
    public ReplicationServerGroup(string name, int retryTime);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_RetryTime();
    [CompilerGeneratedAttribute]
protected void set_RetryTime(int value);
    [CompilerGeneratedAttribute]
protected IList`1<ReplicationServer> get_Servers();
    [CompilerGeneratedAttribute]
private void set_Servers(IList`1<ReplicationServer> value);
    protected internal ReplicationServer AddServer(string name, bool isSource, string connectionString);
    protected internal void RemoveServer(string name);
    protected internal ReplicationServer GetServer(string name);
    protected internal abstract virtual ReplicationServer GetServer(bool isSource);
    protected internal virtual ReplicationServer GetServer(bool isSource, MySqlConnectionStringBuilder settings);
    protected internal virtual void HandleFailover(ReplicationServer server);
    protected internal virtual void HandleFailover(ReplicationServer server, Exception exception);
}
public class MySql.Data.MySqlClient.ReplicationConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("ServerGroups")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.ReplicationServerGroupConfigurationElement")]
public GenericConfigurationElementCollection`1<ReplicationServerGroupConfigurationElement> ServerGroups { get; }
    public GenericConfigurationElementCollection`1<ReplicationServerGroupConfigurationElement> get_ServerGroups();
}
public class MySql.Data.MySqlClient.ReplicationServerConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("IsMaster")]
[ObsoleteAttribute("This property is deprecated, please use IsSource instead.")]
public bool IsMaster { get; public set; }
    [ConfigurationPropertyAttribute("IsSource")]
public bool IsSource { get; public set; }
    [ConfigurationPropertyAttribute("connectionstring")]
public string ConnectionString { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsMaster();
    public void set_IsMaster(bool value);
    public bool get_IsSource();
    public void set_IsSource(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
}
public class MySql.Data.MySqlClient.ReplicationServerGroupConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("groupType")]
public string GroupType { get; public set; }
    [ConfigurationPropertyAttribute("retryTime")]
public int RetryTime { get; public set; }
    [ConfigurationPropertyAttribute("Servers")]
[ConfigurationCollectionAttribute("MySql.Data.MySqlClient.ReplicationServerConfigurationElement")]
public GenericConfigurationElementCollection`1<ReplicationServerConfigurationElement> Servers { get; }
    public string get_Name();
    public void set_Name(string value);
    public string get_GroupType();
    public void set_GroupType(string value);
    public int get_RetryTime();
    public void set_RetryTime(int value);
    public GenericConfigurationElementCollection`1<ReplicationServerConfigurationElement> get_Servers();
}
[DefaultMemberAttribute("Item")]
internal class MySql.Data.MySqlClient.ResultSet : object {
    private Driver _driver;
    private Boolean[] _uaFieldsUsed;
    private Dictionary`2<string, int> _fieldHashCi;
    private int _rowIndex;
    private bool _readDone;
    private bool _isSequential;
    private int _seqIndex;
    private int _statementId;
    private bool _cached;
    private List`1<IMySqlValue[]> _cachedValues;
    [CompilerGeneratedAttribute]
private bool <HasRows>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlField[] <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private IMySqlValue[] <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOutputParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AffectedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private long <InsertedId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalRows>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkippedRows>k__BackingField;
    public bool HasRows { get; private set; }
    public int Size { get; }
    public MySqlField[] Fields { get; private set; }
    public IMySqlValue[] Values { get; private set; }
    public bool IsOutputParameters { get; public set; }
    public int AffectedRows { get; private set; }
    public long InsertedId { get; private set; }
    public int TotalRows { get; private set; }
    public int SkippedRows { get; private set; }
    public bool Cached { get; public set; }
    public IMySqlValue Item { get; }
    public ResultSet(int affectedRows, long insertedId);
    private ResultSet(Driver d, int statementId);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<CreateResultSetAsync>d__11")]
public static Task`1<ResultSet> CreateResultSetAsync(Driver d, int statementId, int numCols, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<InitializeAsync>d__13")]
private Task InitializeAsync(int numCols, bool execAsync);
    [CompilerGeneratedAttribute]
public bool get_HasRows();
    [CompilerGeneratedAttribute]
private void set_HasRows(bool value);
    public int get_Size();
    [CompilerGeneratedAttribute]
public MySqlField[] get_Fields();
    [CompilerGeneratedAttribute]
private void set_Fields(MySqlField[] value);
    [CompilerGeneratedAttribute]
public IMySqlValue[] get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IMySqlValue[] value);
    [CompilerGeneratedAttribute]
public bool get_IsOutputParameters();
    [CompilerGeneratedAttribute]
public void set_IsOutputParameters(bool value);
    [CompilerGeneratedAttribute]
public int get_AffectedRows();
    [CompilerGeneratedAttribute]
private void set_AffectedRows(int value);
    [CompilerGeneratedAttribute]
public long get_InsertedId();
    [CompilerGeneratedAttribute]
private void set_InsertedId(long value);
    [CompilerGeneratedAttribute]
public int get_TotalRows();
    [CompilerGeneratedAttribute]
private void set_TotalRows(int value);
    [CompilerGeneratedAttribute]
public int get_SkippedRows();
    [CompilerGeneratedAttribute]
private void set_SkippedRows(int value);
    public bool get_Cached();
    public void set_Cached(bool value);
    public int GetOrdinal(string name);
    public IMySqlValue get_Item(int index);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<GetNextRowAsync>d__54")]
private Task`1<bool> GetNextRowAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<NextRowAsync>d__55")]
public Task`1<bool> NextRowAsync(CommandBehavior behavior, bool execAsync);
    private bool CachedNextRow(CommandBehavior behavior);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<CloseAsync>d__57")]
public Task CloseAsync(bool execAsync);
    private void CacheClose();
    private void CacheReset();
    public bool FieldRead(int index);
    public void SetValueObject(int i, IMySqlValue valueObject);
    private bool IsOutputParameterResultSet();
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<LoadColumnsAsync>d__63")]
private Task LoadColumnsAsync(int numCols, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.ResultSet/<ReadColumnDataAsync>d__64")]
private Task ReadColumnDataAsync(bool outputParms, bool execAsync);
}
public class MySql.Data.MySqlClient.SchemaColumn : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
internal class MySql.Data.MySqlClient.SchemaProvider : object {
    protected MySqlConnection connection;
    public static string MetaCollection;
    public SchemaProvider(MySqlConnection connectionToUse);
    private static SchemaProvider();
    public MySqlSchemaCollection GetSchema(string collection, String[] restrictions);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetSchemaAsync>d__4")]
public Task`1<MySqlSchemaCollection> GetSchemaAsync(string collection, String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetDatabasesAsync>d__5")]
public virtual Task`1<MySqlSchemaCollection> GetDatabasesAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetTablesAsync>d__6")]
public virtual Task`1<MySqlSchemaCollection> GetTablesAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    protected void QuoteDefaultValues(MySqlSchemaCollection schemaCollection);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetColumnsAsync>d__8")]
public virtual Task`1<MySqlSchemaCollection> GetColumnsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<LoadTableColumnsAsync>d__9")]
private Task LoadTableColumnsAsync(MySqlSchemaCollection schemaCollection, string schema, string tableName, string columnRestriction, bool execAsync, CancellationToken cancellationToken);
    private static void ParseColumnRow(MySqlSchemaRow row);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetIndexesAsync>d__11")]
public virtual Task`1<MySqlSchemaCollection> GetIndexesAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetIndexColumnsAsync>d__12")]
public virtual Task`1<MySqlSchemaCollection> GetIndexColumnsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetForeignKeysAsync>d__13")]
public virtual Task`1<MySqlSchemaCollection> GetForeignKeysAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetForeignKeyColumnsAsync>d__14")]
public virtual Task`1<MySqlSchemaCollection> GetForeignKeyColumnsAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetSqlModeAsync>d__15")]
private Task`1<string> GetSqlModeAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetForeignKeysOnTableAsync>d__16")]
private Task GetForeignKeysOnTableAsync(MySqlSchemaCollection fkTable, MySqlSchemaRow tableToParse, string filterName, bool includeColumns, bool execAsync, CancellationToken cancellationToken);
    private static void ParseConstraint(MySqlSchemaCollection fkTable, MySqlSchemaRow table, MySqlTokenizer tokenizer, bool includeColumns);
    private static List`1<string> ParseColumns(MySqlTokenizer tokenizer);
    private static void ProcessColumns(MySqlSchemaCollection fkTable, MySqlSchemaRow row, List`1<string> srcColumns, List`1<string> targetColumns);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetUsersAsync>d__20")]
public Task`1<MySqlSchemaCollection> GetUsersAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    protected virtual MySqlSchemaCollection GetCollections();
    private MySqlSchemaCollection GetDataSourceInformation();
    private static MySqlSchemaCollection GetDataTypes();
    protected virtual MySqlSchemaCollection GetRestrictions();
    internal static MySqlSchemaCollection GetReservedWords();
    protected static void FillTable(MySqlSchemaCollection dt, Object[][] data);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<FindTablesAsync>d__27")]
private Task FindTablesAsync(MySqlSchemaCollection schema, String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    private static string GetString(MySqlDataReader reader, int index);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetUDFAsync>d__29")]
public Task`1<MySqlSchemaCollection> GetUDFAsync(String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<GetSchemaInternalAsync>d__30")]
protected virtual Task`1<MySqlSchemaCollection> GetSchemaInternalAsync(string collection, String[] restrictions, bool execAsync, CancellationToken cancellationToken);
    internal String[] CleanRestrictions(String[] restrictionValues);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.SchemaProvider/<QueryCollectionAsync>d__32")]
protected Task`1<MySqlSchemaCollection> QueryCollectionAsync(string name, string sql, bool execAsync, CancellationToken cancellationToken);
}
internal class MySql.Data.MySqlClient.ScriptStatement : ValueType {
    public string text;
    public int line;
    public int position;
}
[FlagsAttribute]
internal enum MySql.Data.MySqlClient.ServerStatusFlags : Enum {
    public int value__;
    public static ServerStatusFlags InTransaction;
    public static ServerStatusFlags AutoCommitMode;
    public static ServerStatusFlags MoreResults;
    public static ServerStatusFlags AnotherQuery;
    public static ServerStatusFlags BadIndex;
    public static ServerStatusFlags NoIndex;
    public static ServerStatusFlags CursorExists;
    public static ServerStatusFlags LastRowSent;
    public static ServerStatusFlags DbDropped;
    public static ServerStatusFlags NoBackslashEscapes;
    public static ServerStatusFlags MetadataChanged;
    public static ServerStatusFlags WasSlow;
    public static ServerStatusFlags OutputParameters;
    public static ServerStatusFlags InTransactionReadOnly;
    public static ServerStatusFlags SessionStateChanged;
}
internal class MySql.Data.MySqlClient.SessionTracker : ValueType {
    internal SessionTrackType TrackType;
    internal string Name;
    internal string Value;
}
internal enum MySql.Data.MySqlClient.SessionTrackType : Enum {
    public int value__;
    public static SessionTrackType SystemVariables;
    public static SessionTrackType Schema;
    public static SessionTrackType StateChange;
    public static SessionTrackType GTIDS;
    public static SessionTrackType TransactionCharacteristics;
    public static SessionTrackType TransactionState;
}
internal abstract class MySql.Data.MySqlClient.Statement : object {
    protected MySqlCommand command;
    private List`1<MySqlPacket> _buffers;
    protected string commandText;
    protected int paramsPosition;
    internal static string ParameterPrefix;
    [CompilerGeneratedAttribute]
private bool <ServerProvidingOutputParameters>k__BackingField;
    public bool ServerProvidingOutputParameters { get; internal set; }
    public string ResolvedCommandText { get; }
    protected Driver Driver { get; }
    protected MySqlConnection Connection { get; }
    protected MySqlParameterCollection Parameters { get; }
    protected MySqlAttributeCollection Attributes { get; }
    private Statement(MySqlCommand cmd);
    protected Statement(MySqlCommand cmd, string text);
    [CompilerGeneratedAttribute]
public virtual bool get_ServerProvidingOutputParameters();
    [CompilerGeneratedAttribute]
internal virtual void set_ServerProvidingOutputParameters(bool value);
    public virtual string get_ResolvedCommandText();
    protected Driver get_Driver();
    protected MySqlConnection get_Connection();
    protected MySqlParameterCollection get_Parameters();
    protected MySqlAttributeCollection get_Attributes();
    public virtual void Close(MySqlDataReader reader);
    public virtual void Resolve(bool preparing);
    private string SetSql(MySqlParameterCollection parms, bool preparing);
    private string CreateOutputSelect(MySqlParameterCollection parms, bool preparing);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Statement/<ExecuteAsync>d__25")]
public virtual Task ExecuteAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Statement/<ExecuteNextAsync>d__26")]
public virtual Task`1<bool> ExecuteNextAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Statement/<BindParametersAsync>d__27")]
protected Task BindParametersAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Statement/<BuildQueryAttributesPacketAsync>d__28")]
private Task`1<MySqlPacket> BuildQueryAttributesPacketAsync(MySqlAttributeCollection attributes, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Statement/<InternalBindParametersAsync>d__29")]
private Task InternalBindParametersAsync(string sql, MySqlParameterCollection parameters, MySqlPacket packet, bool execAsync);
    protected virtual bool ShouldIgnoreMissingParameter(string parameterName);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.Statement/<SerializeParameterAsync>d__31")]
private Task`1<bool> SerializeParameterAsync(MySqlParameterCollection parameters, MySqlPacket packet, string parmName, int parameterIndex, bool execAsync);
}
internal class MySql.Data.MySqlClient.StoredProcedure : PreparableStatement {
    private string _outSelect;
    private string resolvedCommandText;
    public string ResolvedCommandText { get; }
    public StoredProcedure(MySqlCommand cmd, string text);
    private MySqlParameter GetReturnParameter();
    public virtual string get_ResolvedCommandText();
    internal string GetCacheKey(string spName);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.StoredProcedure/<GetParametersAsync>d__7")]
private Task`1<ProcedureCacheEntry> GetParametersAsync(string procName, bool execAsync);
    public static string GetFlags(string dtd);
    internal static string FixProcedureName(string spName);
    internal static bool IsSyntacticallyCorrect(string spName);
    private MySqlParameter GetAndFixParameter(string spName, MySqlSchemaRow param, bool realAsFloat, MySqlParameter returnParameter);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.StoredProcedure/<CheckParametersAsync>d__12")]
private Task`1<MySqlParameterCollection> CheckParametersAsync(string spName, bool execAsync);
    public virtual void Resolve(bool preparing);
    private string SetUserVariables(MySqlParameterCollection parms, bool preparing);
    private string CreateCallStatement(string spName, MySqlParameter returnParameter, MySqlParameterCollection parms);
    private string CreateOutputSelect(MySqlParameterCollection parms, bool preparing);
    internal void ProcessOutputParameters(MySqlDataReader reader);
    private void AdjustOutputTypes(MySqlDataReader reader);
    public virtual void Close(MySqlDataReader reader);
}
internal class MySql.Data.MySqlClient.TableCache : object {
    private static BaseTableCache cache;
    private static TableCache();
    public static void AddToCache(string commandText, ResultSet resultSet);
    public static ResultSet RetrieveFromCache(string commandText, int cacheAge);
    public static void RemoveFromCache(string commandText);
    public static void DumpCache();
}
internal class MySql.Data.MySqlClient.TimedStream : Stream {
    private Stream _baseStream;
    private int _timeout;
    private int _lastReadTimeout;
    private int _lastWriteTimeout;
    private LowResolutionStopwatch _stopwatch;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    internal bool IsClosed { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanTimeout { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public TimedStream(Stream baseStream);
    [CompilerGeneratedAttribute]
internal bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    private bool ShouldResetStreamTimeout(int currentValue, int newValue);
    private void StartTimer(IOKind op);
    private void StopTimer();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TimedStream/<FlushAsync>d__22")]
private Task FlushAsync(bool execAsync);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TimedStream/<ReadAsync>d__30")]
private Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, bool execAsync);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TimedStream/<WriteAsync>d__36")]
private Task WriteAsync(Byte[] buffer, int offset, int count, bool execAsync);
    public virtual bool get_CanTimeout();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Close();
    public void ResetTimeout(int newTimeout);
    private void HandleException(Exception e);
}
internal class MySql.Data.MySqlClient.TracingDriver : Driver {
    private static long driverCounter;
    private long driverId;
    private ResultSet activeResult;
    private int rowSizeInBytes;
    public TracingDriver(MySqlConnectionStringBuilder settings);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<OpenAsync>d__5")]
public virtual Task OpenAsync(bool execAsync, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<CloseAsync>d__6")]
public virtual Task CloseAsync(bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<SendQueryAsync>d__7")]
public virtual Task SendQueryAsync(MySqlPacket p, int paramsPosition, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<GetResultAsync>d__8")]
protected virtual Task`1<Tuple`3<int, int, long>> GetResultAsync(int statementId, int affectedRows, long insertedId, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<NextResultAsync>d__9")]
public virtual Task`1<ResultSet> NextResultAsync(int statementId, bool force, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<PrepareStatementAsync>d__10")]
public virtual Task`1<Tuple`2<int, MySqlField[]>> PrepareStatementAsync(string sql, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<CloseStatementAsync>d__11")]
public virtual Task CloseStatementAsync(int id, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<SetDatabaseAsync>d__12")]
public virtual Task SetDatabaseAsync(string dbName, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<ExecuteStatementAsync>d__13")]
public virtual Task ExecuteStatementAsync(MySqlPacket packetToExecute, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<FetchDataRowAsync>d__14")]
public virtual Task`1<bool> FetchDataRowAsync(int statementId, int columns, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<CloseQueryAsync>d__15")]
public virtual Task CloseQueryAsync(MySqlConnection connection, int statementId, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.MySqlClient.TracingDriver/<ReportWarningsAsync>d__16")]
public virtual Task`1<List`1<MySqlError>> ReportWarningsAsync(MySqlConnection connection, bool execAsync);
    private bool AllFieldsAccessed(ResultSet rs);
    private void ReportUsageAdvisorWarnings(int statementId, ResultSet rs);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(bool execAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(MySqlPacket p, int paramsPosition, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Tuple`3<int, int, long>> <>n__3(int statementId, int affectedRows, long insertedId, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ResultSet> <>n__4(int statementId, bool force, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Tuple`2<int, MySqlField[]>> <>n__5(string sql, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(int id, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__7(string dbName, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__8(MySqlPacket packetToExecute, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<bool> <>n__9(int statementId, int columns, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__10(MySqlConnection connection, int statementId, bool execAsync);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<List`1<MySqlError>> <>n__11(MySqlConnection connection, bool execAsync);
}
public enum MySql.Data.MySqlClient.UsageAdvisorWarningFlags : Enum {
    public int value__;
    public static UsageAdvisorWarningFlags NoIndex;
    public static UsageAdvisorWarningFlags BadIndex;
    public static UsageAdvisorWarningFlags SkippedRows;
    public static UsageAdvisorWarningFlags SkippedColumns;
    public static UsageAdvisorWarningFlags FieldConversion;
}
internal class MySql.Data.MySqlClient.Utils : object {
    public static string ReadResource(string name);
    public static string ReadResourceInternal(string name);
    public static string UnquoteString(string quotedString);
    public static int GetLengthSize(ulong length);
}
public class MySql.Data.MySqlClient.WebAuthnActionCallback : MulticastDelegate {
    public WebAuthnActionCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum MySql.Data.MySqlClient.X.XDevAPI.Common.ColumnContentType : Enum {
    public int value__;
    public static ColumnContentType Geometry;
    public static ColumnContentType Json;
    public static ColumnContentType Xml;
}
public enum MySql.Data.MySqlClient.X.XDevAPI.Common.ColumnType : Enum {
    public int value__;
    public static ColumnType Bit;
    public static ColumnType Tinyint;
    public static ColumnType Smallint;
    public static ColumnType Mediumint;
    public static ColumnType Int;
    public static ColumnType Bigint;
    public static ColumnType Float;
    public static ColumnType Decimal;
    public static ColumnType Double;
    public static ColumnType Json;
    public static ColumnType String;
    public static ColumnType Bytes;
    public static ColumnType Time;
    public static ColumnType Date;
    public static ColumnType DateTime;
    public static ColumnType Timestamp;
    public static ColumnType Set;
    public static ColumnType Enum;
    public static ColumnType Geometry;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MySql.Data.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AdapterIsNull { get; }
    internal static string AdapterSelectIsNull { get; }
    internal static string AttemptToAccessBeforeRead { get; }
    internal static string AuthenticationFailed { get; }
    internal static string AuthenticationMethodNotSupported { get; }
    internal static string AuthenticationPluginNotSupported { get; }
    internal static string BadVersionFormat { get; }
    internal static string BufferCannotBeNull { get; }
    internal static string BufferNotLargeEnough { get; }
    internal static string CancelNeeds50 { get; }
    internal static string CancelNotSupported { get; }
    internal static string CanNotDeriveParametersForTextCommands { get; }
    internal static string CBMultiTableNotSupported { get; }
    internal static string CBNoKeyColumn { get; }
    internal static string ChaosNotSupported { get; }
    internal static string ClearPasswordNotSupported { get; }
    internal static string CommandTextNotInitialized { get; }
    internal static string CompressionNotSupported { get; }
    internal static string ConnectionAlreadyOpen { get; }
    internal static string ConnectionBroken { get; }
    internal static string ConnectionMustBeOpen { get; }
    internal static string ConnectionNotOpen { get; }
    internal static string ConnectionNotSet { get; }
    internal static string CouldNotFindColumnName { get; }
    internal static string CountCannotBeNegative { get; }
    internal static string CSNoSetLength { get; }
    internal static string DataNotInSupportedFormat { get; }
    internal static string DataReaderOpen { get; }
    internal static string DefaultEncodingNotFound { get; }
    internal static string DistributedTxnNotSupported { get; }
    internal static string DnsSrvInvalidConnOptionMultihost { get; }
    internal static string DnsSrvInvalidConnOptionPort { get; }
    internal static string DnsSrvInvalidConnOptionUnixSocket { get; }
    internal static string DnsSrvNoHostsAvailable { get; }
    internal static string EncodingError { get; }
    internal static string ErrorCreatingSocket { get; }
    internal static string ExecuteProcedureUnauthorized { get; }
    internal static string FatalErrorDuringExecute { get; }
    internal static string FatalErrorDuringRead { get; }
    internal static string FatalErrorReadingResult { get; }
    internal static string FidoChallengeCorrupt { get; }
    internal static string FidoRegistrationMissing { get; }
    internal static string FileBasedCertificateNotSupported { get; }
    internal static string FileIsNotACertificate { get; }
    internal static string FileIsNotAKey { get; }
    internal static string FileNotFound { get; }
    internal static string FilePathNotSet { get; }
    internal static string FromAndLengthTooBig { get; }
    internal static string FromIndexMustBeValid { get; }
    internal static string GetHostEntryFailed { get; }
    internal static string HardProcQuery { get; }
    internal static string ImproperValueFormat { get; }
    internal static string IncorrectTransmission { get; }
    internal static string IndexAndLengthTooBig { get; }
    internal static string IndexMustBeValid { get; }
    internal static string InvalidCertificateKey { get; }
    internal static string InvalidCertificateThumbprint { get; }
    internal static string InvalidColumnOrdinal { get; }
    internal static string InvalidConnectionStringValue { get; }
    internal static string InvalidHostNameOrAddress { get; }
    internal static string InvalidMicrosecondValue { get; }
    internal static string InvalidMillisecondValue { get; }
    internal static string InvalidPathForLoadLocalInfile { get; }
    internal static string InvalidProcName { get; }
    internal static string InvalidSslCertificate { get; }
    internal static string InvalidSslCertificateSignature { get; }
    internal static string InvalidSslCertificateSignatureGeneral { get; }
    internal static string InvalidSslMode { get; }
    internal static string InvalidValueForBoolean { get; }
    internal static string KeywordNoNull { get; }
    internal static string KeywordNotSupported { get; }
    internal static string LocalInfileDisabled { get; }
    internal static string MixedParameterNamingNotAllowed { get; }
    internal static string MoreThanOneOPRow { get; }
    internal static string MultipleConnectionsInTransactionNotSupported { get; }
    internal static string NamedPipeNoSeek { get; }
    internal static string NamedPipeNoSetLength { get; }
    internal static string NewValueShouldBeMySqlParameter { get; }
    internal static string NextResultIsClosed { get; }
    internal static string NoBodiesAndTypeNotSet { get; }
    internal static string NoNestedTransactions { get; }
    internal static string NoServerSSLSupport { get; }
    internal static string NoUnixSocketsOnWindows { get; }
    internal static string NoWindowsIdentity { get; }
    internal static string ObjectDisposed { get; }
    internal static string OciConfigFileNotFound { get; }
    internal static string OciConfigProfileNotFound { get; }
    internal static string OciEntryNotFound { get; }
    internal static string OciInvalidKeyFile { get; }
    internal static string OciKeyFileDoesNotExists { get; }
    internal static string OciSDKNotFound { get; }
    internal static string OciSecurityTokenDoesNotExists { get; }
    internal static string OciSecurityTokenFileExceeds10KB { get; }
    internal static string OffsetCannotBeNegative { get; }
    internal static string OffsetMustBeValid { get; }
    internal static string OldPasswordsNotSupported { get; }
    internal static string OptionNotCurrentlySupported { get; }
    internal static string ParameterAlreadyDefined { get; }
    internal static string ParameterCannotBeNegative { get; }
    internal static string ParameterCannotBeNull { get; }
    internal static string ParameterCannotBeNullOrEmpty { get; }
    internal static string ParameterIndexNotFound { get; }
    internal static string ParameterIsInvalid { get; }
    internal static string ParameterMustBeDefined { get; }
    internal static string ParameterNotFoundDuringPrepare { get; }
    internal static string ParameterNullOrEmpty { get; }
    internal static string PasswordMustHaveLegalChars { get; }
    internal static string PerfMonCategoryHelp { get; }
    internal static string PerfMonCategoryName { get; }
    internal static string PerfMonHardProcHelp { get; }
    internal static string PerfMonHardProcName { get; }
    internal static string PerfMonSoftProcHelp { get; }
    internal static string PerfMonSoftProcName { get; }
    internal static string ProcAndFuncSameName { get; }
    internal static string QueryAttributesNotSupported { get; }
    internal static string QueryAttributesNotSupportedByCnet { get; }
    internal static string QueryTooLarge { get; }
    internal static string ReadFromStreamFailed { get; }
    internal static string ReadingPriorColumnUsingSeqAccess { get; }
    internal static string ReplicatedConnectionsAllowOnlyReadonlyStatements { get; }
    internal static string Replication_ConnectionAttemptFailed { get; }
    internal static string Replication_NoAvailableServer { get; }
    internal static string ReplicationGroupNotFound { get; }
    internal static string ReplicationServerNotFound { get; }
    internal static string RoutineNotFound { get; }
    internal static string RoutineRequiresReturnParameter { get; }
    internal static string RSAPublicKeyRetrievalNotEnabled { get; }
    internal static string ServerTooOld { get; }
    internal static string SnapshotNotSupported { get; }
    internal static string SocketNoSeek { get; }
    internal static string SoftProcQuery { get; }
    internal static string SPNotSupported { get; }
    internal static string SslCertificateCAMismatch { get; }
    internal static string SslCertificateHostNameMismatch { get; }
    internal static string SslCertificateIsNotCA { get; }
    internal static string SslConnectionError { get; }
    internal static string SslNotAllowedForConnectionProtocol { get; }
    internal static string StreamAlreadyClosed { get; }
    internal static string StreamNoRead { get; }
    internal static string StreamNoWrite { get; }
    internal static string StringEmpty { get; }
    internal static string Timeout { get; }
    internal static string TimeoutGettingConnection { get; }
    internal static string TimeOutMultipleHost { get; }
    internal static string TlsNonValidProtocols { get; }
    internal static string TlsUnsupportedVersions { get; }
    internal static string TlsVersionsEmpty { get; }
    internal static string TraceCloseConnection { get; }
    internal static string TraceErrorMoreThanMaxValueConnections { get; }
    internal static string TraceFetchError { get; }
    internal static string TraceOpenConnection { get; }
    internal static string TraceOpenResultError { get; }
    internal static string TraceQueryDone { get; }
    internal static string TraceQueryNormalized { get; }
    internal static string TraceQueryOpened { get; }
    internal static string TraceResult { get; }
    internal static string TraceResultClosed { get; }
    internal static string TraceSetDatabase { get; }
    internal static string TraceStatementClosed { get; }
    internal static string TraceStatementExecuted { get; }
    internal static string TraceStatementPrepared { get; }
    internal static string TraceUAWarningBadIndex { get; }
    internal static string TraceUAWarningFieldConversion { get; }
    internal static string TraceUAWarningNoIndex { get; }
    internal static string TraceUAWarningSkippedColumns { get; }
    internal static string TraceUAWarningSkippedRows { get; }
    internal static string TraceWarning { get; }
    internal static string TypeIsNotCommandInterceptor { get; }
    internal static string TypeIsNotExceptionInterceptor { get; }
    internal static string UnableToConnectToHost { get; }
    internal static string UnableToCreateAuthPlugin { get; }
    internal static string UnableToDeriveParameters { get; }
    internal static string UnableToEnableQueryAnalysis { get; }
    internal static string UnableToEnumerateUDF { get; }
    internal static string UnableToExecuteSP { get; }
    internal static string UnableToParseFK { get; }
    internal static string UnableToReadRSAKey { get; }
    internal static string UnableToRetrieveParameters { get; }
    internal static string UnableToStartSecondAsyncOp { get; }
    internal static string UnixSocketsNotSupported { get; }
    internal static string UnknownAuthenticationMethod { get; }
    internal static string UnknownConnectionProtocol { get; }
    internal static string UnmatchedWinUserAndMySqlUser { get; }
    internal static string UnsafePathForLoadLocalInfile { get; }
    internal static string ValueNotCorrectType { get; }
    internal static string ValueNotSupportedForGuid { get; }
    internal static string WebAuthnMissingHandler { get; }
    internal static string WebAuthnTimeout { get; }
    internal static string WinAuthNotSupportOnPlatform { get; }
    internal static string WriteToStreamFailed { get; }
    internal static string WrongParameterName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AdapterIsNull();
    internal static string get_AdapterSelectIsNull();
    internal static string get_AttemptToAccessBeforeRead();
    internal static string get_AuthenticationFailed();
    internal static string get_AuthenticationMethodNotSupported();
    internal static string get_AuthenticationPluginNotSupported();
    internal static string get_BadVersionFormat();
    internal static string get_BufferCannotBeNull();
    internal static string get_BufferNotLargeEnough();
    internal static string get_CancelNeeds50();
    internal static string get_CancelNotSupported();
    internal static string get_CanNotDeriveParametersForTextCommands();
    internal static string get_CBMultiTableNotSupported();
    internal static string get_CBNoKeyColumn();
    internal static string get_ChaosNotSupported();
    internal static string get_ClearPasswordNotSupported();
    internal static string get_CommandTextNotInitialized();
    internal static string get_CompressionNotSupported();
    internal static string get_ConnectionAlreadyOpen();
    internal static string get_ConnectionBroken();
    internal static string get_ConnectionMustBeOpen();
    internal static string get_ConnectionNotOpen();
    internal static string get_ConnectionNotSet();
    internal static string get_CouldNotFindColumnName();
    internal static string get_CountCannotBeNegative();
    internal static string get_CSNoSetLength();
    internal static string get_DataNotInSupportedFormat();
    internal static string get_DataReaderOpen();
    internal static string get_DefaultEncodingNotFound();
    internal static string get_DistributedTxnNotSupported();
    internal static string get_DnsSrvInvalidConnOptionMultihost();
    internal static string get_DnsSrvInvalidConnOptionPort();
    internal static string get_DnsSrvInvalidConnOptionUnixSocket();
    internal static string get_DnsSrvNoHostsAvailable();
    internal static string get_EncodingError();
    internal static string get_ErrorCreatingSocket();
    internal static string get_ExecuteProcedureUnauthorized();
    internal static string get_FatalErrorDuringExecute();
    internal static string get_FatalErrorDuringRead();
    internal static string get_FatalErrorReadingResult();
    internal static string get_FidoChallengeCorrupt();
    internal static string get_FidoRegistrationMissing();
    internal static string get_FileBasedCertificateNotSupported();
    internal static string get_FileIsNotACertificate();
    internal static string get_FileIsNotAKey();
    internal static string get_FileNotFound();
    internal static string get_FilePathNotSet();
    internal static string get_FromAndLengthTooBig();
    internal static string get_FromIndexMustBeValid();
    internal static string get_GetHostEntryFailed();
    internal static string get_HardProcQuery();
    internal static string get_ImproperValueFormat();
    internal static string get_IncorrectTransmission();
    internal static string get_IndexAndLengthTooBig();
    internal static string get_IndexMustBeValid();
    internal static string get_InvalidCertificateKey();
    internal static string get_InvalidCertificateThumbprint();
    internal static string get_InvalidColumnOrdinal();
    internal static string get_InvalidConnectionStringValue();
    internal static string get_InvalidHostNameOrAddress();
    internal static string get_InvalidMicrosecondValue();
    internal static string get_InvalidMillisecondValue();
    internal static string get_InvalidPathForLoadLocalInfile();
    internal static string get_InvalidProcName();
    internal static string get_InvalidSslCertificate();
    internal static string get_InvalidSslCertificateSignature();
    internal static string get_InvalidSslCertificateSignatureGeneral();
    internal static string get_InvalidSslMode();
    internal static string get_InvalidValueForBoolean();
    internal static string get_KeywordNoNull();
    internal static string get_KeywordNotSupported();
    internal static string get_LocalInfileDisabled();
    internal static string get_MixedParameterNamingNotAllowed();
    internal static string get_MoreThanOneOPRow();
    internal static string get_MultipleConnectionsInTransactionNotSupported();
    internal static string get_NamedPipeNoSeek();
    internal static string get_NamedPipeNoSetLength();
    internal static string get_NewValueShouldBeMySqlParameter();
    internal static string get_NextResultIsClosed();
    internal static string get_NoBodiesAndTypeNotSet();
    internal static string get_NoNestedTransactions();
    internal static string get_NoServerSSLSupport();
    internal static string get_NoUnixSocketsOnWindows();
    internal static string get_NoWindowsIdentity();
    internal static string get_ObjectDisposed();
    internal static string get_OciConfigFileNotFound();
    internal static string get_OciConfigProfileNotFound();
    internal static string get_OciEntryNotFound();
    internal static string get_OciInvalidKeyFile();
    internal static string get_OciKeyFileDoesNotExists();
    internal static string get_OciSDKNotFound();
    internal static string get_OciSecurityTokenDoesNotExists();
    internal static string get_OciSecurityTokenFileExceeds10KB();
    internal static string get_OffsetCannotBeNegative();
    internal static string get_OffsetMustBeValid();
    internal static string get_OldPasswordsNotSupported();
    internal static string get_OptionNotCurrentlySupported();
    internal static string get_ParameterAlreadyDefined();
    internal static string get_ParameterCannotBeNegative();
    internal static string get_ParameterCannotBeNull();
    internal static string get_ParameterCannotBeNullOrEmpty();
    internal static string get_ParameterIndexNotFound();
    internal static string get_ParameterIsInvalid();
    internal static string get_ParameterMustBeDefined();
    internal static string get_ParameterNotFoundDuringPrepare();
    internal static string get_ParameterNullOrEmpty();
    internal static string get_PasswordMustHaveLegalChars();
    internal static string get_PerfMonCategoryHelp();
    internal static string get_PerfMonCategoryName();
    internal static string get_PerfMonHardProcHelp();
    internal static string get_PerfMonHardProcName();
    internal static string get_PerfMonSoftProcHelp();
    internal static string get_PerfMonSoftProcName();
    internal static string get_ProcAndFuncSameName();
    internal static string get_QueryAttributesNotSupported();
    internal static string get_QueryAttributesNotSupportedByCnet();
    internal static string get_QueryTooLarge();
    internal static string get_ReadFromStreamFailed();
    internal static string get_ReadingPriorColumnUsingSeqAccess();
    internal static string get_ReplicatedConnectionsAllowOnlyReadonlyStatements();
    internal static string get_Replication_ConnectionAttemptFailed();
    internal static string get_Replication_NoAvailableServer();
    internal static string get_ReplicationGroupNotFound();
    internal static string get_ReplicationServerNotFound();
    internal static string get_RoutineNotFound();
    internal static string get_RoutineRequiresReturnParameter();
    internal static string get_RSAPublicKeyRetrievalNotEnabled();
    internal static string get_ServerTooOld();
    internal static string get_SnapshotNotSupported();
    internal static string get_SocketNoSeek();
    internal static string get_SoftProcQuery();
    internal static string get_SPNotSupported();
    internal static string get_SslCertificateCAMismatch();
    internal static string get_SslCertificateHostNameMismatch();
    internal static string get_SslCertificateIsNotCA();
    internal static string get_SslConnectionError();
    internal static string get_SslNotAllowedForConnectionProtocol();
    internal static string get_StreamAlreadyClosed();
    internal static string get_StreamNoRead();
    internal static string get_StreamNoWrite();
    internal static string get_StringEmpty();
    internal static string get_Timeout();
    internal static string get_TimeoutGettingConnection();
    internal static string get_TimeOutMultipleHost();
    internal static string get_TlsNonValidProtocols();
    internal static string get_TlsUnsupportedVersions();
    internal static string get_TlsVersionsEmpty();
    internal static string get_TraceCloseConnection();
    internal static string get_TraceErrorMoreThanMaxValueConnections();
    internal static string get_TraceFetchError();
    internal static string get_TraceOpenConnection();
    internal static string get_TraceOpenResultError();
    internal static string get_TraceQueryDone();
    internal static string get_TraceQueryNormalized();
    internal static string get_TraceQueryOpened();
    internal static string get_TraceResult();
    internal static string get_TraceResultClosed();
    internal static string get_TraceSetDatabase();
    internal static string get_TraceStatementClosed();
    internal static string get_TraceStatementExecuted();
    internal static string get_TraceStatementPrepared();
    internal static string get_TraceUAWarningBadIndex();
    internal static string get_TraceUAWarningFieldConversion();
    internal static string get_TraceUAWarningNoIndex();
    internal static string get_TraceUAWarningSkippedColumns();
    internal static string get_TraceUAWarningSkippedRows();
    internal static string get_TraceWarning();
    internal static string get_TypeIsNotCommandInterceptor();
    internal static string get_TypeIsNotExceptionInterceptor();
    internal static string get_UnableToConnectToHost();
    internal static string get_UnableToCreateAuthPlugin();
    internal static string get_UnableToDeriveParameters();
    internal static string get_UnableToEnableQueryAnalysis();
    internal static string get_UnableToEnumerateUDF();
    internal static string get_UnableToExecuteSP();
    internal static string get_UnableToParseFK();
    internal static string get_UnableToReadRSAKey();
    internal static string get_UnableToRetrieveParameters();
    internal static string get_UnableToStartSecondAsyncOp();
    internal static string get_UnixSocketsNotSupported();
    internal static string get_UnknownAuthenticationMethod();
    internal static string get_UnknownConnectionProtocol();
    internal static string get_UnmatchedWinUserAndMySqlUser();
    internal static string get_UnsafePathForLoadLocalInfile();
    internal static string get_ValueNotCorrectType();
    internal static string get_ValueNotSupportedForGuid();
    internal static string get_WebAuthnMissingHandler();
    internal static string get_WebAuthnTimeout();
    internal static string get_WinAuthNotSupportOnPlatform();
    internal static string get_WriteToStreamFailed();
    internal static string get_WrongParameterName();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class MySql.Data.ResourcesX : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AppdataNotDefined { get; }
    internal static string AuthenticationFailed { get; }
    internal static string ClientIsClosed { get; }
    internal static string ClientOptionInvalidValue { get; }
    internal static string ClientOptionNotValid { get; }
    internal static string CollectionTableDoesNotExist { get; }
    internal static string CompressionAlgorithmNegotiationFailed { get; }
    internal static string CompressionAlgorithmNotSupported { get; }
    internal static string CompressionForSpecificAlgorithmNotSupportedInNetFramework { get; }
    internal static string CompressionInvalidValue { get; }
    internal static string CompressionNotEnabled { get; }
    internal static string CompressionNotSupportedByServer { get; }
    internal static string CompressionPendingMessagesToProcess { get; }
    internal static string CustomTypeNotSupported { get; }
    internal static string DnsSrvConflictingOptions { get; }
    internal static string DnsSrvInvalidScheme { get; }
    internal static string DocPathNullOrEmpty { get; }
    internal static string DuplicateUserDefinedAttribute { get; }
    internal static string EmptyKeyConnectionAttribute { get; }
    internal static string EmptyOptions { get; }
    internal static string FeatureNotSupported { get; }
    internal static string FunctionalityNotSupported { get; }
    internal static string InvalidCollationId { get; }
    internal static string InvalidConnectionAttributes { get; }
    internal static string InvalidConnectionData { get; }
    internal static string InvalidConnectionString { get; }
    internal static string InvalidConnectionStringAttribute { get; }
    internal static string InvalidConnectionTimeoutValue { get; }
    internal static string InvalidDecimalFormat { get; }
    internal static string InvalidFieldType { get; }
    internal static string InvalidIndexType { get; }
    internal static string InvalidJsonDocument { get; }
    internal static string InvalidNameIndex { get; }
    internal static string InvalidRowIndex { get; }
    internal static string InvalidSession { get; }
    internal static string InvalidUriData { get; }
    internal static string InvalidUriQuery { get; }
    internal static string InvalidUserDefinedAttribute { get; }
    internal static string JsonUriOrHost { get; }
    internal static string KeywordNotFound { get; }
    internal static string KeywordNotSupported { get; }
    internal static string MandatoryFieldNotFound { get; }
    internal static string MissingSchemaOption { get; }
    internal static string MoreThanOneDocumentId { get; }
    internal static string NoDataAtIndex { get; }
    internal static string NoHost { get; }
    internal static string NoMoreData { get; }
    internal static string NoObjectFound { get; }
    internal static string NoPlaceholders { get; }
    internal static string NoticeIdleConnection { get; }
    internal static string NoticeKilledConnection { get; }
    internal static string NoticeServerShutdown { get; }
    internal static string NumberNotGreaterThanZero { get; }
    internal static string PathNotFound { get; }
    internal static string PoolingQueueTimeout { get; }
    internal static string PortNotSupported { get; }
    internal static string PriorityForAllOrNoHosts { get; }
    internal static string PriorityOutOfLimits { get; }
    internal static string ProgramDataNotDefined { get; }
    internal static string ReplaceWithNoMatchingId { get; }
    internal static string SchemaCreateCollectionMsg { get; }
    internal static string ThrowingAwayResults { get; }
    internal static string TimeOutMultipleHost { get; }
    internal static string TimeOutMultipleHost0ms { get; }
    internal static string TimeOutSingleHost { get; }
    internal static string TimeOutSingleHost0ms { get; }
    internal static string UnableToConnect { get; }
    internal static string UnableToDecodeDataValue { get; }
    internal static string UnableToOpenSession { get; }
    internal static string UnexpectedEndOfPacketFound { get; }
    internal static string UnexpectedField { get; }
    internal static string UnknownPlaceholder { get; }
    internal static string ValueNotCorrectType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AppdataNotDefined();
    internal static string get_AuthenticationFailed();
    internal static string get_ClientIsClosed();
    internal static string get_ClientOptionInvalidValue();
    internal static string get_ClientOptionNotValid();
    internal static string get_CollectionTableDoesNotExist();
    internal static string get_CompressionAlgorithmNegotiationFailed();
    internal static string get_CompressionAlgorithmNotSupported();
    internal static string get_CompressionForSpecificAlgorithmNotSupportedInNetFramework();
    internal static string get_CompressionInvalidValue();
    internal static string get_CompressionNotEnabled();
    internal static string get_CompressionNotSupportedByServer();
    internal static string get_CompressionPendingMessagesToProcess();
    internal static string get_CustomTypeNotSupported();
    internal static string get_DnsSrvConflictingOptions();
    internal static string get_DnsSrvInvalidScheme();
    internal static string get_DocPathNullOrEmpty();
    internal static string get_DuplicateUserDefinedAttribute();
    internal static string get_EmptyKeyConnectionAttribute();
    internal static string get_EmptyOptions();
    internal static string get_FeatureNotSupported();
    internal static string get_FunctionalityNotSupported();
    internal static string get_InvalidCollationId();
    internal static string get_InvalidConnectionAttributes();
    internal static string get_InvalidConnectionData();
    internal static string get_InvalidConnectionString();
    internal static string get_InvalidConnectionStringAttribute();
    internal static string get_InvalidConnectionTimeoutValue();
    internal static string get_InvalidDecimalFormat();
    internal static string get_InvalidFieldType();
    internal static string get_InvalidIndexType();
    internal static string get_InvalidJsonDocument();
    internal static string get_InvalidNameIndex();
    internal static string get_InvalidRowIndex();
    internal static string get_InvalidSession();
    internal static string get_InvalidUriData();
    internal static string get_InvalidUriQuery();
    internal static string get_InvalidUserDefinedAttribute();
    internal static string get_JsonUriOrHost();
    internal static string get_KeywordNotFound();
    internal static string get_KeywordNotSupported();
    internal static string get_MandatoryFieldNotFound();
    internal static string get_MissingSchemaOption();
    internal static string get_MoreThanOneDocumentId();
    internal static string get_NoDataAtIndex();
    internal static string get_NoHost();
    internal static string get_NoMoreData();
    internal static string get_NoObjectFound();
    internal static string get_NoPlaceholders();
    internal static string get_NoticeIdleConnection();
    internal static string get_NoticeKilledConnection();
    internal static string get_NoticeServerShutdown();
    internal static string get_NumberNotGreaterThanZero();
    internal static string get_PathNotFound();
    internal static string get_PoolingQueueTimeout();
    internal static string get_PortNotSupported();
    internal static string get_PriorityForAllOrNoHosts();
    internal static string get_PriorityOutOfLimits();
    internal static string get_ProgramDataNotDefined();
    internal static string get_ReplaceWithNoMatchingId();
    internal static string get_SchemaCreateCollectionMsg();
    internal static string get_ThrowingAwayResults();
    internal static string get_TimeOutMultipleHost();
    internal static string get_TimeOutMultipleHost0ms();
    internal static string get_TimeOutSingleHost();
    internal static string get_TimeOutSingleHost0ms();
    internal static string get_UnableToConnect();
    internal static string get_UnableToDecodeDataValue();
    internal static string get_UnableToOpenSession();
    internal static string get_UnexpectedEndOfPacketFound();
    internal static string get_UnexpectedField();
    internal static string get_UnknownPlaceholder();
    internal static string get_ValueNotCorrectType();
}
internal interface MySql.Data.Types.IMySqlValue {
    public bool IsNull { get; }
    public MySqlDbType MySqlDbType { get; }
    public object Value { get; }
    public Type SystemType { get; }
    public string MySqlTypeName { get; }
    public abstract virtual bool get_IsNull();
    public abstract virtual MySqlDbType get_MySqlDbType();
    public abstract virtual object get_Value();
    public abstract virtual Type get_SystemType();
    public abstract virtual string get_MySqlTypeName();
    public abstract virtual Task WriteValueAsync(MySqlPacket packet, bool binary, object value, int length, bool execAsync);
    public abstract virtual Task`1<IMySqlValue> ReadValueAsync(MySqlPacket packet, long length, bool isNull, bool execAsync);
    public abstract virtual void SkipValue(MySqlPacket packet);
}
internal class MySql.Data.Types.MetaData : object {
    public static bool IsNumericType(string typename);
    public static bool IsTextType(string typename);
    public static bool SupportScale(string typename);
    public static MySqlDbType NameToType(string typeName, bool unsigned, bool realAsFloat, MySqlConnection connection);
}
internal class MySql.Data.Types.MySqlBinary : ValueType {
    private MySqlDbType _type;
    private Byte[] _mValue;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public Byte[] Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlBinary(MySqlDbType type, bool isNull);
    public MySqlBinary(MySqlDbType type, Byte[] val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public Byte[] get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlBinary/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__17")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    private static void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlBinary/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__19")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlBit : ValueType {
    private ulong _value;
    [CompilerGeneratedAttribute]
private bool <ReadAsString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool ReadAsString { get; public set; }
    public bool IsNull { get; private set; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlBit(bool isnull);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ReadAsString();
    [CompilerGeneratedAttribute]
public void set_ReadAsString(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
private void set_IsNull(bool value);
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlBit/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__18")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object value, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlBit/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__19")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool isNull, bool execAsync);
    public sealed virtual void SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlByte : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private sbyte <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatAsBoolean>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public sbyte Value { get; public set; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    internal bool TreatAsBoolean { get; internal set; }
    public MySqlByte(bool isNull);
    public MySqlByte(sbyte val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sbyte get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(sbyte value);
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlByte/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__17")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlByte/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__18")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal bool get_TreatAsBoolean();
    [CompilerGeneratedAttribute]
internal void set_TreatAsBoolean(bool value);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
public class MySql.Data.Types.MySqlConversionException : Exception {
    public MySqlConversionException(string msg);
}
public class MySql.Data.Types.MySqlDateTime : ValueType {
    private MySqlDbType _type;
    private int _millisecond;
    private int _microsecond;
    public int TimezoneOffset;
    [CompilerGeneratedAttribute]
private int <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool IsValidDateTime { get; }
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public int Second { get; public set; }
    public int Millisecond { get; public set; }
    public int Microsecond { get; public set; }
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public DateTime Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlDateTime(int year, int month, int day, int hour, int minute, int second, int microsecond);
    public MySqlDateTime(DateTime dt);
    public MySqlDateTime(MySqlDateTime mdt);
    public MySqlDateTime(string dateTime);
    internal MySqlDateTime(MySqlDbType type, int year, int month, int day, int hour, int minute, int second, int microsecond);
    internal MySqlDateTime(MySqlDbType type, bool isNull);
    internal MySqlDateTime(MySqlDbType type, DateTime val);
    public bool get_IsValidDateTime();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Year();
    [CompilerGeneratedAttribute]
public void set_Year(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Month();
    [CompilerGeneratedAttribute]
public void set_Month(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Day();
    [CompilerGeneratedAttribute]
public void set_Day(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
public void set_Hour(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
public void set_Minute(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(int value);
    public int get_Millisecond();
    public void set_Millisecond(int value);
    public int get_Microsecond();
    public void set_Microsecond(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public DateTime get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDateTime/<SerializeTextAsync>d__56")]
private Task SerializeTextAsync(MySqlPacket packet, MySqlDateTime value, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDateTime/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__57")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object value, int length, bool execAsync);
    internal static MySqlDateTime Parse(string s);
    internal static MySqlDateTime Parse(string s, DBVersion version);
    private MySqlDateTime ParseMySql(string s);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDateTime/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__61")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public DateTime GetDateTime();
    private static string FormatDateCustom(string format, int monthVal, int dayVal, int yearVal);
    public virtual string ToString();
    public static DateTime op_Explicit(MySqlDateTime val);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
}
public class MySql.Data.Types.MySqlDecimal : ValueType {
    private string _value;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public decimal Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    internal MySqlDecimal(bool isNull);
    internal MySqlDecimal(string val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(byte value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(byte value);
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public decimal get_Value();
    public double ToDouble();
    public virtual string ToString();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDecimal/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__26")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDecimal/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__27")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlDouble : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public double Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlDouble(bool isNull);
    public MySqlDouble(double val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDouble/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlDouble/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
public class MySql.Data.Types.MySqlGeometry : ValueType {
    private MySqlDbType _type;
    private double _xValue;
    private double _yValue;
    private int _srid;
    private static int GEOMETRY_LENGTH;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Value>k__BackingField;
    public Nullable`1<double> XCoordinate { get; }
    public Nullable`1<double> YCoordinate { get; }
    public Nullable`1<int> SRID { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    public bool IsNull { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public Byte[] Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlGeometry(bool isNull);
    public MySqlGeometry(double xValue, double yValue);
    public MySqlGeometry(double xValue, double yValue, int srid);
    internal MySqlGeometry(MySqlDbType type, bool isNull);
    internal MySqlGeometry(MySqlDbType type, double xValue, double yValue, int srid);
    public MySqlGeometry(MySqlDbType type, Byte[] val);
    public Nullable`1<double> get_XCoordinate();
    public Nullable`1<double> get_YCoordinate();
    public Nullable`1<int> get_SRID();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Byte[] get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlGeometry/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__31")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    private static void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlGeometry/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__33")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public virtual string ToString();
    public static MySqlGeometry Parse(string value);
    public static bool TryParse(string value, MySqlGeometry& mySqlGeometryValue);
    public static void SetDSInfo(MySqlSchemaCollection dsTable);
    public string GetWKT();
}
internal class MySql.Data.Types.MySqlGuid : ValueType {
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OldGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Value>k__BackingField;
    public Byte[] Bytes { get; }
    public bool OldGuids { get; public set; }
    public bool IsNull { get; private set; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public Guid Value { get; private set; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlGuid(Byte[] buff);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_OldGuids();
    [CompilerGeneratedAttribute]
public void set_OldGuids(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
private void set_IsNull(bool value);
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Guid get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Guid value);
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlGuid/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__24")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlGuid/<WriteOldGuidAsync>d__25")]
private Task WriteOldGuidAsync(MySqlPacket packet, Guid guid, bool binary, bool execAsync);
    private static void EscapeByteArray(Byte[] bytes, int length, MySqlPacket packet);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlGuid/<ReadOldGuidAsync>d__27")]
private Task`1<MySqlGuid> ReadOldGuidAsync(MySqlPacket packet, long length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlGuid/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__28")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    public static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlInt16 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public short Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlInt16(bool isNull);
    public MySqlInt16(short val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public short get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlInt16/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlInt16/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlInt32 : ValueType {
    private int _value;
    private bool _is24Bit;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public int Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    private MySqlInt32(MySqlDbType type);
    public MySqlInt32(MySqlDbType type, bool isNull);
    public MySqlInt32(MySqlDbType type, int val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    public int get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlInt32/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__18")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlInt32/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__19")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlInt64 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public long Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlInt64(bool isNull);
    public MySqlInt64(long val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlInt64/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlInt64/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlSingle : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public float Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlSingle(bool isNull);
    public MySqlSingle(float val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlSingle/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlSingle/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlString : ValueType {
    private MySqlDbType _type;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public string Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlString(MySqlDbType type, bool isNull);
    public MySqlString(MySqlDbType type, string val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlString/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__17")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlString/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__18")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlTimeSpan : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Value>k__BackingField;
    public bool IsNull { get; private set; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public TimeSpan Value { get; private set; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlTimeSpan(bool isNull);
    public MySqlTimeSpan(TimeSpan val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    [CompilerGeneratedAttribute]
private void set_IsNull(bool value);
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TimeSpan get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(TimeSpan value);
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlTimeSpan/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__18")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlTimeSpan/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__19")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
    public virtual string ToString();
    private void ParseMySql(string s);
}
internal class MySql.Data.Types.MySqlUByte : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public byte Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlUByte(bool isNull);
    public MySqlUByte(byte val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public byte get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUByte/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUByte/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlUInt16 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public ushort Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlUInt16(bool isNull);
    public MySqlUInt16(ushort val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ushort get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUInt16/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUInt16/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlUInt32 : ValueType {
    private bool _is24Bit;
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public UInt32 Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    private MySqlUInt32(MySqlDbType type);
    public MySqlUInt32(MySqlDbType type, bool isNull);
    public MySqlUInt32(MySqlDbType type, UInt32 val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public UInt32 get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUInt32/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__18")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object v, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUInt32/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__19")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.Types.MySqlUInt64 : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsNull>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Value>k__BackingField;
    public bool IsNull { get; }
    private MySqlDbType MySql.Data.Types.IMySqlValue.MySqlDbType { get; }
    private object MySql.Data.Types.IMySqlValue.Value { get; }
    public ulong Value { get; }
    private Type MySql.Data.Types.IMySqlValue.SystemType { get; }
    private string MySql.Data.Types.IMySqlValue.MySqlTypeName { get; }
    public MySqlUInt64(bool isNull);
    public MySqlUInt64(ulong val);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool get_IsNull();
    private sealed virtual override MySqlDbType MySql.Data.Types.IMySqlValue.get_MySqlDbType();
    private sealed virtual override object MySql.Data.Types.IMySqlValue.get_Value();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ulong get_Value();
    private sealed virtual override Type MySql.Data.Types.IMySqlValue.get_SystemType();
    private sealed virtual override string MySql.Data.Types.IMySqlValue.get_MySqlTypeName();
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUInt64/<MySql-Data-Types-IMySqlValue-WriteValueAsync>d__16")]
private sealed virtual override Task MySql.Data.Types.IMySqlValue.WriteValueAsync(MySqlPacket packet, bool binary, object val, int length, bool execAsync);
    [AsyncStateMachineAttribute("MySql.Data.Types.MySqlUInt64/<MySql-Data-Types-IMySqlValue-ReadValueAsync>d__17")]
private sealed virtual override Task`1<IMySqlValue> MySql.Data.Types.IMySqlValue.ReadValueAsync(MySqlPacket packet, long length, bool nullVal, bool execAsync);
    private sealed virtual override void MySql.Data.Types.IMySqlValue.SkipValue(MySqlPacket packet);
    internal static void SetDSInfo(MySqlSchemaCollection sc);
}
internal class MySql.Data.X.Communication.XPacketProcessor : object {
    private static int HEADER_SIZE;
    private static int MESSAGE_TYPE;
    private Stream _stream;
    private XCompressionController _compressionController;
    private Queue`1<CommunicationPacket> _packetQueue;
    public XPacketProcessor(Stream stream);
    public XPacketProcessor(Stream stream, XCompressionController compressionController);
    private void IdentifyPacket(CommunicationPacket packet);
    public CommunicationPacket GetPacketFromNetworkStream(bool readFromQueue);
    private void ReadFully(Byte[] buffer, int offset, int count);
    public void ProcessPendingPackets(Socket socket);
}
internal static class MySql.Web.Security.Runtime : object {
    private static bool inited;
    private static bool isMono;
    public static bool IsMono { get; }
    public static bool get_IsMono();
    private static void Init();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.ClientMessages : object {
    private static MessageParser`1<ClientMessages> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ClientMessages> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ClientMessages(ClientMessages other);
    private static ClientMessages();
    public static MessageParser`1<ClientMessages> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ClientMessages Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ClientMessages other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ClientMessages other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal static class MySqlX.Common.Tools : object {
    public static Dictionary`2<string, object> GetDictionaryFromAnonymous(object anonymousObject);
    internal static int CompareGuids(string guid1, string guid2);
    internal static int CompareGuids(Guid guid1, Guid guid2);
}
internal static class MySqlX.Common.UnmanagedLibraryLoader : object {
    internal static bool LoadUnmanagedLibraryFromEmbeddedResources(string applicationName, string libraryName);
    private static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, LoadLibraryFlags dwFlags);
}
internal enum MySqlX.Communication.ClientMessageId : Enum {
    public int value__;
    public static ClientMessageId CON_CAPABILITIES_GET;
    public static ClientMessageId CON_CAPABILITIES_SET;
    public static ClientMessageId CON_CLOSE;
    public static ClientMessageId SESS_AUTHENTICATE_START;
    public static ClientMessageId SESS_AUTHENTICATE_CONTINUE;
    public static ClientMessageId SESS_RESET;
    public static ClientMessageId SESS_CLOSE;
    public static ClientMessageId SQL_STMT_EXECUTE;
    public static ClientMessageId CRUD_FIND;
    public static ClientMessageId CRUD_INSERT;
    public static ClientMessageId CRUD_UPDATE;
    public static ClientMessageId CRUD_DELETE;
    public static ClientMessageId EXPECT_OPEN;
    public static ClientMessageId EXPECT_CLOSE;
    public static ClientMessageId COMPRESSION;
}
internal class MySqlX.Communication.CommunicationPacket : object {
    public Byte[] Buffer;
    public int MessageType;
    public int Length;
    public CommunicationPacket(int messageType, int length, Byte[] data);
}
internal enum MySqlX.Communication.ServerMessageId : Enum {
    public int value__;
    public static ServerMessageId OK;
    public static ServerMessageId ERROR;
    public static ServerMessageId CONN_CAPABILITIES;
    public static ServerMessageId SESS_AUTHENTICATE_CONTINUE;
    public static ServerMessageId SESS_AUTHENTICATE_OK;
    public static ServerMessageId NOTICE;
    public static ServerMessageId RESULTSET_COLUMN_META_DATA;
    public static ServerMessageId RESULTSET_ROW;
    public static ServerMessageId RESULTSET_FETCH_DONE;
    public static ServerMessageId RESULTSET_FETCH_SUSPENDED;
    public static ServerMessageId RESULTSET_FETCH_DONE_MORE_RESULTSETS;
    public static ServerMessageId SQL_STMT_EXECUTE_OK;
    public static ServerMessageId RESULTSET_FETCH_DONE_MORE_OUT_PARAMS;
    public static ServerMessageId COMPRESSION;
}
internal class MySqlX.Communication.XCompressionController : object {
    internal static string ALGORITHMS_SUBKEY;
    internal static string COMPRESSION_KEY;
    internal static int COMPRESSION_THRESHOLD;
    internal static bool DEFAULT_SERVER_COMBINE_MIXED_MESSAGES_VALUE;
    internal static int DEFAULT_SERVER_MAX_COMBINE_MESSAGES_VALUE;
    internal static string SERVER_COMBINE_MIXED_MESSAGES_SUBKEY;
    internal static string SERVER_MAX_COMBINE_MESSAGES_SUBKEY;
    private MemoryStream _buffer;
    private DeflateStream _deflateCompressStream;
    private DeflateStream _deflateDecompressStream;
    private bool _initializeForCompression;
    private CommunicationPacket _lastCommunicationPacket;
    private MemoryStream _multipleMessagesStream;
    private DecompressionStream _zstdDecompressStream;
    [CompilerGeneratedAttribute]
private List`1<ClientMessageId> <ClientSupportedCompressedMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionAlgorithms> <CompressionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LastMessageContainsMultipleMessages>k__BackingField;
    internal List`1<ClientMessageId> ClientSupportedCompressedMessages { get; private set; }
    internal Nullable`1<CompressionAlgorithms> CompressionAlgorithm { get; private set; }
    internal bool IsCompressionEnabled { get; }
    internal bool LastMessageContainsMultipleMessages { get; private set; }
    public XCompressionController(CompressionAlgorithms compressionAlgorithm, bool initializeForCompression);
    [CompilerGeneratedAttribute]
internal List`1<ClientMessageId> get_ClientSupportedCompressedMessages();
    [CompilerGeneratedAttribute]
private void set_ClientSupportedCompressedMessages(List`1<ClientMessageId> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<CompressionAlgorithms> get_CompressionAlgorithm();
    [CompilerGeneratedAttribute]
private void set_CompressionAlgorithm(Nullable`1<CompressionAlgorithms> value);
    internal bool get_IsCompressionEnabled();
    [CompilerGeneratedAttribute]
internal bool get_LastMessageContainsMultipleMessages();
    [CompilerGeneratedAttribute]
private void set_LastMessageContainsMultipleMessages(bool value);
    internal Byte[] Compress(Byte[] input);
    public Byte[] CompressUsingDeflateStream(Byte[] input);
    private Byte[] CompressUsingLz4Message(Byte[] input);
    private Byte[] CompressUsingZstdStream(Byte[] input);
    internal Byte[] Decompress(Byte[] input, int length);
    private Byte[] DecompressUsingDeflateStream(Byte[] input, int length);
    private Byte[] DecompressUsingLz4Message(Byte[] input, int length);
    private Byte[] DecompressUsingZstdStream(Byte[] input, int length);
    internal void Close();
    internal Byte[] ReadNextBufferedMessage();
    internal CommunicationPacket ReadNextBufferedMessageAsCommunicationPacket();
}
internal class MySqlX.Communication.XPacketReaderWriter : object {
    private Stream _stream;
    private Socket _socket;
    private XPacketProcessor _packetProcessor;
    [CompilerGeneratedAttribute]
private XCompressionController <CompressionReadController>k__BackingField;
    [CompilerGeneratedAttribute]
private XCompressionController <CompressionWriteController>k__BackingField;
    public XCompressionController CompressionReadController { get; private set; }
    public XCompressionController CompressionWriteController { get; private set; }
    public XPacketReaderWriter(Stream stream, Socket socket);
    public XPacketReaderWriter(Stream stream, XCompressionController compressionReadController, XCompressionController compressionWriteController, Socket socket);
    [CompilerGeneratedAttribute]
public XCompressionController get_CompressionReadController();
    [CompilerGeneratedAttribute]
private void set_CompressionReadController(XCompressionController value);
    [CompilerGeneratedAttribute]
public XCompressionController get_CompressionWriteController();
    [CompilerGeneratedAttribute]
private void set_CompressionWriteController(XCompressionController value);
    public void Write(int id, IMessage message);
    public void Write(ClientMessageId id, IMessage message);
    public CommunicationPacket Read();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Connection.Capabilities : object {
    private static MessageParser`1<Capabilities> _parser;
    private UnknownFieldSet _unknownFields;
    public static int Capabilities_FieldNumber;
    private static FieldCodec`1<Capability> _repeated_capabilities_codec;
    private RepeatedField`1<Capability> capabilities_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Capabilities> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Capability> Capabilities_ { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Capabilities(Capabilities other);
    private static Capabilities();
    public static MessageParser`1<Capabilities> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Capabilities Clone();
    public RepeatedField`1<Capability> get_Capabilities_();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Capabilities other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Capabilities other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Connection.CapabilitiesGet : object {
    private static MessageParser`1<CapabilitiesGet> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<CapabilitiesGet> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public CapabilitiesGet(CapabilitiesGet other);
    private static CapabilitiesGet();
    public static MessageParser`1<CapabilitiesGet> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual CapabilitiesGet Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(CapabilitiesGet other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CapabilitiesGet other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Connection.CapabilitiesSet : object {
    private static MessageParser`1<CapabilitiesSet> _parser;
    private UnknownFieldSet _unknownFields;
    public static int CapabilitiesFieldNumber;
    private Capabilities capabilities_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<CapabilitiesSet> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Capabilities Capabilities { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public CapabilitiesSet(CapabilitiesSet other);
    private static CapabilitiesSet();
    public static MessageParser`1<CapabilitiesSet> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual CapabilitiesSet Clone();
    public Capabilities get_Capabilities();
    public void set_Capabilities(Capabilities value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(CapabilitiesSet other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CapabilitiesSet other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Connection.Capability : object {
    private static MessageParser`1<Capability> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NameFieldNumber;
    private static string NameDefaultValue;
    private string name_;
    public static int ValueFieldNumber;
    private Any value_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Capability> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Any Value { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Capability(Capability other);
    private static Capability();
    public static MessageParser`1<Capability> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Capability Clone();
    public string get_Name();
    public void set_Name(string value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public Any get_Value();
    public void set_Value(Any value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Capability other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Capability other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Connection.Close : object {
    private static MessageParser`1<Close> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Close> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Close(Close other);
    private static Close();
    public static MessageParser`1<Close> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Close Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Connection.Compression : object {
    private static MessageParser`1<Compression> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int UncompressedSizeFieldNumber;
    private static ulong UncompressedSizeDefaultValue;
    private ulong uncompressedSize_;
    public static int ServerMessagesFieldNumber;
    private static Type ServerMessagesDefaultValue;
    private Type serverMessages_;
    public static int ClientMessagesFieldNumber;
    private static Type ClientMessagesDefaultValue;
    private Type clientMessages_;
    public static int PayloadFieldNumber;
    private static ByteString PayloadDefaultValue;
    private ByteString payload_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Compression> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong UncompressedSize { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasUncompressedSize { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Type ServerMessages { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasServerMessages { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Type ClientMessages { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasClientMessages { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Payload { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasPayload { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Compression(Compression other);
    private static Compression();
    public static MessageParser`1<Compression> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Compression Clone();
    public ulong get_UncompressedSize();
    public void set_UncompressedSize(ulong value);
    public bool get_HasUncompressedSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearUncompressedSize();
    public Type get_ServerMessages();
    public void set_ServerMessages(Type value);
    public bool get_HasServerMessages();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearServerMessages();
    public Type get_ClientMessages();
    public void set_ClientMessages(Type value);
    public bool get_HasClientMessages();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearClientMessages();
    public ByteString get_Payload();
    public void set_Payload(ByteString value);
    public bool get_HasPayload();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearPayload();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Compression other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Compression other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Connection.MysqlxConnectionReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxConnectionReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Collection : object {
    private static MessageParser`1<Collection> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NameFieldNumber;
    private static string NameDefaultValue;
    private string name_;
    public static int SchemaFieldNumber;
    private static string SchemaDefaultValue;
    private string schema_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Collection> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Schema { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSchema { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection(Collection other);
    private static Collection();
    public static MessageParser`1<Collection> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Collection Clone();
    public string get_Name();
    public void set_Name(string value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public string get_Schema();
    public void set_Schema(string value);
    public bool get_HasSchema();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSchema();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Collection other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Collection other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Column : object {
    private static MessageParser`1<Column> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NameFieldNumber;
    private static string NameDefaultValue;
    private string name_;
    public static int AliasFieldNumber;
    private static string AliasDefaultValue;
    private string alias_;
    public static int DocumentPathFieldNumber;
    private static FieldCodec`1<DocumentPathItem> _repeated_documentPath_codec;
    private RepeatedField`1<DocumentPathItem> documentPath_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Column> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Alias { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAlias { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<DocumentPathItem> DocumentPath { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Column(Column other);
    private static Column();
    public static MessageParser`1<Column> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Column Clone();
    public string get_Name();
    public void set_Name(string value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public string get_Alias();
    public void set_Alias(string value);
    public bool get_HasAlias();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAlias();
    public RepeatedField`1<DocumentPathItem> get_DocumentPath();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Column other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Column other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.CreateView : object {
    private static MessageParser`1<CreateView> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int DefinerFieldNumber;
    private static string DefinerDefaultValue;
    private string definer_;
    public static int AlgorithmFieldNumber;
    private static ViewAlgorithm AlgorithmDefaultValue;
    private ViewAlgorithm algorithm_;
    public static int SecurityFieldNumber;
    private static ViewSqlSecurity SecurityDefaultValue;
    private ViewSqlSecurity security_;
    public static int CheckFieldNumber;
    private static ViewCheckOption CheckDefaultValue;
    private ViewCheckOption check_;
    public static int ColumnFieldNumber;
    private static FieldCodec`1<string> _repeated_column_codec;
    private RepeatedField`1<string> column_;
    public static int StmtFieldNumber;
    private Find stmt_;
    public static int ReplaceExistingFieldNumber;
    private static bool ReplaceExistingDefaultValue;
    private bool replaceExisting_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<CreateView> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Definer { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDefiner { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ViewAlgorithm Algorithm { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAlgorithm { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ViewSqlSecurity Security { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSecurity { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ViewCheckOption Check { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCheck { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<string> Column { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Find Stmt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool ReplaceExisting { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasReplaceExisting { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public CreateView(CreateView other);
    private static CreateView();
    public static MessageParser`1<CreateView> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual CreateView Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public string get_Definer();
    public void set_Definer(string value);
    public bool get_HasDefiner();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDefiner();
    public ViewAlgorithm get_Algorithm();
    public void set_Algorithm(ViewAlgorithm value);
    public bool get_HasAlgorithm();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAlgorithm();
    public ViewSqlSecurity get_Security();
    public void set_Security(ViewSqlSecurity value);
    public bool get_HasSecurity();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSecurity();
    public ViewCheckOption get_Check();
    public void set_Check(ViewCheckOption value);
    public bool get_HasCheck();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCheck();
    public RepeatedField`1<string> get_Column();
    public Find get_Stmt();
    public void set_Stmt(Find value);
    public bool get_ReplaceExisting();
    public void set_ReplaceExisting(bool value);
    public bool get_HasReplaceExisting();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearReplaceExisting();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(CreateView other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CreateView other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public enum Mysqlx.Crud.DataModel : Enum {
    public int value__;
    [OriginalNameAttribute("DOCUMENT")]
public static DataModel Document;
    [OriginalNameAttribute("TABLE")]
public static DataModel Table;
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Delete : object {
    private static MessageParser`1<Delete> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int DataModelFieldNumber;
    private static DataModel DataModelDefaultValue;
    private DataModel dataModel_;
    public static int CriteriaFieldNumber;
    private Expr criteria_;
    public static int LimitFieldNumber;
    private Limit limit_;
    public static int OrderFieldNumber;
    private static FieldCodec`1<Order> _repeated_order_codec;
    private RepeatedField`1<Order> order_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<Scalar> _repeated_args_codec;
    private RepeatedField`1<Scalar> args_;
    public static int LimitExprFieldNumber;
    private LimitExpr limitExpr_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Delete> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DataModel DataModel { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDataModel { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Criteria { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Limit Limit { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Order> Order { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Scalar> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public LimitExpr LimitExpr { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Delete(Delete other);
    private static Delete();
    public static MessageParser`1<Delete> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Delete Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public DataModel get_DataModel();
    public void set_DataModel(DataModel value);
    public bool get_HasDataModel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDataModel();
    public Expr get_Criteria();
    public void set_Criteria(Expr value);
    public Limit get_Limit();
    public void set_Limit(Limit value);
    public RepeatedField`1<Order> get_Order();
    public RepeatedField`1<Scalar> get_Args();
    public LimitExpr get_LimitExpr();
    public void set_LimitExpr(LimitExpr value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Delete other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Delete other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.DropView : object {
    private static MessageParser`1<DropView> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int IfExistsFieldNumber;
    private static bool IfExistsDefaultValue;
    private bool ifExists_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<DropView> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool IfExists { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasIfExists { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DropView(DropView other);
    private static DropView();
    public static MessageParser`1<DropView> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual DropView Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public bool get_IfExists();
    public void set_IfExists(bool value);
    public bool get_HasIfExists();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearIfExists();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(DropView other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(DropView other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Find : object {
    private static MessageParser`1<Find> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int DataModelFieldNumber;
    private static DataModel DataModelDefaultValue;
    private DataModel dataModel_;
    public static int ProjectionFieldNumber;
    private static FieldCodec`1<Projection> _repeated_projection_codec;
    private RepeatedField`1<Projection> projection_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<Scalar> _repeated_args_codec;
    private RepeatedField`1<Scalar> args_;
    public static int CriteriaFieldNumber;
    private Expr criteria_;
    public static int LimitFieldNumber;
    private Limit limit_;
    public static int OrderFieldNumber;
    private static FieldCodec`1<Order> _repeated_order_codec;
    private RepeatedField`1<Order> order_;
    public static int GroupingFieldNumber;
    private static FieldCodec`1<Expr> _repeated_grouping_codec;
    private RepeatedField`1<Expr> grouping_;
    public static int GroupingCriteriaFieldNumber;
    private Expr groupingCriteria_;
    public static int LockingFieldNumber;
    private static RowLock LockingDefaultValue;
    private RowLock locking_;
    public static int LockingOptionsFieldNumber;
    private static RowLockOptions LockingOptionsDefaultValue;
    private RowLockOptions lockingOptions_;
    public static int LimitExprFieldNumber;
    private LimitExpr limitExpr_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Find> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DataModel DataModel { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDataModel { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Projection> Projection { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Scalar> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Criteria { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Limit Limit { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Order> Order { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Expr> Grouping { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr GroupingCriteria { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RowLock Locking { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasLocking { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RowLockOptions LockingOptions { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasLockingOptions { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public LimitExpr LimitExpr { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Find(Find other);
    private static Find();
    public static MessageParser`1<Find> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Find Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public DataModel get_DataModel();
    public void set_DataModel(DataModel value);
    public bool get_HasDataModel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDataModel();
    public RepeatedField`1<Projection> get_Projection();
    public RepeatedField`1<Scalar> get_Args();
    public Expr get_Criteria();
    public void set_Criteria(Expr value);
    public Limit get_Limit();
    public void set_Limit(Limit value);
    public RepeatedField`1<Order> get_Order();
    public RepeatedField`1<Expr> get_Grouping();
    public Expr get_GroupingCriteria();
    public void set_GroupingCriteria(Expr value);
    public RowLock get_Locking();
    public void set_Locking(RowLock value);
    public bool get_HasLocking();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearLocking();
    public RowLockOptions get_LockingOptions();
    public void set_LockingOptions(RowLockOptions value);
    public bool get_HasLockingOptions();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearLockingOptions();
    public LimitExpr get_LimitExpr();
    public void set_LimitExpr(LimitExpr value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Find other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Find other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Insert : object {
    private static MessageParser`1<Insert> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int DataModelFieldNumber;
    private static DataModel DataModelDefaultValue;
    private DataModel dataModel_;
    public static int ProjectionFieldNumber;
    private static FieldCodec`1<Column> _repeated_projection_codec;
    private RepeatedField`1<Column> projection_;
    public static int RowFieldNumber;
    private static FieldCodec`1<TypedRow> _repeated_row_codec;
    private RepeatedField`1<TypedRow> row_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<Scalar> _repeated_args_codec;
    private RepeatedField`1<Scalar> args_;
    public static int UpsertFieldNumber;
    private static bool UpsertDefaultValue;
    private bool upsert_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Insert> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DataModel DataModel { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDataModel { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Column> Projection { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<TypedRow> Row { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Scalar> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool Upsert { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasUpsert { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Insert(Insert other);
    private static Insert();
    public static MessageParser`1<Insert> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Insert Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public DataModel get_DataModel();
    public void set_DataModel(DataModel value);
    public bool get_HasDataModel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDataModel();
    public RepeatedField`1<Column> get_Projection();
    public RepeatedField`1<TypedRow> get_Row();
    public RepeatedField`1<Scalar> get_Args();
    public bool get_Upsert();
    public void set_Upsert(bool value);
    public bool get_HasUpsert();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearUpsert();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Insert other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Insert other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Limit : object {
    private static MessageParser`1<Limit> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int RowCountFieldNumber;
    private static ulong RowCountDefaultValue;
    private ulong rowCount_;
    public static int OffsetFieldNumber;
    private static ulong OffsetDefaultValue;
    private ulong offset_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Limit> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong RowCount { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasRowCount { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong Offset { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasOffset { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Limit(Limit other);
    private static Limit();
    public static MessageParser`1<Limit> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Limit Clone();
    public ulong get_RowCount();
    public void set_RowCount(ulong value);
    public bool get_HasRowCount();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearRowCount();
    public ulong get_Offset();
    public void set_Offset(ulong value);
    public bool get_HasOffset();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearOffset();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Limit other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Limit other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.LimitExpr : object {
    private static MessageParser`1<LimitExpr> _parser;
    private UnknownFieldSet _unknownFields;
    public static int RowCountFieldNumber;
    private Expr rowCount_;
    public static int OffsetFieldNumber;
    private Expr offset_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<LimitExpr> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr RowCount { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Offset { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public LimitExpr(LimitExpr other);
    private static LimitExpr();
    public static MessageParser`1<LimitExpr> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual LimitExpr Clone();
    public Expr get_RowCount();
    public void set_RowCount(Expr value);
    public Expr get_Offset();
    public void set_Offset(Expr value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(LimitExpr other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(LimitExpr other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.ModifyView : object {
    private static MessageParser`1<ModifyView> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int DefinerFieldNumber;
    private static string DefinerDefaultValue;
    private string definer_;
    public static int AlgorithmFieldNumber;
    private static ViewAlgorithm AlgorithmDefaultValue;
    private ViewAlgorithm algorithm_;
    public static int SecurityFieldNumber;
    private static ViewSqlSecurity SecurityDefaultValue;
    private ViewSqlSecurity security_;
    public static int CheckFieldNumber;
    private static ViewCheckOption CheckDefaultValue;
    private ViewCheckOption check_;
    public static int ColumnFieldNumber;
    private static FieldCodec`1<string> _repeated_column_codec;
    private RepeatedField`1<string> column_;
    public static int StmtFieldNumber;
    private Find stmt_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ModifyView> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Definer { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDefiner { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ViewAlgorithm Algorithm { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAlgorithm { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ViewSqlSecurity Security { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSecurity { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ViewCheckOption Check { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCheck { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<string> Column { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Find Stmt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ModifyView(ModifyView other);
    private static ModifyView();
    public static MessageParser`1<ModifyView> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ModifyView Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public string get_Definer();
    public void set_Definer(string value);
    public bool get_HasDefiner();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDefiner();
    public ViewAlgorithm get_Algorithm();
    public void set_Algorithm(ViewAlgorithm value);
    public bool get_HasAlgorithm();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAlgorithm();
    public ViewSqlSecurity get_Security();
    public void set_Security(ViewSqlSecurity value);
    public bool get_HasSecurity();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSecurity();
    public ViewCheckOption get_Check();
    public void set_Check(ViewCheckOption value);
    public bool get_HasCheck();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCheck();
    public RepeatedField`1<string> get_Column();
    public Find get_Stmt();
    public void set_Stmt(Find value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ModifyView other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ModifyView other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Crud.MysqlxCrudReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxCrudReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Order : object {
    private static MessageParser`1<Order> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int ExprFieldNumber;
    private Expr expr_;
    public static int DirectionFieldNumber;
    private static Direction DirectionDefaultValue;
    private Direction direction_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Order> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Expr { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Direction Direction { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDirection { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Order(Order other);
    private static Order();
    public static MessageParser`1<Order> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Order Clone();
    public Expr get_Expr();
    public void set_Expr(Expr value);
    public Direction get_Direction();
    public void set_Direction(Direction value);
    public bool get_HasDirection();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDirection();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Order other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Order other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Projection : object {
    private static MessageParser`1<Projection> _parser;
    private UnknownFieldSet _unknownFields;
    public static int SourceFieldNumber;
    private Expr source_;
    public static int AliasFieldNumber;
    private static string AliasDefaultValue;
    private string alias_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Projection> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Source { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Alias { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAlias { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Projection(Projection other);
    private static Projection();
    public static MessageParser`1<Projection> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Projection Clone();
    public Expr get_Source();
    public void set_Source(Expr value);
    public string get_Alias();
    public void set_Alias(string value);
    public bool get_HasAlias();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAlias();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Projection other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Projection other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.Update : object {
    private static MessageParser`1<Update> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CollectionFieldNumber;
    private Collection collection_;
    public static int DataModelFieldNumber;
    private static DataModel DataModelDefaultValue;
    private DataModel dataModel_;
    public static int CriteriaFieldNumber;
    private Expr criteria_;
    public static int LimitFieldNumber;
    private Limit limit_;
    public static int OrderFieldNumber;
    private static FieldCodec`1<Order> _repeated_order_codec;
    private RepeatedField`1<Order> order_;
    public static int OperationFieldNumber;
    private static FieldCodec`1<UpdateOperation> _repeated_operation_codec;
    private RepeatedField`1<UpdateOperation> operation_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<Scalar> _repeated_args_codec;
    private RepeatedField`1<Scalar> args_;
    public static int LimitExprFieldNumber;
    private LimitExpr limitExpr_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Update> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Collection Collection { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DataModel DataModel { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasDataModel { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Criteria { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Limit Limit { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Order> Order { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<UpdateOperation> Operation { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Scalar> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public LimitExpr LimitExpr { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Update(Update other);
    private static Update();
    public static MessageParser`1<Update> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Update Clone();
    public Collection get_Collection();
    public void set_Collection(Collection value);
    public DataModel get_DataModel();
    public void set_DataModel(DataModel value);
    public bool get_HasDataModel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearDataModel();
    public Expr get_Criteria();
    public void set_Criteria(Expr value);
    public Limit get_Limit();
    public void set_Limit(Limit value);
    public RepeatedField`1<Order> get_Order();
    public RepeatedField`1<UpdateOperation> get_Operation();
    public RepeatedField`1<Scalar> get_Args();
    public LimitExpr get_LimitExpr();
    public void set_LimitExpr(LimitExpr value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Update other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Update other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Crud.UpdateOperation : object {
    private static MessageParser`1<UpdateOperation> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int SourceFieldNumber;
    private ColumnIdentifier source_;
    public static int OperationFieldNumber;
    private static UpdateType OperationDefaultValue;
    private UpdateType operation_;
    public static int ValueFieldNumber;
    private Expr value_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<UpdateOperation> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ColumnIdentifier Source { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UpdateType Operation { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasOperation { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr Value { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UpdateOperation(UpdateOperation other);
    private static UpdateOperation();
    public static MessageParser`1<UpdateOperation> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual UpdateOperation Clone();
    public ColumnIdentifier get_Source();
    public void set_Source(ColumnIdentifier value);
    public UpdateType get_Operation();
    public void set_Operation(UpdateType value);
    public bool get_HasOperation();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearOperation();
    public Expr get_Value();
    public void set_Value(Expr value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(UpdateOperation other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(UpdateOperation other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public enum Mysqlx.Crud.ViewAlgorithm : Enum {
    public int value__;
    [OriginalNameAttribute("UNDEFINED")]
public static ViewAlgorithm Undefined;
    [OriginalNameAttribute("MERGE")]
public static ViewAlgorithm Merge;
    [OriginalNameAttribute("TEMPTABLE")]
public static ViewAlgorithm Temptable;
}
public enum Mysqlx.Crud.ViewCheckOption : Enum {
    public int value__;
    [OriginalNameAttribute("LOCAL")]
public static ViewCheckOption Local;
    [OriginalNameAttribute("CASCADED")]
public static ViewCheckOption Cascaded;
}
public enum Mysqlx.Crud.ViewSqlSecurity : Enum {
    public int value__;
    [OriginalNameAttribute("INVOKER")]
public static ViewSqlSecurity Invoker;
    [OriginalNameAttribute("DEFINER")]
public static ViewSqlSecurity Definer;
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Cursor.Close : object {
    private static MessageParser`1<Close> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CursorIdFieldNumber;
    private static UInt32 CursorIdDefaultValue;
    private UInt32 cursorId_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Close> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 CursorId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCursorId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Close(Close other);
    private static Close();
    public static MessageParser`1<Close> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Close Clone();
    public UInt32 get_CursorId();
    public void set_CursorId(UInt32 value);
    public bool get_HasCursorId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCursorId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Cursor.Fetch : object {
    private static MessageParser`1<Fetch> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CursorIdFieldNumber;
    private static UInt32 CursorIdDefaultValue;
    private UInt32 cursorId_;
    public static int FetchRowsFieldNumber;
    private static ulong FetchRowsDefaultValue;
    private ulong fetchRows_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Fetch> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 CursorId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCursorId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong FetchRows { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasFetchRows { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Fetch(Fetch other);
    private static Fetch();
    public static MessageParser`1<Fetch> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Fetch Clone();
    public UInt32 get_CursorId();
    public void set_CursorId(UInt32 value);
    public bool get_HasCursorId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCursorId();
    public ulong get_FetchRows();
    public void set_FetchRows(ulong value);
    public bool get_HasFetchRows();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearFetchRows();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Fetch other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Fetch other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Cursor.MysqlxCursorReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxCursorReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Cursor.Open : object {
    private static MessageParser`1<Open> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int CursorIdFieldNumber;
    private static UInt32 CursorIdDefaultValue;
    private UInt32 cursorId_;
    public static int StmtFieldNumber;
    private OneOfMessage stmt_;
    public static int FetchRowsFieldNumber;
    private static ulong FetchRowsDefaultValue;
    private ulong fetchRows_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Open> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 CursorId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCursorId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public OneOfMessage Stmt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong FetchRows { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasFetchRows { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Open(Open other);
    private static Open();
    public static MessageParser`1<Open> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Open Clone();
    public UInt32 get_CursorId();
    public void set_CursorId(UInt32 value);
    public bool get_HasCursorId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCursorId();
    public OneOfMessage get_Stmt();
    public void set_Stmt(OneOfMessage value);
    public ulong get_FetchRows();
    public void set_FetchRows(ulong value);
    public bool get_HasFetchRows();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearFetchRows();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Open other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Open other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal class MySqlX.Data.CollationMap : object {
    private static Dictionary`2<int, string> collations;
    private static CollationMap();
    public static string GetCollationName(int collation);
    private static void Load();
}
internal enum MySqlX.DataAccess.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode PlainAccess;
    public static AuthenticationMode MySQL41;
}
internal enum MySqlX.DataAccess.ConnectionMode : Enum {
    public int value__;
    public static ConnectionMode Offline;
    public static ConnectionMode ReadOnly;
    public static ConnectionMode WriteOnly;
    public static ConnectionMode ReadWrite;
}
internal enum MySqlX.DataAccess.OS : Enum {
    public int value__;
    public static OS Unknown;
    public static OS Windows;
    public static OS Linux;
    public static OS MacOS;
}
internal enum MySqlX.DataAccess.PreparedStatementType : Enum {
    public int value__;
    public static PreparedStatementType Find;
    public static PreparedStatementType Insert;
    public static PreparedStatementType Update;
    public static PreparedStatementType Delete;
    public static PreparedStatementType SqlStatement;
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Datatypes.Any : object {
    private static MessageParser`1<Any> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static Type TypeDefaultValue;
    private Type type_;
    public static int ScalarFieldNumber;
    private Scalar scalar_;
    public static int ObjFieldNumber;
    private Object obj_;
    public static int ArrayFieldNumber;
    private Array array_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Any> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Type Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Scalar Scalar { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Object Obj { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Array Array { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Any(Any other);
    private static Any();
    public static MessageParser`1<Any> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Any Clone();
    public Type get_Type();
    public void set_Type(Type value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public Scalar get_Scalar();
    public void set_Scalar(Scalar value);
    public Object get_Obj();
    public void set_Obj(Object value);
    public Array get_Array();
    public void set_Array(Array value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Any other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Any other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Datatypes.Array : object {
    private static MessageParser`1<Array> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ValueFieldNumber;
    private static FieldCodec`1<Any> _repeated_value_codec;
    private RepeatedField`1<Any> value_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Array> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Any> Value { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Array(Array other);
    private static Array();
    public static MessageParser`1<Array> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Array Clone();
    public RepeatedField`1<Any> get_Value();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Array other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Array other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Datatypes.MysqlxDatatypesReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxDatatypesReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Datatypes.Object : object {
    private static MessageParser`1<Object> _parser;
    private UnknownFieldSet _unknownFields;
    public static int FldFieldNumber;
    private static FieldCodec`1<ObjectField> _repeated_fld_codec;
    private RepeatedField`1<ObjectField> fld_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Object> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<ObjectField> Fld { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Object(Object other);
    private static Object();
    public static MessageParser`1<Object> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Object Clone();
    public RepeatedField`1<ObjectField> get_Fld();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Datatypes.Scalar : object {
    private static MessageParser`1<Scalar> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static Type TypeDefaultValue;
    private Type type_;
    public static int VSignedIntFieldNumber;
    private static long VSignedIntDefaultValue;
    private long vSignedInt_;
    public static int VUnsignedIntFieldNumber;
    private static ulong VUnsignedIntDefaultValue;
    private ulong vUnsignedInt_;
    public static int VOctetsFieldNumber;
    private Octets vOctets_;
    public static int VDoubleFieldNumber;
    private static double VDoubleDefaultValue;
    private double vDouble_;
    public static int VFloatFieldNumber;
    private static float VFloatDefaultValue;
    private float vFloat_;
    public static int VBoolFieldNumber;
    private static bool VBoolDefaultValue;
    private bool vBool_;
    public static int VStringFieldNumber;
    private String vString_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Scalar> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Type Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public long VSignedInt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasVSignedInt { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong VUnsignedInt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasVUnsignedInt { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Octets VOctets { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public double VDouble { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasVDouble { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public float VFloat { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasVFloat { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool VBool { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasVBool { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public String VString { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Scalar(Scalar other);
    private static Scalar();
    public static MessageParser`1<Scalar> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Scalar Clone();
    public Type get_Type();
    public void set_Type(Type value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public long get_VSignedInt();
    public void set_VSignedInt(long value);
    public bool get_HasVSignedInt();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearVSignedInt();
    public ulong get_VUnsignedInt();
    public void set_VUnsignedInt(ulong value);
    public bool get_HasVUnsignedInt();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearVUnsignedInt();
    public Octets get_VOctets();
    public void set_VOctets(Octets value);
    public double get_VDouble();
    public void set_VDouble(double value);
    public bool get_HasVDouble();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearVDouble();
    public float get_VFloat();
    public void set_VFloat(float value);
    public bool get_HasVFloat();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearVFloat();
    public bool get_VBool();
    public void set_VBool(bool value);
    public bool get_HasVBool();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearVBool();
    public String get_VString();
    public void set_VString(String value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Scalar other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Scalar other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Error : object {
    private static MessageParser`1<Error> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int SeverityFieldNumber;
    private static Severity SeverityDefaultValue;
    private Severity severity_;
    public static int CodeFieldNumber;
    private static UInt32 CodeDefaultValue;
    private UInt32 code_;
    public static int SqlStateFieldNumber;
    private static string SqlStateDefaultValue;
    private string sqlState_;
    public static int MsgFieldNumber;
    private static string MsgDefaultValue;
    private string msg_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Error> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Severity Severity { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSeverity { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Code { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCode { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string SqlState { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSqlState { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Msg { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasMsg { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Error(Error other);
    private static Error();
    public static MessageParser`1<Error> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Error Clone();
    public Severity get_Severity();
    public void set_Severity(Severity value);
    public bool get_HasSeverity();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSeverity();
    public UInt32 get_Code();
    public void set_Code(UInt32 value);
    public bool get_HasCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCode();
    public string get_SqlState();
    public void set_SqlState(string value);
    public bool get_HasSqlState();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSqlState();
    public string get_Msg();
    public void set_Msg(string value);
    public bool get_HasMsg();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearMsg();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Error other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Error other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expect.Close : object {
    private static MessageParser`1<Close> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Close> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Close(Close other);
    private static Close();
    public static MessageParser`1<Close> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Close Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Expect.MysqlxExpectReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxExpectReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expect.Open : object {
    private static MessageParser`1<Open> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int OpFieldNumber;
    private static CtxOperation OpDefaultValue;
    private CtxOperation op_;
    public static int CondFieldNumber;
    private static FieldCodec`1<Condition> _repeated_cond_codec;
    private RepeatedField`1<Condition> cond_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Open> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public CtxOperation Op { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasOp { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Condition> Cond { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Open(Open other);
    private static Open();
    public static MessageParser`1<Open> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Open Clone();
    public CtxOperation get_Op();
    public void set_Op(CtxOperation value);
    public bool get_HasOp();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearOp();
    public RepeatedField`1<Condition> get_Cond();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Open other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Open other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.Array : object {
    private static MessageParser`1<Array> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ValueFieldNumber;
    private static FieldCodec`1<Expr> _repeated_value_codec;
    private RepeatedField`1<Expr> value_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Array> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Expr> Value { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Array(Array other);
    private static Array();
    public static MessageParser`1<Array> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Array Clone();
    public RepeatedField`1<Expr> get_Value();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Array other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Array other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.ColumnIdentifier : object {
    private static MessageParser`1<ColumnIdentifier> _parser;
    private UnknownFieldSet _unknownFields;
    public static int DocumentPathFieldNumber;
    private static FieldCodec`1<DocumentPathItem> _repeated_documentPath_codec;
    private RepeatedField`1<DocumentPathItem> documentPath_;
    public static int NameFieldNumber;
    private static string NameDefaultValue;
    private string name_;
    public static int TableNameFieldNumber;
    private static string TableNameDefaultValue;
    private string tableName_;
    public static int SchemaNameFieldNumber;
    private static string SchemaNameDefaultValue;
    private string schemaName_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ColumnIdentifier> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<DocumentPathItem> DocumentPath { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string TableName { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasTableName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string SchemaName { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSchemaName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ColumnIdentifier(ColumnIdentifier other);
    private static ColumnIdentifier();
    public static MessageParser`1<ColumnIdentifier> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ColumnIdentifier Clone();
    public RepeatedField`1<DocumentPathItem> get_DocumentPath();
    public string get_Name();
    public void set_Name(string value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public string get_TableName();
    public void set_TableName(string value);
    public bool get_HasTableName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearTableName();
    public string get_SchemaName();
    public void set_SchemaName(string value);
    public bool get_HasSchemaName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSchemaName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ColumnIdentifier other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ColumnIdentifier other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.DocumentPathItem : object {
    private static MessageParser`1<DocumentPathItem> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static Type TypeDefaultValue;
    private Type type_;
    public static int ValueFieldNumber;
    private static string ValueDefaultValue;
    private string value_;
    public static int IndexFieldNumber;
    private static UInt32 IndexDefaultValue;
    private UInt32 index_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<DocumentPathItem> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Type Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Value { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasValue { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Index { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasIndex { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public DocumentPathItem(DocumentPathItem other);
    private static DocumentPathItem();
    public static MessageParser`1<DocumentPathItem> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual DocumentPathItem Clone();
    public Type get_Type();
    public void set_Type(Type value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public string get_Value();
    public void set_Value(string value);
    public bool get_HasValue();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearValue();
    public UInt32 get_Index();
    public void set_Index(UInt32 value);
    public bool get_HasIndex();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearIndex();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(DocumentPathItem other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(DocumentPathItem other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.Expr : object {
    private static MessageParser`1<Expr> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static Type TypeDefaultValue;
    private Type type_;
    public static int IdentifierFieldNumber;
    private ColumnIdentifier identifier_;
    public static int VariableFieldNumber;
    private static string VariableDefaultValue;
    private string variable_;
    public static int LiteralFieldNumber;
    private Scalar literal_;
    public static int FunctionCallFieldNumber;
    private FunctionCall functionCall_;
    public static int OperatorFieldNumber;
    private Operator operator_;
    public static int PositionFieldNumber;
    private static UInt32 PositionDefaultValue;
    private UInt32 position_;
    public static int ObjectFieldNumber;
    private Object object_;
    public static int ArrayFieldNumber;
    private Array array_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Expr> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Type Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ColumnIdentifier Identifier { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Variable { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasVariable { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Scalar Literal { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FunctionCall FunctionCall { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Operator Operator { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Position { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasPosition { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Object Object { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Array Array { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Expr(Expr other);
    private static Expr();
    public static MessageParser`1<Expr> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Expr Clone();
    public Type get_Type();
    public void set_Type(Type value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public ColumnIdentifier get_Identifier();
    public void set_Identifier(ColumnIdentifier value);
    public string get_Variable();
    public void set_Variable(string value);
    public bool get_HasVariable();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearVariable();
    public Scalar get_Literal();
    public void set_Literal(Scalar value);
    public FunctionCall get_FunctionCall();
    public void set_FunctionCall(FunctionCall value);
    public Operator get_Operator();
    public void set_Operator(Operator value);
    public UInt32 get_Position();
    public void set_Position(UInt32 value);
    public bool get_HasPosition();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearPosition();
    public Object get_Object();
    public void set_Object(Object value);
    public Array get_Array();
    public void set_Array(Array value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Expr other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Expr other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.FunctionCall : object {
    private static MessageParser`1<FunctionCall> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NameFieldNumber;
    private Identifier name_;
    public static int ParamFieldNumber;
    private static FieldCodec`1<Expr> _repeated_param_codec;
    private RepeatedField`1<Expr> param_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FunctionCall> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Identifier Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Expr> Param { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FunctionCall(FunctionCall other);
    private static FunctionCall();
    public static MessageParser`1<FunctionCall> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FunctionCall Clone();
    public Identifier get_Name();
    public void set_Name(Identifier value);
    public RepeatedField`1<Expr> get_Param();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FunctionCall other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FunctionCall other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.Identifier : object {
    private static MessageParser`1<Identifier> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NameFieldNumber;
    private static string NameDefaultValue;
    private string name_;
    public static int SchemaNameFieldNumber;
    private static string SchemaNameDefaultValue;
    private string schemaName_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Identifier> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string SchemaName { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSchemaName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Identifier(Identifier other);
    private static Identifier();
    public static MessageParser`1<Identifier> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Identifier Clone();
    public string get_Name();
    public void set_Name(string value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public string get_SchemaName();
    public void set_SchemaName(string value);
    public bool get_HasSchemaName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSchemaName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Identifier other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Identifier other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Expr.MysqlxExprReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxExprReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.Object : object {
    private static MessageParser`1<Object> _parser;
    private UnknownFieldSet _unknownFields;
    public static int FldFieldNumber;
    private static FieldCodec`1<ObjectField> _repeated_fld_codec;
    private RepeatedField`1<ObjectField> fld_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Object> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<ObjectField> Fld { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Object(Object other);
    private static Object();
    public static MessageParser`1<Object> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Object Clone();
    public RepeatedField`1<ObjectField> get_Fld();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Expr.Operator : object {
    private static MessageParser`1<Operator> _parser;
    private UnknownFieldSet _unknownFields;
    public static int NameFieldNumber;
    private static string NameDefaultValue;
    private string name_;
    public static int ParamFieldNumber;
    private static FieldCodec`1<Expr> _repeated_param_codec;
    private RepeatedField`1<Expr> param_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Operator> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Expr> Param { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Operator(Operator other);
    private static Operator();
    public static MessageParser`1<Operator> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Operator Clone();
    public string get_Name();
    public void set_Name(string value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public RepeatedField`1<Expr> get_Param();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Operator other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Operator other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.MysqlxExtensions : object {
    public static Extension`2<MessageOptions, Type> ClientMessageId;
    public static Extension`2<MessageOptions, Type> ServerMessageId;
    private static MysqlxExtensions();
}
public static class Mysqlx.MysqlxReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Notice.Frame : object {
    private static MessageParser`1<Frame> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static UInt32 TypeDefaultValue;
    private UInt32 type_;
    public static int ScopeFieldNumber;
    private static Scope ScopeDefaultValue;
    private Scope scope_;
    public static int PayloadFieldNumber;
    private static ByteString PayloadDefaultValue;
    private ByteString payload_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Frame> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Scope Scope { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasScope { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Payload { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasPayload { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Frame(Frame other);
    private static Frame();
    public static MessageParser`1<Frame> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Frame Clone();
    public UInt32 get_Type();
    public void set_Type(UInt32 value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public Scope get_Scope();
    public void set_Scope(Scope value);
    public bool get_HasScope();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearScope();
    public ByteString get_Payload();
    public void set_Payload(ByteString value);
    public bool get_HasPayload();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearPayload();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Frame other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Frame other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Notice.GroupReplicationStateChanged : object {
    private static MessageParser`1<GroupReplicationStateChanged> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static UInt32 TypeDefaultValue;
    private UInt32 type_;
    public static int ViewIdFieldNumber;
    private static string ViewIdDefaultValue;
    private string viewId_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<GroupReplicationStateChanged> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string ViewId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasViewId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public GroupReplicationStateChanged(GroupReplicationStateChanged other);
    private static GroupReplicationStateChanged();
    public static MessageParser`1<GroupReplicationStateChanged> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual GroupReplicationStateChanged Clone();
    public UInt32 get_Type();
    public void set_Type(UInt32 value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public string get_ViewId();
    public void set_ViewId(string value);
    public bool get_HasViewId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearViewId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(GroupReplicationStateChanged other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(GroupReplicationStateChanged other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Notice.MysqlxNoticeReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxNoticeReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Notice.ServerHello : object {
    private static MessageParser`1<ServerHello> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ServerHello> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ServerHello(ServerHello other);
    private static ServerHello();
    public static MessageParser`1<ServerHello> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ServerHello Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ServerHello other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ServerHello other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Notice.SessionStateChanged : object {
    private static MessageParser`1<SessionStateChanged> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int ParamFieldNumber;
    private static Parameter ParamDefaultValue;
    private Parameter param_;
    public static int ValueFieldNumber;
    private static FieldCodec`1<Scalar> _repeated_value_codec;
    private RepeatedField`1<Scalar> value_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<SessionStateChanged> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Parameter Param { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasParam { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Scalar> Value { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public SessionStateChanged(SessionStateChanged other);
    private static SessionStateChanged();
    public static MessageParser`1<SessionStateChanged> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual SessionStateChanged Clone();
    public Parameter get_Param();
    public void set_Param(Parameter value);
    public bool get_HasParam();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearParam();
    public RepeatedField`1<Scalar> get_Value();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(SessionStateChanged other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(SessionStateChanged other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Notice.SessionVariableChanged : object {
    private static MessageParser`1<SessionVariableChanged> _parser;
    private UnknownFieldSet _unknownFields;
    public static int ParamFieldNumber;
    private static string ParamDefaultValue;
    private string param_;
    public static int ValueFieldNumber;
    private Scalar value_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<SessionVariableChanged> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Param { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasParam { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Scalar Value { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public SessionVariableChanged(SessionVariableChanged other);
    private static SessionVariableChanged();
    public static MessageParser`1<SessionVariableChanged> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual SessionVariableChanged Clone();
    public string get_Param();
    public void set_Param(string value);
    public bool get_HasParam();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearParam();
    public Scalar get_Value();
    public void set_Value(Scalar value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(SessionVariableChanged other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(SessionVariableChanged other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Notice.Warning : object {
    private static MessageParser`1<Warning> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int LevelFieldNumber;
    private static Level LevelDefaultValue;
    private Level level_;
    public static int CodeFieldNumber;
    private static UInt32 CodeDefaultValue;
    private UInt32 code_;
    public static int MsgFieldNumber;
    private static string MsgDefaultValue;
    private string msg_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Warning> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Level Level { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasLevel { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Code { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCode { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Msg { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasMsg { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Warning(Warning other);
    private static Warning();
    public static MessageParser`1<Warning> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Warning Clone();
    public Level get_Level();
    public void set_Level(Level value);
    public bool get_HasLevel();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearLevel();
    public UInt32 get_Code();
    public void set_Code(UInt32 value);
    public bool get_HasCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCode();
    public string get_Msg();
    public void set_Msg(string value);
    public bool get_HasMsg();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearMsg();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Warning other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Warning other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Ok : object {
    private static MessageParser`1<Ok> _parser;
    private UnknownFieldSet _unknownFields;
    public static int MsgFieldNumber;
    private static string MsgDefaultValue;
    private string msg_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Ok> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Msg { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasMsg { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Ok(Ok other);
    private static Ok();
    public static MessageParser`1<Ok> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Ok Clone();
    public string get_Msg();
    public void set_Msg(string value);
    public bool get_HasMsg();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearMsg();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Ok other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Ok other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Prepare.Deallocate : object {
    private static MessageParser`1<Deallocate> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int StmtIdFieldNumber;
    private static UInt32 StmtIdDefaultValue;
    private UInt32 stmtId_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Deallocate> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 StmtId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasStmtId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Deallocate(Deallocate other);
    private static Deallocate();
    public static MessageParser`1<Deallocate> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Deallocate Clone();
    public UInt32 get_StmtId();
    public void set_StmtId(UInt32 value);
    public bool get_HasStmtId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearStmtId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Deallocate other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Deallocate other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Prepare.Execute : object {
    private static MessageParser`1<Execute> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int StmtIdFieldNumber;
    private static UInt32 StmtIdDefaultValue;
    private UInt32 stmtId_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<Any> _repeated_args_codec;
    private RepeatedField`1<Any> args_;
    public static int CompactMetadataFieldNumber;
    private static bool CompactMetadataDefaultValue;
    private bool compactMetadata_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Execute> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 StmtId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasStmtId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Any> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool CompactMetadata { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCompactMetadata { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Execute(Execute other);
    private static Execute();
    public static MessageParser`1<Execute> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Execute Clone();
    public UInt32 get_StmtId();
    public void set_StmtId(UInt32 value);
    public bool get_HasStmtId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearStmtId();
    public RepeatedField`1<Any> get_Args();
    public bool get_CompactMetadata();
    public void set_CompactMetadata(bool value);
    public bool get_HasCompactMetadata();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCompactMetadata();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Execute other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Execute other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Prepare.MysqlxPrepareReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxPrepareReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Prepare.Prepare : object {
    private static MessageParser`1<Prepare> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int StmtIdFieldNumber;
    private static UInt32 StmtIdDefaultValue;
    private UInt32 stmtId_;
    public static int StmtFieldNumber;
    private OneOfMessage stmt_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Prepare> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 StmtId { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasStmtId { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public OneOfMessage Stmt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Prepare(Prepare other);
    private static Prepare();
    public static MessageParser`1<Prepare> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Prepare Clone();
    public UInt32 get_StmtId();
    public void set_StmtId(UInt32 value);
    public bool get_HasStmtId();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearStmtId();
    public OneOfMessage get_Stmt();
    public void set_Stmt(OneOfMessage value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Prepare other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Prepare other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public abstract class MySqlX.Protocol.ProtocolBase : object {
    public abstract virtual List`1<Byte[]> ReadRow(BaseResult rs);
    public abstract virtual void SendSQL(string sql, Object[] args);
    public abstract virtual bool HasData(BaseResult rs);
    public abstract virtual List`1<Column> LoadColumnMetadata();
    public abstract virtual void CloseResult(BaseResult rs);
}
internal abstract class MySqlX.Protocol.ValueDecoder : object {
    [CompilerGeneratedAttribute]
private Column <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ContentType>k__BackingField;
    public ClrDecoderDelegate ClrValueDecoder;
    public Column Column { get; public set; }
    public UInt32 Flags { get; public set; }
    public UInt32 ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public Column get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(Column value);
    [CompilerGeneratedAttribute]
public UInt32 get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(UInt32 value);
    public abstract virtual void SetMetadata();
}
internal class MySqlX.Protocol.X.BitDecoder : ValueDecoder {
    public virtual void SetMetadata();
    private ulong ReadUInt(Byte[] bytes);
    private object BitValueDecoder(Byte[] bytes);
}
internal class MySqlX.Protocol.X.ByteDecoder : ValueDecoder {
    private Encoding _encoding;
    private bool _isEnum;
    public ByteDecoder(bool isEnum);
    public virtual void SetMetadata();
    private ColumnType GetDbType();
    private Type GetClrType(ColumnType dbType);
    private ClrDecoderDelegate GetClrValueDecoder();
    private object StringValueDecoder(Byte[] bytes);
    private object ByteValueDecoder(Byte[] bytes);
}
internal class MySqlX.Protocol.X.DecimalDecoder : ValueDecoder {
    public virtual void SetMetadata();
    private object DecimalValueDecoder(Byte[] bytes);
}
internal class MySqlX.Protocol.X.ExprParser : object {
    private string stringValue;
    internal List`1<Token> tokens;
    internal int tokenPos;
    internal Dictionary`2<string, int> placeholderNameToPosition;
    internal int positionalPlaceholderCount;
    private bool allowRelationalColumns;
    private static Dictionary`2<string, TokenType> reservedWords;
    public ExprParser(string s);
    public ExprParser(string s, bool allowRelationalColumns);
    private static ExprParser();
    private bool NextCharEquals(int i, char c);
    private int LexNumber(int i);
    private void Lex();
    private void Identifier(Int32& i, int start);
    private bool IsReservedWordFunctionCall(string reservedWord, int position);
    private void AssertTokenAt(int pos, TokenType type);
    private bool CurrentTokenTypeEquals(TokenType t);
    private bool NextTokenTypeEquals(TokenType t);
    private bool PosTokenTypeEquals(int pos, TokenType t);
    private string ConsumeToken(TokenType t);
    private List`1<Expr> ParenExprList();
    private Expr ParseFunctionCall();
    private Expr StarOperator();
    private Identifier ParseIdentifier();
    private DocumentPathItem DocPathMember();
    private DocumentPathItem DocPathArrayLoc();
    internal List`1<DocumentPathItem> DocumentPath();
    internal Expr DocumentField();
    private Expr ParseColumnIdentifier();
    private Expr BuildUnaryOp(string name, Expr param);
    private Expr AtomicExpr();
    private Expr ParseLeftAssocBinaryOpExpr(TokenType[] types, Func`1<Expr> innerParser);
    private Expr AddSubIntervalExpr();
    private Expr MulDivExpr();
    private Expr AddSubExpr();
    private Expr ShiftExpr();
    private Expr BitExpr();
    private Expr CompExpr();
    private Expr IlriExpr();
    private Expr AndExpr();
    private Expr OrExpr();
    private Expr GetExpr();
    public Expr Parse();
    private List`1<T> ParseCommaSeparatedList(Func`1<T> elementParser);
    internal List`1<Order> ParseOrderSpec();
    internal List`1<Projection> ParseTableSelectProjection();
    internal Column ParseTableInsertField();
    internal ColumnIdentifier ParseTableUpdateField();
    internal List`1<Projection> ParseDocumentProjection();
    internal List`1<Expr> ParseExprList();
    public int GetPositionalPlaceholderCount();
    public Dictionary`2<string, int> GetPlaceholderNameToPositionMap();
    [CompilerGeneratedAttribute]
private Expr <AtomicExpr>b__32_0();
    [CompilerGeneratedAttribute]
private ObjectField <AtomicExpr>b__32_2();
    [CompilerGeneratedAttribute]
private Order <ParseOrderSpec>b__46_0();
    [CompilerGeneratedAttribute]
private Projection <ParseTableSelectProjection>b__47_0();
    [CompilerGeneratedAttribute]
private Projection <ParseDocumentProjection>b__50_0();
}
internal class MySqlX.Protocol.X.ExprUnparser : object {
    private static HashSet`1<string> infixOperators;
    private static ExprUnparser();
    private static string ScalarToString(Scalar e);
    private static string DocumentPathToString(IList`1<DocumentPathItem> items);
    private static string ColumnIdentifierToString(ColumnIdentifier e);
    private static string FunctionCallToString(FunctionCall e);
    private static string ParamListToString(List`1<string> parameters);
    private static string OperatorToString(Operator e);
    private static string ObjectToString(Object o);
    public static string EscapeLiteral(string s);
    public static string QuoteIdentifier(string ident);
    public static string QuoteJsonKey(string key);
    public static string QuoteDocumentPathMember(string member);
    public static string ExprToString(Expr e);
}
internal class MySqlX.Protocol.X.ExprUtil : object {
    public static Expr BuildLiteralNullScalar();
    public static Expr BuildLiteralScalar(double d);
    public static Expr BuildLiteralScalar(long l);
    public static Expr BuildLiteralScalar(ulong l);
    public static Expr BuildLiteralScalar(string str);
    public static Expr BuildLiteralScalar(Byte[] bytes);
    public static Expr BuildLiteralScalar(bool b);
    public static Expr BuildLiteralExpr(Scalar scalar);
    public static Scalar NullScalar();
    public static Scalar ScalarOf(double d);
    public static Scalar ScalarOf(long l);
    public static Scalar ScalarOf(ulong ul);
    public static Scalar ScalarOf(string str);
    public static Scalar ScalarOf(Byte[] bytes);
    public static Scalar ScalarOf(bool b);
    public static Any BuildAny(string str);
    public static ObjectField BuildObject(string key, object value, bool evaluateStringExpression);
    public static Any BuildEmptyAny(Type type);
    public static Any BuildAny(bool b);
    public static Any BuildAny(object value);
    public static Any BuildAnyWithoutEvaluationExpression(object value);
    public static Collection BuildCollection(string schemaName, string collectionName);
    public static Scalar ArgObjectToScalar(object value, bool evaluateStringExpression);
    public static Expr ArgObjectToExpr(object value, bool allowRelationalColumns, bool evaluateStringExpresssion);
    public static string JoinString(String[] values);
    public static Dictionary`2<string, object> ParseAnonymousObject(object value);
}
internal class MySqlX.Protocol.X.FloatDecoder : ValueDecoder {
    private bool _float;
    public FloatDecoder(bool isFloat);
    public virtual void SetMetadata();
    private object FloatValueDecoder(Byte[] bytes);
    private object DoubleValueDecoder(Byte[] bytes);
}
internal class MySqlX.Protocol.X.IntegerDecoder : ValueDecoder {
    private bool _signed;
    public IntegerDecoder(bool signed);
    public virtual void SetMetadata();
    private ColumnType GetDbType();
    private Type GetSignedClrType();
    private Type GetUnsignedClrType();
    private ClrDecoderDelegate GetSignedValueDecoder();
    private ClrDecoderDelegate GetUnsignedValueDecoder();
    private long ReadInt(Byte[] bytes);
    private ulong ReadUInt(Byte[] bytes);
    public object SByteValueDecoder(Byte[] bytes);
    public object Int16ValueDecoder(Byte[] bytes);
    public object Int32ValueDecoder(Byte[] bytes);
    public object Int64ValueDecoder(Byte[] bytes);
    public object ByteValueDecoder(Byte[] bytes);
    public object UInt16ValueDecoder(Byte[] bytes);
    public object UInt32ValueDecoder(Byte[] bytes);
    public object UInt64ValueDecoder(Byte[] bytes);
}
internal enum MySqlX.Protocol.X.NoticeType : Enum {
    public int value__;
    public static NoticeType Warning;
    public static NoticeType SessionVariableChanged;
    public static NoticeType SessionStateChanged;
}
internal enum MySqlX.Protocol.X.RowLock : Enum {
    public int value__;
    public static RowLock SharedLock;
    public static RowLock ExclusiveLock;
}
internal class MySqlX.Protocol.X.SetDecoder : ValueDecoder {
    private Encoding _encoding;
    public virtual void SetMetadata();
    private object DecodeValue(Byte[] bytes);
}
internal class MySqlX.Protocol.X.XDateTimeDecoder : ValueDecoder {
    public virtual void SetMetadata();
    private ColumnType GetDbType();
    public object ValueDecoder(Byte[] bytes);
}
internal static class MySqlX.Protocol.X.XpluginStatementCommand : object {
    public static string XPLUGIN_STMT_CREATE_COLLECTION;
    public static string XPLUGIN_STMT_CREATE_COLLECTION_INDEX;
    public static string XPLUGIN_STMT_DROP_COLLECTION;
    public static string XPLUGIN_STMT_MODIFY_COLLECTION;
    public static string XPLUGIN_STMT_DROP_COLLECTION_INDEX;
    public static string XPLUGIN_STMT_PING;
    public static string XPLUGIN_STMT_LIST_OBJECTS;
    public static string XPLUGIN_STMT_ENABLE_NOTICES;
    public static string XPLUGIN_STMT_DISABLE_NOTICES;
    public static string XPLUGIN_STMT_LIST_NOTICES;
    private static XpluginStatementCommand();
}
internal class MySqlX.Protocol.X.XTimeDecoder : ValueDecoder {
    public virtual void SetMetadata();
    public object ValueDecoder(Byte[] bytes);
}
internal class MySqlX.Protocol.X.XValueDecoderFactory : object {
    public static ValueDecoder GetValueDecoder(Column c, FieldType type);
}
internal class MySqlX.Protocol.XProtocol : ProtocolBase {
    private CommunicationPacket _pendingPacket;
    private XPacketReaderWriter _packetReaderWriter;
    [CompilerGeneratedAttribute]
private Capabilities <Capabilities>k__BackingField;
    public Capabilities Capabilities { get; protected set; }
    public XProtocol(XPacketReaderWriter packetReaderWriter);
    [CompilerGeneratedAttribute]
public Capabilities get_Capabilities();
    [CompilerGeneratedAttribute]
protected void set_Capabilities(Capabilities value);
    public void SendAuthStart(string method, Byte[] authData, Byte[] initialResponse);
    public Byte[] ReadAuthContinue();
    public void SendAuthContinue(Byte[] data);
    public void ReadAuthOk();
    public void GetServerCapabilities();
    public void SetCapabilities(Dictionary`2<string, object> clientCapabilities);
    private void ThrowUnexpectedMessage(int received, int expected);
    public virtual void SendSQL(string sql, Object[] args);
    public virtual bool HasData(BaseResult rs);
    private CommunicationPacket PeekPacket();
    private CommunicationPacket ReadPacket();
    private void ProcessGlobalNotice(Frame frame);
    private void ProcessNotice(CommunicationPacket packet, BaseResult rs);
    private void ProcessSessionStateChanged(BaseResult rs, Byte[] payload);
    private void ProcessWarning(BaseResult rs, Byte[] payload);
    private Any CreateAny(object o);
    private ObjectField CreateObject(string key, object value, bool evaluateStringExpression);
    public void SendSessionClose();
    public void SendConnectionClose();
    internal StmtExecute CreateExecuteSQLStatement(string stmt, Object[] args);
    public void SendExecuteSQLStatement(string stmt, Object[] args);
    public void SendExecuteStatement(string ns, string stmt, KeyValuePair`2[] args);
    public void SendExecuteStatementOptions(string ns, string stmt, KeyValuePair`2[] args);
    public void SendCreateCollectionIndexStatement(string ns, string stmt, KeyValuePair`2[] args);
    private void DecodeAndThrowError(CommunicationPacket p);
    public virtual List`1<Byte[]> ReadRow(BaseResult rs);
    public virtual void CloseResult(BaseResult rs);
    public virtual List`1<Column> LoadColumnMetadata();
    private Column DecodeColumn(ColumnMetaData colData);
    internal Insert CreateInsertMessage(string schema, bool isRelational, string collection, Object[] rows, String[] columns, bool upsert);
    public void SendInsert(string schema, bool isRelational, string collection, Object[] rows, String[] columns, bool upsert);
    private void ApplyFilter(Action`1<Limit> setLimit, Action`1<Expr> setCriteria, Action`1<IEnumerable`1<Order>> setOrder, FilterParams filter, Action`1<IEnumerable`1<Scalar>> addParams);
    internal Delete CreateDeleteMessage(string schema, string collection, bool isRelational, FilterParams filter);
    public void SendDelete(string schema, string collection, bool isRelational, FilterParams filter);
    internal Update CreateUpdateMessage(string schema, string collection, bool isRelational, FilterParams filter, List`1<UpdateSpec> updates);
    public void SendUpdate(string schema, string collection, bool isRelational, FilterParams filter, List`1<UpdateSpec> updates);
    internal Find CreateFindMessage(string schema, string collection, bool isRelational, FilterParams filter, FindParams findParams);
    public void SendFind(string schema, string collection, bool isRelational, FilterParams filter, FindParams findParams);
    public void SendExpectOpen(Key condition, object value);
    public void SendResetSession(bool sessionResetNoReauthentication);
    internal void ReadOkClose();
    internal string ReadOk();
    internal void SetXPackets(XPacketReaderWriter readerwriter);
    public void SendPrepareStatement(UInt32 stmtId, PreparedStatementType type, string schema, string collection, bool isRelational, FilterParams filter, FindParams findParams, List`1<UpdateSpec> updateSpecs, Object[] rows, String[] columns, bool upsert, string sql);
    public void SendExecutePreparedStatement(UInt32 stmtId, IEnumerable args);
    public void AddArgs(Action`1<Any> addFunction, IEnumerable args);
    public void SendDeallocatePreparedStatement(UInt32 stmtId);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Resultset.ColumnMetaData : object {
    private static MessageParser`1<ColumnMetaData> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int TypeFieldNumber;
    private static FieldType TypeDefaultValue;
    private FieldType type_;
    public static int NameFieldNumber;
    private static ByteString NameDefaultValue;
    private ByteString name_;
    public static int OriginalNameFieldNumber;
    private static ByteString OriginalNameDefaultValue;
    private ByteString originalName_;
    public static int TableFieldNumber;
    private static ByteString TableDefaultValue;
    private ByteString table_;
    public static int OriginalTableFieldNumber;
    private static ByteString OriginalTableDefaultValue;
    private ByteString originalTable_;
    public static int SchemaFieldNumber;
    private static ByteString SchemaDefaultValue;
    private ByteString schema_;
    public static int CatalogFieldNumber;
    private static ByteString CatalogDefaultValue;
    private ByteString catalog_;
    public static int CollationFieldNumber;
    private static ulong CollationDefaultValue;
    private ulong collation_;
    public static int FractionalDigitsFieldNumber;
    private static UInt32 FractionalDigitsDefaultValue;
    private UInt32 fractionalDigits_;
    public static int LengthFieldNumber;
    private static UInt32 LengthDefaultValue;
    private UInt32 length_;
    public static int FlagsFieldNumber;
    private static UInt32 FlagsDefaultValue;
    private UInt32 flags_;
    public static int ContentTypeFieldNumber;
    private static UInt32 ContentTypeDefaultValue;
    private UInt32 contentType_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ColumnMetaData> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FieldType Type { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Name { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString OriginalName { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasOriginalName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Table { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasTable { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString OriginalTable { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasOriginalTable { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Schema { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasSchema { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Catalog { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCatalog { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ulong Collation { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCollation { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 FractionalDigits { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasFractionalDigits { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Length { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasLength { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 Flags { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasFlags { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public UInt32 ContentType { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasContentType { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ColumnMetaData(ColumnMetaData other);
    private static ColumnMetaData();
    public static MessageParser`1<ColumnMetaData> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ColumnMetaData Clone();
    public FieldType get_Type();
    public void set_Type(FieldType value);
    public bool get_HasType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearType();
    public ByteString get_Name();
    public void set_Name(ByteString value);
    public bool get_HasName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearName();
    public ByteString get_OriginalName();
    public void set_OriginalName(ByteString value);
    public bool get_HasOriginalName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearOriginalName();
    public ByteString get_Table();
    public void set_Table(ByteString value);
    public bool get_HasTable();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearTable();
    public ByteString get_OriginalTable();
    public void set_OriginalTable(ByteString value);
    public bool get_HasOriginalTable();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearOriginalTable();
    public ByteString get_Schema();
    public void set_Schema(ByteString value);
    public bool get_HasSchema();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearSchema();
    public ByteString get_Catalog();
    public void set_Catalog(ByteString value);
    public bool get_HasCatalog();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCatalog();
    public ulong get_Collation();
    public void set_Collation(ulong value);
    public bool get_HasCollation();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCollation();
    public UInt32 get_FractionalDigits();
    public void set_FractionalDigits(UInt32 value);
    public bool get_HasFractionalDigits();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearFractionalDigits();
    public UInt32 get_Length();
    public void set_Length(UInt32 value);
    public bool get_HasLength();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearLength();
    public UInt32 get_Flags();
    public void set_Flags(UInt32 value);
    public bool get_HasFlags();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearFlags();
    public UInt32 get_ContentType();
    public void set_ContentType(UInt32 value);
    public bool get_HasContentType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearContentType();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ColumnMetaData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ColumnMetaData other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public enum Mysqlx.Resultset.ContentType_BYTES : Enum {
    public int value__;
    [OriginalNameAttribute("GEOMETRY")]
public static ContentType_BYTES Geometry;
    [OriginalNameAttribute("JSON")]
public static ContentType_BYTES Json;
    [OriginalNameAttribute("XML")]
public static ContentType_BYTES Xml;
}
public enum Mysqlx.Resultset.ContentType_DATETIME : Enum {
    public int value__;
    [OriginalNameAttribute("DATE")]
public static ContentType_DATETIME Date;
    [OriginalNameAttribute("DATETIME")]
public static ContentType_DATETIME Datetime;
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Resultset.FetchDone : object {
    private static MessageParser`1<FetchDone> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FetchDone> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FetchDone(FetchDone other);
    private static FetchDone();
    public static MessageParser`1<FetchDone> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FetchDone Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FetchDone other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FetchDone other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Resultset.FetchDoneMoreOutParams : object {
    private static MessageParser`1<FetchDoneMoreOutParams> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FetchDoneMoreOutParams> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FetchDoneMoreOutParams(FetchDoneMoreOutParams other);
    private static FetchDoneMoreOutParams();
    public static MessageParser`1<FetchDoneMoreOutParams> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FetchDoneMoreOutParams Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FetchDoneMoreOutParams other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FetchDoneMoreOutParams other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Resultset.FetchDoneMoreResultsets : object {
    private static MessageParser`1<FetchDoneMoreResultsets> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FetchDoneMoreResultsets> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FetchDoneMoreResultsets(FetchDoneMoreResultsets other);
    private static FetchDoneMoreResultsets();
    public static MessageParser`1<FetchDoneMoreResultsets> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FetchDoneMoreResultsets Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FetchDoneMoreResultsets other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FetchDoneMoreResultsets other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Resultset.FetchSuspended : object {
    private static MessageParser`1<FetchSuspended> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<FetchSuspended> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public FetchSuspended(FetchSuspended other);
    private static FetchSuspended();
    public static MessageParser`1<FetchSuspended> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual FetchSuspended Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(FetchSuspended other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(FetchSuspended other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Resultset.MysqlxResultsetReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxResultsetReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Resultset.Row : object {
    private static MessageParser`1<Row> _parser;
    private UnknownFieldSet _unknownFields;
    public static int FieldFieldNumber;
    private static FieldCodec`1<ByteString> _repeated_field_codec;
    private RepeatedField`1<ByteString> field_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Row> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<ByteString> Field { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Row(Row other);
    private static Row();
    public static MessageParser`1<Row> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Row Clone();
    public RepeatedField`1<ByteString> get_Field();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Row other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Row other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal class MySqlX.RoutingServices.DefaultRoutingService : RoutingServiceBase {
    public DefaultRoutingService(MySqlXConnectionStringBuilder settings);
    public virtual MySqlXConnectionStringBuilder GetCurrentConnection(ConnectionMode mode);
}
internal abstract class MySqlX.RoutingServices.RoutingServiceBase : object {
    protected MySqlXConnectionStringBuilder settings;
    public RoutingServiceBase(MySqlXConnectionStringBuilder settings);
    public virtual MySqlXConnectionStringBuilder GetCurrentConnection();
    public abstract virtual MySqlXConnectionStringBuilder GetCurrentConnection(ConnectionMode mode);
}
internal class MySqlX.Security.ExternalAuthenticationPlugin : object {
    private MySqlXConnectionStringBuilder _settings;
    public string PluginName { get; }
    public string AuthName { get; }
    public ExternalAuthenticationPlugin(MySqlXConnectionStringBuilder settings);
    public string get_PluginName();
    public string get_AuthName();
}
internal class MySqlX.Security.MySQL41AuthenticationPlugin : MySqlNativePasswordPlugin {
    private MySqlXConnectionStringBuilder _settings;
    public string PluginName { get; }
    public string AuthName { get; }
    public MySQL41AuthenticationPlugin(MySqlXConnectionStringBuilder settings);
    public virtual string get_PluginName();
    public string get_AuthName();
    public Byte[] Continue(Byte[] salt);
}
internal class MySqlX.Security.PlainAuthenticationPlugin : Sha256AuthenticationPlugin {
    private MySqlXConnectionStringBuilder _settings;
    public string PluginName { get; }
    public string AuthName { get; }
    public PlainAuthenticationPlugin(MySqlXConnectionStringBuilder settings);
    public virtual string get_PluginName();
    public string get_AuthName();
    public Byte[] GetAuthData();
}
public class MySqlX.Serialization.JsonParser : object {
    private int _pos;
    private string _input;
    public static Dictionary`2<string, object> Parse(string s);
    private Dictionary`2<string, object> ParseInternal(string s);
    private Dictionary`2<string, object> ReadGroup();
    private object ReadValue();
    private Object[] ReadArray();
    private char PeekToken();
    private string ReadQuotedToken();
    private bool TokenInGroup(Char[] tokens, char c);
    private string ReadUntilToken(Char[] end);
    private void RequireToken(char token);
    private bool ReadToken(char token);
    private void SkipWhite();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.ServerMessages : object {
    private static MessageParser`1<ServerMessages> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<ServerMessages> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ServerMessages(ServerMessages other);
    private static ServerMessages();
    public static MessageParser`1<ServerMessages> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual ServerMessages Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(ServerMessages other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(ServerMessages other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Session.AuthenticateContinue : object {
    private static MessageParser`1<AuthenticateContinue> _parser;
    private UnknownFieldSet _unknownFields;
    public static int AuthDataFieldNumber;
    private static ByteString AuthDataDefaultValue;
    private ByteString authData_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AuthenticateContinue> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString AuthData { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAuthData { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AuthenticateContinue(AuthenticateContinue other);
    private static AuthenticateContinue();
    public static MessageParser`1<AuthenticateContinue> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AuthenticateContinue Clone();
    public ByteString get_AuthData();
    public void set_AuthData(ByteString value);
    public bool get_HasAuthData();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAuthData();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AuthenticateContinue other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AuthenticateContinue other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Session.AuthenticateOk : object {
    private static MessageParser`1<AuthenticateOk> _parser;
    private UnknownFieldSet _unknownFields;
    public static int AuthDataFieldNumber;
    private static ByteString AuthDataDefaultValue;
    private ByteString authData_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AuthenticateOk> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString AuthData { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAuthData { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AuthenticateOk(AuthenticateOk other);
    private static AuthenticateOk();
    public static MessageParser`1<AuthenticateOk> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AuthenticateOk Clone();
    public ByteString get_AuthData();
    public void set_AuthData(ByteString value);
    public bool get_HasAuthData();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAuthData();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AuthenticateOk other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AuthenticateOk other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Session.AuthenticateStart : object {
    private static MessageParser`1<AuthenticateStart> _parser;
    private UnknownFieldSet _unknownFields;
    public static int MechNameFieldNumber;
    private static string MechNameDefaultValue;
    private string mechName_;
    public static int AuthDataFieldNumber;
    private static ByteString AuthDataDefaultValue;
    private ByteString authData_;
    public static int InitialResponseFieldNumber;
    private static ByteString InitialResponseDefaultValue;
    private ByteString initialResponse_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<AuthenticateStart> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string MechName { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasMechName { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString AuthData { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasAuthData { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString InitialResponse { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasInitialResponse { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public AuthenticateStart(AuthenticateStart other);
    private static AuthenticateStart();
    public static MessageParser`1<AuthenticateStart> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual AuthenticateStart Clone();
    public string get_MechName();
    public void set_MechName(string value);
    public bool get_HasMechName();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearMechName();
    public ByteString get_AuthData();
    public void set_AuthData(ByteString value);
    public bool get_HasAuthData();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearAuthData();
    public ByteString get_InitialResponse();
    public void set_InitialResponse(ByteString value);
    public bool get_HasInitialResponse();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearInitialResponse();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(AuthenticateStart other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(AuthenticateStart other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Session.Close : object {
    private static MessageParser`1<Close> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Close> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Close(Close other);
    private static Close();
    public static MessageParser`1<Close> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Close Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Close other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public static class Mysqlx.Session.MysqlxSessionReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxSessionReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Session.Reset : object {
    private static MessageParser`1<Reset> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int KeepOpenFieldNumber;
    private static bool KeepOpenDefaultValue;
    private bool keepOpen_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<Reset> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool KeepOpen { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasKeepOpen { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public Reset(Reset other);
    private static Reset();
    public static MessageParser`1<Reset> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual Reset Clone();
    public bool get_KeepOpen();
    public void set_KeepOpen(bool value);
    public bool get_HasKeepOpen();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearKeepOpen();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(Reset other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(Reset other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
internal abstract class MySqlX.Sessions.InternalSession : object {
    protected Stream _stream;
    internal BaseResult ActiveResult;
    private bool disposed;
    protected internal MySqlXConnectionStringBuilder Settings;
    [CompilerGeneratedAttribute]
private SessionState <SessionState>k__BackingField;
    public SessionState SessionState { get; protected set; }
    public InternalSession(MySqlXConnectionStringBuilder settings);
    protected abstract virtual void Open();
    public abstract virtual void Close();
    internal abstract virtual ProtocolBase GetProtocol();
    [CompilerGeneratedAttribute]
public SessionState get_SessionState();
    [CompilerGeneratedAttribute]
protected void set_SessionState(SessionState value);
    public static InternalSession GetSession(MySqlXConnectionStringBuilder settings);
    public Result ExecuteSqlNonQuery(string sql, Object[] args);
    public RowResult GetSqlRowResult(string sql);
    public SqlResult GetSQLResult(string sql, Object[] args);
    public object ExecuteQueryAsScalar(string sql);
    private static void SetDefaultCollation(InternalSession session, string charset);
    internal DBVersion GetServerVersion();
    internal int GetThreadId();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class MySqlX.Sessions.QueueTaskScheduler : TaskScheduler {
    private object lockObject;
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
}
internal class MySqlX.Sessions.XInternalSession : InternalSession {
    private XCompressionController _readerCompressionController;
    private XCompressionController _writerCompressionController;
    private XProtocol _protocol;
    private XPacketReaderWriter _packetReaderWriter;
    private bool _serverSupportsTls;
    private static string mysqlxNamespace;
    internal bool _supportsPreparedStatements;
    private int _stmtId;
    private List`1<int> _preparedStatements;
    internal Nullable`1<bool> _sessionResetNoReauthentication;
    internal MyNetworkStream _myNetworkStream;
    public XInternalSession(MySqlXConnectionStringBuilder settings);
    protected virtual void Open();
    internal void Authenticate();
    private void GetAndSetCapabilities();
    private void VerifyDefaultOrder(String[]& algorithms);
    public List`1<string> NegotiateUserAgainstClientAlgorithms(string inputString);
    private Dictionary`2<string, object> NegotiateCompression(String[] serverSupportedAlgorithms, List`1<string> clientAgainstUserAlgorithms);
    private Dictionary`2<string, string> GetConnectionAttributes(string connectionAttrs);
    private void AuthenticateMySQL41();
    private void AuthenticatePlain();
    private void AuthenticateExternal();
    private void AuthenticateSha256Memory();
    protected internal void SetState(SessionState newState, bool broadcast);
    internal virtual ProtocolBase GetProtocol();
    public virtual void Close();
    public void CreateCollection(string schemaName, string collectionName);
    public void CreateCollection(string schemaName, string collectionName, CreateCollectionOptions options);
    public void ModifyCollection(string schemaName, string collectionName, Nullable`1<ModifyCollectionOptions> options);
    public void DropCollection(string schemaName, string collectionName);
    public Result CreateCollectionIndex(CreateCollectionIndexStatement`1<T> statement);
    public void DropCollectionIndex(string schemaName, string collectionName, string indexName);
    public long TableCount(Schema schema, string name, string type);
    public bool TableExists(Schema schema, string name);
    private Result ExecuteCmdNonQuery(string cmd, bool throwOnFail, KeyValuePair`2[] args);
    private Result ExecuteCmdNonQueryOptions(string cmd, bool throwOnFail, KeyValuePair`2[] args);
    private Result ExecuteCreateCollectionIndex(string cmd, bool throwOnFail, KeyValuePair`2[] args);
    public List`1<T> GetObjectList(Schema s, String[] types);
    public string GetObjectType(Schema s, string name);
    public RowResult GetRowResult(string cmd, KeyValuePair`2[] args);
    public Result Insert(Collection`1<T> collection, Object[] json, List`1<string> newIds, bool upsert);
    public Result DeleteDocs(RemoveStatement`1<T> rs);
    public Result DeleteRows(TableDeleteStatement statement);
    public Result ModifyDocs(ModifyStatement`1<T> ms);
    public Result UpdateRows(TableUpdateStatement statement);
    public DocResult`1<T> FindDocs(FindStatement`1<T> fs);
    public RowResult FindRows(TableSelectStatement ss);
    public Result InsertRows(TableInsertStatement statement);
    protected Result ExpectOpen(Key condition, object value);
    public Result ExpectDocidGenerated();
    public void ResetSession();
    public int PrepareStatement(BaseStatement`2<TResult, TDoc> statement);
    public TResult ExecutePreparedStatement(int stmtId, IEnumerable args);
    public void DeallocatePreparedStatement(int stmtId);
    public string GetCompressionAlgorithm(bool fromReaderController);
}
public static class Mysqlx.Sql.MysqlxSqlReflection : object {
    private static FileDescriptor descriptor;
    public static FileDescriptor Descriptor { get; }
    private static MysqlxSqlReflection();
    public static FileDescriptor get_Descriptor();
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Sql.StmtExecute : object {
    private static MessageParser`1<StmtExecute> _parser;
    private UnknownFieldSet _unknownFields;
    private int _hasBits0;
    public static int NamespaceFieldNumber;
    private static string NamespaceDefaultValue;
    private string namespace_;
    public static int StmtFieldNumber;
    private static ByteString StmtDefaultValue;
    private ByteString stmt_;
    public static int ArgsFieldNumber;
    private static FieldCodec`1<Any> _repeated_args_codec;
    private RepeatedField`1<Any> args_;
    public static int CompactMetadataFieldNumber;
    private static bool CompactMetadataDefaultValue;
    private bool compactMetadata_;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<StmtExecute> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public string Namespace { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasNamespace { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public ByteString Stmt { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasStmt { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public RepeatedField`1<Any> Args { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool CompactMetadata { get; public set; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public bool HasCompactMetadata { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public StmtExecute(StmtExecute other);
    private static StmtExecute();
    public static MessageParser`1<StmtExecute> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual StmtExecute Clone();
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_HasNamespace();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearNamespace();
    public ByteString get_Stmt();
    public void set_Stmt(ByteString value);
    public bool get_HasStmt();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearStmt();
    public RepeatedField`1<Any> get_Args();
    public bool get_CompactMetadata();
    public void set_CompactMetadata(bool value);
    public bool get_HasCompactMetadata();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public void ClearCompactMetadata();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(StmtExecute other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(StmtExecute other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
[DebuggerDisplayAttribute("{ToString(),nq}")]
public class Mysqlx.Sql.StmtExecuteOk : object {
    private static MessageParser`1<StmtExecuteOk> _parser;
    private UnknownFieldSet _unknownFields;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageParser`1<StmtExecuteOk> Parser { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public static MessageDescriptor Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; }
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public StmtExecuteOk(StmtExecuteOk other);
    private static StmtExecuteOk();
    public static MessageParser`1<StmtExecuteOk> get_Parser();
    public static MessageDescriptor get_Descriptor();
    private sealed virtual override MessageDescriptor pb::Google.Protobuf.IMessage.get_Descriptor();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual StmtExecuteOk Clone();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual bool Equals(object other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual bool Equals(StmtExecuteOk other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public virtual string ToString();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void WriteTo(CodedOutputStream output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalWriteTo(WriteContext& output);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual int CalculateSize();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(StmtExecuteOk other);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
public sealed virtual void MergeFrom(CodedInputStream input);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("protoc", "")]
private sealed virtual override void pb::Google.Protobuf.IBufferMessage.InternalMergeFrom(ParseContext& input);
}
public abstract class MySqlX.XDevAPI.BaseSession : object {
    private InternalSession _internalSession;
    private string _connectionString;
    private bool _isDefaultPort;
    private static UInt32 X_PROTOCOL_DEFAULT_PORT;
    private static char CONNECTION_DATA_KEY_SEPARATOR;
    private static char CONNECTION_DATA_VALUE_SEPARATOR;
    private static string PORT_CONNECTION_OPTION_KEYWORD;
    private static string SERVER_CONNECTION_OPTION_KEYWORD;
    private static string CONNECT_TIMEOUT_CONNECTION_OPTION_KEYWORD;
    private static string CONNECTION_ATTRIBUTES_CONNECTION_OPTION_KEYWORD;
    private static string DNS_SRV_CONNECTION_OPTION_KEYWORD;
    private static string DNS_SRV_URI_SCHEME;
    private static string MYSQLX_URI_SCHEME;
    internal QueueTaskScheduler _scheduler;
    protected Client _client;
    [CompilerGeneratedAttribute]
private DateTime <IdleSince>k__BackingField;
    private Nullable`1<DBVersion> _version;
    private Nullable`1<int> _threadId;
    [CompilerGeneratedAttribute]
private bool <SupportsPreparedStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlXConnectionStringBuilder <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private Schema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private Schema <DefaultSchema>k__BackingField;
    private bool disposedValue;
    internal InternalSession InternalSession { get; }
    internal XInternalSession XSession { get; }
    internal DateTime IdleSince { get; internal set; }
    internal DBVersion Version { get; }
    internal int ThreadId { get; }
    internal bool SupportsPreparedStatements { get; internal set; }
    public MySqlXConnectionStringBuilder Settings { get; private set; }
    public Schema Schema { get; protected set; }
    public Schema DefaultSchema { get; private set; }
    public string Uri { get; }
    internal BaseSession(string connectionString, Client client);
    internal BaseSession(object connectionData, Client client);
    internal BaseSession(InternalSession internalSession, Client client);
    internal InternalSession get_InternalSession();
    internal XInternalSession get_XSession();
    [CompilerGeneratedAttribute]
internal DateTime get_IdleSince();
    [CompilerGeneratedAttribute]
internal void set_IdleSince(DateTime value);
    internal DBVersion get_Version();
    internal int get_ThreadId();
    [CompilerGeneratedAttribute]
internal bool get_SupportsPreparedStatements();
    [CompilerGeneratedAttribute]
internal void set_SupportsPreparedStatements(bool value);
    [CompilerGeneratedAttribute]
public MySqlXConnectionStringBuilder get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(MySqlXConnectionStringBuilder value);
    [CompilerGeneratedAttribute]
public Schema get_Schema();
    [CompilerGeneratedAttribute]
protected void set_Schema(Schema value);
    [CompilerGeneratedAttribute]
public Schema get_DefaultSchema();
    [CompilerGeneratedAttribute]
private void set_DefaultSchema(Schema value);
    public string get_Uri();
    public void DropSchema(string schema);
    public Schema CreateSchema(string schema);
    public Schema GetSchema(string schema);
    public List`1<Schema> GetSchemas();
    public void StartTransaction();
    public void Commit();
    public void Rollback();
    public void Close();
    internal void CloseFully();
    internal void Reset();
    public string SetSavepoint();
    public string SetSavepoint(string name);
    public void ReleaseSavepoint(string name);
    public void RollbackTo(string name);
    protected internal string ParseConnectionData(string connectionData, Client client);
    private string ParseConnectionUri(string connectionUri);
    internal static bool IsUnixSocket(string unixSocket);
    private string ConvertToConnectionString(Uri uri, string unixSocketPath, bool parseServerAsUnixSocket, bool isDnsSrvScheme);
    private string ParseConnectionString(string connectionString);
    internal static string NormalizeUnixSocket(string unixSocket);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Schema <GetSchemas>b__54_0(Row row);
}
public class MySqlX.XDevAPI.Client : object {
    private string _connectionString;
    private ConnectionOptions _connectionOptions;
    private List`1<Session> _inUse;
    private ConcurrentQueue`1<Session> _inIdle;
    private int _available;
    private AutoResetEvent _autoResetEvent;
    private Timer _idleTimer;
    private bool _isClosed;
    internal static int DEMOTED_TIMEOUT;
    private object _dnsSrvLock;
    [CompilerGeneratedAttribute]
private ConcurrentQueue`1<FailoverServer> <DemotedHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FailoverServer> <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private Timer <DemotedServersTimer>k__BackingField;
    private bool disposedValue;
    internal ConcurrentQueue`1<FailoverServer> DemotedHosts { get; internal set; }
    internal List`1<FailoverServer> Hosts { get; internal set; }
    internal Timer DemotedServersTimer { get; internal set; }
    internal Client(object connectionString, object connectionOptions);
    [CompilerGeneratedAttribute]
internal ConcurrentQueue`1<FailoverServer> get_DemotedHosts();
    [CompilerGeneratedAttribute]
internal void set_DemotedHosts(ConcurrentQueue`1<FailoverServer> value);
    [CompilerGeneratedAttribute]
internal List`1<FailoverServer> get_Hosts();
    [CompilerGeneratedAttribute]
internal void set_Hosts(List`1<FailoverServer> value);
    [CompilerGeneratedAttribute]
internal Timer get_DemotedServersTimer();
    [CompilerGeneratedAttribute]
internal void set_DemotedServersTimer(Timer value);
    internal void ReleaseDemotedHosts(object state);
    private void CleanIdleConnections(object state);
    public Session GetSession();
    private Session TryToGetSession();
    private Session GetPooledSession();
    private Session CreateNewSession();
    internal void ReleaseSession(BaseSession session);
    public void Close();
    internal static ConnectionOptions ParseConnectionOptions(object connectionOptions);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class MySqlX.XDevAPI.Collection : Collection`1<DbDoc> {
    internal Collection(Schema schema, string name);
    public AddStatement`1<DbDoc> Add(Object[] items);
    public RemoveStatement`1<DbDoc> Remove(string condition);
    public ModifyStatement`1<DbDoc> Modify(string condition);
    public Result ReplaceOne(object id, object doc);
    public Result AddOrReplaceOne(object id, object doc);
    public FindStatement`1<DbDoc> Find(string condition);
    public DbDoc GetOne(object id);
}
public class MySqlX.XDevAPI.Collection`1 : DatabaseObject {
    public Collection`1(Schema s, string name);
    public AddStatement`1<T> Add(Object[] items);
    public RemoveStatement`1<T> Remove(string condition);
    public Result RemoveOne(object id);
    public ModifyStatement`1<T> Modify(string condition);
    public long Count();
    public FindStatement`1<T> Find(string condition);
    public void CreateIndex(string indexName, object indexDefinition);
    public void DropIndex(string indexName);
    public virtual bool ExistsInDatabase();
    public T GetOne(object id);
}
public abstract class MySqlX.XDevAPI.Common.BaseResult : object {
    private List`1<WarningInfo> _warnings;
    internal ulong _recordsAffected;
    internal ulong _affectedItemsCount;
    internal ulong _autoIncrementValue;
    internal InternalSession _session;
    internal bool _hasData;
    internal bool _hasMoreResults;
    internal List`1<string> _documentIds;
    public ulong AffectedItemsCount { get; }
    protected ProtocolBase Protocol { get; }
    public ReadOnlyCollection`1<WarningInfo> Warnings { get; }
    public int WarningsCount { get; }
    internal BaseResult(InternalSession session);
    public ulong get_AffectedItemsCount();
    protected ProtocolBase get_Protocol();
    internal void AddWarning(WarningInfo w);
    public ReadOnlyCollection`1<WarningInfo> get_Warnings();
    public int get_WarningsCount();
    protected virtual void Buffer();
}
public abstract class MySqlX.XDevAPI.Common.BaseStatement`2 : object {
    internal bool _hasChanged;
    internal bool _isPrepared;
    protected int _stmtId;
    [CompilerGeneratedAttribute]
private BaseSession <Session>k__BackingField;
    public BaseSession Session { get; private set; }
    public BaseStatement`2(BaseSession session);
    [CompilerGeneratedAttribute]
public BaseSession get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(BaseSession value);
    public abstract virtual TResult Execute();
    [AsyncStateMachineAttribute("MySqlX.XDevAPI.Common.BaseStatement`2/<ExecuteAsync>d__9")]
public Task`1<TResult> ExecuteAsync();
    protected void ValidateOpenSession();
    protected void SetChanged();
    protected virtual TResult ConvertToPreparedStatement(Func`2<T, TResult> executeFunc, T t, IEnumerable args);
    [CompilerGeneratedAttribute]
private TResult <ExecuteAsync>b__9_0();
}
public abstract class MySqlX.XDevAPI.Common.BufferingResult`1 : BaseResult {
    protected int _position;
    protected List`1<T> _items;
    protected bool _isComplete;
    private Dictionary`2<string, int> _nameMap;
    internal List`1<Column> _columns;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    protected Dictionary`2<string, int> NameMap { get; }
    public int PageSize { get; private set; }
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal BufferingResult`1(InternalSession session);
    protected Dictionary`2<string, int> get_NameMap();
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
private void set_PageSize(int value);
    protected void LoadColumnData();
    public ReadOnlyCollection`1<T> FetchAll();
    internal void Dump();
    public T FetchOne();
    public bool Next();
    protected abstract virtual T ReadItem(bool dumping);
    private bool PageInItems();
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void Buffer();
    public sealed virtual void Dispose();
}
public class MySqlX.XDevAPI.Common.CreateCollectionOptions : ValueType {
    [CompilerGeneratedAttribute]
private bool <ReuseExisting>k__BackingField;
    [CompilerGeneratedAttribute]
private Validation <Validation>k__BackingField;
    public bool ReuseExisting { get; public set; }
    public Validation Validation { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ReuseExisting();
    [CompilerGeneratedAttribute]
public void set_ReuseExisting(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Validation get_Validation();
    [CompilerGeneratedAttribute]
public void set_Validation(Validation value);
}
public class MySqlX.XDevAPI.Common.ErrorInfo : object {
    public UInt32 Code;
    public string SqlState;
    public string Message;
}
public abstract class MySqlX.XDevAPI.Common.FilterableStatement`4 : TargetedBaseStatement`3<TTarget, TResult, TDoc> {
    private FilterParams filter;
    internal FilterParams FilterData { get; }
    public FilterableStatement`4(TTarget target, string condition);
    internal FilterParams get_FilterData();
    public T Where(string condition);
    public T Limit(long rows);
    public T Offset(long rows);
    public T Bind(string parameterName, object value);
    public T Bind(DbDoc dbDocParams);
    public T Bind(string jsonParams);
    public T Bind(object jsonParams);
    protected virtual TResult Execute(Func`2<T, TResult> executeFunc, T t);
    public virtual T Clone();
    private static string QuoteString(string value);
}
internal class MySqlX.XDevAPI.Common.FilterParams : object {
    public long Limit;
    public long Offset;
    public string Condition;
    public Dictionary`2<string, object> Parameters;
    public Dictionary`2<string, int> placeholderNameToPosition;
    public bool IsRelational;
    public String[] OrderBy;
    public bool hadLimit;
    public bool hadOffset;
    public bool HasLimit { get; }
    public bool get_HasLimit();
    public List`1<Order> GetOrderByExpressions(bool allowRelational);
    public Expr GetConditionExpression(bool allowRelational);
    public IEnumerable`1<Scalar> GetArgsExpression(Dictionary`2<string, object> parameters);
    public FilterParams Clone();
}
public class MySqlX.XDevAPI.Common.ModifyCollectionOptions : ValueType {
    [CompilerGeneratedAttribute]
private Validation <Validation>k__BackingField;
    public Validation Validation { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Validation get_Validation();
    [CompilerGeneratedAttribute]
public void set_Validation(Validation value);
}
internal class MySqlX.XDevAPI.Common.QueryStatement`1 : object {
    internal string schema;
    internal string collection;
    internal bool isRelational;
    internal FilterParams filter;
    internal FindParams findParams;
    internal TableSelectStatement selectStatement;
    internal FindStatement`1<T> findStatement;
    public QueryStatement`1(FindStatement`1<T> statement);
    public QueryStatement`1(TableSelectStatement statement);
    private void SetValues(DatabaseObject target, FilterParams filter, FindParams findParams, bool isRelational);
}
public class MySqlX.XDevAPI.Common.Result : BaseResult {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <GeneratedIds>k__BackingField;
    public ulong AutoIncrementValue { get; }
    public ReadOnlyCollection`1<string> GeneratedIds { get; }
    internal Result(InternalSession session);
    public ulong get_AutoIncrementValue();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_GeneratedIds();
}
public abstract class MySqlX.XDevAPI.Common.TargetedBaseStatement`3 : BaseStatement`2<TResult, TType> {
    [CompilerGeneratedAttribute]
private TTarget <Target>k__BackingField;
    public TTarget Target { get; private set; }
    public TargetedBaseStatement`3(TTarget target);
    [CompilerGeneratedAttribute]
public TTarget get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(TTarget value);
}
public class MySqlX.XDevAPI.Common.Validation : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<ValidationLevel> <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public Nullable`1<ValidationLevel> Level { get; public set; }
    public string Schema { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<ValidationLevel> get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(Nullable`1<ValidationLevel> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public void set_Schema(string value);
}
public enum MySqlX.XDevAPI.Common.ValidationLevel : Enum {
    public int value__;
    public static ValidationLevel OFF;
    public static ValidationLevel STRICT;
}
public class MySqlX.XDevAPI.Common.WarningInfo : object {
    public UInt32 Code;
    public string Message;
    public UInt32 Level;
    public WarningInfo(UInt32 code, string msg);
}
public class MySqlX.XDevAPI.CRUD.AddStatement`1 : CrudStatement`2<Result, T> {
    private List`1<T> _Docs;
    internal bool upsert;
    internal AddStatement`1(Collection`1<T> collection);
    public AddStatement`1<T> Add(Object[] items);
    public virtual Result Execute();
}
public class MySqlX.XDevAPI.CRUD.CreateCollectionIndexStatement`1 : CrudStatement`2<Result, T> {
    internal CreateIndexParams createIndexParams;
    internal CreateCollectionIndexStatement`1(Collection`1<T> collection, string indexName, DbDoc indexDefinition);
    public virtual Result Execute();
}
internal class MySqlX.XDevAPI.CRUD.CreateIndexParams : object {
    private static string FIELDS;
    private static string FIELD;
    private static string TYPE;
    private static string REQUIRED;
    private static string OPTIONS;
    private static string SRID;
    private static string ARRAY;
    private string _indexName;
    private string _type;
    private List`1<IndexField> _fields;
    public string IndexName { get; }
    public string Type { get; }
    public List`1<IndexField> Fields { get; }
    public CreateIndexParams(string indexName, DbDoc indexDefinition);
    public string get_IndexName();
    public string get_Type();
    public List`1<IndexField> get_Fields();
}
public abstract class MySqlX.XDevAPI.CRUD.CrudStatement`2 : TargetedBaseStatement`3<Collection`1<T>, TResult, T> {
    internal CrudStatement`2(Collection`1<T> collection);
    [IteratorStateMachineAttribute("MySqlX.XDevAPI.CRUD.CrudStatement`2/<GetDocs>d__1")]
protected IEnumerable`1<T> GetDocs(Object[] items);
}
public class MySqlX.XDevAPI.CRUD.DocResult`1 : BufferingResult`1<T> {
    private Encoding _encoding;
    internal DocResult`1(InternalSession session);
    protected virtual T ReadItem(bool dumping);
}
internal class MySqlX.XDevAPI.CRUD.FindParams : FilterParams {
    public String[] GroupBy;
    public string GroupByCritieria;
    public String[] Projection;
    public RowLock Locking;
    public LockContention LockingOption;
}
public class MySqlX.XDevAPI.CRUD.FindStatement`1 : FilterableStatement`4<FindStatement`1<T>, Collection`1<T>, DocResult`1<T>, T> {
    internal FindParams findParams;
    internal FindStatement`1(Collection`1<T> c, string condition);
    public FindStatement`1<T> Fields(String[] columns);
    public virtual DocResult`1<T> Execute();
    public FindStatement`1<T> LockShared(LockContention lockOption);
    public FindStatement`1<T> LockExclusive(LockContention lockOption);
    public FindStatement`1<T> GroupBy(String[] groupBy);
    public FindStatement`1<T> Having(string having);
    public FindStatement`1<T> Sort(String[] order);
    [ObsoleteAttribute("Where(string condition) has been deprecated since version 8.0.17.")]
public FindStatement`1<T> Where(string condition);
}
public class MySqlX.XDevAPI.CRUD.ModifyStatement`1 : FilterableStatement`4<ModifyStatement`1<T>, Collection`1<T>, Result, T> {
    internal List`1<UpdateSpec> Updates;
    internal ModifyStatement`1(Collection`1<T> collection, string condition);
    public ModifyStatement`1<T> Set(string docPath, object value);
    public ModifyStatement`1<T> Change(string docPath, object value);
    public ModifyStatement`1<T> Unset(String[] docPath);
    public ModifyStatement`1<T> Patch(object document);
    public ModifyStatement`1<T> ArrayInsert(string field, object value);
    public ModifyStatement`1<T> ArrayAppend(string docPath, object value);
    public ModifyStatement`1<T> Sort(String[] order);
    [ObsoleteAttribute("Where(string condition) has been deprecated since version 8.0.17.")]
public ModifyStatement`1<T> Where(string condition);
    public virtual Result Execute();
}
public class MySqlX.XDevAPI.CRUD.RemoveStatement`1 : FilterableStatement`4<RemoveStatement`1<T>, Collection`1<T>, Result, T> {
    internal RemoveStatement`1(Collection`1<T> collection, string condition);
    public RemoveStatement`1<T> Sort(String[] order);
    [ObsoleteAttribute("Where(string condition) has been deprecated since version 8.0.17.")]
public RemoveStatement`1<T> Where(string condition);
    public virtual Result Execute();
}
internal class MySqlX.XDevAPI.CRUD.UpdateSpec : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Path { get; private set; }
    public UpdateType Type { get; private set; }
    public object Value { get; private set; }
    public bool HasValue { get; }
    public UpdateSpec(UpdateType updateType, string docPath);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public UpdateType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(UpdateType value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public bool get_HasValue();
    public Expr GetValue(UpdateType operationType);
    public ColumnIdentifier GetSource(bool isRelational);
    public UpdateSpec SetValue(object o);
}
public abstract class MySqlX.XDevAPI.DatabaseObject : object {
    [CompilerGeneratedAttribute]
private Schema <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public BaseSession Session { get; }
    public Schema Schema { get; internal set; }
    public string Name { get; internal set; }
    internal DatabaseObject(Schema schema, string name);
    public BaseSession get_Session();
    [CompilerGeneratedAttribute]
public Schema get_Schema();
    [CompilerGeneratedAttribute]
internal void set_Schema(Schema value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    public abstract virtual bool ExistsInDatabase();
    protected void ValidateOpenSession();
}
[DefaultMemberAttribute("Item")]
public class MySqlX.XDevAPI.DbDoc : object {
    internal Dictionary`2<string, object> values;
    public object Item { get; }
    public object Id { get; internal set; }
    public bool HasId { get; }
    public DbDoc(object val);
    public object get_Item(string path);
    public object get_Id();
    internal void set_Id(object value);
    public bool get_HasId();
    private object GetValue(string path);
    public void SetValue(string key, object val);
    private Dictionary`2[] GetArrayValues(IEnumerable value);
    public virtual string ToString();
    private string DictToString(Dictionary`2<string, object> vals, int ident);
    private string GetValue(object val, int ident);
    private bool CompareDictionaries(Dictionary`2<TKey, TValue> dict1, Dictionary`2<TKey, TValue> dict2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private Dictionary`2<string, object> ParseObject(object val);
}
public class MySqlX.XDevAPI.Iterator : object {
    public Iterator Open(string p);
}
public class MySqlX.XDevAPI.MySqlExpression : object {
    public string value;
    public MySqlExpression(string value);
}
public class MySqlX.XDevAPI.MySQLX : object {
    public static Session GetSession(string connectionString);
    public static Session GetSession(object connectionData);
    public static Client GetClient(string connectionString, string connectionOptions);
    public static Client GetClient(string connectionString, object connectionOptions);
    public static Client GetClient(object connectionData, string connectionOptions);
    public static Client GetClient(object connectionData, object connectionOptions);
}
[DefaultMemberAttribute("Item")]
public class MySqlX.XDevAPI.MySqlXConnectionStringBuilder : MySqlBaseConnectionStringBuilder {
    internal static MySqlConnectionStringOptionCollection Options;
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Connect Timeout")]
[DescriptionAttribute("The length of time (in milliseconds) to wait for a connection to the server before terminating the attempt and generating an error.")]
[RefreshPropertiesAttribute("1")]
public UInt32 ConnectTimeout { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Connection Attributes")]
[DescriptionAttribute("Gets or sets a comma-delimited list of key-value pairs (in addition to standard XProtocol predefined keys) to be passed to MySQL Serverfor display as connection attributes.")]
public string ConnectionAttributes { get; public set; }
    [CategoryAttribute("Authentication")]
[DisplayNameAttribute("Auth")]
[DescriptionAttribute("Authentication mechanism")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MySqlAuthenticationMode Auth { get; public set; }
    [DescriptionAttribute("Path to a local file containing certificate revocation lists")]
public string SslCrl { get; public set; }
    [CategoryAttribute("Server")]
[DisplayNameAttribute("Compression Type")]
[DescriptionAttribute("Compression type")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CompressionType Compression { get; public set; }
    [CategoryAttribute("Server")]
[DisplayNameAttribute("Compression Algorithm")]
[DescriptionAttribute("Compression algorithm")]
public string CompressionAlgorithm { get; public set; }
    public object Item { get; public set; }
    private static MySqlXConnectionStringBuilder();
    public MySqlXConnectionStringBuilder(string connectionString, bool isDefaultPort);
    public UInt32 get_ConnectTimeout();
    public void set_ConnectTimeout(UInt32 value);
    public string get_ConnectionAttributes();
    public void set_ConnectionAttributes(string value);
    public MySqlAuthenticationMode get_Auth();
    public void set_Auth(MySqlAuthenticationMode value);
    public string get_SslCrl();
    public void set_SslCrl(string value);
    public CompressionType get_Compression();
    public void set_Compression(CompressionType value);
    public string get_CompressionAlgorithm();
    public void set_CompressionAlgorithm(string value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Equals(object obj);
    internal virtual MySqlConnectionStringOption GetOption(string key);
    internal virtual void SetInternalValue(string keyword, object value);
    public virtual bool Remove(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
}
public class MySqlX.XDevAPI.Relational.Column : object {
    internal ValueDecoder _decoder;
    internal ulong _collationNumber;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CharacterSetName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FractionalDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNumberSigned>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPadded>k__BackingField;
    public string ColumnName { get; internal set; }
    public string ColumnLabel { get; internal set; }
    public string TableName { get; internal set; }
    public string TableLabel { get; internal set; }
    public string SchemaName { get; internal set; }
    public string DatabaseName { get; internal set; }
    public string CollationName { get; internal set; }
    public string CharacterSetName { get; internal set; }
    public UInt32 Length { get; internal set; }
    public UInt32 FractionalDigits { get; internal set; }
    public ColumnType Type { get; internal set; }
    public Type ClrType { get; internal set; }
    public bool IsNumberSigned { get; internal set; }
    public bool IsPadded { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
internal void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnLabel();
    [CompilerGeneratedAttribute]
internal void set_ColumnLabel(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
internal void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_TableLabel();
    [CompilerGeneratedAttribute]
internal void set_TableLabel(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
internal void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
internal void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_CollationName();
    [CompilerGeneratedAttribute]
internal void set_CollationName(string value);
    [CompilerGeneratedAttribute]
public string get_CharacterSetName();
    [CompilerGeneratedAttribute]
internal void set_CharacterSetName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Length();
    [CompilerGeneratedAttribute]
internal void set_Length(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FractionalDigits();
    [CompilerGeneratedAttribute]
internal void set_FractionalDigits(UInt32 value);
    [CompilerGeneratedAttribute]
public ColumnType get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(ColumnType value);
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    [CompilerGeneratedAttribute]
internal void set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public bool get_IsNumberSigned();
    [CompilerGeneratedAttribute]
internal void set_IsNumberSigned(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPadded();
    [CompilerGeneratedAttribute]
internal void set_IsPadded(bool value);
}
[DefaultMemberAttribute("Item")]
public class MySqlX.XDevAPI.Relational.InternalRowResult : BufferingResult`1<Row> {
    public ReadOnlyCollection`1<Column> Columns { get; }
    public int ColumnCount { get; }
    public List`1<string> ColumnNames { get; }
    public ReadOnlyCollection`1<Row> Rows { get; }
    public object Item { get; }
    internal InternalRowResult(InternalSession session);
    public ReadOnlyCollection`1<Column> get_Columns();
    public int get_ColumnCount();
    public List`1<string> get_ColumnNames();
    public ReadOnlyCollection`1<Row> get_Rows();
    public object get_Item(int index);
    private object GetValue(int index);
    public int IndexOf(string name);
    protected virtual Row ReadItem(bool dumping);
}
[DefaultMemberAttribute("Item")]
public class MySqlX.XDevAPI.Relational.Row : object {
    private Object[] _values;
    private Dictionary`2<string, int> _nameMap;
    public object Item { get; }
    public object Item { get; }
    internal Row(Dictionary`2<string, int> nameMap, Object[] values);
    public object get_Item(int index);
    public string GetString(string name);
    public object get_Item(string name);
    private object GetValue(int index);
    private object GetValue(string name);
}
public class MySqlX.XDevAPI.Relational.RowResult : InternalRowResult {
    internal RowResult(InternalSession session);
}
public class MySqlX.XDevAPI.Relational.SqlResult : InternalRowResult {
    public bool HasData { get; }
    internal SqlResult(InternalSession session);
    public bool get_HasData();
    public bool NextResult();
}
public class MySqlX.XDevAPI.Relational.SqlStatement : BaseStatement`2<SqlResult, string> {
    [CompilerGeneratedAttribute]
private string <SQL>k__BackingField;
    protected internal List`1<object> parameters;
    public string SQL { get; private set; }
    public SqlStatement(Session session, string sql);
    [CompilerGeneratedAttribute]
public string get_SQL();
    [CompilerGeneratedAttribute]
private void set_SQL(string value);
    public virtual SqlResult Execute();
    private SqlResult GetSQLResult(SqlStatement statement);
    public SqlStatement Bind(Object[] values);
}
public class MySqlX.XDevAPI.Relational.Table : DatabaseObject {
    private Nullable`1<bool> isView;
    public bool IsView { get; internal set; }
    internal Table(Schema schema, string name, bool isView);
    internal Table(Schema schema, string name);
    public bool get_IsView();
    internal void set_IsView(bool value);
    private bool CheckIsView();
    public TableSelectStatement Select(String[] columns);
    public TableInsertStatement Insert(String[] fields);
    public TableUpdateStatement Update();
    public TableDeleteStatement Delete();
    public long Count();
    public virtual bool ExistsInDatabase();
}
public class MySqlX.XDevAPI.Relational.TableDeleteStatement : FilterableStatement`4<TableDeleteStatement, Table, Result, string> {
    internal TableDeleteStatement(Table table, string condition);
    public TableDeleteStatement OrderBy(String[] order);
    public virtual Result Execute();
}
public class MySqlX.XDevAPI.Relational.TableInsertStatement : TargetedBaseStatement`3<Table, Result, string> {
    internal String[] fields;
    internal List`1<Object[]> values;
    internal Object[] parameters;
    internal TableInsertStatement(Table table, String[] fields);
    public virtual Result Execute();
    public TableInsertStatement Values(Object[] values);
}
public class MySqlX.XDevAPI.Relational.TableSelectStatement : FilterableStatement`4<TableSelectStatement, Table, RowResult, string> {
    internal FindParams findParams;
    internal TableSelectStatement(Table t, String[] projection);
    public virtual RowResult Execute();
    public TableSelectStatement LockShared(LockContention lockOption);
    public TableSelectStatement LockExclusive(LockContention lockOption);
    public TableSelectStatement GroupBy(String[] groupBy);
    public TableSelectStatement Having(string having);
    public TableSelectStatement OrderBy(String[] order);
}
public class MySqlX.XDevAPI.Relational.TableUpdateStatement : FilterableStatement`4<TableUpdateStatement, Table, Result, string> {
    internal List`1<UpdateSpec> updates;
    internal TableUpdateStatement(Table table);
    public virtual Result Execute();
    public TableUpdateStatement Set(string tableField, object value);
    public TableUpdateStatement OrderBy(String[] order);
}
public class MySqlX.XDevAPI.Schema : DatabaseObject {
    [CompilerGeneratedAttribute]
private BaseSession <Session>k__BackingField;
    public BaseSession Session { get; private set; }
    internal Schema(BaseSession session, string name);
    [CompilerGeneratedAttribute]
public BaseSession get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(BaseSession value);
    public List`1<Collection> GetCollections();
    public List`1<Table> GetTables();
    public Collection GetCollection(string name, bool ValidateExistence);
    public Collection`1<T> GetCollection(string name, bool ValidateExistence);
    public Table GetCollectionAsTable(string name);
    public Table GetTable(string name);
    public Collection CreateCollection(string collectionName, bool ReuseExisting);
    public Collection CreateCollection(string collectionName, CreateCollectionOptions options);
    public Collection ModifyCollection(string collectionName, Nullable`1<ModifyCollectionOptions> options);
    public void DropCollection(string name);
    public virtual bool ExistsInDatabase();
}
public class MySqlX.XDevAPI.Session : BaseSession {
    internal Session(string connectionString, Client client);
    internal Session(object connectionData, Client client);
    internal Session(InternalSession internalSession, Client client);
    public SqlStatement SQL(string sql);
    public void SetCurrentSchema(string schema);
    public Schema GetCurrentSchema();
    internal static void ThrowSessionClosedByServerException(MySqlException ex, BaseSession session);
}
public enum MySqlX.XDevAPI.SessionState : Enum {
    public int value__;
    public static SessionState Closed;
    public static SessionState Open;
    public static SessionState Connecting;
    public static SessionState Executing;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
