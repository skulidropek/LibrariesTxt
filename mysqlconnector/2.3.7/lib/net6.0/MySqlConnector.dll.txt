[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MySqlConnector.Authentication.AuthenticationPlugins : object {
    private static object s_lock;
    private static Dictionary`2<string, IAuthenticationPlugin> s_plugins;
    private static AuthenticationPlugins();
    public static void Register(IAuthenticationPlugin plugin);
    internal static bool TryGetPlugin(string name, IAuthenticationPlugin& plugin);
}
[NullableContextAttribute("1")]
public interface MySqlConnector.Authentication.IAuthenticationPlugin {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Byte[] CreateResponse(string password, ReadOnlySpan`1<byte> authenticationData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryBooleanColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryBooleanColumnReader <Instance>k__BackingField;
    public static BinaryBooleanColumnReader Instance { get; }
    private static BinaryBooleanColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryBooleanColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static bool DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryDateTimeColumnReader : ColumnReader {
    private bool m_allowZeroDateTime;
    private bool m_convertZeroDateTime;
    private DateTimeKind m_dateTimeKind;
    public BinaryDateTimeColumnReader(MySqlConnection connection);
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryDoubleColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryDoubleColumnReader <Instance>k__BackingField;
    public static BinaryDoubleColumnReader Instance { get; }
    private static BinaryDoubleColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryDoubleColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryFloatColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryFloatColumnReader <Instance>k__BackingField;
    public static BinaryFloatColumnReader Instance { get; }
    private static BinaryFloatColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryFloatColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinarySignedInt16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinarySignedInt16ColumnReader <Instance>k__BackingField;
    public static BinarySignedInt16ColumnReader Instance { get; }
    private static BinarySignedInt16ColumnReader();
    [CompilerGeneratedAttribute]
public static BinarySignedInt16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static short DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinarySignedInt32ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinarySignedInt32ColumnReader <Instance>k__BackingField;
    public static BinarySignedInt32ColumnReader Instance { get; }
    private static BinarySignedInt32ColumnReader();
    [CompilerGeneratedAttribute]
public static BinarySignedInt32ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static int DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinarySignedInt64ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinarySignedInt64ColumnReader <Instance>k__BackingField;
    public static BinarySignedInt64ColumnReader Instance { get; }
    private static BinarySignedInt64ColumnReader();
    [CompilerGeneratedAttribute]
public static BinarySignedInt64ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static long DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinarySignedInt8ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinarySignedInt8ColumnReader <Instance>k__BackingField;
    public static BinarySignedInt8ColumnReader Instance { get; }
    private static BinarySignedInt8ColumnReader();
    [CompilerGeneratedAttribute]
public static BinarySignedInt8ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static sbyte DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryTimeColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryTimeColumnReader <Instance>k__BackingField;
    public static BinaryTimeColumnReader Instance { get; }
    private static BinaryTimeColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryTimeColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryUnsignedInt16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryUnsignedInt16ColumnReader <Instance>k__BackingField;
    public static BinaryUnsignedInt16ColumnReader Instance { get; }
    private static BinaryUnsignedInt16ColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryUnsignedInt16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static ushort DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryUnsignedInt32ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryUnsignedInt32ColumnReader <Instance>k__BackingField;
    public static BinaryUnsignedInt32ColumnReader Instance { get; }
    private static BinaryUnsignedInt32ColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryUnsignedInt32ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static UInt32 DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryUnsignedInt64ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryUnsignedInt64ColumnReader <Instance>k__BackingField;
    public static BinaryUnsignedInt64ColumnReader Instance { get; }
    private static BinaryUnsignedInt64ColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryUnsignedInt64ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static ulong DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryUnsignedInt8ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryUnsignedInt8ColumnReader <Instance>k__BackingField;
    public static BinaryUnsignedInt8ColumnReader Instance { get; }
    private static BinaryUnsignedInt8ColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryUnsignedInt8ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static byte DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BinaryYearColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BinaryYearColumnReader <Instance>k__BackingField;
    public static BinaryYearColumnReader Instance { get; }
    private static BinaryYearColumnReader();
    [CompilerGeneratedAttribute]
public static BinaryYearColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static int DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BitColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BitColumnReader <Instance>k__BackingField;
    public static BitColumnReader Instance { get; }
    private static BitColumnReader();
    [CompilerGeneratedAttribute]
public static BitColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static ulong DoReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.BytesColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static BytesColumnReader <Instance>k__BackingField;
    public static BytesColumnReader Instance { get; }
    private static BytesColumnReader();
    [CompilerGeneratedAttribute]
public static BytesColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
internal abstract class MySqlConnector.ColumnReaders.ColumnReader : object {
    [NullableContextAttribute("1")]
public static ColumnReader Create(bool isBinary, ColumnDefinitionPayload columnDefinition, MySqlConnection connection);
    [NullableContextAttribute("1")]
public abstract virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.DecimalColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static DecimalColumnReader <Instance>k__BackingField;
    public static DecimalColumnReader Instance { get; }
    private static DecimalColumnReader();
    [CompilerGeneratedAttribute]
public static DecimalColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static decimal DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.GuidBinary16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static GuidBinary16ColumnReader <Instance>k__BackingField;
    public static GuidBinary16ColumnReader Instance { get; }
    private static GuidBinary16ColumnReader();
    [CompilerGeneratedAttribute]
public static GuidBinary16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
[SkipLocalsInitAttribute]
public static Guid ReadGuid(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.GuidChar32ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static GuidChar32ColumnReader <Instance>k__BackingField;
    public static GuidChar32ColumnReader Instance { get; }
    private static GuidChar32ColumnReader();
    [CompilerGeneratedAttribute]
public static GuidChar32ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.GuidChar36ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static GuidChar36ColumnReader <Instance>k__BackingField;
    public static GuidChar36ColumnReader Instance { get; }
    private static GuidChar36ColumnReader();
    [CompilerGeneratedAttribute]
public static GuidChar36ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.GuidLittleEndianBinary16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static GuidLittleEndianBinary16ColumnReader <Instance>k__BackingField;
    public static GuidLittleEndianBinary16ColumnReader Instance { get; }
    private static GuidLittleEndianBinary16ColumnReader();
    [CompilerGeneratedAttribute]
public static GuidLittleEndianBinary16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public static Guid ReadGuid(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.GuidTimeSwapBinary16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static GuidTimeSwapBinary16ColumnReader <Instance>k__BackingField;
    public static GuidTimeSwapBinary16ColumnReader Instance { get; }
    private static GuidTimeSwapBinary16ColumnReader();
    [CompilerGeneratedAttribute]
public static GuidTimeSwapBinary16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
[SkipLocalsInitAttribute]
public static Guid ReadGuid(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.NullColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static NullColumnReader <Instance>k__BackingField;
    public static NullColumnReader Instance { get; }
    private static NullColumnReader();
    [CompilerGeneratedAttribute]
public static NullColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.StringColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static StringColumnReader <Instance>k__BackingField;
    public static StringColumnReader Instance { get; }
    private static StringColumnReader();
    [CompilerGeneratedAttribute]
public static StringColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextBooleanColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextBooleanColumnReader <Instance>k__BackingField;
    public static TextBooleanColumnReader Instance { get; }
    private static TextBooleanColumnReader();
    [CompilerGeneratedAttribute]
public static TextBooleanColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static bool DoReadValue(ReadOnlySpan`1<byte> data);
}
internal class MySqlConnector.ColumnReaders.TextDateTimeColumnReader : ColumnReader {
    private bool m_allowZeroDateTime;
    private bool m_convertZeroDateTime;
    private DateTimeKind m_dateTimeKind;
    [NullableContextAttribute("1")]
public TextDateTimeColumnReader(MySqlConnection connection);
    [NullableContextAttribute("1")]
public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    public static object ParseDateTime(ReadOnlySpan`1<byte> data, bool convertZeroDateTime, bool allowZeroDateTime, DateTimeKind dateTimeKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextDoubleColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextDoubleColumnReader <Instance>k__BackingField;
    public static TextDoubleColumnReader Instance { get; }
    private static TextDoubleColumnReader();
    [CompilerGeneratedAttribute]
public static TextDoubleColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextFloatColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextFloatColumnReader <Instance>k__BackingField;
    public static TextFloatColumnReader Instance { get; }
    private static TextFloatColumnReader();
    [CompilerGeneratedAttribute]
public static TextFloatColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextSignedInt16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextSignedInt16ColumnReader <Instance>k__BackingField;
    public static TextSignedInt16ColumnReader Instance { get; }
    private static TextSignedInt16ColumnReader();
    [CompilerGeneratedAttribute]
public static TextSignedInt16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static short DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextSignedInt32ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextSignedInt32ColumnReader <Instance>k__BackingField;
    public static TextSignedInt32ColumnReader Instance { get; }
    private static TextSignedInt32ColumnReader();
    [CompilerGeneratedAttribute]
public static TextSignedInt32ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static int DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextSignedInt64ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextSignedInt64ColumnReader <Instance>k__BackingField;
    public static TextSignedInt64ColumnReader Instance { get; }
    private static TextSignedInt64ColumnReader();
    [CompilerGeneratedAttribute]
public static TextSignedInt64ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static long DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextSignedInt8ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextSignedInt8ColumnReader <Instance>k__BackingField;
    public static TextSignedInt8ColumnReader Instance { get; }
    private static TextSignedInt8ColumnReader();
    [CompilerGeneratedAttribute]
public static TextSignedInt8ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static sbyte DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextTimeColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextTimeColumnReader <Instance>k__BackingField;
    public static TextTimeColumnReader Instance { get; }
    private static TextTimeColumnReader();
    [CompilerGeneratedAttribute]
public static TextTimeColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextUnsignedInt16ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextUnsignedInt16ColumnReader <Instance>k__BackingField;
    public static TextUnsignedInt16ColumnReader Instance { get; }
    private static TextUnsignedInt16ColumnReader();
    [CompilerGeneratedAttribute]
public static TextUnsignedInt16ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static ushort DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextUnsignedInt32ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextUnsignedInt32ColumnReader <Instance>k__BackingField;
    public static TextUnsignedInt32ColumnReader Instance { get; }
    private static TextUnsignedInt32ColumnReader();
    [CompilerGeneratedAttribute]
public static TextUnsignedInt32ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static UInt32 DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextUnsignedInt64ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextUnsignedInt64ColumnReader <Instance>k__BackingField;
    public static TextUnsignedInt64ColumnReader Instance { get; }
    private static TextUnsignedInt64ColumnReader();
    [CompilerGeneratedAttribute]
public static TextUnsignedInt64ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static ulong DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.ColumnReaders.TextUnsignedInt8ColumnReader : ColumnReader {
    [CompilerGeneratedAttribute]
private static TextUnsignedInt8ColumnReader <Instance>k__BackingField;
    public static TextUnsignedInt8ColumnReader Instance { get; }
    private static TextUnsignedInt8ColumnReader();
    [CompilerGeneratedAttribute]
public static TextUnsignedInt8ColumnReader get_Instance();
    public virtual object ReadValue(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
public virtual Nullable`1<int> TryReadInt32(ReadOnlySpan`1<byte> data, ColumnDefinitionPayload columnDefinition);
    [NullableContextAttribute("0")]
private static byte DoReadValue(ReadOnlySpan`1<byte> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.CachedParameter : object {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDbType <MySqlDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Position { get; }
    public ParameterDirection Direction { get; }
    public string Name { get; }
    public MySqlDbType MySqlDbType { get; }
    public int Length { get; }
    public CachedParameter(int ordinalPosition, string mode, string name, string dataType, bool unsigned, int length);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public ParameterDirection get_Direction();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public MySqlDbType get_MySqlDbType();
    [CompilerGeneratedAttribute]
public int get_Length();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.CachedProcedure : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CachedParameter> <Parameters>k__BackingField;
    private static IReadOnlyDictionary`2<string, string> s_typeMapping;
    private static Regex s_cStyleComments;
    private static Regex s_singleLineComments;
    private static Regex s_multipleSpaces;
    private static Regex s_numericTypes;
    private static Regex s_enum;
    private static Regex s_parameterName;
    private static Regex s_characterSet;
    private static Regex s_collate;
    private static Regex s_length;
    private string m_schema;
    private string m_component;
    public IReadOnlyList`1<CachedParameter> Parameters { get; }
    private string FullyQualified { get; }
    private CachedProcedure(string schema, string component, IReadOnlyList`1<CachedParameter> parameters);
    private static CachedProcedure();
    [AsyncStateMachineAttribute("MySqlConnector.Core.CachedProcedure/<FillAsync>d__0")]
public static Task`1<CachedProcedure> FillAsync(IOBehavior ioBehavior, MySqlConnection connection, string schema, string component, ILogger logger, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CachedParameter> get_Parameters();
    internal MySqlParameterCollection AlignParamsWithDb(MySqlParameterCollection parameterCollection);
    internal static List`1<CachedParameter> ParseParameters(string parametersSql);
    internal static string ParseDataType(string sql, Boolean& unsigned, Int32& length);
    private static CachedParameter CreateCachedParameter(int ordinal, string direction, string name, string dataType, bool unsigned, int length, string originalSql);
    private string get_FullyQualified();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ColumnTypeMetadata : object {
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SimpleDataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private DbTypeMapping <DbTypeMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDbType <MySqlDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ColumnSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnsigned>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public string DataTypeName { get; }
    public string SimpleDataTypeName { get; }
    public string CreateFormat { get; }
    public DbTypeMapping DbTypeMapping { get; }
    public MySqlDbType MySqlDbType { get; }
    public bool Binary { get; }
    public long ColumnSize { get; }
    public bool IsUnsigned { get; }
    public int Length { get; }
    public ColumnTypeMetadata(string dataTypeName, DbTypeMapping dbTypeMapping, MySqlDbType mySqlDbType, bool isUnsigned, bool binary, int length, string simpleDataTypeName, string createFormat, long columnSize);
    public static string CreateLookupKey(string columnTypeName, bool isUnsigned, int length);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public string get_SimpleDataTypeName();
    [CompilerGeneratedAttribute]
public string get_CreateFormat();
    [CompilerGeneratedAttribute]
public DbTypeMapping get_DbTypeMapping();
    [CompilerGeneratedAttribute]
public MySqlDbType get_MySqlDbType();
    [CompilerGeneratedAttribute]
public bool get_Binary();
    [CompilerGeneratedAttribute]
public long get_ColumnSize();
    [CompilerGeneratedAttribute]
public bool get_IsUnsigned();
    [CompilerGeneratedAttribute]
public int get_Length();
    public string CreateLookupKey();
}
internal static class MySqlConnector.Core.CommandExecutor : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MySqlConnector.Core.CommandExecutor/<ExecuteReaderAsync>d__0")]
public static ValueTask`1<MySqlDataReader> ExecuteReaderAsync(CommandListPosition commandListPosition, ICommandPayloadCreator payloadCreator, CommandBehavior behavior, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.CommandListPosition : ValueType {
    private object m_commands;
    public int CommandCount;
    [NullableAttribute("2")]
public PreparedStatements PreparedStatements;
    public int CommandIndex;
    public int PreparedStatementIndex;
    [NullableAttribute("2")]
public PreparedStatement LastUsedPreparedStatement;
    public CommandListPosition(object commands);
    [IsReadOnlyAttribute]
public IMySqlCommand CommandAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ConcatenatedCommandPayloadCreator : object {
    [CompilerGeneratedAttribute]
private static ICommandPayloadCreator <Instance>k__BackingField;
    public static ICommandPayloadCreator Instance { get; }
    private static ConcatenatedCommandPayloadCreator();
    [CompilerGeneratedAttribute]
public static ICommandPayloadCreator get_Instance();
    public sealed virtual bool WriteQueryCommand(CommandListPosition& commandListPosition, IDictionary`2<string, CachedProcedure> cachedProcedures, ByteBufferWriter writer, bool appendSemicolon);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ConnectionPool : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionSettings <ConnectionSettings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, ConnectionPool> s_pools;
    private static List`1<ConnectionPool> s_allPools;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, int, string, Exception> s_createdNewSession;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`4<ILogger, int, string, Exception> s_createdToReachMinimumPoolSize;
    private static int s_poolId;
    [NullableAttribute("2")]
private static ConnectionStringPool s_mruCache;
    private ILogger m_logger;
    private ILogger m_connectionLogger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private KeyValuePair`2[] m_stateTagList;
    private SemaphoreSlim m_cleanSemaphore;
    private SemaphoreSlim m_sessionSemaphore;
    private LinkedList`1<ServerSession> m_sessions;
    private Dictionary`2<string, ServerSession> m_leasedSessions;
    [NullableAttribute("2")]
private ILoadBalancer m_loadBalancer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, int> m_hostSessions;
    private int m_generation;
    private UInt32 m_lastRecoveryTime;
    private int m_lastSessionId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, CachedProcedure> m_procedureCache;
    [NullableAttribute("2")]
private PeriodicTimer m_dnsCheckTimer;
    [NullableAttribute("2")]
private PeriodicTimer m_reaperTimer;
    public int Id { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public ConnectionSettings ConnectionSettings { get; }
    internal bool IsEmpty { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<KeyValuePair`2<string, object>> IdleStateTagList { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<KeyValuePair`2<string, object>> UsedStateTagList { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<KeyValuePair`2<string, object>> PoolNameTagList { get; }
    private ConnectionPool(MySqlConnectorLoggingConfiguration loggingConfiguration, ConnectionSettings cs);
    private static ConnectionPool();
    [CompilerGeneratedAttribute]
public int get_Id();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public ConnectionSettings get_ConnectionSettings();
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<GetSessionAsync>d__9")]
public ValueTask`1<ServerSession> GetSessionAsync(MySqlConnection connection, long startingTimestamp, int timeoutMilliseconds, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    internal bool get_IsEmpty();
    private int GetSessionHealth(ServerSession session);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<ReturnAsync>d__13")]
public ValueTask ReturnAsync(IOBehavior ioBehavior, ServerSession session);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<ClearAsync>d__14")]
public Task ClearAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<ReapAsync>d__15")]
public Task ReapAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    public Dictionary`2<string, CachedProcedure> GetProcedureCache();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<RecoverLeakedSessionsAsync>d__18")]
private Task RecoverLeakedSessionsAsync(IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<CleanPoolAsync>d__19")]
private Task CleanPoolAsync(IOBehavior ioBehavior, Func`2<ServerSession, bool> shouldCleanFn, bool respectMinPoolSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<CreateMinimumPooledSessions>d__20")]
private Task CreateMinimumPooledSessions(MySqlConnection connection, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<ConnectSessionAsync>d__21")]
private ValueTask`1<ServerSession> ConnectSessionAsync(MySqlConnection connection, Action`4<ILogger, int, string, Exception> logMessage, long startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    public static ConnectionPool CreatePool(string connectionString, MySqlConnectorLoggingConfiguration loggingConfiguration, string name);
    [NullableContextAttribute("2")]
public static ConnectionPool GetPool(string connectionString, MySqlConnectorLoggingConfiguration loggingConfiguration, bool createIfNotFound);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ConnectionPool/<ClearPoolsAsync>d__24")]
public static Task ClearPoolsAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private void StartReaperTask();
    private void StartDnsCheckTimer();
    private void AdjustHostConnectionCount(ServerSession session, int delta);
    public ReadOnlySpan`1<KeyValuePair`2<string, object>> get_IdleStateTagList();
    public ReadOnlySpan`1<KeyValuePair`2<string, object>> get_UsedStateTagList();
    public ReadOnlySpan`1<KeyValuePair`2<string, object>> get_PoolNameTagList();
    public static List`1<ConnectionPool> GetAllPools();
    private static void OnAppDomainShutDown(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private bool <ClearAsync>b__14_0(ServerSession session);
    [CompilerGeneratedAttribute]
private bool <ReapAsync>b__15_0(ServerSession session);
    [CompilerGeneratedAttribute]
internal static List`1<ConnectionPool> <ClearPoolsAsync>g__GetCachedPools|24_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ConnectionSettings : object {
    [CompilerGeneratedAttribute]
private MySqlConnectionStringBuilder <ConnectionStringBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlConnectionProtocol <ConnectionProtocol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <HostNames>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlLoadBalance <LoadBalance>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UnixSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlSslMode <SslMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CACertificateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SslCertificateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SslKeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlCertificateStoreLocation <CertificateStoreLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private SslProtocols <TlsVersions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<TlsCipherSuite> <TlsCipherSuites>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Pooling>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ConnectionLifeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConnectionReset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionIdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumPoolSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DnsCheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowLoadLocalInfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPublicKeyRetrieval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUserVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowZeroDateTime>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoEnlist>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CancellationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertZeroDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeKind <DateTimeKind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DefaultCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceSynchronous>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlGuidFormat <GuidFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCommandTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnorePrepare>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InteractiveSession>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Keepalive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBackslashEscapes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistSecurityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Pipelining>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlServerRedirectionMode <ServerRedirectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerRsaPublicKeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerSPN>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatTinyAsBoolean>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAffectedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCompression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseXaTransactions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <ConnectionAttributes>k__BackingField;
    private Nullable`1<int> m_connectionTimeoutMilliseconds;
    private static String[] s_localhostPipeServer;
    public MySqlConnectionStringBuilder ConnectionStringBuilder { get; }
    public string ConnectionString { get; }
    public MySqlConnectionProtocol ConnectionProtocol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> HostNames { get; }
    public MySqlLoadBalance LoadBalance { get; }
    public int Port { get; }
    public string PipeName { get; }
    [NullableAttribute("2")]
public string UnixSocket { get; }
    public string UserID { get; }
    public string Password { get; }
    public string Database { get; }
    public MySqlSslMode SslMode { get; }
    public string CertificateFile { get; }
    public string CertificatePassword { get; }
    public string CACertificateFile { get; }
    public string SslCertificateFile { get; }
    public string SslKeyFile { get; }
    public MySqlCertificateStoreLocation CertificateStoreLocation { get; }
    public string CertificateThumbprint { get; }
    public SslProtocols TlsVersions { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<TlsCipherSuite> TlsCipherSuites { get; }
    public bool Pooling { get; }
    public UInt32 ConnectionLifeTime { get; }
    public bool ConnectionReset { get; }
    public int ConnectionIdleTimeout { get; }
    public int MinimumPoolSize { get; }
    public int MaximumPoolSize { get; }
    public int DnsCheckInterval { get; }
    public bool AllowLoadLocalInfile { get; }
    public bool AllowPublicKeyRetrieval { get; }
    public bool AllowUserVariables { get; }
    public bool AllowZeroDateTime { get; }
    [NullableAttribute("2")]
public string ApplicationName { get; }
    public bool AutoEnlist { get; }
    public int CancellationTimeout { get; }
    public int ConnectionTimeout { get; }
    public bool ConvertZeroDateTime { get; }
    public DateTimeKind DateTimeKind { get; }
    public int DefaultCommandTimeout { get; }
    public bool ForceSynchronous { get; }
    public MySqlGuidFormat GuidFormat { get; }
    public bool IgnoreCommandTransaction { get; }
    public bool IgnorePrepare { get; }
    public bool InteractiveSession { get; }
    public UInt32 Keepalive { get; }
    public bool NoBackslashEscapes { get; }
    public bool PersistSecurityInfo { get; }
    public Nullable`1<bool> Pipelining { get; }
    public MySqlServerRedirectionMode ServerRedirectionMode { get; }
    public string ServerRsaPublicKeyFile { get; }
    public string ServerSPN { get; }
    public bool TreatTinyAsBoolean { get; }
    public bool UseAffectedRows { get; }
    public bool UseCompression { get; }
    public bool UseXaTransactions { get; }
    [NullableAttribute("2")]
public Byte[] ConnectionAttributes { get; public set; }
    public int ConnectionTimeoutMilliseconds { get; }
    public ConnectionSettings(MySqlConnectionStringBuilder csb);
    private ConnectionSettings(ConnectionSettings other, string host, int port, string userId);
    private static ConnectionSettings();
    public ConnectionSettings CloneWith(string host, int port, string userId);
    private static MySqlGuidFormat GetEffectiveGuidFormat(MySqlGuidFormat guidFormat, bool oldGuids);
    [CompilerGeneratedAttribute]
public MySqlConnectionStringBuilder get_ConnectionStringBuilder();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public MySqlConnectionProtocol get_ConnectionProtocol();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_HostNames();
    [CompilerGeneratedAttribute]
public MySqlLoadBalance get_LoadBalance();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_PipeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UnixSocket();
    [CompilerGeneratedAttribute]
public string get_UserID();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public MySqlSslMode get_SslMode();
    [CompilerGeneratedAttribute]
public string get_CertificateFile();
    [CompilerGeneratedAttribute]
public string get_CertificatePassword();
    [CompilerGeneratedAttribute]
public string get_CACertificateFile();
    [CompilerGeneratedAttribute]
public string get_SslCertificateFile();
    [CompilerGeneratedAttribute]
public string get_SslKeyFile();
    [CompilerGeneratedAttribute]
public MySqlCertificateStoreLocation get_CertificateStoreLocation();
    [CompilerGeneratedAttribute]
public string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public SslProtocols get_TlsVersions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IReadOnlyList`1<TlsCipherSuite> get_TlsCipherSuites();
    [CompilerGeneratedAttribute]
public bool get_Pooling();
    [CompilerGeneratedAttribute]
public UInt32 get_ConnectionLifeTime();
    [CompilerGeneratedAttribute]
public bool get_ConnectionReset();
    [CompilerGeneratedAttribute]
public int get_ConnectionIdleTimeout();
    [CompilerGeneratedAttribute]
public int get_MinimumPoolSize();
    [CompilerGeneratedAttribute]
public int get_MaximumPoolSize();
    [CompilerGeneratedAttribute]
public int get_DnsCheckInterval();
    [CompilerGeneratedAttribute]
public bool get_AllowLoadLocalInfile();
    [CompilerGeneratedAttribute]
public bool get_AllowPublicKeyRetrieval();
    [CompilerGeneratedAttribute]
public bool get_AllowUserVariables();
    [CompilerGeneratedAttribute]
public bool get_AllowZeroDateTime();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public bool get_AutoEnlist();
    [CompilerGeneratedAttribute]
public int get_CancellationTimeout();
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public bool get_ConvertZeroDateTime();
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKind();
    [CompilerGeneratedAttribute]
public int get_DefaultCommandTimeout();
    [CompilerGeneratedAttribute]
public bool get_ForceSynchronous();
    [CompilerGeneratedAttribute]
public MySqlGuidFormat get_GuidFormat();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCommandTransaction();
    [CompilerGeneratedAttribute]
public bool get_IgnorePrepare();
    [CompilerGeneratedAttribute]
public bool get_InteractiveSession();
    [CompilerGeneratedAttribute]
public UInt32 get_Keepalive();
    [CompilerGeneratedAttribute]
public bool get_NoBackslashEscapes();
    [CompilerGeneratedAttribute]
public bool get_PersistSecurityInfo();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Pipelining();
    [CompilerGeneratedAttribute]
public MySqlServerRedirectionMode get_ServerRedirectionMode();
    [CompilerGeneratedAttribute]
public string get_ServerRsaPublicKeyFile();
    [CompilerGeneratedAttribute]
public string get_ServerSPN();
    [CompilerGeneratedAttribute]
public bool get_TreatTinyAsBoolean();
    [CompilerGeneratedAttribute]
public bool get_UseAffectedRows();
    [CompilerGeneratedAttribute]
public bool get_UseCompression();
    [CompilerGeneratedAttribute]
public bool get_UseXaTransactions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Byte[] get_ConnectionAttributes();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConnectionAttributes(Byte[] value);
    public int get_ConnectionTimeoutMilliseconds();
    [CompilerGeneratedAttribute]
internal static int <.ctor>g__ToSigned|0_0(UInt32 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.DataReaderValuesEnumerator : object {
    [CompilerGeneratedAttribute]
private IDataReader <dataReader>P;
    public int FieldCount { get; }
    public DataReaderValuesEnumerator(IDataReader dataReader);
    public static IValuesEnumerator Create(IDataReader dataReader);
    public sealed virtual int get_FieldCount();
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual bool MoveNext();
    public sealed virtual void GetValues(Object[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.DataRowsValuesEnumerator : object {
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    private IEnumerator`1<DataRow> m_dataRows;
    public int FieldCount { get; }
    public DataRowsValuesEnumerator(IEnumerable`1<DataRow> dataRows, int columnCount);
    public static IValuesEnumerator Create(DataTable dataTable);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FieldCount();
    [NullableContextAttribute("0")]
public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual bool MoveNext();
    public sealed virtual void GetValues(Object[] values);
}
internal class MySqlConnector.Core.DbDataReaderValuesEnumerator : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DbDataReader <dataReader>P;
    public int FieldCount { get; }
    [NullableContextAttribute("1")]
public DbDataReaderValuesEnumerator(DbDataReader dataReader);
    public sealed virtual int get_FieldCount();
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public sealed virtual bool MoveNext();
    [NullableContextAttribute("1")]
public sealed virtual void GetValues(Object[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.DbTypeMapping : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, object> <convert>P;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType[] <DbTypes>k__BackingField;
    public Type ClrType { get; }
    public DbType[] DbTypes { get; }
    public DbTypeMapping(Type clrType, DbType[] dbTypes, Func`2<object, object> convert);
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    [CompilerGeneratedAttribute]
public DbType[] get_DbTypes();
    public object DoConversion(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class MySqlConnector.Core.EnlistedTransactionBase : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrepared>k__BackingField;
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    public MySqlConnection Connection { get; public set; }
    public bool IsIdle { get; public set; }
    public bool IsPrepared { get; private set; }
    public Transaction Transaction { get; private set; }
    protected EnlistedTransactionBase(Transaction transaction, MySqlConnection connection);
    [CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(MySqlConnection value);
    [CompilerGeneratedAttribute]
public bool get_IsIdle();
    [CompilerGeneratedAttribute]
public void set_IsIdle(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPrepared();
    [CompilerGeneratedAttribute]
private void set_IsPrepared(bool value);
    [CompilerGeneratedAttribute]
public Transaction get_Transaction();
    [CompilerGeneratedAttribute]
private void set_Transaction(Transaction value);
    public void Start();
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Commit(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    protected abstract virtual void OnStart();
    protected abstract virtual void OnPrepare(PreparingEnlistment enlistment);
    protected abstract virtual void OnCommit(Enlistment enlistment);
    protected abstract virtual void OnRollback(Enlistment enlistment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.FailOverLoadBalancer : object {
    [CompilerGeneratedAttribute]
private static ILoadBalancer <Instance>k__BackingField;
    public static ILoadBalancer Instance { get; }
    private static FailOverLoadBalancer();
    [CompilerGeneratedAttribute]
public static ILoadBalancer get_Instance();
    public sealed virtual IReadOnlyList`1<string> LoadBalance(IReadOnlyList`1<string> hosts);
}
[NullableContextAttribute("2")]
internal interface MySqlConnector.Core.ICancellableCommand {
    public int CommandId { get; }
    public int CommandTimeout { get; }
    public Nullable`1<int> EffectiveCommandTimeout { get; public set; }
    public int CancelAttemptCount { get; public set; }
    public MySqlConnection Connection { get; }
    public bool IsTimedOut { get; }
    public abstract virtual int get_CommandId();
    public abstract virtual int get_CommandTimeout();
    public abstract virtual Nullable`1<int> get_EffectiveCommandTimeout();
    public abstract virtual void set_EffectiveCommandTimeout(Nullable`1<int> value);
    public abstract virtual int get_CancelAttemptCount();
    public abstract virtual void set_CancelAttemptCount(int value);
    public abstract virtual MySqlConnection get_Connection();
    public abstract virtual CancellationTokenRegistration RegisterCancel(CancellationToken cancellationToken);
    public abstract virtual void SetTimeout(int milliseconds);
    public abstract virtual bool get_IsTimedOut();
}
[ExtensionAttribute]
internal static class MySqlConnector.Core.ICancellableCommandExtensions : object {
    private static int s_id;
    private static ICancellableCommandExtensions();
    public static int GetNextId();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ResetCommandTimeout(ICancellableCommand command);
}
[NullableContextAttribute("1")]
internal interface MySqlConnector.Core.ICommandPayloadCreator {
    public abstract virtual bool WriteQueryCommand(CommandListPosition& commandListPosition, IDictionary`2<string, CachedProcedure> cachedProcedures, ByteBufferWriter writer, bool appendSemicolon);
}
[NullableContextAttribute("1")]
internal interface MySqlConnector.Core.ILoadBalancer {
    public abstract virtual IReadOnlyList`1<string> LoadBalance(IReadOnlyList`1<string> hosts);
}
[NullableContextAttribute("2")]
internal interface MySqlConnector.Core.IMySqlCommand {
    public string CommandText { get; }
    public CommandType CommandType { get; }
    public bool AllowUserVariables { get; }
    public CommandBehavior CommandBehavior { get; }
    public MySqlParameterCollection RawParameters { get; }
    public MySqlAttributeCollection RawAttributes { get; }
    public MySqlConnection Connection { get; }
    public long LastInsertedId { get; }
    public MySqlParameterCollection OutParameters { get; public set; }
    public MySqlParameter ReturnParameter { get; public set; }
    [NullableAttribute("1")]
public ICancellableCommand CancellableCommand { get; }
    [NullableAttribute("1")]
public ILogger Logger { get; }
    public abstract virtual string get_CommandText();
    public abstract virtual CommandType get_CommandType();
    public abstract virtual bool get_AllowUserVariables();
    public abstract virtual CommandBehavior get_CommandBehavior();
    public abstract virtual MySqlParameterCollection get_RawParameters();
    public abstract virtual MySqlAttributeCollection get_RawAttributes();
    public abstract virtual PreparedStatements TryGetPreparedStatements();
    public abstract virtual MySqlConnection get_Connection();
    public abstract virtual long get_LastInsertedId();
    public abstract virtual void SetLastInsertedId(long lastInsertedId);
    public abstract virtual MySqlParameterCollection get_OutParameters();
    public abstract virtual void set_OutParameters(MySqlParameterCollection value);
    public abstract virtual MySqlParameter get_ReturnParameter();
    public abstract virtual void set_ReturnParameter(MySqlParameter value);
    [NullableContextAttribute("1")]
public abstract virtual ICancellableCommand get_CancellableCommand();
    [NullableContextAttribute("1")]
public abstract virtual ILogger get_Logger();
}
[ExtensionAttribute]
internal static class MySqlConnector.Core.IMySqlCommandExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StatementPreparerOptions CreateStatementPreparerOptions(IMySqlCommand command);
}
internal interface MySqlConnector.Core.IValuesEnumerator {
    public int FieldCount { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual ValueTask`1<bool> MoveNextAsync();
    public abstract virtual bool MoveNext();
    [NullableContextAttribute("1")]
public abstract virtual void GetValues(Object[] values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Core.MetricsReporter : object {
    private static UpDownCounter`1<int> s_connectionsUsageCounter;
    private static UpDownCounter`1<int> s_pendingRequestsCounter;
    private static Counter`1<int> s_connectionTimeouts;
    private static Histogram`1<double> s_createTimeHistory;
    private static Histogram`1<double> s_useTimeHistory;
    private static Histogram`1<double> s_waitTimeHistory;
    private static MetricsReporter();
    public static void AddIdle(ConnectionPool pool);
    public static void RemoveIdle(ConnectionPool pool);
    public static void AddUsed(ConnectionPool pool);
    public static void RemoveUsed(ConnectionPool pool);
    public static void AddTimeout(ConnectionPool pool, ConnectionSettings connectionSettings);
    public static void RecordCreateTime(ConnectionPool pool, double seconds);
    public static void RecordUseTime(ConnectionPool pool, double seconds);
    public static void RecordWaitTime(ConnectionPool pool, double seconds);
    [NullableContextAttribute("2")]
public static void AddPendingRequest(ConnectionPool pool);
    [NullableContextAttribute("2")]
public static void RemovePendingRequest(ConnectionPool pool);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Measurement`1<int>> <.cctor>g__GetMaximumConnections|10_0();
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<Measurement`1<int>> <.cctor>g__GetMinimumConnections|10_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.NormalizedSchema : object {
    private static string ReQuoted;
    private static string ReUnQuoted;
    private static string ReEither;
    private static string ReName;
    private static Regex s_nameRegex;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [NullableAttribute("2")]
public string Schema { get; }
    [NullableAttribute("2")]
public string Component { get; }
    public string FullyQualified { get; }
    public NormalizedSchema(string name, string defaultSchema);
    private static NormalizedSchema();
    private static Regex NameRegex();
    public static NormalizedSchema MustNormalize(string name, string defaultSchema);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Component();
    public string get_FullyQualified();
}
internal class MySqlConnector.Core.ParsedStatement : object {
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <StatementBytes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <ParameterNames>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <NormalizedParameterNames>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<int> <ParameterIndexes>k__BackingField;
    public ArraySegment`1<byte> StatementBytes { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> ParameterNames { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> NormalizedParameterNames { get; }
    [NullableAttribute("1")]
public List`1<int> ParameterIndexes { get; }
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_StatementBytes();
    [CompilerGeneratedAttribute]
public void set_StatementBytes(ArraySegment`1<byte> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ParameterNames();
    [CompilerGeneratedAttribute]
public List`1<string> get_NormalizedParameterNames();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<int> get_ParameterIndexes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ParsedStatements : object {
    [CompilerGeneratedAttribute]
private List`1<ParsedStatement> <statements>P;
    [CompilerGeneratedAttribute]
private PayloadData <payloadData>P;
    public IReadOnlyList`1<ParsedStatement> Statements { get; }
    public ParsedStatements(List`1<ParsedStatement> statements, PayloadData payloadData);
    public IReadOnlyList`1<ParsedStatement> get_Statements();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.PreparedStatement : object {
    [CompilerGeneratedAttribute]
private int <StatementId>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsedStatement <Statement>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ColumnDefinitionPayload[] <Columns>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ColumnDefinitionPayload[] <Parameters>k__BackingField;
    public int StatementId { get; }
    public ParsedStatement Statement { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ColumnDefinitionPayload[] Columns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ColumnDefinitionPayload[] Parameters { get; }
    public PreparedStatement(int statementId, ParsedStatement statement, ColumnDefinitionPayload[] columns, ColumnDefinitionPayload[] parameters);
    [CompilerGeneratedAttribute]
public int get_StatementId();
    [CompilerGeneratedAttribute]
public ParsedStatement get_Statement();
    [CompilerGeneratedAttribute]
public ColumnDefinitionPayload[] get_Columns();
    [CompilerGeneratedAttribute]
public void set_Columns(ColumnDefinitionPayload[] value);
    [CompilerGeneratedAttribute]
public ColumnDefinitionPayload[] get_Parameters();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.PreparedStatements : object {
    [CompilerGeneratedAttribute]
private ParsedStatements <parsedStatements>P;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PreparedStatement> <Statements>k__BackingField;
    public IReadOnlyList`1<PreparedStatement> Statements { get; }
    public PreparedStatements(IReadOnlyList`1<PreparedStatement> preparedStatements, ParsedStatements parsedStatements);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PreparedStatement> get_Statements();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.RandomLoadBalancer : object {
    [CompilerGeneratedAttribute]
private static ILoadBalancer <Instance>k__BackingField;
    private Random m_random;
    public static ILoadBalancer Instance { get; }
    private static RandomLoadBalancer();
    [CompilerGeneratedAttribute]
public static ILoadBalancer get_Instance();
    public sealed virtual IReadOnlyList`1<string> LoadBalance(IReadOnlyList`1<string> hosts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ResultSet : object {
    [CompilerGeneratedAttribute]
private MySqlDataReader <DataReader>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ExceptionDispatchInfo <ReadResultSetHeaderException>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultSetState <BufferState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultSetState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsCommandParameters>k__BackingField;
    [NullableAttribute("2")]
private ResizableArray`1<byte> m_columnDefinitionPayloadBytes;
    private int m_columnDefinitionPayloadUsedBytes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<Row> m_readBuffer;
    [NullableAttribute("2")]
private Row m_row;
    private bool m_hasRows;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ReadOnlyMemory`1<ColumnDefinitionPayload> m_columnDefinitions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ColumnDefinitionPayload[] m_columnDefinitionPayloadCache;
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public MySqlDataReader DataReader { get; }
    [NullableAttribute("2")]
public ExceptionDispatchInfo ReadResultSetHeaderException { get; private set; }
    public IMySqlCommand Command { get; }
    public MySqlConnection Connection { get; }
    public ServerSession Session { get; }
    public ResultSetState BufferState { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<ColumnDefinitionPayload> ColumnDefinitions { get; }
    public int WarningCount { get; private set; }
    public ResultSetState State { get; private set; }
    public bool HasResultSet { get; }
    public bool ContainsCommandParameters { get; private set; }
    public ResultSet(MySqlDataReader dataReader);
    public void Reset();
    [AsyncStateMachineAttribute("MySqlConnector.Core.ResultSet/<ReadResultSetHeaderAsync>d__2")]
public Task ReadResultSetHeaderAsync(IOBehavior ioBehavior);
    private static bool IsHostVerified(MySqlConnection connection);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ResultSet/<ReadEntireAsync>d__4")]
public Task ReadEntireAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    public bool Read();
    public Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ResultSet/<ReadAsync>d__7")]
public Task`1<bool> ReadAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ResultSet/<BufferReadAsync>d__8")]
public Task`1<Row> BufferReadAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MySqlConnector.Core.ResultSet/<ScanRowAsync>d__9")]
private ValueTask`1<Row> ScanRowAsync(IOBehavior ioBehavior, Row row, CancellationToken cancellationToken);
    public int get_Depth();
    public string GetName(int ordinal);
    public string GetDataTypeName(int ordinal);
    public Type GetFieldType(int ordinal);
    public MySqlDbType GetColumnType(int ordinal);
    public int get_FieldCount();
    public bool get_HasRows();
    public int GetOrdinal(string name);
    public Row GetCurrentRow();
    [CompilerGeneratedAttribute]
public MySqlDataReader get_DataReader();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ExceptionDispatchInfo get_ReadResultSetHeaderException();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ReadResultSetHeaderException(ExceptionDispatchInfo value);
    public IMySqlCommand get_Command();
    public MySqlConnection get_Connection();
    public ServerSession get_Session();
    [CompilerGeneratedAttribute]
public ResultSetState get_BufferState();
    [CompilerGeneratedAttribute]
private void set_BufferState(ResultSetState value);
    public ReadOnlySpan`1<ColumnDefinitionPayload> get_ColumnDefinitions();
    [CompilerGeneratedAttribute]
public int get_WarningCount();
    [CompilerGeneratedAttribute]
private void set_WarningCount(int value);
    [CompilerGeneratedAttribute]
public ResultSetState get_State();
    [CompilerGeneratedAttribute]
private void set_State(ResultSetState value);
    public bool get_HasResultSet();
    [CompilerGeneratedAttribute]
public bool get_ContainsCommandParameters();
    [CompilerGeneratedAttribute]
private void set_ContainsCommandParameters(bool value);
}
internal enum MySqlConnector.Core.ResultSetState : Enum {
    public int value__;
    public static ResultSetState None;
    public static ResultSetState ReadResultSetHeader;
    public static ResultSetState ReadingRows;
    public static ResultSetState HasMoreData;
    public static ResultSetState NoMoreData;
}
internal class MySqlConnector.Core.RoundRobinLoadBalancer : object {
    [NullableAttribute("1")]
private object m_lock;
    private UInt32 m_counter;
    [NullableContextAttribute("1")]
public sealed virtual IReadOnlyList`1<string> LoadBalance(IReadOnlyList`1<string> hosts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class MySqlConnector.Core.Row : object {
    [CompilerGeneratedAttribute]
private ResultSet <ResultSet>k__BackingField;
    private bool m_isBinary;
    private OffsetLength[] m_dataOffsetLengths;
    private ColumnReader[] m_columnReaders;
    [NullableAttribute("0")]
private ReadOnlyMemory`1<byte> m_data;
    public object Item { get; }
    public object Item { get; }
    private ResultSet ResultSet { get; }
    private MySqlConnection Connection { get; }
    public Row(bool isBinary, ResultSet resultSet);
    [NullableContextAttribute("0")]
public void SetData(ReadOnlyMemory`1<byte> data);
    public object GetValue(int ordinal);
    public bool GetBoolean(int ordinal);
    public sbyte GetSByte(int ordinal);
    public byte GetByte(int ordinal);
    [NullableContextAttribute("2")]
public long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public char GetChar(int ordinal);
    [NullableContextAttribute("2")]
public long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public Guid GetGuid(int ordinal);
    public short GetInt16(int ordinal);
    public int GetInt32(int ordinal);
    public long GetInt64(int ordinal);
    public ushort GetUInt16(int ordinal);
    public UInt32 GetUInt32(int ordinal);
    public ulong GetUInt64(int ordinal);
    public DateTime GetDateTime(int ordinal);
    public DateTimeOffset GetDateTimeOffset(int ordinal);
    public Stream GetStream(int ordinal);
    public string GetString(int ordinal);
    public decimal GetDecimal(int ordinal);
    public double GetDouble(int ordinal);
    public float GetFloat(int ordinal);
    public MySqlDateTime GetMySqlDateTime(int ordinal);
    public MySqlGeometry GetMySqlGeometry(int ordinal);
    public MySqlDecimal GetMySqlDecimal(int ordinal);
    public int GetValues(Object[] values);
    public bool IsDBNull(int ordinal);
    public object get_Item(int ordinal);
    public object get_Item(string name);
    [CompilerGeneratedAttribute]
private ResultSet get_ResultSet();
    private MySqlConnection get_Connection();
    private void CheckBinaryColumn(int ordinal);
    private static void CheckBufferArguments(long dataOffset, T[] buffer, int bufferOffset, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.SchemaProvider : object {
    [CompilerGeneratedAttribute]
private MySqlConnection <connection>P;
    public SchemaProvider(MySqlConnection connection);
    private void DoFillDataSourceInformation(DataTable dataTable);
    private static void DoFillDataTypes(DataTable dataTable);
    private static void DoFillReservedWords(DataTable dataTable);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillDataTableAsync>d__5")]
private Task FillDataTableAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, List`1<KeyValuePair`2<string, string>> columns, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillDataTableAsync>d__6")]
private Task FillDataTableAsync(IOBehavior ioBehavior, DataTable dataTable, Action`1<MySqlCommand> configureCommand, CancellationToken cancellationToken);
    private Task DoFillForeignKeysAsync(IOBehavior ioBehavior, DataTable dataTable, String[] restrictionValues, CancellationToken cancellationToken);
    private Task DoFillIndexesAsync(IOBehavior ioBehavior, DataTable dataTable, String[] restrictionValues, CancellationToken cancellationToken);
    private Task DoFillIndexColumnsAsync(IOBehavior ioBehavior, DataTable dataTable, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<GetSchemaAsync>d__10")]
public ValueTask`1<DataTable> GetSchemaAsync(IOBehavior ioBehavior, string collectionName, String[] restrictionValues, CancellationToken cancellationToken);
    private Task FillMetaDataCollectionsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillCharacterSetsAsync>d__12")]
private Task FillCharacterSetsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillCollationsAsync>d__13")]
private Task FillCollationsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillCollationCharacterSetApplicabilityAsync>d__14")]
private Task FillCollationCharacterSetApplicabilityAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillColumnsAsync>d__15")]
private Task FillColumnsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillDatabasesAsync>d__16")]
private Task FillDatabasesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    private Task FillDataSourceInformationAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    private Task FillDataTypesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillEnginesAsync>d__19")]
private Task FillEnginesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillKeyColumnUsageAsync>d__20")]
private Task FillKeyColumnUsageAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillKeyWordsAsync>d__21")]
private Task FillKeyWordsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillParametersAsync>d__22")]
private Task FillParametersAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillPartitionsAsync>d__23")]
private Task FillPartitionsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillPluginsAsync>d__24")]
private Task FillPluginsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillProceduresAsync>d__25")]
private Task FillProceduresAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillProcessListAsync>d__26")]
private Task FillProcessListAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillProfilingAsync>d__27")]
private Task FillProfilingAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillReferentialConstraintsAsync>d__28")]
private Task FillReferentialConstraintsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    private Task FillReservedWordsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillResourceGroupsAsync>d__30")]
private Task FillResourceGroupsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    private Task FillRestrictionsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillSchemaPrivilegesAsync>d__32")]
private Task FillSchemaPrivilegesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillTablesAsync>d__33")]
private Task FillTablesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillTableConstraintsAsync>d__34")]
private Task FillTableConstraintsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillTablePrivilegesAsync>d__35")]
private Task FillTablePrivilegesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillTableSpacesAsync>d__36")]
private Task FillTableSpacesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillTriggersAsync>d__37")]
private Task FillTriggersAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillUserPrivilegesAsync>d__38")]
private Task FillUserPrivilegesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillViewsAsync>d__39")]
private Task FillViewsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillForeignKeysAsync>d__40")]
private Task FillForeignKeysAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillIndexesAsync>d__41")]
private Task FillIndexesAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.SchemaProvider/<FillIndexColumnsAsync>d__42")]
private Task FillIndexColumnsAsync(IOBehavior ioBehavior, DataTable dataTable, string tableName, String[] restrictionValues, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <DoFillDataSourceInformation>g__GetVersion|2_0(Version v);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ServerSession : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerVersion <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveCommandId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CancellationTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Byte[] <AuthPluginData>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CreatedTimestamp>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ConnectionPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PoolGeneration>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastLeasedTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastReturnedTimestamp>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DatabaseOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UserID>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private WeakReference`1<MySqlConnection> <OwningConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDeprecateEof>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsCachedPreparedMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsQueryAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsSessionTrack>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcAccessDenied>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlDataReader <DataReader>k__BackingField;
    private static PayloadData s_setNamesUtf8NoAttributesPayload;
    private static PayloadData s_setNamesUtf8mb4NoAttributesPayload;
    private static PayloadData s_setNamesUtf8WithAttributesPayload;
    private static PayloadData s_setNamesUtf8mb4WithAttributesPayload;
    private static PayloadData s_sleepNoAttributesPayload;
    private static PayloadData s_sleepWithAttributesPayload;
    private static PayloadData s_selectConnectionIdVersionNoAttributesPayload;
    private static PayloadData s_selectConnectionIdVersionWithAttributesPayload;
    private static int s_lastId;
    private ILogger m_logger;
    private object m_lock;
    private ArraySegmentHolder`1<byte> m_payloadCache;
    private ActivityTagsCollection m_activityTags;
    private State m_state;
    [NullableAttribute("2")]
private TcpClient m_tcpClient;
    [NullableAttribute("2")]
private Socket m_socket;
    [NullableAttribute("2")]
private Stream m_stream;
    [NullableAttribute("2")]
private SslStream m_sslStream;
    [NullableAttribute("2")]
private X509Certificate2 m_clientCertificate;
    [NullableAttribute("2")]
private IPayloadHandler m_payloadHandler;
    private bool m_useCompression;
    private bool m_isSecureConnection;
    private bool m_supportsConnectionAttributes;
    private bool m_supportsPipelining;
    private CharacterSet m_characterSet;
    private PayloadData m_setNamesPayload;
    [NullableAttribute("2")]
private Byte[] m_pipelinedResetConnectionBytes;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, PreparedStatements> m_preparedStatements;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, State, Exception> __CannotExecuteNewCommandInStateCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, State, Exception> __EnteringFinishQueryingCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, State, State, Exception> __ExpectedSessionState1Callback;
    public string Id { get; }
    public ServerVersion ServerVersion { get; public set; }
    public bool SupportsPerQueryVariables { get; }
    public int ActiveCommandId { get; private set; }
    public int CancellationTimeout { get; private set; }
    public int ConnectionId { get; public set; }
    [NullableAttribute("2")]
public Byte[] AuthPluginData { get; public set; }
    public long CreatedTimestamp { get; }
    [NullableAttribute("2")]
public ConnectionPool Pool { get; }
    public int PoolGeneration { get; }
    public long LastLeasedTimestamp { get; public set; }
    public long LastReturnedTimestamp { get; private set; }
    [NullableAttribute("2")]
public string DatabaseOverride { get; public set; }
    public string HostName { get; private set; }
    [NullableAttribute("2")]
public IPEndPoint IPEndPoint { get; }
    [NullableAttribute("2")]
public string UserID { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public WeakReference`1<MySqlConnection> OwningConnection { get; public set; }
    public bool SupportsDeprecateEof { get; private set; }
    public bool SupportsCachedPreparedMetadata { get; private set; }
    public bool SupportsQueryAttributes { get; private set; }
    public bool SupportsSessionTrack { get; private set; }
    public bool ProcAccessDenied { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<KeyValuePair`2<string, object>> ActivityTags { get; }
    public MySqlDataReader DataReader { get; public set; }
    public bool IsConnected { get; }
    public bool IsCancelingQuery { get; }
    internal bool SslIsEncrypted { get; }
    internal bool SslIsSigned { get; }
    internal bool SslIsAuthenticated { get; }
    internal bool SslIsMutuallyAuthenticated { get; }
    internal SslProtocols SslProtocol { get; }
    public ServerSession(ILogger logger);
    public ServerSession(ILogger logger, ConnectionPool pool, int poolGeneration, int id);
    private static ServerSession();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ServerVersion get_ServerVersion();
    [CompilerGeneratedAttribute]
public void set_ServerVersion(ServerVersion value);
    public bool get_SupportsPerQueryVariables();
    [CompilerGeneratedAttribute]
public int get_ActiveCommandId();
    [CompilerGeneratedAttribute]
private void set_ActiveCommandId(int value);
    [CompilerGeneratedAttribute]
public int get_CancellationTimeout();
    [CompilerGeneratedAttribute]
private void set_CancellationTimeout(int value);
    [CompilerGeneratedAttribute]
public int get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Byte[] get_AuthPluginData();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AuthPluginData(Byte[] value);
    [CompilerGeneratedAttribute]
public long get_CreatedTimestamp();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ConnectionPool get_Pool();
    [CompilerGeneratedAttribute]
public int get_PoolGeneration();
    [CompilerGeneratedAttribute]
public long get_LastLeasedTimestamp();
    [CompilerGeneratedAttribute]
public void set_LastLeasedTimestamp(long value);
    [CompilerGeneratedAttribute]
public long get_LastReturnedTimestamp();
    [CompilerGeneratedAttribute]
private void set_LastReturnedTimestamp(long value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DatabaseOverride();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DatabaseOverride(string value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
private void set_HostName(string value);
    [NullableContextAttribute("2")]
public IPEndPoint get_IPEndPoint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UserID();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_UserID(string value);
    [CompilerGeneratedAttribute]
public WeakReference`1<MySqlConnection> get_OwningConnection();
    [CompilerGeneratedAttribute]
public void set_OwningConnection(WeakReference`1<MySqlConnection> value);
    [CompilerGeneratedAttribute]
public bool get_SupportsDeprecateEof();
    [CompilerGeneratedAttribute]
private void set_SupportsDeprecateEof(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsCachedPreparedMetadata();
    [CompilerGeneratedAttribute]
private void set_SupportsCachedPreparedMetadata(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsQueryAttributes();
    [CompilerGeneratedAttribute]
private void set_SupportsQueryAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsSessionTrack();
    [CompilerGeneratedAttribute]
private void set_SupportsSessionTrack(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcAccessDenied();
    [CompilerGeneratedAttribute]
public void set_ProcAccessDenied(bool value);
    public ICollection`1<KeyValuePair`2<string, object>> get_ActivityTags();
    [CompilerGeneratedAttribute]
public MySqlDataReader get_DataReader();
    [CompilerGeneratedAttribute]
public void set_DataReader(MySqlDataReader value);
    [NullableContextAttribute("2")]
public ValueTask ReturnToPoolAsync(IOBehavior ioBehavior, MySqlConnection owningConnection);
    public bool get_IsConnected();
    public bool TryStartCancel(ICancellableCommand command);
    public void DoCancel(ICancellableCommand commandToCancel, MySqlCommand killCommand);
    public void AbortCancel(ICancellableCommand command);
    public bool get_IsCancelingQuery();
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<PrepareAsync>d__96")]
public Task PrepareAsync(IMySqlCommand command, IOBehavior ioBehavior, CancellationToken cancellationToken);
    public PreparedStatements TryGetPreparedStatement(string commandText);
    public void StartQuerying(ICancellableCommand command);
    public void FinishQuerying();
    public void SetTimeout(int timeoutMilliseconds);
    [NullableContextAttribute("2")]
public Activity StartActivity(string name, string tagName1, object tagValue1);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<DisposeAsync>d__102")]
public Task DisposeAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<ConnectAsync>d__103")]
public Task`1<string> ConnectAsync(ConnectionSettings cs, MySqlConnection connection, long startingTimestamp, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<TryResetConnectionAsync>d__104")]
public Task`1<bool> TryResetConnectionAsync(ConnectionSettings cs, MySqlConnection connection, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<SwitchAuthenticationAsync>d__105")]
private Task`1<PayloadData> SwitchAuthenticationAsync(ConnectionSettings cs, string password, PayloadData payload, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<SendClearPasswordAsync>d__106")]
private Task`1<PayloadData> SendClearPasswordAsync(string password, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<SendEncryptedPasswordAsync>d__107")]
private Task`1<PayloadData> SendEncryptedPasswordAsync(Byte[] switchRequestData, string rsaPublicKey, string password, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<GetRsaPublicKeyAsync>d__108")]
private Task`1<string> GetRsaPublicKeyAsync(string switchRequestName, ConnectionSettings cs, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<TryPingAsync>d__109")]
public ValueTask`1<bool> TryPingAsync(bool logInfo, IOBehavior ioBehavior, CancellationToken cancellationToken);
    public ValueTask SendAsync(PayloadData payload, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<PayloadData> ReceiveAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<ReceiveReplyAsync>d__112")]
public ValueTask`1<PayloadData> ReceiveReplyAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<PayloadData> ReceiveReplyAsync(int expectedSequenceNumber, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<SendReplyAsync>d__114")]
public ValueTask SendReplyAsync(PayloadData payload, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<SendRawAsync>d__115")]
public ValueTask SendRawAsync(ReadOnlyMemory`1<byte> data, IOBehavior ioBehavior, CancellationToken cancellationToken);
    public static void ThrowIfStatementContainsDelimiter(MySqlException exception, IMySqlCommand command);
    [NullableContextAttribute("2")]
private InvalidOperationException CreateExceptionForInvalidState();
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<OpenTcpSocketAsync>d__118")]
private Task`1<bool> OpenTcpSocketAsync(ConnectionSettings cs, ILoadBalancer loadBalancer, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<OpenUnixSocketAsync>d__119")]
private Task`1<bool> OpenUnixSocketAsync(ConnectionSettings cs, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<OpenNamedPipeAsync>d__120")]
private Task`1<bool> OpenNamedPipeAsync(ConnectionSettings cs, long startingTimestamp, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<InitSslAsync>d__121")]
private Task InitSslAsync(ProtocolCapabilities serverCapabilities, ConnectionSettings cs, MySqlConnection connection, SslProtocols sslProtocols, IOBehavior ioBehavior, CancellationToken cancellationToken);
    private bool ShouldGetRealServerDetails(ConnectionSettings cs);
    [AsyncStateMachineAttribute("MySqlConnector.Core.ServerSession/<GetRealServerDetailsAsync>d__123")]
private Task GetRealServerDetailsAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private void ShutdownSocket();
    private static void SafeDispose(T& disposable);
    internal void SetFailed(Exception exception);
    private void VerifyState(State state);
    private void VerifyState(State state1, State state2, State state3, State state4, State state5, State state6);
    internal bool get_SslIsEncrypted();
    internal bool get_SslIsSigned();
    internal bool get_SslIsAuthenticated();
    internal bool get_SslIsMutuallyAuthenticated();
    internal SslProtocols get_SslProtocol();
    private Byte[] CreateConnectionAttributes(string programName);
    [NullableContextAttribute("0")]
private MySqlException CreateExceptionForErrorPayload(ReadOnlySpan`1<byte> span);
    private void ClearPreparedStatements();
    private string GetPassword(ConnectionSettings cs, MySqlConnection connection);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static void CannotExecuteNewCommandInState(ILogger logger, string sessionId, State sessionState);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static void EnteringFinishQuerying(ILogger logger, string sessionId, State sessionState);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static void ExpectedSessionState1(ILogger logger, string sessionId, State expectedState1, State sessionState);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static void ExpectedSessionState6(ILogger logger, string sessionId, State expectedState1, State expectedState2, State expectedState3, State expectedState4, State expectedState5, State expectedState6, State sessionState);
    [CompilerGeneratedAttribute]
internal static X509Certificate <InitSslAsync>g__ValidateLocalCertificate|121_0(object lcbSender, string lcbTargetHost, X509CertificateCollection lcbLocalCertificates, X509Certificate lcbRemoteCertificate, String[] lcbAcceptableIssuers);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <GetRealServerDetailsAsync>g__ReadRow|123_0(ReadOnlySpan`1<byte> span, Nullable`1& connectionId, ServerVersion& serverVersion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.ServerVersion : object {
    [CompilerGeneratedAttribute]
private string <OriginalString>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMariaDb>k__BackingField;
    [CompilerGeneratedAttribute]
private static ServerVersion <Empty>k__BackingField;
    public string OriginalString { get; }
    public Version Version { get; }
    public bool IsMariaDb { get; }
    public static ServerVersion Empty { get; }
    [NullableContextAttribute("0")]
public ServerVersion(ReadOnlySpan`1<byte> versionString);
    private static ServerVersion();
    [CompilerGeneratedAttribute]
public string get_OriginalString();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public bool get_IsMariaDb();
    [CompilerGeneratedAttribute]
public static ServerVersion get_Empty();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Core.ServerVersions : object {
    public static Version SupportsUtf8Mb4;
    public static Version SupportsResetConnection;
    public static Version MariaDbSupportsResetConnection;
    public static Version SupportsProcedureCache;
    public static Version RemovesMySqlProcTable;
    public static Version MariaDbSupportsPerQueryVariables;
    private static ServerVersions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.SingleCommandPayloadCreator : object {
    [CompilerGeneratedAttribute]
private static ICommandPayloadCreator <Instance>k__BackingField;
    public static ICommandPayloadCreator Instance { get; }
    public static string OutParameterSentinelColumnName { get; }
    private static SingleCommandPayloadCreator();
    [CompilerGeneratedAttribute]
public static ICommandPayloadCreator get_Instance();
    public static string get_OutParameterSentinelColumnName();
    public sealed virtual bool WriteQueryCommand(CommandListPosition& commandListPosition, IDictionary`2<string, CachedProcedure> cachedProcedures, ByteBufferWriter writer, bool appendSemicolon);
    public static bool WriteQueryPayload(IMySqlCommand command, IDictionary`2<string, CachedProcedure> cachedProcedures, ByteBufferWriter writer, bool appendSemicolon, bool isFirstCommand, bool isLastCommand);
    private static void WritePreparedStatement(IMySqlCommand command, PreparedStatement preparedStatement, ByteBufferWriter writer);
    private static void WriteBinaryParameters(ByteBufferWriter writer, MySqlParameter[] parameters, IMySqlCommand command, bool supportsQueryAttributes, int parameterCount);
    private static bool WriteStoredProcedure(IMySqlCommand command, IDictionary`2<string, CachedProcedure> cachedProcedures, ByteBufferWriter writer);
    private static bool WriteCommand(IMySqlCommand command, ByteBufferWriter writer, bool appendSemicolon, bool isFirstCommand, bool isLastCommand);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class MySqlConnector.Core.SqlParser : object {
    [CompilerGeneratedAttribute]
private StatementPreparer <Preparer>k__BackingField;
    protected StatementPreparer Preparer { get; }
    protected SqlParser(StatementPreparer preparer);
    [CompilerGeneratedAttribute]
protected StatementPreparer get_Preparer();
    public void Parse(string sql);
    protected virtual void OnBeforeParse(string sql);
    protected virtual void OnStatementBegin(int index);
    protected virtual void OnPositionalParameter(int index);
    protected virtual void OnNamedParameter(int index, int length);
    protected virtual void OnStatementEnd(int index);
    protected virtual void OnParsed(FinalParseStates states);
    private static bool IsWhitespace(char ch);
    private static bool IsVariableName(char ch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.StandardEnlistedTransaction : EnlistedTransactionBase {
    public StandardEnlistedTransaction(Transaction transaction, MySqlConnection connection);
    protected virtual void OnStart();
    protected virtual void OnPrepare(PreparingEnlistment enlistment);
    protected virtual void OnCommit(Enlistment enlistment);
    protected virtual void OnRollback(Enlistment enlistment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.StatementPreparer : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MySqlParameterCollection <parameters>P;
    [CompilerGeneratedAttribute]
private StatementPreparerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    public StatementPreparerOptions Options { get; }
    private string CommandText { get; }
    public StatementPreparer(string commandText, MySqlParameterCollection parameters, StatementPreparerOptions options);
    [CompilerGeneratedAttribute]
public StatementPreparerOptions get_Options();
    public ParsedStatements SplitStatements();
    public bool ParseAndBindParameters(ByteBufferWriter writer);
    private int GetParameterIndex(string name);
    private MySqlParameter GetInputParameter(int index);
    [CompilerGeneratedAttribute]
private string get_CommandText();
}
[FlagsAttribute]
internal enum MySqlConnector.Core.StatementPreparerOptions : Enum {
    public int value__;
    public static StatementPreparerOptions None;
    public static StatementPreparerOptions AllowUserVariables;
    public static StatementPreparerOptions AllowOutputParameters;
    public static StatementPreparerOptions DateTimeUtc;
    public static StatementPreparerOptions DateTimeLocal;
    public static StatementPreparerOptions GuidFormatChar36;
    public static StatementPreparerOptions GuidFormatChar32;
    public static StatementPreparerOptions GuidFormatBinary16;
    public static StatementPreparerOptions GuidFormatTimeSwapBinary16;
    public static StatementPreparerOptions GuidFormatLittleEndianBinary16;
    public static StatementPreparerOptions GuidFormatMask;
    public static StatementPreparerOptions NoBackslashEscapes;
    public static StatementPreparerOptions AppendSemicolon;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.TypeMapper : object {
    [CompilerGeneratedAttribute]
private static TypeMapper <Instance>k__BackingField;
    private List`1<ColumnTypeMetadata> m_columnTypeMetadata;
    private Dictionary`2<Type, DbTypeMapping> m_dbTypeMappingsByClrType;
    private Dictionary`2<DbType, DbTypeMapping> m_dbTypeMappingsByDbType;
    private Dictionary`2<string, ColumnTypeMetadata> m_columnTypeMetadataLookup;
    private Dictionary`2<MySqlDbType, ColumnTypeMetadata> m_mySqlDbTypeToColumnTypeMetadata;
    public static TypeMapper Instance { get; }
    private static TypeMapper();
    [CompilerGeneratedAttribute]
public static TypeMapper get_Instance();
    public IReadOnlyList`1<ColumnTypeMetadata> GetColumnTypeMetadata();
    public ColumnTypeMetadata GetColumnTypeMetadata(MySqlDbType mySqlDbType);
    public DbType GetDbTypeForMySqlDbType(MySqlDbType mySqlDbType);
    public MySqlDbType GetMySqlDbTypeForDbType(DbType dbType);
    private DbTypeMapping AddDbTypeMapping(DbTypeMapping dbTypeMapping);
    private void AddColumnTypeMetadata(ColumnTypeMetadata columnTypeMetadata);
    internal DbTypeMapping GetDbTypeMapping(Type clrType);
    [NullableContextAttribute("2")]
internal DbTypeMapping GetDbTypeMapping(DbType dbType);
    public DbTypeMapping GetDbTypeMapping(string columnTypeName, bool unsigned, int length);
    public MySqlDbType GetMySqlDbType(string typeName, bool unsigned, int length);
    private ColumnTypeMetadata GetColumnTypeMetadata(string columnTypeName, bool unsigned, int length);
    public static MySqlDbType ConvertToMySqlDbType(ColumnDefinitionPayload columnDefinition, bool treatTinyAsBoolean, MySqlGuidFormat guidFormat);
    public static ushort ConvertToColumnTypeAndFlags(MySqlDbType dbType, MySqlGuidFormat guidFormat);
    internal IEnumerable`1<ColumnTypeMetadata> GetColumnMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Core.XaEnlistedTransaction : EnlistedTransactionBase {
    private static int s_currentId;
    [NullableAttribute("2")]
private string m_xid;
    public XaEnlistedTransaction(Transaction transaction, MySqlConnection connection);
    protected virtual void OnStart();
    protected virtual void OnPrepare(PreparingEnlistment enlistment);
    protected virtual void OnCommit(Enlistment enlistment);
    protected virtual void OnRollback(Enlistment enlistment);
    private void ExecuteXaCommand(string statement);
}
public class MySqlConnector.Logging.ConsoleLoggerProvider : object {
    private MySqlConnectorLogLevel m_minimumLevel;
    private bool m_isColored;
    public ConsoleLoggerProvider(MySqlConnectorLogLevel minimumLevel, bool isColored);
    [NullableContextAttribute("1")]
public sealed virtual IMySqlConnectorLogger CreateLogger(string name);
}
internal static class MySqlConnector.Logging.EventIds : object {
    public static int DataSourceCreatedWithPoolWithName;
    public static int DataSourceCreatedWithoutPoolWithName;
    public static int DataSourceCreatedWithPoolWithoutName;
    public static int DataSourceCreatedWithoutPoolWithoutName;
    public static int PeriodicPasswordProviderFailed;
    public static int CreatedNewSession;
    public static int CreatedNonPooledSession;
    public static int ResettingConnection;
    public static int ReturningToPool;
    public static int SendingQuitCommand;
    public static int ClosingStreamSocket;
    public static int ErrorPayload;
    public static int FailedInSendReplyAsync;
    public static int FailedInReceiveReplyAsync;
    public static int SettingStateToFailed;
    public static int ExpectedToReadMoreBytes;
    public static int ExpectedSessionState1;
    public static int ExpectedSessionState6;
    public static int ConnectingFailed;
    public static int ServerSentAuthPluginName;
    public static int UnsupportedAuthenticationMethod;
    public static int AutoDetectedAurora57;
    public static int SessionMadeConnection;
    public static int ServerDoesNotSupportSsl;
    public static int CouldNotConnectToServer;
    public static int SendingPipelinedResetConnectionRequest;
    public static int SendingResetConnectionRequest;
    public static int SendingChangeUserRequest;
    public static int SendingChangeUserRequestDueToChangedDatabase;
    public static int OptimisticReauthenticationFailed;
    public static int IgnoringFailureInTryResetConnectionAsync;
    public static int SwitchingToAuthenticationMethod;
    public static int NeedsSecureConnection;
    public static int AuthenticationMethodNotSupported;
    public static int CouldNotLoadServerRsaPublicKey;
    public static int CouldNotLoadServerRsaPublicKeyFromFile;
    public static int CouldNotUseAuthenticationMethodForRsa;
    public static int FailedToResolveHostName;
    public static int ConnectingToIpAddress;
    public static int ConnectTimeoutExpired;
    public static int FailedToConnectToSingleIpAddress;
    public static int FailedToConnectToIpAddress;
    public static int ConnectedToIpAddress;
    public static int ConnectingToUnixSocket;
    public static int ConnectTimeoutExpiredForUnixSocket;
    public static int ConnectingToNamedPipe;
    public static int ConnectTimeoutExpiredForNamedPipe;
    public static int InitializingTlsConnection;
    public static int NoCertificatesFound;
    public static int CertificateNotFoundInStore;
    public static int CouldNotLoadCertificate;
    public static int NoPrivateKeyIncludedWithCertificateFile;
    public static int CouldNotLoadCertificateFromFile;
    public static int FailedToObtainClientCertificates;
    public static int LoadingCaCertificatesFromFile;
    public static int CouldNotLoadCaCertificateFromFile;
    public static int LoadingCaCertificate;
    public static int LoadedCaCertificatesFromFile;
    public static int NotUsingRemoteCertificateValidationCallbackDueToSslCa;
    public static int NotUsingRemoteCertificateValidationCallbackDueToSslMode;
    public static int UsingRemoteCertificateValidationCallback;
    public static int ConnectedTlsBasic;
    public static int ConnectedTlsDetailed;
    public static int CouldNotInitializeTlsConnection;
    public static int LoadingClientKeyFromKeyFile;
    public static int CouldNotLoadClientKeyFromKeyFile;
    public static int DetectedProxy;
    public static int ChangingConnectionId;
    public static int FailedToGetConnectionId;
    public static int CreatingConnectionAttributes;
    public static int ObtainingPasswordViaProvidePasswordCallback;
    public static int FailedToObtainPassword;
    public static int CannotExecuteNewCommandInState;
    public static int EnteringFinishQuerying;
    public static int CommandExecutorExecuteReader;
    public static int QueryWasInterrupted;
    public static int PreparingCommandPayload;
    public static int PreparingCommandPayloadWithId;
    public static int QueryAttributesNotSupported;
    public static int QueryAttributesNotSupportedWithId;
    public static int IgnoringExceptionInDisposeAsync;
    public static int IgnoringCancellationForCommand;
    public static int CommandHasBeenCanceled;
    public static int IgnoringCancellationForClosedConnection;
    public static int CancelingCommandFailed;
    public static int WillCancelCommand;
    public static int CancelingCommandFromSession;
    public static int IgnoringCancellationForInactiveCommand;
    public static int CancelingCommand;
    public static int SendingSleepToClearPendingCancellation;
    public static int GettingCachedProcedure;
    public static int PoolDoesNotHaveSharedProcedureCache;
    public static int CouldNotNormalizeDatabaseAndName;
    public static int FailedToCacheProcedure;
    public static int CachingProcedure;
    public static int ProcedureCacheCount;
    public static int DidNotFindCachedProcedure;
    public static int ReturningCachedProcedure;
    public static int FailedToRetrieveProcedureMetadata;
    public static int ServerDoesNotSupportCachedProcedures;
    public static int ProcedureHasRoutineCount;
    public static int PingingServer;
    public static int SuccessfullyPingedServer;
    public static int PingFailed;
    public static int StartingBulkCopy;
    public static int AddingDefaultColumnMapping;
    public static int IgnoringColumn;
    public static int FinishedBulkCopy;
    public static int BulkCopyFailed;
    public static int ColumnMappingAlreadyHasExpression;
    public static int SettingExpressionToMapColumn;
    public static int StartingTransaction;
    public static int StartedTransaction;
    public static int CommittingTransaction;
    public static int CommittedTransaction;
    public static int RollingBackTransaction;
    public static int RolledBackTransaction;
    public static int WaitingForAvailableSession;
    public static int CreatingNewConnectionPool;
    public static int ScanningForLeakedSessions;
    public static int FoundExistingSession;
    public static int DiscardingSessionDueToWrongGeneration;
    public static int SessionIsUnusable;
    public static int ReturningPooledSession;
    public static int ReturningNewSession;
    public static int DisposingCreatedSessionDueToException;
    public static int UnexpectedErrorInGetSessionAsync;
    public static int ReceivingSessionBack;
    public static int ReceivedInvalidSession;
    public static int ReceivedExpiredSession;
    public static int ClearingConnectionPool;
    public static int DisposingConnectionPool;
    public static int RecoveredNoSessions;
    public static int RecoveredSessionCount;
    public static int FoundSessionToCleanUp;
    public static int PoolCreatedNewSession;
    public static int CreatedSessionToReachMinimumPoolCount;
    public static int CreatedPoolWillNotBeUsed;
    public static int ReapingConnectionPool;
    public static int CheckingForDnsChanges;
    public static int DetectedDnsChange;
    public static int DnsCheckFailed;
    public static int ClearingPoolDueToDnsChanges;
    public static int HasServerRedirectionHeader;
    public static int ServerRedirectionIsDisabled;
    public static int OpeningNewConnection;
    public static int FailedToConnectRedirectedSession;
    public static int ClosingSessionToUseRedirectedSession;
    public static int SessionAlreadyConnectedToServer;
    public static int RequiresServerRedirection;
}
[NullableContextAttribute("2")]
public interface MySqlConnector.Logging.IMySqlConnectorLogger {
    public abstract virtual bool IsEnabled(MySqlConnectorLogLevel level);
    public abstract virtual void Log(MySqlConnectorLogLevel level, string message, Object[] args, Exception exception);
}
[NullableContextAttribute("1")]
public interface MySqlConnector.Logging.IMySqlConnectorLoggerProvider {
    public abstract virtual IMySqlConnectorLogger CreateLogger(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Logging.Log : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, int, string, Exception> __DataSourceCreatedWithPoolWithNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __DataSourceCreatedWithoutPoolWithNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, int, Exception> __DataSourceCreatedWithPoolWithoutNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __DataSourceCreatedWithoutPoolWithoutNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __PeriodicPasswordProviderFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CreatedNonPooledSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __ResettingConnectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, int, Exception> __ReturningToPoolCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __SendingQuitCommandCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __ConnectingFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __ServerSentAuthPluginNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __UnsupportedAuthenticationMethodCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __AutoDetectedAurora57Callback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __ServerDoesNotSupportSslCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CouldNotConnectToServerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __SendingPipelinedResetConnectionRequestCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __SendingResetConnectionRequestCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __SendingChangeUserRequestCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __SendingChangeUserRequestDueToChangedDatabaseCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __OptimisticReauthenticationFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __IgnoringFailureInTryResetConnectionAsyncCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __SwitchingToAuthenticationMethodCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __NeedsSecureConnectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __AuthenticationMethodNotSupportedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CouldNotLoadServerRsaPublicKeyCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __CouldNotLoadServerRsaPublicKeyFromFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __CouldNotUseAuthenticationMethodForRsaCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`7<ILogger, string, string, int, int, string, Exception> __FailedToResolveHostNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __ConnectTimeoutExpiredCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, string, string, string, Exception> __FailedToConnectToSingleIpAddressCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, string, string, Nullable`1<int>, Exception> __ConnectedToIpAddressCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __ConnectingToUnixSocketCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __ConnectTimeoutExpiredForUnixSocketCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __ConnectingToNamedPipeCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __ConnectTimeoutExpiredForNamedPipeCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __InitializingTlsConnectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __NoCertificatesFoundCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __CertificateNotFoundInStoreCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, MySqlCertificateStoreLocation, Exception> __CouldNotLoadCertificateCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __NoPrivateKeyIncludedWithCertificateFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __CouldNotLoadCertificateFromFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __FailedToObtainClientCertificatesCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __LoadingCaCertificatesFromFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, int, Exception> __LoadingCaCertificateCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, int, string, Exception> __LoadedCaCertificatesFromFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __NotUsingRemoteCertificateValidationCallbackDueToSslCaCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, MySqlSslMode, Exception> __NotUsingRemoteCertificateValidationCallbackDueToSslModeCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __UsingRemoteCertificateValidationCallbackCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, SslProtocols, TlsCipherSuite, Exception> __ConnectedTlsBasicCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`8<ILogger, string, SslProtocols, CipherAlgorithmType, HashAlgorithmType, ExchangeAlgorithmType, int, Exception> __ConnectedTlsDetailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CouldNotInitializeTlsConnectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __LoadingClientKeyFromKeyFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __CouldNotLoadClientKeyFromKeyFileCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __DetectedProxyCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`7<ILogger, string, int, int, string, string, Exception> __ChangingConnectionIdCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __FailedToGetConnectionIdCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __ClosingStreamSocketCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CreatingConnectionAttributesCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __ObtainingPasswordViaProvidePasswordCallbackCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __FailedToObtainPasswordCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __IgnoringCancellationForCommandCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, string, Exception> __CommandHasBeenCanceledCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __IgnoringCancellationForClosedConnectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, int, Exception> __CancelingCommandFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, int, int, string, Exception> __WillCancelCommandCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, int, string, string, Exception> __CancelingCommandFromSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, int, int, Exception> __IgnoringCancellationForInactiveCommandCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, int, string, Exception> __CancelingCommandCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __SendingSleepToClearPendingCancellationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __GettingCachedProcedureCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, Nullable`1<int>, Exception> __PoolDoesNotHaveSharedProcedureCacheCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __CouldNotNormalizeDatabaseAndNameCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __FailedToCacheProcedureCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __CachingProcedureCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, int, Exception> __ProcedureCacheCountCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __DidNotFindCachedProcedureCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __ReturningCachedProcedureCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, string, string, string, Exception> __FailedToRetrieveProcedureMetadataCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __ServerDoesNotSupportCachedProceduresCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, string, int, int, Exception> __ProcedureHasRoutineCountCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CreatedNewSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __PingingServerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __PingFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __SettingStateToFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, int, int, Exception> __ExpectedToReadMoreBytesCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, string, int, string, string, Exception> __ErrorPayloadCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, IOBehavior, int, Exception> __CommandExecutorExecuteReaderCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __QueryWasInterruptedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __PreparingCommandPayloadCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, int, string, Exception> __PreparingCommandPayloadWithIdCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __QueryAttributesNotSupportedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, int, Exception> __QueryAttributesNotSupportedWithIdCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, string, string, Exception> __IgnoringExceptionInDisposeAsyncCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __StartingBulkCopyCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __AddingDefaultColumnMappingCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __IgnoringColumnCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __FinishedBulkCopyCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, string, int, int, Exception> __BulkCopyFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, string, Exception> __ColumnMappingAlreadyHasExpressionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, string, Exception> __SettingExpressionToMapColumnCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __StartingTransactionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __StartedTransactionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CommittingTransactionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __CommittedTransactionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __RollingBackTransactionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __RolledBackTransactionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __WaitingForAvailableSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __FailedInReceiveReplyAsyncCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __FailedInSendReplyAsyncCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __CreatingNewConnectionPoolCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __ScanningForLeakedSessionsCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __FoundExistingSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __DiscardingSessionDueToWrongGenerationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __SessionIsUnusableCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, int, Exception> __ReturningPooledSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, int, Exception> __ReturningNewSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, string, Exception> __DisposingCreatedSessionDueToExceptionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __UnexpectedErrorInGetSessionAsyncCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __ReceivingSessionBackCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __ReceivedInvalidSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __ReceivedExpiredSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __ClearingConnectionPoolCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __DisposingConnectionPoolCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __RecoveredNoSessionsCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, int, Exception> __RecoveredSessionCountCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __FoundSessionToCleanUpCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, string, string, Exception> __HasServerRedirectionHeaderCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __ServerRedirectionIsDisabledCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, int, string, int, string, Exception> __OpeningNewConnectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`4<ILogger, int, string, Exception> __FailedToConnectRedirectedSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, string, Exception> __ClosingSessionToUseRedirectedSessionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, string, Exception> __SessionAlreadyConnectedToServerCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __RequiresServerRedirectionCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __CreatedPoolWillNotBeUsedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __ReapingConnectionPoolCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __CheckingForDnsChangesCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`6<ILogger, int, string, string, string, Exception> __DetectedDnsChangeCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`5<ILogger, int, string, string, Exception> __DnsCheckFailedCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
private static Action`3<ILogger, int, Exception> __ClearingPoolDueToDnsChangesCallback;
    private static Log();
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DataSourceCreatedWithPoolWithName(ILogger logger, int dataSourceId, int poolId, string dataSourceName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DataSourceCreatedWithoutPoolWithName(ILogger logger, int dataSourceId, string dataSourceName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DataSourceCreatedWithPoolWithoutName(ILogger logger, int dataSourceId, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DataSourceCreatedWithoutPoolWithoutName(ILogger logger, int dataSourceId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void PeriodicPasswordProviderFailed(ILogger logger, Exception exception, int dataSourceId, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CreatedNonPooledSession(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ResettingConnection(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReturningToPool(ILogger logger, string sessionId, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SendingQuitCommand(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectingFailed(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ServerSentAuthPluginName(ILogger logger, string sessionId, string authPluginName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void UnsupportedAuthenticationMethod(ILogger logger, string sessionId, string authPluginName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void AutoDetectedAurora57(ILogger logger, string sessionId, string hostName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SessionMadeConnection(ILogger logger, string sessionId, string serverVersion, int connectionId, bool supportsCompression, bool supportsAttributes, bool supportsDeprecateEof, bool supportsCachedMetadata, bool supportsSsl, bool supportsSessionTrack, bool supportsPipelining, bool supportsQueryAttributes);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ServerDoesNotSupportSsl(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotConnectToServer(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SendingPipelinedResetConnectionRequest(ILogger logger, string sessionId, string serverVersion);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SendingResetConnectionRequest(ILogger logger, string sessionId, string serverVersion);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SendingChangeUserRequest(ILogger logger, string sessionId, string serverVersion);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SendingChangeUserRequestDueToChangedDatabase(ILogger logger, string sessionId, string database);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void OptimisticReauthenticationFailed(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void IgnoringFailureInTryResetConnectionAsync(ILogger logger, Exception exception, string sessionId, string failure);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SwitchingToAuthenticationMethod(ILogger logger, string sessionId, string authenticationMethod);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void NeedsSecureConnection(ILogger logger, string sessionId, string authenticationMethod);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void AuthenticationMethodNotSupported(ILogger logger, string sessionId, string authenticationMethod);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotLoadServerRsaPublicKey(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotLoadServerRsaPublicKeyFromFile(ILogger logger, Exception exception, string sessionId, string publicKeyFilePath);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotUseAuthenticationMethodForRsa(ILogger logger, string sessionId, string authenticationMethod);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToResolveHostName(ILogger logger, Exception exception, string sessionId, string hostName, int hostNameIndex, int hostNameCount, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectingToIpAddress(ILogger logger, string sessionId, string ipAddress, int ipAddressIndex, int ipAddressCount, string hostName, int hostNameIndex, int hostNameCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectTimeoutExpired(ILogger logger, Exception exception, string sessionId, string ipAddress, string hostName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToConnectToSingleIpAddress(ILogger logger, Exception exception, string sessionId, string ipAddress, string hostName, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToConnectToIpAddress(ILogger logger, Exception exception, LogLevel logLevel, string sessionId, string ipAddress, int ipAddressIndex, int ipAddressCount, string hostName, int hostNameIndex, int hostNameCount, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectedToIpAddress(ILogger logger, string sessionId, string ipAddress, string hostName, Nullable`1<int> localPort);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectingToUnixSocket(ILogger logger, string sessionId, string socketPath);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectTimeoutExpiredForUnixSocket(ILogger logger, string sessionId, string socketPath);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectingToNamedPipe(ILogger logger, string sessionId, string pipeName, string hostName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectTimeoutExpiredForNamedPipe(ILogger logger, Exception exception, string sessionId, string pipeName, string hostName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void InitializingTlsConnection(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void NoCertificatesFound(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CertificateNotFoundInStore(ILogger logger, string sessionId, string thumbprint);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotLoadCertificate(ILogger logger, Exception exception, string sessionId, MySqlCertificateStoreLocation certificateStoreLocation);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void NoPrivateKeyIncludedWithCertificateFile(ILogger logger, string sessionId, string certificateFile);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotLoadCertificateFromFile(ILogger logger, Exception exception, string sessionId, string certificateFile);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToObtainClientCertificates(ILogger logger, Exception exception, string sessionId, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void LoadingCaCertificatesFromFile(ILogger logger, string sessionId, string caCertificateFile);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotLoadCaCertificateFromFile(ILogger logger, Exception exception, LogLevel logLevel, string sessionId, string caCertificateFile);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void LoadingCaCertificate(ILogger logger, string sessionId, int index);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void LoadedCaCertificatesFromFile(ILogger logger, string sessionId, int certificateCount, string caCertificateFile);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void NotUsingRemoteCertificateValidationCallbackDueToSslCa(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void NotUsingRemoteCertificateValidationCallbackDueToSslMode(ILogger logger, string sessionId, MySqlSslMode sslMode);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void UsingRemoteCertificateValidationCallback(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectedTlsBasic(ILogger logger, string sessionId, SslProtocols sslProtocol, TlsCipherSuite negotiatedCipherSuite);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ConnectedTlsDetailed(ILogger logger, string sessionId, SslProtocols sslProtocol, CipherAlgorithmType cipherAlgorithm, HashAlgorithmType hashAlgorithm, ExchangeAlgorithmType keyExchangeAlgorithm, int keyExchangeStrength);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotInitializeTlsConnection(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void LoadingClientKeyFromKeyFile(ILogger logger, string sessionId, string clientKeyFilePath);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotLoadClientKeyFromKeyFile(ILogger logger, Exception exception, string sessionId, string clientKeyFilePath);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DetectedProxy(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ChangingConnectionId(ILogger logger, string sessionId, int oldConnectionId, int connectionId, string oldServerVersion, string serverVersion);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToGetConnectionId(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ClosingStreamSocket(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CreatingConnectionAttributes(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ObtainingPasswordViaProvidePasswordCallback(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToObtainPassword(ILogger logger, Exception exception, string sessionId, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void IgnoringCancellationForCommand(ILogger logger, int commandId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CommandHasBeenCanceled(ILogger logger, int commandId, string sessionId, string cancellationSource);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void IgnoringCancellationForClosedConnection(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CancelingCommandFailed(ILogger logger, Exception exception, string sessionId, int commandId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void WillCancelCommand(ILogger logger, string sessionId, int commandId, int cancelAttemptCount, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CancelingCommandFromSession(ILogger logger, string sessionId, int commandId, string cancelingSessionId, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void IgnoringCancellationForInactiveCommand(ILogger logger, string sessionId, int activeCommandId, int commandId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CancelingCommand(ILogger logger, string sessionId, int commandId, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SendingSleepToClearPendingCancellation(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void GettingCachedProcedure(ILogger logger, string sessionId, string procedureName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void PoolDoesNotHaveSharedProcedureCache(ILogger logger, string sessionId, Nullable`1<int> poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CouldNotNormalizeDatabaseAndName(ILogger logger, string sessionId, string procedureName, string database);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToCacheProcedure(ILogger logger, string sessionId, string schema, string component);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CachingProcedure(ILogger logger, string sessionId, string schema, string component);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ProcedureCacheCount(ILogger logger, string sessionId, int procedureCacheCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DidNotFindCachedProcedure(ILogger logger, string sessionId, string schema, string component);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReturningCachedProcedure(ILogger logger, string sessionId, string schema, string component);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToRetrieveProcedureMetadata(ILogger logger, Exception exception, string sessionId, string schema, string component, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ServerDoesNotSupportCachedProcedures(ILogger logger, string sessionId, string serverVersion);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ProcedureHasRoutineCount(ILogger logger, string schema, string component, int routineCount, int parameterCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CreatedNewSession(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void PingingServer(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SuccessfullyPingedServer(ILogger logger, LogLevel logLevel, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void PingFailed(ILogger logger, Exception exception, string sessionId, string failure);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SettingStateToFailed(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ExpectedToReadMoreBytes(ILogger logger, string sessionId, int expectedByteCount, int readByteCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ErrorPayload(ILogger logger, string sessionId, int errorCode, string state, string message);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CommandExecutorExecuteReader(ILogger logger, string sessionId, IOBehavior ioBehavior, int commandCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void QueryWasInterrupted(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void PreparingCommandPayload(ILogger logger, string sessionId, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void PreparingCommandPayloadWithId(ILogger logger, string sessionId, int statementId, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void QueryAttributesNotSupported(ILogger logger, string sessionId, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void QueryAttributesNotSupportedWithId(ILogger logger, string sessionId, int statementId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void IgnoringExceptionInDisposeAsync(ILogger logger, Exception exception, string sessionId, string exceptionMessage, string commandText);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void StartingBulkCopy(ILogger logger, string tableName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void AddingDefaultColumnMapping(ILogger logger, int sourceOrdinal, string destinationColumn);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void IgnoringColumn(ILogger logger, int sourceOrdinal);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FinishedBulkCopy(ILogger logger, string tableName);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void BulkCopyFailed(ILogger logger, string tableName, int rowsCopied, int rowsInserted);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ColumnMappingAlreadyHasExpression(ILogger logger, int sourceOrdinal, string destinationColumn, string expression);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SettingExpressionToMapColumn(ILogger logger, int sourceOrdinal, string destinationColumn, string expression);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void StartingTransaction(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void StartedTransaction(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CommittingTransaction(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CommittedTransaction(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void RollingBackTransaction(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void RolledBackTransaction(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void WaitingForAvailableSession(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedInReceiveReplyAsync(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedInSendReplyAsync(ILogger logger, Exception exception, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CreatingNewConnectionPool(ILogger logger, int poolId, string connectionString);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ScanningForLeakedSessions(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FoundExistingSession(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DiscardingSessionDueToWrongGeneration(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SessionIsUnusable(ILogger logger, int poolId, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReturningPooledSession(ILogger logger, int poolId, string sessionId, int leasedSessionCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReturningNewSession(ILogger logger, int poolId, string sessionId, int leasedSessionCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DisposingCreatedSessionDueToException(ILogger logger, Exception exception, int poolId, string sessionId, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void UnexpectedErrorInGetSessionAsync(ILogger logger, Exception exception, int poolId, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReceivingSessionBack(ILogger logger, int poolId, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReceivedInvalidSession(ILogger logger, int poolId, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReceivedExpiredSession(ILogger logger, int poolId, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ClearingConnectionPool(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DisposingConnectionPool(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void RecoveredNoSessions(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void RecoveredSessionCount(ILogger logger, int poolId, int sessionCount);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FoundSessionToCleanUp(ILogger logger, int poolId, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void HasServerRedirectionHeader(ILogger logger, string sessionId, string header);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ServerRedirectionIsDisabled(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void OpeningNewConnection(ILogger logger, int poolId, string host, int port, string user);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void FailedToConnectRedirectedSession(ILogger logger, Exception ex, int poolId, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ClosingSessionToUseRedirectedSession(ILogger logger, int poolId, string sessionId, string redirectedSessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void SessionAlreadyConnectedToServer(ILogger logger, string sessionId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void RequiresServerRedirection(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CreatedPoolWillNotBeUsed(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ReapingConnectionPool(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void CheckingForDnsChanges(ILogger logger, int poolId);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DetectedDnsChange(ILogger logger, int poolId, string hostName, string oldAddresses, string newAddresses);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void DnsCheckFailed(ILogger logger, Exception exception, int poolId, string hostName, string exceptionMessage);
    [LoggerMessageAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Logging.Generators", "7.0.8.27404")]
public static void ClearingPoolDueToDnsChanges(ILogger logger, int poolId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Logging.MySqlConnectorLoggingConfiguration : object {
    [CompilerGeneratedAttribute]
private ILogger <DataSourceLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <ConnectionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <PoolLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <BulkCopyLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <TransactionLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private static MySqlConnectorLoggingConfiguration <NullConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private static MySqlConnectorLoggingConfiguration <GlobalConfiguration>k__BackingField;
    public ILogger DataSourceLogger { get; }
    public ILogger ConnectionLogger { get; }
    public ILogger CommandLogger { get; }
    public ILogger PoolLogger { get; }
    public ILogger BulkCopyLogger { get; }
    public ILogger TransactionLogger { get; }
    public static MySqlConnectorLoggingConfiguration NullConfiguration { get; }
    public static MySqlConnectorLoggingConfiguration GlobalConfiguration { get; public set; }
    public MySqlConnectorLoggingConfiguration(ILoggerFactory loggerFactory);
    private static MySqlConnectorLoggingConfiguration();
    [CompilerGeneratedAttribute]
public ILogger get_DataSourceLogger();
    [CompilerGeneratedAttribute]
public ILogger get_ConnectionLogger();
    [CompilerGeneratedAttribute]
public ILogger get_CommandLogger();
    [CompilerGeneratedAttribute]
public ILogger get_PoolLogger();
    [CompilerGeneratedAttribute]
public ILogger get_BulkCopyLogger();
    [CompilerGeneratedAttribute]
public ILogger get_TransactionLogger();
    [CompilerGeneratedAttribute]
public static MySqlConnectorLoggingConfiguration get_NullConfiguration();
    [CompilerGeneratedAttribute]
public static MySqlConnectorLoggingConfiguration get_GlobalConfiguration();
    [CompilerGeneratedAttribute]
public static void set_GlobalConfiguration(MySqlConnectorLoggingConfiguration value);
}
public enum MySqlConnector.Logging.MySqlConnectorLogLevel : Enum {
    public int value__;
    public static MySqlConnectorLogLevel Trace;
    public static MySqlConnectorLogLevel Debug;
    public static MySqlConnectorLogLevel Info;
    public static MySqlConnectorLogLevel Warn;
    public static MySqlConnectorLogLevel Error;
    public static MySqlConnectorLogLevel Fatal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class MySqlConnector.Logging.MySqlConnectorLogManager : object {
    unknown static IMySqlConnectorLoggerProvider Provider {public set; }
    public static void set_Provider(IMySqlConnectorLoggerProvider value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.Logging.NoOpLogger : object {
    [CompilerGeneratedAttribute]
private static IMySqlConnectorLogger <Instance>k__BackingField;
    public static IMySqlConnectorLogger Instance { get; }
    private static NoOpLogger();
    public sealed virtual bool IsEnabled(MySqlConnectorLogLevel level);
    [NullableContextAttribute("2")]
public sealed virtual void Log(MySqlConnectorLogLevel level, string message, Object[] args, Exception exception);
    [CompilerGeneratedAttribute]
public static IMySqlConnectorLogger get_Instance();
}
public class MySqlConnector.Logging.NoOpLoggerProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual IMySqlConnectorLogger CreateLogger(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlAttribute : object {
    [CompilerGeneratedAttribute]
private string <AttributeName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string AttributeName { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public MySqlAttribute(string attributeName, object value);
    [CompilerGeneratedAttribute]
public string get_AttributeName();
    [CompilerGeneratedAttribute]
public void set_AttributeName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(object value);
    public MySqlAttribute Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal MySqlParameter ToParameter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MySqlConnector.MySqlAttributeCollection : object {
    private List`1<MySqlAttribute> m_attributes;
    public int Count { get; }
    public MySqlAttribute Item { get; }
    public int get_Count();
    public void Add(MySqlAttribute attribute);
    public void SetAttribute(string attributeName, object value);
    public MySqlAttribute get_Item(int index);
    public void Clear();
    public sealed virtual IEnumerator`1<MySqlAttribute> GetEnumerator();
    public bool Remove(MySqlAttribute attribute);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlBatch : DbBatch {
    [CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlTransaction <Transaction>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MySqlBatchCommandCollection <BatchCommands>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandBehavior <CurrentCommandBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MySqlConnector.Core.ICancellableCommand.EffectiveCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MySqlConnector.Core.ICancellableCommand.CancelAttemptCount>k__BackingField;
    private int m_commandId;
    private bool m_isDisposed;
    private int m_timeout;
    private Action m_cancelAction;
    private Action m_cancelForCommandTimeoutAction;
    private UInt32 m_cancelTimerId;
    private bool m_commandTimedOut;
    public MySqlConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    public MySqlTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [NullableAttribute("1")]
public MySqlBatchCommandCollection BatchCommands { get; }
    [NullableAttribute("1")]
protected DbBatchCommandCollection DbBatchCommands { get; }
    public int Timeout { get; public set; }
    internal CommandBehavior CurrentCommandBehavior { get; internal set; }
    private int MySqlConnector.Core.ICancellableCommand.CommandId { get; }
    private int MySqlConnector.Core.ICancellableCommand.CommandTimeout { get; }
    private Nullable`1<int> MySqlConnector.Core.ICancellableCommand.EffectiveCommandTimeout { get; private set; }
    private int MySqlConnector.Core.ICancellableCommand.CancelAttemptCount { get; private set; }
    private bool MySqlConnector.Core.ICancellableCommand.IsTimedOut { get; }
    private bool IsPrepared { get; }
    private IOBehavior AsyncIOBehavior { get; }
    public MySqlBatch(MySqlConnection connection, MySqlTransaction transaction);
    [CompilerGeneratedAttribute]
public sealed virtual MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(MySqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    [CompilerGeneratedAttribute]
public MySqlTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(MySqlTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MySqlBatchCommandCollection get_BatchCommands();
    [NullableContextAttribute("1")]
protected virtual DbBatchCommandCollection get_DbBatchCommands();
    [NullableContextAttribute("1")]
public MySqlDataReader ExecuteReader(CommandBehavior commandBehavior);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlBatch/<ExecuteReaderAsync>d__22")]
public Task`1<MySqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlBatch/<ExecuteDbDataReaderAsync>d__24")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    private ValueTask`1<MySqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, IOBehavior ioBehavior, CancellationToken cancellationToken);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    [NullableContextAttribute("1")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual Task PrepareAsync(CancellationToken cancellationToken);
    public virtual void Cancel();
    [NullableContextAttribute("1")]
protected virtual DbBatchCommand CreateDbBatchCommand();
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
internal CommandBehavior get_CurrentCommandBehavior();
    [CompilerGeneratedAttribute]
internal void set_CurrentCommandBehavior(CommandBehavior value);
    private sealed virtual override int MySqlConnector.Core.ICancellableCommand.get_CommandId();
    private sealed virtual override int MySqlConnector.Core.ICancellableCommand.get_CommandTimeout();
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<int> MySqlConnector.Core.ICancellableCommand.get_EffectiveCommandTimeout();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.ICancellableCommand.set_EffectiveCommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private sealed virtual override int MySqlConnector.Core.ICancellableCommand.get_CancelAttemptCount();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.ICancellableCommand.set_CancelAttemptCount(int value);
    private sealed virtual override CancellationTokenRegistration MySqlConnector.Core.ICancellableCommand.RegisterCancel(CancellationToken cancellationToken);
    private sealed virtual override void MySqlConnector.Core.ICancellableCommand.SetTimeout(int milliseconds);
    private sealed virtual override bool MySqlConnector.Core.ICancellableCommand.get_IsTimedOut();
    private void CancelCommandForTimeout();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlBatch/<ExecuteNonQueryAsync>d__59")]
private Task`1<int> ExecuteNonQueryAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlBatch/<ExecuteScalarAsync>d__60")]
private Task`1<object> ExecuteScalarAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private bool IsValid(Exception& exception);
    private bool NeedsPrepare(Exception& exception);
    private InvalidOperationException GetExceptionForInvalidCommands();
    [NullableContextAttribute("1")]
private Task PrepareAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlBatch/<DoPrepareAsync>d__65")]
private Task DoPrepareAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private bool get_IsPrepared();
    private IOBehavior get_AsyncIOBehavior();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlBatchCommand : DbBatchCommand {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandType <CommandType>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlParameterCollection <MySqlConnector.Core.IMySqlCommand.OutParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlParameter <MySqlConnector.Core.IMySqlCommand.ReturnParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlBatch <Batch>k__BackingField;
    private MySqlParameterCollection m_parameterCollection;
    private long m_lastInsertedId;
    [NullableAttribute("1")]
public string CommandText { get; public set; }
    public CommandType CommandType { get; public set; }
    public int RecordsAffected { get; }
    [NullableAttribute("1")]
public MySqlParameterCollection Parameters { get; }
    public bool CanCreateParameter { get; }
    [NullableAttribute("1")]
protected DbParameterCollection DbParameterCollection { get; }
    private bool MySqlConnector.Core.IMySqlCommand.AllowUserVariables { get; }
    private CommandBehavior MySqlConnector.Core.IMySqlCommand.CommandBehavior { get; }
    private MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.RawParameters { get; }
    private MySqlAttributeCollection MySqlConnector.Core.IMySqlCommand.RawAttributes { get; }
    private MySqlConnection MySqlConnector.Core.IMySqlCommand.Connection { get; }
    private long MySqlConnector.Core.IMySqlCommand.LastInsertedId { get; }
    private MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.OutParameters { get; private set; }
    private MySqlParameter MySqlConnector.Core.IMySqlCommand.ReturnParameter { get; private set; }
    [NullableAttribute("1")]
private ICancellableCommand MySqlConnector.Core.IMySqlCommand.CancellableCommand { get; }
    [NullableAttribute("1")]
private ILogger MySqlConnector.Core.IMySqlCommand.Logger { get; }
    internal MySqlBatch Batch { get; internal set; }
    public MySqlBatchCommand(string commandText);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_CommandText();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public virtual CommandType get_CommandType();
    [CompilerGeneratedAttribute]
public virtual void set_CommandType(CommandType value);
    public virtual int get_RecordsAffected();
    [NullableContextAttribute("1")]
public MySqlParameterCollection get_Parameters();
    [NullableContextAttribute("1")]
public DbParameter CreateParameter();
    public bool get_CanCreateParameter();
    [NullableContextAttribute("1")]
protected virtual DbParameterCollection get_DbParameterCollection();
    private sealed virtual override bool MySqlConnector.Core.IMySqlCommand.get_AllowUserVariables();
    private sealed virtual override CommandBehavior MySqlConnector.Core.IMySqlCommand.get_CommandBehavior();
    private sealed virtual override MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.get_RawParameters();
    private sealed virtual override MySqlAttributeCollection MySqlConnector.Core.IMySqlCommand.get_RawAttributes();
    private sealed virtual override MySqlConnection MySqlConnector.Core.IMySqlCommand.get_Connection();
    private sealed virtual override long MySqlConnector.Core.IMySqlCommand.get_LastInsertedId();
    private sealed virtual override PreparedStatements MySqlConnector.Core.IMySqlCommand.TryGetPreparedStatements();
    private sealed virtual override void MySqlConnector.Core.IMySqlCommand.SetLastInsertedId(long lastInsertedId);
    [CompilerGeneratedAttribute]
private sealed virtual override MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.get_OutParameters();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.IMySqlCommand.set_OutParameters(MySqlParameterCollection value);
    [CompilerGeneratedAttribute]
private sealed virtual override MySqlParameter MySqlConnector.Core.IMySqlCommand.get_ReturnParameter();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.IMySqlCommand.set_ReturnParameter(MySqlParameter value);
    [NullableContextAttribute("1")]
private sealed virtual override ICancellableCommand MySqlConnector.Core.IMySqlCommand.get_CancellableCommand();
    [NullableContextAttribute("1")]
private sealed virtual override ILogger MySqlConnector.Core.IMySqlCommand.get_Logger();
    [CompilerGeneratedAttribute]
internal MySqlBatch get_Batch();
    [CompilerGeneratedAttribute]
internal void set_Batch(MySqlBatch value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MySqlConnector.MySqlBatchCommandCollection : DbBatchCommandCollection {
    private List`1<MySqlBatchCommand> m_commands;
    public MySqlBatchCommand Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal IReadOnlyList`1<MySqlBatchCommand> Commands { get; }
    public MySqlBatchCommand get_Item(int index);
    public void set_Item(int index, MySqlBatchCommand value);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual void Add(DbBatchCommand item);
    public virtual void Clear();
    public virtual bool Contains(DbBatchCommand item);
    public virtual void CopyTo(DbBatchCommand[] array, int arrayIndex);
    [IteratorStateMachineAttribute("MySqlConnector.MySqlBatchCommandCollection/<GetEnumerator>d__12")]
public virtual IEnumerator`1<DbBatchCommand> GetEnumerator();
    public virtual int IndexOf(DbBatchCommand item);
    public virtual void Insert(int index, DbBatchCommand item);
    public virtual bool Remove(DbBatchCommand item);
    public virtual void RemoveAt(int index);
    protected virtual DbBatchCommand GetBatchCommand(int index);
    protected virtual void SetBatchCommand(int index, DbBatchCommand batchCommand);
    internal IReadOnlyList`1<MySqlBatchCommand> get_Commands();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlBulkCopy : object {
    [CompilerGeneratedAttribute]
private MySqlBulkLoaderConflictOption <ConflictOption>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BulkCopyTimeout>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DestinationTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NotifyAfter>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MySqlRowsCopiedEventHandler MySqlRowsCopied;
    [CompilerGeneratedAttribute]
private List`1<MySqlBulkCopyColumnMapping> <ColumnMappings>k__BackingField;
    private static Char[] s_specialCharacters;
    private static UTF8Encoding s_utf8Encoding;
    private MySqlConnection m_connection;
    [NullableAttribute("2")]
private MySqlTransaction m_transaction;
    private ILogger m_logger;
    private int m_rowsCopied;
    [NullableAttribute("2")]
private IValuesEnumerator m_valuesEnumerator;
    private bool m_wasAborted;
    public MySqlBulkLoaderConflictOption ConflictOption { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    [NullableAttribute("2")]
public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    public List`1<MySqlBulkCopyColumnMapping> ColumnMappings { get; }
    [ObsoleteAttribute("Use the MySqlBulkCopyResult.RowsInserted property returned by WriteToServer.")]
public int RowsCopied { get; }
    public MySqlBulkCopy(MySqlConnection connection, MySqlTransaction transaction);
    private static MySqlBulkCopy();
    [CompilerGeneratedAttribute]
public MySqlBulkLoaderConflictOption get_ConflictOption();
    [CompilerGeneratedAttribute]
public void set_ConflictOption(MySqlBulkLoaderConflictOption value);
    [CompilerGeneratedAttribute]
public int get_BulkCopyTimeout();
    [CompilerGeneratedAttribute]
public void set_BulkCopyTimeout(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DestinationTableName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DestinationTableName(string value);
    [CompilerGeneratedAttribute]
public int get_NotifyAfter();
    [CompilerGeneratedAttribute]
public void set_NotifyAfter(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_MySqlRowsCopied(MySqlRowsCopiedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_MySqlRowsCopied(MySqlRowsCopiedEventHandler value);
    [CompilerGeneratedAttribute]
public List`1<MySqlBulkCopyColumnMapping> get_ColumnMappings();
    public int get_RowsCopied();
    public MySqlBulkCopyResult WriteToServer(DataTable dataTable);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlBulkCopy/<WriteToServerAsync>d__26")]
public ValueTask`1<MySqlBulkCopyResult> WriteToServerAsync(DataTable dataTable, CancellationToken cancellationToken);
    public MySqlBulkCopyResult WriteToServer(IEnumerable`1<DataRow> dataRows, int columnCount);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlBulkCopy/<WriteToServerAsync>d__28")]
public ValueTask`1<MySqlBulkCopyResult> WriteToServerAsync(IEnumerable`1<DataRow> dataRows, int columnCount, CancellationToken cancellationToken);
    public MySqlBulkCopyResult WriteToServer(IDataReader dataReader);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlBulkCopy/<WriteToServerAsync>d__30")]
public ValueTask`1<MySqlBulkCopyResult> WriteToServerAsync(IDataReader dataReader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlBulkCopy/<WriteToServerAsync>d__31")]
private ValueTask`1<MySqlBulkCopyResult> WriteToServerAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlBulkCopy/<SendDataReaderAsync>d__32")]
internal Task SendDataReaderAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <WriteToServerAsync>g__QuoteIdentifier|31_1(string identifier);
    [CompilerGeneratedAttribute]
internal static void <WriteToServerAsync>g__AddColumnMapping|31_2(ILogger logger, List`1<MySqlBulkCopyColumnMapping> columnMappings, bool addDefaultMappings, int destinationOrdinal, string destinationColumn, string variableName, string expression);
    [CompilerGeneratedAttribute]
internal static bool <SendDataReaderAsync>g__WriteValue|32_0(MySqlConnection connection, object value, Int32& inputIndex, Encoder& utf8Encoder, Span`1<byte> output, Int32& bytesWritten);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <SendDataReaderAsync>g__WriteString|32_1(string value, Encoder& utf8Encoder, Span`1<byte> output, Int32& bytesWritten);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <SendDataReaderAsync>g__WriteSubstring|32_2(string value, Int32& inputIndex, Encoder& utf8Encoder, Span`1<byte> output, Int32& bytesWritten);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static bool <SendDataReaderAsync>g__WriteBytes|32_3(ReadOnlySpan`1<byte> value, Int32& inputIndex, Span`1<byte> output, Int32& bytesWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlBulkCopyColumnMapping : object {
    [CompilerGeneratedAttribute]
private int <SourceOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationColumn>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    public int SourceOrdinal { get; public set; }
    public string DestinationColumn { get; public set; }
    [NullableAttribute("2")]
public string Expression { get; public set; }
    public MySqlBulkCopyColumnMapping(int sourceOrdinal, string destinationColumn, string expression);
    [CompilerGeneratedAttribute]
public int get_SourceOrdinal();
    [CompilerGeneratedAttribute]
public void set_SourceOrdinal(int value);
    [CompilerGeneratedAttribute]
public string get_DestinationColumn();
    [CompilerGeneratedAttribute]
public void set_DestinationColumn(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Expression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Expression(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlBulkCopyResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MySqlError> <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsInserted>k__BackingField;
    public IReadOnlyList`1<MySqlError> Warnings { get; }
    public int RowsInserted { get; }
    internal MySqlBulkCopyResult(IReadOnlyList`1<MySqlError> warnings, int rowsInserted);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MySqlError> get_Warnings();
    [CompilerGeneratedAttribute]
public int get_RowsInserted();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlBulkLoader : object {
    [CompilerGeneratedAttribute]
private string <CharacterSet>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<string> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlBulkLoaderConflictOption <ConflictOption>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private char <EscapeCharacter>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<string> <Expressions>k__BackingField;
    [CompilerGeneratedAttribute]
private char <FieldQuotationCharacter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FieldQuotationOptional>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LineTerminator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfLinesToSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlBulkLoaderPriority <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [NullableAttribute("1")]
internal static string SourcePrefix;
    [CompilerGeneratedAttribute]
private object <Source>k__BackingField;
    [NullableAttribute("1")]
private static object s_lock;
    [NullableAttribute("1")]
private static Dictionary`2<string, object> s_sources;
    public string CharacterSet { get; public set; }
    [NullableAttribute("1")]
public List`1<string> Columns { get; }
    public MySqlBulkLoaderConflictOption ConflictOption { get; public set; }
    [NullableAttribute("1")]
public MySqlConnection Connection { get; public set; }
    public char EscapeCharacter { get; public set; }
    [NullableAttribute("1")]
public List`1<string> Expressions { get; }
    public char FieldQuotationCharacter { get; public set; }
    public bool FieldQuotationOptional { get; public set; }
    public string FieldTerminator { get; public set; }
    public string FileName { get; public set; }
    public string LinePrefix { get; public set; }
    public string LineTerminator { get; public set; }
    public bool Local { get; public set; }
    public int NumberOfLinesToSkip { get; public set; }
    public MySqlBulkLoaderPriority Priority { get; public set; }
    public Stream SourceStream { get; public set; }
    public string TableName { get; public set; }
    public int Timeout { get; public set; }
    internal object Source { get; internal set; }
    [NullableContextAttribute("1")]
public MySqlBulkLoader(MySqlConnection connection);
    private static MySqlBulkLoader();
    [CompilerGeneratedAttribute]
public string get_CharacterSet();
    [CompilerGeneratedAttribute]
public void set_CharacterSet(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<string> get_Columns();
    [CompilerGeneratedAttribute]
public MySqlBulkLoaderConflictOption get_ConflictOption();
    [CompilerGeneratedAttribute]
public void set_ConflictOption(MySqlBulkLoaderConflictOption value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Connection(MySqlConnection value);
    [CompilerGeneratedAttribute]
public char get_EscapeCharacter();
    [CompilerGeneratedAttribute]
public void set_EscapeCharacter(char value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<string> get_Expressions();
    [CompilerGeneratedAttribute]
public char get_FieldQuotationCharacter();
    [CompilerGeneratedAttribute]
public void set_FieldQuotationCharacter(char value);
    [CompilerGeneratedAttribute]
public bool get_FieldQuotationOptional();
    [CompilerGeneratedAttribute]
public void set_FieldQuotationOptional(bool value);
    [CompilerGeneratedAttribute]
public string get_FieldTerminator();
    [CompilerGeneratedAttribute]
public void set_FieldTerminator(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_LinePrefix();
    [CompilerGeneratedAttribute]
public void set_LinePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_LineTerminator();
    [CompilerGeneratedAttribute]
public void set_LineTerminator(string value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public int get_NumberOfLinesToSkip();
    [CompilerGeneratedAttribute]
public void set_NumberOfLinesToSkip(int value);
    [CompilerGeneratedAttribute]
public MySqlBulkLoaderPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(MySqlBulkLoaderPriority value);
    public Stream get_SourceStream();
    public void set_SourceStream(Stream value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(int value);
    public int Load();
    [NullableContextAttribute("1")]
public Task`1<int> LoadAsync();
    [NullableContextAttribute("1")]
public Task`1<int> LoadAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlBulkLoader/<LoadAsync>d__73")]
internal ValueTask`1<int> LoadAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal object get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(object value);
    [NullableContextAttribute("1")]
private string CreateSql();
    [NullableContextAttribute("1")]
private static FileStream CreateFileStream(string fileName);
    [NullableContextAttribute("1")]
internal static object GetAndRemoveSource(string sourceKey);
    [NullableContextAttribute("1")]
internal static bool TryGetAndRemoveSource(string sourceKey, Object& source);
    [NullableContextAttribute("1")]
private static string GenerateSourceFileName();
}
public enum MySqlConnector.MySqlBulkLoaderConflictOption : Enum {
    public int value__;
    public static MySqlBulkLoaderConflictOption None;
    public static MySqlBulkLoaderConflictOption Replace;
    public static MySqlBulkLoaderConflictOption Ignore;
}
public enum MySqlConnector.MySqlBulkLoaderPriority : Enum {
    public int value__;
    public static MySqlBulkLoaderPriority None;
    public static MySqlBulkLoaderPriority Low;
    public static MySqlBulkLoaderPriority Concurrent;
}
public enum MySqlConnector.MySqlCertificateStoreLocation : Enum {
    public int value__;
    public static MySqlCertificateStoreLocation None;
    public static MySqlCertificateStoreLocation CurrentUser;
    public static MySqlCertificateStoreLocation LocalMachine;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlCommand : DbCommand {
    [CompilerGeneratedAttribute]
private bool <AllowUserVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlTransaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private UpdateRowSource <UpdatedRowSource>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastInsertedId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MySqlConnector.Core.ICancellableCommand.EffectiveCommandTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MySqlConnector.Core.ICancellableCommand.CancelAttemptCount>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlParameterCollection <MySqlConnector.Core.IMySqlCommand.OutParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlParameter <MySqlConnector.Core.IMySqlCommand.ReturnParameter>k__BackingField;
    private int m_commandId;
    private bool m_isDisposed;
    private MySqlConnection m_connection;
    [NullableAttribute("1")]
private string m_commandText;
    private MySqlParameterCollection m_parameterCollection;
    private MySqlAttributeCollection m_attributeCollection;
    private Nullable`1<int> m_commandTimeout;
    private CommandType m_commandType;
    private CommandBehavior m_commandBehavior;
    private Action m_cancelAction;
    private Action m_cancelForCommandTimeoutAction;
    private UInt32 m_cancelTimerId;
    private bool m_commandTimedOut;
    [NullableAttribute("1")]
public MySqlParameterCollection Parameters { get; }
    private MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.RawParameters { get; }
    [NullableAttribute("1")]
public MySqlAttributeCollection Attributes { get; }
    private MySqlAttributeCollection MySqlConnector.Core.IMySqlCommand.RawAttributes { get; }
    private bool MySqlConnector.Core.IMySqlCommand.AllowUserVariables { get; }
    internal bool AllowUserVariables { get; internal set; }
    internal bool NoActivity { get; internal set; }
    [NullableAttribute("1")]
public string CommandText { get; public set; }
    public bool IsPrepared { get; }
    public MySqlTransaction Transaction { get; public set; }
    public MySqlConnection Connection { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public long LastInsertedId { get; private set; }
    protected DbConnection DbConnection { get; protected set; }
    [NullableAttribute("1")]
protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    private bool MySqlConnector.Core.ICancellableCommand.IsTimedOut { get; }
    private int MySqlConnector.Core.ICancellableCommand.CommandId { get; }
    private Nullable`1<int> MySqlConnector.Core.ICancellableCommand.EffectiveCommandTimeout { get; private set; }
    private int MySqlConnector.Core.ICancellableCommand.CancelAttemptCount { get; private set; }
    [NullableAttribute("1")]
private ICancellableCommand MySqlConnector.Core.IMySqlCommand.CancellableCommand { get; }
    private IOBehavior AsyncIOBehavior { get; }
    private CommandBehavior MySqlConnector.Core.IMySqlCommand.CommandBehavior { get; }
    private MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.OutParameters { get; private set; }
    private MySqlParameter MySqlConnector.Core.IMySqlCommand.ReturnParameter { get; private set; }
    [NullableAttribute("1")]
private ILogger MySqlConnector.Core.IMySqlCommand.Logger { get; }
    public MySqlCommand(string commandText);
    public MySqlCommand(MySqlConnection connection, MySqlTransaction transaction);
    public MySqlCommand(string commandText, MySqlConnection connection);
    public MySqlCommand(string commandText, MySqlConnection connection, MySqlTransaction transaction);
    [NullableContextAttribute("1")]
private MySqlCommand(MySqlCommand other);
    [NullableContextAttribute("1")]
public MySqlParameterCollection get_Parameters();
    private sealed virtual override MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.get_RawParameters();
    [NullableContextAttribute("1")]
public MySqlAttributeCollection get_Attributes();
    private sealed virtual override MySqlAttributeCollection MySqlConnector.Core.IMySqlCommand.get_RawAttributes();
    [NullableContextAttribute("1")]
public MySqlParameter CreateParameter();
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    [NullableContextAttribute("1")]
public MySqlDataReader ExecuteReader();
    [NullableContextAttribute("1")]
public MySqlDataReader ExecuteReader(CommandBehavior commandBehavior);
    public virtual void Prepare();
    [NullableContextAttribute("1")]
public virtual Task PrepareAsync(CancellationToken cancellationToken);
    internal MySqlParameterCollection CloneRawParameters();
    private MySqlAttributeCollection CloneRawAttributes();
    private sealed virtual override bool MySqlConnector.Core.IMySqlCommand.get_AllowUserVariables();
    [CompilerGeneratedAttribute]
internal bool get_AllowUserVariables();
    [CompilerGeneratedAttribute]
internal void set_AllowUserVariables(bool value);
    [CompilerGeneratedAttribute]
internal bool get_NoActivity();
    [CompilerGeneratedAttribute]
internal void set_NoActivity(bool value);
    [NullableContextAttribute("1")]
private Task PrepareAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private bool NeedsPrepare(Exception& exception);
    [NullableContextAttribute("1")]
public virtual string get_CommandText();
    [NullableContextAttribute("1")]
public virtual void set_CommandText(string value);
    public bool get_IsPrepared();
    [CompilerGeneratedAttribute]
public MySqlTransaction get_Transaction();
    [CompilerGeneratedAttribute]
public void set_Transaction(MySqlTransaction value);
    public sealed virtual MySqlConnection get_Connection();
    public void set_Connection(MySqlConnection value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    [CompilerGeneratedAttribute]
public virtual UpdateRowSource get_UpdatedRowSource();
    [CompilerGeneratedAttribute]
public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_LastInsertedId();
    [CompilerGeneratedAttribute]
private void set_LastInsertedId(long value);
    private sealed virtual override void MySqlConnector.Core.IMySqlCommand.SetLastInsertedId(long lastInsertedId);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    [NullableContextAttribute("1")]
protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [NullableContextAttribute("1")]
protected virtual DbParameter CreateDbParameter();
    [NullableContextAttribute("1")]
protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    [NullableContextAttribute("1")]
public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlCommand/<ExecuteNonQueryAsync>d__78")]
internal ValueTask`1<int> ExecuteNonQueryAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlCommand/<ExecuteScalarAsync>d__80")]
internal ValueTask`1<object> ExecuteScalarAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public Task`1<MySqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public Task`1<MySqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlCommand/<ExecuteDbDataReaderAsync>d__83")]
protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlCommand/<ExecuteReaderAsync>d__84")]
internal ValueTask`1<MySqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, IOBehavior ioBehavior, CancellationToken cancellationToken);
    internal ValueTask`1<MySqlDataReader> ExecuteReaderNoResetTimeoutAsync(CommandBehavior behavior, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public MySqlCommand Clone();
    [NullableContextAttribute("1")]
private sealed virtual override object System.ICloneable.Clone();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    private sealed virtual override CancellationTokenRegistration MySqlConnector.Core.ICancellableCommand.RegisterCancel(CancellationToken cancellationToken);
    private sealed virtual override void MySqlConnector.Core.ICancellableCommand.SetTimeout(int milliseconds);
    private sealed virtual override bool MySqlConnector.Core.ICancellableCommand.get_IsTimedOut();
    private sealed virtual override int MySqlConnector.Core.ICancellableCommand.get_CommandId();
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<int> MySqlConnector.Core.ICancellableCommand.get_EffectiveCommandTimeout();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.ICancellableCommand.set_EffectiveCommandTimeout(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private sealed virtual override int MySqlConnector.Core.ICancellableCommand.get_CancelAttemptCount();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.ICancellableCommand.set_CancelAttemptCount(int value);
    [NullableContextAttribute("1")]
private sealed virtual override ICancellableCommand MySqlConnector.Core.IMySqlCommand.get_CancellableCommand();
    private IOBehavior get_AsyncIOBehavior();
    private void CancelCommandForTimeout();
    private bool IsValid(Exception& exception);
    private sealed virtual override PreparedStatements MySqlConnector.Core.IMySqlCommand.TryGetPreparedStatements();
    private sealed virtual override CommandBehavior MySqlConnector.Core.IMySqlCommand.get_CommandBehavior();
    [CompilerGeneratedAttribute]
private sealed virtual override MySqlParameterCollection MySqlConnector.Core.IMySqlCommand.get_OutParameters();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.IMySqlCommand.set_OutParameters(MySqlParameterCollection value);
    [CompilerGeneratedAttribute]
private sealed virtual override MySqlParameter MySqlConnector.Core.IMySqlCommand.get_ReturnParameter();
    [CompilerGeneratedAttribute]
private sealed virtual override void MySqlConnector.Core.IMySqlCommand.set_ReturnParameter(MySqlParameter value);
    [NullableContextAttribute("1")]
private sealed virtual override ILogger MySqlConnector.Core.IMySqlCommand.get_Logger();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlCommandBuilder : DbCommandBuilder {
    [NullableAttribute("2")]
public MySqlDataAdapter DataAdapter { get; public set; }
    public MySqlCommandBuilder(MySqlDataAdapter dataAdapter);
    public static void DeriveParameters(MySqlCommand command);
    public static Task DeriveParametersAsync(MySqlCommand command);
    public static Task DeriveParametersAsync(MySqlCommand command, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlCommandBuilder/<DeriveParametersAsync>d__3")]
private static Task DeriveParametersAsync(IOBehavior ioBehavior, MySqlCommand command, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public MySqlDataAdapter get_DataAdapter();
    [NullableContextAttribute("2")]
public void set_DataAdapter(MySqlDataAdapter value);
    public MySqlCommand GetDeleteCommand();
    public MySqlCommand GetInsertCommand();
    public MySqlCommand GetUpdateCommand();
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    private void RowUpdatingHandler(object sender, MySqlRowUpdatingEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlConnection : DbConnection {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<X509CertificateCollection, ValueTask> <ProvideClientCertificatesCallback>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<MySqlProvidePasswordContext, string> <ProvidePasswordCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MySqlInfoMessageEventHandler InfoMessage;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MySqlTransaction <CurrentTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlConnectorLoggingConfiguration <LoggingConfiguration>k__BackingField;
    private static StateChangeEventArgs s_stateChangeClosedConnecting;
    private static StateChangeEventArgs s_stateChangeConnectingOpen;
    private static StateChangeEventArgs s_stateChangeOpenClosed;
    private static object s_lock;
    private static Dictionary`2<Transaction, List`1<EnlistedTransactionBase>> s_transactionConnections;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ReadOnlyMemory`1[] s_startTransactionPayloads;
    [NullableAttribute("2")]
private MySqlDataSource m_dataSource;
    private ILogger m_logger;
    private ILogger m_transactionLogger;
    private string m_connectionString;
    [NullableAttribute("2")]
private ConnectionSettings m_connectionSettings;
    [NullableAttribute("2")]
private ServerSession m_session;
    private ConnectionState m_connectionState;
    private bool m_hasBeenOpened;
    private bool m_isDisposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, CachedProcedure> m_cachedProcedures;
    [NullableAttribute("2")]
private SchemaProvider m_schemaProvider;
    [NullableAttribute("2")]
private MySqlDataReader m_activeReader;
    [NullableAttribute("2")]
private EnlistedTransactionBase m_enlistedTransaction;
    public string ConnectionString { get; public set; }
    public string Database { get; }
    public ConnectionState State { get; }
    public string DataSource { get; }
    public string ServerVersion { get; }
    public int ServerThread { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<X509CertificateCollection, ValueTask> ProvideClientCertificatesCallback { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<MySqlProvidePasswordContext, string> ProvidePasswordCallback { get; public set; }
    [NullableAttribute("2")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public int ConnectionTimeout { get; }
    public bool CanCreateBatch { get; }
    internal ServerSession Session { get; }
    [NullableAttribute("2")]
internal MySqlTransaction CurrentTransaction { get; internal set; }
    internal MySqlConnectorLoggingConfiguration LoggingConfiguration { get; }
    internal bool AllowLoadLocalInfile { get; }
    internal bool AllowUserVariables { get; }
    internal bool AllowZeroDateTime { get; }
    internal bool ConvertZeroDateTime { get; }
    internal DateTimeKind DateTimeKind { get; }
    internal int DefaultCommandTimeout { get; }
    internal MySqlGuidFormat GuidFormat { get; }
    internal bool IgnoreCommandTransaction { get; }
    internal bool IgnorePrepare { get; }
    internal bool NoBackslashEscapes { get; }
    internal bool TreatTinyAsBoolean { get; }
    internal IOBehavior AsyncIOBehavior { get; }
    internal IOBehavior SimpleAsyncIOBehavior { get; }
    internal MySqlSslMode SslMode { get; }
    internal Nullable`1<int> ActiveCommandId { get; }
    internal bool SupportsPerQueryVariables { get; }
    internal bool HasActiveReader { get; }
    internal bool SslIsEncrypted { get; }
    internal bool SslIsSigned { get; }
    internal bool SslIsAuthenticated { get; }
    internal bool SslIsMutuallyAuthenticated { get; }
    internal SslProtocols SslProtocol { get; }
    [NullableContextAttribute("2")]
public MySqlConnection(string connectionString);
    internal MySqlConnection(MySqlDataSource dataSource);
    private MySqlConnection(string connectionString, MySqlConnectorLoggingConfiguration loggingConfiguration);
    private MySqlConnection(MySqlConnection other, MySqlDataSource dataSource, string connectionString, bool hasBeenOpened);
    private static MySqlConnection();
    public MySqlTransaction BeginTransaction();
    public MySqlTransaction BeginTransaction(IsolationLevel isolationLevel);
    public MySqlTransaction BeginTransaction(IsolationLevel isolationLevel, bool isReadOnly);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<BeginDbTransactionAsync>d__10")]
protected virtual ValueTask`1<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public ValueTask`1<MySqlTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, bool isReadOnly, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<BeginTransactionAsync>d__12")]
private ValueTask`1<MySqlTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, Nullable`1<bool> isReadOnly, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
internal static ReadOnlyMemory`1<byte> GetStartTransactionPayload(IsolationLevel isolationLevel, Nullable`1<bool> isReadOnly, bool supportsQueryAttributes);
    [NullableContextAttribute("2")]
public virtual void EnlistTransaction(Transaction transaction);
    internal void UnenlistTransaction();
    private MySqlConnection FindExistingEnlistedSession(Transaction transaction);
    private void TakeSessionFrom(MySqlConnection other);
    public virtual void Close();
    public virtual Task CloseAsync();
    internal Task CloseAsync(IOBehavior ioBehavior);
    public virtual void ChangeDatabase(string databaseName);
    public virtual Task ChangeDatabaseAsync(string databaseName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<ChangeDatabaseAsync>d__23")]
private Task ChangeDatabaseAsync(IOBehavior ioBehavior, string databaseName, CancellationToken cancellationToken);
    public MySqlCommand CreateCommand();
    public bool Ping();
    public Task`1<bool> PingAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<PingAsync>d__27")]
private ValueTask`1<bool> PingAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    public virtual void Open();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<OpenAsync>d__30")]
internal Task OpenAsync(Nullable`1<IOBehavior> ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<ResetConnectionAsync>d__31")]
public ValueTask ResetConnectionAsync(CancellationToken cancellationToken);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual string get_Database();
    public virtual ConnectionState get_State();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public int get_ServerThread();
    [CompilerGeneratedAttribute]
public Func`2<X509CertificateCollection, ValueTask> get_ProvideClientCertificatesCallback();
    [CompilerGeneratedAttribute]
public void set_ProvideClientCertificatesCallback(Func`2<X509CertificateCollection, ValueTask> value);
    [CompilerGeneratedAttribute]
public Func`2<MySqlProvidePasswordContext, string> get_ProvidePasswordCallback();
    [CompilerGeneratedAttribute]
public void set_ProvidePasswordCallback(Func`2<MySqlProvidePasswordContext, string> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public static void ClearPool(MySqlConnection connection);
    public static Task ClearPoolAsync(MySqlConnection connection, CancellationToken cancellationToken);
    public static void ClearAllPools();
    public static Task ClearAllPoolsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<ClearPoolAsync>d__61")]
private static Task ClearPoolAsync(MySqlConnection connection, IOBehavior ioBehavior, CancellationToken cancellationToken);
    protected virtual DbCommand CreateDbCommand();
    protected virtual DbProviderFactory get_DbProviderFactory();
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual Task`1<DataTable> GetSchemaAsync(CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaAsync(string collectionName, CancellationToken cancellationToken);
    public virtual Task`1<DataTable> GetSchemaAsync(string collectionName, String[] restrictionValues, CancellationToken cancellationToken);
    private SchemaProvider GetSchemaProvider();
    public virtual int get_ConnectionTimeout();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_InfoMessage(MySqlInfoMessageEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_InfoMessage(MySqlInfoMessageEventHandler value);
    public MySqlBatch CreateBatch();
    protected virtual DbBatch CreateDbBatch();
    public virtual bool get_CanCreateBatch();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<DisposeAsync>d__82")]
public virtual ValueTask DisposeAsync();
    public MySqlConnection Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public MySqlConnection CloneWith(string connectionString);
    internal ServerSession get_Session();
    internal void SetSessionFailed(Exception exception);
    internal void Cancel(ICancellableCommand command, int commandId, bool isCancel);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<GetCachedProcedure>d__90")]
internal Task`1<CachedProcedure> GetCachedProcedure(string name, bool revalidateMissing, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal MySqlTransaction get_CurrentTransaction();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_CurrentTransaction(MySqlTransaction value);
    [CompilerGeneratedAttribute]
internal MySqlConnectorLoggingConfiguration get_LoggingConfiguration();
    internal bool get_AllowLoadLocalInfile();
    internal bool get_AllowUserVariables();
    internal bool get_AllowZeroDateTime();
    internal bool get_ConvertZeroDateTime();
    internal DateTimeKind get_DateTimeKind();
    internal int get_DefaultCommandTimeout();
    internal MySqlGuidFormat get_GuidFormat();
    internal bool get_IgnoreCommandTransaction();
    internal bool get_IgnorePrepare();
    internal bool get_NoBackslashEscapes();
    internal bool get_TreatTinyAsBoolean();
    internal IOBehavior get_AsyncIOBehavior();
    internal IOBehavior get_SimpleAsyncIOBehavior();
    internal MySqlSslMode get_SslMode();
    internal Nullable`1<int> get_ActiveCommandId();
    internal bool get_SupportsPerQueryVariables();
    internal bool get_HasActiveReader();
    internal void SetActiveReader(MySqlDataReader dataReader);
    internal void FinishQuerying(bool hasWarnings);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<CreateSessionAsync>d__134")]
private ValueTask`1<ServerSession> CreateSessionAsync(ConnectionPool pool, long startingTimestamp, Activity activity, Nullable`1<IOBehavior> ioBehavior, CancellationToken cancellationToken);
    internal bool get_SslIsEncrypted();
    internal bool get_SslIsSigned();
    internal bool get_SslIsAuthenticated();
    internal bool get_SslIsMutuallyAuthenticated();
    internal SslProtocols get_SslProtocol();
    internal void SetState(ConnectionState newState);
    private void VerifyNotDisposed();
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<CloseAsync>d__148")]
private Task CloseAsync(bool changeState, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<DoCloseAsync>d__149")]
private Task DoCloseAsync(bool changeState, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlConnection/<CloseDatabaseAsync>d__150")]
private ValueTask CloseDatabaseAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private ConnectionSettings GetConnectionSettings();
    private ConnectionSettings GetInitializedConnectionSettings();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
}
public enum MySqlConnector.MySqlConnectionProtocol : Enum {
    public int value__;
    public static MySqlConnectionProtocol Sockets;
    public static MySqlConnectionProtocol Socket;
    public static MySqlConnectionProtocol Tcp;
    public static MySqlConnectionProtocol Pipe;
    public static MySqlConnectionProtocol NamedPipe;
    public static MySqlConnectionProtocol UnixSocket;
    public static MySqlConnectionProtocol Unix;
    public static MySqlConnectionProtocol SharedMemory;
    public static MySqlConnectionProtocol Memory;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MySqlConnector.MySqlConnectionStringBuilder : DbConnectionStringBuilder {
    [NullableAttribute("2")]
private string m_cachedConnectionString;
    [NullableAttribute("2")]
private string m_cachedConnectionStringWithoutPassword;
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The host name or network address of the MySQL Server to which to connect.")]
[DisplayNameAttribute("Server")]
public string Server { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("3306")]
[DescriptionAttribute("The TCP port on which MySQL Server is listening for connections.")]
[DisplayNameAttribute("Port")]
public UInt32 Port { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The MySQL user ID.")]
[DisplayNameAttribute("User ID")]
public string UserID { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The password for the MySQL user.")]
[DisplayNameAttribute("Password")]
public string Password { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("The case-sensitive name of the initial database to use.")]
[DescriptionAttribute("The case-sensitive name of the initial database to use")]
[DisplayNameAttribute("Database")]
public string Database { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Specifies how load is distributed across backend servers.")]
[DisplayNameAttribute("Load Balance")]
public MySqlLoadBalance LoadBalance { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The protocol to use to connect to the MySQL Server.")]
[DisplayNameAttribute("Connection Protocol")]
public MySqlConnectionProtocol ConnectionProtocol { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("MYSQL")]
[DescriptionAttribute("The name of the Windows named pipe to use to connect to the server.")]
[DisplayNameAttribute("Pipe Name")]
public string PipeName { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Whether to use SSL/TLS when connecting to the MySQL server.")]
[DisplayNameAttribute("SSL Mode")]
public MySqlSslMode SslMode { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The path to a certificate file in PKCS #12 (.pfx) format containing a bundled Certificate and Private Key used for mutual authentication.")]
[DisplayNameAttribute("Certificate File")]
public string CertificateFile { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The password for the certificate specified using the Certificate File option.")]
[DisplayNameAttribute("Certificate Password")]
public string CertificatePassword { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Uses a certificate from the specified Certificate Store on the machine.")]
[DisplayNameAttribute("Certificate Store Location")]
public MySqlCertificateStoreLocation CertificateStoreLocation { get; public set; }
    [CategoryAttribute("TLS")]
[DisplayNameAttribute("Certificate Thumbprint")]
[DefaultValueAttribute("")]
[DescriptionAttribute("Specifies which certificate should be used from the certificate store specified in Certificate Store Location")]
public string CertificateThumbprint { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The path to the client’s SSL certificate file in PEM format.")]
[DisplayNameAttribute("SSL Cert")]
public string SslCert { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The path to the client’s SSL private key in PEM format.")]
[DisplayNameAttribute("SSL Key")]
public string SslKey { get; public set; }
    [BrowsableAttribute("False")]
[CategoryAttribute("Obsolete")]
[DisplayNameAttribute("CA Certificate File")]
[ObsoleteAttribute("Use SslCa instead.")]
public string CACertificateFile { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The path to a CA certificate file in a PEM Encoded (.pem) format.")]
[DisplayNameAttribute("SSL CA")]
public string SslCa { get; public set; }
    [CategoryAttribute("TLS")]
[DisplayNameAttribute("TLS Version")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The TLS versions which may be used during TLS negotiation.")]
public string TlsVersion { get; public set; }
    [CategoryAttribute("TLS")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The TLS cipher suites which may be used during TLS negotiation.")]
[DisplayNameAttribute("TLS Cipher Suites")]
public string TlsCipherSuites { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Enables connection pooling.")]
[DisplayNameAttribute("Pooling")]
public bool Pooling { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The maximum lifetime (in seconds) for any connection, or 0 for no lifetime limit.")]
[DisplayNameAttribute("Connection Lifetime")]
public UInt32 ConnectionLifeTime { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Whether connections are reset when being retrieved from the pool.")]
[DisplayNameAttribute("Connection Reset")]
public bool ConnectionReset { get; public set; }
    [CategoryAttribute("Obsolete")]
[DefaultValueAttribute("True")]
[DisplayNameAttribute("Defer Connection Reset")]
[ObsoleteAttribute("This option is no longer supported in MySqlConnector >= 1.4.0.")]
public bool DeferConnectionReset { get; public set; }
    [CategoryAttribute("Obsolete")]
[DefaultValueAttribute("0")]
[DisplayNameAttribute("Connection Idle Ping Time")]
[ObsoleteAttribute("This option is no longer supported in MySqlConnector >= 1.4.0.")]
public UInt32 ConnectionIdlePingTime { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("180")]
[DescriptionAttribute("The amount of time (in seconds) that a connection can remain idle in the pool.")]
[DisplayNameAttribute("Connection Idle Timeout")]
public UInt32 ConnectionIdleTimeout { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The minimum number of connections to leave in the pool if Connection Idle Timeout is reached.")]
[DisplayNameAttribute("Minimum Pool Size")]
public UInt32 MinimumPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("100")]
[DescriptionAttribute("The maximum number of connections allowed in the pool.")]
[DisplayNameAttribute("Maximum Pool Size")]
public UInt32 MaximumPoolSize { get; public set; }
    [CategoryAttribute("Pooling")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("The number of seconds between checks for DNS changes.")]
[DisplayNameAttribute("DNS Check Interval")]
public UInt32 DnsCheckInterval { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Allows the LOAD DATA LOCAL command to request files from the client.")]
[DisplayNameAttribute("Allow Load Local Infile")]
public bool AllowLoadLocalInfile { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Allows the client to automatically request the RSA public key from the server.")]
[DisplayNameAttribute("Allow Public Key Retrieval")]
public bool AllowPublicKeyRetrieval { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Allows user-defined variables (prefixed with @) to be used in SQL statements.")]
[DisplayNameAttribute("Allow User Variables")]
public bool AllowUserVariables { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Returns DATETIME fields as MySqlDateTime objects instead of DateTime objects.")]
[DisplayNameAttribute("Allow Zero DateTime")]
public bool AllowZeroDateTime { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("")]
[DescriptionAttribute("Sets the program_name connection attribute passed to MySQL Server.")]
[DisplayNameAttribute("Application Name")]
public string ApplicationName { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Automatically enlists this connection in any active TransactionScope.")]
[DisplayNameAttribute("Auto Enlist")]
public bool AutoEnlist { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("2")]
[DescriptionAttribute("The length of time (in seconds) to wait for a query to be canceled when MySqlCommand.CommandTimeout expires, or zero for no timeout.")]
[DisplayNameAttribute("Cancellation Timeout")]
public int CancellationTimeout { get; public set; }
    [CategoryAttribute("Obsolete")]
[DefaultValueAttribute("")]
[DisplayNameAttribute("Character Set")]
public string CharacterSet { get; public set; }
    [CategoryAttribute("Connection")]
[DescriptionAttribute("The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.")]
[DefaultValueAttribute("15")]
[DisplayNameAttribute("Connection Timeout")]
public UInt32 ConnectionTimeout { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Whether invalid DATETIME fields should be converted to DateTime.MinValue.")]
[DisplayNameAttribute("Convert Zero DateTime")]
public bool ConvertZeroDateTime { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("The DateTimeKind to use when deserializing DATETIME values.")]
[DisplayNameAttribute("DateTime Kind")]
public MySqlDateTimeKind DateTimeKind { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("30")]
[DescriptionAttribute("The length of time (in seconds) each command can execute before the query is cancelled on the server, or zero to disable timeouts.")]
[DisplayNameAttribute("Default Command Timeout")]
public UInt32 DefaultCommandTimeout { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Forces all async methods to execute synchronously.")]
[DisplayNameAttribute("Force Synchronous")]
public bool ForceSynchronous { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Determines which column type (if any) should be read as a Guid.")]
[DisplayNameAttribute("GUID Format")]
public MySqlGuidFormat GuidFormat { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Does not check the MySqlCommand.Transaction property for validity when executing a command.")]
[DisplayNameAttribute("Ignore Command Transaction")]
public bool IgnoreCommandTransaction { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Ignores calls to MySqlCommand.Prepare and PrepareAsync.")]
[DisplayNameAttribute("Ignore Prepare")]
public bool IgnorePrepare { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Instructs the MySQL server that this is an interactive session.")]
[DisplayNameAttribute("Interactive Session")]
public bool InteractiveSession { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("0")]
[DescriptionAttribute("TCP Keepalive idle time (in seconds), or 0 to use OS defaults.")]
[DisplayNameAttribute("Keep Alive")]
public UInt32 Keepalive { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Doesn't escape backslashes in string parameters. For use with the NO_BACKSLASH_ESCAPES MySQL server mode.")]
[DisplayNameAttribute("No Backslash Escapes")]
public bool NoBackslashEscapes { get; public set; }
    [CategoryAttribute("Obsolete")]
[DisplayNameAttribute("Old Guids")]
[DefaultValueAttribute("False")]
public bool OldGuids { get; public set; }
    [CategoryAttribute("Other")]
[DisplayNameAttribute("Persist Security Info")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Preserves security-sensitive information in the connection string retrieved from any open MySqlConnection.")]
public bool PersistSecurityInfo { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Enables query pipelining.")]
[DisplayNameAttribute("Pipelining")]
public bool Pipelining { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DescriptionAttribute("Whether to use server redirection.")]
[DisplayNameAttribute("Server Redirection Mode")]
public MySqlServerRedirectionMode ServerRedirectionMode { get; public set; }
    [CategoryAttribute("Connection")]
[DisplayNameAttribute("Server RSA Public Key File")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The path to a file containing the server's RSA public key.")]
public string ServerRsaPublicKeyFile { get; public set; }
    [CategoryAttribute("Connection")]
[DefaultValueAttribute("")]
[DescriptionAttribute("The server’s Service Principal Name (for auth_gssapi_client authentication).")]
[DisplayNameAttribute("Server SPN")]
public string ServerSPN { get; public set; }
    [CategoryAttribute("Other")]
[DisplayNameAttribute("Treat Tiny As Boolean")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Returns TINYINT(1) fields as Boolean values.")]
public bool TreatTinyAsBoolean { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Report changed rows instead of found rows.")]
[DisplayNameAttribute("Use Affected Rows")]
public bool UseAffectedRows { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("False")]
[DescriptionAttribute("Compress packets sent to and from the server.")]
[DisplayNameAttribute("Use Compression")]
public bool UseCompression { get; public set; }
    [CategoryAttribute("Other")]
[DefaultValueAttribute("True")]
[DescriptionAttribute("Use XA transactions to implement System.Transactions distributed transactions.")]
[DisplayNameAttribute("Use XA Transactions")]
public bool UseXaTransactions { get; public set; }
    public ICollection Keys { get; }
    public object Item { get; public set; }
    public MySqlConnectionStringBuilder(string connectionString);
    public string get_Server();
    public void set_Server(string value);
    public UInt32 get_Port();
    public void set_Port(UInt32 value);
    public string get_UserID();
    public void set_UserID(string value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Database();
    public void set_Database(string value);
    public MySqlLoadBalance get_LoadBalance();
    public void set_LoadBalance(MySqlLoadBalance value);
    public MySqlConnectionProtocol get_ConnectionProtocol();
    public void set_ConnectionProtocol(MySqlConnectionProtocol value);
    public string get_PipeName();
    public void set_PipeName(string value);
    public MySqlSslMode get_SslMode();
    public void set_SslMode(MySqlSslMode value);
    public string get_CertificateFile();
    public void set_CertificateFile(string value);
    public string get_CertificatePassword();
    public void set_CertificatePassword(string value);
    public MySqlCertificateStoreLocation get_CertificateStoreLocation();
    public void set_CertificateStoreLocation(MySqlCertificateStoreLocation value);
    public string get_CertificateThumbprint();
    public void set_CertificateThumbprint(string value);
    public string get_SslCert();
    public void set_SslCert(string value);
    public string get_SslKey();
    public void set_SslKey(string value);
    public string get_CACertificateFile();
    public void set_CACertificateFile(string value);
    public string get_SslCa();
    public void set_SslCa(string value);
    public string get_TlsVersion();
    public void set_TlsVersion(string value);
    public string get_TlsCipherSuites();
    public void set_TlsCipherSuites(string value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public UInt32 get_ConnectionLifeTime();
    public void set_ConnectionLifeTime(UInt32 value);
    public bool get_ConnectionReset();
    public void set_ConnectionReset(bool value);
    public bool get_DeferConnectionReset();
    public void set_DeferConnectionReset(bool value);
    public UInt32 get_ConnectionIdlePingTime();
    public void set_ConnectionIdlePingTime(UInt32 value);
    public UInt32 get_ConnectionIdleTimeout();
    public void set_ConnectionIdleTimeout(UInt32 value);
    public UInt32 get_MinimumPoolSize();
    public void set_MinimumPoolSize(UInt32 value);
    public UInt32 get_MaximumPoolSize();
    public void set_MaximumPoolSize(UInt32 value);
    public UInt32 get_DnsCheckInterval();
    public void set_DnsCheckInterval(UInt32 value);
    public bool get_AllowLoadLocalInfile();
    public void set_AllowLoadLocalInfile(bool value);
    public bool get_AllowPublicKeyRetrieval();
    public void set_AllowPublicKeyRetrieval(bool value);
    public bool get_AllowUserVariables();
    public void set_AllowUserVariables(bool value);
    public bool get_AllowZeroDateTime();
    public void set_AllowZeroDateTime(bool value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public bool get_AutoEnlist();
    public void set_AutoEnlist(bool value);
    public int get_CancellationTimeout();
    public void set_CancellationTimeout(int value);
    public string get_CharacterSet();
    public void set_CharacterSet(string value);
    public UInt32 get_ConnectionTimeout();
    public void set_ConnectionTimeout(UInt32 value);
    public bool get_ConvertZeroDateTime();
    public void set_ConvertZeroDateTime(bool value);
    public MySqlDateTimeKind get_DateTimeKind();
    public void set_DateTimeKind(MySqlDateTimeKind value);
    public UInt32 get_DefaultCommandTimeout();
    public void set_DefaultCommandTimeout(UInt32 value);
    public bool get_ForceSynchronous();
    public void set_ForceSynchronous(bool value);
    public MySqlGuidFormat get_GuidFormat();
    public void set_GuidFormat(MySqlGuidFormat value);
    public bool get_IgnoreCommandTransaction();
    public void set_IgnoreCommandTransaction(bool value);
    public bool get_IgnorePrepare();
    public void set_IgnorePrepare(bool value);
    public bool get_InteractiveSession();
    public void set_InteractiveSession(bool value);
    public UInt32 get_Keepalive();
    public void set_Keepalive(UInt32 value);
    public bool get_NoBackslashEscapes();
    public void set_NoBackslashEscapes(bool value);
    public bool get_OldGuids();
    public void set_OldGuids(bool value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pipelining();
    public void set_Pipelining(bool value);
    public MySqlServerRedirectionMode get_ServerRedirectionMode();
    public void set_ServerRedirectionMode(MySqlServerRedirectionMode value);
    public string get_ServerRsaPublicKeyFile();
    public void set_ServerRsaPublicKeyFile(string value);
    public string get_ServerSPN();
    public void set_ServerSPN(string value);
    public bool get_TreatTinyAsBoolean();
    public void set_TreatTinyAsBoolean(bool value);
    public bool get_UseAffectedRows();
    public void set_UseAffectedRows(bool value);
    public bool get_UseCompression();
    public void set_UseCompression(bool value);
    public bool get_UseXaTransactions();
    public void set_UseXaTransactions(bool value);
    public virtual ICollection get_Keys();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual object get_Item(string key);
    public virtual void set_Item(string key, object value);
    internal void DoSetValue(string key, object value);
    internal string GetConnectionString(bool includePassword);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class MySqlConnector.MySqlConnectionStringOption : object {
    [CompilerGeneratedAttribute]
private static List`1<string> <OptionNames>k__BackingField;
    public static MySqlConnectionStringReferenceOption`1<string> Server;
    public static MySqlConnectionStringValueOption`1<UInt32> Port;
    public static MySqlConnectionStringReferenceOption`1<string> UserID;
    public static MySqlConnectionStringReferenceOption`1<string> Password;
    public static MySqlConnectionStringReferenceOption`1<string> Database;
    public static MySqlConnectionStringValueOption`1<MySqlLoadBalance> LoadBalance;
    public static MySqlConnectionStringValueOption`1<MySqlConnectionProtocol> ConnectionProtocol;
    public static MySqlConnectionStringReferenceOption`1<string> PipeName;
    public static MySqlConnectionStringValueOption`1<MySqlSslMode> SslMode;
    public static MySqlConnectionStringReferenceOption`1<string> CertificateFile;
    public static MySqlConnectionStringReferenceOption`1<string> CertificatePassword;
    public static MySqlConnectionStringValueOption`1<MySqlCertificateStoreLocation> CertificateStoreLocation;
    public static MySqlConnectionStringReferenceOption`1<string> CertificateThumbprint;
    public static MySqlConnectionStringReferenceOption`1<string> SslCert;
    public static MySqlConnectionStringReferenceOption`1<string> SslKey;
    public static MySqlConnectionStringReferenceOption`1<string> SslCa;
    public static MySqlConnectionStringReferenceOption`1<string> TlsVersion;
    public static MySqlConnectionStringReferenceOption`1<string> TlsCipherSuites;
    public static MySqlConnectionStringValueOption`1<bool> Pooling;
    public static MySqlConnectionStringValueOption`1<UInt32> ConnectionLifeTime;
    public static MySqlConnectionStringValueOption`1<bool> ConnectionReset;
    public static MySqlConnectionStringValueOption`1<bool> DeferConnectionReset;
    public static MySqlConnectionStringValueOption`1<UInt32> ConnectionIdlePingTime;
    public static MySqlConnectionStringValueOption`1<UInt32> ConnectionIdleTimeout;
    public static MySqlConnectionStringValueOption`1<UInt32> MinimumPoolSize;
    public static MySqlConnectionStringValueOption`1<UInt32> MaximumPoolSize;
    public static MySqlConnectionStringValueOption`1<UInt32> DnsCheckInterval;
    public static MySqlConnectionStringValueOption`1<bool> AllowLoadLocalInfile;
    public static MySqlConnectionStringValueOption`1<bool> AllowPublicKeyRetrieval;
    public static MySqlConnectionStringValueOption`1<bool> AllowUserVariables;
    public static MySqlConnectionStringValueOption`1<bool> AllowZeroDateTime;
    public static MySqlConnectionStringReferenceOption`1<string> ApplicationName;
    public static MySqlConnectionStringValueOption`1<bool> AutoEnlist;
    public static MySqlConnectionStringValueOption`1<int> CancellationTimeout;
    public static MySqlConnectionStringReferenceOption`1<string> CharacterSet;
    public static MySqlConnectionStringValueOption`1<UInt32> ConnectionTimeout;
    public static MySqlConnectionStringValueOption`1<bool> ConvertZeroDateTime;
    public static MySqlConnectionStringValueOption`1<MySqlDateTimeKind> DateTimeKind;
    public static MySqlConnectionStringValueOption`1<UInt32> DefaultCommandTimeout;
    public static MySqlConnectionStringValueOption`1<bool> ForceSynchronous;
    public static MySqlConnectionStringValueOption`1<MySqlGuidFormat> GuidFormat;
    public static MySqlConnectionStringValueOption`1<bool> IgnoreCommandTransaction;
    public static MySqlConnectionStringValueOption`1<bool> IgnorePrepare;
    public static MySqlConnectionStringValueOption`1<bool> InteractiveSession;
    public static MySqlConnectionStringValueOption`1<UInt32> Keepalive;
    public static MySqlConnectionStringValueOption`1<bool> NoBackslashEscapes;
    public static MySqlConnectionStringValueOption`1<bool> OldGuids;
    public static MySqlConnectionStringValueOption`1<bool> PersistSecurityInfo;
    public static MySqlConnectionStringValueOption`1<bool> Pipelining;
    public static MySqlConnectionStringValueOption`1<MySqlServerRedirectionMode> ServerRedirectionMode;
    public static MySqlConnectionStringReferenceOption`1<string> ServerRsaPublicKeyFile;
    public static MySqlConnectionStringReferenceOption`1<string> ServerSPN;
    public static MySqlConnectionStringValueOption`1<bool> TreatTinyAsBoolean;
    public static MySqlConnectionStringValueOption`1<bool> UseAffectedRows;
    public static MySqlConnectionStringValueOption`1<bool> UseCompression;
    public static MySqlConnectionStringValueOption`1<bool> UseXaTransactions;
    private static string c_tlsVersionsRegexPattern;
    private static Regex s_tlsVersionsRegex;
    private static Dictionary`2<string, MySqlConnectionStringOption> s_options;
    private IReadOnlyList`1<string> m_keys;
    public static List`1<string> OptionNames { get; }
    public string Key { get; }
    public IReadOnlyList`1<string> Keys { get; }
    protected MySqlConnectionStringOption(IReadOnlyList`1<string> keys);
    private static MySqlConnectionStringOption();
    [CompilerGeneratedAttribute]
public static List`1<string> get_OptionNames();
    public static MySqlConnectionStringOption TryGetOptionForKey(string key);
    public static MySqlConnectionStringOption GetOptionForKey(string key);
    public string get_Key();
    public IReadOnlyList`1<string> get_Keys();
    public abstract virtual object GetObject(MySqlConnectionStringBuilder builder);
    public abstract virtual void SetObject(MySqlConnectionStringBuilder builder, object value);
    private static void AddOption(Dictionary`2<string, MySqlConnectionStringOption> options, MySqlConnectionStringOption option);
    private static Regex TlsVersionsRegex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.MySqlConnectionStringReferenceOption`1 : MySqlConnectionStringOption {
    private T m_defaultValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, T> m_coerce;
    public MySqlConnectionStringReferenceOption`1(IReadOnlyList`1<string> keys, T defaultValue, Func`2<T, T> coerce);
    public T GetValue(MySqlConnectionStringBuilder builder);
    public void SetValue(MySqlConnectionStringBuilder builder, T value);
    public virtual object GetObject(MySqlConnectionStringBuilder builder);
    public virtual void SetObject(MySqlConnectionStringBuilder builder, object value);
    private static T ChangeType(object objectValue);
}
internal class MySqlConnector.MySqlConnectionStringValueOption`1 : MySqlConnectionStringOption {
    private T m_defaultValue;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, T> m_coerce;
    public MySqlConnectionStringValueOption`1(IReadOnlyList`1<string> keys, T defaultValue, Func`2<T, T> coerce);
    public T GetValue(MySqlConnectionStringBuilder builder);
    public void SetValue(MySqlConnectionStringBuilder builder, T value);
    [NullableContextAttribute("1")]
public virtual object GetObject(MySqlConnectionStringBuilder builder);
    [NullableContextAttribute("1")]
public virtual void SetObject(MySqlConnectionStringBuilder builder, object value);
    private T ChangeType(object objectValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlConnectorFactory : DbProviderFactory {
    public static MySqlConnectorFactory Instance;
    public bool CanCreateDataSourceEnumerator { get; }
    public bool CanCreateCommandBuilder { get; }
    public bool CanCreateDataAdapter { get; }
    public bool CanCreateBatch { get; }
    private static MySqlConnectorFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbParameter CreateParameter();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual bool get_CanCreateCommandBuilder();
    public virtual bool get_CanCreateDataAdapter();
    public virtual DbBatch CreateBatch();
    public virtual DbBatchCommand CreateBatchCommand();
    public virtual bool get_CanCreateBatch();
    public DbDataSource CreateDataSource(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlConversionException : Exception {
    internal MySqlConversionException(string message);
    private MySqlConversionException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlDataAdapter : DbDataAdapter {
    [CompilerGeneratedAttribute]
private MySqlRowUpdatingEventHandler RowUpdating;
    [CompilerGeneratedAttribute]
private MySqlRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]
private int <UpdateBatchSize>k__BackingField;
    private MySqlBatch m_batch;
    public MySqlCommand DeleteCommand { get; public set; }
    public MySqlCommand InsertCommand { get; public set; }
    public MySqlCommand SelectCommand { get; public set; }
    public MySqlCommand UpdateCommand { get; public set; }
    public int UpdateBatchSize { get; public set; }
    [NullableContextAttribute("1")]
public MySqlDataAdapter(MySqlCommand selectCommand);
    [NullableContextAttribute("1")]
public MySqlDataAdapter(string selectCommandText, MySqlConnection connection);
    [NullableContextAttribute("1")]
public MySqlDataAdapter(string selectCommandText, string connectionString);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(MySqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(MySqlRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(MySqlRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(MySqlRowUpdatedEventHandler value);
    public MySqlCommand get_DeleteCommand();
    public void set_DeleteCommand(MySqlCommand value);
    public MySqlCommand get_InsertCommand();
    public void set_InsertCommand(MySqlCommand value);
    public MySqlCommand get_SelectCommand();
    public void set_SelectCommand(MySqlCommand value);
    public MySqlCommand get_UpdateCommand();
    public void set_UpdateCommand(MySqlCommand value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    [NullableContextAttribute("1")]
protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    [NullableContextAttribute("1")]
protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [NullableContextAttribute("1")]
protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    [CompilerGeneratedAttribute]
public virtual int get_UpdateBatchSize();
    [CompilerGeneratedAttribute]
public virtual void set_UpdateBatchSize(int value);
    protected virtual void InitializeBatching();
    protected virtual void TerminateBatching();
    [NullableContextAttribute("1")]
protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    protected virtual int ExecuteBatch();
    [NullableContextAttribute("1")]
internal static MySqlCommand TryConvertToCommand(MySqlBatch batch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MySqlConnector.MySqlDataReader : DbDataReader {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Activity <Activity>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IMySqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <RealRecordsAffected>k__BackingField;
    private ResultSet m_resultSet;
    private CommandBehavior m_behavior;
    [NullableAttribute("2")]
private ICommandPayloadCreator m_payloadCreator;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, CachedProcedure> m_cachedProcedures;
    private CommandListPosition m_commandListPosition;
    private bool m_closed;
    private bool m_hasWarnings;
    private bool m_hasMoreResults;
    [NullableAttribute("2")]
private DataTable m_schemaTable;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int Depth { get; }
    public int VisibleFieldCount { get; }
    [NullableAttribute("2")]
internal Activity Activity { get; private set; }
    [NullableAttribute("2")]
internal IMySqlCommand Command { get; private set; }
    [NullableAttribute("2")]
internal MySqlConnection Connection { get; }
    internal Nullable`1<ulong> RealRecordsAffected { get; internal set; }
    [NullableAttribute("2")]
internal ServerSession Session { get; }
    [NullableAttribute("2")]
internal PreparedStatement LastUsedPreparedStatement { get; }
    public virtual bool NextResult();
    public virtual bool Read();
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<ReadAsync>d__2")]
public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    internal Task`1<bool> ReadAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<NextResultAsync>d__4")]
public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<NextResultAsync>d__5")]
internal Task`1<bool> NextResultAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private void ActivateResultSet(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<ScanResultSetAsync>d__7")]
private ValueTask ScanResultSetAsync(IOBehavior ioBehavior, ResultSet resultSet, CancellationToken cancellationToken);
    public virtual string GetName(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual int GetOrdinal(string name);
    public virtual bool GetBoolean(int ordinal);
    public bool GetBoolean(string name);
    public virtual byte GetByte(int ordinal);
    public byte GetByte(string name);
    public sbyte GetSByte(int ordinal);
    public sbyte GetSByte(string name);
    [NullableContextAttribute("2")]
public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public long GetBytes(string name, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public char GetChar(string name);
    [NullableContextAttribute("2")]
public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public Guid GetGuid(string name);
    public virtual short GetInt16(int ordinal);
    public short GetInt16(string name);
    public virtual int GetInt32(int ordinal);
    public int GetInt32(string name);
    public virtual long GetInt64(int ordinal);
    public long GetInt64(string name);
    public virtual string GetDataTypeName(int ordinal);
    public Type GetFieldType(string name);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Depth();
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public DateOnly GetDateOnly(int ordinal);
    public DateOnly GetDateOnly(string name);
    public virtual DateTime GetDateTime(int ordinal);
    public DateTime GetDateTime(string name);
    public DateTimeOffset GetDateTimeOffset(int ordinal);
    public DateTimeOffset GetDateTimeOffset(string name);
    public MySqlDateTime GetMySqlDateTime(int ordinal);
    public MySqlDateTime GetMySqlDateTime(string name);
    public MySqlGeometry GetMySqlGeometry(int ordinal);
    public MySqlGeometry GetMySqlGeometry(string name);
    public MySqlDecimal GetMySqlDecimal(int ordinal);
    public MySqlDecimal GetMySqlDecimal(string name);
    public TimeOnly GetTimeOnly(int ordinal);
    public TimeOnly GetTimeOnly(string name);
    public TimeSpan GetTimeSpan(int ordinal);
    public TimeSpan GetTimeSpan(string name);
    public virtual Stream GetStream(int ordinal);
    public Stream GetStream(string name);
    public virtual TextReader GetTextReader(int ordinal);
    public TextReader GetTextReader(string name);
    public virtual string GetString(int ordinal);
    public string GetString(string name);
    public virtual decimal GetDecimal(int ordinal);
    public decimal GetDecimal(string name);
    public virtual double GetDouble(int ordinal);
    public double GetDouble(string name);
    public virtual float GetFloat(int ordinal);
    public float GetFloat(string name);
    public ushort GetUInt16(int ordinal);
    public ushort GetUInt16(string name);
    public UInt32 GetUInt32(int ordinal);
    public UInt32 GetUInt32(string name);
    public ulong GetUInt64(int ordinal);
    public ulong GetUInt64(string name);
    public virtual int get_VisibleFieldCount();
    [NullableContextAttribute("2")]
public virtual DataTable GetSchemaTable();
    public virtual Task`1<DataTable> GetSchemaTableAsync(CancellationToken cancellationToken);
    public virtual void Close();
    public sealed virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
    public virtual Task`1<ReadOnlyCollection`1<DbColumn>> GetColumnSchemaAsync(CancellationToken cancellationToken);
    public virtual T GetFieldValue(int ordinal);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Activity get_Activity();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Activity(Activity value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal IMySqlCommand get_Command();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Command(IMySqlCommand value);
    [NullableContextAttribute("2")]
internal MySqlConnection get_Connection();
    [CompilerGeneratedAttribute]
internal Nullable`1<ulong> get_RealRecordsAffected();
    [CompilerGeneratedAttribute]
internal void set_RealRecordsAffected(Nullable`1<ulong> value);
    [NullableContextAttribute("2")]
internal ServerSession get_Session();
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<InitAsync>d__111")]
internal Task InitAsync(CommandListPosition commandListPosition, ICommandPayloadCreator payloadCreator, IDictionary`2<string, CachedProcedure> cachedProcedures, IMySqlCommand command, CommandBehavior behavior, Activity activity, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
internal DataTable BuildSchemaTable();
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<DisposeAsync>d__114")]
internal ValueTask DisposeAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataReader/<ReadOutParametersAsync>d__115")]
private static Task ReadOutParametersAsync(IMySqlCommand command, ResultSet resultSet, IOBehavior ioBehavior, CancellationToken cancellationToken);
    private void VerifyNotDisposed();
    [NullableContextAttribute("2")]
internal PreparedStatement get_LastUsedPreparedStatement();
    private ResultSet GetResultSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlDataSource : DbDataSource {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ConnectionPool <Pool>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlConnectorLoggingConfiguration <LoggingConfiguration>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static int s_lastId;
    private ILogger m_logger;
    private int m_id;
    private string m_connectionString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<X509CertificateCollection, ValueTask> m_clientCertificatesCallback;
    [NullableAttribute("2")]
private RemoteCertificateValidationCallback m_remoteCertificateValidationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<MySqlProvidePasswordContext, CancellationToken, ValueTask`1<string>> m_periodicPasswordProvider;
    private TimeSpan m_periodicPasswordProviderSuccessRefreshInterval;
    private TimeSpan m_periodicPasswordProviderFailureRefreshInterval;
    [NullableAttribute("2")]
private MySqlProvidePasswordContext m_providePasswordContext;
    [NullableAttribute("2")]
private CancellationTokenSource m_passwordProviderTimerCancellationTokenSource;
    [NullableAttribute("2")]
private Timer m_passwordProviderTimer;
    [NullableAttribute("2")]
private Task m_initialPasswordRefreshTask;
    private bool m_isDisposed;
    [NullableAttribute("2")]
private string m_password;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<MySqlProvidePasswordContext, string> m_providePasswordCallback;
    public string ConnectionString { get; }
    unknown string Password {public set; }
    [NullableAttribute("2")]
internal ConnectionPool Pool { get; }
    internal MySqlConnectorLoggingConfiguration LoggingConfiguration { get; }
    [NullableAttribute("2")]
internal string Name { get; }
    public MySqlDataSource(string connectionString);
    internal MySqlDataSource(string connectionString, MySqlConnectorLoggingConfiguration loggingConfiguration, string name, Func`2<X509CertificateCollection, ValueTask> clientCertificatesCallback, RemoteCertificateValidationCallback remoteCertificateValidationCallback, Func`3<MySqlProvidePasswordContext, CancellationToken, ValueTask`1<string>> periodicPasswordProvider, TimeSpan periodicPasswordProviderSuccessRefreshInterval, TimeSpan periodicPasswordProviderFailureRefreshInterval);
    public MySqlConnection CreateConnection();
    public MySqlConnection OpenConnection();
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataSource/<OpenConnectionAsync>d__4")]
public ValueTask`1<MySqlConnection> OpenConnectionAsync(CancellationToken cancellationToken);
    public virtual string get_ConnectionString();
    public void set_Password(string value);
    protected virtual DbConnection CreateDbConnection();
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataSource/<DisposeAsync>d__12")]
private ValueTask DisposeAsync(IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlDataSource/<RefreshPassword>d__13")]
private Task RefreshPassword();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ConnectionPool get_Pool();
    [CompilerGeneratedAttribute]
internal MySqlConnectorLoggingConfiguration get_LoggingConfiguration();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_Name();
    private string ProvidePasswordFromField(MySqlProvidePasswordContext context);
    private string ProvidePasswordFromInitialRefreshTask(MySqlProvidePasswordContext context);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <.ctor>b__1_0(object _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlDataSourceBuilder : object {
    [CompilerGeneratedAttribute]
private MySqlConnectionStringBuilder <ConnectionStringBuilder>k__BackingField;
    [NullableAttribute("2")]
private ILoggerFactory m_loggerFactory;
    [NullableAttribute("2")]
private string m_name;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<X509CertificateCollection, ValueTask> m_clientCertificatesCallback;
    [NullableAttribute("2")]
private RemoteCertificateValidationCallback m_remoteCertificateValidationCallback;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<MySqlProvidePasswordContext, CancellationToken, ValueTask`1<string>> m_periodicPasswordProvider;
    private TimeSpan m_periodicPasswordProviderSuccessRefreshInterval;
    private TimeSpan m_periodicPasswordProviderFailureRefreshInterval;
    public MySqlConnectionStringBuilder ConnectionStringBuilder { get; }
    [NullableContextAttribute("2")]
public MySqlDataSourceBuilder(string connectionString);
    public MySqlDataSourceBuilder UseLoggerFactory(ILoggerFactory loggerFactory);
    public MySqlDataSourceBuilder UseName(string name);
    public MySqlDataSourceBuilder UseClientCertificatesCallback(Func`2<X509CertificateCollection, ValueTask> callback);
    public MySqlDataSourceBuilder UsePeriodicPasswordProvider(Func`3<MySqlProvidePasswordContext, CancellationToken, ValueTask`1<string>> passwordProvider, TimeSpan successRefreshInterval, TimeSpan failureRefreshInterval);
    public MySqlDataSourceBuilder UseRemoteCertificateValidationCallback(RemoteCertificateValidationCallback callback);
    public MySqlDataSource Build();
    [CompilerGeneratedAttribute]
public MySqlConnectionStringBuilder get_ConnectionStringBuilder();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlDateTime : ValueType {
    [CompilerGeneratedAttribute]
private int <Year>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Hour>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Second>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Microsecond>k__BackingField;
    public bool IsValidDateTime { get; }
    public int Year { get; public set; }
    public int Month { get; public set; }
    public int Day { get; public set; }
    public int Hour { get; public set; }
    public int Minute { get; public set; }
    public int Second { get; public set; }
    public int Microsecond { get; public set; }
    public int Millisecond { get; public set; }
    public MySqlDateTime(int year, int month, int day, int hour, int minute, int second, int microsecond);
    public MySqlDateTime(DateTime dt);
    public MySqlDateTime(MySqlDateTime other);
    [IsReadOnlyAttribute]
public bool get_IsValidDateTime();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Year();
    [CompilerGeneratedAttribute]
public void set_Year(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Month();
    [CompilerGeneratedAttribute]
public void set_Month(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Day();
    [CompilerGeneratedAttribute]
public void set_Day(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Hour();
    [CompilerGeneratedAttribute]
public void set_Hour(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Minute();
    [CompilerGeneratedAttribute]
public void set_Minute(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Second();
    [CompilerGeneratedAttribute]
public void set_Second(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Microsecond();
    [CompilerGeneratedAttribute]
public void set_Microsecond(int value);
    [IsReadOnlyAttribute]
public int get_Millisecond();
    public void set_Millisecond(int value);
    [IsReadOnlyAttribute]
public DateTime GetDateTime();
    [IsReadOnlyAttribute]
[NullableContextAttribute("1")]
public virtual string ToString();
    public static DateTime op_Explicit(MySqlDateTime val);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MySqlDateTime left, MySqlDateTime right);
    public static bool op_Inequality(MySqlDateTime left, MySqlDateTime right);
    public static bool op_LessThan(MySqlDateTime left, MySqlDateTime right);
    public static bool op_LessThanOrEqual(MySqlDateTime left, MySqlDateTime right);
    public static bool op_GreaterThan(MySqlDateTime left, MySqlDateTime right);
    public static bool op_GreaterThanOrEqual(MySqlDateTime left, MySqlDateTime right);
    [IsReadOnlyAttribute]
private sealed virtual override int System.IComparable.CompareTo(object obj);
    [IsReadOnlyAttribute]
private sealed virtual override int System.IComparable<MySqlConnector.MySqlDateTime>.CompareTo(MySqlDateTime other);
    [IsReadOnlyAttribute]
private sealed virtual override bool System.IEquatable<MySqlConnector.MySqlDateTime>.Equals(MySqlDateTime other);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    [NullableContextAttribute("1")]
private sealed virtual override string System.IConvertible.ToString(IFormatProvider provider);
    [NullableContextAttribute("1")]
private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
}
public enum MySqlConnector.MySqlDateTimeKind : Enum {
    public int value__;
    public static MySqlDateTimeKind Unspecified;
    public static MySqlDateTimeKind Utc;
    public static MySqlDateTimeKind Local;
}
public class MySqlConnector.MySqlDbColumn : DbColumn {
    [CompilerGeneratedAttribute]
private MySqlDbType <ProviderType>k__BackingField;
    public MySqlDbType ProviderType { get; }
    [NullableContextAttribute("1")]
internal MySqlDbColumn(int ordinal, ColumnDefinitionPayload column, bool allowZeroDateTime, MySqlDbType mySqlDbType);
    [CompilerGeneratedAttribute]
public MySqlDbType get_ProviderType();
}
public enum MySqlConnector.MySqlDbType : Enum {
    public int value__;
    public static MySqlDbType Bool;
    public static MySqlDbType Decimal;
    public static MySqlDbType Byte;
    public static MySqlDbType Int16;
    public static MySqlDbType Int32;
    public static MySqlDbType Float;
    public static MySqlDbType Double;
    public static MySqlDbType Null;
    public static MySqlDbType Timestamp;
    public static MySqlDbType Int64;
    public static MySqlDbType Int24;
    public static MySqlDbType Date;
    public static MySqlDbType Time;
    public static MySqlDbType DateTime;
    [ObsoleteAttribute("The Datetime enum value is obsolete.  Please use DateTime.")]
public static MySqlDbType Datetime;
    public static MySqlDbType Year;
    public static MySqlDbType Newdate;
    public static MySqlDbType VarString;
    public static MySqlDbType Bit;
    public static MySqlDbType JSON;
    public static MySqlDbType NewDecimal;
    public static MySqlDbType Enum;
    public static MySqlDbType Set;
    public static MySqlDbType TinyBlob;
    public static MySqlDbType MediumBlob;
    public static MySqlDbType LongBlob;
    public static MySqlDbType Blob;
    public static MySqlDbType VarChar;
    public static MySqlDbType String;
    public static MySqlDbType Geometry;
    public static MySqlDbType UByte;
    public static MySqlDbType UInt16;
    public static MySqlDbType UInt32;
    public static MySqlDbType UInt64;
    public static MySqlDbType UInt24;
    public static MySqlDbType Binary;
    public static MySqlDbType VarBinary;
    public static MySqlDbType TinyText;
    public static MySqlDbType MediumText;
    public static MySqlDbType LongText;
    public static MySqlDbType Text;
    public static MySqlDbType Guid;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class MySqlConnector.MySqlDecimal : ValueType {
    private static Regex s_pattern;
    private string m_value;
    public decimal Value { get; }
    internal MySqlDecimal(string value);
    private static MySqlDecimal();
    public decimal get_Value();
    public double ToDouble();
    public virtual string ToString();
}
public class MySqlConnector.MySqlEndOfStreamException : EndOfStreamException {
    [CompilerGeneratedAttribute]
private int <ExpectedByteCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ReadByteCount>k__BackingField;
    public int ExpectedByteCount { get; }
    public int ReadByteCount { get; }
    internal MySqlEndOfStreamException(int expectedByteCount, int readByteCount);
    [CompilerGeneratedAttribute]
public int get_ExpectedByteCount();
    [CompilerGeneratedAttribute]
public int get_ReadByteCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlError : object {
    [CompilerGeneratedAttribute]
private string <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Level { get; }
    [ObsoleteAttribute("Use ErrorCode")]
public int Code { get; }
    public MySqlErrorCode ErrorCode { get; }
    public string Message { get; }
    internal MySqlError(string level, int code, string message);
    [CompilerGeneratedAttribute]
public string get_Level();
    [CompilerGeneratedAttribute]
public int get_Code();
    [CompilerGeneratedAttribute]
public MySqlErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
public string get_Message();
}
[GeneratedCodeAttribute("https://gist.github.com/bgrainger/791cecb647d514a9dd2f3d83b2387e49", "5")]
public enum MySqlConnector.MySqlErrorCode : Enum {
    public int value__;
    public static MySqlErrorCode ProvidePasswordCallbackFailed;
    public static MySqlErrorCode DelimiterNotSupported;
    public static MySqlErrorCode BulkCopyFailed;
    public static MySqlErrorCode CommandTimeoutExpired;
    public static MySqlErrorCode None;
    public static MySqlErrorCode HashCheck;
    public static MySqlErrorCode ISAMCheck;
    public static MySqlErrorCode No;
    public static MySqlErrorCode Yes;
    public static MySqlErrorCode CannotCreateFile;
    public static MySqlErrorCode CannotCreateTable;
    public static MySqlErrorCode CannotCreateDatabase;
    public static MySqlErrorCode DatabaseCreateExists;
    public static MySqlErrorCode DatabaseDropExists;
    public static MySqlErrorCode DatabaseDropDelete;
    public static MySqlErrorCode DatabaseDropRemoveDir;
    public static MySqlErrorCode CannotDeleteFile;
    public static MySqlErrorCode CannotFindSystemRecord;
    public static MySqlErrorCode CannotGetStatus;
    public static MySqlErrorCode CannotGetWorkingDirectory;
    public static MySqlErrorCode CannotLock;
    public static MySqlErrorCode CannotOpenFile;
    public static MySqlErrorCode FileNotFound;
    public static MySqlErrorCode CannotReadDirectory;
    public static MySqlErrorCode CannotSetWorkingDirectory;
    public static MySqlErrorCode CheckRead;
    public static MySqlErrorCode DiskFull;
    public static MySqlErrorCode DuplicateKey;
    public static MySqlErrorCode ErrorOnClose;
    public static MySqlErrorCode ErrorOnRead;
    public static MySqlErrorCode ErrorOnRename;
    public static MySqlErrorCode ErrorOnWrite;
    public static MySqlErrorCode FileUsed;
    public static MySqlErrorCode FileSortAborted;
    public static MySqlErrorCode FormNotFound;
    public static MySqlErrorCode GetErrorNumber;
    public static MySqlErrorCode IllegalHA;
    public static MySqlErrorCode KeyNotFound;
    public static MySqlErrorCode NotFormFile;
    public static MySqlErrorCode NotKeyFile;
    public static MySqlErrorCode OldKeyFile;
    public static MySqlErrorCode OpenAsReadOnly;
    public static MySqlErrorCode OutOfMemory;
    public static MySqlErrorCode OutOfSortMemory;
    public static MySqlErrorCode UnexepectedEOF;
    public static MySqlErrorCode ConnectionCountError;
    public static MySqlErrorCode OutOfResources;
    public static MySqlErrorCode UnableToConnectToHost;
    public static MySqlErrorCode HandshakeError;
    public static MySqlErrorCode DatabaseAccessDenied;
    public static MySqlErrorCode AccessDenied;
    public static MySqlErrorCode NoDatabaseSelected;
    public static MySqlErrorCode UnknownCommand;
    public static MySqlErrorCode ColumnCannotBeNull;
    public static MySqlErrorCode UnknownDatabase;
    public static MySqlErrorCode TableExists;
    public static MySqlErrorCode BadTable;
    public static MySqlErrorCode NonUnique;
    public static MySqlErrorCode ServerShutdown;
    public static MySqlErrorCode BadFieldError;
    public static MySqlErrorCode WrongFieldWithGroup;
    public static MySqlErrorCode WrongGroupField;
    public static MySqlErrorCode WrongSumSelected;
    public static MySqlErrorCode WrongValueCount;
    public static MySqlErrorCode TooLongIdentifier;
    public static MySqlErrorCode DuplicateFieldName;
    public static MySqlErrorCode DuplicateKeyName;
    public static MySqlErrorCode DuplicateKeyEntry;
    public static MySqlErrorCode WrongFieldSpecifier;
    public static MySqlErrorCode ParseError;
    public static MySqlErrorCode EmptyQuery;
    public static MySqlErrorCode NonUniqueTable;
    public static MySqlErrorCode InvalidDefault;
    public static MySqlErrorCode MultiplePrimaryKey;
    public static MySqlErrorCode TooManyKeys;
    public static MySqlErrorCode TooManyKeysParts;
    public static MySqlErrorCode TooLongKey;
    public static MySqlErrorCode KeyColumnDoesNotExist;
    public static MySqlErrorCode BlobUsedAsKey;
    public static MySqlErrorCode TooBigFieldLength;
    public static MySqlErrorCode WrongAutoKey;
    public static MySqlErrorCode Ready;
    public static MySqlErrorCode NormalShutdown;
    public static MySqlErrorCode GotSignal;
    public static MySqlErrorCode ShutdownComplete;
    public static MySqlErrorCode ForcingClose;
    public static MySqlErrorCode IPSocketError;
    public static MySqlErrorCode NoSuchIndex;
    public static MySqlErrorCode WrongFieldTerminators;
    public static MySqlErrorCode BlobsAndNoTerminated;
    public static MySqlErrorCode TextFileNotReadable;
    public static MySqlErrorCode FileExists;
    public static MySqlErrorCode LoadInfo;
    public static MySqlErrorCode AlterInfo;
    public static MySqlErrorCode WrongSubKey;
    public static MySqlErrorCode CannotRemoveAllFields;
    public static MySqlErrorCode CannotDropFieldOrKey;
    public static MySqlErrorCode InsertInfo;
    public static MySqlErrorCode UpdateTableUsed;
    public static MySqlErrorCode NoSuchThread;
    public static MySqlErrorCode KillDenied;
    public static MySqlErrorCode NoTablesUsed;
    public static MySqlErrorCode TooBigSet;
    public static MySqlErrorCode NoUniqueLogFile;
    public static MySqlErrorCode TableNotLockedForWrite;
    public static MySqlErrorCode TableNotLocked;
    public static MySqlErrorCode BlobCannotHaveDefault;
    public static MySqlErrorCode WrongDatabaseName;
    public static MySqlErrorCode WrongTableName;
    public static MySqlErrorCode TooBigSelect;
    public static MySqlErrorCode UnknownError;
    public static MySqlErrorCode UnknownProcedure;
    public static MySqlErrorCode WrongParameterCountToProcedure;
    public static MySqlErrorCode WrongParametersToProcedure;
    public static MySqlErrorCode UnknownTable;
    public static MySqlErrorCode FieldSpecifiedTwice;
    public static MySqlErrorCode InvalidGroupFunctionUse;
    public static MySqlErrorCode UnsupportedExtenstion;
    public static MySqlErrorCode TableMustHaveColumns;
    public static MySqlErrorCode RecordFileFull;
    public static MySqlErrorCode UnknownCharacterSet;
    public static MySqlErrorCode TooManyTables;
    public static MySqlErrorCode TooManyFields;
    public static MySqlErrorCode TooBigRowSize;
    public static MySqlErrorCode StackOverrun;
    public static MySqlErrorCode WrongOuterJoin;
    public static MySqlErrorCode NullColumnInIndex;
    public static MySqlErrorCode CannotFindUDF;
    public static MySqlErrorCode CannotInitializeUDF;
    public static MySqlErrorCode UDFNoPaths;
    public static MySqlErrorCode UDFExists;
    public static MySqlErrorCode CannotOpenLibrary;
    public static MySqlErrorCode CannotFindDLEntry;
    public static MySqlErrorCode FunctionNotDefined;
    public static MySqlErrorCode HostIsBlocked;
    public static MySqlErrorCode HostNotPrivileged;
    public static MySqlErrorCode AnonymousUser;
    public static MySqlErrorCode PasswordNotAllowed;
    public static MySqlErrorCode PasswordNoMatch;
    public static MySqlErrorCode UpdateInfo;
    public static MySqlErrorCode CannotCreateThread;
    public static MySqlErrorCode WrongValueCountOnRow;
    public static MySqlErrorCode CannotReopenTable;
    public static MySqlErrorCode InvalidUseOfNull;
    public static MySqlErrorCode RegExpError;
    public static MySqlErrorCode MixOfGroupFunctionAndFields;
    public static MySqlErrorCode NonExistingGrant;
    public static MySqlErrorCode TableAccessDenied;
    public static MySqlErrorCode ColumnAccessDenied;
    public static MySqlErrorCode IllegalGrantForTable;
    public static MySqlErrorCode GrantWrongHostOrUser;
    public static MySqlErrorCode NoSuchTable;
    public static MySqlErrorCode NonExistingTableGrant;
    public static MySqlErrorCode NotAllowedCommand;
    public static MySqlErrorCode SyntaxError;
    public static MySqlErrorCode DelayedCannotChangeLock;
    public static MySqlErrorCode TooManyDelayedThreads;
    public static MySqlErrorCode AbortingConnection;
    public static MySqlErrorCode PacketTooLarge;
    public static MySqlErrorCode NetReadErrorFromPipe;
    public static MySqlErrorCode NetFCntlError;
    public static MySqlErrorCode NetPacketsOutOfOrder;
    public static MySqlErrorCode NetUncompressError;
    public static MySqlErrorCode NetReadError;
    public static MySqlErrorCode NetReadInterrupted;
    public static MySqlErrorCode NetErrorOnWrite;
    public static MySqlErrorCode NetWriteInterrupted;
    public static MySqlErrorCode TooLongString;
    public static MySqlErrorCode TableCannotHandleBlob;
    public static MySqlErrorCode TableCannotHandleAutoIncrement;
    public static MySqlErrorCode DelayedInsertTableLocked;
    public static MySqlErrorCode WrongColumnName;
    public static MySqlErrorCode WrongKeyColumn;
    public static MySqlErrorCode WrongMergeTable;
    public static MySqlErrorCode DuplicateUnique;
    public static MySqlErrorCode BlobKeyWithoutLength;
    public static MySqlErrorCode PrimaryCannotHaveNull;
    public static MySqlErrorCode TooManyRows;
    public static MySqlErrorCode RequiresPrimaryKey;
    public static MySqlErrorCode NoRAIDCompiled;
    public static MySqlErrorCode UpdateWithoutKeysInSafeMode;
    public static MySqlErrorCode KeyDoesNotExist;
    public static MySqlErrorCode CheckNoSuchTable;
    public static MySqlErrorCode CheckNotImplemented;
    public static MySqlErrorCode CannotDoThisDuringATransaction;
    public static MySqlErrorCode ErrorDuringCommit;
    public static MySqlErrorCode ErrorDuringRollback;
    public static MySqlErrorCode ErrorDuringFlushLogs;
    public static MySqlErrorCode ErrorDuringCheckpoint;
    public static MySqlErrorCode NewAbortingConnection;
    public static MySqlErrorCode DumpNotImplemented;
    public static MySqlErrorCode FlushMasterBinLogClosed;
    public static MySqlErrorCode IndexRebuild;
    public static MySqlErrorCode MasterError;
    public static MySqlErrorCode MasterNetRead;
    public static MySqlErrorCode MasterNetWrite;
    public static MySqlErrorCode FullTextMatchingKeyNotFound;
    public static MySqlErrorCode LockOrActiveTransaction;
    public static MySqlErrorCode UnknownSystemVariable;
    public static MySqlErrorCode CrashedOnUsage;
    public static MySqlErrorCode CrashedOnRepair;
    public static MySqlErrorCode WarningNotCompleteRollback;
    public static MySqlErrorCode TransactionCacheFull;
    public static MySqlErrorCode SlaveMustStop;
    public static MySqlErrorCode SlaveNotRunning;
    public static MySqlErrorCode BadSlave;
    public static MySqlErrorCode MasterInfo;
    public static MySqlErrorCode SlaveThread;
    public static MySqlErrorCode TooManyUserConnections;
    public static MySqlErrorCode SetConstantsOnly;
    public static MySqlErrorCode LockWaitTimeout;
    public static MySqlErrorCode LockTableFull;
    public static MySqlErrorCode ReadOnlyTransaction;
    public static MySqlErrorCode DropDatabaseWithReadLock;
    public static MySqlErrorCode CreateDatabaseWithReadLock;
    public static MySqlErrorCode WrongArguments;
    public static MySqlErrorCode NoPermissionToCreateUser;
    public static MySqlErrorCode UnionTablesInDifferentDirectory;
    public static MySqlErrorCode LockDeadlock;
    public static MySqlErrorCode TableCannotHandleFullText;
    public static MySqlErrorCode CannotAddForeignConstraint;
    public static MySqlErrorCode NoReferencedRow;
    public static MySqlErrorCode RowIsReferenced;
    public static MySqlErrorCode ConnectToMaster;
    public static MySqlErrorCode QueryOnMaster;
    public static MySqlErrorCode ErrorWhenExecutingCommand;
    public static MySqlErrorCode WrongUsage;
    public static MySqlErrorCode WrongNumberOfColumnsInSelect;
    public static MySqlErrorCode CannotUpdateWithReadLock;
    public static MySqlErrorCode MixingNotAllowed;
    public static MySqlErrorCode DuplicateArgument;
    public static MySqlErrorCode UserLimitReached;
    public static MySqlErrorCode SpecifiedAccessDeniedError;
    public static MySqlErrorCode LocalVariableError;
    public static MySqlErrorCode GlobalVariableError;
    public static MySqlErrorCode NotDefaultError;
    public static MySqlErrorCode WrongValueForVariable;
    public static MySqlErrorCode WrongTypeForVariable;
    public static MySqlErrorCode VariableCannotBeRead;
    public static MySqlErrorCode CannotUseOptionHere;
    public static MySqlErrorCode NotSupportedYet;
    public static MySqlErrorCode MasterFatalErrorReadingBinLog;
    public static MySqlErrorCode SlaveIgnoredTable;
    public static MySqlErrorCode IncorrectGlobalLocalVariable;
    public static MySqlErrorCode WrongForeignKeyDefinition;
    public static MySqlErrorCode KeyReferenceDoesNotMatchTableReference;
    public static MySqlErrorCode OpearnColumnsError;
    public static MySqlErrorCode SubQueryNoOneRow;
    public static MySqlErrorCode UnknownStatementHandler;
    public static MySqlErrorCode CorruptHelpDatabase;
    public static MySqlErrorCode CyclicReference;
    public static MySqlErrorCode AutoConvert;
    public static MySqlErrorCode IllegalReference;
    public static MySqlErrorCode DerivedMustHaveAlias;
    public static MySqlErrorCode SelectReduced;
    public static MySqlErrorCode TableNameNotAllowedHere;
    public static MySqlErrorCode NotSupportedAuthMode;
    public static MySqlErrorCode SpatialCannotHaveNull;
    public static MySqlErrorCode CollationCharsetMismatch;
    public static MySqlErrorCode SlaveWasRunning;
    public static MySqlErrorCode SlaveWasNotRunning;
    public static MySqlErrorCode TooBigForUncompress;
    public static MySqlErrorCode ZipLibMemoryError;
    public static MySqlErrorCode ZipLibBufferError;
    public static MySqlErrorCode ZipLibDataError;
    public static MySqlErrorCode CutValueGroupConcat;
    public static MySqlErrorCode WarningTooFewRecords;
    public static MySqlErrorCode WarningTooManyRecords;
    public static MySqlErrorCode WarningNullToNotNull;
    public static MySqlErrorCode WarningDataOutOfRange;
    [ObsoleteAttribute("Use WarningDataTruncated.")]
public static MySqlErrorCode WaningDataTruncated;
    public static MySqlErrorCode WarningDataTruncated;
    [ObsoleteAttribute("Use WarningUsingOtherHandler.")]
public static MySqlErrorCode WaningUsingOtherHandler;
    public static MySqlErrorCode WarningUsingOtherHandler;
    public static MySqlErrorCode CannotAggregateTwoCollations;
    public static MySqlErrorCode DropUserError;
    public static MySqlErrorCode RevokeGrantsError;
    public static MySqlErrorCode CannotAggregateThreeCollations;
    public static MySqlErrorCode CannotAggregateNCollations;
    public static MySqlErrorCode VariableIsNotStructure;
    public static MySqlErrorCode UnknownCollation;
    public static MySqlErrorCode SlaveIgnoreSSLParameters;
    public static MySqlErrorCode ServerIsInSecureAuthMode;
    [ObsoleteAttribute("Use WarningFieldResolved.")]
public static MySqlErrorCode WaningFieldResolved;
    public static MySqlErrorCode WarningFieldResolved;
    public static MySqlErrorCode BadSlaveUntilCondition;
    public static MySqlErrorCode MissingSkipSlave;
    public static MySqlErrorCode ErrorUntilConditionIgnored;
    public static MySqlErrorCode WrongNameForIndex;
    public static MySqlErrorCode WrongNameForCatalog;
    public static MySqlErrorCode WarningQueryCacheResize;
    public static MySqlErrorCode BadFullTextColumn;
    public static MySqlErrorCode UnknownKeyCache;
    public static MySqlErrorCode WarningHostnameWillNotWork;
    public static MySqlErrorCode UnknownStorageEngine;
    [ObsoleteAttribute("Use WarningDeprecatedSyntax.")]
public static MySqlErrorCode WaningDeprecatedSyntax;
    public static MySqlErrorCode WarningDeprecatedSyntax;
    public static MySqlErrorCode NonUpdateableTable;
    public static MySqlErrorCode FeatureDisabled;
    public static MySqlErrorCode OptionPreventsStatement;
    public static MySqlErrorCode DuplicatedValueInType;
    public static MySqlErrorCode TruncatedWrongValue;
    public static MySqlErrorCode TooMuchAutoTimestampColumns;
    public static MySqlErrorCode InvalidOnUpdate;
    public static MySqlErrorCode UnsupportedPreparedStatement;
    public static MySqlErrorCode GetErroMessage;
    public static MySqlErrorCode GetTemporaryErrorMessage;
    public static MySqlErrorCode UnknownTimeZone;
    public static MySqlErrorCode WarningInvalidTimestamp;
    public static MySqlErrorCode InvalidCharacterString;
    public static MySqlErrorCode WarningAllowedPacketOverflowed;
    public static MySqlErrorCode ConflictingDeclarations;
    public static MySqlErrorCode StoredProcedureNoRecursiveCreate;
    public static MySqlErrorCode StoredProcedureAlreadyExists;
    public static MySqlErrorCode StoredProcedureDoesNotExist;
    public static MySqlErrorCode StoredProcedureDropFailed;
    public static MySqlErrorCode StoredProcedureStoreFailed;
    public static MySqlErrorCode StoredProcedureLiLabelMismatch;
    public static MySqlErrorCode StoredProcedureLabelRedefine;
    public static MySqlErrorCode StoredProcedureLabelMismatch;
    public static MySqlErrorCode StoredProcedureUninitializedVariable;
    public static MySqlErrorCode StoredProcedureBadSelect;
    public static MySqlErrorCode StoredProcedureBadReturn;
    public static MySqlErrorCode StoredProcedureBadStatement;
    public static MySqlErrorCode UpdateLogDeprecatedIgnored;
    public static MySqlErrorCode UpdateLogDeprecatedTranslated;
    public static MySqlErrorCode QueryInterrupted;
    public static MySqlErrorCode StoredProcedureNumberOfArguments;
    public static MySqlErrorCode StoredProcedureConditionMismatch;
    public static MySqlErrorCode StoredProcedureNoReturn;
    public static MySqlErrorCode StoredProcedureNoReturnEnd;
    public static MySqlErrorCode StoredProcedureBadCursorQuery;
    public static MySqlErrorCode StoredProcedureBadCursorSelect;
    public static MySqlErrorCode StoredProcedureCursorMismatch;
    public static MySqlErrorCode StoredProcedureAlreadyOpen;
    public static MySqlErrorCode StoredProcedureCursorNotOpen;
    public static MySqlErrorCode StoredProcedureUndeclaredVariabel;
    public static MySqlErrorCode StoredProcedureWrongNumberOfFetchArguments;
    public static MySqlErrorCode StoredProcedureFetchNoData;
    public static MySqlErrorCode StoredProcedureDuplicateParameter;
    public static MySqlErrorCode StoredProcedureDuplicateVariable;
    public static MySqlErrorCode StoredProcedureDuplicateCondition;
    public static MySqlErrorCode StoredProcedureDuplicateCursor;
    public static MySqlErrorCode StoredProcedureCannotAlter;
    public static MySqlErrorCode StoredProcedureSubSelectNYI;
    public static MySqlErrorCode StatementNotAllowedInStoredFunctionOrTrigger;
    public static MySqlErrorCode StoredProcedureVariableConditionAfterCursorHandler;
    public static MySqlErrorCode StoredProcedureCursorAfterHandler;
    public static MySqlErrorCode StoredProcedureCaseNotFound;
    public static MySqlErrorCode FileParserTooBigFile;
    public static MySqlErrorCode FileParserBadHeader;
    public static MySqlErrorCode FileParserEOFInComment;
    public static MySqlErrorCode FileParserErrorInParameter;
    public static MySqlErrorCode FileParserEOFInUnknownParameter;
    public static MySqlErrorCode ViewNoExplain;
    public static MySqlErrorCode FrmUnknownType;
    public static MySqlErrorCode WrongObject;
    public static MySqlErrorCode NonUpdateableColumn;
    public static MySqlErrorCode ViewSelectDerived;
    public static MySqlErrorCode ViewSelectClause;
    public static MySqlErrorCode ViewSelectVariable;
    public static MySqlErrorCode ViewSelectTempTable;
    public static MySqlErrorCode ViewWrongList;
    public static MySqlErrorCode WarningViewMerge;
    public static MySqlErrorCode WarningViewWithoutKey;
    public static MySqlErrorCode ViewInvalid;
    public static MySqlErrorCode StoredProcedureNoDropStoredProcedure;
    public static MySqlErrorCode StoredProcedureGotoInHandler;
    public static MySqlErrorCode TriggerAlreadyExists;
    public static MySqlErrorCode TriggerDoesNotExist;
    public static MySqlErrorCode TriggerOnViewOrTempTable;
    public static MySqlErrorCode TriggerCannotChangeRow;
    public static MySqlErrorCode TriggerNoSuchRowInTrigger;
    public static MySqlErrorCode NoDefaultForField;
    public static MySqlErrorCode DivisionByZero;
    public static MySqlErrorCode TruncatedWrongValueForField;
    public static MySqlErrorCode IllegalValueForType;
    public static MySqlErrorCode ViewNonUpdatableCheck;
    public static MySqlErrorCode ViewCheckFailed;
    public static MySqlErrorCode PrecedureAccessDenied;
    public static MySqlErrorCode RelayLogFail;
    public static MySqlErrorCode PasswordLength;
    public static MySqlErrorCode UnknownTargetBinLog;
    public static MySqlErrorCode IOErrorLogIndexRead;
    public static MySqlErrorCode BinLogPurgeProhibited;
    public static MySqlErrorCode FSeekFail;
    public static MySqlErrorCode BinLogPurgeFatalError;
    public static MySqlErrorCode LogInUse;
    public static MySqlErrorCode LogPurgeUnknownError;
    public static MySqlErrorCode RelayLogInit;
    public static MySqlErrorCode NoBinaryLogging;
    public static MySqlErrorCode ReservedSyntax;
    public static MySqlErrorCode WSAStartupFailed;
    public static MySqlErrorCode DifferentGroupsProcedure;
    public static MySqlErrorCode NoGroupForProcedure;
    public static MySqlErrorCode OrderWithProcedure;
    public static MySqlErrorCode LoggingProhibitsChangingOf;
    public static MySqlErrorCode NoFileMapping;
    public static MySqlErrorCode WrongMagic;
    public static MySqlErrorCode PreparedStatementManyParameters;
    public static MySqlErrorCode KeyPartZero;
    public static MySqlErrorCode ViewChecksum;
    public static MySqlErrorCode ViewMultiUpdate;
    public static MySqlErrorCode ViewNoInsertFieldList;
    public static MySqlErrorCode ViewDeleteMergeView;
    public static MySqlErrorCode CannotUser;
    public static MySqlErrorCode XAERNotA;
    public static MySqlErrorCode XAERInvalid;
    public static MySqlErrorCode XAERRemoveFail;
    public static MySqlErrorCode XAEROutside;
    public static MySqlErrorCode XAERRemoveError;
    public static MySqlErrorCode XARBRollback;
    public static MySqlErrorCode NonExistingProcedureGrant;
    public static MySqlErrorCode ProcedureAutoGrantFail;
    public static MySqlErrorCode ProcedureAutoRevokeFail;
    public static MySqlErrorCode DataTooLong;
    public static MySqlErrorCode StoredProcedureSQLState;
    public static MySqlErrorCode StartupError;
    public static MySqlErrorCode LoadFromFixedSizeRowsToVariable;
    public static MySqlErrorCode CannotCreateUserWithGrant;
    public static MySqlErrorCode WrongValueForType;
    public static MySqlErrorCode TableDefinitionChanged;
    public static MySqlErrorCode StoredProcedureDuplicateHandler;
    public static MySqlErrorCode StoredProcedureNotVariableArgument;
    public static MySqlErrorCode StoredProcedureNoReturnSet;
    public static MySqlErrorCode CannotCreateGeometryObject;
    public static MySqlErrorCode FailedRoutineBreaksBinLog;
    public static MySqlErrorCode BinLogUnsafeRoutine;
    public static MySqlErrorCode BinLogCreateRoutineNeedSuper;
    public static MySqlErrorCode ExecuteStatementWithOpenCursor;
    public static MySqlErrorCode StatementHasNoOpenCursor;
    public static MySqlErrorCode CommitNotAllowedIfStoredFunctionOrTrigger;
    public static MySqlErrorCode NoDefaultForViewField;
    public static MySqlErrorCode StoredProcedureNoRecursion;
    public static MySqlErrorCode TooBigScale;
    public static MySqlErrorCode TooBigPrecision;
    public static MySqlErrorCode MBiggerThanD;
    public static MySqlErrorCode WrongLockOfSystemTable;
    public static MySqlErrorCode ConnectToForeignDataSource;
    public static MySqlErrorCode QueryOnForeignDataSource;
    public static MySqlErrorCode ForeignDataSourceDoesNotExist;
    public static MySqlErrorCode ForeignDataStringInvalidCannotCreate;
    public static MySqlErrorCode ForeignDataStringInvalid;
    public static MySqlErrorCode CannotCreateFederatedTable;
    public static MySqlErrorCode TriggerInWrongSchema;
    public static MySqlErrorCode StackOverrunNeedMore;
    public static MySqlErrorCode TooLongBody;
    public static MySqlErrorCode WarningCannotDropDefaultKeyCache;
    public static MySqlErrorCode TooBigDisplayWidth;
    public static MySqlErrorCode XAERDuplicateID;
    public static MySqlErrorCode DateTimeFunctionOverflow;
    public static MySqlErrorCode CannotUpdateUsedTableInStoredFunctionOrTrigger;
    public static MySqlErrorCode ViewPreventUpdate;
    public static MySqlErrorCode PreparedStatementNoRecursion;
    public static MySqlErrorCode StoredProcedureCannotSetAutoCommit;
    public static MySqlErrorCode MalformedDefiner;
    public static MySqlErrorCode ViewFrmNoUser;
    public static MySqlErrorCode ViewOtherUser;
    public static MySqlErrorCode NoSuchUser;
    public static MySqlErrorCode ForbidSchemaChange;
    public static MySqlErrorCode RowIsReferenced2;
    public static MySqlErrorCode NoReferencedRow2;
    public static MySqlErrorCode StoredProcedureBadVariableShadow;
    public static MySqlErrorCode TriggerNoDefiner;
    public static MySqlErrorCode OldFileFormat;
    public static MySqlErrorCode StoredProcedureRecursionLimit;
    public static MySqlErrorCode StoredProcedureTableCorrupt;
    public static MySqlErrorCode StoredProcedureWrongName;
    public static MySqlErrorCode TableNeedsUpgrade;
    public static MySqlErrorCode StoredProcedureNoAggregate;
    public static MySqlErrorCode MaxPreparedStatementCountReached;
    public static MySqlErrorCode ViewRecursive;
    public static MySqlErrorCode NonGroupingFieldUsed;
    public static MySqlErrorCode TableCannotHandleSpatialKeys;
    public static MySqlErrorCode NoTriggersOnSystemSchema;
    public static MySqlErrorCode RemovedSpaces;
    public static MySqlErrorCode AutoIncrementReadFailed;
    public static MySqlErrorCode UserNameError;
    public static MySqlErrorCode HostNameError;
    public static MySqlErrorCode WrongStringLength;
    public static MySqlErrorCode NonInsertableTable;
    public static MySqlErrorCode AdminWrongMergeTable;
    public static MySqlErrorCode TooHighLevelOfNestingForSelect;
    public static MySqlErrorCode NameBecomesEmpty;
    public static MySqlErrorCode AmbiguousFieldTerm;
    public static MySqlErrorCode ForeignServerExists;
    public static MySqlErrorCode ForeignServerDoesNotExist;
    public static MySqlErrorCode IllegalHACreateOption;
    public static MySqlErrorCode PartitionRequiresValues;
    public static MySqlErrorCode PartitionWrongValues;
    public static MySqlErrorCode PartitionMaxValue;
    public static MySqlErrorCode PartitionSubPartition;
    public static MySqlErrorCode PartitionSubPartMix;
    public static MySqlErrorCode PartitionWrongNoPart;
    public static MySqlErrorCode PartitionWrongNoSubPart;
    public static MySqlErrorCode WrongExpressionInParitionFunction;
    public static MySqlErrorCode NoConstantExpressionInRangeOrListError;
    public static MySqlErrorCode FieldNotFoundPartitionErrror;
    public static MySqlErrorCode ListOfFieldsOnlyInHash;
    public static MySqlErrorCode InconsistentPartitionInfo;
    public static MySqlErrorCode PartitionFunctionNotAllowed;
    public static MySqlErrorCode PartitionsMustBeDefined;
    public static MySqlErrorCode RangeNotIncreasing;
    public static MySqlErrorCode InconsistentTypeOfFunctions;
    public static MySqlErrorCode MultipleDefinitionsConstantInListPartition;
    public static MySqlErrorCode PartitionEntryError;
    public static MySqlErrorCode MixHandlerError;
    public static MySqlErrorCode PartitionNotDefined;
    public static MySqlErrorCode TooManyPartitions;
    public static MySqlErrorCode SubPartitionError;
    public static MySqlErrorCode CannotCreateHandlerFile;
    public static MySqlErrorCode BlobFieldInPartitionFunction;
    public static MySqlErrorCode UniqueKeyNeedAllFieldsInPartitioningFunction;
    public static MySqlErrorCode NoPartitions;
    public static MySqlErrorCode PartitionManagementOnNoPartitioned;
    public static MySqlErrorCode ForeignKeyOnPartitioned;
    public static MySqlErrorCode DropPartitionNonExistent;
    public static MySqlErrorCode DropLastPartition;
    public static MySqlErrorCode CoalesceOnlyOnHashPartition;
    public static MySqlErrorCode ReorganizeHashOnlyOnSameNumber;
    public static MySqlErrorCode ReorganizeNoParameter;
    public static MySqlErrorCode OnlyOnRangeListPartition;
    public static MySqlErrorCode AddPartitionSubPartition;
    public static MySqlErrorCode AddPartitionNoNewPartition;
    public static MySqlErrorCode CoalescePartitionNoPartition;
    public static MySqlErrorCode ReorganizePartitionNotExist;
    public static MySqlErrorCode SameNamePartition;
    public static MySqlErrorCode NoBinLog;
    public static MySqlErrorCode ConsecutiveReorganizePartitions;
    public static MySqlErrorCode ReorganizeOutsideRange;
    public static MySqlErrorCode PartitionFunctionFailure;
    public static MySqlErrorCode PartitionStateError;
    public static MySqlErrorCode LimitedPartitionRange;
    public static MySqlErrorCode PluginIsNotLoaded;
    public static MySqlErrorCode WrongValue;
    public static MySqlErrorCode NoPartitionForGivenValue;
    public static MySqlErrorCode FileGroupOptionOnlyOnce;
    public static MySqlErrorCode CreateFileGroupFailed;
    public static MySqlErrorCode DropFileGroupFailed;
    public static MySqlErrorCode TableSpaceAutoExtend;
    public static MySqlErrorCode WrongSizeNumber;
    public static MySqlErrorCode SizeOverflow;
    public static MySqlErrorCode AlterFileGroupFailed;
    public static MySqlErrorCode BinLogRowLogginFailed;
    public static MySqlErrorCode BinLogRowWrongTableDefinition;
    public static MySqlErrorCode BinLogRowRBRToSBR;
    public static MySqlErrorCode EventAlreadyExists;
    public static MySqlErrorCode EventStoreFailed;
    public static MySqlErrorCode EventDoesNotExist;
    public static MySqlErrorCode EventCannotAlter;
    public static MySqlErrorCode EventDropFailed;
    public static MySqlErrorCode EventIntervalNotPositiveOrTooBig;
    public static MySqlErrorCode EventEndsBeforeStarts;
    public static MySqlErrorCode EventExecTimeInThePast;
    public static MySqlErrorCode EventOpenTableFailed;
    public static MySqlErrorCode EventNeitherMExpresssionNorMAt;
    public static MySqlErrorCode ColumnCountDoesNotMatchCorrupted;
    public static MySqlErrorCode CannotLoadFromTable;
    public static MySqlErrorCode EventCannotDelete;
    public static MySqlErrorCode EventCompileError;
    public static MySqlErrorCode EventSameName;
    public static MySqlErrorCode EventDataTooLong;
    public static MySqlErrorCode DropIndexForeignKey;
    public static MySqlErrorCode WarningDeprecatedSyntaxWithVersion;
    public static MySqlErrorCode CannotWriteLockLogTable;
    public static MySqlErrorCode CannotLockLogTable;
    public static MySqlErrorCode ForeignDuplicateKey;
    public static MySqlErrorCode ColumnCountDoesNotMatchPleaseUpdate;
    public static MySqlErrorCode TemoraryTablePreventSwitchOutOfRBR;
    public static MySqlErrorCode StoredFunctionPreventsSwitchBinLogFormat;
    public static MySqlErrorCode NDBCannotSwitchBinLogFormat;
    public static MySqlErrorCode PartitionNoTemporary;
    public static MySqlErrorCode PartitionConstantDomain;
    public static MySqlErrorCode PartitionFunctionIsNotAllowed;
    public static MySqlErrorCode DDLLogError;
    public static MySqlErrorCode NullInValuesLessThan;
    public static MySqlErrorCode WrongPartitionName;
    public static MySqlErrorCode CannotChangeTransactionIsolation;
    public static MySqlErrorCode DuplicateEntryAutoIncrementCase;
    public static MySqlErrorCode EventModifyQueueError;
    public static MySqlErrorCode EventSetVariableError;
    public static MySqlErrorCode PartitionMergeError;
    public static MySqlErrorCode CannotActivateLog;
    public static MySqlErrorCode RBRNotAvailable;
    public static MySqlErrorCode Base64DecodeError;
    public static MySqlErrorCode EventRecursionForbidden;
    public static MySqlErrorCode EventsDatabaseError;
    public static MySqlErrorCode OnlyIntegersAllowed;
    public static MySqlErrorCode UnsupportedLogEngine;
    public static MySqlErrorCode BadLogStatement;
    public static MySqlErrorCode CannotRenameLogTable;
    public static MySqlErrorCode WrongParameterCountToNativeFCT;
    public static MySqlErrorCode WrongParametersToNativeFCT;
    public static MySqlErrorCode WrongParametersToStoredFCT;
    public static MySqlErrorCode NativeFCTNameCollision;
    public static MySqlErrorCode DuplicateEntryWithKeyName;
    public static MySqlErrorCode BinLogPurgeEMFile;
    public static MySqlErrorCode EventCannotCreateInThePast;
    public static MySqlErrorCode EventCannotAlterInThePast;
    public static MySqlErrorCode SlaveIncident;
    public static MySqlErrorCode NoPartitionForGivenValueSilent;
    public static MySqlErrorCode BinLogUnsafeStatement;
    public static MySqlErrorCode SlaveFatalError;
    public static MySqlErrorCode SlaveRelayLogReadFailure;
    public static MySqlErrorCode SlaveRelayLogWriteFailure;
    public static MySqlErrorCode SlaveCreateEventFailure;
    public static MySqlErrorCode SlaveMasterComFailure;
    public static MySqlErrorCode BinLogLoggingImpossible;
    public static MySqlErrorCode ViewNoCreationContext;
    public static MySqlErrorCode ViewInvalidCreationContext;
    public static MySqlErrorCode StoredRoutineInvalidCreateionContext;
    public static MySqlErrorCode TiggerCorruptedFile;
    public static MySqlErrorCode TriggerNoCreationContext;
    public static MySqlErrorCode TriggerInvalidCreationContext;
    public static MySqlErrorCode EventInvalidCreationContext;
    public static MySqlErrorCode TriggerCannotOpenTable;
    public static MySqlErrorCode CannotCreateSubRoutine;
    [ObsoleteAttribute("Use CannotCreateSubRoutine")]
public static MySqlErrorCode CannoCreateSubRoutine;
    public static MySqlErrorCode SlaveAmbiguousExecMode;
    public static MySqlErrorCode NoFormatDescriptionEventBeforeBinLogStatement;
    public static MySqlErrorCode SlaveCorruptEvent;
    public static MySqlErrorCode LoadDataInvalidColumn;
    public static MySqlErrorCode LogPurgeNoFile;
    public static MySqlErrorCode XARBTimeout;
    public static MySqlErrorCode XARBDeadlock;
    public static MySqlErrorCode NeedRePrepare;
    public static MySqlErrorCode DelayedNotSupported;
    public static MySqlErrorCode WarningNoMasterInfo;
    public static MySqlErrorCode WarningOptionIgnored;
    public static MySqlErrorCode WarningPluginDeleteBuiltIn;
    public static MySqlErrorCode WarningPluginBusy;
    public static MySqlErrorCode VariableIsReadonly;
    public static MySqlErrorCode WarningEngineTransactionRollback;
    public static MySqlErrorCode SlaveHeartbeatFailure;
    public static MySqlErrorCode SlaveHeartbeatValueOutOfRange;
    public static MySqlErrorCode NDBReplicationSchemaError;
    public static MySqlErrorCode ConflictFunctionParseError;
    public static MySqlErrorCode ExcepionsWriteError;
    public static MySqlErrorCode TooLongTableComment;
    public static MySqlErrorCode TooLongFieldComment;
    public static MySqlErrorCode FunctionInExistentNameCollision;
    public static MySqlErrorCode DatabaseNameError;
    public static MySqlErrorCode TableNameErrror;
    public static MySqlErrorCode PartitionNameError;
    public static MySqlErrorCode SubPartitionNameError;
    public static MySqlErrorCode TemporaryNameError;
    public static MySqlErrorCode RenamedNameError;
    public static MySqlErrorCode TooManyConcurrentTransactions;
    public static MySqlErrorCode WarningNonASCIISeparatorNotImplemented;
    public static MySqlErrorCode DebugSyncTimeout;
    public static MySqlErrorCode DebugSyncHitLimit;
    public static MySqlErrorCode WarnDeprecatedSyntaxNoReplacement;
    public static MySqlErrorCode TooLongIndexComment;
    public static MySqlErrorCode LockAborted;
    public static MySqlErrorCode DataOutOfRange;
    public static MySqlErrorCode CannotExecuteInReadOnlyTransaction;
    public static MySqlErrorCode InnodbReadOnly;
    public static MySqlErrorCode TableCorrupt;
    public static MySqlErrorCode TempFileWriteFailure;
    public static MySqlErrorCode ExplainNotSupported;
    public static MySqlErrorCode InvalidFieldSize;
    public static MySqlErrorCode QueryTimeout;
    public static MySqlErrorCode UserLockWrongName;
    public static MySqlErrorCode UserLockDeadlock;
    public static MySqlErrorCode InvalidJsonData;
    public static MySqlErrorCode InvalidJsonText;
    public static MySqlErrorCode InvalidJsonTextInParam;
    public static MySqlErrorCode InvalidJsonBinaryData;
    public static MySqlErrorCode InvalidJsonPath;
    public static MySqlErrorCode InvalidJsonCharset;
    public static MySqlErrorCode InvalidJsonCharsetInFunction;
    public static MySqlErrorCode InvalidTypeForJson;
    public static MySqlErrorCode InvalidCastToJson;
    public static MySqlErrorCode InvalidJsonPathCharset;
    public static MySqlErrorCode InvalidJsonPathWildcard;
    public static MySqlErrorCode JsonValueTooBig;
    public static MySqlErrorCode JsonKeyTooBig;
    public static MySqlErrorCode JsonUsedAsKey;
    public static MySqlErrorCode JsonVacuousPath;
    public static MySqlErrorCode JsonBadOneOrAllArg;
    public static MySqlErrorCode NumericJsonValueOutOfRange;
    public static MySqlErrorCode InvalidJsonValueForCast;
    public static MySqlErrorCode JsonDocumentTooDeep;
    public static MySqlErrorCode JsonDocumentNullKey;
    public static MySqlErrorCode InvalidJsonPathArrayCell;
    public static MySqlErrorCode NoSuchDb;
    public static MySqlErrorCode MissingJsonTableValue;
    public static MySqlErrorCode WrongJsonTableValue;
    public static MySqlErrorCode JsonTableValueOutOfRange;
    public static MySqlErrorCode JsonTableMaxNestedPath;
    public static MySqlErrorCode InvalidJsonType;
    public static MySqlErrorCode CannotConvertString;
    public static MySqlErrorCode ClientInteractionTimeout;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlException : DbException {
    [CompilerGeneratedAttribute]
private int <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private MySqlErrorCode <ErrorCode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SqlState>k__BackingField;
    [NullableAttribute("2")]
private IDictionary m_data;
    public int Number { get; }
    public MySqlErrorCode ErrorCode { get; }
    [NullableAttribute("2")]
public string SqlState { get; }
    public bool IsTransient { get; }
    public IDictionary Data { get; }
    private MySqlException(SerializationInfo info, StreamingContext context);
    internal MySqlException(string message);
    internal MySqlException(string message, Exception innerException);
    internal MySqlException(MySqlErrorCode errorCode, string message);
    internal MySqlException(MySqlErrorCode errorCode, string message, Exception innerException);
    internal MySqlException(MySqlErrorCode errorCode, string sqlState, string message);
    [NullableContextAttribute("2")]
internal MySqlException(MySqlErrorCode errorCode, string sqlState, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_Number();
    [CompilerGeneratedAttribute]
public MySqlErrorCode get_ErrorCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_SqlState();
    public virtual bool get_IsTransient();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual IDictionary get_Data();
    internal static MySqlException CreateForTimeout();
    internal static MySqlException CreateForTimeout(Exception innerException);
    private static bool IsErrorTransient(MySqlErrorCode errorCode);
}
public class MySqlConnector.MySqlGeometry : object {
    [NullableAttribute("1")]
private Byte[] m_bytes;
    public int SRID { get; }
    public ReadOnlySpan`1<byte> WKB { get; }
    [NullableAttribute("1")]
public Byte[] Value { get; }
    internal ReadOnlySpan`1<byte> ValueSpan { get; }
    [NullableContextAttribute("1")]
internal MySqlGeometry(Byte[] bytes);
    public static MySqlGeometry FromWkb(int srid, ReadOnlySpan`1<byte> wkb);
    public static MySqlGeometry FromMySql(ReadOnlySpan`1<byte> value);
    public int get_SRID();
    public ReadOnlySpan`1<byte> get_WKB();
    [NullableContextAttribute("1")]
public Byte[] get_Value();
    internal ReadOnlySpan`1<byte> get_ValueSpan();
}
public enum MySqlConnector.MySqlGuidFormat : Enum {
    public int value__;
    public static MySqlGuidFormat Default;
    public static MySqlGuidFormat None;
    public static MySqlGuidFormat Char36;
    public static MySqlGuidFormat Char32;
    public static MySqlGuidFormat Binary16;
    public static MySqlGuidFormat TimeSwapBinary16;
    public static MySqlGuidFormat LittleEndianBinary16;
}
public class MySqlConnector.MySqlHelper : object {
    [ObsoleteAttribute("Use MySqlConnection.ClearAllPools or MySqlConnection.ClearAllPoolsAsync")]
public static void ClearConnectionPools();
    [NullableContextAttribute("1")]
public static string EscapeString(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlInfoMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MySqlError> <Errors>k__BackingField;
    public IReadOnlyList`1<MySqlError> Errors { get; }
    internal MySqlInfoMessageEventArgs(IReadOnlyList`1<MySqlError> errors);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<MySqlError> get_Errors();
}
public class MySqlConnector.MySqlInfoMessageEventHandler : MulticastDelegate {
    public MySqlInfoMessageEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MySqlInfoMessageEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlInfoMessageEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum MySqlConnector.MySqlLoadBalance : Enum {
    public int value__;
    public static MySqlLoadBalance RoundRobin;
    public static MySqlLoadBalance FailOver;
    public static MySqlLoadBalance Random;
    public static MySqlLoadBalance LeastConnections;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlParameter : DbParameter {
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceColumnNullMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowVersion <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSetDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalizedParameterName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MySqlParameterCollection <ParameterCollection>k__BackingField;
    private DbType m_dbType;
    private MySqlDbType m_mySqlDbType;
    private string m_name;
    private Nullable`1<ParameterDirection> m_direction;
    private string m_sourceColumn;
    [NullableAttribute("2")]
private object m_value;
    public DbType DbType { get; public set; }
    public MySqlDbType MySqlDbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public string ParameterName { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    internal bool HasSetDirection { get; }
    internal bool HasSetDbType { get; internal set; }
    internal string NormalizedParameterName { get; private set; }
    [NullableAttribute("2")]
internal MySqlParameterCollection ParameterCollection { get; internal set; }
    [NullableAttribute("0")]
private static ReadOnlySpan`1<byte> BinaryBytes { get; }
    [NullableContextAttribute("2")]
public MySqlParameter(string name, object value);
    public MySqlParameter(string name, MySqlDbType mySqlDbType);
    public MySqlParameter(string name, MySqlDbType mySqlDbType, int size);
    public MySqlParameter(string name, MySqlDbType mySqlDbType, int size, string sourceColumn);
    public MySqlParameter(string name, MySqlDbType mySqlDbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    private MySqlParameter(MySqlParameter other);
    private MySqlParameter(MySqlParameter other, string parameterName);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public MySqlDbType get_MySqlDbType();
    public void set_MySqlDbType(MySqlDbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual byte get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(byte value);
    [CompilerGeneratedAttribute]
public virtual byte get_Scale();
    [CompilerGeneratedAttribute]
public virtual void set_Scale(byte value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_SourceColumnNullMapping();
    [CompilerGeneratedAttribute]
public virtual void set_SourceColumnNullMapping(bool value);
    [CompilerGeneratedAttribute]
public virtual DataRowVersion get_SourceVersion();
    [CompilerGeneratedAttribute]
public virtual void set_SourceVersion(DataRowVersion value);
    [NullableContextAttribute("2")]
public virtual object get_Value();
    [NullableContextAttribute("2")]
public virtual void set_Value(object value);
    public virtual void ResetDbType();
    public MySqlParameter Clone();
    private sealed virtual override object System.ICloneable.Clone();
    internal MySqlParameter WithParameterName(string parameterName);
    internal bool get_HasSetDirection();
    [CompilerGeneratedAttribute]
internal bool get_HasSetDbType();
    [CompilerGeneratedAttribute]
internal void set_HasSetDbType(bool value);
    [CompilerGeneratedAttribute]
internal string get_NormalizedParameterName();
    [CompilerGeneratedAttribute]
private void set_NormalizedParameterName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal MySqlParameterCollection get_ParameterCollection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ParameterCollection(MySqlParameterCollection value);
    internal void AppendSqlString(ByteBufferWriter writer, StatementPreparerOptions options);
    internal void AppendBinary(ByteBufferWriter writer, StatementPreparerOptions options);
    private void AppendBinary(ByteBufferWriter writer, object value, StatementPreparerOptions options);
    internal static string NormalizeParameterName(string name);
    private static void WriteDateOnly(ByteBufferWriter writer, DateOnly dateOnly);
    private static void WriteDateTime(ByteBufferWriter writer, DateTime dateTime);
    private static void WriteTime(ByteBufferWriter writer, TimeSpan timeSpan);
    [NullableContextAttribute("0")]
private static ReadOnlySpan`1<byte> get_BinaryBytes();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <AppendSqlString>g__WriteString|68_0(ByteBufferWriter writer, bool noBackslashEscapes, ReadOnlySpan`1<char> value);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static void <AppendSqlString>g__WriteStringChunk|68_1(ByteBufferWriter writer, bool noBackslashEscapes, ReadOnlySpan`1<char> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class MySqlConnector.MySqlParameterCollection : DbParameterCollection {
    private List`1<MySqlParameter> m_parameters;
    private Dictionary`2<string, int> m_nameToIndex;
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public int Count { get; }
    public object SyncRoot { get; }
    public MySqlParameter Item { get; public set; }
    public MySqlParameter Item { get; public set; }
    public MySqlParameter Add(string parameterName, DbType dbType);
    public virtual int Add(object value);
    public MySqlParameter Add(MySqlParameter parameter);
    public MySqlParameter Add(string parameterName, MySqlDbType mySqlDbType);
    public MySqlParameter Add(string parameterName, MySqlDbType mySqlDbType, int size);
    public virtual void AddRange(Array values);
    public MySqlParameter AddWithValue(string parameterName, object value);
    public virtual bool Contains(object value);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public virtual void Clear();
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<MySqlParameter> System.Collections.Generic.IEnumerable<MySqlConnector.MySqlParameter>.GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    [NullableContextAttribute("2")]
internal int NormalizedIndexOf(string parameterName);
    [NullableContextAttribute("2")]
internal int UnsafeIndexOf(string normalizedParameterName);
    public virtual void Insert(int index, object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    public virtual int get_Count();
    public virtual object get_SyncRoot();
    public MySqlParameter get_Item(int index);
    public void set_Item(int index, MySqlParameter value);
    public MySqlParameter get_Item(string name);
    public void set_Item(string name, MySqlParameter value);
    internal void ChangeParameterName(MySqlParameter parameter, string oldName, string newName);
    private void AddParameter(MySqlParameter parameter, int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlProtocolException : InvalidOperationException {
    private MySqlProtocolException(SerializationInfo info, StreamingContext context);
    private MySqlProtocolException(string message);
    internal static MySqlProtocolException CreateForPacketOutOfOrder(int expectedSequenceNumber, int packetSequenceNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlProvidePasswordContext : object {
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    public string Server { get; }
    public int Port { get; }
    public string UserId { get; }
    public string Database { get; }
    internal MySqlProvidePasswordContext(string server, int port, string userId, string database);
    [CompilerGeneratedAttribute]
public string get_Server();
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public string get_Database();
}
public class MySqlConnector.MySqlRowsCopiedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Abort>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RowsCopied>k__BackingField;
    public bool Abort { get; public set; }
    public long RowsCopied { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_Abort();
    [CompilerGeneratedAttribute]
public void set_Abort(bool value);
    [CompilerGeneratedAttribute]
public long get_RowsCopied();
    [CompilerGeneratedAttribute]
internal void set_RowsCopied(long value);
}
public class MySqlConnector.MySqlRowsCopiedEventHandler : MulticastDelegate {
    public MySqlRowsCopiedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MySqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public MySqlCommand Command { get; }
    [NullableContextAttribute("1")]
public MySqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public MySqlCommand get_Command();
}
public class MySqlConnector.MySqlRowUpdatedEventHandler : MulticastDelegate {
    public MySqlRowUpdatedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MySqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public MySqlCommand Command { get; }
    [NullableContextAttribute("1")]
public MySqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public MySqlCommand get_Command();
}
public class MySqlConnector.MySqlRowUpdatingEventHandler : MulticastDelegate {
    public MySqlRowUpdatingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, MySqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MySqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum MySqlConnector.MySqlServerRedirectionMode : Enum {
    public int value__;
    public static MySqlServerRedirectionMode Disabled;
    public static MySqlServerRedirectionMode Preferred;
    public static MySqlServerRedirectionMode Required;
}
public enum MySqlConnector.MySqlSslMode : Enum {
    public int value__;
    public static MySqlSslMode None;
    public static MySqlSslMode Disabled;
    public static MySqlSslMode Preferred;
    public static MySqlSslMode Required;
    public static MySqlSslMode VerifyCA;
    public static MySqlSslMode VerifyFull;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MySqlConnector.MySqlTransaction : DbTransaction {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private MySqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    private ILogger m_logger;
    private bool m_isDisposed;
    [NullableAttribute("2")]
public MySqlConnection Connection { get; private set; }
    [NullableAttribute("2")]
protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal MySqlTransaction(MySqlConnection connection, IsolationLevel isolationLevel, ILogger logger);
    public virtual void Commit();
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlTransaction/<CommitAsync>d__2")]
private Task CommitAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    public virtual void Rollback();
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlTransaction/<RollbackAsync>d__5")]
private Task RollbackAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    public virtual void Release(string savepointName);
    public virtual Task ReleaseAsync(string savepointName, CancellationToken cancellationToken);
    public virtual void Rollback(string savepointName);
    public virtual Task RollbackAsync(string savepointName, CancellationToken cancellationToken);
    public virtual void Save(string savepointName);
    public virtual Task SaveAsync(string savepointName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlTransaction/<ExecuteSavepointAsync>d__12")]
private Task ExecuteSavepointAsync(string command, string savepointName, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public MySqlConnection get_Connection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Connection(MySqlConnection value);
    [NullableContextAttribute("2")]
protected virtual DbConnection get_DbConnection();
    [CompilerGeneratedAttribute]
public virtual IsolationLevel get_IsolationLevel();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    internal ValueTask DisposeAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlTransaction/<DoDisposeAsync>d__25")]
private ValueTask DoDisposeAsync(IOBehavior ioBehavior, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("MySqlConnector.MySqlTransaction/<DoRollback>d__27")]
private Task DoRollback(IOBehavior ioBehavior, CancellationToken cancellationToken);
    private void VerifyValid();
    private static string QuoteIdentifier(string identifier);
}
internal enum MySqlConnector.Protocol.CharacterSet : Enum {
    public ushort value__;
    public static CharacterSet None;
    public static CharacterSet Big5ChineseCaseInsensitive;
    public static CharacterSet Latin2CzechCaseSensitive;
    public static CharacterSet Dec8SwedishCaseInsensitive;
    public static CharacterSet Cp850GeneralCaseInsensitive;
    public static CharacterSet Latin1German1CaseInsensitive;
    public static CharacterSet Hp8EnglishCaseInsensitive;
    public static CharacterSet Koi8rGeneralCaseInsensitive;
    public static CharacterSet Latin1SwedishCaseInsensitive;
    public static CharacterSet Latin2GeneralCaseInsensitive;
    public static CharacterSet Swe7SwedishCaseInsensitive;
    public static CharacterSet AsciiGeneralCaseInsensitive;
    public static CharacterSet UjisJapaneseCaseInsensitive;
    public static CharacterSet SjisJapaneseCaseInsensitive;
    public static CharacterSet Cp1251BulgarianCaseInsensitive;
    public static CharacterSet Latin1DanishCaseInsensitive;
    public static CharacterSet HebrewGeneralCaseInsensitive;
    public static CharacterSet Tis620ThaiCaseInsensitive;
    public static CharacterSet EuckrKoreanCaseInsensitive;
    public static CharacterSet Latin7EstonianCaseSensitive;
    public static CharacterSet Latin2HungarianCaseInsensitive;
    public static CharacterSet Koi8uGeneralCaseInsensitive;
    public static CharacterSet Cp1251UkrainianCaseInsensitive;
    public static CharacterSet Gb2312ChineseCaseInsensitive;
    public static CharacterSet GreekGeneralCaseInsensitive;
    public static CharacterSet Cp1250GeneralCaseInsensitive;
    public static CharacterSet Latin2CroatianCaseInsensitive;
    public static CharacterSet GbkChineseCaseInsensitive;
    public static CharacterSet Cp1257LithuanianCaseInsensitive;
    public static CharacterSet Latin5TurkishCaseInsensitive;
    public static CharacterSet Latin1German2CaseInsensitive;
    public static CharacterSet Armscii8GeneralCaseInsensitive;
    public static CharacterSet Utf8Mb3GeneralCaseInsensitive;
    public static CharacterSet Cp1250CzechCaseSensitive;
    public static CharacterSet Ucs2GeneralCaseInsensitive;
    public static CharacterSet Cp866GeneralCaseInsensitive;
    public static CharacterSet Keybcs2GeneralCaseInsensitive;
    public static CharacterSet MacceGeneralCaseInsensitive;
    public static CharacterSet MacromanGeneralCaseInsensitive;
    public static CharacterSet Cp852GeneralCaseInsensitive;
    public static CharacterSet Latin7GeneralCaseInsensitive;
    public static CharacterSet Latin7GeneralCaseSensitive;
    public static CharacterSet MacceBinary;
    public static CharacterSet Cp1250CroatianCaseInsensitive;
    public static CharacterSet Utf8Mb4GeneralCaseInsensitive;
    public static CharacterSet Utf8Mb4Binary;
    public static CharacterSet Latin1Binary;
    public static CharacterSet Latin1GeneralCaseInsensitive;
    public static CharacterSet Latin1GeneralCaseSensitive;
    public static CharacterSet Cp1251Binary;
    public static CharacterSet Cp1251GeneralCaseInsensitive;
    public static CharacterSet Cp1251GeneralCaseSensitive;
    public static CharacterSet MacromanBinary;
    public static CharacterSet Utf16GeneralCaseInsensitive;
    public static CharacterSet Utf16Binary;
    public static CharacterSet Utf16leGeneralCaseInsensitive;
    public static CharacterSet Cp1256GeneralCaseInsensitive;
    public static CharacterSet Cp1257Binary;
    public static CharacterSet Cp1257GeneralCaseInsensitive;
    public static CharacterSet Utf32GeneralCaseInsensitive;
    public static CharacterSet Utf32Binary;
    public static CharacterSet Utf16leBinary;
    public static CharacterSet Binary;
    public static CharacterSet Armscii8Binary;
    public static CharacterSet AsciiBinary;
    public static CharacterSet Cp1250Binary;
    public static CharacterSet Cp1256Binary;
    public static CharacterSet Cp866Binary;
    public static CharacterSet Dec8Binary;
    public static CharacterSet GreekBinary;
    public static CharacterSet HebrewBinary;
    public static CharacterSet Hp8Binary;
    public static CharacterSet Keybcs2Binary;
    public static CharacterSet Koi8rBinary;
    public static CharacterSet Koi8uBinary;
    public static CharacterSet Utf8Mb3ToLowerCaseInsensitive;
    public static CharacterSet Latin2Binary;
    public static CharacterSet Latin5Binary;
    public static CharacterSet Latin7Binary;
    public static CharacterSet Cp850Binary;
    public static CharacterSet Cp852Binary;
    public static CharacterSet Swe7Binary;
    public static CharacterSet Utf8Mb3Binary;
    public static CharacterSet Big5Binary;
    public static CharacterSet EuckrBinary;
    public static CharacterSet Gb2312Binary;
    public static CharacterSet GbkBinary;
    public static CharacterSet SjisBinary;
    public static CharacterSet Tis620Binary;
    public static CharacterSet Ucs2Binary;
    public static CharacterSet UjisBinary;
    public static CharacterSet Geostd8GeneralCaseInsensitive;
    public static CharacterSet Geostd8Binary;
    public static CharacterSet Latin1SpanishCaseInsensitive;
    public static CharacterSet Cp932JapaneseCaseInsensitive;
    public static CharacterSet Cp932Binary;
    public static CharacterSet EucjpmsJapaneseCaseInsensitive;
    public static CharacterSet EucjpmsBinary;
    public static CharacterSet Cp1250PolishCaseInsensitive;
    public static CharacterSet Utf16UnicodeCaseInsensitive;
    public static CharacterSet Utf16IcelandicCaseInsensitive;
    public static CharacterSet Utf16LatvianCaseInsensitive;
    public static CharacterSet Utf16RomanianCaseInsensitive;
    public static CharacterSet Utf16SlovenianCaseInsensitive;
    public static CharacterSet Utf16PolishCaseInsensitive;
    public static CharacterSet Utf16EstonianCaseInsensitive;
    public static CharacterSet Utf16SpanishCaseInsensitive;
    public static CharacterSet Utf16SwedishCaseInsensitive;
    public static CharacterSet Utf16TurkishCaseInsensitive;
    public static CharacterSet Utf16CzechCaseInsensitive;
    public static CharacterSet Utf16DanishCaseInsensitive;
    public static CharacterSet Utf16LithuanianCaseInsensitive;
    public static CharacterSet Utf16SlovakCaseInsensitive;
    public static CharacterSet Utf16Spanish2CaseInsensitive;
    public static CharacterSet Utf16RomanCaseInsensitive;
    public static CharacterSet Utf16PersianCaseInsensitive;
    public static CharacterSet Utf16EsperantoCaseInsensitive;
    public static CharacterSet Utf16HungarianCaseInsensitive;
    public static CharacterSet Utf16SinhalaCaseInsensitive;
    public static CharacterSet Utf16German2CaseInsensitive;
    public static CharacterSet Utf16CroatianCaseInsensitive;
    public static CharacterSet Utf16Unicode520CaseInsensitive;
    public static CharacterSet Utf16VietnameseCaseInsensitive;
    public static CharacterSet Ucs2UnicodeCaseInsensitive;
    public static CharacterSet Ucs2IcelandicCaseInsensitive;
    public static CharacterSet Ucs2LatvianCaseInsensitive;
    public static CharacterSet Ucs2RomanianCaseInsensitive;
    public static CharacterSet Ucs2SlovenianCaseInsensitive;
    public static CharacterSet Ucs2PolishCaseInsensitive;
    public static CharacterSet Ucs2EstonianCaseInsensitive;
    public static CharacterSet Ucs2SpanishCaseInsensitive;
    public static CharacterSet Ucs2SwedishCaseInsensitive;
    public static CharacterSet Ucs2TurkishCaseInsensitive;
    public static CharacterSet Ucs2CzechCaseInsensitive;
    public static CharacterSet Ucs2DanishCaseInsensitive;
    public static CharacterSet Ucs2LithuanianCaseInsensitive;
    public static CharacterSet Ucs2SlovakCaseInsensitive;
    public static CharacterSet Ucs2Spanish2CaseInsensitive;
    public static CharacterSet Ucs2RomanCaseInsensitive;
    public static CharacterSet Ucs2PersianCaseInsensitive;
    public static CharacterSet Ucs2EsperantoCaseInsensitive;
    public static CharacterSet Ucs2HungarianCaseInsensitive;
    public static CharacterSet Ucs2SinhalaCaseInsensitive;
    public static CharacterSet Ucs2German2CaseInsensitive;
    public static CharacterSet Ucs2CroatianCaseInsensitive;
    public static CharacterSet Ucs2Unicode520CaseInsensitive;
    public static CharacterSet Ucs2VietnameseCaseInsensitive;
    public static CharacterSet Ucs2GeneralMySql500CaseInsensitive;
    public static CharacterSet Utf32UnicodeCaseInsensitive;
    public static CharacterSet Utf32IcelandicCaseInsensitive;
    public static CharacterSet Utf32LatvianCaseInsensitive;
    public static CharacterSet Utf32RomanianCaseInsensitive;
    public static CharacterSet Utf32SlovenianCaseInsensitive;
    public static CharacterSet Utf32PolishCaseInsensitive;
    public static CharacterSet Utf32EstonianCaseInsensitive;
    public static CharacterSet Utf32SpanishCaseInsensitive;
    public static CharacterSet Utf32SwedishCaseInsensitive;
    public static CharacterSet Utf32TurkishCaseInsensitive;
    public static CharacterSet Utf32CzechCaseInsensitive;
    public static CharacterSet Utf32DanishCaseInsensitive;
    public static CharacterSet Utf32LithuanianCaseInsensitive;
    public static CharacterSet Utf32SlovakCaseInsensitive;
    public static CharacterSet Utf32Spanish2CaseInsensitive;
    public static CharacterSet Utf32RomanCaseInsensitive;
    public static CharacterSet Utf32PersianCaseInsensitive;
    public static CharacterSet Utf32EsperantoCaseInsensitive;
    public static CharacterSet Utf32HungarianCaseInsensitive;
    public static CharacterSet Utf32SinhalaCaseInsensitive;
    public static CharacterSet Utf32German2CaseInsensitive;
    public static CharacterSet Utf32CroatianCaseInsensitive;
    public static CharacterSet Utf32Unicode520CaseInsensitive;
    public static CharacterSet Utf32VietnameseCaseInsensitive;
    public static CharacterSet Utf8Mb3UnicodeCaseInsensitive;
    public static CharacterSet Utf8Mb3IcelandicCaseInsensitive;
    public static CharacterSet Utf8Mb3LatvianCaseInsensitive;
    public static CharacterSet Utf8Mb3RomanianCaseInsensitive;
    public static CharacterSet Utf8Mb3SlovenianCaseInsensitive;
    public static CharacterSet Utf8Mb3PolishCaseInsensitive;
    public static CharacterSet Utf8Mb3EstonianCaseInsensitive;
    public static CharacterSet Utf8Mb3SpanishCaseInsensitive;
    public static CharacterSet Utf8Mb3SwedishCaseInsensitive;
    public static CharacterSet Utf8Mb3TurkishCaseInsensitive;
    public static CharacterSet Utf8Mb3CzechCaseInsensitive;
    public static CharacterSet Utf8Mb3DanishCaseInsensitive;
    public static CharacterSet Utf8Mb3LithuanianCaseInsensitive;
    public static CharacterSet Utf8Mb3SlovakCaseInsensitive;
    public static CharacterSet Utf8Mb3Spanish2CaseInsensitive;
    public static CharacterSet Utf8Mb3RomanCaseInsensitive;
    public static CharacterSet Utf8Mb3PersianCaseInsensitive;
    public static CharacterSet Utf8Mb3EsperantoCaseInsensitive;
    public static CharacterSet Utf8Mb3HungarianCaseInsensitive;
    public static CharacterSet Utf8Mb3SinhalaCaseInsensitive;
    public static CharacterSet Utf8Mb3German2CaseInsensitive;
    public static CharacterSet Utf8Mb3CroatianCaseInsensitive;
    public static CharacterSet Utf8Mb3Unicode520CaseInsensitive;
    public static CharacterSet Utf8Mb3VietnameseCaseInsensitive;
    public static CharacterSet Utf8Mb3GeneralMySql500CaseInsensitive;
    public static CharacterSet Utf8Mb4UnicodeCaseInsensitive;
    public static CharacterSet Utf8Mb4IcelandicCaseInsensitive;
    public static CharacterSet Utf8Mb4LatvianCaseInsensitive;
    public static CharacterSet Utf8Mb4RomanianCaseInsensitive;
    public static CharacterSet Utf8Mb4SlovenianCaseInsensitive;
    public static CharacterSet Utf8Mb4PolishCaseInsensitive;
    public static CharacterSet Utf8Mb4EstonianCaseInsensitive;
    public static CharacterSet Utf8Mb4SpanishCaseInsensitive;
    public static CharacterSet Utf8Mb4SwedishCaseInsensitive;
    public static CharacterSet Utf8Mb4TurkishCaseInsensitive;
    public static CharacterSet Utf8Mb4CzechCaseInsensitive;
    public static CharacterSet Utf8Mb4DanishCaseInsensitive;
    public static CharacterSet Utf8Mb4LithuanianCaseInsensitive;
    public static CharacterSet Utf8Mb4SlovakCaseInsensitive;
    public static CharacterSet Utf8Mb4Spanish2CaseInsensitive;
    public static CharacterSet Utf8Mb4RomanCaseInsensitive;
    public static CharacterSet Utf8Mb4PersianCaseInsensitive;
    public static CharacterSet Utf8Mb4EsperantoCaseInsensitive;
    public static CharacterSet Utf8Mb4HungarianCaseInsensitive;
    public static CharacterSet Utf8Mb4SinhalaCaseInsensitive;
    public static CharacterSet Utf8Mb4German2CaseInsensitive;
    public static CharacterSet Utf8Mb4CroatianCaseInsensitive;
    public static CharacterSet Utf8Mb4Unicode520CaseInsensitive;
    public static CharacterSet Utf8Mb4VietnameseCaseInsensitive;
    public static CharacterSet Gb18030ChineseCaseInsensitive;
    public static CharacterSet Gb18030Binary;
    public static CharacterSet Gb18030Unicode520CaseInsensitive;
    public static CharacterSet Utf8Mb4Uca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4GermanPhonebookUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4IcelandicUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4LatvianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4RomanianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4SlovenianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4PolishUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4EstonianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4SpanishUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4SwedishUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4TurkishUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4CaseSensitiveUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4DanishUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4LithuanianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4SlovakUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4TraditionalSpanishUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4LatinUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4EsperantoUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4HungarianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4CroatianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4VietnameseUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4Uca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4GermanPhonebookUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4IcelandicUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4LatvianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4RomanianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4SlovenianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4PolishUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4EstonianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4SpanishUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4SwedishUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4TurkishUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4CaseSensitiveUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4DanishUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4LithuanianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4SlovakUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4TraditionalSpanishUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4LatinUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4EsperantoUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4HungarianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4CroatianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4VietnameseUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4JapaneseUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4JapaneseUca900AccentSensitiveCaseSensitiveKanaSensitive;
    public static CharacterSet Utf8Mb4Uca900AccentSensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4RussianUca900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4RussianUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4ChineseUca900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4Uca900Binary;
    public static CharacterSet Utf8Mb4NorwegianBokmal0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4NorwegianBokmal0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4NorwegianNynorsk0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4NorwegianNynorsk0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4SerbianLatin0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4SerbianLatin0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4Bosnian0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4Bosnian0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4Bulgarian0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4Bulgarian0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4Galician0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4Galician0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb4MongolianCyrillic0900AccentInsensitiveCaseInsensitive;
    public static CharacterSet Utf8Mb4MongolianCyrillic0900AccentSensitiveCaseSensitive;
    public static CharacterSet Utf8Mb3CroatianCaseInsensitiveMariaDb;
    public static CharacterSet Utf8Mb3MyanmarCaseInsensitive;
    public static CharacterSet Utf8Mb3ThaiUnicode520Weight2;
    public static CharacterSet Utf8Mb4CroatianCaseInsensitiveMariaDb;
    public static CharacterSet Utf8Mb4MyanmarCaseInsensitive;
    public static CharacterSet Utf8Mb4ThaiUnicode520Weight2;
    public static CharacterSet Ucs2CroatianCaseInsensitiveMariaDb;
    public static CharacterSet Ucs2MyanmarCaseInsensitive;
    public static CharacterSet Ucs2ThaiUnicode520Weight2;
    public static CharacterSet Utf16CroatianCaseInsensitiveMariaDb;
    public static CharacterSet Utf16MyanmarCaseInsensitive;
    public static CharacterSet Utf16ThaiUnicode520Weight2;
    public static CharacterSet Utf32CroatianCaseInsensitiveMariaDb;
    public static CharacterSet Utf32MyanmarCaseInsensitive;
    public static CharacterSet Utf32ThaiUnicode520Weight2;
    public static CharacterSet Big5ChineseNoPadCaseInsensitive;
    public static CharacterSet Dec8SwedishNoPadCaseInsensitive;
    public static CharacterSet Cp850GeneralNoPadCaseInsensitive;
    public static CharacterSet Hp8EnglishNoPadCaseInsensitive;
    public static CharacterSet Koi8rGeneralNoPadCaseInsensitive;
    public static CharacterSet Latin1SwedishNoPadCaseInsensitive;
    public static CharacterSet Latin2GeneralNoPadCaseInsensitive;
    public static CharacterSet Swe7SwedishNoPadCaseInsensitive;
    public static CharacterSet AsciiGeneralNoPadCaseInsensitive;
    public static CharacterSet UjisJapaneseNoPadCaseInsensitive;
    public static CharacterSet SjisJapaneseNoPadCaseInsensitive;
    public static CharacterSet HebrewGeneralNoPadCaseInsensitive;
    public static CharacterSet Tis620ThaiNoPadCaseInsensitive;
    public static CharacterSet EuckrKoreanNoPadCaseInsensitive;
    public static CharacterSet Koi8uGeneralNoPadCaseInsensitive;
    public static CharacterSet Gb2312ChineseNoPadCaseInsensitive;
    public static CharacterSet GreekGeneralNoPadCaseInsensitive;
    public static CharacterSet Cp1250GeneralNoPadCaseInsensitive;
    public static CharacterSet GbkChineseNoPadCaseInsensitive;
    public static CharacterSet Latin5TurkishNoPadCaseInsensitive;
    public static CharacterSet Armscii8GeneralNoPadCaseInsensitive;
    public static CharacterSet Utf8Mb3GeneralNoPadCaseInsensitive;
    public static CharacterSet Ucs2GeneralNoPadCaseInsensitive;
    public static CharacterSet Cp866GeneralNoPadCaseInsensitive;
    public static CharacterSet Keybcs2GeneralNoPadCaseInsensitive;
    public static CharacterSet MacCentralEuropeanGeneralNoPadCaseInsensitive;
    public static CharacterSet MacRomanGeneralNoPadCaseInsensitive;
    public static CharacterSet Cp852GeneralNoPadCaseInsensitive;
    public static CharacterSet Latin7GeneralNoPadCaseInsensitive;
    public static CharacterSet MacCentralEuropeanNoPadBinary;
    public static CharacterSet Utf8Mb4GeneralNoPadCaseInsensitive;
    public static CharacterSet Utf8Mb4NoPadBinary;
    public static CharacterSet Latin1NoPadBinary;
    public static CharacterSet Cp1251NoPadBinary;
    public static CharacterSet Cp1251GeneralNoPadCaseInsensitive;
    public static CharacterSet MacRomanNoPadBinary;
    public static CharacterSet Utf16GeneralNoPadCaseInsensitive;
    public static CharacterSet Utf16NoPadBinary;
    public static CharacterSet Utf16leGeneralNoPadCaseInsensitive;
    public static CharacterSet Cp1256GeneralNoPadCaseInsensitive;
    public static CharacterSet Cp1257NoPadBinary;
    public static CharacterSet Cp1257GeneralNoPadCaseInsensitive;
    public static CharacterSet Utf32GeneralNoPadCaseInsensitive;
    public static CharacterSet Utf32NoPadBinary;
    public static CharacterSet Utf16leNoPadBinary;
    public static CharacterSet Armscii8NoPadBinary;
    public static CharacterSet AsciiNoPadBinary;
    public static CharacterSet Cp1250NoPadBinary;
    public static CharacterSet Cp1256NoPadBinary;
    public static CharacterSet Cp866NoPadBinary;
    public static CharacterSet Dec8NoPadBinary;
    public static CharacterSet GreekNoPadBinary;
    public static CharacterSet HebrewNoPadBinary;
    public static CharacterSet Hp8NoPadBinary;
    public static CharacterSet Keybcs2NoPadBinary;
    public static CharacterSet Koi8rNoPadBinary;
    public static CharacterSet Koi8uNoPadBinary;
    public static CharacterSet Latin2NoPadBinary;
    public static CharacterSet Latin5NoPadBinary;
    public static CharacterSet Latin7NoPadBinary;
    public static CharacterSet Cp850NoPadBinary;
    public static CharacterSet Cp852NoPadBinary;
    public static CharacterSet Swe7NoPadBinary;
    public static CharacterSet Utf8Mb3NoPadBinary;
    public static CharacterSet Big5NoPadBinary;
    public static CharacterSet EuckrNoPadBinary;
    public static CharacterSet Gb2312NoPadBinary;
    public static CharacterSet GbkNoPadBinary;
    public static CharacterSet SjisNoPadBinary;
    public static CharacterSet Tis620NoPadBinary;
    public static CharacterSet Ucs2NoPadBinary;
    public static CharacterSet UjisNoPadBinary;
    public static CharacterSet Geostd8GeneralNoPadCaseInsensitive;
    public static CharacterSet Geostd8NoPadBinary;
    public static CharacterSet Cp932JapaneseNoPadCaseInsensitive;
    public static CharacterSet Cp932NoPadBinary;
    public static CharacterSet EucjpmsJapaneseNoPadCaseInsensitive;
    public static CharacterSet EucjpmsNoPadBinary;
    public static CharacterSet Utf16UnicodeNoPadCaseInsensitive;
    public static CharacterSet Utf16Unicode520NoPadCaseInsensitive;
    public static CharacterSet Ucs2UnicodeNoPadCaseInsensitive;
    public static CharacterSet Ucs2Unicode520NoPadCaseInsensitive;
    public static CharacterSet Utf32UnicodeNoPadCaseInsensitive;
    public static CharacterSet Utf32Unicode520NoPadCaseInsensitive;
    public static CharacterSet Utf8Mb3UnicodeNoPadCaseInsensitive;
    public static CharacterSet Utf8Mb3Unicode520NoPadCaseInsensitive;
    public static CharacterSet Utf8Mb4UnicodeNoPadCaseInsensitive;
    public static CharacterSet Utf8Mb4Unicode520NoPadCaseInsensitive;
}
[FlagsAttribute]
internal enum MySqlConnector.Protocol.ColumnFlags : Enum {
    public int value__;
    public static ColumnFlags NotNull;
    public static ColumnFlags PrimaryKey;
    public static ColumnFlags UniqueKey;
    public static ColumnFlags MultipleKey;
    public static ColumnFlags Blob;
    public static ColumnFlags Unsigned;
    public static ColumnFlags ZeroFill;
    public static ColumnFlags Binary;
    public static ColumnFlags Enum;
    public static ColumnFlags AutoIncrement;
    public static ColumnFlags Timestamp;
    public static ColumnFlags Set;
    public static ColumnFlags Number;
}
internal enum MySqlConnector.Protocol.ColumnType : Enum {
    public int value__;
    public static ColumnType Decimal;
    public static ColumnType Tiny;
    public static ColumnType Short;
    public static ColumnType Long;
    public static ColumnType Float;
    public static ColumnType Double;
    public static ColumnType Null;
    public static ColumnType Timestamp;
    public static ColumnType Longlong;
    public static ColumnType Int24;
    public static ColumnType Date;
    public static ColumnType Time;
    public static ColumnType DateTime;
    public static ColumnType Year;
    public static ColumnType NewDate;
    public static ColumnType VarChar;
    public static ColumnType Bit;
    public static ColumnType Timestamp2;
    public static ColumnType DateTime2;
    public static ColumnType Json;
    public static ColumnType NewDecimal;
    public static ColumnType Enum;
    public static ColumnType Set;
    public static ColumnType TinyBlob;
    public static ColumnType MediumBlob;
    public static ColumnType LongBlob;
    public static ColumnType Blob;
    public static ColumnType VarString;
    public static ColumnType String;
    public static ColumnType Geometry;
}
internal enum MySqlConnector.Protocol.CommandKind : Enum {
    public int value__;
    public static CommandKind Quit;
    public static CommandKind InitDatabase;
    public static CommandKind Query;
    public static CommandKind Ping;
    public static CommandKind ChangeUser;
    public static CommandKind StatementPrepare;
    public static CommandKind StatementExecute;
    public static CommandKind ResetConnection;
}
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.PayloadData : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Memory>k__BackingField;
    private bool m_isPooled;
    public ReadOnlyMemory`1<byte> Memory { get; }
    public ReadOnlySpan`1<byte> Span { get; }
    public byte HeaderByte { get; }
    [NullableContextAttribute("1")]
public PayloadData(Byte[] data);
    public PayloadData(ReadOnlyMemory`1<byte> data, bool isPooled);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Memory();
    public ReadOnlySpan`1<byte> get_Span();
    public byte get_HeaderByte();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.AuthenticationMethodSwitchRequestPayload : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public static byte Signature;
    public string Name { get; }
    public Byte[] Data { get; }
    private AuthenticationMethodSwitchRequestPayload(string name, Byte[] data);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [NullableContextAttribute("0")]
public static AuthenticationMethodSwitchRequestPayload Create(ReadOnlySpan`1<byte> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.AuthenticationMoreDataPayload : ValueType {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    public static byte Signature;
    public Byte[] Data { get; }
    private AuthenticationMoreDataPayload(Byte[] data);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [NullableContextAttribute("0")]
public static AuthenticationMoreDataPayload Create(ReadOnlySpan`1<byte> span);
}
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.CachingSha2ServerResponsePayload : ValueType {
    public static byte Signature;
    public static byte SuccessSignature;
    public static byte FullAuthRequiredSignature;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FullAuthRequired>k__BackingField;
    public bool Succeeded { get; }
    public bool FullAuthRequired { get; }
    private CachingSha2ServerResponsePayload(bool succeeded, bool fullAuthRequired);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public bool get_FullAuthRequired();
    public static CachingSha2ServerResponsePayload Create(ReadOnlySpan`1<byte> span);
}
internal static class MySqlConnector.Protocol.Payloads.ChangeUserPayload : object {
    [NullableContextAttribute("2")]
public static PayloadData Create(string user, ReadOnlySpan`1<byte> authResponse, string schemaName, CharacterSet characterSet, Byte[] connectionAttributes);
}
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.ColumnCountPayload : ValueType {
    [CompilerGeneratedAttribute]
private int <ColumnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MetadataFollows>k__BackingField;
    public int ColumnCount { get; }
    public bool MetadataFollows { get; }
    private ColumnCountPayload(int columnCount, bool metadataFollows);
    [CompilerGeneratedAttribute]
public int get_ColumnCount();
    [CompilerGeneratedAttribute]
public bool get_MetadataFollows();
    public static ColumnCountPayload Create(ReadOnlySpan`1<byte> span, bool supportsOptionalMetadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Protocol.Payloads.ColumnDefinitionPayload : object {
    [CompilerGeneratedAttribute]
private CharacterSet <CharacterSet>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ColumnLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnType <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnFlags <ColumnFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Decimals>k__BackingField;
    [NullableAttribute("0")]
private ResizableArraySegment`1<byte> m_originalData;
    private bool m_readNames;
    [NullableAttribute("2")]
private string m_name;
    [NullableAttribute("2")]
private string m_schemaName;
    [NullableAttribute("2")]
private string m_catalogName;
    [NullableAttribute("2")]
private string m_table;
    [NullableAttribute("2")]
private string m_physicalTable;
    [NullableAttribute("2")]
private string m_physicalName;
    public string Name { get; }
    public CharacterSet CharacterSet { get; private set; }
    public UInt32 ColumnLength { get; private set; }
    public ColumnType ColumnType { get; private set; }
    public ColumnFlags ColumnFlags { get; private set; }
    public string SchemaName { get; }
    public string CatalogName { get; }
    public string Table { get; }
    public string PhysicalTable { get; }
    public string PhysicalName { get; }
    public byte Decimals { get; private set; }
    public string get_Name();
    [CompilerGeneratedAttribute]
public CharacterSet get_CharacterSet();
    [CompilerGeneratedAttribute]
private void set_CharacterSet(CharacterSet value);
    [CompilerGeneratedAttribute]
public UInt32 get_ColumnLength();
    [CompilerGeneratedAttribute]
private void set_ColumnLength(UInt32 value);
    [CompilerGeneratedAttribute]
public ColumnType get_ColumnType();
    [CompilerGeneratedAttribute]
private void set_ColumnType(ColumnType value);
    [CompilerGeneratedAttribute]
public ColumnFlags get_ColumnFlags();
    [CompilerGeneratedAttribute]
private void set_ColumnFlags(ColumnFlags value);
    public string get_SchemaName();
    public string get_CatalogName();
    public string get_Table();
    public string get_PhysicalTable();
    public string get_PhysicalName();
    [CompilerGeneratedAttribute]
public byte get_Decimals();
    [CompilerGeneratedAttribute]
private void set_Decimals(byte value);
    [NullableContextAttribute("0")]
public static void Initialize(ColumnDefinitionPayload& payload, ResizableArraySegment`1<byte> arraySegment);
    [NullableContextAttribute("0")]
private void Initialize(ResizableArraySegment`1<byte> originalData);
    private static void SkipLengthEncodedByteString(ByteArrayReader& reader);
    private void ReadNames();
}
internal static class MySqlConnector.Protocol.Payloads.EmptyPayload : object {
    [CompilerGeneratedAttribute]
private static PayloadData <Instance>k__BackingField;
    public static PayloadData Instance { get; }
    private static EmptyPayload();
    [CompilerGeneratedAttribute]
public static PayloadData get_Instance();
}
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.EofPayload : ValueType {
    [CompilerGeneratedAttribute]
private int <WarningCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerStatus <ServerStatus>k__BackingField;
    public static byte Signature;
    public int WarningCount { get; }
    public ServerStatus ServerStatus { get; }
    private EofPayload(int warningCount, ServerStatus status);
    [CompilerGeneratedAttribute]
public int get_WarningCount();
    [CompilerGeneratedAttribute]
public ServerStatus get_ServerStatus();
    public static EofPayload Create(ReadOnlySpan`1<byte> span);
    public static bool IsEof(PayloadData payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.ErrorPayload : ValueType {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public static byte Signature;
    public int ErrorCode { get; }
    public string State { get; }
    public string Message { get; }
    private ErrorPayload(int errorCode, string state, string message);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public string get_Message();
    public MySqlException ToException();
    [NullableContextAttribute("0")]
public static ErrorPayload Create(ReadOnlySpan`1<byte> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Protocol.Payloads.HandshakeResponse41Payload : object {
    private static ByteBufferWriter CreateCapabilitiesPayload(ProtocolCapabilities serverCapabilities, ConnectionSettings cs, bool useCompression, CharacterSet characterSet, ProtocolCapabilities additionalCapabilities);
    public static PayloadData CreateWithSsl(ProtocolCapabilities serverCapabilities, ConnectionSettings cs, bool useCompression, CharacterSet characterSet);
    public static PayloadData Create(InitialHandshakePayload handshake, ConnectionSettings cs, string password, bool useCompression, CharacterSet characterSet, Byte[] connectionAttributes);
}
internal static class MySqlConnector.Protocol.Payloads.InitDatabasePayload : object {
    [NullableContextAttribute("1")]
public static PayloadData Create(string databaseName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Protocol.Payloads.InitialHandshakePayload : object {
    [CompilerGeneratedAttribute]
private ProtocolCapabilities <ProtocolCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ServerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthPluginData>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AuthPluginName>k__BackingField;
    private static byte c_protocolVersion;
    public ProtocolCapabilities ProtocolCapabilities { get; }
    public Byte[] ServerVersion { get; }
    public int ConnectionId { get; }
    public Byte[] AuthPluginData { get; }
    [NullableAttribute("2")]
public string AuthPluginName { get; }
    private InitialHandshakePayload(ProtocolCapabilities protocolCapabilities, Byte[] serverVersion, int connectionId, Byte[] authPluginData, string authPluginName);
    [CompilerGeneratedAttribute]
public ProtocolCapabilities get_ProtocolCapabilities();
    [CompilerGeneratedAttribute]
public Byte[] get_ServerVersion();
    [CompilerGeneratedAttribute]
public int get_ConnectionId();
    [CompilerGeneratedAttribute]
public Byte[] get_AuthPluginData();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AuthPluginName();
    [NullableContextAttribute("0")]
public static InitialHandshakePayload Create(ReadOnlySpan`1<byte> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.LocalInfilePayload : ValueType {
    public static byte Signature;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; }
    private LocalInfilePayload(string fileName);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [NullableContextAttribute("0")]
public static LocalInfilePayload Create(ReadOnlySpan`1<byte> span);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class MySqlConnector.Protocol.Payloads.OkPayload : object {
    [CompilerGeneratedAttribute]
private ulong <AffectedRowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <LastInsertId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerStatus <ServerStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WarningCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewSchema>k__BackingField;
    public static byte Signature;
    [NullableAttribute("1")]
private static OkPayload s_autoCommitOk;
    [NullableAttribute("1")]
private static OkPayload s_autoCommitSessionStateChangedOk;
    public ulong AffectedRowCount { get; }
    public ulong LastInsertId { get; }
    public ServerStatus ServerStatus { get; }
    public int WarningCount { get; }
    public string StatusInfo { get; }
    public string NewSchema { get; }
    private OkPayload(ulong affectedRowCount, ulong lastInsertId, ServerStatus serverStatus, int warningCount, string statusInfo, string newSchema);
    private static OkPayload();
    [CompilerGeneratedAttribute]
public ulong get_AffectedRowCount();
    [CompilerGeneratedAttribute]
public ulong get_LastInsertId();
    [CompilerGeneratedAttribute]
public ServerStatus get_ServerStatus();
    [CompilerGeneratedAttribute]
public int get_WarningCount();
    [CompilerGeneratedAttribute]
public string get_StatusInfo();
    [CompilerGeneratedAttribute]
public string get_NewSchema();
    [NullableContextAttribute("0")]
public static bool IsOk(ReadOnlySpan`1<byte> span, bool deprecateEof);
    [NullableContextAttribute("0")]
public static OkPayload Create(ReadOnlySpan`1<byte> span, bool deprecateEof, bool clientSessionTrack);
    [NullableContextAttribute("0")]
public static void Verify(ReadOnlySpan`1<byte> span, bool deprecateEof, bool clientSessionTrack);
    [NullableContextAttribute("0")]
private static OkPayload Read(ReadOnlySpan`1<byte> span, bool deprecateEof, bool clientSessionTrack, bool createPayload);
}
internal static class MySqlConnector.Protocol.Payloads.PingPayload : object {
    [CompilerGeneratedAttribute]
private static PayloadData <Instance>k__BackingField;
    public static PayloadData Instance { get; }
    private static PingPayload();
    [CompilerGeneratedAttribute]
public static PayloadData get_Instance();
}
internal static class MySqlConnector.Protocol.Payloads.QueryPayload : object {
    public static PayloadData Create(bool supportsQueryAttributes, ReadOnlySpan`1<byte> query);
}
internal static class MySqlConnector.Protocol.Payloads.QuitPayload : object {
    [CompilerGeneratedAttribute]
private static PayloadData <Instance>k__BackingField;
    public static PayloadData Instance { get; }
    private static QuitPayload();
    [CompilerGeneratedAttribute]
public static PayloadData get_Instance();
}
internal static class MySqlConnector.Protocol.Payloads.ResetConnectionPayload : object {
    [CompilerGeneratedAttribute]
private static PayloadData <Instance>k__BackingField;
    public static PayloadData Instance { get; }
    private static ResetConnectionPayload();
    [CompilerGeneratedAttribute]
public static PayloadData get_Instance();
}
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Payloads.StatementPrepareResponsePayload : ValueType {
    [CompilerGeneratedAttribute]
private int <StatementId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParameterCount>k__BackingField;
    public int StatementId { get; }
    public int ColumnCount { get; }
    public int ParameterCount { get; }
    private StatementPrepareResponsePayload(int statementId, int columnCount, int parameterCount);
    [CompilerGeneratedAttribute]
public int get_StatementId();
    [CompilerGeneratedAttribute]
public int get_ColumnCount();
    [CompilerGeneratedAttribute]
public int get_ParameterCount();
    public static StatementPrepareResponsePayload Create(ReadOnlySpan`1<byte> span);
}
[FlagsAttribute]
internal enum MySqlConnector.Protocol.ProtocolCapabilities : Enum {
    public ulong value__;
    public static ProtocolCapabilities None;
    public static ProtocolCapabilities LongPassword;
    public static ProtocolCapabilities FoundRows;
    public static ProtocolCapabilities LongFlag;
    public static ProtocolCapabilities ConnectWithDatabase;
    public static ProtocolCapabilities NoSchema;
    public static ProtocolCapabilities Compress;
    public static ProtocolCapabilities Odbc;
    public static ProtocolCapabilities LocalFiles;
    public static ProtocolCapabilities IgnoreSpace;
    public static ProtocolCapabilities Protocol41;
    public static ProtocolCapabilities Interactive;
    public static ProtocolCapabilities Ssl;
    public static ProtocolCapabilities IgnoreSigpipe;
    public static ProtocolCapabilities Transactions;
    public static ProtocolCapabilities SecureConnection;
    public static ProtocolCapabilities MultiStatements;
    public static ProtocolCapabilities MultiResults;
    public static ProtocolCapabilities PreparedStatementMultiResults;
    public static ProtocolCapabilities PluginAuth;
    public static ProtocolCapabilities ConnectionAttributes;
    public static ProtocolCapabilities PluginAuthLengthEncodedClientData;
    public static ProtocolCapabilities CanHandleExpiredPasswords;
    public static ProtocolCapabilities SessionTrack;
    public static ProtocolCapabilities DeprecateEof;
    public static ProtocolCapabilities QueryAttributes;
    public static ProtocolCapabilities MariaDbClientProgress;
    public static ProtocolCapabilities MariaDbComMulti;
    public static ProtocolCapabilities MariaDbStatementBulkOperations;
    public static ProtocolCapabilities MariaDbExtendedTypeInfo;
    public static ProtocolCapabilities MariaDbCacheMetadata;
}
internal class MySqlConnector.Protocol.Serialization.ArraySegmentHolder`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ArraySegment`1<T> <ArraySegment>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ArraySegment`1<T> ArraySegment { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public T[] Array { get; }
    public int Offset { get; }
    public int Count { get; }
    [CompilerGeneratedAttribute]
public ArraySegment`1<T> get_ArraySegment();
    [CompilerGeneratedAttribute]
public void set_ArraySegment(ArraySegment`1<T> value);
    public T[] get_Array();
    public int get_Offset();
    public int get_Count();
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Protocol.Serialization.AuthenticationUtility : object {
    public static Byte[] GetNullTerminatedPasswordBytes(string password);
    public static Byte[] CreateAuthenticationResponse(ReadOnlySpan`1<byte> challenge, string password);
    [SkipLocalsInitAttribute]
public static Byte[] HashPassword(ReadOnlySpan`1<byte> challenge, string password);
    public static Byte[] CreateScrambleResponse(ReadOnlySpan`1<byte> nonce, string password);
    [SkipLocalsInitAttribute]
private static Byte[] HashPasswordWithNonce(ReadOnlySpan`1<byte> nonce, string password);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Protocol.Serialization.AuthGSSAPI : object {
    private static string GetServicePrincipalName(Byte[] switchRequest);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.AuthGSSAPI/<AuthenticateAsync>d__1")]
public static Task`1<PayloadData> AuthenticateAsync(ConnectionSettings cs, Byte[] switchRequestPayloadData, ServerSession session, IOBehavior ioBehavior, CancellationToken cancellationToken);
}
internal class MySqlConnector.Protocol.Serialization.BufferedByteReader : object {
    [NullableAttribute("1")]
private Byte[] m_buffer;
    private ArraySegment`1<byte> m_remainingData;
    public ValueTask`1<ArraySegment`1<byte>> ReadBytesAsync(IByteHandler byteHandler, int count, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.BufferedByteReader/<ReadBytesAsync>d__2")]
private ValueTask`1<ArraySegment`1<byte>> ReadBytesAsync(IByteHandler byteHandler, ArraySegment`1<byte> buffer, int totalBytesToRead, IOBehavior ioBehavior);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class MySqlConnector.Protocol.Serialization.ByteArrayReader : ValueType {
    private ReadOnlySpan`1<byte> m_buffer;
    private int m_maxOffset;
    private int m_offset;
    public int Offset { get; public set; }
    public int BytesRemaining { get; }
    public ByteArrayReader(ReadOnlySpan`1<byte> buffer);
    [IsReadOnlyAttribute]
public int get_Offset();
    public void set_Offset(int value);
    public byte ReadByte();
    public void ReadByte(byte value);
    public short ReadInt16();
    public ushort ReadUInt16();
    public int ReadInt32();
    public UInt32 ReadUInt32();
    public UInt32 ReadFixedLengthUInt32(int length);
    public ulong ReadFixedLengthUInt64(int length);
    public ReadOnlySpan`1<byte> ReadNullTerminatedByteString();
    public ReadOnlySpan`1<byte> ReadNullOrEofTerminatedByteString();
    public ReadOnlySpan`1<byte> ReadByteString(int length);
    public ulong ReadLengthEncodedInteger();
    public int ReadLengthEncodedIntegerOrNull();
    public ReadOnlySpan`1<byte> ReadLengthEncodedByteString();
    [IsReadOnlyAttribute]
public int get_BytesRemaining();
    [IsReadOnlyAttribute]
private void VerifyRead(int length);
}
internal class MySqlConnector.Protocol.Serialization.ByteBufferWriter : object {
    [NullableAttribute("2")]
private Encoder m_encoder;
    [NullableAttribute("1")]
private Byte[] m_buffer;
    private Memory`1<byte> m_output;
    public int Position { get; }
    public ArraySegment`1<byte> ArraySegment { get; }
    public ByteBufferWriter(int capacity);
    public int get_Position();
    public ArraySegment`1<byte> get_ArraySegment();
    public PayloadData ToPayloadData();
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    public sealed virtual void Advance(int count);
    public void TrimEnd(int byteCount);
    public void Write(byte value);
    public void Write(ushort value);
    public void Write(int value);
    public void Write(UInt32 value);
    public void Write(ulong value);
    public void Write(ArraySegment`1<byte> arraySegment);
    public void Write(ReadOnlySpan`1<byte> span);
    [NullableContextAttribute("1")]
public void Write(string value);
    [NullableContextAttribute("1")]
public void WriteAscii(string value);
    [NullableContextAttribute("1")]
public void Write(string value, int offset, int length);
    public void Write(ReadOnlySpan`1<char> chars);
    public void Write(ReadOnlySpan`1<char> chars, bool flush);
    public void WriteAscii(ReadOnlySpan`1<char> chars);
    [NullableContextAttribute("1")]
public void WriteLengthEncodedString(StringBuilder stringBuilder);
    public void WriteString(short value);
    public void WriteString(ushort value);
    public void WriteString(int value);
    public void WriteString(UInt32 value);
    public void WriteString(long value);
    public void WriteString(ulong value);
    private void Reallocate(int additional);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MySqlConnector.Protocol.Serialization.ByteBufferWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteLengthEncodedInteger(ByteBufferWriter writer, ulong value);
    [ExtensionAttribute]
public static void WriteLengthEncodedString(ByteBufferWriter writer, string value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static void WriteLengthEncodedString(ByteBufferWriter writer, ReadOnlySpan`1<char> value);
    [ExtensionAttribute]
public static void WriteLengthEncodedAsciiString(ByteBufferWriter writer, string value);
    [ExtensionAttribute]
public static void WriteNullTerminatedString(ByteBufferWriter writer, string value);
}
internal class MySqlConnector.Protocol.Serialization.CompressedPayloadHandler : object {
    [NullableAttribute("1")]
private BufferedByteReader m_bufferedByteReader;
    [NullableAttribute("1")]
private BufferedByteReader m_compressedBufferedByteReader;
    [NullableAttribute("2")]
private MemoryStream m_uncompressedStream;
    [NullableAttribute("2")]
private IByteHandler m_uncompressedStreamByteHandler;
    [NullableAttribute("2")]
private IByteHandler m_byteHandler;
    private byte m_compressedSequenceNumber;
    private byte m_uncompressedSequenceNumber;
    private ArraySegment`1<byte> m_remainingData;
    private bool m_isContinuationPacket;
    [NullableAttribute("1")]
public IByteHandler ByteHandler { get; public set; }
    [NullableContextAttribute("1")]
public CompressedPayloadHandler(IByteHandler byteHandler);
    public sealed virtual void Dispose();
    public sealed virtual void StartNewConversation();
    public sealed virtual void SetNextSequenceNumber(int sequenceNumber);
    [NullableContextAttribute("1")]
public sealed virtual IByteHandler get_ByteHandler();
    [NullableContextAttribute("1")]
public sealed virtual void set_ByteHandler(IByteHandler value);
    public sealed virtual ValueTask`1<ArraySegment`1<byte>> ReadPayloadAsync(ArraySegmentHolder`1<byte> cache, ProtocolErrorBehavior protocolErrorBehavior, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.CompressedPayloadHandler/<WritePayloadAsync>d__8")]
public sealed virtual ValueTask WritePayloadAsync(ReadOnlyMemory`1<byte> payload, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.CompressedPayloadHandler/<ReadBytesAsync>d__9")]
private ValueTask`1<int> ReadBytesAsync(Memory`1<byte> buffer, ProtocolErrorBehavior protocolErrorBehavior, IOBehavior ioBehavior);
    private byte GetNextCompressedSequenceNumber();
    private int GetNextUncompressedSequenceNumber();
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.CompressedPayloadHandler/<CompressAndWrite>d__12")]
private ValueTask CompressAndWrite(ArraySegment`1<byte> remainingUncompressedData, IOBehavior ioBehavior);
}
internal interface MySqlConnector.Protocol.Serialization.IByteHandler {
    public int RemainingTimeout { get; public set; }
    public abstract virtual int get_RemainingTimeout();
    public abstract virtual void set_RemainingTimeout(int value);
    public abstract virtual ValueTask`1<int> ReadBytesAsync(Memory`1<byte> buffer, IOBehavior ioBehavior);
    public abstract virtual ValueTask WriteBytesAsync(ReadOnlyMemory`1<byte> data, IOBehavior ioBehavior);
}
internal enum MySqlConnector.Protocol.Serialization.IOBehavior : Enum {
    public int value__;
    public static IOBehavior Synchronous;
    public static IOBehavior Asynchronous;
}
internal interface MySqlConnector.Protocol.Serialization.IPayloadHandler {
    [NullableAttribute("1")]
public IByteHandler ByteHandler { get; public set; }
    public abstract virtual void StartNewConversation();
    public abstract virtual void SetNextSequenceNumber(int sequenceNumber);
    [NullableContextAttribute("1")]
public abstract virtual IByteHandler get_ByteHandler();
    [NullableContextAttribute("1")]
public abstract virtual void set_ByteHandler(IByteHandler value);
    public abstract virtual ValueTask`1<ArraySegment`1<byte>> ReadPayloadAsync(ArraySegmentHolder`1<byte> cache, ProtocolErrorBehavior protocolErrorBehavior, IOBehavior ioBehavior);
    public abstract virtual ValueTask WritePayloadAsync(ReadOnlyMemory`1<byte> payload, IOBehavior ioBehavior);
}
internal static class MySqlConnector.Protocol.Serialization.NegotiateStreamConstants : object {
    public static int HeaderLength;
    public static byte MajorVersion;
    public static byte MinorVersion;
    public static byte HandshakeDone;
    public static byte HandshakeError;
    public static byte HandshakeInProgress;
    public static ushort MaxPayloadLength;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Protocol.Serialization.NegotiateToMySqlConverterStream : Stream {
    private MemoryStream m_writeBuffer;
    private ServerSession m_serverSession;
    private IOBehavior m_ioBehavior;
    private CancellationToken m_cancellationToken;
    private MemoryStream m_readBuffer;
    private int m_writePayloadLength;
    private bool m_clientHandshakeDone;
    [CompilerGeneratedAttribute]
private Nullable`1<PayloadData> <MySQLProtocolPayload>k__BackingField;
    public Nullable`1<PayloadData> MySQLProtocolPayload { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public NegotiateToMySqlConverterStream(ServerSession serverSession, IOBehavior ioBehavior, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public Nullable`1<PayloadData> get_MySQLProtocolPayload();
    [CompilerGeneratedAttribute]
private void set_MySQLProtocolPayload(Nullable`1<PayloadData> value);
    private static void CreateNegotiateStreamMessageHeader(Byte[] buffer, int offset, byte messageId, long payloadLength);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.NegotiateToMySqlConverterStream/<ReadAsync>d__13")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.NegotiateToMySqlConverterStream/<WriteAsync>d__15")]
public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
}
[IsReadOnlyAttribute]
internal class MySqlConnector.Protocol.Serialization.Packet : ValueType {
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <Contents>k__BackingField;
    public ArraySegment`1<byte> Contents { get; }
    public Packet(ArraySegment`1<byte> contents);
    [CompilerGeneratedAttribute]
public ArraySegment`1<byte> get_Contents();
}
internal enum MySqlConnector.Protocol.Serialization.ProtocolErrorBehavior : Enum {
    public int value__;
    public static ProtocolErrorBehavior Throw;
    public static ProtocolErrorBehavior Ignore;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Protocol.Serialization.ProtocolUtility : object {
    public static int MaxPacketSize;
    public static int GetBytesPerCharacter(CharacterSet characterSet);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.ProtocolUtility/<ReadPayloadAsync>d__1")]
public static ValueTask`1<ArraySegment`1<byte>> ReadPayloadAsync(BufferedByteReader bufferedByteReader, IByteHandler byteHandler, Func`1<int> getNextSequenceNumber, ArraySegmentHolder`1<byte> previousPayloads, ProtocolErrorBehavior protocolErrorBehavior, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.ProtocolUtility/<WritePayloadAsync>d__2")]
public static ValueTask WritePayloadAsync(IByteHandler byteHandler, Func`1<int> getNextSequenceNumber, ReadOnlyMemory`1<byte> payload, IOBehavior ioBehavior);
}
internal static class MySqlConnector.Protocol.Serialization.SerializationUtility : object {
    public static UInt32 ReadUInt32(ReadOnlySpan`1<byte> span);
    [NullableContextAttribute("1")]
public static void WriteUInt32(UInt32 value, Byte[] buffer, int offset, int count);
}
internal class MySqlConnector.Protocol.Serialization.SocketByteHandler : object {
    [CompilerGeneratedAttribute]
private int <RemainingTimeout>k__BackingField;
    [NullableAttribute("1")]
private Socket m_socket;
    [NullableAttribute("1")]
private Action m_closeSocket;
    public int RemainingTimeout { get; public set; }
    [NullableContextAttribute("1")]
public SocketByteHandler(Socket socket);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RemainingTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemainingTimeout(int value);
    public sealed virtual ValueTask`1<int> ReadBytesAsync(Memory`1<byte> buffer, IOBehavior ioBehavior);
    private ValueTask`1<int> DoReadBytesSync(Memory`1<byte> buffer);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.SocketByteHandler/<DoReadBytesAsync>d__8")]
private ValueTask`1<int> DoReadBytesAsync(Memory`1<byte> buffer);
    public sealed virtual ValueTask WriteBytesAsync(ReadOnlyMemory`1<byte> data, IOBehavior ioBehavior);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.SocketByteHandler/<DoWriteBytesAsync>d__10")]
private ValueTask DoWriteBytesAsync(ReadOnlyMemory`1<byte> data);
}
internal class MySqlConnector.Protocol.Serialization.StandardPayloadHandler : object {
    [NullableAttribute("1")]
private Func`1<int> m_getNextSequenceNumber;
    [NullableAttribute("2")]
private IByteHandler m_byteHandler;
    [NullableAttribute("2")]
private BufferedByteReader m_bufferedByteReader;
    private byte m_sequenceNumber;
    [NullableAttribute("1")]
public IByteHandler ByteHandler { get; public set; }
    [NullableContextAttribute("1")]
public StandardPayloadHandler(IByteHandler byteHandler);
    public sealed virtual void Dispose();
    public sealed virtual void StartNewConversation();
    public sealed virtual void SetNextSequenceNumber(int sequenceNumber);
    [NullableContextAttribute("1")]
public sealed virtual IByteHandler get_ByteHandler();
    [NullableContextAttribute("1")]
public sealed virtual void set_ByteHandler(IByteHandler value);
    public sealed virtual ValueTask`1<ArraySegment`1<byte>> ReadPayloadAsync(ArraySegmentHolder`1<byte> cache, ProtocolErrorBehavior protocolErrorBehavior, IOBehavior ioBehavior);
    public sealed virtual ValueTask WritePayloadAsync(ReadOnlyMemory`1<byte> payload, IOBehavior ioBehavior);
    [CompilerGeneratedAttribute]
private int <.ctor>b__0_0();
}
internal class MySqlConnector.Protocol.Serialization.StreamByteHandler : object {
    [CompilerGeneratedAttribute]
private int <RemainingTimeout>k__BackingField;
    [NullableAttribute("1")]
private Stream m_stream;
    [NullableAttribute("1")]
private Action m_closeStream;
    public int RemainingTimeout { get; public set; }
    [NullableContextAttribute("1")]
public StreamByteHandler(Stream stream);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual int get_RemainingTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemainingTimeout(int value);
    public sealed virtual ValueTask`1<int> ReadBytesAsync(Memory`1<byte> buffer, IOBehavior ioBehavior);
    public sealed virtual ValueTask WriteBytesAsync(ReadOnlyMemory`1<byte> data, IOBehavior ioBehavior);
    [CompilerGeneratedAttribute]
private ValueTask`1<int> <ReadBytesAsync>g__DoReadBytesSync|6_0(Memory`1<byte> buffer);
    [CompilerGeneratedAttribute]
private ValueTask`1<int> <ReadBytesAsync>g__DoReadBytesSyncOverAsync|6_1(Memory`1<byte> buffer);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.StreamByteHandler/<<ReadBytesAsync>g__DoReadBytesAsync|6_2>d")]
[CompilerGeneratedAttribute]
private Task`1<int> <ReadBytesAsync>g__DoReadBytesAsync|6_2(Memory`1<byte> buffer);
    [AsyncStateMachineAttribute("MySqlConnector.Protocol.Serialization.StreamByteHandler/<<WriteBytesAsync>g__DoWriteBytesAsync|7_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <WriteBytesAsync>g__DoWriteBytesAsync|7_0(ReadOnlyMemory`1<byte> data);
}
[FlagsAttribute]
internal enum MySqlConnector.Protocol.ServerStatus : Enum {
    public ushort value__;
    public static ServerStatus InTransaction;
    public static ServerStatus AutoCommit;
    public static ServerStatus MoreResultsExist;
    public static ServerStatus NoGoodIndexUsed;
    public static ServerStatus NoIndexUsed;
    public static ServerStatus CursorExists;
    public static ServerStatus LastRowSent;
    public static ServerStatus DatabaseDropped;
    public static ServerStatus NoBackslashEscapes;
    public static ServerStatus MetadataChanged;
    public static ServerStatus QueryWasSlow;
    public static ServerStatus PsOutParams;
    public static ServerStatus InReadOnlyTransaction;
    public static ServerStatus SessionStateChanged;
}
internal enum MySqlConnector.Protocol.SessionTrackKind : Enum {
    public byte value__;
    public static SessionTrackKind SystemVariables;
    public static SessionTrackKind Schema;
    public static SessionTrackKind StateChange;
    public static SessionTrackKind Gtids;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class MySqlConnector.Utilities.ActivitySourceHelper : object {
    public static string DatabaseConnectionIdTagName;
    public static string DatabaseConnectionStringTagName;
    public static string DatabaseNameTagName;
    public static string DatabaseStatementTagName;
    public static string DatabaseSystemTagName;
    public static string DatabaseUserTagName;
    public static string NetPeerIpTagName;
    public static string NetPeerNameTagName;
    public static string NetPeerPortTagName;
    public static string NetTransportTagName;
    public static string ThreadIdTagName;
    public static string DatabaseSystemValue;
    public static string NetTransportNamedPipeValue;
    public static string NetTransportTcpIpValue;
    public static string NetTransportUnixValue;
    public static string ExecuteActivityName;
    public static string OpenActivityName;
    [CompilerGeneratedAttribute]
private static Meter <Meter>k__BackingField;
    [CompilerGeneratedAttribute]
private static ActivitySource <ActivitySource>k__BackingField;
    public static Meter Meter { get; }
    private static ActivitySource ActivitySource { get; }
    private static ActivitySourceHelper();
    public static Activity StartActivity(string name, IEnumerable`1<KeyValuePair`2<string, object>> activityTags);
    [ExtensionAttribute]
public static void SetException(Activity activity, Exception exception);
    [NullableContextAttribute("2")]
public static void CopyTags(IEnumerable`1<KeyValuePair`2<string, object>> tags, Activity activity);
    [CompilerGeneratedAttribute]
public static Meter get_Meter();
    [CompilerGeneratedAttribute]
private static ActivitySource get_ActivitySource();
    private static string GetVersion();
}
internal static class MySqlConnector.Utilities.Constants : object {
    public static int InfiniteTimeout;
}
internal class MySqlConnector.Utilities.ResizableArray`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private T[] m_array;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public T[] Array { get; }
    public int Count { get; }
    public T[] get_Array();
    public int get_Count();
    public Span`1<T> AsSpan(int start);
    internal void DoResize(int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class MySqlConnector.Utilities.ResizableArraySegment`1 : ValueType {
    [CompilerGeneratedAttribute]
private ResizableArray`1<T> <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public ResizableArray`1<T> Array { get; }
    public int Offset { get; }
    public int Count { get; }
    public ResizableArraySegment`1(ResizableArray`1<T> array, int offset, int count);
    [CompilerGeneratedAttribute]
public ResizableArray`1<T> get_Array();
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public int get_Count();
    public static ReadOnlySpan`1<T> op_Implicit(ResizableArraySegment`1<T> segment);
}
[ExtensionAttribute]
internal static class MySqlConnector.Utilities.SocketExtensions : object {
    [ExtensionAttribute]
public static int Send(Socket socket, ReadOnlyMemory`1<byte> data, SocketFlags flags);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void SetKeepAlive(Socket socket, UInt32 keepAliveTimeSeconds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class MySqlConnector.Utilities.TimerQueue : object {
    [CompilerGeneratedAttribute]
private static TimerQueue <Instance>k__BackingField;
    private object m_lock;
    private Timer m_timer;
    private List`1<Data> m_timeoutActions;
    private UInt32 m_counter;
    private bool m_isTimerEnabled;
    private int m_nextTimerTick;
    public static TimerQueue Instance { get; }
    private static TimerQueue();
    [CompilerGeneratedAttribute]
public static TimerQueue get_Instance();
    public UInt32 Add(int delay, Action action);
    public bool Remove(UInt32 id);
    [NullableContextAttribute("2")]
private void Callback(object obj);
    private void UnsafeSetTimer(int delay);
    private void UnsafeClearTimer();
}
[ExtensionAttribute]
internal static class MySqlConnector.Utilities.Utility : object {
    [NullableContextAttribute("1")]
public static void Dispose(T& disposable);
    [NullableContextAttribute("1")]
public static void LoadRsaParameters(string key, RSA rsa);
    public static int FindNextIndex(ReadOnlySpan`1<byte> data, int offset, ReadOnlySpan`1<byte> pattern);
    [NullableContextAttribute("1")]
public static void Resize(ResizableArray`1& resizableArray, int newLength);
    [NullableContextAttribute("1")]
public static bool TryParseRedirectionHeader(string header, String& host, Int32& port, String& user);
    public static TimeSpan ParseTimeSpan(ReadOnlySpan`1<byte> value);
    [NullableContextAttribute("1")]
public static Byte[] TrimZeroByte(Byte[] value);
    public static ReadOnlySpan`1<byte> TrimZeroByte(ReadOnlySpan`1<byte> value);
    [ExtensionAttribute]
public static int Read(Stream stream, Memory`1<byte> buffer);
    [ExtensionAttribute]
public static void Write(Stream stream, ReadOnlyMemory`1<byte> data);
    public static void SwapBytes(Span`1<byte> bytes, int offset1, int offset2);
    public static bool IsWindows();
    [NullableContextAttribute("1")]
public static void GetOSDetails(String& os, String& osDescription, String& architecture);
    public static int GetElapsedMilliseconds(long startingTimestamp);
    public static double GetElapsedSeconds(long startingTimestamp, long endingTimestamp);
    public static SslProtocols GetDefaultSslProtocols();
    private static bool TryReadAsnLength(ReadOnlySpan`1<byte> data, Int32& length, Int32& bytesConsumed);
    private static bool TryReadAsnInteger(ReadOnlySpan`1<byte> data, ReadOnlySpan`1& number, Int32& bytesConsumed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class MySqlConnector.Utilities.ValueTaskExtensions : object {
    public static ValueTask FromException(Exception exception);
    public static ValueTask`1<T> FromException(Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Data.Common.DbDataSource : object {
    public string ConnectionString { get; }
    public abstract virtual string get_ConnectionString();
    public DbConnection CreateConnection();
    public DbConnection OpenConnection();
    public ValueTask`1<DbConnection> OpenConnectionAsync(CancellationToken cancellationToken);
    public DbCommand CreateCommand(string commandText);
    public DbBatch CreateBatch();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("System.Data.Common.DbDataSource/<DisposeAsync>d__8")]
public sealed virtual ValueTask DisposeAsync();
    protected abstract virtual DbConnection CreateDbConnection();
    protected virtual DbConnection OpenDbConnection();
    [AsyncStateMachineAttribute("System.Data.Common.DbDataSource/<OpenDbConnectionAsync>d__11")]
protected virtual ValueTask`1<DbConnection> OpenDbConnectionAsync(CancellationToken cancellationToken);
    protected virtual DbCommand CreateDbCommand(string commandText);
    protected virtual DbBatch CreateDbBatch();
    protected virtual void Dispose(bool disposing);
    protected virtual ValueTask DisposeAsyncCore();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
