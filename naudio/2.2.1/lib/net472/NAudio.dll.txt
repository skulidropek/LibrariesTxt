public class NAudio.Wave.AudioFileReader : WaveStream {
    private WaveStream readerStream;
    private SampleChannel sampleChannel;
    private int destBytesPerSample;
    private int sourceBytesPerSample;
    private long length;
    private object lockObject;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; }
    public WaveFormat WaveFormat { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public float Volume { get; public set; }
    public AudioFileReader(string fileName);
    private void CreateReaderStream(string fileName);
    [CompilerGeneratedAttribute]
public string get_FileName();
    public virtual WaveFormat get_WaveFormat();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public sealed virtual int Read(Single[] buffer, int offset, int count);
    public float get_Volume();
    public void set_Volume(float value);
    private long SourceToDest(long sourceBytes);
    private long DestToSource(long destBytes);
    protected virtual void Dispose(bool disposing);
}
public class NAudio.Wave.Mp3FileReader : Mp3FileReaderBase {
    public Mp3FileReader(string mp3FileName);
    public Mp3FileReader(Stream inputStream);
    public static IMp3FrameDecompressor CreateAcmFrameDecompressor(WaveFormat mp3Format);
}
