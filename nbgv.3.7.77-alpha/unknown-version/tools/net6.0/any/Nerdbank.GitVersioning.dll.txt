[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Nerdbank.GitVersioning.AssemblyVersionOptionsConverter : JsonConverter {
    private bool includeDefaults;
    internal AssemblyVersionOptionsConverter(bool includeDefaults);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public static class Nerdbank.GitVersioning.CloudBuild : object {
    public static ICloudBuild[] SupportedCloudBuilds;
    public static ICloudBuild Active { get; }
    private static CloudBuild();
    public static ICloudBuild get_Active();
    internal static string ShouldStartWith(string value, string prefix);
    internal static string IfStartsWith(string value, string prefix);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.AppVeyor : object {
    public string BuildingBranch { get; }
    public string BuildingRef { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public sealed virtual string get_BuildingBranch();
    public string get_BuildingRef();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static void RunAppveyor(string args, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.AtlassianBamboo : object {
    public bool IsPullRequest { get; }
    public string BuildingTag { get; }
    public string BuildingBranch { get; }
    public string BuildingRef { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_BuildingBranch();
    public string get_BuildingRef();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
public class Nerdbank.GitVersioning.CloudBuildServices.BitbucketCloud : object {
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.GitHubActions : object {
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    private static string BuildingRef { get; }
    private static bool IgnoreGitHubRef { get; }
    private static string EnvironmentFile { get; }
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    private static string get_BuildingRef();
    private static bool get_IgnoreGitHubRef();
    private static string get_EnvironmentFile();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static IReadOnlyDictionary`2<string, string> GetDictionaryFor(string variableName, string value);
    private static string GetEnvironmentVariableNameForVariable(string name);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.GitLab : object {
    public string BuildingBranch { get; }
    public string BuildingRef { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public sealed virtual string get_BuildingBranch();
    public string get_BuildingRef();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.Jenkins : object {
    private static Encoding UTF8NoBOM;
    public string BuildingTag { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    private static string Branch { get; }
    private static Jenkins();
    public sealed virtual string get_BuildingTag();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    private static string get_Branch();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static void WriteVersionFile(string buildNumber);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.SpaceAutomation : object {
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    private static string BuildingRef { get; }
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    private static string get_BuildingRef();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.TeamCity : object {
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    private static string BuildingRef { get; }
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    private static string get_BuildingRef();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.Travis : object {
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.VisualStudioTeamServices : object {
    public bool IsPullRequest { get; }
    public string BuildingTag { get; }
    public string BuildingBranch { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    private static string BuildingRef { get; }
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    private static string get_BuildingRef();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static IReadOnlyDictionary`2<string, string> GetDictionaryFor(string variableName, string value);
    private static string GetEnvironmentVariableNameForVariable(string name);
}
public class Nerdbank.GitVersioning.Commands.CloudCommand : object {
    private TextWriter stdout;
    private TextWriter stderr;
    private static String[] CloudProviderNames { get; }
    public CloudCommand(TextWriter outputWriter, TextWriter errorWriter);
    private static String[] get_CloudProviderNames();
    public void SetBuildVariables(string projectDirectory, IEnumerable`1<string> metadata, string version, string ciSystem, bool allVars, bool commonVars, IEnumerable`1<KeyValuePair`2<string, string>> additionalVariables, bool alwaysUseLibGit2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Nerdbank.GitVersioning.DisabledGitContext : GitContext {
    [CompilerGeneratedAttribute]
private VersionFile <VersionFile>k__BackingField;
    public VersionFile VersionFile { get; }
    [NullableAttribute("2")]
public string GitCommitId { get; }
    public bool IsHead { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    [NullableAttribute("2")]
public string HeadCanonicalName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> HeadTags { get; }
    private string DebuggerDisplay { get; }
    public DisabledGitContext(string workingTreePath);
    [CompilerGeneratedAttribute]
public virtual VersionFile get_VersionFile();
    [NullableContextAttribute("2")]
public virtual string get_GitCommitId();
    public virtual bool get_IsHead();
    public virtual Nullable`1<DateTimeOffset> get_GitCommitDate();
    [NullableContextAttribute("2")]
public virtual string get_HeadCanonicalName();
    public virtual IReadOnlyCollection`1<string> get_HeadTags();
    private string get_DebuggerDisplay();
    public virtual void ApplyTag(string name);
    public virtual void Stage(string path);
    public virtual string GetShortUniqueCommitId(int minLength);
    public virtual bool TrySelectCommit(string committish);
    [NullableContextAttribute("2")]
internal virtual int CalculateVersionHeight(VersionOptions committedVersion, VersionOptions workingVersion);
    [NullableContextAttribute("2")]
internal virtual Version GetIdAsVersion(VersionOptions committedVersion, VersionOptions workingVersion, int versionHeight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Nerdbank.GitVersioning.DisabledGitVersionFile : VersionFile {
    protected DisabledGitContext Context { get; }
    public DisabledGitVersionFile(GitContext context);
    protected DisabledGitContext get_Context();
    [NullableContextAttribute("2")]
protected virtual VersionOptions GetVersionCore(String& actualDirectory);
}
public class Nerdbank.GitVersioning.FilterPath : object {
    [CompilerGeneratedAttribute]
private bool <IsExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRelative>k__BackingField;
    public bool IsExclude { get; }
    public bool IsInclude { get; }
    public string RepoRelativePath { get; }
    public bool IsRoot { get; }
    internal bool IsRelative { get; }
    public FilterPath(string pathSpec, string relativeTo);
    [CompilerGeneratedAttribute]
public bool get_IsExclude();
    public bool get_IsInclude();
    [CompilerGeneratedAttribute]
public string get_RepoRelativePath();
    public bool get_IsRoot();
    [CompilerGeneratedAttribute]
internal bool get_IsRelative();
    public bool Excludes(string repoRelativePath, bool ignoreCase);
    public bool Includes(string repoRelativePath, bool ignoreCase);
    public bool IncludesChildren(string repoRelativePath, bool ignoreCase);
    public string ToPathSpec(string repoRelativeBaseDirectory);
    public virtual string ToString();
    private static ValueTuple`2<bool, string> Normalize(string path, string relativeTo);
    private static ValueTuple`2<int, StringBuilder> GetRelativePath(string path, string relativeTo);
}
internal class Nerdbank.GitVersioning.FilterPathJsonConverter : JsonConverter {
    private string repoRelativeBaseDirectory;
    public FilterPathJsonConverter(string repoRelativeBaseDirectory);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Nerdbank.GitVersioning.GitContext : object {
    private protected static ushort MaximumBuildNumberOrRevisionComponent;
    private protected static SemanticVersion SemVer0;
    private protected static Version Version0;
    private string repoRelativeProjectDirectory;
    [CompilerGeneratedAttribute]
private string <WorkingTreePath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DotGitPath>k__BackingField;
    public string WorkingTreePath { get; }
    public string RepoRelativeProjectDirectory { get; public set; }
    public string AbsoluteProjectDirectory { get; }
    public VersionFile VersionFile { get; }
    public bool IsRepository { get; }
    [NullableAttribute("2")]
public string GitCommitId { get; }
    public bool IsHead { get; }
    public bool IsShallow { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    [NullableAttribute("2")]
public string HeadCanonicalName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> HeadTags { get; }
    [NullableAttribute("2")]
protected string DotGitPath { get; }
    protected GitContext(string workingTreePath, string dotGitPath);
    private static GitContext();
    [CompilerGeneratedAttribute]
public string get_WorkingTreePath();
    public string get_RepoRelativeProjectDirectory();
    public void set_RepoRelativeProjectDirectory(string value);
    public string get_AbsoluteProjectDirectory();
    public abstract virtual VersionFile get_VersionFile();
    public bool get_IsRepository();
    [NullableContextAttribute("2")]
public abstract virtual string get_GitCommitId();
    public abstract virtual bool get_IsHead();
    public bool get_IsShallow();
    public abstract virtual Nullable`1<DateTimeOffset> get_GitCommitDate();
    [NullableContextAttribute("2")]
public abstract virtual string get_HeadCanonicalName();
    public abstract virtual IReadOnlyCollection`1<string> get_HeadTags();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_DotGitPath();
    public static GitContext Create(string path, string committish, Engine engine);
    public sealed virtual void Dispose();
    public abstract virtual bool TrySelectCommit(string committish);
    public abstract virtual void ApplyTag(string name);
    public abstract virtual void Stage(string path);
    public abstract virtual string GetShortUniqueCommitId(int minLength);
    [NullableContextAttribute("2")]
internal static bool TryFindGitPaths(string path, String& gitDirectory, String& workingTreeDirectory, String& workingTreeRelativePath);
    [NullableContextAttribute("2")]
internal abstract virtual int CalculateVersionHeight(VersionOptions committedVersion, VersionOptions workingVersion);
    [NullableContextAttribute("2")]
internal abstract virtual Version GetIdAsVersion(VersionOptions committedVersion, VersionOptions workingVersion, int versionHeight);
    internal string GetRepoRelativePath(string absolutePath);
    [NullableContextAttribute("2")]
protected static bool IsVersionFileChangedInWorkingTree(VersionOptions committedVersion, VersionOptions workingVersion);
    protected virtual void Dispose(bool disposing);
    private protected static void FindGitPaths(string path, String& gitDirectory, String& workingTreeDirectory, String& workingTreeRelativePath);
    private static Nullable`1<ValueTuple`2<string, string>> FindGitDir(string path);
    private static string ReadGitDirFromFile(string fileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.GitException : Exception {
    [CompilerGeneratedAttribute]
private ErrorCodes <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShallowClone>k__BackingField;
    public ErrorCodes ErrorCode { get; public set; }
    public bool IsShallowClone { get; public set; }
    public GitException(string message);
    public GitException(string message, Exception innerException);
    protected GitException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public ErrorCodes get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(ErrorCodes value);
    [CompilerGeneratedAttribute]
public bool get_IsShallowClone();
    [CompilerGeneratedAttribute]
public void set_IsShallowClone(bool value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
public interface Nerdbank.GitVersioning.ICloudBuild {
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public abstract virtual bool get_IsApplicable();
    public abstract virtual bool get_IsPullRequest();
    public abstract virtual string get_BuildingBranch();
    public abstract virtual string get_BuildingTag();
    public abstract virtual string get_GitCommitId();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Nerdbank.GitVersioning.LibGit2.LibGit2Context : GitContext {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<string> headTags;
    [CompilerGeneratedAttribute]
private VersionFile <VersionFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Repository <Repository>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Commit <Commit>k__BackingField;
    public VersionFile VersionFile { get; }
    public Repository Repository { get; }
    [NullableAttribute("2")]
public Commit Commit { get; private set; }
    [NullableAttribute("2")]
public string GitCommitId { get; }
    public bool IsHead { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    public string HeadCanonicalName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> HeadTags { get; }
    private string DebuggerDisplay { get; }
    internal LibGit2Context(string workingTreeDirectory, string dotGitPath, string committish);
    [CompilerGeneratedAttribute]
public virtual VersionFile get_VersionFile();
    [CompilerGeneratedAttribute]
public Repository get_Repository();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Commit get_Commit();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Commit(Commit value);
    [NullableContextAttribute("2")]
public virtual string get_GitCommitId();
    public virtual bool get_IsHead();
    public virtual Nullable`1<DateTimeOffset> get_GitCommitDate();
    public virtual string get_HeadCanonicalName();
    public virtual IReadOnlyCollection`1<string> get_HeadTags();
    private string get_DebuggerDisplay();
    public static LibGit2Context Create(string path, string committish);
    public virtual void ApplyTag(string name);
    public virtual bool TrySelectCommit(string committish);
    public virtual void Stage(string path);
    public virtual string GetShortUniqueCommitId(int minLength);
    internal static Repository OpenGitRepo(string path, bool useDefaultConfigSearchPaths);
    [NullableContextAttribute("2")]
internal virtual int CalculateVersionHeight(VersionOptions committedVersion, VersionOptions workingVersion);
    [NullableContextAttribute("2")]
internal virtual Version GetIdAsVersion(VersionOptions committedVersion, VersionOptions workingVersion, int versionHeight);
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <get_HeadTags>b__21_0(Tag tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions : object {
    private static ushort MaximumBuildNumberOrRevisionComponent;
    private static Version Version0;
    private static SemanticVersion SemVer0;
    private static CompareOptions DiffOptions;
    private static LibGit2GitExtensions();
    public static int GetHeight(LibGit2Context context, Func`2<Commit, bool> continueStepping);
    [ExtensionAttribute]
public static ushort GetTruncatedCommitIdAsUInt16(Commit commit);
    public static Commit GetCommitFromVersion(LibGit2Context context, Version version);
    public static IEnumerable`1<Commit> GetCommitsFromVersion(LibGit2Context context, Version version);
    public static string FindLibGit2NativeBinaries(string basePath);
    public static void LoadNativeBinary(string basePath);
    internal static int GetVersionHeight(LibGit2Context context, Version baseVersion);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static Version GetIdAsVersionHelper(Commit commit, VersionOptions versionOptions, int versionHeight);
    [ExtensionAttribute]
private static IRepository GetRepository(IBelongToARepository repositoryMember);
    [ExtensionAttribute]
private static bool CommitMatchesVersion(Commit commit, SemanticVersion expectedVersion, Position comparisonPrecision, GitWalkTracker tracker);
    [ExtensionAttribute]
private static bool CommitMatchesVersion(Commit commit, Version expectedVersion, Position comparisonPrecision, GitWalkTracker tracker);
    private static bool IsVersionHeightMismatch(Version version, VersionOptions versionOptions, Commit commit, GitWalkTracker tracker);
    private static bool IsCommitIdMismatch(Version version, VersionOptions versionOptions, Commit commit);
    [ExtensionAttribute]
private static bool StartsWith(ObjectId object, ushort leadingBytes, bool bigEndian, ushort bitMask);
    private static string EncodeAsHex(Byte[] buffer);
    private static int GetCommitHeight(Commit startingCommit, GitWalkTracker tracker, Func`2<Commit, bool> continueStepping);
    [IteratorStateMachineAttribute("Nerdbank.GitVersioning.LibGit2.LibGit2GitExtensions/<GetCommitsReachableFromRefs>d__20")]
private static IEnumerable`1<Commit> GetCommitsReachableFromRefs(Repository repo);
    [CompilerGeneratedAttribute]
internal static bool <GetCommitHeight>g__TryCalculateHeight|19_0(Commit commit, <>c__DisplayClass19_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Nerdbank.GitVersioning.LibGit2.LibGit2VersionFile : VersionFile {
    public static IReadOnlyList`1<string> PreferredFileNames;
    protected LibGit2Context Context { get; }
    internal LibGit2VersionFile(LibGit2Context context);
    private static LibGit2VersionFile();
    protected LibGit2Context get_Context();
    internal VersionOptions GetVersion(Commit commit, string repoRelativeProjectDirectory, Dictionary`2<ObjectId, VersionOptions> blobVersionCache, String& actualDirectory);
    [NullableContextAttribute("2")]
protected virtual VersionOptions GetVersionCore(String& actualDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Nerdbank.GitVersioning.Managed.GitExtensions : object {
    private static SemanticVersion SemVer0;
    private static GitExtensions();
    public static int GetHeight(ManagedGitContext context, Func`2<GitCommit, bool> continueStepping);
    [ExtensionAttribute]
public static ushort GetTruncatedCommitIdAsUInt16(GitCommit commit);
    internal static int GetVersionHeight(ManagedGitContext context, Version baseVersion);
    private static int GetCommitHeight(GitRepository repository, GitCommit startingCommit, GitWalkTracker tracker, Func`2<GitCommit, bool> continueStepping);
    private static bool IsRelevantCommit(GitRepository repository, GitCommit commit, GitCommit parent, IReadOnlyList`1<FilterPath> filters);
    private static bool IsRelevantCommit(GitRepository repository, GitTree tree, GitTree parent, string relativePath, IReadOnlyList`1<FilterPath> filters);
    private static bool CommitMatchesVersion(GitCommit commit, SemanticVersion expectedVersion, Position comparisonPrecision, GitWalkTracker tracker);
    [CompilerGeneratedAttribute]
internal static bool <GetCommitHeight>g__TryCalculateHeight|4_0(GitCommit commit, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Nerdbank.GitVersioning.Managed.ManagedGitContext : GitContext {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<string> headTags;
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitCommit> <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionFile <VersionFile>k__BackingField;
    public GitRepository Repository { get; }
    public Nullable`1<GitCommit> Commit { get; private set; }
    public VersionFile VersionFile { get; }
    [NullableAttribute("2")]
public string GitCommitId { get; }
    public bool IsHead { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    public string HeadCanonicalName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> HeadTags { get; }
    private string DebuggerDisplay { get; }
    internal ManagedGitContext(string workingDirectory, string dotGitPath, string committish);
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public Nullable`1<GitCommit> get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(Nullable`1<GitCommit> value);
    [CompilerGeneratedAttribute]
public virtual VersionFile get_VersionFile();
    [NullableContextAttribute("2")]
public virtual string get_GitCommitId();
    public virtual bool get_IsHead();
    public virtual Nullable`1<DateTimeOffset> get_GitCommitDate();
    public virtual string get_HeadCanonicalName();
    public virtual IReadOnlyCollection`1<string> get_HeadTags();
    private string get_DebuggerDisplay();
    public static ManagedGitContext Create(string path, string committish);
    public virtual void ApplyTag(string name);
    public virtual bool TrySelectCommit(string committish);
    public virtual void Stage(string path);
    public virtual string GetShortUniqueCommitId(int minLength);
    [NullableContextAttribute("2")]
internal virtual int CalculateVersionHeight(VersionOptions committedVersion, VersionOptions workingVersion);
    [NullableContextAttribute("2")]
internal virtual Version GetIdAsVersion(VersionOptions committedVersion, VersionOptions workingVersion, int versionHeight);
    protected virtual void Dispose(bool disposing);
    private Version GetIdAsVersionHelper(VersionOptions versionOptions, int versionHeight);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Nerdbank.GitVersioning.Managed.ManagedVersionFile : VersionFile {
    private static Byte[] TxtFileNameBytes;
    private static Byte[] JsonFileNameBytes;
    protected ManagedGitContext Context { get; }
    public ManagedVersionFile(GitContext context);
    private static ManagedVersionFile();
    protected ManagedGitContext get_Context();
    [NullableContextAttribute("2")]
internal VersionOptions GetVersion(GitCommit commit, string repoRelativeProjectDirectory, Dictionary`2<GitObjectId, VersionOptions> blobVersionCache, String& actualDirectory);
    [NullableContextAttribute("2")]
protected virtual VersionOptions GetVersionCore(String& actualDirectory);
}
public class Nerdbank.GitVersioning.ManagedGit.DeltaInstruction : ValueType {
    public DeltaInstructionType InstructionType;
    public int Offset;
    public int Size;
}
public enum Nerdbank.GitVersioning.ManagedGit.DeltaInstructionType : Enum {
    public int value__;
    public static DeltaInstructionType Insert;
    public static DeltaInstructionType Copy;
}
public static class Nerdbank.GitVersioning.ManagedGit.DeltaStreamReader : object {
    [NullableContextAttribute("1")]
public static Nullable`1<DeltaInstruction> Read(Stream stream);
    public static Nullable`1<DeltaInstruction> Read(ReadOnlyMemory`1& stream);
}
internal static class Nerdbank.GitVersioning.ManagedGit.FileHelpers : object {
    private static bool IsWindows;
    private static FileHelpers();
    [NullableContextAttribute("1")]
internal static bool TryOpen(string path, FileStream& stream);
    internal static bool TryOpen(ReadOnlySpan`1<char> path, FileStream& stream);
    private static string GetUtf16String(ReadOnlySpan`1<char> chars);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitAnnotatedTag : ValueType {
    [CompilerGeneratedAttribute]
private GitObjectId <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public GitObjectId Object { get; public set; }
    public GitObjectId Sha { get; public set; }
    public string Tag { get; public set; }
    public string Type { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GitObjectId get_Object();
    [CompilerGeneratedAttribute]
public void set_Object(GitObjectId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GitObjectId get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(GitObjectId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    public static bool op_Equality(GitAnnotatedTag left, GitAnnotatedTag right);
    public static bool op_Inequality(GitAnnotatedTag left, GitAnnotatedTag right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GitAnnotatedTag other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Nerdbank.GitVersioning.ManagedGit.GitAnnotatedTagReader : object {
    private static int ObjectLineLength;
    [NullableAttribute("1")]
private static Byte[] ObjectStart;
    [NullableAttribute("1")]
private static Byte[] TypeStart;
    [NullableAttribute("1")]
private static Byte[] TagStart;
    private static GitAnnotatedTagReader();
    [NullableContextAttribute("1")]
public static GitAnnotatedTag Read(Stream stream, GitObjectId sha);
    public static GitAnnotatedTag Read(ReadOnlySpan`1<byte> tag, GitObjectId sha);
    private static GitObjectId ReadObject(ReadOnlySpan`1<byte> line);
    private static ValueTuple`2<string, int> ReadPrefixedString(ReadOnlySpan`1<byte> remaining, Byte[] prefix);
    private static ValueTuple`2<string, int> ReadType(ReadOnlySpan`1<byte> remaining);
    private static ValueTuple`2<string, int> ReadTag(ReadOnlySpan`1<byte> remaining);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitCommit : ValueType {
    [CompilerGeneratedAttribute]
private GitObjectId <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitObjectId> <FirstParent>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitObjectId> <SecondParent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GitObjectId> <AdditionalParents>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitSignature> <Author>k__BackingField;
    public GitObjectId Tree { get; public set; }
    public GitObjectId Sha { get; public set; }
    public Nullable`1<GitObjectId> FirstParent { get; public set; }
    public Nullable`1<GitObjectId> SecondParent { get; public set; }
    public List`1<GitObjectId> AdditionalParents { get; public set; }
    public ParentEnumerable Parents { get; }
    public Nullable`1<GitSignature> Author { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GitObjectId get_Tree();
    [CompilerGeneratedAttribute]
public void set_Tree(GitObjectId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public GitObjectId get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(GitObjectId value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<GitObjectId> get_FirstParent();
    [CompilerGeneratedAttribute]
public void set_FirstParent(Nullable`1<GitObjectId> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<GitObjectId> get_SecondParent();
    [CompilerGeneratedAttribute]
public void set_SecondParent(Nullable`1<GitObjectId> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public List`1<GitObjectId> get_AdditionalParents();
    [CompilerGeneratedAttribute]
public void set_AdditionalParents(List`1<GitObjectId> value);
    public ParentEnumerable get_Parents();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<GitSignature> get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(Nullable`1<GitSignature> value);
    public static bool op_Equality(GitCommit left, GitCommit right);
    public static bool op_Inequality(GitCommit left, GitCommit right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GitCommit other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public static class Nerdbank.GitVersioning.ManagedGit.GitCommitReader : object {
    private static int TreeLineLength;
    private static int ParentLineLength;
    [NullableAttribute("1")]
private static Byte[] TreeStart;
    [NullableAttribute("1")]
private static Byte[] ParentStart;
    [NullableAttribute("1")]
private static Byte[] AuthorStart;
    private static GitCommitReader();
    [NullableContextAttribute("1")]
public static GitCommit Read(Stream stream, GitObjectId sha, bool readAuthor);
    public static GitCommit Read(ReadOnlySpan`1<byte> commit, GitObjectId sha, bool readAuthor);
    private static GitObjectId ReadTree(ReadOnlySpan`1<byte> line);
    private static bool TryReadParent(ReadOnlySpan`1<byte> line, GitObjectId& parent);
    private static bool TryReadAuthor(ReadOnlySpan`1<byte> line, GitSignature& signature);
}
public class Nerdbank.GitVersioning.ManagedGit.GitObjectId : ValueType {
    [NullableAttribute("1")]
private static string HexDigits;
    private static int NativeSize;
    [NullableAttribute("1")]
private static Byte[] HexBytes;
    [NullableAttribute("1")]
private static Byte[] ReverseHexDigits;
    [FixedBufferAttribute("System.Byte", "20")]
private <value>e__FixedBuffer value;
    [NullableAttribute("2")]
private string sha;
    public static GitObjectId Empty { get; }
    private Span`1<byte> Value { get; }
    private static GitObjectId();
    public static GitObjectId get_Empty();
    private Span`1<byte> get_Value();
    public static bool op_Equality(GitObjectId left, GitObjectId right);
    public static bool op_Inequality(GitObjectId left, GitObjectId right);
    public static GitObjectId Parse(ReadOnlySpan`1<byte> value);
    public static GitObjectId Parse(ReadOnlySpan`1<char> value);
    [NullableContextAttribute("1")]
public static GitObjectId Parse(string value);
    public static GitObjectId ParseHex(ReadOnlySpan`1<byte> value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GitObjectId other);
    public virtual int GetHashCode();
    public ushort AsUInt16();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public void CopyAsHex(int start, int length, Span`1<char> chars);
    public void CopyTo(Span`1<byte> value);
    [NullableContextAttribute("1")]
private static Byte[] BuildReverseHexDigits();
    [NullableContextAttribute("1")]
private string CreateString(int start, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitObjectStream : ZLibStream {
    [CompilerGeneratedAttribute]
private string <ObjectType>k__BackingField;
    public string ObjectType { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public GitObjectStream(Stream stream, string objectType);
    [CompilerGeneratedAttribute]
public string get_ObjectType();
    [CompilerGeneratedAttribute]
private void set_ObjectType(string value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    private void ReadObjectTypeAndLength(string objectType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitPack : object {
    private Func`1<FileStream> packStream;
    private Lazy`1<FileStream> indexStream;
    private GitPackCache cache;
    [NullableAttribute("2")]
private MemoryMappedFile packFile;
    [NullableAttribute("2")]
private MemoryMappedViewAccessor accessor;
    private Dictionary`2<GitObjectId, long> offsets;
    private Lazy`1<GitPackIndexReader> indexReader;
    private Queue`1<GitPackPooledStream> pooledStreams;
    [CompilerGeneratedAttribute]
private GetObjectFromRepositoryDelegate <GetObjectFromRepository>k__BackingField;
    public GetObjectFromRepositoryDelegate GetObjectFromRepository { get; private set; }
    public GitPack(GetObjectFromRepositoryDelegate getObjectFromRepositoryDelegate, string indexPath, string packPath, GitPackCache cache);
    public GitPack(GetObjectFromRepositoryDelegate getObjectFromRepositoryDelegate, Lazy`1<FileStream> indexStream, Func`1<FileStream> packStream, GitPackCache cache);
    [CompilerGeneratedAttribute]
public GetObjectFromRepositoryDelegate get_GetObjectFromRepository();
    [CompilerGeneratedAttribute]
private void set_GetObjectFromRepository(GetObjectFromRepositoryDelegate value);
    [NullableContextAttribute("0")]
public Nullable`1<GitObjectId> Lookup(Span`1<byte> objectId, bool endsWithHalfByte);
    public bool TryGetObject(GitObjectId objectId, string objectType, Stream& value);
    public Stream GetObject(long offset, string objectType);
    public void GetCacheStatistics(StringBuilder builder);
    public sealed virtual void Dispose();
    private Nullable`1<long> GetOffset(GitObjectId objectId);
    private Stream GetPackStream();
    private GitPackIndexReader OpenIndex();
}
public abstract class Nerdbank.GitVersioning.ManagedGit.GitPackCache : object {
    public abstract virtual bool TryOpen(long offset, Nullable`1& hit);
    [NullableContextAttribute("1")]
public abstract virtual void GetCacheStatistics(StringBuilder builder);
    [NullableContextAttribute("1")]
public abstract virtual Stream Add(long offset, Stream stream, string objectType);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitPackDeltafiedStream : Stream {
    private long length;
    private Stream baseStream;
    private Stream deltaStream;
    private long position;
    private Nullable`1<DeltaInstruction> current;
    private int offset;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public GitPackDeltafiedStream(Stream baseStream, Stream deltaStream);
    public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> span);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private bool TryGetInstruction(DeltaInstruction& instruction);
}
public class Nerdbank.GitVersioning.ManagedGit.GitPackIndexMappedReader : GitPackIndexReader {
    [NullableAttribute("1")]
private MemoryMappedFile file;
    [NullableAttribute("1")]
private MemoryMappedViewAccessor accessor;
    [NullableAttribute("1")]
private Int32[] fanoutTable;
    private Byte* ptr;
    private bool initialized;
    [NullableContextAttribute("1")]
public GitPackIndexMappedReader(FileStream stream);
    public virtual ValueTuple`2<Nullable`1<long>, Nullable`1<GitObjectId>> GetOffset(Span`1<byte> objectName, bool endsWithHalfByte);
    public virtual void Dispose();
    private ReadOnlySpan`1<byte> GetSpan(ulong offset, int length);
    private void Initialize();
}
public abstract class Nerdbank.GitVersioning.ManagedGit.GitPackIndexReader : object {
    protected static Byte[] Header;
    private static GitPackIndexReader();
    public Nullable`1<long> GetOffset(GitObjectId objectId);
    public abstract virtual ValueTuple`2<Nullable`1<long>, Nullable`1<GitObjectId>> GetOffset(Span`1<byte> objectId, bool endsWithHalfByte);
    public abstract virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCache : GitPackCache {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<long, ValueTuple`2<GitPackMemoryCacheStream, string>> cache;
    public virtual Stream Add(long offset, Stream stream, string objectType);
    public virtual bool TryOpen(long offset, Nullable`1& hit);
    public virtual void GetCacheStatistics(StringBuilder builder);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCacheStream : Stream {
    private Stream stream;
    private MemoryStream cacheStream;
    private long length;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public GitPackMemoryCacheStream(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    private void DisposeStreamIfRead();
}
internal class Nerdbank.GitVersioning.ManagedGit.GitPackMemoryCacheViewStream : Stream {
    private GitPackMemoryCacheStream baseStream;
    private long position;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public GitPackMemoryCacheViewStream(GitPackMemoryCacheStream baseStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitPackNullCache : GitPackCache {
    [CompilerGeneratedAttribute]
private static GitPackNullCache <Instance>k__BackingField;
    public static GitPackNullCache Instance { get; }
    private static GitPackNullCache();
    [CompilerGeneratedAttribute]
public static GitPackNullCache get_Instance();
    public virtual Stream Add(long offset, Stream stream, string objectType);
    public virtual bool TryOpen(long offset, Nullable`1& hit);
    public virtual void GetCacheStatistics(StringBuilder builder);
}
internal enum Nerdbank.GitVersioning.ManagedGit.GitPackObjectType : Enum {
    public int value__;
    public static GitPackObjectType Invalid;
    public static GitPackObjectType OBJ_COMMIT;
    public static GitPackObjectType OBJ_TREE;
    public static GitPackObjectType OBJ_BLOB;
    public static GitPackObjectType OBJ_TAG;
    public static GitPackObjectType OBJ_OFS_DELTA;
    public static GitPackObjectType OBJ_REF_DELTA;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitPackPooledStream : Stream {
    private Stream stream;
    private Queue`1<GitPackPooledStream> pool;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public GitPackPooledStream(Stream stream, Queue`1<GitPackPooledStream> pool);
    public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Nerdbank.GitVersioning.ManagedGit.GitPackReader : object {
    private static Byte[] Signature;
    private static GitPackReader();
    public static Stream GetObject(GitPack pack, Stream stream, long offset, string objectType, GitPackObjectType packObjectType);
    [NullableContextAttribute("0")]
private static ValueTuple`2<GitPackObjectType, long> ReadObjectHeader(Stream stream);
    private static long ReadVariableLengthInteger(Stream stream);
}
internal class Nerdbank.GitVersioning.ManagedGit.GitReferenceReader : object {
    [NullableAttribute("1")]
private static Byte[] RefPrefix;
    private static GitReferenceReader();
    [NullableContextAttribute("1")]
public static object ReadReference(Stream stream);
    public static object ReadReference(Span`1<byte> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitRepository : object {
    private static string HeadFileName;
    private static string GitDirectoryName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ReadOnlyMemory`1<GitPack>> packs;
    private Char[] objectPathBuffer;
    private List`1<GitRepository> alternates;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectDirectory>k__BackingField;
    public static Encoding Encoding { get; }
    public bool IgnoreCase { get; private set; }
    public string WorkingDirectory { get; private set; }
    public string GitDirectory { get; private set; }
    public string CommonDirectory { get; private set; }
    public string ObjectDirectory { get; private set; }
    public GitRepository(string workingDirectory, string gitDirectory, string commonDirectory, string objectDirectory);
    public static Encoding get_Encoding();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
private void set_IgnoreCase(bool value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_GitDirectory();
    [CompilerGeneratedAttribute]
private void set_GitDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_CommonDirectory();
    [CompilerGeneratedAttribute]
private void set_CommonDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectDirectory();
    [CompilerGeneratedAttribute]
private void set_ObjectDirectory(string value);
    [NullableContextAttribute("2")]
public static GitRepository Create(string workingDirectory);
    public static GitRepository Create(string workingDirectory, string gitDirectory, string commonDirectory, string objectDirectory);
    [NullableContextAttribute("0")]
public static string GetString(ReadOnlySpan`1<byte> bytes);
    [NullableContextAttribute("0")]
public static List`1<string> ParseAlternates(ReadOnlySpan`1<byte> alternates);
    [NullableContextAttribute("0")]
public static List`1<string> ParseAlternates(ReadOnlySpan`1<byte> alternates, int skipCount);
    public string ShortenObjectId(GitObjectId objectId, int minimum);
    public object GetHeadAsReferenceOrSha();
    public GitObjectId GetHeadCommitSha();
    public Nullable`1<GitCommit> GetHeadCommit(bool readAuthor);
    public GitCommit GetCommit(GitObjectId sha, bool readAuthor);
    public Nullable`1<GitObjectId> Lookup(string objectish);
    public GitTree GetTree(GitObjectId sha);
    [NullableContextAttribute("0")]
public GitObjectId GetTreeEntry(GitObjectId treeId, ReadOnlySpan`1<byte> nodeName);
    public Stream GetObjectBySha(GitObjectId sha, string objectType);
    public bool TryGetObjectBySha(GitObjectId sha, string objectType, Stream& value);
    public string GetCacheStatistics();
    public List`1<string> LookupTags(GitObjectId objectId);
    public virtual string ToString();
    public sealed virtual void Dispose();
    private static string TrimEndingDirectorySeparator(string path);
    [NullableContextAttribute("0")]
private static bool TryConvertHexStringToByteArray(string hexString, Span`1<byte> data);
    private bool TryGetObjectByPath(GitObjectId sha, string objectType, Stream& value);
    private ReadOnlyMemory`1<GitPack> LoadPacks();
    [IteratorStateMachineAttribute("Nerdbank.GitVersioning.ManagedGit.GitRepository/<EnumerateLines>d__51")]
private IEnumerable`1<string> EnumerateLines(string filePath);
    private IEnumerable`1<string> EnumeratePackedRefsRaw(Boolean& tagsPeeled);
    private IEnumerable`1<ValueTuple`2<string, string>> EnumeratePackedRefsWithPeelLines(Boolean& tagsPeeled);
    [CompilerGeneratedAttribute]
internal static GitObjectId <Lookup>g__GetObjId|38_0(<>c__DisplayClass38_0& );
    [CompilerGeneratedAttribute]
private void <LookupTags>g__HandleCandidate|44_0(GitObjectId pointsAt, string tagName, bool isPeeled, <>c__DisplayClass44_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitSignature : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Date>k__BackingField;
    public string Name { get; public set; }
    public string Email { get; public set; }
    public DateTimeOffset Date { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTimeOffset get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTimeOffset value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitTree : object {
    [CompilerGeneratedAttribute]
private static GitTree <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <Sha>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, GitTreeEntry> <Children>k__BackingField;
    public static GitTree Empty { get; }
    public GitObjectId Sha { get; public set; }
    public Dictionary`2<string, GitTreeEntry> Children { get; }
    private static GitTree();
    [CompilerGeneratedAttribute]
public static GitTree get_Empty();
    [CompilerGeneratedAttribute]
public GitObjectId get_Sha();
    [CompilerGeneratedAttribute]
public void set_Sha(GitObjectId value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, GitTreeEntry> get_Children();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.GitTreeEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <Sha>k__BackingField;
    public string Name { get; }
    public bool IsFile { get; }
    public GitObjectId Sha { get; }
    public GitTreeEntry(string name, bool isFile, GitObjectId sha);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsFile();
    [CompilerGeneratedAttribute]
public GitObjectId get_Sha();
    public virtual string ToString();
}
internal static class Nerdbank.GitVersioning.ManagedGit.GitTreeReader : object {
    [NullableContextAttribute("1")]
public static GitTree Read(Stream stream, GitObjectId objectId);
}
public class Nerdbank.GitVersioning.ManagedGit.GitTreeStreamingReader : object {
    public static GitObjectId FindNode(Stream stream, ReadOnlySpan`1<byte> name);
}
public class Nerdbank.GitVersioning.ManagedGit.MemoryMappedStream : Stream {
    private MemoryMappedViewAccessor accessor;
    private long length;
    private Byte* ptr;
    private long position;
    private bool disposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public MemoryMappedStream(MemoryMappedViewAccessor accessor);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
public static class Nerdbank.GitVersioning.ManagedGit.StreamExtensions : object {
    [ExtensionAttribute]
public static void ReadAll(Stream stream, Span`1<byte> buffer);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int ReadMbsInt(Stream stream);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static int ReadExactly(Stream readFrom, int length, Stream copyTo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.ManagedGit.ZLibStream : Stream {
    private DeflateStream stream;
    private long length;
    private long position;
    public Stream BaseStream { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public ZLibStream(Stream stream, long length);
    public Stream get_BaseStream();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual int Read(Byte[] array, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    [AsyncStateMachineAttribute("Nerdbank.GitVersioning.ManagedGit.ZLibStream/<ReadAsync>d__19")]
public virtual Task`1<int> ReadAsync(Byte[] array, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Nerdbank.GitVersioning.ManagedGit.ZLibStream/<ReadAsync>d__20")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    protected void Initialize(long length);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Nerdbank.GitVersioning.NoGitContext : GitContext {
    private static string NotAGitRepoMessage;
    [CompilerGeneratedAttribute]
private VersionFile <VersionFile>k__BackingField;
    public VersionFile VersionFile { get; }
    [NullableAttribute("2")]
public string GitCommitId { get; }
    public bool IsHead { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    [NullableAttribute("2")]
public string HeadCanonicalName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<string> HeadTags { get; }
    private string DebuggerDisplay { get; }
    public NoGitContext(string workingTreePath);
    [CompilerGeneratedAttribute]
public virtual VersionFile get_VersionFile();
    [NullableContextAttribute("2")]
public virtual string get_GitCommitId();
    public virtual bool get_IsHead();
    public virtual Nullable`1<DateTimeOffset> get_GitCommitDate();
    [NullableContextAttribute("2")]
public virtual string get_HeadCanonicalName();
    public virtual IReadOnlyCollection`1<string> get_HeadTags();
    private string get_DebuggerDisplay();
    public virtual void ApplyTag(string name);
    public virtual void Stage(string path);
    public virtual string GetShortUniqueCommitId(int minLength);
    public virtual bool TrySelectCommit(string committish);
    [NullableContextAttribute("2")]
internal virtual int CalculateVersionHeight(VersionOptions committedVersion, VersionOptions workingVersion);
    [NullableContextAttribute("2")]
internal virtual Version GetIdAsVersion(VersionOptions committedVersion, VersionOptions workingVersion, int versionHeight);
}
internal class Nerdbank.GitVersioning.NoGitVersionFile : VersionFile {
    public NoGitVersionFile(GitContext context);
    protected virtual VersionOptions GetVersionCore(String& actualDirectory);
}
public class Nerdbank.GitVersioning.ReleaseManager : object {
    private TextWriter stdout;
    private TextWriter stderr;
    public ReleaseManager(TextWriter outputWriter, TextWriter errorWriter);
    public void PrepareRelease(string projectDirectory, string releaseUnstableTag, Version nextVersion, Nullable`1<ReleaseVersionIncrement> versionIncrement, ReleaseManagerOutputMode outputMode, string unformattedCommitMessage);
    private static bool IsVersionDecrement(SemanticVersion oldVersion, SemanticVersion newVersion);
    private string GetReleaseBranchName(VersionOptions versionOptions);
    private void UpdateVersion(LibGit2Context context, SemanticVersion oldVersion, SemanticVersion newVersion, string unformattedCommitMessage);
    private Signature GetSignature(Repository repository);
    private LibGit2Context GetRepository(string projectDirectory);
    private SemanticVersion GetNextDevVersion(VersionOptions versionOptions, Version nextVersionOverride, Nullable`1<ReleaseVersionIncrement> versionIncrementOverride);
    private void WriteToOutput(ReleaseInfo releaseInfo);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Nerdbank.GitVersioning.SemanticVersion : object {
    private static Regex FullSemVerPattern;
    private static Regex PrereleasePattern;
    private static Regex BuildMetadataPattern;
    private static Regex FullSemVerWithMacrosPattern;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildMetadata>k__BackingField;
    public Version Version { get; }
    public string Prerelease { get; }
    public string BuildMetadata { get; }
    public Nullable`1<Position> VersionHeightPosition { get; }
    internal Nullable`1<Position> GitCommitIdPosition { get; }
    internal bool IsDefault { get; }
    private string DebuggerDisplay { get; }
    public SemanticVersion(Version version, string prerelease, string buildMetadata);
    public SemanticVersion(string version, string prerelease, string buildMetadata);
    private static SemanticVersion();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
public string get_BuildMetadata();
    public Nullable`1<Position> get_VersionHeightPosition();
    internal Nullable`1<Position> get_GitCommitIdPosition();
    internal bool get_IsDefault();
    private string get_DebuggerDisplay();
    public static bool TryParse(string semanticVersion, SemanticVersion& version);
    public static SemanticVersion Parse(string semanticVersion);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(SemanticVersion other);
    internal static bool WillVersionChangeResetVersionHeight(SemanticVersion first, SemanticVersion second, Position versionHeightPosition);
    internal static int ReadVersionPosition(Version version, Position position);
    internal int ReadVersionPosition(Position position);
    internal bool IsMatchingVersion(Version version);
    internal bool Contains(Version version);
    private static void VerifyPatternMatch(string input, Regex pattern, string parameterName);
}
[ExtensionAttribute]
internal static class Nerdbank.GitVersioning.SemanticVersionExtensions : object {
    private static Regex NumericIdentifierRegex;
    private static SemanticVersionExtensions();
    [ExtensionAttribute]
internal static SemanticVersion Increment(SemanticVersion currentVersion, ReleaseVersionIncrement increment);
    [ExtensionAttribute]
internal static SemanticVersion SetFirstPrereleaseTag(SemanticVersion version, string newFirstTag);
    [ExtensionAttribute]
internal static SemanticVersion WithoutPrepreleaseTags(SemanticVersion version);
    internal static string MakePrereleaseSemVer1Compliant(string prerelease, int paddingSize);
}
internal class Nerdbank.GitVersioning.SemanticVersionJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal static class Nerdbank.GitVersioning.Utilities : object {
    private static int ProcessCannotAccessFileHR;
    internal static void FileOperationWithRetry(Action operation);
}
[ExtensionAttribute]
public static class Nerdbank.GitVersioning.VersionExtensions : object {
    [ExtensionAttribute]
public static Version EnsureNonNegativeComponents(Version version, int fieldCount);
    [ExtensionAttribute]
public static string ToStringSafe(Version version, int fieldCount);
    internal static Version Create(int major, int minor, int build, int revision);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Nerdbank.GitVersioning.VersionFile : object {
    public static string TxtFileName;
    public static string JsonFileName;
    [CompilerGeneratedAttribute]
private GitContext <Context>k__BackingField;
    protected GitContext Context { get; }
    protected VersionFile(GitContext context);
    [CompilerGeneratedAttribute]
protected GitContext get_Context();
    public bool IsVersionDefined();
    [NullableContextAttribute("2")]
public VersionOptions GetWorkingCopyVersion();
    [NullableContextAttribute("2")]
public VersionOptions GetWorkingCopyVersion(String& actualDirectory);
    public string SetVersion(string projectDirectory, Version version, string unstableTag, bool includeSchemaProperty);
    public string SetVersion(string projectDirectory, VersionOptions version, bool includeSchemaProperty);
    [NullableContextAttribute("2")]
public VersionOptions GetVersion();
    [NullableContextAttribute("2")]
public VersionOptions GetVersion(String& actualDirectory);
    [NullableContextAttribute("2")]
protected static VersionOptions TryReadVersionJsonContent(string jsonContent, string repoRelativeBaseDirectory);
    protected static VersionOptions TryReadVersionFile(TextReader versionTextContent);
    [NullableContextAttribute("2")]
protected abstract virtual VersionOptions GetVersionCore(String& actualDirectory);
    [NullableContextAttribute("2")]
protected VersionOptions GetWorkingCopyVersion(string startingDirectory, String& actualDirectory);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Nerdbank.GitVersioning.VersionOptions : object {
    public static VersionPrecision DefaultVersionPrecision;
    [NullableAttribute("1")]
public static string VersionHeightPlaceholder;
    public static int DefaultGitCommitIdShortFixedLength;
    private static int DefaultSemVer1NumericIdentifierPadding;
    [DebuggerBrowsableAttribute("0")]
private bool isFrozen;
    [DebuggerBrowsableAttribute("0")]
private string gitCommitIdPrefix;
    [DebuggerBrowsableAttribute("0")]
private SemanticVersion version;
    [DebuggerBrowsableAttribute("0")]
private AssemblyVersionOptions assemblyVersion;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> buildNumberOffset;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> semVer1NumericIdentifierPadding;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> gitCommitIdShortFixedLength;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> gitCommitIdShortAutoMinimum;
    [DebuggerBrowsableAttribute("0")]
private NuGetPackageVersionOptions nuGetPackageVersion;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute("0")]
private IReadOnlyList`1<string> publicReleaseRefSpec;
    [DebuggerBrowsableAttribute("0")]
private CloudBuildOptions cloudBuild;
    [DebuggerBrowsableAttribute("0")]
private ReleaseOptions release;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute("0")]
private IReadOnlyList`1<FilterPath> pathFilters;
    [DebuggerBrowsableAttribute("0")]
private bool inherit;
    [NullableAttribute("1")]
[JsonPropertyAttribute]
public string Schema { get; }
    [JsonPropertyAttribute]
public SemanticVersion Version { get; public set; }
    [JsonPropertyAttribute]
public AssemblyVersionOptions AssemblyVersion { get; public set; }
    [JsonPropertyAttribute]
public string GitCommitIdPrefix { get; public set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
public AssemblyVersionOptions AssemblyVersionOrDefault { get; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("Use VersionHeightOffset instead.")]
[EditorBrowsableAttribute("1")]
public Nullable`1<int> BuildNumberOffset { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> VersionHeightOffset { get; public set; }
    [JsonIgnoreAttribute]
[ObsoleteAttribute("Use VersionHeightOffsetOrDefault instead.")]
[EditorBrowsableAttribute("1")]
public int BuildNumberOffsetOrDefault { get; }
    [JsonIgnoreAttribute]
public int VersionHeightOffsetOrDefault { get; }
    [JsonPropertyAttribute]
public Nullable`1<int> SemVer1NumericIdentifierPadding { get; public set; }
    [JsonIgnoreAttribute]
public int SemVer1NumericIdentifierPaddingOrDefault { get; }
    [JsonPropertyAttribute]
public Nullable`1<int> GitCommitIdShortFixedLength { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> GitCommitIdShortAutoMinimum { get; public set; }
    [JsonPropertyAttribute]
public NuGetPackageVersionOptions NuGetPackageVersion { get; public set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
public NuGetPackageVersionOptions NuGetPackageVersionOrDefault { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
public IReadOnlyList`1<string> PublicReleaseRefSpec { get; public set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
public IReadOnlyList`1<string> PublicReleaseRefSpecOrDefault { get; }
    [JsonPropertyAttribute]
public CloudBuildOptions CloudBuild { get; public set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
public CloudBuildOptions CloudBuildOrDefault { get; }
    [JsonPropertyAttribute]
public ReleaseOptions Release { get; public set; }
    [NullableAttribute("1")]
[JsonIgnoreAttribute]
public ReleaseOptions ReleaseOrDefault { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[JsonPropertyAttribute]
public IReadOnlyList`1<FilterPath> PathFilters { get; public set; }
    [JsonPropertyAttribute]
public bool Inherit { get; public set; }
    [JsonIgnoreAttribute]
public bool IsFrozen { get; }
    [JsonIgnoreAttribute]
public Nullable`1<Position> VersionHeightPosition { get; }
    [JsonIgnoreAttribute]
internal Nullable`1<Position> GitCommitIdPosition { get; }
    internal bool IsDefaultVersionTheOnlyPropertySet { get; }
    [NullableAttribute("1")]
private string DebuggerDisplay { get; }
    [NullableContextAttribute("1")]
public VersionOptions(VersionOptions copyFrom);
    [NullableContextAttribute("1")]
public string get_Schema();
    public SemanticVersion get_Version();
    public void set_Version(SemanticVersion value);
    public AssemblyVersionOptions get_AssemblyVersion();
    public void set_AssemblyVersion(AssemblyVersionOptions value);
    public string get_GitCommitIdPrefix();
    public void set_GitCommitIdPrefix(string value);
    [NullableContextAttribute("1")]
public AssemblyVersionOptions get_AssemblyVersionOrDefault();
    public Nullable`1<int> get_BuildNumberOffset();
    public void set_BuildNumberOffset(Nullable`1<int> value);
    public Nullable`1<int> get_VersionHeightOffset();
    public void set_VersionHeightOffset(Nullable`1<int> value);
    public int get_BuildNumberOffsetOrDefault();
    public int get_VersionHeightOffsetOrDefault();
    public Nullable`1<int> get_SemVer1NumericIdentifierPadding();
    public void set_SemVer1NumericIdentifierPadding(Nullable`1<int> value);
    public int get_SemVer1NumericIdentifierPaddingOrDefault();
    public Nullable`1<int> get_GitCommitIdShortFixedLength();
    public void set_GitCommitIdShortFixedLength(Nullable`1<int> value);
    public Nullable`1<int> get_GitCommitIdShortAutoMinimum();
    public void set_GitCommitIdShortAutoMinimum(Nullable`1<int> value);
    public NuGetPackageVersionOptions get_NuGetPackageVersion();
    public void set_NuGetPackageVersion(NuGetPackageVersionOptions value);
    [NullableContextAttribute("1")]
public NuGetPackageVersionOptions get_NuGetPackageVersionOrDefault();
    public IReadOnlyList`1<string> get_PublicReleaseRefSpec();
    public void set_PublicReleaseRefSpec(IReadOnlyList`1<string> value);
    [NullableContextAttribute("1")]
public IReadOnlyList`1<string> get_PublicReleaseRefSpecOrDefault();
    public CloudBuildOptions get_CloudBuild();
    public void set_CloudBuild(CloudBuildOptions value);
    [NullableContextAttribute("1")]
public CloudBuildOptions get_CloudBuildOrDefault();
    public ReleaseOptions get_Release();
    public void set_Release(ReleaseOptions value);
    [NullableContextAttribute("1")]
public ReleaseOptions get_ReleaseOrDefault();
    public IReadOnlyList`1<FilterPath> get_PathFilters();
    public void set_PathFilters(IReadOnlyList`1<FilterPath> value);
    public bool get_Inherit();
    public void set_Inherit(bool value);
    public bool get_IsFrozen();
    public Nullable`1<Position> get_VersionHeightPosition();
    internal Nullable`1<Position> get_GitCommitIdPosition();
    internal bool get_IsDefaultVersionTheOnlyPropertySet();
    [NullableContextAttribute("1")]
private string get_DebuggerDisplay();
    [NullableContextAttribute("1")]
public static VersionOptions FromVersion(Version version, string unstableTag);
    [NullableContextAttribute("1")]
public static JsonSerializerSettings GetJsonSettings(bool includeDefaults);
    [NullableContextAttribute("1")]
public static JsonSerializerSettings GetJsonSettings(bool includeDefaults, bool includeSchemaProperty);
    [NullableContextAttribute("1")]
public static JsonSerializerSettings GetJsonSettings(bool includeDefaults, bool includeSchemaProperty, string repoRelativeBaseDirectory);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(VersionOptions other);
    public void Freeze();
    [NullableContextAttribute("1")]
private void SetIfNotReadOnly(T& field, T value);
}
internal class Nerdbank.GitVersioning.VersionOptionsContractResolver : CamelCasePropertyNamesContractResolver {
    private static object TypeContractCacheLock;
    private static Dictionary`2<Tuple`3<bool, bool, Type>, JsonContract> ContractCache;
    [CompilerGeneratedAttribute]
private bool <IncludeSchemaProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDefaults>k__BackingField;
    internal bool IncludeSchemaProperty { get; internal set; }
    internal bool IncludeDefaults { get; internal set; }
    private static VersionOptionsContractResolver();
    [CompilerGeneratedAttribute]
internal bool get_IncludeSchemaProperty();
    [CompilerGeneratedAttribute]
internal void set_IncludeSchemaProperty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IncludeDefaults();
    [CompilerGeneratedAttribute]
internal void set_IncludeDefaults(bool value);
    public virtual JsonContract ResolveContract(Type type);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool <CreateProperty>b__12_0(object instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.VersionOracle : object {
    private protected static Version Version0;
    private static bool UseLibGit2;
    private GitContext context;
    [NullableAttribute("2")]
private ICloudBuild cloudBuild;
    private int assemblyInformationalVersionComponentCount;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VersionOptions <VersionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublicRelease>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <GitCommitIdShort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionHeight>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BuildingRef>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BuildMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private CloudBuildNumberOptions <CloudBuildNumberOptions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VersionOptions <CommittedVersion>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private VersionOptions <WorkingVersion>k__BackingField;
    public string CloudBuildNumber { get; }
    [IgnoreAttribute]
public bool CloudBuildNumberEnabled { get; }
    [IgnoreAttribute]
public IEnumerable`1<string> BuildMetadataWithCommitId { get; }
    public bool VersionFileFound { get; }
    [NullableAttribute("2")]
[IgnoreAttribute]
public VersionOptions VersionOptions { get; }
    public Version AssemblyVersion { get; }
    public Version AssemblyFileVersion { get; }
    public string AssemblyInformationalVersion { get; }
    public bool PublicRelease { get; public set; }
    public string PrereleaseVersion { get; }
    [NullableAttribute("2")]
public string PrereleaseVersionNoLeadingHyphen { get; }
    public Version SimpleVersion { get; }
    public int BuildNumber { get; }
    public int VersionRevision { get; }
    public Version MajorMinorVersion { get; }
    public int VersionMajor { get; }
    public int VersionMinor { get; }
    [NullableAttribute("2")]
public string GitCommitId { get; }
    [NullableAttribute("2")]
public string GitCommitIdShort { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    public int VersionHeight { get; protected set; }
    public int VersionHeightOffset { get; }
    [NullableAttribute("2")]
public string BuildingRef { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreAttribute]
public IReadOnlyCollection`1<string> Tags { get; }
    public Version Version { get; protected set; }
    [IgnoreAttribute]
public bool CloudBuildAllVarsEnabled { get; }
    [IgnoreAttribute]
public IDictionary`2<string, string> CloudBuildAllVars { get; }
    [IgnoreAttribute]
public bool CloudBuildVersionVarsEnabled { get; }
    [IgnoreAttribute]
public IDictionary`2<string, string> CloudBuildVersionVars { get; }
    [IgnoreAttribute]
public List`1<string> BuildMetadata { get; }
    public string BuildMetadataFragment { get; }
    public string NuGetPackageVersion { get; }
    public string ChocolateyPackageVersion { get; }
    public string NpmPackageVersion { get; }
    public string SemVer1 { get; }
    public string SemVer2 { get; }
    public int SemVer1NumericIdentifierPadding { get; }
    protected CloudBuildNumberOptions CloudBuildNumberOptions { get; protected set; }
    [NullableAttribute("2")]
protected VersionOptions CommittedVersion { get; }
    [NullableAttribute("2")]
protected VersionOptions WorkingVersion { get; }
    private string NuGetSemVer1BuildMetadata { get; }
    private string SemVer1BuildMetadata { get; }
    private string NuGetSemVer1 { get; }
    private string NuGetSemVer2 { get; }
    private string SemVer2BuildMetadata { get; }
    private string PrereleaseVersionSemVer1 { get; }
    private string GitCommitIdShortForNonPublicPrereleaseTag { get; }
    private int VersionHeightWithOffset { get; }
    public VersionOracle(GitContext context, ICloudBuild cloudBuild, Nullable`1<int> overrideVersionHeightOffset);
    private static VersionOracle();
    public string get_CloudBuildNumber();
    public bool get_CloudBuildNumberEnabled();
    [IteratorStateMachineAttribute("Nerdbank.GitVersioning.VersionOracle/<get_BuildMetadataWithCommitId>d__11")]
public IEnumerable`1<string> get_BuildMetadataWithCommitId();
    public bool get_VersionFileFound();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public VersionOptions get_VersionOptions();
    public Version get_AssemblyVersion();
    public Version get_AssemblyFileVersion();
    public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public bool get_PublicRelease();
    [CompilerGeneratedAttribute]
public void set_PublicRelease(bool value);
    public string get_PrereleaseVersion();
    [NullableContextAttribute("2")]
public string get_PrereleaseVersionNoLeadingHyphen();
    public Version get_SimpleVersion();
    public int get_BuildNumber();
    public int get_VersionRevision();
    public Version get_MajorMinorVersion();
    public int get_VersionMajor();
    public int get_VersionMinor();
    [NullableContextAttribute("2")]
public string get_GitCommitId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_GitCommitIdShort();
    public Nullable`1<DateTimeOffset> get_GitCommitDate();
    [CompilerGeneratedAttribute]
public int get_VersionHeight();
    [CompilerGeneratedAttribute]
protected void set_VersionHeight(int value);
    public int get_VersionHeightOffset();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_BuildingRef();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_BuildingRef(string value);
    public IReadOnlyCollection`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(Version value);
    public bool get_CloudBuildAllVarsEnabled();
    public IDictionary`2<string, string> get_CloudBuildAllVars();
    public bool get_CloudBuildVersionVarsEnabled();
    public IDictionary`2<string, string> get_CloudBuildVersionVars();
    [CompilerGeneratedAttribute]
public List`1<string> get_BuildMetadata();
    public string get_BuildMetadataFragment();
    public string get_NuGetPackageVersion();
    public string get_ChocolateyPackageVersion();
    public string get_NpmPackageVersion();
    public string get_SemVer1();
    public string get_SemVer2();
    public int get_SemVer1NumericIdentifierPadding();
    [CompilerGeneratedAttribute]
protected CloudBuildNumberOptions get_CloudBuildNumberOptions();
    [CompilerGeneratedAttribute]
protected void set_CloudBuildNumberOptions(CloudBuildNumberOptions value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected VersionOptions get_CommittedVersion();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected VersionOptions get_WorkingVersion();
    private string get_NuGetSemVer1BuildMetadata();
    private string get_SemVer1BuildMetadata();
    private string get_NuGetSemVer1();
    private string get_NuGetSemVer2();
    private string get_SemVer2BuildMetadata();
    private string get_PrereleaseVersionSemVer1();
    private string get_GitCommitIdShortForNonPublicPrereleaseTag();
    private int get_VersionHeightWithOffset();
    private static string FormatBuildMetadata(IEnumerable`1<string> identifiers);
    private static Version GetAssemblyVersion(Version version, VersionOptions versionOptions);
    private static Version ApplyVersionPrecision(Version version, VersionPrecision precision);
    private string ReplaceMacros(string prereleaseOrBuildMetadata);
    [CompilerGeneratedAttribute]
internal static Exception <.ctor>g__ThrowShallowClone|5_0(Exception inner);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <.ctor>b__5_1(string expr);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <.ctor>b__5_3(string expr);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.4.173.63159")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal class Windows.Win32.Foundation.BOOL : ValueType {
    internal int Value;
    internal BOOL(int value);
    internal BOOL(bool value);
    public static int op_Implicit(BOOL value);
    public static BOOL op_Explicit(int value);
    public static bool op_Equality(BOOL left, BOOL right);
    public static bool op_Inequality(BOOL left, BOOL right);
    public sealed virtual bool Equals(BOOL other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Implicit(BOOL value);
    public static BOOL op_Implicit(bool value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal class Windows.Win32.Foundation.HANDLE : ValueType {
    internal IntPtr Value;
    internal static HANDLE INVALID_HANDLE_VALUE;
    internal static HANDLE Null { get; }
    internal bool IsNull { get; }
    internal HANDLE(IntPtr value);
    private static HANDLE();
    internal static HANDLE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HANDLE value);
    public static HANDLE op_Explicit(IntPtr value);
    public static bool op_Equality(HANDLE left, HANDLE right);
    public static bool op_Inequality(HANDLE left, HANDLE right);
    public sealed virtual bool Equals(HANDLE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Value}")]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal class Windows.Win32.Foundation.HINSTANCE : ValueType {
    internal IntPtr Value;
    internal static HINSTANCE Null { get; }
    internal bool IsNull { get; }
    internal HINSTANCE(IntPtr value);
    internal static HINSTANCE get_Null();
    internal bool get_IsNull();
    public static IntPtr op_Implicit(HINSTANCE value);
    public static HINSTANCE op_Explicit(IntPtr value);
    public static bool op_Equality(HINSTANCE left, HINSTANCE right);
    public static bool op_Inequality(HINSTANCE left, HINSTANCE right);
    public sealed virtual bool Equals(HINSTANCE other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay}")]
internal class Windows.Win32.Foundation.PCWSTR : ValueType {
    internal Char* Value;
    internal int Length { get; }
    private string DebuggerDisplay { get; }
    internal PCWSTR(Char* value);
    public static Char* op_Explicit(PCWSTR value);
    public static PCWSTR op_Implicit(Char* value);
    public sealed virtual bool Equals(PCWSTR other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal int get_Length();
    public virtual string ToString();
    internal ReadOnlySpan`1<char> AsSpan();
    private string get_DebuggerDisplay();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal class Windows.Win32.FreeLibrarySafeHandle : SafeHandle {
    private static IntPtr INVALID_HANDLE_VALUE;
    public bool IsInvalid { get; }
    internal FreeLibrarySafeHandle(IntPtr preexistingHandle, bool ownsHandle);
    private static FreeLibrarySafeHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal static class Windows.Win32.PInvoke : object {
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.0")]
internal static BOOL CloseHandle(HANDLE hObject);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static SafeFileHandle CreateFile(string lpFileName, UInt32 dwDesiredAccess, FILE_SHARE_MODE dwShareMode, Nullable`1<SECURITY_ATTRIBUTES> lpSecurityAttributes, FILE_CREATION_DISPOSITION dwCreationDisposition, FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, SafeHandle hTemplateFile);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HANDLE CreateFile(PCWSTR lpFileName, UInt32 dwDesiredAccess, FILE_SHARE_MODE dwShareMode, SECURITY_ATTRIBUTES* lpSecurityAttributes, FILE_CREATION_DISPOSITION dwCreationDisposition, FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, HANDLE hTemplateFile);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static BOOL FreeLibrary(HINSTANCE hLibModule);
    [SupportedOSPlatformAttribute("windows5.1.2600")]
internal static FreeLibrarySafeHandle LoadLibrary(string lpLibFileName);
    [DefaultDllImportSearchPathsAttribute("2048")]
[SupportedOSPlatformAttribute("windows5.1.2600")]
internal static HINSTANCE LoadLibrary(PCWSTR lpLibFileName);
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal class Windows.Win32.Security.SECURITY_ATTRIBUTES : ValueType {
    internal UInt32 nLength;
    internal Void* lpSecurityDescriptor;
    internal BOOL bInheritHandle;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal enum Windows.Win32.Storage.FileSystem.FILE_ACCESS_RIGHTS : Enum {
    public UInt32 value__;
    public static FILE_ACCESS_RIGHTS FILE_READ_DATA;
    public static FILE_ACCESS_RIGHTS FILE_LIST_DIRECTORY;
    public static FILE_ACCESS_RIGHTS FILE_WRITE_DATA;
    public static FILE_ACCESS_RIGHTS FILE_ADD_FILE;
    public static FILE_ACCESS_RIGHTS FILE_APPEND_DATA;
    public static FILE_ACCESS_RIGHTS FILE_ADD_SUBDIRECTORY;
    public static FILE_ACCESS_RIGHTS FILE_CREATE_PIPE_INSTANCE;
    public static FILE_ACCESS_RIGHTS FILE_READ_EA;
    public static FILE_ACCESS_RIGHTS FILE_WRITE_EA;
    public static FILE_ACCESS_RIGHTS FILE_EXECUTE;
    public static FILE_ACCESS_RIGHTS FILE_TRAVERSE;
    public static FILE_ACCESS_RIGHTS FILE_DELETE_CHILD;
    public static FILE_ACCESS_RIGHTS FILE_READ_ATTRIBUTES;
    public static FILE_ACCESS_RIGHTS FILE_WRITE_ATTRIBUTES;
    public static FILE_ACCESS_RIGHTS DELETE;
    public static FILE_ACCESS_RIGHTS READ_CONTROL;
    public static FILE_ACCESS_RIGHTS WRITE_DAC;
    public static FILE_ACCESS_RIGHTS WRITE_OWNER;
    public static FILE_ACCESS_RIGHTS SYNCHRONIZE;
    public static FILE_ACCESS_RIGHTS STANDARD_RIGHTS_REQUIRED;
    public static FILE_ACCESS_RIGHTS STANDARD_RIGHTS_READ;
    public static FILE_ACCESS_RIGHTS STANDARD_RIGHTS_WRITE;
    public static FILE_ACCESS_RIGHTS STANDARD_RIGHTS_EXECUTE;
    public static FILE_ACCESS_RIGHTS STANDARD_RIGHTS_ALL;
    public static FILE_ACCESS_RIGHTS SPECIFIC_RIGHTS_ALL;
    public static FILE_ACCESS_RIGHTS FILE_ALL_ACCESS;
    public static FILE_ACCESS_RIGHTS FILE_GENERIC_READ;
    public static FILE_ACCESS_RIGHTS FILE_GENERIC_WRITE;
    public static FILE_ACCESS_RIGHTS FILE_GENERIC_EXECUTE;
}
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal enum Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION : Enum {
    public UInt32 value__;
    public static FILE_CREATION_DISPOSITION CREATE_NEW;
    public static FILE_CREATION_DISPOSITION CREATE_ALWAYS;
    public static FILE_CREATION_DISPOSITION OPEN_EXISTING;
    public static FILE_CREATION_DISPOSITION OPEN_ALWAYS;
    public static FILE_CREATION_DISPOSITION TRUNCATE_EXISTING;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal enum Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES : Enum {
    public UInt32 value__;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_READONLY;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_HIDDEN;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_SYSTEM;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_DIRECTORY;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_ARCHIVE;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_DEVICE;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_NORMAL;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_TEMPORARY;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_SPARSE_FILE;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_REPARSE_POINT;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_COMPRESSED;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_OFFLINE;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_NOT_CONTENT_INDEXED;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_ENCRYPTED;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_INTEGRITY_STREAM;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_VIRTUAL;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_NO_SCRUB_DATA;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_EA;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_PINNED;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_UNPINNED;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_RECALL_ON_OPEN;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_WRITE_THROUGH;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_OVERLAPPED;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_NO_BUFFERING;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_RANDOM_ACCESS;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_SEQUENTIAL_SCAN;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_DELETE_ON_CLOSE;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_BACKUP_SEMANTICS;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_POSIX_SEMANTICS;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_SESSION_AWARE;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_OPEN_REPARSE_POINT;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_OPEN_NO_RECALL;
    public static FILE_FLAGS_AND_ATTRIBUTES FILE_FLAG_FIRST_PIPE_INSTANCE;
    public static FILE_FLAGS_AND_ATTRIBUTES PIPE_ACCESS_DUPLEX;
    public static FILE_FLAGS_AND_ATTRIBUTES PIPE_ACCESS_INBOUND;
    public static FILE_FLAGS_AND_ATTRIBUTES PIPE_ACCESS_OUTBOUND;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_ANONYMOUS;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_IDENTIFICATION;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_IMPERSONATION;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_DELEGATION;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_CONTEXT_TRACKING;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_EFFECTIVE_ONLY;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_SQOS_PRESENT;
    public static FILE_FLAGS_AND_ATTRIBUTES SECURITY_VALID_SQOS_FLAGS;
}
[FlagsAttribute]
[GeneratedCodeAttribute("Microsoft.Windows.CsWin32", "0.2.206-beta+27f494b7ea")]
internal enum Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE : Enum {
    public UInt32 value__;
    public static FILE_SHARE_MODE FILE_SHARE_NONE;
    public static FILE_SHARE_MODE FILE_SHARE_DELETE;
    public static FILE_SHARE_MODE FILE_SHARE_READ;
    public static FILE_SHARE_MODE FILE_SHARE_WRITE;
}
