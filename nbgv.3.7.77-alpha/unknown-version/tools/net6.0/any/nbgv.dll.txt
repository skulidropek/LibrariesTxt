[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.GitLoaderContext : AssemblyLoadContext {
    public static string RuntimePath;
    private string nativeDependencyBasePath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<string, IntPtr> lastLoadedLibrary;
    public GitLoaderContext(string nativeDependencyBasePath);
    protected virtual Assembly Load(AssemblyName assemblyName);
    protected virtual IntPtr LoadUnmanagedDll(string unmanagedDllName);
}
internal class Nerdbank.GitVersioning.Tool.Program : object {
    private static string DefaultVersionSpec;
    private static string DefaultOutputFormat;
    private static string DefaultRef;
    private static string PackageId;
    private static BindingFlags CaseInsensitiveFlags;
    private static String[] SupportedFormats;
    private static ExitCodes exitCode;
    private static bool AlwaysUseLibGit2 { get; }
    private static String[] CloudProviderNames { get; }
    private static Program();
    private static bool get_AlwaysUseLibGit2();
    private static String[] get_CloudProviderNames();
    public static int Main(String[] args);
    private static Parser BuildCommandLine();
    private static void PrintException(Exception ex, InvocationContext context);
    private static int MainInner(String[] args);
    [AsyncStateMachineAttribute("Nerdbank.GitVersioning.Tool.Program/<OnInstallCommand>d__16")]
private static Task`1<int> OnInstallCommand(string path, string version, String[] source);
    private static Task`1<int> OnGetVersionCommand(string project, String[] metadata, string format, string variable, string commitish);
    private static Task`1<int> OnSetVersionCommand(string project, string version);
    private static Task`1<int> OnTagCommand(string project, string versionOrRef);
    private static Task`1<int> OnGetCommitsCommand(string project, bool quiet, string version);
    private static Task`1<int> OnCloudCommand(string project, String[] metadata, string version, string ciSystem, bool allVars, bool commonVars, String[] define);
    private static Task`1<int> OnPrepareReleaseCommand(string project, string nextVersion, string versionIncrement, string format, string tag, string unformattedCommitMessage);
    [AsyncStateMachineAttribute("Nerdbank.GitVersioning.Tool.Program/<GetLatestPackageVersionAsync>d__23")]
private static Task`1<string> GetLatestPackageVersionAsync(string packageId, string root, IReadOnlyList`1<string> sources, CancellationToken cancellationToken);
    private static string GetSpecifiedOrCurrentDirectoryPath(string versionJsonRoot);
    private static string GetRepoRelativePath(string searchPath, Repository repository);
    private static string ShouldHaveTrailingDirectorySeparator(string path);
    private static void PrintCommits(bool quiet, GitContext context, IEnumerable`1<Commit> candidateCommits, bool includeOptions);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.4.173.63159")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
