public class FizzWare.NBuilder.BetweenConstraint : Constraint {
    private IRandomGenerator uniqueRandomGenerator;
    private int lower;
    private int upper;
    public BetweenConstraint(IRandomGenerator uniqueRandomGenerator, int lower);
    public BetweenConstraint(IRandomGenerator uniqueRandomGenerator, int lower, int upper);
    public virtual int GetEnd();
    public BetweenConstraint And(int end);
}
public class FizzWare.NBuilder.Builder : object {
    private BuilderSettings BuilderSettings;
    public Builder(BuilderSettings builderSettings);
    public ISingleObjectBuilder`1<T> CreateNew();
    public IListBuilder`1<T> CreateListOfSize(int size);
    public IListBuilder`1<T> CreateListOfSize(int size, IPropertyNamer propertyNamer);
}
public static class FizzWare.NBuilder.Builder`1 : object {
    public static ISingleObjectBuilder`1<T> CreateNew();
    public static IListBuilder`1<T> CreateListOfSize(int size);
    public static IListBuilder`1<T> CreateListOfSize(int size, IPropertyNamer propertyNamer);
}
public class FizzWare.NBuilder.BuilderException : Exception {
    public BuilderException(string message);
    public BuilderException(string message, Exception innerException);
}
public class FizzWare.NBuilder.BuilderSettings : object {
    private IPersistenceService persistenceService;
    public bool AutoNameProperties;
    private Dictionary`2<Type, IPropertyNamer> propertyNamers;
    private IPropertyNamer defaultPropertyNamer;
    private List`1<PropertyInfo> disabledAutoNameProperties;
    internal bool HasDisabledAutoNameProperties;
    public void ResetToDefaults();
    public void SetDefaultPropertyNamer(IPropertyNamer propertyNamer);
    public void SetPersistenceService(IPersistenceService service);
    public IPersistenceService GetPersistenceService();
    public void SetCreatePersistenceMethod(Action`1<T> saveMethod);
    public void SetUpdatePersistenceMethod(Action`1<T> saveMethod);
    public void SetPropertyNamerFor(IPropertyNamer propertyNamer);
    public IPropertyNamer GetPropertyNamerFor();
    public void DisablePropertyNamingFor(Expression`1<Func`2<T, TFunc>> func);
    public void DisablePropertyNamingFor(PropertyInfo propertyInfo);
    public bool ShouldIgnoreProperty(PropertyInfo info);
    private PropertyInfo GetProperty(Expression`1<Func`2<TModel, T>> expression);
    private MemberExpression GetMemberExpression(Expression`1<Func`2<TModel, T>> expression);
}
public static class FizzWare.NBuilder.BuilderSetup : object {
    internal static BuilderSettings Instance;
    public static bool AutoNameProperties { get; }
    public static bool HasDisabledAutoNameProperties { get; }
    private static BuilderSetup();
    public static bool get_AutoNameProperties();
    public static bool get_HasDisabledAutoNameProperties();
    public static bool ShouldIgnoreProperty(PropertyInfo info);
    public static void ResetToDefaults();
    public static IPropertyNamer GetPropertyNamerFor();
    public static void SetPropertyNamerFor(IPropertyNamer propertyNamer);
    public static void SetDefaultPropertyName(IPropertyNamer propertyNamer);
    public static void SetPersistenceService(IPersistenceService service);
    public static IPersistenceService GetPersistenceService();
    public static void SetCreatePersistenceMethod(Action`1<T> saveMethod);
    public static void SetUpdatePersistenceMethod(Action`1<T> saveMethod);
    public static void DisablePropertyNamingFor(Expression`1<Func`2<T, TFunc>> func);
}
public abstract class FizzWare.NBuilder.Constraint : object {
    public Constraint Elements { get; }
    public Constraint get_Elements();
    public abstract virtual int GetEnd();
}
public class FizzWare.NBuilder.Dates.April : StaticMonth`1<April> {
}
public static class FizzWare.NBuilder.Dates.At : object {
    public static TimeSpan Time(int hour, int minute);
    public static TimeSpan Time(int hour, int minute, int seconds);
}
public class FizzWare.NBuilder.Dates.August : StaticMonth`1<August> {
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.Dates.DateTimeExtensions : object {
    [ExtensionAttribute]
public static DateTime At(DateTime date, int hour, int minute);
    [ExtensionAttribute]
public static DateTime At(DateTime date, int hour, int minute, int second);
}
public class FizzWare.NBuilder.Dates.December : StaticMonth`1<December> {
}
public class FizzWare.NBuilder.Dates.February : StaticMonth`1<February> {
}
public class FizzWare.NBuilder.Dates.January : StaticMonth`1<January> {
}
public class FizzWare.NBuilder.Dates.July : StaticMonth`1<July> {
}
public class FizzWare.NBuilder.Dates.June : StaticMonth`1<June> {
}
public class FizzWare.NBuilder.Dates.March : StaticMonth`1<March> {
}
public class FizzWare.NBuilder.Dates.May : StaticMonth`1<May> {
}
public class FizzWare.NBuilder.Dates.Month : object {
    private int monthNumber;
    private int year;
    public DateTime The1st { get; }
    public DateTime The2nd { get; }
    public DateTime The3rd { get; }
    public DateTime The4th { get; }
    public DateTime The5th { get; }
    public DateTime The6th { get; }
    public DateTime The7th { get; }
    public DateTime The8th { get; }
    public DateTime The9th { get; }
    public DateTime The10th { get; }
    public DateTime The11th { get; }
    public DateTime The12th { get; }
    public DateTime The13th { get; }
    public DateTime The14th { get; }
    public DateTime The15th { get; }
    public DateTime The16th { get; }
    public DateTime The17th { get; }
    public DateTime The18th { get; }
    public DateTime The19th { get; }
    public DateTime The20th { get; }
    public DateTime The21st { get; }
    public DateTime The22nd { get; }
    public DateTime The23rd { get; }
    public DateTime The24th { get; }
    public DateTime The25th { get; }
    public DateTime The26th { get; }
    public DateTime The27th { get; }
    public DateTime The28th { get; }
    public DateTime The29th { get; }
    public DateTime The30th { get; }
    public DateTime The31st { get; }
    public Month(int monthNumber);
    public Month(int monthNumber, int year);
    public DateTime The(int dayOfMonth);
    public DateTime get_The1st();
    public DateTime get_The2nd();
    public DateTime get_The3rd();
    public DateTime get_The4th();
    public DateTime get_The5th();
    public DateTime get_The6th();
    public DateTime get_The7th();
    public DateTime get_The8th();
    public DateTime get_The9th();
    public DateTime get_The10th();
    public DateTime get_The11th();
    public DateTime get_The12th();
    public DateTime get_The13th();
    public DateTime get_The14th();
    public DateTime get_The15th();
    public DateTime get_The16th();
    public DateTime get_The17th();
    public DateTime get_The18th();
    public DateTime get_The19th();
    public DateTime get_The20th();
    public DateTime get_The21st();
    public DateTime get_The22nd();
    public DateTime get_The23rd();
    public DateTime get_The24th();
    public DateTime get_The25th();
    public DateTime get_The26th();
    public DateTime get_The27th();
    public DateTime get_The28th();
    public DateTime get_The29th();
    public DateTime get_The30th();
    public DateTime get_The31st();
}
public class FizzWare.NBuilder.Dates.Months : object {
    private int year;
    public Month January { get; }
    public Month February { get; }
    public Month March { get; }
    public Month April { get; }
    public Month May { get; }
    public Month June { get; }
    public Month July { get; }
    public Month August { get; }
    public Month September { get; }
    public Month October { get; }
    public Month November { get; }
    public Month December { get; }
    public Months(int year);
    public Month get_January();
    public Month get_February();
    public Month get_March();
    public Month get_April();
    public Month get_May();
    public Month get_June();
    public Month get_July();
    public Month get_August();
    public Month get_September();
    public Month get_October();
    public Month get_November();
    public Month get_December();
}
public class FizzWare.NBuilder.Dates.November : StaticMonth`1<November> {
}
public class FizzWare.NBuilder.Dates.October : StaticMonth`1<October> {
}
public static class FizzWare.NBuilder.Dates.On : object {
    public static Month January { get; }
    public static Month February { get; }
    public static Month March { get; }
    public static Month April { get; }
    public static Month May { get; }
    public static Month June { get; }
    public static Month July { get; }
    public static Month August { get; }
    public static Month September { get; }
    public static Month October { get; }
    public static Month November { get; }
    public static Month December { get; }
    public static Month get_January();
    public static Month get_February();
    public static Month get_March();
    public static Month get_April();
    public static Month get_May();
    public static Month get_June();
    public static Month get_July();
    public static Month get_August();
    public static Month get_September();
    public static Month get_October();
    public static Month get_November();
    public static Month get_December();
}
public class FizzWare.NBuilder.Dates.September : StaticMonth`1<September> {
}
public abstract class FizzWare.NBuilder.Dates.StaticMonth`1 : object {
    private static int MonthNum { get; }
    public static DateTime The1st { get; }
    public static DateTime The2nd { get; }
    public static DateTime The3rd { get; }
    public static DateTime The4th { get; }
    public static DateTime The5th { get; }
    public static DateTime The6th { get; }
    public static DateTime The7th { get; }
    public static DateTime The8th { get; }
    public static DateTime The9th { get; }
    public static DateTime The10th { get; }
    public static DateTime The11th { get; }
    public static DateTime The12th { get; }
    public static DateTime The13th { get; }
    public static DateTime The14th { get; }
    public static DateTime The15th { get; }
    public static DateTime The16th { get; }
    public static DateTime The17th { get; }
    public static DateTime The18th { get; }
    public static DateTime The19th { get; }
    public static DateTime The20th { get; }
    public static DateTime The21st { get; }
    public static DateTime The22nd { get; }
    public static DateTime The23rd { get; }
    public static DateTime The24th { get; }
    public static DateTime The25th { get; }
    public static DateTime The26th { get; }
    public static DateTime The27th { get; }
    public static DateTime The28th { get; }
    public static DateTime The29th { get; }
    public static DateTime The30th { get; }
    public static DateTime The31st { get; }
    private static int get_MonthNum();
    public static DateTime The(int day);
    public static DateTime get_The1st();
    public static DateTime get_The2nd();
    public static DateTime get_The3rd();
    public static DateTime get_The4th();
    public static DateTime get_The5th();
    public static DateTime get_The6th();
    public static DateTime get_The7th();
    public static DateTime get_The8th();
    public static DateTime get_The9th();
    public static DateTime get_The10th();
    public static DateTime get_The11th();
    public static DateTime get_The12th();
    public static DateTime get_The13th();
    public static DateTime get_The14th();
    public static DateTime get_The15th();
    public static DateTime get_The16th();
    public static DateTime get_The17th();
    public static DateTime get_The18th();
    public static DateTime get_The19th();
    public static DateTime get_The20th();
    public static DateTime get_The21st();
    public static DateTime get_The22nd();
    public static DateTime get_The23rd();
    public static DateTime get_The24th();
    public static DateTime get_The25th();
    public static DateTime get_The26th();
    public static DateTime get_The27th();
    public static DateTime get_The28th();
    public static DateTime get_The29th();
    public static DateTime get_The30th();
    public static DateTime get_The31st();
}
public static class FizzWare.NBuilder.Dates.The : object {
    public static Year Year(int year);
    public static TimeSpan Time(int hours, int minutes);
    public static TimeSpan Time(int hours, int minutes, int seconds);
}
public class FizzWare.NBuilder.Dates.Today : object {
    public static DateTime At(int hours, int minutes);
    public static DateTime At(int hours, int minutes, int seconds);
}
public class FizzWare.NBuilder.Dates.Year : object {
    private int year;
    public Months On { get; }
    public Year(int year);
    public Months get_On();
}
public static class FizzWare.NBuilder.EnumHelper : object {
    public static T[] GetValues();
    public static Object[] GetValues(Type enumType);
}
public class FizzWare.NBuilder.ExactlyConstraint : Constraint {
    private int count;
    public ExactlyConstraint(int count);
    public virtual int GetEnd();
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.Extensions.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetFieldOrPropertyType(MemberInfo m);
    [ExtensionAttribute]
public static object GetFieldOrPropertyValue(MemberInfo memberInfo, T instance);
    [ExtensionAttribute]
public static void SetFieldOrPropertyValue(MemberInfo m, T instance, object value);
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsDefaultValue(object o);
}
[ExtensionAttribute]
internal static class FizzWare.NBuilder.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string self);
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo GetMethodInfo(Delegate d);
    [ExtensionAttribute]
public static Type GetTypeInfo(Type t);
    [ExtensionAttribute]
public static Type GetTypeWithoutNullability(Type t);
    [ExtensionAttribute]
public static IList`1<MemberInfo> GetPublicInstancePropertiesAndFields(Type t);
    [ExtensionAttribute]
public static bool IsAbstract(Type self);
    [ExtensionAttribute]
public static bool IsGenericType(Type self);
    [ExtensionAttribute]
public static bool IsInterface(Type self);
    [ExtensionAttribute]
public static bool IsEnum(Type self);
    [ExtensionAttribute]
public static bool IsValueType(Type self);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type self);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type self, BindingFlags flags);
    [ExtensionAttribute]
public static FieldInfo[] GetFields(Type self);
    [ExtensionAttribute]
public static FieldInfo[] GetFields(Type self, BindingFlags flags);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type self);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type self, BindingFlags flags);
    [ExtensionAttribute]
public static Type BaseType(Type self);
}
public enum FizzWare.NBuilder.GeneratorDirection : Enum {
    public int value__;
    public static GeneratorDirection Ascending;
    public static GeneratorDirection Descending;
}
public class FizzWare.NBuilder.Generators.GetRandom : object {
    private static IRandomGenerator generator;
    private static DateTime minSqlServerDate;
    private static DateTime maxSqlServerDate;
    private static String[] firstNames;
    private static String[] lastNames;
    private static GetRandom();
    public static string NumericString(int length);
    public static int Int();
    public static int Int(int minValue, int maxValue);
    public static int PositiveInt();
    public static int PositiveInt(int maxValue);
    public static short Short();
    public static short Short(short minVaue, short maxValue);
    public static short PositiveShort();
    public static short PositiveShort(short maxValue);
    public static long Long();
    public static long Long(long minVaue, long maxValue);
    public static long PositiveLong();
    public static long PositiveLong(long maxValue);
    public static UInt32 UInt();
    public static ulong ULong();
    public static ushort UShort();
    public static decimal Decimal();
    public static decimal Decimal(decimal minValue, decimal maxValue);
    public static decimal PositiveDecimal();
    public static decimal PositiveDecimal(decimal maxValue);
    public static float Float();
    public static float Float(float minVaue, float maxValue);
    public static float PositiveFloat();
    public static float PositiveFloat(float maxValue);
    public static double Double();
    public static double Double(double minVaue, double maxValue);
    public static double PositiveDouble();
    public static double PositiveDouble(double maxValue);
    public static DateTime DateTime();
    public static DateTime DateTime(DateTime minValue, DateTime maxValue, DateTimeKind kind);
    public static DateTime DateTimeFrom(DateTime minValue, DateTimeKind kind);
    public static DateTime DateTimeThrough(DateTime maxValue, DateTimeKind kind);
    public static bool Boolean();
    public static byte Byte();
    public static sbyte SByte();
    public static char Char();
    public static Guid Guid();
    public static string FirstName();
    public static string LastName();
    public static string Phrase(int length);
    public static string String(int length);
    public static string UpperCaseString(int length);
    public static string LowerCaseString(int length);
    public static string String(int length, Nullable`1<bool> upperCase, Char[] characterToExclude);
    public static char Letter(Nullable`1<bool> upperCase);
    public static string Email();
    public static string WwwUrl();
    public static string Url();
    public static string IpAddress();
    public static string IpAddressV6();
    public static string MacAddress(string separator);
    public static T Enumeration();
    public static Enum Enumeration(Type type);
}
public class FizzWare.NBuilder.HierarchySpec`1 : object {
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfRoots>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<T, T> <AddMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<T, string, string> <NamingMethod>k__BackingField;
    public int Depth { get; public set; }
    public int NumberOfRoots { get; public set; }
    public int MinimumChildren { get; public set; }
    public int MaximumChildren { get; public set; }
    public Action`2<T, T> AddMethod { get; public set; }
    public Func`3<T, string, string> NamingMethod { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Depth();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Depth(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumberOfRoots();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NumberOfRoots(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MinimumChildren();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MinimumChildren(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaximumChildren();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaximumChildren(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`2<T, T> get_AddMethod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AddMethod(Action`2<T, T> value);
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<T, string, string> get_NamingMethod();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NamingMethod(Func`3<T, string, string> value);
}
public interface FizzWare.NBuilder.IBuildable`1 {
    public BuilderSettings BuilderSettings { get; public set; }
    public abstract virtual BuilderSettings get_BuilderSettings();
    public abstract virtual void set_BuilderSettings(BuilderSettings value);
    public abstract virtual T Build();
}
public interface FizzWare.NBuilder.IConstraint {
    public abstract virtual int GetEnd();
}
public interface FizzWare.NBuilder.IGenerator`1 {
    public abstract virtual T Generate();
}
public interface FizzWare.NBuilder.IHierarchySpec`1 {
    public int Depth { get; public set; }
    public int NumberOfRoots { get; public set; }
    public int MinimumChildren { get; public set; }
    public int MaximumChildren { get; public set; }
    public Action`2<T, T> AddMethod { get; public set; }
    public Func`3<T, string, string> NamingMethod { get; public set; }
    public abstract virtual int get_Depth();
    public abstract virtual void set_Depth(int value);
    public abstract virtual int get_NumberOfRoots();
    public abstract virtual void set_NumberOfRoots(int value);
    public abstract virtual int get_MinimumChildren();
    public abstract virtual void set_MinimumChildren(int value);
    public abstract virtual int get_MaximumChildren();
    public abstract virtual void set_MaximumChildren(int value);
    public abstract virtual Action`2<T, T> get_AddMethod();
    public abstract virtual void set_AddMethod(Action`2<T, T> value);
    public abstract virtual Func`3<T, string, string> get_NamingMethod();
    public abstract virtual void set_NamingMethod(Func`3<T, string, string> value);
}
public interface FizzWare.NBuilder.IListBuilder`1 {
    public int Length { get; }
    public abstract virtual int get_Length();
    public abstract virtual IOperable`1<T> All();
}
public abstract class FizzWare.NBuilder.Implementation.Declaration`1 : object {
    [CompilerGeneratedAttribute]
private BuilderSettings <BuilderSettings>k__BackingField;
    protected IListBuilderImpl`1<T> listBuilderImpl;
    protected IObjectBuilder`1<T> objectBuilder;
    protected List`1<T> myList;
    [CompilerGeneratedAttribute]
private IList`1<int> <MasterListAffectedIndexes>k__BackingField;
    public BuilderSettings BuilderSettings { get; public set; }
    public int Length { get; }
    public IListBuilderImpl`1<T> ListBuilderImpl { get; }
    public IObjectBuilder`1<T> ObjectBuilder { get; }
    public IList`1<int> MasterListAffectedIndexes { get; public set; }
    public int Start { get; }
    public int End { get; }
    public int NumberOfAffectedItems { get; }
    protected Declaration`1(IListBuilderImpl`1<T> listBuilderImpl, IObjectBuilder`1<T> objectBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual BuilderSettings get_BuilderSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuilderSettings(BuilderSettings value);
    public sealed virtual int get_Length();
    public sealed virtual IListBuilderImpl`1<T> get_ListBuilderImpl();
    public sealed virtual IObjectBuilder`1<T> get_ObjectBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<int> get_MasterListAffectedIndexes();
    [CompilerGeneratedAttribute]
public void set_MasterListAffectedIndexes(IList`1<int> value);
    public abstract virtual int get_Start();
    public abstract virtual int get_End();
    public sealed virtual IOperable`1<T> All();
    public sealed virtual IList`1<T> Build();
    public abstract virtual void Construct();
    public virtual void CallFunctions(IList`1<T> masterList);
    public abstract virtual void AddToMaster(T[] masterList);
    public abstract virtual int get_NumberOfAffectedItems();
    protected virtual void AddItemToMaster(T item, T[] masterList, int index);
}
public class FizzWare.NBuilder.Implementation.DeclarationQueue`1 : object {
    [CompilerGeneratedAttribute]
private int <ListCapacity>k__BackingField;
    private List`1<IDeclaration`1<T>> queuedDeclarations;
    public int ListCapacity { get; private set; }
    public int Count { get; }
    public DeclarationQueue`1(int listCapacity);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ListCapacity();
    [CompilerGeneratedAttribute]
private void set_ListCapacity(int value);
    public sealed virtual void Prioritise();
    public sealed virtual void Enqueue(IDeclaration`1<T> item);
    public sealed virtual IDeclaration`1<T> Dequeue();
    public sealed virtual IDeclaration`1<T> GetLastItem();
    public sealed virtual int get_Count();
    public int GetDistinctAffectedItemCount();
    public sealed virtual void Construct();
    public sealed virtual bool ContainsGlobalDeclaration();
    public void AddToMaster(T[] mainList);
    public void CallFunctions(IList`1<T> list);
    [CompilerGeneratedAttribute]
private void <Prioritise>b__6_0(IDeclaration`1<T> row);
}
public class FizzWare.NBuilder.Implementation.DistinctAffectedItemCalculator : object {
    public Boolean[] Map;
    public DistinctAffectedItemCalculator(int capacity);
    public void AddRange(int start, int end, int numberOfItems);
    public int GetTotal();
}
public class FizzWare.NBuilder.Implementation.GlobalDeclaration`1 : Declaration`1<T> {
    public int NumberOfAffectedItems { get; }
    public int Start { get; }
    public int End { get; }
    public GlobalDeclaration`1(IListBuilderImpl`1<T> listBuilderImpl, IObjectBuilder`1<T> objectBuilder);
    public virtual void Construct();
    public virtual void AddToMaster(T[] masterList);
    public virtual int get_NumberOfAffectedItems();
    public virtual int get_Start();
    public virtual int get_End();
}
public static class FizzWare.NBuilder.Implementation.Guard : object {
    public static void Against(bool condition, T exception);
    public static void Against(bool condition, string errorMessage);
}
public class FizzWare.NBuilder.Implementation.HierarchyGenerator`1 : object {
    private IList`1<T> initialList;
    private Action`2<T, T> action;
    private int numberOfRoots;
    private int depth;
    private int min;
    private int max;
    private IRandomGenerator randomGenerator;
    private Func`3<T, string, string> namingMethod;
    private IPersistenceService persistenceService;
    private List`1<T> hierarchy;
    private int listCount;
    private Path path;
    public HierarchyGenerator`1(IList`1<T> initialList, Action`2<T, T> addMethod, int numberOfRoots, int depth, int min, int max, IRandomGenerator randomGenerator, Func`3<T, string, string> namingMethod, IPersistenceService persistenceService);
    public IList`1<T> Generate();
    private void TryPersistUpdateAll(IList`1<T> list);
    private void TryPersistCreate(T item);
    private void AddChildren(T item, int currDepth);
}
public interface FizzWare.NBuilder.Implementation.IDeclaration`1 {
    public int NumberOfAffectedItems { get; }
    public IList`1<int> MasterListAffectedIndexes { get; }
    public int Start { get; }
    public int End { get; }
    public IListBuilderImpl`1<T> ListBuilderImpl { get; }
    public IObjectBuilder`1<T> ObjectBuilder { get; }
    public abstract virtual void Construct();
    public abstract virtual void CallFunctions(IList`1<T> masterList);
    public abstract virtual void AddToMaster(T[] masterList);
    public abstract virtual int get_NumberOfAffectedItems();
    public abstract virtual IList`1<int> get_MasterListAffectedIndexes();
    public abstract virtual int get_Start();
    public abstract virtual int get_End();
    public abstract virtual IListBuilderImpl`1<T> get_ListBuilderImpl();
    public abstract virtual IObjectBuilder`1<T> get_ObjectBuilder();
}
public interface FizzWare.NBuilder.Implementation.IDeclarationQueue`1 {
    public int ListCapacity { get; }
    public abstract virtual int get_ListCapacity();
    public abstract virtual void Construct();
    public abstract virtual void Prioritise();
    public abstract virtual bool ContainsGlobalDeclaration();
}
public interface FizzWare.NBuilder.Implementation.IGlobalDeclaration`1 {
}
public interface FizzWare.NBuilder.Implementation.IListBuilderImpl`1 {
    public int Capacity { get; }
    public IDeclarationQueue`1<T> Declarations { get; }
    public IUniqueRandomGenerator ScopeUniqueRandomGenerator { get; }
    public abstract virtual IObjectBuilder`1<T> CreateObjectBuilder();
    public abstract virtual int get_Capacity();
    public abstract virtual IDeclarationQueue`1<T> get_Declarations();
    public abstract virtual IDeclaration`1<T> AddDeclaration(IDeclaration`1<T> declaration);
    public abstract virtual IUniqueRandomGenerator get_ScopeUniqueRandomGenerator();
}
public class FizzWare.NBuilder.Implementation.IndexedElementDeclaration`1 : Declaration`1<T> {
    private Int32[] _indexes;
    public int NumberOfAffectedItems { get; }
    public int Start { get; }
    public int End { get; }
    public IndexedElementDeclaration`1(IListBuilderImpl`1<T> listBuilderImpl, IObjectBuilder`1<T> objectBuilder, Int32[] indexes);
    public virtual void Construct();
    public virtual void AddToMaster(T[] masterList);
    public virtual int get_NumberOfAffectedItems();
    public virtual int get_Start();
    public virtual int get_End();
}
public interface FizzWare.NBuilder.Implementation.IObjectBuilder`1 {
    [ObsoleteAttribute("Use WithFactory instead.")]
public abstract virtual IObjectBuilder`1<T> WithConstructor(Func`1<T> constructor);
    [ObsoleteAttribute("Use WithFactory instead")]
public abstract virtual IObjectBuilder`1<T> WithConstructor(Func`2<int, T> constructor);
    public abstract virtual IObjectBuilder`1<T> WithFactory(Func`1<T> constructor);
    public abstract virtual IObjectBuilder`1<T> WithFactory(Func`2<int, T> constructor);
    public abstract virtual IObjectBuilder`1<T> With(Func`2<T, TFunc> func);
    public abstract virtual IObjectBuilder`1<T> With(Action`2<T, int> action);
    public abstract virtual IObjectBuilder`1<T> Do(Action`1<T> action);
    public abstract virtual IObjectBuilder`1<T> Do(Action`2<T, int> action);
    public abstract virtual IObjectBuilder`1<T> DoMultiple(Action`2<T, TAction> action, IList`1<TAction> list);
    public abstract virtual IObjectBuilder`1<T> WithPropertyNamer(IPropertyNamer propertyNamer);
    public abstract virtual void CallFunctions(T obj);
    public abstract virtual void CallFunctions(T obj, int objIndex);
    public abstract virtual T Construct(int index);
    public abstract virtual T Name(T obj);
}
public interface FizzWare.NBuilder.Implementation.IQueue`1 {
    public int Count { get; }
    public abstract virtual void Enqueue(T item);
    public abstract virtual T Dequeue();
    public abstract virtual T GetLastItem();
    public abstract virtual int get_Count();
}
public interface FizzWare.NBuilder.Implementation.IReflectionUtil {
    public abstract virtual T CreateInstanceOf();
    public abstract virtual T CreateInstanceOf(Object[] args);
    public abstract virtual bool RequiresConstructorArgs(Type type);
    public abstract virtual bool IsDefaultValue(object value);
}
public class FizzWare.NBuilder.Implementation.ListBuilder`1 : object {
    private IPropertyNamer propertyNamer;
    private IReflectionUtil reflectionUtil;
    private T[] mainList;
    private DeclarationQueue`1<T> declarations;
    [CompilerGeneratedAttribute]
private BuilderSettings <BuilderSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Capacity>k__BackingField;
    [CompilerGeneratedAttribute]
private IUniqueRandomGenerator <ScopeUniqueRandomGenerator>k__BackingField;
    public BuilderSettings BuilderSettings { get; public set; }
    public int Length { get; }
    public int Capacity { get; }
    public IDeclarationQueue`1<T> Declarations { get; }
    public IUniqueRandomGenerator ScopeUniqueRandomGenerator { get; private set; }
    public ListBuilder`1(int size, IPropertyNamer propertyNamer, IReflectionUtil reflectionUtil, BuilderSettings builderSettings);
    [CompilerGeneratedAttribute]
public sealed virtual BuilderSettings get_BuilderSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuilderSettings(BuilderSettings value);
    public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
public virtual int get_Capacity();
    public sealed virtual IDeclarationQueue`1<T> get_Declarations();
    public sealed virtual IObjectBuilder`1<T> CreateObjectBuilder();
    public sealed virtual IOperable`1<T> All();
    public void Construct();
    public IList`1<T> Name(IList`1<T> list);
    public sealed virtual IList`1<T> Build();
    public sealed virtual IDeclaration`1<T> AddDeclaration(IDeclaration`1<T> declaration);
    [CompilerGeneratedAttribute]
public sealed virtual IUniqueRandomGenerator get_ScopeUniqueRandomGenerator();
    [CompilerGeneratedAttribute]
private void set_ScopeUniqueRandomGenerator(IUniqueRandomGenerator value);
}
public class FizzWare.NBuilder.Implementation.MultiFunction : object {
    private MulticastDelegate del;
    private object list;
    public MultiFunction(MulticastDelegate del, object list);
    public void Call(T obj);
}
public class FizzWare.NBuilder.Implementation.ObjectBuilder`1 : object {
    private IReflectionUtil reflectionUtil;
    private IPropertyNamer propertyNamer;
    private List`1<MulticastDelegate> functions;
    private List`1<MultiFunction> multiFunctions;
    private Func`1<T> _factoryFunction;
    private Func`2<int, T> _indexedFactoryFunction;
    [CompilerGeneratedAttribute]
private BuilderSettings <BuilderSettings>k__BackingField;
    public BuilderSettings BuilderSettings { get; public set; }
    public ObjectBuilder`1(IReflectionUtil reflectionUtil, BuilderSettings builderSettings);
    [CompilerGeneratedAttribute]
public sealed virtual BuilderSettings get_BuilderSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuilderSettings(BuilderSettings value);
    public sealed virtual IObjectBuilder`1<T> WithFactory(Func`1<T> factory);
    [ObsoleteAttribute("Use WithFactory instead.")]
public sealed virtual IObjectBuilder`1<T> WithConstructor(Func`1<T> constructor);
    public sealed virtual IObjectBuilder`1<T> WithFactory(Func`2<int, T> constructor);
    [ObsoleteAttribute("Use WithFactory instead.")]
public sealed virtual IObjectBuilder`1<T> WithConstructor(Func`2<int, T> constructor);
    public sealed virtual IObjectBuilder`1<T> With(Func`2<T, TFunc> func);
    public sealed virtual IObjectBuilder`1<T> With(Action`2<T, int> func);
    public sealed virtual IObjectBuilder`1<T> Do(Action`1<T> action);
    public sealed virtual IObjectBuilder`1<T> Do(Action`2<T, int> action);
    public sealed virtual IObjectBuilder`1<T> DoMultiple(Action`2<T, U> action, IList`1<U> list);
    public sealed virtual IObjectBuilder`1<T> WithPropertyNamer(IPropertyNamer thePropertyNamer);
    public sealed virtual T Build();
    public sealed virtual void CallFunctions(T obj);
    public sealed virtual void CallFunctions(T obj, int objIndex);
    public sealed virtual T Construct(int index);
    public sealed virtual T Name(T obj);
}
public class FizzWare.NBuilder.Implementation.Path : object {
    private List`1<int> levels;
    private string formatString;
    public void IncreaseDepth();
    private void GenerateFormatString();
    public void SetCurrent(int sequenceNumber);
    public void DecreaseDepth();
    public virtual string ToString();
}
public class FizzWare.NBuilder.Implementation.RandomDeclaration`1 : RangeDeclaration`1<T> {
    private IUniqueRandomGenerator uniqueRandomGenerator;
    private int amount;
    public int NumberOfAffectedItems { get; }
    public RandomDeclaration`1(IListBuilderImpl`1<T> listBuilderImpl, IObjectBuilder`1<T> objectBuilder, IUniqueRandomGenerator uniqueRandomGenerator, int amount, int start, int end);
    public virtual void Construct();
    public virtual void AddToMaster(T[] masterList);
    public virtual int get_NumberOfAffectedItems();
}
[DebuggerDisplayAttribute("Range: Start={Start}; End={End}; ({NumberOfAffectedItems} Affected Items)")]
public class FizzWare.NBuilder.Implementation.RangeDeclaration`1 : Declaration`1<T> {
    private int _start;
    private int _end;
    [CompilerGeneratedAttribute]
private DateTime <Created>k__BackingField;
    internal DateTime Created { get; }
    public int Start { get; }
    public int End { get; }
    public int NumberOfAffectedItems { get; }
    public RangeDeclaration`1(IListBuilderImpl`1<T> listBuilderImpl, IObjectBuilder`1<T> objectBuilder, int start, int end);
    [CompilerGeneratedAttribute]
internal DateTime get_Created();
    public virtual int get_Start();
    public virtual int get_End();
    public virtual void Construct();
    public virtual void AddToMaster(T[] masterList);
    public virtual int get_NumberOfAffectedItems();
}
public class FizzWare.NBuilder.Implementation.ReflectionUtil : object {
    public sealed virtual T CreateInstanceOf();
    public sealed virtual T CreateInstanceOf(Object[] args);
    public sealed virtual bool RequiresConstructorArgs(Type type);
    public sealed virtual bool IsDefaultValue(object value);
}
public enum FizzWare.NBuilder.IncrementDate : Enum {
    public int value__;
    public static IncrementDate Tick;
    public static IncrementDate Millisecond;
    public static IncrementDate Second;
    public static IncrementDate Minute;
    public static IncrementDate Hour;
    public static IncrementDate Day;
    public static IncrementDate Month;
    public static IncrementDate Year;
}
public interface FizzWare.NBuilder.IOperable`1 {
}
public interface FizzWare.NBuilder.IPersistenceService {
    public abstract virtual void Create(T obj);
    public abstract virtual void Create(IList`1<T> obj);
    public abstract virtual void Update(T obj);
    public abstract virtual void Update(IList`1<T> obj);
    public abstract virtual void SetPersistenceCreateMethod(Action`1<T> saveMethod);
    public abstract virtual void SetPersistenceUpdateMethod(Action`1<T> saveMethod);
}
public interface FizzWare.NBuilder.IRandomGenerator {
    public abstract virtual ushort Next(ushort min, ushort max);
    public abstract virtual UInt32 Next(UInt32 min, UInt32 max);
    public abstract virtual ulong Next(ulong min, ulong max);
    public abstract virtual short Next(short min, short max);
    public abstract virtual int Next(int min, int max);
    public abstract virtual long Next(long min, long max);
    public abstract virtual float Next(float min, float max);
    public abstract virtual double Next(double min, double max);
    public abstract virtual decimal Next(decimal min, decimal max);
    public abstract virtual char Next(char min, char max);
    public abstract virtual byte Next(byte min, byte max);
    public abstract virtual sbyte Next(sbyte min, sbyte max);
    public abstract virtual DateTime Next(DateTime min, DateTime max, DateTimeKind kind);
    public abstract virtual bool Next();
    public abstract virtual string NextString(int minLength, int maxLength);
    public abstract virtual bool Boolean();
    public abstract virtual int Int();
    public abstract virtual short Short();
    public abstract virtual long Long();
    public abstract virtual UInt32 UInt();
    public abstract virtual ulong ULong();
    public abstract virtual ushort UShort();
    public abstract virtual decimal Decimal();
    public abstract virtual float Float();
    public abstract virtual double Double();
    public abstract virtual byte Byte();
    public abstract virtual sbyte SByte();
    public abstract virtual DateTime DateTime();
    public abstract virtual string Phrase(int length);
    public abstract virtual char Char();
    public abstract virtual Guid Guid();
    public abstract virtual T Enumeration();
    public abstract virtual Enum Enumeration(Type type);
}
public interface FizzWare.NBuilder.ISingleObjectBuilder`1 {
}
public interface FizzWare.NBuilder.IUniqueRandomGenerator {
    public abstract virtual void Reset();
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.ListBuilderExtensions : object {
    [ExtensionAttribute]
public static IOperable`1<T> TheFirst(IListBuilder`1<T> listBuilder, int amount);
    [ExtensionAttribute]
public static IOperable`1<T> TheLast(IListBuilder`1<T> listBuilder, int amount);
    [ExtensionAttribute]
public static IOperable`1<T> IndexOf(IListBuilder`1<T> listBuilder, Int32[] indexes);
    [ExtensionAttribute]
public static IOperable`1<T> Random(IListBuilder`1<T> listBuilder, int amount);
    [ExtensionAttribute]
public static IOperable`1<T> Random(IListBuilder`1<T> listBuilder, int amount, int start, int end);
    [ExtensionAttribute]
public static IOperable`1<T> Section(IListBuilder`1<T> listBuilder, int start, int end);
    [ExtensionAttribute]
public static IOperable`1<T> TheNext(IListBuilder`1<T> listBuilder, int amount);
    [ExtensionAttribute]
public static IOperable`1<T> TheRest(IListBuilder`1<T> listBuilder);
    [ExtensionAttribute]
public static IOperable`1<T> ThePrevious(IListBuilder`1<T> listBuilder, int amount);
    [ExtensionAttribute]
public static IList`1<T> BuildHierarchy(IListBuilder`1<T> listBuilder, IHierarchySpec`1<T> hierarchySpec);
    [ExtensionAttribute]
public static IList`1<T> PersistHierarchy(IListBuilder`1<T> listBuilder, IHierarchySpec`1<T> hierarchySpec);
    private static IListBuilderImpl`1<T> GetListBuilderImpl(object obj);
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.OperableExtensions : object {
    [ExtensionAttribute]
public static IOperable`1<T> With(IOperable`1<T> operable, Func`2<T, TFunc> func);
    [ExtensionAttribute]
public static IOperable`1<T> With(IOperable`1<T> operable, Action`2<T, int> func);
    [ExtensionAttribute]
public static IOperable`1<T> With(IOperable`1<T> operable, Expression`1<Func`2<T, TProperty>> property, TProperty value);
    [ExtensionAttribute]
public static IOperable`1<T> And(IOperable`1<T> operable, Func`2<T, TFunc> func);
    [ExtensionAttribute]
public static IOperable`1<T> And(IOperable`1<T> operable, Action`2<T, int> func);
    [ExtensionAttribute]
public static IOperable`1<T> And(IOperable`1<T> operable, Expression`1<Func`2<T, TProperty>> property, TProperty value);
    [ExtensionAttribute]
public static IOperable`1<T> And(IOperable`1<T> operable, Action`1<T> action);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithFactory instead.")]
public static IOperable`1<T> WithConstructor(IOperable`1<T> operable, Func`1<T> constructor);
    [ExtensionAttribute]
public static IOperable`1<T> WithFactory(IOperable`1<T> operable, Func`1<T> factory);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithFactory instead.")]
public static IOperable`1<T> WithConstructor(IOperable`1<T> operable, Func`2<int, T> constructor);
    [ExtensionAttribute]
public static IOperable`1<T> WithFactory(IOperable`1<T> operable, Func`2<int, T> factory);
    [ExtensionAttribute]
public static IOperable`1<T> Do(IOperable`1<T> operable, Action`1<T> action);
    [ExtensionAttribute]
public static IOperable`1<T> Do(IOperable`1<T> operable, Action`2<T, int> action);
    [ExtensionAttribute]
public static IOperable`1<T> DoForEach(IOperable`1<T> operable, Action`2<T, U> action, IList`1<U> list);
    private static IDeclaration`1<T> GetDeclaration(IOperable`1<T> operable);
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.PersistenceExtensions : object {
    private static IDeclaration`1<T> GetDeclaration(IOperable`1<T> operable);
    [ExtensionAttribute]
public static T Persist(ISingleObjectBuilder`1<T> singleObjectBuilder);
    [ExtensionAttribute]
public static IList`1<T> Persist(IOperable`1<T> operable);
    [ExtensionAttribute]
public static IList`1<T> Persist(IListBuilder`1<T> listBuilder);
}
public class FizzWare.NBuilder.PersistenceMethod`1 : MulticastDelegate {
    public PersistenceMethod`1(object object, IntPtr method);
    public virtual void Invoke(T obj);
    public virtual IAsyncResult BeginInvoke(T obj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class FizzWare.NBuilder.PersistenceMethodNotFoundException : Exception {
    public PersistenceMethodNotFoundException(string message);
}
public class FizzWare.NBuilder.PersistenceService : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, MulticastDelegate> <CreateMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, MulticastDelegate> <UpdateMethods>k__BackingField;
    public Dictionary`2<Type, MulticastDelegate> CreateMethods { get; public set; }
    public Dictionary`2<Type, MulticastDelegate> UpdateMethods { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, MulticastDelegate> get_CreateMethods();
    [CompilerGeneratedAttribute]
public void set_CreateMethods(Dictionary`2<Type, MulticastDelegate> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, MulticastDelegate> get_UpdateMethods();
    [CompilerGeneratedAttribute]
public void set_UpdateMethods(Dictionary`2<Type, MulticastDelegate> value);
    public sealed virtual void Create(T obj);
    public sealed virtual void Create(IList`1<T> list);
    public sealed virtual void Update(T obj);
    public sealed virtual void Update(IList`1<T> obj);
    public sealed virtual void SetPersistenceCreateMethod(Action`1<T> saveMethod);
    public sealed virtual void SetPersistenceUpdateMethod(Action`1<T> saveMethod);
}
public class FizzWare.NBuilder.Pick`1 : object {
    public static UniqueRandomPicker`1<T> UniqueRandomList(int count);
    public static UniqueRandomPicker`1<T> UniqueRandomList(Constraint constraint);
    public static T RandomItemFrom(IList`1<T> list);
}
public class FizzWare.NBuilder.PropertyNaming.ExtensibleRandomValuePropertyNamer : object {
    private IRandomGenerator randomGenerator;
    protected IDictionary`2<Type, Delegate> Handlers;
    private BuilderSettings BuilderSettings;
    public ExtensibleRandomValuePropertyNamer(BuilderSettings builderSettings);
    public ExtensibleRandomValuePropertyNamer(IRandomGenerator randomGenerator, BuilderSettings builderSettings);
    public ExtensibleRandomValuePropertyNamer(IEnumerable`1<Delegate> handlers);
    public ExtensibleRandomValuePropertyNamer NameWith(Func`1<T> handler);
    public ExtensibleRandomValuePropertyNamer NameWith(Func`2<MemberInfo, T> handler);
    public ExtensibleRandomValuePropertyNamer DontName();
    public ExtensibleRandomValuePropertyNamer DontName(Type type);
    public sealed virtual void SetValuesOfAllIn(IList`1<T> instances);
    public sealed virtual void SetValuesOf(T instance);
    protected void SetMemberValues(IEnumerable`1<MemberInfo> memberInfos, T instance);
    protected void SetMemberValue(MemberInfo memberInfo, T instance);
    protected Delegate GetTypeHandler(MemberInfo memberInfo);
    protected Func`1<Enum> GetDefaultEnumHandler(Type type);
    protected IEnumerable`1<Delegate> GetDefaultHandlers();
    protected void NameWith(Delegate handler);
    [CompilerGeneratedAttribute]
private string <GetDefaultHandlers>b__16_0();
}
public interface FizzWare.NBuilder.PropertyNaming.IPropertyNamer {
    public abstract virtual void SetValuesOfAllIn(IList`1<T> obj);
    public abstract virtual void SetValuesOf(T obj);
}
public abstract class FizzWare.NBuilder.PropertyNaming.PropertyNamer : object {
    protected IReflectionUtil ReflectionUtil;
    protected static BindingFlags FLAGS;
    private BuilderSettings BuilderSettings;
    protected PropertyNamer(IReflectionUtil reflectionUtil, BuilderSettings builderSettings);
    public abstract virtual void SetValuesOfAllIn(IList`1<T> objects);
    public virtual void SetValuesOf(T obj);
    protected static object GetCurrentValue(MemberInfo memberInfo, T obj);
    protected static Type GetMemberType(MemberInfo memberInfo);
    private static bool IsNullableType(Type type);
    protected virtual void SetValue(MemberInfo memberInfo, T obj, object value);
    protected virtual bool IsMutable(MemberInfo member);
    protected virtual void HandleUnknownType(Type memberType, MemberInfo memberInfo, T obj);
    protected abstract virtual short GetInt16(MemberInfo memberInfo);
    protected abstract virtual int GetInt32(MemberInfo memberInfo);
    protected abstract virtual long GetInt64(MemberInfo memberInfo);
    protected abstract virtual decimal GetDecimal(MemberInfo memberInfo);
    protected abstract virtual float GetSingle(MemberInfo memberInfo);
    protected abstract virtual double GetDouble(MemberInfo memberInfo);
    protected abstract virtual ushort GetUInt16(MemberInfo memberInfo);
    protected abstract virtual UInt32 GetUInt32(MemberInfo memberInfo);
    protected abstract virtual ulong GetUInt64(MemberInfo memberInfo);
    protected abstract virtual sbyte GetSByte(MemberInfo memberInfo);
    protected abstract virtual byte GetByte(MemberInfo memberInfo);
    protected abstract virtual DateTime GetDateTime(MemberInfo memberInfo, DateTimeKind kind);
    protected abstract virtual string GetString(MemberInfo memberInfo);
    protected abstract virtual bool GetBoolean(MemberInfo memberInfo);
    protected abstract virtual char GetChar(MemberInfo memberInfo);
    protected abstract virtual Enum GetEnum(MemberInfo memberInfo);
    protected abstract virtual Guid GetGuid(MemberInfo memberInfo);
    protected abstract virtual TimeSpan GetTimeSpan(MemberInfo memberInfo);
    protected virtual bool ShouldIgnore(MemberInfo memberInfo);
    protected virtual void SetMemberValue(MemberInfo memberInfo, T obj);
    protected static Array GetEnumValues(Type enumType);
}
public class FizzWare.NBuilder.PropertyNaming.RandomValuePropertyNamer : PropertyNamer {
    private bool generatePositiveValuesOnly;
    private DateTime minDate;
    private DateTime maxDate;
    private static List`1<char> allowedChars;
    private static String[] words;
    private IRandomGenerator generator;
    private bool useLoremIpsumForStrings;
    public RandomValuePropertyNamer(BuilderSettings builderSettings);
    public RandomValuePropertyNamer(IRandomGenerator generator, IReflectionUtil reflectionUtil, bool generatePositiveValuesOnly, BuilderSettings builderSettings);
    public RandomValuePropertyNamer(IRandomGenerator generator, IReflectionUtil reflectionUtil, bool generatePositiveValuesOnly, DateTime minDate, DateTime maxDate, bool useLoremIpsumForStrings, BuilderSettings builderSettings);
    private static RandomValuePropertyNamer();
    public virtual void SetValuesOfAllIn(IList`1<T> objects);
    protected virtual short GetInt16(MemberInfo memberInfo);
    protected virtual int GetInt32(MemberInfo memberInfo);
    protected virtual long GetInt64(MemberInfo memberInfo);
    protected virtual decimal GetDecimal(MemberInfo memberInfo);
    protected virtual float GetSingle(MemberInfo memberInfo);
    protected virtual double GetDouble(MemberInfo memberInfo);
    protected virtual ushort GetUInt16(MemberInfo memberInfo);
    protected virtual UInt32 GetUInt32(MemberInfo memberInfo);
    protected virtual ulong GetUInt64(MemberInfo memberInfo);
    protected virtual byte GetByte(MemberInfo memberInfo);
    protected virtual sbyte GetSByte(MemberInfo memberInfo);
    protected virtual DateTime GetDateTime(MemberInfo memberInfo, DateTimeKind kind);
    protected virtual string GetString(MemberInfo memberInfo);
    protected virtual bool GetBoolean(MemberInfo memberInfo);
    protected virtual char GetChar(MemberInfo memberInfo);
    protected virtual Enum GetEnum(MemberInfo memberInfo);
    protected virtual Guid GetGuid(MemberInfo memberInfo);
    protected virtual TimeSpan GetTimeSpan(MemberInfo memberInfo);
}
public class FizzWare.NBuilder.PropertyNaming.SequentialPropertyNamer : PropertyNamer {
    private int _sequenceNumber;
    public SequentialPropertyNamer(IReflectionUtil reflectionUtil, BuilderSettings builderSettings);
    public virtual void SetValuesOfAllIn(IList`1<T> objects);
    public virtual void SetValuesOf(T obj);
    private static int GetNewSequenceNumber(int sequenceNumber, int maxValue);
    protected virtual short GetInt16(MemberInfo memberInfo);
    protected virtual int GetInt32(MemberInfo memberInfo);
    protected virtual long GetInt64(MemberInfo memberInfo);
    protected virtual decimal GetDecimal(MemberInfo memberInfo);
    protected virtual float GetSingle(MemberInfo memberInfo);
    protected virtual double GetDouble(MemberInfo memberInfo);
    protected virtual ushort GetUInt16(MemberInfo memberInfo);
    protected virtual UInt32 GetUInt32(MemberInfo memberInfo);
    protected virtual ulong GetUInt64(MemberInfo memberInfo);
    protected virtual char GetChar(MemberInfo memberInfo);
    protected virtual byte GetByte(MemberInfo memberInfo);
    protected virtual sbyte GetSByte(MemberInfo memberInfo);
    protected virtual DateTime GetDateTime(MemberInfo memberInfo, DateTimeKind kind);
    protected virtual string GetString(MemberInfo memberInfo);
    protected virtual bool GetBoolean(MemberInfo memberInfo);
    protected virtual Enum GetEnum(MemberInfo memberInfo);
    protected virtual Guid GetGuid(MemberInfo memberInfo);
    protected virtual TimeSpan GetTimeSpan(MemberInfo memberInfo);
}
public class FizzWare.NBuilder.RandomGenerator : object {
    private Random rnd;
    private static DateTime minSqlServerDate;
    private static DateTime maxSqlServerDate;
    private static String[] latinWords;
    public RandomGenerator(int seed);
    public RandomGenerator(Random random);
    private static RandomGenerator();
    public virtual short Next(short min, short max);
    public virtual int Next(int min, int max);
    public virtual long Next(long min, long max);
    public virtual float Next(float min, float max);
    public virtual double Next(double min, double max);
    public virtual decimal Next(decimal min, decimal max);
    public virtual char Next(char min, char max);
    public virtual byte Next(byte min, byte max);
    public virtual sbyte Next(sbyte min, sbyte max);
    public sealed virtual DateTime Next(DateTime min, DateTime max, DateTimeKind kind);
    public virtual bool Next();
    public sealed virtual Guid Guid();
    public virtual bool Boolean();
    public virtual int Int();
    public virtual short Short();
    public virtual long Long();
    public virtual UInt32 UInt();
    public virtual ulong ULong();
    public virtual ushort UShort();
    public virtual decimal Decimal();
    public virtual float Float();
    public virtual double Double();
    public virtual byte Byte();
    public virtual sbyte SByte();
    public virtual DateTime DateTime();
    public virtual string Phrase(int length);
    public virtual char Char();
    public virtual ushort Next(ushort min, ushort max);
    public virtual UInt32 Next(UInt32 min, UInt32 max);
    public virtual ulong Next(ulong min, ulong max);
    public sealed virtual T Enumeration();
    public sealed virtual Enum Enumeration(Type type);
    public virtual string NextString(int minLength, int maxLength);
}
public class FizzWare.NBuilder.RandomItemPicker`1 : object {
    private IList`1<T> from;
    private IRandomGenerator randomGenerator;
    private int max;
    public RandomItemPicker`1(IList`1<T> from, IRandomGenerator randomGenerator);
    public T Pick();
}
public class FizzWare.NBuilder.SequentialGenerator`1 : object {
    private static IncrementDate DefaultIncrementDate;
    private static double DefaultIncrementDateValue;
    private static int DefaultIncrementValue;
    private IDictionary`2<Type, Action> typeAdvancers;
    private IDictionary`2<IncrementDate, Func`2<DateTime, DateTime>> dateTimeAdvancerIncrementers;
    private IDictionary`2<IncrementDate, Func`2<DateTime, DateTime>> dateTimeAdvancerDecrementers;
    private T next;
    private bool hasBeenReset;
    [CompilerGeneratedAttribute]
private T <Increment>k__BackingField;
    [CompilerGeneratedAttribute]
private IncrementDate <IncrementDateBy>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IncrementDateValueBy>k__BackingField;
    [CompilerGeneratedAttribute]
private GeneratorDirection <Direction>k__BackingField;
    public T Increment { get; public set; }
    public IncrementDate IncrementDateBy { get; public set; }
    public double IncrementDateValueBy { get; public set; }
    public GeneratorDirection Direction { get; public set; }
    private IDictionary`2<Type, Action> InitializeTypeAdvancers();
    private IDictionary`2<IncrementDate, Func`2<DateTime, DateTime>> InitializeDateTimeAdvancerIncrementers();
    private IDictionary`2<IncrementDate, Func`2<DateTime, DateTime>> InitializeDateTimeAdvancerDecrementers();
    public sealed virtual T Generate();
    public virtual void StartingWith(T nextValueToGenerate);
    protected virtual void Advance();
    private void DateTimeAdvancer();
    private void BooleanAdvancer();
    private void CharAdvancer();
    private void ByteAdvancer();
    private void ULongAdvancer();
    private void UIntAdvancer();
    private void UShortAdvancer();
    private void DoubleAdvancer();
    private void FloatAdvancer();
    private void DecimalAdvancer();
    private void LongAdvancer();
    private void IntAdvancer();
    private void ShortAdvancer();
    private void PerformAdvance(Func`2<T, TTo> convert, Func`3<TTo, TTo, TTo> advance);
    [CompilerGeneratedAttribute]
public T get_Increment();
    [CompilerGeneratedAttribute]
public void set_Increment(T value);
    [CompilerGeneratedAttribute]
public IncrementDate get_IncrementDateBy();
    [CompilerGeneratedAttribute]
public void set_IncrementDateBy(IncrementDate value);
    [CompilerGeneratedAttribute]
public double get_IncrementDateValueBy();
    [CompilerGeneratedAttribute]
public void set_IncrementDateValueBy(double value);
    [CompilerGeneratedAttribute]
public GeneratorDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(GeneratorDirection value);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_0(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_1(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_2(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_3(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_4(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_5(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_6(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerIncrementers>b__8_7(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_0(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_1(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_2(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_3(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_4(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_5(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_6(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <InitializeDateTimeAdvancerDecrementers>b__9_7(DateTime x);
    [CompilerGeneratedAttribute]
private DateTime <DateTimeAdvancer>b__15_1(DateTime x, DateTime y);
    [CompilerGeneratedAttribute]
private DateTime <DateTimeAdvancer>b__15_3(DateTime x, DateTime y);
}
[ExtensionAttribute]
public static class FizzWare.NBuilder.SingleObjectBuilderExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithFactory instead.")]
public static ISingleObjectBuilder`1<T> WithConstructor(ISingleObjectBuilder`1<T> objectBuilder, Func`1<T> constructor);
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithFactory instead.")]
public static ISingleObjectBuilder`1<T> WithFactory(ISingleObjectBuilder`1<T> objectBuilder, Func`2<T, int> factory);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> WithFactory(ISingleObjectBuilder`1<T> objectBuilder, Func`1<T> factory);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> WithConstructor(ISingleObjectBuilder`1<T> objectBuilder, Func`2<T, int> constructor);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> With(ISingleObjectBuilder`1<T> objectBuilder, Func`2<T, TFunc> func);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> And(ISingleObjectBuilder`1<T> objectBuilder, Func`2<T, TFunc> func);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> Do(ISingleObjectBuilder`1<T> objectBuilder, Action`1<T> func);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> DoForAll(ISingleObjectBuilder`1<T> objectBuilder, Action`2<T, U> func, IList`1<U> list);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> And(ISingleObjectBuilder`1<T> objectBuilder, Action`1<T> func);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> With(ISingleObjectBuilder`1<T> objectBuilder, Expression`1<Func`2<T, TProperty>> property, TProperty value);
    [ExtensionAttribute]
public static ISingleObjectBuilder`1<T> And(ISingleObjectBuilder`1<T> objectBuilder, Expression`1<Func`2<T, TProperty>> property, TProperty value);
}
public class FizzWare.NBuilder.TypeCreationException : BuilderException {
    public TypeCreationException(string message);
    public TypeCreationException(string message, Exception innerException);
}
public class FizzWare.NBuilder.UniqueRandomGenerator : RandomGenerator {
    private Dictionary`2<Type, List`1<object>> trackedValues;
    public virtual byte Next(byte min, byte max);
    public virtual sbyte Next(sbyte min, sbyte max);
    public virtual char Next(char min, char max);
    public virtual decimal Next(decimal min, decimal max);
    public virtual double Next(double min, double max);
    public virtual float Next(float min, float max);
    public virtual int Next(int min, int max);
    public virtual long Next(long min, long max);
    public virtual short Next(short min, short max);
    public virtual UInt32 Next(UInt32 min, UInt32 max);
    public virtual ulong Next(ulong min, ulong max);
    public virtual ushort Next(ushort min, ushort max);
    private T NextUnique(T min, T max, T rangeSize, Func`3<T, T, T> next);
    private bool NoMoreValuesAvailable(T rangeSize);
    public sealed virtual void Reset();
}
public class FizzWare.NBuilder.UniqueRandomPicker`1 : object {
    private IConstraint constraint;
    private IUniqueRandomGenerator uniqueRandomGenerator;
    public UniqueRandomPicker`1(IConstraint constraint, IUniqueRandomGenerator uniqueRandomGenerator);
    public IList`1<T> From(IList`1<T> listToPickFrom);
}
public class FizzWare.NBuilder.UpToConstraint : Constraint {
    private IRandomGenerator randomGenerator;
    private int upper;
    public UpToConstraint(IRandomGenerator uniqueRandomGenerator, int upper);
    public virtual int GetEnd();
}
public class FizzWare.NBuilder.With : object {
    public static UpToConstraint UpTo(int count);
    public static BetweenConstraint Between(int lower);
    public static BetweenConstraint Between(int lower, int upper);
    public static ExactlyConstraint Exactly(int count);
}
