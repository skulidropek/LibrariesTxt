[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class nClam.ClamClient : object {
    [CompilerGeneratedAttribute]
private int <MaxChunkSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxStreamSize>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IPAddress <ServerIP>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public int MaxChunkSize { get; public set; }
    public long MaxStreamSize { get; public set; }
    [NullableAttribute("2")]
public string Server { get; public set; }
    [NullableAttribute("2")]
public IPAddress ServerIP { get; public set; }
    public int Port { get; public set; }
    public ClamClient(string server, int port);
    public ClamClient(IPAddress serverIP, int port);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxChunkSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxChunkSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_MaxStreamSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxStreamSize(long value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Server();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_Server(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual IPAddress get_ServerIP();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_ServerIP(IPAddress value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Port();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Port(int value);
    [AsyncStateMachineAttribute("nClam.ClamClient/<ExecuteClamCommandAsync>d__23")]
private Task`1<string> ExecuteClamCommandAsync(string command, CancellationToken cancellationToken, Func`3<Stream, CancellationToken, Task> additionalCommand);
    [AsyncStateMachineAttribute("nClam.ClamClient/<SendStreamFileChunksAsync>d__24")]
private Task SendStreamFileChunksAsync(Stream sourceData, Stream clamStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("nClam.ClamClient/<SendStreamFileChunksAsync>d__25")]
private Task SendStreamFileChunksAsync(ReadOnlyMemory`1<byte> sourceData, Stream clamStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("nClam.ClamClient/<CreateConnection>d__26")]
protected virtual Task`1<Stream> CreateConnection(TcpClient clam);
    public sealed virtual Task`1<string> GetVersionAsync();
    [AsyncStateMachineAttribute("nClam.ClamClient/<GetVersionAsync>d__28")]
public sealed virtual Task`1<string> GetVersionAsync(CancellationToken cancellationToken);
    public Task`1<string> GetStatsAsync();
    [AsyncStateMachineAttribute("nClam.ClamClient/<GetStatsAsync>d__30")]
public Task`1<string> GetStatsAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> PingAsync();
    [AsyncStateMachineAttribute("nClam.ClamClient/<PingAsync>d__32")]
public sealed virtual Task`1<bool> PingAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> TryPingAsync();
    [AsyncStateMachineAttribute("nClam.ClamClient/<TryPingAsync>d__34")]
public sealed virtual Task`1<bool> TryPingAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<ClamScanResult> ScanFileOnServerAsync(string filePath);
    [AsyncStateMachineAttribute("nClam.ClamClient/<ScanFileOnServerAsync>d__36")]
public sealed virtual Task`1<ClamScanResult> ScanFileOnServerAsync(string filePath, CancellationToken cancellationToken);
    public sealed virtual Task`1<ClamScanResult> ScanFileOnServerMultithreadedAsync(string filePath);
    [AsyncStateMachineAttribute("nClam.ClamClient/<ScanFileOnServerMultithreadedAsync>d__38")]
public sealed virtual Task`1<ClamScanResult> ScanFileOnServerMultithreadedAsync(string filePath, CancellationToken cancellationToken);
    public sealed virtual Task`1<ClamScanResult> SendAndScanFileAsync(Byte[] fileData);
    [AsyncStateMachineAttribute("nClam.ClamClient/<SendAndScanFileAsync>d__40")]
public sealed virtual Task`1<ClamScanResult> SendAndScanFileAsync(Byte[] fileData, CancellationToken cancellationToken);
    public sealed virtual Task`1<ClamScanResult> SendAndScanFileAsync(Stream sourceStream);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("nClam.ClamClient/<SendAndScanFileAsync>d__42")]
public Task`1<ClamScanResult> SendAndScanFileAsync(ReadOnlyMemory`1<byte> fileData, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public Task`1<ClamScanResult> SendAndScanFileAsync(ReadOnlyMemory`1<byte> sourceData);
    [AsyncStateMachineAttribute("nClam.ClamClient/<SendAndScanFileAsync>d__44")]
public sealed virtual Task`1<ClamScanResult> SendAndScanFileAsync(Stream sourceStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("nClam.ClamClient/<SendAndScanFileAsync>d__45")]
public sealed virtual Task`1<ClamScanResult> SendAndScanFileAsync(string filePath);
    [AsyncStateMachineAttribute("nClam.ClamClient/<SendAndScanFileAsync>d__46")]
public sealed virtual Task`1<ClamScanResult> SendAndScanFileAsync(string filePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("nClam.ClamClient/<Shutdown>d__47")]
public sealed virtual Task Shutdown(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class nClam.ClamScanInfectedFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirusName>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FileName { get; }
    public string VirusName { get; }
    public ClamScanInfectedFile(string fileName, string virusName);
    [CompilerGeneratedAttribute]
protected ClamScanInfectedFile(ClamScanInfectedFile original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public string get_VirusName();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ClamScanInfectedFile left, ClamScanInfectedFile right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ClamScanInfectedFile left, ClamScanInfectedFile right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ClamScanInfectedFile other);
    [CompilerGeneratedAttribute]
public virtual ClamScanInfectedFile <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class nClam.ClamScanResult : object {
    [CompilerGeneratedAttribute]
private string <RawResult>k__BackingField;
    [CompilerGeneratedAttribute]
private ClamScanResults <Result>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ReadOnlyCollection`1<ClamScanInfectedFile> <InfectedFiles>k__BackingField;
    public string RawResult { get; private set; }
    public ClamScanResults Result { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyCollection`1<ClamScanInfectedFile> InfectedFiles { get; private set; }
    public ClamScanResult(string rawResult);
    [CompilerGeneratedAttribute]
public string get_RawResult();
    [CompilerGeneratedAttribute]
private void set_RawResult(string value);
    [CompilerGeneratedAttribute]
public ClamScanResults get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(ClamScanResults value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ClamScanInfectedFile> get_InfectedFiles();
    [CompilerGeneratedAttribute]
private void set_InfectedFiles(ReadOnlyCollection`1<ClamScanInfectedFile> value);
    public static string before(string s);
    public static string after(string s);
    public virtual string ToString();
}
public enum nClam.ClamScanResults : Enum {
    public int value__;
    public static ClamScanResults Unknown;
    public static ClamScanResults Clean;
    public static ClamScanResults VirusDetected;
    public static ClamScanResults Error;
}
[NullableContextAttribute("1")]
public interface nClam.IClamClient {
    public int MaxChunkSize { get; public set; }
    public long MaxStreamSize { get; public set; }
    [NullableAttribute("2")]
public string Server { get; public set; }
    [NullableAttribute("2")]
public IPAddress ServerIP { get; public set; }
    public int Port { get; public set; }
    public abstract virtual int get_MaxChunkSize();
    public abstract virtual void set_MaxChunkSize(int value);
    public abstract virtual long get_MaxStreamSize();
    public abstract virtual void set_MaxStreamSize(long value);
    [NullableContextAttribute("2")]
public abstract virtual string get_Server();
    [NullableContextAttribute("2")]
public abstract virtual void set_Server(string value);
    [NullableContextAttribute("2")]
public abstract virtual IPAddress get_ServerIP();
    [NullableContextAttribute("2")]
public abstract virtual void set_ServerIP(IPAddress value);
    public abstract virtual int get_Port();
    public abstract virtual void set_Port(int value);
    public abstract virtual Task`1<string> GetVersionAsync();
    public abstract virtual Task`1<string> GetVersionAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> PingAsync();
    public abstract virtual Task`1<bool> PingAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryPingAsync();
    public abstract virtual Task`1<bool> TryPingAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ClamScanResult> ScanFileOnServerAsync(string filePath);
    public abstract virtual Task`1<ClamScanResult> ScanFileOnServerAsync(string filePath, CancellationToken cancellationToken);
    public abstract virtual Task`1<ClamScanResult> ScanFileOnServerMultithreadedAsync(string filePath);
    public abstract virtual Task`1<ClamScanResult> ScanFileOnServerMultithreadedAsync(string filePath, CancellationToken cancellationToken);
    public abstract virtual Task`1<ClamScanResult> SendAndScanFileAsync(Byte[] fileData);
    public abstract virtual Task`1<ClamScanResult> SendAndScanFileAsync(Byte[] fileData, CancellationToken cancellationToken);
    public abstract virtual Task`1<ClamScanResult> SendAndScanFileAsync(Stream sourceStream);
    public abstract virtual Task`1<ClamScanResult> SendAndScanFileAsync(Stream sourceStream, CancellationToken cancellationToken);
    public abstract virtual Task`1<ClamScanResult> SendAndScanFileAsync(string filePath);
    public abstract virtual Task`1<ClamScanResult> SendAndScanFileAsync(string filePath, CancellationToken cancellationToken);
    public abstract virtual Task Shutdown(CancellationToken cancellationToken);
}
public class nClam.MaxStreamSizeExceededException : Exception {
    public MaxStreamSizeExceededException(long maxStreamSize);
}
public class nClam.UnknownClamResponseException : Exception {
    [NullableContextAttribute("1")]
public UnknownClamResponseException(string response);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
