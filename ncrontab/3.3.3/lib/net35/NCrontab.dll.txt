public class NCrontab.CrontabException : Exception {
    public CrontabException(string message);
    public CrontabException(string message, Exception innerException);
    protected CrontabException(SerializationInfo info, StreamingContext context);
}
public class NCrontab.CrontabField : object {
    private BitArray _bits;
    private int _minValueSet;
    private int _maxValueSet;
    private CrontabFieldImpl _impl;
    private CrontabField(CrontabFieldImpl impl);
    public static CrontabField Parse(CrontabFieldKind kind, string expression);
    public static CrontabField TryParse(CrontabFieldKind kind, string expression);
    public static T TryParse(CrontabFieldKind kind, string expression, Func`2<CrontabField, T> valueSelector, Func`2<ExceptionProvider, T> errorSelector);
    public static CrontabField Seconds(string expression);
    public static CrontabField Minutes(string expression);
    public static CrontabField Hours(string expression);
    public static CrontabField Days(string expression);
    public static CrontabField Months(string expression);
    public static CrontabField DaysOfWeek(string expression);
    public sealed virtual int GetFirst();
    public sealed virtual int Next(int start);
    private int IndexToValue(int index);
    private int ValueToIndex(int value);
    public sealed virtual bool Contains(int value);
    private T Accumulate(int start, int end, int interval, T success, Func`2<ExceptionProvider, T> errorSelector);
    private T OnValueAboveMaxError(int value, Func`2<ExceptionProvider, T> errorSelector);
    private T OnValueBelowMinError(int value, Func`2<ExceptionProvider, T> errorSelector);
    public virtual string ToString();
    public string ToString(string format);
    public void Format(TextWriter writer);
    public void Format(TextWriter writer, bool noNames);
}
internal class NCrontab.CrontabFieldAccumulator`1 : MulticastDelegate {
    public CrontabFieldAccumulator`1(object object, IntPtr method);
    public virtual T Invoke(int start, int end, int interval, T successs, Func`2<ExceptionProvider, T> onError);
    public virtual IAsyncResult BeginInvoke(int start, int end, int interval, T successs, Func`2<ExceptionProvider, T> onError, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class NCrontab.CrontabFieldImpl : object {
    public static CrontabFieldImpl Second;
    public static CrontabFieldImpl Minute;
    public static CrontabFieldImpl Hour;
    public static CrontabFieldImpl Day;
    public static CrontabFieldImpl Month;
    public static CrontabFieldImpl DayOfWeek;
    private static CrontabFieldImpl[] FieldByKind;
    private static CompareInfo Comparer;
    private String[] _names;
    [CompilerGeneratedAttribute]
private CrontabFieldKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    public CrontabFieldKind Kind { get; }
    public int MinValue { get; }
    public int MaxValue { get; }
    public int ValueCount { get; }
    private CrontabFieldImpl(CrontabFieldKind kind, int minValue, int maxValue, String[] names);
    private static CrontabFieldImpl();
    public static CrontabFieldImpl FromKind(CrontabFieldKind kind);
    [CompilerGeneratedAttribute]
public CrontabFieldKind get_Kind();
    [CompilerGeneratedAttribute]
public int get_MinValue();
    [CompilerGeneratedAttribute]
public int get_MaxValue();
    public int get_ValueCount();
    public void Format(ICrontabField field, TextWriter writer);
    public void Format(ICrontabField field, TextWriter writer, bool noNames);
    private void FormatValue(int value, TextWriter writer, bool noNames);
    private static void FastFormatNumericValue(int value, TextWriter writer);
    public void Parse(string str, CrontabFieldAccumulator`1<ExceptionProvider> acc);
    public T TryParse(string str, CrontabFieldAccumulator`1<T> acc, T success, Func`2<ExceptionProvider, T> errorSelector);
    private T OnParseException(Exception innerException, string str, Func`2<ExceptionProvider, T> errorSelector);
    private T InternalParse(string str, CrontabFieldAccumulator`1<T> acc, T success, Func`2<ExceptionProvider, T> errorSelector);
    private int ParseValue(string str);
    private sealed virtual override object System.Runtime.Serialization.IObjectReference.GetRealObject(StreamingContext context);
}
public enum NCrontab.CrontabFieldKind : Enum {
    public int value__;
    public static CrontabFieldKind Second;
    public static CrontabFieldKind Minute;
    public static CrontabFieldKind Hour;
    public static CrontabFieldKind Day;
    public static CrontabFieldKind Month;
    public static CrontabFieldKind DayOfWeek;
}
public class NCrontab.CrontabSchedule : object {
    private CrontabField _seconds;
    private CrontabField _minutes;
    private CrontabField _hours;
    private CrontabField _days;
    private CrontabField _months;
    private CrontabField _daysOfWeek;
    private static CrontabField SecondZero;
    private static Calendar Calendar { get; }
    private CrontabSchedule(CrontabField seconds, CrontabField minutes, CrontabField hours, CrontabField days, CrontabField months, CrontabField daysOfWeek);
    private static CrontabSchedule();
    public static CrontabSchedule Parse(string expression);
    public static CrontabSchedule Parse(string expression, ParseOptions options);
    public static CrontabSchedule TryParse(string expression);
    public static CrontabSchedule TryParse(string expression, ParseOptions options);
    public static T TryParse(string expression, Func`2<CrontabSchedule, T> valueSelector, Func`2<ExceptionProvider, T> errorSelector);
    public static T TryParse(string expression, ParseOptions options, Func`2<CrontabSchedule, T> valueSelector, Func`2<ExceptionProvider, T> errorSelector);
    public IEnumerable`1<DateTime> GetNextOccurrences(DateTime baseTime, DateTime endTime);
    public DateTime GetNextOccurrence(DateTime baseTime);
    public DateTime GetNextOccurrence(DateTime baseTime, DateTime endTime);
    private Nullable`1<DateTime> TryGetNextOccurrence(DateTime baseTime, DateTime endTime);
    public virtual string ToString();
    private static Calendar get_Calendar();
}
public class NCrontab.ExceptionProvider : MulticastDelegate {
    public ExceptionProvider(object object, IntPtr method);
    public virtual Exception Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Exception EndInvoke(IAsyncResult result);
}
public interface NCrontab.ICrontabField {
    public abstract virtual int GetFirst();
    public abstract virtual int Next(int start);
    public abstract virtual bool Contains(int value);
}
internal static class NCrontab.StringSeparatorStock : object {
    public static Char[] Space;
    public static Char[] Comma;
    private static StringSeparatorStock();
}
