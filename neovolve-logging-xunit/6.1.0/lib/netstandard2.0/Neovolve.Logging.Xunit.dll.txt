[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILoggerFactory AddXunit(ILoggerFactory factory, ITestOutputHelper output, LoggingConfig config);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddXunit(ILoggingBuilder builder, ITestOutputHelper output, LoggingConfig config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Neovolve.Logging.Xunit.CacheLogger : FilterLogger {
    private static AsyncLocal`1<ConcurrentStack`1<CacheScope>> _scopes;
    [NullableAttribute("2")]
private ILoggerFactory _factory;
    private ConcurrentStack`1<LogEntry> _logEntries;
    [NullableAttribute("2")]
private ILogger _logger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<LogEntry> LogWritten;
    public int Count { get; }
    public IReadOnlyCollection`1<LogEntry> Entries { get; }
    [NullableAttribute("2")]
public LogEntry Last { get; }
    private static ConcurrentStack`1<CacheScope> Scopes { get; }
    public CacheLogger(ILogger logger);
    internal CacheLogger(ILogger logger, ILoggerFactory factory);
    private static CacheLogger();
    [CompilerGeneratedAttribute]
public void add_LogWritten(EventHandler`1<LogEntry> value);
    [CompilerGeneratedAttribute]
public void remove_LogWritten(EventHandler`1<LogEntry> value);
    public virtual IDisposable BeginScope(TState state);
    public sealed virtual void Dispose();
    public virtual bool IsEnabled(LogLevel logLevel);
    protected virtual void Dispose(bool disposing);
    protected virtual void WriteLogEntry(LogLevel logLevel, EventId eventId, TState state, string message, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual int get_Count();
    public sealed virtual IReadOnlyCollection`1<LogEntry> get_Entries();
    [NullableContextAttribute("2")]
public sealed virtual LogEntry get_Last();
    private static ConcurrentStack`1<CacheScope> get_Scopes();
}
public class Neovolve.Logging.Xunit.CacheLogger`1 : CacheLogger {
    [NullableContextAttribute("1")]
public CacheLogger`1(ILogger logger);
    [NullableContextAttribute("1")]
internal CacheLogger`1(ILogger logger, ILoggerFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Neovolve.Logging.Xunit.CacheScope : object {
    private Action _onScopeEnd;
    private IDisposable _scope;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <State>k__BackingField;
    [NullableAttribute("2")]
public object State { get; }
    public CacheScope(IDisposable scope, object state, Action onScopeEnd);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_State();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Neovolve.Logging.Xunit.DefaultFormatter : object {
    private LoggingConfig _config;
    [CompilerGeneratedAttribute]
private string <FormatMask>k__BackingField;
    protected string FormatMask { get; }
    public DefaultFormatter(LoggingConfig config);
    public virtual string Format(int scopeLevel, string categoryName, LogLevel logLevel, EventId eventId, string message, Exception exception);
    private string MaskSensitiveValues(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_FormatMask();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Neovolve.Logging.Xunit.DefaultScopeFormatter : DefaultFormatter {
    [CompilerGeneratedAttribute]
private string <FormatMask>k__BackingField;
    protected string FormatMask { get; }
    public DefaultScopeFormatter(LoggingConfig config);
    [CompilerGeneratedAttribute]
protected virtual string get_FormatMask();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Neovolve.Logging.Xunit.FilterLogger : object {
    private string _nullFormatted;
    public abstract virtual IDisposable BeginScope(TState state);
    public abstract virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    protected string FormatMessage(TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    protected virtual bool ShouldFilter(string message, Exception exception);
    protected abstract virtual void WriteLogEntry(LogLevel logLevel, EventId eventId, TState state, string message, Exception exception, Func`3<TState, Exception, string> formatter);
}
public interface Neovolve.Logging.Xunit.ICacheLogger {
    public int Count { get; }
    [NullableAttribute("1")]
public IReadOnlyCollection`1<LogEntry> Entries { get; }
    [NullableAttribute("2")]
public LogEntry Last { get; }
    public abstract virtual int get_Count();
    [NullableContextAttribute("1")]
public abstract virtual IReadOnlyCollection`1<LogEntry> get_Entries();
    [NullableContextAttribute("2")]
public abstract virtual LogEntry get_Last();
}
public interface Neovolve.Logging.Xunit.ICacheLogger`1 {
}
[NullableContextAttribute("1")]
public interface Neovolve.Logging.Xunit.ILogFormatter {
    public abstract virtual string Format(int scopeLevel, string categoryName, LogLevel logLevel, EventId eventId, string message, Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Neovolve.Logging.Xunit.LogEntry : object {
    [CompilerGeneratedAttribute]
private EventId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<object> <Scopes>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <State>k__BackingField;
    public EventId EventId { get; }
    public Exception Exception { get; }
    public LogLevel LogLevel { get; }
    [NullableAttribute("1")]
public string Message { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyCollection`1<object> Scopes { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> State { get; }
    public LogEntry(LogLevel logLevel, EventId eventId, object state, Exception exception, string message, IReadOnlyCollection`1<object> scopes);
    private static IDictionary`2<string, object> ParseState(object state);
    [CompilerGeneratedAttribute]
public EventId get_EventId();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<object> get_Scopes();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_State();
}
public static class Neovolve.Logging.Xunit.LogFactory : object {
    [NullableContextAttribute("1")]
public static ILoggerFactory Create(ITestOutputHelper output, LoggingConfig config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Neovolve.Logging.Xunit.LoggerExtensions : object {
    [ExtensionAttribute]
public static ICacheLogger WithCache(ILogger logger);
    [ExtensionAttribute]
public static ICacheLogger`1<T> WithCache(ILogger`1<T> logger);
    [ExtensionAttribute]
internal static ICacheLogger WithCache(ILogger logger, ILoggerFactory factory);
    [ExtensionAttribute]
internal static ICacheLogger`1<T> WithCache(ILogger`1<T> logger, ILoggerFactory factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Neovolve.Logging.Xunit.LoggingConfig : object {
    private ILogFormatter _formatter;
    private ILogFormatter _scopeFormatter;
    [CompilerGeneratedAttribute]
private bool <IgnoreTestBoundaryException>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ScopePaddingSpaces>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <SensitiveValues>k__BackingField;
    public ILogFormatter Formatter { get; public set; }
    public bool IgnoreTestBoundaryException { get; public set; }
    public LogLevel LogLevel { get; public set; }
    public ILogFormatter ScopeFormatter { get; public set; }
    public int ScopePaddingSpaces { get; public set; }
    public Collection`1<string> SensitiveValues { get; }
    public ILogFormatter get_Formatter();
    public void set_Formatter(ILogFormatter value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTestBoundaryException();
    [CompilerGeneratedAttribute]
public void set_IgnoreTestBoundaryException(bool value);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(LogLevel value);
    public ILogFormatter get_ScopeFormatter();
    public void set_ScopeFormatter(ILogFormatter value);
    [CompilerGeneratedAttribute]
public int get_ScopePaddingSpaces();
    [CompilerGeneratedAttribute]
public void set_ScopePaddingSpaces(int value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_SensitiveValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Neovolve.Logging.Xunit.LoggingTestsBase : object {
    [CompilerGeneratedAttribute]
private ICacheLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestOutputHelper <Output>k__BackingField;
    protected ICacheLogger Logger { get; }
    protected ITestOutputHelper Output { get; }
    protected LoggingTestsBase(ITestOutputHelper output, LogLevel logLevel);
    protected LoggingTestsBase(ITestOutputHelper output, LoggingConfig config);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
protected ICacheLogger get_Logger();
    [CompilerGeneratedAttribute]
protected ITestOutputHelper get_Output();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Neovolve.Logging.Xunit.LoggingTestsBase`1 : object {
    [CompilerGeneratedAttribute]
private ICacheLogger`1<T> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestOutputHelper <Output>k__BackingField;
    protected ICacheLogger`1<T> Logger { get; }
    protected ITestOutputHelper Output { get; }
    protected LoggingTestsBase`1(ITestOutputHelper output, LogLevel logLevel);
    protected LoggingTestsBase`1(ITestOutputHelper output, LoggingConfig config);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
protected ICacheLogger`1<T> get_Logger();
    [CompilerGeneratedAttribute]
protected ITestOutputHelper get_Output();
}
internal class Neovolve.Logging.Xunit.NoopDisposable : object {
    [NullableAttribute("1")]
public static NoopDisposable Instance;
    private static NoopDisposable();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Neovolve.Logging.Xunit.ScopeWriter : object {
    private string _category;
    private LoggingConfig _config;
    private int _depth;
    private Action _onScopeEnd;
    private ITestOutputHelper _output;
    [NullableAttribute("2")]
private object _state;
    private string _scopeMessage;
    private string _structuredStateData;
    public ScopeWriter(ITestOutputHelper output, object state, int depth, string category, Action onScopeEnd, LoggingConfig config);
    public sealed virtual void Dispose();
    private string BuildScopeStateMessage(bool isScopeEnd);
    private void DetermineScopeStateMessage();
    private void WriteLog(int depth, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Neovolve.Logging.Xunit.SerializerSettings : object {
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <Default>k__BackingField;
    public static JsonSerializerOptions Default { get; }
    private static SerializerSettings();
    private static JsonSerializerOptions BuildSerializerSettings();
    [CompilerGeneratedAttribute]
public static JsonSerializerOptions get_Default();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Neovolve.Logging.Xunit.TestOutputLogger : FilterLogger {
    private static AsyncLocal`1<ConcurrentStack`1<ScopeWriter>> _scopes;
    private string _categoryName;
    private LoggingConfig _config;
    private ITestOutputHelper _output;
    private static ConcurrentStack`1<ScopeWriter> Scopes { get; }
    public TestOutputLogger(string categoryName, ITestOutputHelper output, LoggingConfig config);
    private static TestOutputLogger();
    public virtual IDisposable BeginScope(TState state);
    public virtual bool IsEnabled(LogLevel logLevel);
    protected virtual void WriteLogEntry(LogLevel logLevel, EventId eventId, TState state, string message, Exception exception, Func`3<TState, Exception, string> formatter);
    private void WriteLog(LogLevel logLevel, EventId eventId, string message, Exception exception);
    private static ConcurrentStack`1<ScopeWriter> get_Scopes();
}
public class Neovolve.Logging.Xunit.TestOutputLoggerProvider : object {
    [NullableAttribute("2")]
private LoggingConfig _config;
    [NullableAttribute("1")]
private ITestOutputHelper _output;
    [NullableContextAttribute("1")]
public TestOutputLoggerProvider(ITestOutputHelper output, LoggingConfig config);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Xunit.Abstractions.TestOutputHelperExtensions : object {
    [ExtensionAttribute]
public static ICacheLogger BuildLogger(ITestOutputHelper output, string memberName);
    [ExtensionAttribute]
public static ICacheLogger BuildLogger(ITestOutputHelper output, LogLevel logLevel, string memberName);
    [ExtensionAttribute]
public static ICacheLogger BuildLogger(ITestOutputHelper output, LoggingConfig config, string memberName);
    [ExtensionAttribute]
public static ILoggerFactory BuildLoggerFactory(ITestOutputHelper output);
    [ExtensionAttribute]
public static ILoggerFactory BuildLoggerFactory(ITestOutputHelper output, LogLevel logLevel);
    [ExtensionAttribute]
public static ILoggerFactory BuildLoggerFactory(ITestOutputHelper output, LoggingConfig config);
    [ExtensionAttribute]
public static ICacheLogger`1<T> BuildLoggerFor(ITestOutputHelper output);
    [ExtensionAttribute]
public static ICacheLogger`1<T> BuildLoggerFor(ITestOutputHelper output, LogLevel logLevel);
    [ExtensionAttribute]
public static ICacheLogger`1<T> BuildLoggerFor(ITestOutputHelper output, LoggingConfig config);
}
