[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class MSBuildExtensionTask.ContextAwareTask : Task {
    protected string ManagedDllDirectory { get; }
    protected string UnmanagedDllDirectory { get; }
    protected virtual string get_ManagedDllDirectory();
    protected virtual string get_UnmanagedDllDirectory();
    public virtual bool Execute();
    protected abstract virtual bool ExecuteInner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Nerdbank.GitVersioning.GitLoaderContext : AssemblyLoadContext {
    public static string RuntimePath;
    private string nativeDependencyBasePath;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2<string, IntPtr> lastLoadedLibrary;
    public GitLoaderContext(string nativeDependencyBasePath);
    protected virtual Assembly Load(AssemblyName assemblyName);
    protected virtual IntPtr LoadUnmanagedDll(string unmanagedDllName);
}
[ExtensionAttribute]
internal static class Nerdbank.GitVersioning.SemanticVersionExtensions : object {
    private static Regex NumericIdentifierRegex;
    private static SemanticVersionExtensions();
    [ExtensionAttribute]
internal static SemanticVersion Increment(SemanticVersion currentVersion, ReleaseVersionIncrement increment);
    [ExtensionAttribute]
internal static SemanticVersion SetFirstPrereleaseTag(SemanticVersion version, string newFirstTag);
    [ExtensionAttribute]
internal static SemanticVersion WithoutPrepreleaseTags(SemanticVersion version);
    internal static string MakePrereleaseSemVer1Compliant(string prerelease, int paddingSize);
}
public class Nerdbank.GitVersioning.Tasks.AssemblyVersionInfo : Task {
    public static string GeneratorName;
    public static string GeneratorVersion;
    private static string CompilerDefinesAroundGeneratedCodeAttribute;
    private static string CompilerDefinesAroundExcludeFromCodeCoverageAttribute;
    private static string FileHeaderComment;
    private CodeGenerator generator;
    [CompilerGeneratedAttribute]
private string <CodeLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitNonVersionCustomAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThisAssemblyNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyOriginatorKeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyKeyContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyProduct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyCopyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyCompany>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublicRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrereleaseVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitDateTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitThisAssemblyClass>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalThisAssemblyFields>k__BackingField;
    [RequiredAttribute]
public string CodeLanguage { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    public bool EmitNonVersionCustomAttributes { get; public set; }
    public string AssemblyName { get; public set; }
    public string AssemblyVersion { get; public set; }
    public string AssemblyFileVersion { get; public set; }
    public string AssemblyInformationalVersion { get; public set; }
    public string RootNamespace { get; public set; }
    public string ThisAssemblyNamespace { get; public set; }
    public string AssemblyOriginatorKeyFile { get; public set; }
    public string AssemblyKeyContainerName { get; public set; }
    public string AssemblyTitle { get; public set; }
    public string AssemblyProduct { get; public set; }
    public string AssemblyCopyright { get; public set; }
    public string AssemblyCompany { get; public set; }
    public string AssemblyConfiguration { get; public set; }
    public bool PublicRelease { get; public set; }
    public string PrereleaseVersion { get; public set; }
    public string GitCommitId { get; public set; }
    public string GitCommitDateTicks { get; public set; }
    public bool EmitThisAssemblyClass { get; public set; }
    public ITaskItem[] AdditionalThisAssemblyFields { get; public set; }
    private static AssemblyVersionInfo();
    [CompilerGeneratedAttribute]
public string get_CodeLanguage();
    [CompilerGeneratedAttribute]
public void set_CodeLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public bool get_EmitNonVersionCustomAttributes();
    [CompilerGeneratedAttribute]
public void set_EmitNonVersionCustomAttributes(bool value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyFileVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyFileVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyInformationalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
    [CompilerGeneratedAttribute]
public void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_ThisAssemblyNamespace();
    [CompilerGeneratedAttribute]
public void set_ThisAssemblyNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyOriginatorKeyFile();
    [CompilerGeneratedAttribute]
public void set_AssemblyOriginatorKeyFile(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyKeyContainerName();
    [CompilerGeneratedAttribute]
public void set_AssemblyKeyContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyTitle();
    [CompilerGeneratedAttribute]
public void set_AssemblyTitle(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyProduct();
    [CompilerGeneratedAttribute]
public void set_AssemblyProduct(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyCopyright();
    [CompilerGeneratedAttribute]
public void set_AssemblyCopyright(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyCompany();
    [CompilerGeneratedAttribute]
public void set_AssemblyCompany(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyConfiguration();
    [CompilerGeneratedAttribute]
public void set_AssemblyConfiguration(string value);
    [CompilerGeneratedAttribute]
public bool get_PublicRelease();
    [CompilerGeneratedAttribute]
public void set_PublicRelease(bool value);
    [CompilerGeneratedAttribute]
public string get_PrereleaseVersion();
    [CompilerGeneratedAttribute]
public void set_PrereleaseVersion(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommitId();
    [CompilerGeneratedAttribute]
public void set_GitCommitId(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommitDateTicks();
    [CompilerGeneratedAttribute]
public void set_GitCommitDateTicks(string value);
    [CompilerGeneratedAttribute]
public bool get_EmitThisAssemblyClass();
    [CompilerGeneratedAttribute]
public void set_EmitThisAssemblyClass(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalThisAssemblyFields();
    [CompilerGeneratedAttribute]
public void set_AdditionalThisAssemblyFields(ITaskItem[] value);
    public string BuildCode();
    public virtual bool Execute();
    private static string ToHex(Byte[] data);
    private static Byte[] GetPublicKeyFromKeyContainer(string containerName);
    private static Byte[] GetPublicKeyFromKeyPair(Byte[] keyPair);
    private void GenerateAssemblyAttributes();
    private List`1<KeyValuePair`2<string, ValueTuple`2<object, bool>>> GetFieldsForThisAssembly();
    private void GenerateThisAssemblyClass();
    private CodeGenerator CreateGenerator(string thisAssemblyNamespace, string rootNamespace);
    private bool TryReadKeyInfo(String& publicKey, String& publicKeyToken);
}
public class Nerdbank.GitVersioning.Tasks.CompareFiles : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <OriginalItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NewItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreSame>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] OriginalItems { get; public set; }
    [RequiredAttribute]
public ITaskItem[] NewItems { get; public set; }
    [OutputAttribute]
public bool AreSame { get; private set; }
    [OutputAttribute]
public bool AreChanged { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OriginalItems();
    [CompilerGeneratedAttribute]
public void set_OriginalItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NewItems();
    [CompilerGeneratedAttribute]
public void set_NewItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_AreSame();
    [CompilerGeneratedAttribute]
private void set_AreSame(bool value);
    public bool get_AreChanged();
    public virtual bool Execute();
    internal static bool FastFileEqualityCheck(string sourcePath, string destPath);
    private bool AreFilesIdentical();
    private bool IsContentOfFilesTheSame(string file1, string file2);
}
internal static class Nerdbank.GitVersioning.Tasks.CryptoBlobParser : object {
    private static int PublicKeyTokenSize;
    private static int Sha1HashSize;
    private static UInt32 RSA1;
    private static byte PublicKeyBlobId;
    private static byte PrivateKeyBlobId;
    private static int OffsetToKeyData;
    private static CryptoBlobParser();
    internal static Byte[] GetStrongNameTokenFromPublicKey(Byte[] publicKey);
    internal static bool TryGetPublicKeyFromPrivateKeyBlob(Byte[] blob, Byte[]& publicKey);
    private static Byte[] CreateSnPublicKeyBlob(BlobHeader header, RsaPubKey rsa, Byte[] pubKeyData);
}
public class Nerdbank.GitVersioning.Tasks.GetBuildVersion : ContextAwareTask {
    [CompilerGeneratedAttribute]
private string <BuildMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultPublicRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitRepoRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectPathRelativeToGitRepoRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OverrideBuildNumberOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <OutputProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublicRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildingRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SimpleVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MajorMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrereleaseVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitIdShort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitDateTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GitVersionHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildMetadataFragment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChocolateyPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NpmPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudBuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CloudBuildVersionVars>k__BackingField;
    public string BuildMetadata { get; public set; }
    public string DefaultPublicRelease { get; public set; }
    public string GitRepoRoot { get; public set; }
    public string ProjectPathRelativeToGitRepoRoot { get; public set; }
    public string ProjectDirectory { get; public set; }
    public int OverrideBuildNumberOffset { get; public set; }
    public string GitEngine { get; public set; }
    [RequiredAttribute]
public string TargetsPath { get; public set; }
    [OutputAttribute]
public ITaskItem[] OutputProperties { get; public set; }
    [OutputAttribute]
public bool PublicRelease { get; private set; }
    [OutputAttribute]
public string BuildingRef { get; public set; }
    [OutputAttribute]
public string Version { get; private set; }
    [OutputAttribute]
public string AssemblyVersion { get; private set; }
    [OutputAttribute]
public string AssemblyFileVersion { get; private set; }
    [OutputAttribute]
public string AssemblyInformationalVersion { get; private set; }
    [OutputAttribute]
public string SimpleVersion { get; private set; }
    [OutputAttribute]
public string MajorMinorVersion { get; public set; }
    [OutputAttribute]
public string PrereleaseVersion { get; public set; }
    [OutputAttribute]
public string GitCommitId { get; private set; }
    [OutputAttribute]
public string GitCommitIdShort { get; private set; }
    [OutputAttribute]
public string GitCommitDateTicks { get; private set; }
    [OutputAttribute]
public int GitVersionHeight { get; private set; }
    [OutputAttribute]
public string BuildMetadataFragment { get; private set; }
    [OutputAttribute]
public string NuGetPackageVersion { get; private set; }
    [OutputAttribute]
public string ChocolateyPackageVersion { get; private set; }
    [OutputAttribute]
public string NpmPackageVersion { get; private set; }
    [OutputAttribute]
public int BuildNumber { get; private set; }
    [OutputAttribute]
public string CloudBuildNumber { get; private set; }
    [OutputAttribute]
public ITaskItem[] CloudBuildVersionVars { get; private set; }
    protected string UnmanagedDllDirectory { get; }
    [CompilerGeneratedAttribute]
public string get_BuildMetadata();
    [CompilerGeneratedAttribute]
public void set_BuildMetadata(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultPublicRelease();
    [CompilerGeneratedAttribute]
public void set_DefaultPublicRelease(string value);
    [CompilerGeneratedAttribute]
public string get_GitRepoRoot();
    [CompilerGeneratedAttribute]
public void set_GitRepoRoot(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectPathRelativeToGitRepoRoot();
    [CompilerGeneratedAttribute]
public void set_ProjectPathRelativeToGitRepoRoot(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public int get_OverrideBuildNumberOffset();
    [CompilerGeneratedAttribute]
public void set_OverrideBuildNumberOffset(int value);
    [CompilerGeneratedAttribute]
public string get_GitEngine();
    [CompilerGeneratedAttribute]
public void set_GitEngine(string value);
    [CompilerGeneratedAttribute]
public string get_TargetsPath();
    [CompilerGeneratedAttribute]
public void set_TargetsPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OutputProperties();
    [CompilerGeneratedAttribute]
public void set_OutputProperties(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_PublicRelease();
    [CompilerGeneratedAttribute]
private void set_PublicRelease(bool value);
    [CompilerGeneratedAttribute]
public string get_BuildingRef();
    [CompilerGeneratedAttribute]
public void set_BuildingRef(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
private void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyFileVersion();
    [CompilerGeneratedAttribute]
private void set_AssemblyFileVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
private void set_AssemblyInformationalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_SimpleVersion();
    [CompilerGeneratedAttribute]
private void set_SimpleVersion(string value);
    [CompilerGeneratedAttribute]
public string get_MajorMinorVersion();
    [CompilerGeneratedAttribute]
public void set_MajorMinorVersion(string value);
    [CompilerGeneratedAttribute]
public string get_PrereleaseVersion();
    [CompilerGeneratedAttribute]
public void set_PrereleaseVersion(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommitId();
    [CompilerGeneratedAttribute]
private void set_GitCommitId(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommitIdShort();
    [CompilerGeneratedAttribute]
private void set_GitCommitIdShort(string value);
    [CompilerGeneratedAttribute]
public string get_GitCommitDateTicks();
    [CompilerGeneratedAttribute]
private void set_GitCommitDateTicks(string value);
    [CompilerGeneratedAttribute]
public int get_GitVersionHeight();
    [CompilerGeneratedAttribute]
private void set_GitVersionHeight(int value);
    [CompilerGeneratedAttribute]
public string get_BuildMetadataFragment();
    [CompilerGeneratedAttribute]
private void set_BuildMetadataFragment(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageVersion();
    [CompilerGeneratedAttribute]
private void set_NuGetPackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ChocolateyPackageVersion();
    [CompilerGeneratedAttribute]
private void set_ChocolateyPackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_NpmPackageVersion();
    [CompilerGeneratedAttribute]
private void set_NpmPackageVersion(string value);
    [CompilerGeneratedAttribute]
public int get_BuildNumber();
    [CompilerGeneratedAttribute]
private void set_BuildNumber(int value);
    [CompilerGeneratedAttribute]
public string get_CloudBuildNumber();
    [CompilerGeneratedAttribute]
private void set_CloudBuildNumber(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CloudBuildVersionVars();
    [CompilerGeneratedAttribute]
private void set_CloudBuildVersionVars(ITaskItem[] value);
    protected virtual string get_UnmanagedDllDirectory();
    protected virtual bool ExecuteInner();
    private static string GetSemVer1WithoutPaddingOrBuildMetadata(VersionOracle oracle);
    private static bool IsMisconfiguredPrereleaseAndSemVer1(VersionOracle oracle);
}
public class Nerdbank.GitVersioning.Tasks.NativeVersionInfo : Task {
    private static int VFT_APP;
    private static int VFT_DLL;
    private static string FileHeaderComment;
    private static string VersionStringDefineContent;
    private static string VersionInfoContent;
    private CodeGenerator generator;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyProduct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyCopyright>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyCompany>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFileName>k__BackingField;
    [RequiredAttribute]
public string OutputFile { get; public set; }
    [RequiredAttribute]
public string CodeLanguage { get; public set; }
    [RequiredAttribute]
public string ConfigurationType { get; public set; }
    public string AssemblyName { get; public set; }
    public string AssemblyVersion { get; public set; }
    public string AssemblyFileVersion { get; public set; }
    public string AssemblyInformationalVersion { get; public set; }
    public string AssemblyTitle { get; public set; }
    public string AssemblyProduct { get; public set; }
    public string AssemblyCopyright { get; public set; }
    public string AssemblyCompany { get; public set; }
    public string AssemblyLanguage { get; public set; }
    public string AssemblyCodepage { get; public set; }
    public string TargetFileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public string get_CodeLanguage();
    [CompilerGeneratedAttribute]
public void set_CodeLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationType();
    [CompilerGeneratedAttribute]
public void set_ConfigurationType(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyFileVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyFileVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyInformationalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyTitle();
    [CompilerGeneratedAttribute]
public void set_AssemblyTitle(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyProduct();
    [CompilerGeneratedAttribute]
public void set_AssemblyProduct(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyCopyright();
    [CompilerGeneratedAttribute]
public void set_AssemblyCopyright(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyCompany();
    [CompilerGeneratedAttribute]
public void set_AssemblyCompany(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyLanguage();
    [CompilerGeneratedAttribute]
public void set_AssemblyLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyCodepage();
    [CompilerGeneratedAttribute]
public void set_AssemblyCodepage(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFileName();
    [CompilerGeneratedAttribute]
public void set_TargetFileName(string value);
    public virtual bool Execute();
    private static string DefaultIfEmpty(string value, string defaultValue);
    private void CreateDefines();
    private void CreateVersionInfo();
    private CodeGenerator CreateGenerator();
    [CompilerGeneratedAttribute]
private void <Execute>b__62_0();
}
public class Nerdbank.GitVersioning.Tasks.SetCloudBuildVariables : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <CloudBuildVersionVars>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <MSBuildPropertyUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CloudBuildNumber>k__BackingField;
    public ITaskItem[] CloudBuildVersionVars { get; public set; }
    [OutputAttribute]
public ITaskItem[] MSBuildPropertyUpdates { get; public set; }
    public string CloudBuildNumber { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CloudBuildVersionVars();
    [CompilerGeneratedAttribute]
public void set_CloudBuildVersionVars(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MSBuildPropertyUpdates();
    [CompilerGeneratedAttribute]
public void set_MSBuildPropertyUpdates(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_CloudBuildNumber();
    [CompilerGeneratedAttribute]
public void set_CloudBuildNumber(string value);
    public virtual bool Execute();
    private void PipeOutputToMSBuildLog(string output, bool warning);
}
internal static class Nerdbank.GitVersioning.Utilities : object {
    private static int ProcessCannotAccessFileHR;
    internal static void FileOperationWithRetry(Action operation);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.4.173.63159")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
