internal class Nerdbank.GitVersioning.AssemblyVersionOptionsConverter : JsonConverter {
    private bool includeDefaults;
    internal AssemblyVersionOptionsConverter(bool includeDefaults);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public static class Nerdbank.GitVersioning.CloudBuild : object {
    public static ICloudBuild[] SupportedCloudBuilds;
    public static ICloudBuild Active { get; }
    private static CloudBuild();
    public static ICloudBuild get_Active();
    internal static string ShouldStartWith(string value, string prefix);
    internal static string IfStartsWith(string value, string prefix);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.AppVeyor : object {
    public string BuildingBranch { get; }
    public string BuildingRef { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public sealed virtual string get_BuildingBranch();
    public string get_BuildingRef();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static void RunAppveyor(string args, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.AtlassianBamboo : object {
    public bool IsPullRequest { get; }
    public string BuildingTag { get; }
    public string BuildingBranch { get; }
    public string BuildingRef { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_BuildingBranch();
    public string get_BuildingRef();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class NerdBank.GitVersioning.CloudBuildServices.GitHubActions : object {
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    private static string BuildingRef { get; }
    private static string EnvironmentFile { get; }
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    private static string get_BuildingRef();
    private static string get_EnvironmentFile();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static IReadOnlyDictionary`2<string, string> GetDictionaryFor(string variableName, string value);
    private static string GetEnvironmentVariableNameForVariable(string name);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.GitLab : object {
    public string BuildingBranch { get; }
    public string BuildingRef { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public sealed virtual string get_BuildingBranch();
    public string get_BuildingRef();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.Jenkins : object {
    private static Encoding UTF8NoBOM;
    public string BuildingTag { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    private static string Branch { get; }
    private static Jenkins();
    public sealed virtual string get_BuildingTag();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    private static string get_Branch();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static void WriteVersionFile(string buildNumber);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.TeamCity : object {
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    private static string BuildingRef { get; }
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    private static string get_BuildingRef();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.Travis : object {
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
internal class Nerdbank.GitVersioning.CloudBuildServices.VisualStudioTeamServices : object {
    public bool IsPullRequest { get; }
    public string BuildingTag { get; }
    public string BuildingBranch { get; }
    public string GitCommitId { get; }
    public bool IsApplicable { get; }
    private static string BuildingRef { get; }
    public sealed virtual bool get_IsPullRequest();
    public sealed virtual string get_BuildingTag();
    public sealed virtual string get_BuildingBranch();
    public sealed virtual string get_GitCommitId();
    public sealed virtual bool get_IsApplicable();
    private static string get_BuildingRef();
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public sealed virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
    private static IReadOnlyDictionary`2<string, string> GetDictionaryFor(string variableName, string value);
    private static string GetEnvironmentVariableNameForVariable(string name);
}
public class Nerdbank.GitVersioning.FilterPath : object {
    [CompilerGeneratedAttribute]
private bool <IsExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRelative>k__BackingField;
    public bool IsExclude { get; }
    public string RepoRelativePath { get; }
    public bool IsRoot { get; }
    internal bool IsRelative { get; }
    public FilterPath(string pathSpec, string relativeTo);
    [CompilerGeneratedAttribute]
public bool get_IsExclude();
    [CompilerGeneratedAttribute]
public string get_RepoRelativePath();
    public bool get_IsRoot();
    [CompilerGeneratedAttribute]
internal bool get_IsRelative();
    private static ValueTuple`2<bool, string> Normalize(string path, string relativeTo);
    public bool Excludes(string repoRelativePath, bool ignoreCase);
    private static ValueTuple`2<int, StringBuilder> GetRelativePath(string path, string relativeTo);
    public string ToPathSpec(string repoRelativeBaseDirectory);
}
internal class Nerdbank.GitVersioning.FilterPathJsonConverter : JsonConverter {
    private string repoRelativeBaseDirectory;
    public FilterPathJsonConverter(string repoRelativeBaseDirectory);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class Nerdbank.GitVersioning.GitExtensions : object {
    private static Version Version0;
    private static SemanticVersion SemVer0;
    private static CompareOptions DiffOptions;
    private static ushort MaximumBuildNumberOrRevisionComponent;
    private static GitExtensions();
    [ExtensionAttribute]
public static int GetVersionHeight(Commit commit, string repoRelativeProjectDirectory, Version baseVersion);
    [ExtensionAttribute]
public static int GetVersionHeight(Repository repo, string repoRelativeProjectDirectory);
    [ExtensionAttribute]
public static int GetVersionHeight(Branch branch, string repoRelativeProjectDirectory);
    [ExtensionAttribute]
public static int GetHeight(Commit commit, Func`2<Commit, bool> continueStepping);
    [ExtensionAttribute]
public static int GetHeight(Commit commit, string repoRelativeProjectDirectory, Func`2<Commit, bool> continueStepping);
    [ExtensionAttribute]
public static int GetHeight(Branch branch, Func`2<Commit, bool> continueStepping);
    [ExtensionAttribute]
public static int GetHeight(Branch branch, string repoRelativeProjectDirectory, Func`2<Commit, bool> continueStepping);
    [ExtensionAttribute]
public static int GetTruncatedCommitIdAsInt32(Commit commit);
    [ExtensionAttribute]
public static ushort GetTruncatedCommitIdAsUInt16(Commit commit);
    [ExtensionAttribute]
public static Commit GetCommitFromTruncatedIdInteger(Repository repo, int truncatedId);
    [ExtensionAttribute]
private static IRepository GetRepository(IBelongToARepository repositoryMember);
    [ExtensionAttribute]
public static Version GetIdAsVersion(Commit commit, string repoRelativeProjectDirectory, Nullable`1<int> versionHeight);
    [ExtensionAttribute]
public static Version GetIdAsVersion(Repository repo, string repoRelativeProjectDirectory, Nullable`1<int> versionHeight);
    [ExtensionAttribute]
public static Commit GetCommitFromVersion(Repository repo, Version version, string repoRelativeProjectDirectory);
    [ExtensionAttribute]
public static IEnumerable`1<Commit> GetCommitsFromVersion(Repository repo, Version version, string repoRelativeProjectDirectory);
    public static void HelpFindLibGit2NativeBinaries(string basePath);
    public static void HelpFindLibGit2NativeBinaries(string basePath, String& attemptedDirectory);
    public static bool TryHelpFindLibGit2NativeBinaries(string basePath);
    public static bool TryHelpFindLibGit2NativeBinaries(string basePath, String& attemptedDirectory);
    public static void AddDirectoryToPath(string directory);
    public static string FindLibGit2NativeBinaries(string basePath);
    public static Repository OpenGitRepo(string pathUnderGitRepo, bool useDefaultConfigSearchPaths);
    internal static bool WillVersionChangeResetVersionHeight(VersionOptions first, VersionOptions second);
    internal static bool WillVersionChangeResetVersionHeight(SemanticVersion first, SemanticVersion second, Position versionHeightPosition);
    [ExtensionAttribute]
private static bool CommitMatchesVersion(Commit commit, SemanticVersion expectedVersion, Position comparisonPrecision, GitWalkTracker tracker);
    [ExtensionAttribute]
private static bool CommitMatchesVersion(Commit commit, Version expectedVersion, Position comparisonPrecision, GitWalkTracker tracker);
    private static int ReadVersionPosition(Version version, Position position);
    private static bool IsVersionHeightMismatch(Version version, VersionOptions versionOptions, Commit commit, GitWalkTracker tracker);
    private static bool IsCommitIdMismatch(Version version, VersionOptions versionOptions, Commit commit);
    private static string FindGitDir(string startingDir);
    private static string ReadGitDirFromFile(string fileName);
    [ExtensionAttribute]
private static bool StartsWith(ObjectId object, ushort leadingBytes, ushort bitMask);
    private static string EncodeAsHex(Byte[] buffer);
    private static int GetCommitHeight(Commit startingCommit, GitWalkTracker tracker, Func`2<Commit, bool> continueStepping);
    [IteratorStateMachineAttribute("Nerdbank.GitVersioning.GitExtensions/<GetCommitsReachableFromRefs>d__38")]
private static IEnumerable`1<Commit> GetCommitsReachableFromRefs(Repository repo);
    [ExtensionAttribute]
internal static Version GetIdAsVersionHelper(Commit commit, VersionOptions versionOptions, int versionHeight);
    private static bool IsVersionFileChangedInWorkingCopy(Repository repo, string repoRelativeProjectDirectory, VersionOptions& committedVersion, VersionOptions& workingCopyVersion);
    [ExtensionAttribute]
internal static string GetRepoRelativePath(Repository repo, string absolutePath);
    [CompilerGeneratedAttribute]
internal static bool <GetCommitHeight>g__TryCalculateHeight|37_0(Commit commit, <>c__DisplayClass37_0& );
}
public interface Nerdbank.GitVersioning.ICloudBuild {
    public bool IsApplicable { get; }
    public bool IsPullRequest { get; }
    public string BuildingBranch { get; }
    public string BuildingTag { get; }
    public string GitCommitId { get; }
    public abstract virtual bool get_IsApplicable();
    public abstract virtual bool get_IsPullRequest();
    public abstract virtual string get_BuildingBranch();
    public abstract virtual string get_BuildingTag();
    public abstract virtual string get_GitCommitId();
    public abstract virtual IReadOnlyDictionary`2<string, string> SetCloudBuildNumber(string buildNumber, TextWriter stdout, TextWriter stderr);
    public abstract virtual IReadOnlyDictionary`2<string, string> SetCloudBuildVariable(string name, string value, TextWriter stdout, TextWriter stderr);
}
public class Nerdbank.GitVersioning.ReleaseManager : object {
    private TextWriter stdout;
    private TextWriter stderr;
    public ReleaseManager(TextWriter outputWriter, TextWriter errorWriter);
    public void PrepareRelease(string projectDirectory, string releaseUnstableTag, Version nextVersion, Nullable`1<ReleaseVersionIncrement> versionIncrement, ReleaseManagerOutputMode outputMode);
    private string GetReleaseBranchName(VersionOptions versionOptions);
    private void UpdateVersion(string projectDirectory, Repository repository, SemanticVersion oldVersion, SemanticVersion newVersion);
    private Signature GetSignature(Repository repository);
    private Repository GetRepository(string projectDirectory);
    private static bool IsVersionDecrement(SemanticVersion oldVersion, SemanticVersion newVersion);
    private SemanticVersion GetNextDevVersion(VersionOptions versionOptions, Version nextVersionOverride, Nullable`1<ReleaseVersionIncrement> versionIncrementOverride);
    private void WriteToOutput(ReleaseInfo releaseInfo);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Nerdbank.GitVersioning.SemanticVersion : object {
    private static Regex FullSemVerPattern;
    private static Regex PrereleasePattern;
    private static Regex BuildMetadataPattern;
    private static Regex FullSemVerWithMacrosPattern;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prerelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildMetadata>k__BackingField;
    public Version Version { get; }
    public string Prerelease { get; }
    public string BuildMetadata { get; }
    internal bool IsDefault { get; }
    private string DebuggerDisplay { get; }
    public SemanticVersion(Version version, string prerelease, string buildMetadata);
    public SemanticVersion(string version, string prerelease, string buildMetadata);
    private static SemanticVersion();
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_Prerelease();
    [CompilerGeneratedAttribute]
public string get_BuildMetadata();
    internal bool get_IsDefault();
    private string get_DebuggerDisplay();
    public static bool TryParse(string semanticVersion, SemanticVersion& version);
    public static SemanticVersion Parse(string semanticVersion);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(SemanticVersion other);
    internal bool Contains(Version version);
    private static void VerifyPatternMatch(string input, Regex pattern, string parameterName);
}
[ExtensionAttribute]
internal static class Nerdbank.GitVersioning.SemanticVersionExtensions : object {
    private static Regex NumericIdentifierRegex;
    private static SemanticVersionExtensions();
    [ExtensionAttribute]
internal static SemanticVersion Increment(SemanticVersion currentVersion, ReleaseVersionIncrement increment);
    [ExtensionAttribute]
internal static SemanticVersion SetFirstPrereleaseTag(SemanticVersion version, string newFirstTag);
    [ExtensionAttribute]
internal static SemanticVersion WithoutPrepreleaseTags(SemanticVersion version);
    internal static string MakePrereleaseSemVer1Compliant(string prerelease, int paddingSize);
}
internal class Nerdbank.GitVersioning.SemanticVersionJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal static class Nerdbank.GitVersioning.Utilities : object {
    private static int ProcessCannotAccessFileHR;
    internal static void FileOperationWithRetry(Action operation);
}
[ExtensionAttribute]
public static class Nerdbank.GitVersioning.VersionExtensions : object {
    [ExtensionAttribute]
public static Version EnsureNonNegativeComponents(Version version, int fieldCount);
    [ExtensionAttribute]
public static string ToStringSafe(Version version, int fieldCount);
    internal static Version Create(int major, int minor, int build, int revision);
}
public static class Nerdbank.GitVersioning.VersionFile : object {
    public static string TxtFileName;
    public static string JsonFileName;
    public static IReadOnlyList`1<string> PreferredFileNames;
    private static VersionFile();
    public static VersionOptions GetVersion(Commit commit, string repoRelativeProjectDirectory, Dictionary`2<ObjectId, VersionOptions> blobVersionCache);
    public static VersionOptions GetVersion(Repository repo, string repoRelativeProjectDirectory);
    public static VersionOptions GetVersion(string projectDirectory);
    public static VersionOptions GetVersion(string projectDirectory, String& actualDirectory);
    public static bool IsVersionDefined(Commit commit, string projectDirectory);
    public static bool IsVersionDefined(string projectDirectory);
    public static string SetVersion(string projectDirectory, VersionOptions version);
    public static string SetVersion(string projectDirectory, VersionOptions version, bool includeSchemaProperty);
    public static string SetVersion(string projectDirectory, Version version, string unstableTag);
    private static VersionOptions TryReadVersionFile(TextReader versionTextContent);
    private static VersionOptions TryReadVersionJsonContent(string jsonContent, string repoRelativeBaseDirectory);
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Nerdbank.GitVersioning.VersionOptions : object {
    [DebuggerBrowsableAttribute("0")]
private bool isFrozen;
    [DebuggerBrowsableAttribute("0")]
private string gitCommitIdPrefix;
    [DebuggerBrowsableAttribute("0")]
private SemanticVersion version;
    [DebuggerBrowsableAttribute("0")]
private AssemblyVersionOptions assemblyVersion;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> buildNumberOffset;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> semVer1NumericIdentifierPadding;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> gitCommitIdShortFixedLength;
    [DebuggerBrowsableAttribute("0")]
private Nullable`1<int> gitCommitIdShortAutoMinimum;
    [DebuggerBrowsableAttribute("0")]
private NuGetPackageVersionOptions nuGetPackageVersion;
    [DebuggerBrowsableAttribute("0")]
private IReadOnlyList`1<string> publicReleaseRefSpec;
    [DebuggerBrowsableAttribute("0")]
private CloudBuildOptions cloudBuild;
    [DebuggerBrowsableAttribute("0")]
private ReleaseOptions release;
    [DebuggerBrowsableAttribute("0")]
private IReadOnlyList`1<FilterPath> pathFilters;
    [DebuggerBrowsableAttribute("0")]
private bool inherit;
    public static VersionPrecision DefaultVersionPrecision;
    public static string VersionHeightPlaceholder;
    private static int DefaultSemVer1NumericIdentifierPadding;
    public static int DefaultGitCommitIdShortFixedLength;
    [JsonPropertyAttribute]
public string Schema { get; }
    [JsonPropertyAttribute]
public SemanticVersion Version { get; public set; }
    [JsonPropertyAttribute]
public AssemblyVersionOptions AssemblyVersion { get; public set; }
    [JsonPropertyAttribute]
public string GitCommitIdPrefix { get; public set; }
    [JsonIgnoreAttribute]
public AssemblyVersionOptions AssemblyVersionOrDefault { get; }
    [JsonPropertyAttribute]
[ObsoleteAttribute("Use VersionHeightOffset instead.")]
[EditorBrowsableAttribute("1")]
public Nullable`1<int> BuildNumberOffset { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> VersionHeightOffset { get; public set; }
    [JsonIgnoreAttribute]
[ObsoleteAttribute("Use VersionHeightOffsetOrDefault instead.")]
[EditorBrowsableAttribute("1")]
public int BuildNumberOffsetOrDefault { get; }
    [JsonIgnoreAttribute]
public int VersionHeightOffsetOrDefault { get; }
    [JsonPropertyAttribute]
public Nullable`1<int> SemVer1NumericIdentifierPadding { get; public set; }
    [JsonIgnoreAttribute]
public int SemVer1NumericIdentifierPaddingOrDefault { get; }
    [JsonPropertyAttribute]
public Nullable`1<int> GitCommitIdShortFixedLength { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> GitCommitIdShortAutoMinimum { get; public set; }
    [JsonPropertyAttribute]
public NuGetPackageVersionOptions NuGetPackageVersion { get; public set; }
    [JsonIgnoreAttribute]
public NuGetPackageVersionOptions NuGetPackageVersionOrDefault { get; }
    [JsonPropertyAttribute]
public IReadOnlyList`1<string> PublicReleaseRefSpec { get; public set; }
    [JsonIgnoreAttribute]
public IReadOnlyList`1<string> PublicReleaseRefSpecOrDefault { get; }
    [JsonPropertyAttribute]
public CloudBuildOptions CloudBuild { get; public set; }
    [JsonIgnoreAttribute]
public CloudBuildOptions CloudBuildOrDefault { get; }
    [JsonPropertyAttribute]
public ReleaseOptions Release { get; public set; }
    [JsonIgnoreAttribute]
public ReleaseOptions ReleaseOrDefault { get; }
    [JsonPropertyAttribute]
public IReadOnlyList`1<FilterPath> PathFilters { get; public set; }
    [JsonPropertyAttribute]
public bool Inherit { get; public set; }
    [JsonIgnoreAttribute]
public bool IsFrozen { get; }
    [JsonIgnoreAttribute]
internal Nullable`1<Position> VersionHeightPosition { get; }
    [JsonIgnoreAttribute]
internal Nullable`1<Position> GitCommitIdPosition { get; }
    private string DebuggerDisplay { get; }
    internal bool IsDefaultVersionTheOnlyPropertySet { get; }
    public VersionOptions(VersionOptions copyFrom);
    public string get_Schema();
    public SemanticVersion get_Version();
    public void set_Version(SemanticVersion value);
    public AssemblyVersionOptions get_AssemblyVersion();
    public void set_AssemblyVersion(AssemblyVersionOptions value);
    public string get_GitCommitIdPrefix();
    public void set_GitCommitIdPrefix(string value);
    public AssemblyVersionOptions get_AssemblyVersionOrDefault();
    public Nullable`1<int> get_BuildNumberOffset();
    public void set_BuildNumberOffset(Nullable`1<int> value);
    public Nullable`1<int> get_VersionHeightOffset();
    public void set_VersionHeightOffset(Nullable`1<int> value);
    public int get_BuildNumberOffsetOrDefault();
    public int get_VersionHeightOffsetOrDefault();
    public Nullable`1<int> get_SemVer1NumericIdentifierPadding();
    public void set_SemVer1NumericIdentifierPadding(Nullable`1<int> value);
    public int get_SemVer1NumericIdentifierPaddingOrDefault();
    public Nullable`1<int> get_GitCommitIdShortFixedLength();
    public void set_GitCommitIdShortFixedLength(Nullable`1<int> value);
    public Nullable`1<int> get_GitCommitIdShortAutoMinimum();
    public void set_GitCommitIdShortAutoMinimum(Nullable`1<int> value);
    public NuGetPackageVersionOptions get_NuGetPackageVersion();
    public void set_NuGetPackageVersion(NuGetPackageVersionOptions value);
    public NuGetPackageVersionOptions get_NuGetPackageVersionOrDefault();
    public IReadOnlyList`1<string> get_PublicReleaseRefSpec();
    public void set_PublicReleaseRefSpec(IReadOnlyList`1<string> value);
    public IReadOnlyList`1<string> get_PublicReleaseRefSpecOrDefault();
    public CloudBuildOptions get_CloudBuild();
    public void set_CloudBuild(CloudBuildOptions value);
    public CloudBuildOptions get_CloudBuildOrDefault();
    public ReleaseOptions get_Release();
    public void set_Release(ReleaseOptions value);
    public ReleaseOptions get_ReleaseOrDefault();
    public IReadOnlyList`1<FilterPath> get_PathFilters();
    public void set_PathFilters(IReadOnlyList`1<FilterPath> value);
    public bool get_Inherit();
    public void set_Inherit(bool value);
    public bool get_IsFrozen();
    internal Nullable`1<Position> get_VersionHeightPosition();
    internal Nullable`1<Position> get_GitCommitIdPosition();
    private string get_DebuggerDisplay();
    public static VersionOptions FromVersion(Version version, string unstableTag);
    public static JsonSerializerSettings GetJsonSettings(bool includeDefaults);
    public static JsonSerializerSettings GetJsonSettings(bool includeDefaults, bool includeSchemaProperty);
    public static JsonSerializerSettings GetJsonSettings(bool includeDefaults, bool includeSchemaProperty, string repoRelativeBaseDirectory);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(VersionOptions other);
    public void Freeze();
    internal bool get_IsDefaultVersionTheOnlyPropertySet();
    private void SetIfNotReadOnly(T& field, T value);
}
internal class Nerdbank.GitVersioning.VersionOptionsContractResolver : CamelCasePropertyNamesContractResolver {
    private static object TypeContractCacheLock;
    private static Dictionary`2<Tuple`3<bool, bool, Type>, JsonContract> contractCache;
    [CompilerGeneratedAttribute]
private bool <IncludeSchemaProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDefaults>k__BackingField;
    internal bool IncludeSchemaProperty { get; internal set; }
    internal bool IncludeDefaults { get; internal set; }
    private static VersionOptionsContractResolver();
    [CompilerGeneratedAttribute]
internal bool get_IncludeSchemaProperty();
    [CompilerGeneratedAttribute]
internal void set_IncludeSchemaProperty(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IncludeDefaults();
    [CompilerGeneratedAttribute]
internal void set_IncludeDefaults(bool value);
    public virtual JsonContract ResolveContract(Type type);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    [CompilerGeneratedAttribute]
private bool <CreateProperty>b__12_0(object instance);
}
public class Nerdbank.GitVersioning.VersionOracle : object {
    private static Version Version0;
    private static SemanticVersion SemVer0;
    [CompilerGeneratedAttribute]
private VersionOptions <VersionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublicRelease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrereleaseVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitCommitIdShort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <GitCommitDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionHeightOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildingRef>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BuildMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private CloudBuildNumberOptions <CloudBuildNumberOptions>k__BackingField;
    public string CloudBuildNumber { get; }
    [IgnoreAttribute]
public bool CloudBuildNumberEnabled { get; }
    [IgnoreAttribute]
public IEnumerable`1<string> BuildMetadataWithCommitId { get; }
    public bool VersionFileFound { get; }
    public VersionOptions VersionOptions { get; }
    public Version AssemblyVersion { get; }
    public Version AssemblyFileVersion { get; }
    public string AssemblyInformationalVersion { get; }
    public bool PublicRelease { get; public set; }
    public string PrereleaseVersion { get; }
    public string PrereleaseVersionNoLeadingHyphen { get; }
    public Version SimpleVersion { get; }
    public int BuildNumber { get; }
    public int VersionRevision { get; }
    public Version MajorMinorVersion { get; }
    public int VersionMajor { get; }
    public int VersionMinor { get; }
    public string GitCommitId { get; }
    public string GitCommitIdShort { get; }
    public Nullable`1<DateTimeOffset> GitCommitDate { get; }
    public int VersionHeight { get; }
    public int VersionHeightOffset { get; }
    public string BuildingRef { get; }
    public Version Version { get; }
    [IgnoreAttribute]
public bool CloudBuildAllVarsEnabled { get; }
    [IgnoreAttribute]
public IDictionary`2<string, string> CloudBuildAllVars { get; }
    [IgnoreAttribute]
public bool CloudBuildVersionVarsEnabled { get; }
    [IgnoreAttribute]
public IDictionary`2<string, string> CloudBuildVersionVars { get; }
    [IgnoreAttribute]
public List`1<string> BuildMetadata { get; }
    public string BuildMetadataFragment { get; }
    public string NuGetPackageVersion { get; }
    public string ChocolateyPackageVersion { get; }
    public string NpmPackageVersion { get; }
    public string SemVer1 { get; }
    public string SemVer2 { get; }
    public int SemVer1NumericIdentifierPadding { get; }
    private string NuGetSemVer1BuildMetadata { get; }
    private string SemVer1BuildMetadata { get; }
    private string NuGetSemVer1 { get; }
    private string SemVer2BuildMetadata { get; }
    private string PrereleaseVersionSemVer1 { get; }
    private string GitCommitIdShortForNonPublicPrereleaseTag { get; }
    private CloudBuildNumberOptions CloudBuildNumberOptions { get; }
    private int VersionHeightWithOffset { get; }
    public VersionOracle(string projectDirectory, Repository repo, ICloudBuild cloudBuild, Nullable`1<int> overrideBuildNumberOffset, string projectPathRelativeToGitRepoRoot);
    public VersionOracle(string projectDirectory, Repository repo, Commit head, ICloudBuild cloudBuild, Nullable`1<int> overrideVersionHeightOffset, string projectPathRelativeToGitRepoRoot);
    private static VersionOracle();
    public static VersionOracle Create(string projectDirectory, string gitRepoDirectory, ICloudBuild cloudBuild, Nullable`1<int> overrideBuildNumberOffset, string projectPathRelativeToGitRepoRoot);
    public string get_CloudBuildNumber();
    public bool get_CloudBuildNumberEnabled();
    [IteratorStateMachineAttribute("Nerdbank.GitVersioning.VersionOracle/<get_BuildMetadataWithCommitId>d__10")]
public IEnumerable`1<string> get_BuildMetadataWithCommitId();
    public bool get_VersionFileFound();
    [CompilerGeneratedAttribute]
public VersionOptions get_VersionOptions();
    public Version get_AssemblyVersion();
    public Version get_AssemblyFileVersion();
    public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public bool get_PublicRelease();
    [CompilerGeneratedAttribute]
public void set_PublicRelease(bool value);
    [CompilerGeneratedAttribute]
public string get_PrereleaseVersion();
    public string get_PrereleaseVersionNoLeadingHyphen();
    public Version get_SimpleVersion();
    public int get_BuildNumber();
    public int get_VersionRevision();
    public Version get_MajorMinorVersion();
    public int get_VersionMajor();
    public int get_VersionMinor();
    [CompilerGeneratedAttribute]
public string get_GitCommitId();
    [CompilerGeneratedAttribute]
public string get_GitCommitIdShort();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_GitCommitDate();
    [CompilerGeneratedAttribute]
public int get_VersionHeight();
    [CompilerGeneratedAttribute]
public int get_VersionHeightOffset();
    [CompilerGeneratedAttribute]
public string get_BuildingRef();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public bool get_CloudBuildAllVarsEnabled();
    public IDictionary`2<string, string> get_CloudBuildAllVars();
    public bool get_CloudBuildVersionVarsEnabled();
    public IDictionary`2<string, string> get_CloudBuildVersionVars();
    [CompilerGeneratedAttribute]
public List`1<string> get_BuildMetadata();
    public string get_BuildMetadataFragment();
    public string get_NuGetPackageVersion();
    public string get_ChocolateyPackageVersion();
    public string get_NpmPackageVersion();
    public string get_SemVer1();
    public string get_SemVer2();
    public int get_SemVer1NumericIdentifierPadding();
    private string get_NuGetSemVer1BuildMetadata();
    private string get_SemVer1BuildMetadata();
    private string get_NuGetSemVer1();
    private string get_SemVer2BuildMetadata();
    private string get_PrereleaseVersionSemVer1();
    private string get_GitCommitIdShortForNonPublicPrereleaseTag();
    [CompilerGeneratedAttribute]
private CloudBuildNumberOptions get_CloudBuildNumberOptions();
    private int get_VersionHeightWithOffset();
    private static string FormatBuildMetadata(IEnumerable`1<string> identifiers);
    private static string FormatBuildMetadataSemVerV1(IEnumerable`1<string> identifiers);
    private static Version GetAssemblyVersion(Version version, VersionOptions versionOptions);
    private string ReplaceMacros(string prereleaseOrBuildMetadata);
    private static int CalculateVersionHeight(string relativeRepoProjectDirectory, Commit headCommit, VersionOptions committedVersion, VersionOptions workingVersion);
    private static Version GetIdAsVersion(Commit headCommit, VersionOptions committedVersion, VersionOptions workingVersion, int versionHeight);
    private static bool IsVersionFileChangedInWorkingTree(VersionOptions committedVersion, VersionOptions workingVersion);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__4_0(string expr);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.1.93.42199")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
