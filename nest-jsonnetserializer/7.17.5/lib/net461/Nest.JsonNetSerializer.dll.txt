public class Nest.JsonNetSerializer.ConnectionSettingsAwareContractResolver : DefaultContractResolver {
    [CompilerGeneratedAttribute]
private IConnectionSettingsValues <ConnectionSettings>k__BackingField;
    protected IConnectionSettingsValues ConnectionSettings { get; }
    public ConnectionSettingsAwareContractResolver(IConnectionSettingsValues connectionSettings);
    [CompilerGeneratedAttribute]
protected IConnectionSettingsValues get_ConnectionSettings();
    protected virtual string ResolvePropertyName(string fieldName);
    protected virtual JsonContract CreateContract(Type objectType);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    private void ApplyPropertyOverrides(MemberInfo member, JsonProperty property);
    private static void ApplyShouldSerializer(JsonProperty property);
    private static bool ShouldSerializeQueryContainer(object o, JsonProperty prop);
    private static bool ShouldSerializeQueryContainers(object o, JsonProperty prop);
}
public abstract class Nest.JsonNetSerializer.ConnectionSettingsAwareSerializerBase : object {
    internal static int DefaultBufferSize;
    private static Task CompletedTask;
    internal static Encoding ExpectedEncoding;
    private JsonSerializer _collapsedSerializer;
    private JsonSerializer _serializer;
    protected ConcurrentDictionary`2<string, IPropertyMapping> Properties;
    [CompilerGeneratedAttribute]
private IElasticsearchSerializer <BuiltinSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IConnectionSettingsValues <ConnectionSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<JsonConverter> <ContractJsonConverters>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<JsonSerializerSettings> <JsonSerializerSettingsFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ConnectionSettingsAwareContractResolver> <ModifyContractResolverCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<JsonConverter> <Converters>k__BackingField;
    protected int BufferSize { get; }
    protected IElasticsearchSerializer BuiltinSerializer { get; }
    protected IConnectionSettingsValues ConnectionSettings { get; }
    protected IEnumerable`1<JsonConverter> ContractJsonConverters { get; }
    protected Func`1<JsonSerializerSettings> JsonSerializerSettingsFactory { get; }
    protected Action`1<ConnectionSettingsAwareContractResolver> ModifyContractResolverCallback { get; }
    private List`1<JsonConverter> Converters { get; }
    protected ConnectionSettingsAwareSerializerBase(IElasticsearchSerializer builtinSerializer, IConnectionSettingsValues connectionSettings);
    internal ConnectionSettingsAwareSerializerBase(IElasticsearchSerializer builtinSerializer, IConnectionSettingsValues connectionSettings, Func`1<JsonSerializerSettings> jsonSerializerSettingsFactory, Action`1<ConnectionSettingsAwareContractResolver> modifyContractResolver, IEnumerable`1<JsonConverter> contractJsonConverters);
    private static ConnectionSettingsAwareSerializerBase();
    protected virtual int get_BufferSize();
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual object Deserialize(Type type, Stream stream);
    [AsyncStateMachineAttribute("Nest.JsonNetSerializer.ConnectionSettingsAwareSerializerBase/<DeserializeAsync>d__9`1")]
public virtual Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nest.JsonNetSerializer.ConnectionSettingsAwareSerializerBase/<DeserializeAsync>d__10")]
public virtual Task`1<object> DeserializeAsync(Type type, Stream stream, CancellationToken cancellationToken);
    public sealed virtual void Serialize(T data, Stream stream, SerializationFormatting formatting);
    public sealed virtual Task SerializeAsync(T data, Stream stream, SerializationFormatting formatting, CancellationToken cancellationToken);
    public sealed virtual IPropertyMapping CreatePropertyMapping(MemberInfo memberInfo);
    private static IPropertyMapping FromAttributes(MemberInfo memberInfo);
    [CompilerGeneratedAttribute]
protected IElasticsearchSerializer get_BuiltinSerializer();
    [CompilerGeneratedAttribute]
protected IConnectionSettingsValues get_ConnectionSettings();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<JsonConverter> get_ContractJsonConverters();
    [CompilerGeneratedAttribute]
protected Func`1<JsonSerializerSettings> get_JsonSerializerSettingsFactory();
    [CompilerGeneratedAttribute]
protected Action`1<ConnectionSettingsAwareContractResolver> get_ModifyContractResolverCallback();
    [CompilerGeneratedAttribute]
private List`1<JsonConverter> get_Converters();
    private JsonSerializer CreateSerializer(SerializationFormatting formatting);
    protected virtual ConnectionSettingsAwareContractResolver CreateContractResolver();
    protected virtual JsonSerializerSettings CreateJsonSerializerSettings();
    protected virtual IEnumerable`1<JsonConverter> CreateJsonConverters();
    protected virtual void ModifyContractResolver(ConnectionSettingsAwareContractResolver resolver);
}
public class Nest.JsonNetSerializer.Converters.HandleNestTypesOnSourceJsonConverter : JsonConverter {
    private static HashSet`1<Type> NestTypesThatCanAppearInSource;
    private IElasticsearchSerializer _builtInSerializer;
    private IMemoryStreamFactory _memoryStreamFactory;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public HandleNestTypesOnSourceJsonConverter(IElasticsearchSerializer builtInSerializer, IMemoryStreamFactory memoryStreamFactory);
    private static HandleNestTypesOnSourceJsonConverter();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Nest.JsonNetSerializer.Converters.TimeSpanToStringConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Nest.JsonNetSerializer.JsonNetSerializer : ConnectionSettingsAwareSerializerBase {
    public JsonNetSerializer(IElasticsearchSerializer builtinSerializer, IConnectionSettingsValues connectionSettings, Func`1<JsonSerializerSettings> jsonSerializerSettingsFactory, Action`1<ConnectionSettingsAwareContractResolver> modifyContractResolver, IEnumerable`1<JsonConverter> contractJsonConverters);
    public static IElasticsearchSerializer Default(IElasticsearchSerializer builtin, IConnectionSettingsValues values);
}
[ExtensionAttribute]
internal static class Nest.JsonNetSerializer.JsonReaderExtensions : object {
    [ExtensionAttribute]
public static JToken ReadTokenWithDateParseHandlingNone(JsonReader reader);
    [AsyncStateMachineAttribute("Nest.JsonNetSerializer.JsonReaderExtensions/<ReadTokenWithDateParseHandlingNoneAsync>d__1")]
[ExtensionAttribute]
public static Task`1<JToken> ReadTokenWithDateParseHandlingNoneAsync(JsonReader reader, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Nest.JsonNetSerializer.JTokenExtensions : object {
    [ExtensionAttribute]
public static MemoryStream ToStream(JToken token, IMemoryStreamFactory memoryStreamFactory);
}
