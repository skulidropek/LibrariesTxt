public class NETCore.MailKit.Core.EmailService : object {
    private IMailKitProvider _MailKitProvider;
    public EmailService(IMailKitProvider provider);
    public sealed virtual void Send(string mailTo, string subject, string message, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string subject, string message, String[] attachments, Encoding encoding, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public sealed virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, String[] attachments, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string subject, string message, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string subject, string message, String[] attachments, Encoding encoding, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public sealed virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, String[] attachments, Encoding encoding, bool isHtml, SenderInfo sender);
    private void SendEmail(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender, String[] attachments);
}
public interface NETCore.MailKit.Core.IEmailService {
    public abstract virtual void Send(string mailTo, string subject, string message, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string subject, string message, String[] attachments, Encoding encoding, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public abstract virtual void Send(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, String[] attachments, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string subject, string message, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string subject, string message, String[] attachments, Encoding encoding, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, String[] attachments, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, Encoding encoding, bool isHtml, SenderInfo sender);
    public abstract virtual Task SendAsync(string mailTo, string mailCc, string mailBcc, string subject, string message, String[] attachments, Encoding encoding, bool isHtml, SenderInfo sender);
}
public static class NETCore.MailKit.Extensions.MailKitOptionsBuilderExtension : object {
    public static IMailKitOptionsBuilder UseMailKit(IMailKitOptionsBuilder builder, MailKitOptions options, ServiceLifetime lifetime);
}
[ExtensionAttribute]
public static class NETCore.MailKit.Extensions.ServicesCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMailKit(IServiceCollection serviceCollection, Action`1<MailKitOptionsBuilder> optionsAction);
}
public interface NETCore.MailKit.IMailKitProvider {
    public MailKitOptions Options { get; }
    public SmtpClient SmtpClient { get; }
    public Pop3Client Pop3Client { get; }
    public ImapClient ImapClient { get; }
    public abstract virtual MailKitOptions get_Options();
    public abstract virtual SmtpClient get_SmtpClient();
    public abstract virtual Pop3Client get_Pop3Client();
    public abstract virtual ImapClient get_ImapClient();
}
public interface NETCore.MailKit.Infrastructure.IMailKitOptionsBuilder {
    public IServiceCollection serviceCollection { get; }
    public abstract virtual IServiceCollection get_serviceCollection();
    public abstract virtual IMailKitOptionsBuilder UseMailKit(MailKitOptions options, ServiceLifetime lifetime);
}
public class NETCore.MailKit.Infrastructure.Internal.MailKitOptions : object {
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SenderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SenderEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Security>k__BackingField;
    public string Server { get; public set; }
    public int Port { get; public set; }
    public string SenderName { get; public set; }
    public string SenderEmail { get; public set; }
    public string Account { get; public set; }
    public string Password { get; public set; }
    public bool Security { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(string value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_SenderName();
    [CompilerGeneratedAttribute]
public void set_SenderName(string value);
    [CompilerGeneratedAttribute]
public string get_SenderEmail();
    [CompilerGeneratedAttribute]
public void set_SenderEmail(string value);
    [CompilerGeneratedAttribute]
public string get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_Security();
    [CompilerGeneratedAttribute]
public void set_Security(bool value);
}
public class NETCore.MailKit.Infrastructure.Internal.SenderInfo : object {
    [CompilerGeneratedAttribute]
private string <SenderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SenderEmail>k__BackingField;
    public string SenderName { get; public set; }
    public string SenderEmail { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SenderName();
    [CompilerGeneratedAttribute]
public void set_SenderName(string value);
    [CompilerGeneratedAttribute]
public string get_SenderEmail();
    [CompilerGeneratedAttribute]
public void set_SenderEmail(string value);
}
public class NETCore.MailKit.Infrastructure.MailKitOptionsBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <serviceCollection>k__BackingField;
    public IServiceCollection serviceCollection { get; }
    public MailKitOptionsBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_serviceCollection();
    public sealed virtual IMailKitOptionsBuilder UseMailKit(MailKitOptions options, ServiceLifetime lifetime);
    private void AddProviderService(MailKitOptions options);
}
public class NETCore.MailKit.MailKitProvider : object {
    [CompilerGeneratedAttribute]
private MailKitOptions <Options>k__BackingField;
    public MailKitOptions Options { get; private set; }
    public SmtpClient SmtpClient { get; }
    public Pop3Client Pop3Client { get; }
    public ImapClient ImapClient { get; }
    public MailKitProvider(MailKitOptions mailKitOptions);
    [CompilerGeneratedAttribute]
public sealed virtual MailKitOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(MailKitOptions value);
    public sealed virtual SmtpClient get_SmtpClient();
    private Lazy`1<SmtpClient> lazySmtpClient();
    private SmtpClient InitSmtpClient();
    public sealed virtual Pop3Client get_Pop3Client();
    private Lazy`1<Pop3Client> lazyPop3Client();
    private Pop3Client InitPop3Client();
    public sealed virtual ImapClient get_ImapClient();
    private Lazy`1<ImapClient> lazyImapClient();
    private ImapClient InitImapClient();
    [CompilerGeneratedAttribute]
private SmtpClient <lazySmtpClient>b__7_0();
    [CompilerGeneratedAttribute]
private Pop3Client <lazyPop3Client>b__11_0();
    [CompilerGeneratedAttribute]
private ImapClient <lazyImapClient>b__15_0();
}
internal class NETCore.MailKit.Shared.Check : object {
}
