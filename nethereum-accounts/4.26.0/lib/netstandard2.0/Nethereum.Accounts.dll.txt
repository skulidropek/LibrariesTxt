public class Nethereum.Accounts.AccountMessageSigning.AccountSigningExternalService : object {
    [CompilerGeneratedAttribute]
private IEthSignTypedDataV4 <SignTypedDataV4>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthPersonalSign <PersonalSign>k__BackingField;
    public IEthSignTypedDataV4 SignTypedDataV4 { get; }
    public IEthPersonalSign PersonalSign { get; }
    public AccountSigningExternalService(IEthExternalSigner ethExternalSigner);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSignTypedDataV4 get_SignTypedDataV4();
    [CompilerGeneratedAttribute]
public sealed virtual IEthPersonalSign get_PersonalSign();
}
public class Nethereum.Accounts.AccountMessageSigning.AccountSigningOfflineService : object {
    [CompilerGeneratedAttribute]
private IEthSignTypedDataV4 <SignTypedDataV4>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthPersonalSign <PersonalSign>k__BackingField;
    public IEthSignTypedDataV4 SignTypedDataV4 { get; }
    public IEthPersonalSign PersonalSign { get; }
    public AccountSigningOfflineService(EthECKey ethECKey);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSignTypedDataV4 get_SignTypedDataV4();
    [CompilerGeneratedAttribute]
public sealed virtual IEthPersonalSign get_PersonalSign();
}
public class Nethereum.Accounts.AccountMessageSigning.EthPersonalExternalSign : object {
    private IEthExternalSigner _ethExternalSigner;
    public EthPersonalExternalSign(IEthExternalSigner ethExternalSigner);
    [AsyncStateMachineAttribute("Nethereum.Accounts.AccountMessageSigning.EthPersonalExternalSign/<SendRequestAsync>d__2")]
public sealed virtual Task`1<string> SendRequestAsync(Byte[] value, object id);
    public sealed virtual Task`1<string> SendRequestAsync(HexUTF8String utf8Hex, object id);
    public sealed virtual RpcRequest BuildRequest(HexUTF8String utf8Hex, object id);
    public sealed virtual RpcRequest BuildRequest(Byte[] value, object id);
}
public class Nethereum.Accounts.AccountMessageSigning.EthPersonalOfflineSign : object {
    private EthECKey _ethECKey;
    private EthereumMessageSigner _ethereumMessageSigner;
    public EthPersonalOfflineSign(EthECKey ethECKey);
    public sealed virtual Task`1<string> SendRequestAsync(Byte[] value, object id);
    public sealed virtual Task`1<string> SendRequestAsync(HexUTF8String utf8Hex, object id);
    public sealed virtual RpcRequest BuildRequest(HexUTF8String utf8Hex, object id);
    public sealed virtual RpcRequest BuildRequest(Byte[] value, object id);
}
public class Nethereum.Accounts.AccountMessageSigning.EthSignTypedDataV4External : object {
    private IEthExternalSigner _ethExternalSigner;
    private Eip712TypedDataSigner _typedDataSigner;
    public EthSignTypedDataV4External(IEthExternalSigner ethExternalSigner);
    [AsyncStateMachineAttribute("Nethereum.Accounts.AccountMessageSigning.EthSignTypedDataV4External/<SendRequestAsync>d__3")]
public sealed virtual Task`1<string> SendRequestAsync(string jsonMessage, object id);
    public sealed virtual RpcRequest BuildRequest(string message, object id);
}
public class Nethereum.Accounts.AccountMessageSigning.EthSignTypedDataV4Offline : object {
    private EthECKey _ethECKey;
    private Eip712TypedDataSigner _typedDataSigner;
    public EthSignTypedDataV4Offline(EthECKey ethECKey);
    public sealed virtual Task`1<string> SendRequestAsync(string jsonMessage, object id);
    public sealed virtual RpcRequest BuildRequest(string message, object id);
}
public class Nethereum.Web3.Accounts.Account : object {
    private INonceService _nonceService;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountSigningService <AccountSigningService>k__BackingField;
    public Nullable`1<BigInteger> ChainId { get; }
    public string PrivateKey { get; private set; }
    public string PublicKey { get; private set; }
    public string Address { get; protected set; }
    public ITransactionManager TransactionManager { get; protected set; }
    public INonceService NonceService { get; public set; }
    public IAccountSigningService AccountSigningService { get; private set; }
    public Account(EthECKey key, Nullable`1<BigInteger> chainId);
    public Account(string privateKey, Nullable`1<BigInteger> chainId);
    public Account(Byte[] privateKey, Nullable`1<BigInteger> chainId);
    public Account(EthECKey key, Chain chain);
    public Account(string privateKey, Chain chain);
    public Account(Byte[] privateKey, Chain chain);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_ChainId();
    public static Account LoadFromKeyStore(string json, string password, Nullable`1<BigInteger> chainId);
    [CompilerGeneratedAttribute]
public string get_PrivateKey();
    [CompilerGeneratedAttribute]
private void set_PrivateKey(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
private void set_PublicKey(string value);
    private void Initialise(EthECKey key);
    protected virtual void InitialiseDefaultTransactionManager();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address();
    [CompilerGeneratedAttribute]
protected void set_Address(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
protected void set_TransactionManager(ITransactionManager value);
    public sealed virtual INonceService get_NonceService();
    public sealed virtual void set_NonceService(INonceService value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccountSigningService get_AccountSigningService();
    [CompilerGeneratedAttribute]
private void set_AccountSigningService(IAccountSigningService value);
}
public class Nethereum.Web3.Accounts.AccountOfflineTransactionSigner : object {
    private LegacyTransactionSigner _legacyTransactionSigner;
    private Transaction1559Signer _transaction1559Signer;
    public AccountOfflineTransactionSigner(LegacyTransactionSigner legacyTransactionSigner, Transaction1559Signer transaction1559Signer);
    public string SignTransaction(Account account, TransactionInput transaction, Nullable`1<BigInteger> overridingAccountChainId);
}
public class Nethereum.Web3.Accounts.AccountSignerTransactionManager : TransactionManagerBase {
    private AccountOfflineTransactionSigner _transactionSigner;
    [CompilerGeneratedAttribute]
private BigInteger <DefaultGas>k__BackingField;
    public BigInteger DefaultGas { get; public set; }
    public AccountSignerTransactionManager(IClient rpcClient, Account account, Nullable`1<BigInteger> overridingAccountChainId);
    public AccountSignerTransactionManager(IClient rpcClient, string privateKey, Nullable`1<BigInteger> chainId);
    public AccountSignerTransactionManager(string privateKey, Nullable`1<BigInteger> chainId);
    [CompilerGeneratedAttribute]
public virtual BigInteger get_DefaultGas();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultGas(BigInteger value);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountSignerTransactionManager/<SendTransactionAsync>d__8")]
public virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountSignerTransactionManager/<SignTransactionAsync>d__9")]
public virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
    public string SignTransaction(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountSignerTransactionManager/<SignTransactionRetrievingNextNonceAsync>d__11")]
protected Task`1<string> SignTransactionRetrievingNextNonceAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountSignerTransactionManager/<GetNonceAsync>d__12")]
public Task`1<HexBigInteger> GetNonceAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountSignerTransactionManager/<SignAndSendTransactionAsync>d__13")]
private Task`1<string> SignAndSendTransactionAsync(TransactionInput transaction);
}
public class Nethereum.Web3.Accounts.AccountTransactionSigningInterceptor : RequestInterceptor {
    private AccountSignerTransactionManager _signer;
    public AccountTransactionSigningInterceptor(string privateKey, BigInteger chainId, IClient client);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountTransactionSigningInterceptor/<InterceptSendRequestAsync>d__2`1")]
public virtual Task`1<object> InterceptSendRequestAsync(Func`3<RpcRequest, string, Task`1<TResponse>> interceptedSendRequestAsync, RpcRequest request, string route);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.AccountTransactionSigningInterceptor/<InterceptSendRequestAsync>d__3`1")]
public virtual Task`1<object> InterceptSendRequestAsync(Func`4<string, string, Object[], Task`1<T>> interceptedSendRequestAsync, string method, string route, Object[] paramList);
    private Task`1<string> SignAndSendTransactionAsync(TransactionInput transaction);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__0(Func`3<RpcRequest, string, Task`1<T>> interceptedSendRequestAsync, RpcRequest request, string route);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__1(Func`4<string, string, Object[], Task`1<T>> interceptedSendRequestAsync, string method, string route, Object[] paramList);
}
public class Nethereum.Web3.Accounts.Basic.BasicAccount : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INonceService <NonceService>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountSigningService <AccountSigningService>k__BackingField;
    public string Address { get; protected set; }
    public ITransactionManager TransactionManager { get; protected set; }
    public INonceService NonceService { get; public set; }
    public IAccountSigningService AccountSigningService { get; private set; }
    public BasicAccount(string accountAddress);
    public BasicAccount(string accountAddress, BasicAccountTransactionManager transactionManager);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address();
    [CompilerGeneratedAttribute]
protected void set_Address(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
protected void set_TransactionManager(ITransactionManager value);
    [CompilerGeneratedAttribute]
public sealed virtual INonceService get_NonceService();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NonceService(INonceService value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccountSigningService get_AccountSigningService();
    [CompilerGeneratedAttribute]
private void set_AccountSigningService(IAccountSigningService value);
    protected virtual void InitialiseDefaultTransactionManager();
}
public class Nethereum.Web3.Accounts.Basic.BasicAccountTransactionManager : TransactionManagerBase {
    [CompilerGeneratedAttribute]
private BigInteger <DefaultGas>k__BackingField;
    public BigInteger DefaultGas { get; public set; }
    public BasicAccountTransactionManager(IClient client, BasicAccount account);
    public BasicAccountTransactionManager(IClient client, string accountAddress);
    public BasicAccountTransactionManager(string accountAddress);
    [CompilerGeneratedAttribute]
public virtual BigInteger get_DefaultGas();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultGas(BigInteger value);
    public void SetAccount(BasicAccount account);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.Basic.BasicAccountTransactionManager/<GetNonceAsync>d__8")]
public Task`1<HexBigInteger> GetNonceAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.Basic.BasicAccountTransactionManager/<SendTransactionAsync>d__9")]
public virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
    public virtual Task`1<string> SendTransactionAsync(string from, string to, HexBigInteger amount);
    public virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
}
public class Nethereum.Web3.Accounts.ExternalAccount : object {
    [CompilerGeneratedAttribute]
private IEthExternalSigner <ExternalSigner>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INonceService <NonceService>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountSigningService <AccountSigningService>k__BackingField;
    public IEthExternalSigner ExternalSigner { get; }
    public Nullable`1<BigInteger> ChainId { get; }
    public string Address { get; protected set; }
    public ITransactionManager TransactionManager { get; protected set; }
    public INonceService NonceService { get; public set; }
    public IAccountSigningService AccountSigningService { get; private set; }
    public ExternalAccount(IEthExternalSigner externalSigner, Nullable`1<BigInteger> chainId);
    public ExternalAccount(string address, IEthExternalSigner externalSigner, Nullable`1<BigInteger> chainId);
    [CompilerGeneratedAttribute]
public IEthExternalSigner get_ExternalSigner();
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_ChainId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address();
    [CompilerGeneratedAttribute]
protected void set_Address(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
protected void set_TransactionManager(ITransactionManager value);
    [CompilerGeneratedAttribute]
public sealed virtual INonceService get_NonceService();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NonceService(INonceService value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccountSigningService get_AccountSigningService();
    [CompilerGeneratedAttribute]
private void set_AccountSigningService(IAccountSigningService value);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.ExternalAccount/<InitialiseAsync>d__24")]
public Task InitialiseAsync();
    public void InitialiseDefaultTransactionManager(IClient client);
}
public class Nethereum.Web3.Accounts.ExternalAccountSignerTransactionManager : TransactionManagerBase {
    private LegacyTransactionSigner _legacyTransactionSigner;
    private Transaction1559Signer _transaction1559Signer;
    [CompilerGeneratedAttribute]
private BigInteger <DefaultGas>k__BackingField;
    public BigInteger DefaultGas { get; public set; }
    public ExternalAccountSignerTransactionManager(IClient rpcClient, ExternalAccount account, Nullable`1<BigInteger> chainId);
    [CompilerGeneratedAttribute]
public virtual BigInteger get_DefaultGas();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultGas(BigInteger value);
    public virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
    public virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.ExternalAccountSignerTransactionManager/<SignTransactionExternallyAsync>d__9")]
public Task`1<string> SignTransactionExternallyAsync(TransactionInput transaction);
    public string SignTransaction(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.ExternalAccountSignerTransactionManager/<SignTransactionRetrievingNextNonceAsync>d__11")]
protected Task`1<string> SignTransactionRetrievingNextNonceAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.ExternalAccountSignerTransactionManager/<GetNonceAsync>d__12")]
public Task`1<HexBigInteger> GetNonceAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.ExternalAccountSignerTransactionManager/<SignAndSendTransactionAsync>d__13")]
private Task`1<string> SignAndSendTransactionAsync(TransactionInput transaction);
}
[DefaultMemberAttribute("Item")]
public class Nethereum.Web3.Accounts.KeyPath : object {
    private UInt32[] _indexes;
    private string _path;
    public UInt32 Item { get; }
    public UInt32[] Indexes { get; }
    public KeyPath Parent { get; }
    public bool IsHardened { get; }
    public KeyPath(string path);
    public KeyPath(UInt32[] indexes);
    public UInt32 get_Item(int index);
    public UInt32[] get_Indexes();
    public KeyPath get_Parent();
    public bool get_IsHardened();
    public static KeyPath Parse(string path);
    private static UInt32 ParseCore(string i);
    public KeyPath Derive(int index, bool hardened);
    public KeyPath Derive(string path);
    public KeyPath Derive(UInt32 index);
    public KeyPath Derive(KeyPath derivation);
    public KeyPath Increment();
    public virtual bool Equals(object obj);
    public static bool op_Equality(KeyPath a, KeyPath b);
    public static bool op_Inequality(KeyPath a, KeyPath b);
    public virtual int GetHashCode();
    public virtual string ToString();
    private static string ToString(UInt32 i);
}
public class Nethereum.Web3.Accounts.Managed.ManagedAccount : object {
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INonceService <NonceService>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountSigningService <AccountSigningService>k__BackingField;
    public string Password { get; protected set; }
    public string Address { get; protected set; }
    public ITransactionManager TransactionManager { get; protected set; }
    public INonceService NonceService { get; public set; }
    public IAccountSigningService AccountSigningService { get; private set; }
    public ManagedAccount(string accountAddress, string password);
    public ManagedAccount(string accountAddress, string password, ManagedAccountTransactionManager transactionManager);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
protected void set_Password(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Address();
    [CompilerGeneratedAttribute]
protected void set_Address(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ITransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
protected void set_TransactionManager(ITransactionManager value);
    [CompilerGeneratedAttribute]
public sealed virtual INonceService get_NonceService();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NonceService(INonceService value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccountSigningService get_AccountSigningService();
    [CompilerGeneratedAttribute]
private void set_AccountSigningService(IAccountSigningService value);
    protected virtual void InitialiseDefaultTransactionManager();
}
public class Nethereum.Web3.Accounts.Managed.ManagedAccountTransactionManager : TransactionManagerBase {
    [CompilerGeneratedAttribute]
private BigInteger <DefaultGas>k__BackingField;
    public BigInteger DefaultGas { get; public set; }
    public ManagedAccountTransactionManager(IClient client, ManagedAccount account);
    public ManagedAccountTransactionManager(IClient client, string accountAddress, string password);
    public ManagedAccountTransactionManager(string accountAddress, string password);
    [CompilerGeneratedAttribute]
public virtual BigInteger get_DefaultGas();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultGas(BigInteger value);
    public void SetAccount(ManagedAccount account);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.Managed.ManagedAccountTransactionManager/<GetNonceAsync>d__8")]
public Task`1<HexBigInteger> GetNonceAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.Web3.Accounts.Managed.ManagedAccountTransactionManager/<SendTransactionAsync>d__9")]
public virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
    public virtual Task`1<string> SendTransactionAsync(string from, string to, HexBigInteger amount);
    public virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
}
