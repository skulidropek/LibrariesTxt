[ExtensionAttribute]
public static class Nethereum.Hex.HexConvertors.Extensions.HexBigIntegerConvertorExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<BigInteger> GetValue(HexBigInteger hexBigInteger);
    [ExtensionAttribute]
public static Byte[] ToByteArray(BigInteger value, bool littleEndian);
    [ExtensionAttribute]
public static Byte[] ConvertToByteArray(BigInteger value, bool littleEndian);
    [ExtensionAttribute]
public static string ToHex(BigInteger value, bool littleEndian, bool compact);
    [ExtensionAttribute]
public static BigInteger HexToBigInteger(string hex, bool isHexLittleEndian);
}
[ExtensionAttribute]
public static class Nethereum.Hex.HexConvertors.Extensions.HexByteConvertorExtensions : object {
    private static Byte[] Empty;
    private static HexByteConvertorExtensions();
    [ExtensionAttribute]
public static string ToHex(Byte[] value, bool prefix);
    [ExtensionAttribute]
public static bool HasHexPrefix(string value);
    [ExtensionAttribute]
public static bool IsHex(string value);
    [ExtensionAttribute]
public static string RemoveHexPrefix(string value);
    [ExtensionAttribute]
public static bool IsTheSameHex(string first, string second);
    [ExtensionAttribute]
public static string EnsureHexPrefix(string value);
    [ExtensionAttribute]
public static String[] EnsureHexPrefix(String[] values);
    [ExtensionAttribute]
public static string ToHexCompact(Byte[] value);
    [ExtensionAttribute]
public static string ToHexCompact(string value);
    private static Byte[] HexToByteArrayInternal(string value);
    [ExtensionAttribute]
public static Byte[] HexToByteArray(string value);
    private static byte FromCharacterToByte(char character, int index, int shift);
}
[ExtensionAttribute]
public static class Nethereum.Hex.HexConvertors.Extensions.HexStringUTF8ConvertorExtensions : object {
    [ExtensionAttribute]
public static string ToHexUTF8(string value);
    [ExtensionAttribute]
public static string HexToUTF8String(string hex);
}
public class Nethereum.Hex.HexConvertors.HexBigIntegerBigEndianConvertor : object {
    public sealed virtual string ConvertToHex(BigInteger newValue);
    public sealed virtual BigInteger ConvertFromHex(string hex);
}
public class Nethereum.Hex.HexConvertors.HexUTF8StringConvertor : object {
    public sealed virtual string ConvertToHex(string value);
    public sealed virtual string ConvertFromHex(string hex);
}
public interface Nethereum.Hex.HexConvertors.IHexConvertor`1 {
    public abstract virtual string ConvertToHex(T value);
    public abstract virtual T ConvertFromHex(string value);
}
[JsonConverterAttribute("Nethereum.Hex.HexTypes.HexRPCTypeJsonConverter`2<Nethereum.Hex.HexTypes.HexBigInteger,System.Numerics.BigInteger>")]
public class Nethereum.Hex.HexTypes.HexBigInteger : HexRPCType`1<BigInteger> {
    public HexBigInteger(string hex);
    public HexBigInteger(BigInteger value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Nethereum.Hex.HexTypes.HexBigIntegerNumberExtensions : object {
    [ExtensionAttribute]
public static HexBigInteger ToHexBigInteger(ulong val);
    [ExtensionAttribute]
public static HexBigInteger ToHexBigInteger(int val);
    [ExtensionAttribute]
public static HexBigInteger ToHexBigInteger(BigInteger val);
    [ExtensionAttribute]
public static ulong ToUlong(HexBigInteger val);
}
public class Nethereum.Hex.HexTypes.HexRPCType`1 : object {
    protected IHexConvertor`1<T> convertor;
    protected string hexValue;
    protected T value;
    protected object lockingObject;
    protected bool needsInitialisingValue;
    public string HexValue { get; public set; }
    public T Value { get; public set; }
    protected HexRPCType`1(IHexConvertor`1<T> convertor);
    public HexRPCType`1(IHexConvertor`1<T> convertor, string hexValue);
    public HexRPCType`1(T value, IHexConvertor`1<T> convertor);
    protected T GetValue();
    public string get_HexValue();
    public void set_HexValue(string value);
    public T get_Value();
    public void set_Value(T value);
    protected void SetHexAndFlagValueToBeInitialised(string newHexValue);
    protected void InitialiseValueFromHex(string newHexValue);
    protected void InitialiseFromValue(T newValue);
    protected string ConvertToHex(T newValue);
    protected T ConvertFromHex(string newHexValue);
    public Byte[] ToHexByteArray();
    public static Byte[] op_Implicit(HexRPCType`1<T> hexRpcType);
    public static T op_Implicit(HexRPCType`1<T> hexRpcType);
    public static bool op_Equality(HexRPCType`1<T> lhs, HexRPCType`1<T> rhs);
    public static bool op_Inequality(HexRPCType`1<T> lhs, HexRPCType`1<T> rhs);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(HexRPCType`1<T> other);
}
public class Nethereum.Hex.HexTypes.HexRPCTypeJsonConverter`2 : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Nethereum.Hex.HexTypes.HexTypeFactory : object {
    public static object CreateFromHex(string hex);
    public static object CreateFromObject(object value);
}
[JsonConverterAttribute("Nethereum.Hex.HexTypes.HexRPCTypeJsonConverter`2<Nethereum.Hex.HexTypes.HexUTF8String,System.String>")]
public class Nethereum.Hex.HexTypes.HexUTF8String : HexRPCType`1<string> {
    public HexUTF8String(string value);
    public static HexUTF8String CreateFromHex(string hex);
}
