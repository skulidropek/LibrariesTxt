public class Nethereum.JsonRpc.Client.BasicAuthenticationHeaderHelper : object {
    public static AuthenticationHeaderValue GetBasicAuthenticationHeaderValueFromUri(Uri uri);
}
public class Nethereum.JsonRpc.Client.RpcClient : ClientBase {
    private static int NUMBER_OF_SECONDS_TO_RECREATE_HTTP_CLIENT;
    private static int NUMBER_OF_MINUTES_TO_POOL_CONNECTIONS;
    private static int NUMBER_OF_MINUTES_TO_IDLE_CONNECTIONS;
    [CompilerGeneratedAttribute]
private static int <MaximumConnectionsPerServer>k__BackingField;
    private AuthenticationHeaderValue _authHeaderValue;
    private Uri _baseUrl;
    private HttpClientHandler _httpClientHandler;
    private ILogger _log;
    private JsonSerializerSettings _jsonSerializerSettings;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _firstHttpClient;
    private HttpClient _httpClient;
    private HttpClient _httpClient2;
    private bool _rotateHttpClients;
    private DateTime _httpClientLastCreatedAt;
    private object _lockObject;
    public static int MaximumConnectionsPerServer { get; public set; }
    public RpcClient(Uri baseUrl, AuthenticationHeaderValue authHeaderValue, JsonSerializerSettings jsonSerializerSettings, HttpClientHandler httpClientHandler, ILogger log);
    public RpcClient(Uri baseUrl, HttpClient httpClient, AuthenticationHeaderValue authHeaderValue, JsonSerializerSettings jsonSerializerSettings, ILogger log);
    private static RpcClient();
    [CompilerGeneratedAttribute]
public static int get_MaximumConnectionsPerServer();
    [CompilerGeneratedAttribute]
public static void set_MaximumConnectionsPerServer(int value);
    private static HttpMessageHandler GetDefaultHandler();
    [AsyncStateMachineAttribute("Nethereum.JsonRpc.Client.RpcClient/<SendAsync>d__21")]
protected virtual Task`1<RpcResponseMessage[]> SendAsync(RpcRequestMessage[] requests);
    [AsyncStateMachineAttribute("Nethereum.JsonRpc.Client.RpcClient/<SendAsync>d__22")]
protected virtual Task`1<RpcResponseMessage> SendAsync(RpcRequestMessage request, string route);
    private HttpClient GetOrCreateHttpClient();
    private HttpClient GetClient();
    private void CreateNewRotatedHttpClient();
    private HttpClient CreateNewHttpClient();
    private void InitialiseHttpClient(HttpClient httpClient);
}
public class Nethereum.JsonRpc.Client.SimpleRpcClient : ClientBase {
    private JsonSerializerSettings _jsonSerializerSettings;
    private HttpClient _httpClient;
    public SimpleRpcClient(Uri baseUrl, HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings);
    [AsyncStateMachineAttribute("Nethereum.JsonRpc.Client.SimpleRpcClient/<SendAsync>d__3")]
protected virtual Task`1<RpcResponseMessage> SendAsync(RpcRequestMessage request, string route);
    [AsyncStateMachineAttribute("Nethereum.JsonRpc.Client.SimpleRpcClient/<SendAsync>d__4")]
protected virtual Task`1<RpcResponseMessage[]> SendAsync(RpcRequestMessage[] requests);
}
