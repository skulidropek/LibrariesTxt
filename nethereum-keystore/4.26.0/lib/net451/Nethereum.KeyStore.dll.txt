public class Nethereum.KeyStore.Crypto.DecryptionException : Exception {
    internal DecryptionException(string msg);
}
public interface Nethereum.KeyStore.Crypto.IRandomBytesGenerator {
    public abstract virtual Byte[] GenerateRandomInitialisationVector();
    public abstract virtual Byte[] GenerateRandomSalt();
}
public class Nethereum.KeyStore.Crypto.KeyStoreCrypto : object {
    public Byte[] GenerateDerivedScryptKey(Byte[] password, Byte[] salt, int n, int r, int p, int dkLen, bool checkRandN);
    public Byte[] GenerateCipherKey(Byte[] derivedKey);
    public Byte[] CalculateKeccakHash(Byte[] value);
    public Byte[] CalculateSha256Hash(Byte[] value);
    public Byte[] HmacSha256(Byte[] data, Byte[] key);
    public Byte[] GenerateMac(Byte[] derivedKey, Byte[] cipherText);
    public Byte[] GeneratePbkdf2Sha256DerivedKey(string password, Byte[] salt, int count, int dklen);
    public Byte[] GenerateAesCtrCipher(Byte[] iv, Byte[] encryptKey, Byte[] input);
    public Byte[] GenerateAesCtrDeCipher(Byte[] iv, Byte[] encryptKey, Byte[] input);
    public Byte[] DecryptScrypt(string password, Byte[] mac, Byte[] iv, Byte[] cipherText, int n, int p, int r, Byte[] salt, int dklen);
    public Byte[] DecryptPbkdf2Sha256(string password, Byte[] mac, Byte[] iv, Byte[] cipherText, int c, Byte[] salt, int dklen);
    public Byte[] Decrypt(Byte[] mac, Byte[] iv, Byte[] cipherText, Byte[] derivedKey);
    private void ValidateMac(Byte[] mac, Byte[] cipherText, Byte[] derivedKey);
    public Byte[] GetPasswordAsBytes(string password);
}
public class Nethereum.KeyStore.Crypto.RandomBytesGenerator : object {
    private static SecureRandom Random;
    private static RandomBytesGenerator();
    public sealed virtual Byte[] GenerateRandomInitialisationVector();
    public sealed virtual Byte[] GenerateRandomSalt();
    public Byte[] GenerateRandomBytes(int size);
}
public class Nethereum.KeyStore.Crypto.SCrypt : object {
    internal static UInt32 R(UInt32 x, int y);
    internal static void SalsaCore(int rounds, UInt32[] input, UInt32[] x);
    internal static Byte[] UInt32_To_LE(UInt32 n);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32[] ns);
    internal static void UInt32_To_LE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32(Byte[] bs);
    internal static UInt32 LE_To_UInt32(Byte[] bs, int off);
    internal static void LE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static void LE_To_UInt32(Byte[] bs, int bOff, UInt32[] ns, int nOff, int count);
    internal static UInt32[] LE_To_UInt32(Byte[] bs, int off, int count);
    public static Byte[] Generate(Byte[] P, Byte[] S, int N, int r, int p, int dkLen);
    private static Byte[] MFcrypt(Byte[] P, Byte[] S, int N, int r, int p, int dkLen);
    private static Byte[] SingleIterationPBKDF2(Byte[] P, Byte[] S, int dkLen);
    private static void SMix(UInt32[] B, int BOff, int N, int r);
    private static void BlockMix(UInt32[] B, UInt32[] X1, UInt32[] X2, UInt32[] Y, int r);
    private static void Xor(UInt32[] a, UInt32[] b, int bOff, UInt32[] output);
    private static void Clear(Array array);
    private static void ClearAll(Array[] arrays);
    private static bool IsPowerOf2(int x);
}
public class Nethereum.KeyStore.Crypto.ScryptNet : object {
    private static Byte[] SingleIterationPBKDF2(Byte[] P, Byte[] S, int dkLen);
    public static Byte[] CryptoScrypt(Byte[] password, Byte[] salt, int N, int r, int p, int dkLen);
    private static void BulkCopy(Void* dst, Void* src, int len);
    private static void BulkXor(Void* dst, Void* src, int len);
    private static void Encode32(Byte* p, UInt32 x);
    private static UInt32 Decode32(Byte* p);
    private static void Salsa208(UInt32* B);
    private static UInt32 R(UInt32 a, int b);
    private static void BlockMix(UInt32* Bin, UInt32* Bout, UInt32* X, int r);
    private static long Integerify(UInt32* B, int r);
    private static void SMix(Byte* B, int r, int N, UInt32* V, UInt32* XY);
}
public interface Nethereum.KeyStore.IKeyStoreService`1 {
    public abstract virtual Byte[] DecryptKeyStore(string password, KeyStore`1<T> keyStore);
    public abstract virtual KeyStore`1<T> DeserializeKeyStoreFromJson(string json);
    public abstract virtual KeyStore`1<T> EncryptAndGenerateKeyStore(string password, Byte[] privateKey, string address);
    public abstract virtual string EncryptAndGenerateKeyStoreAsJson(string password, Byte[] privateKey, string addresss);
    public abstract virtual string GetCipherType();
    public abstract virtual string GetKdfType();
}
public class Nethereum.KeyStore.InvalidKdfException : Exception {
    public InvalidKdfException(string kdf);
}
public class Nethereum.KeyStore.JsonDeserialisation.CipherParamsDTO : object {
    [CompilerGeneratedAttribute]
private string <iv>k__BackingField;
    public string iv { get; public set; }
    [CompilerGeneratedAttribute]
public string get_iv();
    [CompilerGeneratedAttribute]
public void set_iv(string value);
}
public class Nethereum.KeyStore.JsonDeserialisation.CryptoInfoDTOBase : object {
    [CompilerGeneratedAttribute]
private string <cipher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <cipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherParamsDTO <cipherparams>k__BackingField;
    [CompilerGeneratedAttribute]
private string <kdf>k__BackingField;
    [CompilerGeneratedAttribute]
private string <mac>k__BackingField;
    public string cipher { get; public set; }
    public string cipherText { get; public set; }
    public CipherParamsDTO cipherparams { get; public set; }
    public string kdf { get; public set; }
    public string mac { get; public set; }
    [CompilerGeneratedAttribute]
public string get_cipher();
    [CompilerGeneratedAttribute]
public void set_cipher(string value);
    [CompilerGeneratedAttribute]
public string get_cipherText();
    [CompilerGeneratedAttribute]
public void set_cipherText(string value);
    [CompilerGeneratedAttribute]
public CipherParamsDTO get_cipherparams();
    [CompilerGeneratedAttribute]
public void set_cipherparams(CipherParamsDTO value);
    [CompilerGeneratedAttribute]
public string get_kdf();
    [CompilerGeneratedAttribute]
public void set_kdf(string value);
    [CompilerGeneratedAttribute]
public string get_mac();
    [CompilerGeneratedAttribute]
public void set_mac(string value);
}
public class Nethereum.KeyStore.JsonDeserialisation.CryptoInfoPbkdf2DTO : CryptoInfoDTOBase {
    [CompilerGeneratedAttribute]
private Pbkdf2ParamsDTO <kdfparams>k__BackingField;
    public Pbkdf2ParamsDTO kdfparams { get; public set; }
    [CompilerGeneratedAttribute]
public Pbkdf2ParamsDTO get_kdfparams();
    [CompilerGeneratedAttribute]
public void set_kdfparams(Pbkdf2ParamsDTO value);
}
public class Nethereum.KeyStore.JsonDeserialisation.CryptoInfoScryptDTO : CryptoInfoDTOBase {
    [CompilerGeneratedAttribute]
private ScryptParamsDTO <kdfparams>k__BackingField;
    public ScryptParamsDTO kdfparams { get; public set; }
    [CompilerGeneratedAttribute]
public ScryptParamsDTO get_kdfparams();
    [CompilerGeneratedAttribute]
public void set_kdfparams(ScryptParamsDTO value);
}
public class Nethereum.KeyStore.JsonDeserialisation.JsonKeyStorePbkdf2Serialiser : object {
    public static string SerialisePbkdf2(KeyStore`1<Pbkdf2Params> pbdk2KeyStore);
    public static KeyStore`1<Pbkdf2Params> DeserialisePbkdf2(string json);
    public static KeyStorePbkdf2DTO MapModelToDTO(KeyStore`1<Pbkdf2Params> pbdk2KeyStore);
    public static KeyStore`1<Pbkdf2Params> MapDTOToModel(KeyStorePbkdf2DTO dto);
}
public class Nethereum.KeyStore.JsonDeserialisation.JsonKeyStoreScryptSerialiser : object {
    public static string SerialiseScrypt(KeyStore`1<ScryptParams> scryptKeyStore);
    public static KeyStore`1<ScryptParams> DeserialiseScrypt(string json);
    public static KeyStoreScryptDTO MapModelToDTO(KeyStore`1<ScryptParams> scryptKeyStore);
    public static KeyStore`1<ScryptParams> MapDTOToModel(KeyStoreScryptDTO dto);
}
public class Nethereum.KeyStore.JsonDeserialisation.KdfParamsDTO : object {
    [CompilerGeneratedAttribute]
private int <dklen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <salt>k__BackingField;
    public int dklen { get; public set; }
    public string salt { get; public set; }
    [CompilerGeneratedAttribute]
public int get_dklen();
    [CompilerGeneratedAttribute]
public void set_dklen(int value);
    [CompilerGeneratedAttribute]
public string get_salt();
    [CompilerGeneratedAttribute]
public void set_salt(string value);
}
public class Nethereum.KeyStore.JsonDeserialisation.KeyStoreDTOBase : object {
    [CompilerGeneratedAttribute]
private string <id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <version>k__BackingField;
    public string id { get; public set; }
    public string address { get; public set; }
    public int version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_id();
    [CompilerGeneratedAttribute]
public void set_id(string value);
    [CompilerGeneratedAttribute]
public string get_address();
    [CompilerGeneratedAttribute]
public void set_address(string value);
    [CompilerGeneratedAttribute]
public int get_version();
    [CompilerGeneratedAttribute]
public void set_version(int value);
}
public class Nethereum.KeyStore.JsonDeserialisation.KeyStorePbkdf2DTO : KeyStoreDTOBase {
    [CompilerGeneratedAttribute]
private CryptoInfoPbkdf2DTO <crypto>k__BackingField;
    public CryptoInfoPbkdf2DTO crypto { get; public set; }
    [CompilerGeneratedAttribute]
public CryptoInfoPbkdf2DTO get_crypto();
    [CompilerGeneratedAttribute]
public void set_crypto(CryptoInfoPbkdf2DTO value);
}
public class Nethereum.KeyStore.JsonDeserialisation.KeyStoreScryptDTO : KeyStoreDTOBase {
    [CompilerGeneratedAttribute]
private CryptoInfoScryptDTO <crypto>k__BackingField;
    public CryptoInfoScryptDTO crypto { get; public set; }
    [CompilerGeneratedAttribute]
public CryptoInfoScryptDTO get_crypto();
    [CompilerGeneratedAttribute]
public void set_crypto(CryptoInfoScryptDTO value);
}
public class Nethereum.KeyStore.JsonDeserialisation.Pbkdf2ParamsDTO : KdfParamsDTO {
    [CompilerGeneratedAttribute]
private int <c>k__BackingField;
    [CompilerGeneratedAttribute]
private string <prf>k__BackingField;
    public int c { get; public set; }
    public string prf { get; public set; }
    [CompilerGeneratedAttribute]
public int get_c();
    [CompilerGeneratedAttribute]
public void set_c(int value);
    [CompilerGeneratedAttribute]
public string get_prf();
    [CompilerGeneratedAttribute]
public void set_prf(string value);
}
public class Nethereum.KeyStore.JsonDeserialisation.ScryptParamsDTO : KdfParamsDTO {
    [CompilerGeneratedAttribute]
private int <n>k__BackingField;
    [CompilerGeneratedAttribute]
private int <r>k__BackingField;
    [CompilerGeneratedAttribute]
private int <p>k__BackingField;
    public int n { get; public set; }
    public int r { get; public set; }
    public int p { get; public set; }
    [CompilerGeneratedAttribute]
public int get_n();
    [CompilerGeneratedAttribute]
public void set_n(int value);
    [CompilerGeneratedAttribute]
public int get_r();
    [CompilerGeneratedAttribute]
public void set_r(int value);
    [CompilerGeneratedAttribute]
public int get_p();
    [CompilerGeneratedAttribute]
public void set_p(int value);
}
public class Nethereum.KeyStore.KeyStoreKdfChecker : object {
    public KdfType GetKeyStoreKdfType(string json);
}
public class Nethereum.KeyStore.KeyStorePbkdf2Service : KeyStoreServiceBase`1<Pbkdf2Params> {
    public static string KdfType;
    public KeyStorePbkdf2Service(IRandomBytesGenerator randomBytesGenerator, KeyStoreCrypto keyStoreCrypto);
    public KeyStorePbkdf2Service(IRandomBytesGenerator randomBytesGenerator);
    protected virtual Byte[] GenerateDerivedKey(string pasword, Byte[] salt, Pbkdf2Params kdfParams);
    protected virtual Pbkdf2Params GetDefaultParams();
    public virtual KeyStore`1<Pbkdf2Params> DeserializeKeyStoreFromJson(string json);
    public virtual string SerializeKeyStoreToJson(KeyStore`1<Pbkdf2Params> keyStore);
    public virtual Byte[] DecryptKeyStore(string password, KeyStore`1<Pbkdf2Params> keyStore);
    public virtual string GetKdfType();
}
public class Nethereum.KeyStore.KeyStoreScryptService : KeyStoreServiceBase`1<ScryptParams> {
    public static string KdfType;
    public KeyStoreScryptService(IRandomBytesGenerator randomBytesGenerator, KeyStoreCrypto keyStoreCrypto);
    public KeyStoreScryptService(IRandomBytesGenerator randomBytesGenerator);
    protected virtual Byte[] GenerateDerivedKey(string password, Byte[] salt, ScryptParams kdfParams);
    protected virtual ScryptParams GetDefaultParams();
    public virtual KeyStore`1<ScryptParams> DeserializeKeyStoreFromJson(string json);
    public virtual string SerializeKeyStoreToJson(KeyStore`1<ScryptParams> keyStore);
    public virtual Byte[] DecryptKeyStore(string password, KeyStore`1<ScryptParams> keyStore);
    public virtual string GetKdfType();
}
public class Nethereum.KeyStore.KeyStoreService : object {
    private KeyStoreKdfChecker _keyStoreKdfChecker;
    private KeyStoreScryptService _keyStoreScryptService;
    private KeyStorePbkdf2Service _keyStorePbkdf2Service;
    public KeyStoreService(KeyStoreKdfChecker keyStoreKdfChecker, KeyStoreScryptService keyStoreScryptService, KeyStorePbkdf2Service keyStorePbkdf2Service);
    public string GetAddressFromKeyStore(string json);
    public string GenerateUTCFileName(string address);
    public Byte[] DecryptKeyStoreFromFile(string password, string filePath);
    public Byte[] DecryptKeyStoreFromJson(string password, string json);
    public string EncryptAndGenerateDefaultKeyStoreAsJson(string password, Byte[] key, string address);
}
public abstract class Nethereum.KeyStore.KeyStoreServiceBase`1 : object {
    public static int CurrentVersion;
    protected KeyStoreCrypto KeyStoreCrypto;
    protected IRandomBytesGenerator RandomBytesGenerator;
    protected KeyStoreServiceBase`1(IRandomBytesGenerator randomBytesGenerator, KeyStoreCrypto keyStoreCrypto);
    protected KeyStoreServiceBase`1(IRandomBytesGenerator randomBytesGenerator);
    public sealed virtual KeyStore`1<T> EncryptAndGenerateKeyStore(string password, Byte[] privateKey, string address);
    public sealed virtual string EncryptAndGenerateKeyStoreAsJson(string password, Byte[] privateKey, string addresss);
    public abstract virtual KeyStore`1<T> DeserializeKeyStoreFromJson(string json);
    public abstract virtual string SerializeKeyStoreToJson(KeyStore`1<T> keyStore);
    public abstract virtual Byte[] DecryptKeyStore(string password, KeyStore`1<T> keyStore);
    public abstract virtual string GetKdfType();
    public virtual string GetCipherType();
    public KeyStore`1<T> EncryptAndGenerateKeyStore(string password, Byte[] privateKey, string address, T kdfParams);
    public string EncryptAndGenerateKeyStoreAsJson(string password, Byte[] privateKey, string addresss, T kdfParams);
    public Byte[] DecryptKeyStoreFromJson(string password, string json);
    protected virtual Byte[] GenerateCipher(Byte[] privateKey, Byte[] iv, Byte[] cipherKey);
    protected abstract virtual Byte[] GenerateDerivedKey(string pasword, Byte[] salt, T kdfParams);
    protected abstract virtual T GetDefaultParams();
}
public class Nethereum.KeyStore.Model.CipherParams : object {
    [CompilerGeneratedAttribute]
private string <Iv>k__BackingField;
    [JsonPropertyAttribute("iv")]
public string Iv { get; public set; }
    public CipherParams(Byte[] iv);
    [CompilerGeneratedAttribute]
public string get_Iv();
    [CompilerGeneratedAttribute]
public void set_Iv(string value);
}
public class Nethereum.KeyStore.Model.CryptoInfo`1 : object {
    [CompilerGeneratedAttribute]
private string <Cipher>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private CipherParams <CipherParams>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kdf>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mac>k__BackingField;
    [CompilerGeneratedAttribute]
private TKdfParams <Kdfparams>k__BackingField;
    [JsonPropertyAttribute("cipher")]
public string Cipher { get; public set; }
    [JsonPropertyAttribute("ciphertext")]
public string CipherText { get; public set; }
    [JsonPropertyAttribute("cipherparams")]
public CipherParams CipherParams { get; public set; }
    [JsonPropertyAttribute("kdf")]
public string Kdf { get; public set; }
    [JsonPropertyAttribute("mac")]
public string Mac { get; public set; }
    [JsonPropertyAttribute("kdfparams")]
public TKdfParams Kdfparams { get; public set; }
    public CryptoInfo`1(string cipher, Byte[] cipherText, Byte[] iv, Byte[] mac, Byte[] salt, TKdfParams kdfParams, string kdfType);
    [CompilerGeneratedAttribute]
public string get_Cipher();
    [CompilerGeneratedAttribute]
public void set_Cipher(string value);
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
    [CompilerGeneratedAttribute]
public CipherParams get_CipherParams();
    [CompilerGeneratedAttribute]
public void set_CipherParams(CipherParams value);
    [CompilerGeneratedAttribute]
public string get_Kdf();
    [CompilerGeneratedAttribute]
public void set_Kdf(string value);
    [CompilerGeneratedAttribute]
public string get_Mac();
    [CompilerGeneratedAttribute]
public void set_Mac(string value);
    [CompilerGeneratedAttribute]
public TKdfParams get_Kdfparams();
    [CompilerGeneratedAttribute]
public void set_Kdfparams(TKdfParams value);
}
public class Nethereum.KeyStore.Model.KdfParams : object {
    [CompilerGeneratedAttribute]
private int <Dklen>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Salt>k__BackingField;
    [JsonPropertyAttribute("dklen")]
public int Dklen { get; public set; }
    [JsonPropertyAttribute("salt")]
public string Salt { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Dklen();
    [CompilerGeneratedAttribute]
public void set_Dklen(int value);
    [CompilerGeneratedAttribute]
public string get_Salt();
    [CompilerGeneratedAttribute]
public void set_Salt(string value);
}
public class Nethereum.KeyStore.Model.KeyStore`1 : object {
    [CompilerGeneratedAttribute]
private CryptoInfo`1<TKdfParams> <Crypto>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [JsonPropertyAttribute("crypto")]
public CryptoInfo`1<TKdfParams> Crypto { get; public set; }
    [JsonPropertyAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyAttribute("address")]
public string Address { get; public set; }
    [JsonPropertyAttribute("version")]
public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public CryptoInfo`1<TKdfParams> get_Crypto();
    [CompilerGeneratedAttribute]
public void set_Crypto(CryptoInfo`1<TKdfParams> value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
public class Nethereum.KeyStore.Model.Pbkdf2Params : KdfParams {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prf>k__BackingField;
    [JsonPropertyAttribute("c")]
public int Count { get; public set; }
    [JsonPropertyAttribute("prf")]
public string Prf { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public string get_Prf();
    [CompilerGeneratedAttribute]
public void set_Prf(string value);
}
public class Nethereum.KeyStore.Model.ScryptParams : KdfParams {
    [CompilerGeneratedAttribute]
private int <N>k__BackingField;
    [CompilerGeneratedAttribute]
private int <R>k__BackingField;
    [CompilerGeneratedAttribute]
private int <P>k__BackingField;
    [JsonPropertyAttribute("n")]
public int N { get; public set; }
    [JsonPropertyAttribute("r")]
public int R { get; public set; }
    [JsonPropertyAttribute("p")]
public int P { get; public set; }
    [CompilerGeneratedAttribute]
public int get_N();
    [CompilerGeneratedAttribute]
public void set_N(int value);
    [CompilerGeneratedAttribute]
public int get_R();
    [CompilerGeneratedAttribute]
public void set_R(int value);
    [CompilerGeneratedAttribute]
public int get_P();
    [CompilerGeneratedAttribute]
public void set_P(int value);
}
