public class Nethereum.Model.AccessListItem : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Byte[]> <StorageKeys>k__BackingField;
    public string Address { get; public set; }
    public List`1<Byte[]> StorageKeys { get; public set; }
    public AccessListItem(string address, List`1<Byte[]> storageKeys);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public List`1<Byte[]> get_StorageKeys();
    [CompilerGeneratedAttribute]
public void set_StorageKeys(List`1<Byte[]> value);
}
public class Nethereum.Model.AccessListRLPEncoderDecoder : object {
    public static Byte[] EncodeAccessList(List`1<AccessListItem> accessListItems);
    public static List`1<AccessListItem> DecodeAccessList(Byte[] accessListEncoded);
}
public class Nethereum.Model.Account : object {
    [CompilerGeneratedAttribute]
private BigInteger <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Balance>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <StateRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CodeHash>k__BackingField;
    public BigInteger Nonce { get; public set; }
    public BigInteger Balance { get; public set; }
    public Byte[] StateRoot { get; public set; }
    public Byte[] CodeHash { get; public set; }
    [CompilerGeneratedAttribute]
public BigInteger get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(BigInteger value);
    [CompilerGeneratedAttribute]
public BigInteger get_Balance();
    [CompilerGeneratedAttribute]
public void set_Balance(BigInteger value);
    [CompilerGeneratedAttribute]
public Byte[] get_StateRoot();
    [CompilerGeneratedAttribute]
public void set_StateRoot(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_CodeHash();
    [CompilerGeneratedAttribute]
public void set_CodeHash(Byte[] value);
}
public class Nethereum.Model.AccountEncoder : object {
    [CompilerGeneratedAttribute]
private static AccountEncoder <Current>k__BackingField;
    public static AccountEncoder Current { get; }
    private static AccountEncoder();
    [CompilerGeneratedAttribute]
public static AccountEncoder get_Current();
    public Byte[] Encode(Account account);
    public Account Decode(Byte[] rawdata);
}
public class Nethereum.Model.AccountStorage : object {
    public static Byte[] EncodeKeyForStorage(Byte[] key, Sha3KeccackHashProvider sha3Provider);
    public static Byte[] EncodeValueForStorage(Byte[] value);
}
public class Nethereum.Model.BlockHeader : object {
    [CompilerGeneratedAttribute]
private Byte[] <ParentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <UnclesHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Coinbase>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <StateRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <TransactionsHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ReceiptHash>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <LogsBloom>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <Difficulty>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <GasLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private long <GasUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <MixHash>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <BaseFee>k__BackingField;
    public Byte[] ParentHash { get; public set; }
    public Byte[] UnclesHash { get; public set; }
    public string Coinbase { get; public set; }
    public Byte[] StateRoot { get; public set; }
    public Byte[] TransactionsHash { get; public set; }
    public Byte[] ReceiptHash { get; public set; }
    public BigInteger BlockNumber { get; public set; }
    public Byte[] LogsBloom { get; public set; }
    public BigInteger Difficulty { get; public set; }
    public long Timestamp { get; public set; }
    public long GasLimit { get; public set; }
    public long GasUsed { get; public set; }
    public Byte[] MixHash { get; public set; }
    public Byte[] ExtraData { get; public set; }
    public Byte[] Nonce { get; public set; }
    public Nullable`1<BigInteger> BaseFee { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_ParentHash();
    [CompilerGeneratedAttribute]
public void set_ParentHash(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_UnclesHash();
    [CompilerGeneratedAttribute]
public void set_UnclesHash(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Coinbase();
    [CompilerGeneratedAttribute]
public void set_Coinbase(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_StateRoot();
    [CompilerGeneratedAttribute]
public void set_StateRoot(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_TransactionsHash();
    [CompilerGeneratedAttribute]
public void set_TransactionsHash(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ReceiptHash();
    [CompilerGeneratedAttribute]
public void set_ReceiptHash(Byte[] value);
    [CompilerGeneratedAttribute]
public BigInteger get_BlockNumber();
    [CompilerGeneratedAttribute]
public void set_BlockNumber(BigInteger value);
    [CompilerGeneratedAttribute]
public Byte[] get_LogsBloom();
    [CompilerGeneratedAttribute]
public void set_LogsBloom(Byte[] value);
    [CompilerGeneratedAttribute]
public BigInteger get_Difficulty();
    [CompilerGeneratedAttribute]
public void set_Difficulty(BigInteger value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public long get_GasLimit();
    [CompilerGeneratedAttribute]
public void set_GasLimit(long value);
    [CompilerGeneratedAttribute]
public long get_GasUsed();
    [CompilerGeneratedAttribute]
public void set_GasUsed(long value);
    [CompilerGeneratedAttribute]
public Byte[] get_MixHash();
    [CompilerGeneratedAttribute]
public void set_MixHash(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(Byte[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_BaseFee();
    [CompilerGeneratedAttribute]
public void set_BaseFee(Nullable`1<BigInteger> value);
}
public class Nethereum.Model.BlockHeaderEncoder : object {
    [CompilerGeneratedAttribute]
private static BlockHeaderEncoder <Current>k__BackingField;
    public static BlockHeaderEncoder Current { get; }
    private static BlockHeaderEncoder();
    [CompilerGeneratedAttribute]
public static BlockHeaderEncoder get_Current();
    public Byte[] EncodeCliqueSigHeaderAndHash(BlockHeader header, bool legacyMode);
    public Byte[] EncodeCliqueSigHeader(BlockHeader header, bool legacyMode);
    public Byte[] Encode(BlockHeader header, bool legacyMode);
    public BlockHeader Decode(Byte[] rawdata, bool legacyMode);
}
public class Nethereum.Model.DefaultValues : object {
    [CompilerGeneratedAttribute]
private static DefaultValues <Current>k__BackingField;
    public static Byte[] EMPTY_BYTE_ARRAY;
    public static Byte[] ZERO_BYTE_ARRAY;
    public static Byte[] EMPTY_DATA_HASH;
    public static Byte[] EMPTY_TRIE_HASH;
    public static DefaultValues Current { get; }
    private static DefaultValues();
    [CompilerGeneratedAttribute]
public static DefaultValues get_Current();
}
public class Nethereum.Model.IndexedSignedTransaction : object {
    [CompilerGeneratedAttribute]
private BigInteger <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private ISignedTransaction <SignedTransaction>k__BackingField;
    public BigInteger Index { get; public set; }
    public ISignedTransaction SignedTransaction { get; public set; }
    [CompilerGeneratedAttribute]
public BigInteger get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(BigInteger value);
    [CompilerGeneratedAttribute]
public ISignedTransaction get_SignedTransaction();
    [CompilerGeneratedAttribute]
public void set_SignedTransaction(ISignedTransaction value);
}
public interface Nethereum.Model.ISignature {
    public Byte[] R { get; }
    public Byte[] S { get; }
    public Byte[] V { get; public set; }
    public abstract virtual Byte[] get_R();
    public abstract virtual Byte[] get_S();
    public abstract virtual Byte[] get_V();
    public abstract virtual void set_V(Byte[] value);
}
public interface Nethereum.Model.ISignedTransaction {
    public TransactionType TransactionType { get; }
    public ISignature Signature { get; }
    public Byte[] RawHash { get; }
    public Byte[] Hash { get; }
    public abstract virtual TransactionType get_TransactionType();
    public abstract virtual ISignature get_Signature();
    public abstract virtual Byte[] get_RawHash();
    public abstract virtual Byte[] get_Hash();
    public abstract virtual Byte[] GetRLPEncoded();
    public abstract virtual Byte[] GetRLPEncodedRaw();
    public abstract virtual void SetSignature(ISignature signature);
}
public interface Nethereum.Model.ITransactionTypeDecoder {
    public abstract virtual SignedTypeTransaction DecodeAsGeneric(Byte[] rlpData);
}
public interface Nethereum.Model.ITransactionVerificationAndRecovery {
    public abstract virtual Byte[] GetPublicKey(ISignedTransaction transaction);
    public abstract virtual Byte[] GetPublicKey(string rlp);
    public abstract virtual string GetSenderAddress(ISignedTransaction transaction);
    public abstract virtual string GetSenderAddress(string rlp);
    public abstract virtual bool VerifyTransaction(ISignedTransaction transaction);
    public abstract virtual bool VerifyTransaction(string rlp);
}
public class Nethereum.Model.LegacyTransaction : SignedLegacyTransaction {
    public TransactionType TransactionType { get; }
    public LegacyTransaction(Byte[] rawData);
    public LegacyTransaction(RLPSignedDataHashBuilder rlpSigner);
    public LegacyTransaction(Byte[] nonce, Byte[] gasPrice, Byte[] gasLimit, Byte[] receiveAddress, Byte[] value, Byte[] data);
    public LegacyTransaction(Byte[] nonce, Byte[] gasPrice, Byte[] gasLimit, Byte[] receiveAddress, Byte[] value, Byte[] data, Byte[] r, Byte[] s, byte v);
    public LegacyTransaction(string to, BigInteger amount, BigInteger nonce);
    public LegacyTransaction(string to, BigInteger amount, BigInteger nonce, string data);
    public LegacyTransaction(string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public LegacyTransaction(string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public virtual TransactionType get_TransactionType();
    private static void ValidateValidV(RLPSignedDataHashBuilder rlpSigner);
    public string ToJsonHex();
    private Byte[][] GetElementsInOrder(Byte[] nonce, Byte[] gasPrice, Byte[] gasLimit, Byte[] receiveAddress, Byte[] value, Byte[] data);
}
public class Nethereum.Model.LegacyTransactionChainId : SignedLegacyTransaction {
    private static Byte[] RHASH_DEFAULT;
    private static Byte[] SHASH_DEFAULT;
    public TransactionType TransactionType { get; }
    public Byte[] ChainId { get; }
    public Byte[] RHash { get; }
    public Byte[] SHash { get; }
    public LegacyTransactionChainId(Byte[] rawData, BigInteger chainId);
    public LegacyTransactionChainId(RLPSignedDataHashBuilder rlpSigner);
    public LegacyTransactionChainId(Byte[] rawData);
    public LegacyTransactionChainId(Byte[] nonce, Byte[] gasPrice, Byte[] gasLimit, Byte[] receiveAddress, Byte[] value, Byte[] data, Byte[] chainId);
    public LegacyTransactionChainId(Byte[] nonce, Byte[] gasPrice, Byte[] gasLimit, Byte[] receiveAddress, Byte[] value, Byte[] data, Byte[] chainId, Byte[] r, Byte[] s, Byte[] v);
    public LegacyTransactionChainId(string to, BigInteger amount, BigInteger nonce, BigInteger chainId);
    public LegacyTransactionChainId(string to, BigInteger amount, BigInteger nonce, string data, BigInteger chainId);
    public LegacyTransactionChainId(string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, BigInteger chainId);
    public LegacyTransactionChainId(string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data, BigInteger chainId);
    public LegacyTransactionChainId(string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data, BigInteger chainId, Byte[] r, Byte[] s, Byte[] v);
    private static LegacyTransactionChainId();
    public virtual TransactionType get_TransactionType();
    private static void ValidateValidV(RLPSignedDataHashBuilder rlpSigner);
    private void GetChainIdFromVAndAppendDataForHashRecovery();
    private void AppendDataForHashRecovery(BigInteger chainId);
    private BigInteger GetChainFromVChain();
    public BigInteger GetChainIdAsBigInteger();
    public Byte[] get_ChainId();
    public Byte[] get_RHash();
    public Byte[] get_SHash();
    public string ToJsonHex();
    private Byte[][] GetElementsInOrder(Byte[] nonce, Byte[] gasPrice, Byte[] gasLimit, Byte[] receiveAddress, Byte[] value, Byte[] data, Byte[] chainId);
}
public class Nethereum.Model.Log : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Byte[]> <Topics>k__BackingField;
    public string Address { get; public set; }
    public Byte[] Data { get; public set; }
    public List`1<Byte[]> Topics { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public List`1<Byte[]> get_Topics();
    [CompilerGeneratedAttribute]
public void set_Topics(List`1<Byte[]> value);
    public static Log Create(Byte[] data, string address, Byte[][] topics);
    public static Log Create(string address, Byte[][] topics);
}
public class Nethereum.Model.LogBloomFilter : object {
    private static int LEAST_SIGNIFICANT_BYTE;
    private static int LEAST_SIGNIFICANT_THREE_BITS;
    private Byte[] _data;
    public Byte[] Data { get; }
    public Byte[] get_Data();
    private void SetBits(Byte[] hashValue);
    private void SetBit(int index);
    public void AddLog(Log log);
}
public class Nethereum.Model.RLPSignedDataDecoder : object {
    public static SignedData DecodeSigned(Byte[] rawdata, int numberOfEncodingElements);
    public static Signature DecodeSignature(RLPCollection decodedElements, int numberOfEncodingElements);
}
public class Nethereum.Model.RLPSignedDataEncoder : object {
    public static Byte[] EncodeSigned(SignedData signedData, int numberOfElements);
    public static void AddSignatureToEncodedData(ISignature signature, List`1<Byte[]> encodedData);
}
public class Nethereum.Model.RLPSignedDataHashBuilder : object {
    private int numberOfEncodingElements;
    private Byte[] rlpSignedEncoded;
    private Byte[] rlpRawWithNoSignature;
    [CompilerGeneratedAttribute]
private ISignature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[][] <Data>k__BackingField;
    public ISignature Signature { get; private set; }
    public Byte[] RawHash { get; }
    public Byte[] Hash { get; }
    public Byte[][] Data { get; private set; }
    public RLPSignedDataHashBuilder(Byte[] rawData, int numberOfEncodingElements);
    public RLPSignedDataHashBuilder(Byte[][] data);
    public RLPSignedDataHashBuilder(Byte[][] data, int numberOfEncodingElements);
    public RLPSignedDataHashBuilder(Byte[][] data, Byte[] r, Byte[] s, byte v);
    public RLPSignedDataHashBuilder(Byte[][] data, Byte[] r, Byte[] s, byte v, int numberOfEncodingElements);
    public RLPSignedDataHashBuilder(Byte[][] data, Byte[] r, Byte[] s, Byte[] v);
    public RLPSignedDataHashBuilder(Byte[][] data, Byte[] r, Byte[] s, Byte[] v, int numberOfEncodingElements);
    [CompilerGeneratedAttribute]
public ISignature get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(ISignature value);
    public Byte[] get_RawHash();
    public Byte[] get_Hash();
    [CompilerGeneratedAttribute]
public Byte[][] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[][] value);
    public Byte[] GetRLPEncoded();
    public Byte[] GetRLPEncodedRaw();
    public void AppendData(Byte[][] extraData);
    public void SetSignature(ISignature signature);
    public bool IsVSignatureForChain();
    private void Decode();
}
public class Nethereum.Model.Signature : object {
    [CompilerGeneratedAttribute]
private Byte[] <R>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <S>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <V>k__BackingField;
    public Byte[] R { get; public set; }
    public Byte[] S { get; public set; }
    public Byte[] V { get; public set; }
    public Signature(Byte[] r, Byte[] s, Byte[] v);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_R();
    [CompilerGeneratedAttribute]
public void set_R(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_S();
    [CompilerGeneratedAttribute]
public void set_S(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_V();
    [CompilerGeneratedAttribute]
public sealed virtual void set_V(Byte[] value);
}
[ExtensionAttribute]
public static class Nethereum.Model.SignatureExtensions : object {
    [ExtensionAttribute]
public static bool IsVSignedForChain(ISignature signature);
    [ExtensionAttribute]
public static bool IsVSignedForLegacy(ISignature signature);
    [ExtensionAttribute]
public static bool IsVSignedForYParity(ISignature signature);
    [ExtensionAttribute]
public static Byte[] To64ByteArray(ISignature signature);
    [ExtensionAttribute]
public static string CreateStringSignature(ISignature signature);
}
public class Nethereum.Model.SignedData : object {
    [CompilerGeneratedAttribute]
private Byte[][] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <V>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <R>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <S>k__BackingField;
    public Byte[][] Data { get; public set; }
    public Byte[] V { get; public set; }
    public Byte[] R { get; public set; }
    public Byte[] S { get; public set; }
    public SignedData(Byte[][] data);
    public SignedData(Byte[][] data, ISignature signature);
    [CompilerGeneratedAttribute]
public Byte[][] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[][] value);
    [CompilerGeneratedAttribute]
public Byte[] get_V();
    [CompilerGeneratedAttribute]
public void set_V(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_R();
    [CompilerGeneratedAttribute]
public void set_R(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_S();
    [CompilerGeneratedAttribute]
public void set_S(Byte[] value);
    public bool IsSigned();
    public ISignature GetSignature();
}
public abstract class Nethereum.Model.SignedLegacyTransaction : SignedLegacyTransactionBase {
    public static int NUMBER_ENCODING_ELEMENTS;
    public static BigInteger DEFAULT_GAS_PRICE;
    public static BigInteger DEFAULT_GAS_LIMIT;
    public Byte[] Nonce { get; }
    public Byte[] Value { get; }
    public Byte[] ReceiveAddress { get; }
    public Byte[] GasPrice { get; }
    public Byte[] GasLimit { get; }
    public Byte[] Data { get; }
    private static SignedLegacyTransaction();
    public static RLPSignedDataHashBuilder CreateDefaultRLPSigner(Byte[] rawData);
    public Byte[] get_Nonce();
    public Byte[] get_Value();
    public Byte[] get_ReceiveAddress();
    public Byte[] get_GasPrice();
    public Byte[] get_GasLimit();
    public Byte[] get_Data();
}
public abstract class Nethereum.Model.SignedLegacyTransactionBase : SignedTransaction {
    [CompilerGeneratedAttribute]
private RLPSignedDataHashBuilder <RlpSignerEncoder>k__BackingField;
    protected RLPSignedDataHashBuilder RlpSignerEncoder { get; protected set; }
    public Byte[] RawHash { get; }
    public ISignature Signature { get; }
    [CompilerGeneratedAttribute]
protected RLPSignedDataHashBuilder get_RlpSignerEncoder();
    [CompilerGeneratedAttribute]
protected void set_RlpSignerEncoder(RLPSignedDataHashBuilder value);
    public virtual Byte[] get_RawHash();
    public virtual ISignature get_Signature();
    public virtual Byte[] GetRLPEncoded();
    public virtual Byte[] GetRLPEncodedRaw();
    protected static string ToHex(Byte[] x);
    public virtual void SetSignature(ISignature signature);
}
public abstract class Nethereum.Model.SignedTransaction : object {
    [CompilerGeneratedAttribute]
private ISignature <Signature>k__BackingField;
    public TransactionType TransactionType { get; }
    public Byte[] RawHash { get; }
    public Byte[] Hash { get; }
    public ISignature Signature { get; protected set; }
    public abstract virtual TransactionType get_TransactionType();
    public virtual Byte[] get_RawHash();
    public virtual Byte[] get_Hash();
    public abstract virtual Byte[] GetRLPEncoded();
    public abstract virtual Byte[] GetRLPEncodedRaw();
    [CompilerGeneratedAttribute]
public virtual ISignature get_Signature();
    [CompilerGeneratedAttribute]
protected virtual void set_Signature(ISignature value);
    public abstract virtual void SetSignature(ISignature signature);
}
public abstract class Nethereum.Model.SignedTypeTransaction : SignedTransaction {
    public virtual void SetSignature(ISignature signature);
}
public class Nethereum.Model.Transaction1559 : SignedTypeTransaction {
    [CompilerGeneratedAttribute]
private BigInteger <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <MaxPriorityFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <MaxFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <GasLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiverAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <Amount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AccessListItem> <AccessList>k__BackingField;
    public BigInteger ChainId { get; private set; }
    public Nullable`1<BigInteger> Nonce { get; private set; }
    public Nullable`1<BigInteger> MaxPriorityFeePerGas { get; private set; }
    public Nullable`1<BigInteger> MaxFeePerGas { get; private set; }
    public Nullable`1<BigInteger> GasLimit { get; private set; }
    public string ReceiverAddress { get; private set; }
    public Nullable`1<BigInteger> Amount { get; private set; }
    public string Data { get; private set; }
    public List`1<AccessListItem> AccessList { get; private set; }
    public TransactionType TransactionType { get; }
    public Transaction1559(BigInteger chainId, Nullable`1<BigInteger> nonce, Nullable`1<BigInteger> maxPriorityFeePerGas, Nullable`1<BigInteger> maxFeePerGas, Nullable`1<BigInteger> gasLimit, string receiverAddress, Nullable`1<BigInteger> amount, string data, List`1<AccessListItem> accessList);
    public Transaction1559(BigInteger chainId, BigInteger nonce, BigInteger maxPriorityFeePerGas, BigInteger maxFeePerGas, BigInteger gasLimit, string receiverAddress, BigInteger amount, string data, List`1<AccessListItem> accessList, Signature signature);
    [CompilerGeneratedAttribute]
public BigInteger get_ChainId();
    [CompilerGeneratedAttribute]
private void set_ChainId(BigInteger value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_Nonce();
    [CompilerGeneratedAttribute]
private void set_Nonce(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_MaxPriorityFeePerGas();
    [CompilerGeneratedAttribute]
private void set_MaxPriorityFeePerGas(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_MaxFeePerGas();
    [CompilerGeneratedAttribute]
private void set_MaxFeePerGas(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_GasLimit();
    [CompilerGeneratedAttribute]
private void set_GasLimit(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public string get_ReceiverAddress();
    [CompilerGeneratedAttribute]
private void set_ReceiverAddress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_Amount();
    [CompilerGeneratedAttribute]
private void set_Amount(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    [CompilerGeneratedAttribute]
public List`1<AccessListItem> get_AccessList();
    [CompilerGeneratedAttribute]
private void set_AccessList(List`1<AccessListItem> value);
    public virtual TransactionType get_TransactionType();
    public virtual Byte[] GetRLPEncoded();
    public virtual Byte[] GetRLPEncodedRaw();
}
public class Nethereum.Model.Transaction1559Encoder : TransactionTypeEncoder`1<Transaction1559> {
    [CompilerGeneratedAttribute]
private static Transaction1559Encoder <Current>k__BackingField;
    public byte Type;
    public static Transaction1559Encoder Current { get; }
    private static Transaction1559Encoder();
    [CompilerGeneratedAttribute]
public static Transaction1559Encoder get_Current();
    public List`1<Byte[]> GetEncodedElements(Transaction1559 transaction);
    public virtual Byte[] EncodeRaw(Transaction1559 transaction);
    public virtual Byte[] Encode(Transaction1559 transaction);
    public virtual Transaction1559 Decode(Byte[] rplData);
}
public class Nethereum.Model.Transaction2930 : SignedTypeTransaction {
    [CompilerGeneratedAttribute]
private BigInteger <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <GasPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <GasLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiverAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <Amount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AccessListItem> <AccessList>k__BackingField;
    public BigInteger ChainId { get; private set; }
    public Nullable`1<BigInteger> Nonce { get; private set; }
    public Nullable`1<BigInteger> GasPrice { get; private set; }
    public Nullable`1<BigInteger> GasLimit { get; private set; }
    public string ReceiverAddress { get; private set; }
    public Nullable`1<BigInteger> Amount { get; private set; }
    public string Data { get; private set; }
    public List`1<AccessListItem> AccessList { get; private set; }
    public TransactionType TransactionType { get; }
    public Transaction2930(BigInteger chainId, Nullable`1<BigInteger> nonce, Nullable`1<BigInteger> gasPrice, Nullable`1<BigInteger> gasLimit, string receiverAddress, Nullable`1<BigInteger> amount, string data, List`1<AccessListItem> accessList);
    public Transaction2930(BigInteger chainId, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string receiverAddress, BigInteger amount, string data, List`1<AccessListItem> accessList, Signature signature);
    [CompilerGeneratedAttribute]
public BigInteger get_ChainId();
    [CompilerGeneratedAttribute]
private void set_ChainId(BigInteger value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_Nonce();
    [CompilerGeneratedAttribute]
private void set_Nonce(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_GasPrice();
    [CompilerGeneratedAttribute]
private void set_GasPrice(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_GasLimit();
    [CompilerGeneratedAttribute]
private void set_GasLimit(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public string get_ReceiverAddress();
    [CompilerGeneratedAttribute]
private void set_ReceiverAddress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_Amount();
    [CompilerGeneratedAttribute]
private void set_Amount(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    [CompilerGeneratedAttribute]
public List`1<AccessListItem> get_AccessList();
    [CompilerGeneratedAttribute]
private void set_AccessList(List`1<AccessListItem> value);
    public virtual TransactionType get_TransactionType();
    public virtual Byte[] GetRLPEncoded();
    public virtual Byte[] GetRLPEncodedRaw();
}
public class Nethereum.Model.Transaction2930Encoder : TransactionTypeEncoder`1<Transaction2930> {
    [CompilerGeneratedAttribute]
private static Transaction2930Encoder <Current>k__BackingField;
    public byte Type;
    public static Transaction2930Encoder Current { get; }
    private static Transaction2930Encoder();
    [CompilerGeneratedAttribute]
public static Transaction2930Encoder get_Current();
    public List`1<Byte[]> GetEncodedElements(Transaction2930 transaction);
    public virtual Byte[] EncodeRaw(Transaction2930 transaction);
    public virtual Byte[] Encode(Transaction2930 transaction);
    public virtual Transaction2930 Decode(Byte[] rplData);
}
[ExtensionAttribute]
public static class Nethereum.Model.TransactionFactory : object {
    public static ISignedTransaction CreateTransaction(string rlpHex);
    [ExtensionAttribute]
public static bool IsTypeTransaction(Byte[] bytes);
    public static ITransactionTypeDecoder GetTransactionTypeDecoder(TransactionType transactionType);
    public static ISignedTransaction CreateTransaction(Byte[] rlp);
    public static ISignedTransaction CreateLegacyTransaction(string to, BigInteger gas, BigInteger gasPrice, BigInteger amount, string data, BigInteger nonce, string r, string s, string v);
    public static ISignedTransaction Create1559Transaction(Nullable`1<BigInteger> chainId, Nullable`1<BigInteger> nonce, Nullable`1<BigInteger> maxPriorityFeePerGas, Nullable`1<BigInteger> maxFeePerGas, Nullable`1<BigInteger> gasLimit, string to, Nullable`1<BigInteger> amount, string data, List`1<AccessListItem> accessList, string r, string s, string v);
    public static ISignedTransaction Create2930Transaction(Nullable`1<BigInteger> chainId, Nullable`1<BigInteger> nonce, Nullable`1<BigInteger> gasPrice, Nullable`1<BigInteger> gasLimit, string to, Nullable`1<BigInteger> amount, string data, List`1<AccessListItem> accessList, string r, string s, string v);
    public static ISignedTransaction CreateTransaction(Nullable`1<BigInteger> chainId, Nullable`1<byte> transactionType, Nullable`1<BigInteger> nonce, Nullable`1<BigInteger> maxPriorityFeePerGas, Nullable`1<BigInteger> maxFeePerGas, Nullable`1<BigInteger> gasPrice, Nullable`1<BigInteger> gasLimit, string to, Nullable`1<BigInteger> amount, string data, List`1<AccessListItem> accessList, string r, string s, string v);
}
public enum Nethereum.Model.TransactionType : Enum {
    public int value__;
    public static TransactionType LegacyTransaction;
    public static TransactionType LegacyChainTransaction;
    public static TransactionType LegacyEIP2930;
    public static TransactionType EIP1559;
}
public abstract class Nethereum.Model.TransactionTypeEncoder`1 : object {
    public static Byte[] AddTypeToEncodedBytes(Byte[] encodedBytes, byte type);
    public Byte[] GetBigIntegerForEncoding(Nullable`1<BigInteger> value);
    public sealed virtual SignedTypeTransaction DecodeAsGeneric(Byte[] rlpData);
    public abstract virtual T Decode(Byte[] rplData);
    public abstract virtual Byte[] Encode(T transaction);
    public abstract virtual Byte[] EncodeRaw(T transaction);
}
[ExtensionAttribute]
public static class Nethereum.Model.TransactionTypeExtensions : object {
    [ExtensionAttribute]
public static byte AsByte(TransactionType transactionType);
    [ExtensionAttribute]
public static TransactionType ToTypedTransaction(Nullable`1<byte> value);
    [ExtensionAttribute]
public static bool IsTypedTransaction(Nullable`1<byte> value);
}
public static class Nethereum.Model.VRecoveryAndChainCalculations : object {
    public static int GetRecIdFromV(Byte[] v);
    public static int GetRecIdFromV(byte v);
    public static int GetRecIdFromVChain(BigInteger vChain, BigInteger chainId);
    public static BigInteger GetChainFromVChain(BigInteger vChain);
    public static int GetRecIdFromVChain(Byte[] vChain, BigInteger chainId);
    public static BigInteger CalculateV(BigInteger chainId, int recId);
}
public enum Nethereum.Signer.Chain : Enum {
    public int value__;
    public static Chain MainNet;
    public static Chain Morden;
    public static Chain Ropsten;
    public static Chain Rinkeby;
    public static Chain Goerli;
    public static Chain RootstockMainNet;
    public static Chain RootstockTestNet;
    public static Chain Kovan;
    public static Chain ClassicMainNet;
    public static Chain ClassicTestNet;
    public static Chain Private;
    public static Chain Sepolia;
    public static Chain Optimism;
    public static Chain Ubiq;
    public static Chain Songbird;
    public static Chain Elastos;
    public static Chain Kardiachain;
    public static Chain Cronos;
    public static Chain Rsk;
    public static Chain Telos;
    public static Chain Xdc;
    public static Chain Csc;
    public static Chain Zyx;
    public static Chain Binance;
    public static Chain Syscoin;
    public static Chain Gochain;
    public static Chain Okexchain;
    public static Chain Hoo;
    public static Chain Meter;
    public static Chain NovaNetwork;
    public static Chain Viction;
    public static Chain Xdai;
    public static Chain Velas;
    public static Chain Thundercore;
    public static Chain Fuse;
    public static Chain Heco;
    public static Chain Polygon;
    public static Chain ShimmerEvm;
    public static Chain Manta;
    public static Chain Xdaiarb;
    public static Chain OpBnb;
    public static Chain Energyweb;
    public static Chain Oasys;
    public static Chain Fantom;
    public static Chain Hpb;
    public static Chain Boba;
    public static Chain Omax;
    public static Chain Filecoin;
    public static Chain Kucoin;
    public static Chain Era;
    public static Chain Shiden;
    public static Chain Theta;
    public static Chain Pulse;
    public static Chain Sx;
    public static Chain Candle;
    public static Chain Rollux;
    public static Chain Astar;
    public static Chain Callisto;
    public static Chain Wanchain;
    public static Chain Conflux;
    public static Chain Metis;
    public static Chain PolygonZkevm;
    public static Chain Core;
    public static Chain Ultron;
    public static Chain Step;
    public static Chain Moonbeam;
    public static Chain Moonriver;
    public static Chain LivingAssetsMainnet;
    public static Chain Tenet;
    public static Chain Onus;
    public static Chain Dogechain;
    public static Chain Kava;
    public static Chain Soma;
    public static Chain Beam;
    public static Chain Iotex;
    public static Chain Mantle;
    public static Chain Xlc;
    public static Chain Nahmii;
    public static Chain Tombchain;
    public static Chain Canto;
    public static Chain Klaytn;
    public static Chain Base;
    public static Chain Jbc;
    public static Chain Evmos;
    public static Chain Carbon;
    public static Chain Smartbch;
    public static Chain Loop;
    public static Chain EosEvm;
    public static Chain Bitgert;
    public static Chain Fusion;
    public static Chain Zilliqa;
    public static Chain Arbitrum;
    public static Chain ArbitrumNova;
    public static Chain Celo;
    public static Chain Oasis;
    public static Chain Avalanche;
    public static Chain Rei;
    public static Chain Reichain;
    public static Chain Linea;
    public static Chain Godwoken;
    public static Chain Polis;
    public static Chain Kekchain;
    public static Chain Vision;
    public static Chain Neon;
    public static Chain Aurora;
    public static Chain Harmony;
}
