[ExtensionAttribute]
public static class Nethereum.RLP.ConvertorForRLPEncodingExtensions : object {
    [ExtensionAttribute]
public static BigInteger ToBigIntegerFromRLPDecoded(Byte[] bytes);
    [ExtensionAttribute]
public static Byte[] ToBytesForRLPEncoding(BigInteger bigInteger);
    [ExtensionAttribute]
public static Byte[] ToBytesForRLPEncoding(int number);
    [ExtensionAttribute]
public static Byte[] ToBytesForRLPEncoding(long number);
    [ExtensionAttribute]
public static Byte[] ToBytesForRLPEncoding(string str);
    [ExtensionAttribute]
public static Byte[][] ToBytesForRLPEncoding(String[] strings);
    [ExtensionAttribute]
public static int ToIntFromRLPDecoded(Byte[] bytes);
    [ExtensionAttribute]
public static long ToLongFromRLPDecoded(Byte[] bytes);
    [ExtensionAttribute]
public static string ToStringFromRLPDecoded(Byte[] bytes);
    public static Byte[] ToBytesFromNumber(Byte[] bytes);
    [ExtensionAttribute]
public static Byte[] TrimZeroBytes(Byte[] bytes);
}
public interface Nethereum.RLP.IRLPElement {
    public Byte[] RLPData { get; }
    public abstract virtual Byte[] get_RLPData();
}
public class Nethereum.RLP.RLP : object {
    private static int SIZE_THRESHOLD;
    private static byte OFFSET_SHORT_ITEM;
    private static byte OFFSET_LONG_ITEM;
    public static byte OFFSET_SHORT_LIST;
    private static byte OFFSET_LONG_LIST;
    public static Byte[] EMPTY_BYTE_ARRAY;
    public static Byte[] ZERO_BYTE_ARRAY;
    private static RLP();
    public static int ByteArrayToInt(Byte[] bytes);
    public static IRLPElement Decode(Byte[] msgData);
    public static IRLPElement DecodeCollection(Byte[] msgData);
    public static void Decode(Byte[] msgData, int level, int startPosition, int endPosition, int levelToIndex, RLPCollection rlpCollection);
    private static bool IsListBiggerThan55Bytes(Byte[] msgData, int currentPosition);
    private static bool IsListLessThan55Bytes(Byte[] msgData, int currentPosition);
    private static bool IsItemBiggerThan55Bytes(Byte[] msgData, int currentPosition);
    private static bool IsItemLessThan55Bytes(Byte[] msgData, int currentPosition);
    private static bool IsNullItem(Byte[] msgData, int currentPosition);
    private static bool IsSigleByteItem(Byte[] msgData, int currentPosition);
    private static int ProcessSingleByteItem(Byte[] msgData, RLPCollection rlpCollection, int currentPosition);
    private static int ProcessNullItem(RLPCollection rlpCollection, int currentPosition);
    private static int ProcessItemLessThan55Bytes(Byte[] msgData, RLPCollection rlpCollection, int currentPosition);
    private static int ProcessItemBiggerThan55Bytes(Byte[] msgData, RLPCollection rlpCollection, int currentPosition);
    private static int ProcessListLessThan55Bytes(Byte[] msgData, int level, int levelToIndex, RLPCollection rlpCollection, int currentPosition);
    private static int ProcessListBiggerThan55Bytes(Byte[] msgData, int level, int levelToIndex, RLPCollection rlpCollection, int currentPosition);
    public static IRLPElement DecodeFirstElement(Byte[] msgData, int startPos);
    public static Byte[] EncodeByte(byte singleByte);
    public static Byte[] EncodeElement(Byte[] srcData);
    public static Byte[] EncodeDataItemsAsElementOrListAndCombineAsList(Byte[][] dataItems, Int32[] indexOfListDataItems);
    public static Byte[] EncodeList(Byte[][] items);
    public static bool IsNullOrZeroArray(Byte[] array);
    public static bool IsSingleZero(Byte[] array);
    private static int CalculateLength(int lengthOfLength, Byte[] msgData, int pos);
}
public class Nethereum.RLP.RLPCollection : List`1<IRLPElement> {
    [CompilerGeneratedAttribute]
private Byte[] <RLPData>k__BackingField;
    public Byte[] RLPData { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_RLPData();
    [CompilerGeneratedAttribute]
public void set_RLPData(Byte[] value);
}
public class Nethereum.RLP.RLPItem : object {
    private Byte[] _rlpData;
    public Byte[] RLPData { get; }
    public RLPItem(Byte[] rlpData);
    public sealed virtual Byte[] get_RLPData();
    private Byte[] GetRLPData();
}
public class Nethereum.RLP.RLPStringFormatter : object {
    public static string Format(IRLPElement element);
}
