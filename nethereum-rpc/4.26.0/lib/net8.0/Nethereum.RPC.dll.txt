public interface Nethereum.RPC.Accounts.IAccount {
    public string Address { get; }
    public ITransactionManager TransactionManager { get; }
    public INonceService NonceService { get; public set; }
    public IAccountSigningService AccountSigningService { get; }
    public abstract virtual string get_Address();
    public abstract virtual ITransactionManager get_TransactionManager();
    public abstract virtual INonceService get_NonceService();
    public abstract virtual void set_NonceService(INonceService value);
    public abstract virtual IAccountSigningService get_AccountSigningService();
}
public class Nethereum.RPC.AccountSigning.AccountSigningService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthSignTypedDataV4 <SignTypedDataV4>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthPersonalSign <PersonalSign>k__BackingField;
    public IEthSignTypedDataV4 SignTypedDataV4 { get; }
    public IEthPersonalSign PersonalSign { get; }
    public AccountSigningService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSignTypedDataV4 get_SignTypedDataV4();
    [CompilerGeneratedAttribute]
public sealed virtual IEthPersonalSign get_PersonalSign();
}
public class Nethereum.RPC.AccountSigning.EthPersonalSign : RpcRequestResponseHandler`1<string> {
    public EthPersonalSign(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(Byte[] value, object id);
    public sealed virtual Task`1<string> SendRequestAsync(HexUTF8String utf8Hex, object id);
    public sealed virtual RpcRequest BuildRequest(HexUTF8String utf8Hex, object id);
    public sealed virtual RpcRequest BuildRequest(Byte[] value, object id);
}
public class Nethereum.RPC.AccountSigning.EthSignTypedDataV4 : RpcRequestResponseHandler`1<string> {
    public EthSignTypedDataV4(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(string jsonMessage, object id);
    public sealed virtual RpcRequest BuildRequest(string message, object id);
}
public interface Nethereum.RPC.AccountSigning.IAccountSigningService {
    public IEthSignTypedDataV4 SignTypedDataV4 { get; }
    public IEthPersonalSign PersonalSign { get; }
    public abstract virtual IEthSignTypedDataV4 get_SignTypedDataV4();
    public abstract virtual IEthPersonalSign get_PersonalSign();
}
public interface Nethereum.RPC.AccountSigning.IEthereumMessageSign {
    public abstract virtual Task`1<string> SendRequestAsync(Byte[] value, object id);
    public abstract virtual Task`1<string> SendRequestAsync(HexUTF8String utf8Hex, object id);
}
public interface Nethereum.RPC.AccountSigning.IEthPersonalSign {
    public abstract virtual RpcRequest BuildRequest(Byte[] value, object id);
    public abstract virtual RpcRequest BuildRequest(HexUTF8String utf8Hex, object id);
}
public interface Nethereum.RPC.AccountSigning.IEthSignTypedDataV4 {
    public abstract virtual RpcRequest BuildRequest(string message, object id);
}
public interface Nethereum.RPC.AccountSigning.ISignTypedDataV4 {
    public abstract virtual Task`1<string> SendRequestAsync(string jsonMessage, object id);
}
public enum Nethereum.RPC.ApiMethods : Enum {
    public int value__;
    public static ApiMethods net_listening;
    public static ApiMethods net_version;
    public static ApiMethods net_peerCount;
    public static ApiMethods eth_chainId;
    public static ApiMethods eth_protocolVersion;
    public static ApiMethods eth_syncing;
    public static ApiMethods eth_coinbase;
    public static ApiMethods eth_mining;
    public static ApiMethods eth_hashrate;
    public static ApiMethods eth_gasPrice;
    public static ApiMethods eth_feeHistory;
    public static ApiMethods eth_accounts;
    public static ApiMethods eth_blockNumber;
    public static ApiMethods eth_getBalance;
    public static ApiMethods eth_getStorageAt;
    public static ApiMethods eth_getTransactionCount;
    public static ApiMethods eth_getBlockTransactionCountByHash;
    public static ApiMethods eth_getBlockTransactionCountByNumber;
    public static ApiMethods eth_getUncleCountByBlockHash;
    public static ApiMethods eth_getUncleCountByBlockNumber;
    public static ApiMethods eth_getCode;
    public static ApiMethods eth_sign;
    public static ApiMethods eth_sendTransaction;
    public static ApiMethods eth_sendRawTransaction;
    public static ApiMethods eth_call;
    public static ApiMethods eth_estimateGas;
    public static ApiMethods eth_getBlockByHash;
    public static ApiMethods eth_getBlockByNumber;
    public static ApiMethods eth_getBlockReceipts;
    public static ApiMethods eth_getTransactionByHash;
    public static ApiMethods eth_getTransactionByBlockHashAndIndex;
    public static ApiMethods eth_getTransactionByBlockNumberAndIndex;
    public static ApiMethods eth_getTransactionReceipt;
    public static ApiMethods eth_getUncleByBlockHashAndIndex;
    public static ApiMethods eth_getUncleByBlockNumberAndIndex;
    public static ApiMethods eth_getCompilers;
    public static ApiMethods eth_compileLLL;
    public static ApiMethods eth_compileSolidity;
    public static ApiMethods eth_compileSerpent;
    public static ApiMethods eth_newFilter;
    public static ApiMethods eth_newBlockFilter;
    public static ApiMethods eth_newPendingTransactionFilter;
    public static ApiMethods eth_uninstallFilter;
    public static ApiMethods eth_getFilterChanges;
    public static ApiMethods eth_getFilterLogs;
    public static ApiMethods eth_getLogs;
    public static ApiMethods eth_getWork;
    public static ApiMethods eth_submitWork;
    public static ApiMethods eth_submitHashrate;
    public static ApiMethods eth_subscribe;
    public static ApiMethods eth_unsubscribe;
    public static ApiMethods shh_version;
    public static ApiMethods shh_info;
    public static ApiMethods shh_setMaxMessageSize;
    public static ApiMethods shh_setMinPoW;
    public static ApiMethods shh_markTrustedPeer;
    public static ApiMethods shh_newKeyPair;
    public static ApiMethods shh_addPrivateKey;
    public static ApiMethods shh_deleteKeyPair;
    public static ApiMethods shh_hasKeyPair;
    public static ApiMethods shh_getPublicKey;
    public static ApiMethods shh_getPrivateKey;
    public static ApiMethods shh_newSymKey;
    public static ApiMethods shh_addSymKey;
    public static ApiMethods shh_generateSymKeyFromPassword;
    public static ApiMethods shh_hasSymKey;
    public static ApiMethods shh_getSymKey;
    public static ApiMethods shh_deleteSymKey;
    public static ApiMethods shh_subscribe;
    public static ApiMethods shh_unsubscribe;
    public static ApiMethods shh_newMessageFilter;
    public static ApiMethods shh_deleteMessageFilter;
    public static ApiMethods shh_getFilterMessages;
    public static ApiMethods shh_post;
    public static ApiMethods web3_clientVersion;
    public static ApiMethods web3_sha3;
    public static ApiMethods personal_listAccounts;
    public static ApiMethods personal_newAccount;
    public static ApiMethods personal_unlockAccount;
    public static ApiMethods personal_lockAccount;
    public static ApiMethods personal_sendTransaction;
    public static ApiMethods eth_getProof;
    public static ApiMethods eth_createAccessList;
    public static ApiMethods eth_maxPriorityFeePerGas;
    public static ApiMethods debug_getRawTransaction;
    public static ApiMethods debug_getBadBlocks;
    public static ApiMethods debug_getRawBlock;
    public static ApiMethods debug_getRawHeader;
    public static ApiMethods debug_getRawReceipts;
    public static ApiMethods debug_storageRangeAt;
    public static ApiMethods eth_requestAccounts;
    public static ApiMethods wallet_requestPermissions;
    public static ApiMethods wallet_getPermissions;
    public static ApiMethods wallet_addEthereumChain;
    public static ApiMethods wallet_switchEthereumChain;
    public static ApiMethods wallet_watchAsset;
    public static ApiMethods eth_signTypedData_v4;
    public static ApiMethods personal_sign;
}
public static class Nethereum.RPC.Chain.ChainDefaultFeaturesServicesRepository : object {
    public static ChainFeature GetDefaultChainFeature(Chain chain);
    public static List`1<ChainFeature> GetDefaultChainFeatures();
}
public class Nethereum.RPC.Chain.ChainFeature : object {
    [CompilerGeneratedAttribute]
private BigInteger <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportEIP1559>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportEIP155>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeCurrency <NativeCurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChainName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <HttpRpcs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <WsRpcs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Explorers>k__BackingField;
    public BigInteger ChainId { get; public set; }
    public bool SupportEIP1559 { get; public set; }
    public bool SupportEIP155 { get; public set; }
    public NativeCurrency NativeCurrency { get; public set; }
    public string ChainName { get; public set; }
    public List`1<string> HttpRpcs { get; public set; }
    public List`1<string> WsRpcs { get; public set; }
    public List`1<string> Explorers { get; public set; }
    [CompilerGeneratedAttribute]
public BigInteger get_ChainId();
    [CompilerGeneratedAttribute]
public void set_ChainId(BigInteger value);
    [CompilerGeneratedAttribute]
public bool get_SupportEIP1559();
    [CompilerGeneratedAttribute]
public void set_SupportEIP1559(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportEIP155();
    [CompilerGeneratedAttribute]
public void set_SupportEIP155(bool value);
    [CompilerGeneratedAttribute]
public NativeCurrency get_NativeCurrency();
    [CompilerGeneratedAttribute]
public void set_NativeCurrency(NativeCurrency value);
    [CompilerGeneratedAttribute]
public string get_ChainName();
    [CompilerGeneratedAttribute]
public void set_ChainName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_HttpRpcs();
    [CompilerGeneratedAttribute]
public void set_HttpRpcs(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_WsRpcs();
    [CompilerGeneratedAttribute]
public void set_WsRpcs(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Explorers();
    [CompilerGeneratedAttribute]
public void set_Explorers(List`1<string> value);
    public AddEthereumChainParameter ToAddEthereumChainParameter();
}
public class Nethereum.RPC.Chain.ChainFeaturesService : object {
    private static ChainFeaturesService _current;
    private ConcurrentDictionary`2<BigInteger, ChainFeature> _chainFeatures;
    public static ChainFeaturesService Current { get; }
    public static ChainFeaturesService get_Current();
    private void InititialiseDefaultChainFeatures();
    public void UpsertChainFeatures(IEnumerable`1<ChainFeature> chainFeatures);
    public void UpsertChainFeature(ChainFeature chainFeature);
    public bool TryRemoveChainFeature(BigInteger chainId);
    public ChainFeature GetChainFeature(BigInteger chainId);
}
public class Nethereum.RPC.Chain.NativeCurrency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Decimals>k__BackingField;
    public string Name { get; public set; }
    public string Symbol { get; public set; }
    public int Decimals { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public void set_Symbol(string value);
    [CompilerGeneratedAttribute]
public int get_Decimals();
    [CompilerGeneratedAttribute]
public void set_Decimals(int value);
    public NativeCurrency ToRPCNativeCurrency();
}
public class Nethereum.RPC.Constants : object {
}
public class Nethereum.RPC.DebugNode.DebugApiService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IDebugGetBadBlocks <GetBadBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugGetRawBlock <GetRawBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugGetRawHeader <GetRawHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugGetRawReceipts <GetRawReceipts>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugGetRawTransaction <GetRawTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugStorageRangeAt <StorageRangeAt>k__BackingField;
    public IDebugGetBadBlocks GetBadBlocks { get; private set; }
    public IDebugGetRawBlock GetRawBlock { get; private set; }
    public IDebugGetRawHeader GetRawHeader { get; private set; }
    public IDebugGetRawReceipts GetRawReceipts { get; private set; }
    public IDebugGetRawTransaction GetRawTransaction { get; private set; }
    public IDebugStorageRangeAt StorageRangeAt { get; private set; }
    public DebugApiService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugGetBadBlocks get_GetBadBlocks();
    [CompilerGeneratedAttribute]
private void set_GetBadBlocks(IDebugGetBadBlocks value);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugGetRawBlock get_GetRawBlock();
    [CompilerGeneratedAttribute]
private void set_GetRawBlock(IDebugGetRawBlock value);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugGetRawHeader get_GetRawHeader();
    [CompilerGeneratedAttribute]
private void set_GetRawHeader(IDebugGetRawHeader value);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugGetRawReceipts get_GetRawReceipts();
    [CompilerGeneratedAttribute]
private void set_GetRawReceipts(IDebugGetRawReceipts value);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugGetRawTransaction get_GetRawTransaction();
    [CompilerGeneratedAttribute]
private void set_GetRawTransaction(IDebugGetRawTransaction value);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugStorageRangeAt get_StorageRangeAt();
    [CompilerGeneratedAttribute]
private void set_StorageRangeAt(IDebugStorageRangeAt value);
}
public class Nethereum.RPC.DebugNode.DebugGetBadBlocks : GenericRpcRequestResponseHandlerNoParam`1<BadBlock[]> {
    public DebugGetBadBlocks(IClient client);
}
public class Nethereum.RPC.DebugNode.DebugGetRawBlock : RpcRequestResponseHandler`1<string> {
    public DebugGetRawBlock(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(BlockParameter block, object id);
    public sealed virtual Task`1<string> SendRequestAsync(object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter block, object id);
}
public class Nethereum.RPC.DebugNode.DebugGetRawHeader : RpcRequestResponseHandler`1<string> {
    public DebugGetRawHeader(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(BlockParameter block, object id);
    public sealed virtual Task`1<string> SendRequestAsync(object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter block, object id);
}
public class Nethereum.RPC.DebugNode.DebugGetRawReceipts : RpcRequestResponseHandler`1<String[]> {
    public DebugGetRawReceipts(IClient client);
    public sealed virtual Task`1<String[]> SendRequestAsync(BlockParameter block, object id);
    public sealed virtual Task`1<String[]> SendRequestAsync(object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter block, object id);
}
public class Nethereum.RPC.DebugNode.DebugGetRawTransaction : RpcRequestResponseHandler`1<string> {
    public DebugGetRawTransaction(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(string transactionHash, object id);
    public sealed virtual RpcRequest BuildRequest(string transactionHash, object id);
}
public class Nethereum.RPC.DebugNode.DebugStorageRangeAt : RpcRequestResponseHandler`1<DebugStorageAtResult> {
    public DebugStorageRangeAt(IClient client);
    public sealed virtual Task`1<DebugStorageAtResult> SendRequestAsync(string blockHash, int transactionIndex, string address, string startKeyHex, int limit, object id);
    public sealed virtual Task`1<DebugStorageAtResult> SendRequestAsync(string blockHash, int transactionIndex, string address, BigInteger startKey, int limit, object id);
    public sealed virtual RpcRequest BuildRequest(string blockHash, int transactionIndex, string address, string startKeyHex, int limit, object id);
}
public class Nethereum.RPC.DebugNode.Dtos.AccountStorageValue : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [JsonPropertyAttribute("key")]
public HexBigInteger Key { get; public set; }
    [JsonPropertyAttribute("value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Nethereum.RPC.DebugNode.Dtos.DebugStorageAtResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, AccountStorageValue> <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextKey>k__BackingField;
    [JsonPropertyAttribute("storage")]
public Dictionary`2<string, AccountStorageValue> Storage { get; public set; }
    [JsonPropertyAttribute("nextKey")]
public string NextKey { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, AccountStorageValue> get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(Dictionary`2<string, AccountStorageValue> value);
    [CompilerGeneratedAttribute]
public string get_NextKey();
    [CompilerGeneratedAttribute]
public void set_NextKey(string value);
}
public interface Nethereum.RPC.DebugNode.IDebugApiService {
    public IDebugGetBadBlocks GetBadBlocks { get; }
    public IDebugGetRawBlock GetRawBlock { get; }
    public IDebugGetRawHeader GetRawHeader { get; }
    public IDebugGetRawReceipts GetRawReceipts { get; }
    public IDebugGetRawTransaction GetRawTransaction { get; }
    public IDebugStorageRangeAt StorageRangeAt { get; }
    public abstract virtual IDebugGetBadBlocks get_GetBadBlocks();
    public abstract virtual IDebugGetRawBlock get_GetRawBlock();
    public abstract virtual IDebugGetRawHeader get_GetRawHeader();
    public abstract virtual IDebugGetRawReceipts get_GetRawReceipts();
    public abstract virtual IDebugGetRawTransaction get_GetRawTransaction();
    public abstract virtual IDebugStorageRangeAt get_StorageRangeAt();
}
public interface Nethereum.RPC.DebugNode.IDebugGetBadBlocks {
}
public interface Nethereum.RPC.DebugNode.IDebugGetRawBlock {
    public abstract virtual RpcRequest BuildRequest(BlockParameter block, object id);
    public abstract virtual Task`1<string> SendRequestAsync(object id);
    public abstract virtual Task`1<string> SendRequestAsync(BlockParameter block, object id);
}
public interface Nethereum.RPC.DebugNode.IDebugGetRawHeader {
    public abstract virtual RpcRequest BuildRequest(BlockParameter block, object id);
    public abstract virtual Task`1<string> SendRequestAsync(object id);
    public abstract virtual Task`1<string> SendRequestAsync(BlockParameter block, object id);
}
public interface Nethereum.RPC.DebugNode.IDebugGetRawReceipts {
    public abstract virtual RpcRequest BuildRequest(BlockParameter block, object id);
    public abstract virtual Task`1<String[]> SendRequestAsync(object id);
    public abstract virtual Task`1<String[]> SendRequestAsync(BlockParameter block, object id);
}
public interface Nethereum.RPC.DebugNode.IDebugGetRawTransaction {
    public abstract virtual RpcRequest BuildRequest(string transactionHash, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string transactionHash, object id);
}
public interface Nethereum.RPC.DebugNode.IDebugStorageRangeAt {
    public abstract virtual RpcRequest BuildRequest(string blockHash, int transactionIndex, string address, string startKeyHex, int limit, object id);
    public abstract virtual Task`1<DebugStorageAtResult> SendRequestAsync(string blockHash, int transactionIndex, string address, string startKeyHex, int limit, object id);
    public abstract virtual Task`1<DebugStorageAtResult> SendRequestAsync(string blockHash, int transactionIndex, string address, BigInteger startKey, int limit, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthBlockNumber : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthBlockNumber(IClient client);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockReceiptsByNumber : RpcRequestResponseHandler`1<TransactionReceipt[]> {
    public EthGetBlockReceiptsByNumber(IClient client);
    public sealed virtual Task`1<TransactionReceipt[]> SendRequestAsync(BlockParameter blockParameter, object id);
    public sealed virtual Task`1<TransactionReceipt[]> SendRequestAsync(HexBigInteger number, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBlockReceiptsByNumber, TransactionReceipt[]> CreateBatchItem(HexBigInteger number, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Blocks.EthGetBlockReceiptsByNumber/<SendBatchRequestAsync>d__4")]
public sealed virtual Task`1<List`1<TransactionReceipt[]>> SendBatchRequestAsync(HexBigInteger[] numbers);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger number, object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter blockParameter, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockTransactionCountByHash : RpcRequestResponseHandler`1<HexBigInteger> {
    public EthGetBlockTransactionCountByHash(IClient client);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(string hash, object id);
    public sealed virtual RpcRequest BuildRequest(string hash, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockTransactionCountByNumber : RpcRequestResponseHandler`1<HexBigInteger> {
    public EthGetBlockTransactionCountByNumber(IClient client);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(BlockParameter block, object id);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsByHash : RpcRequestResponseHandler`1<BlockWithTransactions> {
    public EthGetBlockWithTransactionsByHash(IClient client);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsByHash, BlockWithTransactions> CreateBatchItem(string blockHash, object id);
    public sealed virtual Task`1<BlockWithTransactions> SendRequestAsync(string blockHash, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsByHash/<SendBatchRequestAsync>d__3")]
public sealed virtual Task`1<List`1<BlockWithTransactions>> SendBatchRequestAsync(String[] blockHashes);
    public sealed virtual RpcRequest BuildRequest(string blockHash, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsByNumber : RpcRequestResponseHandler`1<BlockWithTransactions> {
    public EthGetBlockWithTransactionsByNumber(IClient client);
    public sealed virtual Task`1<BlockWithTransactions> SendRequestAsync(BlockParameter blockParameter, object id);
    public sealed virtual Task`1<BlockWithTransactions> SendRequestAsync(HexBigInteger number, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsByNumber, BlockWithTransactions> CreateBatchItem(HexBigInteger number, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsByNumber/<SendBatchRequestAsync>d__4")]
public sealed virtual Task`1<List`1<BlockWithTransactions>> SendBatchRequestAsync(HexBigInteger[] numbers);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger number, object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter blockParameter, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsHashesByHash : RpcRequestResponseHandler`1<BlockWithTransactionHashes> {
    public EthGetBlockWithTransactionsHashesByHash(IClient client);
    public sealed virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(string blockHash, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsHashesByHash, BlockWithTransactionHashes> CreateBatchItem(string blockHash, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsHashesByHash/<SendBatchRequestAsync>d__3")]
public sealed virtual Task`1<List`1<BlockWithTransactionHashes>> SendBatchRequestAsync(String[] blockHashes);
    public sealed virtual RpcRequest BuildRequest(string blockHash, object id);
}
public class Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsHashesByNumber : RpcRequestResponseHandler`1<BlockWithTransactionHashes> {
    public EthGetBlockWithTransactionsHashesByNumber(IClient client);
    public sealed virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(HexBigInteger number, object id);
    public sealed virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(BlockParameter blockParameter, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsHashesByNumber, BlockWithTransactionHashes> CreateBatchItem(HexBigInteger number, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsHashesByNumber, BlockWithTransactionHashes> CreateBatchItem(BlockParameter blockParameter, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Blocks.EthGetBlockWithTransactionsHashesByNumber/<SendBatchRequestAsync>d__5")]
public sealed virtual Task`1<List`1<BlockWithTransactionHashes>> SendBatchRequestAsync(HexBigInteger[] numbers);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger number, object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter blockParameter, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthBlockNumber {
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockReceiptsByNumber {
    public abstract virtual RpcRequest BuildRequest(BlockParameter blockParameter, object id);
    public abstract virtual RpcRequest BuildRequest(HexBigInteger number, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBlockReceiptsByNumber, TransactionReceipt[]> CreateBatchItem(HexBigInteger number, object id);
    public abstract virtual Task`1<List`1<TransactionReceipt[]>> SendBatchRequestAsync(HexBigInteger[] numbers);
    public abstract virtual Task`1<TransactionReceipt[]> SendRequestAsync(BlockParameter blockParameter, object id);
    public abstract virtual Task`1<TransactionReceipt[]> SendRequestAsync(HexBigInteger number, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockTransactionCountByHash {
    public abstract virtual RpcRequest BuildRequest(string hash, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(string hash, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockTransactionCountByNumber {
    public abstract virtual RpcRequest BuildRequest(BlockParameter block, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockWithTransactionsByHash {
    public abstract virtual RpcRequest BuildRequest(string blockHash, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsByHash, BlockWithTransactions> CreateBatchItem(string blockHash, object id);
    public abstract virtual Task`1<List`1<BlockWithTransactions>> SendBatchRequestAsync(String[] blockHashes);
    public abstract virtual Task`1<BlockWithTransactions> SendRequestAsync(string blockHash, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockWithTransactionsByNumber {
    public abstract virtual RpcRequest BuildRequest(BlockParameter blockParameter, object id);
    public abstract virtual RpcRequest BuildRequest(HexBigInteger number, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsByNumber, BlockWithTransactions> CreateBatchItem(HexBigInteger number, object id);
    public abstract virtual Task`1<List`1<BlockWithTransactions>> SendBatchRequestAsync(HexBigInteger[] numbers);
    public abstract virtual Task`1<BlockWithTransactions> SendRequestAsync(BlockParameter blockParameter, object id);
    public abstract virtual Task`1<BlockWithTransactions> SendRequestAsync(HexBigInteger number, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockWithTransactionsHashesByHash {
    public abstract virtual RpcRequest BuildRequest(string blockHash, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsHashesByHash, BlockWithTransactionHashes> CreateBatchItem(string blockHash, object id);
    public abstract virtual Task`1<List`1<BlockWithTransactionHashes>> SendBatchRequestAsync(String[] blockHashes);
    public abstract virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(string blockHash, object id);
}
public interface Nethereum.RPC.Eth.Blocks.IEthGetBlockWithTransactionsHashesByNumber {
    public abstract virtual RpcRequest BuildRequest(BlockParameter blockParameter, object id);
    public abstract virtual RpcRequest BuildRequest(HexBigInteger number, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsHashesByNumber, BlockWithTransactionHashes> CreateBatchItem(HexBigInteger number, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBlockWithTransactionsHashesByNumber, BlockWithTransactionHashes> CreateBatchItem(BlockParameter blockParameter, object id);
    public abstract virtual Task`1<List`1<BlockWithTransactionHashes>> SendBatchRequestAsync(HexBigInteger[] numbers);
    public abstract virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(BlockParameter blockParameter, object id);
    public abstract virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(HexBigInteger number, object id);
}
public interface Nethereum.RPC.Eth.Blocks.ILastConfirmedBlockNumberService {
    public abstract virtual Task`1<BigInteger> GetLastConfirmedBlockNumberAsync(Nullable`1<BigInteger> waitForConfirmedBlockNumber, CancellationToken cancellationToken);
}
public class Nethereum.RPC.Eth.Blocks.LastConfirmedBlockNumberService : object {
    private IEthBlockNumber _ethBlockNumber;
    private IWaitStrategy _waitStrategy;
    private UInt32 _minimumBlockConfirmations;
    private ILogger _log;
    public static UInt32 DEFAULT_BLOCK_CONFIRMATIONS;
    public LastConfirmedBlockNumberService(IEthBlockNumber ethBlockNumber, UInt32 minimumBlockConfirmations, ILogger log, IWaitStrategy waitStrategy);
    public LastConfirmedBlockNumberService(IEthBlockNumber ethBlockNumber, IWaitStrategy waitStrategy, UInt32 minimumBlockConfirmations, ILogger log);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Blocks.LastConfirmedBlockNumberService/<GetLastConfirmedBlockNumberAsync>d__7")]
public sealed virtual Task`1<BigInteger> GetLastConfirmedBlockNumberAsync(Nullable`1<BigInteger> waitForConfirmedBlockNumber, CancellationToken cancellationToken);
    private Task`1<HexBigInteger> GetCurrentBlockOnChainAsync();
    private bool IsBlockNumberConfirmed(Nullable`1<BigInteger> blockNumber, BigInteger currentBlockNumberOnChain, UInt32 minimumBlockConfirmations);
    private void LogWaitingForBlockAvailability(BigInteger currentBlock, UInt32 minimumBlockConfirmations, Nullable`1<BigInteger> maxBlockOnChain, UInt32 attempt);
}
public class Nethereum.RPC.Eth.ChainValidation.EthChainProofValidationService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthApiService <EthApiService>k__BackingField;
    public IEthApiService EthApiService { get; }
    public EthChainProofValidationService(IClient client);
    public EthChainProofValidationService(IClient client, IEthApiService ethApiService);
    [CompilerGeneratedAttribute]
public IEthApiService get_EthApiService();
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.ChainValidation.EthChainProofValidationService/<GetAndValidateBalance>d__5")]
public sealed virtual Task`1<HexBigInteger> GetAndValidateBalance(string accountAddress, Byte[] stateRoot, String[] storageKeys, BlockParameter blockParameter);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.ChainValidation.EthChainProofValidationService/<GetAndValidateNonce>d__6")]
public sealed virtual Task`1<HexBigInteger> GetAndValidateNonce(string accountAddress, Byte[] stateRoot, String[] storageKeys, BlockParameter blockParameter);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.ChainValidation.EthChainProofValidationService/<GetAndValidateAccountProof>d__7")]
public sealed virtual Task`1<AccountProof> GetAndValidateAccountProof(string accountAddress, Byte[] stateRoot, String[] storageKeys, BlockParameter blockParameter);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.ChainValidation.EthChainProofValidationService/<GetAndValidateValueFromStorage>d__8")]
public sealed virtual Task`1<Byte[]> GetAndValidateValueFromStorage(string accountAddress, string storageKey, Byte[] stateRoot, BlockParameter blockParameter);
    public sealed virtual bool ValidateValueFromStorageProof(StorageProof storageProof, Byte[] stateRoot);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.ChainValidation.EthChainProofValidationService/<GetAndValidateTransactions>d__10")]
public sealed virtual Task`1<Transaction[]> GetAndValidateTransactions(BlockParameter blockNumber, string transactionsRoot, Nullable`1<BigInteger> chainId);
}
public interface Nethereum.RPC.Eth.ChainValidation.IEthChainProofValidationService {
    public abstract virtual Task`1<AccountProof> GetAndValidateAccountProof(string accountAddress, Byte[] stateRoot, String[] storageKeys, BlockParameter blockParameter);
    public abstract virtual Task`1<HexBigInteger> GetAndValidateBalance(string accountAddress, Byte[] stateRoot, String[] storageKeys, BlockParameter blockParameter);
    public abstract virtual Task`1<HexBigInteger> GetAndValidateNonce(string accountAddress, Byte[] stateRoot, String[] storageKeys, BlockParameter blockParameter);
    public abstract virtual Task`1<Transaction[]> GetAndValidateTransactions(BlockParameter blockNumber, string transactionsRoot, Nullable`1<BigInteger> chainId);
    public abstract virtual Task`1<Byte[]> GetAndValidateValueFromStorage(string accountAddress, string storageKey, Byte[] stateRoot, BlockParameter blockParameter);
    public abstract virtual bool ValidateValueFromStorageProof(StorageProof storageProof, Byte[] stateRoot);
}
public class Nethereum.RPC.Eth.ChainValidation.InvalidChainDataException : Exception {
    public InvalidChainDataException(string message);
    public InvalidChainDataException(string message, Exception innerException);
}
public class Nethereum.RPC.Eth.Compilation.EthCompileLLL : RpcRequestResponseHandler`1<JObject> {
    public EthCompileLLL(IClient client);
    public sealed virtual Task`1<JObject> SendRequestAsync(string lllcode, object id);
    public sealed virtual RpcRequest BuildRequest(string lllcode, object id);
}
public class Nethereum.RPC.Eth.Compilation.EthCompileSerpent : RpcRequestResponseHandler`1<JObject> {
    public EthCompileSerpent(IClient client);
    public sealed virtual Task`1<JObject> SendRequestAsync(string serpentCode, object id);
    public sealed virtual RpcRequest BuildRequest(string serpentCode, object id);
}
public class Nethereum.RPC.Eth.Compilation.EthCompileSolidity : RpcRequestResponseHandler`1<JToken> {
    public EthCompileSolidity(IClient client);
    public sealed virtual Task`1<JToken> SendRequestAsync(string contractCode, object id);
    public sealed virtual RpcRequest BuildRequest(string contractCode, object id);
}
public class Nethereum.RPC.Eth.Compilation.EthGetCompilers : GenericRpcRequestResponseHandlerNoParam`1<String[]> {
    public EthGetCompilers(IClient client);
}
public interface Nethereum.RPC.Eth.Compilation.IEthCompileLLL {
    public abstract virtual RpcRequest BuildRequest(string lllcode, object id);
    public abstract virtual Task`1<JObject> SendRequestAsync(string lllcode, object id);
}
public interface Nethereum.RPC.Eth.Compilation.IEthCompileSerpent {
    public abstract virtual RpcRequest BuildRequest(string serpentCode, object id);
    public abstract virtual Task`1<JObject> SendRequestAsync(string serpentCode, object id);
}
public interface Nethereum.RPC.Eth.Compilation.IEthCompileSolidity {
    public abstract virtual RpcRequest BuildRequest(string contractCode, object id);
    public abstract virtual Task`1<JToken> SendRequestAsync(string contractCode, object id);
}
public interface Nethereum.RPC.Eth.Compilation.IEthGetCompilers {
}
public class Nethereum.RPC.Eth.DTOs.AccessList : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <StorageKeys>k__BackingField;
    [JsonPropertyAttribute]
public string Address { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> StorageKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_StorageKeys();
    [CompilerGeneratedAttribute]
public void set_StorageKeys(List`1<string> value);
}
public class Nethereum.RPC.Eth.DTOs.AccessListGasUsed : object {
    [CompilerGeneratedAttribute]
private List`1<AccessList> <AccessList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <GasUsed>k__BackingField;
    [JsonPropertyAttribute]
public List`1<AccessList> AccessList { get; public set; }
    [JsonPropertyAttribute]
public string Error { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger GasUsed { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AccessList> get_AccessList();
    [CompilerGeneratedAttribute]
public void set_AccessList(List`1<AccessList> value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_GasUsed();
    [CompilerGeneratedAttribute]
public void set_GasUsed(HexBigInteger value);
}
public class Nethereum.RPC.Eth.DTOs.AccountProof : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Balance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageHash>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AccountProofs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<StorageProof> <StorageProof>k__BackingField;
    [JsonPropertyAttribute]
public string Address { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Balance { get; public set; }
    [JsonPropertyAttribute]
public string CodeHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Nonce { get; public set; }
    [JsonPropertyAttribute]
public string StorageHash { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> AccountProofs { get; public set; }
    [JsonPropertyAttribute]
public List`1<StorageProof> StorageProof { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Balance();
    [CompilerGeneratedAttribute]
public void set_Balance(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_CodeHash();
    [CompilerGeneratedAttribute]
public void set_CodeHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_StorageHash();
    [CompilerGeneratedAttribute]
public void set_StorageHash(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AccountProofs();
    [CompilerGeneratedAttribute]
public void set_AccountProofs(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<StorageProof> get_StorageProof();
    [CompilerGeneratedAttribute]
public void set_StorageProof(List`1<StorageProof> value);
}
public class Nethereum.RPC.Eth.DTOs.BadBlock : object {
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rlp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Block>k__BackingField;
    [JsonPropertyAttribute]
public string Hash { get; public set; }
    [JsonPropertyAttribute]
public string Rlp { get; public set; }
    [JsonPropertyAttribute]
public string Block { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_Rlp();
    [CompilerGeneratedAttribute]
public void set_Rlp(string value);
    [CompilerGeneratedAttribute]
public string get_Block();
    [CompilerGeneratedAttribute]
public void set_Block(string value);
}
public class Nethereum.RPC.Eth.DTOs.Block : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <Number>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlockHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SealFields>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha3Uncles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogsBloom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiptsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Miner>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Difficulty>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <TotalDifficulty>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MixHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <GasLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <GasUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Uncles>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <BaseFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <WithdrawalsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Withdrawal[] <Withdrawals>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger Number { get; public set; }
    [JsonPropertyAttribute]
public string BlockHash { get; public set; }
    [JsonPropertyAttribute]
public string Author { get; public set; }
    [JsonPropertyAttribute]
public String[] SealFields { get; public set; }
    [JsonPropertyAttribute]
public string ParentHash { get; public set; }
    [JsonPropertyAttribute]
public string Nonce { get; public set; }
    [JsonPropertyAttribute]
public string Sha3Uncles { get; public set; }
    [JsonPropertyAttribute]
public string LogsBloom { get; public set; }
    [JsonPropertyAttribute]
public string TransactionsRoot { get; public set; }
    [JsonPropertyAttribute]
public string StateRoot { get; public set; }
    [JsonPropertyAttribute]
public string ReceiptsRoot { get; public set; }
    [JsonPropertyAttribute]
public string Miner { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Difficulty { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger TotalDifficulty { get; public set; }
    [JsonPropertyAttribute]
public string MixHash { get; public set; }
    [JsonPropertyAttribute]
public string ExtraData { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Size { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger GasLimit { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger GasUsed { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Timestamp { get; public set; }
    [JsonPropertyAttribute]
public String[] Uncles { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger BaseFeePerGas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger WithdrawalsRoot { get; public set; }
    [JsonPropertyAttribute]
public Withdrawal[] Withdrawals { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_Number();
    [CompilerGeneratedAttribute]
public void set_Number(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_BlockHash();
    [CompilerGeneratedAttribute]
public void set_BlockHash(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public String[] get_SealFields();
    [CompilerGeneratedAttribute]
public void set_SealFields(String[] value);
    [CompilerGeneratedAttribute]
public string get_ParentHash();
    [CompilerGeneratedAttribute]
public void set_ParentHash(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public string get_Sha3Uncles();
    [CompilerGeneratedAttribute]
public void set_Sha3Uncles(string value);
    [CompilerGeneratedAttribute]
public string get_LogsBloom();
    [CompilerGeneratedAttribute]
public void set_LogsBloom(string value);
    [CompilerGeneratedAttribute]
public string get_TransactionsRoot();
    [CompilerGeneratedAttribute]
public void set_TransactionsRoot(string value);
    [CompilerGeneratedAttribute]
public string get_StateRoot();
    [CompilerGeneratedAttribute]
public void set_StateRoot(string value);
    [CompilerGeneratedAttribute]
public string get_ReceiptsRoot();
    [CompilerGeneratedAttribute]
public void set_ReceiptsRoot(string value);
    [CompilerGeneratedAttribute]
public string get_Miner();
    [CompilerGeneratedAttribute]
public void set_Miner(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Difficulty();
    [CompilerGeneratedAttribute]
public void set_Difficulty(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_TotalDifficulty();
    [CompilerGeneratedAttribute]
public void set_TotalDifficulty(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_MixHash();
    [CompilerGeneratedAttribute]
public void set_MixHash(string value);
    [CompilerGeneratedAttribute]
public string get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_GasLimit();
    [CompilerGeneratedAttribute]
public void set_GasLimit(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_GasUsed();
    [CompilerGeneratedAttribute]
public void set_GasUsed(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(HexBigInteger value);
    [CompilerGeneratedAttribute]
public String[] get_Uncles();
    [CompilerGeneratedAttribute]
public void set_Uncles(String[] value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_BaseFeePerGas();
    [CompilerGeneratedAttribute]
public void set_BaseFeePerGas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_WithdrawalsRoot();
    [CompilerGeneratedAttribute]
public void set_WithdrawalsRoot(HexBigInteger value);
    [CompilerGeneratedAttribute]
public Withdrawal[] get_Withdrawals();
    [CompilerGeneratedAttribute]
public void set_Withdrawals(Withdrawal[] value);
}
[ExtensionAttribute]
public static class Nethereum.RPC.Eth.DTOs.BlockExtensions : object {
    [ExtensionAttribute]
public static int TransactionCount(BlockWithTransactions block);
    [ExtensionAttribute]
public static int TransactionCount(BlockWithTransactionHashes block);
}
[JsonConverterAttribute("Nethereum.RPC.Eth.DTOs.BlockParameterJsonConverter")]
public class Nethereum.RPC.Eth.DTOs.BlockParameter : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockParameterType <ParameterType>k__BackingField;
    public HexBigInteger BlockNumber { get; private set; }
    public BlockParameterType ParameterType { get; private set; }
    private BlockParameter(BlockParameterType type);
    public BlockParameter(HexBigInteger blockNumber);
    public BlockParameter(ulong blockNumber);
    [CompilerGeneratedAttribute]
public HexBigInteger get_BlockNumber();
    [CompilerGeneratedAttribute]
private void set_BlockNumber(HexBigInteger value);
    [CompilerGeneratedAttribute]
public BlockParameterType get_ParameterType();
    [CompilerGeneratedAttribute]
private void set_ParameterType(BlockParameterType value);
    public static BlockParameter CreateLatest();
    public static BlockParameter CreateEarliest();
    public static BlockParameter CreatePending();
    public void SetValue(BlockParameterType parameterType);
    public void SetValue(string blockNumberHex);
    public void SetValue(HexBigInteger blockNumber);
    public void SetValue(BigInteger blockNumber);
    public string GetRPCParam();
    public object GetRPCParamAsNumber();
}
public class Nethereum.RPC.Eth.DTOs.BlockParameterJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class Nethereum.RPC.Eth.DTOs.BlockWithTransactionHashes : Block {
    [CompilerGeneratedAttribute]
private String[] <TransactionHashes>k__BackingField;
    [JsonPropertyAttribute]
public String[] TransactionHashes { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_TransactionHashes();
    [CompilerGeneratedAttribute]
public void set_TransactionHashes(String[] value);
}
public class Nethereum.RPC.Eth.DTOs.BlockWithTransactions : Block {
    [CompilerGeneratedAttribute]
private Transaction[] <Transactions>k__BackingField;
    [JsonPropertyAttribute]
public Transaction[] Transactions { get; public set; }
    [CompilerGeneratedAttribute]
public Transaction[] get_Transactions();
    [CompilerGeneratedAttribute]
public void set_Transactions(Transaction[] value);
}
public class Nethereum.RPC.Eth.DTOs.CallInput : object {
    private string _from;
    private string _to;
    private string _data;
    [CompilerGeneratedAttribute]
private HexBigInteger <Gas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <GasPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <MaxFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <MaxPriorityFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <ChainId>k__BackingField;
    [JsonPropertyAttribute]
public string From { get; public set; }
    [JsonPropertyAttribute]
public string To { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Gas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger GasPrice { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Value { get; public set; }
    [JsonPropertyAttribute]
public string Data { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger MaxFeePerGas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger MaxPriorityFeePerGas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Type { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger ChainId { get; public set; }
    public CallInput(string data, string addressTo);
    public CallInput(string data, string addressTo, HexBigInteger value);
    public CallInput(string data, string addressTo, string addressFrom, HexBigInteger gas, HexBigInteger value);
    public CallInput(string data, string addressTo, string addressFrom, HexBigInteger gas, HexBigInteger gasPrice, HexBigInteger value);
    public CallInput(string data, string addressTo, string addressFrom, HexBigInteger gas, HexBigInteger value, HexBigInteger type, HexBigInteger maxFeePerGas, HexBigInteger maxPriorityFeePerGas);
    public CallInput(string data, string addressFrom, HexBigInteger gas, HexBigInteger value);
    public CallInput(string data, HexBigInteger gas, string addressFrom);
    public string get_From();
    public void set_From(string value);
    public string get_To();
    public void set_To(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Gas();
    [CompilerGeneratedAttribute]
public void set_Gas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_GasPrice();
    [CompilerGeneratedAttribute]
public void set_GasPrice(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(HexBigInteger value);
    public string get_Data();
    public void set_Data(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_MaxFeePerGas();
    [CompilerGeneratedAttribute]
public void set_MaxFeePerGas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_MaxPriorityFeePerGas();
    [CompilerGeneratedAttribute]
public void set_MaxPriorityFeePerGas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_ChainId();
    [CompilerGeneratedAttribute]
public void set_ChainId(HexBigInteger value);
}
public class Nethereum.RPC.Eth.DTOs.Comparers.FilterLogBlockNumberTransactionIndexLogIndexComparer : object {
    public sealed virtual int Compare(FilterLog x, FilterLog y);
}
public class Nethereum.RPC.Eth.DTOs.ContractCreationVO : TransactionReceiptVO {
    [CompilerGeneratedAttribute]
private string <ContractAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FailedCreatingContract>k__BackingField;
    public string ContractAddress { get; private set; }
    public string Code { get; private set; }
    public bool FailedCreatingContract { get; private set; }
    public ContractCreationVO(TransactionReceiptVO transactionReceiptVO, string code, bool failedCreatingContract);
    public ContractCreationVO(string contractAddress, string code, Transaction transaction, TransactionReceipt transactionReceipt, bool failedCreatingContract, Block block);
    [CompilerGeneratedAttribute]
public string get_ContractAddress();
    [CompilerGeneratedAttribute]
private void set_ContractAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public bool get_FailedCreatingContract();
    [CompilerGeneratedAttribute]
private void set_FailedCreatingContract(bool value);
}
public class Nethereum.RPC.Eth.DTOs.ContractTransactionVO : object {
    [CompilerGeneratedAttribute]
private string <ContractAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    public string ContractAddress { get; private set; }
    public string Code { get; private set; }
    public Transaction Transaction { get; private set; }
    public ContractTransactionVO(string contractAddress, string code, Transaction transaction);
    [CompilerGeneratedAttribute]
public string get_ContractAddress();
    [CompilerGeneratedAttribute]
private void set_ContractAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
private void set_Code(string value);
    [CompilerGeneratedAttribute]
public Transaction get_Transaction();
    [CompilerGeneratedAttribute]
private void set_Transaction(Transaction value);
}
public class Nethereum.RPC.Eth.DTOs.FeeHistoryResult : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <OldestBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger[] <BaseFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private Decimal[] <GasUsedRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger[][] <Reward>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger OldestBlock { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger[] BaseFeePerGas { get; public set; }
    [JsonPropertyAttribute]
public Decimal[] GasUsedRatio { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger[][] Reward { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_OldestBlock();
    [CompilerGeneratedAttribute]
public void set_OldestBlock(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger[] get_BaseFeePerGas();
    [CompilerGeneratedAttribute]
public void set_BaseFeePerGas(HexBigInteger[] value);
    [CompilerGeneratedAttribute]
public Decimal[] get_GasUsedRatio();
    [CompilerGeneratedAttribute]
public void set_GasUsedRatio(Decimal[] value);
    [CompilerGeneratedAttribute]
public HexBigInteger[][] get_Reward();
    [CompilerGeneratedAttribute]
public void set_Reward(HexBigInteger[][] value);
}
public class Nethereum.RPC.Eth.DTOs.FilterLog : object {
    [CompilerGeneratedAttribute]
private bool <Removed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <LogIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <TransactionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlockHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Topics>k__BackingField;
    [JsonPropertyAttribute]
public bool Removed { get; public set; }
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger LogIndex { get; public set; }
    [JsonPropertyAttribute]
public string TransactionHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger TransactionIndex { get; public set; }
    [JsonPropertyAttribute]
public string BlockHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger BlockNumber { get; public set; }
    [JsonPropertyAttribute]
public string Address { get; public set; }
    [JsonPropertyAttribute]
public string Data { get; public set; }
    [JsonPropertyAttribute]
public Object[] Topics { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Removed();
    [CompilerGeneratedAttribute]
public void set_Removed(bool value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_LogIndex();
    [CompilerGeneratedAttribute]
public void set_LogIndex(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_TransactionHash();
    [CompilerGeneratedAttribute]
public void set_TransactionHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_TransactionIndex();
    [CompilerGeneratedAttribute]
public void set_TransactionIndex(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_BlockHash();
    [CompilerGeneratedAttribute]
public void set_BlockHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_BlockNumber();
    [CompilerGeneratedAttribute]
public void set_BlockNumber(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public Object[] get_Topics();
    [CompilerGeneratedAttribute]
public void set_Topics(Object[] value);
}
public class Nethereum.RPC.Eth.DTOs.FilterLogVO : object {
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionReceipt <Receipt>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterLog <Log>k__BackingField;
    public Transaction Transaction { get; private set; }
    public TransactionReceipt Receipt { get; private set; }
    public FilterLog Log { get; private set; }
    public HexBigInteger LogIndex { get; }
    public string Address { get; }
    public FilterLogVO(Transaction transaction, TransactionReceipt receipt, FilterLog log);
    [CompilerGeneratedAttribute]
public Transaction get_Transaction();
    [CompilerGeneratedAttribute]
private void set_Transaction(Transaction value);
    [CompilerGeneratedAttribute]
public TransactionReceipt get_Receipt();
    [CompilerGeneratedAttribute]
private void set_Receipt(TransactionReceipt value);
    [CompilerGeneratedAttribute]
public FilterLog get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(FilterLog value);
    public HexBigInteger get_LogIndex();
    public string get_Address();
    public virtual bool IsTo(string toAddress);
}
public class Nethereum.RPC.Eth.DTOs.NewFilterInput : object {
    [CompilerGeneratedAttribute]
private BlockParameter <FromBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockParameter <ToBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Topics>k__BackingField;
    [JsonPropertyAttribute]
public BlockParameter FromBlock { get; public set; }
    [JsonPropertyAttribute]
public BlockParameter ToBlock { get; public set; }
    [JsonPropertyAttribute]
public String[] Address { get; public set; }
    [JsonPropertyAttribute]
public Object[] Topics { get; public set; }
    [CompilerGeneratedAttribute]
public BlockParameter get_FromBlock();
    [CompilerGeneratedAttribute]
public void set_FromBlock(BlockParameter value);
    [CompilerGeneratedAttribute]
public BlockParameter get_ToBlock();
    [CompilerGeneratedAttribute]
public void set_ToBlock(BlockParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(String[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Topics();
    [CompilerGeneratedAttribute]
public void set_Topics(Object[] value);
}
public class Nethereum.RPC.Eth.DTOs.NewSubscriptionInput : object {
    [CompilerGeneratedAttribute]
private BlockParameter <FromBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Topics>k__BackingField;
    [JsonPropertyAttribute]
public BlockParameter FromBlock { get; public set; }
    [JsonPropertyAttribute]
public String[] Address { get; public set; }
    [JsonPropertyAttribute]
public Object[] Topics { get; public set; }
    [CompilerGeneratedAttribute]
public BlockParameter get_FromBlock();
    [CompilerGeneratedAttribute]
public void set_FromBlock(BlockParameter value);
    [CompilerGeneratedAttribute]
public String[] get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(String[] value);
    [CompilerGeneratedAttribute]
public Object[] get_Topics();
    [CompilerGeneratedAttribute]
public void set_Topics(Object[] value);
}
public class Nethereum.RPC.Eth.DTOs.StorageProof : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Proof>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Value>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger Key { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> Proof { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Value { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(HexBigInteger value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Proof();
    [CompilerGeneratedAttribute]
public void set_Proof(List`1<string> value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(HexBigInteger value);
}
public class Nethereum.RPC.Eth.DTOs.SyncingOutput : object {
    [CompilerGeneratedAttribute]
private bool <IsSyncing>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <StartingBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <CurrentBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <HighestBlock>k__BackingField;
    public bool IsSyncing { get; public set; }
    public HexBigInteger StartingBlock { get; public set; }
    public HexBigInteger CurrentBlock { get; public set; }
    public HexBigInteger HighestBlock { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSyncing();
    [CompilerGeneratedAttribute]
public void set_IsSyncing(bool value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_StartingBlock();
    [CompilerGeneratedAttribute]
public void set_StartingBlock(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_CurrentBlock();
    [CompilerGeneratedAttribute]
public void set_CurrentBlock(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_HighestBlock();
    [CompilerGeneratedAttribute]
public void set_HighestBlock(HexBigInteger value);
}
public class Nethereum.RPC.Eth.DTOs.Transaction : object {
    [CompilerGeneratedAttribute]
private string <TransactionHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <TransactionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlockHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Gas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <GasPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <MaxFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <MaxPriorityFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <R>k__BackingField;
    [CompilerGeneratedAttribute]
private string <S>k__BackingField;
    [CompilerGeneratedAttribute]
private string <V>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AccessList> <AccessList>k__BackingField;
    [JsonPropertyAttribute]
public string TransactionHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger TransactionIndex { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Type { get; public set; }
    [JsonPropertyAttribute]
public string BlockHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger BlockNumber { get; public set; }
    [JsonPropertyAttribute]
public string From { get; public set; }
    [JsonPropertyAttribute]
public string To { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Gas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger GasPrice { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger MaxFeePerGas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger MaxPriorityFeePerGas { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Value { get; public set; }
    [JsonPropertyAttribute]
public string Input { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Nonce { get; public set; }
    [JsonPropertyAttribute]
public string R { get; public set; }
    [JsonPropertyAttribute]
public string S { get; public set; }
    [JsonPropertyAttribute]
public string V { get; public set; }
    [JsonPropertyAttribute]
public List`1<AccessList> AccessList { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TransactionHash();
    [CompilerGeneratedAttribute]
public void set_TransactionHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_TransactionIndex();
    [CompilerGeneratedAttribute]
public void set_TransactionIndex(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_BlockHash();
    [CompilerGeneratedAttribute]
public void set_BlockHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_BlockNumber();
    [CompilerGeneratedAttribute]
public void set_BlockNumber(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Gas();
    [CompilerGeneratedAttribute]
public void set_Gas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_GasPrice();
    [CompilerGeneratedAttribute]
public void set_GasPrice(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_MaxFeePerGas();
    [CompilerGeneratedAttribute]
public void set_MaxFeePerGas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_MaxPriorityFeePerGas();
    [CompilerGeneratedAttribute]
public void set_MaxPriorityFeePerGas(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_R();
    [CompilerGeneratedAttribute]
public void set_R(string value);
    [CompilerGeneratedAttribute]
public string get_S();
    [CompilerGeneratedAttribute]
public void set_S(string value);
    [CompilerGeneratedAttribute]
public string get_V();
    [CompilerGeneratedAttribute]
public void set_V(string value);
    [CompilerGeneratedAttribute]
public List`1<AccessList> get_AccessList();
    [CompilerGeneratedAttribute]
public void set_AccessList(List`1<AccessList> value);
}
[ExtensionAttribute]
public static class Nethereum.RPC.Eth.DTOs.TransactionExtensions : object {
    [ExtensionAttribute]
public static bool Is1559(Transaction txn);
    [ExtensionAttribute]
public static bool IsLegacy(Transaction txn);
    [ExtensionAttribute]
public static bool IsToAnEmptyAddress(Transaction txn);
    [ExtensionAttribute]
public static bool IsToOrEmpty(Transaction txn, string address);
    [ExtensionAttribute]
public static bool IsTo(Transaction txn, string address);
    [ExtensionAttribute]
public static bool IsFrom(Transaction txn, string address);
    [ExtensionAttribute]
public static bool IsFromAndTo(Transaction txn, string from, string to);
    [ExtensionAttribute]
public static bool IsForContractCreation(Transaction transaction, TransactionReceipt transactionReceipt);
    [IteratorStateMachineAttribute("Nethereum.RPC.Eth.DTOs.TransactionExtensions/<GetTransactionLogs>d__8")]
[ExtensionAttribute]
public static IEnumerable`1<FilterLogVO> GetTransactionLogs(Transaction transaction, TransactionReceipt receipt);
    [ExtensionAttribute]
public static TransactionInput ConvertToTransactionInput(Transaction txn);
    [ExtensionAttribute]
public static String[] GetAllRelatedAddresses(Transaction tx, TransactionReceipt receipt);
}
public class Nethereum.RPC.Eth.DTOs.TransactionInput : CallInput {
    [CompilerGeneratedAttribute]
private HexBigInteger <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AccessList> <AccessList>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger Nonce { get; public set; }
    [JsonPropertyAttribute]
public List`1<AccessList> AccessList { get; public set; }
    public TransactionInput(string data, string addressTo);
    public TransactionInput(string data, string addressTo, HexBigInteger value);
    public TransactionInput(string data, string addressTo, string addressFrom, HexBigInteger gas, HexBigInteger value);
    public TransactionInput(string data, string addressFrom, HexBigInteger gas, HexBigInteger value);
    public TransactionInput(string data, string addressTo, string addressFrom, HexBigInteger gas, HexBigInteger gasPrice, HexBigInteger value);
    public TransactionInput(string data, HexBigInteger gas, string addressFrom);
    public TransactionInput(HexBigInteger type, string data, string addressTo, string addressFrom, HexBigInteger gas, HexBigInteger value, HexBigInteger maxFeePerGas, HexBigInteger maxPriorityFeePerGas);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(HexBigInteger value);
    [CompilerGeneratedAttribute]
public List`1<AccessList> get_AccessList();
    [CompilerGeneratedAttribute]
public void set_AccessList(List`1<AccessList> value);
}
public class Nethereum.RPC.Eth.DTOs.TransactionReceipt : object {
    [CompilerGeneratedAttribute]
private string <TransactionHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <TransactionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlockHash>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <BlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <CumulativeGasUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <GasUsed>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <EffectiveGasPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContractAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private JArray <Logs>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogsBloom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Root>k__BackingField;
    [JsonPropertyAttribute]
public string TransactionHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger TransactionIndex { get; public set; }
    [JsonPropertyAttribute]
public string BlockHash { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger BlockNumber { get; public set; }
    [JsonPropertyAttribute]
public string From { get; public set; }
    [JsonPropertyAttribute]
public string To { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger CumulativeGasUsed { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger GasUsed { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger EffectiveGasPrice { get; public set; }
    [JsonPropertyAttribute]
public string ContractAddress { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Status { get; public set; }
    [JsonPropertyAttribute]
public JArray Logs { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Type { get; public set; }
    [JsonPropertyAttribute]
public string LogsBloom { get; public set; }
    [JsonPropertyAttribute]
public string Root { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TransactionHash();
    [CompilerGeneratedAttribute]
public void set_TransactionHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_TransactionIndex();
    [CompilerGeneratedAttribute]
public void set_TransactionIndex(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_BlockHash();
    [CompilerGeneratedAttribute]
public void set_BlockHash(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_BlockNumber();
    [CompilerGeneratedAttribute]
public void set_BlockNumber(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public void set_From(string value);
    [CompilerGeneratedAttribute]
public string get_To();
    [CompilerGeneratedAttribute]
public void set_To(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_CumulativeGasUsed();
    [CompilerGeneratedAttribute]
public void set_CumulativeGasUsed(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_GasUsed();
    [CompilerGeneratedAttribute]
public void set_GasUsed(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_EffectiveGasPrice();
    [CompilerGeneratedAttribute]
public void set_EffectiveGasPrice(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_ContractAddress();
    [CompilerGeneratedAttribute]
public void set_ContractAddress(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HexBigInteger value);
    [CompilerGeneratedAttribute]
public JArray get_Logs();
    [CompilerGeneratedAttribute]
public void set_Logs(JArray value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_LogsBloom();
    [CompilerGeneratedAttribute]
public void set_LogsBloom(string value);
    [CompilerGeneratedAttribute]
public string get_Root();
    [CompilerGeneratedAttribute]
public void set_Root(string value);
    public Nullable`1<bool> HasErrors();
    public virtual bool Equals(object obj);
}
[ExtensionAttribute]
public static class Nethereum.RPC.Eth.DTOs.TransactionReceiptExtensions : object {
    private static bool TREAT_NULL_STATUS_AS_FAILURE;
    [ExtensionAttribute]
public static bool IsContractAddressEmptyOrEqual(TransactionReceipt receipt, string contractAddress);
    [ExtensionAttribute]
public static bool IsForContractCreation(TransactionReceiptVO receipt);
    [ExtensionAttribute]
public static bool IsContractAddressEqual(TransactionReceipt receipt, string address);
    [ExtensionAttribute]
public static bool Succeeded(TransactionReceipt receipt, bool treatNullStatusAsFailure);
    [ExtensionAttribute]
public static bool Failed(TransactionReceipt receipt, bool treatNullStatusAsFailure);
    [ExtensionAttribute]
public static bool HasLogs(TransactionReceipt receipt);
}
public class Nethereum.RPC.Eth.DTOs.TransactionReceiptVO : object {
    private static HexBigInteger UndefinedBlockNumber;
    [CompilerGeneratedAttribute]
private Block <Block>k__BackingField;
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionReceipt <TransactionReceipt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasVmStack>k__BackingField;
    public Block Block { get; protected set; }
    public Transaction Transaction { get; protected set; }
    public TransactionReceipt TransactionReceipt { get; protected set; }
    public bool HasError { get; protected set; }
    public HexBigInteger BlockTimestamp { get; }
    public string Error { get; protected set; }
    public bool HasVmStack { get; protected set; }
    public HexBigInteger BlockNumber { get; }
    public string TransactionHash { get; }
    public bool Succeeded { get; }
    public bool Failed { get; }
    public TransactionReceiptVO(Block block, Transaction transaction, TransactionReceipt transactionReceipt, bool hasError, string error, bool hasVmStack);
    private static TransactionReceiptVO();
    [CompilerGeneratedAttribute]
public Block get_Block();
    [CompilerGeneratedAttribute]
protected void set_Block(Block value);
    [CompilerGeneratedAttribute]
public Transaction get_Transaction();
    [CompilerGeneratedAttribute]
protected void set_Transaction(Transaction value);
    [CompilerGeneratedAttribute]
public TransactionReceipt get_TransactionReceipt();
    [CompilerGeneratedAttribute]
protected void set_TransactionReceipt(TransactionReceipt value);
    [CompilerGeneratedAttribute]
public bool get_HasError();
    [CompilerGeneratedAttribute]
protected void set_HasError(bool value);
    public HexBigInteger get_BlockTimestamp();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
protected void set_Error(string value);
    [CompilerGeneratedAttribute]
public bool get_HasVmStack();
    [CompilerGeneratedAttribute]
protected void set_HasVmStack(bool value);
    public virtual HexBigInteger get_BlockNumber();
    public virtual string get_TransactionHash();
    public virtual bool get_Succeeded();
    public virtual bool get_Failed();
    public virtual String[] GetAllRelatedAddresses();
    public virtual bool HasLogs();
}
public class Nethereum.RPC.Eth.DTOs.TransactionVO : object {
    [CompilerGeneratedAttribute]
private Transaction <Transaction>k__BackingField;
    [CompilerGeneratedAttribute]
private Block <Block>k__BackingField;
    public Transaction Transaction { get; }
    public Block Block { get; }
    public TransactionVO(Transaction transaction, Block block);
    [CompilerGeneratedAttribute]
public Transaction get_Transaction();
    [CompilerGeneratedAttribute]
public Block get_Block();
}
public class Nethereum.RPC.Eth.DTOs.Withdrawal : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <ValidatorIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private HexBigInteger <Amount>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger Index { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger ValidatorIndex { get; public set; }
    [JsonPropertyAttribute]
public string Address { get; public set; }
    [JsonPropertyAttribute]
public HexBigInteger Amount { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(HexBigInteger value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_ValidatorIndex();
    [CompilerGeneratedAttribute]
public void set_ValidatorIndex(HexBigInteger value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public HexBigInteger get_Amount();
    [CompilerGeneratedAttribute]
public void set_Amount(HexBigInteger value);
}
public class Nethereum.RPC.Eth.EthAccounts : GenericRpcRequestResponseHandlerNoParam`1<String[]> {
    public EthAccounts(IClient client);
}
public class Nethereum.RPC.Eth.EthChainId : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthChainId(IClient client);
}
public class Nethereum.RPC.Eth.EthCoinBase : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public EthCoinBase(IClient client);
}
public class Nethereum.RPC.Eth.EthCreateAccessList : RpcRequestResponseHandler`1<AccessListGasUsed> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthCreateAccessList(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<AccessListGasUsed> SendRequestAsync(TransactionInput transactionInput, BlockParameter block, object id);
    public sealed virtual Task`1<AccessListGasUsed> SendRequestAsync(TransactionInput transactionInput, object id);
    public sealed virtual RpcRequest BuildRequest(TransactionInput transactionInput, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.EthGasPrice : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthGasPrice(IClient client);
}
public class Nethereum.RPC.Eth.EthGetBalance : RpcRequestResponseHandler`1<HexBigInteger> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthGetBalance(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(string address, BlockParameter block, object id);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(string address, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBalance, HexBigInteger> CreateBatchItem(string address, BlockParameter block, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetBalance, HexBigInteger> CreateBatchItem(string address, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.EthGetBalance/<SendBatchRequestAsync>d__10")]
public sealed virtual Task`1<List`1<HexBigInteger>> SendBatchRequestAsync(String[] addresses, BlockParameter block);
    public sealed virtual Task`1<List`1<HexBigInteger>> SendBatchRequestAsync(String[] addresses);
    public sealed virtual RpcRequest BuildRequest(string address, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.EthGetCode : RpcRequestResponseHandler`1<string> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthGetCode(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<string> SendRequestAsync(string address, BlockParameter block, object id);
    public sealed virtual Task`1<string> SendRequestAsync(string address, object id);
    public sealed virtual RpcRequest BuildRequest(string address, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.EthGetProof : RpcRequestResponseHandler`1<AccountProof> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthGetProof(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<AccountProof> SendRequestAsync(string address, String[] storageKeys, BlockParameter block, object id);
    public sealed virtual Task`1<AccountProof> SendRequestAsync(string address, String[] storageKeys, object id);
    public sealed virtual RpcRequest BuildRequest(string address, String[] storageKeys, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.EthGetStorageAt : RpcRequestResponseHandler`1<string> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthGetStorageAt(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<string> SendRequestAsync(string address, HexBigInteger position, BlockParameter block, object id);
    public sealed virtual Task`1<string> SendRequestAsync(string address, HexBigInteger position, object id);
    public sealed virtual RpcRequest BuildRequest(string address, HexBigInteger position, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.EthMaxPriorityFeePerGas : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthMaxPriorityFeePerGas(IClient client);
}
public class Nethereum.RPC.Eth.EthProtocolVersion : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public EthProtocolVersion(IClient client);
}
public class Nethereum.RPC.Eth.EthSign : RpcRequestResponseHandler`1<string> {
    public EthSign(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(string address, string data, object id);
    public sealed virtual RpcRequest BuildRequest(string address, string data, object id);
}
public class Nethereum.RPC.Eth.EthSyncing : GenericRpcRequestResponseHandlerNoParam`1<object> {
    public EthSyncing(IClient client);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.EthSyncing/<SendRequestAsync>d__1")]
public sealed virtual Task`1<SyncingOutput> SendRequestAsync(object id);
    public static SyncingOutput ConvertResponseToSyncingOutput(object response);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<object> <>n__0(object id);
}
public class Nethereum.RPC.Eth.Exceptions.ContractDeploymentException : Exception {
    [CompilerGeneratedAttribute]
private TransactionReceipt <TransactionReceipt>k__BackingField;
    public TransactionReceipt TransactionReceipt { get; public set; }
    public ContractDeploymentException(string message, TransactionReceipt transactionReceipt);
    [CompilerGeneratedAttribute]
public TransactionReceipt get_TransactionReceipt();
    [CompilerGeneratedAttribute]
public void set_TransactionReceipt(TransactionReceipt value);
}
public class Nethereum.RPC.Eth.Filters.EthGetFilterChangesForBlockOrTransaction : RpcRequestResponseHandler`1<String[]> {
    public EthGetFilterChangesForBlockOrTransaction(IClient client);
    public sealed virtual Task`1<String[]> SendRequestAsync(HexBigInteger filterId, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
}
public class Nethereum.RPC.Eth.Filters.EthGetFilterChangesForEthNewFilter : RpcRequestResponseHandler`1<FilterLog[]> {
    public EthGetFilterChangesForEthNewFilter(IClient client);
    public sealed virtual Task`1<FilterLog[]> SendRequestAsync(HexBigInteger filterId, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
}
public class Nethereum.RPC.Eth.Filters.EthGetFilterLogsForBlockOrTransaction : RpcRequestResponseHandler`1<String[]> {
    public EthGetFilterLogsForBlockOrTransaction(IClient client);
    public sealed virtual Task`1<String[]> SendRequestAsync(HexBigInteger filterId, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
}
public class Nethereum.RPC.Eth.Filters.EthGetFilterLogsForEthNewFilter : RpcRequestResponseHandler`1<FilterLog[]> {
    public EthGetFilterLogsForEthNewFilter(IClient client);
    public sealed virtual Task`1<FilterLog[]> SendRequestAsync(HexBigInteger filterId, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
}
public class Nethereum.RPC.Eth.Filters.EthGetLogs : RpcRequestResponseHandler`1<FilterLog[]> {
    public EthGetLogs(IClient client);
    public sealed virtual Task`1<FilterLog[]> SendRequestAsync(NewFilterInput newFilter, object id);
    public sealed virtual RpcRequest BuildRequest(NewFilterInput newFilter, object id);
}
public class Nethereum.RPC.Eth.Filters.EthNewBlockFilter : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthNewBlockFilter(IClient client);
}
public class Nethereum.RPC.Eth.Filters.EthNewFilter : RpcRequestResponseHandler`1<HexBigInteger> {
    public EthNewFilter(IClient client);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(NewFilterInput newFilterInput, object id);
    public sealed virtual RpcRequest BuildRequest(NewFilterInput newFilterInput, object id);
}
public class Nethereum.RPC.Eth.Filters.EthNewPendingTransactionFilter : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthNewPendingTransactionFilter(IClient client);
}
public class Nethereum.RPC.Eth.Filters.EthUninstallFilter : RpcRequestResponseHandler`1<bool> {
    public EthUninstallFilter(IClient client);
    public sealed virtual Task`1<bool> SendRequestAsync(HexBigInteger filterId, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthGetFilterChangesForBlockOrTransaction {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
    public abstract virtual Task`1<String[]> SendRequestAsync(HexBigInteger filterId, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthGetFilterChangesForEthNewFilter {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
    public abstract virtual Task`1<FilterLog[]> SendRequestAsync(HexBigInteger filterId, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthGetFilterLogsForBlockOrTransaction {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
    public abstract virtual Task`1<String[]> SendRequestAsync(HexBigInteger filterId, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthGetFilterLogsForEthNewFilter {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
    public abstract virtual Task`1<FilterLog[]> SendRequestAsync(HexBigInteger filterId, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthGetLogs {
    public abstract virtual RpcRequest BuildRequest(NewFilterInput newFilter, object id);
    public abstract virtual Task`1<FilterLog[]> SendRequestAsync(NewFilterInput newFilter, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthNewBlockFilter {
}
public interface Nethereum.RPC.Eth.Filters.IEthNewFilter {
    public abstract virtual RpcRequest BuildRequest(NewFilterInput newFilterInput, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(NewFilterInput newFilterInput, object id);
}
public interface Nethereum.RPC.Eth.Filters.IEthNewPendingTransactionFilter {
}
public interface Nethereum.RPC.Eth.Filters.IEthUninstallFilter {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger filterId, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(HexBigInteger filterId, object id);
}
public interface Nethereum.RPC.Eth.IDefaultBlock {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
}
public interface Nethereum.RPC.Eth.IEthAccounts {
}
public interface Nethereum.RPC.Eth.IEthChainId {
}
public interface Nethereum.RPC.Eth.IEthCoinBase {
}
public interface Nethereum.RPC.Eth.IEthCreateAccessList {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(TransactionInput transactionInput, BlockParameter block, object id);
    public abstract virtual Task`1<AccessListGasUsed> SendRequestAsync(TransactionInput transactionInput, object id);
    public abstract virtual Task`1<AccessListGasUsed> SendRequestAsync(TransactionInput transactionInput, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.IEthGasPrice {
}
public interface Nethereum.RPC.Eth.IEthGetBalance {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(string address, BlockParameter block, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBalance, HexBigInteger> CreateBatchItem(string address, BlockParameter block, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetBalance, HexBigInteger> CreateBatchItem(string address, object id);
    public abstract virtual Task`1<List`1<HexBigInteger>> SendBatchRequestAsync(String[] addresses, BlockParameter block);
    public abstract virtual Task`1<List`1<HexBigInteger>> SendBatchRequestAsync(String[] addresses);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(string address, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(string address, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.IEthGetCode {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(string address, BlockParameter block, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string address, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string address, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.IEthGetProof {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(string address, String[] storageKeys, BlockParameter block, object id);
    public abstract virtual Task`1<AccountProof> SendRequestAsync(string address, String[] storageKeys, object id);
    public abstract virtual Task`1<AccountProof> SendRequestAsync(string address, String[] storageKeys, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.IEthGetStorageAt {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(string address, HexBigInteger position, BlockParameter block, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string address, HexBigInteger position, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string address, HexBigInteger position, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.IEthMaxPriorityFeePerGas {
}
public interface Nethereum.RPC.Eth.IEthProtocolVersion {
}
public interface Nethereum.RPC.Eth.IEthSign {
    public abstract virtual RpcRequest BuildRequest(string address, string data, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string address, string data, object id);
}
public interface Nethereum.RPC.Eth.IEthSyncing {
    public abstract virtual Task`1<SyncingOutput> SendRequestAsync(object id);
}
[ExtensionAttribute]
public static class Nethereum.RPC.Eth.Mappers.AccessListRPCMapper : object {
    [ExtensionAttribute]
public static List`1<AccessListItem> ToSignerAccessListItemArray(List`1<AccessList> accessLists);
}
[ExtensionAttribute]
public static class Nethereum.RPC.Eth.Mappers.AccountRPCMapper : object {
    [ExtensionAttribute]
public static Account ToAccount(AccountProof accountProof);
}
[ExtensionAttribute]
public static class Nethereum.RPC.Eth.Mappers.TransactionRPCMapper : object {
    [ExtensionAttribute]
public static IndexedSignedTransaction ToSignedTransaction(Transaction transaction, Nullable`1<BigInteger> chainId);
    [ExtensionAttribute]
public static List`1<IndexedSignedTransaction> ToSignedTransactions(IEnumerable`1<Transaction> transactions, Nullable`1<BigInteger> chainId);
}
public class Nethereum.RPC.Eth.Mining.EthGetWork : GenericRpcRequestResponseHandlerNoParam`1<String[]> {
    public EthGetWork(IClient client);
}
public class Nethereum.RPC.Eth.Mining.EthHashrate : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public EthHashrate(IClient client);
}
public class Nethereum.RPC.Eth.Mining.EthMining : GenericRpcRequestResponseHandlerNoParam`1<bool> {
    public EthMining(IClient client);
}
public class Nethereum.RPC.Eth.Mining.EthSubmitHashrate : RpcRequestResponseHandler`1<bool> {
    public EthSubmitHashrate(IClient client);
    public sealed virtual Task`1<bool> SendRequestAsync(string hashRate, string clientId, object id);
    public sealed virtual RpcRequest BuildRequest(string hashRate, string clientId, object id);
}
public class Nethereum.RPC.Eth.Mining.EthSubmitWork : RpcRequestResponseHandler`1<bool> {
    public EthSubmitWork(IClient client);
    public sealed virtual RpcRequest BuildRequest(string nonce, string header, string mix, object id);
    public sealed virtual Task`1<bool> SendRequestAsync(string nonce, string header, string mix, object id);
}
public interface Nethereum.RPC.Eth.Mining.IEthGetWork {
}
public interface Nethereum.RPC.Eth.Mining.IEthHashrate {
}
public interface Nethereum.RPC.Eth.Mining.IEthMining {
}
public interface Nethereum.RPC.Eth.Mining.IEthSubmitHashrate {
    public abstract virtual RpcRequest BuildRequest(string hashRate, string clientId, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(string hashRate, string clientId, object id);
}
public interface Nethereum.RPC.Eth.Mining.IEthSubmitWork {
    public abstract virtual RpcRequest BuildRequest(string nonce, string header, string mix, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(string nonce, string header, string mix, object id);
}
public class Nethereum.RPC.Eth.Services.EthApiBlockService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthBlockNumber <GetBlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockTransactionCountByHash <GetBlockTransactionCountByHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockTransactionCountByNumber <GetBlockTransactionCountByNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockWithTransactionsByHash <GetBlockWithTransactionsByHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockWithTransactionsByNumber <GetBlockWithTransactionsByNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockWithTransactionsHashesByHash <GetBlockWithTransactionsHashesByHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockWithTransactionsHashesByNumber <GetBlockWithTransactionsHashesByNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBlockReceiptsByNumber <GetBlockReceiptsByNumber>k__BackingField;
    public IEthBlockNumber GetBlockNumber { get; private set; }
    public IEthGetBlockTransactionCountByHash GetBlockTransactionCountByHash { get; private set; }
    public IEthGetBlockTransactionCountByNumber GetBlockTransactionCountByNumber { get; private set; }
    public IEthGetBlockWithTransactionsByHash GetBlockWithTransactionsByHash { get; private set; }
    public IEthGetBlockWithTransactionsByNumber GetBlockWithTransactionsByNumber { get; private set; }
    public IEthGetBlockWithTransactionsHashesByHash GetBlockWithTransactionsHashesByHash { get; private set; }
    public IEthGetBlockWithTransactionsHashesByNumber GetBlockWithTransactionsHashesByNumber { get; private set; }
    public IEthGetBlockReceiptsByNumber GetBlockReceiptsByNumber { get; private set; }
    public EthApiBlockService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthBlockNumber get_GetBlockNumber();
    [CompilerGeneratedAttribute]
private void set_GetBlockNumber(IEthBlockNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockTransactionCountByHash get_GetBlockTransactionCountByHash();
    [CompilerGeneratedAttribute]
private void set_GetBlockTransactionCountByHash(IEthGetBlockTransactionCountByHash value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockTransactionCountByNumber get_GetBlockTransactionCountByNumber();
    [CompilerGeneratedAttribute]
private void set_GetBlockTransactionCountByNumber(IEthGetBlockTransactionCountByNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockWithTransactionsByHash get_GetBlockWithTransactionsByHash();
    [CompilerGeneratedAttribute]
private void set_GetBlockWithTransactionsByHash(IEthGetBlockWithTransactionsByHash value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockWithTransactionsByNumber get_GetBlockWithTransactionsByNumber();
    [CompilerGeneratedAttribute]
private void set_GetBlockWithTransactionsByNumber(IEthGetBlockWithTransactionsByNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockWithTransactionsHashesByHash get_GetBlockWithTransactionsHashesByHash();
    [CompilerGeneratedAttribute]
private void set_GetBlockWithTransactionsHashesByHash(IEthGetBlockWithTransactionsHashesByHash value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockWithTransactionsHashesByNumber get_GetBlockWithTransactionsHashesByNumber();
    [CompilerGeneratedAttribute]
private void set_GetBlockWithTransactionsHashesByNumber(IEthGetBlockWithTransactionsHashesByNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBlockReceiptsByNumber get_GetBlockReceiptsByNumber();
    [CompilerGeneratedAttribute]
private void set_GetBlockReceiptsByNumber(IEthGetBlockReceiptsByNumber value);
}
public class Nethereum.RPC.Eth.Services.EthApiCompilerService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthGetCompilers <GetCompilers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthCompileLLL <CompileLLL>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthCompileSerpent <CompileSerpent>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthCompileSolidity <CompileSolidity>k__BackingField;
    public IEthGetCompilers GetCompilers { get; private set; }
    public IEthCompileLLL CompileLLL { get; private set; }
    public IEthCompileSerpent CompileSerpent { get; private set; }
    public IEthCompileSolidity CompileSolidity { get; private set; }
    public EthApiCompilerService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetCompilers get_GetCompilers();
    [CompilerGeneratedAttribute]
private void set_GetCompilers(IEthGetCompilers value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthCompileLLL get_CompileLLL();
    [CompilerGeneratedAttribute]
private void set_CompileLLL(IEthCompileLLL value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthCompileSerpent get_CompileSerpent();
    [CompilerGeneratedAttribute]
private void set_CompileSerpent(IEthCompileSerpent value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthCompileSolidity get_CompileSolidity();
    [CompilerGeneratedAttribute]
private void set_CompileSolidity(IEthCompileSolidity value);
}
public class Nethereum.RPC.Eth.Services.EthApiFilterService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthGetFilterChangesForBlockOrTransaction <GetFilterChangesForBlockOrTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetFilterChangesForEthNewFilter <GetFilterChangesForEthNewFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetFilterLogsForBlockOrTransaction <GetFilterLogsForBlockOrTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetFilterLogsForEthNewFilter <GetFilterLogsForEthNewFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthNewBlockFilter <NewBlockFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthNewFilter <NewFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthNewPendingTransactionFilter <NewPendingTransactionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthUninstallFilter <UninstallFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetLogs <GetLogs>k__BackingField;
    public IEthGetFilterChangesForBlockOrTransaction GetFilterChangesForBlockOrTransaction { get; private set; }
    public IEthGetFilterChangesForEthNewFilter GetFilterChangesForEthNewFilter { get; private set; }
    public IEthGetFilterLogsForBlockOrTransaction GetFilterLogsForBlockOrTransaction { get; private set; }
    public IEthGetFilterLogsForEthNewFilter GetFilterLogsForEthNewFilter { get; private set; }
    public IEthNewBlockFilter NewBlockFilter { get; private set; }
    public IEthNewFilter NewFilter { get; private set; }
    public IEthNewPendingTransactionFilter NewPendingTransactionFilter { get; private set; }
    public IEthUninstallFilter UninstallFilter { get; private set; }
    public IEthGetLogs GetLogs { get; private set; }
    public EthApiFilterService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetFilterChangesForBlockOrTransaction get_GetFilterChangesForBlockOrTransaction();
    [CompilerGeneratedAttribute]
private void set_GetFilterChangesForBlockOrTransaction(IEthGetFilterChangesForBlockOrTransaction value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetFilterChangesForEthNewFilter get_GetFilterChangesForEthNewFilter();
    [CompilerGeneratedAttribute]
private void set_GetFilterChangesForEthNewFilter(IEthGetFilterChangesForEthNewFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetFilterLogsForBlockOrTransaction get_GetFilterLogsForBlockOrTransaction();
    [CompilerGeneratedAttribute]
private void set_GetFilterLogsForBlockOrTransaction(IEthGetFilterLogsForBlockOrTransaction value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetFilterLogsForEthNewFilter get_GetFilterLogsForEthNewFilter();
    [CompilerGeneratedAttribute]
private void set_GetFilterLogsForEthNewFilter(IEthGetFilterLogsForEthNewFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthNewBlockFilter get_NewBlockFilter();
    [CompilerGeneratedAttribute]
private void set_NewBlockFilter(IEthNewBlockFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthNewFilter get_NewFilter();
    [CompilerGeneratedAttribute]
private void set_NewFilter(IEthNewFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthNewPendingTransactionFilter get_NewPendingTransactionFilter();
    [CompilerGeneratedAttribute]
private void set_NewPendingTransactionFilter(IEthNewPendingTransactionFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthUninstallFilter get_UninstallFilter();
    [CompilerGeneratedAttribute]
private void set_UninstallFilter(IEthUninstallFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetLogs get_GetLogs();
    [CompilerGeneratedAttribute]
private void set_GetLogs(IEthGetLogs value);
}
public class Nethereum.RPC.Eth.Services.EthApiMiningService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthSubmitHashrate <SubmitHashrate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthSubmitWork <SubmitWork>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetWork <GetWork>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthHashrate <Hashrate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthMining <IsMining>k__BackingField;
    public IEthSubmitHashrate SubmitHashrate { get; private set; }
    public IEthSubmitWork SubmitWork { get; private set; }
    public IEthGetWork GetWork { get; private set; }
    public IEthHashrate Hashrate { get; private set; }
    public IEthMining IsMining { get; private set; }
    public EthApiMiningService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSubmitHashrate get_SubmitHashrate();
    [CompilerGeneratedAttribute]
private void set_SubmitHashrate(IEthSubmitHashrate value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSubmitWork get_SubmitWork();
    [CompilerGeneratedAttribute]
private void set_SubmitWork(IEthSubmitWork value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetWork get_GetWork();
    [CompilerGeneratedAttribute]
private void set_GetWork(IEthGetWork value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthHashrate get_Hashrate();
    [CompilerGeneratedAttribute]
private void set_Hashrate(IEthHashrate value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthMining get_IsMining();
    [CompilerGeneratedAttribute]
private void set_IsMining(IEthMining value);
}
public class Nethereum.RPC.Eth.Services.EthApiTransactionsService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthGetTransactionByBlockHashAndIndex <GetTransactionByBlockHashAndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetTransactionByBlockNumberAndIndex <GetTransactionByBlockNumberAndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetTransactionByHash <GetTransactionByHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetTransactionCount <GetTransactionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetTransactionReceipt <GetTransactionReceipt>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthSendRawTransaction <SendRawTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthSendTransaction <SendTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthCall <Call>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthEstimateGas <EstimateGas>k__BackingField;
    public IEthGetTransactionByBlockHashAndIndex GetTransactionByBlockHashAndIndex { get; }
    public IEthGetTransactionByBlockNumberAndIndex GetTransactionByBlockNumberAndIndex { get; }
    public IEthGetTransactionByHash GetTransactionByHash { get; }
    public IEthGetTransactionCount GetTransactionCount { get; }
    public IEthGetTransactionReceipt GetTransactionReceipt { get; }
    public IEthSendRawTransaction SendRawTransaction { get; }
    public IEthSendTransaction SendTransaction { get; }
    public IEthCall Call { get; }
    public IEthEstimateGas EstimateGas { get; }
    public EthApiTransactionsService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetTransactionByBlockHashAndIndex get_GetTransactionByBlockHashAndIndex();
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetTransactionByBlockNumberAndIndex get_GetTransactionByBlockNumberAndIndex();
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetTransactionByHash get_GetTransactionByHash();
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetTransactionCount get_GetTransactionCount();
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetTransactionReceipt get_GetTransactionReceipt();
    [CompilerGeneratedAttribute]
public sealed virtual IEthSendRawTransaction get_SendRawTransaction();
    [CompilerGeneratedAttribute]
public sealed virtual IEthSendTransaction get_SendTransaction();
    [CompilerGeneratedAttribute]
public sealed virtual IEthCall get_Call();
    [CompilerGeneratedAttribute]
public sealed virtual IEthEstimateGas get_EstimateGas();
    public sealed virtual void SetDefaultBlock(BlockParameter blockParameter);
}
public class Nethereum.RPC.Eth.Services.EthApiUncleService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthGetUncleCountByBlockHash <GetUncleCountByBlockHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetUncleCountByBlockNumber <GetUncleCountByBlockNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetUncleByBlockHashAndIndex <GetUncleByBlockHashAndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetUncleByBlockNumberAndIndex <GetUncleByBlockNumberAndIndex>k__BackingField;
    public IEthGetUncleCountByBlockHash GetUncleCountByBlockHash { get; private set; }
    public IEthGetUncleCountByBlockNumber GetUncleCountByBlockNumber { get; private set; }
    public IEthGetUncleByBlockHashAndIndex GetUncleByBlockHashAndIndex { get; private set; }
    public IEthGetUncleByBlockNumberAndIndex GetUncleByBlockNumberAndIndex { get; private set; }
    public EthApiUncleService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetUncleCountByBlockHash get_GetUncleCountByBlockHash();
    [CompilerGeneratedAttribute]
private void set_GetUncleCountByBlockHash(IEthGetUncleCountByBlockHash value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetUncleCountByBlockNumber get_GetUncleCountByBlockNumber();
    [CompilerGeneratedAttribute]
private void set_GetUncleCountByBlockNumber(IEthGetUncleCountByBlockNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetUncleByBlockHashAndIndex get_GetUncleByBlockHashAndIndex();
    [CompilerGeneratedAttribute]
private void set_GetUncleByBlockHashAndIndex(IEthGetUncleByBlockHashAndIndex value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetUncleByBlockNumberAndIndex get_GetUncleByBlockNumberAndIndex();
    [CompilerGeneratedAttribute]
private void set_GetUncleByBlockNumberAndIndex(IEthGetUncleByBlockNumberAndIndex value);
}
public interface Nethereum.RPC.Eth.Services.IEthApiBlockService {
    public IEthBlockNumber GetBlockNumber { get; }
    public IEthGetBlockTransactionCountByHash GetBlockTransactionCountByHash { get; }
    public IEthGetBlockTransactionCountByNumber GetBlockTransactionCountByNumber { get; }
    public IEthGetBlockWithTransactionsByHash GetBlockWithTransactionsByHash { get; }
    public IEthGetBlockWithTransactionsByNumber GetBlockWithTransactionsByNumber { get; }
    public IEthGetBlockWithTransactionsHashesByHash GetBlockWithTransactionsHashesByHash { get; }
    public IEthGetBlockWithTransactionsHashesByNumber GetBlockWithTransactionsHashesByNumber { get; }
    public IEthGetBlockReceiptsByNumber GetBlockReceiptsByNumber { get; }
    public abstract virtual IEthBlockNumber get_GetBlockNumber();
    public abstract virtual IEthGetBlockTransactionCountByHash get_GetBlockTransactionCountByHash();
    public abstract virtual IEthGetBlockTransactionCountByNumber get_GetBlockTransactionCountByNumber();
    public abstract virtual IEthGetBlockWithTransactionsByHash get_GetBlockWithTransactionsByHash();
    public abstract virtual IEthGetBlockWithTransactionsByNumber get_GetBlockWithTransactionsByNumber();
    public abstract virtual IEthGetBlockWithTransactionsHashesByHash get_GetBlockWithTransactionsHashesByHash();
    public abstract virtual IEthGetBlockWithTransactionsHashesByNumber get_GetBlockWithTransactionsHashesByNumber();
    public abstract virtual IEthGetBlockReceiptsByNumber get_GetBlockReceiptsByNumber();
}
public interface Nethereum.RPC.Eth.Services.IEthApiCompilerService {
    public IEthCompileLLL CompileLLL { get; }
    public IEthCompileSerpent CompileSerpent { get; }
    public IEthCompileSolidity CompileSolidity { get; }
    public IEthGetCompilers GetCompilers { get; }
    public abstract virtual IEthCompileLLL get_CompileLLL();
    public abstract virtual IEthCompileSerpent get_CompileSerpent();
    public abstract virtual IEthCompileSolidity get_CompileSolidity();
    public abstract virtual IEthGetCompilers get_GetCompilers();
}
public interface Nethereum.RPC.Eth.Services.IEthApiFilterService {
    public IEthGetFilterChangesForBlockOrTransaction GetFilterChangesForBlockOrTransaction { get; }
    public IEthGetFilterChangesForEthNewFilter GetFilterChangesForEthNewFilter { get; }
    public IEthGetFilterLogsForBlockOrTransaction GetFilterLogsForBlockOrTransaction { get; }
    public IEthGetFilterLogsForEthNewFilter GetFilterLogsForEthNewFilter { get; }
    public IEthGetLogs GetLogs { get; }
    public IEthNewBlockFilter NewBlockFilter { get; }
    public IEthNewFilter NewFilter { get; }
    public IEthNewPendingTransactionFilter NewPendingTransactionFilter { get; }
    public IEthUninstallFilter UninstallFilter { get; }
    public abstract virtual IEthGetFilterChangesForBlockOrTransaction get_GetFilterChangesForBlockOrTransaction();
    public abstract virtual IEthGetFilterChangesForEthNewFilter get_GetFilterChangesForEthNewFilter();
    public abstract virtual IEthGetFilterLogsForBlockOrTransaction get_GetFilterLogsForBlockOrTransaction();
    public abstract virtual IEthGetFilterLogsForEthNewFilter get_GetFilterLogsForEthNewFilter();
    public abstract virtual IEthGetLogs get_GetLogs();
    public abstract virtual IEthNewBlockFilter get_NewBlockFilter();
    public abstract virtual IEthNewFilter get_NewFilter();
    public abstract virtual IEthNewPendingTransactionFilter get_NewPendingTransactionFilter();
    public abstract virtual IEthUninstallFilter get_UninstallFilter();
}
public interface Nethereum.RPC.Eth.Services.IEthApiMiningService {
    public IEthGetWork GetWork { get; }
    public IEthHashrate Hashrate { get; }
    public IEthMining IsMining { get; }
    public IEthSubmitHashrate SubmitHashrate { get; }
    public IEthSubmitWork SubmitWork { get; }
    public abstract virtual IEthGetWork get_GetWork();
    public abstract virtual IEthHashrate get_Hashrate();
    public abstract virtual IEthMining get_IsMining();
    public abstract virtual IEthSubmitHashrate get_SubmitHashrate();
    public abstract virtual IEthSubmitWork get_SubmitWork();
}
public interface Nethereum.RPC.Eth.Services.IEthApiTransactionsService {
    public IEthCall Call { get; }
    public IEthEstimateGas EstimateGas { get; }
    public IEthGetTransactionByBlockHashAndIndex GetTransactionByBlockHashAndIndex { get; }
    public IEthGetTransactionByBlockNumberAndIndex GetTransactionByBlockNumberAndIndex { get; }
    public IEthGetTransactionByHash GetTransactionByHash { get; }
    public IEthGetTransactionCount GetTransactionCount { get; }
    public IEthGetTransactionReceipt GetTransactionReceipt { get; }
    public IEthSendRawTransaction SendRawTransaction { get; }
    public IEthSendTransaction SendTransaction { get; }
    public abstract virtual IEthCall get_Call();
    public abstract virtual IEthEstimateGas get_EstimateGas();
    public abstract virtual IEthGetTransactionByBlockHashAndIndex get_GetTransactionByBlockHashAndIndex();
    public abstract virtual IEthGetTransactionByBlockNumberAndIndex get_GetTransactionByBlockNumberAndIndex();
    public abstract virtual IEthGetTransactionByHash get_GetTransactionByHash();
    public abstract virtual IEthGetTransactionCount get_GetTransactionCount();
    public abstract virtual IEthGetTransactionReceipt get_GetTransactionReceipt();
    public abstract virtual IEthSendRawTransaction get_SendRawTransaction();
    public abstract virtual IEthSendTransaction get_SendTransaction();
    public abstract virtual void SetDefaultBlock(BlockParameter blockParameter);
}
public interface Nethereum.RPC.Eth.Services.IEthApiUncleService {
    public IEthGetUncleByBlockHashAndIndex GetUncleByBlockHashAndIndex { get; }
    public IEthGetUncleByBlockNumberAndIndex GetUncleByBlockNumberAndIndex { get; }
    public IEthGetUncleCountByBlockHash GetUncleCountByBlockHash { get; }
    public IEthGetUncleCountByBlockNumber GetUncleCountByBlockNumber { get; }
    public abstract virtual IEthGetUncleByBlockHashAndIndex get_GetUncleByBlockHashAndIndex();
    public abstract virtual IEthGetUncleByBlockNumberAndIndex get_GetUncleByBlockNumberAndIndex();
    public abstract virtual IEthGetUncleCountByBlockHash get_GetUncleCountByBlockHash();
    public abstract virtual IEthGetUncleCountByBlockNumber get_GetUncleCountByBlockNumber();
}
public class Nethereum.RPC.Eth.Subscriptions.EthLogsSubscription : RpcStreamingSubscriptionEventResponseHandler`1<FilterLog> {
    private EthLogsSubscriptionRequestBuilder _ethLogsSubscriptionRequestBuilder;
    public EthLogsSubscription(IStreamingClient client);
    public Task SubscribeAsync(NewFilterInput filterInput, object id);
    public RpcRequest BuildRequest(NewFilterInput filterInput, object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthLogsSubscriptionRequestBuilder : RpcRequestBuilder {
    public RpcRequest BuildRequest(NewFilterInput filterInput, object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthNewBlockHeadersSubscription : RpcStreamingSubscriptionEventResponseHandler`1<Block> {
    private EthNewBlockHeadersSubscriptionRequestBuilder _ethNewBlockHeadersSubscriptionRequestBuilder;
    public EthNewBlockHeadersSubscription(IStreamingClient client);
    public Task SubscribeAsync(object id);
    public RpcRequest BuildRequest(object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthNewBlockHeadersSubscriptionRequestBuilder : RpcRequestBuilder {
    public virtual RpcRequest BuildRequest(object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthNewPendingTransactionSubscription : RpcStreamingSubscriptionEventResponseHandler`1<string> {
    private EthNewPendingTransactionSubscriptionRequestBuilder _builder;
    public EthNewPendingTransactionSubscription(IStreamingClient client);
    public Task SubscribeAsync(object id);
    public RpcRequest BuildRequest(object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthNewPendingTransactionSubscriptionRequestBuilder : RpcRequestBuilder {
    public virtual RpcRequest BuildRequest(object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthSyncingSubscription : RpcStreamingSubscriptionEventResponseHandler`1<JObject> {
    private EthSyncingSubscriptionRequestBuilder _builder;
    public EthSyncingSubscription(IStreamingClient client);
    public Task SubscribeAsync(object id);
    public RpcRequest BuildRequest(object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthSyncingSubscriptionRequestBuilder : RpcRequestBuilder {
    public virtual RpcRequest BuildRequest(object id);
}
public class Nethereum.RPC.Eth.Subscriptions.EthUnsubscribeRequestBuilder : RpcRequestBuilder {
    public sealed virtual RpcRequest BuildRequest(string subscriptionHash, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthCall : RpcRequestResponseHandler`1<string> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthCall(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<string> SendRequestAsync(CallInput callInput, BlockParameter block, object id);
    public sealed virtual Task`1<string> SendRequestAsync(CallInput callInput, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthCall, string> CreateBatchItem(CallInput callInput, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthCall, string> CreateBatchItem(CallInput callInput, BlockParameter block, object id);
    public sealed virtual Task`1<List`1<string>> SendBatchRequestAsync(CallInput[] callInputs);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Transactions.EthCall/<SendBatchRequestAsync>d__10")]
public sealed virtual Task`1<List`1<string>> SendBatchRequestAsync(CallInput[] callInputs, BlockParameter block);
    public sealed virtual RpcRequest BuildRequest(CallInput callInput, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthEstimateGas : RpcRequestResponseHandler`1<HexBigInteger> {
    public EthEstimateGas(IClient client);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(CallInput callInput, object id);
    public sealed virtual RpcRequest BuildRequest(CallInput callInput, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthFeeHistory : RpcRequestResponseHandler`1<FeeHistoryResult> {
    [CompilerGeneratedAttribute]
private static bool <UseBlockCountAsNumber>k__BackingField;
    public static bool UseBlockCountAsNumber { get; public set; }
    public EthFeeHistory(IClient client);
    [CompilerGeneratedAttribute]
public static bool get_UseBlockCountAsNumber();
    [CompilerGeneratedAttribute]
public static void set_UseBlockCountAsNumber(bool value);
    public sealed virtual Task`1<FeeHistoryResult> SendRequestAsync(HexBigInteger blockCount, BlockParameter highestBlockNumber, Decimal[] rewardPercentiles, object id);
    private static void ValidateBlockCountRange(BigInteger blockCount);
    private static void ValidateRewardPercentiles(Decimal[] rewardPercentiles);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger blockCount, BlockParameter highestBlockNumber, Decimal[] rewardPercentiles, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthGetTransactionByBlockHashAndIndex : RpcRequestResponseHandler`1<Transaction> {
    public EthGetTransactionByBlockHashAndIndex(IClient client);
    public sealed virtual Task`1<Transaction> SendRequestAsync(string blockHash, HexBigInteger transactionIndex, object id);
    public sealed virtual RpcRequest BuildRequest(string blockHash, HexBigInteger transactionIndex, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthGetTransactionByBlockNumberAndIndex : RpcRequestResponseHandler`1<Transaction> {
    public EthGetTransactionByBlockNumberAndIndex(IClient client);
    public sealed virtual Task`1<Transaction> SendRequestAsync(HexBigInteger blockNumber, HexBigInteger transactionIndex, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger blockNumber, HexBigInteger transactionIndex, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthGetTransactionByHash : RpcRequestResponseHandler`1<Transaction> {
    public EthGetTransactionByHash(IClient client);
    public sealed virtual Task`1<Transaction> SendRequestAsync(string hashTransaction, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetTransactionByHash, Transaction> CreateBatchItem(string transactionHash, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Transactions.EthGetTransactionByHash/<SendBatchRequestAsync>d__3")]
public sealed virtual Task`1<List`1<Transaction>> SendBatchRequestAsync(String[] transactionHashes);
    public sealed virtual RpcRequest BuildRequest(string hashTransaction, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthGetTransactionCount : RpcRequestResponseHandler`1<HexBigInteger> {
    [CompilerGeneratedAttribute]
private BlockParameter <DefaultBlock>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public EthGetTransactionCount(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual BlockParameter get_DefaultBlock();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultBlock(BlockParameter value);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(string address, BlockParameter block, object id);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(string address, object id);
    public sealed virtual RpcRequest BuildRequest(string address, BlockParameter block, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthGetTransactionReceipt : RpcRequestResponseHandler`1<TransactionReceipt> {
    public EthGetTransactionReceipt(IClient client);
    public sealed virtual Task`1<TransactionReceipt> SendRequestAsync(string transactionHash, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthGetTransactionReceipt, TransactionReceipt> CreateBatchItem(string transactionHash, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Transactions.EthGetTransactionReceipt/<SendBatchRequestAsync>d__3")]
public sealed virtual Task`1<List`1<TransactionReceipt>> SendBatchRequestAsync(String[] transactionHashes);
    public sealed virtual RpcRequest BuildRequest(string transactionHash, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthSendRawTransaction : RpcRequestResponseHandler`1<string> {
    public EthSendRawTransaction(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(string signedTransactionData, object id);
    public sealed virtual RpcRequestResponseBatchItem`2<EthSendRawTransaction, string> CreateBatchItem(string signedTransactionData, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Eth.Transactions.EthSendRawTransaction/<SendBatchRequestAsync>d__3")]
public sealed virtual Task`1<List`1<string>> SendBatchRequestAsync(String[] signedTransactionDatas);
    public sealed virtual RpcRequest BuildRequest(string signedTransactionData, object id);
}
public class Nethereum.RPC.Eth.Transactions.EthSendTransaction : RpcRequestResponseHandler`1<string> {
    public EthSendTransaction(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(TransactionInput input, object id);
    public sealed virtual RpcRequest BuildRequest(TransactionInput input, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthCall {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(CallInput callInput, BlockParameter block, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthCall, string> CreateBatchItem(CallInput callInput, BlockParameter block, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthCall, string> CreateBatchItem(CallInput callInput, object id);
    public abstract virtual Task`1<List`1<string>> SendBatchRequestAsync(CallInput[] callInputs);
    public abstract virtual Task`1<List`1<string>> SendBatchRequestAsync(CallInput[] callInputs, BlockParameter block);
    public abstract virtual Task`1<string> SendRequestAsync(CallInput callInput, object id);
    public abstract virtual Task`1<string> SendRequestAsync(CallInput callInput, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthEstimateGas {
    public abstract virtual RpcRequest BuildRequest(CallInput callInput, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(CallInput callInput, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthFeeHistory {
    public abstract virtual Task`1<FeeHistoryResult> SendRequestAsync(HexBigInteger blockCount, BlockParameter highestBlockNumber, Decimal[] rewardPercentiles, object id);
    public abstract virtual RpcRequest BuildRequest(HexBigInteger blockCount, BlockParameter highestBlockNumber, Decimal[] rewardPercentiles, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthGetTransactionByBlockHashAndIndex {
    public abstract virtual RpcRequest BuildRequest(string blockHash, HexBigInteger transactionIndex, object id);
    public abstract virtual Task`1<Transaction> SendRequestAsync(string blockHash, HexBigInteger transactionIndex, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthGetTransactionByBlockNumberAndIndex {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger blockNumber, HexBigInteger transactionIndex, object id);
    public abstract virtual Task`1<Transaction> SendRequestAsync(HexBigInteger blockNumber, HexBigInteger transactionIndex, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthGetTransactionByHash {
    public abstract virtual RpcRequest BuildRequest(string hashTransaction, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetTransactionByHash, Transaction> CreateBatchItem(string transactionHash, object id);
    public abstract virtual Task`1<List`1<Transaction>> SendBatchRequestAsync(String[] transactionHashes);
    public abstract virtual Task`1<Transaction> SendRequestAsync(string hashTransaction, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthGetTransactionCount {
    public BlockParameter DefaultBlock { get; public set; }
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual RpcRequest BuildRequest(string address, BlockParameter block, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(string address, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(string address, BlockParameter block, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthGetTransactionReceipt {
    public abstract virtual RpcRequest BuildRequest(string transactionHash, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthGetTransactionReceipt, TransactionReceipt> CreateBatchItem(string transactionHash, object id);
    public abstract virtual Task`1<List`1<TransactionReceipt>> SendBatchRequestAsync(String[] transactionHashes);
    public abstract virtual Task`1<TransactionReceipt> SendRequestAsync(string transactionHash, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthSendRawTransaction {
    public abstract virtual RpcRequest BuildRequest(string signedTransactionData, object id);
    public abstract virtual RpcRequestResponseBatchItem`2<EthSendRawTransaction, string> CreateBatchItem(string signedTransactionData, object id);
    public abstract virtual Task`1<List`1<string>> SendBatchRequestAsync(String[] signedTransactionDatas);
    public abstract virtual Task`1<string> SendRequestAsync(string signedTransactionData, object id);
}
public interface Nethereum.RPC.Eth.Transactions.IEthSendTransaction {
    public abstract virtual RpcRequest BuildRequest(TransactionInput input, object id);
    public abstract virtual Task`1<string> SendRequestAsync(TransactionInput input, object id);
}
public class Nethereum.RPC.Eth.Uncles.EthGetUncleByBlockHashAndIndex : RpcRequestResponseHandler`1<BlockWithTransactionHashes> {
    public EthGetUncleByBlockHashAndIndex(IClient client);
    public sealed virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(string blockHash, HexBigInteger uncleIndex, object id);
    public sealed virtual RpcRequest BuildRequest(string blockHash, HexBigInteger uncleIndex, object id);
}
public class Nethereum.RPC.Eth.Uncles.EthGetUncleByBlockNumberAndIndex : RpcRequestResponseHandler`1<BlockWithTransactionHashes> {
    public EthGetUncleByBlockNumberAndIndex(IClient client);
    public sealed virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(BlockParameter blockParameter, HexBigInteger uncleIndex, object id);
    public sealed virtual RpcRequest BuildRequest(BlockParameter blockParameter, HexBigInteger uncleIndex, object id);
}
public class Nethereum.RPC.Eth.Uncles.EthGetUncleCountByBlockHash : RpcRequestResponseHandler`1<HexBigInteger> {
    public EthGetUncleCountByBlockHash(IClient client);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(string hash, object id);
    public sealed virtual RpcRequest BuildRequest(string hash, object id);
}
public class Nethereum.RPC.Eth.Uncles.EthGetUncleCountByBlockNumber : RpcRequestResponseHandler`1<HexBigInteger> {
    public EthGetUncleCountByBlockNumber(IClient client);
    public sealed virtual Task`1<HexBigInteger> SendRequestAsync(HexBigInteger blockNumber, object id);
    public sealed virtual RpcRequest BuildRequest(HexBigInteger blockNumber, object id);
}
public interface Nethereum.RPC.Eth.Uncles.IEthGetUncleByBlockHashAndIndex {
    public abstract virtual RpcRequest BuildRequest(string blockHash, HexBigInteger uncleIndex, object id);
    public abstract virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(string blockHash, HexBigInteger uncleIndex, object id);
}
public interface Nethereum.RPC.Eth.Uncles.IEthGetUncleByBlockNumberAndIndex {
    public abstract virtual RpcRequest BuildRequest(BlockParameter blockParameter, HexBigInteger uncleIndex, object id);
    public abstract virtual Task`1<BlockWithTransactionHashes> SendRequestAsync(BlockParameter blockParameter, HexBigInteger uncleIndex, object id);
}
public interface Nethereum.RPC.Eth.Uncles.IEthGetUncleCountByBlockHash {
    public abstract virtual RpcRequest BuildRequest(string hash, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(string hash, object id);
}
public interface Nethereum.RPC.Eth.Uncles.IEthGetUncleCountByBlockNumber {
    public abstract virtual RpcRequest BuildRequest(HexBigInteger blockNumber, object id);
    public abstract virtual Task`1<HexBigInteger> SendRequestAsync(HexBigInteger blockNumber, object id);
}
public class Nethereum.RPC.EthApiService : RpcClientWrapper {
    private BlockParameter _defaultBlock;
    private ITransactionManager _transactionManager;
    [CompilerGeneratedAttribute]
private IEthChainId <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthAccounts <Accounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthCoinBase <CoinBase>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGasPrice <GasPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetBalance <GetBalance>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetCode <GetCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetStorageAt <GetStorageAt>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthProtocolVersion <ProtocolVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthSign <Sign>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthSyncing <Syncing>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiTransactionsService <Transactions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiUncleService <Uncles>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiMiningService <Mining>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiBlockService <Blocks>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiFilterService <Filters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthFeeHistory <FeeHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiCompilerService <Compile>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostWalletService <HostWallet>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthGetProof <GetProof>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthCreateAccessList <CreateAccessList>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthChainProofValidationService <ChainProofValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountSigningService <AccountSigning>k__BackingField;
    public BlockParameter DefaultBlock { get; public set; }
    public IEthChainId ChainId { get; private set; }
    public IEthAccounts Accounts { get; private set; }
    public IEthCoinBase CoinBase { get; private set; }
    public IEthGasPrice GasPrice { get; private set; }
    public IEthGetBalance GetBalance { get; }
    public IEthGetCode GetCode { get; }
    public IEthGetStorageAt GetStorageAt { get; }
    public IEthProtocolVersion ProtocolVersion { get; private set; }
    public IEthSign Sign { get; private set; }
    public IEthSyncing Syncing { get; private set; }
    public IEthApiTransactionsService Transactions { get; }
    public IEthApiUncleService Uncles { get; private set; }
    public IEthApiMiningService Mining { get; private set; }
    public IEthApiBlockService Blocks { get; private set; }
    public IEthApiFilterService Filters { get; private set; }
    public IEthFeeHistory FeeHistory { get; private set; }
    public IEthApiCompilerService Compile { get; private set; }
    public IHostWalletService HostWallet { get; private set; }
    public IEthGetProof GetProof { get; private set; }
    public IEthCreateAccessList CreateAccessList { get; private set; }
    public IEthChainProofValidationService ChainProofValidation { get; private set; }
    public ITransactionManager TransactionManager { get; public set; }
    public IAccountSigningService AccountSigning { get; public set; }
    public EthApiService(IClient client);
    public EthApiService(IClient client, ITransactionManager transactionManager);
    public sealed virtual BlockParameter get_DefaultBlock();
    public sealed virtual void set_DefaultBlock(BlockParameter value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthChainId get_ChainId();
    [CompilerGeneratedAttribute]
private void set_ChainId(IEthChainId value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthAccounts get_Accounts();
    [CompilerGeneratedAttribute]
private void set_Accounts(IEthAccounts value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthCoinBase get_CoinBase();
    [CompilerGeneratedAttribute]
private void set_CoinBase(IEthCoinBase value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGasPrice get_GasPrice();
    [CompilerGeneratedAttribute]
private void set_GasPrice(IEthGasPrice value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetBalance get_GetBalance();
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetCode get_GetCode();
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetStorageAt get_GetStorageAt();
    [CompilerGeneratedAttribute]
public sealed virtual IEthProtocolVersion get_ProtocolVersion();
    [CompilerGeneratedAttribute]
private void set_ProtocolVersion(IEthProtocolVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSign get_Sign();
    [CompilerGeneratedAttribute]
private void set_Sign(IEthSign value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthSyncing get_Syncing();
    [CompilerGeneratedAttribute]
private void set_Syncing(IEthSyncing value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiTransactionsService get_Transactions();
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiUncleService get_Uncles();
    [CompilerGeneratedAttribute]
private void set_Uncles(IEthApiUncleService value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiMiningService get_Mining();
    [CompilerGeneratedAttribute]
private void set_Mining(IEthApiMiningService value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiBlockService get_Blocks();
    [CompilerGeneratedAttribute]
private void set_Blocks(IEthApiBlockService value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiFilterService get_Filters();
    [CompilerGeneratedAttribute]
private void set_Filters(IEthApiFilterService value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthFeeHistory get_FeeHistory();
    [CompilerGeneratedAttribute]
private void set_FeeHistory(IEthFeeHistory value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiCompilerService get_Compile();
    [CompilerGeneratedAttribute]
private void set_Compile(IEthApiCompilerService value);
    [CompilerGeneratedAttribute]
public sealed virtual IHostWalletService get_HostWallet();
    [CompilerGeneratedAttribute]
private void set_HostWallet(IHostWalletService value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthGetProof get_GetProof();
    [CompilerGeneratedAttribute]
private void set_GetProof(IEthGetProof value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthCreateAccessList get_CreateAccessList();
    [CompilerGeneratedAttribute]
private void set_CreateAccessList(IEthCreateAccessList value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthChainProofValidationService get_ChainProofValidation();
    [CompilerGeneratedAttribute]
private void set_ChainProofValidation(IEthChainProofValidationService value);
    public virtual IEtherTransferService GetEtherTransferService();
    public virtual ITransactionManager get_TransactionManager();
    public virtual void set_TransactionManager(ITransactionManager value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccountSigningService get_AccountSigning();
    [CompilerGeneratedAttribute]
public void set_AccountSigning(IAccountSigningService value);
    private void SetDefaultBlock();
}
public class Nethereum.RPC.Fee1559Suggestions.Fee1559 : object {
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <BaseFee>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <MaxPriorityFeePerGas>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <MaxFeePerGas>k__BackingField;
    public Nullable`1<BigInteger> BaseFee { get; public set; }
    public Nullable`1<BigInteger> MaxPriorityFeePerGas { get; public set; }
    public Nullable`1<BigInteger> MaxFeePerGas { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_BaseFee();
    [CompilerGeneratedAttribute]
public void set_BaseFee(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_MaxPriorityFeePerGas();
    [CompilerGeneratedAttribute]
public void set_MaxPriorityFeePerGas(Nullable`1<BigInteger> value);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_MaxFeePerGas();
    [CompilerGeneratedAttribute]
public void set_MaxFeePerGas(Nullable`1<BigInteger> value);
}
public interface Nethereum.RPC.Fee1559Suggestions.IFee1559SuggestionStrategy {
    public abstract virtual Task`1<Fee1559> SuggestFeeAsync(Nullable`1<BigInteger> maxPriorityFeePerGas);
}
public class Nethereum.RPC.Fee1559Suggestions.MedianPriorityFeeHistorySuggestionStrategy : object {
    [CompilerGeneratedAttribute]
private static int <FeeHistoryNumberOfBlocks>k__BackingField;
    public static decimal FEE_HISTORY_PERCENTILE;
    public static long PRIORITY_FEE_ESTIMATION_TRIGGER;
    [CompilerGeneratedAttribute]
private static long <DefaultPriorityFee>k__BackingField;
    [CompilerGeneratedAttribute]
private static Fee1559 <FallbackFeeSuggestion>k__BackingField;
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    private IEthGetBlockWithTransactionsHashesByNumber _ethGetBlockWithTransactionsHashes;
    private IEthFeeHistory _ethFeeHistory;
    public static int PRIORITY_FEE_INCREASE_BOUNDARY;
    public static int FeeHistoryNumberOfBlocks { get; public set; }
    public static long DefaultPriorityFee { get; public set; }
    public static Fee1559 FallbackFeeSuggestion { get; public set; }
    public IClient Client { get; public set; }
    public MedianPriorityFeeHistorySuggestionStrategy(IClient client);
    private static MedianPriorityFeeHistorySuggestionStrategy();
    [CompilerGeneratedAttribute]
public static int get_FeeHistoryNumberOfBlocks();
    [CompilerGeneratedAttribute]
public static void set_FeeHistoryNumberOfBlocks(int value);
    [CompilerGeneratedAttribute]
public static long get_DefaultPriorityFee();
    [CompilerGeneratedAttribute]
public static void set_DefaultPriorityFee(long value);
    [CompilerGeneratedAttribute]
public static Fee1559 get_FallbackFeeSuggestion();
    [CompilerGeneratedAttribute]
public static void set_FallbackFeeSuggestion(Fee1559 value);
    [CompilerGeneratedAttribute]
public IClient get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(IClient value);
    [AsyncStateMachineAttribute("Nethereum.RPC.Fee1559Suggestions.MedianPriorityFeeHistorySuggestionStrategy/<EstimatePriorityFeeAsync>d__22")]
public Task`1<Nullable`1<BigInteger>> EstimatePriorityFeeAsync(BigInteger baseFee, HexBigInteger blockNumber);
    [AsyncStateMachineAttribute("Nethereum.RPC.Fee1559Suggestions.MedianPriorityFeeHistorySuggestionStrategy/<SuggestFeeAsync>d__23")]
public sealed virtual Task`1<Fee1559> SuggestFeeAsync(Nullable`1<BigInteger> maxPriorityFeePerGas);
    public virtual double GetBaseFeeMultiplier(BigInteger baseFee);
    public Nullable`1<BigInteger> EstimatePriorityFee(FeeHistoryResult feeHistory);
    public Fee1559 SuggestMaxFeeUsingMultiplier(Nullable`1<BigInteger> maxPriorityFeePerGas, HexBigInteger baseFee);
}
public class Nethereum.RPC.Fee1559Suggestions.SimpleFeeSuggestionStrategy : object {
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    private EthGetBlockWithTransactionsHashesByNumber _ethGetBlockWithTransactionsHashes;
    public static BigInteger DEFAULT_MAX_PRIORITY_FEE_PER_GAS;
    public IClient Client { get; public set; }
    public SimpleFeeSuggestionStrategy(IClient client);
    private static SimpleFeeSuggestionStrategy();
    [CompilerGeneratedAttribute]
public IClient get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(IClient value);
    [AsyncStateMachineAttribute("Nethereum.RPC.Fee1559Suggestions.SimpleFeeSuggestionStrategy/<SuggestFeeAsync>d__7")]
public sealed virtual Task`1<Fee1559> SuggestFeeAsync(Nullable`1<BigInteger> maxPriorityFeePerGas);
}
public class Nethereum.RPC.Fee1559Suggestions.TimePreferenceFeeSuggestionStrategy : object {
    [CompilerGeneratedAttribute]
private decimal <SampleMin>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <SampleMax>k__BackingField;
    [CompilerGeneratedAttribute]
private double <MaxTimeFactor>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <ExtraTipRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <FallbackTip>k__BackingField;
    private EthFeeHistory ethFeeHistory;
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    public decimal SampleMin { get; public set; }
    public decimal SampleMax { get; public set; }
    public double MaxTimeFactor { get; public set; }
    public decimal ExtraTipRatio { get; public set; }
    public BigInteger FallbackTip { get; public set; }
    public IClient Client { get; public set; }
    public TimePreferenceFeeSuggestionStrategy(IClient client);
    [CompilerGeneratedAttribute]
public decimal get_SampleMin();
    [CompilerGeneratedAttribute]
public void set_SampleMin(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_SampleMax();
    [CompilerGeneratedAttribute]
public void set_SampleMax(decimal value);
    [CompilerGeneratedAttribute]
public double get_MaxTimeFactor();
    [CompilerGeneratedAttribute]
public void set_MaxTimeFactor(double value);
    [CompilerGeneratedAttribute]
public decimal get_ExtraTipRatio();
    [CompilerGeneratedAttribute]
public void set_ExtraTipRatio(decimal value);
    [CompilerGeneratedAttribute]
public BigInteger get_FallbackTip();
    [CompilerGeneratedAttribute]
public void set_FallbackTip(BigInteger value);
    [CompilerGeneratedAttribute]
public IClient get_Client();
    [CompilerGeneratedAttribute]
public void set_Client(IClient value);
    [AsyncStateMachineAttribute("Nethereum.RPC.Fee1559Suggestions.TimePreferenceFeeSuggestionStrategy/<SuggestFeeAsync>d__27")]
public sealed virtual Task`1<Fee1559> SuggestFeeAsync(Nullable`1<BigInteger> maxPriorityFeePerGas);
    [AsyncStateMachineAttribute("Nethereum.RPC.Fee1559Suggestions.TimePreferenceFeeSuggestionStrategy/<SuggestTipAsync>d__28")]
private Task`1<BigInteger> SuggestTipAsync(BigInteger firstBlock, Decimal[] gasUsedRatio);
    [AsyncStateMachineAttribute("Nethereum.RPC.Fee1559Suggestions.TimePreferenceFeeSuggestionStrategy/<SuggestFeesAsync>d__29")]
public Task`1<Fee1559[]> SuggestFeesAsync();
    public Fee1559[] SuggestFees(FeeHistoryResult feeHistory, BigInteger tip);
    protected BigDecimal SuggestBaseFee(BigInteger[] baseFee, Int32[] order, double timeFactor);
    protected decimal SamplingCurve(decimal sumWeight);
    public int MaxBlockCount(Decimal[] gasUsedRatio, int ptr, int needBlocks);
}
public class Nethereum.RPC.FeeSuggestionService : RpcClientWrapper {
    public FeeSuggestionService(IClient client);
    public SimpleFeeSuggestionStrategy GetSimpleFeeSuggestionStrategy();
    public TimePreferenceFeeSuggestionStrategy GetTimePreferenceFeeSuggestionStrategy();
    public MedianPriorityFeeHistorySuggestionStrategy GetMedianPriorityFeeHistorySuggestionStrategy();
}
public class Nethereum.RPC.HostWallet.AddEthereumChainParameter : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <BlockExplorerUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChainName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IconUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private NativeCurrency <NativeCurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RpcUrls>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger ChainId { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> BlockExplorerUrls { get; public set; }
    [JsonPropertyAttribute]
public string ChainName { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> IconUrls { get; public set; }
    [JsonPropertyAttribute]
public NativeCurrency NativeCurrency { get; public set; }
    [JsonPropertyAttribute]
public List`1<string> RpcUrls { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_ChainId();
    [CompilerGeneratedAttribute]
public void set_ChainId(HexBigInteger value);
    [CompilerGeneratedAttribute]
public List`1<string> get_BlockExplorerUrls();
    [CompilerGeneratedAttribute]
public void set_BlockExplorerUrls(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ChainName();
    [CompilerGeneratedAttribute]
public void set_ChainName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IconUrls();
    [CompilerGeneratedAttribute]
public void set_IconUrls(List`1<string> value);
    [CompilerGeneratedAttribute]
public NativeCurrency get_NativeCurrency();
    [CompilerGeneratedAttribute]
public void set_NativeCurrency(NativeCurrency value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RpcUrls();
    [CompilerGeneratedAttribute]
public void set_RpcUrls(List`1<string> value);
}
public class Nethereum.RPC.HostWallet.EthRequestAccounts : GenericRpcRequestResponseHandlerNoParam`1<String[]> {
    public EthRequestAccounts(IClient client);
}
public class Nethereum.RPC.HostWallet.HostWalletService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IEthRequestAccounts <RequestAccounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IWalletGetPermissions <GetPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IWalletRequestPermissions <RequestPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IWalletWatchAsset <WatchAsset>k__BackingField;
    [CompilerGeneratedAttribute]
private IWalletAddEthereumChain <AddEthereumChain>k__BackingField;
    [CompilerGeneratedAttribute]
private IWalletSwitchEthereumChain <SwitchEthereumChain>k__BackingField;
    public IEthRequestAccounts RequestAccounts { get; private set; }
    public IWalletGetPermissions GetPermissions { get; private set; }
    public IWalletRequestPermissions RequestPermissions { get; private set; }
    public IWalletWatchAsset WatchAsset { get; private set; }
    public IWalletAddEthereumChain AddEthereumChain { get; private set; }
    public IWalletSwitchEthereumChain SwitchEthereumChain { get; private set; }
    public HostWalletService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IEthRequestAccounts get_RequestAccounts();
    [CompilerGeneratedAttribute]
private void set_RequestAccounts(IEthRequestAccounts value);
    [CompilerGeneratedAttribute]
public sealed virtual IWalletGetPermissions get_GetPermissions();
    [CompilerGeneratedAttribute]
private void set_GetPermissions(IWalletGetPermissions value);
    [CompilerGeneratedAttribute]
public sealed virtual IWalletRequestPermissions get_RequestPermissions();
    [CompilerGeneratedAttribute]
private void set_RequestPermissions(IWalletRequestPermissions value);
    [CompilerGeneratedAttribute]
public sealed virtual IWalletWatchAsset get_WatchAsset();
    [CompilerGeneratedAttribute]
private void set_WatchAsset(IWalletWatchAsset value);
    [CompilerGeneratedAttribute]
public sealed virtual IWalletAddEthereumChain get_AddEthereumChain();
    [CompilerGeneratedAttribute]
private void set_AddEthereumChain(IWalletAddEthereumChain value);
    [CompilerGeneratedAttribute]
public sealed virtual IWalletSwitchEthereumChain get_SwitchEthereumChain();
    [CompilerGeneratedAttribute]
private void set_SwitchEthereumChain(IWalletSwitchEthereumChain value);
}
public interface Nethereum.RPC.HostWallet.IEthRequestAccounts {
}
public interface Nethereum.RPC.HostWallet.IHostWalletService {
    public IWalletAddEthereumChain AddEthereumChain { get; }
    public IWalletGetPermissions GetPermissions { get; }
    public IEthRequestAccounts RequestAccounts { get; }
    public IWalletRequestPermissions RequestPermissions { get; }
    public IWalletSwitchEthereumChain SwitchEthereumChain { get; }
    public IWalletWatchAsset WatchAsset { get; }
    public abstract virtual IWalletAddEthereumChain get_AddEthereumChain();
    public abstract virtual IWalletGetPermissions get_GetPermissions();
    public abstract virtual IEthRequestAccounts get_RequestAccounts();
    public abstract virtual IWalletRequestPermissions get_RequestPermissions();
    public abstract virtual IWalletSwitchEthereumChain get_SwitchEthereumChain();
    public abstract virtual IWalletWatchAsset get_WatchAsset();
}
public interface Nethereum.RPC.HostWallet.IWalletAddEthereumChain {
    public abstract virtual RpcRequest BuildRequest(AddEthereumChainParameter addEthereumChainParameter, object id);
    public abstract virtual Task`1<string> SendRequestAsync(AddEthereumChainParameter addEthereumChainParameter, object id);
}
public interface Nethereum.RPC.HostWallet.IWalletGetPermissions {
}
public interface Nethereum.RPC.HostWallet.IWalletRequestPermissions {
    public abstract virtual RpcRequest BuildRequest(String[] methods, object id);
    public abstract virtual Task`1<JObject> SendRequestAsync(String[] methods, object id);
}
public interface Nethereum.RPC.HostWallet.IWalletSwitchEthereumChain {
    public abstract virtual RpcRequest BuildRequest(SwitchEthereumChainParameter switchEthereumChainParameter, object id);
    public abstract virtual Task`1<string> SendRequestAsync(SwitchEthereumChainParameter switchEthereumChainParameter, object id);
}
public interface Nethereum.RPC.HostWallet.IWalletWatchAsset {
    public abstract virtual RpcRequest BuildRequest(WatchAssetParameter watchAssetParameter, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(WatchAssetParameter watchAssetParameter, object id);
}
public class Nethereum.RPC.HostWallet.NativeCurrency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Decimals>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Symbol { get; public set; }
    [JsonPropertyAttribute]
public UInt32 Decimals { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public void set_Symbol(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Decimals();
    [CompilerGeneratedAttribute]
public void set_Decimals(UInt32 value);
}
public class Nethereum.RPC.HostWallet.SwitchEthereumChainParameter : object {
    [CompilerGeneratedAttribute]
private HexBigInteger <ChainId>k__BackingField;
    [JsonPropertyAttribute]
public HexBigInteger ChainId { get; public set; }
    [CompilerGeneratedAttribute]
public HexBigInteger get_ChainId();
    [CompilerGeneratedAttribute]
public void set_ChainId(HexBigInteger value);
}
public class Nethereum.RPC.HostWallet.WalletAddEthereumChain : RpcRequestResponseHandler`1<string> {
    public WalletAddEthereumChain(IClient client);
    [AsyncStateMachineAttribute("Nethereum.RPC.HostWallet.WalletAddEthereumChain/<SendRequestAsync>d__2")]
public sealed virtual Task`1<string> SendRequestAsync(AddEthereumChainParameter addEthereumChainParameter, object id);
    public sealed virtual RpcRequest BuildRequest(AddEthereumChainParameter addEthereumChainParameter, object id);
}
public class Nethereum.RPC.HostWallet.WalletGetPermissions : GenericRpcRequestResponseHandlerNoParam`1<JObject> {
    public WalletGetPermissions(IClient client);
}
public class Nethereum.RPC.HostWallet.WalletRequestPermissions : RpcRequestResponseHandler`1<JObject> {
    public WalletRequestPermissions(IClient client);
    public sealed virtual Task`1<JObject> SendRequestAsync(String[] methods, object id);
    private static Dictionary`2<string, object> ConvertToDictionary(String[] methods);
    public sealed virtual RpcRequest BuildRequest(String[] methods, object id);
}
public class Nethereum.RPC.HostWallet.WalletSwitchEthereumChain : RpcRequestResponseHandler`1<string> {
    public WalletSwitchEthereumChain(IClient client);
    [AsyncStateMachineAttribute("Nethereum.RPC.HostWallet.WalletSwitchEthereumChain/<SendRequestAsync>d__2")]
public sealed virtual Task`1<string> SendRequestAsync(SwitchEthereumChainParameter switchEthereumChainParameter, object id);
    public sealed virtual RpcRequest BuildRequest(SwitchEthereumChainParameter switchEthereumChainParameter, object id);
}
public class Nethereum.RPC.HostWallet.WalletWatchAsset : RpcRequestResponseHandler`1<bool> {
    public WalletWatchAsset(IClient client);
    public sealed virtual Task`1<bool> SendRequestAsync(WatchAssetParameter watchAssetParameter, object id);
    public sealed virtual RpcRequest BuildRequest(WatchAssetParameter watchAssetParameter, object id);
}
public class Nethereum.RPC.HostWallet.WatchAssetParameter : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private WatchAssetParametersOptions <Options>k__BackingField;
    [JsonPropertyAttribute]
public string Type { get; public set; }
    [JsonPropertyAttribute]
public WatchAssetParametersOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public WatchAssetParametersOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(WatchAssetParametersOptions value);
}
public class Nethereum.RPC.HostWallet.WatchAssetParametersOptions : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Decimals>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Image>k__BackingField;
    [JsonPropertyAttribute]
public string Address { get; public set; }
    [JsonPropertyAttribute]
public string Symbol { get; public set; }
    [JsonPropertyAttribute]
public UInt32 Decimals { get; public set; }
    [JsonPropertyAttribute]
public string Image { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Symbol();
    [CompilerGeneratedAttribute]
public void set_Symbol(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_Decimals();
    [CompilerGeneratedAttribute]
public void set_Decimals(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(string value);
}
public interface Nethereum.RPC.IEthApiService {
    public IEthChainId ChainId { get; }
    public IEthAccounts Accounts { get; }
    public IEthApiBlockService Blocks { get; }
    public IEthCoinBase CoinBase { get; }
    public IEthApiCompilerService Compile { get; }
    public BlockParameter DefaultBlock { get; public set; }
    public IEthApiFilterService Filters { get; }
    public IEthGasPrice GasPrice { get; }
    public IEthGetBalance GetBalance { get; }
    public IEthGetCode GetCode { get; }
    public IEthGetStorageAt GetStorageAt { get; }
    public IEthApiMiningService Mining { get; }
    public IEthProtocolVersion ProtocolVersion { get; }
    public IEthSign Sign { get; }
    public IEthSyncing Syncing { get; }
    public ITransactionManager TransactionManager { get; public set; }
    public IEthApiTransactionsService Transactions { get; }
    public IEthApiUncleService Uncles { get; }
    public IEthFeeHistory FeeHistory { get; }
    public IAccountSigningService AccountSigning { get; }
    public IHostWalletService HostWallet { get; }
    public IEthGetProof GetProof { get; }
    public IEthCreateAccessList CreateAccessList { get; }
    public IEthChainProofValidationService ChainProofValidation { get; }
    public abstract virtual IEthChainId get_ChainId();
    public abstract virtual IEthAccounts get_Accounts();
    public abstract virtual IEthApiBlockService get_Blocks();
    public abstract virtual IEthCoinBase get_CoinBase();
    public abstract virtual IEthApiCompilerService get_Compile();
    public abstract virtual BlockParameter get_DefaultBlock();
    public abstract virtual void set_DefaultBlock(BlockParameter value);
    public abstract virtual IEthApiFilterService get_Filters();
    public abstract virtual IEthGasPrice get_GasPrice();
    public abstract virtual IEthGetBalance get_GetBalance();
    public abstract virtual IEthGetCode get_GetCode();
    public abstract virtual IEthGetStorageAt get_GetStorageAt();
    public abstract virtual IEthApiMiningService get_Mining();
    public abstract virtual IEthProtocolVersion get_ProtocolVersion();
    public abstract virtual IEthSign get_Sign();
    public abstract virtual IEthSyncing get_Syncing();
    public abstract virtual ITransactionManager get_TransactionManager();
    public abstract virtual void set_TransactionManager(ITransactionManager value);
    public abstract virtual IEthApiTransactionsService get_Transactions();
    public abstract virtual IEthApiUncleService get_Uncles();
    public abstract virtual IEthFeeHistory get_FeeHistory();
    public abstract virtual IAccountSigningService get_AccountSigning();
    public abstract virtual IHostWalletService get_HostWallet();
    public abstract virtual IEthGetProof get_GetProof();
    public abstract virtual IEthCreateAccessList get_CreateAccessList();
    public abstract virtual IEthChainProofValidationService get_ChainProofValidation();
    public abstract virtual IEtherTransferService GetEtherTransferService();
}
public interface Nethereum.RPC.INetApiService {
    public INetListening Listening { get; }
    public INetPeerCount PeerCount { get; }
    public INetVersion Version { get; }
    public abstract virtual INetListening get_Listening();
    public abstract virtual INetPeerCount get_PeerCount();
    public abstract virtual INetVersion get_Version();
}
public class Nethereum.RPC.Infrastructure.GenericRpcRequestResponseHandlerNoParam`1 : RpcRequestResponseHandlerNoParam`1<TResponse> {
    public GenericRpcRequestResponseHandlerNoParam`1(IClient client, string methodName);
    public sealed virtual Task`1<TResponse> SendRequestAsync(object id);
}
public class Nethereum.RPC.Infrastructure.GenericRpcRequestResponseHandlerParamString`1 : RpcRequestResponseHandler`1<T> {
    public GenericRpcRequestResponseHandlerParamString`1(IClient client, string methodName);
    public sealed virtual RpcRequest BuildRequest(string str, object id);
    public sealed virtual Task`1<T> SendRequestAsync(string str, object id);
}
public interface Nethereum.RPC.Infrastructure.IGenericRpcRequestResponseHandlerNoParam`1 {
    public abstract virtual Task`1<TResponse> SendRequestAsync(object id);
}
public interface Nethereum.RPC.Infrastructure.IGenericRpcRequestResponseHandlerParamString`1 {
    public abstract virtual Task`1<T> SendRequestAsync(string str, object id);
    public abstract virtual RpcRequest BuildRequest(string str, object id);
}
public interface Nethereum.RPC.IPersonalApiService {
    public IPersonalListAccounts ListAccounts { get; }
    public IPersonalLockAccount LockAccount { get; }
    public IPersonalNewAccount NewAccount { get; }
    public IPersonalSignAndSendTransaction SignAndSendTransaction { get; }
    public IPersonalUnlockAccount UnlockAccount { get; }
    public abstract virtual IPersonalListAccounts get_ListAccounts();
    public abstract virtual IPersonalLockAccount get_LockAccount();
    public abstract virtual IPersonalNewAccount get_NewAccount();
    public abstract virtual IPersonalSignAndSendTransaction get_SignAndSendTransaction();
    public abstract virtual IPersonalUnlockAccount get_UnlockAccount();
}
public interface Nethereum.RPC.IRpcClientWrapper {
    public IClient Client { get; }
    public abstract virtual IClient get_Client();
}
public interface Nethereum.RPC.IShhApiService {
    public IShhKeyPair KeyPair { get; }
    public IShhSymKey SymKey { get; }
    public IShhMessageFilter MessageFilter { get; }
    public IShhPost Post { get; }
    public IShhVersion Version { get; }
    public abstract virtual IShhKeyPair get_KeyPair();
    public abstract virtual IShhSymKey get_SymKey();
    public abstract virtual IShhMessageFilter get_MessageFilter();
    public abstract virtual IShhPost get_Post();
    public abstract virtual IShhVersion get_Version();
}
public class Nethereum.RPC.ModelFactories.BlockHeaderRPCFactory : object {
    public static BlockHeader FromRPC(Block rpcBlock, bool mixHashAndNonceInSealFields);
    public static Byte[] EnsureMixHashWithoutRLPSizePrefix(Byte[] mixHash);
    public static Byte[] EnsureNonceWithoutRLPSizePrefix(Byte[] nonce);
}
public interface Nethereum.RPC.Net.INetListening {
}
public interface Nethereum.RPC.Net.INetPeerCount {
}
public interface Nethereum.RPC.Net.INetVersion {
}
public class Nethereum.RPC.Net.NetListening : GenericRpcRequestResponseHandlerNoParam`1<bool> {
    public NetListening(IClient client);
}
public class Nethereum.RPC.Net.NetPeerCount : GenericRpcRequestResponseHandlerNoParam`1<HexBigInteger> {
    public NetPeerCount(IClient client);
}
public class Nethereum.RPC.Net.NetVersion : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public NetVersion(IClient client);
}
public class Nethereum.RPC.NetApiService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private INetListening <Listening>k__BackingField;
    [CompilerGeneratedAttribute]
private INetPeerCount <PeerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private INetVersion <Version>k__BackingField;
    public INetListening Listening { get; private set; }
    public INetPeerCount PeerCount { get; private set; }
    public INetVersion Version { get; private set; }
    public NetApiService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual INetListening get_Listening();
    [CompilerGeneratedAttribute]
private void set_Listening(INetListening value);
    [CompilerGeneratedAttribute]
public sealed virtual INetPeerCount get_PeerCount();
    [CompilerGeneratedAttribute]
private void set_PeerCount(INetPeerCount value);
    [CompilerGeneratedAttribute]
public sealed virtual INetVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(INetVersion value);
}
public class Nethereum.RPC.NonceServices.InMemoryNonceService : object {
    [CompilerGeneratedAttribute]
private BigInteger <CurrentNonce>k__BackingField;
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    private string _account;
    private SemaphoreSlim _semaphoreSlim;
    [CompilerGeneratedAttribute]
private bool <UseLatestTransactionsOnly>k__BackingField;
    public BigInteger CurrentNonce { get; public set; }
    public IClient Client { get; public set; }
    public bool UseLatestTransactionsOnly { get; public set; }
    public InMemoryNonceService(string account, IClient client);
    [CompilerGeneratedAttribute]
public BigInteger get_CurrentNonce();
    [CompilerGeneratedAttribute]
public void set_CurrentNonce(BigInteger value);
    [CompilerGeneratedAttribute]
public sealed virtual IClient get_Client();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Client(IClient value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseLatestTransactionsOnly();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseLatestTransactionsOnly(bool value);
    [AsyncStateMachineAttribute("Nethereum.RPC.NonceServices.InMemoryNonceService/<GetNextNonceAsync>d__15")]
public sealed virtual Task`1<HexBigInteger> GetNextNonceAsync();
    [AsyncStateMachineAttribute("Nethereum.RPC.NonceServices.InMemoryNonceService/<ResetNonceAsync>d__16")]
public sealed virtual Task ResetNonceAsync();
}
public interface Nethereum.RPC.NonceServices.INonceService {
    public IClient Client { get; public set; }
    public bool UseLatestTransactionsOnly { get; public set; }
    public abstract virtual IClient get_Client();
    public abstract virtual void set_Client(IClient value);
    public abstract virtual bool get_UseLatestTransactionsOnly();
    public abstract virtual void set_UseLatestTransactionsOnly(bool value);
    public abstract virtual Task`1<HexBigInteger> GetNextNonceAsync();
    public abstract virtual Task ResetNonceAsync();
}
public interface Nethereum.RPC.Personal.IPersonalListAccounts {
}
public interface Nethereum.RPC.Personal.IPersonalLockAccount {
    public abstract virtual RpcRequest BuildRequest(string account, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(string account, object id);
}
public interface Nethereum.RPC.Personal.IPersonalNewAccount {
    public abstract virtual RpcRequest BuildRequest(string passPhrase, object id);
    public abstract virtual Task`1<string> SendRequestAsync(string passPhrase, object id);
}
public interface Nethereum.RPC.Personal.IPersonalSignAndSendTransaction {
    public abstract virtual RpcRequest BuildRequest(TransactionInput txn, string password, object id);
    public abstract virtual Task`1<string> SendRequestAsync(TransactionInput txn, string password, object id);
}
public interface Nethereum.RPC.Personal.IPersonalUnlockAccount {
    public abstract virtual RpcRequest BuildRequest(string address, string passPhrase, Nullable`1<int> durationInSeconds, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(EthCoinBase coinbaseRequest, string passPhrase, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(string address, string passPhrase, HexBigInteger durationInSeconds, object id);
    public abstract virtual Task`1<bool> SendRequestAsync(string address, string passPhrase, Nullable`1<ulong> durationInSeconds, object id);
}
public class Nethereum.RPC.Personal.PersonalListAccounts : GenericRpcRequestResponseHandlerNoParam`1<String[]> {
    public PersonalListAccounts(IClient client);
}
public class Nethereum.RPC.Personal.PersonalLockAccount : RpcRequestResponseHandler`1<bool> {
    public PersonalLockAccount(IClient client);
    public sealed virtual Task`1<bool> SendRequestAsync(string account, object id);
    public sealed virtual RpcRequest BuildRequest(string account, object id);
}
public class Nethereum.RPC.Personal.PersonalNewAccount : RpcRequestResponseHandler`1<string> {
    public PersonalNewAccount(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(string passPhrase, object id);
    public sealed virtual RpcRequest BuildRequest(string passPhrase, object id);
}
public class Nethereum.RPC.Personal.PersonalSignAndSendTransaction : RpcRequestResponseHandler`1<string> {
    public PersonalSignAndSendTransaction(IClient client);
    public sealed virtual Task`1<string> SendRequestAsync(TransactionInput txn, string password, object id);
    public sealed virtual RpcRequest BuildRequest(TransactionInput txn, string password, object id);
}
public class Nethereum.RPC.Personal.PersonalUnlockAccount : RpcRequestResponseHandler`1<bool> {
    public PersonalUnlockAccount(IClient client);
    public sealed virtual Task`1<bool> SendRequestAsync(string address, string passPhrase, Nullable`1<ulong> durationInSeconds, object id);
    public sealed virtual Task`1<bool> SendRequestAsync(string address, string passPhrase, HexBigInteger durationInSeconds, object id);
    [AsyncStateMachineAttribute("Nethereum.RPC.Personal.PersonalUnlockAccount/<SendRequestAsync>d__3")]
public sealed virtual Task`1<bool> SendRequestAsync(EthCoinBase coinbaseRequest, string passPhrase, object id);
    public sealed virtual RpcRequest BuildRequest(string address, string passPhrase, Nullable`1<int> durationInSeconds, object id);
}
public class Nethereum.RPC.PersonalApiService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IPersonalListAccounts <ListAccounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IPersonalNewAccount <NewAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private IPersonalUnlockAccount <UnlockAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private IPersonalLockAccount <LockAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private IPersonalSignAndSendTransaction <SignAndSendTransaction>k__BackingField;
    public IPersonalListAccounts ListAccounts { get; private set; }
    public IPersonalNewAccount NewAccount { get; private set; }
    public IPersonalUnlockAccount UnlockAccount { get; private set; }
    public IPersonalLockAccount LockAccount { get; private set; }
    public IPersonalSignAndSendTransaction SignAndSendTransaction { get; private set; }
    public PersonalApiService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IPersonalListAccounts get_ListAccounts();
    [CompilerGeneratedAttribute]
private void set_ListAccounts(IPersonalListAccounts value);
    [CompilerGeneratedAttribute]
public sealed virtual IPersonalNewAccount get_NewAccount();
    [CompilerGeneratedAttribute]
private void set_NewAccount(IPersonalNewAccount value);
    [CompilerGeneratedAttribute]
public sealed virtual IPersonalUnlockAccount get_UnlockAccount();
    [CompilerGeneratedAttribute]
private void set_UnlockAccount(IPersonalUnlockAccount value);
    [CompilerGeneratedAttribute]
public sealed virtual IPersonalLockAccount get_LockAccount();
    [CompilerGeneratedAttribute]
private void set_LockAccount(IPersonalLockAccount value);
    [CompilerGeneratedAttribute]
public sealed virtual IPersonalSignAndSendTransaction get_SignAndSendTransaction();
    [CompilerGeneratedAttribute]
private void set_SignAndSendTransaction(IPersonalSignAndSendTransaction value);
}
public class Nethereum.RPC.RpcClientWrapper : object {
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    public IClient Client { get; protected set; }
    public RpcClientWrapper(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IClient get_Client();
    [CompilerGeneratedAttribute]
protected void set_Client(IClient value);
}
public class Nethereum.RPC.Shh.DTOs.MessageFilterInput : object {
    [CompilerGeneratedAttribute]
private string <SymKeyID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKeyID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sig>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MinPow>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Topics>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowP2P>k__BackingField;
    public string SymKeyID { get; public set; }
    public string PrivateKeyID { get; public set; }
    public string Sig { get; public set; }
    public Nullable`1<int> MinPow { get; public set; }
    public Object[] Topics { get; public set; }
    public Nullable`1<bool> AllowP2P { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SymKeyID();
    [CompilerGeneratedAttribute]
public void set_SymKeyID(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateKeyID();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyID(string value);
    [CompilerGeneratedAttribute]
public string get_Sig();
    [CompilerGeneratedAttribute]
public void set_Sig(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinPow();
    [CompilerGeneratedAttribute]
public void set_MinPow(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Object[] get_Topics();
    [CompilerGeneratedAttribute]
public void set_Topics(Object[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowP2P();
    [CompilerGeneratedAttribute]
public void set_AllowP2P(Nullable`1<bool> value);
}
public class Nethereum.RPC.Shh.DTOs.MessageInput : object {
    [CompilerGeneratedAttribute]
private string <SymKeyID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PubKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ttl>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PowTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PowTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPeer>k__BackingField;
    public string SymKeyID { get; public set; }
    public string PubKey { get; public set; }
    public string Sig { get; public set; }
    public string Topic { get; public set; }
    public string Payload { get; public set; }
    public string Padding { get; public set; }
    public long Ttl { get; public set; }
    public long PowTime { get; public set; }
    public double PowTarget { get; public set; }
    public string TargetPeer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SymKeyID();
    [CompilerGeneratedAttribute]
public void set_SymKeyID(string value);
    [CompilerGeneratedAttribute]
public string get_PubKey();
    [CompilerGeneratedAttribute]
public void set_PubKey(string value);
    [CompilerGeneratedAttribute]
public string get_Sig();
    [CompilerGeneratedAttribute]
public void set_Sig(string value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    [CompilerGeneratedAttribute]
public string get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(string value);
    [CompilerGeneratedAttribute]
public long get_Ttl();
    [CompilerGeneratedAttribute]
public void set_Ttl(long value);
    [CompilerGeneratedAttribute]
public long get_PowTime();
    [CompilerGeneratedAttribute]
public void set_PowTime(long value);
    [CompilerGeneratedAttribute]
public double get_PowTarget();
    [CompilerGeneratedAttribute]
public void set_PowTarget(double value);
    [CompilerGeneratedAttribute]
public string get_TargetPeer();
    [CompilerGeneratedAttribute]
public void set_TargetPeer(string value);
}
public class Nethereum.RPC.Shh.DTOs.ShhMessage : object {
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Padding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <Pow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecipientPublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sig>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Topic>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ttl>k__BackingField;
    public string Hash { get; public set; }
    public string Padding { get; public set; }
    public string Payload { get; public set; }
    public decimal Pow { get; public set; }
    public string RecipientPublicKey { get; public set; }
    public string Sig { get; public set; }
    public long Timestamp { get; public set; }
    public string Topic { get; public set; }
    public long Ttl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public string get_Padding();
    [CompilerGeneratedAttribute]
public void set_Padding(string value);
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(string value);
    [CompilerGeneratedAttribute]
public decimal get_Pow();
    [CompilerGeneratedAttribute]
public void set_Pow(decimal value);
    [CompilerGeneratedAttribute]
public string get_RecipientPublicKey();
    [CompilerGeneratedAttribute]
public void set_RecipientPublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_Sig();
    [CompilerGeneratedAttribute]
public void set_Sig(string value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
    [CompilerGeneratedAttribute]
public string get_Topic();
    [CompilerGeneratedAttribute]
public void set_Topic(string value);
    [CompilerGeneratedAttribute]
public long get_Ttl();
    [CompilerGeneratedAttribute]
public void set_Ttl(long value);
}
public interface Nethereum.RPC.Shh.IShhKeyPair {
    public IShhNewKeyPair NewKeyPair { get; }
    public IShhAddPrivateKey AddPrivateKey { get; }
    public IShhDeleteKeyPair DeleteKeyPair { get; }
    public IShhHasKeyPair HasKeyPair { get; }
    public IShhGetPublicKey GetPublicKey { get; }
    public IShhGetPrivateKey GetPrivateKey { get; }
    public abstract virtual IShhNewKeyPair get_NewKeyPair();
    public abstract virtual IShhAddPrivateKey get_AddPrivateKey();
    public abstract virtual IShhDeleteKeyPair get_DeleteKeyPair();
    public abstract virtual IShhHasKeyPair get_HasKeyPair();
    public abstract virtual IShhGetPublicKey get_GetPublicKey();
    public abstract virtual IShhGetPrivateKey get_GetPrivateKey();
}
public interface Nethereum.RPC.Shh.IShhMessageFilter {
    public IShhNewMessageFilter NewMessageFilter { get; }
    public IShhDeleteMessageFilter DeleteMessageFilter { get; }
    public IShhGetFilterMessages GetFilterMessages { get; }
    public abstract virtual IShhNewMessageFilter get_NewMessageFilter();
    public abstract virtual IShhDeleteMessageFilter get_DeleteMessageFilter();
    public abstract virtual IShhGetFilterMessages get_GetFilterMessages();
}
public interface Nethereum.RPC.Shh.IShhPost {
    public abstract virtual RpcRequest BuildRequest(MessageInput input, object id);
    public abstract virtual Task`1<string> SendRequestAsync(MessageInput input, object id);
}
public interface Nethereum.RPC.Shh.IShhSymKey {
    public IShhAddSymKey AddSymKey { get; }
    public IShhDeleteSymKey DeleteSymKey { get; }
    public IShhGenerateSymKeyFromPassword GenerateSymKeyFromPassword { get; }
    public IShhGetSymKey GetSymKey { get; }
    public IShhHasSymKey HasSymKey { get; }
    public IShhNewSymKey NewSymKey { get; }
    public abstract virtual IShhAddSymKey get_AddSymKey();
    public abstract virtual IShhDeleteSymKey get_DeleteSymKey();
    public abstract virtual IShhGenerateSymKeyFromPassword get_GenerateSymKeyFromPassword();
    public abstract virtual IShhGetSymKey get_GetSymKey();
    public abstract virtual IShhHasSymKey get_HasSymKey();
    public abstract virtual IShhNewSymKey get_NewSymKey();
}
public interface Nethereum.RPC.Shh.IShhVersion {
}
public interface Nethereum.RPC.Shh.KeyPair.IShhAddPrivateKey {
    public abstract virtual Task`1<string> SendRequestAsync(string privateKey, object id);
    public abstract virtual RpcRequest BuildRequest(string privateKey, object id);
}
public interface Nethereum.RPC.Shh.KeyPair.IShhDeleteKeyPair {
}
public interface Nethereum.RPC.Shh.KeyPair.IShhGetPrivateKey {
}
public interface Nethereum.RPC.Shh.KeyPair.IShhGetPublicKey {
}
public interface Nethereum.RPC.Shh.KeyPair.IShhHasKeyPair {
}
public interface Nethereum.RPC.Shh.KeyPair.IShhNewKeyPair {
}
public class Nethereum.RPC.Shh.KeyPair.ShhAddPrivateKey : RpcRequestResponseHandler`1<string> {
    public ShhAddPrivateKey(IClient client);
    public sealed virtual RpcRequest BuildRequest(string privateKey, object id);
    public sealed virtual Task`1<string> SendRequestAsync(string privateKey, object id);
}
public class Nethereum.RPC.Shh.KeyPair.ShhDeleteKeyPair : GenericRpcRequestResponseHandlerParamString`1<bool> {
    public ShhDeleteKeyPair(IClient client);
}
public class Nethereum.RPC.Shh.KeyPair.ShhGetPrivateKey : GenericRpcRequestResponseHandlerParamString`1<string> {
    public ShhGetPrivateKey(IClient client);
}
public class Nethereum.RPC.Shh.KeyPair.ShhGetPublicKey : GenericRpcRequestResponseHandlerParamString`1<string> {
    public ShhGetPublicKey(IClient client);
}
public class Nethereum.RPC.Shh.KeyPair.ShhHasKeyPair : GenericRpcRequestResponseHandlerParamString`1<bool> {
    public ShhHasKeyPair(IClient client);
}
public class Nethereum.RPC.Shh.KeyPair.ShhNewKeyPair : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public ShhNewKeyPair(IClient client);
}
public interface Nethereum.RPC.Shh.MessageFilter.IShhDeleteMessageFilter {
}
public interface Nethereum.RPC.Shh.MessageFilter.IShhGetFilterMessages {
}
public interface Nethereum.RPC.Shh.MessageFilter.IShhNewMessageFilter {
    public abstract virtual RpcRequest BuildRequest(MessageFilterInput input, object id);
    public abstract virtual Task`1<string> SendRequestAsync(MessageFilterInput input, object id);
}
public class Nethereum.RPC.Shh.MessageFilter.ShhDeleteMessageFilter : GenericRpcRequestResponseHandlerParamString`1<bool> {
    public ShhDeleteMessageFilter(IClient client);
}
public class Nethereum.RPC.Shh.MessageFilter.ShhGetFilterMessages : GenericRpcRequestResponseHandlerParamString`1<ShhMessage[]> {
    public ShhGetFilterMessages(IClient client);
}
public class Nethereum.RPC.Shh.MessageFilter.ShhNewMessageFilter : RpcRequestResponseHandler`1<string> {
    public ShhNewMessageFilter(IClient client);
    public sealed virtual RpcRequest BuildRequest(MessageFilterInput input, object id);
    public sealed virtual Task`1<string> SendRequestAsync(MessageFilterInput input, object id);
}
public class Nethereum.RPC.Shh.ShhKeyPair : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IShhNewKeyPair <NewKeyPair>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhAddPrivateKey <AddPrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhDeleteKeyPair <DeleteKeyPair>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhHasKeyPair <HasKeyPair>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhGetPublicKey <GetPublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhGetPrivateKey <GetPrivateKey>k__BackingField;
    public IShhNewKeyPair NewKeyPair { get; private set; }
    public IShhAddPrivateKey AddPrivateKey { get; private set; }
    public IShhDeleteKeyPair DeleteKeyPair { get; private set; }
    public IShhHasKeyPair HasKeyPair { get; private set; }
    public IShhGetPublicKey GetPublicKey { get; private set; }
    public IShhGetPrivateKey GetPrivateKey { get; private set; }
    public ShhKeyPair(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IShhNewKeyPair get_NewKeyPair();
    [CompilerGeneratedAttribute]
private void set_NewKeyPair(IShhNewKeyPair value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhAddPrivateKey get_AddPrivateKey();
    [CompilerGeneratedAttribute]
private void set_AddPrivateKey(IShhAddPrivateKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhDeleteKeyPair get_DeleteKeyPair();
    [CompilerGeneratedAttribute]
private void set_DeleteKeyPair(IShhDeleteKeyPair value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhHasKeyPair get_HasKeyPair();
    [CompilerGeneratedAttribute]
private void set_HasKeyPair(IShhHasKeyPair value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhGetPublicKey get_GetPublicKey();
    [CompilerGeneratedAttribute]
private void set_GetPublicKey(IShhGetPublicKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhGetPrivateKey get_GetPrivateKey();
    [CompilerGeneratedAttribute]
private void set_GetPrivateKey(IShhGetPrivateKey value);
}
public class Nethereum.RPC.Shh.ShhMessageFilter : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IShhNewMessageFilter <NewMessageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhDeleteMessageFilter <DeleteMessageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhGetFilterMessages <GetFilterMessages>k__BackingField;
    public IShhNewMessageFilter NewMessageFilter { get; private set; }
    public IShhDeleteMessageFilter DeleteMessageFilter { get; private set; }
    public IShhGetFilterMessages GetFilterMessages { get; private set; }
    public ShhMessageFilter(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IShhNewMessageFilter get_NewMessageFilter();
    [CompilerGeneratedAttribute]
private void set_NewMessageFilter(IShhNewMessageFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhDeleteMessageFilter get_DeleteMessageFilter();
    [CompilerGeneratedAttribute]
private void set_DeleteMessageFilter(IShhDeleteMessageFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhGetFilterMessages get_GetFilterMessages();
    [CompilerGeneratedAttribute]
private void set_GetFilterMessages(IShhGetFilterMessages value);
}
public class Nethereum.RPC.Shh.ShhPost : RpcRequestResponseHandler`1<string> {
    public ShhPost(IClient client);
    public sealed virtual RpcRequest BuildRequest(MessageInput input, object id);
    public sealed virtual Task`1<string> SendRequestAsync(MessageInput input, object id);
}
public class Nethereum.RPC.Shh.ShhSymKey : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IShhAddSymKey <AddSymKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhDeleteSymKey <DeleteSymKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhGenerateSymKeyFromPassword <GenerateSymKeyFromPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhGetSymKey <GetSymKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhHasSymKey <HasSymKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhNewSymKey <NewSymKey>k__BackingField;
    public IShhAddSymKey AddSymKey { get; private set; }
    public IShhDeleteSymKey DeleteSymKey { get; private set; }
    public IShhGenerateSymKeyFromPassword GenerateSymKeyFromPassword { get; private set; }
    public IShhGetSymKey GetSymKey { get; private set; }
    public IShhHasSymKey HasSymKey { get; private set; }
    public IShhNewSymKey NewSymKey { get; private set; }
    public ShhSymKey(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IShhAddSymKey get_AddSymKey();
    [CompilerGeneratedAttribute]
private void set_AddSymKey(IShhAddSymKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhDeleteSymKey get_DeleteSymKey();
    [CompilerGeneratedAttribute]
private void set_DeleteSymKey(IShhDeleteSymKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhGenerateSymKeyFromPassword get_GenerateSymKeyFromPassword();
    [CompilerGeneratedAttribute]
private void set_GenerateSymKeyFromPassword(IShhGenerateSymKeyFromPassword value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhGetSymKey get_GetSymKey();
    [CompilerGeneratedAttribute]
private void set_GetSymKey(IShhGetSymKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhHasSymKey get_HasSymKey();
    [CompilerGeneratedAttribute]
private void set_HasSymKey(IShhHasSymKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhNewSymKey get_NewSymKey();
    [CompilerGeneratedAttribute]
private void set_NewSymKey(IShhNewSymKey value);
}
public class Nethereum.RPC.Shh.ShhVersion : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public ShhVersion(IClient client);
}
public interface Nethereum.RPC.Shh.SymKey.IShhAddSymKey {
}
public interface Nethereum.RPC.Shh.SymKey.IShhDeleteSymKey {
}
public interface Nethereum.RPC.Shh.SymKey.IShhGenerateSymKeyFromPassword {
}
public interface Nethereum.RPC.Shh.SymKey.IShhGetSymKey {
}
public interface Nethereum.RPC.Shh.SymKey.IShhHasSymKey {
}
public interface Nethereum.RPC.Shh.SymKey.IShhNewSymKey {
}
public class Nethereum.RPC.Shh.SymKey.ShhAddSymKey : GenericRpcRequestResponseHandlerParamString`1<string> {
    public ShhAddSymKey(IClient client);
}
public class Nethereum.RPC.Shh.SymKey.ShhDeleteSymKey : GenericRpcRequestResponseHandlerParamString`1<bool> {
    public ShhDeleteSymKey(IClient client);
}
public class Nethereum.RPC.Shh.SymKey.ShhGenerateSymKeyFromPassword : GenericRpcRequestResponseHandlerParamString`1<string> {
    public ShhGenerateSymKeyFromPassword(IClient client);
}
public class Nethereum.RPC.Shh.SymKey.ShhGetSymKey : GenericRpcRequestResponseHandlerParamString`1<string> {
    public ShhGetSymKey(IClient client);
}
public class Nethereum.RPC.Shh.SymKey.ShhHasSymKey : GenericRpcRequestResponseHandlerParamString`1<bool> {
    public ShhHasSymKey(IClient client);
}
public class Nethereum.RPC.Shh.SymKey.ShhNewSymKey : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public ShhNewSymKey(IClient client);
}
public class Nethereum.RPC.ShhApiService : RpcClientWrapper {
    [CompilerGeneratedAttribute]
private IShhKeyPair <KeyPair>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhSymKey <SymKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhMessageFilter <MessageFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhPost <Post>k__BackingField;
    public IShhKeyPair KeyPair { get; private set; }
    public IShhVersion Version { get; private set; }
    public IShhSymKey SymKey { get; private set; }
    public IShhMessageFilter MessageFilter { get; private set; }
    public IShhPost Post { get; private set; }
    public ShhApiService(IClient client);
    [CompilerGeneratedAttribute]
public sealed virtual IShhKeyPair get_KeyPair();
    [CompilerGeneratedAttribute]
private void set_KeyPair(IShhKeyPair value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhVersion get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(IShhVersion value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhSymKey get_SymKey();
    [CompilerGeneratedAttribute]
private void set_SymKey(IShhSymKey value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhMessageFilter get_MessageFilter();
    [CompilerGeneratedAttribute]
private void set_MessageFilter(IShhMessageFilter value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhPost get_Post();
    [CompilerGeneratedAttribute]
private void set_Post(IShhPost value);
}
public class Nethereum.RPC.TransactionManagers.EtherTransferService : object {
    private ITransactionManager _transactionManager;
    public EtherTransferService(ITransactionManager transactionManager);
    public sealed virtual Task`1<string> TransferEtherAsync(string toAddress, decimal etherAmount, Nullable`1<decimal> gasPriceGwei, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce);
    public sealed virtual Task`1<TransactionReceipt> TransferEtherAndWaitForReceiptAsync(string toAddress, decimal etherAmount, Nullable`1<decimal> gasPriceGwei, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.EtherTransferService/<CalculateTotalAmountToTransferWholeBalanceInEtherAsync>d__4")]
public sealed virtual Task`1<decimal> CalculateTotalAmountToTransferWholeBalanceInEtherAsync(string address, decimal gasPriceGwei, Nullable`1<BigInteger> gas);
    public sealed virtual Task`1<TransactionReceipt> TransferEtherAndWaitForReceiptAsync(string toAddress, decimal etherAmount, BigInteger maxPriorityFeePerGas, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> TransferEtherAsync(string toAddress, decimal etherAmount, BigInteger maxPriorityFeePerGas, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.EtherTransferService/<SuggestFeeToTransferWholeBalanceInEtherAsync>d__7")]
public sealed virtual Task`1<Fee1559> SuggestFeeToTransferWholeBalanceInEtherAsync(Nullable`1<BigInteger> maxPriorityFeePerGas);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.EtherTransferService/<CalculateTotalAmountToTransferWholeBalanceInEtherAsync>d__8")]
public sealed virtual Task`1<decimal> CalculateTotalAmountToTransferWholeBalanceInEtherAsync(string address, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.EtherTransferService/<EstimateGasAsync>d__9")]
public sealed virtual Task`1<BigInteger> EstimateGasAsync(string toAddress, decimal etherAmount);
}
public class Nethereum.RPC.TransactionManagers.EtherTransferTransactionInputBuilder : object {
    public static TransactionInput CreateTransactionInput(string fromAddress, string toAddress, decimal etherAmount, Nullable`1<decimal> gasPriceGwei, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce);
    public static TransactionInput CreateTransactionInput(string fromAddress, string toAddress, decimal etherAmount, BigInteger maxPriorityFeePerGas, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce);
}
public interface Nethereum.RPC.TransactionManagers.IEtherTransferService {
    public abstract virtual Task`1<TransactionReceipt> TransferEtherAndWaitForReceiptAsync(string toAddress, decimal etherAmount, Nullable`1<decimal> gasPriceGwei, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> TransferEtherAsync(string toAddress, decimal etherAmount, Nullable`1<decimal> gasPriceGwei, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce);
    public abstract virtual Task`1<decimal> CalculateTotalAmountToTransferWholeBalanceInEtherAsync(string address, decimal gasPriceGwei, Nullable`1<BigInteger> gas);
    public abstract virtual Task`1<decimal> CalculateTotalAmountToTransferWholeBalanceInEtherAsync(string address, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas);
    public abstract virtual Task`1<string> TransferEtherAsync(string toAddress, decimal etherAmount, BigInteger maxPriorityFee, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce);
    public abstract virtual Task`1<TransactionReceipt> TransferEtherAndWaitForReceiptAsync(string toAddress, decimal etherAmount, BigInteger maxPriorityFee, BigInteger maxFeePerGas, Nullable`1<BigInteger> gas, Nullable`1<BigInteger> nonce, CancellationToken cancellationToken);
    public abstract virtual Task`1<BigInteger> EstimateGasAsync(string toAddress, decimal etherAmount);
    public abstract virtual Task`1<Fee1559> SuggestFeeToTransferWholeBalanceInEtherAsync(Nullable`1<BigInteger> maxPriorityFeePerGas);
}
public interface Nethereum.RPC.TransactionManagers.ITransactionManager {
    public IClient Client { get; public set; }
    public BigInteger DefaultGasPrice { get; public set; }
    public BigInteger DefaultGas { get; public set; }
    public IAccount Account { get; }
    public bool UseLegacyAsDefault { get; public set; }
    public ITransactionVerificationAndRecovery TransactionVerificationAndRecovery { get; public set; }
    public IFee1559SuggestionStrategy Fee1559SuggestionStrategy { get; public set; }
    public ITransactionReceiptService TransactionReceiptService { get; public set; }
    public bool CalculateOrSetDefaultGasPriceFeesIfNotSet { get; public set; }
    public bool EstimateOrSetDefaultGasIfNotSet { get; public set; }
    public Nullable`1<BigInteger> ChainId { get; }
    public abstract virtual IClient get_Client();
    public abstract virtual void set_Client(IClient value);
    public abstract virtual BigInteger get_DefaultGasPrice();
    public abstract virtual void set_DefaultGasPrice(BigInteger value);
    public abstract virtual BigInteger get_DefaultGas();
    public abstract virtual void set_DefaultGas(BigInteger value);
    public abstract virtual IAccount get_Account();
    public abstract virtual bool get_UseLegacyAsDefault();
    public abstract virtual void set_UseLegacyAsDefault(bool value);
    public abstract virtual ITransactionVerificationAndRecovery get_TransactionVerificationAndRecovery();
    public abstract virtual void set_TransactionVerificationAndRecovery(ITransactionVerificationAndRecovery value);
    public abstract virtual IFee1559SuggestionStrategy get_Fee1559SuggestionStrategy();
    public abstract virtual void set_Fee1559SuggestionStrategy(IFee1559SuggestionStrategy value);
    public abstract virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
    public abstract virtual Task`1<HexBigInteger> EstimateGasAsync(CallInput callInput);
    public abstract virtual Task`1<string> SendTransactionAsync(string from, string to, HexBigInteger amount);
    public abstract virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
    public abstract virtual ITransactionReceiptService get_TransactionReceiptService();
    public abstract virtual void set_TransactionReceiptService(ITransactionReceiptService value);
    public abstract virtual bool get_CalculateOrSetDefaultGasPriceFeesIfNotSet();
    public abstract virtual void set_CalculateOrSetDefaultGasPriceFeesIfNotSet(bool value);
    public abstract virtual bool get_EstimateOrSetDefaultGasIfNotSet();
    public abstract virtual void set_EstimateOrSetDefaultGasIfNotSet(bool value);
    public abstract virtual Nullable`1<BigInteger> get_ChainId();
    public abstract virtual Task`1<TransactionReceipt> SendTransactionAndWaitForReceiptAsync(TransactionInput transactionInput, CancellationToken cancellationToken);
}
public class Nethereum.RPC.TransactionManagers.TransactionManager : TransactionManagerBase {
    [CompilerGeneratedAttribute]
private BigInteger <DefaultGas>k__BackingField;
    public BigInteger DefaultGas { get; public set; }
    public TransactionManager(IClient client);
    [CompilerGeneratedAttribute]
public virtual BigInteger get_DefaultGas();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultGas(BigInteger value);
    public virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.TransactionManager/<SendTransactionAsync>d__6")]
public virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
}
public abstract class Nethereum.RPC.TransactionManagers.TransactionManagerBase : object {
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <DefaultGasPrice>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccount <Account>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLegacyAsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CalculateOrSetDefaultGasPriceFeesIfNotSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EstimateOrSetDefaultGasIfNotSet>k__BackingField;
    [CompilerGeneratedAttribute]
private ChainFeature <ChainFeature>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransactionVerificationAndRecovery <TransactionVerificationAndRecovery>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <ChainId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BigInteger> <DefaultMaxPriorityFeePerGas>k__BackingField;
    private IFee1559SuggestionStrategy _fee1559SuggestionStrategy;
    private ITransactionReceiptService _transactionReceiptService;
    public IClient Client { get; public set; }
    public BigInteger DefaultGasPrice { get; public set; }
    public BigInteger DefaultGas { get; public set; }
    public IAccount Account { get; protected set; }
    public bool UseLegacyAsDefault { get; public set; }
    public bool CalculateOrSetDefaultGasPriceFeesIfNotSet { get; public set; }
    public bool EstimateOrSetDefaultGasIfNotSet { get; public set; }
    protected ChainFeature ChainFeature { get; protected set; }
    public ITransactionVerificationAndRecovery TransactionVerificationAndRecovery { get; public set; }
    public Nullable`1<BigInteger> ChainId { get; protected set; }
    public Nullable`1<BigInteger> DefaultMaxPriorityFeePerGas { get; public set; }
    public IFee1559SuggestionStrategy Fee1559SuggestionStrategy { get; public set; }
    public ITransactionReceiptService TransactionReceiptService { get; public set; }
    [CompilerGeneratedAttribute]
public virtual IClient get_Client();
    [CompilerGeneratedAttribute]
public virtual void set_Client(IClient value);
    [CompilerGeneratedAttribute]
public sealed virtual BigInteger get_DefaultGasPrice();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultGasPrice(BigInteger value);
    public abstract virtual BigInteger get_DefaultGas();
    public abstract virtual void set_DefaultGas(BigInteger value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccount get_Account();
    [CompilerGeneratedAttribute]
protected void set_Account(IAccount value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UseLegacyAsDefault();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UseLegacyAsDefault(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CalculateOrSetDefaultGasPriceFeesIfNotSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CalculateOrSetDefaultGasPriceFeesIfNotSet(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EstimateOrSetDefaultGasIfNotSet();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EstimateOrSetDefaultGasIfNotSet(bool value);
    [CompilerGeneratedAttribute]
protected ChainFeature get_ChainFeature();
    [CompilerGeneratedAttribute]
protected void set_ChainFeature(ChainFeature value);
    [CompilerGeneratedAttribute]
public sealed virtual ITransactionVerificationAndRecovery get_TransactionVerificationAndRecovery();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TransactionVerificationAndRecovery(ITransactionVerificationAndRecovery value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<BigInteger> get_ChainId();
    [CompilerGeneratedAttribute]
protected void set_ChainId(Nullable`1<BigInteger> value);
    public bool IsTransactionToBeSendAsEIP1559(TransactionInput transaction);
    [CompilerGeneratedAttribute]
public Nullable`1<BigInteger> get_DefaultMaxPriorityFeePerGas();
    [CompilerGeneratedAttribute]
public void set_DefaultMaxPriorityFeePerGas(Nullable`1<BigInteger> value);
    public sealed virtual IFee1559SuggestionStrategy get_Fee1559SuggestionStrategy();
    public sealed virtual void set_Fee1559SuggestionStrategy(IFee1559SuggestionStrategy value);
    public abstract virtual Task`1<string> SignTransactionAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.TransactionManagerBase/<SetTransactionFeesOrPricingAsync>d__49")]
protected Task SetTransactionFeesOrPricingAsync(TransactionInput transaction);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.TransactionManagerBase/<EnsureChainIdAndChainFeatureIsSetAsync>d__50")]
protected Task EnsureChainIdAndChainFeatureIsSetAsync();
    public Task`1<string> SendRawTransactionAsync(string signedTransaction);
    public sealed virtual ITransactionReceiptService get_TransactionReceiptService();
    public sealed virtual void set_TransactionReceiptService(ITransactionReceiptService value);
    public sealed virtual Task`1<TransactionReceipt> SendTransactionAndWaitForReceiptAsync(TransactionInput transactionInput, CancellationToken cancellationToken);
    public virtual Task`1<HexBigInteger> EstimateGasAsync(CallInput callInput);
    public abstract virtual Task`1<string> SendTransactionAsync(TransactionInput transactionInput);
    public virtual Task`1<string> SendTransactionAsync(string from, string to, HexBigInteger amount);
    public Task`1<Fee1559> CalculateFee1559Async(Nullable`1<BigInteger> maxPriorityFeePerGas);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionManagers.TransactionManagerBase/<GetGasPriceAsync>d__61")]
public Task`1<HexBigInteger> GetGasPriceAsync(TransactionInput transactionInput);
    protected void SetDefaultGasPriceAndCostIfNotSet(TransactionInput transactionInput);
    protected void SetDefaultGasIfNotSet(TransactionInput transactionInput);
}
public interface Nethereum.RPC.TransactionReceipts.ITransactionReceiptService {
    public abstract virtual Task`1<TransactionReceipt> SendRequestAndWaitForReceiptAsync(Func`1<Task`1<string>> transactionFunction, CancellationToken cancellationToken);
    public abstract virtual Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Func`1<Task`1<string>> deployFunction, CancellationToken cancellationToken);
    public abstract virtual Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(TransactionInput transactionInput, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> DeployContractAndGetAddressAsync(Func`1<Task`1<string>> deployFunction, CancellationToken cancellationToken);
    public abstract virtual Task`1<TransactionReceipt> SendRequestAndWaitForReceiptAsync(TransactionInput transactionInput, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TransactionReceipt>> SendRequestsAndWaitForReceiptAsync(IEnumerable`1<TransactionInput> transactionInputs, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<TransactionReceipt>> SendRequestsAndWaitForReceiptAsync(IEnumerable`1<Func`1<Task`1<string>>> transactionFunctions, CancellationToken cancellationToken);
    public abstract virtual Task`1<TransactionReceipt> PollForReceiptAsync(string transaction, CancellationToken cancellationToken);
    public abstract virtual int GetPollingRetryIntervalInMilliseconds();
    public abstract virtual void SetPollingRetryIntervalInMilliseconds(int retryMilliseconds);
    public abstract virtual Task`1<TransactionReceipt> ValidateDeploymentTransactionReceipt(TransactionReceipt transactionReceipt);
}
public class Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService : object {
    private ITransactionManager _transactionManager;
    private int _retryMilliseconds;
    private object _lockingObject;
    public TransactionReceiptPollingService(ITransactionManager transactionManager, int retryMilliseconds);
    public sealed virtual int GetPollingRetryIntervalInMilliseconds();
    public sealed virtual void SetPollingRetryIntervalInMilliseconds(int retryMilliseconds);
    public sealed virtual Task`1<TransactionReceipt> SendRequestAndWaitForReceiptAsync(TransactionInput transactionInput, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<TransactionReceipt>> SendRequestsAndWaitForReceiptAsync(IEnumerable`1<TransactionInput> transactionInputs, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<SendRequestAndWaitForReceiptAsync>d__8")]
public sealed virtual Task`1<TransactionReceipt> SendRequestAndWaitForReceiptAsync(Func`1<Task`1<string>> transactionFunction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<PollForReceiptAsync>d__9")]
public sealed virtual Task`1<TransactionReceipt> PollForReceiptAsync(string transaction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<SendRequestsAndWaitForReceiptAsync>d__10")]
public sealed virtual Task`1<List`1<TransactionReceipt>> SendRequestsAndWaitForReceiptAsync(IEnumerable`1<Func`1<Task`1<string>>> transactionFunctions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<DeployContractAndWaitForReceiptAsync>d__11")]
public sealed virtual Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Func`1<Task`1<string>> deployFunction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<ValidateDeploymentTransactionReceipt>d__12")]
public sealed virtual Task`1<TransactionReceipt> ValidateDeploymentTransactionReceipt(TransactionReceipt transactionReceipt);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<PollForContractAddressAsync>d__13")]
public Task`1<string> PollForContractAddressAsync(TransactionReceipt transactionReceipt);
    [AsyncStateMachineAttribute("Nethereum.RPC.TransactionReceipts.TransactionReceiptPollingService/<DeployContractAndGetAddressAsync>d__14")]
public sealed virtual Task`1<string> DeployContractAndGetAddressAsync(Func`1<Task`1<string>> deployFunction, CancellationToken cancellationToken);
    public sealed virtual Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(TransactionInput transactionInput, CancellationToken cancellationToken);
}
public class Nethereum.RPC.TransactionReceipts.TransactionReceiptServiceFactory : object {
    public static ITransactionReceiptService GetDefaultransactionReceiptService(ITransactionManager transactionManager);
}
public enum Nethereum.RPC.TransactionTypes.TransactionType : Enum {
    public int value__;
    public static TransactionType LegacyTransaction;
    public static TransactionType LegacyChainTransaction;
    public static TransactionType Legacy;
    public static TransactionType EIP1559;
}
[ExtensionAttribute]
public static class Nethereum.RPC.TransactionTypes.TransactionTypeExtensions : object {
    [ExtensionAttribute]
public static byte AsByte(TransactionType transactionType);
    [ExtensionAttribute]
public static HexBigInteger AsHexBigInteger(TransactionType transactionType);
    [ExtensionAttribute]
public static TransactionType ToTransactionType(HexBigInteger value);
    [ExtensionAttribute]
public static TransactionType ToTypedTransaction(Nullable`1<byte> value);
    [ExtensionAttribute]
public static bool IsTypedTransaction(Nullable`1<byte> value);
}
public enum Nethereum.RPC.UnsupportedApiMethods : Enum {
    public int value__;
    public static UnsupportedApiMethods eth_signTransaction;
    public static UnsupportedApiMethods engine_exchangeCapabilities;
    public static UnsupportedApiMethods engine_exchangeTransitionConfigurationV1;
    public static UnsupportedApiMethods engine_forkchoiceUpdatedV1;
    public static UnsupportedApiMethods engine_forkchoiceUpdatedV2;
    public static UnsupportedApiMethods engine_forkchoiceUpdatedV3;
    public static UnsupportedApiMethods engine_getPayloadBodiesByHashV1;
    public static UnsupportedApiMethods engine_getPayloadBodiesByRangeV1;
    public static UnsupportedApiMethods engine_getPayloadV1;
    public static UnsupportedApiMethods engine_getPayloadV2;
    public static UnsupportedApiMethods engine_getPayloadV3;
    public static UnsupportedApiMethods engine_newPayloadV1;
    public static UnsupportedApiMethods engine_newPayloadV2;
    public static UnsupportedApiMethods engine_newPayloadV3;
}
public class Nethereum.RPC.Web3.Web3ClientVersion : GenericRpcRequestResponseHandlerNoParam`1<string> {
    public Web3ClientVersion(IClient client);
}
public class Nethereum.RPC.Web3.Web3Sha3 : RpcRequestResponseHandler`1<string> {
    public Web3Sha3(IClient client);
    public Task`1<string> SendRequestAsync(HexUTF8String valueToConvertHexUtf8, object id);
    public RpcRequest BuildRequest(HexUTF8String valueToConvert, object id);
}
