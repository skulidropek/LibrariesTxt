public class Nethereum.Signer.CliqueBlockHeaderRecovery : object {
    public string RecoverCliqueSigner(BlockHeader blockHeader, bool legacy);
}
[ExtensionAttribute]
internal static class Nethereum.Signer.Crypto.DeterministicDSAExtensions : object {
    [ExtensionAttribute]
public static Byte[] Digest(IDigest digest);
    [ExtensionAttribute]
public static Byte[] DoFinal(IMac hmac);
    [ExtensionAttribute]
public static void Update(IMac hmac, Byte[] input);
    [ExtensionAttribute]
public static void Update(IDigest digest, Byte[] input);
    [ExtensionAttribute]
public static void Update(IDigest digest, Byte[] input, int offset, int length);
}
internal class Nethereum.Signer.Crypto.DeterministicECDSA : ECDsaSigner {
    private IDigest _digest;
    private Byte[] _buffer;
    public DeterministicECDSA(Func`1<IDigest> digest);
    public void setPrivateKey(ECPrivateKeyParameters ecKey);
    public Byte[] sign();
    public Byte[] signHash(Byte[] hash);
    public void update(Byte[] buf);
}
public class Nethereum.Signer.Crypto.ECDSASignature : object {
    private static string InvalidDERSignature;
    [CompilerGeneratedAttribute]
private BigInteger <R>k__BackingField;
    [CompilerGeneratedAttribute]
private BigInteger <S>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <V>k__BackingField;
    public BigInteger R { get; }
    public BigInteger S { get; }
    public Byte[] V { get; public set; }
    public bool IsLowS { get; }
    public ECDSASignature(BigInteger r, BigInteger s);
    public ECDSASignature(BigInteger[] rs);
    public ECDSASignature(Byte[] derSig);
    [CompilerGeneratedAttribute]
public BigInteger get_R();
    [CompilerGeneratedAttribute]
public BigInteger get_S();
    [CompilerGeneratedAttribute]
public Byte[] get_V();
    [CompilerGeneratedAttribute]
public void set_V(Byte[] value);
    public bool get_IsLowS();
    public static ECDSASignature FromDER(Byte[] sig);
    public static bool IsValidDER(Byte[] bytes);
    public ECDSASignature MakeCanonical();
    public Byte[] ToDER();
}
public class Nethereum.Signer.Crypto.ECKey : object {
    public static BigInteger HALF_CURVE_ORDER;
    public static BigInteger CURVE_ORDER;
    public static ECDomainParameters CURVE;
    internal static X9ECParameters _secp256k1;
    private ECKeyParameters _Key;
    private ECPublicKeyParameters _ecPublicKeyParameters;
    private Byte[] _publicKey;
    private Byte[] _publicKeyCompressed;
    private ECDomainParameters _DomainParameter;
    private static BigInteger PRIME;
    public ECPrivateKeyParameters PrivateKey { get; }
    public static X9ECParameters Secp256k1 { get; }
    public ECDomainParameters DomainParameter { get; }
    private static ECKey();
    public ECKey(Byte[] vch, bool isPrivate);
    public ECPrivateKeyParameters get_PrivateKey();
    public static X9ECParameters get_Secp256k1();
    public ECDomainParameters get_DomainParameter();
    public Byte[] GetPubKey(bool isCompressed);
    public ECPublicKeyParameters GetPublicKeyParameters();
    public static int RecoverFromSignature(ECDSASignature sig, Byte[] message, bool compressed, Byte[] uncompressedPublicKey);
    public static bool Compare(Byte[] arr0, Byte[] arr1);
    public static bool Compare64(Byte* b0, Byte* b1, int length);
    public static ECKey RecoverFromSignature(int recId, ECDSASignature sig, Byte[] message, bool compressed);
    public virtual ECDSASignature Sign(Byte[] hash);
    public bool Verify(Byte[] hash, ECDSASignature sig);
    private void AssertPrivateKey();
    private static ECPoint DecompressKey(BigInteger xBN, bool yBit);
}
public class Nethereum.Signer.ECDSASignatureFactory : object {
    public static ECDSASignature FromComponents(Byte[] r, Byte[] s);
    public static ECDSASignature FromComponents(Byte[] r, Byte[] s, byte v);
    public static ECDSASignature FromComponents(Byte[] r, Byte[] s, Byte[] v);
    public static ECDSASignature FromComponents(Byte[] rs);
    public static ECDSASignature ExtractECDSASignature(string signature);
    public static ECDSASignature ExtractECDSASignature(Byte[] signatureArray);
}
public class Nethereum.Signer.EthECDSASignature : object {
    [CompilerGeneratedAttribute]
private ECDSASignature <ECDSASignature>k__BackingField;
    internal ECDSASignature ECDSASignature { get; }
    public Byte[] R { get; }
    public Byte[] S { get; }
    public Byte[] V { get; public set; }
    public bool IsLowS { get; }
    internal EthECDSASignature(BigInteger r, BigInteger s);
    public EthECDSASignature(BigInteger r, BigInteger s, Byte[] v);
    internal EthECDSASignature(ECDSASignature signature);
    internal EthECDSASignature(BigInteger[] rs);
    public EthECDSASignature(Byte[] derSig);
    [CompilerGeneratedAttribute]
internal ECDSASignature get_ECDSASignature();
    public sealed virtual Byte[] get_R();
    public sealed virtual Byte[] get_S();
    public sealed virtual Byte[] get_V();
    public sealed virtual void set_V(Byte[] value);
    public bool get_IsLowS();
    public static EthECDSASignature FromDER(Byte[] sig);
    public Byte[] ToDER();
    public static bool IsValidDER(Byte[] bytes);
    public static string CreateStringSignature(EthECDSASignature signature);
}
[ExtensionAttribute]
public static class Nethereum.Signer.EthECDSASignatureFactory : object {
    public static EthECDSASignature FromComponents(Byte[] r, Byte[] s);
    public static EthECDSASignature FromSignature(ISignature signature);
    [ExtensionAttribute]
public static EthECDSASignature ToEthECDSASignature(ISignature signature);
    public static EthECDSASignature FromComponents(Byte[] r, Byte[] s, byte v);
    public static EthECDSASignature FromComponents(Byte[] r, Byte[] s, Byte[] v);
    public static EthECDSASignature FromComponents(Byte[] rs);
    public static EthECDSASignature ExtractECDSASignature(string signature);
}
public class Nethereum.Signer.EthECKey : object {
    private static SecureRandom SecureRandom;
    public static byte DEFAULT_PREFIX;
    private ECKey _ecKey;
    private Byte[] _publicKey;
    private Byte[] _publicKeyCompressed;
    private Byte[] _publicKeyNoPrefix;
    private Byte[] _publicKeyNoPrefixCompressed;
    private string _ethereumAddress;
    private Byte[] _privateKey;
    private string _privateKeyHex;
    public EthECKey(string privateKey);
    public EthECKey(Byte[] vch, bool isPrivate);
    public EthECKey(Byte[] vch, bool isPrivate, byte prefix);
    internal EthECKey(ECKey ecKey);
    private static EthECKey();
    public Byte[] CalculateCommonSecret(EthECKey publicKey);
    internal int CalculateRecId(ECDSASignature signature, Byte[] hash);
    internal static int CalculateRecId(ECDSASignature signature, Byte[] hash, Byte[] uncompressedPublicKey);
    public static EthECKey GenerateKey(Byte[] seed);
    public static EthECKey GenerateKey();
    public Byte[] GetPrivateKeyAsBytes();
    public string GetPrivateKey();
    public Byte[] GetPubKey(bool compresseed);
    public Byte[] GetPubKeyNoPrefix(bool compressed);
    public string GetPublicAddress();
    public Byte[] GetPublicAddressAsBytes();
    public static string GetPublicAddress(string privateKey);
    public static int GetRecIdFromV(Byte[] v);
    public static int GetRecIdFromV(byte v);
    public static int GetRecIdFromVChain(BigInteger vChain, BigInteger chainId);
    public static BigInteger GetChainFromVChain(BigInteger vChain);
    public static int GetRecIdFromVChain(Byte[] vChain, BigInteger chainId);
    public static EthECKey RecoverFromSignature(EthECDSASignature signature, Byte[] hash);
    public static EthECKey RecoverFromParityYSignature(EthECDSASignature signature, Byte[] hash);
    public static EthECKey RecoverFromSignature(EthECDSASignature signature, int recId, Byte[] hash);
    public static EthECKey RecoverFromSignature(EthECDSASignature signature, Byte[] hash, BigInteger chainId);
    public EthECDSASignature SignAndCalculateV(Byte[] hash, BigInteger chainId);
    public EthECDSASignature SignAndCalculateYParityV(Byte[] hash);
    internal static BigInteger CalculateV(BigInteger chainId, int recId);
    public EthECDSASignature SignAndCalculateV(Byte[] hash);
    public EthECDSASignature Sign(Byte[] hash);
    public bool Verify(Byte[] hash, EthECDSASignature sig);
    public bool VerifyAllowingOnlyLowS(Byte[] hash, EthECDSASignature sig);
}
[ExtensionAttribute]
public static class Nethereum.Signer.EthECKeyBuilderFromSignedTransaction : object {
    [ExtensionAttribute]
public static EthECKey GetKey(ISignedTransaction transaction);
    [ExtensionAttribute]
public static EthECKey GetEthECKey(ISignedTransaction transaction);
}
public class Nethereum.Signer.EthereumMessageSigner : MessageSigner {
    public virtual string EcRecover(Byte[] message, string signature);
    public Byte[] HashAndHashPrefixedMessage(Byte[] message);
    public virtual string HashAndSign(Byte[] plainMessage, EthECKey key);
    public Byte[] HashPrefixedMessage(string plainMessage);
    public Byte[] HashPrefixedMessage(Byte[] message);
    public virtual string Sign(Byte[] message, EthECKey key);
    public string EncodeUTF8AndSign(string message, EthECKey key);
    public string EncodeUTF8AndEcRecover(string message, string signature);
}
public abstract class Nethereum.Signer.EthExternalSignerBase : object {
    public bool Supported1559 { get; }
    public ExternalSignerTransactionFormat ExternalSignerTransactionFormat { get; protected set; }
    public bool CalculatesV { get; protected set; }
    protected abstract virtual Task`1<Byte[]> GetPublicKeyAsync();
    protected abstract virtual Task`1<ECDSASignature> SignExternallyAsync(Byte[] bytes);
    public abstract virtual Task SignAsync(LegacyTransactionChainId transaction);
    public abstract virtual Task SignAsync(LegacyTransaction transaction);
    public abstract virtual Task SignAsync(Transaction1559 transaction);
    public abstract virtual bool get_Supported1559();
    public abstract virtual ExternalSignerTransactionFormat get_ExternalSignerTransactionFormat();
    protected abstract virtual void set_ExternalSignerTransactionFormat(ExternalSignerTransactionFormat value);
    public abstract virtual bool get_CalculatesV();
    protected abstract virtual void set_CalculatesV(bool value);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<GetAddressAsync>d__13")]
public virtual Task`1<string> GetAddressAsync();
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignAsync>d__14")]
public sealed virtual Task`1<EthECDSASignature> SignAsync(Byte[] rawBytes, BigInteger chainId);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignAsync>d__15")]
public sealed virtual Task`1<EthECDSASignature> SignAsync(Byte[] rawBytes);
    public sealed virtual Task`1<EthECDSASignature> SignEthereumMessageAsync(Byte[] rawBytes);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignAndCalculateYParityVAsync>d__17")]
public Task`1<EthECDSASignature> SignAndCalculateYParityVAsync(Byte[] rawBytes);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignHashTransactionAsync>d__18")]
protected Task SignHashTransactionAsync(LegacyTransaction transaction);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignRLPTransactionAsync>d__19")]
protected Task SignRLPTransactionAsync(LegacyTransaction transaction);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignHashTransactionAsync>d__20")]
protected Task SignHashTransactionAsync(LegacyTransactionChainId transaction);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignRLPTransactionAsync>d__21")]
protected Task SignRLPTransactionAsync(LegacyTransactionChainId transaction);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignHashTransactionAsync>d__22")]
protected Task SignHashTransactionAsync(Transaction1559 transaction);
    [AsyncStateMachineAttribute("Nethereum.Signer.EthExternalSignerBase/<SignRLPTransactionAsync>d__23")]
protected Task SignRLPTransactionAsync(Transaction1559 transaction);
}
public enum Nethereum.Signer.ExternalSignerTransactionFormat : Enum {
    public int value__;
    public static ExternalSignerTransactionFormat RLP;
    public static ExternalSignerTransactionFormat Hash;
    public static ExternalSignerTransactionFormat Transaction;
}
public interface Nethereum.Signer.IEthExternalSigner {
    public bool CalculatesV { get; }
    public ExternalSignerTransactionFormat ExternalSignerTransactionFormat { get; }
    public bool Supported1559 { get; }
    public abstract virtual bool get_CalculatesV();
    public abstract virtual ExternalSignerTransactionFormat get_ExternalSignerTransactionFormat();
    public abstract virtual Task`1<string> GetAddressAsync();
    public abstract virtual Task`1<EthECDSASignature> SignAsync(Byte[] rawBytes);
    public abstract virtual Task`1<EthECDSASignature> SignEthereumMessageAsync(Byte[] rawBytes);
    public abstract virtual Task`1<EthECDSASignature> SignAsync(Byte[] rawBytes, BigInteger chainId);
    public abstract virtual Task SignAsync(LegacyTransaction transaction);
    public abstract virtual Task SignAsync(LegacyTransactionChainId transaction);
    public abstract virtual Task SignAsync(Transaction1559 transaction);
    public abstract virtual bool get_Supported1559();
}
public class Nethereum.Signer.LegacyTransactionSigner : object {
    public string SignTransaction(string privateKey, string to, BigInteger amount, BigInteger nonce);
    public string SignTransaction(string privateKey, string to, BigInteger amount, BigInteger nonce, string data);
    public string SignTransaction(string privateKey, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public string SignTransaction(string privateKey, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public string SignTransaction(Byte[] privateKey, string to, BigInteger amount, BigInteger nonce);
    public string SignTransaction(Byte[] privateKey, string to, BigInteger amount, BigInteger nonce, string data);
    public string SignTransaction(Byte[] privateKey, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public string SignTransaction(Byte[] privateKey, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public string SignTransaction(string privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce);
    public string SignTransaction(string privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce);
    public string SignTransaction(string privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce, string data);
    public string SignTransaction(string privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, string data);
    public string SignTransaction(string privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public string SignTransaction(string privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public string SignTransaction(string privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public string SignTransaction(string privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public string SignTransaction(Byte[] privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce);
    public string SignTransaction(Byte[] privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce);
    public string SignTransaction(Byte[] privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce, string data);
    public string SignTransaction(Byte[] privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, string data);
    public string SignTransaction(Byte[] privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public string SignTransaction(Byte[] privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public string SignTransaction(Byte[] privateKey, Chain chain, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public string SignTransaction(Byte[] privateKey, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public string SignTransaction(Byte[] privateKey, LegacyTransaction transaction);
    public string SignTransaction(Byte[] privateKey, LegacyTransactionChainId transaction);
    public string SignTransaction(Byte[] privateKey, RLPSignedDataHashBuilder rLPSignedDataHashBuilder);
    [AsyncStateMachineAttribute("Nethereum.Signer.LegacyTransactionSigner/<SignTransactionAsync>d__27")]
private Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, LegacyTransaction transaction);
    [AsyncStateMachineAttribute("Nethereum.Signer.LegacyTransactionSigner/<SignTransactionAsync>d__28")]
private Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, LegacyTransactionChainId transaction);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, string to, BigInteger amount, BigInteger nonce);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, string to, BigInteger amount, BigInteger nonce, string data);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, Chain chain, string to, BigInteger amount, BigInteger nonce);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, BigInteger chainId, string to, BigInteger amount, BigInteger nonce);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, Chain chain, string to, BigInteger amount, BigInteger nonce, string data);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, string data);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, Chain chain, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, Chain chain, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
    public Task`1<string> SignTransactionAsync(IEthExternalSigner externalSigner, BigInteger chainId, string to, BigInteger amount, BigInteger nonce, BigInteger gasPrice, BigInteger gasLimit, string data);
}
public class Nethereum.Signer.MessageSigner : object {
    public virtual string EcRecover(Byte[] hashMessage, string signature);
    public virtual string EcRecover(Byte[] hashMessage, EthECDSASignature signature);
    public Byte[] Hash(Byte[] plainMessage);
    public virtual string HashAndEcRecover(string plainMessage, string signature);
    public string HashAndSign(string plainMessage, string privateKey);
    public string HashAndSign(Byte[] plainMessage, string privateKey);
    public virtual string HashAndSign(Byte[] plainMessage, EthECKey key);
    public string Sign(Byte[] message, string privateKey);
    public virtual string Sign(Byte[] message, EthECKey key);
    public virtual EthECDSASignature SignAndCalculateV(Byte[] message, Byte[] privateKey);
    public virtual EthECDSASignature SignAndCalculateV(Byte[] message, string privateKey);
    public virtual EthECDSASignature SignAndCalculateV(Byte[] message, EthECKey key);
    private static string CreateStringSignature(EthECDSASignature signature);
    public static EthECDSASignature ExtractEcdsaSignature(string signature);
}
public class Nethereum.Signer.Transaction1559Signer : TypeTransactionSigner`1<Transaction1559> {
    public Task SignExternallyAsync(IEthExternalSigner externalSigner, Transaction1559 transaction);
}
[ExtensionAttribute]
public static class Nethereum.Signer.TransactionVerificationAndRecovery : object {
    private static ITransactionVerificationAndRecovery _transactionVerificationAndRecovery;
    private static TransactionVerificationAndRecovery();
    public static Byte[] GetPublicKey(string rlp);
    public static string GetSenderAddress(string rlp);
    public static bool VerifyTransaction(string rlp);
    [ExtensionAttribute]
public static Byte[] GetPublicKey(ISignedTransaction transaction);
    [ExtensionAttribute]
public static string GetSenderAddress(ISignedTransaction transaction);
    [ExtensionAttribute]
public static bool VerifyTransaction(ISignedTransaction transaction);
}
public class Nethereum.Signer.TransactionVerificationAndRecoveryImp : object {
    public sealed virtual Byte[] GetPublicKey(string rlp);
    public sealed virtual string GetSenderAddress(string rlp);
    public sealed virtual bool VerifyTransaction(string rlp);
    public sealed virtual Byte[] GetPublicKey(ISignedTransaction transaction);
    public sealed virtual string GetSenderAddress(ISignedTransaction transaction);
    public sealed virtual bool VerifyTransaction(ISignedTransaction transaction);
}
public class Nethereum.Signer.TypeTransactionSigner`1 : object {
    public string SignTransaction(string privateKey, T transaction);
    public string SignTransaction(Byte[] privateKey, T transaction);
    public string SignTransaction(EthECKey ecKey, T transaction);
}
