public class Nethereum.Util.AddressEqualityComparer : object {
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
[ExtensionAttribute]
public static class Nethereum.Util.AddressExtensions : object {
    [ExtensionAttribute]
public static string ConvertToEthereumChecksumAddress(string address);
    [ExtensionAttribute]
public static string ConvertToEthereumChecksumAddress(Byte[] address);
    [ExtensionAttribute]
public static bool IsEthereumChecksumAddress(string address);
    [ExtensionAttribute]
public static bool IsValidEthereumAddressHexFormat(string address);
    [ExtensionAttribute]
public static bool IsValidEthereumAddressLength(string address);
    [ExtensionAttribute]
public static bool IsTheSameAddress(string address, string otherAddress);
    [ExtensionAttribute]
public static bool IsAnEmptyAddress(string address);
    [ExtensionAttribute]
public static bool IsNotAnEmptyAddress(string address);
    [ExtensionAttribute]
public static string AddressValueOrEmpty(string address);
    [ExtensionAttribute]
public static bool IsEmptyOrEqualsAddress(string address1, string candidate);
}
public class Nethereum.Util.AddressUtil : object {
    private static AddressUtil _current;
    public static string AddressEmptyAsHex;
    public static string ZERO_ADDRESS;
    public static AddressUtil Current { get; }
    public static AddressUtil get_Current();
    public string ConvertToChecksumAddress(Byte[] address);
    public bool IsAnEmptyAddress(string address);
    public bool IsNotAnEmptyAddress(string address);
    public string AddressValueOrEmpty(string address);
    public bool IsEmptyOrEqualsAddress(string address1, string candidate);
    public bool AreAddressesTheSame(string address1, string address2);
    public string ConvertToChecksumAddress(string address);
    public string ConvertToValid20ByteAddress(string address);
    public bool IsValidAddressLength(string address);
    public bool IsValidEthereumAddressHexFormat(string address);
    public bool IsChecksumAddress(string address);
}
public class Nethereum.Util.BigDecimal : ValueType {
    public static int Precision;
    [DecimalConstantAttribute("28", "0", "1703060790", "185874565", "1102470953")]
public static decimal PI;
    [CompilerGeneratedAttribute]
private BigInteger <Mantissa>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Exponent>k__BackingField;
    public BigInteger Mantissa { get; internal set; }
    public int Exponent { get; internal set; }
    public BigDecimal(BigDecimal bigDecimal, bool alwaysTruncate);
    public BigDecimal(decimal value, bool alwaysTruncate);
    public BigDecimal(BigInteger mantissa, int exponent, bool alwaysTruncate);
    private static BigDecimal();
    [CompilerGeneratedAttribute]
public BigInteger get_Mantissa();
    [CompilerGeneratedAttribute]
internal void set_Mantissa(BigInteger value);
    [CompilerGeneratedAttribute]
public int get_Exponent();
    [CompilerGeneratedAttribute]
internal void set_Exponent(int value);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(BigDecimal other);
    public void NormaliseExponentBiggerThanZero();
    public void Normalize();
    internal BigDecimal Truncate(int precision);
    public BigDecimal RoundAwayFromZero(int significantDigits);
    public BigDecimal Floor();
    private static int NumberOfDigits(BigInteger value);
    public virtual string ToString();
    public bool Equals(BigDecimal other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static BigDecimal op_Implicit(int value);
    public static BigDecimal op_Implicit(BigInteger value);
    public static BigDecimal op_Implicit(double value);
    public static BigDecimal op_Implicit(decimal value);
    public static double op_Explicit(BigDecimal value);
    public static float op_Explicit(BigDecimal value);
    public static decimal op_Explicit(BigDecimal value);
    public static int op_Explicit(BigDecimal value);
    public static UInt32 op_Explicit(BigDecimal value);
    public static BigDecimal op_UnaryPlus(BigDecimal value);
    public static BigDecimal op_UnaryNegation(BigDecimal value);
    public static BigDecimal op_Increment(BigDecimal value);
    public static BigDecimal op_Decrement(BigDecimal value);
    public static BigDecimal op_Addition(BigDecimal left, BigDecimal right);
    public static BigDecimal op_Subtraction(BigDecimal left, BigDecimal right);
    private static BigDecimal Add(BigDecimal left, BigDecimal right);
    public static BigDecimal op_Multiply(BigDecimal left, BigDecimal right);
    public static BigDecimal op_Division(BigDecimal dividend, BigDecimal divisor);
    public static bool op_Equality(BigDecimal left, BigDecimal right);
    public static bool op_Inequality(BigDecimal left, BigDecimal right);
    public static bool op_LessThan(BigDecimal left, BigDecimal right);
    public static bool op_GreaterThan(BigDecimal left, BigDecimal right);
    public static bool op_LessThanOrEqual(BigDecimal left, BigDecimal right);
    public static bool op_GreaterThanOrEqual(BigDecimal left, BigDecimal right);
    public static BigDecimal Parse(string value);
    private static BigInteger AlignExponent(BigDecimal value, BigDecimal reference);
    public static BigDecimal Exp(double exponent);
    public static BigDecimal Pow(BigDecimal value, int exponent);
    public static BigDecimal Pow(double basis, double exponent);
    public string ToString(string formatSpecifier, IFormatProvider format);
}
[ExtensionAttribute]
internal static class Nethereum.Util.BigDecimalFormatter : object {
    [ExtensionAttribute]
public static string ToCurrencyString(BigDecimal value, int maxDigits, NumberFormatInfo format);
    [ExtensionAttribute]
internal static IList`1<byte> GetDigits(BigDecimal value, Int32& exponent);
}
[ExtensionAttribute]
public static class Nethereum.Util.BigIntegerExtensions : object {
    [ExtensionAttribute]
public static int NumberOfDigits(BigInteger value);
    public static BigInteger ParseInvariant(string value);
}
public class Nethereum.Util.ByteArrayComparer : object {
    public static ByteArrayComparer Current;
    private static ByteArrayComparer();
    public sealed virtual int Compare(Byte[] x, Byte[] y);
    public sealed virtual bool Equals(Byte[] x, Byte[] y);
    public sealed virtual int GetHashCode(Byte[] obj);
}
public class Nethereum.Util.ByteArrayConvertors.ChartByteArrayConvertor : object {
    public sealed virtual Byte[] ConvertToByteArray(char data);
}
public class Nethereum.Util.ByteArrayConvertors.HexToByteArrayConvertor : object {
    public sealed virtual Byte[] ConvertToByteArray(string data);
}
public interface Nethereum.Util.ByteArrayConvertors.IByteArrayConvertor`1 {
    public abstract virtual Byte[] ConvertToByteArray(T data);
}
public class Nethereum.Util.ByteArrayConvertors.StringByteArrayConvertor : object {
    public sealed virtual Byte[] ConvertToByteArray(string data);
}
public class Nethereum.Util.ByteListComparer : object {
    public static ByteListComparer Current;
    private static ByteListComparer();
    public sealed virtual int Compare(IList`1<byte> x, IList`1<byte> y);
}
[ExtensionAttribute]
public static class Nethereum.Util.ByteUtil : object {
    public static Byte[] EMPTY_BYTE_ARRAY;
    public static Byte[] ZERO_BYTE_ARRAY;
    private static ByteUtil();
    public static Byte[] AppendByte(Byte[] bytes, byte b);
    [ExtensionAttribute]
public static Byte[] Slice(Byte[] org, int start, int end);
    public static Byte[] InitialiseEmptyByteArray(int length);
    [IteratorStateMachineAttribute("Nethereum.Util.ByteUtil/<MergeToEnum>d__5")]
public static IEnumerable`1<byte> MergeToEnum(Byte[][] arrays);
    public static Byte[] Merge(Byte[][] arrays);
    [ExtensionAttribute]
public static Byte[] XOR(Byte[] a, Byte[] b);
    [ExtensionAttribute]
public static Byte[] PadTo32Bytes(Byte[] bytesToPad);
    [ExtensionAttribute]
public static Byte[] PadTo128Bytes(Byte[] bytesToPad);
    [ExtensionAttribute]
public static Byte[] PadBytes(Byte[] bytesToPad, int numberOfBytes);
    [ExtensionAttribute]
public static Byte[] PadBytesLeft(Byte[] bytesToPad, int numberOfBytes);
    [ExtensionAttribute]
public static Byte[] PadBytesRight(Byte[] bytesToPad, int numberOfBytes);
    [ExtensionAttribute]
public static Byte[] ShiftLeft(Byte[] value, int shift);
    [ExtensionAttribute]
public static Byte[] ShiftRight(Byte[] value, int shift);
    [ExtensionAttribute]
public static List`1<Byte[]> SplitBytes(Byte[] bytes, int chunkSize);
}
public static class Nethereum.Util.ContractUtils : object {
    public static string LIBRARY_PLACEHOLDER;
    public static int MAXIMUM_BYTECODE_SIZE;
    public static string CalculateContractAddress(string address, BigInteger nonce);
    public static string CalculateCreate2AddressMinimalProxy(string address, string saltHex, string deploymentAddress);
    public static string CalculateCreate2Address(string address, string saltHex, string byteCodeHex);
    public static bool IsContractByteCodeSizeAboveLimit(string byteCodeHex);
    public static string CalculateCreate2AddressUsingByteCodeHash(string address, string saltHex, string byteCodeHexHash);
}
[ExtensionAttribute]
public static class Nethereum.Util.DateTimeHelper : object {
    [ExtensionAttribute]
public static long ToUnixTimestamp(DateTime value);
    [ExtensionAttribute]
public static long UnixTimestamp(DateTime ignored);
    public static DateTime ParseUnixTimestamp(long timestamp);
}
public class Nethereum.Util.DefaultMessageHasher : object {
    public Byte[] Hash(string plainMessage);
    public Byte[] Hash(Byte[] plainMessage);
}
[ExtensionAttribute]
public static class Nethereum.Util.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("Nethereum.Util.EnumerableExtensions/<Batch>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> Batch(IEnumerable`1<T> source, int size);
}
public class Nethereum.Util.EthereumMessageHasher : object {
    public Byte[] HashPrefixedMessage(string plainMessage);
    public Byte[] HashPrefixedMessage(Byte[] message);
}
[ExtensionAttribute]
public static class Nethereum.Util.FormattingExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(T formattable);
}
public interface Nethereum.Util.HashProviders.IHashProvider {
    public abstract virtual Byte[] ComputeHash(Byte[] data);
}
public class Nethereum.Util.HashProviders.Sha3KeccackHashProvider : object {
    public sealed virtual Byte[] ComputeHash(Byte[] data);
}
public interface Nethereum.Util.IWaitStrategy {
    public abstract virtual Task ApplyAsync(UInt32 retryCount);
}
internal abstract class Nethereum.Util.Keccak.Arrays : object {
    public static bool AreEqual(Boolean[] a, Boolean[] b);
    public static bool AreEqual(Char[] a, Char[] b);
    public static bool AreEqual(Byte[] a, Byte[] b);
    [ObsoleteAttribute("Use 'AreEqual' method instead")]
public static bool AreSame(Byte[] a, Byte[] b);
    public static bool ConstantTimeAreEqual(Byte[] a, Byte[] b);
    public static bool AreEqual(Int32[] a, Int32[] b);
    public static bool AreEqual(UInt32[] a, UInt32[] b);
    private static bool HaveSameContents(Boolean[] a, Boolean[] b);
    private static bool HaveSameContents(Char[] a, Char[] b);
    private static bool HaveSameContents(Byte[] a, Byte[] b);
    private static bool HaveSameContents(Int32[] a, Int32[] b);
    private static bool HaveSameContents(UInt32[] a, UInt32[] b);
    public static string ToString(Object[] a);
    public static int GetHashCode(Byte[] data);
    public static int GetHashCode(Byte[] data, int off, int len);
    public static int GetHashCode(Int32[] data);
    public static int GetHashCode(Int32[] data, int off, int len);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt32[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt32[] data, int off, int len);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt64[] data);
    [CLSCompliantAttribute("False")]
public static int GetHashCode(UInt64[] data, int off, int len);
    public static Byte[] Clone(Byte[] data);
    public static Byte[] Clone(Byte[] data, Byte[] existing);
    public static Int32[] Clone(Int32[] data);
    internal static UInt32[] Clone(UInt32[] data);
    public static Int64[] Clone(Int64[] data);
    [CLSCompliantAttribute("False")]
public static UInt64[] Clone(UInt64[] data);
    [CLSCompliantAttribute("False")]
public static UInt64[] Clone(UInt64[] data, UInt64[] existing);
    public static bool Contains(Byte[] a, byte n);
    public static bool Contains(Int16[] a, short n);
    public static bool Contains(Int32[] a, int n);
    public static void Fill(Byte[] buf, byte b);
    public static Byte[] CopyOf(Byte[] data, int newLength);
    public static Char[] CopyOf(Char[] data, int newLength);
    public static Int32[] CopyOf(Int32[] data, int newLength);
    public static Int64[] CopyOf(Int64[] data, int newLength);
    public static Byte[] CopyOfRange(Byte[] data, int from, int to);
    public static Int32[] CopyOfRange(Int32[] data, int from, int to);
    public static Int64[] CopyOfRange(Int64[] data, int from, int to);
    private static int GetLength(int from, int to);
    public static Byte[] Append(Byte[] a, byte b);
    public static Int16[] Append(Int16[] a, short b);
    public static Int32[] Append(Int32[] a, int b);
    public static Byte[] Concatenate(Byte[] a, Byte[] b);
    public static Byte[] ConcatenateAll(Byte[][] vs);
    public static Int32[] Concatenate(Int32[] a, Int32[] b);
    public static Byte[] Prepend(Byte[] a, byte b);
    public static Int16[] Prepend(Int16[] a, short b);
    public static Int32[] Prepend(Int32[] a, int b);
    public static Byte[] Reverse(Byte[] a);
    public static Int32[] Reverse(Int32[] a);
}
internal class Nethereum.Util.Keccak.KeccakDigest : object {
    private static UInt64[] KeccakRoundConstants;
    private static Int32[] KeccakRhoOffsets;
    private static int STATE_LENGTH;
    private UInt64[] state;
    protected Byte[] dataQueue;
    protected int rate;
    protected int bitsInQueue;
    protected int fixedOutputLength;
    protected bool squeezing;
    protected int bitsAvailableForSqueezing;
    public string AlgorithmName { get; }
    public KeccakDigest(int bitLength);
    public KeccakDigest(KeccakDigest source);
    private static KeccakDigest();
    private static UInt64[] KeccakInitializeRoundConstants();
    private static Int32[] KeccakInitializeRhoOffsets();
    private void CopyIn(KeccakDigest source);
    public virtual string get_AlgorithmName();
    public virtual int GetDigestSize();
    public virtual void Update(byte input);
    public virtual void BlockUpdate(Byte[] input, int inOff, int len);
    public virtual int DoFinal(Byte[] output, int outOff);
    protected virtual int DoFinal(Byte[] output, int outOff, byte partialByte, int partialBits);
    public virtual void Reset();
    public virtual int GetByteLength();
    private void Init(int bitLength);
    private void InitSponge(int rate);
    protected void Absorb(Byte[] data, int off, int len);
    protected void AbsorbBits(int data, int bits);
    private void PadAndSwitchToSqueezingPhase();
    protected void Squeeze(Byte[] output, int off, int len);
    private void KeccakAbsorb(Byte[] data, int off);
    private void KeccakExtract();
    private void KeccakPermutation();
    private static ulong leftRotate(ulong v, int r);
    private static void Theta(UInt64[] A);
    private static void Rho(UInt64[] A);
    private static void Pi(UInt64[] A);
    private static void Chi(UInt64[] A);
    private static void Iota(UInt64[] A, int indexRound);
}
internal class Nethereum.Util.Keccak.Pack : object {
    internal static void UInt16_To_BE(ushort n, Byte[] bs);
    internal static void UInt16_To_BE(ushort n, Byte[] bs, int off);
    internal static ushort BE_To_UInt16(Byte[] bs);
    internal static ushort BE_To_UInt16(Byte[] bs, int off);
    internal static Byte[] UInt32_To_BE(UInt32 n);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_BE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_BE(UInt32[] ns);
    internal static void UInt32_To_BE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 BE_To_UInt32(Byte[] bs);
    internal static UInt32 BE_To_UInt32(Byte[] bs, int off);
    internal static void BE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static Byte[] UInt64_To_BE(ulong n);
    internal static void UInt64_To_BE(ulong n, Byte[] bs);
    internal static void UInt64_To_BE(ulong n, Byte[] bs, int off);
    internal static Byte[] UInt64_To_BE(UInt64[] ns);
    internal static void UInt64_To_BE(UInt64[] ns, Byte[] bs, int off);
    internal static ulong BE_To_UInt64(Byte[] bs);
    internal static ulong BE_To_UInt64(Byte[] bs, int off);
    internal static void BE_To_UInt64(Byte[] bs, int off, UInt64[] ns);
    internal static void UInt16_To_LE(ushort n, Byte[] bs);
    internal static void UInt16_To_LE(ushort n, Byte[] bs, int off);
    internal static ushort LE_To_UInt16(Byte[] bs);
    internal static ushort LE_To_UInt16(Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32 n);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs);
    internal static void UInt32_To_LE(UInt32 n, Byte[] bs, int off);
    internal static Byte[] UInt32_To_LE(UInt32[] ns);
    internal static void UInt32_To_LE(UInt32[] ns, Byte[] bs, int off);
    internal static UInt32 LE_To_UInt32(Byte[] bs);
    internal static UInt32 LE_To_UInt32(Byte[] bs, int off);
    internal static void LE_To_UInt32(Byte[] bs, int off, UInt32[] ns);
    internal static void LE_To_UInt32(Byte[] bs, int bOff, UInt32[] ns, int nOff, int count);
    internal static UInt32[] LE_To_UInt32(Byte[] bs, int off, int count);
    internal static Byte[] UInt64_To_LE(ulong n);
    internal static void UInt64_To_LE(ulong n, Byte[] bs);
    internal static void UInt64_To_LE(ulong n, Byte[] bs, int off);
    internal static Byte[] UInt64_To_LE(UInt64[] ns);
    internal static void UInt64_To_LE(UInt64[] ns, Byte[] bs, int off);
    internal static void UInt64_To_LE(UInt64[] ns, int nsOff, int nsLen, Byte[] bs, int bsOff);
    internal static ulong LE_To_UInt64(Byte[] bs);
    internal static ulong LE_To_UInt64(Byte[] bs, int off);
    internal static void LE_To_UInt64(Byte[] bs, int off, UInt64[] ns);
    internal static void LE_To_UInt64(Byte[] bs, int bsOff, UInt64[] ns, int nsOff, int nsLen);
}
internal static class Nethereum.Util.NumberFormatting : object {
    private static String[] s_posCurrencyFormats;
    private static String[] s_negCurrencyFormats;
    private static NumberFormatting();
    internal static char ParseFormatSpecifier(string format, Int32& digits);
    internal static void FormatCurrency(StringBuilder result, bool isNegative, IList`1<byte> digits, int exponent, int maxDigits, NumberFormatInfo info);
    internal static void FormatFixed(StringBuilder sb, IList`1<byte> digits, int exponent, int maxFractionalDigits, Int32[] groupDigits, string decimalSeparator, string groupSeparator);
}
[ExtensionAttribute]
public static class Nethereum.Util.PredicateBuilder : object {
    public static Expression`1<Func`2<T, bool>> True();
    public static Expression`1<Func`2<T, bool>> False();
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
}
public class Nethereum.Util.Sha3Keccack : object {
    [CompilerGeneratedAttribute]
private static Sha3Keccack <Current>k__BackingField;
    public static Sha3Keccack Current { get; }
    private static Sha3Keccack();
    [CompilerGeneratedAttribute]
public static Sha3Keccack get_Current();
    public string CalculateHash(string value);
    public string CalculateHashFromHex(String[] hexValues);
    public Byte[] CalculateHash(Byte[] value);
}
[ExtensionAttribute]
public static class Nethereum.Util.TaskExtensions : object {
    [ExtensionAttribute]
public static Task ForEachAsync(IEnumerable`1<T> source, int degreeOfParalellism, Func`2<T, Task> action);
    [ExtensionAttribute]
public static Task ForEachAsync(IEnumerable`1<T> source, Func`2<T, Task> action, Nullable`1<int> partitions);
}
public static class Nethereum.Util.TransactionUtils : object {
    public static string CalculateTransactionHash(string rawSignedTransaction);
}
public class Nethereum.Util.UniqueAddressList : HashSet`1<string> {
}
public class Nethereum.Util.UniqueTransactionHashList : HashSet`1<string> {
}
public class Nethereum.Util.UnitConversion : object {
    private static UnitConversion _convert;
    public static UnitConversion Convert { get; }
    public static UnitConversion get_Convert();
    public decimal FromWei(BigInteger value, BigInteger toUnit);
    public decimal FromWei(BigInteger value, EthUnit toUnit);
    public decimal FromWei(BigInteger value, int decimalPlacesToUnit);
    public BigDecimal FromWeiToBigDecimal(BigInteger value, int decimalPlacesToUnit);
    public BigDecimal FromWeiToBigDecimal(BigInteger value, EthUnit toUnit);
    public BigDecimal FromWeiToBigDecimal(BigInteger value, BigInteger toUnit);
    private int GetEthUnitValueLength(BigInteger unitValue);
    public BigInteger GetEthUnitValue(EthUnit ethUnit);
    public bool TryValidateUnitValue(BigInteger ethUnit);
    public BigInteger ToWeiFromUnit(decimal amount, BigInteger fromUnit);
    public BigInteger ToWeiFromUnit(BigDecimal amount, BigInteger fromUnit);
    public BigInteger ToWei(BigDecimal amount, EthUnit fromUnit);
    public BigInteger ToWei(BigDecimal amount, int decimalPlacesFromUnit);
    public BigInteger ToWei(decimal amount, int decimalPlacesFromUnit);
    public BigInteger ToWei(decimal amount, EthUnit fromUnit);
    public BigInteger ToWei(BigInteger value, EthUnit fromUnit);
    public BigInteger ToWei(int value, EthUnit fromUnit);
    public BigInteger ToWei(double value, EthUnit fromUnit);
    public BigInteger ToWei(float value, EthUnit fromUnit);
    public BigInteger ToWei(long value, EthUnit fromUnit);
    public BigInteger ToWei(string value, EthUnit fromUnit);
    private BigInteger CalculateNumberOfDecimalPlaces(double value, int maxNumberOfDecimals, int currentNumberOfDecimals);
    private BigInteger CalculateNumberOfDecimalPlaces(float value, int maxNumberOfDecimals, int currentNumberOfDecimals);
    private int CalculateNumberOfDecimalPlaces(decimal value, int maxNumberOfDecimals, int currentNumberOfDecimals);
}
public class Nethereum.Util.WaitStrategy : object {
    private static Int32[] WaitIntervals;
    private static WaitStrategy();
    public sealed virtual Task ApplyAsync(UInt32 retryCount);
}
