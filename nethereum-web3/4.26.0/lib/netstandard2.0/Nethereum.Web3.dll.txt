public abstract class Nethereum.Web3.ContractWeb3ServiceBase : ContractServiceBase {
    [CompilerGeneratedAttribute]
private IWeb3 <Web3>k__BackingField;
    public IWeb3 Web3 { get; }
    public ContractWeb3ServiceBase(IWeb3 web3, string contractAddress);
    public static Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(IWeb3 web3, TDeploymentMessage deploymentMessage, CancellationTokenSource cancellationTokenSource);
    public static Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(IWeb3 web3, TDeploymentMessage deploymentMessage, CancellationToken cancellationToken);
    public static Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(IWeb3 web3, TDeploymentMessage deploymentMessage, IEnumerable`1<ByteCodeLibrary> byteCodeLibraries, CancellationTokenSource cancellationTokenSource);
    public static Task`1<TransactionReceipt> DeployContractAndWaitForReceiptAsync(IWeb3 web3, TDeploymentMessage deploymentMessage, IEnumerable`1<ByteCodeLibrary> byteCodeLibraries, CancellationToken cancellationToken);
    public static Task`1<string> DeployContractAsync(IWeb3 web3, TDeploymentMessage deploymentMessage, IEnumerable`1<ByteCodeLibrary> byteCodeLibraries);
    public static Task`1<Create2ContractDeploymentTransactionResult> DeployCreate2ContractAsync(IWeb3 web3, string deployerAddress, string salt, TDeploymentMessage deploymentMessage, ByteCodeLibrary[] byteCodeLibraries);
    public static Task`1<Create2ContractDeploymentTransactionReceiptResult> DeployCreate2ContractAndWaitForReceiptAsync(IWeb3 web3, string deployerAddress, string salt, TDeploymentMessage deploymentMessage, ByteCodeLibrary[] byteCodeLibraries, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public IWeb3 get_Web3();
}
public class Nethereum.Web3.IPFSFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    public string Name { get; public set; }
    public string Size { get; public set; }
    public string Hash { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(string value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
}
public class Nethereum.Web3.IpfsHttpService : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    private AuthenticationHeaderValue _authHeaderValue;
    public string Url { get; }
    public Uri Uri { get; }
    public IpfsHttpService(string url);
    public IpfsHttpService(string url, string userName, string password);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    public AuthenticationHeaderValue GetBasicAuthenticationHeaderValue(string userName, string password);
    [AsyncStateMachineAttribute("Nethereum.Web3.IpfsHttpService/<AddAsync>d__10")]
public Task`1<IPFSFileInfo> AddAsync(Byte[] fileBytes, string fileName, bool pin);
    [AsyncStateMachineAttribute("Nethereum.Web3.IpfsHttpService/<CatAsync>d__11")]
public Task`1<Stream> CatAsync(string path);
    [AsyncStateMachineAttribute("Nethereum.Web3.IpfsHttpService/<AddObjectAsJson>d__12`1")]
public Task`1<IPFSFileInfo> AddObjectAsJson(T objectToSerialise, string fileName, bool pin);
}
public interface Nethereum.Web3.IWeb3 {
    public IClient Client { get; }
    public IEthApiContractService Eth { get; }
    public IBlockchainProcessingService Processing { get; }
    public INetApiService Net { get; }
    public IPersonalApiService Personal { get; }
    public IShhApiService Shh { get; }
    public ITransactionManager TransactionManager { get; public set; }
    public ITransactionReceiptService TransactionReceiptPolling { get; public set; }
    public IDebugApiService Debug { get; }
    public FeeSuggestionService FeeSuggestion { get; }
    public abstract virtual IClient get_Client();
    public abstract virtual IEthApiContractService get_Eth();
    public abstract virtual IBlockchainProcessingService get_Processing();
    public abstract virtual INetApiService get_Net();
    public abstract virtual IPersonalApiService get_Personal();
    public abstract virtual IShhApiService get_Shh();
    public abstract virtual ITransactionManager get_TransactionManager();
    public abstract virtual void set_TransactionManager(ITransactionManager value);
    public abstract virtual ITransactionReceiptService get_TransactionReceiptPolling();
    public abstract virtual void set_TransactionReceiptPolling(ITransactionReceiptService value);
    public abstract virtual IDebugApiService get_Debug();
    public abstract virtual FeeSuggestionService get_FeeSuggestion();
}
public class Nethereum.Web3.Web3 : object {
    private static AddressUtil AddressUtil;
    private static Sha3Keccack Sha3Keccack;
    [CompilerGeneratedAttribute]
private static UnitConversion <Convert>k__BackingField;
    [CompilerGeneratedAttribute]
private IClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private IEthApiContractService <Eth>k__BackingField;
    [CompilerGeneratedAttribute]
private IShhApiService <Shh>k__BackingField;
    [CompilerGeneratedAttribute]
private INetApiService <Net>k__BackingField;
    [CompilerGeneratedAttribute]
private IPersonalApiService <Personal>k__BackingField;
    [CompilerGeneratedAttribute]
private IBlockchainProcessingService <Processing>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugApiService <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private FeeSuggestionService <FeeSuggestion>k__BackingField;
    public ITransactionManager TransactionManager { get; public set; }
    public static UnitConversion Convert { get; }
    public IClient Client { get; private set; }
    public IEthApiContractService Eth { get; private set; }
    public IShhApiService Shh { get; private set; }
    public INetApiService Net { get; private set; }
    public IPersonalApiService Personal { get; private set; }
    public IBlockchainProcessingService Processing { get; private set; }
    public IDebugApiService Debug { get; private set; }
    public FeeSuggestionService FeeSuggestion { get; private set; }
    public ITransactionReceiptService TransactionReceiptPolling { get; public set; }
    public Web3(IClient client);
    public Web3(IAccount account, IClient client);
    public Web3(string url, ILogger log, AuthenticationHeaderValue authenticationHeader);
    public Web3(IAccount account, string url, ILogger log, AuthenticationHeaderValue authenticationHeader);
    private static Web3();
    private void InitialiseDefaultTransactionVerificationAndRecovery();
    public sealed virtual ITransactionManager get_TransactionManager();
    public sealed virtual void set_TransactionManager(ITransactionManager value);
    [CompilerGeneratedAttribute]
public static UnitConversion get_Convert();
    [CompilerGeneratedAttribute]
public sealed virtual IClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(IClient value);
    [CompilerGeneratedAttribute]
public sealed virtual IEthApiContractService get_Eth();
    [CompilerGeneratedAttribute]
private void set_Eth(IEthApiContractService value);
    [CompilerGeneratedAttribute]
public sealed virtual IShhApiService get_Shh();
    [CompilerGeneratedAttribute]
private void set_Shh(IShhApiService value);
    [CompilerGeneratedAttribute]
public sealed virtual INetApiService get_Net();
    [CompilerGeneratedAttribute]
private void set_Net(INetApiService value);
    [CompilerGeneratedAttribute]
public sealed virtual IPersonalApiService get_Personal();
    [CompilerGeneratedAttribute]
private void set_Personal(IPersonalApiService value);
    [CompilerGeneratedAttribute]
public sealed virtual IBlockchainProcessingService get_Processing();
    [CompilerGeneratedAttribute]
private void set_Processing(IBlockchainProcessingService value);
    [CompilerGeneratedAttribute]
public sealed virtual IDebugApiService get_Debug();
    [CompilerGeneratedAttribute]
private void set_Debug(IDebugApiService value);
    [CompilerGeneratedAttribute]
public sealed virtual FeeSuggestionService get_FeeSuggestion();
    [CompilerGeneratedAttribute]
private void set_FeeSuggestion(FeeSuggestionService value);
    public sealed virtual ITransactionReceiptService get_TransactionReceiptPolling();
    public sealed virtual void set_TransactionReceiptPolling(ITransactionReceiptService value);
    private void InitialiseDefaultGasAndGasPrice();
    public static string GetAddressFromPrivateKey(string privateKey);
    public static bool IsChecksumAddress(string address);
    public static string Sha3(string value);
    public static string ToChecksumAddress(string address);
    public static string ToValid20ByteAddress(string address);
    protected virtual void InitialiseInnerServices();
    private void InitialiseDefaultRpcClient(string url, ILogger log, AuthenticationHeaderValue authenticationHeader);
}
