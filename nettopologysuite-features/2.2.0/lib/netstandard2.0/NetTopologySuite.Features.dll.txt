[DefaultMemberAttribute("Item")]
public class NetTopologySuite.Features.AttributesTable : object {
    private Dictionary`2<string, object> _attributes;
    [CompilerGeneratedAttribute]
private static bool <AddAttributeWithIndexer>k__BackingField;
    public static bool AddAttributeWithIndexer { get; public set; }
    public int Count { get; }
    public object Item { get; public set; }
    public AttributesTable(IEqualityComparer`1<string> nameComparer);
    public AttributesTable(IEnumerable`1<KeyValuePair`2<string, object>> attributes);
    public AttributesTable(IEnumerable`1<KeyValuePair`2<string, object>> attributes, IEqualityComparer`1<string> nameComparer);
    public AttributesTable(Dictionary`2<string, object> attributes);
    private AttributesTable(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public static bool get_AddAttributeWithIndexer();
    [CompilerGeneratedAttribute]
public static void set_AddAttributeWithIndexer(bool value);
    public sealed virtual int get_Count();
    public sealed virtual object get_Item(string attributeName);
    public sealed virtual void set_Item(string attributeName, object value);
    public sealed virtual String[] GetNames();
    public sealed virtual Object[] GetValues();
    public sealed virtual bool Exists(string attributeName);
    public sealed virtual void DeleteAttribute(string attributeName);
    public sealed virtual Type GetType(string attributeName);
    public void MergeWith(IAttributesTable other, bool preferThis);
    public sealed virtual void Add(string attributeName, object attributeValue);
    public sealed virtual object GetOptionalValue(string attributeName);
    public Enumerator<string, object> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private object GetValue(string attributeName);
    private void SetValue(string attributeName, object value);
}
public class NetTopologySuite.Features.Feature : object {
    private Envelope _boundingBox;
    [CompilerGeneratedAttribute]
private static bool <ComputeBoundingBoxWhenItIsMissing>k__BackingField;
    [CompilerGeneratedAttribute]
private Geometry <Geometry>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributesTable <Attributes>k__BackingField;
    public static bool ComputeBoundingBoxWhenItIsMissing { get; public set; }
    public Geometry Geometry { get; public set; }
    public IAttributesTable Attributes { get; public set; }
    public Envelope BoundingBox { get; public set; }
    public Feature(Geometry geometry, IAttributesTable attributes);
    private Feature(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public static bool get_ComputeBoundingBoxWhenItIsMissing();
    [CompilerGeneratedAttribute]
public static void set_ComputeBoundingBoxWhenItIsMissing(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Geometry get_Geometry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Geometry(Geometry value);
    [CompilerGeneratedAttribute]
public sealed virtual IAttributesTable get_Attributes();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Attributes(IAttributesTable value);
    public sealed virtual Envelope get_BoundingBox();
    public sealed virtual void set_BoundingBox(Envelope value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class NetTopologySuite.Features.FeatureCollection : Collection`1<IFeature> {
    private Envelope _boundingBox;
    public Envelope BoundingBox { get; public set; }
    public FeatureCollection(IEnumerable`1<IFeature> features);
    private FeatureCollection(SerializationInfo info, StreamingContext context);
    public Envelope get_BoundingBox();
    public void set_BoundingBox(Envelope value);
    private Envelope ComputeBoundingBox();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class NetTopologySuite.Features.FeatureExtensions : object {
    [ExtensionAttribute]
public static object GetOptionalId(IFeature feature, string idPropertyName);
}
[DefaultMemberAttribute("Item")]
public interface NetTopologySuite.Features.IAttributesTable {
    public object Item { get; public set; }
    public int Count { get; }
    public abstract virtual void Add(string attributeName, object value);
    public abstract virtual void DeleteAttribute(string attributeName);
    public abstract virtual Type GetType(string attributeName);
    public abstract virtual object get_Item(string attributeName);
    public abstract virtual void set_Item(string attributeName, object value);
    public abstract virtual bool Exists(string attributeName);
    public abstract virtual int get_Count();
    public abstract virtual String[] GetNames();
    public abstract virtual Object[] GetValues();
    public abstract virtual object GetOptionalValue(string attributeName);
}
public interface NetTopologySuite.Features.IFeature {
    public Geometry Geometry { get; public set; }
    public Envelope BoundingBox { get; public set; }
    public IAttributesTable Attributes { get; public set; }
    public abstract virtual Geometry get_Geometry();
    public abstract virtual void set_Geometry(Geometry value);
    public abstract virtual Envelope get_BoundingBox();
    public abstract virtual void set_BoundingBox(Envelope value);
    public abstract virtual IAttributesTable get_Attributes();
    public abstract virtual void set_Attributes(IAttributesTable value);
}
[ExtensionAttribute]
internal static class NetTopologySuite.Features.InternalExtensions : object {
    [ExtensionAttribute]
public static Envelope GetBoundingBox(SerializationInfo info);
    [ExtensionAttribute]
public static void AddBoundingBox(SerializationInfo info, Envelope boundingBox);
}
public interface NetTopologySuite.Features.IUnique {
    public object Id { get; }
    public abstract virtual object get_Id();
}
