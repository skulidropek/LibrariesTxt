[ExtensionAttribute]
public static class NetTopologySuite.IO.AttributesTableExtensions : object {
    public static string IdPropertyName;
    private static AttributesTableExtensions();
    [ExtensionAttribute]
public static bool TryGetId(IAttributesTable attributes, Object& id);
}
public class NetTopologySuite.IO.Converters.AttributesTableConverter : JsonConverter {
    [CompilerGeneratedAttribute]
private static bool <WriteIdToProperties>k__BackingField;
    public static bool WriteIdToProperties { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_WriteIdToProperties();
    [CompilerGeneratedAttribute]
public static void set_WriteIdToProperties(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private static IList`1<object> InternalReadJsonArray(JsonReader reader, JsonSerializer serializer);
    private static object InternalReadJson(JsonReader reader, JsonSerializer serializer, bool innerObject);
    public virtual bool CanConvert(Type objectType);
}
public class NetTopologySuite.IO.Converters.EnvelopeConverter : JsonConverter {
    private PrecisionModel _precisionModel;
    internal EnvelopeConverter(PrecisionModel precisionModel);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class NetTopologySuite.IO.Converters.FeatureCollectionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class NetTopologySuite.IO.Converters.FeatureConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[ObsoleteAttribute("Does not do anything useful, actually", "True")]
public class NetTopologySuite.IO.Converters.GeometryArrayConverter : JsonConverter {
    private GeometryFactory _factory;
    private int _dimension;
    public GeometryArrayConverter(GeometryFactory factory);
    public GeometryArrayConverter(GeometryFactory factory, int dimension);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static void WriteGeometries(JsonWriter writer, IEnumerable`1<Geometry> geometries, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    private MultiLineString CreateMultiLineString(IEnumerable`1<IEnumerable`1<Coordinate>> coordinates);
    private Polygon CreatePolygon(IEnumerable`1<IEnumerable`1<Coordinate>> coordinates);
    private MultiPolygon CreateMultiPolygon(IEnumerable`1<IEnumerable`1<IEnumerable`1<Coordinate>>> coordinates);
    private Coordinate ToCoordinate(JArray array, IFormatProvider formatProvider);
    private Coordinate[] ToCoordinates(JArray array, IFormatProvider formatProvider);
    [IteratorStateMachineAttribute("NetTopologySuite.IO.Converters.GeometryArrayConverter/<ToListOfCoordinates>d__14")]
private IEnumerable`1<Coordinate[]> ToListOfCoordinates(JArray array, IFormatProvider formatProvider);
    [IteratorStateMachineAttribute("NetTopologySuite.IO.Converters.GeometryArrayConverter/<ToListOfListOfCoordinates>d__15")]
private IEnumerable`1<IEnumerable`1<Coordinate[]>> ToListOfListOfCoordinates(JArray array, IFormatProvider formatProvider);
}
public class NetTopologySuite.IO.Converters.GeometryConverter : JsonConverter {
    private GeometryFactory _factory;
    private int _dimension;
    private OrientationIndex _exteriorRingOrientation;
    private OrientationIndex _interiorRingOrientation;
    private JsonSerializerSettings _serializerSettingsForCoordinates;
    public GeometryConverter(GeometryFactory geometryFactory);
    public GeometryConverter(GeometryFactory geometryFactory, int dimension);
    internal GeometryConverter(GeometryFactory geometryFactory, int dimension, RingOrientationOption enforceRingOrientation, JsonSerializerSettings settingsForCoordinates);
    private List`1<object> ReadCoordinates(JsonReader reader);
    private void WriteCoordinates(JsonWriter writer, CoordinateSequence sequence, bool multiple, OrientationIndex orientation);
    private JsonSerializerSettings BackupSerializerSettings(JsonWriter writer);
    private void ApplySerializerSettings(JsonWriter writer, JsonSerializerSettings serializerSettings);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private List`1<object> ParseGeomCollection(JsonReader reader, JsonSerializer serializer);
    private Coordinate CreateCoordinate(JsonReader reader, List`1<object> list);
    private Coordinate[] CreateCoordinateArray(JsonReader reader, List`1<object> list);
    private Geometry ParseGeometry(JsonReader reader, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    private Point CreatePoint(JsonReader reader, List`1<object> list);
    private LineString CreateLineString(JsonReader reader, List`1<object> list);
    private Polygon CreatePolygon(JsonReader reader, List`1<object> list);
    public virtual bool CanConvert(Type objectType);
    [CompilerGeneratedAttribute]
private void <WriteJson>g__WritePolygonCoordinates|13_0(Polygon polygon, <>c__DisplayClass13_0& );
}
[ExtensionAttribute]
internal static class NetTopologySuite.IO.Converters.Utility : object {
    [ExtensionAttribute]
internal static void SkipComments(JsonReader reader);
    [ExtensionAttribute]
internal static void ReadOrThrow(JsonReader reader);
    private static void ThrowExceptionForEndOfStream();
}
public enum NetTopologySuite.IO.GeoJsonObjectType : Enum {
    public int value__;
    public static GeoJsonObjectType Point;
    public static GeoJsonObjectType MultiPoint;
    public static GeoJsonObjectType LineString;
    public static GeoJsonObjectType MultiLineString;
    public static GeoJsonObjectType Polygon;
    public static GeoJsonObjectType MultiPolygon;
    public static GeoJsonObjectType GeometryCollection;
    public static GeoJsonObjectType Feature;
    public static GeoJsonObjectType FeatureCollection;
}
public class NetTopologySuite.IO.GeoJsonReader : object {
    private GeometryFactory _factory;
    private JsonSerializerSettings _serializerSettings;
    private int _dimension;
    private RingOrientationOption _ringOrientationOption;
    public GeoJsonReader(GeometryFactory factory, JsonSerializerSettings serializerSettings);
    public GeoJsonReader(GeometryFactory factory, JsonSerializerSettings serializerSettings, int dimension);
    public GeoJsonReader(GeometryFactory factory, JsonSerializerSettings serializerSettings, int dimension, RingOrientationOption ringOrientationOption);
    public TObject Read(string json);
    public TObject Read(JsonReader json);
}
public class NetTopologySuite.IO.GeoJsonSerializer : JsonSerializer {
    private static int _dimension;
    [CompilerGeneratedAttribute]
private static RingOrientationOption <RingOrientationOption>k__BackingField;
    internal static GeometryFactory Wgs84Factory { get; }
    public static RingOrientationOption RingOrientationOption { get; public set; }
    public static int Dimension { get; public set; }
    private static GeoJsonSerializer();
    internal static GeometryFactory get_Wgs84Factory();
    [CompilerGeneratedAttribute]
public static RingOrientationOption get_RingOrientationOption();
    [CompilerGeneratedAttribute]
public static void set_RingOrientationOption(RingOrientationOption value);
    public static int get_Dimension();
    public static void set_Dimension(int value);
    public static JsonSerializer Create();
    public static JsonSerializer CreateDefault();
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings, JsonSerializerSettings coordinateSerializerSettings);
    public static JsonSerializer Create(GeometryFactory factory);
    public static JsonSerializer Create(GeometryFactory factory, int dimension);
    public static JsonSerializer Create(JsonSerializerSettings settings, GeometryFactory factory);
    public static JsonSerializer Create(JsonSerializerSettings settings, GeometryFactory factory, int dimension);
    public static JsonSerializer Create(JsonSerializerSettings settings, GeometryFactory factory, int dimension, RingOrientationOption enforceRingOrientation);
    public static JsonSerializer Create(JsonSerializerSettings settings, GeometryFactory factory, int dimension, RingOrientationOption enforceRingOrientation, JsonSerializerSettings coordinateSerializerSettings);
    private static void AddGeoJsonConverters(JsonSerializer s, GeometryFactory factory, int dimension, RingOrientationOption enforceRingOrientation, JsonSerializerSettings coordinateSerializerSettings);
}
public class NetTopologySuite.IO.GeoJsonWriter : object {
    private int _dimension;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private RingOrientationOption <RingOrientationOption>k__BackingField;
    public JsonSerializerSettings SerializerSettings { get; public set; }
    public RingOrientationOption RingOrientationOption { get; public set; }
    public int Dimension { get; public set; }
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_SerializerSettings();
    [CompilerGeneratedAttribute]
public void set_SerializerSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public RingOrientationOption get_RingOrientationOption();
    [CompilerGeneratedAttribute]
public void set_RingOrientationOption(RingOrientationOption value);
    public int get_Dimension();
    public void set_Dimension(int value);
    public string Write(Geometry geometry);
    public void Write(Geometry geometry, JsonWriter writer);
    public string Write(Feature feature);
    public void Write(Feature feature, JsonWriter writer);
    public string Write(FeatureCollection featureCollection);
    public void Write(FeatureCollection featureCollection, JsonWriter writer);
    private static GeometryFactory SearchForFactory(FeatureCollection features);
    public string Write(object value);
    public void Write(object value, JsonWriter writer);
}
public enum NetTopologySuite.IO.RingOrientationOption : Enum {
    public int value__;
    public static RingOrientationOption DoNotModify;
    public static RingOrientationOption EnforceRfc9746;
    public static RingOrientationOption NtsGeoJsonV2;
}
