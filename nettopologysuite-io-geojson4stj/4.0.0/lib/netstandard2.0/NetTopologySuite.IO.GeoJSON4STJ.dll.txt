[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public interface NetTopologySuite.Features.IPartiallyDeserializedAttributesTable {
    public abstract virtual bool TryDeserializeJsonObject(JsonSerializerOptions options, T& deserialized);
    public abstract virtual bool TryGetJsonObjectPropertyValue(string propertyName, JsonSerializerOptions options, T& deserialized);
}
[DefaultMemberAttribute("Item")]
internal class NetTopologySuite.Features.JsonArrayInAttributesTableWrapper : object {
    private JsonArray _array;
    private JsonSerializerOptions _serializerOptions;
    public object Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Object>.IsReadOnly { get; }
    public JsonArrayInAttributesTableWrapper(JsonArray array, JsonSerializerOptions serializerOptions);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Object>.get_IsReadOnly();
    public sealed virtual void Add(object item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object item);
    public sealed virtual void CopyTo(Object[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<object> GetEnumerator();
    public sealed virtual int IndexOf(object item);
    public sealed virtual void Insert(int index, object item);
    public sealed virtual bool Remove(object item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private object <GetEnumerator>b__14_0(JsonNode node);
}
[DefaultMemberAttribute("Item")]
public class NetTopologySuite.Features.JsonElementAttributesTable : object {
    [CompilerGeneratedAttribute]
private JsonElement <RootElement>k__BackingField;
    public JsonElement RootElement { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public JsonElementAttributesTable(JsonElement rootElement);
    [CompilerGeneratedAttribute]
public JsonElement get_RootElement();
    public sealed virtual object get_Item(string attributeName);
    public sealed virtual void set_Item(string attributeName, object value);
    public sealed virtual int get_Count();
    public sealed virtual bool Exists(string attributeName);
    public sealed virtual object GetOptionalValue(string attributeName);
    public sealed virtual Type GetType(string attributeName);
    public sealed virtual String[] GetNames();
    public sealed virtual Object[] GetValues();
    public sealed virtual bool TryDeserializeJsonObject(JsonSerializerOptions options, T& deserialized);
    public sealed virtual bool TryGetJsonObjectPropertyValue(string propertyName, JsonSerializerOptions options, T& deserialized);
    private sealed virtual override void NetTopologySuite.Features.IAttributesTable.Add(string attributeName, object value);
    private sealed virtual override void NetTopologySuite.Features.IAttributesTable.DeleteAttribute(string attributeName);
    private static void ThrowNotSupportedExceptionForReadOnlyTable();
    private static bool TryDeserializeElement(JsonElement elementToTransform, JsonSerializerOptions options, T& deserialized);
    internal static object ConvertValue(JsonElement prop);
    [CompilerGeneratedAttribute]
private object <GetValues>b__13_0(JsonProperty prop);
}
[DefaultMemberAttribute("Item")]
public class NetTopologySuite.Features.JsonObjectAttributesTable : object {
    [CompilerGeneratedAttribute]
private JsonObject <RootObject>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerOptions <SerializerOptions>k__BackingField;
    public JsonObject RootObject { get; }
    public JsonSerializerOptions SerializerOptions { get; }
    public object Item { get; public set; }
    public int Count { get; }
    internal JsonObjectAttributesTable(JsonObject rootObject, JsonSerializerOptions serializerOptions);
    [CompilerGeneratedAttribute]
public JsonObject get_RootObject();
    [CompilerGeneratedAttribute]
public JsonSerializerOptions get_SerializerOptions();
    public sealed virtual object get_Item(string attributeName);
    public sealed virtual void set_Item(string attributeName, object value);
    public sealed virtual int get_Count();
    public sealed virtual void Add(string attributeName, object value);
    public sealed virtual void DeleteAttribute(string attributeName);
    public sealed virtual bool Exists(string attributeName);
    public sealed virtual object GetOptionalValue(string attributeName);
    public sealed virtual Type GetType(string attributeName);
    public sealed virtual String[] GetNames();
    public sealed virtual Object[] GetValues();
    public sealed virtual bool TryDeserializeJsonObject(JsonSerializerOptions options, T& deserialized);
    public sealed virtual bool TryGetJsonObjectPropertyValue(string propertyName, JsonSerializerOptions options, T& deserialized);
    [CompilerGeneratedAttribute]
private object <GetValues>b__18_0(KeyValuePair`2<string, JsonNode> kvp);
}
public class NetTopologySuite.IO.Converters.GeoJsonConverterFactory : JsonConverterFactory {
    private static bool DefaultWriteGeometryBBox;
    private static RingOrientationOption DefaultRingOrientationOption;
    private static bool DefaultAllowModifyingAttributesTables;
    public static string DefaultIdPropertyName;
    private static HashSet`1<Type> GeometryTypes;
    private GeometryFactory _factory;
    private bool _writeGeometryBBox;
    private string _idPropertyName;
    private RingOrientationOption _ringOrientationOption;
    private bool _allowModifyingAttributesTables;
    public GeoJsonConverterFactory(GeometryFactory factory);
    public GeoJsonConverterFactory(bool writeGeometryBBox);
    public GeoJsonConverterFactory(GeometryFactory factory, bool writeGeometryBBox);
    public GeoJsonConverterFactory(bool writeGeometryBBox, string idPropertyName);
    public GeoJsonConverterFactory(GeometryFactory factory, bool writeGeometryBBox, string idPropertyName);
    public GeoJsonConverterFactory(bool writeGeometryBBox, string idPropertyName, RingOrientationOption ringOrientationOption);
    public GeoJsonConverterFactory(GeometryFactory factory, bool writeGeometryBBox, string idPropertyName, RingOrientationOption ringOrientationOption);
    public GeoJsonConverterFactory(bool writeGeometryBBox, string idPropertyName, RingOrientationOption ringOrientationOption, bool allowModifyingAttributesTables);
    public GeoJsonConverterFactory(GeometryFactory factory, bool writeGeometryBBox, string idPropertyName, RingOrientationOption ringOrientationOption, bool allowModifyingAttributesTables);
    private static GeoJsonConverterFactory();
    public virtual bool CanConvert(Type typeToConvert);
    public virtual JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options);
}
internal enum NetTopologySuite.IO.Converters.GeoJsonObjectType : Enum {
    public int value__;
    public static GeoJsonObjectType Point;
    public static GeoJsonObjectType MultiPoint;
    public static GeoJsonObjectType LineString;
    public static GeoJsonObjectType MultiLineString;
    public static GeoJsonObjectType Polygon;
    public static GeoJsonObjectType MultiPolygon;
    public static GeoJsonObjectType GeometryCollection;
    public static GeoJsonObjectType Feature;
    public static GeoJsonObjectType FeatureCollection;
}
public enum NetTopologySuite.IO.Converters.RingOrientationOption : Enum {
    public int value__;
    public static RingOrientationOption DoNotModify;
    public static RingOrientationOption EnforceRfc9746;
    public static RingOrientationOption NtsGeoJsonV2;
}
internal class NetTopologySuite.IO.Converters.StjAttributesTableConverter : JsonConverter`1<IAttributesTable> {
    private string _idPropertyName;
    private bool _allowModifyingAttributesTables;
    public StjAttributesTableConverter(string idPropertyName, bool allowModifyingAttributesTables);
    public virtual void Write(Utf8JsonWriter writer, IAttributesTable value, JsonSerializerOptions options);
    public virtual IAttributesTable Read(Utf8JsonReader& reader, Type objectType, JsonSerializerOptions options);
    public virtual bool CanConvert(Type objectType);
}
[ExtensionAttribute]
public static class NetTopologySuite.IO.Converters.StjAttributesTableExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Cast to IPartiallyDeserializedAttributesTable and call the instance method instead.")]
public static bool TryDeserializeJsonObject(IAttributesTable table, JsonSerializerOptions options, T& deserialized);
    [ExtensionAttribute]
[ObsoleteAttribute("Cast to IPartiallyDeserializedAttributesTable and call the instance method instead.")]
public static bool TryGetJsonObjectPropertyValue(IAttributesTable table, string propertyName, JsonSerializerOptions options, T& deserialized);
}
internal class NetTopologySuite.IO.Converters.StjFeature : object {
    private Feature _implementation;
    private string _idPropertyName;
    private object _id;
    public object Id { get; public set; }
    public Geometry Geometry { get; public set; }
    public Envelope BoundingBox { get; public set; }
    public IAttributesTable Attributes { get; public set; }
    public StjFeature(string idPropertyName);
    public sealed virtual object get_Id();
    public void set_Id(object value);
    public sealed virtual Geometry get_Geometry();
    public sealed virtual void set_Geometry(Geometry value);
    public sealed virtual Envelope get_BoundingBox();
    public sealed virtual void set_BoundingBox(Envelope value);
    public sealed virtual IAttributesTable get_Attributes();
    public sealed virtual void set_Attributes(IAttributesTable value);
}
internal class NetTopologySuite.IO.Converters.StjFeatureCollectionConverter : JsonConverter`1<FeatureCollection> {
    private bool _writeGeometryBBox;
    public StjFeatureCollectionConverter(bool writeGeometryBBox);
    public virtual FeatureCollection Read(Utf8JsonReader& reader, Type objectType, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, FeatureCollection value, JsonSerializerOptions options);
}
internal class NetTopologySuite.IO.Converters.StjFeatureConverter : JsonConverter`1<IFeature> {
    private string _idPropertyName;
    private bool _writeGeometryBBox;
    public StjFeatureConverter(string idPropertyName, bool writeGeometryBBox);
    public virtual void Write(Utf8JsonWriter writer, IFeature value, JsonSerializerOptions options);
    public virtual IFeature Read(Utf8JsonReader& reader, Type objectType, JsonSerializerOptions options);
    public virtual bool CanConvert(Type objectType);
}
internal class NetTopologySuite.IO.Converters.StjGeometryConverter : JsonConverter`1<Geometry> {
    [CompilerGeneratedAttribute]
private static GeometryFactory <DefaultGeometryFactory>k__BackingField;
    private GeometryFactory _geometryFactory;
    private bool _writeGeometryBBox;
    private OrientationIndex _oriExterior;
    private OrientationIndex _oriInterior;
    public static GeometryFactory DefaultGeometryFactory { get; }
    public StjGeometryConverter(GeometryFactory geometryFactory, bool writeGeometryBBox);
    public StjGeometryConverter(GeometryFactory geometryFactory, bool writeGeometryBBox, RingOrientationOption ringOrientationOption);
    private static StjGeometryConverter();
    private void WriteCoordinateSequence(Utf8JsonWriter writer, CoordinateSequence sequence, JsonSerializerOptions options, bool multiple, OrientationIndex orientation);
    [CompilerGeneratedAttribute]
public static GeometryFactory get_DefaultGeometryFactory();
    public virtual Geometry Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    private Geometry[] ReadGeometries(Utf8JsonReader& reader, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, Geometry value, JsonSerializerOptions options);
    private void WritePolygon(Utf8JsonWriter writer, Polygon value, JsonSerializerOptions options);
    internal static Envelope ReadBBox(Utf8JsonReader& reader, JsonSerializerOptions options);
    internal static void WriteBBox(Utf8JsonWriter writer, Envelope value, JsonSerializerOptions options);
}
[IsReadOnlyAttribute]
internal class NetTopologySuite.IO.Converters.StjParsedCoordinates : ValueType {
    private static GeoJsonObjectType[] SupportedTypesForPoint;
    private static GeoJsonObjectType[] SupportedTypesForCoordinateSequence;
    private static GeoJsonObjectType[] SupportedTypesForCoordinateSequenceList;
    private static GeoJsonObjectType[] SupportedTypesForMultiPolygon;
    private static GeoJsonObjectType[] SupportedTypesForEmpty;
    private object _obj;
    public ReadOnlySpan`1<GeoJsonObjectType> SupportedTypes { get; }
    private StjParsedCoordinates(object obj);
    private static StjParsedCoordinates();
    public static StjParsedCoordinates Parse(Utf8JsonReader& reader, GeometryFactory factory);
    public ReadOnlySpan`1<GeoJsonObjectType> get_SupportedTypes();
    public Point ToPoint(GeometryFactory factory);
    public LineString ToLineString(GeometryFactory factory);
    public MultiPoint ToMultiPoint(GeometryFactory factory);
    public Polygon ToPolygon(GeometryFactory factory);
    public MultiLineString ToMultiLineString(GeometryFactory factory);
    public MultiPolygon ToMultiPolygon(GeometryFactory factory);
    private static Point ParsePoint(Utf8JsonReader& reader, GeometryFactory factory);
    private static CoordinateSequence ParseCoordinateSequence(Utf8JsonReader& reader, GeometryFactory factory, List`1<double> ords);
    private static List`1<CoordinateSequence> ParseCoordinateSequenceList(Utf8JsonReader& reader, GeometryFactory factory, List`1<CoordinateSequence> seqs, List`1<double> ords);
    private static MultiPolygon ParseMultiPolygon(Utf8JsonReader& reader, GeometryFactory factory);
    private static ValueTuple`3<double, double, Nullable`1<double>> ReadXYZ(Utf8JsonReader& reader, PrecisionModel precisionModel);
    private static void AdvanceReaderToEndOfCurrentNumberArray(Utf8JsonReader& reader);
    private static List`1<double> ConvertXYToXYZ(List`1<double> xys);
    private static Polygon ToPolygon(IReadOnlyList`1<CoordinateSequence> ringSequences, GeometryFactory factory);
}
[ExtensionAttribute]
internal static class NetTopologySuite.IO.Converters.Utility : object {
    [ExtensionAttribute]
internal static bool ShouldWriteNullValues(JsonSerializerOptions options);
    [ExtensionAttribute]
internal static void SkipComments(Utf8JsonReader& reader);
    [ExtensionAttribute]
internal static bool ReadToken(Utf8JsonReader& reader, JsonTokenType tokenType, bool throwException);
    [ExtensionAttribute]
internal static void ReadOrThrow(Utf8JsonReader& reader);
    [ExtensionAttribute]
internal static void AssertToken(Utf8JsonReader& reader, JsonTokenType requiredCurrentTokenType);
    internal static object ObjectFromJsonNode(JsonNode node, JsonSerializerOptions serializerOptions);
    internal static JsonNode ObjectToJsonNode(object obj, JsonSerializerOptions serializerOptions);
    private static void ThrowForUnexpectedEndOfStream();
    private static void ThrowForUnexpectedToken(JsonTokenType requiredNextTokenType, Utf8JsonReader& reader);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NetTopologySuite.IO.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string EX_CoordinatesIncompatibleWithType { get; }
    internal static string EX_EndArrayTokenExpected { get; }
    internal static string EX_GCTypeWithoutGeometries { get; }
    internal static string EX_NoCoordinatesDefined { get; }
    internal static string EX_NoGeometryTypeDefined { get; }
    internal static string EX_StartArrayTokenExpected { get; }
    internal static string EX_UnexpectedEndOfStream { get; }
    internal static string EX_UnexpectedToken { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_EX_CoordinatesIncompatibleWithType();
    internal static string get_EX_EndArrayTokenExpected();
    internal static string get_EX_GCTypeWithoutGeometries();
    internal static string get_EX_NoCoordinatesDefined();
    internal static string get_EX_NoGeometryTypeDefined();
    internal static string get_EX_StartArrayTokenExpected();
    internal static string get_EX_UnexpectedEndOfStream();
    internal static string get_EX_UnexpectedToken();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
