internal enum NetTopologySuite.IO.PostGisGeometryType : Enum {
    public int value__;
    public static PostGisGeometryType Point;
    public static PostGisGeometryType LineString;
    public static PostGisGeometryType Polygon;
    public static PostGisGeometryType MultiPoint;
    public static PostGisGeometryType MultiLineString;
    public static PostGisGeometryType MultiPolygon;
    public static PostGisGeometryType GeometryCollection;
}
public class NetTopologySuite.IO.PostGisReader : object {
    private PrecisionModel _precisionModel;
    private CoordinateSequenceFactory _coordinateSequenceFactory;
    private Ordinates _handleOrdinates;
    private GeometryFactory _factory;
    [CompilerGeneratedAttribute]
private bool <RepairRings>k__BackingField;
    public bool RepairRings { get; public set; }
    public Ordinates AllowedOrdinates { get; }
    public Ordinates HandleOrdinates { get; public set; }
    public PostGisReader(GeometryFactory factory);
    public PostGisReader(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel);
    public PostGisReader(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel, Ordinates handleOrdinates);
    [CompilerGeneratedAttribute]
public bool get_RepairRings();
    [CompilerGeneratedAttribute]
public void set_RepairRings(bool value);
    public Ordinates get_AllowedOrdinates();
    public Ordinates get_HandleOrdinates();
    public void set_HandleOrdinates(Ordinates value);
    public Geometry Read(Byte[] data);
    public Geometry Read(Stream stream);
    protected Geometry Read(BinaryReader reader);
    protected Point ReadPoint(BinaryReader reader, GeometryFactory factory, Ordinates receivedOrdinates);
    protected CoordinateSequence ReadCoordinateSequence(BinaryReader reader, CoordinateSequenceFactory factory, PrecisionModel precisionModel, Ordinates receivedOrdinates);
    protected CoordinateSequence ReadCoordinateSequenceRing(BinaryReader reader, CoordinateSequenceFactory factory, PrecisionModel precisionModel, Ordinates receivedOrdinates);
    protected CoordinateSequence ReadCoordinateSequence(BinaryReader reader, CoordinateSequenceFactory factory, PrecisionModel precisionModel, int numPoints, Ordinates receivedOrdinates);
    protected LineString ReadLineString(BinaryReader reader, GeometryFactory factory, Ordinates ordinates);
    protected LinearRing ReadLinearRing(BinaryReader reader, GeometryFactory factory, Ordinates ordinates);
    protected Polygon ReadPolygon(BinaryReader reader, GeometryFactory factory, Ordinates ordinates);
    protected void ReadGeometryArray(BinaryReader reader, TGeometry[] container);
    protected MultiPoint ReadMultiPoint(BinaryReader reader, GeometryFactory factory);
    protected MultiLineString ReadMultiLineString(BinaryReader reader, GeometryFactory factory);
    protected MultiPolygon ReadMultPolygon(BinaryReader reader, GeometryFactory factory);
    protected GeometryCollection ReadGeometryCollection(BinaryReader reader, GeometryFactory factory);
}
public class NetTopologySuite.IO.PostGisWriter : object {
    private Ordinates _outputOrdinates;
    [CompilerGeneratedAttribute]
private ByteOrder <ByteOrder>k__BackingField;
    public ByteOrder ByteOrder { get; }
    public Ordinates HandleOrdinates { get; public set; }
    public PostGisWriter(ByteOrder byteOrder);
    [CompilerGeneratedAttribute]
public ByteOrder get_ByteOrder();
    public Ordinates get_HandleOrdinates();
    public void set_HandleOrdinates(Ordinates value);
    public Byte[] Write(Geometry geometry);
    public void Write(Geometry geometry, Stream stream);
    private void Write(Geometry geometry, ByteOrder byteOrder, BinaryWriter writer);
    private void Write(Geometry geometry, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private static void WriteHeader(PostGisGeometryType type, int srid, bool emitSrid, Ordinates ordinates, ByteOrder byteOrder, BinaryWriter writer);
    private static void Write(CoordinateSequence sequence, Ordinates ordinates, ByteOrder byteOrder, BinaryWriter writer, bool justOne);
    private void Write(Point point, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private void Write(Geometry[] geometries, Ordinates ordinates, ByteOrder byteOrder, BinaryWriter writer);
    private void Write(LineString lineString, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private void Write(LinearRing linearRing, Ordinates ordinates, ByteOrder byteOrder, BinaryWriter writer);
    private void Write(Polygon polygon, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private void Write(MultiPoint multiPoint, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private void Write(MultiLineString multiLineString, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private void Write(MultiPolygon multiPolygon, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private void Write(GeometryCollection geomCollection, Ordinates ordinates, ByteOrder byteOrder, bool emitSRID, BinaryWriter writer);
    private Byte[] GetBytes(Geometry geometry, int coordinateSpace);
    private int GetByteStreamSize(Geometry geometry, int coordinateSpace, bool emitSRID);
    private int GetByteStreamSize(GeometryCollection geometry, int coordinateSpace);
    private int GetByteStreamSize(MultiPolygon geometry, int coordinateSpace);
    private int GetByteStreamSize(MultiLineString geometry, int coordinateSpace);
    private int GetByteStreamSize(MultiPoint geometry, int coordinateSpace);
    private int GetByteStreamSize(Polygon geometry, int coordinateSpace);
    private int GetByteStreamSize(Geometry[] container, int coordinateSpace);
    private static int GetByteStreamSize(CoordinateSequence sequence, int coordinateSpace);
    protected int GetByteStreamSize(LineString geometry, int coordinateSpace);
    protected int GetByteStreamSize(Point geometry, int coordinateSpace);
    private static Ordinates CheckOrdinates(Geometry geometry);
    private static Ordinates CheckOrdinates(CoordinateSequence sequence);
}
