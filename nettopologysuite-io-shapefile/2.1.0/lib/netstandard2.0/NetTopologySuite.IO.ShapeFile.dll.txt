public class NetTopologySuite.Geometries.CoordinateBuffer : object {
    private static object FactoryLock;
    private static CoordinateSequenceFactory modreq(System.Runtime.CompilerServices.IsVolatile) _factory;
    private Envelope _extents;
    private Interval _zInterval;
    private Interval _mInterval;
    private Ordinates _definedOrdinates;
    private DoubleNoDataChecker _doubleNoDataChecker;
    private List`1<XYZM> _coordinates;
    private List`1<int> _markers;
    public CoordinateSequenceFactory Factory { get; public set; }
    public int Count { get; }
    public Ordinates DefinedOrdinates { get; }
    public int Dimension { get; }
    public bool HasZ { get; }
    public bool HasM { get; }
    public int Capacity { get; }
    public CoordinateBuffer(double nullValue, bool lessThan);
    public CoordinateBuffer(int capacity);
    public CoordinateBuffer(int capacity, double nullValue, bool lessThan);
    private static CoordinateBuffer();
    private void CheckDefinedOrdinates(Double& z, Double& m);
    public CoordinateSequenceFactory get_Factory();
    public void set_Factory(CoordinateSequenceFactory value);
    public int get_Count();
    public Ordinates get_DefinedOrdinates();
    public int get_Dimension();
    public bool get_HasZ();
    public bool get_HasM();
    public int get_Capacity();
    public bool AddCoordinate(double x, double y, Nullable`1<double> z, Nullable`1<double> m, bool allowRepeated);
    public void AddMarker();
    public bool InsertCoordinate(int index, double x, double y, Nullable`1<double> z, Nullable`1<double> m, bool allowRepeated);
    public void Clear();
    public Coordinate[] ToCoordinateArray();
    public CoordinateSequence ToSequence(Func`2<CoordinateBuffer, CoordinateSequence> converter);
    public CoordinateSequence ToSequence(CoordinateSequenceFactory factory);
    public CoordinateSequence[] ToSequences(CoordinateSequenceFactory factory);
    public void SetZ(int index, double z);
    public void SetM(int index, double m);
    public Double[] ToXY();
    public Double[] ToXYZ(Double[]& z);
    public Double[] ToXYM(Double[]& m);
    public Double[] ToXYZM(Double[]& z, Double[]& m);
    public int ToPackedArray(Double[]& ordinateValues);
    public int ToPackedArray(Single[]& ordinateValues);
    public sealed virtual bool Equals(CoordinateBuffer other);
    public bool Equals(CoordinateSequence other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public CoordinateBuffer RemoveRepeated(bool checkZM);
}
public class NetTopologySuite.IO.BigEndianBinaryReader : BinaryReader {
    public BigEndianBinaryReader(Stream stream);
    public BigEndianBinaryReader(Stream input, Encoding encoding);
    public int ReadInt32BE();
    public double ReadDoubleBE();
}
public class NetTopologySuite.IO.BigEndianBinaryWriter : BinaryWriter {
    public BigEndianBinaryWriter(Stream output);
    public BigEndianBinaryWriter(Stream output, Encoding encoding);
    public void WriteIntBE(int value);
    public void WriteDoubleBE(double value);
}
internal static class NetTopologySuite.IO.BitTweaks : object {
    internal static int ReverseByteOrder(int value);
    internal static long ReverseByteOrder(long value);
    internal static double ReverseByteOrder(double value);
    internal static UInt32 ReverseByteOrder(UInt32 value);
    internal static ulong ReverseByteOrder(ulong value);
}
internal class NetTopologySuite.IO.ColumnStructure : PropertyDescriptor {
    private DbaseFieldDescriptor _dbaseField;
    private int _index;
    public Type ComponentType { get; }
    public Type PropertyType { get; }
    public bool IsReadOnly { get; }
    public int Length { get; }
    public ColumnStructure(DbaseFieldDescriptor dbaseField, int index);
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public virtual bool get_IsReadOnly();
    public virtual bool CanResetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual object GetValue(object component);
    public int get_Length();
}
internal static class NetTopologySuite.IO.DbaseEncodingUtility : object {
    internal static Encoding Latin1;
    [CompilerGeneratedAttribute]
private static Encoding <DefaultEncoding>k__BackingField;
    internal static IDictionary`2<byte, Encoding> LdidToEncoding;
    internal static IDictionary`2<Encoding, byte> EncodingToLdid;
    public static Encoding DefaultEncoding { get; public set; }
    private static DbaseEncodingUtility();
    [CompilerGeneratedAttribute]
public static Encoding get_DefaultEncoding();
    [CompilerGeneratedAttribute]
public static void set_DefaultEncoding(Encoding value);
    public static Encoding GetEncodingForCodePageIdentifier(int codePage);
    public static Encoding GetEncodingForCodePageName(string name);
    private static void AddLdidEncodingPair(byte ldid, Encoding encodingToAdd);
    private static void RegisterEncodings(Object[][] ldidCodePagePairs);
}
public class NetTopologySuite.IO.DbaseFieldDescriptor : object {
    private string _name;
    private char _type;
    private int _dataAddress;
    private int _length;
    private int _decimalCount;
    public string Name { get; public set; }
    public char DbaseType { get; public set; }
    public int DataAddress { get; public set; }
    public int Length { get; public set; }
    public int DecimalCount { get; public set; }
    public Type Type { get; }
    public static char GetDbaseType(Type type);
    public static DbaseFieldDescriptor ShapeField();
    public static DbaseFieldDescriptor IdField();
    public string get_Name();
    public void set_Name(string value);
    public char get_DbaseType();
    public void set_DbaseType(char value);
    public int get_DataAddress();
    public void set_DataAddress(int value);
    public int get_Length();
    public void set_Length(int value);
    public int get_DecimalCount();
    public void set_DecimalCount(int value);
    public Type get_Type();
    public virtual string ToString();
}
public class NetTopologySuite.IO.DbaseFileHeader : object {
    public static int FieldNameMaxLength;
    private static int DefaultHeaderLength;
    private static int FileDescriptorSize;
    private int _fileType;
    private DateTime _updateDate;
    private int _numRecords;
    private int _headerLength;
    private int _recordLength;
    private int _numFields;
    private Encoding _encoding;
    private DbaseFieldDescriptor[] _fieldDescriptions;
    public DateTime LastUpdateDate { get; public set; }
    public int NumFields { get; public set; }
    public Encoding Encoding { get; public set; }
    public int NumRecords { get; public set; }
    public int RecordLength { get; }
    public int HeaderLength { get; }
    public static Encoding DefaultEncoding { get; public set; }
    public DbaseFieldDescriptor[] Fields { get; }
    public DbaseFileHeader(Encoding encoding);
    public DateTime get_LastUpdateDate();
    public void set_LastUpdateDate(DateTime value);
    public int get_NumFields();
    public void set_NumFields(int value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public int get_NumRecords();
    public void set_NumRecords(int value);
    public int get_RecordLength();
    public int get_HeaderLength();
    public void AddColumn(string fieldName, char fieldType, int fieldLength, int decimalCount);
    public int RemoveColumn(string fieldName);
    public void ReadHeader(BinaryReader reader, string filename);
    public void ReadHeader(BinaryReader reader, IStreamProvider cpgStreamProvider);
    private static Encoding DetectEncoding(byte ldid, IStreamProvider cpgFile);
    public static Encoding get_DefaultEncoding();
    public static void set_DefaultEncoding(Encoding value);
    private static byte GetLdidFromEncoding(Encoding encoding);
    protected void SetNumRecords(int inNumRecords);
    public void WriteHeader(BinaryWriter writer);
    public DbaseFieldDescriptor[] get_Fields();
    internal static Encoding GetEncoding(IStreamProvider provider);
}
public class NetTopologySuite.IO.DbaseFileReader : object {
    private IStreamProvider _streamProvider;
    private IStreamProvider _encodingProvider;
    private DbaseFileHeader _header;
    public DbaseFileReader(string path);
    public DbaseFileReader(string path, Encoding encoding);
    public DbaseFileReader(IStreamProviderRegistry streamProviderRegistry);
    public sealed virtual IEnumerator GetEnumerator();
    private static IStreamProviderRegistry CreateStreamProviderRegistry(string dbfPath);
    private static IStreamProviderRegistry CreateStreamProviderRegistry(string dbfPath, Encoding encoding);
    public DbaseFileHeader GetHeader();
}
public class NetTopologySuite.IO.DbaseFileWriter : object {
    private Encoding _encoding;
    private BinaryWriter _writer;
    private DbaseFileHeader _header;
    private bool _headerWritten;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool HeaderWritten { get; }
    public bool IsDisposed { get; private set; }
    public DbaseFileWriter(string filename);
    public DbaseFileWriter(string filename, Encoding encoding);
    public DbaseFileWriter(IStreamProviderRegistry streamProviderRegistry);
    public DbaseFileWriter(IStreamProviderRegistry streamProviderRegistry, Encoding encoding);
    public void Write(DbaseFileHeader header);
    public bool get_HeaderWritten();
    public void Write(IList columnValues);
    private static bool IsRealType(Type type);
    private static bool IsIntegerType(Type type);
    private void Write(decimal number, int length, int decimalCount);
    private void Write(string text, int length);
    private void Write(DateTime date);
    private void Write(bool flag);
    private void Write(char c, int length);
    private void Write(byte number);
    public void Close();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public void WriteEndOfDbf();
}
public enum NetTopologySuite.IO.Handlers.GeometryInstantiationErrorHandlingOption : Enum {
    public int value__;
    public static GeometryInstantiationErrorHandlingOption ThrowException;
    public static GeometryInstantiationErrorHandlingOption Empty;
    public static GeometryInstantiationErrorHandlingOption TryFix;
    public static GeometryInstantiationErrorHandlingOption Null;
}
public class NetTopologySuite.IO.Handlers.MBRInfo : object {
    [CompilerGeneratedAttribute]
private ShapeLocationInFileInfo <ShapeFileDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Envelope <ShapeMBR>k__BackingField;
    public ShapeLocationInFileInfo ShapeFileDetails { get; private set; }
    public Envelope ShapeMBR { get; private set; }
    public MBRInfo(Envelope shapeMBR, long offsetFromStartOfFile, int shapeIndex);
    [CompilerGeneratedAttribute]
public ShapeLocationInFileInfo get_ShapeFileDetails();
    [CompilerGeneratedAttribute]
private void set_ShapeFileDetails(ShapeLocationInFileInfo value);
    [CompilerGeneratedAttribute]
public Envelope get_ShapeMBR();
    [CompilerGeneratedAttribute]
private void set_ShapeMBR(Envelope value);
}
public class NetTopologySuite.IO.Handlers.MultiLineHandler : ShapeHandler {
    public MultiLineHandler(ShapeGeometryType type);
    public virtual Geometry Read(BigEndianBinaryReader file, int totalRecordLength, GeometryFactory factory);
    public virtual void Write(Geometry geometry, BinaryWriter writer, GeometryFactory factory);
    public virtual int ComputeRequiredLengthInWords(Geometry geometry);
    private static int GetNumParts(Geometry geometry);
}
public class NetTopologySuite.IO.Handlers.MultiPointHandler : ShapeHandler {
    public MultiPointHandler(ShapeGeometryType type);
    public virtual Geometry Read(BigEndianBinaryReader file, int totalRecordLength, GeometryFactory factory);
    public virtual void Write(Geometry geometry, BinaryWriter writer, GeometryFactory factory);
    public virtual int ComputeRequiredLengthInWords(Geometry geometry);
}
public class NetTopologySuite.IO.Handlers.NullShapeHandler : ShapeHandler {
    public virtual Geometry Read(BigEndianBinaryReader file, int totalRecordLength, GeometryFactory factory);
    public virtual void Write(Geometry geometry, BinaryWriter writer, GeometryFactory factory);
    public virtual int ComputeRequiredLengthInWords(Geometry geometry);
    public virtual IEnumerable`1<MBRInfo> ReadMBRs(BigEndianBinaryReader reader);
}
public class NetTopologySuite.IO.Handlers.PointHandler : ShapeHandler {
    public PointHandler(ShapeGeometryType type);
    public virtual Geometry Read(BigEndianBinaryReader file, int totalRecordLength, GeometryFactory factory);
    public virtual void Write(Geometry geometry, BinaryWriter writer, GeometryFactory factory);
    public virtual int ComputeRequiredLengthInWords(Geometry geometry);
    public virtual IEnumerable`1<MBRInfo> ReadMBRs(BigEndianBinaryReader reader);
}
internal class NetTopologySuite.IO.Handlers.PointMBREnumerator : object {
    private BigEndianBinaryReader m_Reader;
    public PointMBREnumerator(BigEndianBinaryReader reader);
    public sealed virtual IEnumerator`1<MBRInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class NetTopologySuite.IO.Handlers.PointMBRIterator : ShapeMBREnumeratorBase {
    public PointMBRIterator(BigEndianBinaryReader reader);
    protected virtual Envelope ReadCurrentEnvelope(Int32& numOfBytesRead);
}
public class NetTopologySuite.IO.Handlers.PolygonHandler : ShapeHandler {
    private static ProbeLinearRing ProbeLinearRing;
    public PolygonHandler(ShapeGeometryType type);
    private static PolygonHandler();
    public virtual Geometry Read(BigEndianBinaryReader file, int totalRecordLength, GeometryFactory factory);
    public virtual void Write(Geometry geometry, BinaryWriter writer, GeometryFactory factory);
    public virtual int ComputeRequiredLengthInWords(Geometry geometry);
    private static int GetNumParts(Geometry geometry);
    private static CoordinateSequence EnsureClosedSequence(CoordinateSequence sequence, CoordinateSequenceFactory factory);
}
internal class NetTopologySuite.IO.Handlers.ProbeLinearRing : object {
    private int _r1;
    private int _r2;
    internal ProbeLinearRing(Order order);
    public sealed virtual int Compare(LinearRing x, LinearRing y);
}
public abstract class NetTopologySuite.IO.Handlers.ShapeHandler : object {
    protected static double NoDataBorderValue;
    protected static double NoDataValue;
    protected int boundingBoxIndex;
    protected Double[] boundingBox;
    private ShapeGeometryType _type;
    protected Geometry geom;
    [CompilerGeneratedAttribute]
private GeometryInstantiationErrorHandlingOption <GeometryInstantiationErrorHandling>k__BackingField;
    public ShapeGeometryType ShapeType { get; }
    public GeometryInstantiationErrorHandlingOption GeometryInstantiationErrorHandling { get; public set; }
    protected ShapeHandler(ShapeGeometryType type);
    public ShapeGeometryType get_ShapeType();
    public abstract virtual Geometry Read(BigEndianBinaryReader file, int totalRecordLength, GeometryFactory factory);
    protected int ReadInt32(BigEndianBinaryReader file, int totalRecordLength, Int32& totalRead);
    protected double ReadDouble(BigEndianBinaryReader file, int totalRecordLength, Int32& totalRead);
    public abstract virtual void Write(Geometry geometry, BinaryWriter writer, GeometryFactory factory);
    public abstract virtual int ComputeRequiredLengthInWords(Geometry geometry);
    protected static int ComputeRequiredLengthInWords(int numParts, int numPoints, bool hasM, bool hasZ);
    public static Envelope GetEnvelopeExternal(Envelope envelope);
    public static Envelope GetEnvelopeExternal(PrecisionModel precisionModel, Envelope envelope);
    protected static void WriteEnvelope(BinaryWriter writer, PrecisionModel precisionModel, Envelope envelope);
    protected static void WriteCoords(CoordinateSequence points, BinaryWriter file, List`1<double> zList, List`1<double> mList);
    protected static CoordinateSequence AddCoordinateToSequence(CoordinateSequence sequence, CoordinateSequenceFactory factory, double x, double y, Nullable`1<double> z, Nullable`1<double> m);
    protected bool HasZValue();
    private static bool HasZValue(ShapeGeometryType shapeType);
    protected bool HasMValue();
    private static bool HasMValue(ShapeGeometryType shapeType);
    protected bool IsPoint();
    public static bool IsPoint(ShapeGeometryType shapeType);
    protected bool IsMultiPoint();
    public static bool IsMultiPoint(ShapeGeometryType shapeType);
    protected bool IsLineString();
    public static bool IsLineString(ShapeGeometryType shapeType);
    protected bool IsPolygon();
    public static bool IsPolygon(ShapeGeometryType shapeType);
    protected static double ReadDouble(BigEndianBinaryReader reader);
    protected void GetZMValues(BigEndianBinaryReader file, int totalRecordLength, Int32& currentlyReadBytes, CoordinateBuffer buffer, HashSet`1<int> skippedList);
    protected void WriteZM(BinaryWriter file, int count, List`1<double> zValues, List`1<double> mValues);
    protected int GetBoundingBoxLength();
    [CompilerGeneratedAttribute]
public GeometryInstantiationErrorHandlingOption get_GeometryInstantiationErrorHandling();
    [CompilerGeneratedAttribute]
public void set_GeometryInstantiationErrorHandling(GeometryInstantiationErrorHandlingOption value);
    public virtual IEnumerable`1<MBRInfo> ReadMBRs(BigEndianBinaryReader reader);
}
public class NetTopologySuite.IO.Handlers.ShapeLocationInFileInfo : object {
    [CompilerGeneratedAttribute]
private long <OffsetFromStartOfFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShapeIndex>k__BackingField;
    public long OffsetFromStartOfFile { get; private set; }
    public int ShapeIndex { get; private set; }
    public ShapeLocationInFileInfo(long offsetFromStartOfFile, int shapeIndex);
    [CompilerGeneratedAttribute]
public long get_OffsetFromStartOfFile();
    [CompilerGeneratedAttribute]
private void set_OffsetFromStartOfFile(long value);
    [CompilerGeneratedAttribute]
public int get_ShapeIndex();
    [CompilerGeneratedAttribute]
private void set_ShapeIndex(int value);
}
internal class NetTopologySuite.IO.Handlers.ShapeMBREnumerator : object {
    private BigEndianBinaryReader m_Reader;
    public ShapeMBREnumerator(BigEndianBinaryReader reader);
    public sealed virtual IEnumerator`1<MBRInfo> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class NetTopologySuite.IO.Handlers.ShapeMBREnumeratorBase : object {
    [CompilerGeneratedAttribute]
private BigEndianBinaryReader <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private MBRInfo <Current>k__BackingField;
    protected BigEndianBinaryReader Reader { get; private set; }
    public MBRInfo Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    protected ShapeMBREnumeratorBase(BigEndianBinaryReader reader);
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
protected BigEndianBinaryReader get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(BigEndianBinaryReader value);
    [CompilerGeneratedAttribute]
public sealed virtual MBRInfo get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(MBRInfo value);
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    protected abstract virtual Envelope ReadCurrentEnvelope(Int32& numOfBytesRead);
    private bool ReadNextNonNullShape(Int64& CurrShapeOffset, Int32& CurrShapeIndex, Int32& CurrShapeLengthInWords);
}
internal class NetTopologySuite.IO.Handlers.ShapeMBRIterator : ShapeMBREnumeratorBase {
    public ShapeMBRIterator(BigEndianBinaryReader reader);
    protected virtual Envelope ReadCurrentEnvelope(Int32& numOfBytesRead);
}
internal class NetTopologySuite.IO.RowStructure : ValueType {
    private DbaseFieldDescriptor[] _dbaseFields;
    private ArrayList _columnValues;
    public ArrayList ColumnValues { get; }
    public RowStructure(DbaseFieldDescriptor[] dbaseFields, ArrayList columnValues);
    public ArrayList get_ColumnValues();
    public sealed virtual AttributeCollection GetAttributes();
    public sealed virtual string GetClassName();
    public sealed virtual string GetComponentName();
    public sealed virtual TypeConverter GetConverter();
    public sealed virtual object GetEditor(Type t);
    public sealed virtual EventDescriptor GetDefaultEvent();
    public sealed virtual EventDescriptorCollection GetEvents(Attribute[] a);
    public sealed virtual EventDescriptorCollection GetEvents();
    public sealed virtual object GetPropertyOwner(PropertyDescriptor pd);
    public sealed virtual PropertyDescriptor GetDefaultProperty();
    public sealed virtual PropertyDescriptorCollection GetProperties(Attribute[] a);
    public sealed virtual PropertyDescriptorCollection GetProperties();
}
public class NetTopologySuite.IO.Shapefile : object {
    internal static int ShapefileId;
    internal static int Version;
    public static ShapeGeometryType GetShapeType(Geometry geom);
    private static Geometry TryGetNonEmptyGeometry(Geometry geom);
    public static ShapeHandler GetShapeHandler(ShapeGeometryType type);
    public static ShapefileDataReader CreateDataReader(string filename, GeometryFactory geometryFactory);
    public static ShapefileDataReader CreateDataReader(IStreamProviderRegistry streamProviderRegistry, GeometryFactory geometryFactory);
    public static DataTable CreateDataTable(string filename, string tableName, GeometryFactory geometryFactory, Encoding encoding);
}
internal class NetTopologySuite.IO.ShapeFile.Extended.DbaseEnumerator : object {
    private DbaseReader m_Reader;
    private int m_CurrentAttrTbleIndex;
    [CompilerGeneratedAttribute]
private IAttributesTable <Current>k__BackingField;
    public IAttributesTable Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    public DbaseEnumerator(DbaseReader reader);
    [CompilerGeneratedAttribute]
public sealed virtual IAttributesTable get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(IAttributesTable value);
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class NetTopologySuite.IO.ShapeFile.Extended.DbaseReader : object {
    private DbaseFileHeader m_Header;
    private IStreamProvider m_StreamProvider;
    private BinaryReader m_FileReader;
    private bool m_IsDisposed;
    internal int NumOfRecords { get; }
    public DbaseReader(string filename);
    public DbaseReader(IStreamProvider streamProvider);
    protected virtual override void Finalize();
    internal int get_NumOfRecords();
    public sealed virtual void Dispose();
    public IAttributesTable ReadEntry(int index);
    public sealed virtual IEnumerator`1<IAttributesTable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal DbaseReader Clone();
    private DbaseFileHeader ReadHeader();
    private ArrayList ReadCurrentEntry();
    private void Dispose(bool disposing);
}
public interface NetTopologySuite.IO.ShapeFile.Extended.Entities.IShapefileFeature {
    public long FeatureId { get; }
    public abstract virtual long get_FeatureId();
}
internal class NetTopologySuite.IO.ShapeFile.Extended.Entities.ShapefileFeature : object {
    [CompilerGeneratedAttribute]
private Geometry <Geometry>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttributesTable <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FeatureId>k__BackingField;
    public Geometry Geometry { get; }
    public Envelope BoundingBox { get; }
    public IAttributesTable Attributes { get; }
    public long FeatureId { get; }
    private Geometry NetTopologySuite.Features.IFeature.Geometry { get; private set; }
    private Envelope NetTopologySuite.Features.IFeature.BoundingBox { get; private set; }
    private IAttributesTable NetTopologySuite.Features.IFeature.Attributes { get; private set; }
    public ShapefileFeature(ShapeReader shapeReader, DbaseReader dbfReader, ShapeLocationInFileInfo shapeLocation, GeometryFactory geoFactory);
    private ShapefileFeature(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Geometry get_Geometry();
    public Envelope get_BoundingBox();
    [CompilerGeneratedAttribute]
public IAttributesTable get_Attributes();
    [CompilerGeneratedAttribute]
public sealed virtual long get_FeatureId();
    private sealed virtual override Geometry NetTopologySuite.Features.IFeature.get_Geometry();
    private sealed virtual override void NetTopologySuite.Features.IFeature.set_Geometry(Geometry value);
    private sealed virtual override Envelope NetTopologySuite.Features.IFeature.get_BoundingBox();
    private sealed virtual override void NetTopologySuite.Features.IFeature.set_BoundingBox(Envelope value);
    private sealed virtual override IAttributesTable NetTopologySuite.Features.IFeature.get_Attributes();
    private sealed virtual override void NetTopologySuite.Features.IFeature.set_Attributes(IAttributesTable value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class NetTopologySuite.IO.ShapeFile.Extended.ShapeDataReader : object {
    private static string DBF_EXT;
    private ISpatialIndex`1<ShapeLocationInFileInfo> m_SpatialIndex;
    private Task m_IndexCreationTask;
    private bool m_IsIndexingComplete;
    private CancellationTokenSource m_CancellationTokenSrc;
    private DbaseReader m_DbfReader;
    private GeometryFactory m_GeoFactory;
    private ShapeReader m_ShapeReader;
    public Envelope ShapefileBounds { get; }
    public ShapeDataReader(string shapeFilePath, ISpatialIndex`1<ShapeLocationInFileInfo> index, GeometryFactory geoFactory, bool buildIndexAsync);
    public ShapeDataReader(IStreamProviderRegistry streamProviderRegistry, ISpatialIndex`1<ShapeLocationInFileInfo> index, GeometryFactory geoFactory, bool buildIndexAsync);
    public ShapeDataReader(string shapeFilePath, ISpatialIndex`1<ShapeLocationInFileInfo> index, GeometryFactory geoFactory);
    public ShapeDataReader(string shapeFilePath, ISpatialIndex`1<ShapeLocationInFileInfo> index);
    public ShapeDataReader(string shapeFilePath);
    public ShapeDataReader(IStreamProviderRegistry streamProviderRegistry, ISpatialIndex`1<ShapeLocationInFileInfo> index, GeometryFactory geoFactory);
    public ShapeDataReader(IStreamProviderRegistry streamProviderRegistry, ISpatialIndex`1<ShapeLocationInFileInfo> index);
    public ShapeDataReader(IStreamProviderRegistry streamProviderRegistry);
    protected virtual override void Finalize();
    public Envelope get_ShapefileBounds();
    public sealed virtual void Dispose();
    public IEnumerable`1<IShapefileFeature> ReadByMBRFilter(Envelope envelope, bool testGeometriesActuallyInMBR);
    private IShapefileFeature ReadFeature(ShapeLocationInFileInfo shapeLocationInfo);
    private void ValidateParameters();
    private void FillSpatialIndex();
    private void Dispose(bool disposing);
}
public class NetTopologySuite.IO.ShapeFile.Extended.ShapeReader : object {
    private static long HEADER_LENGTH;
    private BigEndianBinaryReader m_ShapeFileReader;
    private IStreamProviderRegistry m_StreamProviderRegistry;
    private ShapeHandler m_ShapeHandler;
    private Lazy`1<Int64[]> m_ShapeOffsetCache;
    private bool m_IsDisposed;
    [CompilerGeneratedAttribute]
private ShapefileHeader <ShapefileHeader>k__BackingField;
    public ShapefileHeader ShapefileHeader { get; }
    private BigEndianBinaryReader ShapeReaderStream { get; }
    public ShapeReader(string shapefilePath);
    public ShapeReader(IStreamProviderRegistry streamProviderRegistry);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public ShapefileHeader get_ShapefileHeader();
    private BigEndianBinaryReader get_ShapeReaderStream();
    public IEnumerable`1<MBRInfo> ReadMBRs();
    public IEnumerable`1<Geometry> ReadAllShapes(GeometryFactory geoFactory);
    public Geometry ReadShapeAtIndex(int index, GeometryFactory geoFactory);
    public Geometry ReadShapeAtOffset(long shapeOffset, GeometryFactory geoFactory);
    private Int64[] BuildOffsetCache();
    private void ThrowIfDisposed();
    private void CloseShapeFileHandle();
}
internal class NetTopologySuite.IO.ShapeFileConstants : object {
    internal static double NoDataBorder;
    internal static double NoDataValue;
}
[DefaultMemberAttribute("Item")]
public class NetTopologySuite.IO.ShapefileDataReader : object {
    private bool _open;
    private DbaseFieldDescriptor[] _dbaseFields;
    private DbaseFileReader _dbfReader;
    private ShapefileReader _shpReader;
    private IEnumerator _dbfEnumerator;
    private IEnumerator _shpEnumerator;
    private ShapefileHeader _shpHeader;
    private DbaseFileHeader _dbfHeader;
    private int _recordCount;
    private bool _moreRecords;
    private Geometry geometry;
    private ArrayList _columnValues;
    public bool IsClosed { get; }
    public Geometry Geometry { get; }
    public int RecordsAffected { get; }
    public int Depth { get; }
    public int RecordCount { get; }
    public object Item { get; }
    public object Item { get; }
    public int FieldCount { get; }
    public ShapefileHeader ShapeHeader { get; }
    public DbaseFileHeader DbaseHeader { get; }
    public ShapefileDataReader(string filename, GeometryFactory geometryFactory);
    public ShapefileDataReader(string filename, GeometryFactory geometryFactory, Encoding encoding);
    public ShapefileDataReader(IStreamProviderRegistry streamProviderRegistry, GeometryFactory geometryFactory);
    public void Reset();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsClosed();
    public sealed virtual void Close();
    public Geometry get_Geometry();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual int get_Depth();
    public int get_RecordCount();
    public sealed virtual int GetInt32(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual byte GetByte(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual string GetName(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual string GetString(int i);
    public sealed virtual char GetChar(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
    public sealed virtual int get_FieldCount();
    public sealed virtual IEnumerator GetEnumerator();
    public ShapefileHeader get_ShapeHeader();
    public DbaseFileHeader get_DbaseHeader();
    private int CultureAwareCompare(string strA, string strB);
}
public class NetTopologySuite.IO.ShapefileDataWriter : object {
    private static int DoubleLength;
    private static int DoubleDecimals;
    private static int IntLength;
    private static int LongLength;
    private static int IntDecimals;
    private static int StringLength;
    private static int StringDecimals;
    private static int BoolLength;
    private static int BoolDecimals;
    private static int DateLength;
    private static int DateDecimals;
    private IStreamProviderRegistry _streamProviderRegistry;
    private DbaseFileWriter _dbaseWriter;
    private DbaseFileHeader _header;
    private GeometryFactory _geometryFactory;
    public DbaseFileHeader Header { get; public set; }
    protected GeometryFactory GeometryFactory { get; protected set; }
    public ShapefileDataWriter(string fileName);
    public ShapefileDataWriter(string fileName, GeometryFactory geometryFactory);
    public ShapefileDataWriter(string fileName, GeometryFactory geometryFactory, Encoding encoding);
    public ShapefileDataWriter(IStreamProviderRegistry streamProviderRegistry, GeometryFactory geometryFactory, Encoding encoding);
    public static DbaseFileHeader GetHeader(IFeature feature, int count);
    public static DbaseFileHeader GetHeader(IFeature feature, int count, Encoding encoding);
    public static DbaseFileHeader GetHeader(string dbfFile);
    public static DbaseFileHeader GetHeader(IStreamProviderRegistry streamProviderRegistry);
    public static DbaseFileHeader GetHeader(DbaseFieldDescriptor[] dbFields, int count);
    public DbaseFileHeader get_Header();
    public void set_Header(DbaseFileHeader value);
    protected GeometryFactory get_GeometryFactory();
    protected void set_GeometryFactory(GeometryFactory value);
    public void Write(IEnumerable`1<IFeature> featureCollection);
    [CompilerGeneratedAttribute]
private void <Write>g__Write|30_1(IFeature feature, <>c__DisplayClass30_0& , <>c__DisplayClass30_1& );
}
public class NetTopologySuite.IO.ShapefileException : ApplicationException {
    public ShapefileException(string message);
    public ShapefileException(SerializationInfo info, StreamingContext context);
    public ShapefileException(string message, Exception innerException);
}
public class NetTopologySuite.IO.ShapefileHeader : object {
    private int _fileCode;
    private int _fileLength;
    private int _version;
    private ShapeGeometryType _shapeType;
    private Envelope _bounds;
    public Envelope Bounds { get; public set; }
    public ShapeGeometryType ShapeType { get; public set; }
    public int Version { get; public set; }
    public int FileLength { get; public set; }
    public ShapefileHeader(BigEndianBinaryReader shpBinaryReader);
    public Envelope get_Bounds();
    public void set_Bounds(Envelope value);
    public ShapeGeometryType get_ShapeType();
    public void set_ShapeType(ShapeGeometryType value);
    public int get_Version();
    public void set_Version(int value);
    public int get_FileLength();
    public void set_FileLength(int value);
    public void Write(BigEndianBinaryWriter file);
}
public class NetTopologySuite.IO.ShapefileReader : object {
    private IStreamProviderRegistry _shapeStreamProviderRegistry;
    private GeometryFactory _geometryFactory;
    private ShapefileHeader _mainHeader;
    public ShapefileHeader Header { get; }
    public ShapefileReader(string filename);
    public ShapefileReader(string filename, GeometryFactory geometryFactory);
    public ShapefileReader(IStreamProviderRegistry shapeStreamProviderRegistry, GeometryFactory geometryFactory);
    public ShapefileHeader get_Header();
    public sealed virtual IEnumerator GetEnumerator();
    public GeometryCollection ReadAll();
}
public class NetTopologySuite.IO.ShapefileWriter : object {
    [CompilerGeneratedAttribute]
private GeometryFactory <Factory>k__BackingField;
    private Stream _shpStream;
    private BigEndianBinaryWriter _shpBinaryWriter;
    private Stream _shxStream;
    private BigEndianBinaryWriter _shxBinaryWriter;
    private Envelope _totalEnvelope;
    private ShapeHandler _shapeHandler;
    private ShapeGeometryType _geometryType;
    private int _numFeaturesWritten;
    public GeometryFactory Factory { get; public set; }
    public ShapefileWriter(string filename, ShapeGeometryType geomType);
    public ShapefileWriter(GeometryFactory geometryFactory, string filename, ShapeGeometryType geomType);
    public ShapefileWriter(GeometryFactory geometryFactory, IStreamProviderRegistry streamProviderRegistry, ShapeGeometryType geomType);
    public ShapefileWriter(GeometryFactory geometryFactory);
    [CompilerGeneratedAttribute]
public GeometryFactory get_Factory();
    [CompilerGeneratedAttribute]
public void set_Factory(GeometryFactory value);
    public void Close();
    public void Write(Geometry geometry);
    public static void WriteGeometryCollection(string filename, GeometryCollection geometryCollection, bool writeDummyDbf);
    public static void WriteGeometryCollection(IStreamProviderRegistry streamProviderRegistry, GeometryCollection geometryCollection, bool createDummyDbf);
    public static void WriteGeometryCollection(ShapefileWriter shapefileWriter, DbaseFileWriter dbfWriter, GeometryCollection geometryCollection, bool writeDummyDbf);
    private static void WriteNullShapeRecord(BigEndianBinaryWriter shpBinaryWriter, BigEndianBinaryWriter shxBinaryWriter, int oid);
    private static void WriteRecordToFile(BigEndianBinaryWriter shpBinaryWriter, BigEndianBinaryWriter shxBinaryWriter, ShapeHandler handler, Geometry body, int oid);
    private Envelope NotNull(Envelope bounds);
    private void WriteShxHeader(BigEndianBinaryWriter shxBinaryWriter, int shxLength, Envelope bounds);
    private void WriteShpHeader(BigEndianBinaryWriter shpBinaryWriter, int shpLength, Envelope bounds);
    public static void WriteDummyDbf(string filename, int recordCount);
    public static void WriteDummyDbf(IStreamProviderRegistry streamProviderRegistry, int recordCount);
    public static void WriteDummyDbf(DbaseFileWriter dbfWriter, int recordCount);
    public sealed virtual void Dispose();
    public static void WriteFeatures(string filename, IEnumerable`1<IFeature> features, DbaseFieldDescriptor[] fields, ShapeGeometryType shapeGeometryType, Encoding dbfEncoding);
}
public enum NetTopologySuite.IO.ShapeGeometryType : Enum {
    public int value__;
    public static ShapeGeometryType NullShape;
    public static ShapeGeometryType Point;
    public static ShapeGeometryType LineString;
    public static ShapeGeometryType Polygon;
    public static ShapeGeometryType MultiPoint;
    public static ShapeGeometryType PointZM;
    public static ShapeGeometryType LineStringZM;
    public static ShapeGeometryType PolygonZM;
    public static ShapeGeometryType MultiPointZM;
    public static ShapeGeometryType PointM;
    public static ShapeGeometryType LineStringM;
    public static ShapeGeometryType PolygonM;
    public static ShapeGeometryType MultiPointM;
    public static ShapeGeometryType MultiPatch;
    public static ShapeGeometryType PointZ;
    public static ShapeGeometryType LineStringZ;
    public static ShapeGeometryType PolygonZ;
    public static ShapeGeometryType MultiPointZ;
}
public abstract class NetTopologySuite.IO.ShapeReader : object {
    private GeometryFactory _factory;
    public GeometryFactory Factory { get; public set; }
    protected ShapeReader(GeometryFactory factory);
    public GeometryFactory get_Factory();
    public void set_Factory(GeometryFactory value);
    protected Geometry ReadPoint(BinaryReader reader, Ordinates ordinates);
    protected Geometry ReadLineString(BinaryReader reader, Ordinates ordinates);
    protected Geometry ReadPolygon(BinaryReader reader, Ordinates ordinates);
    public Geometry ReadMultiPoint(BinaryReader reader, Ordinates ordinates);
    private Geometry CreateMultiLineString(CoordinateSequence[] sequences);
    private Geometry CreateSingleOrMultiPolygon(CoordinateBuffer buffer);
    public Polygon CreateSimpleSinglePolygon(Coordinate[] coords);
    protected static Envelope ReadBoundingBox(BinaryReader reader);
    protected static Interval ReadInterval(BinaryReader reader);
    public int ReadNumParts(BinaryReader reader);
    protected int ReadNumPoints(BinaryReader reader);
    protected Int32[] ReadIndexParts(BinaryReader reader, int numParts, int numPoints);
    private static void ReadCoordinates(BinaryReader reader, int numPoints, Int32[] markers, Ordinates ordinates, CoordinateBuffer buffer);
}
public class NetTopologySuite.IO.ShapeWriter : object {
    protected static int InitCount;
    protected void WriteCoordinates(CoordinateSequence sequence, BinaryWriter writer, Ordinates ordinates);
    protected void WriteInterval(CoordinateSequence sequence, Ordinate ordinate, BinaryWriter writer);
    public void Write(Point point, BinaryWriter writer);
    public void Write(LineString lineString, BinaryWriter writer);
    public void Write(Polygon polygon, BinaryWriter writer);
    public void Write(MultiPoint multiPoint, BinaryWriter writer);
    private static Ordinates DetectOrdinates(Geometry geometry);
    public void Write(MultiLineString multiLineString, BinaryWriter writer);
    public void Write(MultiPolygon multiPolygon, BinaryWriter writer);
    public void WriteBoundingBox(Envelope boundingBox, BinaryWriter writer);
    public Byte[] GetBytes(Geometry geometry);
    public int GetBytesLength(Geometry geometry);
    protected int SetByteStreamLength(MultiPolygon multiPolygon);
    protected int SetByteStreamLength(MultiLineString multiLineString);
    protected int SetByteStreamLength(MultiPoint multiPoint);
    protected int SetByteStreamLength(Polygon polygon);
    protected int SetByteStreamLength(LineString lineString);
    protected int SetByteStreamLength(Point point);
    private static int CalculateLength(int numParts, int numPoints);
    private static int CalculateLength(int numPoints);
    protected static void Copy(CoordinateSequence src, int srcPos, CoordinateSequence dest, int destPos, int length);
    protected static void CopyCoord(CoordinateSequence src, int srcPos, CoordinateSequence dest, int destPos);
}
public class NetTopologySuite.IO.Streams.ByteStreamProvider : object {
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnderlyingStreamIsReadonly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    public int MaxLength { get; private set; }
    public int Length { get; public set; }
    public Byte[] Buffer { get; private set; }
    public bool UnderlyingStreamIsReadonly { get; private set; }
    public string Kind { get; private set; }
    public ByteStreamProvider(string kind);
    public ByteStreamProvider(string kind, string text, Encoding encoding);
    public ByteStreamProvider(string kind, Stream stream, bool isReadonly);
    public ByteStreamProvider(string kind, Byte[] bytes, int maxLength, bool isReadonly);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    private static Byte[] ReadFully(Stream input);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
private void set_Buffer(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UnderlyingStreamIsReadonly();
    [CompilerGeneratedAttribute]
private void set_UnderlyingStreamIsReadonly(bool value);
    public sealed virtual Stream OpenRead();
    public sealed virtual Stream OpenWrite(bool truncate);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(string value);
}
public class NetTopologySuite.IO.Streams.ExternallyManagedStreamProvider : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    public bool UnderlyingStreamIsReadonly { get; }
    protected Stream Stream { get; private set; }
    public string Kind { get; private set; }
    public ExternallyManagedStreamProvider(string kind, Stream stream);
    public sealed virtual bool get_UnderlyingStreamIsReadonly();
    [CompilerGeneratedAttribute]
protected Stream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Stream value);
    public sealed virtual Stream OpenRead();
    public sealed virtual Stream OpenWrite(bool truncate);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(string value);
}
public class NetTopologySuite.IO.Streams.FileStreamProvider : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kind>k__BackingField;
    public string Path { get; private set; }
    public bool UnderlyingStreamIsReadonly { get; }
    public string Kind { get; private set; }
    public FileStreamProvider(string kind, string path, bool validatePath);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    public sealed virtual bool get_UnderlyingStreamIsReadonly();
    public sealed virtual Stream OpenRead();
    public sealed virtual Stream OpenWrite(bool truncate);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(string value);
}
public interface NetTopologySuite.IO.Streams.IStreamProvider {
    public bool UnderlyingStreamIsReadonly { get; }
    public string Kind { get; }
    public abstract virtual bool get_UnderlyingStreamIsReadonly();
    public abstract virtual Stream OpenRead();
    public abstract virtual Stream OpenWrite(bool truncate);
    public abstract virtual string get_Kind();
}
[DefaultMemberAttribute("Item")]
public interface NetTopologySuite.IO.Streams.IStreamProviderRegistry {
    public IStreamProvider Item { get; }
    public abstract virtual IStreamProvider get_Item(string streamType);
}
[DefaultMemberAttribute("Item")]
public class NetTopologySuite.IO.Streams.ShapefileStreamProviderRegistry : object {
    private IStreamProvider _dataEncodingStream;
    [CompilerGeneratedAttribute]
private IStreamProvider <SpatialIndexIndexStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamProvider <SpatialIndexStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamProvider <ProjectionStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamProvider <DataStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamProvider <ShapeStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamProvider <IndexStream>k__BackingField;
    private IStreamProvider SpatialIndexIndexStream { get; private set; }
    private IStreamProvider SpatialIndexStream { get; private set; }
    private IStreamProvider ProjectionStream { get; private set; }
    private IStreamProvider DataStream { get; private set; }
    private IStreamProvider DataEncodingStream { get; private set; }
    private IStreamProvider ShapeStream { get; private set; }
    private IStreamProvider IndexStream { get; private set; }
    public IStreamProvider Item { get; }
    public ShapefileStreamProviderRegistry(string path, bool validateShapePath, bool validateDataPath, bool validateIndexPath);
    public ShapefileStreamProviderRegistry(IStreamProvider shapeStream, IStreamProvider dataStream, bool validateShapeProvider, bool validateDataProvider);
    public ShapefileStreamProviderRegistry(IStreamProvider shapeStream, IStreamProvider dataStream, IStreamProvider indexStream, bool validateShapeProvider, bool validateDataProvider, bool validateIndexProvider, IStreamProvider dataEncodingStream, IStreamProvider projectionStream, IStreamProvider spatialIndexStream, IStreamProvider spatialIndexIndexStream);
    [CompilerGeneratedAttribute]
private IStreamProvider get_SpatialIndexIndexStream();
    [CompilerGeneratedAttribute]
private void set_SpatialIndexIndexStream(IStreamProvider value);
    [CompilerGeneratedAttribute]
private IStreamProvider get_SpatialIndexStream();
    [CompilerGeneratedAttribute]
private void set_SpatialIndexStream(IStreamProvider value);
    [CompilerGeneratedAttribute]
private IStreamProvider get_ProjectionStream();
    [CompilerGeneratedAttribute]
private void set_ProjectionStream(IStreamProvider value);
    [CompilerGeneratedAttribute]
private IStreamProvider get_DataStream();
    [CompilerGeneratedAttribute]
private void set_DataStream(IStreamProvider value);
    private IStreamProvider get_DataEncodingStream();
    private void set_DataEncodingStream(IStreamProvider value);
    [CompilerGeneratedAttribute]
private IStreamProvider get_ShapeStream();
    [CompilerGeneratedAttribute]
private void set_ShapeStream(IStreamProvider value);
    [CompilerGeneratedAttribute]
private IStreamProvider get_IndexStream();
    [CompilerGeneratedAttribute]
private void set_IndexStream(IStreamProvider value);
    public sealed virtual IStreamProvider get_Item(string streamType);
}
public static class NetTopologySuite.IO.Streams.StreamTypes : object {
    public static string Shape;
    public static string Index;
    public static string Projection;
    public static string Data;
    public static string DataEncoding;
    public static string SpatialIndex;
    public static string SpatialIndexIndex;
}
