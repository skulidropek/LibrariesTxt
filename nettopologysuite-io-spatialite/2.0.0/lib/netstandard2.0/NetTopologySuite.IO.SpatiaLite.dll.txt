[FlagsAttribute]
internal enum NetTopologySuite.IO.GaiaDimensionModels : Enum {
    public byte value__;
    public static GaiaDimensionModels GAIA_XY;
    public static GaiaDimensionModels GAIA_Z;
    public static GaiaDimensionModels GAIA_M;
    public static GaiaDimensionModels GAIA_XY_Z;
    public static GaiaDimensionModels GAIA_XY_M;
    public static GaiaDimensionModels GAIA_XY_Z_M;
}
internal class NetTopologySuite.IO.GaiaExport : GaiaGeoIO {
    public WriteDoubleFunction WriteDouble;
    public WriteSingleFunction WriteSingle;
    public WriteInt32Function WriteInt32;
    public static GaiaExport NoConversion;
    public static GaiaExport Conversion;
    private GaiaExport(WriteDoubleFunction writeDouble, WriteSingleFunction writeSingle, WriteInt32Function writeInt32);
    private GaiaExport(GaiaGeoGeometry geometryType, WriteDoubleFunction writeDouble, WriteSingleFunction writeSingle, WriteInt32Function writeInt32);
    private static GaiaExport();
    private static void WriteUnconvertedDouble(BinaryWriter bw, Double[] value);
    private static void WriteConvertedDouble(BinaryWriter bw, Double[] value);
    private static void WriteUnconvertedSingle(BinaryWriter bw, Single[] value);
    private static void WriteConvertedSingle(BinaryWriter bw, Single[] value);
    internal static void WriteUnconvertedInt32(BinaryWriter bw, Int32[] value);
    private static void WriteConvertedInt32(BinaryWriter bw, Int32[] value);
    public static GaiaExport Create(bool conversionNeeded);
}
internal enum NetTopologySuite.IO.GaiaGeoBlobMark : Enum {
    public byte value__;
    public static GaiaGeoBlobMark GAIA_MARK_START;
    public static GaiaGeoBlobMark GAIA_MARK_END;
    public static GaiaGeoBlobMark GAIA_MARK_MBR;
    public static GaiaGeoBlobMark GAIA_MARK_ENTITY;
}
internal enum NetTopologySuite.IO.GaiaGeoEndianMarker : Enum {
    public byte value__;
    public static GaiaGeoEndianMarker GAIA_BIG_ENDIAN;
    public static GaiaGeoEndianMarker GAIA_LITTLE_ENDIAN;
}
internal enum NetTopologySuite.IO.GaiaGeoGeometry : Enum {
    public int value__;
    public static GaiaGeoGeometry GAIA_UNKNOWN;
    public static GaiaGeoGeometry GAIA_POINT;
    public static GaiaGeoGeometry GAIA_LINESTRING;
    public static GaiaGeoGeometry GAIA_POLYGON;
    public static GaiaGeoGeometry GAIA_MULTIPOINT;
    public static GaiaGeoGeometry GAIA_MULTILINESTRING;
    public static GaiaGeoGeometry GAIA_MULTIPOLYGON;
    public static GaiaGeoGeometry GAIA_GEOMETRYCOLLECTION;
    public static GaiaGeoGeometry GAIA_POINTZ;
    public static GaiaGeoGeometry GAIA_LINESTRINGZ;
    public static GaiaGeoGeometry GAIA_POLYGONZ;
    public static GaiaGeoGeometry GAIA_MULTIPOINTZ;
    public static GaiaGeoGeometry GAIA_MULTILINESTRINGZ;
    public static GaiaGeoGeometry GAIA_MULTIPOLYGONZ;
    public static GaiaGeoGeometry GAIA_GEOMETRYCOLLECTIONZ;
    public static GaiaGeoGeometry GAIA_POINTM;
    public static GaiaGeoGeometry GAIA_LINESTRINGM;
    public static GaiaGeoGeometry GAIA_POLYGONM;
    public static GaiaGeoGeometry GAIA_MULTIPOINTM;
    public static GaiaGeoGeometry GAIA_MULTILINESTRINGM;
    public static GaiaGeoGeometry GAIA_MULTIPOLYGONM;
    public static GaiaGeoGeometry GAIA_GEOMETRYCOLLECTIONM;
    public static GaiaGeoGeometry GAIA_POINTZM;
    public static GaiaGeoGeometry GAIA_LINESTRINGZM;
    public static GaiaGeoGeometry GAIA_POLYGONZM;
    public static GaiaGeoGeometry GAIA_MULTIPOINTZM;
    public static GaiaGeoGeometry GAIA_MULTILINESTRINGZM;
    public static GaiaGeoGeometry GAIA_MULTIPOLYGONZM;
    public static GaiaGeoGeometry GAIA_GEOMETRYCOLLECTIONZM;
    public static GaiaGeoGeometry GAIA_COMPRESSED_LINESTRING;
    public static GaiaGeoGeometry GAIA_COMPRESSED_POLYGON;
    public static GaiaGeoGeometry GAIA_COMPRESSED_LINESTRINGZ;
    public static GaiaGeoGeometry GAIA_COMPRESSED_POLYGONZ;
    public static GaiaGeoGeometry GAIA_COMPRESSED_LINESTRINGM;
    public static GaiaGeoGeometry GAIA_COMPRESSED_POLYGONM;
    public static GaiaGeoGeometry GAIA_COMPRESSED_LINESTRINGZM;
    public static GaiaGeoGeometry GAIA_COMPRESSED_POLYGONZM;
}
internal enum NetTopologySuite.IO.GaiaGeoGeometryEntity : Enum {
    public int value__;
    public static GaiaGeoGeometryEntity GAIA_TYPE_NONE;
    public static GaiaGeoGeometryEntity GAIA_TYPE_POINT;
    public static GaiaGeoGeometryEntity GAIA_TYPE_LINESTRING;
    public static GaiaGeoGeometryEntity GAIA_TYPE_POLYGON;
}
internal abstract class NetTopologySuite.IO.GaiaGeoIO : object {
    [CompilerGeneratedAttribute]
private int <CoordinateFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private GaiaDimensionModels <Dimension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasZ>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasM>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compressed>k__BackingField;
    public int CoordinateFlag { get; private set; }
    public int CoordinateFlagUncompressed { get; }
    public GaiaDimensionModels Dimension { get; private set; }
    public bool HasZ { get; private set; }
    public bool HasM { get; private set; }
    public bool Compressed { get; private set; }
    public bool Uncompressed { get; }
    protected GaiaGeoIO(GaiaGeoGeometry geometryType);
    public void SetGeometryType(GaiaGeoGeometry geometryTypeFlag);
    public void SetCoordinateType(bool hasZ, bool hasM, bool useCompression);
    [CompilerGeneratedAttribute]
public int get_CoordinateFlag();
    [CompilerGeneratedAttribute]
private void set_CoordinateFlag(int value);
    public int get_CoordinateFlagUncompressed();
    [CompilerGeneratedAttribute]
public GaiaDimensionModels get_Dimension();
    [CompilerGeneratedAttribute]
private void set_Dimension(GaiaDimensionModels value);
    [CompilerGeneratedAttribute]
public bool get_HasZ();
    [CompilerGeneratedAttribute]
private void set_HasZ(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasM();
    [CompilerGeneratedAttribute]
private void set_HasM(bool value);
    [CompilerGeneratedAttribute]
public bool get_Compressed();
    [CompilerGeneratedAttribute]
private void set_Compressed(bool value);
    public bool get_Uncompressed();
}
public class NetTopologySuite.IO.GaiaGeoReader : object {
    private GeometryFactory _factory;
    private PrecisionModel _precisionModel;
    private CoordinateSequenceFactory _coordinateSequenceFactory;
    private Ordinates _handleOrdinates;
    [CompilerGeneratedAttribute]
private bool <RepairRings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HandleSRID>k__BackingField;
    public bool RepairRings { get; public set; }
    public bool HandleSRID { get; public set; }
    public Ordinates AllowedOrdinates { get; }
    public Ordinates HandleOrdinates { get; public set; }
    public GaiaGeoReader(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel);
    public GaiaGeoReader(CoordinateSequenceFactory coordinateSequenceFactory, PrecisionModel precisionModel, Ordinates handleOrdinates);
    [CompilerGeneratedAttribute]
public bool get_RepairRings();
    [CompilerGeneratedAttribute]
public void set_RepairRings(bool value);
    [CompilerGeneratedAttribute]
public bool get_HandleSRID();
    [CompilerGeneratedAttribute]
public void set_HandleSRID(bool value);
    public Ordinates get_AllowedOrdinates();
    public Ordinates get_HandleOrdinates();
    public void set_HandleOrdinates(Ordinates value);
    public Geometry Read(Byte[] blob);
    public Geometry Read(Stream stream);
    private static ReadCoordinatesFunction SetReadCoordinatesFunction(GaiaImport gaiaImport, GaiaGeoGeometry type);
    private static GaiaGeoGeometry ToBaseGeometryType(GaiaGeoGeometry geometry);
    private static Geometry ParseWkbGeometry(GaiaGeoGeometry type, Byte[] blob, Int32& offset, GeometryFactory factory, GaiaImport gaiaImport);
    private static GaiaImport SetGaiaGeoParseFunctions(GaiaGeoEndianMarker gaiaGeoEndianMarker, Ordinates handleOrdinates);
    private static Point ParseWkbPoint(Byte[] blob, Int32& offset, GeometryFactory factory, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static MultiPoint ParseWkbMultiPoint(Byte[] blob, Int32& offset, GeometryFactory factory, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static LineString ParseWkbLineString(Byte[] blob, Int32& offset, GeometryFactory factory, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static LineString ParseWkbLineString(Byte[] blob, Int32& offset, GeometryFactory factory, CreateLineStringFunction createLineStringFunction, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static MultiLineString ParseWkbMultiLineString(Byte[] blob, Int32& offset, GeometryFactory factory, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static Polygon ParseWkbPolygon(Byte[] blob, Int32& offset, GeometryFactory factory, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static Geometry ParseWkbMultiPolygon(Byte[] blob, Int32& offset, GeometryFactory factory, ReadCoordinatesFunction readCoordinates, GaiaImport gaiaImport);
    private static GeometryCollection ParseWkbGeometryCollection(Byte[] blob, Int32& offset, GeometryFactory factory, GaiaImport gaiaImport);
    private static CoordinateSequence ReadXY(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadXYZ(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadXYM(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadXYZM(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadCompressedXY(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadCompressedXYZ(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadCompressedXYM(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
    private static CoordinateSequence ReadCompressedXYZM(Byte[] buffer, Int32& offset, int number, GaiaImport import, CoordinateSequenceFactory factory, PrecisionModel precisionModel);
}
public class NetTopologySuite.IO.GaiaGeoWriter : object {
    public static Ordinates AllowedOrdinates;
    private Ordinates _handleOrdinates;
    [CompilerGeneratedAttribute]
private bool <UseCompressed>k__BackingField;
    public Ordinates HandleOrdinates { get; public set; }
    public bool UseCompressed { get; public set; }
    private static GaiaGeoWriter();
    public Ordinates get_HandleOrdinates();
    public void set_HandleOrdinates(Ordinates value);
    [CompilerGeneratedAttribute]
public bool get_UseCompressed();
    [CompilerGeneratedAttribute]
public void set_UseCompressed(bool value);
    public void Write(Geometry geometry, Stream stream);
    public Byte[] Write(Geometry geom);
    private static WriteCoordinates SetWriteCoordinatesFunction(GaiaExport gaiaExport);
    private static void WriteGeometry(Geometry geom, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WriteGeometryCollection(GeometryCollection geom, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WriteMultiPolygon(GeometryCollection geom, WriteCoordinates writeCoordinates, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WriteMultiLineString(MultiLineString geom, WriteCoordinates writeCoordinates, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WriteMultiPoint(MultiPoint geom, WriteCoordinates writeCoordinates, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WritePolygon(Polygon geom, WriteCoordinates writeCoordinates, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WriteLineString(LineString geom, WriteCoordinates writeCoordinates, GaiaExport gaiaExport, BinaryWriter bw);
    private static void WritePoint(Point geom, WriteCoordinates writeCoordinates, GaiaExport gaiaExport, BinaryWriter bw);
    private static GaiaExport SetGaiaGeoExportFunctions(GaiaGeoEndianMarker gaiaGeoEndianMarker, bool hasZ, bool hasM, bool useCompression);
    private static void WriteXY(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteXYZ(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteXYM(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteXYZM(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteCompressedXY(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteCompressedXYZ(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteCompressedXYM(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
    private static void WriteCompressedXYZM(CoordinateSequence coordinateSequence, GaiaExport export, BinaryWriter bw);
}
internal class NetTopologySuite.IO.GaiaImport : GaiaGeoIO {
    public GetDoubleFunction GetDouble;
    public GetDoublesFunction GetDoubles;
    public GetSingleFunction GetSingle;
    public GetSinglesFunction GetSingles;
    public GetInt32Function GetInt32;
    public Ordinates HandleOrdinates;
    private GaiaImport(GetDoubleFunction getDouble, GetDoublesFunction getDoubles, GetSingleFunction getSingle, GetSinglesFunction getSingles, GetInt32Function getInt32, Ordinates handleOrdinates);
    private GaiaImport(GaiaGeoGeometry geometryType, GetDoubleFunction getDouble, GetDoublesFunction getDoubles, GetSingleFunction getSingle, GetSinglesFunction getSingles, GetInt32Function getInt32, Ordinates handleOrdinates);
    internal static GaiaImport Create(bool conversionNeeded, Ordinates handleOrdinates);
    private static double GetUnconvertedDouble(Byte[] buffer, Int32& offset);
    private static Double[] GetUnconvertedDoubles(Byte[] buffer, Int32& offset, int size);
    private static double GetConvertedDouble(Byte[] buffer, Int32& offset);
    private static Double[] GetConvertedDoubles(Byte[] buffer, Int32& offset, int size);
    private static float GetUnconvertedSingle(Byte[] buffer, Int32& offset);
    private static Single[] GetUnconvertedSingles(Byte[] buffer, Int32& offset, int size);
    private static float GetConvertedSingle(Byte[] buffer, Int32& offset);
    private static Single[] GetConvertedSingles(Byte[] buffer, Int32& offset, int size);
    private static int GetUnconvertedInt32(Byte[] buffer, Int32& offset);
    private static int GetConvertedInt32(Byte[] buffer, Int32& offset);
}
internal class NetTopologySuite.IO.GetDoubleFunction : MulticastDelegate {
    public GetDoubleFunction(object object, IntPtr method);
    public virtual double Invoke(Byte[] buffer, Int32& offset);
    public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32& offset, AsyncCallback callback, object object);
    public virtual double EndInvoke(Int32& offset, IAsyncResult result);
}
internal class NetTopologySuite.IO.GetDoublesFunction : MulticastDelegate {
    public GetDoublesFunction(object object, IntPtr method);
    public virtual Double[] Invoke(Byte[] buffer, Int32& offset, int size);
    public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32& offset, int size, AsyncCallback callback, object object);
    public virtual Double[] EndInvoke(Int32& offset, IAsyncResult result);
}
internal class NetTopologySuite.IO.GetInt32Function : MulticastDelegate {
    public GetInt32Function(object object, IntPtr method);
    public virtual int Invoke(Byte[] buffer, Int32& offset);
    public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32& offset, AsyncCallback callback, object object);
    public virtual int EndInvoke(Int32& offset, IAsyncResult result);
}
internal class NetTopologySuite.IO.GetSingleFunction : MulticastDelegate {
    public GetSingleFunction(object object, IntPtr method);
    public virtual float Invoke(Byte[] buffer, Int32& offset);
    public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32& offset, AsyncCallback callback, object object);
    public virtual float EndInvoke(Int32& offset, IAsyncResult result);
}
internal class NetTopologySuite.IO.GetSinglesFunction : MulticastDelegate {
    public GetSinglesFunction(object object, IntPtr method);
    public virtual Single[] Invoke(Byte[] buffer, Int32& offset, int size);
    public virtual IAsyncResult BeginInvoke(Byte[] buffer, Int32& offset, int size, AsyncCallback callback, object object);
    public virtual Single[] EndInvoke(Int32& offset, IAsyncResult result);
}
internal class NetTopologySuite.IO.WriteDoubleFunction : MulticastDelegate {
    public WriteDoubleFunction(object object, IntPtr method);
    public virtual void Invoke(BinaryWriter bw, Double[] value);
    public virtual IAsyncResult BeginInvoke(BinaryWriter bw, Double[] value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class NetTopologySuite.IO.WriteInt32Function : MulticastDelegate {
    public WriteInt32Function(object object, IntPtr method);
    public virtual void Invoke(BinaryWriter bw, Int32[] value);
    public virtual IAsyncResult BeginInvoke(BinaryWriter bw, Int32[] value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class NetTopologySuite.IO.WriteSingleFunction : MulticastDelegate {
    public WriteSingleFunction(object object, IntPtr method);
    public virtual void Invoke(BinaryWriter bw, Single[] value);
    public virtual IAsyncResult BeginInvoke(BinaryWriter bw, Single[] value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
