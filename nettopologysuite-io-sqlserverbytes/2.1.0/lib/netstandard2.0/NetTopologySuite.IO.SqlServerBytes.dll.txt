[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class NetTopologySuite.IO.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidGeographyHoleOrientation { get; }
    internal static string InvalidGeographyShellOrientation { get; }
    internal static string UnexpectedEndOfStream { get; }
    internal static string UnexpectedGeographyType { get; }
    internal static string UnexpectedGeographyVersion { get; }
    internal static string UnexpectedGeometryType { get; }
    internal static string UnexpectedOgcGeometryType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidGeographyHoleOrientation();
    internal static string get_InvalidGeographyShellOrientation();
    internal static string get_UnexpectedEndOfStream();
    internal static string get_UnexpectedGeographyType();
    internal static string get_UnexpectedGeographyVersion();
    internal static string get_UnexpectedGeometryType();
    internal static string get_UnexpectedOgcGeometryType();
}
internal class NetTopologySuite.IO.Serialization.Figure : object {
    [CompilerGeneratedAttribute]
private FigureAttribute <FigureAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PointOffset>k__BackingField;
    public FigureAttribute FigureAttribute { get; public set; }
    public int PointOffset { get; public set; }
    [CompilerGeneratedAttribute]
public FigureAttribute get_FigureAttribute();
    [CompilerGeneratedAttribute]
public void set_FigureAttribute(FigureAttribute value);
    [CompilerGeneratedAttribute]
public int get_PointOffset();
    [CompilerGeneratedAttribute]
public void set_PointOffset(int value);
    public static Figure ReadFrom(BinaryReader reader);
    public void WriteTo(BinaryWriter writer);
}
internal enum NetTopologySuite.IO.Serialization.FigureAttribute : Enum {
    public byte value__;
    public static FigureAttribute Unknown;
    public static FigureAttribute PointOrLine;
    public static FigureAttribute Arc;
    public static FigureAttribute Curve;
}
internal class NetTopologySuite.IO.Serialization.Geography : object {
    [CompilerGeneratedAttribute]
private int <SRID>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Point> <Points>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<double> <ZValues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<double> <MValues>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Figure> <Figures>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Shape> <Shapes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Segment> <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLargerThanAHemisphere>k__BackingField;
    public int SRID { get; public set; }
    public byte Version { get; public set; }
    public List`1<Point> Points { get; }
    public List`1<double> ZValues { get; }
    public List`1<double> MValues { get; }
    public List`1<Figure> Figures { get; }
    public List`1<Shape> Shapes { get; }
    public List`1<Segment> Segments { get; }
    public bool IsValid { get; public set; }
    public bool IsLargerThanAHemisphere { get; public set; }
    [CompilerGeneratedAttribute]
public int get_SRID();
    [CompilerGeneratedAttribute]
public void set_SRID(int value);
    [CompilerGeneratedAttribute]
public byte get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(byte value);
    [CompilerGeneratedAttribute]
public List`1<Point> get_Points();
    [CompilerGeneratedAttribute]
public List`1<double> get_ZValues();
    [CompilerGeneratedAttribute]
public List`1<double> get_MValues();
    [CompilerGeneratedAttribute]
public List`1<Figure> get_Figures();
    [CompilerGeneratedAttribute]
public List`1<Shape> get_Shapes();
    [CompilerGeneratedAttribute]
public List`1<Segment> get_Segments();
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
public void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLargerThanAHemisphere();
    [CompilerGeneratedAttribute]
public void set_IsLargerThanAHemisphere(bool value);
    public static Geography ReadFrom(BinaryReader reader);
    public void WriteTo(BinaryWriter writer);
}
internal enum NetTopologySuite.IO.Serialization.LegacyFigureAttribute : Enum {
    public byte value__;
    public static LegacyFigureAttribute InteriorRing;
    public static LegacyFigureAttribute Stroke;
    public static LegacyFigureAttribute ExteriorRing;
}
internal enum NetTopologySuite.IO.Serialization.OpenGisType : Enum {
    public byte value__;
    public static OpenGisType Unknown;
    public static OpenGisType Point;
    public static OpenGisType LineString;
    public static OpenGisType Polygon;
    public static OpenGisType MultiPoint;
    public static OpenGisType MultiLineString;
    public static OpenGisType MultiPolygon;
    public static OpenGisType GeometryCollection;
    public static OpenGisType CircularString;
    public static OpenGisType CompoundCurve;
    public static OpenGisType CurvePolygon;
    public static OpenGisType FullGlobe;
}
internal class NetTopologySuite.IO.Serialization.Point : object {
    private double _x;
    private double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Lat { get; public set; }
    public double Long { get; public set; }
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Lat();
    public void set_Lat(double value);
    public double get_Long();
    public void set_Long(double value);
    public static Point ReadFrom(BinaryReader reader);
    public void WriteTo(BinaryWriter writer);
}
internal class NetTopologySuite.IO.Serialization.Segment : object {
    [CompilerGeneratedAttribute]
private SegmentType <Type>k__BackingField;
    public SegmentType Type { get; public set; }
    [CompilerGeneratedAttribute]
public SegmentType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SegmentType value);
    public static Segment ReadFrom(BinaryReader reader);
    public void WriteTo(BinaryWriter writer);
}
internal enum NetTopologySuite.IO.Serialization.SegmentType : Enum {
    public byte value__;
    public static SegmentType Line;
    public static SegmentType Arc;
    public static SegmentType FirstLine;
    public static SegmentType FirstArc;
}
[FlagsAttribute]
internal enum NetTopologySuite.IO.Serialization.SerializationProperties : Enum {
    public byte value__;
    public static SerializationProperties None;
    public static SerializationProperties HasZValues;
    public static SerializationProperties HasMValues;
    public static SerializationProperties IsValid;
    public static SerializationProperties IsSinglePoint;
    public static SerializationProperties IsSingleLineSegment;
    public static SerializationProperties IsLargerThanAHemisphere;
}
internal class NetTopologySuite.IO.Serialization.Shape : object {
    [CompilerGeneratedAttribute]
private int <ParentOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FigureOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenGisType <Type>k__BackingField;
    public int ParentOffset { get; public set; }
    public int FigureOffset { get; public set; }
    public OpenGisType Type { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ParentOffset();
    [CompilerGeneratedAttribute]
public void set_ParentOffset(int value);
    [CompilerGeneratedAttribute]
public int get_FigureOffset();
    [CompilerGeneratedAttribute]
public void set_FigureOffset(int value);
    [CompilerGeneratedAttribute]
public OpenGisType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(OpenGisType value);
    public bool IsCollection();
    public static Shape ReadFrom(BinaryReader reader);
    public void WriteTo(BinaryWriter writer);
}
public class NetTopologySuite.IO.SqlServerBytesReader : object {
    private NtsGeometryServices _services;
    private CoordinateSequenceFactory _sequenceFactory;
    private Ordinates _handleOrdinates;
    [CompilerGeneratedAttribute]
private bool <IsGeography>k__BackingField;
    [ObsoleteAttribute("This is unused within this library and will be removed in a later version.  It was only needed when this type implemented an interface that no longer exists.")]
public bool RepairRings { get; public set; }
    [ObsoleteAttribute("This is unused within this library and will be removed in a later version.  It was only needed when this type implemented an interface that no longer exists.")]
public bool HandleSRID { get; public set; }
    public Ordinates AllowedOrdinates { get; }
    public Ordinates HandleOrdinates { get; public set; }
    public bool IsGeography { get; public set; }
    public SqlServerBytesReader(NtsGeometryServices services);
    public virtual bool get_RepairRings();
    public virtual void set_RepairRings(bool value);
    public virtual bool get_HandleSRID();
    public virtual void set_HandleSRID(bool value);
    public virtual Ordinates get_AllowedOrdinates();
    public virtual Ordinates get_HandleOrdinates();
    public virtual void set_HandleOrdinates(Ordinates value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsGeography();
    [CompilerGeneratedAttribute]
public virtual void set_IsGeography(bool value);
    public virtual Geometry Read(Byte[] source);
    public virtual Geometry Read(Stream stream);
    private Geometry ToGeometry(Geography geography);
}
public class NetTopologySuite.IO.SqlServerBytesWriter : object {
    private bool _emitZ;
    private bool _emitM;
    [CompilerGeneratedAttribute]
private bool <IsGeography>k__BackingField;
    [ObsoleteAttribute("This is unused within this library and will be removed in a later version.  It was only needed when this type implemented an interface that no longer exists.")]
public ByteOrder ByteOrder { get; public set; }
    [ObsoleteAttribute("This is unused within this library and will be removed in a later version.  It was only needed when this type implemented an interface that no longer exists.")]
public bool HandleSRID { get; public set; }
    [ObsoleteAttribute("This is unused within this library and will be removed in a later version.  It was only needed when this type implemented an interface that no longer exists.")]
public Ordinates AllowedOrdinates { get; }
    public Ordinates HandleOrdinates { get; public set; }
    public bool IsGeography { get; public set; }
    public virtual ByteOrder get_ByteOrder();
    public virtual void set_ByteOrder(ByteOrder value);
    public virtual bool get_HandleSRID();
    public virtual void set_HandleSRID(bool value);
    public virtual Ordinates get_AllowedOrdinates();
    public virtual Ordinates get_HandleOrdinates();
    public virtual void set_HandleOrdinates(Ordinates value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsGeography();
    [CompilerGeneratedAttribute]
public virtual void set_IsGeography(bool value);
    public virtual Byte[] Write(Geometry geometry);
    public virtual void Write(Geometry geometry, Stream stream);
    private Geography ToGeography(Geometry geometry);
    private OpenGisType ToOpenGisType(OgcGeometryType type);
    [CompilerGeneratedAttribute]
private bool <ToGeography>g__addFigure|19_0(Geometry g, FigureAttribute figureAttribute, <>c__DisplayClass19_0& );
}
