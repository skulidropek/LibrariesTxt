public interface MassTransit.INewIdFormatter {
    public abstract virtual string Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public interface MassTransit.INewIdGenerator {
    public abstract virtual NewId Next();
    public abstract virtual ArraySegment`1<NewId> Next(NewId[] ids, int index, int count);
    public abstract virtual Guid NextGuid();
    public abstract virtual Guid NextSequentialGuid();
}
public interface MassTransit.INewIdParser {
    public abstract virtual NewId Parse(String& modreq(System.Runtime.InteropServices.InAttribute) text);
}
public interface MassTransit.IProcessIdProvider {
    public abstract virtual Byte[] GetProcessId();
}
public interface MassTransit.ITickProvider {
    public long Ticks { get; }
    public abstract virtual long get_Ticks();
}
public interface MassTransit.IWorkerIdProvider {
    public abstract virtual Byte[] GetWorkerId(int index);
}
[IsReadOnlyAttribute]
public class MassTransit.NewId : ValueType {
    public static NewId Empty;
    private static INewIdFormatter BraceFormatter;
    private static INewIdFormatter DashedHexFormatter;
    private static INewIdFormatter HexFormatter;
    private static INewIdFormatter ParenFormatter;
    private static INewIdGenerator _generator;
    private static ITickProvider _tickProvider;
    private static IWorkerIdProvider _workerIdProvider;
    private static IProcessIdProvider _processIdProvider;
    private int _a;
    private int _b;
    private int _c;
    private int _d;
    private static ThreadLocal`1<Byte[]> _formatterArray;
    private static SpinLock _spinLock;
    private static IWorkerIdProvider WorkerIdProvider { get; }
    private static IProcessIdProvider ProcessIdProvider { get; }
    private static ITickProvider TickProvider { get; }
    public DateTime Timestamp { get; }
    public NewId(Byte[]& bytes);
    public NewId(String& value);
    public NewId(int a, int b, int c, int d);
    public NewId(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    private static NewId();
    private static IWorkerIdProvider get_WorkerIdProvider();
    private static IProcessIdProvider get_ProcessIdProvider();
    private static ITickProvider get_TickProvider();
    public DateTime get_Timestamp();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(NewId other);
    public sealed virtual bool Equals(NewId other);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public string ToString(INewIdFormatter formatter, bool sequential);
    private Byte[] GetFormatterArray();
    private Byte[] GetSequentialFormatterArray();
    public Guid ToGuid();
    public Guid ToSequentialGuid();
    public static NewId FromGuid(Guid& guid);
    public static NewId FromSequentialGuid(Guid& guid);
    public Byte[] ToByteArray();
    public virtual string ToString();
    public string ToString(string format);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NewId& left, NewId& right);
    public static bool op_Inequality(NewId& left, NewId& right);
    public static bool op_LessThan(NewId& left, NewId& right);
    public static bool op_GreaterThan(NewId& left, NewId& right);
    public static void SetGenerator(INewIdGenerator generator);
    public static void SetWorkerIdProvider(IWorkerIdProvider provider);
    public static void SetProcessIdProvider(IProcessIdProvider provider);
    public static void SetTickProvider(ITickProvider provider);
    private static INewIdGenerator _getGenerator();
    public static NewId Next();
    public static NewId[] Next(int count);
    public static ArraySegment`1<NewId> Next(NewId[] ids, int index, int count);
    public static Guid NextGuid();
    public static Guid NextSequentialGuid();
    private static void FromByteArray(Byte[]& bytes, Int32& a, Int32& b, Int32& c, Int32& d);
    private static void FromByteSpan(ReadOnlySpan`1<byte> span, NewId& newId);
    private static void FromSequentialByteArray(Byte[]& bytes, Int32& a, Int32& b, Int32& c, Int32& d);
    private static void FromSequentialByteSpan(ReadOnlySpan`1<byte> span, NewId& newId);
}
[ExtensionAttribute]
public static class MassTransit.NewIdExtensions : object {
    [ExtensionAttribute]
public static NewId ToNewId(Guid guid);
    [ExtensionAttribute]
public static NewId ToNewIdFromSequential(Guid guid);
}
public class MassTransit.NewIdFormatters.Base32Formatter : object {
    private static string LowerCaseChars;
    private static string UpperCaseChars;
    private string _chars;
    private bool _isUpperCase;
    private bool _isCustom;
    private Vector256`1<byte> _lower;
    private Vector256`1<byte> _upper;
    public Base32Formatter(bool upperCase);
    public Base32Formatter(String& chars);
    public string Format(Byte[]& bytes);
    private static void ConvertLongToBase32(Char* buffer, int offset, long value, int count, string chars);
    private static void EncodeKnown(ReadOnlySpan`1<byte> source, Span`1<char> destination, bool isUpperCase);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public class MassTransit.NewIdFormatters.DashedHexFormatter : object {
    private UInt32 _alpha;
    private int _length;
    private char _prefix;
    private char _suffix;
    private static UInt32 LowerCaseUInt;
    public DashedHexFormatter(char prefix, char suffix, bool upperCase);
    public string Format(Byte[]& bytes);
    private static void EncodeVector256(Span`1<char> span, ValueTuple`4<Byte[], bool, char, char> state);
    private static void HexToChar(byte value, Char* buffer, int startingIndex, UInt32 casing);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public class MassTransit.NewIdFormatters.HexFormatter : object {
    private UInt32 _alpha;
    private static UInt32 LowerCaseUInt;
    public HexFormatter(bool upperCase);
    public string Format(Byte[]& bytes);
    private static void HexToChar(byte value, Char* buffer, int startingIndex, UInt32 casing);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
internal static class MassTransit.NewIdFormatters.IntrinsicsHelper : object {
    public static void Vector128ToCharUtf16(Vector128`1<byte> value, Span`1<byte> destination);
    public static void Vector256ToCharUtf16(Vector256`1<byte> vec, Span`1<byte> destination);
    public static Vector256`1<byte> GetByteLutFromChar(Vector256`1<byte> value);
    public static Vector256`1<byte> EncodeBytesHex(Vector128`1<byte> vec, bool isUpper);
    public static void EncodeBase32(ReadOnlySpan`1<byte> span, Span`1<char> output, Vector256`1<byte> lowLut, Vector256`1<byte> upperLut);
    public static Vector256`1<byte> Split130Bits5x26(Vector256`1<byte> input);
    public static Vector256`1<byte> EncodeValuesBase32(Vector256`1<byte> x, Vector256`1<byte> lower, Vector256`1<byte> upper);
}
public class MassTransit.NewIdFormatters.ZBase32Formatter : object {
    private static string LowerCaseChars;
    private static string UpperCaseChars;
    private string _chars;
    private bool _isUpper;
    public ZBase32Formatter(bool upperCase);
    public string Format(Byte[]& bytes);
    private static void ConvertLongToBase32(Char* buffer, int offset, long value, int count, string chars);
    private static void EncodeKnownCase(ReadOnlySpan`1<byte> source, Span`1<char> destination, bool isUpperCase);
    private sealed virtual override string MassTransit.INewIdFormatter.Format(Byte[]& modreq(System.Runtime.InteropServices.InAttribute) bytes);
}
public class MassTransit.NewIdGenerator : object {
    private int _c;
    private int _d;
    private short _gb;
    private short _gc;
    private ITickProvider _tickProvider;
    private int _a;
    private int _b;
    private long _lastTick;
    private int _sequence;
    private SpinLock _spinLock;
    public NewIdGenerator(ITickProvider tickProvider, IWorkerIdProvider workerIdProvider, IProcessIdProvider processIdProvider, int workerIndex);
    public sealed virtual NewId Next();
    public sealed virtual Guid NextGuid();
    public sealed virtual Guid NextSequentialGuid();
    public sealed virtual ArraySegment`1<NewId> Next(NewId[] ids, int index, int count);
    private void UpdateTimestamp(long tick);
}
public class MassTransit.NewIdParsers.Base32Parser : object {
    private static string ConvertChars;
    private static string HexChars;
    private static string InvalidInputString;
    private static ThreadLocal`1<Char[]> _buffer;
    private string _chars;
    public Base32Parser(String& chars);
    private static Base32Parser();
    public NewId Parse(String& text);
    private static void ConvertLongToBase16(Char[]& buffer, int offset, long value, int count);
    private sealed virtual override NewId MassTransit.INewIdParser.Parse(String& modreq(System.Runtime.InteropServices.InAttribute) text);
}
public class MassTransit.NewIdParsers.ZBase32Parser : Base32Parser {
    private static string ConvertChars;
    private static string TransposeChars;
    public ZBase32Parser(bool handleTransposedCharacters);
}
public class MassTransit.NewIdProviders.BestPossibleWorkerIdProvider : object {
    public sealed virtual Byte[] GetWorkerId(int index);
}
public class MassTransit.NewIdProviders.CurrentProcessIdProvider : object {
    public sealed virtual Byte[] GetProcessId();
}
public class MassTransit.NewIdProviders.DateTimeTickProvider : object {
    public long Ticks { get; }
    public sealed virtual long get_Ticks();
}
public class MassTransit.NewIdProviders.HostNameHashWorkerIdProvider : object {
    public sealed virtual Byte[] GetWorkerId(int index);
    private static Byte[] GetNetworkAddress();
}
public class MassTransit.NewIdProviders.NetworkAddressWorkerIdProvider : object {
    public sealed virtual Byte[] GetWorkerId(int index);
    private static Byte[] GetNetworkAddress(int index);
}
public class MassTransit.NewIdProviders.StopwatchTickProvider : object {
    private DateTime _start;
    private Stopwatch _stopwatch;
    public long Ticks { get; }
    public sealed virtual long get_Ticks();
}
