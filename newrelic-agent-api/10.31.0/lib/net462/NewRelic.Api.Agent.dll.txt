[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.Agent : object {
    private static IAgent _noOpAgent;
    [DynamicAttribute]
private object _wrappedAgent;
    private static bool _isCurrentTransactionAvailable;
    private static bool _isCurrentSpanAvailable;
    private static bool _isTraceMetadataAvailable;
    private static bool _isGetLinkingMetadataAvailable;
    public ITransaction CurrentTransaction { get; }
    public ISpan CurrentSpan { get; }
    public ITraceMetadata TraceMetadata { get; }
    private static Agent();
    internal void SetWrappedAgent(object agentBridge);
    public sealed virtual ITransaction get_CurrentTransaction();
    public sealed virtual ISpan get_CurrentSpan();
    public sealed virtual ITraceMetadata get_TraceMetadata();
    public sealed virtual Dictionary`2<string, string> GetLinkingMetadata();
}
public static class NewRelic.Api.Agent.Constants : object {
    [NullableAttribute("1")]
public static string DistributedTracePayloadKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.DistributedTracePayload : object {
    private static IDistributedTracePayload _noOpDistributedTracePayload;
    [DynamicAttribute]
private object _wrappedPayload;
    internal DistributedTracePayload(object wrappedPayload);
    private static DistributedTracePayload();
    public sealed virtual string HttpSafe();
    public sealed virtual string Text();
    public sealed virtual bool IsEmpty();
}
[NullableContextAttribute("1")]
public interface NewRelic.Api.Agent.IAgent {
    public ITransaction CurrentTransaction { get; }
    public ISpan CurrentSpan { get; }
    public ITraceMetadata TraceMetadata { get; }
    public abstract virtual ITransaction get_CurrentTransaction();
    public abstract virtual ISpan get_CurrentSpan();
    public abstract virtual ITraceMetadata get_TraceMetadata();
    public abstract virtual Dictionary`2<string, string> GetLinkingMetadata();
}
[NullableContextAttribute("1")]
public interface NewRelic.Api.Agent.IDistributedTracePayload {
    public abstract virtual string HttpSafe();
    public abstract virtual string Text();
    public abstract virtual bool IsEmpty();
}
[NullableContextAttribute("1")]
public interface NewRelic.Api.Agent.ISpan {
    public abstract virtual ISpan AddCustomAttribute(string key, object value);
    public abstract virtual ISpan SetName(string name);
}
[NullableContextAttribute("1")]
public interface NewRelic.Api.Agent.ITraceMetadata {
    public string TraceId { get; }
    public string SpanId { get; }
    public bool IsSampled { get; }
    public abstract virtual string get_TraceId();
    public abstract virtual string get_SpanId();
    public abstract virtual bool get_IsSampled();
}
[NullableContextAttribute("1")]
public interface NewRelic.Api.Agent.ITransaction {
    public ISpan CurrentSpan { get; }
    public abstract virtual void AcceptDistributedTraceHeaders(T carrier, Func`3<T, string, IEnumerable`1<string>> getter, TransportType transportType);
    public abstract virtual void InsertDistributedTraceHeaders(T carrier, Action`3<T, string, string> setter);
    public abstract virtual ITransaction AddCustomAttribute(string key, object value);
    public abstract virtual ISpan get_CurrentSpan();
    public abstract virtual void SetUserId(string userid);
    [NullableContextAttribute("2")]
public abstract virtual SegmentWrapper RecordDatastoreSegment(string vendor, string model, string operation, string commandText, string host, string portPathOrID, string databaseName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NewRelic.Api.Agent.NewRelic : object {
    private static IAgent _publicAgent;
    private static NewRelic();
    private static void InitializePublicAgent(object publicAgent);
    public static IAgent GetAgent();
    public static void RecordMetric(string name, float value);
    public static void RecordResponseTimeMetric(string name, long millis);
    public static void IncrementCounter(string name);
    public static void NoticeError(Exception exception, IDictionary`2<string, string> parameters);
    public static void NoticeError(Exception exception, IDictionary`2<string, object> parameters);
    public static void NoticeError(Exception exception);
    public static void NoticeError(string message, IDictionary`2<string, string> parameters);
    public static void NoticeError(string message, IDictionary`2<string, object> parameters);
    public static void NoticeError(string message, IDictionary`2<string, string> parameters, bool isExpected);
    public static void NoticeError(string message, IDictionary`2<string, object> parameters, bool isExpected);
    public static void SetTransactionName(string category, string name);
    public static void SetTransactionUri(Uri uri);
    public static void IgnoreTransaction();
    public static void IgnoreApdex();
    public static string GetBrowserTimingHeader();
    public static string GetBrowserTimingHeader(string nonce);
    public static void DisableBrowserMonitoring(bool overrideManual);
    [NullableContextAttribute("2")]
public static void SetUserParameters(string userName, string accountName, string productName);
    public static void RecordCustomEvent(string eventType, IEnumerable`1<KeyValuePair`2<string, object>> attributes);
    public static void StartAgent();
    [NullableContextAttribute("2")]
public static void SetApplicationName(string applicationName, string applicationName2, string applicationName3);
    public static IEnumerable`1<KeyValuePair`2<string, string>> GetRequestMetadata();
    public static IEnumerable`1<KeyValuePair`2<string, string>> GetResponseMetadata();
    public static void SetErrorGroupCallback(Func`2<IReadOnlyDictionary`2<string, object>, string> callback);
    public static void SetLlmTokenCountingCallback(Func`3<string, string, int> callback);
    public static void RecordLlmFeedbackEvent(string traceId, object rating, string category, string message, IDictionary`2<string, object> metadata);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.NoOpAgent : object {
    private static ITransaction _noOpTransaction;
    private static ITraceMetadata _noOpTraceMetadata;
    public ITransaction CurrentTransaction { get; }
    public ISpan CurrentSpan { get; }
    private ITraceMetadata NewRelic.Api.Agent.IAgent.TraceMetadata { get; }
    private static NoOpAgent();
    public sealed virtual ITransaction get_CurrentTransaction();
    public sealed virtual ISpan get_CurrentSpan();
    private sealed virtual override ITraceMetadata NewRelic.Api.Agent.IAgent.get_TraceMetadata();
    public sealed virtual Dictionary`2<string, string> GetLinkingMetadata();
}
internal class NewRelic.Api.Agent.NoOpDistributedTracePayload : object {
    [NullableContextAttribute("1")]
public sealed virtual string HttpSafe();
    [NullableContextAttribute("1")]
public sealed virtual string Text();
    public sealed virtual bool IsEmpty();
}
internal class NewRelic.Api.Agent.NoOpSpan : object {
    [NullableContextAttribute("1")]
public sealed virtual ISpan AddCustomAttribute(string key, object value);
    [NullableContextAttribute("1")]
public sealed virtual ISpan SetName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.NoOpTraceMetadata : object {
    public string TraceId { get; }
    public string SpanId { get; }
    public bool IsSampled { get; }
    public sealed virtual string get_TraceId();
    public sealed virtual string get_SpanId();
    public sealed virtual bool get_IsSampled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.NoOpTransaction : object {
    private static ISpan _noOpSpan;
    public ISpan CurrentSpan { get; }
    private static NoOpTransaction();
    public sealed virtual ITransaction AddCustomAttribute(string key, object value);
    public sealed virtual void InsertDistributedTraceHeaders(T carrier, Action`3<T, string, string> setter);
    public sealed virtual void AcceptDistributedTraceHeaders(T carrier, Func`3<T, string, IEnumerable`1<string>> getter, TransportType transportType);
    public sealed virtual ISpan get_CurrentSpan();
    public sealed virtual void SetUserId(string userid);
    [NullableContextAttribute("2")]
public sealed virtual SegmentWrapper RecordDatastoreSegment(string vendor, string model, string operation, string commandText, string host, string portPathOrID, string databaseName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NewRelic.Api.Agent.SegmentWrapper : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Object modreq(System.Runtime.CompilerServices.IsVolatile) _segment;
    private SegmentWrapper(object segment);
    public static SegmentWrapper GetDatastoreWrapper(object transaction, string vendor, string model, string operation, string commandText, string host, string portPathOrID, string databaseName);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.Span : object {
    [DynamicAttribute]
private object _wrappedSpan;
    private static ISpan _noOpSpan;
    private static bool _isAddCustomAttributeAvailable;
    private static bool _isSetNameAvailable;
    [NullableContextAttribute("2")]
internal Span(object wrappedSpan);
    private static Span();
    public sealed virtual ISpan AddCustomAttribute(string key, object value);
    public sealed virtual ISpan SetName(string name);
}
[AttributeUsageAttribute("64")]
public class NewRelic.Api.Agent.TraceAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.TraceMetadata : object {
    private static ITraceMetadata _noOpTraceMetadata;
    [DynamicAttribute]
private object _wrappedTraceMetadata;
    public string TraceId { get; }
    public string SpanId { get; }
    public bool IsSampled { get; }
    internal TraceMetadata(object wrappedTraceMetadata);
    private static TraceMetadata();
    public sealed virtual string get_TraceId();
    public sealed virtual string get_SpanId();
    public sealed virtual bool get_IsSampled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NewRelic.Api.Agent.Transaction : object {
    [DynamicAttribute]
private object _wrappedTransaction;
    private static ITransaction _noOpTransaction;
    private static bool _isAcceptDistributedTraceHeadersAvailable;
    private static bool _isInsertDistributedTraceHeadersAvailable;
    private static bool _isAddCustomAttributeAvailable;
    private static bool _isCurrentSpanAvailable;
    private static bool _isSetUserIdAvailable;
    private static bool _isCreateDatastoreSegmentAvailable;
    public ISpan CurrentSpan { get; }
    [NullableContextAttribute("2")]
internal Transaction(object wrappedTransaction);
    private static Transaction();
    public sealed virtual void AcceptDistributedTraceHeaders(T carrier, Func`3<T, string, IEnumerable`1<string>> getter, TransportType transportType);
    public sealed virtual void InsertDistributedTraceHeaders(T carrier, Action`3<T, string, string> setter);
    public sealed virtual ITransaction AddCustomAttribute(string key, object value);
    public sealed virtual ISpan get_CurrentSpan();
    public sealed virtual void SetUserId(string userid);
    [NullableContextAttribute("2")]
public sealed virtual SegmentWrapper RecordDatastoreSegment(string vendor, string model, string operation, string commandText, string host, string portPathOrID, string databaseName);
}
[AttributeUsageAttribute("64")]
public class NewRelic.Api.Agent.TransactionAttribute : TraceAttribute {
    [CompilerGeneratedAttribute]
private bool <Web>k__BackingField;
    public bool Web { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Web();
    [CompilerGeneratedAttribute]
public void set_Web(bool value);
}
public enum NewRelic.Api.Agent.TransportType : Enum {
    public int value__;
    public static TransportType Unknown;
    public static TransportType HTTP;
    public static TransportType HTTPS;
    public static TransportType Kafka;
    public static TransportType JMS;
    public static TransportType IronMQ;
    public static TransportType AMQP;
    public static TransportType Queue;
    public static TransportType Other;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
