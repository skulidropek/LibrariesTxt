[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.AspNet.ClassicPipeline.CreateEventExecutionStepsWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private void BeforeEvent(MethodCall methodCall, IAgent agent, string eventName, HttpApplication httpApplication);
    private void AfterEvent(MethodCall methodCall, IAgent agent, string eventName, HttpApplication httpApplication);
    private object GetBeforeExecutionStep(MethodCall methodCall, IAgent agent, string eventName, HttpApplication httpApplication);
    private object GetAfterExecutionStep(MethodCall methodCall, IAgent agent, string eventName, HttpApplication httpApplication);
    private static EventHandler GetExceptionSafeEventHandler(EventHandler eventHandler, IAgent agent);
}
public class NewRelic.Providers.Wrapper.AspNet.IntegratedPipeline.ExecuteStepWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private ITransaction TryCreateTransaction(IAgent agent, HttpContext httpContext, string requestNotification);
}
public class NewRelic.Providers.Wrapper.AspNet.IntegratedPipeline.FinishPipelineRequestWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AspNet.Shared.AspPagesTransactionNameWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AspNet.Shared.CallHandlerWrapper : object {
    public static string WrapperName;
    private Func`2<object, HttpApplication> _getHttpApplication;
    public Func`2<object, HttpApplication> GetHttpApplication { get; }
    public bool IsTransactionRequired { get; }
    public Func`2<object, HttpApplication> get_GetHttpApplication();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AspNet.Shared.FilterWrapper : object {
    public static string WrapperName;
    private static string BrowerAgentInjectedKey;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static Stream TryGetStreamInjector(IAgent agent, HttpContext httpContext);
}
public static class NewRelic.Providers.Wrapper.AspNet.Shared.HttpContextActions : object {
    public static string HttpContextSegmentKey;
    public static string HttpContextSegmentTypeKey;
    public static Type HttpResponseStreamFilterSinkType;
    private static Func`2<HttpWorkerRequest, DateTime> _getStartTime;
    private static Func`2<HttpWorkerRequest, DateTime> GetStartTime { get; }
    private static HttpContextActions();
    private static Func`2<HttpWorkerRequest, DateTime> get_GetStartTime();
    public static void TransactionStartup(IAgent agent, HttpContext httpContext);
    private static void SetFilterHack(HttpContext httpContext);
    public static void TransactionShutdown(IAgent agent, HttpContext httpContext);
    private static void StoreQueueTime(IAgent agent, HttpContext httpContext);
    private static void StoreRequestMethod(IAgent agent, HttpContext httpContext);
    private static void StoreUrls(IAgent agent, HttpContext httpContext);
    private static Uri TryGetReferrerUri(HttpRequest request);
    private static void StoreRequestHeaders(IAgent agent, HttpContext httpContext);
    private static void StoreRequestParameters(IAgent agent, HttpContext httpContext);
    private static void NameTransaction(IAgent agent, HttpContext httpContext);
    private static void ProcessHeaders(IAgent agent, HttpContext httpContext);
    private static void TryWriteResponseHeaders(IAgent agent, HttpContext httpContext);
    private static void SetStatusCode(IAgent agent, HttpContext httpContext);
    private static Nullable`1<int> TryGetSubStatusCode(HttpContext httpContext);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <ProcessHeaders>g__GetHeaderValue|16_0(HttpContext context, string key);
}
public class NewRelic.Providers.Wrapper.AspNet.Shared.OnErrorWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public static class NewRelic.Providers.Wrapper.AspNet.Shared.QueryStringRetriever : object {
    private static Func`2<HttpRequest, NameValueCollection> EnsureQueryString;
    private static Func`2<HttpRequest, NameValueCollection> GetQueryStringBackingField;
    private static QueryStringRetriever();
    private static NameValueCollection TryGetQueryString(HttpRequest request, IAgent agent);
    public static IDictionary`2<string, string> TryGetQueryStringAsDictionary(HttpRequest request, IAgent agent);
}
public static class NewRelic.Providers.Wrapper.AspNet.Shared.RequestPathRetriever : object {
    private static Func`2<HttpRequest, string> GetUnvalidatedRequestPath;
    private static RequestPathRetriever();
    public static string TryGetRequestPath(HttpRequest request);
}
public static class NewRelic.Providers.Wrapper.AspNet.Shared.RequestUrlRetriever : object {
    private static Func`3<HttpRequest, Func`1<string>, Uri> GetUnvalidatedRequestUrl;
    private static RequestUrlRetriever();
    public static Uri TryGetRequestUrl(HttpRequest request, Func`1<string> pathAccessor);
}
public class NewRelic.Providers.Wrapper.AspNet.Shared.RouteNamingWrapper : object {
    public string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
