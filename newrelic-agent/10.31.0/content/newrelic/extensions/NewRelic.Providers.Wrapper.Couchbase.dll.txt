[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.Couchbase.CouchbaseDefaultWrapper : object {
    private Func`2<object, string> _getMethodInfo;
    public Func`2<object, string> GetMethodInfo { get; }
    public bool IsTransactionRequired { get; }
    public Func`2<object, string> get_GetMethodInfo();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Couchbase.CouchbaseDefaultWrapperAsync : object {
    private Func`2<object, string> _getMethodInfo;
    public Func`2<object, string> GetMethodInfo { get; }
    public bool IsTransactionRequired { get; }
    public Func`2<object, string> get_GetMethodInfo();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public static class NewRelic.Providers.Wrapper.Couchbase.CouchbaseHelper : object {
    private static Func`2<object, string> _getBucketName;
    private static Func`2<object, string> _getStatement;
    public static string GetBucketName(object owner);
    public static string GetStatement(object parm, string parameterTypeName);
}
public class NewRelic.Providers.Wrapper.Couchbase.CouchbaseQueryWrapper : object {
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Couchbase.CouchbaseQueryWrapperAsync : object {
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
