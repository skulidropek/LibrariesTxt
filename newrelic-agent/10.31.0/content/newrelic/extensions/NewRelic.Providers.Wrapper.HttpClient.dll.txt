[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.HttpClient.SendAsync : object {
    private static string AssemblyName;
    private static string HttpClientTypeName;
    private static string SocketsHttpHandlerTypeName;
    private static string SendAsyncMethodName;
    private static string SendMethodName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static Uri TryGetAbsoluteUri(HttpRequestMessage httpRequestMessage, HttpClient httpClient);
    private static void TryAttachHeadersToRequest(IAgent agent, HttpRequestMessage httpRequestMessage);
    private static void TryProcessResponse(IAgent agent, Task`1<HttpResponseMessage> response, ITransaction transaction, ISegment segment, IExternalSegmentData externalSegmentData);
    private static void TryProcessResponse(IAgent agent, HttpResponseMessage response, ITransaction transaction, ISegment segment, IExternalSegmentData externalSegmentData);
    private static bool ValidTaskResponse(Task`1<HttpResponseMessage> response);
    private static KeyValuePair`2<string, string> Flatten(KeyValuePair`2<string, IEnumerable`1<string>> header);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
