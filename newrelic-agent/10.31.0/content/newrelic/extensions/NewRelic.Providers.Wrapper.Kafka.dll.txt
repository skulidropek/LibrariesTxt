[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.Kafka.KafkaBuilderWrapper : object {
    private ConcurrentDictionary`2<Type, Func`2<object, IEnumerable>> _builderConfigGetterDictionary;
    private static string WrapperName;
    private static string BootstrapServersKey;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo instrumentedMethodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Kafka.KafkaConsumerWrapper : object {
    private static string WrapperName;
    private static string BrokerVendorName;
    private static ConcurrentDictionary`2<Type, Func`2<object, string>> TopicAccessorDictionary;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> MessageAccessorDictionary;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> KeyAccessorDictionary;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> ValueAccessorDictionary;
    public bool IsTransactionRequired { get; }
    private static KafkaConsumerWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static long GetHeadersSize(Headers headers);
    private static void ReportSizeMetrics(IAgent agent, ITransaction transaction, string topic, long headersSize, object messageAsObject);
    private static Func`2<object, string> GetTopicAccessorFunc(Type t);
    private static Func`2<object, object> GetMessageAccessorFunc(Type t);
    private static Func`2<object, object> GetKeyAccessorFunc(Type t);
    private static Func`2<object, object> GetValueAccessorFunc(Type t);
    private static IEnumerable`1<string> DistributedTraceHeadersGetter(MessageMetadata carrier, string key);
    private static long TryGetSize(object obj);
}
internal static class NewRelic.Providers.Wrapper.Kafka.KafkaHelper : object {
    private static ConcurrentDictionary`2<object, List`1<string>> _bootstrapServerCache;
    private static KafkaHelper();
    public static void AddBootstrapServersToCache(object producerOrConsumerInstance, string bootStrapServers);
    public static bool TryGetBootstrapServersFromCache(object producerOrConsumerInstance, List`1& kafkaBootstrapServers);
    public static void RecordKafkaNodeMetrics(IAgent agent, string topicName, List`1<string> bootstrapServers, bool isProducer);
}
public class NewRelic.Providers.Wrapper.Kafka.KafkaProducerWrapper : object {
    private static string WrapperName;
    private static string BrokerVendorName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static void DistributedTraceHeadersSetter(MessageMetadata carrier, string key, string value);
}
public class NewRelic.Providers.Wrapper.Kafka.KafkaSerializerWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
