[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.Sql.DataReaderAsyncWrapper : DataReaderWrapperBase {
    private static String[] _tracerNames;
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    private static DataReaderAsyncWrapper();
    public virtual String[] get_WrapperNames();
    public virtual bool get_ExecuteAsAsync();
}
public class NewRelic.Providers.Wrapper.Sql.DataReaderWrapper : DataReaderWrapperBase {
    private static String[] _tracerNames;
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    private static DataReaderWrapper();
    public virtual String[] get_WrapperNames();
    public virtual bool get_ExecuteAsAsync();
}
public abstract class NewRelic.Providers.Wrapper.Sql.DataReaderWrapperBase : object {
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    public bool IsTransactionRequired { get; }
    public abstract virtual String[] get_WrapperNames();
    public abstract virtual bool get_ExecuteAsAsync();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Sql.OdbcCommandWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Sql.OleDbCommandWrapper : object {
    public static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Sql.OpenConnectionAsyncWrapper : OpenConnectionWrapperBase {
    private static String[] _tracerNames;
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    private static OpenConnectionAsyncWrapper();
    public virtual String[] get_WrapperNames();
    public virtual bool get_ExecuteAsAsync();
}
public class NewRelic.Providers.Wrapper.Sql.OpenConnectionWrapper : OpenConnectionWrapperBase {
    private static String[] _tracerNames;
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    private static OpenConnectionWrapper();
    public virtual String[] get_WrapperNames();
    public virtual bool get_ExecuteAsAsync();
}
public abstract class NewRelic.Providers.Wrapper.Sql.OpenConnectionWrapperBase : object {
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    public bool IsTransactionRequired { get; }
    public abstract virtual String[] get_WrapperNames();
    public abstract virtual bool get_ExecuteAsAsync();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Sql.SqlCommandAsyncWrapper : SqlCommandWrapperBase {
    private static String[] _tracerNames;
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    private static SqlCommandAsyncWrapper();
    public virtual String[] get_WrapperNames();
    public virtual bool get_ExecuteAsAsync();
}
public class NewRelic.Providers.Wrapper.Sql.SqlCommandWrapper : SqlCommandWrapperBase {
    private static String[] _tracerNames;
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    private static SqlCommandWrapper();
    public virtual String[] get_WrapperNames();
    public virtual bool get_ExecuteAsAsync();
}
public abstract class NewRelic.Providers.Wrapper.Sql.SqlCommandWrapperBase : object {
    public String[] WrapperNames { get; }
    public bool ExecuteAsAsync { get; }
    public bool IsTransactionRequired { get; }
    public abstract virtual String[] get_WrapperNames();
    public abstract virtual bool get_ExecuteAsAsync();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
