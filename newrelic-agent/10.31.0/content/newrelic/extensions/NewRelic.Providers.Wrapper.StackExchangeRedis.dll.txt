[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class NewRelic.Providers.Wrapper.StackExchangeRedis.Common : object {
    private static string MessageTypeName;
    private static string CommandPropertyName;
    public static string ConnectionMultiplexerTypeName;
    private static string RawConfigPropertyName;
    private static string ConfigurationOptionsTypeName;
    private static string EndPointsPropertyName;
    public static string RedisAssemblyName;
    public static string RedisAssemblyStrongName;
    private static Func`2<object, Enum> _redisMessageCommandAccessor;
    private static Func`2<object, Enum> _strongNameMessageCommandAccessor;
    private static Func`2<object, object> _redisRawConfigAccessor;
    private static Func`2<object, object> _strongNameRawConfigAccessor;
    private static Func`2<object, Collection`1<EndPoint>> _redisEndPointsAccessor;
    private static Func`2<object, Collection`1<EndPoint>> _strongNameEndPointsAccessor;
    private static ConcurrentDictionary`2<Enum, string> _commandNameCache;
    private static Common();
    private static Func`2<object, Enum> GetMessageCommandAccessor(string assemblyName);
    private static Func`2<object, Enum> GetRedisMessageCommandAccessor();
    private static Func`2<object, Enum> GetStrongNameMessageCommandAccessor();
    public static string GetRedisCommand(MethodCall methodCall, string assemblyName);
    public static ConnectionInfo GetConnectionInfoFromConnectionMultiplexer(MethodCall methodCall, string assemblyName, string utilizationHostName);
    private static string GetCommandNameFromEnumValue(Enum commandValue);
    private static Func`2<object, object> GetRawConfigAccessor(string assemblyName);
    private static Func`2<object, object> GetRawConfigAccessor();
    private static Func`2<object, object> GetStrongNameRawConfigAccessor();
    private static Func`2<object, Collection`1<EndPoint>> GetEndPointsAccessor(string assemblyName);
    private static Func`2<object, Collection`1<EndPoint>> GetEndPointsAccessor();
    private static Func`2<object, Collection`1<EndPoint>> GetStrongNameEndPointsAccessor();
}
public abstract class NewRelic.Providers.Wrapper.StackExchangeRedis.ExecuteAsyncImplWrapper : object {
    public string AssemblyName { get; }
    public bool IsTransactionRequired { get; }
    public abstract virtual string get_AssemblyName();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public abstract class NewRelic.Providers.Wrapper.StackExchangeRedis.ExecuteSyncImplWrapper : object {
    protected string AssemblyName { get; }
    public bool IsTransactionRequired { get; }
    protected abstract virtual string get_AssemblyName();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.StackExchangeRedis.RedisExecuteAsyncImplWrapper : ExecuteAsyncImplWrapper {
    public string AssemblyName { get; }
    public virtual string get_AssemblyName();
}
public class NewRelic.Providers.Wrapper.StackExchangeRedis.RedisExecuteSyncImplWrapper : ExecuteSyncImplWrapper {
    protected string AssemblyName { get; }
    protected virtual string get_AssemblyName();
}
public class NewRelic.Providers.Wrapper.StackExchangeRedis.RedisStrongNameExecuteAsyncImplWrapper : ExecuteAsyncImplWrapper {
    public string AssemblyName { get; }
    public virtual string get_AssemblyName();
}
public class NewRelic.Providers.Wrapper.StackExchangeRedis.RedisStrongNameExecuteSyncImplWrapper : ExecuteSyncImplWrapper {
    protected string AssemblyName { get; }
    protected virtual string get_AssemblyName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
