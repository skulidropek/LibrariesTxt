[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.Wcf3.ChannelFactoryWrapper : object {
    private static List`1<Type> _bindingsSent;
    private static object _bindingLock;
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    private static ChannelFactoryWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo instrumentedMethodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static void TrySendBindingMetric(Type bindingType, IAgent agent);
}
public class NewRelic.Providers.Wrapper.Wcf3.DispatcherBuilderWrapper : object {
    private static string AssemblyName;
    private static string TypeName;
    private static string MethodName;
    private static string WrapperName;
    private static object _bindingLock;
    public bool IsTransactionRequired { get; }
    private static DispatcherBuilderWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.Wcf3.MethodInvokerWrapper : object {
    private static object _wrapperToken;
    private static string AssemblyName;
    private static string SyncTypeName;
    private static string AsyncTypeName;
    private static string TAPTypeName;
    private static string TAPTypeNameShort;
    private static string SyncMethodName;
    private static string InvokeBeginMethodName;
    private static string InvokeEndMethodName;
    private static string InvokeAsyncMethodName;
    private static string WrapperName;
    private Dictionary`2<string, string> _methodNameInvocationTypesDic;
    private String[] _methodNamesStart;
    private String[] _methodNamesEndTrx;
    private List`1<string> _rptSupMetric_InvocType;
    private object _rptSupMetric_InvocType_Lock;
    public bool IsTransactionRequired { get; }
    private static MethodInvokerWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    private static IEnumerable`1<string> ExtractHeaderValue(OperationContext context, string key);
    private string GetHeaderValueFromWebHeaderCollection(NameValueCollection headers, string key);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private void CaptureHttpRequestHeadersAndMethod(IAgent agent, ITransaction transaction);
    private void ReportSupportabilityMetric_InvocationMethod(IAgent agent, string methodName);
    private void ProcessResponse(ITransaction transaction, OperationContext context);
    private void AddHeaderToHttpResponsePropertyForOutgoingMessage(KeyValuePair`2<string, string> header, OperationContext context);
    private string GetTransactionName(IAgent agent, Uri uri, MethodInfo methodInfo);
    private MethodInfo TryGetMethodInfo(InstrumentedMethodCall instrumentedMethodCall);
    private string GetTypeName(MethodInfo methodInfo);
    private string GetMethodName(MethodInfo methodInfo);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetParameters(MethodCall methodCall, MethodInfo methodInfo, Object[] arguments, IAgent agent);
}
public class NewRelic.Providers.Wrapper.Wcf3.NewRelicClientMessageInspector : object {
    private static string AppDataHttpHeader;
    private IAgent _agent;
    private Type _bindingType;
    public NewRelicClientMessageInspector(IAgent agent, Type bindingType);
    public sealed virtual void AfterReceiveReply(Message& reply, object correlationState);
    private void SetHeaders(HttpRequestMessageProperty carrier, string key, string value);
    private void SetHeaders(Message carrier, string key, string value);
    public sealed virtual object BeforeSendRequest(Message& request, IClientChannel channel);
}
public class NewRelic.Providers.Wrapper.Wcf3.NewRelicEndpointBehavior : object {
    private IAgent _agent;
    private Type _bindingType;
    public NewRelicEndpointBehavior(IAgent agent, Type bindingType);
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
}
public class NewRelic.Providers.Wrapper.Wcf3.ServiceChannelProxyWrapper : object {
    private static string ServiceModelAssembly;
    private static string ServiceModelInternalsAssembly;
    private static string ServiceChannelProxyType;
    private static string MethodDataType;
    private static string AsyncResultType;
    private static string InvokeMethod;
    private static string WrapperName;
    private Func`2<object, IServiceChannel> _getServiceChannel;
    private Func`2<object, AsyncCallback> _getAsyncCallbackReadAccessor;
    private Action`2<object, AsyncCallback> _setAsyncCallbackWriteAccessor;
    private Func`2<object, Exception> _getAsyncCallbackException;
    private Func`3<object, IMethodCallMessage, object> _getMethodDataMethod;
    private static MethodInfo _methodTypeMethodInfo;
    private static object _serviceEnum;
    private static object _beginServiceEnum;
    private static object _taskServiceEnum;
    private static object _invocationLock;
    private static List`1<string> _invocationsSent;
    public bool IsTransactionRequired { get; }
    private static ServiceChannelProxyWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    private Func`2<object, IServiceChannel> GetServiceChannel();
    private Func`2<object, AsyncCallback> GetAsyncCallbackReadAccessor();
    private Action`2<object, AsyncCallback> SetAsyncCallbackWriteAccessor();
    private Func`2<object, Exception> GetAsyncCallbackException();
    private Func`3<object, IMethodCallMessage, object> GetMethodDataMethod();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static string GetName(MethodCall methodCall);
    private Uri GetUri(InstrumentedMethodCall instrumentedMethodCall);
    private static bool IsProtocolException(Exception e);
    private static void TrySendInvocationMetric(string style, IAgent agent);
}
public static class NewRelic.Providers.Wrapper.Wcf3.SystemBindingTypes : object {
    private static List`1<Type> _systemBindingTypes;
    private static SystemBindingTypes();
    public static bool Contains(Type bindingType);
}
public class NewRelic.Providers.Wrapper.Wcf3.WcfIgnoreOuterTransactionWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static bool ShouldIgnoreTransaction(MethodCall methodCall);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
