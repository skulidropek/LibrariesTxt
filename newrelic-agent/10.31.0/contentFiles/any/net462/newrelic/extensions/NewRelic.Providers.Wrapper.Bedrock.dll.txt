[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.Bedrock.InvokeModelAsyncWrapper : object {
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> _getResultFromGenericTask;
    private static ConcurrentDictionary`2<string, string> _libraryVersions;
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    private static InvokeModelAsyncWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private string GetOrAddLibraryVersion(string assemblyFullName);
    private static object GetTaskResult(object task);
    private void ProcessInvokeModel(ISegment segment, object invokeModelRequest, object invokeModelResponse, IAgent agent);
    private void HandleError(ISegment segment, object invokeModelRequest, Task responseTask, IAgent agent);
    private static IRequestPayload GetRequestPayload(object invokeModelRequest);
    private static IResponsePayload GetResponsePayload(string modelId, object invokeModelResponse);
}
public enum NewRelic.Providers.Wrapper.Bedrock.LlmModelType : Enum {
    public int value__;
    public static LlmModelType Llama2;
    public static LlmModelType CohereCommand;
    public static LlmModelType Claude;
    public static LlmModelType Titan;
    public static LlmModelType TitanEmbedded;
    public static LlmModelType Jurassic;
}
[ExtensionAttribute]
public static class NewRelic.Providers.Wrapper.Bedrock.LlmModelTypeExtensions : object {
    [ExtensionAttribute]
public static LlmModelType FromModelId(string modelId);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
