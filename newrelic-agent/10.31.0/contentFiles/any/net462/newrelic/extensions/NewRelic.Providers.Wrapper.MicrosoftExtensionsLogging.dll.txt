[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class MicrosoftExtensionsLogging.AddProviderRegistrationWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.MicrosoftExtensionsLogging.MicrosoftLoggingWrapper : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<object, object> _getLoggersArray;
    private static PropertyInfo _scopeProviderPropertyInfo;
    private static bool _contextDataNotSupported;
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private void RecordLogMessage(MethodCall methodCall, ILogger logger, IAgent agent);
    private static Dictionary`2<string, object> GetContextData(ILogger logger, IAgent agent);
    private AfterWrappedMethodDelegate DecorateLogMessage(ILogger logger, IAgent agent);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
