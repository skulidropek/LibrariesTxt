[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.MongoDb26.AsyncCursorWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.MongoDb26.MongoCollectionBaseWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.MongoDb26.MongoCollectionImplWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.MongoDb26.MongoDatabaseWrapper : object {
    private static string WrapperName;
    private static HashSet`1<string> CanExtractModelNameMethods;
    public bool IsTransactionRequired { get; }
    private static MongoDatabaseWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private string TryGetModelName(InstrumentedMethodCall instrumentedMethodCall);
}
public static class NewRelic.Providers.Wrapper.MongoDb26.MongoDbHelper : object {
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> _collectionNamespaceGetterMap;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> _collectionGetterMap;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> _channelSourceGetterMap;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> _databaseGetterMap;
    private static ConcurrentDictionary`2<Type, Func`2<object, object>> _serverGetterMap;
    private static Func`2<object, string> _getCollectionName;
    private static Func`2<object, object> _getDatabaseNamespaceFromCollectionNamespace;
    private static Func`2<object, object> _getDatabaseNamespaceFromDatabase;
    private static Func`2<object, string> _getDatabaseName;
    private static Func`2<object, EndPoint> _getEndPoint;
    private static Func`2<object, object> _getClient;
    private static Func`2<object, object> _getSettings;
    private static Func`2<object, IList> _getServers;
    private static Func`2<object, string> _getHost;
    private static Func`2<object, int> _getPort;
    private static MongoDbHelper();
    public static string GetCollectionName(object collectionNamespace);
    public static string GetDatabaseNameFromCollectionNamespace(object collectionNamespace);
    public static string GetDatabaseNameFromDatabase(object database);
    private static string GetDatabaseNameFromDatabaseNamespace(object databaseNamespace);
    private static EndPoint GetEndPoint(object owner);
    public static object GetCollectionNamespaceFieldFromGeneric(object owner);
    public static object GetCollectionNamespacePropertyFromGeneric(object owner);
    public static object GetCollectionFieldFromGeneric(object owner);
    private static object GetChannelSourceFieldFromGeneric(object owner);
    public static object GetDatabaseFromGeneric(object owner);
    private static object GetServerFromFromInterface(object owner);
    public static ConnectionInfo GetConnectionInfoFromCursor(object asyncCursor, object collectionNamespace, string utilizationHostName);
    public static ConnectionInfo GetConnectionInfoFromDatabase(object database, string utilizationHostName);
    private static IList GetServersFromDatabase(object database);
    private static void GetHostAndPortFromServer(object server, String& host, Int32& port);
}
public class NewRelic.Providers.Wrapper.MongoDb26.MongoIndexManagerBaseWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.MongoDb26.MongoIndexManagerWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.MongoDb26.MongoQueryProviderImplWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
