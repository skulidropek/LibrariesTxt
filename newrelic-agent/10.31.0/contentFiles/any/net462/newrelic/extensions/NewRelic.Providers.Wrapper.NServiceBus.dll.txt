[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.NServiceBus.LoadHandlersConnectorWrapper : object {
    private static string BrokerVendorName;
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.NServiceBus.NServiceBusHelpers : object {
    private static Func`2<object, Dictionary`2<string, string>> _getHeadersSendMessageFunc;
    private static Func`2<object, Dictionary`2<string, string>> _getHeadersPipelineFunc;
    private static Func`2<object, Dictionary`2<string, string>> _getHeadersReceiveMessageFunc;
    private static Func`2<object, object> _getIncomingLogicalMessageFunc;
    private static Func`2<object, object> _getMessageFromIncomingLogicalMessageContextFunc;
    private static Func`2<object, Dictionary`2<string, string>> _getHeadersFromIncomingLogicalMessageContextFunc;
    private static Func`2<object, object> _getMessageFromOutgoingSendContextFunc;
    private static Func`2<object, object> _getMessageFromOutgoingPublishContextFunc;
    public static string OutgoingSendContextTypeName;
    public static string OutgoingPublishContextTypeName;
    private static Func`2<object, Type> _getMessageTypeSendMessageFunc;
    private static Func`2<object, Type> _getMessageTypePipelineFunc;
    private static Func`2<object, Type> _getMessageTypeReceiveMessageFunc;
    private static Func`2<object, Type> _getMessageTypeLoadHandlersConnectorFunc;
    public static object GetMessageFromOutgoingContext(object outgoingContext);
    public static object GetMessageFromIncomingLogicalMessageContext(object incomingLogicalMessageContext);
    public static Dictionary`2<string, string> GetHeadersFromIncomingLogicalMessageContext(object incomingLogicalMessageContext);
    public static object GetIncomingLogicalMessage(object incomingContext);
    public static Dictionary`2<string, string> GetHeadersReceiveMessage(object logicalMessage);
    public static void ProcessHeaders(Dictionary`2<string, string> headers, IAgent agent);
    public static void CreateOutboundHeadersSendMessage(IAgent agent, object logicalMessage);
    public static void CreateOutboundHeadersPipeline(IAgent agent, object logicalMessage);
    private static void CreateOutboundHeaders(IAgent agent, object logicalMessage, Func`2<object, Dictionary`2<string, string>> getHeaders);
    public static string TryGetQueueNameSendMessage(object logicalMessage);
    public static string TryGetQueueNamePipeline(object logicalMessage);
    public static string TryGetQueueNameReceiveMessage(object logicalMessage);
    public static string TryGetQueueNameLoadHandlersConnector(object logicalMessage);
    private static string TryGetQueueName(object logicalMessage, Func`2<object, Type> getMessageType);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <ProcessHeaders>g__GetHeaderValue|19_0(Dictionary`2<string, string> carrier, string key);
    [CompilerGeneratedAttribute]
internal static void <CreateOutboundHeaders>g__SetHeaders|22_1(object logicalMessage, Dictionary`2<string, string> headers);
}
public class NewRelic.Providers.Wrapper.NServiceBus.PipelineWrapper : object {
    private static string BrokerVendorName;
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.NServiceBus.ReceiveMessageWrapper : object {
    private static string BrokerVendorName;
    private static string WrapperName;
    private static int IncomingContextIndex;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.NServiceBus.SendMessageWrapper : object {
    private static string WrapperName;
    private static string BrokerVendorName;
    private static string LogicalMessageType;
    private static int LogicalMessageIndex;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
