[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class NewRelic.Providers.Wrapper.AspNetCore.AddNewRelicStartupFilter : object {
    private IAgent _agent;
    public AddNewRelicStartupFilter(IAgent agent);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
public class NewRelic.Providers.Wrapper.AspNetCore.BuildCommonServicesWrapper : object {
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AspNetCore.GenericHostWebHostBuilderExtensionsWrapper : object {
    private static int _isNewRelicStartupFilterAdded;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AspNetCore.InvokeActionMethodAsyncWrapper : object {
    private Func`2<object, ControllerContext> _getControllerContext;
    public bool IsTransactionRequired { get; }
    private Func`2<object, ControllerContext> GetControllerContext(string typeName);
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static string CreateTransactionName(ControllerActionDescriptor actionDescriptor);
}
internal class NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware : object {
    private RequestDelegate _next;
    private IAgent _agent;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _inspectingHttpContextForErrorsIsEnabled;
    public WrapPipelineMiddleware(RequestDelegate next, IAgent agent);
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.AspNetCore.WrapPipelineMiddleware/<Invoke>d__4")]
public Task Invoke(HttpContext context);
    private string GetHeaderValue(IHeaderDictionary headers, string key);
    private void EndTransaction(ISegment segment, ITransaction transaction, HttpContext context, Exception appException);
    private ISegment SetupSegment(ITransaction transaction, HttpContext context);
    private ITransaction SetupTransaction(HttpRequest request);
    private void ProcessHeaders(HttpContext httpContext);
    private void TryWriteResponseHeaders(HttpContext httpContext, ITransaction transaction);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <ProcessHeaders>g__GetHeaderValue|9_0(HttpContext context, string key);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
