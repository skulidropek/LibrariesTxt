[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class NewRelic.Providers.Wrapper.AspNetCore6Plus.AddNewRelicStartupFilter : object {
    private IAgent _agent;
    public AddNewRelicStartupFilter(IAgent agent);
    public sealed virtual Action`1<IApplicationBuilder> Configure(Action`1<IApplicationBuilder> next);
}
public class NewRelic.Providers.Wrapper.AspNetCore6Plus.BrowserInjectingStreamWrapper : Stream {
    private IAgent _agent;
    private Stream _baseStream;
    private HttpContext _context;
    private bool _isContentLengthSet;
    [CompilerGeneratedAttribute]
private static bool <Disabled>k__BackingField;
    private static string InjectingRUM;
    [CompilerGeneratedAttribute]
private bool <CanRead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanSeek>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Position>k__BackingField;
    private Nullable`1<bool> _isHtmlResponse;
    public static bool Disabled { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BrowserInjectingStreamWrapper(IAgent agent, Stream baseStream, HttpContext context);
    [CompilerGeneratedAttribute]
public static bool get_Disabled();
    [CompilerGeneratedAttribute]
public static void set_Disabled(bool value);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual void WriteByte(byte value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.AspNetCore6Plus.BrowserInjectingStreamWrapper/<WriteAsync>d__18")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    private void FinishInjecting();
    private void StartInjecting();
    private bool CurrentlyInjecting();
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.AspNetCore6Plus.BrowserInjectingStreamWrapper/<DisposeAsync>d__23")]
public virtual ValueTask DisposeAsync();
    [CompilerGeneratedAttribute]
public virtual bool get_CanRead();
    [CompilerGeneratedAttribute]
public virtual bool get_CanSeek();
    [CompilerGeneratedAttribute]
public virtual bool get_CanWrite();
    [CompilerGeneratedAttribute]
public virtual long get_Length();
    [CompilerGeneratedAttribute]
public virtual long get_Position();
    [CompilerGeneratedAttribute]
public virtual void set_Position(long value);
    private bool IsHtmlResponse(bool forceReCheck);
    private void LogExceptionAndDisable(Exception e);
}
internal class NewRelic.Providers.Wrapper.AspNetCore6Plus.BrowserInjectionMiddleware : object {
    private RequestDelegate _next;
    private IAgent _agent;
    public BrowserInjectionMiddleware(RequestDelegate next, IAgent agent);
    public Task Invoke(HttpContext context);
}
public class NewRelic.Providers.Wrapper.AspNetCore6Plus.BuildCommonServicesWrapper6Plus : object {
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AspNetCore6Plus.GenericHostWebHostBuilderExtensionsWrapper6Plus : object {
    private static int _isNewRelicStartupFilterAdded;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    public void AddStartupFilterToHostBuilder(object hostBuilder, IAgent agent);
}
public class NewRelic.Providers.Wrapper.AspNetCore6Plus.InvokeActionMethodAsyncWrapper6Plus : object {
    private Func`2<object, ControllerContext> _getControllerContext;
    public bool IsTransactionRequired { get; }
    private Func`2<object, ControllerContext> GetControllerContext(string typeName);
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static string CreateTransactionName(ControllerActionDescriptor actionDescriptor);
}
public class NewRelic.Providers.Wrapper.AspNetCore6Plus.PageActionInvokeHandlerAsyncWrapper6Plus : object {
    private static Func`2<object, PageContext> _getPageContext;
    public bool IsTransactionRequired { get; }
    private static PageActionInvokeHandlerAsyncWrapper6Plus();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private static string CreateTransactionName(CompiledPageActionDescriptor actionDescriptor);
}
public class NewRelic.Providers.Wrapper.AspNetCore6Plus.ResponseCompressionBodyOnWriteWrapper : object {
    private static Func`2<object, Stream> _compressionStreamFieldGetter;
    private static Action`2<object, Stream> _compressionStreamFieldSetter;
    private static Func`2<object, HttpContext> _contextFieldGetter;
    public bool IsTransactionRequired { get; }
    private static ResponseCompressionBodyOnWriteWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo instrumentedMethodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
internal class NewRelic.Providers.Wrapper.AspNetCore6Plus.WrapPipelineMiddleware : object {
    private RequestDelegate _next;
    private IAgent _agent;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _inspectingHttpContextForErrorsIsEnabled;
    private static bool _loggedDisabledMessage;
    public WrapPipelineMiddleware(RequestDelegate next, IAgent agent);
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.AspNetCore6Plus.WrapPipelineMiddleware/<Invoke>d__5")]
public Task Invoke(HttpContext context);
    private string GetHeaderValue(IHeaderDictionary headers, string key);
    private void EndTransaction(ISegment segment, ITransaction transaction, HttpContext context, Exception appException);
    private ISegment SetupSegment(ITransaction transaction, HttpContext context);
    private ITransaction SetupTransaction(HttpRequest request);
    private void ProcessHeaders(HttpContext httpContext);
    private void TryWriteResponseHeaders(HttpContext httpContext, ITransaction transaction);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <ProcessHeaders>g__GetHeaderValue|10_0(HttpContext context, string key);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
