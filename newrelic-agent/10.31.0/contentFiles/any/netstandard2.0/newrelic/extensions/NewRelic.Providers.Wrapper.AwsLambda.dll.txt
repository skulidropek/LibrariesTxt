[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.AwsLambda.HandlerMethodWrapper : object {
    private List`1<string> _webResponseHeaders;
    private static Func`2<object, object> _getRequestResponseFromGeneric;
    private static object _initLock;
    private static FunctionDetails _functionDetails;
    private static bool _coldStart;
    private ConcurrentHashSet`1<string> _unexpectedResponseTypes;
    private ConcurrentHashSet`1<string> _unsupportedInputTypes;
    public bool IsTransactionRequired { get; }
    private static bool IsColdStart { get; }
    private static HandlerMethodWrapper();
    public sealed virtual bool get_IsTransactionRequired();
    private static bool get_IsColdStart();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    private void InitLambdaData(InstrumentedMethodCall instrumentedMethodCall, IAgent agent);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private void CaptureResponseData(ITransaction transaction, object response, IAgent agent);
    private static bool ValidTaskResponse(Task response);
}
public class NewRelic.Providers.Wrapper.AwsLambda.OpenTracingWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
