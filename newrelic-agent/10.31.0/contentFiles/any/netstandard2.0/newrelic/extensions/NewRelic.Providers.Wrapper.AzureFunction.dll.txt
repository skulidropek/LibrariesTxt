[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class NewRelic.Providers.Wrapper.AzureFunction.FunctionDetails : object {
    private static MethodInfo _bindFunctionInputAsync;
    private static MethodInfo _genericFunctionInputBindingFeatureGetter;
    private static Nullable`1<bool> _hasAspNetCoreExtensionsReference;
    private static ConcurrentDictionary`2<string, string> _functionTriggerCache;
    private static Func`2<object, object> _functionDefinitionGetter;
    private static Func`2<object, object> _parametersGetter;
    private static Func`2<object, IReadOnlyDictionary`2<string, object>> _propertiesGetter;
    private static string AspNetCoreExtensionsAssemblyName;
    private static string IFunctionInputBindingFeatureTypeName;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Trigger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestPath>k__BackingField;
    public string FunctionName { get; }
    public string Trigger { get; }
    public string InvocationId { get; }
    public bool IsWebTrigger { get; }
    public string RequestMethod { get; private set; }
    public string RequestPath { get; private set; }
    public Nullable`1<bool> HasAspNetCoreExtensionReference { get; }
    public FunctionDetails(object functionContext, IAgent agent);
    private static FunctionDetails();
    private void ParseHttpTriggerParameters(IAgent agent, object functionContext);
    public bool IsValid();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public string get_Trigger();
    [CompilerGeneratedAttribute]
public string get_InvocationId();
    public bool get_IsWebTrigger();
    [CompilerGeneratedAttribute]
public string get_RequestMethod();
    [CompilerGeneratedAttribute]
private void set_RequestMethod(string value);
    [CompilerGeneratedAttribute]
public string get_RequestPath();
    [CompilerGeneratedAttribute]
private void set_RequestPath(string value);
    public Nullable`1<bool> get_HasAspNetCoreExtensionReference();
}
public class NewRelic.Providers.Wrapper.AzureFunction.FunctionsHttpProxyingMiddlewareWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.AzureFunction.InvokeFunctionAsyncWrapper : object {
    private static MethodInfo _getInvocationResultMethod;
    private static bool _loggedDisabledMessage;
    private static string WrapperName;
    private static bool _coldStart;
    private static string FunctionContextBindingFeatureExtensionsTypeName;
    private static bool IsColdStart { get; }
    public bool IsTransactionRequired { get; }
    private static InvokeFunctionAsyncWrapper();
    private static bool get_IsColdStart();
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[ExtensionAttribute]
public static class NewRelic.Providers.Wrapper.AzureFunction.TriggerTypeExtensions : object {
    [ExtensionAttribute]
public static string ResolveTriggerType(string triggerTypeName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
