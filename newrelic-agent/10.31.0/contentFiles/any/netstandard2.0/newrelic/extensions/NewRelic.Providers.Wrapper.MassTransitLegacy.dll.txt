[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.MassTransitLegacy.NewRelicFilter : object {
    private static string SendMethodName;
    private static string MessageBrokerVendorName;
    private Method _consumeMethod;
    private Method _publishMethod;
    private Method _sendMethod;
    private IAgent _agent;
    public NewRelicFilter(IAgent agent);
    public sealed virtual void Probe(ProbeContext context);
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.MassTransitLegacy.NewRelicFilter/<Send>d__8")]
public sealed virtual Task Send(ConsumeContext context, IPipe`1<ConsumeContext> next);
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.MassTransitLegacy.NewRelicFilter/<Send>d__9")]
public sealed virtual Task Send(PublishContext context, IPipe`1<PublishContext> next);
    [AsyncStateMachineAttribute("NewRelic.Providers.Wrapper.MassTransitLegacy.NewRelicFilter/<Send>d__10")]
public sealed virtual Task Send(SendContext context, IPipe`1<SendContext> next);
    public static void InsertDistributedTraceHeaders(SendHeaders headers, ITransaction transaction);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <Send>g__GetHeaderValue|8_0(Headers carrier, string key);
}
public class NewRelic.Providers.Wrapper.MassTransitLegacy.NewRelicPipeSpecification : object {
    private IAgent _agent;
    public NewRelicPipeSpecification(IAgent agent);
    public sealed virtual IEnumerable`1<ValidationResult> Validate();
    public sealed virtual void Apply(IPipeBuilder`1<ConsumeContext> builder);
    public sealed virtual void Apply(IPipeBuilder`1<PublishContext> builder);
    public sealed virtual void Apply(IPipeBuilder`1<SendContext> builder);
}
public class NewRelic.Providers.Wrapper.MassTransitLegacy.TransportConfigLegacyWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
