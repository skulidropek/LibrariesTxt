[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class NewRelic.Providers.Wrapper.RabbitMq.BasicGetWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.RabbitMq.BasicPublishWrapper : object {
    private static string WrapperName;
    private static int BasicPropertiesIndex;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.RabbitMq.BasicPublishWrapperLegacy : object {
    private static string WrapperName;
    private static int BasicPropertiesIndex;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.RabbitMq.HandleBasicDeliverWrapper : object {
    private static string WrapperName;
    private static Func`2<object, object> _modelGetter;
    private static Func`2<object, object> _sessionGetter;
    private static Func`2<object, object> _framingConnectionGetter;
    private static Func`2<object, object> _autorecoveringConnectionGetter5OrOlder;
    private static Func`2<object, object> _autorecoveringConnectionGetter6OrNewer;
    private static Func`2<object, object> _endpointGetter;
    private static Func`2<object, string> _hostnameGetter;
    private static Func`2<object, int> _portGetter;
    private ConcurrentDictionary`2<Type, Func`3<Type, object, object>> _connectionGetter;
    private static bool _hasGetServerFailed;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
    private void GetServerDetails(InstrumentedMethodCall instrumentedMethodCall, String& hostname, Nullable`1& port, IAgent agent);
    [CompilerGeneratedAttribute]
internal static Func`3<Type, object, object> <GetServerDetails>g__GetConnectionForType|15_0(Type modelType);
    [CompilerGeneratedAttribute]
internal static object <GetServerDetails>g__GetConnectionFromFramingModel|15_1(Type modelType, object model);
    [CompilerGeneratedAttribute]
internal static object <GetServerDetails>g__GetConnectionFromAutorecoveryModel5OrOlder|15_2(Type modelType, object model);
    [CompilerGeneratedAttribute]
internal static object <GetServerDetails>g__GetConnectionFromAutorecoveryModel6OrNewer|15_3(Type modelType, object model);
}
public class NewRelic.Providers.Wrapper.RabbitMq.QueuePurgeWrapper : object {
    private static string WrapperName;
    public bool IsTransactionRequired { get; }
    public sealed virtual bool get_IsTransactionRequired();
    public sealed virtual CanWrapResponse CanWrap(InstrumentedMethodInfo methodInfo);
    public sealed virtual AfterWrappedMethodDelegate BeforeWrappedMethod(InstrumentedMethodCall instrumentedMethodCall, IAgent agent, ITransaction transaction);
}
public class NewRelic.Providers.Wrapper.RabbitMq.RabbitMqHelper : object {
    private static string TempQueuePrefix;
    private static string BasicPropertiesType;
    public static string VendorName;
    public static string AssemblyName;
    public static string TypeName;
    private static Func`2<object, object> _sessionGetter;
    private static Func`2<object, object> _connectionGetter;
    private static Func`2<object, object> _endpointGetter;
    private static Func`2<object, string> _hostnameGetter;
    private static Func`2<object, int> _portGetter;
    private static Func`2<object, object> _getHeadersFunc;
    private static Nullable`1<int> _version;
    private static bool _hasGetServerFailed;
    public static IDictionary`2<string, object> GetHeaders(object properties);
    public static void SetHeaders(object properties, IDictionary`2<string, object> headers);
    public static MessageBrokerDestinationType GetBrokerDestinationType(string queueNameOrRoutingKey);
    public static string ResolveDestinationName(MessageBrokerDestinationType destinationType, string queueNameOrRoutingKey);
    public static ISegment CreateSegmentForPublishWrappers(InstrumentedMethodCall instrumentedMethodCall, ITransaction transaction, int basicPropertiesIndex, IAgent agent);
    public static ISegment CreateSegmentForPublishWrappers6Plus(InstrumentedMethodCall instrumentedMethodCall, ITransaction transaction, int basicPropertiesIndex, IAgent agent);
    public static int GetRabbitMQVersion(InstrumentedMethodCall methodCall);
    public static int GetRabbitMQVersion(Type type);
    public static string GetServerAddress(InstrumentedMethodCall instrumentedMethodCall, IAgent agent);
    public static Nullable`1<int> GetServerPort(InstrumentedMethodCall instrumentedMethodCall, IAgent agent);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
