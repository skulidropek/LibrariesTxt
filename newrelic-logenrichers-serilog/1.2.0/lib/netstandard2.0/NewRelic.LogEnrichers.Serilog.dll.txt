[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class NewRelic.LogEnrichers.DateTimeExtensions : object {
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static long TicksPerMinute;
    private static long TicksPerHour;
    private static long TicksPerDay;
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1970;
    private static long UnixEpochTicks;
    private static long UnixEpochMilliseconds;
    private static DateTime Epoch;
    private static DateTimeExtensions();
    [ExtensionAttribute]
public static long ToUnixTimeMilliseconds(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime FromUnixTimeMilliseconds(long unixTimeMilliseconds);
    [ExtensionAttribute]
public static double ToUnixTimeSeconds(DateTime dateTime);
    [ExtensionAttribute]
public static DateTime ToDateTime(double secondsSinceEpoch);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NewRelic.LogEnrichers.LoggingExtensions : object {
    public static string UserPropertyPrefix;
    [NullableAttribute("2")]
private static NewRelicLoggingProperty[] _allNewRelicLoggingProperties;
    public static NewRelicLoggingProperty[] AllNewRelicLoggingProperties { get; }
    [ExtensionAttribute]
public static string GetOutputName(NewRelicLoggingProperty property);
    public static NewRelicLoggingProperty[] get_AllNewRelicLoggingProperties();
}
public enum NewRelic.LogEnrichers.NewRelicLoggingProperty : Enum {
    public int value__;
    public static NewRelicLoggingProperty ThreadId;
    public static NewRelicLoggingProperty Timestamp;
    public static NewRelicLoggingProperty ErrorMessage;
    public static NewRelicLoggingProperty ErrorClass;
    public static NewRelicLoggingProperty ErrorStack;
    public static NewRelicLoggingProperty MessageText;
    public static NewRelicLoggingProperty MessageTemplate;
    public static NewRelicLoggingProperty LogLevel;
    public static NewRelicLoggingProperty ThreadName;
    public static NewRelicLoggingProperty FileName;
    public static NewRelicLoggingProperty NameSpace;
    public static NewRelicLoggingProperty ClassName;
    public static NewRelicLoggingProperty MethodName;
    public static NewRelicLoggingProperty LineNumber;
    public static NewRelicLoggingProperty CorrelationId;
    public static NewRelicLoggingProperty ProcessId;
    public static NewRelicLoggingProperty LoggerName;
}
public class NewRelic.LogEnrichers.Serilog.NewRelicEnricher : object {
    private static string LinkingMetadataKey;
    private Lazy`1<IAgent> _nrAgent;
    internal NewRelicEnricher(Func`1<IAgent> agentFactory);
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
public class NewRelic.LogEnrichers.Serilog.NewRelicFormatter : object {
    private static string LinkingMetadataKey;
    private static char JsonOpen;
    private static char JsonClose;
    private static char JsonDelim;
    private static char JsonColon;
    private static char JsonAtSign;
    private static ScalarValue JsonNull;
    private static Dictionary`2<LogEventLevel, string> _cacheLogLevelNames;
    private JsonValueFormatter _valueFormatter;
    private Dictionary`2<string, string> _propertyMappings;
    private NewRelicLoggingProperty[] _reservedProperties;
    private string _userPropertyPrefix;
    private static NewRelicFormatter();
    public NewRelicFormatter WithPropertyMapping(string propertyName, NewRelicLoggingProperty outputAsNewRelicProperty);
    public NewRelicFormatter WithUserPropertyPrefix(string userPropertyPrefix);
    public sealed virtual void Format(LogEvent logEvent, TextWriter output);
    private void WriteIntrinsicProperties(LogEvent logEvent, TextWriter output);
    private void WriteExceptionProperties(Exception exception, TextWriter output);
    private void WriteLinkingMetadataProperties(LogEventPropertyValue nrPropValues, TextWriter output);
    private void WriteUserProperties(LogEvent logEvent, TextWriter output);
    private void WriteTimestamp(long unixTimestampValue, TextWriter output);
    private void WriteFormattedJsonData(string key, LogEventPropertyValue value, TextWriter output);
    private void WriteFormattedJsonData(string key, object value, TextWriter output);
}
[ExtensionAttribute]
public static class NewRelic.LogEnrichers.Serilog.SerilogExtensions : object {
    [ExtensionAttribute]
public static LoggerConfiguration WithNewRelicLogsInContext(LoggerEnrichmentConfiguration enricherConfig);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
