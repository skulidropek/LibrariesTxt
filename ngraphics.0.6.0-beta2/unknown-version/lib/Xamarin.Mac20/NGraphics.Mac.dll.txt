public class NGraphics.ApplePlatform : object {
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual Task`1<Stream> OpenFileStreamForWritingAsync(string path);
    public sealed virtual IImageCanvas CreateImageCanvas(Size size, double scale, bool transparency);
    public sealed virtual IImage CreateImage(Color[] colors, int width, double scale);
    public sealed virtual IImage LoadImage(Stream stream);
    public sealed virtual IImage LoadImage(string path);
    public static TextMetrics GlobalMeasureText(string text, Font font);
    public sealed virtual TextMetrics MeasureText(string text, Font font);
}
public class NGraphics.CGBitmapContextCanvas : CGContextCanvas {
    private CGBitmapContext context;
    private double scale;
    public Size Size { get; }
    public Size SizeInPixels { get; }
    public double Scale { get; }
    public CGBitmapContextCanvas(CGBitmapContext context, double scale);
    public sealed virtual Size get_Size();
    public Size get_SizeInPixels();
    public sealed virtual double get_Scale();
    public sealed virtual IImage GetImage();
}
public class NGraphics.CGContextCanvas : object {
    private CGContext context;
    private static NSString NSFontAttributeName;
    public CGContext Context { get; }
    public CGContextCanvas(CGContext context);
    private static CGContextCanvas();
    public CGContext get_Context();
    public sealed virtual void SaveState();
    public sealed virtual void Transform(Transform transform);
    public sealed virtual void RestoreState();
    private CGGradient CreateGradient(IList`1<GradientStop> stops);
    public sealed virtual TextMetrics MeasureText(string text, Font font);
    public sealed virtual void DrawText(string text, Rect frame, Font font, TextAlignment alignment, Pen pen, Brush brush);
    private void DrawElement(Func`1<Rect> add, Pen pen, Brush brush);
    private static bool IsValid(double v);
    public sealed virtual void DrawPath(IEnumerable`1<PathOp> ops, Pen pen, Brush brush);
    private void AddRoundedRect(CGRect rrect, CGSize corner);
    public sealed virtual void DrawRectangle(Rect frame, Size corner, Pen pen, Brush brush);
    public sealed virtual void DrawEllipse(Rect frame, Pen pen, Brush brush);
    public sealed virtual void DrawImage(IImage image, Rect frame, double alpha);
    private CGPathDrawingMode SetPenAndBrush(Pen pen, Brush brush);
    private void SetPen(Pen pen);
    private void SetBrush(Brush brush);
}
public class NGraphics.CGImageImage : object {
    private CGImage image;
    private double scale;
    private Size size;
    public CGImage Image { get; }
    public double Scale { get; }
    public Size Size { get; }
    public CGImageImage(CGImage image, double scale);
    public CGImage get_Image();
    public sealed virtual double get_Scale();
    public sealed virtual Size get_Size();
    public sealed virtual void SaveAsPng(string path);
    public sealed virtual void SaveAsPng(Stream stream);
}
[ExtensionAttribute]
public static class NGraphics.Conversions : object {
    [ExtensionAttribute]
public static CGPoint GetCGPoint(Point point);
    [ExtensionAttribute]
public static Point GetPoint(CGPoint point);
    [ExtensionAttribute]
public static Point ToPoint(CGPoint point);
    [ExtensionAttribute]
public static Size GetSize(CGSize size);
    [ExtensionAttribute]
public static CGSize GetCGSize(Size size);
    [ExtensionAttribute]
public static CGRect GetCGRect(Rect frame);
    [ExtensionAttribute]
public static Rect GetRect(CGRect rect);
    [ExtensionAttribute]
public static CTFont GetCTFont(Font font);
    [ExtensionAttribute]
public static CGColor GetCGColor(Color color);
    [ExtensionAttribute]
public static Color GetColor(CGColor color);
    [ExtensionAttribute]
public static NSImage GetNSImage(IImage image);
}
[ExtensionAttribute]
public static class NGraphics.GraphicFilesEx : object {
    [AsyncStateMachineAttribute("NGraphics.GraphicFilesEx/<WriteSvgAsync>d__0")]
[ExtensionAttribute]
public static Task WriteSvgAsync(Graphic g, string path);
}
public static class NGraphics.Platforms : object {
    private static IPlatform nulll;
    private static IPlatform current;
    public static IPlatform Null { get; }
    public static IPlatform Current { get; }
    private static Platforms();
    public static IPlatform get_Null();
    public static IPlatform get_Current();
}
