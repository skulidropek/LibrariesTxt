public class NGraphics.BitmapCanvas : GraphicsCanvas {
    private Bitmap bitmap;
    private double scale;
    public Size Size { get; }
    public double Scale { get; }
    public BitmapCanvas(Bitmap bitmap, double scale);
    public sealed virtual Size get_Size();
    public sealed virtual double get_Scale();
    public sealed virtual IImage GetImage();
}
[ExtensionAttribute]
public static class NGraphics.Conversions : object {
    [ExtensionAttribute]
public static Color GetColor(Color color);
    [ExtensionAttribute]
public static Pen GetPen(Pen pen);
    private static ColorBlend BuildBlend(List`1<GradientStop> stops, bool reverse);
    [ExtensionAttribute]
public static Brush GetBrush(Brush brush, Rect frame);
    [ExtensionAttribute]
public static PointF GetPointF(Point point);
    [ExtensionAttribute]
public static RectangleF GetRectangleF(Rect frame);
    [ExtensionAttribute]
public static Rectangle GetRectangle(Rect frame);
    public static float RadToDeg(float rad);
}
[ExtensionAttribute]
public static class NGraphics.GraphicFilesEx : object {
    [AsyncStateMachineAttribute("NGraphics.GraphicFilesEx/<WriteSvgAsync>d__0")]
[ExtensionAttribute]
public static Task WriteSvgAsync(Graphic g, string path);
}
public class NGraphics.GraphicsCanvas : object {
    protected Graphics graphics;
    private Stack`1<GraphicsState> stateStack;
    public GraphicsCanvas(Graphics graphics);
    public sealed virtual void SaveState();
    public sealed virtual void Transform(Transform transform);
    public sealed virtual void RestoreState();
    public sealed virtual TextMetrics MeasureText(string text, Font font);
    public sealed virtual void DrawText(string text, Rect frame, Font font, TextAlignment alignment, Pen pen, Brush brush);
    public sealed virtual void DrawPath(IEnumerable`1<PathOp> ops, Pen pen, Brush brush);
    public sealed virtual void DrawRectangle(Rect frame, Size corner, Pen pen, Brush brush);
    public sealed virtual void DrawEllipse(Rect frame, Pen pen, Brush brush);
    public sealed virtual void DrawImage(IImage image, Rect frame, double alpha);
}
public class NGraphics.ImageImage : object {
    private Image image;
    public Image Image { get; }
    public Size Size { get; }
    public double Scale { get; }
    public ImageImage(Image image);
    public Image get_Image();
    public sealed virtual void SaveAsPng(string path);
    public sealed virtual void SaveAsPng(Stream stream);
    public sealed virtual Size get_Size();
    public sealed virtual double get_Scale();
}
public static class NGraphics.Platforms : object {
    private static IPlatform nulll;
    private static IPlatform current;
    public static IPlatform Null { get; }
    public static IPlatform Current { get; }
    private static Platforms();
    public static IPlatform get_Null();
    public static IPlatform get_Current();
}
public class NGraphics.SystemDrawingPlatform : object {
    private Graphics measureGraphics;
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual Task`1<Stream> OpenFileStreamForWritingAsync(string path);
    public sealed virtual IImageCanvas CreateImageCanvas(Size size, double scale, bool transparency);
    public sealed virtual IImage LoadImage(Stream stream);
    public sealed virtual IImage LoadImage(string path);
    public sealed virtual IImage CreateImage(Color[] colors, int width, double scale);
    public static TextMetrics GlobalMeasureText(Graphics graphics, string text, Font font);
    public sealed virtual TextMetrics MeasureText(string text, Font font);
}
